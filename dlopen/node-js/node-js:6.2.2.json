{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/src/node.cc": "#include \"node.h\"\n#include \"node_buffer.h\"\n#include \"node_constants.h\"\n#include \"node_file.h\"\n#include \"node_http_parser.h\"\n#include \"node_javascript.h\"\n#include \"node_version.h\"\n#include \"node_internals.h\"\n#include \"node_revert.h\"\n\n#if defined HAVE_PERFCTR\n#include \"node_counters.h\"\n#endif\n\n#if HAVE_OPENSSL\n#include \"node_crypto.h\"\n#endif\n\n#if defined(NODE_HAVE_I18N_SUPPORT)\n#include \"node_i18n.h\"\n#endif\n\n#if defined HAVE_DTRACE || defined HAVE_ETW\n#include \"node_dtrace.h\"\n#endif\n\n#if defined HAVE_LTTNG\n#include \"node_lttng.h\"\n#endif\n\n#include \"ares.h\"\n#include \"async-wrap.h\"\n#include \"async-wrap-inl.h\"\n#include \"env.h\"\n#include \"env-inl.h\"\n#include \"handle_wrap.h\"\n#include \"req-wrap.h\"\n#include \"req-wrap-inl.h\"\n#include \"string_bytes.h\"\n#include \"util.h\"\n#include \"uv.h\"\n#include \"libplatform/libplatform.h\"\n#include \"v8-debug.h\"\n#include \"v8-profiler.h\"\n#include \"zlib.h\"\n\n#ifdef NODE_ENABLE_VTUNE_PROFILING\n#include \"../deps/v8/src/third_party/vtune/v8-vtune.h\"\n#endif\n\n#include <errno.h>\n#include <limits.h>  // PATH_MAX\n#include <locale.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <vector>\n\n#if defined(NODE_HAVE_I18N_SUPPORT)\n#include <unicode/uvernum.h>\n#endif\n\n#if defined(LEAK_SANITIZER)\n#include <sanitizer/lsan_interface.h>\n#endif\n\n#if defined(_MSC_VER)\n#include <direct.h>\n#include <io.h>\n#define getpid GetCurrentProcessId\n#define umask _umask\ntypedef int mode_t;\n#else\n#include <pthread.h>\n#include <sys/resource.h>  // getrlimit, setrlimit\n#include <unistd.h>  // setuid, getuid\n#endif\n\n#if defined(__POSIX__) && !defined(__ANDROID__)\n#include <pwd.h>  // getpwnam()\n#include <grp.h>  // getgrnam()\n#endif\n\n#ifdef __APPLE__\n#include <crt_externs.h>\n#define environ (*_NSGetEnviron())\n#elif !defined(_MSC_VER)\nextern char **environ;\n#endif\n\nnamespace node {\n\nusing v8::Array;\nusing v8::ArrayBuffer;\nusing v8::Boolean;\nusing v8::Context;\nusing v8::EscapableHandleScope;\nusing v8::Exception;\nusing v8::Float64Array;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::HandleScope;\nusing v8::HeapStatistics;\nusing v8::Integer;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Locker;\nusing v8::MaybeLocal;\nusing v8::Message;\nusing v8::Name;\nusing v8::Null;\nusing v8::Number;\nusing v8::Object;\nusing v8::ObjectTemplate;\nusing v8::Promise;\nusing v8::PromiseRejectMessage;\nusing v8::PropertyCallbackInfo;\nusing v8::ScriptOrigin;\nusing v8::SealHandleScope;\nusing v8::String;\nusing v8::TryCatch;\nusing v8::Uint32;\nusing v8::Uint32Array;\nusing v8::V8;\nusing v8::Value;\n\nstatic bool print_eval = false;\nstatic bool force_repl = false;\nstatic bool syntax_check_only = false;\nstatic bool trace_deprecation = false;\nstatic bool throw_deprecation = false;\nstatic bool trace_sync_io = false;\nstatic bool track_heap_objects = false;\nstatic const char* eval_string = nullptr;\nstatic unsigned int preload_module_count = 0;\nstatic const char** preload_modules = nullptr;\nstatic bool use_debug_agent = false;\nstatic bool debug_wait_connect = false;\nstatic int debug_port = 5858;\nstatic const int v8_default_thread_pool_size = 4;\nstatic int v8_thread_pool_size = v8_default_thread_pool_size;\nstatic bool prof_process = false;\nstatic bool v8_is_profiling = false;\nstatic bool node_is_initialized = false;\nstatic node_module* modpending;\nstatic node_module* modlist_builtin;\nstatic node_module* modlist_linked;\nstatic node_module* modlist_addon;\n\n#if defined(NODE_HAVE_I18N_SUPPORT)\n// Path to ICU data (for i18n / Intl)\nstatic const char* icu_data_dir = nullptr;\n#endif\n\n// used by C++ modules as well\nbool no_deprecation = false;\n\n#if HAVE_OPENSSL && NODE_FIPS_MODE\n// used by crypto module\nbool enable_fips_crypto = false;\nbool force_fips_crypto = false;\n#endif\n\n// true if process warnings should be suppressed\nbool no_process_warnings = false;\nbool trace_warnings = false;\n\n// Set in node.cc by ParseArgs when --preserve-symlinks is used.\n// Used in node_config.cc to set a constant on process.binding('config')\n// that is used by lib/module.js\nbool config_preserve_symlinks = false;\n\n// process-relative uptime base, initialized at start-up\nstatic double prog_start_time;\nstatic bool debugger_running;\nstatic uv_async_t dispatch_debug_messages_async;\n\nstatic uv_mutex_t node_isolate_mutex;\nstatic v8::Isolate* node_isolate;\nstatic v8::Platform* default_platform;\n\n#ifdef __POSIX__\nstatic uv_sem_t debug_semaphore;\n#endif\n\nstatic void PrintErrorString(const char* format, ...) {\n  va_list ap;\n  va_start(ap, format);\n#ifdef _WIN32\n  HANDLE stderr_handle = GetStdHandle(STD_ERROR_HANDLE);\n\n  // Check if stderr is something other than a tty/console\n  if (stderr_handle == INVALID_HANDLE_VALUE ||\n      stderr_handle == nullptr ||\n      uv_guess_handle(_fileno(stderr)) != UV_TTY) {\n    vfprintf(stderr, format, ap);\n    va_end(ap);\n    return;\n  }\n\n  // Fill in any placeholders\n  int n = _vscprintf(format, ap);\n  std::vector<char> out(n + 1);\n  vsprintf(out.data(), format, ap);\n\n  // Get required wide buffer size\n  n = MultiByteToWideChar(CP_UTF8, 0, out.data(), -1, nullptr, 0);\n\n  std::vector<wchar_t> wbuf(n);\n  MultiByteToWideChar(CP_UTF8, 0, out.data(), -1, wbuf.data(), n);\n  WriteConsoleW(stderr_handle, wbuf.data(), n, nullptr, nullptr);\n#else\n  vfprintf(stderr, format, ap);\n#endif\n  va_end(ap);\n}\n\n\nstatic void CheckImmediate(uv_check_t* handle) {\n  Environment* env = Environment::from_immediate_check_handle(handle);\n  HandleScope scope(env->isolate());\n  Context::Scope context_scope(env->context());\n  MakeCallback(env, env->process_object(), env->immediate_callback_string());\n}\n\n\nstatic void IdleImmediateDummy(uv_idle_t* handle) {\n  // Do nothing. Only for maintaining event loop.\n  // TODO(bnoordhuis) Maybe make libuv accept nullptr idle callbacks.\n}\n\n\nstatic inline const char *errno_string(int errorno) {\n#define ERRNO_CASE(e)  case e: return #e;\n  switch (errorno) {\n#ifdef EACCES\n  ERRNO_CASE(EACCES);\n#endif\n\n#ifdef EADDRINUSE\n  ERRNO_CASE(EADDRINUSE);\n#endif\n\n#ifdef EADDRNOTAVAIL\n  ERRNO_CASE(EADDRNOTAVAIL);\n#endif\n\n#ifdef EAFNOSUPPORT\n  ERRNO_CASE(EAFNOSUPPORT);\n#endif\n\n#ifdef EAGAIN\n  ERRNO_CASE(EAGAIN);\n#endif\n\n#ifdef EWOULDBLOCK\n# if EAGAIN != EWOULDBLOCK\n  ERRNO_CASE(EWOULDBLOCK);\n# endif\n#endif\n\n#ifdef EALREADY\n  ERRNO_CASE(EALREADY);\n#endif\n\n#ifdef EBADF\n  ERRNO_CASE(EBADF);\n#endif\n\n#ifdef EBADMSG\n  ERRNO_CASE(EBADMSG);\n#endif\n\n#ifdef EBUSY\n  ERRNO_CASE(EBUSY);\n#endif\n\n#ifdef ECANCELED\n  ERRNO_CASE(ECANCELED);\n#endif\n\n#ifdef ECHILD\n  ERRNO_CASE(ECHILD);\n#endif\n\n#ifdef ECONNABORTED\n  ERRNO_CASE(ECONNABORTED);\n#endif\n\n#ifdef ECONNREFUSED\n  ERRNO_CASE(ECONNREFUSED);\n#endif\n\n#ifdef ECONNRESET\n  ERRNO_CASE(ECONNRESET);\n#endif\n\n#ifdef EDEADLK\n  ERRNO_CASE(EDEADLK);\n#endif\n\n#ifdef EDESTADDRREQ\n  ERRNO_CASE(EDESTADDRREQ);\n#endif\n\n#ifdef EDOM\n  ERRNO_CASE(EDOM);\n#endif\n\n#ifdef EDQUOT\n  ERRNO_CASE(EDQUOT);\n#endif\n\n#ifdef EEXIST\n  ERRNO_CASE(EEXIST);\n#endif\n\n#ifdef EFAULT\n  ERRNO_CASE(EFAULT);\n#endif\n\n#ifdef EFBIG\n  ERRNO_CASE(EFBIG);\n#endif\n\n#ifdef EHOSTUNREACH\n  ERRNO_CASE(EHOSTUNREACH);\n#endif\n\n#ifdef EIDRM\n  ERRNO_CASE(EIDRM);\n#endif\n\n#ifdef EILSEQ\n  ERRNO_CASE(EILSEQ);\n#endif\n\n#ifdef EINPROGRESS\n  ERRNO_CASE(EINPROGRESS);\n#endif\n\n#ifdef EINTR\n  ERRNO_CASE(EINTR);\n#endif\n\n#ifdef EINVAL\n  ERRNO_CASE(EINVAL);\n#endif\n\n#ifdef EIO\n  ERRNO_CASE(EIO);\n#endif\n\n#ifdef EISCONN\n  ERRNO_CASE(EISCONN);\n#endif\n\n#ifdef EISDIR\n  ERRNO_CASE(EISDIR);\n#endif\n\n#ifdef ELOOP\n  ERRNO_CASE(ELOOP);\n#endif\n\n#ifdef EMFILE\n  ERRNO_CASE(EMFILE);\n#endif\n\n#ifdef EMLINK\n  ERRNO_CASE(EMLINK);\n#endif\n\n#ifdef EMSGSIZE\n  ERRNO_CASE(EMSGSIZE);\n#endif\n\n#ifdef EMULTIHOP\n  ERRNO_CASE(EMULTIHOP);\n#endif\n\n#ifdef ENAMETOOLONG\n  ERRNO_CASE(ENAMETOOLONG);\n#endif\n\n#ifdef ENETDOWN\n  ERRNO_CASE(ENETDOWN);\n#endif\n\n#ifdef ENETRESET\n  ERRNO_CASE(ENETRESET);\n#endif\n\n#ifdef ENETUNREACH\n  ERRNO_CASE(ENETUNREACH);\n#endif\n\n#ifdef ENFILE\n  ERRNO_CASE(ENFILE);\n#endif\n\n#ifdef ENOBUFS\n  ERRNO_CASE(ENOBUFS);\n#endif\n\n#ifdef ENODATA\n  ERRNO_CASE(ENODATA);\n#endif\n\n#ifdef ENODEV\n  ERRNO_CASE(ENODEV);\n#endif\n\n#ifdef ENOENT\n  ERRNO_CASE(ENOENT);\n#endif\n\n#ifdef ENOEXEC\n  ERRNO_CASE(ENOEXEC);\n#endif\n\n#ifdef ENOLINK\n  ERRNO_CASE(ENOLINK);\n#endif\n\n#ifdef ENOLCK\n# if ENOLINK != ENOLCK\n  ERRNO_CASE(ENOLCK);\n# endif\n#endif\n\n#ifdef ENOMEM\n  ERRNO_CASE(ENOMEM);\n#endif\n\n#ifdef ENOMSG\n  ERRNO_CASE(ENOMSG);\n#endif\n\n#ifdef ENOPROTOOPT\n  ERRNO_CASE(ENOPROTOOPT);\n#endif\n\n#ifdef ENOSPC\n  ERRNO_CASE(ENOSPC);\n#endif\n\n#ifdef ENOSR\n  ERRNO_CASE(ENOSR);\n#endif\n\n#ifdef ENOSTR\n  ERRNO_CASE(ENOSTR);\n#endif\n\n#ifdef ENOSYS\n  ERRNO_CASE(ENOSYS);\n#endif\n\n#ifdef ENOTCONN\n  ERRNO_CASE(ENOTCONN);\n#endif\n\n#ifdef ENOTDIR\n  ERRNO_CASE(ENOTDIR);\n#endif\n\n#ifdef ENOTEMPTY\n# if ENOTEMPTY != EEXIST\n  ERRNO_CASE(ENOTEMPTY);\n# endif\n#endif\n\n#ifdef ENOTSOCK\n  ERRNO_CASE(ENOTSOCK);\n#endif\n\n#ifdef ENOTSUP\n  ERRNO_CASE(ENOTSUP);\n#else\n# ifdef EOPNOTSUPP\n  ERRNO_CASE(EOPNOTSUPP);\n# endif\n#endif\n\n#ifdef ENOTTY\n  ERRNO_CASE(ENOTTY);\n#endif\n\n#ifdef ENXIO\n  ERRNO_CASE(ENXIO);\n#endif\n\n\n#ifdef EOVERFLOW\n  ERRNO_CASE(EOVERFLOW);\n#endif\n\n#ifdef EPERM\n  ERRNO_CASE(EPERM);\n#endif\n\n#ifdef EPIPE\n  ERRNO_CASE(EPIPE);\n#endif\n\n#ifdef EPROTO\n  ERRNO_CASE(EPROTO);\n#endif\n\n#ifdef EPROTONOSUPPORT\n  ERRNO_CASE(EPROTONOSUPPORT);\n#endif\n\n#ifdef EPROTOTYPE\n  ERRNO_CASE(EPROTOTYPE);\n#endif\n\n#ifdef ERANGE\n  ERRNO_CASE(ERANGE);\n#endif\n\n#ifdef EROFS\n  ERRNO_CASE(EROFS);\n#endif\n\n#ifdef ESPIPE\n  ERRNO_CASE(ESPIPE);\n#endif\n\n#ifdef ESRCH\n  ERRNO_CASE(ESRCH);\n#endif\n\n#ifdef ESTALE\n  ERRNO_CASE(ESTALE);\n#endif\n\n#ifdef ETIME\n  ERRNO_CASE(ETIME);\n#endif\n\n#ifdef ETIMEDOUT\n  ERRNO_CASE(ETIMEDOUT);\n#endif\n\n#ifdef ETXTBSY\n  ERRNO_CASE(ETXTBSY);\n#endif\n\n#ifdef EXDEV\n  ERRNO_CASE(EXDEV);\n#endif\n\n  default: return \"\";\n  }\n}\n\nconst char *signo_string(int signo) {\n#define SIGNO_CASE(e)  case e: return #e;\n  switch (signo) {\n#ifdef SIGHUP\n  SIGNO_CASE(SIGHUP);\n#endif\n\n#ifdef SIGINT\n  SIGNO_CASE(SIGINT);\n#endif\n\n#ifdef SIGQUIT\n  SIGNO_CASE(SIGQUIT);\n#endif\n\n#ifdef SIGILL\n  SIGNO_CASE(SIGILL);\n#endif\n\n#ifdef SIGTRAP\n  SIGNO_CASE(SIGTRAP);\n#endif\n\n#ifdef SIGABRT\n  SIGNO_CASE(SIGABRT);\n#endif\n\n#ifdef SIGIOT\n# if SIGABRT != SIGIOT\n  SIGNO_CASE(SIGIOT);\n# endif\n#endif\n\n#ifdef SIGBUS\n  SIGNO_CASE(SIGBUS);\n#endif\n\n#ifdef SIGFPE\n  SIGNO_CASE(SIGFPE);\n#endif\n\n#ifdef SIGKILL\n  SIGNO_CASE(SIGKILL);\n#endif\n\n#ifdef SIGUSR1\n  SIGNO_CASE(SIGUSR1);\n#endif\n\n#ifdef SIGSEGV\n  SIGNO_CASE(SIGSEGV);\n#endif\n\n#ifdef SIGUSR2\n  SIGNO_CASE(SIGUSR2);\n#endif\n\n#ifdef SIGPIPE\n  SIGNO_CASE(SIGPIPE);\n#endif\n\n#ifdef SIGALRM\n  SIGNO_CASE(SIGALRM);\n#endif\n\n  SIGNO_CASE(SIGTERM);\n\n#ifdef SIGCHLD\n  SIGNO_CASE(SIGCHLD);\n#endif\n\n#ifdef SIGSTKFLT\n  SIGNO_CASE(SIGSTKFLT);\n#endif\n\n\n#ifdef SIGCONT\n  SIGNO_CASE(SIGCONT);\n#endif\n\n#ifdef SIGSTOP\n  SIGNO_CASE(SIGSTOP);\n#endif\n\n#ifdef SIGTSTP\n  SIGNO_CASE(SIGTSTP);\n#endif\n\n#ifdef SIGBREAK\n  SIGNO_CASE(SIGBREAK);\n#endif\n\n#ifdef SIGTTIN\n  SIGNO_CASE(SIGTTIN);\n#endif\n\n#ifdef SIGTTOU\n  SIGNO_CASE(SIGTTOU);\n#endif\n\n#ifdef SIGURG\n  SIGNO_CASE(SIGURG);\n#endif\n\n#ifdef SIGXCPU\n  SIGNO_CASE(SIGXCPU);\n#endif\n\n#ifdef SIGXFSZ\n  SIGNO_CASE(SIGXFSZ);\n#endif\n\n#ifdef SIGVTALRM\n  SIGNO_CASE(SIGVTALRM);\n#endif\n\n#ifdef SIGPROF\n  SIGNO_CASE(SIGPROF);\n#endif\n\n#ifdef SIGWINCH\n  SIGNO_CASE(SIGWINCH);\n#endif\n\n#ifdef SIGIO\n  SIGNO_CASE(SIGIO);\n#endif\n\n#ifdef SIGPOLL\n# if SIGPOLL != SIGIO\n  SIGNO_CASE(SIGPOLL);\n# endif\n#endif\n\n#ifdef SIGLOST\n# if SIGLOST != SIGABRT\n  SIGNO_CASE(SIGLOST);\n# endif\n#endif\n\n#ifdef SIGPWR\n# if SIGPWR != SIGLOST\n  SIGNO_CASE(SIGPWR);\n# endif\n#endif\n\n#ifdef SIGINFO\n# if !defined(SIGPWR) || SIGINFO != SIGPWR\n  SIGNO_CASE(SIGINFO);\n# endif\n#endif\n\n#ifdef SIGSYS\n  SIGNO_CASE(SIGSYS);\n#endif\n\n  default: return \"\";\n  }\n}\n\n\n// Convenience methods\n\n\nvoid ThrowError(v8::Isolate* isolate, const char* errmsg) {\n  Environment::GetCurrent(isolate)->ThrowError(errmsg);\n}\n\n\nvoid ThrowTypeError(v8::Isolate* isolate, const char* errmsg) {\n  Environment::GetCurrent(isolate)->ThrowTypeError(errmsg);\n}\n\n\nvoid ThrowRangeError(v8::Isolate* isolate, const char* errmsg) {\n  Environment::GetCurrent(isolate)->ThrowRangeError(errmsg);\n}\n\n\nvoid ThrowErrnoException(v8::Isolate* isolate,\n                         int errorno,\n                         const char* syscall,\n                         const char* message,\n                         const char* path) {\n  Environment::GetCurrent(isolate)->ThrowErrnoException(errorno,\n                                                        syscall,\n                                                        message,\n                                                        path);\n}\n\n\nvoid ThrowUVException(v8::Isolate* isolate,\n                      int errorno,\n                      const char* syscall,\n                      const char* message,\n                      const char* path,\n                      const char* dest) {\n  Environment::GetCurrent(isolate)\n      ->ThrowUVException(errorno, syscall, message, path, dest);\n}\n\n\nLocal<Value> ErrnoException(Isolate* isolate,\n                            int errorno,\n                            const char *syscall,\n                            const char *msg,\n                            const char *path) {\n  Environment* env = Environment::GetCurrent(isolate);\n\n  Local<Value> e;\n  Local<String> estring = OneByteString(env->isolate(), errno_string(errorno));\n  if (msg == nullptr || msg[0] == '\\0') {\n    msg = strerror(errorno);\n  }\n  Local<String> message = OneByteString(env->isolate(), msg);\n\n  Local<String> cons =\n      String::Concat(estring, FIXED_ONE_BYTE_STRING(env->isolate(), \", \"));\n  cons = String::Concat(cons, message);\n\n  Local<String> path_string;\n  if (path != nullptr) {\n    // FIXME(bnoordhuis) It's questionable to interpret the file path as UTF-8.\n    path_string = String::NewFromUtf8(env->isolate(), path);\n  }\n\n  if (path_string.IsEmpty() == false) {\n    cons = String::Concat(cons, FIXED_ONE_BYTE_STRING(env->isolate(), \" '\"));\n    cons = String::Concat(cons, path_string);\n    cons = String::Concat(cons, FIXED_ONE_BYTE_STRING(env->isolate(), \"'\"));\n  }\n  e = Exception::Error(cons);\n\n  Local<Object> obj = e->ToObject(env->isolate());\n  obj->Set(env->errno_string(), Integer::New(env->isolate(), errorno));\n  obj->Set(env->code_string(), estring);\n\n  if (path_string.IsEmpty() == false) {\n    obj->Set(env->path_string(), path_string);\n  }\n\n  if (syscall != nullptr) {\n    obj->Set(env->syscall_string(), OneByteString(env->isolate(), syscall));\n  }\n\n  return e;\n}\n\n\nstatic Local<String> StringFromPath(Isolate* isolate, const char* path) {\n#ifdef _WIN32\n  if (strncmp(path, \"\\\\\\\\?\\\\UNC\\\\\", 8) == 0) {\n    return String::Concat(FIXED_ONE_BYTE_STRING(isolate, \"\\\\\\\\\"),\n                          String::NewFromUtf8(isolate, path + 8));\n  } else if (strncmp(path, \"\\\\\\\\?\\\\\", 4) == 0) {\n    return String::NewFromUtf8(isolate, path + 4);\n  }\n#endif\n\n  return String::NewFromUtf8(isolate, path);\n}\n\n\nLocal<Value> UVException(Isolate* isolate,\n                         int errorno,\n                         const char* syscall,\n                         const char* msg,\n                         const char* path) {\n  return UVException(isolate, errorno, syscall, msg, path, nullptr);\n}\n\n\nLocal<Value> UVException(Isolate* isolate,\n                         int errorno,\n                         const char* syscall,\n                         const char* msg,\n                         const char* path,\n                         const char* dest) {\n  Environment* env = Environment::GetCurrent(isolate);\n\n  if (!msg || !msg[0])\n    msg = uv_strerror(errorno);\n\n  Local<String> js_code = OneByteString(isolate, uv_err_name(errorno));\n  Local<String> js_syscall = OneByteString(isolate, syscall);\n  Local<String> js_path;\n  Local<String> js_dest;\n\n  Local<String> js_msg = js_code;\n  js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \": \"));\n  js_msg = String::Concat(js_msg, OneByteString(isolate, msg));\n  js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \", \"));\n  js_msg = String::Concat(js_msg, js_syscall);\n\n  if (path != nullptr) {\n    js_path = StringFromPath(isolate, path);\n\n    js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \" '\"));\n    js_msg = String::Concat(js_msg, js_path);\n    js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \"'\"));\n  }\n\n  if (dest != nullptr) {\n    js_dest = StringFromPath(isolate, dest);\n\n    js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \" -> '\"));\n    js_msg = String::Concat(js_msg, js_dest);\n    js_msg = String::Concat(js_msg, FIXED_ONE_BYTE_STRING(isolate, \"'\"));\n  }\n\n  Local<Object> e = Exception::Error(js_msg)->ToObject(isolate);\n\n  // TODO(piscisaureus) errno should probably go; the user has no way of\n  // knowing which uv errno value maps to which error.\n  e->Set(env->errno_string(), Integer::New(isolate, errorno));\n  e->Set(env->code_string(), js_code);\n  e->Set(env->syscall_string(), js_syscall);\n  if (!js_path.IsEmpty())\n    e->Set(env->path_string(), js_path);\n  if (!js_dest.IsEmpty())\n    e->Set(env->dest_string(), js_dest);\n\n  return e;\n}\n\n\n// Look up environment variable unless running as setuid root.\ninline const char* secure_getenv(const char* key) {\n#ifndef _WIN32\n  if (getuid() != geteuid() || getgid() != getegid())\n    return nullptr;\n#endif\n  return getenv(key);\n}\n\n\n#ifdef _WIN32\n// Does about the same as strerror(),\n// but supports all windows error messages\nstatic const char *winapi_strerror(const int errorno, bool* must_free) {\n  char *errmsg = nullptr;\n\n  FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM |\n      FORMAT_MESSAGE_IGNORE_INSERTS, nullptr, errorno,\n      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR)&errmsg, 0, nullptr);\n\n  if (errmsg) {\n    *must_free = true;\n\n    // Remove trailing newlines\n    for (int i = strlen(errmsg) - 1;\n        i >= 0 && (errmsg[i] == '\\n' || errmsg[i] == '\\r'); i--) {\n      errmsg[i] = '\\0';\n    }\n\n    return errmsg;\n  } else {\n    // FormatMessage failed\n    *must_free = false;\n    return \"Unknown error\";\n  }\n}\n\n\nLocal<Value> WinapiErrnoException(Isolate* isolate,\n                                  int errorno,\n                                  const char* syscall,\n                                  const char* msg,\n                                  const char* path) {\n  Environment* env = Environment::GetCurrent(isolate);\n  Local<Value> e;\n  bool must_free = false;\n  if (!msg || !msg[0]) {\n    msg = winapi_strerror(errorno, &must_free);\n  }\n  Local<String> message = OneByteString(env->isolate(), msg);\n\n  if (path) {\n    Local<String> cons1 =\n        String::Concat(message, FIXED_ONE_BYTE_STRING(isolate, \" '\"));\n    Local<String> cons2 =\n        String::Concat(cons1, String::NewFromUtf8(isolate, path));\n    Local<String> cons3 =\n        String::Concat(cons2, FIXED_ONE_BYTE_STRING(isolate, \"'\"));\n    e = Exception::Error(cons3);\n  } else {\n    e = Exception::Error(message);\n  }\n\n  Local<Object> obj = e->ToObject(env->isolate());\n  obj->Set(env->errno_string(), Integer::New(isolate, errorno));\n\n  if (path != nullptr) {\n    obj->Set(env->path_string(), String::NewFromUtf8(isolate, path));\n  }\n\n  if (syscall != nullptr) {\n    obj->Set(env->syscall_string(), OneByteString(isolate, syscall));\n  }\n\n  if (must_free)\n    LocalFree((HLOCAL)msg);\n\n  return e;\n}\n#endif\n\n\nvoid* ArrayBufferAllocator::Allocate(size_t size) {\n  if (env_ == nullptr ||\n      !env_->array_buffer_allocator_info()->no_zero_fill() ||\n      zero_fill_all_buffers)\n    return calloc(size, 1);\n  env_->array_buffer_allocator_info()->reset_fill_flag();\n  return malloc(size);\n}\n\nstatic bool DomainHasErrorHandler(const Environment* env,\n                                  const Local<Object>& domain) {\n  HandleScope scope(env->isolate());\n\n  Local<Value> domain_event_listeners_v = domain->Get(env->events_string());\n  if (!domain_event_listeners_v->IsObject())\n    return false;\n\n  Local<Object> domain_event_listeners_o =\n      domain_event_listeners_v.As<Object>();\n\n  Local<Value> domain_error_listeners_v =\n      domain_event_listeners_o->Get(env->error_string());\n\n  if (domain_error_listeners_v->IsFunction() ||\n      (domain_error_listeners_v->IsArray() &&\n      domain_error_listeners_v.As<Array>()->Length() > 0))\n    return true;\n\n  return false;\n}\n\nstatic bool DomainsStackHasErrorHandler(const Environment* env) {\n  HandleScope scope(env->isolate());\n\n  if (!env->using_domains())\n    return false;\n\n  Local<Array> domains_stack_array = env->domains_stack_array().As<Array>();\n  if (domains_stack_array->Length() == 0)\n    return false;\n\n  uint32_t domains_stack_length = domains_stack_array->Length();\n  for (uint32_t i = domains_stack_length; i > 0; --i) {\n    Local<Value> domain_v = domains_stack_array->Get(i - 1);\n    if (!domain_v->IsObject())\n      return false;\n\n    Local<Object> domain = domain_v.As<Object>();\n    if (DomainHasErrorHandler(env, domain))\n      return true;\n  }\n\n  return false;\n}\n\n\nstatic bool ShouldAbortOnUncaughtException(Isolate* isolate) {\n  HandleScope scope(isolate);\n\n  Environment* env = Environment::GetCurrent(isolate);\n  Local<Object> process_object = env->process_object();\n  Local<String> emitting_top_level_domain_error_key =\n    env->emitting_top_level_domain_error_string();\n  bool isEmittingTopLevelDomainError =\n      process_object->Get(emitting_top_level_domain_error_key)->BooleanValue();\n\n  return isEmittingTopLevelDomainError || !DomainsStackHasErrorHandler(env);\n}\n\n\nvoid SetupDomainUse(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (env->using_domains())\n    return;\n  env->set_using_domains(true);\n\n  HandleScope scope(env->isolate());\n  Local<Object> process_object = env->process_object();\n\n  Local<String> tick_callback_function_key = env->tick_domain_cb_string();\n  Local<Function> tick_callback_function =\n      process_object->Get(tick_callback_function_key).As<Function>();\n\n  if (!tick_callback_function->IsFunction()) {\n    fprintf(stderr, \"process._tickDomainCallback assigned to non-function\\n\");\n    ABORT();\n  }\n\n  process_object->Set(env->tick_callback_string(), tick_callback_function);\n  env->set_tick_callback_function(tick_callback_function);\n\n  CHECK(args[0]->IsArray());\n  env->set_domain_array(args[0].As<Array>());\n\n  CHECK(args[1]->IsArray());\n  env->set_domains_stack_array(args[1].As<Array>());\n\n  // Do a little housekeeping.\n  env->process_object()->Delete(\n      env->context(),\n      FIXED_ONE_BYTE_STRING(args.GetIsolate(), \"_setupDomainUse\")).FromJust();\n\n  uint32_t* const fields = env->domain_flag()->fields();\n  uint32_t const fields_count = env->domain_flag()->fields_count();\n\n  Local<ArrayBuffer> array_buffer =\n      ArrayBuffer::New(env->isolate(), fields, sizeof(*fields) * fields_count);\n\n  args.GetReturnValue().Set(Uint32Array::New(array_buffer, 0, fields_count));\n}\n\nvoid RunMicrotasks(const FunctionCallbackInfo<Value>& args) {\n  args.GetIsolate()->RunMicrotasks();\n}\n\n\nvoid SetupProcessObject(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  CHECK(args[0]->IsFunction());\n\n  env->set_push_values_to_array_function(args[0].As<Function>());\n  env->process_object()->Delete(\n      env->context(),\n      FIXED_ONE_BYTE_STRING(env->isolate(), \"_setupProcessObject\")).FromJust();\n}\n\n\nvoid SetupNextTick(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  CHECK(args[0]->IsFunction());\n  CHECK(args[1]->IsObject());\n\n  env->set_tick_callback_function(args[0].As<Function>());\n\n  env->SetMethod(args[1].As<Object>(), \"runMicrotasks\", RunMicrotasks);\n\n  // Do a little housekeeping.\n  env->process_object()->Delete(\n      env->context(),\n      FIXED_ONE_BYTE_STRING(args.GetIsolate(), \"_setupNextTick\")).FromJust();\n\n  // Values use to cross communicate with processNextTick.\n  uint32_t* const fields = env->tick_info()->fields();\n  uint32_t const fields_count = env->tick_info()->fields_count();\n\n  Local<ArrayBuffer> array_buffer =\n      ArrayBuffer::New(env->isolate(), fields, sizeof(*fields) * fields_count);\n\n  args.GetReturnValue().Set(Uint32Array::New(array_buffer, 0, fields_count));\n}\n\nvoid PromiseRejectCallback(PromiseRejectMessage message) {\n  Local<Promise> promise = message.GetPromise();\n  Isolate* isolate = promise->GetIsolate();\n  Local<Value> value = message.GetValue();\n  Local<Integer> event = Integer::New(isolate, message.GetEvent());\n\n  Environment* env = Environment::GetCurrent(isolate);\n  Local<Function> callback = env->promise_reject_function();\n\n  if (value.IsEmpty())\n    value = Undefined(isolate);\n\n  Local<Value> args[] = { event, promise, value };\n  Local<Object> process = env->process_object();\n\n  callback->Call(process, arraysize(args), args);\n}\n\nvoid SetupPromises(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  Isolate* isolate = env->isolate();\n\n  CHECK(args[0]->IsFunction());\n\n  isolate->SetPromiseRejectCallback(PromiseRejectCallback);\n  env->set_promise_reject_function(args[0].As<Function>());\n\n  env->process_object()->Delete(\n      env->context(),\n      FIXED_ONE_BYTE_STRING(args.GetIsolate(), \"_setupPromises\")).FromJust();\n}\n\n\nLocal<Value> MakeCallback(Environment* env,\n                          Local<Value> recv,\n                          const Local<Function> callback,\n                          int argc,\n                          Local<Value> argv[]) {\n  // If you hit this assertion, you forgot to enter the v8::Context first.\n  CHECK_EQ(env->context(), env->isolate()->GetCurrentContext());\n\n  Local<Function> pre_fn = env->async_hooks_pre_function();\n  Local<Function> post_fn = env->async_hooks_post_function();\n  Local<Object> object, domain;\n  bool ran_init_callback = false;\n  bool has_domain = false;\n\n  Environment::AsyncCallbackScope callback_scope(env);\n\n  // TODO(trevnorris): Adding \"_asyncQueue\" to the \"this\" in the init callback\n  // is a horrible way to detect usage. Rethink how detection should happen.\n  if (recv->IsObject()) {\n    object = recv.As<Object>();\n    Local<Value> async_queue_v = object->Get(env->async_queue_string());\n    if (async_queue_v->IsObject())\n      ran_init_callback = true;\n  }\n\n  if (env->using_domains()) {\n    CHECK(recv->IsObject());\n    Local<Value> domain_v = object->Get(env->domain_string());\n    has_domain = domain_v->IsObject();\n    if (has_domain) {\n      domain = domain_v.As<Object>();\n      if (domain->Get(env->disposed_string())->IsTrue())\n        return Undefined(env->isolate());\n    }\n  }\n\n  if (has_domain) {\n    Local<Value> enter_v = domain->Get(env->enter_string());\n    if (enter_v->IsFunction()) {\n      if (enter_v.As<Function>()->Call(domain, 0, nullptr).IsEmpty()) {\n        FatalError(\"node::MakeCallback\",\n                   \"domain enter callback threw, please report this\");\n      }\n    }\n  }\n\n  if (ran_init_callback && !pre_fn.IsEmpty()) {\n    TryCatch try_catch(env->isolate());\n    MaybeLocal<Value> ar = pre_fn->Call(env->context(), object, 0, nullptr);\n    if (ar.IsEmpty()) {\n      ClearFatalExceptionHandlers(env);\n      FatalException(env->isolate(), try_catch);\n      return Local<Value>();\n    }\n  }\n\n  Local<Value> ret = callback->Call(recv, argc, argv);\n\n  if (ran_init_callback && !post_fn.IsEmpty()) {\n    Local<Value> did_throw = Boolean::New(env->isolate(), ret.IsEmpty());\n    // Currently there's no way to retrieve an uid from node::MakeCallback().\n    // This needs to be fixed.\n    Local<Value> vals[] =\n        { Undefined(env->isolate()).As<Value>(), did_throw };\n    TryCatch try_catch(env->isolate());\n    MaybeLocal<Value> ar =\n        post_fn->Call(env->context(), object, arraysize(vals), vals);\n    if (ar.IsEmpty()) {\n      ClearFatalExceptionHandlers(env);\n      FatalException(env->isolate(), try_catch);\n      return Local<Value>();\n    }\n  }\n\n  if (ret.IsEmpty()) {\n    // NOTE: For backwards compatibility with public API we return Undefined()\n    // if the top level call threw.\n    return callback_scope.in_makecallback() ?\n        ret : Undefined(env->isolate()).As<Value>();\n  }\n\n  if (has_domain) {\n    Local<Value> exit_v = domain->Get(env->exit_string());\n    if (exit_v->IsFunction()) {\n      if (exit_v.As<Function>()->Call(domain, 0, nullptr).IsEmpty()) {\n        FatalError(\"node::MakeCallback\",\n                   \"domain exit callback threw, please report this\");\n      }\n    }\n  }\n\n  if (callback_scope.in_makecallback()) {\n    return ret;\n  }\n\n  Environment::TickInfo* tick_info = env->tick_info();\n\n  if (tick_info->length() == 0) {\n    env->isolate()->RunMicrotasks();\n  }\n\n  Local<Object> process = env->process_object();\n\n  if (tick_info->length() == 0) {\n    tick_info->set_index(0);\n  }\n\n  if (env->tick_callback_function()->Call(process, 0, nullptr).IsEmpty()) {\n    return Undefined(env->isolate());\n  }\n\n  return ret;\n}\n\n\n// Internal only.\nLocal<Value> MakeCallback(Environment* env,\n                           Local<Object> recv,\n                           uint32_t index,\n                           int argc,\n                           Local<Value> argv[]) {\n  Local<Value> cb_v = recv->Get(index);\n  CHECK(cb_v->IsFunction());\n  return MakeCallback(env, recv.As<Value>(), cb_v.As<Function>(), argc, argv);\n}\n\n\nLocal<Value> MakeCallback(Environment* env,\n                           Local<Object> recv,\n                           Local<String> symbol,\n                           int argc,\n                           Local<Value> argv[]) {\n  Local<Value> cb_v = recv->Get(symbol);\n  CHECK(cb_v->IsFunction());\n  return MakeCallback(env, recv.As<Value>(), cb_v.As<Function>(), argc, argv);\n}\n\n\nLocal<Value> MakeCallback(Environment* env,\n                           Local<Object> recv,\n                           const char* method,\n                           int argc,\n                           Local<Value> argv[]) {\n  Local<String> method_string = OneByteString(env->isolate(), method);\n  return MakeCallback(env, recv, method_string, argc, argv);\n}\n\n\nLocal<Value> MakeCallback(Isolate* isolate,\n                           Local<Object> recv,\n                           const char* method,\n                           int argc,\n                           Local<Value> argv[]) {\n  EscapableHandleScope handle_scope(isolate);\n  Local<Context> context = recv->CreationContext();\n  Environment* env = Environment::GetCurrent(context);\n  Context::Scope context_scope(context);\n  return handle_scope.Escape(\n      Local<Value>::New(isolate, MakeCallback(env, recv, method, argc, argv)));\n}\n\n\nLocal<Value> MakeCallback(Isolate* isolate,\n                           Local<Object> recv,\n                           Local<String> symbol,\n                           int argc,\n                           Local<Value> argv[]) {\n  EscapableHandleScope handle_scope(isolate);\n  Local<Context> context = recv->CreationContext();\n  Environment* env = Environment::GetCurrent(context);\n  Context::Scope context_scope(context);\n  return handle_scope.Escape(\n      Local<Value>::New(isolate, MakeCallback(env, recv, symbol, argc, argv)));\n}\n\n\nLocal<Value> MakeCallback(Isolate* isolate,\n                           Local<Object> recv,\n                           Local<Function> callback,\n                           int argc,\n                           Local<Value> argv[]) {\n  EscapableHandleScope handle_scope(isolate);\n  Local<Context> context = recv->CreationContext();\n  Environment* env = Environment::GetCurrent(context);\n  Context::Scope context_scope(context);\n  return handle_scope.Escape(Local<Value>::New(\n        isolate,\n        MakeCallback(env, recv.As<Value>(), callback, argc, argv)));\n}\n\n\nenum encoding ParseEncoding(const char* encoding,\n                            enum encoding default_encoding) {\n  switch (encoding[0]) {\n    case 'u':\n      // utf8, utf16le\n      if (encoding[1] == 't' && encoding[2] == 'f') {\n        // Skip `-`\n        encoding += encoding[3] == '-' ? 4 : 3;\n        if (encoding[0] == '8' && encoding[1] == '\\0')\n          return UTF8;\n        if (strncmp(encoding, \"16le\", 4) == 0)\n          return UCS2;\n\n      // ucs2\n      } else if (encoding[1] == 'c' && encoding[2] == 's') {\n        encoding += encoding[3] == '-' ? 4 : 3;\n        if (encoding[0] == '2' && encoding[1] == '\\0')\n          return UCS2;\n      }\n      break;\n    case 'b':\n      // binary\n      if (encoding[1] == 'i') {\n        if (strncmp(encoding + 2, \"nary\", 4) == 0)\n          return BINARY;\n\n      // buffer\n      } else if (encoding[1] == 'u') {\n        if (strncmp(encoding + 2, \"ffer\", 4) == 0)\n          return BUFFER;\n      }\n      break;\n    case '\\0':\n      return default_encoding;\n    default:\n      break;\n  }\n\n  if (StringEqualNoCase(encoding, \"utf8\")) {\n    return UTF8;\n  } else if (StringEqualNoCase(encoding, \"utf-8\")) {\n    return UTF8;\n  } else if (StringEqualNoCase(encoding, \"ascii\")) {\n    return ASCII;\n  } else if (StringEqualNoCase(encoding, \"base64\")) {\n    return BASE64;\n  } else if (StringEqualNoCase(encoding, \"ucs2\")) {\n    return UCS2;\n  } else if (StringEqualNoCase(encoding, \"ucs-2\")) {\n    return UCS2;\n  } else if (StringEqualNoCase(encoding, \"utf16le\")) {\n    return UCS2;\n  } else if (StringEqualNoCase(encoding, \"utf-16le\")) {\n    return UCS2;\n  } else if (StringEqualNoCase(encoding, \"binary\")) {\n    return BINARY;\n  } else if (StringEqualNoCase(encoding, \"buffer\")) {\n    return BUFFER;\n  } else if (StringEqualNoCase(encoding, \"hex\")) {\n    return HEX;\n  } else {\n    return default_encoding;\n  }\n}\n\n\nenum encoding ParseEncoding(Isolate* isolate,\n                            Local<Value> encoding_v,\n                            enum encoding default_encoding) {\n  if (!encoding_v->IsString())\n    return default_encoding;\n\n  node::Utf8Value encoding(isolate, encoding_v);\n\n  return ParseEncoding(*encoding, default_encoding);\n}\n\nLocal<Value> Encode(Isolate* isolate,\n                    const char* buf,\n                    size_t len,\n                    enum encoding encoding) {\n  CHECK_NE(encoding, UCS2);\n  return StringBytes::Encode(isolate, buf, len, encoding);\n}\n\nLocal<Value> Encode(Isolate* isolate, const uint16_t* buf, size_t len) {\n  return StringBytes::Encode(isolate, buf, len);\n}\n\n// Returns -1 if the handle was not valid for decoding\nssize_t DecodeBytes(Isolate* isolate,\n                    Local<Value> val,\n                    enum encoding encoding) {\n  HandleScope scope(isolate);\n\n  if (val->IsArray()) {\n    fprintf(stderr, \"'raw' encoding (array of integers) has been removed. \"\n                    \"Use 'binary'.\\n\");\n    UNREACHABLE();\n    return -1;\n  }\n\n  return StringBytes::Size(isolate, val, encoding);\n}\n\n// Returns number of bytes written.\nssize_t DecodeWrite(Isolate* isolate,\n                    char* buf,\n                    size_t buflen,\n                    Local<Value> val,\n                    enum encoding encoding) {\n  return StringBytes::Write(isolate, buf, buflen, val, encoding, nullptr);\n}\n\nbool IsExceptionDecorated(Environment* env, Local<Value> er) {\n  if (!er.IsEmpty() && er->IsObject()) {\n    Local<Object> err_obj = er.As<Object>();\n    auto maybe_value =\n        err_obj->GetPrivate(env->context(), env->decorated_private_symbol());\n    Local<Value> decorated;\n    return maybe_value.ToLocal(&decorated) && decorated->IsTrue();\n  }\n  return false;\n}\n\nvoid AppendExceptionLine(Environment* env,\n                         Local<Value> er,\n                         Local<Message> message) {\n  if (message.IsEmpty())\n    return;\n\n  HandleScope scope(env->isolate());\n  Local<Object> err_obj;\n  if (!er.IsEmpty() && er->IsObject()) {\n    err_obj = er.As<Object>();\n\n    auto context = env->context();\n    auto processed_private_symbol = env->processed_private_symbol();\n    // Do it only once per message\n    if (err_obj->HasPrivate(context, processed_private_symbol).FromJust())\n      return;\n    err_obj->SetPrivate(\n        context,\n        processed_private_symbol,\n        True(env->isolate()));\n  }\n\n  // Print (filename):(line number): (message).\n  node::Utf8Value filename(env->isolate(), message->GetScriptResourceName());\n  const char* filename_string = *filename;\n  int linenum = message->GetLineNumber();\n  // Print line of source code.\n  node::Utf8Value sourceline(env->isolate(), message->GetSourceLine());\n  const char* sourceline_string = *sourceline;\n\n  // Because of how node modules work, all scripts are wrapped with a\n  // \"function (module, exports, __filename, ...) {\"\n  // to provide script local variables.\n  //\n  // When reporting errors on the first line of a script, this wrapper\n  // function is leaked to the user. There used to be a hack here to\n  // truncate off the first 62 characters, but it caused numerous other\n  // problems when vm.runIn*Context() methods were used for non-module\n  // code.\n  //\n  // If we ever decide to re-instate such a hack, the following steps\n  // must be taken:\n  //\n  // 1. Pass a flag around to say \"this code was wrapped\"\n  // 2. Update the stack frame output so that it is also correct.\n  //\n  // It would probably be simpler to add a line rather than add some\n  // number of characters to the first line, since V8 truncates the\n  // sourceline to 78 characters, and we end up not providing very much\n  // useful debugging info to the user if we remove 62 characters.\n\n  int start = message->GetStartColumn(env->context()).FromMaybe(0);\n  int end = message->GetEndColumn(env->context()).FromMaybe(0);\n\n  char arrow[1024];\n  int max_off = sizeof(arrow) - 2;\n\n  int off = snprintf(arrow,\n                     sizeof(arrow),\n                     \"%s:%i\\n%s\\n\",\n                     filename_string,\n                     linenum,\n                     sourceline_string);\n  CHECK_GE(off, 0);\n  if (off > max_off) {\n    off = max_off;\n  }\n\n  // Print wavy underline (GetUnderline is deprecated).\n  for (int i = 0; i < start; i++) {\n    if (sourceline_string[i] == '\\0' || off >= max_off) {\n      break;\n    }\n    CHECK_LT(off, max_off);\n    arrow[off++] = (sourceline_string[i] == '\\t') ? '\\t' : ' ';\n  }\n  for (int i = start; i < end; i++) {\n    if (sourceline_string[i] == '\\0' || off >= max_off) {\n      break;\n    }\n    CHECK_LT(off, max_off);\n    arrow[off++] = '^';\n  }\n  CHECK_LE(off, max_off);\n  arrow[off] = '\\n';\n  arrow[off + 1] = '\\0';\n\n  Local<String> arrow_str = String::NewFromUtf8(env->isolate(), arrow);\n\n  if (!arrow_str.IsEmpty() && !err_obj.IsEmpty() && err_obj->IsNativeError()) {\n    err_obj->SetPrivate(\n        env->context(),\n        env->arrow_message_private_symbol(),\n        arrow_str);\n    return;\n  }\n\n  // Allocation failed, just print it out.\n  if (env->printed_error())\n    return;\n  env->set_printed_error(true);\n  uv_tty_reset_mode();\n  PrintErrorString(\"\\n%s\", arrow);\n}\n\n\nstatic void ReportException(Environment* env,\n                            Local<Value> er,\n                            Local<Message> message) {\n  HandleScope scope(env->isolate());\n\n  AppendExceptionLine(env, er, message);\n\n  Local<Value> trace_value;\n  Local<Value> arrow;\n  const bool decorated = IsExceptionDecorated(env, er);\n\n  if (er->IsUndefined() || er->IsNull()) {\n    trace_value = Undefined(env->isolate());\n  } else {\n    Local<Object> err_obj = er->ToObject(env->isolate());\n\n    trace_value = err_obj->Get(env->stack_string());\n    arrow =\n        err_obj->GetPrivate(\n            env->context(),\n            env->arrow_message_private_symbol()).ToLocalChecked();\n  }\n\n  node::Utf8Value trace(env->isolate(), trace_value);\n\n  // range errors have a trace member set to undefined\n  if (trace.length() > 0 && !trace_value->IsUndefined()) {\n    if (arrow.IsEmpty() || !arrow->IsString() || decorated) {\n      PrintErrorString(\"%s\\n\", *trace);\n    } else {\n      node::Utf8Value arrow_string(env->isolate(), arrow);\n      PrintErrorString(\"%s\\n%s\\n\", *arrow_string, *trace);\n    }\n  } else {\n    // this really only happens for RangeErrors, since they're the only\n    // kind that won't have all this info in the trace, or when non-Error\n    // objects are thrown manually.\n    Local<Value> message;\n    Local<Value> name;\n\n    if (er->IsObject()) {\n      Local<Object> err_obj = er.As<Object>();\n      message = err_obj->Get(env->message_string());\n      name = err_obj->Get(FIXED_ONE_BYTE_STRING(env->isolate(), \"name\"));\n    }\n\n    if (message.IsEmpty() ||\n        message->IsUndefined() ||\n        name.IsEmpty() ||\n        name->IsUndefined()) {\n      // Not an error object. Just print as-is.\n      String::Utf8Value message(er);\n\n      PrintErrorString(\"%s\\n\", *message ? *message :\n                                          \"<toString() threw exception>\");\n    } else {\n      node::Utf8Value name_string(env->isolate(), name);\n      node::Utf8Value message_string(env->isolate(), message);\n\n      if (arrow.IsEmpty() || !arrow->IsString() || decorated) {\n        PrintErrorString(\"%s: %s\\n\", *name_string, *message_string);\n      } else {\n        node::Utf8Value arrow_string(env->isolate(), arrow);\n        PrintErrorString(\"%s\\n%s: %s\\n\",\n                         *arrow_string,\n                         *name_string,\n                         *message_string);\n      }\n    }\n  }\n\n  fflush(stderr);\n}\n\n\nstatic void ReportException(Environment* env, const TryCatch& try_catch) {\n  ReportException(env, try_catch.Exception(), try_catch.Message());\n}\n\n\n// Executes a str within the current v8 context.\nstatic Local<Value> ExecuteString(Environment* env,\n                                  Local<String> source,\n                                  Local<String> filename) {\n  EscapableHandleScope scope(env->isolate());\n  TryCatch try_catch(env->isolate());\n\n  // try_catch must be nonverbose to disable FatalException() handler,\n  // we will handle exceptions ourself.\n  try_catch.SetVerbose(false);\n\n  ScriptOrigin origin(filename);\n  MaybeLocal<v8::Script> script =\n      v8::Script::Compile(env->context(), source, &origin);\n  if (script.IsEmpty()) {\n    ReportException(env, try_catch);\n    exit(3);\n  }\n\n  Local<Value> result = script.ToLocalChecked()->Run();\n  if (result.IsEmpty()) {\n    ReportException(env, try_catch);\n    exit(4);\n  }\n\n  return scope.Escape(result);\n}\n\n\nstatic void GetActiveRequests(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  Local<Array> ary = Array::New(args.GetIsolate());\n  Local<Context> ctx = env->context();\n  Local<Function> fn = env->push_values_to_array_function();\n  Local<Value> argv[NODE_PUSH_VAL_TO_ARRAY_MAX];\n  size_t idx = 0;\n\n  for (auto w : *env->req_wrap_queue()) {\n    if (w->persistent().IsEmpty())\n      continue;\n    argv[idx] = w->object();\n    if (++idx >= arraysize(argv)) {\n      fn->Call(ctx, ary, idx, argv).ToLocalChecked();\n      idx = 0;\n    }\n  }\n\n  if (idx > 0) {\n    fn->Call(ctx, ary, idx, argv).ToLocalChecked();\n  }\n\n  args.GetReturnValue().Set(ary);\n}\n\n\n// Non-static, friend of HandleWrap. Could have been a HandleWrap method but\n// implemented here for consistency with GetActiveRequests().\nvoid GetActiveHandles(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  Local<Array> ary = Array::New(env->isolate());\n  Local<Context> ctx = env->context();\n  Local<Function> fn = env->push_values_to_array_function();\n  Local<Value> argv[NODE_PUSH_VAL_TO_ARRAY_MAX];\n  size_t idx = 0;\n\n  Local<String> owner_sym = env->owner_string();\n\n  for (auto w : *env->handle_wrap_queue()) {\n    if (w->persistent().IsEmpty() || !HandleWrap::HasRef(w))\n      continue;\n    Local<Object> object = w->object();\n    Local<Value> owner = object->Get(owner_sym);\n    if (owner->IsUndefined())\n      owner = object;\n    argv[idx] = owner;\n    if (++idx >= arraysize(argv)) {\n      fn->Call(ctx, ary, idx, argv).ToLocalChecked();\n      idx = 0;\n    }\n  }\n  if (idx > 0) {\n    fn->Call(ctx, ary, idx, argv).ToLocalChecked();\n  }\n\n  args.GetReturnValue().Set(ary);\n}\n\n\nstatic void Abort(const FunctionCallbackInfo<Value>& args) {\n  ABORT();\n}\n\n\nstatic void Chdir(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (args.Length() != 1 || !args[0]->IsString()) {\n    return env->ThrowTypeError(\"Bad argument.\");\n  }\n\n  node::Utf8Value path(args.GetIsolate(), args[0]);\n  int err = uv_chdir(*path);\n  if (err) {\n    return env->ThrowUVException(err, \"uv_chdir\");\n  }\n}\n\n\nstatic void Cwd(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n#ifdef _WIN32\n  /* MAX_PATH is in characters, not bytes. Make sure we have enough headroom. */\n  char buf[MAX_PATH * 4];\n#else\n  char buf[PATH_MAX];\n#endif\n\n  size_t cwd_len = sizeof(buf);\n  int err = uv_cwd(buf, &cwd_len);\n  if (err) {\n    return env->ThrowUVException(err, \"uv_cwd\");\n  }\n\n  Local<String> cwd = String::NewFromUtf8(env->isolate(),\n                                          buf,\n                                          String::kNormalString,\n                                          cwd_len);\n  args.GetReturnValue().Set(cwd);\n}\n\n\nstatic void Umask(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  uint32_t old;\n\n  if (args.Length() < 1 || args[0]->IsUndefined()) {\n    old = umask(0);\n    umask(static_cast<mode_t>(old));\n  } else if (!args[0]->IsInt32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"argument must be an integer or octal string.\");\n  } else {\n    int oct;\n    if (args[0]->IsInt32()) {\n      oct = args[0]->Uint32Value();\n    } else {\n      oct = 0;\n      node::Utf8Value str(env->isolate(), args[0]);\n\n      // Parse the octal string.\n      for (size_t i = 0; i < str.length(); i++) {\n        char c = (*str)[i];\n        if (c > '7' || c < '0') {\n          return env->ThrowTypeError(\"invalid octal string\");\n        }\n        oct *= 8;\n        oct += c - '0';\n      }\n    }\n    old = umask(static_cast<mode_t>(oct));\n  }\n\n  args.GetReturnValue().Set(old);\n}\n\n\n#if defined(__POSIX__) && !defined(__ANDROID__)\n\nstatic const uid_t uid_not_found = static_cast<uid_t>(-1);\nstatic const gid_t gid_not_found = static_cast<gid_t>(-1);\n\n\nstatic uid_t uid_by_name(const char* name) {\n  struct passwd pwd;\n  struct passwd* pp;\n  char buf[8192];\n\n  errno = 0;\n  pp = nullptr;\n\n  if (getpwnam_r(name, &pwd, buf, sizeof(buf), &pp) == 0 && pp != nullptr) {\n    return pp->pw_uid;\n  }\n\n  return uid_not_found;\n}\n\n\nstatic char* name_by_uid(uid_t uid) {\n  struct passwd pwd;\n  struct passwd* pp;\n  char buf[8192];\n  int rc;\n\n  errno = 0;\n  pp = nullptr;\n\n  if ((rc = getpwuid_r(uid, &pwd, buf, sizeof(buf), &pp)) == 0 &&\n      pp != nullptr) {\n    return strdup(pp->pw_name);\n  }\n\n  if (rc == 0) {\n    errno = ENOENT;\n  }\n\n  return nullptr;\n}\n\n\nstatic gid_t gid_by_name(const char* name) {\n  struct group pwd;\n  struct group* pp;\n  char buf[8192];\n\n  errno = 0;\n  pp = nullptr;\n\n  if (getgrnam_r(name, &pwd, buf, sizeof(buf), &pp) == 0 && pp != nullptr) {\n    return pp->gr_gid;\n  }\n\n  return gid_not_found;\n}\n\n\n#if 0  // For future use.\nstatic const char* name_by_gid(gid_t gid) {\n  struct group pwd;\n  struct group* pp;\n  char buf[8192];\n  int rc;\n\n  errno = 0;\n  pp = nullptr;\n\n  if ((rc = getgrgid_r(gid, &pwd, buf, sizeof(buf), &pp)) == 0 &&\n      pp != nullptr) {\n    return strdup(pp->gr_name);\n  }\n\n  if (rc == 0) {\n    errno = ENOENT;\n  }\n\n  return nullptr;\n}\n#endif\n\n\nstatic uid_t uid_by_name(Isolate* isolate, Local<Value> value) {\n  if (value->IsUint32()) {\n    return static_cast<uid_t>(value->Uint32Value());\n  } else {\n    node::Utf8Value name(isolate, value);\n    return uid_by_name(*name);\n  }\n}\n\n\nstatic gid_t gid_by_name(Isolate* isolate, Local<Value> value) {\n  if (value->IsUint32()) {\n    return static_cast<gid_t>(value->Uint32Value());\n  } else {\n    node::Utf8Value name(isolate, value);\n    return gid_by_name(*name);\n  }\n}\n\nstatic void GetUid(const FunctionCallbackInfo<Value>& args) {\n  // uid_t is an uint32_t on all supported platforms.\n  args.GetReturnValue().Set(static_cast<uint32_t>(getuid()));\n}\n\n\nstatic void GetGid(const FunctionCallbackInfo<Value>& args) {\n  // gid_t is an uint32_t on all supported platforms.\n  args.GetReturnValue().Set(static_cast<uint32_t>(getgid()));\n}\n\n\nstatic void GetEUid(const FunctionCallbackInfo<Value>& args) {\n  // uid_t is an uint32_t on all supported platforms.\n  args.GetReturnValue().Set(static_cast<uint32_t>(geteuid()));\n}\n\n\nstatic void GetEGid(const FunctionCallbackInfo<Value>& args) {\n  // gid_t is an uint32_t on all supported platforms.\n  args.GetReturnValue().Set(static_cast<uint32_t>(getegid()));\n}\n\n\nstatic void SetGid(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsUint32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"setgid argument must be a number or a string\");\n  }\n\n  gid_t gid = gid_by_name(env->isolate(), args[0]);\n\n  if (gid == gid_not_found) {\n    return env->ThrowError(\"setgid group id does not exist\");\n  }\n\n  if (setgid(gid)) {\n    return env->ThrowErrnoException(errno, \"setgid\");\n  }\n}\n\n\nstatic void SetEGid(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsUint32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"setegid argument must be a number or string\");\n  }\n\n  gid_t gid = gid_by_name(env->isolate(), args[0]);\n\n  if (gid == gid_not_found) {\n    return env->ThrowError(\"setegid group id does not exist\");\n  }\n\n  if (setegid(gid)) {\n    return env->ThrowErrnoException(errno, \"setegid\");\n  }\n}\n\n\nstatic void SetUid(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsUint32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"setuid argument must be a number or a string\");\n  }\n\n  uid_t uid = uid_by_name(env->isolate(), args[0]);\n\n  if (uid == uid_not_found) {\n    return env->ThrowError(\"setuid user id does not exist\");\n  }\n\n  if (setuid(uid)) {\n    return env->ThrowErrnoException(errno, \"setuid\");\n  }\n}\n\n\nstatic void SetEUid(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsUint32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"seteuid argument must be a number or string\");\n  }\n\n  uid_t uid = uid_by_name(env->isolate(), args[0]);\n\n  if (uid == uid_not_found) {\n    return env->ThrowError(\"seteuid user id does not exist\");\n  }\n\n  if (seteuid(uid)) {\n    return env->ThrowErrnoException(errno, \"seteuid\");\n  }\n}\n\n\nstatic void GetGroups(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  int ngroups = getgroups(0, nullptr);\n\n  if (ngroups == -1) {\n    return env->ThrowErrnoException(errno, \"getgroups\");\n  }\n\n  gid_t* groups = new gid_t[ngroups];\n\n  ngroups = getgroups(ngroups, groups);\n\n  if (ngroups == -1) {\n    delete[] groups;\n    return env->ThrowErrnoException(errno, \"getgroups\");\n  }\n\n  Local<Array> groups_list = Array::New(env->isolate(), ngroups);\n  bool seen_egid = false;\n  gid_t egid = getegid();\n\n  for (int i = 0; i < ngroups; i++) {\n    groups_list->Set(i, Integer::New(env->isolate(), groups[i]));\n    if (groups[i] == egid)\n      seen_egid = true;\n  }\n\n  delete[] groups;\n\n  if (seen_egid == false) {\n    groups_list->Set(ngroups, Integer::New(env->isolate(), egid));\n  }\n\n  args.GetReturnValue().Set(groups_list);\n}\n\n\nstatic void SetGroups(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsArray()) {\n    return env->ThrowTypeError(\"argument 1 must be an array\");\n  }\n\n  Local<Array> groups_list = args[0].As<Array>();\n  size_t size = groups_list->Length();\n  gid_t* groups = new gid_t[size];\n\n  for (size_t i = 0; i < size; i++) {\n    gid_t gid = gid_by_name(env->isolate(), groups_list->Get(i));\n\n    if (gid == gid_not_found) {\n      delete[] groups;\n      return env->ThrowError(\"group name not found\");\n    }\n\n    groups[i] = gid;\n  }\n\n  int rc = setgroups(size, groups);\n  delete[] groups;\n\n  if (rc == -1) {\n    return env->ThrowErrnoException(errno, \"setgroups\");\n  }\n}\n\n\nstatic void InitGroups(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[0]->IsUint32() && !args[0]->IsString()) {\n    return env->ThrowTypeError(\"argument 1 must be a number or a string\");\n  }\n\n  if (!args[1]->IsUint32() && !args[1]->IsString()) {\n    return env->ThrowTypeError(\"argument 2 must be a number or a string\");\n  }\n\n  node::Utf8Value arg0(env->isolate(), args[0]);\n  gid_t extra_group;\n  bool must_free;\n  char* user;\n\n  if (args[0]->IsUint32()) {\n    user = name_by_uid(args[0]->Uint32Value());\n    must_free = true;\n  } else {\n    user = *arg0;\n    must_free = false;\n  }\n\n  if (user == nullptr) {\n    return env->ThrowError(\"initgroups user not found\");\n  }\n\n  extra_group = gid_by_name(env->isolate(), args[1]);\n\n  if (extra_group == gid_not_found) {\n    if (must_free)\n      free(user);\n    return env->ThrowError(\"initgroups extra group not found\");\n  }\n\n  int rc = initgroups(user, extra_group);\n\n  if (must_free) {\n    free(user);\n  }\n\n  if (rc) {\n    return env->ThrowErrnoException(errno, \"initgroups\");\n  }\n}\n\n#endif  // __POSIX__ && !defined(__ANDROID__)\n\n\nvoid Exit(const FunctionCallbackInfo<Value>& args) {\n  exit(args[0]->Int32Value());\n}\n\n\nstatic void Uptime(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  double uptime;\n\n  uv_update_time(env->event_loop());\n  uptime = uv_now(env->event_loop()) - prog_start_time;\n\n  args.GetReturnValue().Set(Number::New(env->isolate(), uptime / 1000));\n}\n\n\nvoid MemoryUsage(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  size_t rss;\n  int err = uv_resident_set_memory(&rss);\n  if (err) {\n    return env->ThrowUVException(err, \"uv_resident_set_memory\");\n  }\n\n  // V8 memory usage\n  HeapStatistics v8_heap_stats;\n  env->isolate()->GetHeapStatistics(&v8_heap_stats);\n\n  Local<Number> heap_total =\n      Number::New(env->isolate(), v8_heap_stats.total_heap_size());\n  Local<Number> heap_used =\n      Number::New(env->isolate(), v8_heap_stats.used_heap_size());\n\n  Local<Object> info = Object::New(env->isolate());\n  info->Set(env->rss_string(), Number::New(env->isolate(), rss));\n  info->Set(env->heap_total_string(), heap_total);\n  info->Set(env->heap_used_string(), heap_used);\n\n  args.GetReturnValue().Set(info);\n}\n\n\nvoid Kill(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (args.Length() != 2) {\n    return env->ThrowError(\"Bad argument.\");\n  }\n\n  int pid = args[0]->Int32Value();\n  int sig = args[1]->Int32Value();\n  int err = uv_kill(pid, sig);\n  args.GetReturnValue().Set(err);\n}\n\n// used in Hrtime() below\n#define NANOS_PER_SEC 1000000000\n\n// Hrtime exposes libuv's uv_hrtime() high-resolution timer.\n// The value returned by uv_hrtime() is a 64-bit int representing nanoseconds,\n// so this function instead returns an Array with 2 entries representing seconds\n// and nanoseconds, to avoid any integer overflow possibility.\n// Pass in an Array from a previous hrtime() call to instead get a time diff.\nvoid Hrtime(const FunctionCallbackInfo<Value>& args) {\n  uint64_t t = uv_hrtime();\n\n  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();\n  uint32_t* fields = static_cast<uint32_t*>(ab->GetContents().Data());\n\n  // These three indices will contain the values for the hrtime tuple. The\n  // seconds value is broken into the upper/lower 32 bits and stored in two\n  // uint32 fields to be converted back in JS.\n  fields[0] = (t / NANOS_PER_SEC) >> 32;\n  fields[1] = (t / NANOS_PER_SEC) & 0xffffffff;\n  fields[2] = t % NANOS_PER_SEC;\n}\n\n// Microseconds in a second, as a float, used in CPUUsage() below\n#define MICROS_PER_SEC 1e6\n\n// CPUUsage use libuv's uv_getrusage() this-process resource usage accessor,\n// to access ru_utime (user CPU time used) and ru_stime (system CPU time used),\n// which are uv_timeval_t structs (long tv_sec, long tv_usec).\n// Returns those values as Float64 microseconds in the elements of the array\n// passed to the function.\nvoid CPUUsage(const FunctionCallbackInfo<Value>& args) {\n  uv_rusage_t rusage;\n\n  // Call libuv to get the values we'll return.\n  int err = uv_getrusage(&rusage);\n  if (err) {\n    // On error, return the strerror version of the error code.\n    Local<String> errmsg = OneByteString(args.GetIsolate(), uv_strerror(err));\n    args.GetReturnValue().Set(errmsg);\n    return;\n  }\n\n  // Get the double array pointer from the Float64Array argument.\n  CHECK(args[0]->IsFloat64Array());\n  Local<Float64Array> array = args[0].As<Float64Array>();\n  CHECK_EQ(array->Length(), 2);\n  Local<ArrayBuffer> ab = array->Buffer();\n  double* fields = static_cast<double*>(ab->GetContents().Data());\n\n  // Set the Float64Array elements to be user / system values in microseconds.\n  fields[0] = MICROS_PER_SEC * rusage.ru_utime.tv_sec + rusage.ru_utime.tv_usec;\n  fields[1] = MICROS_PER_SEC * rusage.ru_stime.tv_sec + rusage.ru_stime.tv_usec;\n}\n\nextern \"C\" void node_module_register(void* m) {\n  struct node_module* mp = reinterpret_cast<struct node_module*>(m);\n\n  if (mp->nm_flags & NM_F_BUILTIN) {\n    mp->nm_link = modlist_builtin;\n    modlist_builtin = mp;\n  } else if (!node_is_initialized) {\n    // \"Linked\" modules are included as part of the node project.\n    // Like builtins they are registered *before* node::Init runs.\n    mp->nm_flags = NM_F_LINKED;\n    mp->nm_link = modlist_linked;\n    modlist_linked = mp;\n  } else {\n    modpending = mp;\n  }\n}\n\nstruct node_module* get_builtin_module(const char* name) {\n  struct node_module* mp;\n\n  for (mp = modlist_builtin; mp != nullptr; mp = mp->nm_link) {\n    if (strcmp(mp->nm_modname, name) == 0)\n      break;\n  }\n\n  CHECK(mp == nullptr || (mp->nm_flags & NM_F_BUILTIN) != 0);\n  return (mp);\n}\n\nstruct node_module* get_linked_module(const char* name) {\n  struct node_module* mp;\n\n  for (mp = modlist_linked; mp != nullptr; mp = mp->nm_link) {\n    if (strcmp(mp->nm_modname, name) == 0)\n      break;\n  }\n\n  CHECK(mp == nullptr || (mp->nm_flags & NM_F_LINKED) != 0);\n  return mp;\n}\n\ntypedef void (UV_DYNAMIC* extInit)(Local<Object> exports);\n\n// DLOpen is process.dlopen(module, filename).\n// Used to load 'module.node' dynamically shared objects.\n//\n// FIXME(bnoordhuis) Not multi-context ready. TBD how to resolve the conflict\n// when two contexts try to load the same shared object. Maybe have a shadow\n// cache that's a plain C list or hash table that's shared across contexts?\nvoid DLOpen(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  uv_lib_t lib;\n\n  CHECK_EQ(modpending, nullptr);\n\n  if (args.Length() != 2) {\n    env->ThrowError(\"process.dlopen takes exactly 2 arguments.\");\n    return;\n  }\n\n  Local<Object> module = args[0]->ToObject(env->isolate());  // Cast\n  node::Utf8Value filename(env->isolate(), args[1]);  // Cast\n  const bool is_dlopen_error = uv_dlopen(*filename, &lib);\n\n  // Objects containing v14 or later modules will have registered themselves\n  // on the pending list.  Activate all of them now.  At present, only one\n  // module per object is supported.\n  node_module* const mp = modpending;\n  modpending = nullptr;\n\n  if (is_dlopen_error) {\n    Local<String> errmsg = OneByteString(env->isolate(), uv_dlerror(&lib));\n    uv_dlclose(&lib);\n#ifdef _WIN32\n    // Windows needs to add the filename into the error message\n    errmsg = String::Concat(errmsg, args[1]->ToString(env->isolate()));\n#endif  // _WIN32\n    env->isolate()->ThrowException(Exception::Error(errmsg));\n    return;\n  }\n\n  if (mp == nullptr) {\n    uv_dlclose(&lib);\n    env->ThrowError(\"Module did not self-register.\");\n    return;\n  }\n  if (mp->nm_version != NODE_MODULE_VERSION) {\n    char errmsg[1024];\n    snprintf(errmsg,\n             sizeof(errmsg),\n             \"Module version mismatch. Expected %d, got %d.\",\n             NODE_MODULE_VERSION, mp->nm_version);\n\n    // NOTE: `mp` is allocated inside of the shared library's memory, calling\n    // `uv_dlclose` will deallocate it\n    uv_dlclose(&lib);\n    env->ThrowError(errmsg);\n    return;\n  }\n  if (mp->nm_flags & NM_F_BUILTIN) {\n    uv_dlclose(&lib);\n    env->ThrowError(\"Built-in module self-registered.\");\n    return;\n  }\n\n  mp->nm_dso_handle = lib.handle;\n  mp->nm_link = modlist_addon;\n  modlist_addon = mp;\n\n  Local<String> exports_string = env->exports_string();\n  Local<Object> exports = module->Get(exports_string)->ToObject(env->isolate());\n\n  if (mp->nm_context_register_func != nullptr) {\n    mp->nm_context_register_func(exports, module, env->context(), mp->nm_priv);\n  } else if (mp->nm_register_func != nullptr) {\n    mp->nm_register_func(exports, module, mp->nm_priv);\n  } else {\n    uv_dlclose(&lib);\n    env->ThrowError(\"Module has no declared entry point.\");\n    return;\n  }\n\n  // Tell coverity that 'handle' should not be freed when we return.\n  // coverity[leaked_storage]\n}\n\n\nstatic void OnFatalError(const char* location, const char* message) {\n  if (location) {\n    PrintErrorString(\"FATAL ERROR: %s %s\\n\", location, message);\n  } else {\n    PrintErrorString(\"FATAL ERROR: %s\\n\", message);\n  }\n  fflush(stderr);\n  ABORT();\n}\n\n\nNO_RETURN void FatalError(const char* location, const char* message) {\n  OnFatalError(location, message);\n  // to suppress compiler warning\n  ABORT();\n}\n\n\nvoid FatalException(Isolate* isolate,\n                    Local<Value> error,\n                    Local<Message> message) {\n  HandleScope scope(isolate);\n\n  Environment* env = Environment::GetCurrent(isolate);\n  Local<Object> process_object = env->process_object();\n  Local<String> fatal_exception_string = env->fatal_exception_string();\n  Local<Function> fatal_exception_function =\n      process_object->Get(fatal_exception_string).As<Function>();\n\n  if (!fatal_exception_function->IsFunction()) {\n    // failed before the process._fatalException function was added!\n    // this is probably pretty bad.  Nothing to do but report and exit.\n    ReportException(env, error, message);\n    exit(6);\n  }\n\n  TryCatch fatal_try_catch(isolate);\n\n  // Do not call FatalException when _fatalException handler throws\n  fatal_try_catch.SetVerbose(false);\n\n  // this will return true if the JS layer handled it, false otherwise\n  Local<Value> caught =\n      fatal_exception_function->Call(process_object, 1, &error);\n\n  if (fatal_try_catch.HasCaught()) {\n    // the fatal exception function threw, so we must exit\n    ReportException(env, fatal_try_catch);\n    exit(7);\n  }\n\n  if (false == caught->BooleanValue()) {\n    ReportException(env, error, message);\n    exit(1);\n  }\n}\n\n\nvoid FatalException(Isolate* isolate, const TryCatch& try_catch) {\n  HandleScope scope(isolate);\n  // TODO(bajtos) do not call FatalException if try_catch is verbose\n  // (requires V8 API to expose getter for try_catch.is_verbose_)\n  FatalException(isolate, try_catch.Exception(), try_catch.Message());\n}\n\n\nvoid OnMessage(Local<Message> message, Local<Value> error) {\n  // The current version of V8 sends messages for errors only\n  // (thus `error` is always set).\n  FatalException(Isolate::GetCurrent(), error, message);\n}\n\n\nvoid ClearFatalExceptionHandlers(Environment* env) {\n  Local<Object> process = env->process_object();\n  Local<Value> events =\n      process->Get(env->context(), env->events_string()).ToLocalChecked();\n\n  if (events->IsObject()) {\n    events.As<Object>()->Set(\n        env->context(),\n        OneByteString(env->isolate(), \"uncaughtException\"),\n        Undefined(env->isolate())).FromJust();\n  }\n\n  process->Set(\n      env->context(),\n      env->domain_string(),\n      Undefined(env->isolate())).FromJust();\n}\n\n\nstatic void Binding(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  Local<String> module = args[0]->ToString(env->isolate());\n  node::Utf8Value module_v(env->isolate(), module);\n\n  Local<Object> cache = env->binding_cache_object();\n  Local<Object> exports;\n\n  if (cache->Has(env->context(), module).FromJust()) {\n    exports = cache->Get(module)->ToObject(env->isolate());\n    args.GetReturnValue().Set(exports);\n    return;\n  }\n\n  // Append a string to process.moduleLoadList\n  char buf[1024];\n  snprintf(buf, sizeof(buf), \"Binding %s\", *module_v);\n\n  Local<Array> modules = env->module_load_list_array();\n  uint32_t l = modules->Length();\n  modules->Set(l, OneByteString(env->isolate(), buf));\n\n  node_module* mod = get_builtin_module(*module_v);\n  if (mod != nullptr) {\n    exports = Object::New(env->isolate());\n    // Internal bindings don't have a \"module\" object, only exports.\n    CHECK_EQ(mod->nm_register_func, nullptr);\n    CHECK_NE(mod->nm_context_register_func, nullptr);\n    Local<Value> unused = Undefined(env->isolate());\n    mod->nm_context_register_func(exports, unused,\n      env->context(), mod->nm_priv);\n    cache->Set(module, exports);\n  } else if (!strcmp(*module_v, \"constants\")) {\n    exports = Object::New(env->isolate());\n    DefineConstants(exports);\n    cache->Set(module, exports);\n  } else if (!strcmp(*module_v, \"natives\")) {\n    exports = Object::New(env->isolate());\n    DefineJavaScript(env, exports);\n    cache->Set(module, exports);\n  } else {\n    char errmsg[1024];\n    snprintf(errmsg,\n             sizeof(errmsg),\n             \"No such module: %s\",\n             *module_v);\n    return env->ThrowError(errmsg);\n  }\n\n  args.GetReturnValue().Set(exports);\n}\n\nstatic void LinkedBinding(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args.GetIsolate());\n\n  Local<String> module_name = args[0]->ToString(env->isolate());\n\n  Local<Object> cache = env->binding_cache_object();\n  Local<Value> exports_v = cache->Get(module_name);\n\n  if (exports_v->IsObject())\n    return args.GetReturnValue().Set(exports_v.As<Object>());\n\n  node::Utf8Value module_name_v(env->isolate(), module_name);\n  node_module* mod = get_linked_module(*module_name_v);\n\n  if (mod == nullptr) {\n    char errmsg[1024];\n    snprintf(errmsg,\n             sizeof(errmsg),\n             \"No such module was linked: %s\",\n             *module_name_v);\n    return env->ThrowError(errmsg);\n  }\n\n  Local<Object> module = Object::New(env->isolate());\n  Local<Object> exports = Object::New(env->isolate());\n  Local<String> exports_prop = String::NewFromUtf8(env->isolate(), \"exports\");\n  module->Set(exports_prop, exports);\n\n  if (mod->nm_context_register_func != nullptr) {\n    mod->nm_context_register_func(exports,\n                                  module,\n                                  env->context(),\n                                  mod->nm_priv);\n  } else if (mod->nm_register_func != nullptr) {\n    mod->nm_register_func(exports, module, mod->nm_priv);\n  } else {\n    return env->ThrowError(\"Linked module has no declared entry point.\");\n  }\n\n  auto effective_exports = module->Get(exports_prop);\n  cache->Set(module_name, effective_exports);\n\n  args.GetReturnValue().Set(effective_exports);\n}\n\nstatic void ProcessTitleGetter(Local<Name> property,\n                               const PropertyCallbackInfo<Value>& info) {\n  char buffer[512];\n  uv_get_process_title(buffer, sizeof(buffer));\n  info.GetReturnValue().Set(String::NewFromUtf8(info.GetIsolate(), buffer));\n}\n\n\nstatic void ProcessTitleSetter(Local<Name> property,\n                               Local<Value> value,\n                               const PropertyCallbackInfo<void>& info) {\n  node::Utf8Value title(info.GetIsolate(), value);\n  // TODO(piscisaureus): protect with a lock\n  uv_set_process_title(*title);\n}\n\n\nstatic void EnvGetter(Local<String> property,\n                      const PropertyCallbackInfo<Value>& info) {\n  Isolate* isolate = info.GetIsolate();\n#ifdef __POSIX__\n  node::Utf8Value key(isolate, property);\n  const char* val = getenv(*key);\n  if (val) {\n    return info.GetReturnValue().Set(String::NewFromUtf8(isolate, val));\n  }\n#else  // _WIN32\n  String::Value key(property);\n  WCHAR buffer[32767];  // The maximum size allowed for environment variables.\n  DWORD result = GetEnvironmentVariableW(reinterpret_cast<WCHAR*>(*key),\n                                         buffer,\n                                         arraysize(buffer));\n  // If result >= sizeof buffer the buffer was too small. That should never\n  // happen. If result == 0 and result != ERROR_SUCCESS the variable was not\n  // not found.\n  if ((result > 0 || GetLastError() == ERROR_SUCCESS) &&\n      result < arraysize(buffer)) {\n    const uint16_t* two_byte_buffer = reinterpret_cast<const uint16_t*>(buffer);\n    Local<String> rc = String::NewFromTwoByte(isolate, two_byte_buffer);\n    return info.GetReturnValue().Set(rc);\n  }\n#endif\n}\n\n\nstatic void EnvSetter(Local<String> property,\n                      Local<Value> value,\n                      const PropertyCallbackInfo<Value>& info) {\n#ifdef __POSIX__\n  node::Utf8Value key(info.GetIsolate(), property);\n  node::Utf8Value val(info.GetIsolate(), value);\n  setenv(*key, *val, 1);\n#else  // _WIN32\n  String::Value key(property);\n  String::Value val(value);\n  WCHAR* key_ptr = reinterpret_cast<WCHAR*>(*key);\n  // Environment variables that start with '=' are read-only.\n  if (key_ptr[0] != L'=') {\n    SetEnvironmentVariableW(key_ptr, reinterpret_cast<WCHAR*>(*val));\n  }\n#endif\n  // Whether it worked or not, always return rval.\n  info.GetReturnValue().Set(value);\n}\n\n\nstatic void EnvQuery(Local<String> property,\n                     const PropertyCallbackInfo<Integer>& info) {\n  int32_t rc = -1;  // Not found unless proven otherwise.\n#ifdef __POSIX__\n  node::Utf8Value key(info.GetIsolate(), property);\n  if (getenv(*key))\n    rc = 0;\n#else  // _WIN32\n  String::Value key(property);\n  WCHAR* key_ptr = reinterpret_cast<WCHAR*>(*key);\n  if (GetEnvironmentVariableW(key_ptr, nullptr, 0) > 0 ||\n      GetLastError() == ERROR_SUCCESS) {\n    rc = 0;\n    if (key_ptr[0] == L'=') {\n      // Environment variables that start with '=' are hidden and read-only.\n      rc = static_cast<int32_t>(v8::ReadOnly) |\n           static_cast<int32_t>(v8::DontDelete) |\n           static_cast<int32_t>(v8::DontEnum);\n    }\n  }\n#endif\n  if (rc != -1)\n    info.GetReturnValue().Set(rc);\n}\n\n\nstatic void EnvDeleter(Local<String> property,\n                       const PropertyCallbackInfo<Boolean>& info) {\n  bool rc = true;\n#ifdef __POSIX__\n  node::Utf8Value key(info.GetIsolate(), property);\n  rc = getenv(*key) != nullptr;\n  if (rc)\n    unsetenv(*key);\n#else\n  String::Value key(property);\n  WCHAR* key_ptr = reinterpret_cast<WCHAR*>(*key);\n  if (key_ptr[0] == L'=' || !SetEnvironmentVariableW(key_ptr, nullptr)) {\n    // Deletion failed. Return true if the key wasn't there in the first place,\n    // false if it is still there.\n    rc = GetEnvironmentVariableW(key_ptr, nullptr, 0) == 0 &&\n         GetLastError() != ERROR_SUCCESS;\n  }\n#endif\n  info.GetReturnValue().Set(rc);\n}\n\n\nstatic void EnvEnumerator(const PropertyCallbackInfo<Array>& info) {\n  Environment* env = Environment::GetCurrent(info);\n  Isolate* isolate = env->isolate();\n  Local<Context> ctx = env->context();\n  Local<Function> fn = env->push_values_to_array_function();\n  Local<Value> argv[NODE_PUSH_VAL_TO_ARRAY_MAX];\n  size_t idx = 0;\n\n#ifdef __POSIX__\n  int size = 0;\n  while (environ[size])\n    size++;\n\n  Local<Array> envarr = Array::New(isolate);\n\n  for (int i = 0; i < size; ++i) {\n    const char* var = environ[i];\n    const char* s = strchr(var, '=');\n    const int length = s ? s - var : strlen(var);\n    argv[idx] = String::NewFromUtf8(isolate,\n                                    var,\n                                    String::kNormalString,\n                                    length);\n    if (++idx >= arraysize(argv)) {\n      fn->Call(ctx, envarr, idx, argv).ToLocalChecked();\n      idx = 0;\n    }\n  }\n  if (idx > 0) {\n    fn->Call(ctx, envarr, idx, argv).ToLocalChecked();\n  }\n#else  // _WIN32\n  WCHAR* environment = GetEnvironmentStringsW();\n  if (environment == nullptr)\n    return;  // This should not happen.\n  Local<Array> envarr = Array::New(isolate);\n  WCHAR* p = environment;\n  while (*p) {\n    WCHAR *s;\n    if (*p == L'=') {\n      // If the key starts with '=' it is a hidden environment variable.\n      p += wcslen(p) + 1;\n      continue;\n    } else {\n      s = wcschr(p, L'=');\n    }\n    if (!s) {\n      s = p + wcslen(p);\n    }\n    const uint16_t* two_byte_buffer = reinterpret_cast<const uint16_t*>(p);\n    const size_t two_byte_buffer_len = s - p;\n    argv[idx] = String::NewFromTwoByte(isolate,\n                                       two_byte_buffer,\n                                       String::kNormalString,\n                                       two_byte_buffer_len);\n    if (++idx >= arraysize(argv)) {\n      fn->Call(ctx, envarr, idx, argv).ToLocalChecked();\n      idx = 0;\n    }\n    p = s + wcslen(s) + 1;\n  }\n  if (idx > 0) {\n    fn->Call(ctx, envarr, idx, argv).ToLocalChecked();\n  }\n  FreeEnvironmentStringsW(environment);\n#endif\n\n  info.GetReturnValue().Set(envarr);\n}\n\n\nstatic Local<Object> GetFeatures(Environment* env) {\n  EscapableHandleScope scope(env->isolate());\n\n  Local<Object> obj = Object::New(env->isolate());\n#if defined(DEBUG) && DEBUG\n  Local<Value> debug = True(env->isolate());\n#else\n  Local<Value> debug = False(env->isolate());\n#endif  // defined(DEBUG) && DEBUG\n\n  obj->Set(env->debug_string(), debug);\n\n  obj->Set(env->uv_string(), True(env->isolate()));\n  // TODO(bnoordhuis) ping libuv\n  obj->Set(env->ipv6_lc_string(), True(env->isolate()));\n\n#ifdef OPENSSL_NPN_NEGOTIATED\n  Local<Boolean> tls_npn = True(env->isolate());\n#else\n  Local<Boolean> tls_npn = False(env->isolate());\n#endif\n  obj->Set(env->tls_npn_string(), tls_npn);\n\n#ifdef TLSEXT_TYPE_application_layer_protocol_negotiation\n  Local<Boolean> tls_alpn = True(env->isolate());\n#else\n  Local<Boolean> tls_alpn = False(env->isolate());\n#endif\n  obj->Set(env->tls_alpn_string(), tls_alpn);\n\n#ifdef SSL_CTRL_SET_TLSEXT_SERVERNAME_CB\n  Local<Boolean> tls_sni = True(env->isolate());\n#else\n  Local<Boolean> tls_sni = False(env->isolate());\n#endif\n  obj->Set(env->tls_sni_string(), tls_sni);\n\n#if !defined(OPENSSL_NO_TLSEXT) && defined(SSL_CTX_set_tlsext_status_cb)\n  Local<Boolean> tls_ocsp = True(env->isolate());\n#else\n  Local<Boolean> tls_ocsp = False(env->isolate());\n#endif  // !defined(OPENSSL_NO_TLSEXT) && defined(SSL_CTX_set_tlsext_status_cb)\n  obj->Set(env->tls_ocsp_string(), tls_ocsp);\n\n  obj->Set(env->tls_string(),\n           Boolean::New(env->isolate(),\n                        get_builtin_module(\"crypto\") != nullptr));\n\n  return scope.Escape(obj);\n}\n\n\nstatic void DebugPortGetter(Local<Name> property,\n                            const PropertyCallbackInfo<Value>& info) {\n  info.GetReturnValue().Set(debug_port);\n}\n\n\nstatic void DebugPortSetter(Local<Name> property,\n                            Local<Value> value,\n                            const PropertyCallbackInfo<void>& info) {\n  debug_port = value->Int32Value();\n}\n\n\nstatic void DebugProcess(const FunctionCallbackInfo<Value>& args);\nstatic void DebugPause(const FunctionCallbackInfo<Value>& args);\nstatic void DebugEnd(const FunctionCallbackInfo<Value>& args);\n\n\nvoid NeedImmediateCallbackGetter(Local<Name> property,\n                                 const PropertyCallbackInfo<Value>& info) {\n  Environment* env = Environment::GetCurrent(info);\n  const uv_check_t* immediate_check_handle = env->immediate_check_handle();\n  bool active = uv_is_active(\n      reinterpret_cast<const uv_handle_t*>(immediate_check_handle));\n  info.GetReturnValue().Set(active);\n}\n\n\nstatic void NeedImmediateCallbackSetter(\n    Local<Name> property,\n    Local<Value> value,\n    const PropertyCallbackInfo<void>& info) {\n  Environment* env = Environment::GetCurrent(info);\n\n  uv_check_t* immediate_check_handle = env->immediate_check_handle();\n  bool active = uv_is_active(\n      reinterpret_cast<const uv_handle_t*>(immediate_check_handle));\n\n  if (active == value->BooleanValue())\n    return;\n\n  uv_idle_t* immediate_idle_handle = env->immediate_idle_handle();\n\n  if (active) {\n    uv_check_stop(immediate_check_handle);\n    uv_idle_stop(immediate_idle_handle);\n  } else {\n    uv_check_start(immediate_check_handle, CheckImmediate);\n    // Idle handle is needed only to stop the event loop from blocking in poll.\n    uv_idle_start(immediate_idle_handle, IdleImmediateDummy);\n  }\n}\n\n\nvoid SetIdle(uv_prepare_t* handle) {\n  Environment* env = Environment::from_idle_prepare_handle(handle);\n  env->isolate()->GetCpuProfiler()->SetIdle(true);\n}\n\n\nvoid ClearIdle(uv_check_t* handle) {\n  Environment* env = Environment::from_idle_check_handle(handle);\n  env->isolate()->GetCpuProfiler()->SetIdle(false);\n}\n\n\nvoid StartProfilerIdleNotifier(Environment* env) {\n  uv_prepare_start(env->idle_prepare_handle(), SetIdle);\n  uv_check_start(env->idle_check_handle(), ClearIdle);\n}\n\n\nvoid StopProfilerIdleNotifier(Environment* env) {\n  uv_prepare_stop(env->idle_prepare_handle());\n  uv_check_stop(env->idle_check_handle());\n}\n\n\nvoid StartProfilerIdleNotifier(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  StartProfilerIdleNotifier(env);\n}\n\n\nvoid StopProfilerIdleNotifier(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  StopProfilerIdleNotifier(env);\n}\n\n\n#define READONLY_PROPERTY(obj, str, var)                                      \\\n  do {                                                                        \\\n    obj->DefineOwnProperty(env->context(),                                    \\\n                           OneByteString(env->isolate(), str),                \\\n                           var,                                               \\\n                           v8::ReadOnly).FromJust();                          \\\n  } while (0)\n\n#define READONLY_DONT_ENUM_PROPERTY(obj, str, var)                            \\\n  do {                                                                        \\\n    obj->DefineOwnProperty(env->context(),                                    \\\n                           OneByteString(env->isolate(), str),                \\\n                           var,                                               \\\n                           static_cast<v8::PropertyAttribute>(v8::ReadOnly |  \\\n                                                              v8::DontEnum))  \\\n        .FromJust();                                                          \\\n  } while (0)\n\n\nvoid SetupProcessObject(Environment* env,\n                        int argc,\n                        const char* const* argv,\n                        int exec_argc,\n                        const char* const* exec_argv) {\n  HandleScope scope(env->isolate());\n\n  Local<Object> process = env->process_object();\n\n  auto maybe = process->SetAccessor(env->context(),\n                                    env->title_string(),\n                                    ProcessTitleGetter,\n                                    ProcessTitleSetter,\n                                    env->as_external());\n  CHECK(maybe.FromJust());\n\n  // process.version\n  READONLY_PROPERTY(process,\n                    \"version\",\n                    FIXED_ONE_BYTE_STRING(env->isolate(), NODE_VERSION));\n\n  // process.moduleLoadList\n  READONLY_PROPERTY(process,\n                    \"moduleLoadList\",\n                    env->module_load_list_array());\n\n  // process.versions\n  Local<Object> versions = Object::New(env->isolate());\n  READONLY_PROPERTY(process, \"versions\", versions);\n\n  const char http_parser_version[] = NODE_STRINGIFY(HTTP_PARSER_VERSION_MAJOR)\n                                     \".\"\n                                     NODE_STRINGIFY(HTTP_PARSER_VERSION_MINOR)\n                                     \".\"\n                                     NODE_STRINGIFY(HTTP_PARSER_VERSION_PATCH);\n  READONLY_PROPERTY(versions,\n                    \"http_parser\",\n                    FIXED_ONE_BYTE_STRING(env->isolate(), http_parser_version));\n\n  // +1 to get rid of the leading 'v'\n  READONLY_PROPERTY(versions,\n                    \"node\",\n                    OneByteString(env->isolate(), NODE_VERSION + 1));\n  READONLY_PROPERTY(versions,\n                    \"v8\",\n                    OneByteString(env->isolate(), V8::GetVersion()));\n  READONLY_PROPERTY(versions,\n                    \"uv\",\n                    OneByteString(env->isolate(), uv_version_string()));\n  READONLY_PROPERTY(versions,\n                    \"zlib\",\n                    FIXED_ONE_BYTE_STRING(env->isolate(), ZLIB_VERSION));\n  READONLY_PROPERTY(versions,\n                    \"ares\",\n                    FIXED_ONE_BYTE_STRING(env->isolate(), ARES_VERSION_STR));\n\n#if defined(NODE_HAVE_I18N_SUPPORT) && defined(U_ICU_VERSION)\n  READONLY_PROPERTY(versions,\n                    \"icu\",\n                    OneByteString(env->isolate(), U_ICU_VERSION));\n\n  if (icu_data_dir != nullptr) {\n    // Did the user attempt (via env var or parameter) to set an ICU path?\n    READONLY_PROPERTY(process,\n                      \"icu_data_dir\",\n                      OneByteString(env->isolate(), icu_data_dir));\n  }\n#endif\n\n  const char node_modules_version[] = NODE_STRINGIFY(NODE_MODULE_VERSION);\n  READONLY_PROPERTY(\n      versions,\n      \"modules\",\n      FIXED_ONE_BYTE_STRING(env->isolate(), node_modules_version));\n\n  // process._promiseRejectEvent\n  Local<Object> promiseRejectEvent = Object::New(env->isolate());\n  READONLY_DONT_ENUM_PROPERTY(process,\n                              \"_promiseRejectEvent\",\n                              promiseRejectEvent);\n  READONLY_PROPERTY(promiseRejectEvent,\n                    \"unhandled\",\n                    Integer::New(env->isolate(),\n                                 v8::kPromiseRejectWithNoHandler));\n  READONLY_PROPERTY(promiseRejectEvent,\n                    \"handled\",\n                    Integer::New(env->isolate(),\n                                 v8::kPromiseHandlerAddedAfterReject));\n\n#if HAVE_OPENSSL\n  // Stupid code to slice out the version string.\n  {  // NOLINT(whitespace/braces)\n    size_t i, j, k;\n    int c;\n    for (i = j = 0, k = sizeof(OPENSSL_VERSION_TEXT) - 1; i < k; ++i) {\n      c = OPENSSL_VERSION_TEXT[i];\n      if ('0' <= c && c <= '9') {\n        for (j = i + 1; j < k; ++j) {\n          c = OPENSSL_VERSION_TEXT[j];\n          if (c == ' ')\n            break;\n        }\n        break;\n      }\n    }\n    READONLY_PROPERTY(\n        versions,\n        \"openssl\",\n        OneByteString(env->isolate(), &OPENSSL_VERSION_TEXT[i], j - i));\n  }\n#endif\n\n  // process.arch\n  READONLY_PROPERTY(process, \"arch\", OneByteString(env->isolate(), NODE_ARCH));\n\n  // process.platform\n  READONLY_PROPERTY(process,\n                    \"platform\",\n                    OneByteString(env->isolate(), NODE_PLATFORM));\n\n  // process.release\n  Local<Object> release = Object::New(env->isolate());\n  READONLY_PROPERTY(process, \"release\", release);\n  READONLY_PROPERTY(release, \"name\", OneByteString(env->isolate(), \"node\"));\n\n// if this is a release build and no explicit base has been set\n// substitute the standard release download URL\n#ifndef NODE_RELEASE_URLBASE\n# if NODE_VERSION_IS_RELEASE\n#  define NODE_RELEASE_URLBASE \"https://nodejs.org/download/release/\"\n# endif\n#endif\n\n#if defined(NODE_RELEASE_URLBASE)\n#  define NODE_RELEASE_URLPFX NODE_RELEASE_URLBASE \"v\" NODE_VERSION_STRING \"/\"\n#  define NODE_RELEASE_URLFPFX NODE_RELEASE_URLPFX \"node-v\" NODE_VERSION_STRING\n\n  READONLY_PROPERTY(release,\n                    \"sourceUrl\",\n                    OneByteString(env->isolate(),\n                    NODE_RELEASE_URLFPFX \".tar.gz\"));\n  READONLY_PROPERTY(release,\n                    \"headersUrl\",\n                    OneByteString(env->isolate(),\n                    NODE_RELEASE_URLFPFX \"-headers.tar.gz\"));\n#  ifdef _WIN32\n  READONLY_PROPERTY(release,\n                    \"libUrl\",\n                    OneByteString(env->isolate(),\n                    strcmp(NODE_ARCH, \"ia32\") ? NODE_RELEASE_URLPFX \"win-\"\n                                                NODE_ARCH \"/node.lib\"\n                                              : NODE_RELEASE_URLPFX\n                                                \"win-x86/node.lib\"));\n#  endif\n#endif\n\n  // process.argv\n  Local<Array> arguments = Array::New(env->isolate(), argc);\n  for (int i = 0; i < argc; ++i) {\n    arguments->Set(i, String::NewFromUtf8(env->isolate(), argv[i]));\n  }\n  process->Set(env->argv_string(), arguments);\n\n  // process.execArgv\n  Local<Array> exec_arguments = Array::New(env->isolate(), exec_argc);\n  for (int i = 0; i < exec_argc; ++i) {\n    exec_arguments->Set(i, String::NewFromUtf8(env->isolate(), exec_argv[i]));\n  }\n  process->Set(env->exec_argv_string(), exec_arguments);\n\n  // create process.env\n  Local<ObjectTemplate> process_env_template =\n      ObjectTemplate::New(env->isolate());\n  process_env_template->SetNamedPropertyHandler(EnvGetter,\n                                                EnvSetter,\n                                                EnvQuery,\n                                                EnvDeleter,\n                                                EnvEnumerator,\n                                                env->as_external());\n  Local<Object> process_env =\n      process_env_template->NewInstance(env->context()).ToLocalChecked();\n  process->Set(env->env_string(), process_env);\n\n  READONLY_PROPERTY(process, \"pid\", Integer::New(env->isolate(), getpid()));\n  READONLY_PROPERTY(process, \"features\", GetFeatures(env));\n  maybe = process->SetAccessor(env->context(),\n                               env->need_imm_cb_string(),\n                               NeedImmediateCallbackGetter,\n                               NeedImmediateCallbackSetter,\n                               env->as_external());\n  CHECK(maybe.FromJust());\n\n  // -e, --eval\n  if (eval_string) {\n    READONLY_PROPERTY(process,\n                      \"_eval\",\n                      String::NewFromUtf8(env->isolate(), eval_string));\n  }\n\n  // -p, --print\n  if (print_eval) {\n    READONLY_PROPERTY(process, \"_print_eval\", True(env->isolate()));\n  }\n\n  // -c, --check\n  if (syntax_check_only) {\n    READONLY_PROPERTY(process, \"_syntax_check_only\", True(env->isolate()));\n  }\n\n  // -i, --interactive\n  if (force_repl) {\n    READONLY_PROPERTY(process, \"_forceRepl\", True(env->isolate()));\n  }\n\n  if (preload_module_count) {\n    CHECK(preload_modules);\n    Local<Array> array = Array::New(env->isolate());\n    for (unsigned int i = 0; i < preload_module_count; ++i) {\n      Local<String> module = String::NewFromUtf8(env->isolate(),\n                                                 preload_modules[i]);\n      array->Set(i, module);\n    }\n    READONLY_PROPERTY(process,\n                      \"_preload_modules\",\n                      array);\n\n    delete[] preload_modules;\n    preload_modules = nullptr;\n    preload_module_count = 0;\n  }\n\n  // --no-deprecation\n  if (no_deprecation) {\n    READONLY_PROPERTY(process, \"noDeprecation\", True(env->isolate()));\n  }\n\n  if (no_process_warnings) {\n    READONLY_PROPERTY(process, \"noProcessWarnings\", True(env->isolate()));\n  }\n\n  if (trace_warnings) {\n    READONLY_PROPERTY(process, \"traceProcessWarnings\", True(env->isolate()));\n  }\n\n  // --throw-deprecation\n  if (throw_deprecation) {\n    READONLY_PROPERTY(process, \"throwDeprecation\", True(env->isolate()));\n  }\n\n#ifdef NODE_NO_BROWSER_GLOBALS\n  // configure --no-browser-globals\n  READONLY_PROPERTY(process, \"_noBrowserGlobals\", True(env->isolate()));\n#endif  // NODE_NO_BROWSER_GLOBALS\n\n  // --prof-process\n  if (prof_process) {\n    READONLY_PROPERTY(process, \"profProcess\", True(env->isolate()));\n  }\n\n  // --trace-deprecation\n  if (trace_deprecation) {\n    READONLY_PROPERTY(process, \"traceDeprecation\", True(env->isolate()));\n  }\n\n  // --debug-brk\n  if (debug_wait_connect) {\n    READONLY_PROPERTY(process, \"_debugWaitConnect\", True(env->isolate()));\n  }\n\n  // --security-revert flags\n#define V(code, _, __)                                                        \\\n  do {                                                                        \\\n    if (IsReverted(REVERT_ ## code)) {                                        \\\n      READONLY_PROPERTY(process, \"REVERT_\" #code, True(env->isolate()));      \\\n    }                                                                         \\\n  } while (0);\n  REVERSIONS(V)\n#undef V\n\n  size_t exec_path_len = 2 * PATH_MAX;\n  char* exec_path = new char[exec_path_len];\n  Local<String> exec_path_value;\n  if (uv_exepath(exec_path, &exec_path_len) == 0) {\n    exec_path_value = String::NewFromUtf8(env->isolate(),\n                                          exec_path,\n                                          String::kNormalString,\n                                          exec_path_len);\n  } else {\n    exec_path_value = String::NewFromUtf8(env->isolate(), argv[0]);\n  }\n  process->Set(env->exec_path_string(), exec_path_value);\n  delete[] exec_path;\n\n  maybe = process->SetAccessor(env->context(),\n                               env->debug_port_string(),\n                               DebugPortGetter,\n                               DebugPortSetter,\n                               env->as_external());\n  CHECK(maybe.FromJust());\n\n\n  // define various internal methods\n  env->SetMethod(process,\n                 \"_startProfilerIdleNotifier\",\n                 StartProfilerIdleNotifier);\n  env->SetMethod(process,\n                 \"_stopProfilerIdleNotifier\",\n                 StopProfilerIdleNotifier);\n  env->SetMethod(process, \"_getActiveRequests\", GetActiveRequests);\n  env->SetMethod(process, \"_getActiveHandles\", GetActiveHandles);\n  env->SetMethod(process, \"reallyExit\", Exit);\n  env->SetMethod(process, \"abort\", Abort);\n  env->SetMethod(process, \"chdir\", Chdir);\n  env->SetMethod(process, \"cwd\", Cwd);\n\n  env->SetMethod(process, \"umask\", Umask);\n\n#if defined(__POSIX__) && !defined(__ANDROID__)\n  env->SetMethod(process, \"getuid\", GetUid);\n  env->SetMethod(process, \"geteuid\", GetEUid);\n  env->SetMethod(process, \"setuid\", SetUid);\n  env->SetMethod(process, \"seteuid\", SetEUid);\n\n  env->SetMethod(process, \"setgid\", SetGid);\n  env->SetMethod(process, \"setegid\", SetEGid);\n  env->SetMethod(process, \"getgid\", GetGid);\n  env->SetMethod(process, \"getegid\", GetEGid);\n\n  env->SetMethod(process, \"getgroups\", GetGroups);\n  env->SetMethod(process, \"setgroups\", SetGroups);\n  env->SetMethod(process, \"initgroups\", InitGroups);\n#endif  // __POSIX__ && !defined(__ANDROID__)\n\n  env->SetMethod(process, \"_kill\", Kill);\n\n  env->SetMethod(process, \"_debugProcess\", DebugProcess);\n  env->SetMethod(process, \"_debugPause\", DebugPause);\n  env->SetMethod(process, \"_debugEnd\", DebugEnd);\n\n  env->SetMethod(process, \"hrtime\", Hrtime);\n\n  env->SetMethod(process, \"cpuUsage\", CPUUsage);\n\n  env->SetMethod(process, \"dlopen\", DLOpen);\n\n  env->SetMethod(process, \"uptime\", Uptime);\n  env->SetMethod(process, \"memoryUsage\", MemoryUsage);\n\n  env->SetMethod(process, \"binding\", Binding);\n  env->SetMethod(process, \"_linkedBinding\", LinkedBinding);\n\n  env->SetMethod(process, \"_setupProcessObject\", SetupProcessObject);\n  env->SetMethod(process, \"_setupNextTick\", SetupNextTick);\n  env->SetMethod(process, \"_setupPromises\", SetupPromises);\n  env->SetMethod(process, \"_setupDomainUse\", SetupDomainUse);\n\n  // pre-set _events object for faster emit checks\n  Local<Object> events_obj = Object::New(env->isolate());\n  maybe = events_obj->SetPrototype(env->context(), Null(env->isolate()));\n  CHECK(maybe.FromJust());\n  process->Set(env->events_string(), events_obj);\n}\n\n\n#undef READONLY_PROPERTY\n\n\nstatic void AtExit() {\n  uv_tty_reset_mode();\n}\n\n\nstatic void SignalExit(int signo) {\n  uv_tty_reset_mode();\n#ifdef __FreeBSD__\n  // FreeBSD has a nasty bug, see RegisterSignalHandler for details\n  struct sigaction sa;\n  memset(&sa, 0, sizeof(sa));\n  sa.sa_handler = SIG_DFL;\n  CHECK_EQ(sigaction(signo, &sa, nullptr), 0);\n#endif\n  raise(signo);\n}\n\n\n// Most of the time, it's best to use `console.error` to write\n// to the process.stderr stream.  However, in some cases, such as\n// when debugging the stream.Writable class or the process.nextTick\n// function, it is useful to bypass JavaScript entirely.\nstatic void RawDebug(const FunctionCallbackInfo<Value>& args) {\n  CHECK(args.Length() == 1 && args[0]->IsString() &&\n        \"must be called with a single string\");\n  node::Utf8Value message(args.GetIsolate(), args[0]);\n  PrintErrorString(\"%s\\n\", *message);\n  fflush(stderr);\n}\n\n\nvoid LoadEnvironment(Environment* env) {\n  HandleScope handle_scope(env->isolate());\n\n  env->isolate()->SetFatalErrorHandler(node::OnFatalError);\n  env->isolate()->AddMessageListener(OnMessage);\n\n  // Compile, execute the src/node.js file. (Which was included as static C\n  // string in node_natives.h. 'native_node' is the string containing that\n  // source code.)\n\n  // The node.js file returns a function 'f'\n  atexit(AtExit);\n\n  TryCatch try_catch(env->isolate());\n\n  // Disable verbose mode to stop FatalException() handler from trying\n  // to handle the exception. Errors this early in the start-up phase\n  // are not safe to ignore.\n  try_catch.SetVerbose(false);\n\n  Local<String> script_name = FIXED_ONE_BYTE_STRING(env->isolate(), \"node.js\");\n  Local<Value> f_value = ExecuteString(env, MainSource(env), script_name);\n  if (try_catch.HasCaught())  {\n    ReportException(env, try_catch);\n    exit(10);\n  }\n  CHECK(f_value->IsFunction());\n  Local<Function> f = Local<Function>::Cast(f_value);\n\n  // Now we call 'f' with the 'process' variable that we've built up with\n  // all our bindings. Inside node.js we'll take care of assigning things to\n  // their places.\n\n  // We start the process this way in order to be more modular. Developers\n  // who do not like how 'src/node.js' setups the module system but do like\n  // Node's I/O bindings may want to replace 'f' with their own function.\n\n  // Add a reference to the global object\n  Local<Object> global = env->context()->Global();\n\n#if defined HAVE_DTRACE || defined HAVE_ETW\n  InitDTrace(env, global);\n#endif\n\n#if defined HAVE_LTTNG\n  InitLTTNG(env, global);\n#endif\n\n#if defined HAVE_PERFCTR\n  InitPerfCounters(env, global);\n#endif\n\n  // Enable handling of uncaught exceptions\n  // (FatalException(), break on uncaught exception in debugger)\n  //\n  // This is not strictly necessary since it's almost impossible\n  // to attach the debugger fast enought to break on exception\n  // thrown during process startup.\n  try_catch.SetVerbose(true);\n\n  env->SetMethod(env->process_object(), \"_rawDebug\", RawDebug);\n\n  // Expose the global object as a property on itself\n  // (Allows you to set stuff on `global` from anywhere in JavaScript.)\n  global->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \"global\"), global);\n\n  Local<Value> arg = env->process_object();\n  f->Call(Null(env->isolate()), 1, &arg);\n}\n\nstatic void PrintHelp();\n\nstatic bool ParseDebugOpt(const char* arg) {\n  const char* port = nullptr;\n\n  if (!strcmp(arg, \"--debug\")) {\n    use_debug_agent = true;\n  } else if (!strncmp(arg, \"--debug=\", sizeof(\"--debug=\") - 1)) {\n    use_debug_agent = true;\n    port = arg + sizeof(\"--debug=\") - 1;\n  } else if (!strcmp(arg, \"--debug-brk\")) {\n    use_debug_agent = true;\n    debug_wait_connect = true;\n  } else if (!strncmp(arg, \"--debug-brk=\", sizeof(\"--debug-brk=\") - 1)) {\n    use_debug_agent = true;\n    debug_wait_connect = true;\n    port = arg + sizeof(\"--debug-brk=\") - 1;\n  } else if (!strncmp(arg, \"--debug-port=\", sizeof(\"--debug-port=\") - 1)) {\n    port = arg + sizeof(\"--debug-port=\") - 1;\n  } else {\n    return false;\n  }\n\n  if (port != nullptr) {\n    debug_port = atoi(port);\n    if (debug_port < 1024 || debug_port > 65535) {\n      fprintf(stderr, \"Debug port must be in range 1024 to 65535.\\n\");\n      PrintHelp();\n      exit(12);\n    }\n  }\n\n  return true;\n}\n\nstatic void PrintHelp() {\n  // XXX: If you add an option here, please also add it to doc/node.1 and\n  // doc/api/cli.md\n  printf(\"Usage: node [options] [ -e script | script.js ] [arguments] \\n\"\n         \"       node debug script.js [arguments] \\n\"\n         \"\\n\"\n         \"Options:\\n\"\n         \"  -v, --version         print Node.js version\\n\"\n         \"  -e, --eval script     evaluate script\\n\"\n         \"  -p, --print           evaluate script and print result\\n\"\n         \"  -c, --check           syntax check script without executing\\n\"\n         \"  -i, --interactive     always enter the REPL even if stdin\\n\"\n         \"                        does not appear to be a terminal\\n\"\n         \"  -r, --require         module to preload (option can be repeated)\\n\"\n         \"  --no-deprecation      silence deprecation warnings\\n\"\n         \"  --trace-deprecation   show stack traces on deprecations\\n\"\n         \"  --throw-deprecation   throw an exception anytime a deprecated \"\n         \"function is used\\n\"\n         \"  --no-warnings         silence all process warnings\\n\"\n         \"  --trace-warnings      show stack traces on process warnings\\n\"\n         \"  --trace-sync-io       show stack trace when use of sync IO\\n\"\n         \"                        is detected after the first tick\\n\"\n         \"  --track-heap-objects  track heap object allocations for heap \"\n         \"snapshots\\n\"\n         \"  --prof-process        process v8 profiler output generated\\n\"\n         \"                        using --prof\\n\"\n         \"  --zero-fill-buffers   automatically zero-fill all newly allocated\\n\"\n         \"                        Buffer and SlowBuffer instances\\n\"\n         \"  --v8-options          print v8 command line options\\n\"\n         \"  --v8-pool-size=num    set v8's thread pool size\\n\"\n#if HAVE_OPENSSL\n         \"  --tls-cipher-list=val use an alternative default TLS cipher list\\n\"\n#if NODE_FIPS_MODE\n         \"  --enable-fips         enable FIPS crypto at startup\\n\"\n         \"  --force-fips          force FIPS crypto (cannot be disabled)\\n\"\n#endif  /* NODE_FIPS_MODE */\n#endif /* HAVE_OPENSSL */\n#if defined(NODE_HAVE_I18N_SUPPORT)\n         \"  --icu-data-dir=dir    set ICU data load path to dir\\n\"\n         \"                        (overrides NODE_ICU_DATA)\\n\"\n#if !defined(NODE_HAVE_SMALL_ICU)\n         \"                        note: linked-in ICU data is\\n\"\n         \"                        present.\\n\"\n#endif\n         \"  --preserve-symlinks   preserve symbolic links when resolving\\n\"\n         \"                        and caching modules.\\n\"\n#endif\n         \"\\n\"\n         \"Environment variables:\\n\"\n#ifdef _WIN32\n         \"NODE_PATH                ';'-separated list of directories\\n\"\n#else\n         \"NODE_PATH                ':'-separated list of directories\\n\"\n#endif\n         \"                         prefixed to the module search path.\\n\"\n         \"NODE_DISABLE_COLORS      set to 1 to disable colors in the REPL\\n\"\n#if defined(NODE_HAVE_I18N_SUPPORT)\n         \"NODE_ICU_DATA            data path for ICU (Intl object) data\\n\"\n#if !defined(NODE_HAVE_SMALL_ICU)\n         \"                         (will extend linked-in data)\\n\"\n#endif\n#endif\n         \"NODE_REPL_HISTORY        path to the persistent REPL history file\\n\"\n         \"\\n\"\n         \"Documentation can be found at https://nodejs.org/\\n\");\n}\n\n\n// Parse command line arguments.\n//\n// argv is modified in place. exec_argv and v8_argv are out arguments that\n// ParseArgs() allocates memory for and stores a pointer to the output\n// vector in.  The caller should free them with delete[].\n//\n// On exit:\n//\n//  * argv contains the arguments with node and V8 options filtered out.\n//  * exec_argv contains both node and V8 options and nothing else.\n//  * v8_argv contains argv[0] plus any V8 options\nstatic void ParseArgs(int* argc,\n                      const char** argv,\n                      int* exec_argc,\n                      const char*** exec_argv,\n                      int* v8_argc,\n                      const char*** v8_argv) {\n  const unsigned int nargs = static_cast<unsigned int>(*argc);\n  const char** new_exec_argv = new const char*[nargs];\n  const char** new_v8_argv = new const char*[nargs];\n  const char** new_argv = new const char*[nargs];\n  const char** local_preload_modules = new const char*[nargs];\n\n  for (unsigned int i = 0; i < nargs; ++i) {\n    new_exec_argv[i] = nullptr;\n    new_v8_argv[i] = nullptr;\n    new_argv[i] = nullptr;\n    local_preload_modules[i] = nullptr;\n  }\n\n  // exec_argv starts with the first option, the other two start with argv[0].\n  unsigned int new_exec_argc = 0;\n  unsigned int new_v8_argc = 1;\n  unsigned int new_argc = 1;\n  new_v8_argv[0] = argv[0];\n  new_argv[0] = argv[0];\n\n  unsigned int index = 1;\n  bool short_circuit = false;\n  while (index < nargs && argv[index][0] == '-' && !short_circuit) {\n    const char* const arg = argv[index];\n    unsigned int args_consumed = 1;\n\n    if (ParseDebugOpt(arg)) {\n      // Done, consumed by ParseDebugOpt().\n    } else if (strcmp(arg, \"--version\") == 0 || strcmp(arg, \"-v\") == 0) {\n      printf(\"%s\\n\", NODE_VERSION);\n      exit(0);\n    } else if (strcmp(arg, \"--help\") == 0 || strcmp(arg, \"-h\") == 0) {\n      PrintHelp();\n      exit(0);\n    } else if (strcmp(arg, \"--eval\") == 0 ||\n               strcmp(arg, \"-e\") == 0 ||\n               strcmp(arg, \"--print\") == 0 ||\n               strcmp(arg, \"-pe\") == 0 ||\n               strcmp(arg, \"-p\") == 0) {\n      bool is_eval = strchr(arg, 'e') != nullptr;\n      bool is_print = strchr(arg, 'p') != nullptr;\n      print_eval = print_eval || is_print;\n      // --eval, -e and -pe always require an argument.\n      if (is_eval == true) {\n        args_consumed += 1;\n        eval_string = argv[index + 1];\n        if (eval_string == nullptr) {\n          fprintf(stderr, \"%s: %s requires an argument\\n\", argv[0], arg);\n          exit(9);\n        }\n      } else if ((index + 1 < nargs) &&\n                 argv[index + 1] != nullptr &&\n                 argv[index + 1][0] != '-') {\n        args_consumed += 1;\n        eval_string = argv[index + 1];\n        if (strncmp(eval_string, \"\\\\-\", 2) == 0) {\n          // Starts with \"\\\\-\": escaped expression, drop the backslash.\n          eval_string += 1;\n        }\n      }\n    } else if (strcmp(arg, \"--require\") == 0 ||\n               strcmp(arg, \"-r\") == 0) {\n      const char* module = argv[index + 1];\n      if (module == nullptr) {\n        fprintf(stderr, \"%s: %s requires an argument\\n\", argv[0], arg);\n        exit(9);\n      }\n      args_consumed += 1;\n      local_preload_modules[preload_module_count++] = module;\n    } else if (strcmp(arg, \"--check\") == 0 || strcmp(arg, \"-c\") == 0) {\n      syntax_check_only = true;\n    } else if (strcmp(arg, \"--interactive\") == 0 || strcmp(arg, \"-i\") == 0) {\n      force_repl = true;\n    } else if (strcmp(arg, \"--no-deprecation\") == 0) {\n      no_deprecation = true;\n    } else if (strcmp(arg, \"--no-warnings\") == 0) {\n      no_process_warnings = true;\n    } else if (strcmp(arg, \"--trace-warnings\") == 0) {\n      trace_warnings = true;\n    } else if (strcmp(arg, \"--trace-deprecation\") == 0) {\n      trace_deprecation = true;\n    } else if (strcmp(arg, \"--trace-sync-io\") == 0) {\n      trace_sync_io = true;\n    } else if (strcmp(arg, \"--track-heap-objects\") == 0) {\n      track_heap_objects = true;\n    } else if (strcmp(arg, \"--throw-deprecation\") == 0) {\n      throw_deprecation = true;\n    } else if (strncmp(arg, \"--security-revert=\", 18) == 0) {\n      const char* cve = arg + 18;\n      Revert(cve);\n    } else if (strcmp(arg, \"--preserve-symlinks\") == 0) {\n      config_preserve_symlinks = true;\n    } else if (strcmp(arg, \"--prof-process\") == 0) {\n      prof_process = true;\n      short_circuit = true;\n    } else if (strcmp(arg, \"--zero-fill-buffers\") == 0) {\n      zero_fill_all_buffers = true;\n    } else if (strcmp(arg, \"--v8-options\") == 0) {\n      new_v8_argv[new_v8_argc] = \"--help\";\n      new_v8_argc += 1;\n    } else if (strncmp(arg, \"--v8-pool-size=\", 15) == 0) {\n      v8_thread_pool_size = atoi(arg + 15);\n#if HAVE_OPENSSL\n    } else if (strncmp(arg, \"--tls-cipher-list=\", 18) == 0) {\n      default_cipher_list = arg + 18;\n#if NODE_FIPS_MODE\n    } else if (strcmp(arg, \"--enable-fips\") == 0) {\n      enable_fips_crypto = true;\n    } else if (strcmp(arg, \"--force-fips\") == 0) {\n      force_fips_crypto = true;\n#endif /* NODE_FIPS_MODE */\n#endif /* HAVE_OPENSSL */\n#if defined(NODE_HAVE_I18N_SUPPORT)\n    } else if (strncmp(arg, \"--icu-data-dir=\", 15) == 0) {\n      icu_data_dir = arg + 15;\n#endif\n    } else if (strcmp(arg, \"--expose-internals\") == 0 ||\n               strcmp(arg, \"--expose_internals\") == 0) {\n      // consumed in js\n    } else {\n      // V8 option.  Pass through as-is.\n      new_v8_argv[new_v8_argc] = arg;\n      new_v8_argc += 1;\n    }\n\n    memcpy(new_exec_argv + new_exec_argc,\n           argv + index,\n           args_consumed * sizeof(*argv));\n\n    new_exec_argc += args_consumed;\n    index += args_consumed;\n  }\n\n  // Copy remaining arguments.\n  const unsigned int args_left = nargs - index;\n  memcpy(new_argv + new_argc, argv + index, args_left * sizeof(*argv));\n  new_argc += args_left;\n\n  *exec_argc = new_exec_argc;\n  *exec_argv = new_exec_argv;\n  *v8_argc = new_v8_argc;\n  *v8_argv = new_v8_argv;\n\n  // Copy new_argv over argv and update argc.\n  memcpy(argv, new_argv, new_argc * sizeof(*argv));\n  delete[] new_argv;\n  *argc = static_cast<int>(new_argc);\n\n  // Copy the preload_modules from the local array to an appropriately sized\n  // global array.\n  if (preload_module_count > 0) {\n    CHECK(!preload_modules);\n    preload_modules = new const char*[preload_module_count];\n    memcpy(preload_modules, local_preload_modules,\n           preload_module_count * sizeof(*preload_modules));\n  }\n  delete[] local_preload_modules;\n}\n\n\n// Called from V8 Debug Agent TCP thread.\nstatic void DispatchMessagesDebugAgentCallback(Environment* env) {\n  // TODO(indutny): move async handle to environment\n  uv_async_send(&dispatch_debug_messages_async);\n}\n\n\nstatic void StartDebug(Environment* env, bool wait) {\n  CHECK(!debugger_running);\n\n  env->debugger_agent()->set_dispatch_handler(\n        DispatchMessagesDebugAgentCallback);\n  debugger_running = env->debugger_agent()->Start(debug_port, wait);\n  if (debugger_running == false) {\n    fprintf(stderr, \"Starting debugger on port %d failed\\n\", debug_port);\n    fflush(stderr);\n    return;\n  }\n}\n\n\n// Called from the main thread.\nstatic void EnableDebug(Environment* env) {\n  CHECK(debugger_running);\n\n  // Send message to enable debug in workers\n  HandleScope handle_scope(env->isolate());\n\n  Local<Object> message = Object::New(env->isolate());\n  message->Set(FIXED_ONE_BYTE_STRING(env->isolate(), \"cmd\"),\n               FIXED_ONE_BYTE_STRING(env->isolate(), \"NODE_DEBUG_ENABLED\"));\n  Local<Value> argv[] = {\n    FIXED_ONE_BYTE_STRING(env->isolate(), \"internalMessage\"),\n    message\n  };\n  MakeCallback(env, env->process_object(), \"emit\", arraysize(argv), argv);\n\n  // Enabled debugger, possibly making it wait on a semaphore\n  env->debugger_agent()->Enable();\n}\n\n\n// Called from an arbitrary thread.\nstatic void TryStartDebugger() {\n  uv_mutex_lock(&node_isolate_mutex);\n  if (auto isolate = node_isolate) {\n    v8::Debug::DebugBreak(isolate);\n    uv_async_send(&dispatch_debug_messages_async);\n  }\n  uv_mutex_unlock(&node_isolate_mutex);\n}\n\n\n// Called from the main thread.\nstatic void DispatchDebugMessagesAsyncCallback(uv_async_t* handle) {\n  uv_mutex_lock(&node_isolate_mutex);\n  if (auto isolate = node_isolate) {\n    if (debugger_running == false) {\n      fprintf(stderr, \"Starting debugger agent.\\n\");\n\n      HandleScope scope(isolate);\n      Environment* env = Environment::GetCurrent(isolate);\n      Context::Scope context_scope(env->context());\n\n      StartDebug(env, false);\n      EnableDebug(env);\n    }\n\n    Isolate::Scope isolate_scope(isolate);\n    v8::Debug::ProcessDebugMessages(isolate);\n  }\n  uv_mutex_unlock(&node_isolate_mutex);\n}\n\n\n#ifdef __POSIX__\nstatic void EnableDebugSignalHandler(int signo) {\n  uv_sem_post(&debug_semaphore);\n}\n\n\nstatic void RegisterSignalHandler(int signal,\n                                  void (*handler)(int signal),\n                                  bool reset_handler = false) {\n  struct sigaction sa;\n  memset(&sa, 0, sizeof(sa));\n  sa.sa_handler = handler;\n#ifndef __FreeBSD__\n  // FreeBSD has a nasty bug with SA_RESETHAND reseting the SA_SIGINFO, that is\n  // in turn set for a libthr wrapper. This leads to a crash.\n  // Work around the issue by manually setting SIG_DFL in the signal handler\n  sa.sa_flags = reset_handler ? SA_RESETHAND : 0;\n#endif\n  sigfillset(&sa.sa_mask);\n  CHECK_EQ(sigaction(signal, &sa, nullptr), 0);\n}\n\n\nvoid DebugProcess(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n\n  if (args.Length() != 1) {\n    return env->ThrowError(\"Invalid number of arguments.\");\n  }\n\n  pid_t pid;\n  int r;\n\n  pid = args[0]->IntegerValue();\n  r = kill(pid, SIGUSR1);\n  if (r != 0) {\n    return env->ThrowErrnoException(errno, \"kill\");\n  }\n}\n\n\ninline void* DebugSignalThreadMain(void* unused) {\n  for (;;) {\n    uv_sem_wait(&debug_semaphore);\n    TryStartDebugger();\n  }\n  return nullptr;\n}\n\n\nstatic int RegisterDebugSignalHandler() {\n  // Start a watchdog thread for calling v8::Debug::DebugBreak() because\n  // it's not safe to call directly from the signal handler, it can\n  // deadlock with the thread it interrupts.\n  CHECK_EQ(0, uv_sem_init(&debug_semaphore, 0));\n  pthread_attr_t attr;\n  CHECK_EQ(0, pthread_attr_init(&attr));\n  // Don't shrink the thread's stack on FreeBSD.  Said platform decided to\n  // follow the pthreads specification to the letter rather than in spirit:\n  // https://lists.freebsd.org/pipermail/freebsd-current/2014-March/048885.html\n#ifndef __FreeBSD__\n  CHECK_EQ(0, pthread_attr_setstacksize(&attr, PTHREAD_STACK_MIN));\n#endif  // __FreeBSD__\n  CHECK_EQ(0, pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED));\n  sigset_t sigmask;\n  sigfillset(&sigmask);\n  CHECK_EQ(0, pthread_sigmask(SIG_SETMASK, &sigmask, &sigmask));\n  pthread_t thread;\n  const int err =\n      pthread_create(&thread, &attr, DebugSignalThreadMain, nullptr);\n  CHECK_EQ(0, pthread_sigmask(SIG_SETMASK, &sigmask, nullptr));\n  CHECK_EQ(0, pthread_attr_destroy(&attr));\n  if (err != 0) {\n    fprintf(stderr, \"node[%d]: pthread_create: %s\\n\", getpid(), strerror(err));\n    fflush(stderr);\n    // Leave SIGUSR1 blocked.  We don't install a signal handler,\n    // receiving the signal would terminate the process.\n    return -err;\n  }\n  RegisterSignalHandler(SIGUSR1, EnableDebugSignalHandler);\n  // Unblock SIGUSR1.  A pending SIGUSR1 signal will now be delivered.\n  sigemptyset(&sigmask);\n  sigaddset(&sigmask, SIGUSR1);\n  CHECK_EQ(0, pthread_sigmask(SIG_UNBLOCK, &sigmask, nullptr));\n  return 0;\n}\n#endif  // __POSIX__\n\n\n#ifdef _WIN32\nDWORD WINAPI EnableDebugThreadProc(void* arg) {\n  TryStartDebugger();\n  return 0;\n}\n\n\nstatic int GetDebugSignalHandlerMappingName(DWORD pid, wchar_t* buf,\n    size_t buf_len) {\n  return _snwprintf(buf, buf_len, L\"node-debug-handler-%u\", pid);\n}\n\n\nstatic int RegisterDebugSignalHandler() {\n  wchar_t mapping_name[32];\n  HANDLE mapping_handle;\n  DWORD pid;\n  LPTHREAD_START_ROUTINE* handler;\n\n  pid = GetCurrentProcessId();\n\n  if (GetDebugSignalHandlerMappingName(pid,\n                                       mapping_name,\n                                       arraysize(mapping_name)) < 0) {\n    return -1;\n  }\n\n  mapping_handle = CreateFileMappingW(INVALID_HANDLE_VALUE,\n                                      nullptr,\n                                      PAGE_READWRITE,\n                                      0,\n                                      sizeof *handler,\n                                      mapping_name);\n  if (mapping_handle == nullptr) {\n    return -1;\n  }\n\n  handler = reinterpret_cast<LPTHREAD_START_ROUTINE*>(\n      MapViewOfFile(mapping_handle,\n                    FILE_MAP_ALL_ACCESS,\n                    0,\n                    0,\n                    sizeof *handler));\n  if (handler == nullptr) {\n    CloseHandle(mapping_handle);\n    return -1;\n  }\n\n  *handler = EnableDebugThreadProc;\n\n  UnmapViewOfFile(static_cast<void*>(handler));\n\n  return 0;\n}\n\n\nstatic void DebugProcess(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  Isolate* isolate = args.GetIsolate();\n  DWORD pid;\n  HANDLE process = nullptr;\n  HANDLE thread = nullptr;\n  HANDLE mapping = nullptr;\n  wchar_t mapping_name[32];\n  LPTHREAD_START_ROUTINE* handler = nullptr;\n\n  if (args.Length() != 1) {\n    env->ThrowError(\"Invalid number of arguments.\");\n    goto out;\n  }\n\n  pid = (DWORD) args[0]->IntegerValue();\n\n  process = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |\n                            PROCESS_VM_OPERATION | PROCESS_VM_WRITE |\n                            PROCESS_VM_READ,\n                        FALSE,\n                        pid);\n  if (process == nullptr) {\n    isolate->ThrowException(\n        WinapiErrnoException(isolate, GetLastError(), \"OpenProcess\"));\n    goto out;\n  }\n\n  if (GetDebugSignalHandlerMappingName(pid,\n                                       mapping_name,\n                                       arraysize(mapping_name)) < 0) {\n    env->ThrowErrnoException(errno, \"sprintf\");\n    goto out;\n  }\n\n  mapping = OpenFileMappingW(FILE_MAP_READ, FALSE, mapping_name);\n  if (mapping == nullptr) {\n    isolate->ThrowException(WinapiErrnoException(isolate,\n                                             GetLastError(),\n                                             \"OpenFileMappingW\"));\n    goto out;\n  }\n\n  handler = reinterpret_cast<LPTHREAD_START_ROUTINE*>(\n      MapViewOfFile(mapping,\n                    FILE_MAP_READ,\n                    0,\n                    0,\n                    sizeof *handler));\n  if (handler == nullptr || *handler == nullptr) {\n    isolate->ThrowException(\n        WinapiErrnoException(isolate, GetLastError(), \"MapViewOfFile\"));\n    goto out;\n  }\n\n  thread = CreateRemoteThread(process,\n                              nullptr,\n                              0,\n                              *handler,\n                              nullptr,\n                              0,\n                              nullptr);\n  if (thread == nullptr) {\n    isolate->ThrowException(WinapiErrnoException(isolate,\n                                                 GetLastError(),\n                                                 \"CreateRemoteThread\"));\n    goto out;\n  }\n\n  // Wait for the thread to terminate\n  if (WaitForSingleObject(thread, INFINITE) != WAIT_OBJECT_0) {\n    isolate->ThrowException(WinapiErrnoException(isolate,\n                                                 GetLastError(),\n                                                 \"WaitForSingleObject\"));\n    goto out;\n  }\n\n out:\n  if (process != nullptr)\n    CloseHandle(process);\n  if (thread != nullptr)\n    CloseHandle(thread);\n  if (handler != nullptr)\n    UnmapViewOfFile(handler);\n  if (mapping != nullptr)\n    CloseHandle(mapping);\n}\n#endif  // _WIN32\n\n\nstatic void DebugPause(const FunctionCallbackInfo<Value>& args) {\n  v8::Debug::DebugBreak(args.GetIsolate());\n}\n\n\nstatic void DebugEnd(const FunctionCallbackInfo<Value>& args) {\n  if (debugger_running) {\n    Environment* env = Environment::GetCurrent(args);\n    env->debugger_agent()->Stop();\n    debugger_running = false;\n  }\n}\n\n\ninline void PlatformInit() {\n#ifdef __POSIX__\n  sigset_t sigmask;\n  sigemptyset(&sigmask);\n  sigaddset(&sigmask, SIGUSR1);\n  const int err = pthread_sigmask(SIG_SETMASK, &sigmask, nullptr);\n\n  // Make sure file descriptors 0-2 are valid before we start logging anything.\n  for (int fd = STDIN_FILENO; fd <= STDERR_FILENO; fd += 1) {\n    struct stat ignored;\n    if (fstat(fd, &ignored) == 0)\n      continue;\n    // Anything but EBADF means something is seriously wrong.  We don't\n    // have to special-case EINTR, fstat() is not interruptible.\n    if (errno != EBADF)\n      ABORT();\n    if (fd != open(\"/dev/null\", O_RDWR))\n      ABORT();\n  }\n\n  CHECK_EQ(err, 0);\n\n  // Restore signal dispositions, the parent process may have changed them.\n  struct sigaction act;\n  memset(&act, 0, sizeof(act));\n\n  // The hard-coded upper limit is because NSIG is not very reliable; on Linux,\n  // it evaluates to 32, 34 or 64, depending on whether RT signals are enabled.\n  // Counting up to SIGRTMIN doesn't work for the same reason.\n  for (unsigned nr = 1; nr < 32; nr += 1) {\n    if (nr == SIGKILL || nr == SIGSTOP)\n      continue;\n    act.sa_handler = (nr == SIGPIPE) ? SIG_IGN : SIG_DFL;\n    CHECK_EQ(0, sigaction(nr, &act, nullptr));\n  }\n\n  RegisterSignalHandler(SIGINT, SignalExit, true);\n  RegisterSignalHandler(SIGTERM, SignalExit, true);\n\n  // Raise the open file descriptor limit.\n  struct rlimit lim;\n  if (getrlimit(RLIMIT_NOFILE, &lim) == 0 && lim.rlim_cur != lim.rlim_max) {\n    // Do a binary search for the limit.\n    rlim_t min = lim.rlim_cur;\n    rlim_t max = 1 << 20;\n    // But if there's a defined upper bound, don't search, just set it.\n    if (lim.rlim_max != RLIM_INFINITY) {\n      min = lim.rlim_max;\n      max = lim.rlim_max;\n    }\n    do {\n      lim.rlim_cur = min + (max - min) / 2;\n      if (setrlimit(RLIMIT_NOFILE, &lim)) {\n        max = lim.rlim_cur;\n      } else {\n        min = lim.rlim_cur;\n      }\n    } while (min + 1 < max);\n  }\n#endif  // __POSIX__\n}\n\n\nvoid Init(int* argc,\n          const char** argv,\n          int* exec_argc,\n          const char*** exec_argv) {\n  // Initialize prog_start_time to get relative uptime.\n  prog_start_time = static_cast<double>(uv_now(uv_default_loop()));\n\n  // Make inherited handles noninheritable.\n  uv_disable_stdio_inheritance();\n\n  CHECK_EQ(0, uv_mutex_init(&node_isolate_mutex));\n\n  // init async debug messages dispatching\n  // Main thread uses uv_default_loop\n  uv_async_init(uv_default_loop(),\n                &dispatch_debug_messages_async,\n                DispatchDebugMessagesAsyncCallback);\n  uv_unref(reinterpret_cast<uv_handle_t*>(&dispatch_debug_messages_async));\n\n#if defined(NODE_V8_OPTIONS)\n  // Should come before the call to V8::SetFlagsFromCommandLine()\n  // so the user can disable a flag --foo at run-time by passing\n  // --no_foo from the command line.\n  V8::SetFlagsFromString(NODE_V8_OPTIONS, sizeof(NODE_V8_OPTIONS) - 1);\n#endif\n\n  // Parse a few arguments which are specific to Node.\n  int v8_argc;\n  const char** v8_argv;\n  ParseArgs(argc, argv, exec_argc, exec_argv, &v8_argc, &v8_argv);\n\n  // TODO(bnoordhuis) Intercept --prof arguments and start the CPU profiler\n  // manually?  That would give us a little more control over its runtime\n  // behavior but it could also interfere with the user's intentions in ways\n  // we fail to anticipate.  Dillema.\n  for (int i = 1; i < v8_argc; ++i) {\n    if (strncmp(v8_argv[i], \"--prof\", sizeof(\"--prof\") - 1) == 0) {\n      v8_is_profiling = true;\n      break;\n    }\n  }\n\n#ifdef __POSIX__\n  // Block SIGPROF signals when sleeping in epoll_wait/kevent/etc.  Avoids the\n  // performance penalty of frequent EINTR wakeups when the profiler is running.\n  // Only do this for v8.log profiling, as it breaks v8::CpuProfiler users.\n  if (v8_is_profiling) {\n    uv_loop_configure(uv_default_loop(), UV_LOOP_BLOCK_SIGNAL, SIGPROF);\n  }\n#endif\n\n#if defined(NODE_HAVE_I18N_SUPPORT)\n  if (icu_data_dir == nullptr) {\n    // if the parameter isn't given, use the env variable.\n    icu_data_dir = secure_getenv(\"NODE_ICU_DATA\");\n  }\n  // Initialize ICU.\n  // If icu_data_dir is nullptr here, it will load the 'minimal' data.\n  if (!i18n::InitializeICUDirectory(icu_data_dir)) {\n    FatalError(nullptr, \"Could not initialize ICU \"\n                     \"(check NODE_ICU_DATA or --icu-data-dir parameters)\");\n  }\n#endif\n  // The const_cast doesn't violate conceptual const-ness.  V8 doesn't modify\n  // the argv array or the elements it points to.\n  if (v8_argc > 1)\n    V8::SetFlagsFromCommandLine(&v8_argc, const_cast<char**>(v8_argv), true);\n\n  // Anything that's still in v8_argv is not a V8 or a node option.\n  for (int i = 1; i < v8_argc; i++) {\n    fprintf(stderr, \"%s: bad option: %s\\n\", argv[0], v8_argv[i]);\n  }\n  delete[] v8_argv;\n  v8_argv = nullptr;\n\n  if (v8_argc > 1) {\n    exit(9);\n  }\n\n  // Unconditionally force typed arrays to allocate outside the v8 heap. This\n  // is to prevent memory pointers from being moved around that are returned by\n  // Buffer::Data().\n  const char no_typed_array_heap[] = \"--typed_array_max_size_in_heap=0\";\n  V8::SetFlagsFromString(no_typed_array_heap, sizeof(no_typed_array_heap) - 1);\n\n  if (!use_debug_agent) {\n    RegisterDebugSignalHandler();\n  }\n\n  // We should set node_is_initialized here instead of in node::Start,\n  // otherwise embedders using node::Init to initialize everything will not be\n  // able to set it and native modules will not load for them.\n  node_is_initialized = true;\n}\n\n\nstruct AtExitCallback {\n  AtExitCallback* next_;\n  void (*cb_)(void* arg);\n  void* arg_;\n};\n\nstatic AtExitCallback* at_exit_functions_;\n\n\n// TODO(bnoordhuis) Turn into per-context event.\nvoid RunAtExit(Environment* env) {\n  AtExitCallback* p = at_exit_functions_;\n  at_exit_functions_ = nullptr;\n\n  while (p) {\n    AtExitCallback* q = p->next_;\n    p->cb_(p->arg_);\n    delete p;\n    p = q;\n  }\n}\n\n\nvoid AtExit(void (*cb)(void* arg), void* arg) {\n  AtExitCallback* p = new AtExitCallback;\n  p->cb_ = cb;\n  p->arg_ = arg;\n  p->next_ = at_exit_functions_;\n  at_exit_functions_ = p;\n}\n\n\nvoid EmitBeforeExit(Environment* env) {\n  HandleScope handle_scope(env->isolate());\n  Context::Scope context_scope(env->context());\n  Local<Object> process_object = env->process_object();\n  Local<String> exit_code = FIXED_ONE_BYTE_STRING(env->isolate(), \"exitCode\");\n  Local<Value> args[] = {\n    FIXED_ONE_BYTE_STRING(env->isolate(), \"beforeExit\"),\n    process_object->Get(exit_code)->ToInteger(env->isolate())\n  };\n  MakeCallback(env, process_object, \"emit\", arraysize(args), args);\n}\n\n\nint EmitExit(Environment* env) {\n  // process.emit('exit')\n  HandleScope handle_scope(env->isolate());\n  Context::Scope context_scope(env->context());\n  Local<Object> process_object = env->process_object();\n  process_object->Set(env->exiting_string(), True(env->isolate()));\n\n  Local<String> exitCode = env->exit_code_string();\n  int code = process_object->Get(exitCode)->Int32Value();\n\n  Local<Value> args[] = {\n    env->exit_string(),\n    Integer::New(env->isolate(), code)\n  };\n\n  MakeCallback(env, process_object, \"emit\", arraysize(args), args);\n\n  // Reload exit code, it may be changed by `emit('exit')`\n  return process_object->Get(exitCode)->Int32Value();\n}\n\n\n// Just a convenience method\nEnvironment* CreateEnvironment(Isolate* isolate,\n                               Local<Context> context,\n                               int argc,\n                               const char* const* argv,\n                               int exec_argc,\n                               const char* const* exec_argv) {\n  Environment* env;\n  Context::Scope context_scope(context);\n\n  env = CreateEnvironment(isolate,\n                          uv_default_loop(),\n                          context,\n                          argc,\n                          argv,\n                          exec_argc,\n                          exec_argv);\n\n  LoadEnvironment(env);\n\n  return env;\n}\n\nstatic Environment* CreateEnvironment(Isolate* isolate,\n                                      Local<Context> context,\n                                      NodeInstanceData* instance_data) {\n  return CreateEnvironment(isolate,\n                           instance_data->event_loop(),\n                           context,\n                           instance_data->argc(),\n                           instance_data->argv(),\n                           instance_data->exec_argc(),\n                           instance_data->exec_argv());\n}\n\n\nstatic void HandleCloseCb(uv_handle_t* handle) {\n  Environment* env = reinterpret_cast<Environment*>(handle->data);\n  env->FinishHandleCleanup(handle);\n}\n\n\nstatic void HandleCleanup(Environment* env,\n                          uv_handle_t* handle,\n                          void* arg) {\n  handle->data = env;\n  uv_close(handle, HandleCloseCb);\n}\n\n\nEnvironment* CreateEnvironment(Isolate* isolate,\n                               uv_loop_t* loop,\n                               Local<Context> context,\n                               int argc,\n                               const char* const* argv,\n                               int exec_argc,\n                               const char* const* exec_argv) {\n  HandleScope handle_scope(isolate);\n\n  Context::Scope context_scope(context);\n  Environment* env = Environment::New(context, loop);\n\n  isolate->SetAutorunMicrotasks(false);\n\n  uv_check_init(env->event_loop(), env->immediate_check_handle());\n  uv_unref(\n      reinterpret_cast<uv_handle_t*>(env->immediate_check_handle()));\n\n  uv_idle_init(env->event_loop(), env->immediate_idle_handle());\n\n  // Inform V8's CPU profiler when we're idle.  The profiler is sampling-based\n  // but not all samples are created equal; mark the wall clock time spent in\n  // epoll_wait() and friends so profiling tools can filter it out.  The samples\n  // still end up in v8.log but with state=IDLE rather than state=EXTERNAL.\n  // TODO(bnoordhuis) Depends on a libuv implementation detail that we should\n  // probably fortify in the API contract, namely that the last started prepare\n  // or check watcher runs first.  It's not 100% foolproof; if an add-on starts\n  // a prepare or check watcher after us, any samples attributed to its callback\n  // will be recorded with state=IDLE.\n  uv_prepare_init(env->event_loop(), env->idle_prepare_handle());\n  uv_check_init(env->event_loop(), env->idle_check_handle());\n  uv_unref(reinterpret_cast<uv_handle_t*>(env->idle_prepare_handle()));\n  uv_unref(reinterpret_cast<uv_handle_t*>(env->idle_check_handle()));\n\n  // Register handle cleanups\n  env->RegisterHandleCleanup(\n      reinterpret_cast<uv_handle_t*>(env->immediate_check_handle()),\n      HandleCleanup,\n      nullptr);\n  env->RegisterHandleCleanup(\n      reinterpret_cast<uv_handle_t*>(env->immediate_idle_handle()),\n      HandleCleanup,\n      nullptr);\n  env->RegisterHandleCleanup(\n      reinterpret_cast<uv_handle_t*>(env->idle_prepare_handle()),\n      HandleCleanup,\n      nullptr);\n  env->RegisterHandleCleanup(\n      reinterpret_cast<uv_handle_t*>(env->idle_check_handle()),\n      HandleCleanup,\n      nullptr);\n\n  if (v8_is_profiling) {\n    StartProfilerIdleNotifier(env);\n  }\n\n  Local<FunctionTemplate> process_template = FunctionTemplate::New(isolate);\n  process_template->SetClassName(FIXED_ONE_BYTE_STRING(isolate, \"process\"));\n\n  Local<Object> process_object =\n      process_template->GetFunction()->NewInstance(context).ToLocalChecked();\n  env->set_process_object(process_object);\n\n  SetupProcessObject(env, argc, argv, exec_argc, exec_argv);\n  LoadAsyncWrapperInfo(env);\n\n  return env;\n}\n\n\n// Entry point for new node instances, also called directly for the main\n// node instance.\nstatic void StartNodeInstance(void* arg) {\n  NodeInstanceData* instance_data = static_cast<NodeInstanceData*>(arg);\n  Isolate::CreateParams params;\n  ArrayBufferAllocator* array_buffer_allocator = new ArrayBufferAllocator();\n  params.array_buffer_allocator = array_buffer_allocator;\n#ifdef NODE_ENABLE_VTUNE_PROFILING\n  params.code_event_handler = vTune::GetVtuneCodeEventHandler();\n#endif\n  Isolate* isolate = Isolate::New(params);\n\n  uv_mutex_lock(&node_isolate_mutex);\n  if (instance_data->is_main()) {\n    CHECK_EQ(node_isolate, nullptr);\n    node_isolate = isolate;\n  }\n  uv_mutex_unlock(&node_isolate_mutex);\n\n  if (track_heap_objects) {\n    isolate->GetHeapProfiler()->StartTrackingHeapObjects(true);\n  }\n\n  {\n    Locker locker(isolate);\n    Isolate::Scope isolate_scope(isolate);\n    HandleScope handle_scope(isolate);\n    Local<Context> context = Context::New(isolate);\n    Environment* env = CreateEnvironment(isolate, context, instance_data);\n    array_buffer_allocator->set_env(env);\n    Context::Scope context_scope(context);\n\n    isolate->SetAbortOnUncaughtExceptionCallback(\n        ShouldAbortOnUncaughtException);\n\n    // Start debug agent when argv has --debug\n    if (instance_data->use_debug_agent())\n      StartDebug(env, debug_wait_connect);\n\n    {\n      Environment::AsyncCallbackScope callback_scope(env);\n      LoadEnvironment(env);\n    }\n\n    env->set_trace_sync_io(trace_sync_io);\n\n    // Enable debugger\n    if (instance_data->use_debug_agent())\n      EnableDebug(env);\n\n    {\n      SealHandleScope seal(isolate);\n      bool more;\n      do {\n        v8::platform::PumpMessageLoop(default_platform, isolate);\n        more = uv_run(env->event_loop(), UV_RUN_ONCE);\n\n        if (more == false) {\n          v8::platform::PumpMessageLoop(default_platform, isolate);\n          EmitBeforeExit(env);\n\n          // Emit `beforeExit` if the loop became alive either after emitting\n          // event, or after running some callbacks.\n          more = uv_loop_alive(env->event_loop());\n          if (uv_run(env->event_loop(), UV_RUN_NOWAIT) != 0)\n            more = true;\n        }\n      } while (more == true);\n    }\n\n    env->set_trace_sync_io(false);\n\n    int exit_code = EmitExit(env);\n    if (instance_data->is_main())\n      instance_data->set_exit_code(exit_code);\n    RunAtExit(env);\n\n#if defined(LEAK_SANITIZER)\n    __lsan_do_leak_check();\n#endif\n\n    array_buffer_allocator->set_env(nullptr);\n    env->Dispose();\n    env = nullptr;\n  }\n\n  uv_mutex_lock(&node_isolate_mutex);\n  if (node_isolate == isolate)\n    node_isolate = nullptr;\n  uv_mutex_unlock(&node_isolate_mutex);\n\n  CHECK_NE(isolate, nullptr);\n  isolate->Dispose();\n  isolate = nullptr;\n  delete array_buffer_allocator;\n}\n\nint Start(int argc, char** argv) {\n  PlatformInit();\n\n  CHECK_GT(argc, 0);\n\n  // Hack around with the argv pointer. Used for process.title = \"blah\".\n  argv = uv_setup_args(argc, argv);\n\n  // This needs to run *before* V8::Initialize().  The const_cast is not\n  // optional, in case you're wondering.\n  int exec_argc;\n  const char** exec_argv;\n  Init(&argc, const_cast<const char**>(argv), &exec_argc, &exec_argv);\n\n#if HAVE_OPENSSL\n#ifdef NODE_FIPS_MODE\n  // In the case of FIPS builds we should make sure\n  // the random source is properly initialized first.\n  OPENSSL_init();\n#endif  // NODE_FIPS_MODE\n  // V8 on Windows doesn't have a good source of entropy. Seed it from\n  // OpenSSL's pool.\n  V8::SetEntropySource(crypto::EntropySource);\n#endif\n\n  default_platform = v8::platform::CreateDefaultPlatform(v8_thread_pool_size);\n  V8::InitializePlatform(default_platform);\n  V8::Initialize();\n\n  int exit_code = 1;\n  {\n    NodeInstanceData instance_data(NodeInstanceType::MAIN,\n                                   uv_default_loop(),\n                                   argc,\n                                   const_cast<const char**>(argv),\n                                   exec_argc,\n                                   exec_argv,\n                                   use_debug_agent);\n    StartNodeInstance(&instance_data);\n    exit_code = instance_data.exit_code();\n  }\n  V8::Dispose();\n\n  delete default_platform;\n  default_platform = nullptr;\n\n  delete[] exec_argv;\n  exec_argv = nullptr;\n\n  return exit_code;\n}\n\n\n}  // namespace node\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/lib/module.js": "'use strict';\n\nconst NativeModule = require('native_module');\nconst util = require('util');\nconst internalModule = require('internal/module');\nconst internalUtil = require('internal/util');\nconst vm = require('vm');\nconst assert = require('assert').ok;\nconst fs = require('fs');\nconst path = require('path');\nconst internalModuleReadFile = process.binding('fs').internalModuleReadFile;\nconst internalModuleStat = process.binding('fs').internalModuleStat;\nconst preserveSymlinks = !!process.binding('config').preserveSymlinks;\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\nfunction stat(filename) {\n  filename = path._makeLong(filename);\n  const cache = stat.cache;\n  if (cache !== null) {\n    const result = cache.get(filename);\n    if (result !== undefined) return result;\n  }\n  const result = internalModuleStat(filename);\n  if (cache !== null) cache.set(filename, result);\n  return result;\n}\nstat.cache = null;\n\n\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent && parent.children) {\n    parent.children.push(this);\n  }\n\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n}\nmodule.exports = Module;\n\nModule._cache = {};\nModule._pathCache = {};\nModule._extensions = {};\nvar modulePaths = [];\nModule.globalPaths = [];\n\nModule.wrapper = NativeModule.wrapper;\nModule.wrap = NativeModule.wrap;\nModule._debug = util.debuglog('module');\n\n// We use this alias for the preprocessor that filters it out\nconst debug = Module._debug;\n\n\n// given a module name, and a list of paths to test, returns the first\n// matching file in the following precedence.\n//\n// require(\"a.<ext>\")\n//   -> a.<ext>\n//\n// require(\"a\")\n//   -> a\n//   -> a.<ext>\n//   -> a/index.<ext>\n\n// check if the directory is a package.json dir\nconst packageMainCache = {};\n\nfunction readPackage(requestPath) {\n  if (hasOwnProperty(packageMainCache, requestPath)) {\n    return packageMainCache[requestPath];\n  }\n\n  const jsonPath = path.resolve(requestPath, 'package.json');\n  const json = internalModuleReadFile(path._makeLong(jsonPath));\n\n  if (json === undefined) {\n    return false;\n  }\n\n  try {\n    var pkg = packageMainCache[requestPath] = JSON.parse(json).main;\n  } catch (e) {\n    e.path = jsonPath;\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\n    throw e;\n  }\n  return pkg;\n}\n\nfunction tryPackage(requestPath, exts, isMain) {\n  var pkg = readPackage(requestPath);\n\n  if (!pkg) return false;\n\n  var filename = path.resolve(requestPath, pkg);\n  return tryFile(filename, isMain) ||\n         tryExtensions(filename, exts, isMain) ||\n         tryExtensions(path.resolve(filename, 'index'), exts, isMain);\n}\n\n// check if the file exists and is not a directory\n// if using --preserve-symlinks and isMain is false,\n// keep symlinks intact, otherwise resolve to the\n// absolute realpath.\nfunction tryFile(requestPath, isMain) {\n  const rc = stat(requestPath);\n  if (preserveSymlinks && !isMain) {\n    return rc === 0 && path.resolve(requestPath);\n  }\n  return rc === 0 && fs.realpathSync(requestPath);\n}\n\n// given a path check a the file exists with any of the set extensions\nfunction tryExtensions(p, exts, isMain) {\n  for (var i = 0; i < exts.length; i++) {\n    const filename = tryFile(p + exts[i], isMain);\n\n    if (filename) {\n      return filename;\n    }\n  }\n  return false;\n}\n\nvar warned = false;\nModule._findPath = function(request, paths, isMain) {\n  if (path.isAbsolute(request)) {\n    paths = [''];\n  } else if (!paths || paths.length === 0) {\n    return false;\n  }\n\n  const cacheKey = JSON.stringify({request: request, paths: paths});\n  if (Module._pathCache[cacheKey]) {\n    return Module._pathCache[cacheKey];\n  }\n\n  var exts;\n  const trailingSlash = request.length > 0 &&\n                        request.charCodeAt(request.length - 1) === 47/*/*/;\n\n  // For each path\n  for (var i = 0; i < paths.length; i++) {\n    // Don't search further if path doesn't exist\n    const curPath = paths[i];\n    if (curPath && stat(curPath) < 1) continue;\n    var basePath = path.resolve(curPath, request);\n    var filename;\n\n    if (!trailingSlash) {\n      const rc = stat(basePath);\n      if (rc === 0) {  // File.\n        if (preserveSymlinks && !isMain) {\n          filename = path.resolve(basePath);\n        } else {\n          filename = fs.realpathSync(basePath);\n        }\n      } else if (rc === 1) {  // Directory.\n        if (exts === undefined)\n          exts = Object.keys(Module._extensions);\n        filename = tryPackage(basePath, exts, isMain);\n      }\n\n      if (!filename) {\n        // try it with each of the extensions\n        if (exts === undefined)\n          exts = Object.keys(Module._extensions);\n        filename = tryExtensions(basePath, exts, isMain);\n      }\n    }\n\n    if (!filename) {\n      if (exts === undefined)\n        exts = Object.keys(Module._extensions);\n      filename = tryPackage(basePath, exts, isMain);\n    }\n\n    if (!filename) {\n      // try it with each of the extensions at \"index\"\n      if (exts === undefined)\n        exts = Object.keys(Module._extensions);\n      filename = tryExtensions(path.resolve(basePath, 'index'), exts, isMain);\n    }\n\n    if (filename) {\n      // Warn once if '.' resolved outside the module dir\n      if (request === '.' && i > 0) {\n        warned = internalUtil.printDeprecationMessage(\n          'warning: require(\\'.\\') resolved outside the package ' +\n          'directory. This functionality is deprecated and will be removed ' +\n          'soon.', warned);\n      }\n\n      Module._pathCache[cacheKey] = filename;\n      return filename;\n    }\n  }\n  return false;\n};\n\n// 'node_modules' character codes reversed\nvar nmChars = [ 115, 101, 108, 117, 100, 111, 109, 95, 101, 100, 111, 110 ];\nvar nmLen = nmChars.length;\nif (process.platform === 'win32') {\n  // 'from' is the __dirname of the module.\n  Module._nodeModulePaths = function(from) {\n    // guarantee that 'from' is absolute.\n    from = path.resolve(from);\n\n    // note: this approach *only* works when the path is guaranteed\n    // to be absolute.  Doing a fully-edge-case-correct path.split\n    // that works on both Windows and Posix is non-trivial.\n    const paths = [];\n    var p = 0;\n    var last = from.length;\n    for (var i = from.length - 1; i >= 0; --i) {\n      const code = from.charCodeAt(i);\n      if (code === 92/*\\*/ || code === 47/*/*/) {\n        if (p !== nmLen)\n          paths.push(from.slice(0, last) + '\\\\node_modules');\n        last = i;\n        p = 0;\n      } else if (p !== -1 && p < nmLen) {\n        if (nmChars[p] === code) {\n          ++p;\n        } else {\n          p = -1;\n        }\n      }\n    }\n\n    return paths;\n  };\n} else { // posix\n  // 'from' is the __dirname of the module.\n  Module._nodeModulePaths = function(from) {\n    // guarantee that 'from' is absolute.\n    from = path.resolve(from);\n    // Return early not only to avoid unnecessary work, but to *avoid* returning\n    // an array of two items for a root: [ '//node_modules', '/node_modules' ]\n    if (from === '/')\n      return ['/node_modules'];\n\n    // note: this approach *only* works when the path is guaranteed\n    // to be absolute.  Doing a fully-edge-case-correct path.split\n    // that works on both Windows and Posix is non-trivial.\n    const paths = [];\n    var p = 0;\n    var last = from.length;\n    for (var i = from.length - 1; i >= 0; --i) {\n      const code = from.charCodeAt(i);\n      if (code === 47/*/*/) {\n        if (p !== nmLen)\n          paths.push(from.slice(0, last) + '/node_modules');\n        last = i;\n        p = 0;\n      } else if (p !== -1 && p < nmLen) {\n        if (nmChars[p] === code) {\n          ++p;\n        } else {\n          p = -1;\n        }\n      }\n    }\n\n    return paths;\n  };\n}\n\n\n// 'index.' character codes\nvar indexChars = [ 105, 110, 100, 101, 120, 46 ];\nvar indexLen = indexChars.length;\nModule._resolveLookupPaths = function(request, parent) {\n  if (NativeModule.nonInternalExists(request)) {\n    return [request, []];\n  }\n\n  var reqLen = request.length;\n  // Check for relative path\n  if (reqLen < 2 ||\n      request.charCodeAt(0) !== 46/*.*/ ||\n      (request.charCodeAt(1) !== 46/*.*/ &&\n       request.charCodeAt(1) !== 47/*/*/)) {\n    var paths = modulePaths;\n    if (parent) {\n      if (!parent.paths)\n        paths = parent.paths = [];\n      else\n        paths = parent.paths.concat(paths);\n    }\n\n    // Maintain backwards compat with certain broken uses of require('.')\n    // by putting the module's directory in front of the lookup paths.\n    if (request === '.') {\n      if (parent && parent.filename) {\n        paths.unshift(path.dirname(parent.filename));\n      } else {\n        paths.unshift(path.resolve(request));\n      }\n    }\n\n    return [request, paths];\n  }\n\n  // with --eval, parent.id is not set and parent.filename is null\n  if (!parent || !parent.id || !parent.filename) {\n    // make require('./path/to/foo') work - normally the path is taken\n    // from realpath(__filename) but with eval there is no filename\n    var mainPaths = ['.'].concat(Module._nodeModulePaths('.'), modulePaths);\n    return [request, mainPaths];\n  }\n\n  // Is the parent an index module?\n  // We can assume the parent has a valid extension,\n  // as it already has been accepted as a module.\n  const base = path.basename(parent.filename);\n  var parentIdPath;\n  if (base.length > indexLen) {\n    var i = 0;\n    for (; i < indexLen; ++i) {\n      if (indexChars[i] !== base.charCodeAt(i))\n        break;\n    }\n    if (i === indexLen) {\n      // We matched 'index.', let's validate the rest\n      for (; i < base.length; ++i) {\n        const code = base.charCodeAt(i);\n        if (code !== 95/*_*/ &&\n            (code < 48/*0*/ || code > 57/*9*/) &&\n            (code < 65/*A*/ || code > 90/*Z*/) &&\n            (code < 97/*a*/ || code > 122/*z*/))\n          break;\n      }\n      if (i === base.length) {\n        // Is an index module\n        parentIdPath = parent.id;\n      } else {\n        // Not an index module\n        parentIdPath = path.dirname(parent.id);\n      }\n    } else {\n      // Not an index module\n      parentIdPath = path.dirname(parent.id);\n    }\n  } else {\n    // Not an index module\n    parentIdPath = path.dirname(parent.id);\n  }\n  var id = path.resolve(parentIdPath, request);\n\n  // make sure require('./path') and require('path') get distinct ids, even\n  // when called from the toplevel js file\n  if (parentIdPath === '.' && id.indexOf('/') === -1) {\n    id = './' + id;\n  }\n\n  debug('RELATIVE: requested: %s set ID to: %s from %s', request, id,\n        parent.id);\n\n  return [id, [path.dirname(parent.filename)]];\n};\n\n\n// Check the cache for the requested file.\n// 1. If a module already exists in the cache: return its exports object.\n// 2. If the module is native: call `NativeModule.require()` with the\n//    filename and return the result.\n// 3. Otherwise, create a new module for the file and save it to the cache.\n//    Then have it load  the file contents before returning its exports\n//    object.\nModule._load = function(request, parent, isMain) {\n  if (parent) {\n    debug('Module._load REQUEST %s parent: %s', request, parent.id);\n  }\n\n  var filename = Module._resolveFilename(request, parent, isMain);\n\n  var cachedModule = Module._cache[filename];\n  if (cachedModule) {\n    return cachedModule.exports;\n  }\n\n  if (NativeModule.nonInternalExists(filename)) {\n    debug('load native module %s', request);\n    return NativeModule.require(filename);\n  }\n\n  var module = new Module(filename, parent);\n\n  if (isMain) {\n    process.mainModule = module;\n    module.id = '.';\n  }\n\n  Module._cache[filename] = module;\n\n  tryModuleLoad(module, filename);\n\n  return module.exports;\n};\n\nfunction tryModuleLoad(module, filename) {\n  var threw = true;\n  try {\n    module.load(filename);\n    threw = false;\n  } finally {\n    if (threw) {\n      delete Module._cache[filename];\n    }\n  }\n}\n\nModule._resolveFilename = function(request, parent, isMain) {\n  if (NativeModule.nonInternalExists(request)) {\n    return request;\n  }\n\n  var resolvedModule = Module._resolveLookupPaths(request, parent);\n  var id = resolvedModule[0];\n  var paths = resolvedModule[1];\n\n  // look up the filename first, since that's the cache key.\n  debug('looking for %j in %j', id, paths);\n\n  var filename = Module._findPath(request, paths, isMain);\n  if (!filename) {\n    var err = new Error(\"Cannot find module '\" + request + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  }\n  return filename;\n};\n\n\n// Given a file name, pass it to the proper extension handler.\nModule.prototype.load = function(filename) {\n  debug('load %j for module %j', filename, this.id);\n\n  assert(!this.loaded);\n  this.filename = filename;\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\n\n  var extension = path.extname(filename) || '.js';\n  if (!Module._extensions[extension]) extension = '.js';\n  Module._extensions[extension](this, filename);\n  this.loaded = true;\n};\n\n\n// Loads a module at the given file path. Returns that module's\n// `exports` property.\nModule.prototype.require = function(path) {\n  assert(path, 'missing path');\n  assert(typeof path === 'string', 'path must be a string');\n  return Module._load(path, this, /* isMain */ false);\n};\n\n\n// Resolved path to process.argv[1] will be lazily placed here\n// (needed for setting breakpoint when called with --debug-brk)\nvar resolvedArgv;\n\n\n// Run the file contents in the correct scope or sandbox. Expose\n// the correct helper variables (require, module, exports) to\n// the file.\n// Returns exception, if any.\nModule.prototype._compile = function(content, filename) {\n  // Remove shebang\n  var contLen = content.length;\n  if (contLen >= 2) {\n    if (content.charCodeAt(0) === 35/*#*/ &&\n        content.charCodeAt(1) === 33/*!*/) {\n      if (contLen === 2) {\n        // Exact match\n        content = '';\n      } else {\n        // Find end of shebang line and slice it off\n        var i = 2;\n        for (; i < contLen; ++i) {\n          var code = content.charCodeAt(i);\n          if (code === 10/*\\n*/ || code === 13/*\\r*/)\n            break;\n        }\n        if (i === contLen)\n          content = '';\n        else {\n          // Note that this actually includes the newline character(s) in the\n          // new output. This duplicates the behavior of the regular expression\n          // that was previously used to replace the shebang line\n          content = content.slice(i);\n        }\n      }\n    }\n  }\n\n  // create wrapper function\n  var wrapper = Module.wrap(content);\n\n  var compiledWrapper = vm.runInThisContext(wrapper, {\n    filename: filename,\n    lineOffset: 0,\n    displayErrors: true\n  });\n\n  if (process._debugWaitConnect) {\n    if (!resolvedArgv) {\n      // we enter the repl if we're not given a filename argument.\n      if (process.argv[1]) {\n        resolvedArgv = Module._resolveFilename(process.argv[1], null);\n      } else {\n        resolvedArgv = 'repl';\n      }\n    }\n\n    // Set breakpoint on module start\n    if (filename === resolvedArgv) {\n      delete process._debugWaitConnect;\n      const Debug = vm.runInDebugContext('Debug');\n      Debug.setBreakPoint(compiledWrapper, 0, 0);\n    }\n  }\n  var dirname = path.dirname(filename);\n  var require = internalModule.makeRequireFunction.call(this);\n  var args = [this.exports, require, this, filename, dirname];\n  var depth = internalModule.requireDepth;\n  if (depth === 0) stat.cache = new Map();\n  var result = compiledWrapper.apply(this.exports, args);\n  if (depth === 0) stat.cache = null;\n  return result;\n};\n\n\n// Native extension for .js\nModule._extensions['.js'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  module._compile(internalModule.stripBOM(content), filename);\n};\n\n\n// Native extension for .json\nModule._extensions['.json'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  try {\n    module.exports = JSON.parse(internalModule.stripBOM(content));\n  } catch (err) {\n    err.message = filename + ': ' + err.message;\n    throw err;\n  }\n};\n\n\n//Native extension for .node\nModule._extensions['.node'] = function(module, filename) {\n  return process.dlopen(module, path._makeLong(filename));\n};\n\n\n// bootstrap main module.\nModule.runMain = function() {\n  // Load the main module--the command line argument.\n  Module._load(process.argv[1], null, true);\n  // Handle any nextTicks added in the first tick of the program\n  process._tickCallback();\n};\n\nModule._initPaths = function() {\n  const isWindows = process.platform === 'win32';\n\n  var homeDir;\n  if (isWindows) {\n    homeDir = process.env.USERPROFILE;\n  } else {\n    homeDir = process.env.HOME;\n  }\n\n  var paths = [path.resolve(process.execPath, '..', '..', 'lib', 'node')];\n\n  if (homeDir) {\n    paths.unshift(path.resolve(homeDir, '.node_libraries'));\n    paths.unshift(path.resolve(homeDir, '.node_modules'));\n  }\n\n  var nodePath = process.env['NODE_PATH'];\n  if (nodePath) {\n    paths = nodePath.split(path.delimiter).filter(function(path) {\n      return !!path;\n    }).concat(paths);\n  }\n\n  modulePaths = paths;\n\n  // clone as a read-only copy, for introspection.\n  Module.globalPaths = modulePaths.slice(0);\n};\n\n// TODO(bnoordhuis) Unused, remove in the future.\nModule.requireRepl = internalUtil.deprecate(function() {\n  return NativeModule.require('internal/repl');\n}, 'Module.requireRepl is deprecated.');\n\nModule._preloadModules = function(requests) {\n  if (!Array.isArray(requests))\n    return;\n\n  // Preloaded modules have a dummy parent module which is deemed to exist\n  // in the current working directory. This seeds the search path for\n  // preloaded modules.\n  var parent = new Module('internal/preload', null);\n  try {\n    parent.paths = Module._nodeModulePaths(process.cwd());\n  }\n  catch (e) {\n    if (e.code !== 'ENOENT') {\n      throw e;\n    }\n  }\n  requests.forEach(function(request) {\n    parent.require(request);\n  });\n};\n\nModule._initPaths();\n\n// backwards compatibility\nModule.Module = Module;\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/Makefile.shared": "#\n# Helper makefile to link shared libraries in a portable way.\n# This is much simpler than libtool, and hopefully not too error-prone.\n#\n# The following variables need to be set on the command line to build\n# properly\n\n# CC contains the current compiler.  This one MUST be defined\nCC=cc\nCFLAGS=$(CFLAG)\n# LDFLAGS contains flags to be used when temporary object files (when building\n# shared libraries) are created, or when an application is linked.\n# SHARED_LDFLAGS contains flags to be used when the shared library is created.\nLDFLAGS=\nSHARED_LDFLAGS=\n\nNM=nm\n\n# LIBNAME contains just the name of the library, without prefix (\"lib\"\n# on Unix, \"cyg\" for certain forms under Cygwin...) or suffix (.a, .so,\n# .dll, ...).  This one MUST have a value when using this makefile to\n# build shared libraries.\n# For example, to build libfoo.so, you need to do the following:\n#LIBNAME=foo\nLIBNAME=\n\n# APPNAME contains just the name of the application, without suffix (\"\"\n# on Unix, \".exe\" on Windows, ...).  This one MUST have a value when using\n# this makefile to build applications.\n# For example, to build foo, you need to do the following:\n#APPNAME=foo\nAPPNAME=\n\n# OBJECTS contains all the object files to link together into the application.\n# This must contain at least one object file.\n#OBJECTS=foo.o\nOBJECTS=\n\n# LIBEXTRAS contains extra modules to link together with the library.\n# For example, if a second library, say libbar.a needs to be linked into\n# libfoo.so, you need to do the following:\n#LIBEXTRAS=libbar.a\n# Note that this MUST be used when using the link_o targets, to hold the\n# names of all object files that go into the target library.\nLIBEXTRAS=\n\n# LIBVERSION contains the current version of the library.\n# For example, to build libfoo.so.1.2, you need to do the following:\n#LIBVERSION=1.2\nLIBVERSION=\n\n# LIBCOMPATVERSIONS contains the compatibility versions (a list) of\n# the library.  They MUST be in decreasing order.\n# For example, if libfoo.so.1.2.1 is backward compatible with libfoo.so.1.2\n# and libfoo.so.1, you need to do the following:\n#LIBCOMPATVERSIONS=1.2 1\n# Note that on systems that use sonames, the last number will appear as\n# part of it.\n# It's also possible, for systems that support it (Tru64, for example),\n# to add extra compatibility info with more precision, by adding a second\n# list of versions, separated from the first with a semicolon, like this:\n#LIBCOMPATVERSIONS=1.2 1;1.2.0 1.1.2 1.1.1 1.1.0 1.0.0\nLIBCOMPATVERSIONS=\n\n# LIBDEPS contains all the flags necessary to cover all necessary\n# dependencies to other libraries.\nLIBDEPS=\n\n#------------------------------------------------------------------------------\n# The rest is private to this makefile.\n\nSET_X=:\n#SET_X=set -x\n\ntop:\n\techo \"Trying to use this makefile interactively?  Don't.\"\n\nCALC_VERSIONS=\t\\\n\tSHLIB_COMPAT=; SHLIB_SOVER=; \\\n\tif [ -n \"$(LIBVERSION)$(LIBCOMPATVERSIONS)\" ]; then \\\n\t\tprev=\"\"; \\\n\t\tfor v in `echo \"$(LIBVERSION) $(LIBCOMPATVERSIONS)\" | cut -d';' -f1`; do \\\n\t\t\tSHLIB_SOVER_NODOT=$$v; \\\n\t\t\tSHLIB_SOVER=.$$v; \\\n\t\t\tif [ -n \"$$prev\" ]; then \\\n\t\t\t\tSHLIB_COMPAT=\"$$SHLIB_COMPAT .$$prev\"; \\\n\t\t\tfi; \\\n\t\t\tprev=$$v; \\\n\t\tdone; \\\n\tfi\n\nLINK_APP=\t\\\n  ( $(SET_X);   \\\n    LIBDEPS=\"$${LIBDEPS:-$(LIBDEPS)}\"; \\\n    LDCMD=\"$${LDCMD:-$(CC)}\"; LDFLAGS=\"$${LDFLAGS:-$(CFLAGS)}\"; \\\n    LIBPATH=`for x in $$LIBDEPS; do echo $$x; done | sed -e 's/^ *-L//;t' -e d | uniq`; \\\n    LIBPATH=`echo $$LIBPATH | sed -e 's/ /:/g'`; \\\n    LD_LIBRARY_PATH=$$LIBPATH:$$LD_LIBRARY_PATH \\\n    $${LDCMD} $${LDFLAGS} -o $${APPNAME:=$(APPNAME)} $(OBJECTS) $${LIBDEPS} )\n\nLINK_SO=\t\\\n  ( $(SET_X);   \\\n    LIBDEPS=\"$${LIBDEPS:-$(LIBDEPS)}\"; \\\n    SHAREDCMD=\"$${SHAREDCMD:-$(CC)}\"; \\\n    SHAREDFLAGS=\"$${SHAREDFLAGS:-$(CFLAGS) $(SHARED_LDFLAGS)}\"; \\\n    LIBPATH=`for x in $$LIBDEPS; do echo $$x; done | sed -e 's/^ *-L//;t' -e d | uniq`; \\\n    LIBPATH=`echo $$LIBPATH | sed -e 's/ /:/g'`; \\\n    LD_LIBRARY_PATH=$$LIBPATH:$$LD_LIBRARY_PATH \\\n    $${SHAREDCMD} $${SHAREDFLAGS} \\\n\t-o $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX \\\n\t$$ALLSYMSFLAGS $$SHOBJECTS $$NOALLSYMSFLAGS $$LIBDEPS \\\n  ) && $(SYMLINK_SO)\n\nSYMLINK_SO=\t\\\n\tif [ -n \"$$INHIBIT_SYMLINKS\" ]; then :; else \\\n\t\tprev=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX; \\\n\t\tif [ -n \"$$SHLIB_COMPAT\" ]; then \\\n\t\t\tfor x in $$SHLIB_COMPAT; do \\\n\t\t\t\t( $(SET_X); rm -f $$SHLIB$$x$$SHLIB_SUFFIX; \\\n\t\t\t\t  ln -s $$prev $$SHLIB$$x$$SHLIB_SUFFIX ); \\\n\t\t\t\tprev=$$SHLIB$$x$$SHLIB_SUFFIX; \\\n\t\t\tdone; \\\n\t\tfi; \\\n\t\tif [ -n \"$$SHLIB_SOVER\" ]; then \\\n\t\t\t( $(SET_X); rm -f $$SHLIB$$SHLIB_SUFFIX; \\\n\t\t\t  ln -s $$prev $$SHLIB$$SHLIB_SUFFIX ); \\\n\t\tfi; \\\n\tfi\n\nLINK_SO_A=\tSHOBJECTS=\"lib$(LIBNAME).a $(LIBEXTRAS)\"; $(LINK_SO)\nLINK_SO_O=\tSHOBJECTS=\"$(LIBEXTRAS)\"; $(LINK_SO)\n\nLINK_SO_A_VIA_O=\t\\\n  SHOBJECTS=lib$(LIBNAME).o; \\\n  ALL=$$ALLSYMSFLAGS; ALLSYMSFLAGS=; NOALLSYMSFLAGS=; \\\n  ( $(SET_X); \\\n    ld $(LDFLAGS) -r -o lib$(LIBNAME).o $$ALL lib$(LIBNAME).a $(LIBEXTRAS) ); \\\n  $(LINK_SO) && rm -f lib$(LIBNAME).o\n\nLINK_SO_A_UNPACKED=\t\\\n  UNPACKDIR=link_tmp.$$$$; rm -rf $$UNPACKDIR; mkdir $$UNPACKDIR; \\\n  (cd $$UNPACKDIR; ar x ../lib$(LIBNAME).a) && \\\n  ([ -z \"$(LIBEXTRAS)\" ] || cp $(LIBEXTRAS) $$UNPACKDIR) && \\\n  SHOBJECTS=$$UNPACKDIR/*.o; \\\n  $(LINK_SO) && rm -rf $$UNPACKDIR\n\nDETECT_GNU_LD=($(CC) -Wl,-V /dev/null 2>&1 | grep '^GNU ld' )>/dev/null\n\nDO_GNU_SO=$(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS='-Wl,--whole-archive'; \\\n\tNOALLSYMSFLAGS='-Wl,--no-whole-archive'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-Bsymbolic -Wl,-soname=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\"\n\nDO_GNU_APP=LDFLAGS=\"$(CFLAGS) -Wl,-rpath,$(LIBRPATH)\"\n\n#This is rather special.  It's a special target with which one can link\n#applications without bothering with any features that have anything to\n#do with shared libraries, for example when linking against static\n#libraries.  It's mostly here to avoid a lot of conditionals everywhere\n#else...\nlink_app.:\n\t$(LINK_APP)\n\nlink_o.gnu:\n\t@ $(DO_GNU_SO); $(LINK_SO_O)\nlink_a.gnu:\n\t@ $(DO_GNU_SO); $(LINK_SO_A)\nlink_app.gnu:\n\t@ $(DO_GNU_APP); $(LINK_APP)\n\nDO_BEOS_SO=\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS='-Wl,--whole-archive'; \\\n\tNOALLSYMSFLAGS='-Wl,--no-whole-archive'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-Bsymbolic -Wl,-soname=$$SHLIB$$SHLIB_SUFFIX\"\n\nlink_o.beos:\n\t@ $(DO_BEOS_SO); $(LINK_SO_O)\nlink_a.beos:\n\t@ $(DO_BEOS_SO); $(LINK_SO_A)\n\nlink_o.bsd:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_SO); else \\\n\t$(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tLIBDEPS=\" \"; \\\n\tALLSYMSFLAGS=\"-Wl,-Bforcearchive\"; \\\n\tNOALLSYMSFLAGS=; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -nostdlib\"; \\\n\tfi; $(LINK_SO_O)\nlink_a.bsd:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_SO); else \\\n\t$(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tLIBDEPS=\" \"; \\\n\tALLSYMSFLAGS=\"-Wl,-Bforcearchive\"; \\\n\tNOALLSYMSFLAGS=; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -nostdlib\"; \\\n\tfi; $(LINK_SO_A)\nlink_app.bsd:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_APP); else \\\n\tLDFLAGS=\"$(CFLAGS) -Wl,-rpath,$(LIBPATH)\"; \\\n\tfi; $(LINK_APP)\n\n# For Darwin AKA Mac OS/X (dyld)\n# Originally link_o.darwin produced .so, because it was hard-coded\n# in dso_dlfcn module. At later point dso_dlfcn switched to .dylib\n# extension in order to allow for run-time linking with vendor-\n# supplied shared libraries such as libz, so that link_o.darwin had\n# to be harmonized with it. This caused minor controversy, because\n# it was believed that dlopen can't be used to dynamically load\n# .dylib-s, only so called bundle modules (ones linked with -bundle\n# flag). The belief seems to be originating from pre-10.4 release,\n# where dlfcn functionality was emulated by dlcompat add-on. In\n# 10.4 dlopen was rewritten as native part of dyld and is documented\n# to be capable of loading both dynamic libraries and bundles. In\n# order to provide compatibility with pre-10.4 dlopen, modules are\n# linked with -bundle flag, which makes .dylib extension misleading.\n# It works, because dlopen is [and always was] extension-agnostic.\n# Alternative to this heuristic approach is to develop specific\n# MacOS X dso module relying on whichever \"native\" dyld interface.\nlink_o.darwin:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME); \\\n\tSHLIB_SUFFIX=.dylib; \\\n\tALLSYMSFLAGS='-all_load'; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS=\"$(CFLAGS) `echo $(SHARED_LDFLAGS) | sed s/dynamiclib/bundle/`\"; \\\n\tif [ -n \"$(LIBVERSION)\" ]; then \\\n\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -current_version $(LIBVERSION)\"; \\\n\tfi; \\\n\tif [ -n \"$$SHLIB_SOVER_NODOT\" ]; then \\\n\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -compatibility_version $$SHLIB_SOVER_NODOT\"; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.darwin:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME); \\\n\tSHLIB_SUFFIX=.dylib; \\\n\tALLSYMSFLAGS='-all_load'; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS)\"; \\\n\tif [ -n \"$(LIBVERSION)\" ]; then \\\n\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -current_version $(LIBVERSION)\"; \\\n\tfi; \\\n\tif [ -n \"$$SHLIB_SOVER_NODOT\" ]; then \\\n\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -compatibility_version $$SHLIB_SOVER_NODOT\"; \\\n\tfi; \\\n\tSHAREDFLAGS=\"$$SHAREDFLAGS -install_name $(INSTALLTOP)/$(LIBDIR)/$$SHLIB$(SHLIB_EXT)\"; \\\n\t$(LINK_SO_A)\nlink_app.darwin:\t# is there run-path on darwin?\n\t$(LINK_APP)\n\nlink_o.cygwin:\n\t@ $(CALC_VERSIONS); \\\n\tINHIBIT_SYMLINKS=yes; \\\n\tSHLIB=cyg$(LIBNAME); \\\n\tbase=-Wl,--enable-auto-image-base; \\\n\tdeffile=; \\\n\tif expr $(PLATFORM) : 'mingw' > /dev/null; then \\\n\t\tSHLIB=$(LIBNAME)eay32; base=; \\\n\t\tif test -f $(LIBNAME)eay32.def; then \\\n\t\t\tdeffile=$(LIBNAME)eay32.def; \\\n\t\tfi; \\\n\tfi; \\\n\tSHLIB_SUFFIX=.dll; \\\n\tLIBVERSION=\"$(LIBVERSION)\"; \\\n\tSHLIB_SOVER=${LIBVERSION:+\"-$(LIBVERSION)\"}; \\\n\tALLSYMSFLAGS='-Wl,--whole-archive'; \\\n\tNOALLSYMSFLAGS='-Wl,--no-whole-archive'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared $$base $$deffile -Wl,-Bsymbolic\"; \\\n\t$(LINK_SO_O)\n#for mingw target if def-file is in use dll-name should match library-name\nlink_a.cygwin:\n\t@ $(CALC_VERSIONS); \\\n\tINHIBIT_SYMLINKS=yes; \\\n\tSHLIB=cyg$(LIBNAME); SHLIB_SOVER=-$(LIBVERSION); SHLIB_SUFFIX=.dll; \\\n\tdll_name=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX; extras=; \\\n\tbase=-Wl,--enable-auto-image-base; \\\n\tif expr $(PLATFORM) : 'mingw' > /dev/null; then \\\n\t\tcase $(LIBNAME) in \\\n\t\t\tcrypto) SHLIB=libeay;; \\\n\t\t\tssl) SHLIB=ssleay;; \\\n\t\tesac; \\\n\t\tSHLIB_SOVER=32; \\\n\t\textras=\"$(LIBNAME).def\"; \\\n\t\t$(PERL) util/mkdef.pl 32 $$SHLIB > $$extras; \\\n\t\tbase=; [ $(LIBNAME) = \"crypto\" -a -n \"$(FIPSCANLIB)\" ] && base=-Wl,--image-base,0x63000000; \\\n\tfi; \\\n\tdll_name=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX; \\\n\t$(PERL) util/mkrc.pl $$dll_name | \\\n\t\t$(CROSS_COMPILE)windres -o rc.o; \\\n\textras=\"$$extras rc.o\"; \\\n\tALLSYMSFLAGS='-Wl,--whole-archive'; \\\n\tNOALLSYMSFLAGS='-Wl,--no-whole-archive'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared $$base -Wl,-Bsymbolic -Wl,--out-implib,lib$(LIBNAME).dll.a $$extras\"; \\\n\t[ -f apps/$$dll_name ] && rm apps/$$dll_name; \\\n\t[ -f test/$$dll_name ] && rm test/$$dll_name; \\\n\t$(LINK_SO_A) || exit 1; \\\n\trm $$extras; \\\n\tcp -p $$dll_name apps/; \\\n\tcp -p $$dll_name test/\nlink_app.cygwin:\n\t@if expr \"$(CFLAGS)\" : '.*OPENSSL_USE_APPLINK' > /dev/null; then \\\n\t\tLIBDEPS=\"$(TOP)/crypto/applink.o $${LIBDEPS:-$(LIBDEPS)}\"; \\\n\t\texport LIBDEPS; \\\n\tfi; \\\n\t$(LINK_APP)\n\nlink_o.alpha-osf1:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tSHLIB_HIST=`echo \"$(LIBCOMPATVERSIONS)\" | cut -d';' -f2 | sed -e 's/ */:/'`; \\\n\t\tif [ -n \"$$SHLIB_HIST\" ]; then \\\n\t\t\tSHLIB_HIST=\"$${SHLIB_HIST}:$(LIBVERSION)\"; \\\n\t\telse \\\n\t\t\tSHLIB_HIST=\"$(LIBVERSION)\"; \\\n\t\tfi; \\\n\t\tSHLIB_SOVER=; \\\n\t\tALLSYMSFLAGS='-all'; \\\n\t\tNOALLSYMSFLAGS='-none'; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-B,symbolic\"; \\\n\t\tif [ -n \"$$SHLIB_HIST\" ]; then \\\n\t\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -set_version $$SHLIB_HIST\"; \\\n\t\tfi; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.alpha-osf1:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tSHLIB_HIST=`echo \"$(LIBCOMPATVERSIONS)\" | cut -d';' -f2 | sed -e 's/ */:/'`; \\\n\t\tif [ -n \"$$SHLIB_HIST\" ]; then \\\n\t\t\tSHLIB_HIST=\"$${SHLIB_HIST}:$(LIBVERSION)\"; \\\n\t\telse \\\n\t\t\tSHLIB_HIST=\"$(LIBVERSION)\"; \\\n\t\tfi; \\\n\t\tSHLIB_SOVER=; \\\n\t\tALLSYMSFLAGS='-all'; \\\n\t\tNOALLSYMSFLAGS='-none'; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-B,symbolic\"; \\\n\t\tif [ -n \"$$SHLIB_HIST\" ]; then \\\n\t\t\tSHAREDFLAGS=\"$$SHAREDFLAGS -set_version $$SHLIB_HIST\"; \\\n\t\tfi; \\\n\tfi; \\\n\t$(LINK_SO_A)\nlink_app.alpha-osf1:\n\t@if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_APP); \\\n\telse \\\n\t\tLDFLAGS=\"$(CFLAGS) -rpath $(LIBRPATH)\"; \\\n\tfi; \\\n\t$(LINK_APP)\n\nlink_o.solaris:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tMINUSZ='-z '; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && MINUSZ='-Wl,-z,'; \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tALLSYMSFLAGS=\"$${MINUSZ}allextract\"; \\\n\t\tNOALLSYMSFLAGS=\"$${MINUSZ}defaultextract\"; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX -Wl,-Bsymbolic\"; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.solaris:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tMINUSZ='-z '; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && MINUSZ='-Wl,-z,'; \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=;\\\n\t\tALLSYMSFLAGS=\"$${MINUSZ}allextract\"; \\\n\t\tNOALLSYMSFLAGS=\"$${MINUSZ}defaultextract\"; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX -Wl,-Bsymbolic\"; \\\n\tfi; \\\n\t$(LINK_SO_A)\nlink_app.solaris:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_APP); \\\n\telse \\\n\t\tLDFLAGS=\"$(CFLAGS) -R $(LIBRPATH)\"; \\\n\tfi; \\\n\t$(LINK_APP)\n\n# OpenServer 5 native compilers used\nlink_o.svr3:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tALLSYMSFLAGS=''; \\\n\t\tNOALLSYMSFLAGS=''; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) -G -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\"; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.svr3:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tALLSYMSFLAGS=''; \\\n\t\tNOALLSYMSFLAGS=''; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) -G -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\"; \\\n\tfi; \\\n\t$(LINK_SO_A_UNPACKED)\nlink_app.svr3:\n\t@$(DETECT_GNU_LD) && $(DO_GNU_APP); \\\n\t$(LINK_APP)\n\n# UnixWare 7 and OpenUNIX 8 native compilers used\nlink_o.svr5:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHARE_FLAG='-G'; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && SHARE_FLAG='-shared'; \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tALLSYMSFLAGS=''; \\\n\t\tNOALLSYMSFLAGS=''; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $${SHARE_FLAG} -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\"; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.svr5:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHARE_FLAG='-G'; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && SHARE_FLAG='-shared'; \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tALLSYMSFLAGS=''; \\\n\t\tNOALLSYMSFLAGS=''; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $${SHARE_FLAG} -h $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\"; \\\n\tfi; \\\n\t$(LINK_SO_A_UNPACKED)\nlink_app.svr5:\n\t@$(DETECT_GNU_LD) && $(DO_GNU_APP); \\\n\t$(LINK_APP)\n\nlink_o.irix:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tMINUSWL=\"\"; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && MINUSWL=\"-Wl,\"; \\\n\t\tALLSYMSFLAGS=\"$${MINUSWL}-all\"; \\\n\t\tNOALLSYMSFLAGS=\"$${MINUSWL}-none\"; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-soname,$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX,-B,symbolic\"; \\\n\tfi; \\\n\t$(LINK_SO_O)\nlink_a.irix:\n\t@ if $(DETECT_GNU_LD); then \\\n\t\t$(DO_GNU_SO); \\\n\telse \\\n\t\t$(CALC_VERSIONS); \\\n\t\tSHLIB=lib$(LIBNAME).so; \\\n\t\tSHLIB_SUFFIX=; \\\n\t\tMINUSWL=\"\"; \\\n\t\t($(CC) -v 2>&1 | grep gcc) > /dev/null && MINUSWL=\"-Wl,\"; \\\n\t\tALLSYMSFLAGS=\"$${MINUSWL}-all\"; \\\n\t\tNOALLSYMSFLAGS=\"$${MINUSWL}-none\"; \\\n\t\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-soname,$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX,-B,symbolic\"; \\\n\tfi; \\\n\t$(LINK_SO_A)\nlink_app.irix:\n\t@LDFLAGS=\"$(CFLAGS) -Wl,-rpath,$(LIBRPATH)\"; \\\n\t$(LINK_APP)\n\n# 32-bit PA-RISC HP-UX embeds the -L pathname of libs we link with, so\n# we compensate for it with +cdp ../: and +cdp ./:. Yes, these rewrite\n# rules imply that we can only link one level down in catalog structure,\n# but that's what takes place for the moment of this writing. +cdp option\n# was introduced in HP-UX 11.x and applies in 32-bit PA-RISC link\n# editor context only [it's simply ignored in other cases, which are all\n# ELFs by the way].\n#\nlink_o.hpux:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_SO); else \\\n\t$(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).sl; \\\n\texpr \"$(CFLAGS)\" : '.*DSO_DLFCN' > /dev/null && SHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS='-Wl,-Fl'; \\\n\tNOALLSYMSFLAGS=''; \\\n\texpr $(PLATFORM) : 'hpux64' > /dev/null && ALLSYMSFLAGS='-Wl,+forceload'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-B,symbolic,+vnocompatwarnings,-z,+s,+h,$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX,+cdp,../:,+cdp,./:\"; \\\n\tfi; \\\n\trm -f $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX || :; \\\n\t$(LINK_SO_O) && chmod a=rx $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\nlink_a.hpux:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_SO); else \\\n\t$(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).sl; \\\n\texpr $(PLATFORM) : '.*ia64' > /dev/null && SHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS='-Wl,-Fl'; \\\n\tNOALLSYMSFLAGS=''; \\\n\texpr $(PLATFORM) : 'hpux64' > /dev/null && ALLSYMSFLAGS='-Wl,+forceload'; \\\n\tSHAREDFLAGS=\"$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-B,symbolic,+vnocompatwarnings,-z,+s,+h,$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX,+cdp,../:,+cdp,./:\"; \\\n\tfi; \\\n\trm -f $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX || :; \\\n\t$(LINK_SO_A) && chmod a=rx $$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX\nlink_app.hpux:\n\t@if $(DETECT_GNU_LD); then $(DO_GNU_APP); else \\\n\tLDFLAGS=\"$(CFLAGS) -Wl,+s,+cdp,../:,+cdp,./:,+b,$(LIBRPATH)\"; \\\n\tfi; \\\n\t$(LINK_APP)\n\nlink_o.aix:\n\t@ $(CALC_VERSIONS); \\\n\tOBJECT_MODE=`expr \"x$(SHARED_LDFLAGS)\" : 'x\\-[a-z]*\\(64\\)'` || :; \\\n\tOBJECT_MODE=$${OBJECT_MODE:-32}; export OBJECT_MODE; \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS=''; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS='$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-bexpall,-bnolibpath,-bM:SRE'; \\\n\t$(LINK_SO_O);\nlink_a.aix:\n\t@ $(CALC_VERSIONS); \\\n\tOBJECT_MODE=`expr \"x$(SHARED_LDFLAGS)\" : 'x\\-[a-z]*\\(64\\)'` || : ; \\\n\tOBJECT_MODE=$${OBJECT_MODE:-32}; export OBJECT_MODE; \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS='-bnogc'; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS='$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-bexpall,-bnolibpath,-bM:SRE'; \\\n\t$(LINK_SO_A_VIA_O)\nlink_app.aix:\n\tLDFLAGS=\"$(CFLAGS) -Wl,-brtl,-blibpath:$(LIBRPATH):$${LIBPATH:-/usr/lib:/lib}\"; \\\n\t$(LINK_APP)\n\nlink_o.reliantunix:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS=; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS='$(CFLAGS) -G'; \\\n\t$(LINK_SO_O)\nlink_a.reliantunix:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\tSHLIB_SUFFIX=; \\\n\tALLSYMSFLAGS=; \\\n\tNOALLSYMSFLAGS=''; \\\n\tSHAREDFLAGS='$(CFLAGS) -G'; \\\n\t$(LINK_SO_A_UNPACKED)\nlink_app.reliantunix:\n\t$(LINK_APP)\n\n# Targets to build symbolic links when needed\nsymlink.gnu symlink.solaris symlink.svr3 symlink.svr5 symlink.irix \\\nsymlink.aix symlink.reliantunix:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).so; \\\n\t$(SYMLINK_SO)\nsymlink.darwin:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME); \\\n\tSHLIB_SUFFIX=.dylib; \\\n\t$(SYMLINK_SO)\nsymlink.hpux:\n\t@ $(CALC_VERSIONS); \\\n\tSHLIB=lib$(LIBNAME).sl; \\\n\texpr $(PLATFORM) : '.*ia64' > /dev/null && SHLIB=lib$(LIBNAME).so; \\\n\t$(SYMLINK_SO)\n# The following lines means those specific architectures do no symlinks\nsymlink.cygwin symlink.alpha-osf1 symlink.tru64 symlink.tru64-rpath symlink.beos:\n\n# Compatibility targets\nlink_o.bsd-gcc-shared link_o.linux-shared link_o.gnu-shared: link_o.gnu\nlink_a.bsd-gcc-shared link_a.linux-shared link_a.gnu-shared: link_a.gnu\nlink_app.bsd-gcc-shared link_app.linux-shared link_app.gnu-shared: link_app.gnu\nsymlink.bsd-gcc-shared symlink.bsd-shared symlink.linux-shared symlink.gnu-shared: symlink.gnu\nlink_o.bsd-shared: link_o.bsd\nlink_a.bsd-shared: link_a.bsd\nlink_app.bsd-shared: link_app.bsd\nlink_o.darwin-shared: link_o.darwin\nlink_a.darwin-shared: link_a.darwin\nlink_app.darwin-shared: link_app.darwin\nsymlink.darwin-shared: symlink.darwin\nlink_o.cygwin-shared: link_o.cygwin\nlink_a.cygwin-shared: link_a.cygwin\nlink_app.cygwin-shared: link_app.cygwin\nsymlink.cygwin-shared: symlink.cygwin\nlink_o.alpha-osf1-shared: link_o.alpha-osf1\nlink_a.alpha-osf1-shared: link_a.alpha-osf1\nlink_app.alpha-osf1-shared: link_app.alpha-osf1\nsymlink.alpha-osf1-shared: symlink.alpha-osf1\nlink_o.tru64-shared: link_o.tru64\nlink_a.tru64-shared: link_a.tru64\nlink_app.tru64-shared: link_app.tru64\nsymlink.tru64-shared: symlink.tru64\nlink_o.tru64-shared-rpath: link_o.tru64-rpath\nlink_a.tru64-shared-rpath: link_a.tru64-rpath\nlink_app.tru64-shared-rpath: link_app.tru64-rpath\nsymlink.tru64-shared-rpath: symlink.tru64-rpath\nlink_o.solaris-shared: link_o.solaris\nlink_a.solaris-shared: link_a.solaris\nlink_app.solaris-shared: link_app.solaris\nsymlink.solaris-shared: symlink.solaris\nlink_o.svr3-shared: link_o.svr3\nlink_a.svr3-shared: link_a.svr3\nlink_app.svr3-shared: link_app.svr3\nsymlink.svr3-shared: symlink.svr3\nlink_o.svr5-shared: link_o.svr5\nlink_a.svr5-shared: link_a.svr5\nlink_app.svr5-shared: link_app.svr5\nsymlink.svr5-shared: symlink.svr5\nlink_o.irix-shared: link_o.irix\nlink_a.irix-shared: link_a.irix\nlink_app.irix-shared: link_app.irix\nsymlink.irix-shared: symlink.irix\nlink_o.hpux-shared: link_o.hpux\nlink_a.hpux-shared: link_a.hpux\nlink_app.hpux-shared: link_app.hpux\nsymlink.hpux-shared: symlink.hpux\nlink_o.aix-shared: link_o.aix\nlink_a.aix-shared: link_a.aix\nlink_app.aix-shared: link_app.aix\nsymlink.aix-shared: symlink.aix\nlink_o.reliantunix-shared: link_o.reliantunix\nlink_a.reliantunix-shared: link_a.reliantunix\nlink_app.reliantunix-shared: link_app.reliantunix\nsymlink.reliantunix-shared: symlink.reliantunix\nlink_o.beos-shared: link_o.beos\nlink_a.beos-shared: link_a.beos\nlink_app.beos-shared: link_app.gnu\nsymlink.beos-shared: symlink.beos\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/include/openssl/dso.h": "/* dso.h */\n/*\n * Written by Geoff Thorpe (geoff@geoffthorpe.net) for the OpenSSL project\n * 2000.\n */\n/* ====================================================================\n * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    licensing@OpenSSL.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n#ifndef HEADER_DSO_H\n# define HEADER_DSO_H\n\n# include <openssl/crypto.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* These values are used as commands to DSO_ctrl() */\n# define DSO_CTRL_GET_FLAGS      1\n# define DSO_CTRL_SET_FLAGS      2\n# define DSO_CTRL_OR_FLAGS       3\n\n/*\n * By default, DSO_load() will translate the provided filename into a form\n * typical for the platform (more specifically the DSO_METHOD) using the\n * dso_name_converter function of the method. Eg. win32 will transform \"blah\"\n * into \"blah.dll\", and dlfcn will transform it into \"libblah.so\". The\n * behaviour can be overriden by setting the name_converter callback in the\n * DSO object (using DSO_set_name_converter()). This callback could even\n * utilise the DSO_METHOD's converter too if it only wants to override\n * behaviour for one or two possible DSO methods. However, the following flag\n * can be set in a DSO to prevent *any* native name-translation at all - eg.\n * if the caller has prompted the user for a path to a driver library so the\n * filename should be interpreted as-is.\n */\n# define DSO_FLAG_NO_NAME_TRANSLATION            0x01\n/*\n * An extra flag to give if only the extension should be added as\n * translation.  This is obviously only of importance on Unix and other\n * operating systems where the translation also may prefix the name with\n * something, like 'lib', and ignored everywhere else. This flag is also\n * ignored if DSO_FLAG_NO_NAME_TRANSLATION is used at the same time.\n */\n# define DSO_FLAG_NAME_TRANSLATION_EXT_ONLY      0x02\n\n/*\n * The following flag controls the translation of symbol names to upper case.\n * This is currently only being implemented for OpenVMS.\n */\n# define DSO_FLAG_UPCASE_SYMBOL                  0x10\n\n/*\n * This flag loads the library with public symbols. Meaning: The exported\n * symbols of this library are public to all libraries loaded after this\n * library. At the moment only implemented in unix.\n */\n# define DSO_FLAG_GLOBAL_SYMBOLS                 0x20\n\ntypedef void (*DSO_FUNC_TYPE) (void);\n\ntypedef struct dso_st DSO;\n\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that transform filenames. They are passed a DSO structure\n * pointer (or NULL if they are to be used independantly of a DSO object) and\n * a filename to transform. They should either return NULL (if there is an\n * error condition) or a newly allocated string containing the transformed\n * form that the caller will need to free with OPENSSL_free() when done.\n */\ntypedef char *(*DSO_NAME_CONVERTER_FUNC)(DSO *, const char *);\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that merge two file specifications. They are passed a DSO\n * structure pointer (or NULL if they are to be used independantly of a DSO\n * object) and two file specifications to merge. They should either return\n * NULL (if there is an error condition) or a newly allocated string\n * containing the result of merging that the caller will need to free with\n * OPENSSL_free() when done. Here, merging means that bits and pieces are\n * taken from each of the file specifications and added together in whatever\n * fashion that is sensible for the DSO method in question.  The only rule\n * that really applies is that if the two specification contain pieces of the\n * same type, the copy from the first string takes priority.  One could see\n * it as the first specification is the one given by the user and the second\n * being a bunch of defaults to add on if they're missing in the first.\n */\ntypedef char *(*DSO_MERGER_FUNC)(DSO *, const char *, const char *);\n\ntypedef struct dso_meth_st {\n    const char *name;\n    /*\n     * Loads a shared library, NB: new DSO_METHODs must ensure that a\n     * successful load populates the loaded_filename field, and likewise a\n     * successful unload OPENSSL_frees and NULLs it out.\n     */\n    int (*dso_load) (DSO *dso);\n    /* Unloads a shared library */\n    int (*dso_unload) (DSO *dso);\n    /* Binds a variable */\n    void *(*dso_bind_var) (DSO *dso, const char *symname);\n    /*\n     * Binds a function - assumes a return type of DSO_FUNC_TYPE. This should\n     * be cast to the real function prototype by the caller. Platforms that\n     * don't have compatible representations for different prototypes (this\n     * is possible within ANSI C) are highly unlikely to have shared\n     * libraries at all, let alone a DSO_METHOD implemented for them.\n     */\n    DSO_FUNC_TYPE (*dso_bind_func) (DSO *dso, const char *symname);\n/* I don't think this would actually be used in any circumstances. */\n# if 0\n    /* Unbinds a variable */\n    int (*dso_unbind_var) (DSO *dso, char *symname, void *symptr);\n    /* Unbinds a function */\n    int (*dso_unbind_func) (DSO *dso, char *symname, DSO_FUNC_TYPE symptr);\n# endif\n    /*\n     * The generic (yuck) \"ctrl()\" function. NB: Negative return values\n     * (rather than zero) indicate errors.\n     */\n    long (*dso_ctrl) (DSO *dso, int cmd, long larg, void *parg);\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_NAME_CONVERTER_FUNC dso_name_converter;\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_MERGER_FUNC dso_merger;\n    /* [De]Initialisation handlers. */\n    int (*init) (DSO *dso);\n    int (*finish) (DSO *dso);\n    /* Return pathname of the module containing location */\n    int (*pathbyaddr) (void *addr, char *path, int sz);\n    /* Perform global symbol lookup, i.e. among *all* modules */\n    void *(*globallookup) (const char *symname);\n} DSO_METHOD;\n\n/**********************************************************************/\n/* The low-level handle type used to refer to a loaded shared library */\n\nstruct dso_st {\n    DSO_METHOD *meth;\n    /*\n     * Standard dlopen uses a (void *). Win32 uses a HANDLE. VMS doesn't use\n     * anything but will need to cache the filename for use in the dso_bind\n     * handler. All in all, let each method control its own destiny.\n     * \"Handles\" and such go in a STACK.\n     */\n    STACK_OF(void) *meth_data;\n    int references;\n    int flags;\n    /*\n     * For use by applications etc ... use this for your bits'n'pieces, don't\n     * touch meth_data!\n     */\n    CRYPTO_EX_DATA ex_data;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_name_converter. NB: This\n     * should normally set using DSO_set_name_converter().\n     */\n    DSO_NAME_CONVERTER_FUNC name_converter;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_merger. NB: This should\n     * normally set using DSO_set_merger().\n     */\n    DSO_MERGER_FUNC merger;\n    /*\n     * This is populated with (a copy of) the platform-independant filename\n     * used for this DSO.\n     */\n    char *filename;\n    /*\n     * This is populated with (a copy of) the translated filename by which\n     * the DSO was actually loaded. It is NULL iff the DSO is not currently\n     * loaded. NB: This is here because the filename translation process may\n     * involve a callback being invoked more than once not only to convert to\n     * a platform-specific form, but also to try different filenames in the\n     * process of trying to perform a load. As such, this variable can be\n     * used to indicate (a) whether this DSO structure corresponds to a\n     * loaded library or not, and (b) the filename with which it was actually\n     * loaded.\n     */\n    char *loaded_filename;\n};\n\nDSO *DSO_new(void);\nDSO *DSO_new_method(DSO_METHOD *method);\nint DSO_free(DSO *dso);\nint DSO_flags(DSO *dso);\nint DSO_up_ref(DSO *dso);\nlong DSO_ctrl(DSO *dso, int cmd, long larg, void *parg);\n\n/*\n * This function sets the DSO's name_converter callback. If it is non-NULL,\n * then it will be used instead of the associated DSO_METHOD's function. If\n * oldcb is non-NULL then it is set to the function pointer value being\n * replaced. Return value is non-zero for success.\n */\nint DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,\n                           DSO_NAME_CONVERTER_FUNC *oldcb);\n/*\n * These functions can be used to get/set the platform-independant filename\n * used for a DSO. NB: set will fail if the DSO is already loaded.\n */\nconst char *DSO_get_filename(DSO *dso);\nint DSO_set_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's name_converter callback to translate a\n * filename, or if the callback isn't set it will instead use the DSO_METHOD's\n * converter. If \"filename\" is NULL, the \"filename\" in the DSO itself will be\n * used. If the DSO_FLAG_NO_NAME_TRANSLATION flag is set, then the filename is\n * simply duplicated. NB: This function is usually called from within a\n * DSO_METHOD during the processing of a DSO_load() call, and is exposed so\n * that caller-created DSO_METHODs can do the same thing. A non-NULL return\n * value will need to be OPENSSL_free()'d.\n */\nchar *DSO_convert_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's merger callback to merge two file\n * specifications, or if the callback isn't set it will instead use the\n * DSO_METHOD's merger.  A non-NULL return value will need to be\n * OPENSSL_free()'d.\n */\nchar *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2);\n/*\n * If the DSO is currently loaded, this returns the filename that it was\n * loaded under, otherwise it returns NULL. So it is also useful as a test as\n * to whether the DSO is currently loaded. NB: This will not necessarily\n * return the same value as DSO_convert_filename(dso, dso->filename), because\n * the DSO_METHOD's load function may have tried a variety of filenames (with\n * and/or without the aid of the converters) before settling on the one it\n * actually loaded.\n */\nconst char *DSO_get_loaded_filename(DSO *dso);\n\nvoid DSO_set_default_method(DSO_METHOD *meth);\nDSO_METHOD *DSO_get_default_method(void);\nDSO_METHOD *DSO_get_method(DSO *dso);\nDSO_METHOD *DSO_set_method(DSO *dso, DSO_METHOD *meth);\n\n/*\n * The all-singing all-dancing load function, you normally pass NULL for the\n * first and third parameters. Use DSO_up and DSO_free for subsequent\n * reference count handling. Any flags passed in will be set in the\n * constructed DSO after its init() function but before the load operation.\n * If 'dso' is non-NULL, 'flags' is ignored.\n */\nDSO *DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags);\n\n/* This function binds to a variable inside a shared library. */\nvoid *DSO_bind_var(DSO *dso, const char *symname);\n\n/* This function binds to a function inside a shared library. */\nDSO_FUNC_TYPE DSO_bind_func(DSO *dso, const char *symname);\n\n/*\n * This method is the default, but will beg, borrow, or steal whatever method\n * should be the default on any particular platform (including\n * DSO_METH_null() if necessary).\n */\nDSO_METHOD *DSO_METHOD_openssl(void);\n\n/*\n * This method is defined for all platforms - if a platform has no DSO\n * support then this will be the only method!\n */\nDSO_METHOD *DSO_METHOD_null(void);\n\n/*\n * If DSO_DLFCN is defined, the standard dlfcn.h-style functions (dlopen,\n * dlclose, dlsym, etc) will be used and incorporated into this method. If\n * not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dlfcn(void);\n\n/*\n * If DSO_DL is defined, the standard dl.h-style functions (shl_load,\n * shl_unload, shl_findsym, etc) will be used and incorporated into this\n * method. If not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dl(void);\n\n/* If WIN32 is defined, use DLLs. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_win32(void);\n\n/* If VMS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_vms(void);\n\n/*\n * This function writes null-terminated pathname of DSO module containing\n * 'addr' into 'sz' large caller-provided 'path' and returns the number of\n * characters [including trailing zero] written to it. If 'sz' is 0 or\n * negative, 'path' is ignored and required amount of charachers [including\n * trailing zero] to accomodate pathname is returned. If 'addr' is NULL, then\n * pathname of cryptolib itself is returned. Negative or zero return value\n * denotes error.\n */\nint DSO_pathbyaddr(void *addr, char *path, int sz);\n\n/*\n * This function should be used with caution! It looks up symbols in *all*\n * loaded modules and if module gets unloaded by somebody else attempt to\n * dereference the pointer is doomed to have fatal consequences. Primary\n * usage for this function is to probe *core* system functionality, e.g.\n * check if getnameinfo(3) is available at run-time without bothering about\n * OS-specific details such as libc.so.versioning or where does it actually\n * reside: in libc itself or libsocket.\n */\nvoid *DSO_global_lookup(const char *name);\n\n/* If BeOS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_beos(void);\n\n/* BEGIN ERROR CODES */\n/*\n * The following lines are auto generated by the script mkerr.pl. Any changes\n * made after this point may be overwritten when the script is next run.\n */\nvoid ERR_load_DSO_strings(void);\n\n/* Error codes for the DSO functions. */\n\n/* Function codes. */\n# define DSO_F_BEOS_BIND_FUNC                             144\n# define DSO_F_BEOS_BIND_VAR                              145\n# define DSO_F_BEOS_LOAD                                  146\n# define DSO_F_BEOS_NAME_CONVERTER                        147\n# define DSO_F_BEOS_UNLOAD                                148\n# define DSO_F_DLFCN_BIND_FUNC                            100\n# define DSO_F_DLFCN_BIND_VAR                             101\n# define DSO_F_DLFCN_LOAD                                 102\n# define DSO_F_DLFCN_MERGER                               130\n# define DSO_F_DLFCN_NAME_CONVERTER                       123\n# define DSO_F_DLFCN_UNLOAD                               103\n# define DSO_F_DL_BIND_FUNC                               104\n# define DSO_F_DL_BIND_VAR                                105\n# define DSO_F_DL_LOAD                                    106\n# define DSO_F_DL_MERGER                                  131\n# define DSO_F_DL_NAME_CONVERTER                          124\n# define DSO_F_DL_UNLOAD                                  107\n# define DSO_F_DSO_BIND_FUNC                              108\n# define DSO_F_DSO_BIND_VAR                               109\n# define DSO_F_DSO_CONVERT_FILENAME                       126\n# define DSO_F_DSO_CTRL                                   110\n# define DSO_F_DSO_FREE                                   111\n# define DSO_F_DSO_GET_FILENAME                           127\n# define DSO_F_DSO_GET_LOADED_FILENAME                    128\n# define DSO_F_DSO_GLOBAL_LOOKUP                          139\n# define DSO_F_DSO_LOAD                                   112\n# define DSO_F_DSO_MERGE                                  132\n# define DSO_F_DSO_NEW_METHOD                             113\n# define DSO_F_DSO_PATHBYADDR                             140\n# define DSO_F_DSO_SET_FILENAME                           129\n# define DSO_F_DSO_SET_NAME_CONVERTER                     122\n# define DSO_F_DSO_UP_REF                                 114\n# define DSO_F_GLOBAL_LOOKUP_FUNC                         138\n# define DSO_F_PATHBYADDR                                 137\n# define DSO_F_VMS_BIND_SYM                               115\n# define DSO_F_VMS_LOAD                                   116\n# define DSO_F_VMS_MERGER                                 133\n# define DSO_F_VMS_UNLOAD                                 117\n# define DSO_F_WIN32_BIND_FUNC                            118\n# define DSO_F_WIN32_BIND_VAR                             119\n# define DSO_F_WIN32_GLOBALLOOKUP                         142\n# define DSO_F_WIN32_GLOBALLOOKUP_FUNC                    143\n# define DSO_F_WIN32_JOINER                               135\n# define DSO_F_WIN32_LOAD                                 120\n# define DSO_F_WIN32_MERGER                               134\n# define DSO_F_WIN32_NAME_CONVERTER                       125\n# define DSO_F_WIN32_PATHBYADDR                           141\n# define DSO_F_WIN32_SPLITTER                             136\n# define DSO_F_WIN32_UNLOAD                               121\n\n/* Reason codes. */\n# define DSO_R_CTRL_FAILED                                100\n# define DSO_R_DSO_ALREADY_LOADED                         110\n# define DSO_R_EMPTY_FILE_STRUCTURE                       113\n# define DSO_R_FAILURE                                    114\n# define DSO_R_FILENAME_TOO_BIG                           101\n# define DSO_R_FINISH_FAILED                              102\n# define DSO_R_INCORRECT_FILE_SYNTAX                      115\n# define DSO_R_LOAD_FAILED                                103\n# define DSO_R_NAME_TRANSLATION_FAILED                    109\n# define DSO_R_NO_FILENAME                                111\n# define DSO_R_NO_FILE_SPECIFICATION                      116\n# define DSO_R_NULL_HANDLE                                104\n# define DSO_R_SET_FILENAME_FAILED                        112\n# define DSO_R_STACK_ERROR                                105\n# define DSO_R_SYM_FAILURE                                106\n# define DSO_R_UNLOAD_FAILED                              107\n# define DSO_R_UNSUPPORTED                                108\n\n#ifdef  __cplusplus\n}\n#endif\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/crypto/sparcv9cap.c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <sys/time.h>\n#include <unistd.h>\n#include <openssl/bn.h>\n\n#include \"sparc_arch.h\"\n\n#if defined(__GNUC__) && defined(__linux)\n__attribute__ ((visibility(\"hidden\")))\n#endif\nunsigned int OPENSSL_sparcv9cap_P[2] = { SPARCV9_TICK_PRIVILEGED, 0 };\n\nint bn_mul_mont(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,\n                const BN_ULONG *np, const BN_ULONG *n0, int num)\n{\n    int bn_mul_mont_vis3(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,\n                         const BN_ULONG *np, const BN_ULONG *n0, int num);\n    int bn_mul_mont_fpu(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,\n                        const BN_ULONG *np, const BN_ULONG *n0, int num);\n    int bn_mul_mont_int(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,\n                        const BN_ULONG *np, const BN_ULONG *n0, int num);\n\n    if (!(num & 1) && num >= 6) {\n        if ((num & 15) == 0 && num <= 64 &&\n            (OPENSSL_sparcv9cap_P[1] & (CFR_MONTMUL | CFR_MONTSQR)) ==\n            (CFR_MONTMUL | CFR_MONTSQR)) {\n            typedef int (*bn_mul_mont_f) (BN_ULONG *rp, const BN_ULONG *ap,\n                                          const BN_ULONG *bp,\n                                          const BN_ULONG *np,\n                                          const BN_ULONG *n0);\n            int bn_mul_mont_t4_8(BN_ULONG *rp, const BN_ULONG *ap,\n                                 const BN_ULONG *bp, const BN_ULONG *np,\n                                 const BN_ULONG *n0);\n            int bn_mul_mont_t4_16(BN_ULONG *rp, const BN_ULONG *ap,\n                                  const BN_ULONG *bp, const BN_ULONG *np,\n                                  const BN_ULONG *n0);\n            int bn_mul_mont_t4_24(BN_ULONG *rp, const BN_ULONG *ap,\n                                  const BN_ULONG *bp, const BN_ULONG *np,\n                                  const BN_ULONG *n0);\n            int bn_mul_mont_t4_32(BN_ULONG *rp, const BN_ULONG *ap,\n                                  const BN_ULONG *bp, const BN_ULONG *np,\n                                  const BN_ULONG *n0);\n            static const bn_mul_mont_f funcs[4] = {\n                bn_mul_mont_t4_8, bn_mul_mont_t4_16,\n                bn_mul_mont_t4_24, bn_mul_mont_t4_32\n            };\n            bn_mul_mont_f worker = funcs[num / 16 - 1];\n\n            if ((*worker) (rp, ap, bp, np, n0))\n                return 1;\n            /* retry once and fall back */\n            if ((*worker) (rp, ap, bp, np, n0))\n                return 1;\n            return bn_mul_mont_vis3(rp, ap, bp, np, n0, num);\n        }\n        if ((OPENSSL_sparcv9cap_P[0] & SPARCV9_VIS3))\n            return bn_mul_mont_vis3(rp, ap, bp, np, n0, num);\n        else if (num >= 8 &&\n                 (OPENSSL_sparcv9cap_P[0] &\n                  (SPARCV9_PREFER_FPU | SPARCV9_VIS1)) ==\n                 (SPARCV9_PREFER_FPU | SPARCV9_VIS1))\n            return bn_mul_mont_fpu(rp, ap, bp, np, n0, num);\n    }\n    return bn_mul_mont_int(rp, ap, bp, np, n0, num);\n}\n\nunsigned long _sparcv9_rdtick(void);\nvoid _sparcv9_vis1_probe(void);\nunsigned long _sparcv9_vis1_instrument(void);\nvoid _sparcv9_vis2_probe(void);\nvoid _sparcv9_fmadd_probe(void);\nunsigned long _sparcv9_rdcfr(void);\nvoid _sparcv9_vis3_probe(void);\nunsigned long _sparcv9_random(void);\nsize_t _sparcv9_vis1_instrument_bus(unsigned int *, size_t);\nsize_t _sparcv9_vis1_instrument_bus2(unsigned int *, size_t, size_t);\n\nunsigned long OPENSSL_rdtsc(void)\n{\n    if (OPENSSL_sparcv9cap_P[0] & SPARCV9_TICK_PRIVILEGED)\n#if defined(__sun) && defined(__SVR4)\n        return gethrtime();\n#else\n        return 0;\n#endif\n    else\n        return _sparcv9_rdtick();\n}\n\nsize_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)\n{\n    if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==\n        SPARCV9_BLK)\n        return _sparcv9_vis1_instrument_bus(out, cnt);\n    else\n        return 0;\n}\n\nsize_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)\n{\n    if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==\n        SPARCV9_BLK)\n        return _sparcv9_vis1_instrument_bus2(out, cnt, max);\n    else\n        return 0;\n}\n\n#if 0 && defined(__sun) && defined(__SVR4)\n/*\n * This code path is disabled, because of incompatibility of libdevinfo.so.1\n * and libmalloc.so.1 (see below for details)\n */\n# include <malloc.h>\n# include <dlfcn.h>\n# include <libdevinfo.h>\n# include <sys/systeminfo.h>\n\ntypedef di_node_t(*di_init_t) (const char *, uint_t);\ntypedef void (*di_fini_t) (di_node_t);\ntypedef char *(*di_node_name_t) (di_node_t);\ntypedef int (*di_walk_node_t) (di_node_t, uint_t, di_node_name_t,\n                               int (*)(di_node_t, di_node_name_t));\n\n# define DLLINK(h,name) (name=(name##_t)dlsym((h),#name))\n\nstatic int walk_nodename(di_node_t node, di_node_name_t di_node_name)\n{\n    char *name = (*di_node_name) (node);\n\n    /* This is expected to catch all UltraSPARC flavors prior T1 */\n    if (!strcmp(name, \"SUNW,UltraSPARC\") ||\n        /* covers II,III,IV */\n        !strncmp(name, \"SUNW,UltraSPARC-I\", 17)) {\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_PREFER_FPU | SPARCV9_VIS1;\n\n        /* %tick is privileged only on UltraSPARC-I/II, but not IIe */\n        if (name[14] != '\\0' && name[17] != '\\0' && name[18] != '\\0')\n            OPENSSL_sparcv9cap_P[0] &= ~SPARCV9_TICK_PRIVILEGED;\n\n        return DI_WALK_TERMINATE;\n    }\n    /* This is expected to catch remaining UltraSPARCs, such as T1 */\n    else if (!strncmp(name, \"SUNW,UltraSPARC\", 15)) {\n        OPENSSL_sparcv9cap_P[0] &= ~SPARCV9_TICK_PRIVILEGED;\n\n        return DI_WALK_TERMINATE;\n    }\n\n    return DI_WALK_CONTINUE;\n}\n\nvoid OPENSSL_cpuid_setup(void)\n{\n    void *h;\n    char *e, si[256];\n    static int trigger = 0;\n\n    if (trigger)\n        return;\n    trigger = 1;\n\n    if ((e = getenv(\"OPENSSL_sparcv9cap\"))) {\n        OPENSSL_sparcv9cap_P[0] = strtoul(e, NULL, 0);\n        return;\n    }\n\n    if (sysinfo(SI_MACHINE, si, sizeof(si)) > 0) {\n        if (strcmp(si, \"sun4v\"))\n            /* FPU is preferred for all CPUs, but US-T1/2 */\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_PREFER_FPU;\n    }\n\n    if (sysinfo(SI_ISALIST, si, sizeof(si)) > 0) {\n        if (strstr(si, \"+vis\"))\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS1 | SPARCV9_BLK;\n        if (strstr(si, \"+vis2\")) {\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS2;\n            OPENSSL_sparcv9cap_P[0] &= ~SPARCV9_TICK_PRIVILEGED;\n            return;\n        }\n    }\n# ifdef M_KEEP\n    /*\n     * Solaris libdevinfo.so.1 is effectively incomatible with\n     * libmalloc.so.1. Specifically, if application is linked with\n     * -lmalloc, it crashes upon startup with SIGSEGV in\n     * free(3LIBMALLOC) called by di_fini. Prior call to\n     * mallopt(M_KEEP,0) somehow helps... But not always...\n     */\n    if ((h = dlopen(NULL, RTLD_LAZY))) {\n        union {\n            void *p;\n            int (*f) (int, int);\n        } sym;\n        if ((sym.p = dlsym(h, \"mallopt\")))\n            (*sym.f) (M_KEEP, 0);\n        dlclose(h);\n    }\n# endif\n    if ((h = dlopen(\"libdevinfo.so.1\", RTLD_LAZY)))\n        do {\n            di_init_t di_init;\n            di_fini_t di_fini;\n            di_walk_node_t di_walk_node;\n            di_node_name_t di_node_name;\n            di_node_t root_node;\n\n            if (!DLLINK(h, di_init))\n                break;\n            if (!DLLINK(h, di_fini))\n                break;\n            if (!DLLINK(h, di_walk_node))\n                break;\n            if (!DLLINK(h, di_node_name))\n                break;\n\n            if ((root_node = (*di_init) (\"/\", DINFOSUBTREE)) != DI_NODE_NIL) {\n                (*di_walk_node) (root_node, DI_WALK_SIBFIRST,\n                                 di_node_name, walk_nodename);\n                (*di_fini) (root_node);\n            }\n        } while (0);\n\n    if (h)\n        dlclose(h);\n}\n\n#else\n\nstatic sigjmp_buf common_jmp;\nstatic void common_handler(int sig)\n{\n    siglongjmp(common_jmp, sig);\n}\n\n#if defined(__sun) && defined(__SVR4)\n# if defined(__GNUC__) && __GNUC__>=2\nextern unsigned int getisax(unsigned int vec[], unsigned int sz) __attribute__ ((weak));\n# elif defined(__SUNPRO_C)\n#pragma weak getisax\nextern unsigned int getisax(unsigned int vec[], unsigned int sz);\n# else\nstatic unsigned int (*getisax) (unsigned int vec[], unsigned int sz) = NULL;\n# endif\n#endif\n\nvoid OPENSSL_cpuid_setup(void)\n{\n    char *e;\n    struct sigaction common_act, ill_oact, bus_oact;\n    sigset_t all_masked, oset;\n    static int trigger = 0;\n\n    if (trigger)\n        return;\n    trigger = 1;\n\n    if ((e = getenv(\"OPENSSL_sparcv9cap\"))) {\n        OPENSSL_sparcv9cap_P[0] = strtoul(e, NULL, 0);\n        if ((e = strchr(e, ':')))\n            OPENSSL_sparcv9cap_P[1] = strtoul(e + 1, NULL, 0);\n        return;\n    }\n\n#if defined(__sun) && defined(__SVR4)\n    if (getisax != NULL) {\n        unsigned int vec[1];\n\n        if (getisax (vec,1)) {\n            if (vec[0]&0x0020) OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS1;\n            if (vec[0]&0x0040) OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS2;\n            if (vec[0]&0x0080) OPENSSL_sparcv9cap_P[0] |= SPARCV9_BLK;\n            if (vec[0]&0x0100) OPENSSL_sparcv9cap_P[0] |= SPARCV9_FMADD;\n            if (vec[0]&0x0400) OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS3;\n\n            /* reconstruct %cfr copy */\n            OPENSSL_sparcv9cap_P[1] = (vec[0]>>17)&0x3ff;\n            OPENSSL_sparcv9cap_P[1] |= (OPENSSL_sparcv9cap_P[1]&CFR_MONTMUL)<<1;\n            if (vec[0]&0x20000000) OPENSSL_sparcv9cap_P[1] |= CFR_CRC32C;\n\n            /* Some heuristics */\n            /* all known VIS2-capable CPUs have unprivileged tick counter */\n            if (OPENSSL_sparcv9cap_P[0]&SPARCV9_VIS2)\n                OPENSSL_sparcv9cap_P[0] &= ~SPARCV9_TICK_PRIVILEGED;\n\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_PREFER_FPU;\n\n            /* detect UltraSPARC-Tx, see sparccpud.S for details... */\n            if ((OPENSSL_sparcv9cap_P[0]&SPARCV9_VIS1) &&\n                _sparcv9_vis1_instrument() >= 12)\n                OPENSSL_sparcv9cap_P[0] &= ~(SPARCV9_VIS1 | SPARCV9_PREFER_FPU);\n        }\n\n        if (sizeof(size_t) == 8)\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_64BIT_STACK;\n\n        return;\n    }\n#endif\n\n    /* Initial value, fits UltraSPARC-I&II... */\n    OPENSSL_sparcv9cap_P[0] = SPARCV9_PREFER_FPU | SPARCV9_TICK_PRIVILEGED;\n\n    sigfillset(&all_masked);\n    sigdelset(&all_masked, SIGILL);\n    sigdelset(&all_masked, SIGTRAP);\n# ifdef SIGEMT\n    sigdelset(&all_masked, SIGEMT);\n# endif\n    sigdelset(&all_masked, SIGFPE);\n    sigdelset(&all_masked, SIGBUS);\n    sigdelset(&all_masked, SIGSEGV);\n    sigprocmask(SIG_SETMASK, &all_masked, &oset);\n\n    memset(&common_act, 0, sizeof(common_act));\n    common_act.sa_handler = common_handler;\n    common_act.sa_mask = all_masked;\n\n    sigaction(SIGILL, &common_act, &ill_oact);\n    sigaction(SIGBUS, &common_act, &bus_oact); /* T1 fails 16-bit ldda [on\n                                                * Linux] */\n\n    if (sigsetjmp(common_jmp, 1) == 0) {\n        _sparcv9_rdtick();\n        OPENSSL_sparcv9cap_P[0] &= ~SPARCV9_TICK_PRIVILEGED;\n    }\n\n    if (sigsetjmp(common_jmp, 1) == 0) {\n        _sparcv9_vis1_probe();\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS1 | SPARCV9_BLK;\n        /* detect UltraSPARC-Tx, see sparccpud.S for details... */\n        if (_sparcv9_vis1_instrument() >= 12)\n            OPENSSL_sparcv9cap_P[0] &= ~(SPARCV9_VIS1 | SPARCV9_PREFER_FPU);\n        else {\n            _sparcv9_vis2_probe();\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS2;\n        }\n    }\n\n    if (sigsetjmp(common_jmp, 1) == 0) {\n        _sparcv9_fmadd_probe();\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_FMADD;\n    }\n\n    /*\n     * VIS3 flag is tested independently from VIS1, unlike VIS2 that is,\n     * because VIS3 defines even integer instructions.\n     */\n    if (sigsetjmp(common_jmp, 1) == 0) {\n        _sparcv9_vis3_probe();\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_VIS3;\n    }\n# if 0                          /* was planned at some point but never\n                                 * implemented in hardware */\n    if (sigsetjmp(common_jmp, 1) == 0) {\n        (void)_sparcv9_random();\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_RANDOM;\n    }\n# endif\n\n    /*\n     * In wait for better solution _sparcv9_rdcfr is masked by\n     * VIS3 flag, because it goes to uninterruptable endless\n     * loop on UltraSPARC II running Solaris. Things might be\n     * different on Linux...\n     */\n    if ((OPENSSL_sparcv9cap_P[0] & SPARCV9_VIS3) &&\n        sigsetjmp(common_jmp, 1) == 0) {\n        OPENSSL_sparcv9cap_P[1] = (unsigned int)_sparcv9_rdcfr();\n    }\n\n    sigaction(SIGBUS, &bus_oact, NULL);\n    sigaction(SIGILL, &ill_oact, NULL);\n\n    sigprocmask(SIG_SETMASK, &oset, NULL);\n\n    if (sizeof(size_t) == 8)\n        OPENSSL_sparcv9cap_P[0] |= SPARCV9_64BIT_STACK;\n# ifdef __linux\n    else {\n        int ret = syscall(340);\n\n        if (ret >= 0 && ret & 1)\n            OPENSSL_sparcv9cap_P[0] |= SPARCV9_64BIT_STACK;\n    }\n# endif\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/crypto/dso/dso_dlfcn.c": "/* dso_dlfcn.c */\n/*\n * Written by Geoff Thorpe (geoff@geoffthorpe.net) for the OpenSSL project\n * 2000.\n */\n/* ====================================================================\n * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    licensing@OpenSSL.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n/*\n * We need to do this early, because stdio.h includes the header files that\n * handle _GNU_SOURCE and other similar macros.  Defining it later is simply\n * too late, because those headers are protected from re- inclusion.\n */\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE            /* make sure dladdr is declared */\n#endif\n\n#include <stdio.h>\n#include \"cryptlib.h\"\n#include <openssl/dso.h>\n\n#ifndef DSO_DLFCN\nDSO_METHOD *DSO_METHOD_dlfcn(void)\n{\n    return NULL;\n}\n#else\n\n# ifdef HAVE_DLFCN_H\n#  ifdef __osf__\n#   define __EXTENSIONS__\n#  endif\n#  include <dlfcn.h>\n#  define HAVE_DLINFO 1\n#  if defined(_AIX) || defined(__CYGWIN__) || \\\n     defined(__SCO_VERSION__) || defined(_SCO_ELF) || \\\n     (defined(__osf__) && !defined(RTLD_NEXT))     || \\\n     (defined(__OpenBSD__) && !defined(RTLD_SELF)) || \\\n        defined(__ANDROID__)\n#   undef HAVE_DLINFO\n#  endif\n# endif\n\n/* Part of the hack in \"dlfcn_load\" ... */\n# define DSO_MAX_TRANSLATED_SIZE 256\n\nstatic int dlfcn_load(DSO *dso);\nstatic int dlfcn_unload(DSO *dso);\nstatic void *dlfcn_bind_var(DSO *dso, const char *symname);\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname);\n# if 0\nstatic int dlfcn_unbind(DSO *dso, char *symname, void *symptr);\nstatic int dlfcn_init(DSO *dso);\nstatic int dlfcn_finish(DSO *dso);\nstatic long dlfcn_ctrl(DSO *dso, int cmd, long larg, void *parg);\n# endif\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename);\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2);\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz);\nstatic void *dlfcn_globallookup(const char *name);\n\nstatic DSO_METHOD dso_meth_dlfcn = {\n    \"OpenSSL 'dlfcn' shared library method\",\n    dlfcn_load,\n    dlfcn_unload,\n    dlfcn_bind_var,\n    dlfcn_bind_func,\n/* For now, \"unbind\" doesn't exist */\n# if 0\n    NULL,                       /* unbind_var */\n    NULL,                       /* unbind_func */\n# endif\n    NULL,                       /* ctrl */\n    dlfcn_name_converter,\n    dlfcn_merger,\n    NULL,                       /* init */\n    NULL,                       /* finish */\n    dlfcn_pathbyaddr,\n    dlfcn_globallookup\n};\n\nDSO_METHOD *DSO_METHOD_dlfcn(void)\n{\n    return (&dso_meth_dlfcn);\n}\n\n/*\n * Prior to using the dlopen() function, we should decide on the flag we\n * send. There's a few different ways of doing this and it's a messy\n * venn-diagram to match up which platforms support what. So as we don't have\n * autoconf yet, I'm implementing a hack that could be hacked further\n * relatively easily to deal with cases as we find them. Initially this is to\n * cope with OpenBSD.\n */\n# if defined(__OpenBSD__) || defined(__NetBSD__)\n#  ifdef DL_LAZY\n#   define DLOPEN_FLAG DL_LAZY\n#  else\n#   ifdef RTLD_NOW\n#    define DLOPEN_FLAG RTLD_NOW\n#   else\n#    define DLOPEN_FLAG 0\n#   endif\n#  endif\n# else\n#  ifdef OPENSSL_SYS_SUNOS\n#   define DLOPEN_FLAG 1\n#  else\n#   define DLOPEN_FLAG RTLD_NOW /* Hope this works everywhere else */\n#  endif\n# endif\n\n/*\n * For this DSO_METHOD, our meth_data STACK will contain; (i) the handle\n * (void*) returned from dlopen().\n */\n\nstatic int dlfcn_load(DSO *dso)\n{\n    void *ptr = NULL;\n    /* See applicable comments in dso_dl.c */\n    char *filename = DSO_convert_filename(dso, NULL);\n    int flags = DLOPEN_FLAG;\n\n    if (filename == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);\n        goto err;\n    }\n# ifdef RTLD_GLOBAL\n    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)\n        flags |= RTLD_GLOBAL;\n# endif\n    ptr = dlopen(filename, flags);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);\n        ERR_add_error_data(4, \"filename(\", filename, \"): \", dlerror());\n        goto err;\n    }\n    if (!sk_void_push(dso->meth_data, (char *)ptr)) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);\n        goto err;\n    }\n    /* Success */\n    dso->loaded_filename = filename;\n    return (1);\n err:\n    /* Cleanup! */\n    if (filename != NULL)\n        OPENSSL_free(filename);\n    if (ptr != NULL)\n        dlclose(ptr);\n    return (0);\n}\n\nstatic int dlfcn_unload(DSO *dso)\n{\n    void *ptr;\n    if (dso == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);\n        return (0);\n    }\n    if (sk_void_num(dso->meth_data) < 1)\n        return (1);\n    ptr = sk_void_pop(dso->meth_data);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);\n        /*\n         * Should push the value back onto the stack in case of a retry.\n         */\n        sk_void_push(dso->meth_data, ptr);\n        return (0);\n    }\n    /* For now I'm not aware of any errors associated with dlclose() */\n    dlclose(ptr);\n    return (1);\n}\n\nstatic void *dlfcn_bind_var(DSO *dso, const char *symname)\n{\n    void *ptr, *sym;\n\n    if ((dso == NULL) || (symname == NULL)) {\n        DSOerr(DSO_F_DLFCN_BIND_VAR, ERR_R_PASSED_NULL_PARAMETER);\n        return (NULL);\n    }\n    if (sk_void_num(dso->meth_data) < 1) {\n        DSOerr(DSO_F_DLFCN_BIND_VAR, DSO_R_STACK_ERROR);\n        return (NULL);\n    }\n    ptr = sk_void_value(dso->meth_data, sk_void_num(dso->meth_data) - 1);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_VAR, DSO_R_NULL_HANDLE);\n        return (NULL);\n    }\n    sym = dlsym(ptr, symname);\n    if (sym == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_VAR, DSO_R_SYM_FAILURE);\n        ERR_add_error_data(4, \"symname(\", symname, \"): \", dlerror());\n        return (NULL);\n    }\n    return (sym);\n}\n\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname)\n{\n    void *ptr;\n    union {\n        DSO_FUNC_TYPE sym;\n        void *dlret;\n    } u;\n\n    if ((dso == NULL) || (symname == NULL)) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, ERR_R_PASSED_NULL_PARAMETER);\n        return (NULL);\n    }\n    if (sk_void_num(dso->meth_data) < 1) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_STACK_ERROR);\n        return (NULL);\n    }\n    ptr = sk_void_value(dso->meth_data, sk_void_num(dso->meth_data) - 1);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_NULL_HANDLE);\n        return (NULL);\n    }\n    u.dlret = dlsym(ptr, symname);\n    if (u.dlret == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_SYM_FAILURE);\n        ERR_add_error_data(4, \"symname(\", symname, \"): \", dlerror());\n        return (NULL);\n    }\n    return u.sym;\n}\n\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2)\n{\n    char *merged;\n\n    if (!filespec1 && !filespec2) {\n        DSOerr(DSO_F_DLFCN_MERGER, ERR_R_PASSED_NULL_PARAMETER);\n        return (NULL);\n    }\n    /*\n     * If the first file specification is a rooted path, it rules. same goes\n     * if the second file specification is missing.\n     */\n    if (!filespec2 || (filespec1 != NULL && filespec1[0] == '/')) {\n        merged = OPENSSL_malloc(strlen(filespec1) + 1);\n        if (!merged) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return (NULL);\n        }\n        strcpy(merged, filespec1);\n    }\n    /*\n     * If the first file specification is missing, the second one rules.\n     */\n    else if (!filespec1) {\n        merged = OPENSSL_malloc(strlen(filespec2) + 1);\n        if (!merged) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return (NULL);\n        }\n        strcpy(merged, filespec2);\n    } else {\n        /*\n         * This part isn't as trivial as it looks.  It assumes that the\n         * second file specification really is a directory, and makes no\n         * checks whatsoever.  Therefore, the result becomes the\n         * concatenation of filespec2 followed by a slash followed by\n         * filespec1.\n         */\n        int spec2len, len;\n\n        spec2len = strlen(filespec2);\n        len = spec2len + strlen(filespec1);\n\n        if (spec2len && filespec2[spec2len - 1] == '/') {\n            spec2len--;\n            len--;\n        }\n        merged = OPENSSL_malloc(len + 2);\n        if (!merged) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return (NULL);\n        }\n        strcpy(merged, filespec2);\n        merged[spec2len] = '/';\n        strcpy(&merged[spec2len + 1], filespec1);\n    }\n    return (merged);\n}\n\n# ifdef OPENSSL_SYS_MACOSX\n#  define DSO_ext \".dylib\"\n#  define DSO_extlen 6\n# else\n#  define DSO_ext \".so\"\n#  define DSO_extlen 3\n# endif\n\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename)\n{\n    char *translated;\n    int len, rsize, transform;\n\n    len = strlen(filename);\n    rsize = len + 1;\n    transform = (strstr(filename, \"/\") == NULL);\n    if (transform) {\n        /* We will convert this to \"%s.so\" or \"lib%s.so\" etc */\n        rsize += DSO_extlen;    /* The length of \".so\" */\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            rsize += 3;         /* The length of \"lib\" */\n    }\n    translated = OPENSSL_malloc(rsize);\n    if (translated == NULL) {\n        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);\n        return (NULL);\n    }\n    if (transform) {\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            sprintf(translated, \"lib%s\" DSO_ext, filename);\n        else\n            sprintf(translated, \"%s\" DSO_ext, filename);\n    } else\n        sprintf(translated, \"%s\", filename);\n    return (translated);\n}\n\n# ifdef __sgi\n/*-\nThis is a quote from IRIX manual for dladdr(3c):\n\n     <dlfcn.h> does not contain a prototype for dladdr or definition of\n     Dl_info.  The #include <dlfcn.h>  in the SYNOPSIS line is traditional,\n     but contains no dladdr prototype and no IRIX library contains an\n     implementation.  Write your own declaration based on the code below.\n\n     The following code is dependent on internal interfaces that are not\n     part of the IRIX compatibility guarantee; however, there is no future\n     intention to change this interface, so on a practical level, the code\n     below is safe to use on IRIX.\n*/\n#  include <rld_interface.h>\n#  ifndef _RLD_INTERFACE_DLFCN_H_DLADDR\n#   define _RLD_INTERFACE_DLFCN_H_DLADDR\ntypedef struct Dl_info {\n    const char *dli_fname;\n    void *dli_fbase;\n    const char *dli_sname;\n    void *dli_saddr;\n    int dli_version;\n    int dli_reserved1;\n    long dli_reserved[4];\n} Dl_info;\n#  else\ntypedef struct Dl_info Dl_info;\n#  endif\n#  define _RLD_DLADDR             14\n\nstatic int dladdr(void *address, Dl_info *dl)\n{\n    void *v;\n    v = _rld_new_interface(_RLD_DLADDR, address, dl);\n    return (int)v;\n}\n# endif                         /* __sgi */\n\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz)\n{\n# ifdef HAVE_DLINFO\n    Dl_info dli;\n    int len;\n\n    if (addr == NULL) {\n        union {\n            int (*f) (void *, char *, int);\n            void *p;\n        } t = {\n            dlfcn_pathbyaddr\n        };\n        addr = t.p;\n    }\n\n    if (dladdr(addr, &dli)) {\n        len = (int)strlen(dli.dli_fname);\n        if (sz <= 0)\n            return len + 1;\n        if (len >= sz)\n            len = sz - 1;\n        memcpy(path, dli.dli_fname, len);\n        path[len++] = 0;\n        return len;\n    }\n\n    ERR_add_error_data(2, \"dlfcn_pathbyaddr(): \", dlerror());\n# endif\n    return -1;\n}\n\nstatic void *dlfcn_globallookup(const char *name)\n{\n    void *ret = NULL, *handle = dlopen(NULL, RTLD_LAZY);\n\n    if (handle) {\n        ret = dlsym(handle, name);\n        dlclose(handle);\n    }\n\n    return ret;\n}\n#endif                          /* DSO_DLFCN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/crypto/dso/dso.h": "/* dso.h */\n/*\n * Written by Geoff Thorpe (geoff@geoffthorpe.net) for the OpenSSL project\n * 2000.\n */\n/* ====================================================================\n * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    licensing@OpenSSL.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n#ifndef HEADER_DSO_H\n# define HEADER_DSO_H\n\n# include <openssl/crypto.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* These values are used as commands to DSO_ctrl() */\n# define DSO_CTRL_GET_FLAGS      1\n# define DSO_CTRL_SET_FLAGS      2\n# define DSO_CTRL_OR_FLAGS       3\n\n/*\n * By default, DSO_load() will translate the provided filename into a form\n * typical for the platform (more specifically the DSO_METHOD) using the\n * dso_name_converter function of the method. Eg. win32 will transform \"blah\"\n * into \"blah.dll\", and dlfcn will transform it into \"libblah.so\". The\n * behaviour can be overriden by setting the name_converter callback in the\n * DSO object (using DSO_set_name_converter()). This callback could even\n * utilise the DSO_METHOD's converter too if it only wants to override\n * behaviour for one or two possible DSO methods. However, the following flag\n * can be set in a DSO to prevent *any* native name-translation at all - eg.\n * if the caller has prompted the user for a path to a driver library so the\n * filename should be interpreted as-is.\n */\n# define DSO_FLAG_NO_NAME_TRANSLATION            0x01\n/*\n * An extra flag to give if only the extension should be added as\n * translation.  This is obviously only of importance on Unix and other\n * operating systems where the translation also may prefix the name with\n * something, like 'lib', and ignored everywhere else. This flag is also\n * ignored if DSO_FLAG_NO_NAME_TRANSLATION is used at the same time.\n */\n# define DSO_FLAG_NAME_TRANSLATION_EXT_ONLY      0x02\n\n/*\n * The following flag controls the translation of symbol names to upper case.\n * This is currently only being implemented for OpenVMS.\n */\n# define DSO_FLAG_UPCASE_SYMBOL                  0x10\n\n/*\n * This flag loads the library with public symbols. Meaning: The exported\n * symbols of this library are public to all libraries loaded after this\n * library. At the moment only implemented in unix.\n */\n# define DSO_FLAG_GLOBAL_SYMBOLS                 0x20\n\ntypedef void (*DSO_FUNC_TYPE) (void);\n\ntypedef struct dso_st DSO;\n\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that transform filenames. They are passed a DSO structure\n * pointer (or NULL if they are to be used independantly of a DSO object) and\n * a filename to transform. They should either return NULL (if there is an\n * error condition) or a newly allocated string containing the transformed\n * form that the caller will need to free with OPENSSL_free() when done.\n */\ntypedef char *(*DSO_NAME_CONVERTER_FUNC)(DSO *, const char *);\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that merge two file specifications. They are passed a DSO\n * structure pointer (or NULL if they are to be used independantly of a DSO\n * object) and two file specifications to merge. They should either return\n * NULL (if there is an error condition) or a newly allocated string\n * containing the result of merging that the caller will need to free with\n * OPENSSL_free() when done. Here, merging means that bits and pieces are\n * taken from each of the file specifications and added together in whatever\n * fashion that is sensible for the DSO method in question.  The only rule\n * that really applies is that if the two specification contain pieces of the\n * same type, the copy from the first string takes priority.  One could see\n * it as the first specification is the one given by the user and the second\n * being a bunch of defaults to add on if they're missing in the first.\n */\ntypedef char *(*DSO_MERGER_FUNC)(DSO *, const char *, const char *);\n\ntypedef struct dso_meth_st {\n    const char *name;\n    /*\n     * Loads a shared library, NB: new DSO_METHODs must ensure that a\n     * successful load populates the loaded_filename field, and likewise a\n     * successful unload OPENSSL_frees and NULLs it out.\n     */\n    int (*dso_load) (DSO *dso);\n    /* Unloads a shared library */\n    int (*dso_unload) (DSO *dso);\n    /* Binds a variable */\n    void *(*dso_bind_var) (DSO *dso, const char *symname);\n    /*\n     * Binds a function - assumes a return type of DSO_FUNC_TYPE. This should\n     * be cast to the real function prototype by the caller. Platforms that\n     * don't have compatible representations for different prototypes (this\n     * is possible within ANSI C) are highly unlikely to have shared\n     * libraries at all, let alone a DSO_METHOD implemented for them.\n     */\n    DSO_FUNC_TYPE (*dso_bind_func) (DSO *dso, const char *symname);\n/* I don't think this would actually be used in any circumstances. */\n# if 0\n    /* Unbinds a variable */\n    int (*dso_unbind_var) (DSO *dso, char *symname, void *symptr);\n    /* Unbinds a function */\n    int (*dso_unbind_func) (DSO *dso, char *symname, DSO_FUNC_TYPE symptr);\n# endif\n    /*\n     * The generic (yuck) \"ctrl()\" function. NB: Negative return values\n     * (rather than zero) indicate errors.\n     */\n    long (*dso_ctrl) (DSO *dso, int cmd, long larg, void *parg);\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_NAME_CONVERTER_FUNC dso_name_converter;\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_MERGER_FUNC dso_merger;\n    /* [De]Initialisation handlers. */\n    int (*init) (DSO *dso);\n    int (*finish) (DSO *dso);\n    /* Return pathname of the module containing location */\n    int (*pathbyaddr) (void *addr, char *path, int sz);\n    /* Perform global symbol lookup, i.e. among *all* modules */\n    void *(*globallookup) (const char *symname);\n} DSO_METHOD;\n\n/**********************************************************************/\n/* The low-level handle type used to refer to a loaded shared library */\n\nstruct dso_st {\n    DSO_METHOD *meth;\n    /*\n     * Standard dlopen uses a (void *). Win32 uses a HANDLE. VMS doesn't use\n     * anything but will need to cache the filename for use in the dso_bind\n     * handler. All in all, let each method control its own destiny.\n     * \"Handles\" and such go in a STACK.\n     */\n    STACK_OF(void) *meth_data;\n    int references;\n    int flags;\n    /*\n     * For use by applications etc ... use this for your bits'n'pieces, don't\n     * touch meth_data!\n     */\n    CRYPTO_EX_DATA ex_data;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_name_converter. NB: This\n     * should normally set using DSO_set_name_converter().\n     */\n    DSO_NAME_CONVERTER_FUNC name_converter;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_merger. NB: This should\n     * normally set using DSO_set_merger().\n     */\n    DSO_MERGER_FUNC merger;\n    /*\n     * This is populated with (a copy of) the platform-independant filename\n     * used for this DSO.\n     */\n    char *filename;\n    /*\n     * This is populated with (a copy of) the translated filename by which\n     * the DSO was actually loaded. It is NULL iff the DSO is not currently\n     * loaded. NB: This is here because the filename translation process may\n     * involve a callback being invoked more than once not only to convert to\n     * a platform-specific form, but also to try different filenames in the\n     * process of trying to perform a load. As such, this variable can be\n     * used to indicate (a) whether this DSO structure corresponds to a\n     * loaded library or not, and (b) the filename with which it was actually\n     * loaded.\n     */\n    char *loaded_filename;\n};\n\nDSO *DSO_new(void);\nDSO *DSO_new_method(DSO_METHOD *method);\nint DSO_free(DSO *dso);\nint DSO_flags(DSO *dso);\nint DSO_up_ref(DSO *dso);\nlong DSO_ctrl(DSO *dso, int cmd, long larg, void *parg);\n\n/*\n * This function sets the DSO's name_converter callback. If it is non-NULL,\n * then it will be used instead of the associated DSO_METHOD's function. If\n * oldcb is non-NULL then it is set to the function pointer value being\n * replaced. Return value is non-zero for success.\n */\nint DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,\n                           DSO_NAME_CONVERTER_FUNC *oldcb);\n/*\n * These functions can be used to get/set the platform-independant filename\n * used for a DSO. NB: set will fail if the DSO is already loaded.\n */\nconst char *DSO_get_filename(DSO *dso);\nint DSO_set_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's name_converter callback to translate a\n * filename, or if the callback isn't set it will instead use the DSO_METHOD's\n * converter. If \"filename\" is NULL, the \"filename\" in the DSO itself will be\n * used. If the DSO_FLAG_NO_NAME_TRANSLATION flag is set, then the filename is\n * simply duplicated. NB: This function is usually called from within a\n * DSO_METHOD during the processing of a DSO_load() call, and is exposed so\n * that caller-created DSO_METHODs can do the same thing. A non-NULL return\n * value will need to be OPENSSL_free()'d.\n */\nchar *DSO_convert_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's merger callback to merge two file\n * specifications, or if the callback isn't set it will instead use the\n * DSO_METHOD's merger.  A non-NULL return value will need to be\n * OPENSSL_free()'d.\n */\nchar *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2);\n/*\n * If the DSO is currently loaded, this returns the filename that it was\n * loaded under, otherwise it returns NULL. So it is also useful as a test as\n * to whether the DSO is currently loaded. NB: This will not necessarily\n * return the same value as DSO_convert_filename(dso, dso->filename), because\n * the DSO_METHOD's load function may have tried a variety of filenames (with\n * and/or without the aid of the converters) before settling on the one it\n * actually loaded.\n */\nconst char *DSO_get_loaded_filename(DSO *dso);\n\nvoid DSO_set_default_method(DSO_METHOD *meth);\nDSO_METHOD *DSO_get_default_method(void);\nDSO_METHOD *DSO_get_method(DSO *dso);\nDSO_METHOD *DSO_set_method(DSO *dso, DSO_METHOD *meth);\n\n/*\n * The all-singing all-dancing load function, you normally pass NULL for the\n * first and third parameters. Use DSO_up and DSO_free for subsequent\n * reference count handling. Any flags passed in will be set in the\n * constructed DSO after its init() function but before the load operation.\n * If 'dso' is non-NULL, 'flags' is ignored.\n */\nDSO *DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags);\n\n/* This function binds to a variable inside a shared library. */\nvoid *DSO_bind_var(DSO *dso, const char *symname);\n\n/* This function binds to a function inside a shared library. */\nDSO_FUNC_TYPE DSO_bind_func(DSO *dso, const char *symname);\n\n/*\n * This method is the default, but will beg, borrow, or steal whatever method\n * should be the default on any particular platform (including\n * DSO_METH_null() if necessary).\n */\nDSO_METHOD *DSO_METHOD_openssl(void);\n\n/*\n * This method is defined for all platforms - if a platform has no DSO\n * support then this will be the only method!\n */\nDSO_METHOD *DSO_METHOD_null(void);\n\n/*\n * If DSO_DLFCN is defined, the standard dlfcn.h-style functions (dlopen,\n * dlclose, dlsym, etc) will be used and incorporated into this method. If\n * not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dlfcn(void);\n\n/*\n * If DSO_DL is defined, the standard dl.h-style functions (shl_load,\n * shl_unload, shl_findsym, etc) will be used and incorporated into this\n * method. If not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dl(void);\n\n/* If WIN32 is defined, use DLLs. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_win32(void);\n\n/* If VMS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_vms(void);\n\n/*\n * This function writes null-terminated pathname of DSO module containing\n * 'addr' into 'sz' large caller-provided 'path' and returns the number of\n * characters [including trailing zero] written to it. If 'sz' is 0 or\n * negative, 'path' is ignored and required amount of charachers [including\n * trailing zero] to accomodate pathname is returned. If 'addr' is NULL, then\n * pathname of cryptolib itself is returned. Negative or zero return value\n * denotes error.\n */\nint DSO_pathbyaddr(void *addr, char *path, int sz);\n\n/*\n * This function should be used with caution! It looks up symbols in *all*\n * loaded modules and if module gets unloaded by somebody else attempt to\n * dereference the pointer is doomed to have fatal consequences. Primary\n * usage for this function is to probe *core* system functionality, e.g.\n * check if getnameinfo(3) is available at run-time without bothering about\n * OS-specific details such as libc.so.versioning or where does it actually\n * reside: in libc itself or libsocket.\n */\nvoid *DSO_global_lookup(const char *name);\n\n/* If BeOS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_beos(void);\n\n/* BEGIN ERROR CODES */\n/*\n * The following lines are auto generated by the script mkerr.pl. Any changes\n * made after this point may be overwritten when the script is next run.\n */\nvoid ERR_load_DSO_strings(void);\n\n/* Error codes for the DSO functions. */\n\n/* Function codes. */\n# define DSO_F_BEOS_BIND_FUNC                             144\n# define DSO_F_BEOS_BIND_VAR                              145\n# define DSO_F_BEOS_LOAD                                  146\n# define DSO_F_BEOS_NAME_CONVERTER                        147\n# define DSO_F_BEOS_UNLOAD                                148\n# define DSO_F_DLFCN_BIND_FUNC                            100\n# define DSO_F_DLFCN_BIND_VAR                             101\n# define DSO_F_DLFCN_LOAD                                 102\n# define DSO_F_DLFCN_MERGER                               130\n# define DSO_F_DLFCN_NAME_CONVERTER                       123\n# define DSO_F_DLFCN_UNLOAD                               103\n# define DSO_F_DL_BIND_FUNC                               104\n# define DSO_F_DL_BIND_VAR                                105\n# define DSO_F_DL_LOAD                                    106\n# define DSO_F_DL_MERGER                                  131\n# define DSO_F_DL_NAME_CONVERTER                          124\n# define DSO_F_DL_UNLOAD                                  107\n# define DSO_F_DSO_BIND_FUNC                              108\n# define DSO_F_DSO_BIND_VAR                               109\n# define DSO_F_DSO_CONVERT_FILENAME                       126\n# define DSO_F_DSO_CTRL                                   110\n# define DSO_F_DSO_FREE                                   111\n# define DSO_F_DSO_GET_FILENAME                           127\n# define DSO_F_DSO_GET_LOADED_FILENAME                    128\n# define DSO_F_DSO_GLOBAL_LOOKUP                          139\n# define DSO_F_DSO_LOAD                                   112\n# define DSO_F_DSO_MERGE                                  132\n# define DSO_F_DSO_NEW_METHOD                             113\n# define DSO_F_DSO_PATHBYADDR                             140\n# define DSO_F_DSO_SET_FILENAME                           129\n# define DSO_F_DSO_SET_NAME_CONVERTER                     122\n# define DSO_F_DSO_UP_REF                                 114\n# define DSO_F_GLOBAL_LOOKUP_FUNC                         138\n# define DSO_F_PATHBYADDR                                 137\n# define DSO_F_VMS_BIND_SYM                               115\n# define DSO_F_VMS_LOAD                                   116\n# define DSO_F_VMS_MERGER                                 133\n# define DSO_F_VMS_UNLOAD                                 117\n# define DSO_F_WIN32_BIND_FUNC                            118\n# define DSO_F_WIN32_BIND_VAR                             119\n# define DSO_F_WIN32_GLOBALLOOKUP                         142\n# define DSO_F_WIN32_GLOBALLOOKUP_FUNC                    143\n# define DSO_F_WIN32_JOINER                               135\n# define DSO_F_WIN32_LOAD                                 120\n# define DSO_F_WIN32_MERGER                               134\n# define DSO_F_WIN32_NAME_CONVERTER                       125\n# define DSO_F_WIN32_PATHBYADDR                           141\n# define DSO_F_WIN32_SPLITTER                             136\n# define DSO_F_WIN32_UNLOAD                               121\n\n/* Reason codes. */\n# define DSO_R_CTRL_FAILED                                100\n# define DSO_R_DSO_ALREADY_LOADED                         110\n# define DSO_R_EMPTY_FILE_STRUCTURE                       113\n# define DSO_R_FAILURE                                    114\n# define DSO_R_FILENAME_TOO_BIG                           101\n# define DSO_R_FINISH_FAILED                              102\n# define DSO_R_INCORRECT_FILE_SYNTAX                      115\n# define DSO_R_LOAD_FAILED                                103\n# define DSO_R_NAME_TRANSLATION_FAILED                    109\n# define DSO_R_NO_FILENAME                                111\n# define DSO_R_NO_FILE_SPECIFICATION                      116\n# define DSO_R_NULL_HANDLE                                104\n# define DSO_R_SET_FILENAME_FAILED                        112\n# define DSO_R_STACK_ERROR                                105\n# define DSO_R_SYM_FAILURE                                106\n# define DSO_R_UNLOAD_FAILED                              107\n# define DSO_R_UNSUPPORTED                                108\n\n#ifdef  __cplusplus\n}\n#endif\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/v8/src/third_party/vtune/jitprofiling.cc": "/*\n  This file is provided under a dual BSD/GPLv2 license.  When using or\n  redistributing this file, you may do so under either license.\n\n  GPL LICENSE SUMMARY\n\n  Copyright(c) 2005-2012 Intel Corporation. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of version 2 of the GNU General Public License as\n  published by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.\n  The full GNU General Public License is included in this distribution\n  in the file called LICENSE.GPL.\n\n  Contact Information:\n  http://software.intel.com/en-us/articles/intel-vtune-amplifier-xe/\n\n  BSD LICENSE\n\n  Copyright(c) 2005-2012 Intel Corporation. All rights reserved.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n    * Neither the name of Intel Corporation nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n#include \"ittnotify_config.h\"\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\n#pragma optimize(\"\", off)\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <pthread.h>\n#include <dlfcn.h>\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <malloc.h>\n#include <stdlib.h>\n\n#include \"jitprofiling.h\"\n\nstatic const char rcsid[] = \"\\n@(#) $Revision: 234474 $\\n\";\n\n#define DLL_ENVIRONMENT_VAR\t\t\"VS_PROFILER\"\n\n#ifndef NEW_DLL_ENVIRONMENT_VAR\n#if ITT_ARCH==ITT_ARCH_IA32\n#define NEW_DLL_ENVIRONMENT_VAR\t\t\"INTEL_JIT_PROFILER32\"\n#else\n#define NEW_DLL_ENVIRONMENT_VAR\t\t\"INTEL_JIT_PROFILER64\"\n#endif\n#endif /* NEW_DLL_ENVIRONMENT_VAR */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define DEFAULT_DLLNAME\t\t\t\"JitPI.dll\"\nHINSTANCE m_libHandle = NULL;\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#define DEFAULT_DLLNAME\t\t\t\"libJitPI.so\"\nvoid* m_libHandle = NULL;\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n/* default location of JIT profiling agent on Android */\n#define ANDROID_JIT_AGENT_PATH  \"/data/intel/libittnotify.so\"\n\n/* the function pointers */\ntypedef unsigned int(*TPInitialize)(void);\nstatic TPInitialize FUNC_Initialize=NULL;\n\ntypedef unsigned int(*TPNotify)(unsigned int, void*);\nstatic TPNotify FUNC_NotifyEvent=NULL;\n\nstatic iJIT_IsProfilingActiveFlags executionMode = iJIT_NOTHING_RUNNING;\n\n/* end collector dll part. */\n\n/* loadiJIT_Funcs() : this function is called just in the beginning and is responsible\n** to load the functions from BistroJavaCollector.dll\n** result:\n**\t\ton success: the functions loads,    iJIT_DLL_is_missing=0, return value = 1.\n**\t\ton failure: the functions are NULL, iJIT_DLL_is_missing=1, return value = 0.\n*/\nstatic int loadiJIT_Funcs(void);\n\n/* global representing whether the BistroJavaCollector can't be loaded */\nstatic int iJIT_DLL_is_missing = 0;\n\n/* Virtual stack - the struct is used as a virtual stack for each thread.\n** Every thread initializes with a stack of size INIT_TOP_STACK.\n** Every method entry decreases from the current stack point,\n** and when a thread stack reaches its top of stack (return from the global function),\n** the top of stack and the current stack increase. Notice that when returning from a function\n** the stack pointer is the address of the function return.\n*/\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\nstatic DWORD threadLocalStorageHandle = 0;\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\nstatic pthread_key_t threadLocalStorageHandle = (pthread_key_t)0;\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#define INIT_TOP_Stack 10000\n\ntypedef struct\n{\n    unsigned int TopStack;\n    unsigned int CurrentStack;\n} ThreadStack, *pThreadStack;\n\n/* end of virtual stack. */\n\n/*\n** The function for reporting virtual-machine related events to VTune.\n** Note: when reporting iJVM_EVENT_TYPE_ENTER_NIDS, there is no need to fill in the stack_id\n** field in the iJIT_Method_NIDS structure, as VTune fills it.\n**\n** The return value in iJVM_EVENT_TYPE_ENTER_NIDS && iJVM_EVENT_TYPE_LEAVE_NIDS events\n** will be 0 in case of failure.\n** in iJVM_EVENT_TYPE_METHOD_LOAD_FINISHED event it will be -1 if EventSpecificData == 0\n** otherwise it will be 0.\n*/\n\nITT_EXTERN_C int JITAPI iJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventSpecificData)\n{\n    int ReturnValue;\n\n    /*******************************************************************************\n    ** This section is for debugging outside of VTune.\n    ** It creates the environment variables that indicates call graph mode.\n    ** If running outside of VTune remove the remark.\n    **\n\n      static int firstTime = 1;\n      char DoCallGraph[12] = \"DoCallGraph\";\n      if (firstTime)\n      {\n      firstTime = 0;\n      SetEnvironmentVariable( \"BISTRO_COLLECTORS_DO_CALLGRAPH\", DoCallGraph);\n      }\n\n    ** end of section.\n    *******************************************************************************/\n\n    /* initialization part - the functions have not been loaded yet. This part\n    **\t\twill load the functions, and check if we are in Call Graph mode.\n    **\t\t(for special treatment).\n    */\n    if (!FUNC_NotifyEvent)\n    {\n        if (iJIT_DLL_is_missing)\n            return 0;\n\n        // load the Function from the DLL\n        if (!loadiJIT_Funcs())\n            return 0;\n\n        /* Call Graph initialization. */\n    }\n\n    /* If the event is method entry/exit, check that in the current mode\n    ** VTune is allowed to receive it\n    */\n    if ((event_type == iJVM_EVENT_TYPE_ENTER_NIDS || event_type == iJVM_EVENT_TYPE_LEAVE_NIDS) &&\n        (executionMode != iJIT_CALLGRAPH_ON))\n    {\n        return 0;\n    }\n    /* This section is performed when method enter event occurs.\n    ** It updates the virtual stack, or creates it if this is the first\n    ** method entry in the thread. The stack pointer is decreased.\n    */\n    if (event_type == iJVM_EVENT_TYPE_ENTER_NIDS)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        pThreadStack threadStack = (pThreadStack)TlsGetValue (threadLocalStorageHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        pThreadStack threadStack = (pThreadStack)pthread_getspecific(threadLocalStorageHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n        // check for use of reserved method IDs\n        if ( ((piJIT_Method_NIDS) EventSpecificData)->method_id <= 999 )\n            return 0;\n\n        if (!threadStack)\n        {\n            // initialize the stack.\n            threadStack = (pThreadStack) calloc (sizeof(ThreadStack), 1);\n            threadStack->TopStack = INIT_TOP_Stack;\n            threadStack->CurrentStack = INIT_TOP_Stack;\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n            TlsSetValue(threadLocalStorageHandle,(void*)threadStack);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n            pthread_setspecific(threadLocalStorageHandle,(void*)threadStack);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        }\n\n        // decrease the stack.\n        ((piJIT_Method_NIDS) EventSpecificData)->stack_id = (threadStack->CurrentStack)--;\n    }\n\n    /* This section is performed when method leave event occurs\n    ** It updates the virtual stack.\n    **\t\tIncreases the stack pointer.\n    **\t\tIf the stack pointer reached the top (left the global function)\n    **\t\t\tincrease the pointer and the top pointer.\n    */\n    if (event_type == iJVM_EVENT_TYPE_LEAVE_NIDS)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        pThreadStack threadStack = (pThreadStack)TlsGetValue (threadLocalStorageHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        pThreadStack threadStack = (pThreadStack)pthread_getspecific(threadLocalStorageHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n        // check for use of reserved method IDs\n        if ( ((piJIT_Method_NIDS) EventSpecificData)->method_id <= 999 )\n            return 0;\n\n        if (!threadStack)\n        {\n            /* Error: first report in this thread is method exit */\n            exit (1);\n        }\n\n        ((piJIT_Method_NIDS) EventSpecificData)->stack_id = ++(threadStack->CurrentStack) + 1;\n\n        if (((piJIT_Method_NIDS) EventSpecificData)->stack_id > threadStack->TopStack)\n            ((piJIT_Method_NIDS) EventSpecificData)->stack_id = (unsigned int)-1;\n    }\n\n    if (event_type == iJVM_EVENT_TYPE_METHOD_LOAD_FINISHED)\n    {\n        // check for use of reserved method IDs\n        if ( ((piJIT_Method_Load) EventSpecificData)->method_id <= 999 )\n            return 0;\n    }\n\n    ReturnValue = (int)FUNC_NotifyEvent(event_type, EventSpecificData);\n\n    return ReturnValue;\n}\n\nITT_EXTERN_C void JITAPI iJIT_RegisterCallbackEx(void *userdata, iJIT_ModeChangedEx NewModeCallBackFuncEx) // The new mode call back routine\n{\n    // is it already missing... or the load of functions from the DLL failed\n    if (iJIT_DLL_is_missing || !loadiJIT_Funcs())\n    {\n        NewModeCallBackFuncEx(userdata, iJIT_NO_NOTIFICATIONS);  // then do not bother with notifications\n        /* Error: could not load JIT functions. */\n        return;\n    }\n    // nothing to do with the callback\n}\n\n/*\n** This function allows the user to query in which mode, if at all, VTune is running\n*/\nITT_EXTERN_C iJIT_IsProfilingActiveFlags JITAPI iJIT_IsProfilingActive()\n{\n    if (!iJIT_DLL_is_missing)\n    {\n        loadiJIT_Funcs();\n    }\n\n    return executionMode;\n}\n#include <stdio.h>\n/* this function loads the collector dll (BistroJavaCollector) and the relevant functions.\n** on success: all functions load,     iJIT_DLL_is_missing = 0, return value = 1.\n** on failure: all functions are NULL, iJIT_DLL_is_missing = 1, return value = 0.\n*/\nstatic int loadiJIT_Funcs()\n{\n    static int bDllWasLoaded = 0;\n    char *dllName = (char*)rcsid; // !!! Just to avoid unused code elimination !!!\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    DWORD dNameLength = 0;\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n    if(bDllWasLoaded)\n    {// dll was already loaded, no need to do it for the second time\n        return 1;\n    }\n\n    // Assumes that the DLL will not be found\n    iJIT_DLL_is_missing = 1;\n    FUNC_NotifyEvent = NULL;\n\n    if (m_libHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        FreeLibrary(m_libHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        dlclose(m_libHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        m_libHandle = NULL;\n    }\n\n    // try to get the dll name from the environment\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    dNameLength = GetEnvironmentVariableA(NEW_DLL_ENVIRONMENT_VAR, NULL, 0);\n    if (dNameLength)\n    {\n        DWORD envret = 0;\n        dllName = (char*)malloc(sizeof(char) * (dNameLength + 1));\n        envret = GetEnvironmentVariableA(NEW_DLL_ENVIRONMENT_VAR, dllName, dNameLength);\n        if (envret)\n        {\n            // Try to load the dll from the PATH...\n            m_libHandle = LoadLibraryExA(dllName, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);\n        }\n        free(dllName);\n    } else {\n        // Try to use old VS_PROFILER variable\n        dNameLength = GetEnvironmentVariableA(DLL_ENVIRONMENT_VAR, NULL, 0);\n        if (dNameLength)\n        {\n            DWORD envret = 0;\n            dllName = (char*)malloc(sizeof(char) * (dNameLength + 1));\n            envret = GetEnvironmentVariableA(DLL_ENVIRONMENT_VAR, dllName, dNameLength);\n            if (envret)\n            {\n                // Try to load the dll from the PATH...\n                m_libHandle = LoadLibraryA(dllName);\n            }\n            free(dllName);\n        }\n    }\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    dllName = getenv(NEW_DLL_ENVIRONMENT_VAR);\n    if (!dllName) {\n        dllName = getenv(DLL_ENVIRONMENT_VAR);\n    }\n#ifdef ANDROID\n    if (!dllName)\n        dllName = ANDROID_JIT_AGENT_PATH;\n#endif\n    if (dllName)\n    {\n        // Try to load the dll from the PATH...\n        m_libHandle = dlopen(dllName, RTLD_LAZY);\n    }\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n    if (!m_libHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        m_libHandle = LoadLibraryA(DEFAULT_DLLNAME);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        m_libHandle = dlopen(DEFAULT_DLLNAME, RTLD_LAZY);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    }\n\n    // if the dll wasn't loaded - exit.\n    if (!m_libHandle)\n    {\n        iJIT_DLL_is_missing = 1; // don't try to initialize JIT agent the second time\n        return 0;\n    }\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    FUNC_NotifyEvent = (TPNotify)GetProcAddress(m_libHandle, \"NotifyEvent\");\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    FUNC_NotifyEvent = reinterpret_cast<TPNotify>(reinterpret_cast<intptr_t>(dlsym(m_libHandle, \"NotifyEvent\")));\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    if (!FUNC_NotifyEvent)\n    {\n        FUNC_Initialize = NULL;\n        return 0;\n    }\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    FUNC_Initialize = (TPInitialize)GetProcAddress(m_libHandle, \"Initialize\");\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    FUNC_Initialize = reinterpret_cast<TPInitialize>(reinterpret_cast<intptr_t>(dlsym(m_libHandle, \"Initialize\")));\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    if (!FUNC_Initialize)\n    {\n        FUNC_NotifyEvent = NULL;\n        return 0;\n    }\n\n    executionMode = (iJIT_IsProfilingActiveFlags)FUNC_Initialize();\n    if (executionMode != iJIT_SAMPLING_ON)\n      executionMode = iJIT_SAMPLING_ON;\n\n    bDllWasLoaded = 1;\n    iJIT_DLL_is_missing = 0; // DLL is ok.\n\n    /*\n    ** Call Graph mode: init the thread local storage\n    ** (need to store the virtual stack there).\n    */\n    if ( executionMode == iJIT_CALLGRAPH_ON )\n    {\n        // Allocate a thread local storage slot for the thread \"stack\"\n        if (!threadLocalStorageHandle)\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n            threadLocalStorageHandle = TlsAlloc();\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        pthread_key_create(&threadLocalStorageHandle, NULL);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    }\n\n    return 1;\n}\n\n/*\n** This function should be called by the user whenever a thread ends, to free the thread\n** \"virtual stack\" storage\n*/\nITT_EXTERN_C void JITAPI FinalizeThread()\n{\n    if (threadLocalStorageHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        pThreadStack threadStack = (pThreadStack)TlsGetValue (threadLocalStorageHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        pThreadStack threadStack = (pThreadStack)pthread_getspecific(threadLocalStorageHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        if (threadStack)\n        {\n            free (threadStack);\n            threadStack = NULL;\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n            TlsSetValue (threadLocalStorageHandle, threadStack);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n            pthread_setspecific(threadLocalStorageHandle, threadStack);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        }\n    }\n}\n\n/*\n** This function should be called by the user when the process ends, to free the local\n** storage index\n*/\nITT_EXTERN_C void JITAPI FinalizeProcess()\n{\n    if (m_libHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        FreeLibrary(m_libHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        dlclose(m_libHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        m_libHandle = NULL;\n    }\n\n    if (threadLocalStorageHandle)\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        TlsFree (threadLocalStorageHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    pthread_key_delete(threadLocalStorageHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n}\n\n/*\n** This function should be called by the user for any method once.\n** The function will return a unique method ID, the user should maintain the ID for each\n** method\n*/\nITT_EXTERN_C unsigned int JITAPI iJIT_GetNewMethodID()\n{\n    static unsigned int methodID = 0x100000;\n\n    if (methodID == 0)\n        return 0;\t// ERROR : this is not a valid value\n\n    return methodID++;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/v8/src/third_party/vtune/ittnotify_config.h": "/*\n  This file is provided under a dual BSD/GPLv2 license.  When using or\n  redistributing this file, you may do so under either license.\n\n  GPL LICENSE SUMMARY\n\n  Copyright(c) 2005-2012 Intel Corporation. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of version 2 of the GNU General Public License as\n  published by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.\n  The full GNU General Public License is included in this distribution\n  in the file called LICENSE.GPL.\n\n  Contact Information:\n  http://software.intel.com/en-us/articles/intel-vtune-amplifier-xe/\n\n  BSD LICENSE\n\n  Copyright(c) 2005-2012 Intel Corporation. All rights reserved.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n    * Neither the name of Intel Corporation nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n#ifndef _ITTNOTIFY_CONFIG_H_\n#define _ITTNOTIFY_CONFIG_H_\n\n/** @cond exclude_from_documentation */\n#ifndef ITT_OS_WIN\n#  define ITT_OS_WIN   1\n#endif /* ITT_OS_WIN */\n\n#ifndef ITT_OS_LINUX\n#  define ITT_OS_LINUX 2\n#endif /* ITT_OS_LINUX */\n\n#ifndef ITT_OS_MAC\n#  define ITT_OS_MAC   3\n#endif /* ITT_OS_MAC */\n\n#ifndef ITT_OS\n#  if defined WIN32 || defined _WIN32\n#    define ITT_OS ITT_OS_WIN\n#  elif defined( __APPLE__ ) && defined( __MACH__ )\n#    define ITT_OS ITT_OS_MAC\n#  else\n#    define ITT_OS ITT_OS_LINUX\n#  endif\n#endif /* ITT_OS */\n\n#ifndef ITT_PLATFORM_WIN\n#  define ITT_PLATFORM_WIN 1\n#endif /* ITT_PLATFORM_WIN */\n\n#ifndef ITT_PLATFORM_POSIX\n#  define ITT_PLATFORM_POSIX 2\n#endif /* ITT_PLATFORM_POSIX */\n\n#ifndef ITT_PLATFORM\n#  if ITT_OS==ITT_OS_WIN\n#    define ITT_PLATFORM ITT_PLATFORM_WIN\n#  else\n#    define ITT_PLATFORM ITT_PLATFORM_POSIX\n#  endif /* _WIN32 */\n#endif /* ITT_PLATFORM */\n\n#if defined(_UNICODE) && !defined(UNICODE)\n#define UNICODE\n#endif\n\n#include <stddef.h>\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <tchar.h>\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <stdint.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE || _UNICODE */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#ifndef CDECL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define CDECL __cdecl\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#      define CDECL /* not actual on x86_64 platform */\n#    else  /* _M_X64 || _M_AMD64 || __x86_64__ */\n#      define CDECL __attribute__ ((cdecl))\n#    endif /* _M_X64 || _M_AMD64 || __x86_64__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* CDECL */\n\n#ifndef STDCALL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define STDCALL __stdcall\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#      define STDCALL /* not supported on x86_64 platform */\n#    else  /* _M_X64 || _M_AMD64 || __x86_64__ */\n#      define STDCALL __attribute__ ((stdcall))\n#    endif /* _M_X64 || _M_AMD64 || __x86_64__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* STDCALL */\n\n#define ITTAPI    CDECL\n#define LIBITTAPI CDECL\n\n/* TODO: Temporary for compatibility! */\n#define ITTAPI_CALL    CDECL\n#define LIBITTAPI_CALL CDECL\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n/* use __forceinline (VC++ specific) */\n#define ITT_INLINE           __forceinline\n#define ITT_INLINE_ATTRIBUTE /* nothing */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/*\n * Generally, functions are not inlined unless optimization is specified.\n * For functions declared inline, this attribute inlines the function even\n * if no optimization level was specified.\n */\n#ifdef __STRICT_ANSI__\n#define ITT_INLINE           static\n#else  /* __STRICT_ANSI__ */\n#define ITT_INLINE           static inline\n#endif /* __STRICT_ANSI__ */\n#define ITT_INLINE_ATTRIBUTE __attribute__ ((always_inline))\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/** @endcond */\n\n#ifndef ITT_ARCH_IA32\n#  define ITT_ARCH_IA32  1\n#endif /* ITT_ARCH_IA32 */\n\n#ifndef ITT_ARCH_IA32E\n#  define ITT_ARCH_IA32E 2\n#endif /* ITT_ARCH_IA32E */\n\n#ifndef ITT_ARCH_IA64\n#  define ITT_ARCH_IA64  3\n#endif /* ITT_ARCH_IA64 */\n\n#ifndef ITT_ARCH\n#  if defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#    define ITT_ARCH ITT_ARCH_IA32E\n#  elif defined _M_IA64 || defined __ia64\n#    define ITT_ARCH ITT_ARCH_IA64\n#  else\n#    define ITT_ARCH ITT_ARCH_IA32\n#  endif\n#endif\n\n#ifdef __cplusplus\n#  define ITT_EXTERN_C extern \"C\"\n#else\n#  define ITT_EXTERN_C /* nothing */\n#endif /* __cplusplus */\n\n#define ITT_TO_STR_AUX(x) #x\n#define ITT_TO_STR(x)     ITT_TO_STR_AUX(x)\n\n#define __ITT_BUILD_ASSERT(expr, suffix) do { static char __itt_build_check_##suffix[(expr) ? 1 : -1]; __itt_build_check_##suffix[0] = 0; } while(0)\n#define _ITT_BUILD_ASSERT(expr, suffix)  __ITT_BUILD_ASSERT((expr), suffix)\n#define ITT_BUILD_ASSERT(expr)           _ITT_BUILD_ASSERT((expr), __LINE__)\n\n#define ITT_MAGIC { 0xED, 0xAB, 0xAB, 0xEC, 0x0D, 0xEE, 0xDA, 0x30 }\n\n/* Replace with snapshot date YYYYMMDD for promotion build. */\n#define API_VERSION_BUILD    20111111\n\n#ifndef API_VERSION_NUM\n#define API_VERSION_NUM 0.0.0\n#endif /* API_VERSION_NUM */\n\n#define API_VERSION \"ITT-API-Version \" ITT_TO_STR(API_VERSION_NUM) \" (\" ITT_TO_STR(API_VERSION_BUILD) \")\"\n\n/* OS communication functions */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\ntypedef HMODULE           lib_t;\ntypedef DWORD             TIDT;\ntypedef CRITICAL_SECTION  mutex_t;\n#define MUTEX_INITIALIZER { 0 }\n#define strong_alias(name, aliasname) /* empty for Windows */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <dlfcn.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE 1 /* need for PTHREAD_MUTEX_RECURSIVE */\n#endif /* _GNU_SOURCE */\n#include <pthread.h>\ntypedef void*             lib_t;\ntypedef pthread_t         TIDT;\ntypedef pthread_mutex_t   mutex_t;\n#define MUTEX_INITIALIZER PTHREAD_MUTEX_INITIALIZER\n#define _strong_alias(name, aliasname) extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n#define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define __itt_get_proc(lib, name) GetProcAddress(lib, name)\n#define __itt_mutex_init(mutex)   InitializeCriticalSection(mutex)\n#define __itt_mutex_lock(mutex)   EnterCriticalSection(mutex)\n#define __itt_mutex_unlock(mutex) LeaveCriticalSection(mutex)\n#define __itt_load_lib(name)      LoadLibraryA(name)\n#define __itt_unload_lib(handle)  FreeLibrary(handle)\n#define __itt_system_error()      (int)GetLastError()\n#define __itt_fstrcmp(s1, s2)     lstrcmpA(s1, s2)\n#define __itt_fstrlen(s)          lstrlenA(s)\n#define __itt_fstrcpyn(s1, s2, l) lstrcpynA(s1, s2, l)\n#define __itt_fstrdup(s)          _strdup(s)\n#define __itt_thread_id()         GetCurrentThreadId()\n#define __itt_thread_yield()      SwitchToThread()\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE int __itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE int __itt_interlocked_increment(volatile long* ptr)\n{\n    return InterlockedIncrement(ptr);\n}\n#endif /* ITT_SIMPLE_INIT */\n#else /* ITT_PLATFORM!=ITT_PLATFORM_WIN */\n#define __itt_get_proc(lib, name) dlsym(lib, name)\n#define __itt_mutex_init(mutex)   \\\n    {                                                                                        \\\n        pthread_mutexattr_t mutex_attr;                                                      \\\n        int error_code = pthread_mutexattr_init(&mutex_attr);                                \\\n        if (error_code)                                                                      \\\n            __itt_report_error(__itt_error_system, \"pthread_mutexattr_init\", error_code);    \\\n        error_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);        \\\n        if (error_code)                                                                      \\\n            __itt_report_error(__itt_error_system, \"pthread_mutexattr_settype\", error_code); \\\n        error_code = pthread_mutex_init(mutex, &mutex_attr);                                 \\\n        if (error_code)                                                                      \\\n            __itt_report_error(__itt_error_system, \"pthread_mutex_init\", error_code);        \\\n        error_code = pthread_mutexattr_destroy(&mutex_attr);                                 \\\n        if (error_code)                                                                      \\\n            __itt_report_error(__itt_error_system, \"pthread_mutexattr_destroy\", error_code); \\\n    }\n#define __itt_mutex_lock(mutex)   pthread_mutex_lock(mutex)\n#define __itt_mutex_unlock(mutex) pthread_mutex_unlock(mutex)\n#define __itt_load_lib(name)      dlopen(name, RTLD_LAZY)\n#define __itt_unload_lib(handle)  dlclose(handle)\n#define __itt_system_error()      errno\n#define __itt_fstrcmp(s1, s2)     strcmp(s1, s2)\n#define __itt_fstrlen(s)          strlen(s)\n#define __itt_fstrcpyn(s1, s2, l) strncpy(s1, s2, l)\n#define __itt_fstrdup(s)          strdup(s)\n#define __itt_thread_id()         pthread_self()\n#define __itt_thread_yield()      sched_yield()\n#if ITT_ARCH==ITT_ARCH_IA64\n#ifdef __INTEL_COMPILER\n#define __TBB_machine_fetchadd4(addr, val) __fetchadd4_acq((void *)addr, val)\n#else  /* __INTEL_COMPILER */\n/* TODO: Add Support for not Intel compilers for IA64 */\n#endif /* __INTEL_COMPILER */\n#else /* ITT_ARCH!=ITT_ARCH_IA64 */\n/*ITT_INLINE int __TBB_machine_fetchadd4(volatile void* ptr, long addend) ITT_INLINE_ATTRIBUTE;\nITT_INLINE int __TBB_machine_fetchadd4(volatile void* ptr, long addend)\n{\n    int result;\n    __asm__ __volatile__(\"lock\\nxaddl %0,%1\"\n                          : \"=r\"(result),\"=m\"(*(long*)ptr)\n                          : \"0\"(addend), \"m\"(*(long*)ptr)\n                          : \"memory\");\n    return result;\n}\n*/\n#endif /* ITT_ARCH==ITT_ARCH_IA64 */\n#ifndef ITT_SIMPLE_INIT\n/*ITT_INLINE int __itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE int __itt_interlocked_increment(volatile long* ptr)\n{\n    return __TBB_machine_fetchadd4(ptr, 1) + 1;\n}\n*/\n#endif /* ITT_SIMPLE_INIT */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\ntypedef enum {\n    __itt_collection_normal = 0,\n    __itt_collection_paused = 1\n} __itt_collection_state;\n\ntypedef enum {\n    __itt_thread_normal  = 0,\n    __itt_thread_ignored = 1\n} __itt_thread_state;\n\n#pragma pack(push, 8)\n\ntypedef struct ___itt_thread_info\n{\n    const char* nameA; /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* nameW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* nameW;\n#endif /* UNICODE || _UNICODE */\n    TIDT               tid;\n    __itt_thread_state state;   /*!< Thread state (paused or normal) */\n    int                extra1;  /*!< Reserved to the runtime */\n    void*              extra2;  /*!< Reserved to the runtime */\n    struct ___itt_thread_info* next;\n} __itt_thread_info;\n\n#include \"ittnotify_types.h\" /* For __itt_group_id definition */\n\ntypedef struct ___itt_api_info_20101001\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    __itt_group_id group;\n}  __itt_api_info_20101001;\n\ntypedef struct ___itt_api_info\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    void*          null_func;\n    __itt_group_id group;\n}  __itt_api_info;\n\nstruct ___itt_domain;\nstruct ___itt_string_handle;\n\ntypedef struct ___itt_global\n{\n    unsigned char          magic[8];\n    unsigned long          version_major;\n    unsigned long          version_minor;\n    unsigned long          version_build;\n    volatile long          api_initialized;\n    volatile long          mutex_initialized;\n    volatile long          atomic_counter;\n    mutex_t                mutex;\n    lib_t                  lib;\n    void*                  error_handler;\n    const char**           dll_path_ptr;\n    __itt_api_info*        api_list_ptr;\n    struct ___itt_global*  next;\n    /* Joinable structures below */\n    __itt_thread_info*     thread_list;\n    struct ___itt_domain*  domain_list;\n    struct ___itt_string_handle* string_list;\n    __itt_collection_state state;\n} __itt_global;\n\n#pragma pack(pop)\n\n#define NEW_THREAD_INFO_W(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = NULL; \\\n        h->nameW  = n ? _wcsdup(n) : NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_THREAD_INFO_A(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = n ? __itt_fstrdup(n) : NULL; \\\n        h->nameW  = NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_W(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = NULL; \\\n        h->nameW  = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_A(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = name ? __itt_fstrdup(name) : NULL; \\\n        h->nameW  = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_W(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = NULL; \\\n        h->strW   = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_A(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = name ? __itt_fstrdup(name) : NULL; \\\n        h->strW   = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#endif /* _ITTNOTIFY_CONFIG_H_ */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/configure.ac": "# Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nAC_PREREQ(2.57)\nAC_INIT([libuv], [1.9.1], [https://github.com/libuv/libuv/issues])\nAC_CONFIG_MACRO_DIR([m4])\nm4_include([m4/libuv-extra-automake-flags.m4])\nm4_include([m4/as_case.m4])\nm4_include([m4/libuv-check-flags.m4])\nAM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)\nAC_CANONICAL_HOST\nAC_ENABLE_SHARED\nAC_ENABLE_STATIC\nAC_PROG_CC\nAM_PROG_CC_C_O\nCC_CHECK_CFLAGS_APPEND([-fvisibility=hidden])\nCC_CHECK_CFLAGS_APPEND([-g])\nCC_CHECK_CFLAGS_APPEND([-std=gnu89])\nCC_CHECK_CFLAGS_APPEND([-pedantic])\nCC_CHECK_CFLAGS_APPEND([-Wall])\nCC_CHECK_CFLAGS_APPEND([-Wextra])\nCC_CHECK_CFLAGS_APPEND([-Wno-unused-parameter])\n# AM_PROG_AR is not available in automake v0.11 but it's essential in v0.12.\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n# autoconf complains if AC_PROG_LIBTOOL precedes AM_PROG_AR.\nAC_PROG_LIBTOOL\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\nLT_INIT\n# TODO(bnoordhuis) Check for -pthread vs. -pthreads\nAC_CHECK_LIB([dl], [dlopen])\nAC_CHECK_LIB([kstat], [kstat_lookup])\nAC_CHECK_LIB([kvm], [kvm_open])\nAC_CHECK_LIB([nsl], [gethostbyname])\nAC_CHECK_LIB([perfstat], [perfstat_cpu])\nAC_CHECK_LIB([pthread], [pthread_mutex_init])\nAC_CHECK_LIB([rt], [clock_gettime])\nAC_CHECK_LIB([sendfile], [sendfile])\nAC_CHECK_LIB([socket], [socket])\nAC_SYS_LARGEFILE\nAM_CONDITIONAL([AIX],      [AS_CASE([$host_os],[aix*],          [true], [false])])\nAM_CONDITIONAL([ANDROID],  [AS_CASE([$host_os],[linux-android*],[true], [false])])\nAM_CONDITIONAL([DARWIN],   [AS_CASE([$host_os],[darwin*],       [true], [false])])\nAM_CONDITIONAL([DRAGONFLY],[AS_CASE([$host_os],[dragonfly*],    [true], [false])])\nAM_CONDITIONAL([FREEBSD],  [AS_CASE([$host_os],[freebsd*],      [true], [false])])\nAM_CONDITIONAL([LINUX],    [AS_CASE([$host_os],[linux*],        [true], [false])])\nAM_CONDITIONAL([NETBSD],   [AS_CASE([$host_os],[netbsd*],       [true], [false])])\nAM_CONDITIONAL([OPENBSD],  [AS_CASE([$host_os],[openbsd*],      [true], [false])])\nAM_CONDITIONAL([SUNOS],    [AS_CASE([$host_os],[solaris*],      [true], [false])])\nAM_CONDITIONAL([WINNT],    [AS_CASE([$host_os],[mingw*],        [true], [false])])\nAS_CASE([$host_os],[mingw*], [\n    LIBS=\"$LIBS -lws2_32 -lpsapi -liphlpapi -lshell32 -luserenv -luser32\"\n])\nAC_CHECK_HEADERS([sys/ahafs_evProds.h])\nAC_CHECK_PROG(PKG_CONFIG, pkg-config, yes)\nAM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])\nAS_IF([test \"x$PKG_CONFIG\" != \"x\"], [\n    AC_CONFIG_FILES([libuv.pc])\n])\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/src/win/dl.c": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include \"uv.h\"\n#include \"internal.h\"\n\nstatic int uv__dlerror(uv_lib_t* lib, int errorno);\n\n\nint uv_dlopen(const char* filename, uv_lib_t* lib) {\n  WCHAR filename_w[32768];\n\n  lib->handle = NULL;\n  lib->errmsg = NULL;\n\n  if (!MultiByteToWideChar(CP_UTF8,\n                           0,\n                           filename,\n                           -1,\n                           filename_w,\n                           ARRAY_SIZE(filename_w))) {\n    return uv__dlerror(lib, GetLastError());\n  }\n\n  lib->handle = LoadLibraryExW(filename_w, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);\n  if (lib->handle == NULL) {\n    return uv__dlerror(lib, GetLastError());\n  }\n\n  return 0;\n}\n\n\nvoid uv_dlclose(uv_lib_t* lib) {\n  if (lib->errmsg) {\n    LocalFree((void*)lib->errmsg);\n    lib->errmsg = NULL;\n  }\n\n  if (lib->handle) {\n    /* Ignore errors. No good way to signal them without leaking memory. */\n    FreeLibrary(lib->handle);\n    lib->handle = NULL;\n  }\n}\n\n\nint uv_dlsym(uv_lib_t* lib, const char* name, void** ptr) {\n  *ptr = (void*) GetProcAddress(lib->handle, name);\n  return uv__dlerror(lib, *ptr ? 0 : GetLastError());\n}\n\n\nconst char* uv_dlerror(const uv_lib_t* lib) {\n  return lib->errmsg ? lib->errmsg : \"no error\";\n}\n\n\nstatic void uv__format_fallback_error(uv_lib_t* lib, int errorno){\n  DWORD_PTR args[1] = { (DWORD_PTR) errorno };\n  LPSTR fallback_error = \"error: %1!d!\";\n\n  FormatMessageA(FORMAT_MESSAGE_FROM_STRING |\n                 FORMAT_MESSAGE_ARGUMENT_ARRAY |\n                 FORMAT_MESSAGE_ALLOCATE_BUFFER,\n                 fallback_error, 0, 0,\n                 (LPSTR) &lib->errmsg,\n                 0, (va_list*) args);\n}\n\n\n\nstatic int uv__dlerror(uv_lib_t* lib, int errorno) {\n  DWORD res;\n\n  if (lib->errmsg) {\n    LocalFree((void*)lib->errmsg);\n    lib->errmsg = NULL;\n  }\n\n  if (errorno) {\n    res = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                         FORMAT_MESSAGE_FROM_SYSTEM |\n                         FORMAT_MESSAGE_IGNORE_INSERTS, NULL, errorno,\n                         MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US),\n                         (LPSTR) &lib->errmsg, 0, NULL);\n    if (!res && GetLastError() == ERROR_MUI_FILE_NOT_FOUND) {\n      res = FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                           FORMAT_MESSAGE_FROM_SYSTEM |\n                           FORMAT_MESSAGE_IGNORE_INSERTS, NULL, errorno,\n                           0, (LPSTR) &lib->errmsg, 0, NULL);\n    }\n\n    if (!res) {\n      uv__format_fallback_error(lib, errorno);\n    }\n  }\n\n  return errorno ? -1 : 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/src/unix/darwin-proctitle.c": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <TargetConditionals.h>\n\n#if !TARGET_OS_IPHONE\n# include <CoreFoundation/CoreFoundation.h>\n# include <ApplicationServices/ApplicationServices.h>\n#endif\n\n\nstatic int uv__pthread_setname_np(const char* name) {\n  int (*dynamic_pthread_setname_np)(const char* name);\n  char namebuf[64];  /* MAXTHREADNAMESIZE */\n  int err;\n\n  /* pthread_setname_np() first appeared in OS X 10.6 and iOS 3.2. */\n  *(void **)(&dynamic_pthread_setname_np) =\n      dlsym(RTLD_DEFAULT, \"pthread_setname_np\");\n\n  if (dynamic_pthread_setname_np == NULL)\n    return -ENOSYS;\n\n  strncpy(namebuf, name, sizeof(namebuf) - 1);\n  namebuf[sizeof(namebuf) - 1] = '\\0';\n\n  err = dynamic_pthread_setname_np(namebuf);\n  if (err)\n    return -err;\n\n  return 0;\n}\n\n\nint uv__set_process_title(const char* title) {\n#if TARGET_OS_IPHONE\n  return uv__pthread_setname_np(title);\n#else\n  CFStringRef (*pCFStringCreateWithCString)(CFAllocatorRef,\n                                            const char*,\n                                            CFStringEncoding);\n  CFBundleRef (*pCFBundleGetBundleWithIdentifier)(CFStringRef);\n  void *(*pCFBundleGetDataPointerForName)(CFBundleRef, CFStringRef);\n  void *(*pCFBundleGetFunctionPointerForName)(CFBundleRef, CFStringRef);\n  CFTypeRef (*pLSGetCurrentApplicationASN)(void);\n  OSStatus (*pLSSetApplicationInformationItem)(int,\n                                               CFTypeRef,\n                                               CFStringRef,\n                                               CFStringRef,\n                                               CFDictionaryRef*);\n  void* application_services_handle;\n  void* core_foundation_handle;\n  CFBundleRef launch_services_bundle;\n  CFStringRef* display_name_key;\n  CFDictionaryRef (*pCFBundleGetInfoDictionary)(CFBundleRef);\n  CFBundleRef (*pCFBundleGetMainBundle)(void);\n  CFBundleRef hi_services_bundle;\n  OSStatus (*pSetApplicationIsDaemon)(int);\n  CFDictionaryRef (*pLSApplicationCheckIn)(int, CFDictionaryRef);\n  void (*pLSSetApplicationLaunchServicesServerConnectionStatus)(uint64_t,\n                                                                void*);\n  CFTypeRef asn;\n  int err;\n\n  err = -ENOENT;\n  application_services_handle = dlopen(\"/System/Library/Frameworks/\"\n                                       \"ApplicationServices.framework/\"\n                                       \"Versions/A/ApplicationServices\",\n                                       RTLD_LAZY | RTLD_LOCAL);\n  core_foundation_handle = dlopen(\"/System/Library/Frameworks/\"\n                                  \"CoreFoundation.framework/\"\n                                  \"Versions/A/CoreFoundation\",\n                                  RTLD_LAZY | RTLD_LOCAL);\n\n  if (application_services_handle == NULL || core_foundation_handle == NULL)\n    goto out;\n\n  *(void **)(&pCFStringCreateWithCString) =\n      dlsym(core_foundation_handle, \"CFStringCreateWithCString\");\n  *(void **)(&pCFBundleGetBundleWithIdentifier) =\n      dlsym(core_foundation_handle, \"CFBundleGetBundleWithIdentifier\");\n  *(void **)(&pCFBundleGetDataPointerForName) =\n      dlsym(core_foundation_handle, \"CFBundleGetDataPointerForName\");\n  *(void **)(&pCFBundleGetFunctionPointerForName) =\n      dlsym(core_foundation_handle, \"CFBundleGetFunctionPointerForName\");\n\n  if (pCFStringCreateWithCString == NULL ||\n      pCFBundleGetBundleWithIdentifier == NULL ||\n      pCFBundleGetDataPointerForName == NULL ||\n      pCFBundleGetFunctionPointerForName == NULL) {\n    goto out;\n  }\n\n#define S(s) pCFStringCreateWithCString(NULL, (s), kCFStringEncodingUTF8)\n\n  launch_services_bundle =\n      pCFBundleGetBundleWithIdentifier(S(\"com.apple.LaunchServices\"));\n\n  if (launch_services_bundle == NULL)\n    goto out;\n\n  *(void **)(&pLSGetCurrentApplicationASN) =\n      pCFBundleGetFunctionPointerForName(launch_services_bundle,\n                                         S(\"_LSGetCurrentApplicationASN\"));\n\n  if (pLSGetCurrentApplicationASN == NULL)\n    goto out;\n\n  *(void **)(&pLSSetApplicationInformationItem) =\n      pCFBundleGetFunctionPointerForName(launch_services_bundle,\n                                         S(\"_LSSetApplicationInformationItem\"));\n\n  if (pLSSetApplicationInformationItem == NULL)\n    goto out;\n\n  display_name_key = pCFBundleGetDataPointerForName(launch_services_bundle,\n                                                    S(\"_kLSDisplayNameKey\"));\n\n  if (display_name_key == NULL || *display_name_key == NULL)\n    goto out;\n\n  *(void **)(&pCFBundleGetInfoDictionary) = dlsym(core_foundation_handle,\n                                     \"CFBundleGetInfoDictionary\");\n  *(void **)(&pCFBundleGetMainBundle) = dlsym(core_foundation_handle,\n                                 \"CFBundleGetMainBundle\");\n  if (pCFBundleGetInfoDictionary == NULL || pCFBundleGetMainBundle == NULL)\n    goto out;\n\n  /* Black 10.9 magic, to remove (Not responding) mark in Activity Monitor */\n  hi_services_bundle =\n      pCFBundleGetBundleWithIdentifier(S(\"com.apple.HIServices\"));\n  err = -ENOENT;\n  if (hi_services_bundle == NULL)\n    goto out;\n\n  *(void **)(&pSetApplicationIsDaemon) = pCFBundleGetFunctionPointerForName(\n      hi_services_bundle,\n      S(\"SetApplicationIsDaemon\"));\n  *(void **)(&pLSApplicationCheckIn) = pCFBundleGetFunctionPointerForName(\n      launch_services_bundle,\n      S(\"_LSApplicationCheckIn\"));\n  *(void **)(&pLSSetApplicationLaunchServicesServerConnectionStatus) =\n      pCFBundleGetFunctionPointerForName(\n          launch_services_bundle,\n          S(\"_LSSetApplicationLaunchServicesServerConnectionStatus\"));\n  if (pSetApplicationIsDaemon == NULL ||\n      pLSApplicationCheckIn == NULL ||\n      pLSSetApplicationLaunchServicesServerConnectionStatus == NULL) {\n    goto out;\n  }\n\n  if (pSetApplicationIsDaemon(1) != noErr)\n    goto out;\n\n  pLSSetApplicationLaunchServicesServerConnectionStatus(0, NULL);\n\n  /* Check into process manager?! */\n  pLSApplicationCheckIn(-2,\n                        pCFBundleGetInfoDictionary(pCFBundleGetMainBundle()));\n\n  asn = pLSGetCurrentApplicationASN();\n\n  err = -EINVAL;\n  if (pLSSetApplicationInformationItem(-2,  /* Magic value. */\n                                       asn,\n                                       *display_name_key,\n                                       S(title),\n                                       NULL) != noErr) {\n    goto out;\n  }\n\n  uv__pthread_setname_np(title);  /* Don't care if it fails. */\n  err = 0;\n\nout:\n  if (core_foundation_handle != NULL)\n    dlclose(core_foundation_handle);\n\n  if (application_services_handle != NULL)\n    dlclose(application_services_handle);\n\n  return err;\n#endif  /* !TARGET_OS_IPHONE */\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/src/unix/fsevents.c": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include \"uv.h\"\n#include \"internal.h\"\n\n#if TARGET_OS_IPHONE\n\n/* iOS (currently) doesn't provide the FSEvents-API (nor CoreServices) */\n\nint uv__fsevents_init(uv_fs_event_t* handle) {\n  return 0;\n}\n\n\nint uv__fsevents_close(uv_fs_event_t* handle) {\n  return 0;\n}\n\n\nvoid uv__fsevents_loop_delete(uv_loop_t* loop) {\n}\n\n#else /* TARGET_OS_IPHONE */\n\n#include <dlfcn.h>\n#include <assert.h>\n#include <stdlib.h>\n#include <pthread.h>\n\n#include <CoreFoundation/CFRunLoop.h>\n#include <CoreServices/CoreServices.h>\n\n/* These are macros to avoid \"initializer element is not constant\" errors\n * with old versions of gcc.\n */\n#define kFSEventsModified (kFSEventStreamEventFlagItemFinderInfoMod |         \\\n                           kFSEventStreamEventFlagItemModified |              \\\n                           kFSEventStreamEventFlagItemInodeMetaMod |          \\\n                           kFSEventStreamEventFlagItemChangeOwner |           \\\n                           kFSEventStreamEventFlagItemXattrMod)\n\n#define kFSEventsRenamed  (kFSEventStreamEventFlagItemCreated |               \\\n                           kFSEventStreamEventFlagItemRemoved |               \\\n                           kFSEventStreamEventFlagItemRenamed)\n\n#define kFSEventsSystem   (kFSEventStreamEventFlagUserDropped |               \\\n                           kFSEventStreamEventFlagKernelDropped |             \\\n                           kFSEventStreamEventFlagEventIdsWrapped |           \\\n                           kFSEventStreamEventFlagHistoryDone |               \\\n                           kFSEventStreamEventFlagMount |                     \\\n                           kFSEventStreamEventFlagUnmount |                   \\\n                           kFSEventStreamEventFlagRootChanged)\n\ntypedef struct uv__fsevents_event_s uv__fsevents_event_t;\ntypedef struct uv__cf_loop_signal_s uv__cf_loop_signal_t;\ntypedef struct uv__cf_loop_state_s uv__cf_loop_state_t;\n\nenum uv__cf_loop_signal_type_e {\n  kUVCFLoopSignalRegular,\n  kUVCFLoopSignalClosing\n};\ntypedef enum uv__cf_loop_signal_type_e uv__cf_loop_signal_type_t;\n\nstruct uv__cf_loop_signal_s {\n  QUEUE member;\n  uv_fs_event_t* handle;\n  uv__cf_loop_signal_type_t type;\n};\n\nstruct uv__fsevents_event_s {\n  QUEUE member;\n  int events;\n  char path[1];\n};\n\nstruct uv__cf_loop_state_s {\n  CFRunLoopRef loop;\n  CFRunLoopSourceRef signal_source;\n  int fsevent_need_reschedule;\n  FSEventStreamRef fsevent_stream;\n  uv_sem_t fsevent_sem;\n  uv_mutex_t fsevent_mutex;\n  void* fsevent_handles[2];\n  unsigned int fsevent_handle_count;\n};\n\n/* Forward declarations */\nstatic void uv__cf_loop_cb(void* arg);\nstatic void* uv__cf_loop_runner(void* arg);\nstatic int uv__cf_loop_signal(uv_loop_t* loop,\n                              uv_fs_event_t* handle,\n                              uv__cf_loop_signal_type_t type);\n\n/* Lazy-loaded by uv__fsevents_global_init(). */\nstatic CFArrayRef (*pCFArrayCreate)(CFAllocatorRef,\n                                    const void**,\n                                    CFIndex,\n                                    const CFArrayCallBacks*);\nstatic void (*pCFRelease)(CFTypeRef);\nstatic void (*pCFRunLoopAddSource)(CFRunLoopRef,\n                                   CFRunLoopSourceRef,\n                                   CFStringRef);\nstatic CFRunLoopRef (*pCFRunLoopGetCurrent)(void);\nstatic void (*pCFRunLoopRemoveSource)(CFRunLoopRef,\n                                      CFRunLoopSourceRef,\n                                      CFStringRef);\nstatic void (*pCFRunLoopRun)(void);\nstatic CFRunLoopSourceRef (*pCFRunLoopSourceCreate)(CFAllocatorRef,\n                                                    CFIndex,\n                                                    CFRunLoopSourceContext*);\nstatic void (*pCFRunLoopSourceSignal)(CFRunLoopSourceRef);\nstatic void (*pCFRunLoopStop)(CFRunLoopRef);\nstatic void (*pCFRunLoopWakeUp)(CFRunLoopRef);\nstatic CFStringRef (*pCFStringCreateWithFileSystemRepresentation)(\n    CFAllocatorRef,\n    const char*);\nstatic CFStringEncoding (*pCFStringGetSystemEncoding)(void);\nstatic CFStringRef (*pkCFRunLoopDefaultMode);\nstatic FSEventStreamRef (*pFSEventStreamCreate)(CFAllocatorRef,\n                                                FSEventStreamCallback,\n                                                FSEventStreamContext*,\n                                                CFArrayRef,\n                                                FSEventStreamEventId,\n                                                CFTimeInterval,\n                                                FSEventStreamCreateFlags);\nstatic void (*pFSEventStreamFlushSync)(FSEventStreamRef);\nstatic void (*pFSEventStreamInvalidate)(FSEventStreamRef);\nstatic void (*pFSEventStreamRelease)(FSEventStreamRef);\nstatic void (*pFSEventStreamScheduleWithRunLoop)(FSEventStreamRef,\n                                                 CFRunLoopRef,\n                                                 CFStringRef);\nstatic Boolean (*pFSEventStreamStart)(FSEventStreamRef);\nstatic void (*pFSEventStreamStop)(FSEventStreamRef);\n\n#define UV__FSEVENTS_PROCESS(handle, block)                                   \\\n    do {                                                                      \\\n      QUEUE events;                                                           \\\n      QUEUE* q;                                                               \\\n      uv__fsevents_event_t* event;                                            \\\n      int err;                                                                \\\n      uv_mutex_lock(&(handle)->cf_mutex);                                     \\\n      /* Split-off all events and empty original queue */                     \\\n      QUEUE_MOVE(&(handle)->cf_events, &events);                              \\\n      /* Get error (if any) and zero original one */                          \\\n      err = (handle)->cf_error;                                               \\\n      (handle)->cf_error = 0;                                                 \\\n      uv_mutex_unlock(&(handle)->cf_mutex);                                   \\\n      /* Loop through events, deallocating each after processing */           \\\n      while (!QUEUE_EMPTY(&events)) {                                         \\\n        q = QUEUE_HEAD(&events);                                              \\\n        event = QUEUE_DATA(q, uv__fsevents_event_t, member);                  \\\n        QUEUE_REMOVE(q);                                                      \\\n        /* NOTE: Checking uv__is_active() is required here, because handle    \\\n         * callback may close handle and invoking it after it will lead to    \\\n         * incorrect behaviour */                                             \\\n        if (!uv__is_closing((handle)) && uv__is_active((handle)))             \\\n          block                                                               \\\n        /* Free allocated data */                                             \\\n        uv__free(event);                                                      \\\n      }                                                                       \\\n      if (err != 0 && !uv__is_closing((handle)) && uv__is_active((handle)))   \\\n        (handle)->cb((handle), NULL, 0, err);                                 \\\n    } while (0)\n\n\n/* Runs in UV loop's thread, when there're events to report to handle */\nstatic void uv__fsevents_cb(uv_async_t* cb) {\n  uv_fs_event_t* handle;\n\n  handle = cb->data;\n\n  UV__FSEVENTS_PROCESS(handle, {\n    handle->cb(handle, event->path[0] ? event->path : NULL, event->events, 0);\n  });\n}\n\n\n/* Runs in CF thread, pushed event into handle's event list */\nstatic void uv__fsevents_push_event(uv_fs_event_t* handle,\n                                    QUEUE* events,\n                                    int err) {\n  assert(events != NULL || err != 0);\n  uv_mutex_lock(&handle->cf_mutex);\n\n  /* Concatenate two queues */\n  if (events != NULL)\n    QUEUE_ADD(&handle->cf_events, events);\n\n  /* Propagate error */\n  if (err != 0)\n    handle->cf_error = err;\n  uv_mutex_unlock(&handle->cf_mutex);\n\n  uv_async_send(handle->cf_cb);\n}\n\n\n/* Runs in CF thread, when there're events in FSEventStream */\nstatic void uv__fsevents_event_cb(ConstFSEventStreamRef streamRef,\n                                  void* info,\n                                  size_t numEvents,\n                                  void* eventPaths,\n                                  const FSEventStreamEventFlags eventFlags[],\n                                  const FSEventStreamEventId eventIds[]) {\n  size_t i;\n  int len;\n  char** paths;\n  char* path;\n  char* pos;\n  uv_fs_event_t* handle;\n  QUEUE* q;\n  uv_loop_t* loop;\n  uv__cf_loop_state_t* state;\n  uv__fsevents_event_t* event;\n  QUEUE head;\n\n  loop = info;\n  state = loop->cf_state;\n  assert(state != NULL);\n  paths = eventPaths;\n\n  /* For each handle */\n  uv_mutex_lock(&state->fsevent_mutex);\n  QUEUE_FOREACH(q, &state->fsevent_handles) {\n    handle = QUEUE_DATA(q, uv_fs_event_t, cf_member);\n    QUEUE_INIT(&head);\n\n    /* Process and filter out events */\n    for (i = 0; i < numEvents; i++) {\n      /* Ignore system events */\n      if (eventFlags[i] & kFSEventsSystem)\n        continue;\n\n      path = paths[i];\n      len = strlen(path);\n\n      /* Filter out paths that are outside handle's request */\n      if (strncmp(path, handle->realpath, handle->realpath_len) != 0)\n        continue;\n\n      if (handle->realpath_len > 1 || *handle->realpath != '/') {\n        path += handle->realpath_len;\n        len -= handle->realpath_len;\n\n        /* Skip forward slash */\n        if (*path != '\\0') {\n          path++;\n          len--;\n        }\n      }\n\n#ifdef MAC_OS_X_VERSION_10_7\n      /* Ignore events with path equal to directory itself */\n      if (len == 0)\n        continue;\n#endif /* MAC_OS_X_VERSION_10_7 */\n\n      /* Do not emit events from subdirectories (without option set) */\n      if ((handle->cf_flags & UV_FS_EVENT_RECURSIVE) == 0 && *path != 0) {\n        pos = strchr(path + 1, '/');\n        if (pos != NULL)\n          continue;\n      }\n\n#ifndef MAC_OS_X_VERSION_10_7\n      path = \"\";\n      len = 0;\n#endif /* MAC_OS_X_VERSION_10_7 */\n\n      event = uv__malloc(sizeof(*event) + len);\n      if (event == NULL)\n        break;\n\n      memset(event, 0, sizeof(*event));\n      memcpy(event->path, path, len + 1);\n\n      if ((eventFlags[i] & kFSEventsModified) != 0 &&\n          (eventFlags[i] & kFSEventsRenamed) == 0)\n        event->events = UV_CHANGE;\n      else\n        event->events = UV_RENAME;\n\n      QUEUE_INSERT_TAIL(&head, &event->member);\n    }\n\n    if (!QUEUE_EMPTY(&head))\n      uv__fsevents_push_event(handle, &head, 0);\n  }\n  uv_mutex_unlock(&state->fsevent_mutex);\n}\n\n\n/* Runs in CF thread */\nstatic int uv__fsevents_create_stream(uv_loop_t* loop, CFArrayRef paths) {\n  uv__cf_loop_state_t* state;\n  FSEventStreamContext ctx;\n  FSEventStreamRef ref;\n  CFAbsoluteTime latency;\n  FSEventStreamCreateFlags flags;\n\n  /* Initialize context */\n  ctx.version = 0;\n  ctx.info = loop;\n  ctx.retain = NULL;\n  ctx.release = NULL;\n  ctx.copyDescription = NULL;\n\n  latency = 0.05;\n\n  /* Explanation of selected flags:\n   * 1. NoDefer - without this flag, events that are happening continuously\n   *    (i.e. each event is happening after time interval less than `latency`,\n   *    counted from previous event), will be deferred and passed to callback\n   *    once they'll either fill whole OS buffer, or when this continuous stream\n   *    will stop (i.e. there'll be delay between events, bigger than\n   *    `latency`).\n   *    Specifying this flag will invoke callback after `latency` time passed\n   *    since event.\n   * 2. FileEvents - fire callback for file changes too (by default it is firing\n   *    it only for directory changes).\n   */\n  flags = kFSEventStreamCreateFlagNoDefer | kFSEventStreamCreateFlagFileEvents;\n\n  /*\n   * NOTE: It might sound like a good idea to remember last seen StreamEventId,\n   * but in reality one dir might have last StreamEventId less than, the other,\n   * that is being watched now. Which will cause FSEventStream API to report\n   * changes to files from the past.\n   */\n  ref = pFSEventStreamCreate(NULL,\n                             &uv__fsevents_event_cb,\n                             &ctx,\n                             paths,\n                             kFSEventStreamEventIdSinceNow,\n                             latency,\n                             flags);\n  assert(ref != NULL);\n\n  state = loop->cf_state;\n  pFSEventStreamScheduleWithRunLoop(ref,\n                                    state->loop,\n                                    *pkCFRunLoopDefaultMode);\n  if (!pFSEventStreamStart(ref)) {\n    pFSEventStreamInvalidate(ref);\n    pFSEventStreamRelease(ref);\n    return -EMFILE;\n  }\n\n  state->fsevent_stream = ref;\n  return 0;\n}\n\n\n/* Runs in CF thread */\nstatic void uv__fsevents_destroy_stream(uv_loop_t* loop) {\n  uv__cf_loop_state_t* state;\n\n  state = loop->cf_state;\n\n  if (state->fsevent_stream == NULL)\n    return;\n\n  /* Flush all accumulated events */\n  pFSEventStreamFlushSync(state->fsevent_stream);\n\n  /* Stop emitting events */\n  pFSEventStreamStop(state->fsevent_stream);\n\n  /* Release stream */\n  pFSEventStreamInvalidate(state->fsevent_stream);\n  pFSEventStreamRelease(state->fsevent_stream);\n  state->fsevent_stream = NULL;\n}\n\n\n/* Runs in CF thread, when there're new fsevent handles to add to stream */\nstatic void uv__fsevents_reschedule(uv_fs_event_t* handle,\n                                    uv__cf_loop_signal_type_t type) {\n  uv__cf_loop_state_t* state;\n  QUEUE* q;\n  uv_fs_event_t* curr;\n  CFArrayRef cf_paths;\n  CFStringRef* paths;\n  unsigned int i;\n  int err;\n  unsigned int path_count;\n\n  state = handle->loop->cf_state;\n  paths = NULL;\n  cf_paths = NULL;\n  err = 0;\n  /* NOTE: `i` is used in deallocation loop below */\n  i = 0;\n\n  /* Optimization to prevent O(n^2) time spent when starting to watch\n   * many files simultaneously\n   */\n  uv_mutex_lock(&state->fsevent_mutex);\n  if (state->fsevent_need_reschedule == 0) {\n    uv_mutex_unlock(&state->fsevent_mutex);\n    goto final;\n  }\n  state->fsevent_need_reschedule = 0;\n  uv_mutex_unlock(&state->fsevent_mutex);\n\n  /* Destroy previous FSEventStream */\n  uv__fsevents_destroy_stream(handle->loop);\n\n  /* Any failure below will be a memory failure */\n  err = -ENOMEM;\n\n  /* Create list of all watched paths */\n  uv_mutex_lock(&state->fsevent_mutex);\n  path_count = state->fsevent_handle_count;\n  if (path_count != 0) {\n    paths = uv__malloc(sizeof(*paths) * path_count);\n    if (paths == NULL) {\n      uv_mutex_unlock(&state->fsevent_mutex);\n      goto final;\n    }\n\n    q = &state->fsevent_handles;\n    for (; i < path_count; i++) {\n      q = QUEUE_NEXT(q);\n      assert(q != &state->fsevent_handles);\n      curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);\n\n      assert(curr->realpath != NULL);\n      paths[i] =\n          pCFStringCreateWithFileSystemRepresentation(NULL, curr->realpath);\n      if (paths[i] == NULL) {\n        uv_mutex_unlock(&state->fsevent_mutex);\n        goto final;\n      }\n    }\n  }\n  uv_mutex_unlock(&state->fsevent_mutex);\n  err = 0;\n\n  if (path_count != 0) {\n    /* Create new FSEventStream */\n    cf_paths = pCFArrayCreate(NULL, (const void**) paths, path_count, NULL);\n    if (cf_paths == NULL) {\n      err = -ENOMEM;\n      goto final;\n    }\n    err = uv__fsevents_create_stream(handle->loop, cf_paths);\n  }\n\nfinal:\n  /* Deallocate all paths in case of failure */\n  if (err != 0) {\n    if (cf_paths == NULL) {\n      while (i != 0)\n        pCFRelease(paths[--i]);\n      uv__free(paths);\n    } else {\n      /* CFArray takes ownership of both strings and original C-array */\n      pCFRelease(cf_paths);\n    }\n\n    /* Broadcast error to all handles */\n    uv_mutex_lock(&state->fsevent_mutex);\n    QUEUE_FOREACH(q, &state->fsevent_handles) {\n      curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);\n      uv__fsevents_push_event(curr, NULL, err);\n    }\n    uv_mutex_unlock(&state->fsevent_mutex);\n  }\n\n  /*\n   * Main thread will block until the removal of handle from the list,\n   * we must tell it when we're ready.\n   *\n   * NOTE: This is coupled with `uv_sem_wait()` in `uv__fsevents_close`\n   */\n  if (type == kUVCFLoopSignalClosing)\n    uv_sem_post(&state->fsevent_sem);\n}\n\n\nstatic int uv__fsevents_global_init(void) {\n  static pthread_mutex_t global_init_mutex = PTHREAD_MUTEX_INITIALIZER;\n  static void* core_foundation_handle;\n  static void* core_services_handle;\n  int err;\n\n  err = 0;\n  pthread_mutex_lock(&global_init_mutex);\n  if (core_foundation_handle != NULL)\n    goto out;\n\n  /* The libraries are never unloaded because we currently don't have a good\n   * mechanism for keeping a reference count. It's unlikely to be an issue\n   * but if it ever becomes one, we can turn the dynamic library handles into\n   * per-event loop properties and have the dynamic linker keep track for us.\n   */\n  err = -ENOSYS;\n  core_foundation_handle = dlopen(\"/System/Library/Frameworks/\"\n                                  \"CoreFoundation.framework/\"\n                                  \"Versions/A/CoreFoundation\",\n                                  RTLD_LAZY | RTLD_LOCAL);\n  if (core_foundation_handle == NULL)\n    goto out;\n\n  core_services_handle = dlopen(\"/System/Library/Frameworks/\"\n                                \"CoreServices.framework/\"\n                                \"Versions/A/CoreServices\",\n                                RTLD_LAZY | RTLD_LOCAL);\n  if (core_services_handle == NULL)\n    goto out;\n\n  err = -ENOENT;\n#define V(handle, symbol)                                                     \\\n  do {                                                                        \\\n    *(void **)(&p ## symbol) = dlsym((handle), #symbol);                      \\\n    if (p ## symbol == NULL)                                                  \\\n      goto out;                                                               \\\n  }                                                                           \\\n  while (0)\n  V(core_foundation_handle, CFArrayCreate);\n  V(core_foundation_handle, CFRelease);\n  V(core_foundation_handle, CFRunLoopAddSource);\n  V(core_foundation_handle, CFRunLoopGetCurrent);\n  V(core_foundation_handle, CFRunLoopRemoveSource);\n  V(core_foundation_handle, CFRunLoopRun);\n  V(core_foundation_handle, CFRunLoopSourceCreate);\n  V(core_foundation_handle, CFRunLoopSourceSignal);\n  V(core_foundation_handle, CFRunLoopStop);\n  V(core_foundation_handle, CFRunLoopWakeUp);\n  V(core_foundation_handle, CFStringCreateWithFileSystemRepresentation);\n  V(core_foundation_handle, CFStringGetSystemEncoding);\n  V(core_foundation_handle, kCFRunLoopDefaultMode);\n  V(core_services_handle, FSEventStreamCreate);\n  V(core_services_handle, FSEventStreamFlushSync);\n  V(core_services_handle, FSEventStreamInvalidate);\n  V(core_services_handle, FSEventStreamRelease);\n  V(core_services_handle, FSEventStreamScheduleWithRunLoop);\n  V(core_services_handle, FSEventStreamStart);\n  V(core_services_handle, FSEventStreamStop);\n#undef V\n  err = 0;\n\nout:\n  if (err && core_services_handle != NULL) {\n    dlclose(core_services_handle);\n    core_services_handle = NULL;\n  }\n\n  if (err && core_foundation_handle != NULL) {\n    dlclose(core_foundation_handle);\n    core_foundation_handle = NULL;\n  }\n\n  pthread_mutex_unlock(&global_init_mutex);\n  return err;\n}\n\n\n/* Runs in UV loop */\nstatic int uv__fsevents_loop_init(uv_loop_t* loop) {\n  CFRunLoopSourceContext ctx;\n  uv__cf_loop_state_t* state;\n  pthread_attr_t attr_storage;\n  pthread_attr_t* attr;\n  int err;\n\n  if (loop->cf_state != NULL)\n    return 0;\n\n  err = uv__fsevents_global_init();\n  if (err)\n    return err;\n\n  state = uv__calloc(1, sizeof(*state));\n  if (state == NULL)\n    return -ENOMEM;\n\n  err = uv_mutex_init(&loop->cf_mutex);\n  if (err)\n    goto fail_mutex_init;\n\n  err = uv_sem_init(&loop->cf_sem, 0);\n  if (err)\n    goto fail_sem_init;\n\n  QUEUE_INIT(&loop->cf_signals);\n\n  err = uv_sem_init(&state->fsevent_sem, 0);\n  if (err)\n    goto fail_fsevent_sem_init;\n\n  err = uv_mutex_init(&state->fsevent_mutex);\n  if (err)\n    goto fail_fsevent_mutex_init;\n\n  QUEUE_INIT(&state->fsevent_handles);\n  state->fsevent_need_reschedule = 0;\n  state->fsevent_handle_count = 0;\n\n  memset(&ctx, 0, sizeof(ctx));\n  ctx.info = loop;\n  ctx.perform = uv__cf_loop_cb;\n  state->signal_source = pCFRunLoopSourceCreate(NULL, 0, &ctx);\n  if (state->signal_source == NULL) {\n    err = -ENOMEM;\n    goto fail_signal_source_create;\n  }\n\n  /* In the unlikely event that pthread_attr_init() fails, create the thread\n   * with the default stack size. We'll use a little more address space but\n   * that in itself is not a fatal error.\n   */\n  attr = &attr_storage;\n  if (pthread_attr_init(attr))\n    attr = NULL;\n\n  if (attr != NULL)\n    if (pthread_attr_setstacksize(attr, 4 * PTHREAD_STACK_MIN))\n      abort();\n\n  loop->cf_state = state;\n\n  /* uv_thread_t is an alias for pthread_t. */\n  err = -pthread_create(&loop->cf_thread, attr, uv__cf_loop_runner, loop);\n\n  if (attr != NULL)\n    pthread_attr_destroy(attr);\n\n  if (err)\n    goto fail_thread_create;\n\n  /* Synchronize threads */\n  uv_sem_wait(&loop->cf_sem);\n  return 0;\n\nfail_thread_create:\n  loop->cf_state = NULL;\n\nfail_signal_source_create:\n  uv_mutex_destroy(&state->fsevent_mutex);\n\nfail_fsevent_mutex_init:\n  uv_sem_destroy(&state->fsevent_sem);\n\nfail_fsevent_sem_init:\n  uv_sem_destroy(&loop->cf_sem);\n\nfail_sem_init:\n  uv_mutex_destroy(&loop->cf_mutex);\n\nfail_mutex_init:\n  uv__free(state);\n  return err;\n}\n\n\n/* Runs in UV loop */\nvoid uv__fsevents_loop_delete(uv_loop_t* loop) {\n  uv__cf_loop_signal_t* s;\n  uv__cf_loop_state_t* state;\n  QUEUE* q;\n\n  if (loop->cf_state == NULL)\n    return;\n\n  if (uv__cf_loop_signal(loop, NULL, kUVCFLoopSignalRegular) != 0)\n    abort();\n\n  uv_thread_join(&loop->cf_thread);\n  uv_sem_destroy(&loop->cf_sem);\n  uv_mutex_destroy(&loop->cf_mutex);\n\n  /* Free any remaining data */\n  while (!QUEUE_EMPTY(&loop->cf_signals)) {\n    q = QUEUE_HEAD(&loop->cf_signals);\n    s = QUEUE_DATA(q, uv__cf_loop_signal_t, member);\n    QUEUE_REMOVE(q);\n    uv__free(s);\n  }\n\n  /* Destroy state */\n  state = loop->cf_state;\n  uv_sem_destroy(&state->fsevent_sem);\n  uv_mutex_destroy(&state->fsevent_mutex);\n  pCFRelease(state->signal_source);\n  uv__free(state);\n  loop->cf_state = NULL;\n}\n\n\n/* Runs in CF thread. This is the CF loop's body */\nstatic void* uv__cf_loop_runner(void* arg) {\n  uv_loop_t* loop;\n  uv__cf_loop_state_t* state;\n\n  loop = arg;\n  state = loop->cf_state;\n  state->loop = pCFRunLoopGetCurrent();\n\n  pCFRunLoopAddSource(state->loop,\n                      state->signal_source,\n                      *pkCFRunLoopDefaultMode);\n\n  uv_sem_post(&loop->cf_sem);\n\n  pCFRunLoopRun();\n  pCFRunLoopRemoveSource(state->loop,\n                         state->signal_source,\n                         *pkCFRunLoopDefaultMode);\n\n  return NULL;\n}\n\n\n/* Runs in CF thread, executed after `uv__cf_loop_signal()` */\nstatic void uv__cf_loop_cb(void* arg) {\n  uv_loop_t* loop;\n  uv__cf_loop_state_t* state;\n  QUEUE* item;\n  QUEUE split_head;\n  uv__cf_loop_signal_t* s;\n\n  loop = arg;\n  state = loop->cf_state;\n\n  uv_mutex_lock(&loop->cf_mutex);\n  QUEUE_MOVE(&loop->cf_signals, &split_head);\n  uv_mutex_unlock(&loop->cf_mutex);\n\n  while (!QUEUE_EMPTY(&split_head)) {\n    item = QUEUE_HEAD(&split_head);\n    QUEUE_REMOVE(item);\n\n    s = QUEUE_DATA(item, uv__cf_loop_signal_t, member);\n\n    /* This was a termination signal */\n    if (s->handle == NULL)\n      pCFRunLoopStop(state->loop);\n    else\n      uv__fsevents_reschedule(s->handle, s->type);\n\n    uv__free(s);\n  }\n}\n\n\n/* Runs in UV loop to notify CF thread */\nint uv__cf_loop_signal(uv_loop_t* loop,\n                       uv_fs_event_t* handle,\n                       uv__cf_loop_signal_type_t type) {\n  uv__cf_loop_signal_t* item;\n  uv__cf_loop_state_t* state;\n\n  item = uv__malloc(sizeof(*item));\n  if (item == NULL)\n    return -ENOMEM;\n\n  item->handle = handle;\n  item->type = type;\n\n  uv_mutex_lock(&loop->cf_mutex);\n  QUEUE_INSERT_TAIL(&loop->cf_signals, &item->member);\n  uv_mutex_unlock(&loop->cf_mutex);\n\n  state = loop->cf_state;\n  assert(state != NULL);\n  pCFRunLoopSourceSignal(state->signal_source);\n  pCFRunLoopWakeUp(state->loop);\n\n  return 0;\n}\n\n\n/* Runs in UV loop to initialize handle */\nint uv__fsevents_init(uv_fs_event_t* handle) {\n  int err;\n  uv__cf_loop_state_t* state;\n\n  err = uv__fsevents_loop_init(handle->loop);\n  if (err)\n    return err;\n\n  /* Get absolute path to file */\n  handle->realpath = realpath(handle->path, NULL);\n  if (handle->realpath == NULL)\n    return -errno;\n  handle->realpath_len = strlen(handle->realpath);\n\n  /* Initialize event queue */\n  QUEUE_INIT(&handle->cf_events);\n  handle->cf_error = 0;\n\n  /*\n   * Events will occur in other thread.\n   * Initialize callback for getting them back into event loop's thread\n   */\n  handle->cf_cb = uv__malloc(sizeof(*handle->cf_cb));\n  if (handle->cf_cb == NULL) {\n    err = -ENOMEM;\n    goto fail_cf_cb_malloc;\n  }\n\n  handle->cf_cb->data = handle;\n  uv_async_init(handle->loop, handle->cf_cb, uv__fsevents_cb);\n  handle->cf_cb->flags |= UV__HANDLE_INTERNAL;\n  uv_unref((uv_handle_t*) handle->cf_cb);\n\n  err = uv_mutex_init(&handle->cf_mutex);\n  if (err)\n    goto fail_cf_mutex_init;\n\n  /* Insert handle into the list */\n  state = handle->loop->cf_state;\n  uv_mutex_lock(&state->fsevent_mutex);\n  QUEUE_INSERT_TAIL(&state->fsevent_handles, &handle->cf_member);\n  state->fsevent_handle_count++;\n  state->fsevent_need_reschedule = 1;\n  uv_mutex_unlock(&state->fsevent_mutex);\n\n  /* Reschedule FSEventStream */\n  assert(handle != NULL);\n  err = uv__cf_loop_signal(handle->loop, handle, kUVCFLoopSignalRegular);\n  if (err)\n    goto fail_loop_signal;\n\n  return 0;\n\nfail_loop_signal:\n  uv_mutex_destroy(&handle->cf_mutex);\n\nfail_cf_mutex_init:\n  uv__free(handle->cf_cb);\n  handle->cf_cb = NULL;\n\nfail_cf_cb_malloc:\n  uv__free(handle->realpath);\n  handle->realpath = NULL;\n  handle->realpath_len = 0;\n\n  return err;\n}\n\n\n/* Runs in UV loop to de-initialize handle */\nint uv__fsevents_close(uv_fs_event_t* handle) {\n  int err;\n  uv__cf_loop_state_t* state;\n\n  if (handle->cf_cb == NULL)\n    return -EINVAL;\n\n  /* Remove handle from  the list */\n  state = handle->loop->cf_state;\n  uv_mutex_lock(&state->fsevent_mutex);\n  QUEUE_REMOVE(&handle->cf_member);\n  state->fsevent_handle_count--;\n  state->fsevent_need_reschedule = 1;\n  uv_mutex_unlock(&state->fsevent_mutex);\n\n  /* Reschedule FSEventStream */\n  assert(handle != NULL);\n  err = uv__cf_loop_signal(handle->loop, handle, kUVCFLoopSignalClosing);\n  if (err)\n    return -err;\n\n  /* Wait for deinitialization */\n  uv_sem_wait(&state->fsevent_sem);\n\n  uv_close((uv_handle_t*) handle->cf_cb, (uv_close_cb) uv__free);\n  handle->cf_cb = NULL;\n\n  /* Free data in queue */\n  UV__FSEVENTS_PROCESS(handle, {\n    /* NOP */\n  });\n\n  uv_mutex_destroy(&handle->cf_mutex);\n  uv__free(handle->realpath);\n  handle->realpath = NULL;\n  handle->realpath_len = 0;\n\n  return 0;\n}\n\n#endif /* TARGET_OS_IPHONE */\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/src/unix/dl.c": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#include \"uv.h\"\n#include \"internal.h\"\n\n#include <dlfcn.h>\n#include <errno.h>\n#include <string.h>\n#include <locale.h>\n\nstatic int uv__dlerror(uv_lib_t* lib);\n\n\nint uv_dlopen(const char* filename, uv_lib_t* lib) {\n  dlerror(); /* Reset error status. */\n  lib->errmsg = NULL;\n  lib->handle = dlopen(filename, RTLD_LAZY);\n  return lib->handle ? 0 : uv__dlerror(lib);\n}\n\n\nvoid uv_dlclose(uv_lib_t* lib) {\n  uv__free(lib->errmsg);\n  lib->errmsg = NULL;\n\n  if (lib->handle) {\n    /* Ignore errors. No good way to signal them without leaking memory. */\n    dlclose(lib->handle);\n    lib->handle = NULL;\n  }\n}\n\n\nint uv_dlsym(uv_lib_t* lib, const char* name, void** ptr) {\n  dlerror(); /* Reset error status. */\n  *ptr = dlsym(lib->handle, name);\n  return uv__dlerror(lib);\n}\n\n\nconst char* uv_dlerror(const uv_lib_t* lib) {\n  return lib->errmsg ? lib->errmsg : \"no error\";\n}\n\n\nstatic int uv__dlerror(uv_lib_t* lib) {\n  const char* errmsg;\n\n  uv__free(lib->errmsg);\n\n  errmsg = dlerror();\n\n  if (errmsg) {\n    lib->errmsg = uv__strdup(errmsg);\n    return -1;\n  }\n  else {\n    lib->errmsg = NULL;\n    return 0;\n  }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/include/uv-win.h": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#ifndef _WIN32_WINNT\n# define _WIN32_WINNT   0x0502\n#endif\n\n#if !defined(_SSIZE_T_) && !defined(_SSIZE_T_DEFINED)\ntypedef intptr_t ssize_t;\n# define _SSIZE_T_\n# define _SSIZE_T_DEFINED\n#endif\n\n#include <winsock2.h>\n\n#if defined(__MINGW32__) && !defined(__MINGW64_VERSION_MAJOR)\ntypedef struct pollfd {\n  SOCKET fd;\n  short  events;\n  short  revents;\n} WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;\n#endif\n\n#ifndef LOCALE_INVARIANT\n# define LOCALE_INVARIANT 0x007f\n#endif\n\n#include <mswsock.h>\n#include <ws2tcpip.h>\n#include <windows.h>\n\n#include <process.h>\n#include <signal.h>\n#include <sys/stat.h>\n\n#if defined(_MSC_VER) && _MSC_VER < 1600\n# include \"stdint-msvc2008.h\"\n#else\n# include <stdint.h>\n#endif\n\n#include \"tree.h\"\n#include \"uv-threadpool.h\"\n\n#define MAX_PIPENAME_LEN 256\n\n#ifndef S_IFLNK\n# define S_IFLNK 0xA000\n#endif\n\n/* Additional signals supported by uv_signal and or uv_kill. The CRT defines\n * the following signals already:\n *\n *   #define SIGINT           2\n *   #define SIGILL           4\n *   #define SIGABRT_COMPAT   6\n *   #define SIGFPE           8\n *   #define SIGSEGV         11\n *   #define SIGTERM         15\n *   #define SIGBREAK        21\n *   #define SIGABRT         22\n *\n * The additional signals have values that are common on other Unix\n * variants (Linux and Darwin)\n */\n#define SIGHUP                1\n#define SIGKILL               9\n#define SIGWINCH             28\n\n/* The CRT defines SIGABRT_COMPAT as 6, which equals SIGABRT on many */\n/* unix-like platforms. However MinGW doesn't define it, so we do. */\n#ifndef SIGABRT_COMPAT\n# define SIGABRT_COMPAT       6\n#endif\n\n/*\n * Guids and typedefs for winsock extension functions\n * Mingw32 doesn't have these :-(\n */\n#ifndef WSAID_ACCEPTEX\n# define WSAID_ACCEPTEX                                                       \\\n         {0xb5367df1, 0xcbac, 0x11cf,                                         \\\n         {0x95, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}\n\n# define WSAID_CONNECTEX                                                      \\\n         {0x25a207b9, 0xddf3, 0x4660,                                         \\\n         {0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e}}\n\n# define WSAID_GETACCEPTEXSOCKADDRS                                           \\\n         {0xb5367df2, 0xcbac, 0x11cf,                                         \\\n         {0x95, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}\n\n# define WSAID_DISCONNECTEX                                                   \\\n         {0x7fda2e11, 0x8630, 0x436f,                                         \\\n         {0xa0, 0x31, 0xf5, 0x36, 0xa6, 0xee, 0xc1, 0x57}}\n\n# define WSAID_TRANSMITFILE                                                   \\\n         {0xb5367df0, 0xcbac, 0x11cf,                                         \\\n         {0x95, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}\n\n  typedef BOOL PASCAL (*LPFN_ACCEPTEX)\n                      (SOCKET sListenSocket,\n                       SOCKET sAcceptSocket,\n                       PVOID lpOutputBuffer,\n                       DWORD dwReceiveDataLength,\n                       DWORD dwLocalAddressLength,\n                       DWORD dwRemoteAddressLength,\n                       LPDWORD lpdwBytesReceived,\n                       LPOVERLAPPED lpOverlapped);\n\n  typedef BOOL PASCAL (*LPFN_CONNECTEX)\n                      (SOCKET s,\n                       const struct sockaddr* name,\n                       int namelen,\n                       PVOID lpSendBuffer,\n                       DWORD dwSendDataLength,\n                       LPDWORD lpdwBytesSent,\n                       LPOVERLAPPED lpOverlapped);\n\n  typedef void PASCAL (*LPFN_GETACCEPTEXSOCKADDRS)\n                      (PVOID lpOutputBuffer,\n                       DWORD dwReceiveDataLength,\n                       DWORD dwLocalAddressLength,\n                       DWORD dwRemoteAddressLength,\n                       LPSOCKADDR* LocalSockaddr,\n                       LPINT LocalSockaddrLength,\n                       LPSOCKADDR* RemoteSockaddr,\n                       LPINT RemoteSockaddrLength);\n\n  typedef BOOL PASCAL (*LPFN_DISCONNECTEX)\n                      (SOCKET hSocket,\n                       LPOVERLAPPED lpOverlapped,\n                       DWORD dwFlags,\n                       DWORD reserved);\n\n  typedef BOOL PASCAL (*LPFN_TRANSMITFILE)\n                      (SOCKET hSocket,\n                       HANDLE hFile,\n                       DWORD nNumberOfBytesToWrite,\n                       DWORD nNumberOfBytesPerSend,\n                       LPOVERLAPPED lpOverlapped,\n                       LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,\n                       DWORD dwFlags);\n\n  typedef PVOID RTL_SRWLOCK;\n  typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;\n#endif\n\ntypedef int (WSAAPI* LPFN_WSARECV)\n            (SOCKET socket,\n             LPWSABUF buffers,\n             DWORD buffer_count,\n             LPDWORD bytes,\n             LPDWORD flags,\n             LPWSAOVERLAPPED overlapped,\n             LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine);\n\ntypedef int (WSAAPI* LPFN_WSARECVFROM)\n            (SOCKET socket,\n             LPWSABUF buffers,\n             DWORD buffer_count,\n             LPDWORD bytes,\n             LPDWORD flags,\n             struct sockaddr* addr,\n             LPINT addr_len,\n             LPWSAOVERLAPPED overlapped,\n             LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine);\n\n#ifndef _NTDEF_\n  typedef LONG NTSTATUS;\n  typedef NTSTATUS *PNTSTATUS;\n#endif\n\n#ifndef RTL_CONDITION_VARIABLE_INIT\n  typedef PVOID CONDITION_VARIABLE, *PCONDITION_VARIABLE;\n#endif\n\ntypedef struct _AFD_POLL_HANDLE_INFO {\n  HANDLE Handle;\n  ULONG Events;\n  NTSTATUS Status;\n} AFD_POLL_HANDLE_INFO, *PAFD_POLL_HANDLE_INFO;\n\ntypedef struct _AFD_POLL_INFO {\n  LARGE_INTEGER Timeout;\n  ULONG NumberOfHandles;\n  ULONG Exclusive;\n  AFD_POLL_HANDLE_INFO Handles[1];\n} AFD_POLL_INFO, *PAFD_POLL_INFO;\n\n#define UV_MSAFD_PROVIDER_COUNT 3\n\n\n/**\n * It should be possible to cast uv_buf_t[] to WSABUF[]\n * see http://msdn.microsoft.com/en-us/library/ms741542(v=vs.85).aspx\n */\ntypedef struct uv_buf_t {\n  ULONG len;\n  char* base;\n} uv_buf_t;\n\ntypedef int uv_file;\ntypedef SOCKET uv_os_sock_t;\ntypedef HANDLE uv_os_fd_t;\n\ntypedef HANDLE uv_thread_t;\n\ntypedef HANDLE uv_sem_t;\n\ntypedef CRITICAL_SECTION uv_mutex_t;\n\n/* This condition variable implementation is based on the SetEvent solution\n * (section 3.2) at http://www.cs.wustl.edu/~schmidt/win32-cv-1.html\n * We could not use the SignalObjectAndWait solution (section 3.4) because\n * it want the 2nd argument (type uv_mutex_t) of uv_cond_wait() and\n * uv_cond_timedwait() to be HANDLEs, but we use CRITICAL_SECTIONs.\n */\n\ntypedef union {\n  CONDITION_VARIABLE cond_var;\n  struct {\n    unsigned int waiters_count;\n    CRITICAL_SECTION waiters_count_lock;\n    HANDLE signal_event;\n    HANDLE broadcast_event;\n  } fallback;\n} uv_cond_t;\n\ntypedef union {\n  struct {\n    unsigned int num_readers_;\n    CRITICAL_SECTION num_readers_lock_;\n    HANDLE write_semaphore_;\n  } state_;\n  /* TODO: remove me in v2.x. */\n  struct {\n    SRWLOCK unused_;\n  } unused1_;\n  /* TODO: remove me in v2.x. */\n  struct {\n    uv_mutex_t unused1_;\n    uv_mutex_t unused2_;\n  } unused2_;\n} uv_rwlock_t;\n\ntypedef struct {\n  unsigned int n;\n  unsigned int count;\n  uv_mutex_t mutex;\n  uv_sem_t turnstile1;\n  uv_sem_t turnstile2;\n} uv_barrier_t;\n\ntypedef struct {\n  DWORD tls_index;\n} uv_key_t;\n\n#define UV_ONCE_INIT { 0, NULL }\n\ntypedef struct uv_once_s {\n  unsigned char ran;\n  HANDLE event;\n} uv_once_t;\n\n/* Platform-specific definitions for uv_spawn support. */\ntypedef unsigned char uv_uid_t;\ntypedef unsigned char uv_gid_t;\n\ntypedef struct uv__dirent_s {\n  int d_type;\n  char d_name[1];\n} uv__dirent_t;\n\n#define HAVE_DIRENT_TYPES\n#define UV__DT_DIR     UV_DIRENT_DIR\n#define UV__DT_FILE    UV_DIRENT_FILE\n#define UV__DT_LINK    UV_DIRENT_LINK\n#define UV__DT_FIFO    UV_DIRENT_FIFO\n#define UV__DT_SOCKET  UV_DIRENT_SOCKET\n#define UV__DT_CHAR    UV_DIRENT_CHAR\n#define UV__DT_BLOCK   UV_DIRENT_BLOCK\n\n/* Platform-specific definitions for uv_dlopen support. */\n#define UV_DYNAMIC FAR WINAPI\ntypedef struct {\n  HMODULE handle;\n  char* errmsg;\n} uv_lib_t;\n\nRB_HEAD(uv_timer_tree_s, uv_timer_s);\n\n#define UV_LOOP_PRIVATE_FIELDS                                                \\\n    /* The loop's I/O completion port */                                      \\\n  HANDLE iocp;                                                                \\\n  /* The current time according to the event loop. in msecs. */               \\\n  uint64_t time;                                                              \\\n  /* Tail of a single-linked circular queue of pending reqs. If the queue */  \\\n  /* is empty, tail_ is NULL. If there is only one item, */                   \\\n  /* tail_->next_req == tail_ */                                              \\\n  uv_req_t* pending_reqs_tail;                                                \\\n  /* Head of a single-linked list of closed handles */                        \\\n  uv_handle_t* endgame_handles;                                               \\\n  /* The head of the timers tree */                                           \\\n  struct uv_timer_tree_s timers;                                              \\\n    /* Lists of active loop (prepare / check / idle) watchers */              \\\n  uv_prepare_t* prepare_handles;                                              \\\n  uv_check_t* check_handles;                                                  \\\n  uv_idle_t* idle_handles;                                                    \\\n  /* This pointer will refer to the prepare/check/idle handle whose */        \\\n  /* callback is scheduled to be called next. This is needed to allow */      \\\n  /* safe removal from one of the lists above while that list being */        \\\n  /* iterated over. */                                                        \\\n  uv_prepare_t* next_prepare_handle;                                          \\\n  uv_check_t* next_check_handle;                                              \\\n  uv_idle_t* next_idle_handle;                                                \\\n  /* This handle holds the peer sockets for the fast variant of uv_poll_t */  \\\n  SOCKET poll_peer_sockets[UV_MSAFD_PROVIDER_COUNT];                          \\\n  /* Counter to keep track of active tcp streams */                           \\\n  unsigned int active_tcp_streams;                                            \\\n  /* Counter to keep track of active udp streams */                           \\\n  unsigned int active_udp_streams;                                            \\\n  /* Counter to started timer */                                              \\\n  uint64_t timer_counter;                                                     \\\n  /* Threadpool */                                                            \\\n  void* wq[2];                                                                \\\n  uv_mutex_t wq_mutex;                                                        \\\n  uv_async_t wq_async;\n\n#define UV_REQ_TYPE_PRIVATE                                                   \\\n  /* TODO: remove the req suffix */                                           \\\n  UV_ACCEPT,                                                                  \\\n  UV_FS_EVENT_REQ,                                                            \\\n  UV_POLL_REQ,                                                                \\\n  UV_PROCESS_EXIT,                                                            \\\n  UV_READ,                                                                    \\\n  UV_UDP_RECV,                                                                \\\n  UV_WAKEUP,                                                                  \\\n  UV_SIGNAL_REQ,\n\n#define UV_REQ_PRIVATE_FIELDS                                                 \\\n  union {                                                                     \\\n    /* Used by I/O operations */                                              \\\n    struct {                                                                  \\\n      OVERLAPPED overlapped;                                                  \\\n      size_t queued_bytes;                                                    \\\n    } io;                                                                     \\\n  } u;                                                                        \\\n  struct uv_req_s* next_req;\n\n#define UV_WRITE_PRIVATE_FIELDS                                               \\\n  int ipc_header;                                                             \\\n  uv_buf_t write_buffer;                                                      \\\n  HANDLE event_handle;                                                        \\\n  HANDLE wait_handle;\n\n#define UV_CONNECT_PRIVATE_FIELDS                                             \\\n  /* empty */\n\n#define UV_SHUTDOWN_PRIVATE_FIELDS                                            \\\n  /* empty */\n\n#define UV_UDP_SEND_PRIVATE_FIELDS                                            \\\n  /* empty */\n\n#define UV_PRIVATE_REQ_TYPES                                                  \\\n  typedef struct uv_pipe_accept_s {                                           \\\n    UV_REQ_FIELDS                                                             \\\n    HANDLE pipeHandle;                                                        \\\n    struct uv_pipe_accept_s* next_pending;                                    \\\n  } uv_pipe_accept_t;                                                         \\\n                                                                              \\\n  typedef struct uv_tcp_accept_s {                                            \\\n    UV_REQ_FIELDS                                                             \\\n    SOCKET accept_socket;                                                     \\\n    char accept_buffer[sizeof(struct sockaddr_storage) * 2 + 32];             \\\n    HANDLE event_handle;                                                      \\\n    HANDLE wait_handle;                                                       \\\n    struct uv_tcp_accept_s* next_pending;                                     \\\n  } uv_tcp_accept_t;                                                          \\\n                                                                              \\\n  typedef struct uv_read_s {                                                  \\\n    UV_REQ_FIELDS                                                             \\\n    HANDLE event_handle;                                                      \\\n    HANDLE wait_handle;                                                       \\\n  } uv_read_t;\n\n#define uv_stream_connection_fields                                           \\\n  unsigned int write_reqs_pending;                                            \\\n  uv_shutdown_t* shutdown_req;\n\n#define uv_stream_server_fields                                               \\\n  uv_connection_cb connection_cb;\n\n#define UV_STREAM_PRIVATE_FIELDS                                              \\\n  unsigned int reqs_pending;                                                  \\\n  int activecnt;                                                              \\\n  uv_read_t read_req;                                                         \\\n  union {                                                                     \\\n    struct { uv_stream_connection_fields } conn;                              \\\n    struct { uv_stream_server_fields     } serv;                              \\\n  } stream;\n\n#define uv_tcp_server_fields                                                  \\\n  uv_tcp_accept_t* accept_reqs;                                               \\\n  unsigned int processed_accepts;                                             \\\n  uv_tcp_accept_t* pending_accepts;                                           \\\n  LPFN_ACCEPTEX func_acceptex;\n\n#define uv_tcp_connection_fields                                              \\\n  uv_buf_t read_buffer;                                                       \\\n  LPFN_CONNECTEX func_connectex;\n\n#define UV_TCP_PRIVATE_FIELDS                                                 \\\n  SOCKET socket;                                                              \\\n  int delayed_error;                                                          \\\n  union {                                                                     \\\n    struct { uv_tcp_server_fields } serv;                                     \\\n    struct { uv_tcp_connection_fields } conn;                                 \\\n  } tcp;\n\n#define UV_UDP_PRIVATE_FIELDS                                                 \\\n  SOCKET socket;                                                              \\\n  unsigned int reqs_pending;                                                  \\\n  int activecnt;                                                              \\\n  uv_req_t recv_req;                                                          \\\n  uv_buf_t recv_buffer;                                                       \\\n  struct sockaddr_storage recv_from;                                          \\\n  int recv_from_len;                                                          \\\n  uv_udp_recv_cb recv_cb;                                                     \\\n  uv_alloc_cb alloc_cb;                                                       \\\n  LPFN_WSARECV func_wsarecv;                                                  \\\n  LPFN_WSARECVFROM func_wsarecvfrom;\n\n#define uv_pipe_server_fields                                                 \\\n  int pending_instances;                                                      \\\n  uv_pipe_accept_t* accept_reqs;                                              \\\n  uv_pipe_accept_t* pending_accepts;\n\n#define uv_pipe_connection_fields                                             \\\n  uv_timer_t* eof_timer;                                                      \\\n  uv_write_t ipc_header_write_req;                                            \\\n  int ipc_pid;                                                                \\\n  uint64_t remaining_ipc_rawdata_bytes;                                       \\\n  struct {                                                                    \\\n    void* queue[2];                                                           \\\n    int queue_len;                                                            \\\n  } pending_ipc_info;                                                         \\\n  uv_write_t* non_overlapped_writes_tail;                                     \\\n  uv_mutex_t readfile_mutex;                                                  \\\n  volatile HANDLE readfile_thread;\n\n#define UV_PIPE_PRIVATE_FIELDS                                                \\\n  HANDLE handle;                                                              \\\n  WCHAR* name;                                                                \\\n  union {                                                                     \\\n    struct { uv_pipe_server_fields } serv;                                    \\\n    struct { uv_pipe_connection_fields } conn;                                \\\n  } pipe;\n\n/* TODO: put the parser states in an union - TTY handles are always */\n/* half-duplex so read-state can safely overlap write-state. */\n#define UV_TTY_PRIVATE_FIELDS                                                 \\\n  HANDLE handle;                                                              \\\n  union {                                                                     \\\n    struct {                                                                  \\\n      /* Used for readable TTY handles */                                     \\\n      /* TODO: remove me in v2.x. */                                          \\\n      HANDLE unused_;                                                         \\\n      uv_buf_t read_line_buffer;                                              \\\n      HANDLE read_raw_wait;                                                   \\\n      /* Fields used for translating win keystrokes into vt100 characters */  \\\n      char last_key[8];                                                       \\\n      unsigned char last_key_offset;                                          \\\n      unsigned char last_key_len;                                             \\\n      WCHAR last_utf16_high_surrogate;                                        \\\n      INPUT_RECORD last_input_record;                                         \\\n    } rd;                                                                     \\\n    struct {                                                                  \\\n      /* Used for writable TTY handles */                                     \\\n      /* utf8-to-utf16 conversion state */                                    \\\n      unsigned int utf8_codepoint;                                            \\\n      unsigned char utf8_bytes_left;                                          \\\n      /* eol conversion state */                                              \\\n      unsigned char previous_eol;                                             \\\n      /* ansi parser state */                                                 \\\n      unsigned char ansi_parser_state;                                        \\\n      unsigned char ansi_csi_argc;                                            \\\n      unsigned short ansi_csi_argv[4];                                        \\\n      COORD saved_position;                                                   \\\n      WORD saved_attributes;                                                  \\\n    } wr;                                                                     \\\n  } tty;\n\n#define UV_POLL_PRIVATE_FIELDS                                                \\\n  SOCKET socket;                                                              \\\n  /* Used in fast mode */                                                     \\\n  SOCKET peer_socket;                                                         \\\n  AFD_POLL_INFO afd_poll_info_1;                                              \\\n  AFD_POLL_INFO afd_poll_info_2;                                              \\\n  /* Used in fast and slow mode. */                                           \\\n  uv_req_t poll_req_1;                                                        \\\n  uv_req_t poll_req_2;                                                        \\\n  unsigned char submitted_events_1;                                           \\\n  unsigned char submitted_events_2;                                           \\\n  unsigned char mask_events_1;                                                \\\n  unsigned char mask_events_2;                                                \\\n  unsigned char events;\n\n#define UV_TIMER_PRIVATE_FIELDS                                               \\\n  RB_ENTRY(uv_timer_s) tree_entry;                                            \\\n  uint64_t due;                                                               \\\n  uint64_t repeat;                                                            \\\n  uint64_t start_id;                                                          \\\n  uv_timer_cb timer_cb;\n\n#define UV_ASYNC_PRIVATE_FIELDS                                               \\\n  struct uv_req_s async_req;                                                  \\\n  uv_async_cb async_cb;                                                       \\\n  /* char to avoid alignment issues */                                        \\\n  char volatile async_sent;\n\n#define UV_PREPARE_PRIVATE_FIELDS                                             \\\n  uv_prepare_t* prepare_prev;                                                 \\\n  uv_prepare_t* prepare_next;                                                 \\\n  uv_prepare_cb prepare_cb;\n\n#define UV_CHECK_PRIVATE_FIELDS                                               \\\n  uv_check_t* check_prev;                                                     \\\n  uv_check_t* check_next;                                                     \\\n  uv_check_cb check_cb;\n\n#define UV_IDLE_PRIVATE_FIELDS                                                \\\n  uv_idle_t* idle_prev;                                                       \\\n  uv_idle_t* idle_next;                                                       \\\n  uv_idle_cb idle_cb;\n\n#define UV_HANDLE_PRIVATE_FIELDS                                              \\\n  uv_handle_t* endgame_next;                                                  \\\n  unsigned int flags;\n\n#define UV_GETADDRINFO_PRIVATE_FIELDS                                         \\\n  struct uv__work work_req;                                                   \\\n  uv_getaddrinfo_cb getaddrinfo_cb;                                           \\\n  void* alloc;                                                                \\\n  WCHAR* node;                                                                \\\n  WCHAR* service;                                                             \\\n  /* The addrinfoW field is used to store a pointer to the hints, and    */   \\\n  /* later on to store the result of GetAddrInfoW. The final result will */   \\\n  /* be converted to struct addrinfo* and stored in the addrinfo field.  */   \\\n  struct addrinfoW* addrinfow;                                                \\\n  struct addrinfo* addrinfo;                                                  \\\n  int retcode;\n\n#define UV_GETNAMEINFO_PRIVATE_FIELDS                                         \\\n  struct uv__work work_req;                                                   \\\n  uv_getnameinfo_cb getnameinfo_cb;                                           \\\n  struct sockaddr_storage storage;                                            \\\n  int flags;                                                                  \\\n  char host[NI_MAXHOST];                                                      \\\n  char service[NI_MAXSERV];                                                   \\\n  int retcode;\n\n#define UV_PROCESS_PRIVATE_FIELDS                                             \\\n  struct uv_process_exit_s {                                                  \\\n    UV_REQ_FIELDS                                                             \\\n  } exit_req;                                                                 \\\n  BYTE* child_stdio_buffer;                                                   \\\n  int exit_signal;                                                            \\\n  HANDLE wait_handle;                                                         \\\n  HANDLE process_handle;                                                      \\\n  volatile char exit_cb_pending;\n\n#define UV_FS_PRIVATE_FIELDS                                                  \\\n  struct uv__work work_req;                                                   \\\n  int flags;                                                                  \\\n  DWORD sys_errno_;                                                           \\\n  union {                                                                     \\\n    /* TODO: remove me in 0.9. */                                             \\\n    WCHAR* pathw;                                                             \\\n    int fd;                                                                   \\\n  } file;                                                                     \\\n  union {                                                                     \\\n    struct {                                                                  \\\n      int mode;                                                               \\\n      WCHAR* new_pathw;                                                       \\\n      int file_flags;                                                         \\\n      int fd_out;                                                             \\\n      unsigned int nbufs;                                                     \\\n      uv_buf_t* bufs;                                                         \\\n      int64_t offset;                                                         \\\n      uv_buf_t bufsml[4];                                                     \\\n    } info;                                                                   \\\n    struct {                                                                  \\\n      double atime;                                                           \\\n      double mtime;                                                           \\\n    } time;                                                                   \\\n  } fs;\n\n#define UV_WORK_PRIVATE_FIELDS                                                \\\n  struct uv__work work_req;\n\n#define UV_FS_EVENT_PRIVATE_FIELDS                                            \\\n  struct uv_fs_event_req_s {                                                  \\\n    UV_REQ_FIELDS                                                             \\\n  } req;                                                                      \\\n  HANDLE dir_handle;                                                          \\\n  int req_pending;                                                            \\\n  uv_fs_event_cb cb;                                                          \\\n  WCHAR* filew;                                                               \\\n  WCHAR* short_filew;                                                         \\\n  WCHAR* dirw;                                                                \\\n  char* buffer;\n\n#define UV_SIGNAL_PRIVATE_FIELDS                                              \\\n  RB_ENTRY(uv_signal_s) tree_entry;                                           \\\n  struct uv_req_s signal_req;                                                 \\\n  unsigned long pending_signum;\n\n#ifndef F_OK\n#define F_OK 0\n#endif\n#ifndef R_OK\n#define R_OK 4\n#endif\n#ifndef W_OK\n#define W_OK 2\n#endif\n#ifndef X_OK\n#define X_OK 1\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/include/uv.h": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* See https://github.com/libuv/libuv#documentation for documentation. */\n\n#ifndef UV_H\n#define UV_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef _WIN32\n  /* Windows - set up dll import/export decorators. */\n# if defined(BUILDING_UV_SHARED)\n    /* Building shared library. */\n#   define UV_EXTERN __declspec(dllexport)\n# elif defined(USING_UV_SHARED)\n    /* Using shared library. */\n#   define UV_EXTERN __declspec(dllimport)\n# else\n    /* Building static library. */\n#   define UV_EXTERN /* nothing */\n# endif\n#elif __GNUC__ >= 4\n# define UV_EXTERN __attribute__((visibility(\"default\")))\n#else\n# define UV_EXTERN /* nothing */\n#endif\n\n#include \"uv-errno.h\"\n#include \"uv-version.h\"\n#include <stddef.h>\n#include <stdio.h>\n\n#if defined(_MSC_VER) && _MSC_VER < 1600\n# include \"stdint-msvc2008.h\"\n#else\n# include <stdint.h>\n#endif\n\n#if defined(_WIN32)\n# include \"uv-win.h\"\n#else\n# include \"uv-unix.h\"\n#endif\n\n/* Expand this list if necessary. */\n#define UV_ERRNO_MAP(XX)                                                      \\\n  XX(E2BIG, \"argument list too long\")                                         \\\n  XX(EACCES, \"permission denied\")                                             \\\n  XX(EADDRINUSE, \"address already in use\")                                    \\\n  XX(EADDRNOTAVAIL, \"address not available\")                                  \\\n  XX(EAFNOSUPPORT, \"address family not supported\")                            \\\n  XX(EAGAIN, \"resource temporarily unavailable\")                              \\\n  XX(EAI_ADDRFAMILY, \"address family not supported\")                          \\\n  XX(EAI_AGAIN, \"temporary failure\")                                          \\\n  XX(EAI_BADFLAGS, \"bad ai_flags value\")                                      \\\n  XX(EAI_BADHINTS, \"invalid value for hints\")                                 \\\n  XX(EAI_CANCELED, \"request canceled\")                                        \\\n  XX(EAI_FAIL, \"permanent failure\")                                           \\\n  XX(EAI_FAMILY, \"ai_family not supported\")                                   \\\n  XX(EAI_MEMORY, \"out of memory\")                                             \\\n  XX(EAI_NODATA, \"no address\")                                                \\\n  XX(EAI_NONAME, \"unknown node or service\")                                   \\\n  XX(EAI_OVERFLOW, \"argument buffer overflow\")                                \\\n  XX(EAI_PROTOCOL, \"resolved protocol is unknown\")                            \\\n  XX(EAI_SERVICE, \"service not available for socket type\")                    \\\n  XX(EAI_SOCKTYPE, \"socket type not supported\")                               \\\n  XX(EALREADY, \"connection already in progress\")                              \\\n  XX(EBADF, \"bad file descriptor\")                                            \\\n  XX(EBUSY, \"resource busy or locked\")                                        \\\n  XX(ECANCELED, \"operation canceled\")                                         \\\n  XX(ECHARSET, \"invalid Unicode character\")                                   \\\n  XX(ECONNABORTED, \"software caused connection abort\")                        \\\n  XX(ECONNREFUSED, \"connection refused\")                                      \\\n  XX(ECONNRESET, \"connection reset by peer\")                                  \\\n  XX(EDESTADDRREQ, \"destination address required\")                            \\\n  XX(EEXIST, \"file already exists\")                                           \\\n  XX(EFAULT, \"bad address in system call argument\")                           \\\n  XX(EFBIG, \"file too large\")                                                 \\\n  XX(EHOSTUNREACH, \"host is unreachable\")                                     \\\n  XX(EINTR, \"interrupted system call\")                                        \\\n  XX(EINVAL, \"invalid argument\")                                              \\\n  XX(EIO, \"i/o error\")                                                        \\\n  XX(EISCONN, \"socket is already connected\")                                  \\\n  XX(EISDIR, \"illegal operation on a directory\")                              \\\n  XX(ELOOP, \"too many symbolic links encountered\")                            \\\n  XX(EMFILE, \"too many open files\")                                           \\\n  XX(EMSGSIZE, \"message too long\")                                            \\\n  XX(ENAMETOOLONG, \"name too long\")                                           \\\n  XX(ENETDOWN, \"network is down\")                                             \\\n  XX(ENETUNREACH, \"network is unreachable\")                                   \\\n  XX(ENFILE, \"file table overflow\")                                           \\\n  XX(ENOBUFS, \"no buffer space available\")                                    \\\n  XX(ENODEV, \"no such device\")                                                \\\n  XX(ENOENT, \"no such file or directory\")                                     \\\n  XX(ENOMEM, \"not enough memory\")                                             \\\n  XX(ENONET, \"machine is not on the network\")                                 \\\n  XX(ENOPROTOOPT, \"protocol not available\")                                   \\\n  XX(ENOSPC, \"no space left on device\")                                       \\\n  XX(ENOSYS, \"function not implemented\")                                      \\\n  XX(ENOTCONN, \"socket is not connected\")                                     \\\n  XX(ENOTDIR, \"not a directory\")                                              \\\n  XX(ENOTEMPTY, \"directory not empty\")                                        \\\n  XX(ENOTSOCK, \"socket operation on non-socket\")                              \\\n  XX(ENOTSUP, \"operation not supported on socket\")                            \\\n  XX(EPERM, \"operation not permitted\")                                        \\\n  XX(EPIPE, \"broken pipe\")                                                    \\\n  XX(EPROTO, \"protocol error\")                                                \\\n  XX(EPROTONOSUPPORT, \"protocol not supported\")                               \\\n  XX(EPROTOTYPE, \"protocol wrong type for socket\")                            \\\n  XX(ERANGE, \"result too large\")                                              \\\n  XX(EROFS, \"read-only file system\")                                          \\\n  XX(ESHUTDOWN, \"cannot send after transport endpoint shutdown\")              \\\n  XX(ESPIPE, \"invalid seek\")                                                  \\\n  XX(ESRCH, \"no such process\")                                                \\\n  XX(ETIMEDOUT, \"connection timed out\")                                       \\\n  XX(ETXTBSY, \"text file is busy\")                                            \\\n  XX(EXDEV, \"cross-device link not permitted\")                                \\\n  XX(UNKNOWN, \"unknown error\")                                                \\\n  XX(EOF, \"end of file\")                                                      \\\n  XX(ENXIO, \"no such device or address\")                                      \\\n  XX(EMLINK, \"too many links\")                                                \\\n  XX(EHOSTDOWN, \"host is down\")                                               \\\n\n#define UV_HANDLE_TYPE_MAP(XX)                                                \\\n  XX(ASYNC, async)                                                            \\\n  XX(CHECK, check)                                                            \\\n  XX(FS_EVENT, fs_event)                                                      \\\n  XX(FS_POLL, fs_poll)                                                        \\\n  XX(HANDLE, handle)                                                          \\\n  XX(IDLE, idle)                                                              \\\n  XX(NAMED_PIPE, pipe)                                                        \\\n  XX(POLL, poll)                                                              \\\n  XX(PREPARE, prepare)                                                        \\\n  XX(PROCESS, process)                                                        \\\n  XX(STREAM, stream)                                                          \\\n  XX(TCP, tcp)                                                                \\\n  XX(TIMER, timer)                                                            \\\n  XX(TTY, tty)                                                                \\\n  XX(UDP, udp)                                                                \\\n  XX(SIGNAL, signal)                                                          \\\n\n#define UV_REQ_TYPE_MAP(XX)                                                   \\\n  XX(REQ, req)                                                                \\\n  XX(CONNECT, connect)                                                        \\\n  XX(WRITE, write)                                                            \\\n  XX(SHUTDOWN, shutdown)                                                      \\\n  XX(UDP_SEND, udp_send)                                                      \\\n  XX(FS, fs)                                                                  \\\n  XX(WORK, work)                                                              \\\n  XX(GETADDRINFO, getaddrinfo)                                                \\\n  XX(GETNAMEINFO, getnameinfo)                                                \\\n\ntypedef enum {\n#define XX(code, _) UV_ ## code = UV__ ## code,\n  UV_ERRNO_MAP(XX)\n#undef XX\n  UV_ERRNO_MAX = UV__EOF - 1\n} uv_errno_t;\n\ntypedef enum {\n  UV_UNKNOWN_HANDLE = 0,\n#define XX(uc, lc) UV_##uc,\n  UV_HANDLE_TYPE_MAP(XX)\n#undef XX\n  UV_FILE,\n  UV_HANDLE_TYPE_MAX\n} uv_handle_type;\n\ntypedef enum {\n  UV_UNKNOWN_REQ = 0,\n#define XX(uc, lc) UV_##uc,\n  UV_REQ_TYPE_MAP(XX)\n#undef XX\n  UV_REQ_TYPE_PRIVATE\n  UV_REQ_TYPE_MAX\n} uv_req_type;\n\n\n/* Handle types. */\ntypedef struct uv_loop_s uv_loop_t;\ntypedef struct uv_handle_s uv_handle_t;\ntypedef struct uv_stream_s uv_stream_t;\ntypedef struct uv_tcp_s uv_tcp_t;\ntypedef struct uv_udp_s uv_udp_t;\ntypedef struct uv_pipe_s uv_pipe_t;\ntypedef struct uv_tty_s uv_tty_t;\ntypedef struct uv_poll_s uv_poll_t;\ntypedef struct uv_timer_s uv_timer_t;\ntypedef struct uv_prepare_s uv_prepare_t;\ntypedef struct uv_check_s uv_check_t;\ntypedef struct uv_idle_s uv_idle_t;\ntypedef struct uv_async_s uv_async_t;\ntypedef struct uv_process_s uv_process_t;\ntypedef struct uv_fs_event_s uv_fs_event_t;\ntypedef struct uv_fs_poll_s uv_fs_poll_t;\ntypedef struct uv_signal_s uv_signal_t;\n\n/* Request types. */\ntypedef struct uv_req_s uv_req_t;\ntypedef struct uv_getaddrinfo_s uv_getaddrinfo_t;\ntypedef struct uv_getnameinfo_s uv_getnameinfo_t;\ntypedef struct uv_shutdown_s uv_shutdown_t;\ntypedef struct uv_write_s uv_write_t;\ntypedef struct uv_connect_s uv_connect_t;\ntypedef struct uv_udp_send_s uv_udp_send_t;\ntypedef struct uv_fs_s uv_fs_t;\ntypedef struct uv_work_s uv_work_t;\n\n/* None of the above. */\ntypedef struct uv_cpu_info_s uv_cpu_info_t;\ntypedef struct uv_interface_address_s uv_interface_address_t;\ntypedef struct uv_dirent_s uv_dirent_t;\ntypedef struct uv_passwd_s uv_passwd_t;\n\ntypedef enum {\n  UV_LOOP_BLOCK_SIGNAL\n} uv_loop_option;\n\ntypedef enum {\n  UV_RUN_DEFAULT = 0,\n  UV_RUN_ONCE,\n  UV_RUN_NOWAIT\n} uv_run_mode;\n\n\nUV_EXTERN unsigned int uv_version(void);\nUV_EXTERN const char* uv_version_string(void);\n\ntypedef void* (*uv_malloc_func)(size_t size);\ntypedef void* (*uv_realloc_func)(void* ptr, size_t size);\ntypedef void* (*uv_calloc_func)(size_t count, size_t size);\ntypedef void (*uv_free_func)(void* ptr);\n\nUV_EXTERN int uv_replace_allocator(uv_malloc_func malloc_func,\n                                   uv_realloc_func realloc_func,\n                                   uv_calloc_func calloc_func,\n                                   uv_free_func free_func);\n\nUV_EXTERN uv_loop_t* uv_default_loop(void);\nUV_EXTERN int uv_loop_init(uv_loop_t* loop);\nUV_EXTERN int uv_loop_close(uv_loop_t* loop);\n/*\n * NOTE:\n *  This function is DEPRECATED (to be removed after 0.12), users should\n *  allocate the loop manually and use uv_loop_init instead.\n */\nUV_EXTERN uv_loop_t* uv_loop_new(void);\n/*\n * NOTE:\n *  This function is DEPRECATED (to be removed after 0.12). Users should use\n *  uv_loop_close and free the memory manually instead.\n */\nUV_EXTERN void uv_loop_delete(uv_loop_t*);\nUV_EXTERN size_t uv_loop_size(void);\nUV_EXTERN int uv_loop_alive(const uv_loop_t* loop);\nUV_EXTERN int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, ...);\n\nUV_EXTERN int uv_run(uv_loop_t*, uv_run_mode mode);\nUV_EXTERN void uv_stop(uv_loop_t*);\n\nUV_EXTERN void uv_ref(uv_handle_t*);\nUV_EXTERN void uv_unref(uv_handle_t*);\nUV_EXTERN int uv_has_ref(const uv_handle_t*);\n\nUV_EXTERN void uv_update_time(uv_loop_t*);\nUV_EXTERN uint64_t uv_now(const uv_loop_t*);\n\nUV_EXTERN int uv_backend_fd(const uv_loop_t*);\nUV_EXTERN int uv_backend_timeout(const uv_loop_t*);\n\ntypedef void (*uv_alloc_cb)(uv_handle_t* handle,\n                            size_t suggested_size,\n                            uv_buf_t* buf);\ntypedef void (*uv_read_cb)(uv_stream_t* stream,\n                           ssize_t nread,\n                           const uv_buf_t* buf);\ntypedef void (*uv_write_cb)(uv_write_t* req, int status);\ntypedef void (*uv_connect_cb)(uv_connect_t* req, int status);\ntypedef void (*uv_shutdown_cb)(uv_shutdown_t* req, int status);\ntypedef void (*uv_connection_cb)(uv_stream_t* server, int status);\ntypedef void (*uv_close_cb)(uv_handle_t* handle);\ntypedef void (*uv_poll_cb)(uv_poll_t* handle, int status, int events);\ntypedef void (*uv_timer_cb)(uv_timer_t* handle);\ntypedef void (*uv_async_cb)(uv_async_t* handle);\ntypedef void (*uv_prepare_cb)(uv_prepare_t* handle);\ntypedef void (*uv_check_cb)(uv_check_t* handle);\ntypedef void (*uv_idle_cb)(uv_idle_t* handle);\ntypedef void (*uv_exit_cb)(uv_process_t*, int64_t exit_status, int term_signal);\ntypedef void (*uv_walk_cb)(uv_handle_t* handle, void* arg);\ntypedef void (*uv_fs_cb)(uv_fs_t* req);\ntypedef void (*uv_work_cb)(uv_work_t* req);\ntypedef void (*uv_after_work_cb)(uv_work_t* req, int status);\ntypedef void (*uv_getaddrinfo_cb)(uv_getaddrinfo_t* req,\n                                  int status,\n                                  struct addrinfo* res);\ntypedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,\n                                  int status,\n                                  const char* hostname,\n                                  const char* service);\n\ntypedef struct {\n  long tv_sec;\n  long tv_nsec;\n} uv_timespec_t;\n\n\ntypedef struct {\n  uint64_t st_dev;\n  uint64_t st_mode;\n  uint64_t st_nlink;\n  uint64_t st_uid;\n  uint64_t st_gid;\n  uint64_t st_rdev;\n  uint64_t st_ino;\n  uint64_t st_size;\n  uint64_t st_blksize;\n  uint64_t st_blocks;\n  uint64_t st_flags;\n  uint64_t st_gen;\n  uv_timespec_t st_atim;\n  uv_timespec_t st_mtim;\n  uv_timespec_t st_ctim;\n  uv_timespec_t st_birthtim;\n} uv_stat_t;\n\n\ntypedef void (*uv_fs_event_cb)(uv_fs_event_t* handle,\n                               const char* filename,\n                               int events,\n                               int status);\n\ntypedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,\n                              int status,\n                              const uv_stat_t* prev,\n                              const uv_stat_t* curr);\n\ntypedef void (*uv_signal_cb)(uv_signal_t* handle, int signum);\n\n\ntypedef enum {\n  UV_LEAVE_GROUP = 0,\n  UV_JOIN_GROUP\n} uv_membership;\n\n\nUV_EXTERN const char* uv_strerror(int err);\nUV_EXTERN const char* uv_err_name(int err);\n\n\n#define UV_REQ_FIELDS                                                         \\\n  /* public */                                                                \\\n  void* data;                                                                 \\\n  /* read-only */                                                             \\\n  uv_req_type type;                                                           \\\n  /* private */                                                               \\\n  void* active_queue[2];                                                      \\\n  void* reserved[4];                                                          \\\n  UV_REQ_PRIVATE_FIELDS                                                       \\\n\n/* Abstract base class of all requests. */\nstruct uv_req_s {\n  UV_REQ_FIELDS\n};\n\n\n/* Platform-specific request types. */\nUV_PRIVATE_REQ_TYPES\n\n\nUV_EXTERN int uv_shutdown(uv_shutdown_t* req,\n                          uv_stream_t* handle,\n                          uv_shutdown_cb cb);\n\nstruct uv_shutdown_s {\n  UV_REQ_FIELDS\n  uv_stream_t* handle;\n  uv_shutdown_cb cb;\n  UV_SHUTDOWN_PRIVATE_FIELDS\n};\n\n\n#define UV_HANDLE_FIELDS                                                      \\\n  /* public */                                                                \\\n  void* data;                                                                 \\\n  /* read-only */                                                             \\\n  uv_loop_t* loop;                                                            \\\n  uv_handle_type type;                                                        \\\n  /* private */                                                               \\\n  uv_close_cb close_cb;                                                       \\\n  void* handle_queue[2];                                                      \\\n  union {                                                                     \\\n    int fd;                                                                   \\\n    void* reserved[4];                                                        \\\n  } u;                                                                        \\\n  UV_HANDLE_PRIVATE_FIELDS                                                    \\\n\n/* The abstract base class of all handles. */\nstruct uv_handle_s {\n  UV_HANDLE_FIELDS\n};\n\nUV_EXTERN size_t uv_handle_size(uv_handle_type type);\nUV_EXTERN size_t uv_req_size(uv_req_type type);\n\nUV_EXTERN int uv_is_active(const uv_handle_t* handle);\n\nUV_EXTERN void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg);\n\n/* Helpers for ad hoc debugging, no API/ABI stability guaranteed. */\nUV_EXTERN void uv_print_all_handles(uv_loop_t* loop, FILE* stream);\nUV_EXTERN void uv_print_active_handles(uv_loop_t* loop, FILE* stream);\n\nUV_EXTERN void uv_close(uv_handle_t* handle, uv_close_cb close_cb);\n\nUV_EXTERN int uv_send_buffer_size(uv_handle_t* handle, int* value);\nUV_EXTERN int uv_recv_buffer_size(uv_handle_t* handle, int* value);\n\nUV_EXTERN int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd);\n\nUV_EXTERN uv_buf_t uv_buf_init(char* base, unsigned int len);\n\n\n#define UV_STREAM_FIELDS                                                      \\\n  /* number of bytes queued for writing */                                    \\\n  size_t write_queue_size;                                                    \\\n  uv_alloc_cb alloc_cb;                                                       \\\n  uv_read_cb read_cb;                                                         \\\n  /* private */                                                               \\\n  UV_STREAM_PRIVATE_FIELDS\n\n/*\n * uv_stream_t is a subclass of uv_handle_t.\n *\n * uv_stream is an abstract class.\n *\n * uv_stream_t is the parent class of uv_tcp_t, uv_pipe_t and uv_tty_t.\n */\nstruct uv_stream_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n};\n\nUV_EXTERN int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);\nUV_EXTERN int uv_accept(uv_stream_t* server, uv_stream_t* client);\n\nUV_EXTERN int uv_read_start(uv_stream_t*,\n                            uv_alloc_cb alloc_cb,\n                            uv_read_cb read_cb);\nUV_EXTERN int uv_read_stop(uv_stream_t*);\n\nUV_EXTERN int uv_write(uv_write_t* req,\n                       uv_stream_t* handle,\n                       const uv_buf_t bufs[],\n                       unsigned int nbufs,\n                       uv_write_cb cb);\nUV_EXTERN int uv_write2(uv_write_t* req,\n                        uv_stream_t* handle,\n                        const uv_buf_t bufs[],\n                        unsigned int nbufs,\n                        uv_stream_t* send_handle,\n                        uv_write_cb cb);\nUV_EXTERN int uv_try_write(uv_stream_t* handle,\n                           const uv_buf_t bufs[],\n                           unsigned int nbufs);\n\n/* uv_write_t is a subclass of uv_req_t. */\nstruct uv_write_s {\n  UV_REQ_FIELDS\n  uv_write_cb cb;\n  uv_stream_t* send_handle;\n  uv_stream_t* handle;\n  UV_WRITE_PRIVATE_FIELDS\n};\n\n\nUV_EXTERN int uv_is_readable(const uv_stream_t* handle);\nUV_EXTERN int uv_is_writable(const uv_stream_t* handle);\n\nUV_EXTERN int uv_stream_set_blocking(uv_stream_t* handle, int blocking);\n\nUV_EXTERN int uv_is_closing(const uv_handle_t* handle);\n\n\n/*\n * uv_tcp_t is a subclass of uv_stream_t.\n *\n * Represents a TCP stream or TCP server.\n */\nstruct uv_tcp_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  UV_TCP_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_tcp_init(uv_loop_t*, uv_tcp_t* handle);\nUV_EXTERN int uv_tcp_init_ex(uv_loop_t*, uv_tcp_t* handle, unsigned int flags);\nUV_EXTERN int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock);\nUV_EXTERN int uv_tcp_nodelay(uv_tcp_t* handle, int enable);\nUV_EXTERN int uv_tcp_keepalive(uv_tcp_t* handle,\n                               int enable,\n                               unsigned int delay);\nUV_EXTERN int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);\n\nenum uv_tcp_flags {\n  /* Used with uv_tcp_bind, when an IPv6 address is used. */\n  UV_TCP_IPV6ONLY = 1\n};\n\nUV_EXTERN int uv_tcp_bind(uv_tcp_t* handle,\n                          const struct sockaddr* addr,\n                          unsigned int flags);\nUV_EXTERN int uv_tcp_getsockname(const uv_tcp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_tcp_getpeername(const uv_tcp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_tcp_connect(uv_connect_t* req,\n                             uv_tcp_t* handle,\n                             const struct sockaddr* addr,\n                             uv_connect_cb cb);\n\n/* uv_connect_t is a subclass of uv_req_t. */\nstruct uv_connect_s {\n  UV_REQ_FIELDS\n  uv_connect_cb cb;\n  uv_stream_t* handle;\n  UV_CONNECT_PRIVATE_FIELDS\n};\n\n\n/*\n * UDP support.\n */\n\nenum uv_udp_flags {\n  /* Disables dual stack mode. */\n  UV_UDP_IPV6ONLY = 1,\n  /*\n   * Indicates message was truncated because read buffer was too small. The\n   * remainder was discarded by the OS. Used in uv_udp_recv_cb.\n   */\n  UV_UDP_PARTIAL = 2,\n  /*\n   * Indicates if SO_REUSEADDR will be set when binding the handle.\n   * This sets the SO_REUSEPORT socket flag on the BSDs and OS X. On other\n   * Unix platforms, it sets the SO_REUSEADDR flag.  What that means is that\n   * multiple threads or processes can bind to the same address without error\n   * (provided they all set the flag) but only the last one to bind will receive\n   * any traffic, in effect \"stealing\" the port from the previous listener.\n   */\n  UV_UDP_REUSEADDR = 4\n};\n\ntypedef void (*uv_udp_send_cb)(uv_udp_send_t* req, int status);\ntypedef void (*uv_udp_recv_cb)(uv_udp_t* handle,\n                               ssize_t nread,\n                               const uv_buf_t* buf,\n                               const struct sockaddr* addr,\n                               unsigned flags);\n\n/* uv_udp_t is a subclass of uv_handle_t. */\nstruct uv_udp_s {\n  UV_HANDLE_FIELDS\n  /* read-only */\n  /*\n   * Number of bytes queued for sending. This field strictly shows how much\n   * information is currently queued.\n   */\n  size_t send_queue_size;\n  /*\n   * Number of send requests currently in the queue awaiting to be processed.\n   */\n  size_t send_queue_count;\n  UV_UDP_PRIVATE_FIELDS\n};\n\n/* uv_udp_send_t is a subclass of uv_req_t. */\nstruct uv_udp_send_s {\n  UV_REQ_FIELDS\n  uv_udp_t* handle;\n  uv_udp_send_cb cb;\n  UV_UDP_SEND_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_udp_init(uv_loop_t*, uv_udp_t* handle);\nUV_EXTERN int uv_udp_init_ex(uv_loop_t*, uv_udp_t* handle, unsigned int flags);\nUV_EXTERN int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock);\nUV_EXTERN int uv_udp_bind(uv_udp_t* handle,\n                          const struct sockaddr* addr,\n                          unsigned int flags);\n\nUV_EXTERN int uv_udp_getsockname(const uv_udp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_udp_set_membership(uv_udp_t* handle,\n                                    const char* multicast_addr,\n                                    const char* interface_addr,\n                                    uv_membership membership);\nUV_EXTERN int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);\nUV_EXTERN int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);\nUV_EXTERN int uv_udp_set_multicast_interface(uv_udp_t* handle,\n                                             const char* interface_addr);\nUV_EXTERN int uv_udp_set_broadcast(uv_udp_t* handle, int on);\nUV_EXTERN int uv_udp_set_ttl(uv_udp_t* handle, int ttl);\nUV_EXTERN int uv_udp_send(uv_udp_send_t* req,\n                          uv_udp_t* handle,\n                          const uv_buf_t bufs[],\n                          unsigned int nbufs,\n                          const struct sockaddr* addr,\n                          uv_udp_send_cb send_cb);\nUV_EXTERN int uv_udp_try_send(uv_udp_t* handle,\n                              const uv_buf_t bufs[],\n                              unsigned int nbufs,\n                              const struct sockaddr* addr);\nUV_EXTERN int uv_udp_recv_start(uv_udp_t* handle,\n                                uv_alloc_cb alloc_cb,\n                                uv_udp_recv_cb recv_cb);\nUV_EXTERN int uv_udp_recv_stop(uv_udp_t* handle);\n\n\n/*\n * uv_tty_t is a subclass of uv_stream_t.\n *\n * Representing a stream for the console.\n */\nstruct uv_tty_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  UV_TTY_PRIVATE_FIELDS\n};\n\ntypedef enum {\n  /* Initial/normal terminal mode */\n  UV_TTY_MODE_NORMAL,\n  /* Raw input mode (On Windows, ENABLE_WINDOW_INPUT is also enabled) */\n  UV_TTY_MODE_RAW,\n  /* Binary-safe I/O mode for IPC (Unix-only) */\n  UV_TTY_MODE_IO\n} uv_tty_mode_t;\n\nUV_EXTERN int uv_tty_init(uv_loop_t*, uv_tty_t*, uv_file fd, int readable);\nUV_EXTERN int uv_tty_set_mode(uv_tty_t*, uv_tty_mode_t mode);\nUV_EXTERN int uv_tty_reset_mode(void);\nUV_EXTERN int uv_tty_get_winsize(uv_tty_t*, int* width, int* height);\n\n#ifdef __cplusplus\nextern \"C++\" {\n\ninline int uv_tty_set_mode(uv_tty_t* handle, int mode) {\n  return uv_tty_set_mode(handle, static_cast<uv_tty_mode_t>(mode));\n}\n\n}\n#endif\n\nUV_EXTERN uv_handle_type uv_guess_handle(uv_file file);\n\n/*\n * uv_pipe_t is a subclass of uv_stream_t.\n *\n * Representing a pipe stream or pipe server. On Windows this is a Named\n * Pipe. On Unix this is a Unix domain socket.\n */\nstruct uv_pipe_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  int ipc; /* non-zero if this pipe is used for passing handles */\n  UV_PIPE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);\nUV_EXTERN int uv_pipe_open(uv_pipe_t*, uv_file file);\nUV_EXTERN int uv_pipe_bind(uv_pipe_t* handle, const char* name);\nUV_EXTERN void uv_pipe_connect(uv_connect_t* req,\n                               uv_pipe_t* handle,\n                               const char* name,\n                               uv_connect_cb cb);\nUV_EXTERN int uv_pipe_getsockname(const uv_pipe_t* handle,\n                                  char* buffer,\n                                  size_t* size);\nUV_EXTERN int uv_pipe_getpeername(const uv_pipe_t* handle,\n                                  char* buffer,\n                                  size_t* size);\nUV_EXTERN void uv_pipe_pending_instances(uv_pipe_t* handle, int count);\nUV_EXTERN int uv_pipe_pending_count(uv_pipe_t* handle);\nUV_EXTERN uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle);\n\n\nstruct uv_poll_s {\n  UV_HANDLE_FIELDS\n  uv_poll_cb poll_cb;\n  UV_POLL_PRIVATE_FIELDS\n};\n\nenum uv_poll_event {\n  UV_READABLE = 1,\n  UV_WRITABLE = 2,\n  UV_DISCONNECT = 4\n};\n\nUV_EXTERN int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);\nUV_EXTERN int uv_poll_init_socket(uv_loop_t* loop,\n                                  uv_poll_t* handle,\n                                  uv_os_sock_t socket);\nUV_EXTERN int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb);\nUV_EXTERN int uv_poll_stop(uv_poll_t* handle);\n\n\nstruct uv_prepare_s {\n  UV_HANDLE_FIELDS\n  UV_PREPARE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_prepare_init(uv_loop_t*, uv_prepare_t* prepare);\nUV_EXTERN int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);\nUV_EXTERN int uv_prepare_stop(uv_prepare_t* prepare);\n\n\nstruct uv_check_s {\n  UV_HANDLE_FIELDS\n  UV_CHECK_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_check_init(uv_loop_t*, uv_check_t* check);\nUV_EXTERN int uv_check_start(uv_check_t* check, uv_check_cb cb);\nUV_EXTERN int uv_check_stop(uv_check_t* check);\n\n\nstruct uv_idle_s {\n  UV_HANDLE_FIELDS\n  UV_IDLE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_idle_init(uv_loop_t*, uv_idle_t* idle);\nUV_EXTERN int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);\nUV_EXTERN int uv_idle_stop(uv_idle_t* idle);\n\n\nstruct uv_async_s {\n  UV_HANDLE_FIELDS\n  UV_ASYNC_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_async_init(uv_loop_t*,\n                            uv_async_t* async,\n                            uv_async_cb async_cb);\nUV_EXTERN int uv_async_send(uv_async_t* async);\n\n\n/*\n * uv_timer_t is a subclass of uv_handle_t.\n *\n * Used to get woken up at a specified time in the future.\n */\nstruct uv_timer_s {\n  UV_HANDLE_FIELDS\n  UV_TIMER_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_timer_init(uv_loop_t*, uv_timer_t* handle);\nUV_EXTERN int uv_timer_start(uv_timer_t* handle,\n                             uv_timer_cb cb,\n                             uint64_t timeout,\n                             uint64_t repeat);\nUV_EXTERN int uv_timer_stop(uv_timer_t* handle);\nUV_EXTERN int uv_timer_again(uv_timer_t* handle);\nUV_EXTERN void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat);\nUV_EXTERN uint64_t uv_timer_get_repeat(const uv_timer_t* handle);\n\n\n/*\n * uv_getaddrinfo_t is a subclass of uv_req_t.\n *\n * Request object for uv_getaddrinfo.\n */\nstruct uv_getaddrinfo_s {\n  UV_REQ_FIELDS\n  /* read-only */\n  uv_loop_t* loop;\n  /* struct addrinfo* addrinfo is marked as private, but it really isn't. */\n  UV_GETADDRINFO_PRIVATE_FIELDS\n};\n\n\nUV_EXTERN int uv_getaddrinfo(uv_loop_t* loop,\n                             uv_getaddrinfo_t* req,\n                             uv_getaddrinfo_cb getaddrinfo_cb,\n                             const char* node,\n                             const char* service,\n                             const struct addrinfo* hints);\nUV_EXTERN void uv_freeaddrinfo(struct addrinfo* ai);\n\n\n/*\n* uv_getnameinfo_t is a subclass of uv_req_t.\n*\n* Request object for uv_getnameinfo.\n*/\nstruct uv_getnameinfo_s {\n  UV_REQ_FIELDS\n  /* read-only */\n  uv_loop_t* loop;\n  /* host and service are marked as private, but they really aren't. */\n  UV_GETNAMEINFO_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_getnameinfo(uv_loop_t* loop,\n                             uv_getnameinfo_t* req,\n                             uv_getnameinfo_cb getnameinfo_cb,\n                             const struct sockaddr* addr,\n                             int flags);\n\n\n/* uv_spawn() options. */\ntypedef enum {\n  UV_IGNORE         = 0x00,\n  UV_CREATE_PIPE    = 0x01,\n  UV_INHERIT_FD     = 0x02,\n  UV_INHERIT_STREAM = 0x04,\n\n  /*\n   * When UV_CREATE_PIPE is specified, UV_READABLE_PIPE and UV_WRITABLE_PIPE\n   * determine the direction of flow, from the child process' perspective. Both\n   * flags may be specified to create a duplex data stream.\n   */\n  UV_READABLE_PIPE  = 0x10,\n  UV_WRITABLE_PIPE  = 0x20\n} uv_stdio_flags;\n\ntypedef struct uv_stdio_container_s {\n  uv_stdio_flags flags;\n\n  union {\n    uv_stream_t* stream;\n    int fd;\n  } data;\n} uv_stdio_container_t;\n\ntypedef struct uv_process_options_s {\n  uv_exit_cb exit_cb; /* Called after the process exits. */\n  const char* file;   /* Path to program to execute. */\n  /*\n   * Command line arguments. args[0] should be the path to the program. On\n   * Windows this uses CreateProcess which concatenates the arguments into a\n   * string this can cause some strange errors. See the note at\n   * windows_verbatim_arguments.\n   */\n  char** args;\n  /*\n   * This will be set as the environ variable in the subprocess. If this is\n   * NULL then the parents environ will be used.\n   */\n  char** env;\n  /*\n   * If non-null this represents a directory the subprocess should execute\n   * in. Stands for current working directory.\n   */\n  const char* cwd;\n  /*\n   * Various flags that control how uv_spawn() behaves. See the definition of\n   * `enum uv_process_flags` below.\n   */\n  unsigned int flags;\n  /*\n   * The `stdio` field points to an array of uv_stdio_container_t structs that\n   * describe the file descriptors that will be made available to the child\n   * process. The convention is that stdio[0] points to stdin, fd 1 is used for\n   * stdout, and fd 2 is stderr.\n   *\n   * Note that on windows file descriptors greater than 2 are available to the\n   * child process only if the child processes uses the MSVCRT runtime.\n   */\n  int stdio_count;\n  uv_stdio_container_t* stdio;\n  /*\n   * Libuv can change the child process' user/group id. This happens only when\n   * the appropriate bits are set in the flags fields. This is not supported on\n   * windows; uv_spawn() will fail and set the error to UV_ENOTSUP.\n   */\n  uv_uid_t uid;\n  uv_gid_t gid;\n} uv_process_options_t;\n\n/*\n * These are the flags that can be used for the uv_process_options.flags field.\n */\nenum uv_process_flags {\n  /*\n   * Set the child process' user id. The user id is supplied in the `uid` field\n   * of the options struct. This does not work on windows; setting this flag\n   * will cause uv_spawn() to fail.\n   */\n  UV_PROCESS_SETUID = (1 << 0),\n  /*\n   * Set the child process' group id. The user id is supplied in the `gid`\n   * field of the options struct. This does not work on windows; setting this\n   * flag will cause uv_spawn() to fail.\n   */\n  UV_PROCESS_SETGID = (1 << 1),\n  /*\n   * Do not wrap any arguments in quotes, or perform any other escaping, when\n   * converting the argument list into a command line string. This option is\n   * only meaningful on Windows systems. On Unix it is silently ignored.\n   */\n  UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = (1 << 2),\n  /*\n   * Spawn the child process in a detached state - this will make it a process\n   * group leader, and will effectively enable the child to keep running after\n   * the parent exits.  Note that the child process will still keep the\n   * parent's event loop alive unless the parent process calls uv_unref() on\n   * the child's process handle.\n   */\n  UV_PROCESS_DETACHED = (1 << 3),\n  /*\n   * Hide the subprocess console window that would normally be created. This\n   * option is only meaningful on Windows systems. On Unix it is silently\n   * ignored.\n   */\n  UV_PROCESS_WINDOWS_HIDE = (1 << 4)\n};\n\n/*\n * uv_process_t is a subclass of uv_handle_t.\n */\nstruct uv_process_s {\n  UV_HANDLE_FIELDS\n  uv_exit_cb exit_cb;\n  int pid;\n  UV_PROCESS_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_spawn(uv_loop_t* loop,\n                       uv_process_t* handle,\n                       const uv_process_options_t* options);\nUV_EXTERN int uv_process_kill(uv_process_t*, int signum);\nUV_EXTERN int uv_kill(int pid, int signum);\n\n\n/*\n * uv_work_t is a subclass of uv_req_t.\n */\nstruct uv_work_s {\n  UV_REQ_FIELDS\n  uv_loop_t* loop;\n  uv_work_cb work_cb;\n  uv_after_work_cb after_work_cb;\n  UV_WORK_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_queue_work(uv_loop_t* loop,\n                            uv_work_t* req,\n                            uv_work_cb work_cb,\n                            uv_after_work_cb after_work_cb);\n\nUV_EXTERN int uv_cancel(uv_req_t* req);\n\n\nstruct uv_cpu_info_s {\n  char* model;\n  int speed;\n  struct uv_cpu_times_s {\n    uint64_t user;\n    uint64_t nice;\n    uint64_t sys;\n    uint64_t idle;\n    uint64_t irq;\n  } cpu_times;\n};\n\nstruct uv_interface_address_s {\n  char* name;\n  char phys_addr[6];\n  int is_internal;\n  union {\n    struct sockaddr_in address4;\n    struct sockaddr_in6 address6;\n  } address;\n  union {\n    struct sockaddr_in netmask4;\n    struct sockaddr_in6 netmask6;\n  } netmask;\n};\n\nstruct uv_passwd_s {\n  char* username;\n  long uid;\n  long gid;\n  char* shell;\n  char* homedir;\n};\n\ntypedef enum {\n  UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE,\n  UV_DIRENT_DIR,\n  UV_DIRENT_LINK,\n  UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK\n} uv_dirent_type_t;\n\nstruct uv_dirent_s {\n  const char* name;\n  uv_dirent_type_t type;\n};\n\nUV_EXTERN char** uv_setup_args(int argc, char** argv);\nUV_EXTERN int uv_get_process_title(char* buffer, size_t size);\nUV_EXTERN int uv_set_process_title(const char* title);\nUV_EXTERN int uv_resident_set_memory(size_t* rss);\nUV_EXTERN int uv_uptime(double* uptime);\n\ntypedef struct {\n  long tv_sec;\n  long tv_usec;\n} uv_timeval_t;\n\ntypedef struct {\n   uv_timeval_t ru_utime; /* user CPU time used */\n   uv_timeval_t ru_stime; /* system CPU time used */\n   uint64_t ru_maxrss;    /* maximum resident set size */\n   uint64_t ru_ixrss;     /* integral shared memory size */\n   uint64_t ru_idrss;     /* integral unshared data size */\n   uint64_t ru_isrss;     /* integral unshared stack size */\n   uint64_t ru_minflt;    /* page reclaims (soft page faults) */\n   uint64_t ru_majflt;    /* page faults (hard page faults) */\n   uint64_t ru_nswap;     /* swaps */\n   uint64_t ru_inblock;   /* block input operations */\n   uint64_t ru_oublock;   /* block output operations */\n   uint64_t ru_msgsnd;    /* IPC messages sent */\n   uint64_t ru_msgrcv;    /* IPC messages received */\n   uint64_t ru_nsignals;  /* signals received */\n   uint64_t ru_nvcsw;     /* voluntary context switches */\n   uint64_t ru_nivcsw;    /* involuntary context switches */\n} uv_rusage_t;\n\nUV_EXTERN int uv_getrusage(uv_rusage_t* rusage);\n\nUV_EXTERN int uv_os_homedir(char* buffer, size_t* size);\nUV_EXTERN int uv_os_tmpdir(char* buffer, size_t* size);\nUV_EXTERN int uv_os_get_passwd(uv_passwd_t* pwd);\nUV_EXTERN void uv_os_free_passwd(uv_passwd_t* pwd);\n\nUV_EXTERN int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count);\nUV_EXTERN void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count);\n\nUV_EXTERN int uv_interface_addresses(uv_interface_address_t** addresses,\n                                     int* count);\nUV_EXTERN void uv_free_interface_addresses(uv_interface_address_t* addresses,\n                                           int count);\n\n\ntypedef enum {\n  UV_FS_UNKNOWN = -1,\n  UV_FS_CUSTOM,\n  UV_FS_OPEN,\n  UV_FS_CLOSE,\n  UV_FS_READ,\n  UV_FS_WRITE,\n  UV_FS_SENDFILE,\n  UV_FS_STAT,\n  UV_FS_LSTAT,\n  UV_FS_FSTAT,\n  UV_FS_FTRUNCATE,\n  UV_FS_UTIME,\n  UV_FS_FUTIME,\n  UV_FS_ACCESS,\n  UV_FS_CHMOD,\n  UV_FS_FCHMOD,\n  UV_FS_FSYNC,\n  UV_FS_FDATASYNC,\n  UV_FS_UNLINK,\n  UV_FS_RMDIR,\n  UV_FS_MKDIR,\n  UV_FS_MKDTEMP,\n  UV_FS_RENAME,\n  UV_FS_SCANDIR,\n  UV_FS_LINK,\n  UV_FS_SYMLINK,\n  UV_FS_READLINK,\n  UV_FS_CHOWN,\n  UV_FS_FCHOWN,\n  UV_FS_REALPATH\n} uv_fs_type;\n\n/* uv_fs_t is a subclass of uv_req_t. */\nstruct uv_fs_s {\n  UV_REQ_FIELDS\n  uv_fs_type fs_type;\n  uv_loop_t* loop;\n  uv_fs_cb cb;\n  ssize_t result;\n  void* ptr;\n  const char* path;\n  uv_stat_t statbuf;  /* Stores the result of uv_fs_stat() and uv_fs_fstat(). */\n  UV_FS_PRIVATE_FIELDS\n};\n\nUV_EXTERN void uv_fs_req_cleanup(uv_fs_t* req);\nUV_EXTERN int uv_fs_close(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_open(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         int flags,\n                         int mode,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_read(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         uv_file file,\n                         const uv_buf_t bufs[],\n                         unsigned int nbufs,\n                         int64_t offset,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_unlink(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_write(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          const uv_buf_t bufs[],\n                          unsigned int nbufs,\n                          int64_t offset,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_mkdir(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          int mode,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_mkdtemp(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* tpl,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_rmdir(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_scandir(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* path,\n                            int flags,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_scandir_next(uv_fs_t* req,\n                                 uv_dirent_t* ent);\nUV_EXTERN int uv_fs_stat(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_fstat(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_rename(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           const char* new_path,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_fsync(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_fdatasync(uv_loop_t* loop,\n                              uv_fs_t* req,\n                              uv_file file,\n                              uv_fs_cb cb);\nUV_EXTERN int uv_fs_ftruncate(uv_loop_t* loop,\n                              uv_fs_t* req,\n                              uv_file file,\n                              int64_t offset,\n                              uv_fs_cb cb);\nUV_EXTERN int uv_fs_sendfile(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             uv_file out_fd,\n                             uv_file in_fd,\n                             int64_t in_offset,\n                             size_t length,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_access(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           int mode,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_chmod(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          int mode,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_utime(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          double atime,\n                          double mtime,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_futime(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           double atime,\n                           double mtime,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_lstat(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_link(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         const char* new_path,\n                         uv_fs_cb cb);\n\n/*\n * This flag can be used with uv_fs_symlink() on Windows to specify whether\n * path argument points to a directory.\n */\n#define UV_FS_SYMLINK_DIR          0x0001\n\n/*\n * This flag can be used with uv_fs_symlink() on Windows to specify whether\n * the symlink is to be created using junction points.\n */\n#define UV_FS_SYMLINK_JUNCTION     0x0002\n\nUV_EXTERN int uv_fs_symlink(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* path,\n                            const char* new_path,\n                            int flags,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_readlink(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             const char* path,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_realpath(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             const char* path,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_fchmod(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           int mode,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_chown(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_uid_t uid,\n                          uv_gid_t gid,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_fchown(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           uv_uid_t uid,\n                           uv_gid_t gid,\n                           uv_fs_cb cb);\n\n\nenum uv_fs_event {\n  UV_RENAME = 1,\n  UV_CHANGE = 2\n};\n\n\nstruct uv_fs_event_s {\n  UV_HANDLE_FIELDS\n  /* private */\n  char* path;\n  UV_FS_EVENT_PRIVATE_FIELDS\n};\n\n\n/*\n * uv_fs_stat() based polling file watcher.\n */\nstruct uv_fs_poll_s {\n  UV_HANDLE_FIELDS\n  /* Private, don't touch. */\n  void* poll_ctx;\n};\n\nUV_EXTERN int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);\nUV_EXTERN int uv_fs_poll_start(uv_fs_poll_t* handle,\n                               uv_fs_poll_cb poll_cb,\n                               const char* path,\n                               unsigned int interval);\nUV_EXTERN int uv_fs_poll_stop(uv_fs_poll_t* handle);\nUV_EXTERN int uv_fs_poll_getpath(uv_fs_poll_t* handle,\n                                 char* buffer,\n                                 size_t* size);\n\n\nstruct uv_signal_s {\n  UV_HANDLE_FIELDS\n  uv_signal_cb signal_cb;\n  int signum;\n  UV_SIGNAL_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle);\nUV_EXTERN int uv_signal_start(uv_signal_t* handle,\n                              uv_signal_cb signal_cb,\n                              int signum);\nUV_EXTERN int uv_signal_stop(uv_signal_t* handle);\n\nUV_EXTERN void uv_loadavg(double avg[3]);\n\n\n/*\n * Flags to be passed to uv_fs_event_start().\n */\nenum uv_fs_event_flags {\n  /*\n   * By default, if the fs event watcher is given a directory name, we will\n   * watch for all events in that directory. This flags overrides this behavior\n   * and makes fs_event report only changes to the directory entry itself. This\n   * flag does not affect individual files watched.\n   * This flag is currently not implemented yet on any backend.\n   */\n  UV_FS_EVENT_WATCH_ENTRY = 1,\n\n  /*\n   * By default uv_fs_event will try to use a kernel interface such as inotify\n   * or kqueue to detect events. This may not work on remote filesystems such\n   * as NFS mounts. This flag makes fs_event fall back to calling stat() on a\n   * regular interval.\n   * This flag is currently not implemented yet on any backend.\n   */\n  UV_FS_EVENT_STAT = 2,\n\n  /*\n   * By default, event watcher, when watching directory, is not registering\n   * (is ignoring) changes in it's subdirectories.\n   * This flag will override this behaviour on platforms that support it.\n   */\n  UV_FS_EVENT_RECURSIVE = 4\n};\n\n\nUV_EXTERN int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);\nUV_EXTERN int uv_fs_event_start(uv_fs_event_t* handle,\n                                uv_fs_event_cb cb,\n                                const char* path,\n                                unsigned int flags);\nUV_EXTERN int uv_fs_event_stop(uv_fs_event_t* handle);\nUV_EXTERN int uv_fs_event_getpath(uv_fs_event_t* handle,\n                                  char* buffer,\n                                  size_t* size);\n\nUV_EXTERN int uv_ip4_addr(const char* ip, int port, struct sockaddr_in* addr);\nUV_EXTERN int uv_ip6_addr(const char* ip, int port, struct sockaddr_in6* addr);\n\nUV_EXTERN int uv_ip4_name(const struct sockaddr_in* src, char* dst, size_t size);\nUV_EXTERN int uv_ip6_name(const struct sockaddr_in6* src, char* dst, size_t size);\n\nUV_EXTERN int uv_inet_ntop(int af, const void* src, char* dst, size_t size);\nUV_EXTERN int uv_inet_pton(int af, const char* src, void* dst);\n\nUV_EXTERN int uv_exepath(char* buffer, size_t* size);\n\nUV_EXTERN int uv_cwd(char* buffer, size_t* size);\n\nUV_EXTERN int uv_chdir(const char* dir);\n\nUV_EXTERN uint64_t uv_get_free_memory(void);\nUV_EXTERN uint64_t uv_get_total_memory(void);\n\nUV_EXTERN uint64_t uv_hrtime(void);\n\nUV_EXTERN void uv_disable_stdio_inheritance(void);\n\nUV_EXTERN int uv_dlopen(const char* filename, uv_lib_t* lib);\nUV_EXTERN void uv_dlclose(uv_lib_t* lib);\nUV_EXTERN int uv_dlsym(uv_lib_t* lib, const char* name, void** ptr);\nUV_EXTERN const char* uv_dlerror(const uv_lib_t* lib);\n\nUV_EXTERN int uv_mutex_init(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_destroy(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_lock(uv_mutex_t* handle);\nUV_EXTERN int uv_mutex_trylock(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_unlock(uv_mutex_t* handle);\n\nUV_EXTERN int uv_rwlock_init(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_destroy(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_rdlock(uv_rwlock_t* rwlock);\nUV_EXTERN int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_wrlock(uv_rwlock_t* rwlock);\nUV_EXTERN int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);\n\nUV_EXTERN int uv_sem_init(uv_sem_t* sem, unsigned int value);\nUV_EXTERN void uv_sem_destroy(uv_sem_t* sem);\nUV_EXTERN void uv_sem_post(uv_sem_t* sem);\nUV_EXTERN void uv_sem_wait(uv_sem_t* sem);\nUV_EXTERN int uv_sem_trywait(uv_sem_t* sem);\n\nUV_EXTERN int uv_cond_init(uv_cond_t* cond);\nUV_EXTERN void uv_cond_destroy(uv_cond_t* cond);\nUV_EXTERN void uv_cond_signal(uv_cond_t* cond);\nUV_EXTERN void uv_cond_broadcast(uv_cond_t* cond);\n\nUV_EXTERN int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);\nUV_EXTERN void uv_barrier_destroy(uv_barrier_t* barrier);\nUV_EXTERN int uv_barrier_wait(uv_barrier_t* barrier);\n\nUV_EXTERN void uv_cond_wait(uv_cond_t* cond, uv_mutex_t* mutex);\nUV_EXTERN int uv_cond_timedwait(uv_cond_t* cond,\n                                uv_mutex_t* mutex,\n                                uint64_t timeout);\n\nUV_EXTERN void uv_once(uv_once_t* guard, void (*callback)(void));\n\nUV_EXTERN int uv_key_create(uv_key_t* key);\nUV_EXTERN void uv_key_delete(uv_key_t* key);\nUV_EXTERN void* uv_key_get(uv_key_t* key);\nUV_EXTERN void uv_key_set(uv_key_t* key, void* value);\n\ntypedef void (*uv_thread_cb)(void* arg);\n\nUV_EXTERN int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);\nUV_EXTERN uv_thread_t uv_thread_self(void);\nUV_EXTERN int uv_thread_join(uv_thread_t *tid);\nUV_EXTERN int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2);\n\n/* The presence of these unions force similar struct layout. */\n#define XX(_, name) uv_ ## name ## _t name;\nunion uv_any_handle {\n  UV_HANDLE_TYPE_MAP(XX)\n};\n\nunion uv_any_req {\n  UV_REQ_TYPE_MAP(XX)\n};\n#undef XX\n\n\nstruct uv_loop_s {\n  /* User data - use this for whatever. */\n  void* data;\n  /* Loop reference counting. */\n  unsigned int active_handles;\n  void* handle_queue[2];\n  void* active_reqs[2];\n  /* Internal flag to signal loop stop. */\n  unsigned int stop_flag;\n  UV_LOOP_PRIVATE_FIELDS\n};\n\n\n/* Don't export the private CPP symbols. */\n#undef UV_HANDLE_TYPE_PRIVATE\n#undef UV_REQ_TYPE_PRIVATE\n#undef UV_REQ_PRIVATE_FIELDS\n#undef UV_STREAM_PRIVATE_FIELDS\n#undef UV_TCP_PRIVATE_FIELDS\n#undef UV_PREPARE_PRIVATE_FIELDS\n#undef UV_CHECK_PRIVATE_FIELDS\n#undef UV_IDLE_PRIVATE_FIELDS\n#undef UV_ASYNC_PRIVATE_FIELDS\n#undef UV_TIMER_PRIVATE_FIELDS\n#undef UV_GETADDRINFO_PRIVATE_FIELDS\n#undef UV_GETNAMEINFO_PRIVATE_FIELDS\n#undef UV_FS_REQ_PRIVATE_FIELDS\n#undef UV_WORK_PRIVATE_FIELDS\n#undef UV_FS_EVENT_PRIVATE_FIELDS\n#undef UV_SIGNAL_PRIVATE_FIELDS\n#undef UV_LOOP_PRIVATE_FIELDS\n#undef UV_LOOP_PRIVATE_PLATFORM_FIELDS\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* UV_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/include/uv-unix.h": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n#ifndef UV_UNIX_H\n#define UV_UNIX_H\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <dirent.h>\n\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n\n#include <termios.h>\n#include <pwd.h>\n\n#include <semaphore.h>\n#include <pthread.h>\n#include <signal.h>\n\n#include \"uv-threadpool.h\"\n\n#if defined(__linux__)\n# include \"uv-linux.h\"\n#elif defined(_AIX)\n# include \"uv-aix.h\"\n#elif defined(__sun)\n# include \"uv-sunos.h\"\n#elif defined(__APPLE__)\n# include \"uv-darwin.h\"\n#elif defined(__DragonFly__)  || \\\n      defined(__FreeBSD__)    || \\\n      defined(__OpenBSD__)    || \\\n      defined(__NetBSD__)\n# include \"uv-bsd.h\"\n#endif\n\n#ifndef PTHREAD_BARRIER_SERIAL_THREAD\n# include \"pthread-barrier.h\"\n#endif\n\n#ifndef NI_MAXHOST\n# define NI_MAXHOST 1025\n#endif\n\n#ifndef NI_MAXSERV\n# define NI_MAXSERV 32\n#endif\n\n#ifndef UV_IO_PRIVATE_PLATFORM_FIELDS\n# define UV_IO_PRIVATE_PLATFORM_FIELDS /* empty */\n#endif\n\nstruct uv__io_s;\nstruct uv__async;\nstruct uv_loop_s;\n\ntypedef void (*uv__io_cb)(struct uv_loop_s* loop,\n                          struct uv__io_s* w,\n                          unsigned int events);\ntypedef struct uv__io_s uv__io_t;\n\nstruct uv__io_s {\n  uv__io_cb cb;\n  void* pending_queue[2];\n  void* watcher_queue[2];\n  unsigned int pevents; /* Pending event mask i.e. mask at next tick. */\n  unsigned int events;  /* Current event mask. */\n  int fd;\n  UV_IO_PRIVATE_PLATFORM_FIELDS\n};\n\ntypedef void (*uv__async_cb)(struct uv_loop_s* loop,\n                             struct uv__async* w,\n                             unsigned int nevents);\n\nstruct uv__async {\n  uv__async_cb cb;\n  uv__io_t io_watcher;\n  int wfd;\n};\n\n#ifndef UV_PLATFORM_SEM_T\n# define UV_PLATFORM_SEM_T sem_t\n#endif\n\n#ifndef UV_PLATFORM_LOOP_FIELDS\n# define UV_PLATFORM_LOOP_FIELDS /* empty */\n#endif\n\n#ifndef UV_PLATFORM_FS_EVENT_FIELDS\n# define UV_PLATFORM_FS_EVENT_FIELDS /* empty */\n#endif\n\n#ifndef UV_STREAM_PRIVATE_PLATFORM_FIELDS\n# define UV_STREAM_PRIVATE_PLATFORM_FIELDS /* empty */\n#endif\n\n/* Note: May be cast to struct iovec. See writev(2). */\ntypedef struct uv_buf_t {\n  char* base;\n  size_t len;\n} uv_buf_t;\n\ntypedef int uv_file;\ntypedef int uv_os_sock_t;\ntypedef int uv_os_fd_t;\n\n#define UV_ONCE_INIT PTHREAD_ONCE_INIT\n\ntypedef pthread_once_t uv_once_t;\ntypedef pthread_t uv_thread_t;\ntypedef pthread_mutex_t uv_mutex_t;\ntypedef pthread_rwlock_t uv_rwlock_t;\ntypedef UV_PLATFORM_SEM_T uv_sem_t;\ntypedef pthread_cond_t uv_cond_t;\ntypedef pthread_key_t uv_key_t;\ntypedef pthread_barrier_t uv_barrier_t;\n\n\n/* Platform-specific definitions for uv_spawn support. */\ntypedef gid_t uv_gid_t;\ntypedef uid_t uv_uid_t;\n\ntypedef struct dirent uv__dirent_t;\n\n#if defined(DT_UNKNOWN)\n# define HAVE_DIRENT_TYPES\n# if defined(DT_REG)\n#  define UV__DT_FILE DT_REG\n# else\n#  define UV__DT_FILE -1\n# endif\n# if defined(DT_DIR)\n#  define UV__DT_DIR DT_DIR\n# else\n#  define UV__DT_DIR -2\n# endif\n# if defined(DT_LNK)\n#  define UV__DT_LINK DT_LNK\n# else\n#  define UV__DT_LINK -3\n# endif\n# if defined(DT_FIFO)\n#  define UV__DT_FIFO DT_FIFO\n# else\n#  define UV__DT_FIFO -4\n# endif\n# if defined(DT_SOCK)\n#  define UV__DT_SOCKET DT_SOCK\n# else\n#  define UV__DT_SOCKET -5\n# endif\n# if defined(DT_CHR)\n#  define UV__DT_CHAR DT_CHR\n# else\n#  define UV__DT_CHAR -6\n# endif\n# if defined(DT_BLK)\n#  define UV__DT_BLOCK DT_BLK\n# else\n#  define UV__DT_BLOCK -7\n# endif\n#endif\n\n/* Platform-specific definitions for uv_dlopen support. */\n#define UV_DYNAMIC /* empty */\n\ntypedef struct {\n  void* handle;\n  char* errmsg;\n} uv_lib_t;\n\n#define UV_LOOP_PRIVATE_FIELDS                                                \\\n  unsigned long flags;                                                        \\\n  int backend_fd;                                                             \\\n  void* pending_queue[2];                                                     \\\n  void* watcher_queue[2];                                                     \\\n  uv__io_t** watchers;                                                        \\\n  unsigned int nwatchers;                                                     \\\n  unsigned int nfds;                                                          \\\n  void* wq[2];                                                                \\\n  uv_mutex_t wq_mutex;                                                        \\\n  uv_async_t wq_async;                                                        \\\n  uv_rwlock_t cloexec_lock;                                                   \\\n  uv_handle_t* closing_handles;                                               \\\n  void* process_handles[2];                                                   \\\n  void* prepare_handles[2];                                                   \\\n  void* check_handles[2];                                                     \\\n  void* idle_handles[2];                                                      \\\n  void* async_handles[2];                                                     \\\n  struct uv__async async_watcher;                                             \\\n  struct {                                                                    \\\n    void* min;                                                                \\\n    unsigned int nelts;                                                       \\\n  } timer_heap;                                                               \\\n  uint64_t timer_counter;                                                     \\\n  uint64_t time;                                                              \\\n  int signal_pipefd[2];                                                       \\\n  uv__io_t signal_io_watcher;                                                 \\\n  uv_signal_t child_watcher;                                                  \\\n  int emfile_fd;                                                              \\\n  UV_PLATFORM_LOOP_FIELDS                                                     \\\n\n#define UV_REQ_TYPE_PRIVATE /* empty */\n\n#define UV_REQ_PRIVATE_FIELDS  /* empty */\n\n#define UV_PRIVATE_REQ_TYPES /* empty */\n\n#define UV_WRITE_PRIVATE_FIELDS                                               \\\n  void* queue[2];                                                             \\\n  unsigned int write_index;                                                   \\\n  uv_buf_t* bufs;                                                             \\\n  unsigned int nbufs;                                                         \\\n  int error;                                                                  \\\n  uv_buf_t bufsml[4];                                                         \\\n\n#define UV_CONNECT_PRIVATE_FIELDS                                             \\\n  void* queue[2];                                                             \\\n\n#define UV_SHUTDOWN_PRIVATE_FIELDS /* empty */\n\n#define UV_UDP_SEND_PRIVATE_FIELDS                                            \\\n  void* queue[2];                                                             \\\n  struct sockaddr_storage addr;                                               \\\n  unsigned int nbufs;                                                         \\\n  uv_buf_t* bufs;                                                             \\\n  ssize_t status;                                                             \\\n  uv_udp_send_cb send_cb;                                                     \\\n  uv_buf_t bufsml[4];                                                         \\\n\n#define UV_HANDLE_PRIVATE_FIELDS                                              \\\n  uv_handle_t* next_closing;                                                  \\\n  unsigned int flags;                                                         \\\n\n#define UV_STREAM_PRIVATE_FIELDS                                              \\\n  uv_connect_t *connect_req;                                                  \\\n  uv_shutdown_t *shutdown_req;                                                \\\n  uv__io_t io_watcher;                                                        \\\n  void* write_queue[2];                                                       \\\n  void* write_completed_queue[2];                                             \\\n  uv_connection_cb connection_cb;                                             \\\n  int delayed_error;                                                          \\\n  int accepted_fd;                                                            \\\n  void* queued_fds;                                                           \\\n  UV_STREAM_PRIVATE_PLATFORM_FIELDS                                           \\\n\n#define UV_TCP_PRIVATE_FIELDS /* empty */\n\n#define UV_UDP_PRIVATE_FIELDS                                                 \\\n  uv_alloc_cb alloc_cb;                                                       \\\n  uv_udp_recv_cb recv_cb;                                                     \\\n  uv__io_t io_watcher;                                                        \\\n  void* write_queue[2];                                                       \\\n  void* write_completed_queue[2];                                             \\\n\n#define UV_PIPE_PRIVATE_FIELDS                                                \\\n  const char* pipe_fname; /* strdup'ed */\n\n#define UV_POLL_PRIVATE_FIELDS                                                \\\n  uv__io_t io_watcher;\n\n#define UV_PREPARE_PRIVATE_FIELDS                                             \\\n  uv_prepare_cb prepare_cb;                                                   \\\n  void* queue[2];                                                             \\\n\n#define UV_CHECK_PRIVATE_FIELDS                                               \\\n  uv_check_cb check_cb;                                                       \\\n  void* queue[2];                                                             \\\n\n#define UV_IDLE_PRIVATE_FIELDS                                                \\\n  uv_idle_cb idle_cb;                                                         \\\n  void* queue[2];                                                             \\\n\n#define UV_ASYNC_PRIVATE_FIELDS                                               \\\n  uv_async_cb async_cb;                                                       \\\n  void* queue[2];                                                             \\\n  int pending;                                                                \\\n\n#define UV_TIMER_PRIVATE_FIELDS                                               \\\n  uv_timer_cb timer_cb;                                                       \\\n  void* heap_node[3];                                                         \\\n  uint64_t timeout;                                                           \\\n  uint64_t repeat;                                                            \\\n  uint64_t start_id;\n\n#define UV_GETADDRINFO_PRIVATE_FIELDS                                         \\\n  struct uv__work work_req;                                                   \\\n  uv_getaddrinfo_cb cb;                                                       \\\n  struct addrinfo* hints;                                                     \\\n  char* hostname;                                                             \\\n  char* service;                                                              \\\n  struct addrinfo* addrinfo;                                                  \\\n  int retcode;\n\n#define UV_GETNAMEINFO_PRIVATE_FIELDS                                         \\\n  struct uv__work work_req;                                                   \\\n  uv_getnameinfo_cb getnameinfo_cb;                                           \\\n  struct sockaddr_storage storage;                                            \\\n  int flags;                                                                  \\\n  char host[NI_MAXHOST];                                                      \\\n  char service[NI_MAXSERV];                                                   \\\n  int retcode;\n\n#define UV_PROCESS_PRIVATE_FIELDS                                             \\\n  void* queue[2];                                                             \\\n  int status;                                                                 \\\n\n#define UV_FS_PRIVATE_FIELDS                                                  \\\n  const char *new_path;                                                       \\\n  uv_file file;                                                               \\\n  int flags;                                                                  \\\n  mode_t mode;                                                                \\\n  unsigned int nbufs;                                                         \\\n  uv_buf_t* bufs;                                                             \\\n  off_t off;                                                                  \\\n  uv_uid_t uid;                                                               \\\n  uv_gid_t gid;                                                               \\\n  double atime;                                                               \\\n  double mtime;                                                               \\\n  struct uv__work work_req;                                                   \\\n  uv_buf_t bufsml[4];                                                         \\\n\n#define UV_WORK_PRIVATE_FIELDS                                                \\\n  struct uv__work work_req;\n\n#define UV_TTY_PRIVATE_FIELDS                                                 \\\n  struct termios orig_termios;                                                \\\n  int mode;\n\n#define UV_SIGNAL_PRIVATE_FIELDS                                              \\\n  /* RB_ENTRY(uv_signal_s) tree_entry; */                                     \\\n  struct {                                                                    \\\n    struct uv_signal_s* rbe_left;                                             \\\n    struct uv_signal_s* rbe_right;                                            \\\n    struct uv_signal_s* rbe_parent;                                           \\\n    int rbe_color;                                                            \\\n  } tree_entry;                                                               \\\n  /* Use two counters here so we don have to fiddle with atomics. */          \\\n  unsigned int caught_signals;                                                \\\n  unsigned int dispatched_signals;\n\n#define UV_FS_EVENT_PRIVATE_FIELDS                                            \\\n  uv_fs_event_cb cb;                                                          \\\n  UV_PLATFORM_FS_EVENT_FIELDS                                                 \\\n\n#endif /* UV_UNIX_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/icu-small/source/common/putil.cpp": "/*\n******************************************************************************\n*\n*   Copyright (C) 1997-2015, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : putil.c (previously putil.cpp and ptypes.cpp)\n*\n*   Date        Name        Description\n*   04/14/97    aliu        Creation.\n*   04/24/97    aliu        Added getDefaultDataDirectory() and\n*                            getDefaultLocaleID().\n*   04/28/97    aliu        Rewritten to assume Unix and apply general methods\n*                            for assumed case.  Non-UNIX platforms must be\n*                            special-cased.  Rewrote numeric methods dealing\n*                            with NaN and Infinity to be platform independent\n*                             over all IEEE 754 platforms.\n*   05/13/97    aliu        Restored sign of timezone\n*                            (semantics are hours West of GMT)\n*   06/16/98    erm         Added IEEE_754 stuff, cleaned up isInfinite, isNan,\n*                             nextDouble..\n*   07/22/98    stephen     Added remainder, max, min, trunc\n*   08/13/98    stephen     Added isNegativeInfinity, isPositiveInfinity\n*   08/24/98    stephen     Added longBitsFromDouble\n*   09/08/98    stephen     Minor changes for Mac Port\n*   03/02/99    stephen     Removed openFile().  Added AS400 support.\n*                            Fixed EBCDIC tables\n*   04/15/99    stephen     Converted to C.\n*   06/28/99    stephen     Removed mutex locking in u_isBigEndian().\n*   08/04/99    jeffrey R.  Added OS/2 changes\n*   11/15/99    helena      Integrated S/390 IEEE support.\n*   04/26/01    Barry N.    OS/400 support for uprv_getDefaultLocaleID\n*   08/15/01    Steven H.   OS/400 support for uprv_getDefaultCodepage\n*   01/03/08    Steven L.   Fake Time Support\n******************************************************************************\n*/\n\n// Defines _XOPEN_SOURCE for access to POSIX functions.\n// Must be before any other #includes.\n#include \"uposixdefs.h\"\n\n/* include ICU headers */\n#include \"unicode/utypes.h\"\n#include \"unicode/putil.h\"\n#include \"unicode/ustring.h\"\n#include \"putilimp.h\"\n#include \"uassert.h\"\n#include \"umutex.h\"\n#include \"cmemory.h\"\n#include \"cstring.h\"\n#include \"locmap.h\"\n#include \"ucln_cmn.h\"\n#include \"charstr.h\"\n\n/* Include standard headers. */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <locale.h>\n#include <float.h>\n\n#ifndef U_COMMON_IMPLEMENTATION\n#error U_COMMON_IMPLEMENTATION not set - must be set for all ICU source files in common/ - see http://userguide.icu-project.org/howtouseicu\n#endif\n\n\n/* include system headers */\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /*\n     * TODO: U_PLATFORM_USES_ONLY_WIN32_API includes MinGW.\n     * Should Cygwin be included as well (U_PLATFORM_HAS_WIN32_API)\n     * to use native APIs as much as possible?\n     */\n#   define WIN32_LEAN_AND_MEAN\n#   define VC_EXTRALEAN\n#   define NOUSER\n#   define NOSERVICE\n#   define NOIME\n#   define NOMCX\n#   include <windows.h>\n#   include \"wintz.h\"\n#elif U_PLATFORM == U_PF_OS400\n#   include <float.h>\n#   include <qusec.h>       /* error code structure */\n#   include <qusrjobi.h>\n#   include <qliept.h>      /* EPT_CALL macro  - this include must be after all other \"QSYSINCs\" */\n#   include <mih/testptr.h> /* For uprv_maximumPtr */\n#elif U_PLATFORM == U_PF_OS390\n#   include \"unicode/ucnv.h\"   /* Needed for UCNV_SWAP_LFNL_OPTION_STRING */\n#elif U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS\n#   include <limits.h>\n#   include <unistd.h>\n#   if U_PLATFORM == U_PF_SOLARIS\n#       ifndef _XPG4_2\n#           define _XPG4_2\n#       endif\n#   endif\n#elif U_PLATFORM == U_PF_QNX\n#   include <sys/neutrino.h>\n#endif\n\n#if (U_PF_MINGW <= U_PLATFORM && U_PLATFORM <= U_PF_CYGWIN) && defined(__STRICT_ANSI__)\n/* tzset isn't defined in strict ANSI on Cygwin and MinGW. */\n#undef __STRICT_ANSI__\n#endif\n\n/*\n * Cygwin with GCC requires inclusion of time.h after the above disabling strict asci mode statement.\n */\n#include <time.h>\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#include <sys/time.h>\n#endif\n\n/*\n * Only include langinfo.h if we have a way to get the codeset. If we later\n * depend on more feature, we can test on U_HAVE_NL_LANGINFO.\n *\n */\n\n#if U_HAVE_NL_LANGINFO_CODESET\n#include <langinfo.h>\n#endif\n\n/**\n * Simple things (presence of functions, etc) should just go in configure.in and be added to\n * icucfg.h via autoheader.\n */\n#if U_PLATFORM_IMPLEMENTS_POSIX\n#   if U_PLATFORM == U_PF_OS400\n#    define HAVE_DLFCN_H 0\n#    define HAVE_DLOPEN 0\n#   else\n#   ifndef HAVE_DLFCN_H\n#    define HAVE_DLFCN_H 1\n#   endif\n#   ifndef HAVE_DLOPEN\n#    define HAVE_DLOPEN 1\n#   endif\n#   endif\n#   ifndef HAVE_GETTIMEOFDAY\n#    define HAVE_GETTIMEOFDAY 1\n#   endif\n#else\n#   define HAVE_DLFCN_H 0\n#   define HAVE_DLOPEN 0\n#   define HAVE_GETTIMEOFDAY 0\n#endif\n\nU_NAMESPACE_USE\n\n/* Define the extension for data files, again... */\n#define DATA_TYPE \"dat\"\n\n/* Leave this copyright notice here! */\nstatic const char copyright[] = U_COPYRIGHT_STRING;\n\n/* floating point implementations ------------------------------------------- */\n\n/* We return QNAN rather than SNAN*/\n#define SIGN 0x80000000U\n\n/* Make it easy to define certain types of constants */\ntypedef union {\n    int64_t i64; /* This must be defined first in order to allow the initialization to work. This is a C89 feature. */\n    double d64;\n} BitPatternConversion;\nstatic const BitPatternConversion gNan = { (int64_t) INT64_C(0x7FF8000000000000) };\nstatic const BitPatternConversion gInf = { (int64_t) INT64_C(0x7FF0000000000000) };\n\n/*---------------------------------------------------------------------------\n  Platform utilities\n  Our general strategy is to assume we're on a POSIX platform.  Platforms which\n  are non-POSIX must declare themselves so.  The default POSIX implementation\n  will sometimes work for non-POSIX platforms as well (e.g., the NaN-related\n  functions).\n  ---------------------------------------------------------------------------*/\n\n#if U_PLATFORM_USES_ONLY_WIN32_API || U_PLATFORM == U_PF_OS400\n#   undef U_POSIX_LOCALE\n#else\n#   define U_POSIX_LOCALE    1\n#endif\n\n/*\n    WARNING! u_topNBytesOfDouble and u_bottomNBytesOfDouble\n    can't be properly optimized by the gcc compiler sometimes (i.e. gcc 3.2).\n*/\n#if !IEEE_754\nstatic char*\nu_topNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)d;\n#else\n    return (char*)(d + 1) - n;\n#endif\n}\n\nstatic char*\nu_bottomNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)(d + 1) - n;\n#else\n    return (char*)d;\n#endif\n}\n#endif   /* !IEEE_754 */\n\n#if IEEE_754\nstatic UBool\nu_signBit(double d) {\n    uint8_t hiByte;\n#if U_IS_BIG_ENDIAN\n    hiByte = *(uint8_t *)&d;\n#else\n    hiByte = *(((uint8_t *)&d) + sizeof(double) - 1);\n#endif\n    return (hiByte & 0x80) != 0;\n}\n#endif\n\n\n\n#if defined (U_DEBUG_FAKETIME)\n/* Override the clock to test things without having to move the system clock.\n * Assumes POSIX gettimeofday() will function\n */\nUDate fakeClock_t0 = 0; /** Time to start the clock from **/\nUDate fakeClock_dt = 0; /** Offset (fake time - real time) **/\nUBool fakeClock_set = FALSE; /** True if fake clock has spun up **/\nstatic UMutex fakeClockMutex = U_MUTEX_INTIALIZER;\n\nstatic UDate getUTCtime_real() {\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n}\n\nstatic UDate getUTCtime_fake() {\n    umtx_lock(&fakeClockMutex);\n    if(!fakeClock_set) {\n        UDate real = getUTCtime_real();\n        const char *fake_start = getenv(\"U_FAKETIME_START\");\n        if((fake_start!=NULL) && (fake_start[0]!=0)) {\n            sscanf(fake_start,\"%lf\",&fakeClock_t0);\n            fakeClock_dt = fakeClock_t0 - real;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, so the ICU clock will start at a preset value\\n\"\n                    \"env variable U_FAKETIME_START=%.0f (%s) for an offset of %.0f ms from the current time %.0f\\n\",\n                    fakeClock_t0, fake_start, fakeClock_dt, real);\n        } else {\n          fakeClock_dt = 0;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, but U_FAKETIME_START was not set.\\n\"\n                    \"Set U_FAKETIME_START to the number of milliseconds since 1/1/1970 to set the ICU clock.\\n\");\n        }\n        fakeClock_set = TRUE;\n    }\n    umtx_unlock(&fakeClockMutex);\n\n    return getUTCtime_real() + fakeClock_dt;\n}\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\ntypedef union {\n    int64_t int64;\n    FILETIME fileTime;\n} FileTimeConversion;   /* This is like a ULARGE_INTEGER */\n\n/* Number of 100 nanoseconds from 1/1/1601 to 1/1/1970 */\n#define EPOCH_BIAS  INT64_C(116444736000000000)\n#define HECTONANOSECOND_PER_MILLISECOND   10000\n\n#endif\n\n/*---------------------------------------------------------------------------\n  Universal Implementations\n  These are designed to work on all platforms.  Try these, and if they\n  don't work on your platform, then special case your platform with new\n  implementations.\n---------------------------------------------------------------------------*/\n\nU_CAPI UDate U_EXPORT2\nuprv_getUTCtime()\n{\n#if defined(U_DEBUG_FAKETIME)\n    return getUTCtime_fake(); /* Hook for overriding the clock */\n#else\n    return uprv_getRawUTCtime();\n#endif\n}\n\n/* Return UTC (GMT) time measured in milliseconds since 0:00 on 1/1/70.*/\nU_CAPI UDate U_EXPORT2\nuprv_getRawUTCtime()\n{\n#if U_PLATFORM_USES_ONLY_WIN32_API\n\n    FileTimeConversion winTime;\n    GetSystemTimeAsFileTime(&winTime.fileTime);\n    return (UDate)((winTime.int64 - EPOCH_BIAS) / HECTONANOSECOND_PER_MILLISECOND);\n#else\n\n#if HAVE_GETTIMEOFDAY\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n#else\n    time_t epochtime;\n    time(&epochtime);\n    return (UDate)epochtime * U_MILLIS_PER_SECOND;\n#endif\n\n#endif\n}\n\n/*-----------------------------------------------------------------------------\n  IEEE 754\n  These methods detect and return NaN and infinity values for doubles\n  conforming to IEEE 754.  Platforms which support this standard include X86,\n  Mac 680x0, Mac PowerPC, AIX RS/6000, and most others.\n  If this doesn't work on your platform, you have non-IEEE floating-point, and\n  will need to code your own versions.  A naive implementation is to return 0.0\n  for getNaN and getInfinity, and false for isNaN and isInfinite.\n  ---------------------------------------------------------------------------*/\n\nU_CAPI UBool U_EXPORT2\nuprv_isNaN(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is 0x7FF0000000000000U. Anything greater than that is a NaN */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) > gInf.i64);\n\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits & 0x7F080000L) == 0x7F080000L) &&\n      (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return number != number;\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isInfinite(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is exactly 0x7FF0000000000000U. */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) == gInf.i64);\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits  & ~SIGN) == 0x70FF0000L) && (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return number == (2.0 * number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isPositiveInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number > 0 && uprv_isInfinite(number));\n#else\n    return uprv_isInfinite(number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isNegativeInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number < 0 && uprv_isInfinite(number));\n\n#else\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    return((highBits & SIGN) && uprv_isInfinite(number));\n\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getNaN()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gNan.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getInfinity()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gInf.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_floor(double x)\n{\n    return floor(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_ceil(double x)\n{\n    return ceil(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_round(double x)\n{\n    return uprv_floor(x + 0.5);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fabs(double x)\n{\n    return fabs(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_modf(double x, double* y)\n{\n    return modf(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmod(double x, double y)\n{\n    return fmod(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow(double x, double y)\n{\n    /* This is declared as \"double pow(double x, double y)\" */\n    return pow(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow10(int32_t x)\n{\n    return pow(10.0, (double)x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmax(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(x))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? x : y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmin(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(y))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? y : x);\n}\n\n/**\n * Truncates the given double.\n * trunc(3.3) = 3.0, trunc (-3.3) = -3.0\n * This is different than calling floor() or ceil():\n * floor(3.3) = 3, floor(-3.3) = -4\n * ceil(3.3) = 4, ceil(-3.3) = -3\n */\nU_CAPI double U_EXPORT2\nuprv_trunc(double d)\n{\n#if IEEE_754\n    /* handle error cases*/\n    if(uprv_isNaN(d))\n        return uprv_getNaN();\n    if(uprv_isInfinite(d))\n        return uprv_getInfinity();\n\n    if(u_signBit(d))    /* Signbit() picks up -0.0;  d<0 does not. */\n        return ceil(d);\n    else\n        return floor(d);\n\n#else\n    return d >= 0 ? floor(d) : ceil(d);\n\n#endif\n}\n\n/**\n * Return the largest positive number that can be represented by an integer\n * type of arbitrary bit length.\n */\nU_CAPI double U_EXPORT2\nuprv_maxMantissa(void)\n{\n    return pow(2.0, DBL_MANT_DIG + 1.0) - 1.0;\n}\n\nU_CAPI double U_EXPORT2\nuprv_log(double d)\n{\n    return log(d);\n}\n\nU_CAPI void * U_EXPORT2\nuprv_maximumPtr(void * base)\n{\n#if U_PLATFORM == U_PF_OS400\n    /*\n     * With the provided function we should never be out of range of a given segment\n     * (a traditional/typical segment that is).  Our segments have 5 bytes for the\n     * id and 3 bytes for the offset.  The key is that the casting takes care of\n     * only retrieving the offset portion minus x1000.  Hence, the smallest offset\n     * seen in a program is x001000 and when casted to an int would be 0.\n     * That's why we can only add 0xffefff.  Otherwise, we would exceed the segment.\n     *\n     * Currently, 16MB is the current addressing limitation on i5/OS if the activation is\n     * non-TERASPACE.  If it is TERASPACE it is 2GB - 4k(header information).\n     * This function determines the activation based on the pointer that is passed in and\n     * calculates the appropriate maximum available size for\n     * each pointer type (TERASPACE and non-TERASPACE)\n     *\n     * Unlike other operating systems, the pointer model isn't determined at\n     * compile time on i5/OS.\n     */\n    if ((base != NULL) && (_TESTPTR(base, _C_TERASPACE_CHECK))) {\n        /* if it is a TERASPACE pointer the max is 2GB - 4k */\n        return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0x7fffefff)));\n    }\n    /* otherwise 16MB since NULL ptr is not checkable or the ptr is not TERASPACE */\n    return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0xffefff)));\n\n#else\n    return U_MAX_PTR(base);\n#endif\n}\n\n/*---------------------------------------------------------------------------\n  Platform-specific Implementations\n  Try these, and if they don't work on your platform, then special case your\n  platform with new implementations.\n  ---------------------------------------------------------------------------*/\n\n/* Generic time zone layer -------------------------------------------------- */\n\n/* Time zone utilities */\nU_CAPI void U_EXPORT2\nuprv_tzset()\n{\n#if defined(U_TZSET)\n    U_TZSET();\n#else\n    /* no initialization*/\n#endif\n}\n\nU_CAPI int32_t U_EXPORT2\nuprv_timezone()\n{\n#ifdef U_TIMEZONE\n    return U_TIMEZONE;\n#else\n    time_t t, t1, t2;\n    struct tm tmrec;\n    int32_t tdiff = 0;\n\n    time(&t);\n    uprv_memcpy( &tmrec, localtime(&t), sizeof(tmrec) );\n#if U_PLATFORM != U_PF_IPHONE\n    UBool dst_checked = (tmrec.tm_isdst != 0); /* daylight savings time is checked*/\n#endif\n    t1 = mktime(&tmrec);                 /* local time in seconds*/\n    uprv_memcpy( &tmrec, gmtime(&t), sizeof(tmrec) );\n    t2 = mktime(&tmrec);                 /* GMT (or UTC) in seconds*/\n    tdiff = t2 - t1;\n\n#if U_PLATFORM != U_PF_IPHONE\n    /* imitate NT behaviour, which returns same timezone offset to GMT for\n       winter and summer.\n       This does not work on all platforms. For instance, on glibc on Linux\n       and on Mac OS 10.5, tdiff calculated above remains the same\n       regardless of whether DST is in effect or not. iOS is another\n       platform where this does not work. Linux + glibc and Mac OS 10.5\n       have U_TIMEZONE defined so that this code is not reached.\n    */\n    if (dst_checked)\n        tdiff += 3600;\n#endif\n    return tdiff;\n#endif\n}\n\n/* Note that U_TZNAME does *not* have to be tzname, but if it is,\n   some platforms need to have it declared here. */\n\n#if defined(U_TZNAME) && (U_PLATFORM == U_PF_IRIX || U_PLATFORM_IS_DARWIN_BASED || (U_PLATFORM == U_PF_CYGWIN && !U_PLATFORM_USES_ONLY_WIN32_API))\n/* RS6000 and others reject char **tzname.  */\nextern U_IMPORT char *U_TZNAME[];\n#endif\n\n#if !UCONFIG_NO_FILE_IO && ((U_PLATFORM_IS_DARWIN_BASED && (U_PLATFORM != U_PF_IPHONE || defined(U_TIMEZONE))) || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS)\n/* These platforms are likely to use Olson timezone IDs. */\n#define CHECK_LOCALTIME_LINK 1\n#if U_PLATFORM_IS_DARWIN_BASED\n#include <tzfile.h>\n#define TZZONEINFO      (TZDIR \"/\")\n#elif U_PLATFORM == U_PF_SOLARIS\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/lib/zoneinfo/\"\n#define TZZONEINFO2     \"../usr/share/lib/zoneinfo/\"\n#define TZ_ENV_CHECK    \"localtime\"\n#else\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/zoneinfo/\"\n#endif\n#if U_HAVE_DIRENT_H\n#define TZFILE_SKIP     \"posixrules\" /* tz file to skip when searching. */\n/* Some Linux distributions have 'localtime' in /usr/share/zoneinfo\n   symlinked to /etc/localtime, which makes searchForTZFile return\n   'localtime' when it's the first match. */\n#define TZFILE_SKIP2    \"localtime\"\n#define SEARCH_TZFILE\n#include <dirent.h>  /* Needed to search through system timezone files */\n#endif\nstatic char gTimeZoneBuffer[PATH_MAX];\nstatic char *gTimeZoneBufferPtr = NULL;\n#endif\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#define isNonDigit(ch) (ch < '0' || '9' < ch)\nstatic UBool isValidOlsonID(const char *id) {\n    int32_t idx = 0;\n\n    /* Determine if this is something like Iceland (Olson ID)\n    or AST4ADT (non-Olson ID) */\n    while (id[idx] && isNonDigit(id[idx]) && id[idx] != ',') {\n        idx++;\n    }\n\n    /* If we went through the whole string, then it might be okay.\n    The timezone is sometimes set to \"CST-7CDT\", \"CST6CDT5,J129,J131/19:30\",\n    \"GRNLNDST3GRNLNDDT\" or similar, so we cannot use it.\n    The rest of the time it could be an Olson ID. George */\n    return (UBool)(id[idx] == 0\n        || uprv_strcmp(id, \"PST8PDT\") == 0\n        || uprv_strcmp(id, \"MST7MDT\") == 0\n        || uprv_strcmp(id, \"CST6CDT\") == 0\n        || uprv_strcmp(id, \"EST5EDT\") == 0);\n}\n\n/* On some Unix-like OS, 'posix' subdirectory in\n   /usr/share/zoneinfo replicates the top-level contents. 'right'\n   subdirectory has the same set of files, but individual files\n   are different from those in the top-level directory or 'posix'\n   because 'right' has files for TAI (Int'l Atomic Time) while 'posix'\n   has files for UTC.\n   When the first match for /etc/localtime is in either of them\n   (usually in posix because 'right' has different file contents),\n   or TZ environment variable points to one of them, createTimeZone\n   fails because, say, 'posix/America/New_York' is not an Olson\n   timezone id ('America/New_York' is). So, we have to skip\n   'posix/' and 'right/' at the beginning. */\nstatic void skipZoneIDPrefix(const char** id) {\n    if (uprv_strncmp(*id, \"posix/\", 6) == 0\n        || uprv_strncmp(*id, \"right/\", 6) == 0)\n    {\n        *id += 6;\n    }\n}\n#endif\n\n#if defined(U_TZNAME) && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#define CONVERT_HOURS_TO_SECONDS(offset) (int32_t)(offset*3600)\ntypedef struct OffsetZoneMapping {\n    int32_t offsetSeconds;\n    int32_t daylightType; /* 0=U_DAYLIGHT_NONE, 1=daylight in June-U_DAYLIGHT_JUNE, 2=daylight in December=U_DAYLIGHT_DECEMBER*/\n    const char *stdID;\n    const char *dstID;\n    const char *olsonID;\n} OffsetZoneMapping;\n\nenum { U_DAYLIGHT_NONE=0,U_DAYLIGHT_JUNE=1,U_DAYLIGHT_DECEMBER=2 };\n\n/*\nThis list tries to disambiguate a set of abbreviated timezone IDs and offsets\nand maps it to an Olson ID.\nBefore adding anything to this list, take a look at\nicu/source/tools/tzcode/tz.alias\nSometimes no daylight savings (0) is important to define due to aliases.\nThis list can be tested with icu/source/test/compat/tzone.pl\nMore values could be added to daylightType to increase precision.\n*/\nstatic const struct OffsetZoneMapping OFFSET_ZONE_MAPPINGS[] = {\n    {-45900, 2, \"CHAST\", \"CHADT\", \"Pacific/Chatham\"},\n    {-43200, 1, \"PETT\", \"PETST\", \"Asia/Kamchatka\"},\n    {-43200, 2, \"NZST\", \"NZDT\", \"Pacific/Auckland\"},\n    {-43200, 1, \"ANAT\", \"ANAST\", \"Asia/Anadyr\"},\n    {-39600, 1, \"MAGT\", \"MAGST\", \"Asia/Magadan\"},\n    {-37800, 2, \"LHST\", \"LHST\", \"Australia/Lord_Howe\"},\n    {-36000, 2, \"EST\", \"EST\", \"Australia/Sydney\"},\n    {-36000, 1, \"SAKT\", \"SAKST\", \"Asia/Sakhalin\"},\n    {-36000, 1, \"VLAT\", \"VLAST\", \"Asia/Vladivostok\"},\n    {-34200, 2, \"CST\", \"CST\", \"Australia/South\"},\n    {-32400, 1, \"YAKT\", \"YAKST\", \"Asia/Yakutsk\"},\n    {-32400, 1, \"CHOT\", \"CHOST\", \"Asia/Choibalsan\"},\n    {-31500, 2, \"CWST\", \"CWST\", \"Australia/Eucla\"},\n    {-28800, 1, \"IRKT\", \"IRKST\", \"Asia/Irkutsk\"},\n    {-28800, 1, \"ULAT\", \"ULAST\", \"Asia/Ulaanbaatar\"},\n    {-28800, 2, \"WST\", \"WST\", \"Australia/West\"},\n    {-25200, 1, \"HOVT\", \"HOVST\", \"Asia/Hovd\"},\n    {-25200, 1, \"KRAT\", \"KRAST\", \"Asia/Krasnoyarsk\"},\n    {-21600, 1, \"NOVT\", \"NOVST\", \"Asia/Novosibirsk\"},\n    {-21600, 1, \"OMST\", \"OMSST\", \"Asia/Omsk\"},\n    {-18000, 1, \"YEKT\", \"YEKST\", \"Asia/Yekaterinburg\"},\n    {-14400, 1, \"SAMT\", \"SAMST\", \"Europe/Samara\"},\n    {-14400, 1, \"AMT\", \"AMST\", \"Asia/Yerevan\"},\n    {-14400, 1, \"AZT\", \"AZST\", \"Asia/Baku\"},\n    {-10800, 1, \"AST\", \"ADT\", \"Asia/Baghdad\"},\n    {-10800, 1, \"MSK\", \"MSD\", \"Europe/Moscow\"},\n    {-10800, 1, \"VOLT\", \"VOLST\", \"Europe/Volgograd\"},\n    {-7200, 0, \"EET\", \"CEST\", \"Africa/Tripoli\"},\n    {-7200, 1, \"EET\", \"EEST\", \"Europe/Athens\"}, /* Conflicts with Africa/Cairo */\n    {-7200, 1, \"IST\", \"IDT\", \"Asia/Jerusalem\"},\n    {-3600, 0, \"CET\", \"WEST\", \"Africa/Algiers\"},\n    {-3600, 2, \"WAT\", \"WAST\", \"Africa/Windhoek\"},\n    {0, 1, \"GMT\", \"IST\", \"Europe/Dublin\"},\n    {0, 1, \"GMT\", \"BST\", \"Europe/London\"},\n    {0, 0, \"WET\", \"WEST\", \"Africa/Casablanca\"},\n    {0, 0, \"WET\", \"WET\", \"Africa/El_Aaiun\"},\n    {3600, 1, \"AZOT\", \"AZOST\", \"Atlantic/Azores\"},\n    {3600, 1, \"EGT\", \"EGST\", \"America/Scoresbysund\"},\n    {10800, 1, \"PMST\", \"PMDT\", \"America/Miquelon\"},\n    {10800, 2, \"UYT\", \"UYST\", \"America/Montevideo\"},\n    {10800, 1, \"WGT\", \"WGST\", \"America/Godthab\"},\n    {10800, 2, \"BRT\", \"BRST\", \"Brazil/East\"},\n    {12600, 1, \"NST\", \"NDT\", \"America/St_Johns\"},\n    {14400, 1, \"AST\", \"ADT\", \"Canada/Atlantic\"},\n    {14400, 2, \"AMT\", \"AMST\", \"America/Cuiaba\"},\n    {14400, 2, \"CLT\", \"CLST\", \"Chile/Continental\"},\n    {14400, 2, \"FKT\", \"FKST\", \"Atlantic/Stanley\"},\n    {14400, 2, \"PYT\", \"PYST\", \"America/Asuncion\"},\n    {18000, 1, \"CST\", \"CDT\", \"America/Havana\"},\n    {18000, 1, \"EST\", \"EDT\", \"US/Eastern\"}, /* Conflicts with America/Grand_Turk */\n    {21600, 2, \"EAST\", \"EASST\", \"Chile/EasterIsland\"},\n    {21600, 0, \"CST\", \"MDT\", \"Canada/Saskatchewan\"},\n    {21600, 0, \"CST\", \"CDT\", \"America/Guatemala\"},\n    {21600, 1, \"CST\", \"CDT\", \"US/Central\"}, /* Conflicts with Mexico/General */\n    {25200, 1, \"MST\", \"MDT\", \"US/Mountain\"}, /* Conflicts with Mexico/BajaSur */\n    {28800, 0, \"PST\", \"PST\", \"Pacific/Pitcairn\"},\n    {28800, 1, \"PST\", \"PDT\", \"US/Pacific\"}, /* Conflicts with Mexico/BajaNorte */\n    {32400, 1, \"AKST\", \"AKDT\", \"US/Alaska\"},\n    {36000, 1, \"HAST\", \"HADT\", \"US/Aleutian\"}\n};\n\n/*#define DEBUG_TZNAME*/\n\nstatic const char* remapShortTimeZone(const char *stdID, const char *dstID, int32_t daylightType, int32_t offset)\n{\n    int32_t idx;\n#ifdef DEBUG_TZNAME\n    fprintf(stderr, \"TZ=%s std=%s dst=%s daylight=%d offset=%d\\n\", getenv(\"TZ\"), stdID, dstID, daylightType, offset);\n#endif\n    for (idx = 0; idx < UPRV_LENGTHOF(OFFSET_ZONE_MAPPINGS); idx++)\n    {\n        if (offset == OFFSET_ZONE_MAPPINGS[idx].offsetSeconds\n            && daylightType == OFFSET_ZONE_MAPPINGS[idx].daylightType\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].stdID, stdID) == 0\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].dstID, dstID) == 0)\n        {\n            return OFFSET_ZONE_MAPPINGS[idx].olsonID;\n        }\n    }\n    return NULL;\n}\n#endif\n\n#ifdef SEARCH_TZFILE\n#define MAX_PATH_SIZE PATH_MAX /* Set the limit for the size of the path. */\n#define MAX_READ_SIZE 512\n\ntypedef struct DefaultTZInfo {\n    char* defaultTZBuffer;\n    int64_t defaultTZFileSize;\n    FILE* defaultTZFilePtr;\n    UBool defaultTZstatus;\n    int32_t defaultTZPosition;\n} DefaultTZInfo;\n\n/*\n * This method compares the two files given to see if they are a match.\n * It is currently use to compare two TZ files.\n */\nstatic UBool compareBinaryFiles(const char* defaultTZFileName, const char* TZFileName, DefaultTZInfo* tzInfo) {\n    FILE* file;\n    int64_t sizeFile;\n    int64_t sizeFileLeft;\n    int32_t sizeFileRead;\n    int32_t sizeFileToRead;\n    char bufferFile[MAX_READ_SIZE];\n    UBool result = TRUE;\n\n    if (tzInfo->defaultTZFilePtr == NULL) {\n        tzInfo->defaultTZFilePtr = fopen(defaultTZFileName, \"r\");\n    }\n    file = fopen(TZFileName, \"r\");\n\n    tzInfo->defaultTZPosition = 0; /* reset position to begin search */\n\n    if (file != NULL && tzInfo->defaultTZFilePtr != NULL) {\n        /* First check that the file size are equal. */\n        if (tzInfo->defaultTZFileSize == 0) {\n            fseek(tzInfo->defaultTZFilePtr, 0, SEEK_END);\n            tzInfo->defaultTZFileSize = ftell(tzInfo->defaultTZFilePtr);\n        }\n        fseek(file, 0, SEEK_END);\n        sizeFile = ftell(file);\n        sizeFileLeft = sizeFile;\n\n        if (sizeFile != tzInfo->defaultTZFileSize) {\n            result = FALSE;\n        } else {\n            /* Store the data from the files in seperate buffers and\n             * compare each byte to determine equality.\n             */\n            if (tzInfo->defaultTZBuffer == NULL) {\n                rewind(tzInfo->defaultTZFilePtr);\n                tzInfo->defaultTZBuffer = (char*)uprv_malloc(sizeof(char) * tzInfo->defaultTZFileSize);\n                sizeFileRead = fread(tzInfo->defaultTZBuffer, 1, tzInfo->defaultTZFileSize, tzInfo->defaultTZFilePtr);\n            }\n            rewind(file);\n            while(sizeFileLeft > 0) {\n                uprv_memset(bufferFile, 0, MAX_READ_SIZE);\n                sizeFileToRead = sizeFileLeft < MAX_READ_SIZE ? sizeFileLeft : MAX_READ_SIZE;\n\n                sizeFileRead = fread(bufferFile, 1, sizeFileToRead, file);\n                if (memcmp(tzInfo->defaultTZBuffer + tzInfo->defaultTZPosition, bufferFile, sizeFileRead) != 0) {\n                    result = FALSE;\n                    break;\n                }\n                sizeFileLeft -= sizeFileRead;\n                tzInfo->defaultTZPosition += sizeFileRead;\n            }\n        }\n    } else {\n        result = FALSE;\n    }\n\n    if (file != NULL) {\n        fclose(file);\n    }\n\n    return result;\n}\n/*\n * This method recursively traverses the directory given for a matching TZ file and returns the first match.\n */\n/* dirent also lists two entries: \".\" and \"..\" that we can safely ignore. */\n#define SKIP1 \".\"\n#define SKIP2 \"..\"\nstatic char SEARCH_TZFILE_RESULT[MAX_PATH_SIZE] = \"\";\nstatic char* searchForTZFile(const char* path, DefaultTZInfo* tzInfo) {\n    char curpath[MAX_PATH_SIZE];\n    DIR* dirp = opendir(path);\n    DIR* subDirp = NULL;\n    struct dirent* dirEntry = NULL;\n\n    char* result = NULL;\n    if (dirp == NULL) {\n        return result;\n    }\n\n    /* Save the current path */\n    uprv_memset(curpath, 0, MAX_PATH_SIZE);\n    uprv_strcpy(curpath, path);\n\n    /* Check each entry in the directory. */\n    while((dirEntry = readdir(dirp)) != NULL) {\n        const char* dirName = dirEntry->d_name;\n        if (uprv_strcmp(dirName, SKIP1) != 0 && uprv_strcmp(dirName, SKIP2) != 0) {\n            /* Create a newpath with the new entry to test each entry in the directory. */\n            char newpath[MAX_PATH_SIZE];\n            uprv_strcpy(newpath, curpath);\n            uprv_strcat(newpath, dirName);\n\n            if ((subDirp = opendir(newpath)) != NULL) {\n                /* If this new path is a directory, make a recursive call with the newpath. */\n                closedir(subDirp);\n                uprv_strcat(newpath, \"/\");\n                result = searchForTZFile(newpath, tzInfo);\n                /*\n                 Have to get out here. Otherwise, we'd keep looking\n                 and return the first match in the top-level directory\n                 if there's a match in the top-level. If not, this function\n                 would return NULL and set gTimeZoneBufferPtr to NULL in initDefault().\n                 It worked without this in most cases because we have a fallback of calling\n                 localtime_r to figure out the default timezone.\n                */\n                if (result != NULL)\n                    break;\n            } else if (uprv_strcmp(TZFILE_SKIP, dirName) != 0 && uprv_strcmp(TZFILE_SKIP2, dirName) != 0) {\n                if(compareBinaryFiles(TZDEFAULT, newpath, tzInfo)) {\n                    const char* zoneid = newpath + (sizeof(TZZONEINFO)) - 1;\n                    skipZoneIDPrefix(&zoneid);\n                    uprv_strcpy(SEARCH_TZFILE_RESULT, zoneid);\n                    result = SEARCH_TZFILE_RESULT;\n                    /* Get out after the first one found. */\n                    break;\n                }\n            }\n        }\n    }\n    closedir(dirp);\n    return result;\n}\n#endif\nU_CAPI const char* U_EXPORT2\nuprv_tzname(int n)\n{\n    const char *tzid = NULL;\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    tzid = uprv_detectWindowsTimeZone();\n\n    if (tzid != NULL) {\n        return tzid;\n    }\n#else\n\n/*#if U_PLATFORM_IS_DARWIN_BASED\n    int ret;\n\n    tzid = getenv(\"TZFILE\");\n    if (tzid != NULL) {\n        return tzid;\n    }\n#endif*/\n\n/* This code can be temporarily disabled to test tzname resolution later on. */\n#ifndef DEBUG_TZNAME\n    tzid = getenv(\"TZ\");\n    if (tzid != NULL && isValidOlsonID(tzid)\n#if U_PLATFORM == U_PF_SOLARIS\n    /* When TZ equals localtime on Solaris, check the /etc/localtime file. */\n        && uprv_strcmp(tzid, TZ_ENV_CHECK) != 0\n#endif\n    ) {\n        /* The colon forces tzset() to treat the remainder as zoneinfo path */\n        if (tzid[0] == ':') {\n            tzid++;\n        }\n        /* This might be a good Olson ID. */\n        skipZoneIDPrefix(&tzid);\n        return tzid;\n    }\n    /* else U_TZNAME will give a better result. */\n#endif\n\n#if defined(CHECK_LOCALTIME_LINK) && !defined(DEBUG_SKIP_LOCALTIME_LINK)\n    /* Caller must handle threading issues */\n    if (gTimeZoneBufferPtr == NULL) {\n        /*\n        This is a trick to look at the name of the link to get the Olson ID\n        because the tzfile contents is underspecified.\n        This isn't guaranteed to work because it may not be a symlink.\n        */\n        int32_t ret = (int32_t)readlink(TZDEFAULT, gTimeZoneBuffer, sizeof(gTimeZoneBuffer));\n        if (0 < ret) {\n            int32_t tzZoneInfoLen = uprv_strlen(TZZONEINFO);\n            gTimeZoneBuffer[ret] = 0;\n            if (uprv_strncmp(gTimeZoneBuffer, TZZONEINFO, tzZoneInfoLen) == 0\n                && isValidOlsonID(gTimeZoneBuffer + tzZoneInfoLen))\n            {\n                return (gTimeZoneBufferPtr = gTimeZoneBuffer + tzZoneInfoLen);\n            }\n#if U_PLATFORM == U_PF_SOLARIS\n            else\n            {\n                tzZoneInfoLen = uprv_strlen(TZZONEINFO2);\n                if (uprv_strncmp(gTimeZoneBuffer, TZZONEINFO2, tzZoneInfoLen) == 0\n                                && isValidOlsonID(gTimeZoneBuffer + tzZoneInfoLen))\n                {\n                    return (gTimeZoneBufferPtr = gTimeZoneBuffer + tzZoneInfoLen);\n                }\n            }\n#endif\n        } else {\n#if defined(SEARCH_TZFILE)\n            DefaultTZInfo* tzInfo = (DefaultTZInfo*)uprv_malloc(sizeof(DefaultTZInfo));\n            if (tzInfo != NULL) {\n                tzInfo->defaultTZBuffer = NULL;\n                tzInfo->defaultTZFileSize = 0;\n                tzInfo->defaultTZFilePtr = NULL;\n                tzInfo->defaultTZstatus = FALSE;\n                tzInfo->defaultTZPosition = 0;\n\n                gTimeZoneBufferPtr = searchForTZFile(TZZONEINFO, tzInfo);\n\n                /* Free previously allocated memory */\n                if (tzInfo->defaultTZBuffer != NULL) {\n                    uprv_free(tzInfo->defaultTZBuffer);\n                }\n                if (tzInfo->defaultTZFilePtr != NULL) {\n                    fclose(tzInfo->defaultTZFilePtr);\n                }\n                uprv_free(tzInfo);\n            }\n\n            if (gTimeZoneBufferPtr != NULL && isValidOlsonID(gTimeZoneBufferPtr)) {\n                return gTimeZoneBufferPtr;\n            }\n#endif\n        }\n    }\n    else {\n        return gTimeZoneBufferPtr;\n    }\n#endif\n#endif\n\n#ifdef U_TZNAME\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /* The return value is free'd in timezone.cpp on Windows because\n     * the other code path returns a pointer to a heap location. */\n    return uprv_strdup(U_TZNAME[n]);\n#else\n    /*\n    U_TZNAME is usually a non-unique abbreviation, which isn't normally usable.\n    So we remap the abbreviation to an olson ID.\n\n    Since Windows exposes a little more timezone information,\n    we normally don't use this code on Windows because\n    uprv_detectWindowsTimeZone should have already given the correct answer.\n    */\n    {\n        struct tm juneSol, decemberSol;\n        int daylightType;\n        static const time_t juneSolstice=1182478260; /*2007-06-21 18:11 UT*/\n        static const time_t decemberSolstice=1198332540; /*2007-12-22 06:09 UT*/\n\n        /* This probing will tell us when daylight savings occurs.  */\n        localtime_r(&juneSolstice, &juneSol);\n        localtime_r(&decemberSolstice, &decemberSol);\n        if(decemberSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_DECEMBER;\n        } else if(juneSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_JUNE;\n        } else {\n          daylightType = U_DAYLIGHT_NONE;\n        }\n        tzid = remapShortTimeZone(U_TZNAME[0], U_TZNAME[1], daylightType, uprv_timezone());\n        if (tzid != NULL) {\n            return tzid;\n        }\n    }\n    return U_TZNAME[n];\n#endif\n#else\n    return \"\";\n#endif\n}\n\n/* Get and set the ICU data directory --------------------------------------- */\n\nstatic icu::UInitOnce gDataDirInitOnce = U_INITONCE_INITIALIZER;\nstatic char *gDataDirectory = NULL;\n\nUInitOnce gTimeZoneFilesInitOnce = U_INITONCE_INITIALIZER;\nstatic CharString *gTimeZoneFilesDirectory = NULL;\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n static char *gCorrectedPOSIXLocale = NULL; /* Heap allocated */\n#endif\n\nstatic UBool U_CALLCONV putil_cleanup(void)\n{\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = NULL;\n    gDataDirInitOnce.reset();\n\n    delete gTimeZoneFilesDirectory;\n    gTimeZoneFilesDirectory = NULL;\n    gTimeZoneFilesInitOnce.reset();\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n    if (gCorrectedPOSIXLocale) {\n        uprv_free(gCorrectedPOSIXLocale);\n        gCorrectedPOSIXLocale = NULL;\n    }\n#endif\n    return TRUE;\n}\n\n/*\n * Set the data directory.\n *    Make a copy of the passed string, and set the global data dir to point to it.\n */\nU_CAPI void U_EXPORT2\nu_setDataDirectory(const char *directory) {\n    char *newDataDir;\n    int32_t length;\n\n    if(directory==NULL || *directory==0) {\n        /* A small optimization to prevent the malloc and copy when the\n        shared library is used, and this is a way to make sure that NULL\n        is never returned.\n        */\n        newDataDir = (char *)\"\";\n    }\n    else {\n        length=(int32_t)uprv_strlen(directory);\n        newDataDir = (char *)uprv_malloc(length + 2);\n        /* Exit out if newDataDir could not be created. */\n        if (newDataDir == NULL) {\n            return;\n        }\n        uprv_strcpy(newDataDir, directory);\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n        {\n            char *p;\n            while(p = uprv_strchr(newDataDir, U_FILE_ALT_SEP_CHAR)) {\n                *p = U_FILE_SEP_CHAR;\n            }\n        }\n#endif\n    }\n\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = newDataDir;\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_pathIsAbsolute(const char *path)\n{\n  if(!path || !*path) {\n    return FALSE;\n  }\n\n  if(*path == U_FILE_SEP_CHAR) {\n    return TRUE;\n  }\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n  if(*path == U_FILE_ALT_SEP_CHAR) {\n    return TRUE;\n  }\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\n  if( (((path[0] >= 'A') && (path[0] <= 'Z')) ||\n       ((path[0] >= 'a') && (path[0] <= 'z'))) &&\n      path[1] == ':' ) {\n    return TRUE;\n  }\n#endif\n\n  return FALSE;\n}\n\n/* Temporary backup setting of ICU_DATA_DIR_PREFIX_ENV_VAR\n   until some client wrapper makefiles are updated */\n#if U_PLATFORM_IS_DARWIN_BASED && TARGET_IPHONE_SIMULATOR\n# if !defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n#  define ICU_DATA_DIR_PREFIX_ENV_VAR \"IPHONE_SIMULATOR_ROOT\"\n# endif\n#endif\n\nstatic void U_CALLCONV dataDirectoryInitFn() {\n    /* If we already have the directory, then return immediately. Will happen if user called\n     * u_setDataDirectory().\n     */\n    if (gDataDirectory) {\n        return;\n    }\n\n    const char *path = NULL;\n#if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n    char datadir_path_buffer[PATH_MAX];\n#endif\n\n    /*\n    When ICU_NO_USER_DATA_OVERRIDE is defined, users aren't allowed to\n    override ICU's data with the ICU_DATA environment variable. This prevents\n    problems where multiple custom copies of ICU's specific version of data\n    are installed on a system. Either the application must define the data\n    directory with u_setDataDirectory, define ICU_DATA_DIR when compiling\n    ICU, set the data with udata_setCommonData or trust that all of the\n    required data is contained in ICU's data library that contains\n    the entry point defined by U_ICUDATA_ENTRY_POINT.\n\n    There may also be some platforms where environment variables\n    are not allowed.\n    */\n#   if !defined(ICU_NO_USER_DATA_OVERRIDE) && !UCONFIG_NO_FILE_IO\n    /* First try to get the environment variable */\n    path=getenv(\"ICU_DATA\");\n#   endif\n\n    /* ICU_DATA_DIR may be set as a compile option.\n     * U_ICU_DATA_DEFAULT_DIR is provided and is set by ICU at compile time\n     * and is used only when data is built in archive mode eliminating the need\n     * for ICU_DATA_DIR to be set. U_ICU_DATA_DEFAULT_DIR is set to the installation\n     * directory of the data dat file. Users should use ICU_DATA_DIR if they want to\n     * set their own path.\n     */\n#if defined(ICU_DATA_DIR) || defined(U_ICU_DATA_DEFAULT_DIR)\n    if(path==NULL || *path==0) {\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        const char *prefix = getenv(ICU_DATA_DIR_PREFIX_ENV_VAR);\n# endif\n# ifdef ICU_DATA_DIR\n        path=ICU_DATA_DIR;\n# else\n        path=U_ICU_DATA_DEFAULT_DIR;\n# endif\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        if (prefix != NULL) {\n            snprintf(datadir_path_buffer, PATH_MAX, \"%s%s\", prefix, path);\n            path=datadir_path_buffer;\n        }\n# endif\n    }\n#endif\n\n    if(path==NULL) {\n        /* It looks really bad, set it to something. */\n        path = \"\";\n    }\n\n    u_setDataDirectory(path);\n    return;\n}\n\nU_CAPI const char * U_EXPORT2\nu_getDataDirectory(void) {\n    umtx_initOnce(gDataDirInitOnce, &dataDirectoryInitFn);\n    return gDataDirectory;\n}\n\nstatic void setTimeZoneFilesDir(const char *path, UErrorCode &status) {\n    if (U_FAILURE(status)) {\n        return;\n    }\n    gTimeZoneFilesDirectory->clear();\n    gTimeZoneFilesDirectory->append(path, status);\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n    char *p = gTimeZoneFilesDirectory->data();\n    while (p = uprv_strchr(p, U_FILE_ALT_SEP_CHAR)) {\n        *p = U_FILE_SEP_CHAR;\n    }\n#endif\n}\n\n#define TO_STRING(x) TO_STRING_2(x)\n#define TO_STRING_2(x) #x\n\nstatic void U_CALLCONV TimeZoneDataDirInitFn(UErrorCode &status) {\n    U_ASSERT(gTimeZoneFilesDirectory == NULL);\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n    gTimeZoneFilesDirectory = new CharString();\n    if (gTimeZoneFilesDirectory == NULL) {\n        status = U_MEMORY_ALLOCATION_ERROR;\n        return;\n    }\n    const char *dir = getenv(\"ICU_TIMEZONE_FILES_DIR\");\n#if defined(U_TIMEZONE_FILES_DIR)\n    if (dir == NULL) {\n        dir = TO_STRING(U_TIMEZONE_FILES_DIR);\n    }\n#endif\n    if (dir == NULL) {\n        dir = \"\";\n    }\n    setTimeZoneFilesDir(dir, status);\n}\n\n\nU_CAPI const char * U_EXPORT2\nu_getTimeZoneFilesDirectory(UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    return U_SUCCESS(*status) ? gTimeZoneFilesDirectory->data() : \"\";\n}\n\nU_CAPI void U_EXPORT2\nu_setTimeZoneFilesDirectory(const char *path, UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    setTimeZoneFilesDir(path, *status);\n\n    // Note: this function does some extra churn, first setting based on the\n    //       environment, then immediately replacing with the value passed in.\n    //       The logic is simpler that way, and performance shouldn't be an issue.\n}\n\n\n#if U_POSIX_LOCALE\n/* A helper function used by uprv_getPOSIXIDForDefaultLocale and\n * uprv_getPOSIXIDForDefaultCodepage. Returns the posix locale id for\n * LC_CTYPE and LC_MESSAGES. It doesn't support other locale categories.\n */\nstatic const char *uprv_getPOSIXIDForCategory(int category)\n{\n    const char* posixID = NULL;\n    if (category == LC_MESSAGES || category == LC_CTYPE) {\n        /*\n        * On Solaris two different calls to setlocale can result in\n        * different values. Only get this value once.\n        *\n        * We must check this first because an application can set this.\n        *\n        * LC_ALL can't be used because it's platform dependent. The LANG\n        * environment variable seems to affect LC_CTYPE variable by default.\n        * Here is what setlocale(LC_ALL, NULL) can return.\n        * HPUX can return 'C C C C C C C'\n        * Solaris can return /en_US/C/C/C/C/C on the second try.\n        * Linux can return LC_CTYPE=C;LC_NUMERIC=C;...\n        *\n        * The default codepage detection also needs to use LC_CTYPE.\n        *\n        * Do not call setlocale(LC_*, \"\")! Using an empty string instead\n        * of NULL, will modify the libc behavior.\n        */\n        posixID = setlocale(category, NULL);\n        if ((posixID == 0)\n            || (uprv_strcmp(\"C\", posixID) == 0)\n            || (uprv_strcmp(\"POSIX\", posixID) == 0))\n        {\n            /* Maybe we got some garbage.  Try something more reasonable */\n            posixID = getenv(\"LC_ALL\");\n            /* Solaris speaks POSIX -  See IEEE Std 1003.1-2008\n             * This is needed to properly handle empty env. variables\n             */\n#if U_PLATFORM == U_PF_SOLARIS\n            if ((posixID == 0) || (posixID[0] == '\\0')) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if ((posixID == 0) || (posixID[0] == '\\0')) {\n#else\n            if (posixID == 0) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if (posixID == 0) {\n#endif\n                    posixID = getenv(\"LANG\");\n                }\n            }\n        }\n    }\n    if ((posixID==0)\n        || (uprv_strcmp(\"C\", posixID) == 0)\n        || (uprv_strcmp(\"POSIX\", posixID) == 0))\n    {\n        /* Nothing worked.  Give it a nice POSIX default value. */\n        posixID = \"en_US_POSIX\";\n    }\n    return posixID;\n}\n\n/* Return just the POSIX id for the default locale, whatever happens to be in\n * it. It gets the value from LC_MESSAGES and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultLocale(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_MESSAGES);\n    }\n    return posixID;\n}\n\n#if !U_CHARSET_IS_UTF8\n/* Return just the POSIX id for the default codepage, whatever happens to be in\n * it. It gets the value from LC_CTYPE and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultCodepage(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_CTYPE);\n    }\n    return posixID;\n}\n#endif\n#endif\n\n/* NOTE: The caller should handle thread safety */\nU_CAPI const char* U_EXPORT2\nuprv_getDefaultLocaleID()\n{\n#if U_POSIX_LOCALE\n/*\n  Note that:  (a '!' means the ID is improper somehow)\n     LC_ALL  ---->     default_loc          codepage\n--------------------------------------------------------\n     ab.CD             ab                   CD\n     ab@CD             ab__CD               -\n     ab@CD.EF          ab__CD               EF\n\n     ab_CD.EF@GH       ab_CD_GH             EF\n\nSome 'improper' ways to do the same as above:\n  !  ab_CD@GH.EF       ab_CD_GH             EF\n  !  ab_CD.EF@GH.IJ    ab_CD_GH             EF\n  !  ab_CD@ZZ.EF@GH.IJ ab_CD_GH             EF\n\n     _CD@GH            _CD_GH               -\n     _CD.EF@GH         _CD_GH               EF\n\nThe variant cannot have dots in it.\nThe 'rightmost' variant (@xxx) wins.\nThe leftmost codepage (.xxx) wins.\n*/\n    char *correctedPOSIXLocale = 0;\n    const char* posixID = uprv_getPOSIXIDForDefaultLocale();\n    const char *p;\n    const char *q;\n    int32_t len;\n\n    /* Format: (no spaces)\n    ll [ _CC ] [ . MM ] [ @ VV]\n\n      l = lang, C = ctry, M = charmap, V = variant\n    */\n\n    if (gCorrectedPOSIXLocale != NULL) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    if ((p = uprv_strchr(posixID, '.')) != NULL) {\n        /* assume new locale can't be larger than old one? */\n        correctedPOSIXLocale = static_cast<char *>(uprv_malloc(uprv_strlen(posixID)+1));\n        /* Exit on memory allocation error. */\n        if (correctedPOSIXLocale == NULL) {\n            return NULL;\n        }\n        uprv_strncpy(correctedPOSIXLocale, posixID, p-posixID);\n        correctedPOSIXLocale[p-posixID] = 0;\n\n        /* do not copy after the @ */\n        if ((p = uprv_strchr(correctedPOSIXLocale, '@')) != NULL) {\n            correctedPOSIXLocale[p-correctedPOSIXLocale] = 0;\n        }\n    }\n\n    /* Note that we scan the *uncorrected* ID. */\n    if ((p = uprv_strrchr(posixID, '@')) != NULL) {\n        if (correctedPOSIXLocale == NULL) {\n            correctedPOSIXLocale = static_cast<char *>(uprv_malloc(uprv_strlen(posixID)+1));\n            /* Exit on memory allocation error. */\n            if (correctedPOSIXLocale == NULL) {\n                return NULL;\n            }\n            uprv_strncpy(correctedPOSIXLocale, posixID, p-posixID);\n            correctedPOSIXLocale[p-posixID] = 0;\n        }\n        p++;\n\n        /* Take care of any special cases here.. */\n        if (!uprv_strcmp(p, \"nynorsk\")) {\n            p = \"NY\";\n            /* Don't worry about no__NY. In practice, it won't appear. */\n        }\n\n        if (uprv_strchr(correctedPOSIXLocale,'_') == NULL) {\n            uprv_strcat(correctedPOSIXLocale, \"__\"); /* aa@b -> aa__b */\n        }\n        else {\n            uprv_strcat(correctedPOSIXLocale, \"_\"); /* aa_CC@b -> aa_CC_b */\n        }\n\n        if ((q = uprv_strchr(p, '.')) != NULL) {\n            /* How big will the resulting string be? */\n            len = (int32_t)(uprv_strlen(correctedPOSIXLocale) + (q-p));\n            uprv_strncat(correctedPOSIXLocale, p, q-p);\n            correctedPOSIXLocale[len] = 0;\n        }\n        else {\n            /* Anything following the @ sign */\n            uprv_strcat(correctedPOSIXLocale, p);\n        }\n\n        /* Should there be a map from 'no@nynorsk' -> no_NO_NY here?\n         * How about 'russian' -> 'ru'?\n         * Many of the other locales using ISO codes will be handled by the\n         * canonicalization functions in uloc_getDefault.\n         */\n    }\n\n    /* Was a correction made? */\n    if (correctedPOSIXLocale != NULL) {\n        posixID = correctedPOSIXLocale;\n    }\n    else {\n        /* copy it, just in case the original pointer goes away.  See j2395 */\n        correctedPOSIXLocale = (char *)uprv_malloc(uprv_strlen(posixID) + 1);\n        /* Exit on memory allocation error. */\n        if (correctedPOSIXLocale == NULL) {\n            return NULL;\n        }\n        posixID = uprv_strcpy(correctedPOSIXLocale, posixID);\n    }\n\n    if (gCorrectedPOSIXLocale == NULL) {\n        gCorrectedPOSIXLocale = correctedPOSIXLocale;\n        ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n        correctedPOSIXLocale = NULL;\n    }\n\n    if (correctedPOSIXLocale != NULL) {  /* Was already set - clean up. */\n        uprv_free(correctedPOSIXLocale);\n    }\n\n    return posixID;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#define POSIX_LOCALE_CAPACITY 64\n    UErrorCode status = U_ZERO_ERROR;\n    char *correctedPOSIXLocale = 0;\n\n    if (gCorrectedPOSIXLocale != NULL) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    LCID id = GetThreadLocale();\n    correctedPOSIXLocale = static_cast<char *>(uprv_malloc(POSIX_LOCALE_CAPACITY + 1));\n    if (correctedPOSIXLocale) {\n        int32_t posixLen = uprv_convertToPosix(id, correctedPOSIXLocale, POSIX_LOCALE_CAPACITY, &status);\n        if (U_SUCCESS(status)) {\n            *(correctedPOSIXLocale + posixLen) = 0;\n            gCorrectedPOSIXLocale = correctedPOSIXLocale;\n            ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n        } else {\n            uprv_free(correctedPOSIXLocale);\n        }\n    }\n\n    if (gCorrectedPOSIXLocale == NULL) {\n        return \"en_US\";\n    }\n    return gCorrectedPOSIXLocale;\n\n#elif U_PLATFORM == U_PF_OS400\n    /* locales are process scoped and are by definition thread safe */\n    static char correctedLocale[64];\n    const  char *localeID = getenv(\"LC_ALL\");\n           char *p;\n\n    if (localeID == NULL)\n        localeID = getenv(\"LANG\");\n    if (localeID == NULL)\n        localeID = setlocale(LC_ALL, NULL);\n    /* Make sure we have something... */\n    if (localeID == NULL)\n        return \"en_US_POSIX\";\n\n    /* Extract the locale name from the path. */\n    if((p = uprv_strrchr(localeID, '/')) != NULL)\n    {\n        /* Increment p to start of locale name. */\n        p++;\n        localeID = p;\n    }\n\n    /* Copy to work location. */\n    uprv_strcpy(correctedLocale, localeID);\n\n    /* Strip off the '.locale' extension. */\n    if((p = uprv_strchr(correctedLocale, '.')) != NULL) {\n        *p = 0;\n    }\n\n    /* Upper case the locale name. */\n    T_CString_toUpperCase(correctedLocale);\n\n    /* See if we are using the POSIX locale.  Any of the\n    * following are equivalent and use the same QLGPGCMA\n    * (POSIX) locale.\n    * QLGPGCMA2 means UCS2\n    * QLGPGCMA_4 means UTF-32\n    * QLGPGCMA_8 means UTF-8\n    */\n    if ((uprv_strcmp(\"C\", correctedLocale) == 0) ||\n        (uprv_strcmp(\"POSIX\", correctedLocale) == 0) ||\n        (uprv_strncmp(\"QLGPGCMA\", correctedLocale, 8) == 0))\n    {\n        uprv_strcpy(correctedLocale, \"en_US_POSIX\");\n    }\n    else\n    {\n        int16_t LocaleLen;\n\n        /* Lower case the lang portion. */\n        for(p = correctedLocale; *p != 0 && *p != '_'; p++)\n        {\n            *p = uprv_tolower(*p);\n        }\n\n        /* Adjust for Euro.  After '_E' add 'URO'. */\n        LocaleLen = uprv_strlen(correctedLocale);\n        if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'E')\n        {\n            uprv_strcat(correctedLocale, \"URO\");\n        }\n\n        /* If using Lotus-based locale then convert to\n         * equivalent non Lotus.\n         */\n        else if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'L')\n        {\n            correctedLocale[LocaleLen - 2] = 0;\n        }\n\n        /* There are separate simplified and traditional\n         * locales called zh_HK_S and zh_HK_T.\n         */\n        else if (uprv_strncmp(correctedLocale, \"zh_HK\", 5) == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_HK\");\n        }\n\n        /* A special zh_CN_GBK locale...\n        */\n        else if (uprv_strcmp(correctedLocale, \"zh_CN_GBK\") == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_CN\");\n        }\n\n    }\n\n    return correctedLocale;\n#endif\n\n}\n\n#if !U_CHARSET_IS_UTF8\n#if U_POSIX_LOCALE\n/*\nDue to various platform differences, one platform may specify a charset,\nwhen they really mean a different charset. Remap the names so that they are\ncompatible with ICU. Only conflicting/ambiguous aliases should be resolved\nhere. Before adding anything to this function, please consider adding unique\nnames to the ICU alias table in the data directory.\n*/\nstatic const char*\nremapPlatformDependentCodepage(const char *locale, const char *name) {\n    if (locale != NULL && *locale == 0) {\n        /* Make sure that an empty locale is handled the same way. */\n        locale = NULL;\n    }\n    if (name == NULL) {\n        return NULL;\n    }\n#if U_PLATFORM == U_PF_AIX\n    if (uprv_strcmp(name, \"IBM-943\") == 0) {\n        /* Use the ASCII compatible ibm-943 */\n        name = \"Shift-JIS\";\n    }\n    else if (uprv_strcmp(name, \"IBM-1252\") == 0) {\n        /* Use the windows-1252 that contains the Euro */\n        name = \"IBM-5348\";\n    }\n#elif U_PLATFORM == U_PF_SOLARIS\n    if (locale != NULL && uprv_strcmp(name, \"EUC\") == 0) {\n        /* Solaris underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"zh_CN\") == 0) {\n            name = \"EUC-CN\";\n        }\n        else if (uprv_strcmp(locale, \"zh_TW\") == 0) {\n            name = \"EUC-TW\";\n        }\n        else if (uprv_strcmp(locale, \"ko_KR\") == 0) {\n            name = \"EUC-KR\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-954 is the best match.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (uprv_strcmp(name, \"646\") == 0) {\n        /*\n         * The default codepage given by Solaris is 646 but the C library routines treat it as if it was\n         * ISO-8859-1 instead of US-ASCII(646).\n         */\n        name = \"ISO-8859-1\";\n    }\n#elif U_PLATFORM_IS_DARWIN_BASED\n    if (locale == NULL && *name == 0) {\n        /*\n        No locale was specified, and an empty name was passed in.\n        This usually indicates that nl_langinfo didn't return valid information.\n        Mac OS X uses UTF-8 by default (especially the locale data and console).\n        */\n        name = \"UTF-8\";\n    }\n    else if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 && uprv_strcmp(name, \"US-ASCII\") == 0) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n#elif U_PLATFORM == U_PF_BSD\n    if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n#elif U_PLATFORM == U_PF_HPUX\n    if (locale != NULL && uprv_strcmp(locale, \"zh_HK\") == 0 && uprv_strcmp(name, \"big5\") == 0) {\n        /* HP decided to extend big5 as hkbig5 even though it's not compatible :-( */\n        /* zh_TW.big5 is not the same charset as zh_HK.big5! */\n        name = \"hkbig5\";\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n#elif U_PLATFORM == U_PF_LINUX\n    if (locale != NULL && uprv_strcmp(name, \"euc\") == 0) {\n        /* Linux underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"korean\") == 0) {\n            name = \"EUC-KR\";\n        }\n        else if (uprv_strcmp(locale, \"japanese\") == 0) {\n            /* See comment below about eucJP */\n            name = \"eucjis\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucjp\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 &&\n            (uprv_strcmp(name, \"ANSI_X3.4-1968\") == 0 || uprv_strcmp(name, \"US-ASCII\") == 0)) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n    /*\n     * Linux returns ANSI_X3.4-1968 for C/POSIX, but the call site takes care of\n     * it by falling back to 'US-ASCII' when NULL is returned from this\n     * function. So, we don't have to worry about it here.\n     */\n#endif\n    /* return NULL when \"\" is passed in */\n    if (*name == 0) {\n        name = NULL;\n    }\n    return name;\n}\n\nstatic const char*\ngetCodepageFromPOSIXID(const char *localeName, char * buffer, int32_t buffCapacity)\n{\n    char localeBuf[100];\n    const char *name = NULL;\n    char *variant = NULL;\n\n    if (localeName != NULL && (name = (uprv_strchr(localeName, '.'))) != NULL) {\n        size_t localeCapacity = uprv_min(sizeof(localeBuf), (name-localeName)+1);\n        uprv_strncpy(localeBuf, localeName, localeCapacity);\n        localeBuf[localeCapacity-1] = 0; /* ensure NULL termination */\n        name = uprv_strncpy(buffer, name+1, buffCapacity);\n        buffer[buffCapacity-1] = 0; /* ensure NULL termination */\n        if ((variant = const_cast<char *>(uprv_strchr(name, '@'))) != NULL) {\n            *variant = 0;\n        }\n        name = remapPlatformDependentCodepage(localeBuf, name);\n    }\n    return name;\n}\n#endif\n\nstatic const char*\nint_getDefaultCodepage()\n{\n#if U_PLATFORM == U_PF_OS400\n    uint32_t ccsid = 37; /* Default to ibm-37 */\n    static char codepage[64];\n    Qwc_JOBI0400_t jobinfo;\n    Qus_EC_t error = { sizeof(Qus_EC_t) }; /* SPI error code */\n\n    EPT_CALL(QUSRJOBI)(&jobinfo, sizeof(jobinfo), \"JOBI0400\",\n        \"*                         \", \"                \", &error);\n\n    if (error.Bytes_Available == 0) {\n        if (jobinfo.Coded_Char_Set_ID != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Coded_Char_Set_ID;\n        }\n        else if (jobinfo.Default_Coded_Char_Set_Id != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Default_Coded_Char_Set_Id;\n        }\n        /* else use the default */\n    }\n    sprintf(codepage,\"ibm-%d\", ccsid);\n    return codepage;\n\n#elif U_PLATFORM == U_PF_OS390\n    static char codepage[64];\n\n    strncpy(codepage, nl_langinfo(CODESET),63-strlen(UCNV_SWAP_LFNL_OPTION_STRING));\n    strcat(codepage,UCNV_SWAP_LFNL_OPTION_STRING);\n    codepage[63] = 0; /* NULL terminate */\n\n    return codepage;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    static char codepage[64];\n    sprintf(codepage, \"windows-%d\", GetACP());\n    return codepage;\n\n#elif U_POSIX_LOCALE\n    static char codesetName[100];\n    const char *localeName = NULL;\n    const char *name = NULL;\n\n    localeName = uprv_getPOSIXIDForDefaultCodepage();\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    /* On Solaris nl_langinfo returns C locale values unless setlocale\n     * was called earlier.\n     */\n#if (U_HAVE_NL_LANGINFO_CODESET && U_PLATFORM != U_PF_SOLARIS)\n    /* When available, check nl_langinfo first because it usually gives more\n       useful names. It depends on LC_CTYPE.\n       nl_langinfo may use the same buffer as setlocale. */\n    {\n        const char *codeset = nl_langinfo(U_NL_LANGINFO_CODESET);\n#if U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED\n        /*\n         * On Linux and MacOSX, ensure that default codepage for non C/POSIX locale is UTF-8\n         * instead of ASCII.\n         */\n        if (uprv_strcmp(localeName, \"en_US_POSIX\") != 0) {\n            codeset = remapPlatformDependentCodepage(localeName, codeset);\n        } else\n#endif\n        {\n            codeset = remapPlatformDependentCodepage(NULL, codeset);\n        }\n\n        if (codeset != NULL) {\n            uprv_strncpy(codesetName, codeset, sizeof(codesetName));\n            codesetName[sizeof(codesetName)-1] = 0;\n            return codesetName;\n        }\n    }\n#endif\n\n    /* Use setlocale in a nice way, and then check some environment variables.\n       Maybe the application used setlocale already.\n    */\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    name = getCodepageFromPOSIXID(localeName, codesetName, sizeof(codesetName));\n    if (name) {\n        /* if we can find the codeset name from setlocale, return that. */\n        return name;\n    }\n\n    if (*codesetName == 0)\n    {\n        /* Everything failed. Return US ASCII (ISO 646). */\n        (void)uprv_strcpy(codesetName, \"US-ASCII\");\n    }\n    return codesetName;\n#else\n    return \"US-ASCII\";\n#endif\n}\n\n\nU_CAPI const char*  U_EXPORT2\nuprv_getDefaultCodepage()\n{\n    static char const  *name = NULL;\n    umtx_lock(NULL);\n    if (name == NULL) {\n        name = int_getDefaultCodepage();\n    }\n    umtx_unlock(NULL);\n    return name;\n}\n#endif  /* !U_CHARSET_IS_UTF8 */\n\n\n/* end of platform-specific implementation -------------- */\n\n/* version handling --------------------------------------------------------- */\n\nU_CAPI void U_EXPORT2\nu_versionFromString(UVersionInfo versionArray, const char *versionString) {\n    char *end;\n    uint16_t part=0;\n\n    if(versionArray==NULL) {\n        return;\n    }\n\n    if(versionString!=NULL) {\n        for(;;) {\n            versionArray[part]=(uint8_t)uprv_strtoul(versionString, &end, 10);\n            if(end==versionString || ++part==U_MAX_VERSION_LENGTH || *end!=U_VERSION_DELIMITER) {\n                break;\n            }\n            versionString=end+1;\n        }\n    }\n\n    while(part<U_MAX_VERSION_LENGTH) {\n        versionArray[part++]=0;\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionFromUString(UVersionInfo versionArray, const UChar *versionString) {\n    if(versionArray!=NULL && versionString!=NULL) {\n        char versionChars[U_MAX_VERSION_STRING_LENGTH+1];\n        int32_t len = u_strlen(versionString);\n        if(len>U_MAX_VERSION_STRING_LENGTH) {\n            len = U_MAX_VERSION_STRING_LENGTH;\n        }\n        u_UCharsToChars(versionString, versionChars, len);\n        versionChars[len]=0;\n        u_versionFromString(versionArray, versionChars);\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionToString(const UVersionInfo versionArray, char *versionString) {\n    uint16_t count, part;\n    uint8_t field;\n\n    if(versionString==NULL) {\n        return;\n    }\n\n    if(versionArray==NULL) {\n        versionString[0]=0;\n        return;\n    }\n\n    /* count how many fields need to be written */\n    for(count=4; count>0 && versionArray[count-1]==0; --count) {\n    }\n\n    if(count <= 1) {\n        count = 2;\n    }\n\n    /* write the first part */\n    /* write the decimal field value */\n    field=versionArray[0];\n    if(field>=100) {\n        *versionString++=(char)('0'+field/100);\n        field%=100;\n    }\n    if(field>=10) {\n        *versionString++=(char)('0'+field/10);\n        field%=10;\n    }\n    *versionString++=(char)('0'+field);\n\n    /* write the following parts */\n    for(part=1; part<count; ++part) {\n        /* write a dot first */\n        *versionString++=U_VERSION_DELIMITER;\n\n        /* write the decimal field value */\n        field=versionArray[part];\n        if(field>=100) {\n            *versionString++=(char)('0'+field/100);\n            field%=100;\n        }\n        if(field>=10) {\n            *versionString++=(char)('0'+field/10);\n            field%=10;\n        }\n        *versionString++=(char)('0'+field);\n    }\n\n    /* NUL-terminate */\n    *versionString=0;\n}\n\nU_CAPI void U_EXPORT2\nu_getVersion(UVersionInfo versionArray) {\n    (void)copyright;   // Suppress unused variable warning from clang.\n    u_versionFromString(versionArray, U_ICU_VERSION);\n}\n\n/**\n * icucfg.h dependent code\n */\n\n#if U_ENABLE_DYLOAD\n\n#if HAVE_DLOPEN && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#if HAVE_DLFCN_H\n\n#ifdef __MVS__\n#ifndef __SUSV3\n#define __SUSV3 1\n#endif\n#endif\n#include <dlfcn.h>\n#endif\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  void *ret = NULL;\n  if(U_FAILURE(*status)) return ret;\n  ret =  dlopen(libName, RTLD_NOW|RTLD_GLOBAL);\n  if(ret==NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlopen(%s): %s\\n\", libName, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return ret;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  if(U_FAILURE(*status)) return;\n  dlclose(lib);\n}\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  union {\n      UVoidFunction *fp;\n      void *vp;\n  } uret;\n  uret.fp = NULL;\n  if(U_FAILURE(*status)) return uret.fp;\n  uret.vp = dlsym(lib, sym);\n  if(uret.vp == NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlsym(%p,%s): %s\\n\", lib,sym, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return uret.fp;\n}\n\n#else\n\n/* null (nonexistent) implementation. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  if(U_FAILURE(*status)) return NULL;\n  *status = U_UNSUPPORTED_ERROR;\n  return NULL;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  if(U_FAILURE(*status)) return;\n  *status = U_UNSUPPORTED_ERROR;\n  return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  if(U_SUCCESS(*status)) {\n    *status = U_UNSUPPORTED_ERROR;\n  }\n  return (UVoidFunction*)NULL;\n}\n\n\n\n#endif\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  HMODULE lib = NULL;\n\n  if(U_FAILURE(*status)) return NULL;\n\n  lib = LoadLibraryA(libName);\n\n  if(lib==NULL) {\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n\n  return (void*)lib;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  if(U_FAILURE(*status)) return;\n\n  FreeLibrary(handle);\n\n  return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  UVoidFunction* addr = NULL;\n\n  if(U_FAILURE(*status) || lib==NULL) return NULL;\n\n  addr = (UVoidFunction*)GetProcAddress(handle, sym);\n\n  if(addr==NULL) {\n    DWORD lastError = GetLastError();\n    if(lastError == ERROR_PROC_NOT_FOUND) {\n      *status = U_MISSING_RESOURCE_ERROR;\n    } else {\n      *status = U_UNSUPPORTED_ERROR; /* other unknown error. */\n    }\n  }\n\n  return addr;\n}\n\n\n#else\n\n/* No dynamic loading set. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n    (void)libName;\n    if(U_FAILURE(*status)) return NULL;\n    *status = U_UNSUPPORTED_ERROR;\n    return NULL;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n    (void)lib;\n    if(U_FAILURE(*status)) return;\n    *status = U_UNSUPPORTED_ERROR;\n    return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  (void)lib;\n  (void)sym;\n  if(U_SUCCESS(*status)) {\n    *status = U_UNSUPPORTED_ERROR;\n  }\n  return (UVoidFunction*)NULL;\n}\n\n#endif /* U_ENABLE_DYLOAD */\n\n/*\n * Hey, Emacs, please set the following:\n *\n * Local Variables:\n * indent-tabs-mode: nil\n * End:\n *\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/make.py": "# Copyright (c) 2013 Google Inc. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Notes:\n#\n# This is all roughly based on the Makefile system used by the Linux\n# kernel, but is a non-recursive make -- we put the entire dependency\n# graph in front of make and let it figure it out.\n#\n# The code below generates a separate .mk file for each target, but\n# all are sourced by the top-level Makefile.  This means that all\n# variables in .mk-files clobber one another.  Be careful to use :=\n# where appropriate for immediate evaluation, and similarly to watch\n# that you're not relying on a variable value to last beween different\n# .mk files.\n#\n# TODOs:\n#\n# Global settings and utility functions are currently stuffed in the\n# toplevel Makefile.  It may make sense to generate some .mk files on\n# the side to keep the the files readable.\n\nimport os\nimport re\nimport sys\nimport subprocess\nimport gyp\nimport gyp.common\nimport gyp.xcode_emulation\nfrom gyp.common import GetEnvironFallback\nfrom gyp.common import GypError\n\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'SHARED_INTERMEDIATE_DIR': '$(obj)/gen',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_ROOT': '%(INPUT_ROOT)s',  # This gets expanded by Python.\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',  # This gets expanded by Python.\n  'RULE_INPUT_PATH': '$(abspath $<)',\n  'RULE_INPUT_EXT': '$(suffix $<)',\n  'RULE_INPUT_NAME': '$(notdir $<)',\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n}\n\n# Make supports multiple toolsets\ngenerator_supports_multiple_toolsets = True\n\n# Request sorted dependencies in the order from dependents to dependencies.\ngenerator_wants_sorted_dependencies = False\n\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\n\n\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n\n    # Copy additional generator configuration data from Xcode, which is shared\n    # by the Mac Make generator.\n    import gyp.generator.xcode as xcode_generator\n    global generator_additional_non_configuration_keys\n    generator_additional_non_configuration_keys = getattr(xcode_generator,\n        'generator_additional_non_configuration_keys', [])\n    global generator_additional_path_sections\n    generator_additional_path_sections = getattr(xcode_generator,\n        'generator_additional_path_sections', [])\n    global generator_extra_sources_for_rules\n    generator_extra_sources_for_rules = getattr(xcode_generator,\n        'generator_extra_sources_for_rules', [])\n    COMPILABLE_EXTENSIONS.update({'.m': 'objc', '.mm' : 'objcxx'})\n  else:\n    operating_system = flavor\n    if flavor == 'android':\n      operating_system = 'linux'  # Keep this legacy behavior for now.\n    default_variables.setdefault('OS', operating_system)\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.so')\n    default_variables.setdefault('SHARED_LIB_DIR','$(builddir)/lib.$(TOOLSET)')\n    default_variables.setdefault('LIB_DIR', '$(obj).$(TOOLSET)')\n\n\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  # Android NDK requires a strict link order.\n  if android_ndk_version:\n    global generator_wants_sorted_dependencies\n    generator_wants_sorted_dependencies = True\n\n  output_dir = params['options'].generator_output or \\\n               params['options'].toplevel_dir\n  builddir_name = generator_flags.get('output_dir', 'out')\n  qualified_out_dir = os.path.normpath(os.path.join(\n    output_dir, builddir_name, 'gypfiles'))\n\n  global generator_filelist_paths\n  generator_filelist_paths = {\n    'toplevel': params['options'].toplevel_dir,\n    'qualified_out_dir': qualified_out_dir,\n  }\n\n\n# The .d checking code below uses these functions:\n# wildcard, sort, foreach, shell, wordlist\n# wildcard can handle spaces, the rest can't.\n# Since I could find no way to make foreach work with spaces in filenames\n# correctly, the .d files have spaces replaced with another character. The .d\n# file for\n#     Chromium\\ Framework.framework/foo\n# is for example\n#     out/Release/.deps/out/Release/Chromium?Framework.framework/foo\n# This is the replacement character.\nSPACE_REPLACEMENT = '?'\n\n\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n# outermost module.\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n# (Note that --whole-archive is incompatible with the --start-group used in\n# normal linking.)\n\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\n\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\n\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\n\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\n\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\nMAKEFLAGS=-r\n\n# The source directory tree.\nsrcdir := %(srcdir)s\nabs_srcdir := $(abspath $(srcdir))\n\n# The name of the builddir.\nbuilddir_name ?= %(builddir)s\n\n# The V=1 flag on command line makes us verbosely print command lines.\nifdef V\n  quiet=\nelse\n  quiet=quiet_\nendif\n\n# Specify BUILDTYPE=Release on the command line for a release build.\nBUILDTYPE ?= %(default_configuration)s\n\n# Directory all our build output goes into.\n# Note that this must be two directories beneath src/ for unit tests to pass,\n# as they reach into the src/ directory for data with relative paths.\nbuilddir ?= $(builddir_name)/$(BUILDTYPE)\nabs_builddir := $(abspath $(builddir))\ndepsdir := $(builddir)/.deps\n\n# Object output directory.\nobj := $(builddir)/obj\nabs_obj := $(abspath $(obj))\n\n# We build up a list of every single one of the targets so we can slurp in the\n# generated dependency rule Makefiles in one pass.\nall_deps :=\n\n%(make_global_settings)s\n\nCC.target ?= %(CC.target)s\nCFLAGS.target ?= $(CPPFLAGS) $(CFLAGS)\nCXX.target ?= %(CXX.target)s\nCXXFLAGS.target ?= $(CPPFLAGS) $(CXXFLAGS)\nLINK.target ?= %(LINK.target)s\nLDFLAGS.target ?= $(LDFLAGS)\nAR.target ?= $(AR)\n\n# C++ apps need to be linked with g++.\nLINK ?= $(CXX.target)\n\n# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n# to replicate this environment fallback in make as well.\nCC.host ?= %(CC.host)s\nCFLAGS.host ?= $(CPPFLAGS_host) $(CFLAGS_host)\nCXX.host ?= %(CXX.host)s\nCXXFLAGS.host ?= $(CPPFLAGS_host) $(CXXFLAGS_host)\nLINK.host ?= %(LINK.host)s\nLDFLAGS.host ?=\nAR.host ?= %(AR.host)s\n\n# Define a dir function that can handle spaces.\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n# \"leading spaces cannot appear in the text of the first argument as written.\n# These characters can be put into the argument value by variable substitution.\"\nempty :=\nspace := $(empty) $(empty)\n\n# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\nreplace_spaces = $(subst $(space),\"\"\" + SPACE_REPLACEMENT + \"\"\",$1)\nunreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = -MMD -MF $(depfile).raw\n\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n# We want to rewrite\n#   foobar.o: DEP1 DEP2 \\\\\n#               DEP3\n# to\n#   DEP1:\n#   DEP2:\n#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\nr\"\"\"\ndefine fixup_dep\n# The depfile may not exist if the input file didn't have any #includes.\ntouch $(depfile).raw\n# Fixup path as in (1).\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n# Add extra rules as in (2).\n# We remove slashes and replace spaces with new lines;\n# remove blank lines;\n# delete the first line and append a colon to the remaining lines.\nsed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\nendef\n\"\"\"\n\"\"\"\n# Command definitions:\n# - cmd_foo is the actual command to run;\n# - quiet_cmd_foo is the brief-output summary of the command.\n\nquiet_cmd_cc = CC($(TOOLSET)) $@\ncmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\n\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n\n%(link_commands)s\n\"\"\"\n\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n# This allows us to read/write command lines with shell variables (e.g.\n# $LD_LIBRARY_PATH), without triggering make substitution.\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n# positives, where one string reordered its arguments.\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n# We instead substitute each for the empty string into the other, and\n# say they're equal if both substitutions produce the empty string.\n# .d files contain \"\"\" + SPACE_REPLACEMENT + \\\n                   \"\"\" instead of spaces, take that into account.\ncommand_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\\\n                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n\n# Helper that is non-empty when a prerequisite changes.\n# Normally make does this implicitly, but we force rules to always run\n# so we can check their command lines.\n#   $? -- new prerequisites\n#   $| -- order-only dependencies\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n  @E=0;\\\\\n  for p in $(POSTBUILDS); do\\\\\n    eval $$p;\\\\\n    E=$$?;\\\\\n    if [ $$E -ne 0 ]; then\\\\\n      break;\\\\\n    fi;\\\\\n  done;\\\\\n  if [ $$E -ne 0 ]; then\\\\\n    rm -rf \"$@\";\\\\\n    exit $$E;\\\\\n  fi\nendef\n\n# do_cmd: run a command via the above cmd_foo names, if necessary.\n# Should always run for a given target to handle command-line changes.\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n# Note: We intentionally do NOT call dirx for depfile, since it contains \"\"\" + \\\n                                                     SPACE_REPLACEMENT + \"\"\" for\n# spaces already and dirx strips the \"\"\" + SPACE_REPLACEMENT + \\\n                                     \"\"\" characters.\ndefine do_cmd\n$(if $(or $(command_changed),$(prereq_changed)),\n  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n  $(if $(findstring flock,$(word %(flock_index)d,$(cmd_$1))),\n    @$(cmd_$(1))\n    @echo \"  $(quiet_cmd_$(1)): Finished\",\n    @$(cmd_$(1))\n  )\n  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n  @$(if $(2),$(fixup_dep))\n  $(if $(and $(3), $(POSTBUILDS)),\n    $(call do_postbuilds)\n  )\n)\nendef\n\n# Declare the \"%(default_target)s\" target first so it is the default,\n# even though we don't have the deps yet.\n.PHONY: %(default_target)s\n%(default_target)s:\n\n# make looks for ways to re-generate included makefiles, but in our case, we\n# don't have a direct way. Explicitly telling make that it has nothing to do\n# for them makes it go faster.\n%%.d: ;\n\n# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n# do_cmd.\n.PHONY: FORCE_DO_CMD\nFORCE_DO_CMD:\n\n\"\"\")\n\nSHARED_HEADER_MAC_COMMANDS = \"\"\"\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\n\n\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:\n    writer.write(\n        '$(obj).$(TOOLSET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(obj)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n')\n\n\nSHARED_HEADER_SUFFIX_RULES_COMMENT1 = (\"\"\"\\\n# Suffix rules, putting all outputs into $(obj).\n\"\"\")\n\n\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\n\n\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\nifneq ($(d_files),)\n  include $(d_files)\nendif\n\"\"\"\n\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\n\"\"\"\n\n# Maps every compilable file extension to the do_cmd that compiles it.\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',\n  '.S': 'cc',\n}\n\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  for res in (filename.endswith(e) for e in COMPILABLE_EXTENSIONS):\n    if res:\n      return True\n  return False\n\n\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\n\n\ndef Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\n\n\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\n\n\ndef EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')\n\n\ndef EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.\n  return s.replace('#', r'\\#')\n\n\ndef QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"\n  if '\"' in string:\n    string = '\"' + string.replace('\"', '\\\\\"') + '\"'\n  return string\n\n\ndef StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\n\n\nsrcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\n\n\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\n\n\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  \"\"\"\n  if spec.get('type', None) != 'static_library':\n    return\n\n  basenames = {}\n  for source in all_sources:\n    name, ext = os.path.splitext(source)\n    is_compiled_file = ext in [\n        '.c', '.cc', '.cpp', '.cxx', '.m', '.mm', '.s', '.S']\n    if not is_compiled_file:\n      continue\n    basename = os.path.basename(name)  # Don't include extension.\n    basenames.setdefault(basename, []).append(source)\n\n  error = ''\n  for basename, files in basenames.iteritems():\n    if len(files) > 1:\n      error += '  %s: %s\\n' % (basename, ' '.join(files))\n\n  if error:\n    print('static library %s has several files with the same basename:\\n' %\n          spec['target_name'] + error + 'libtool on OS X will generate' +\n          ' warnings for them.')\n    raise GypError('Duplicate basenames in sources section, see list above')\n\n\n# Map from qualified target to path to output.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\n\n\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}\n    self.suffix_rules_objdir2 = {}\n\n    # Generate suffix rules for all compilable extensions.\n    for ext in COMPILABLE_EXTENSIONS.keys():\n      # Suffix rules for source folder.\n      self.suffix_rules_srcdir.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n\n      # Suffix rules for generated source files.\n      self.suffix_rules_objdir1.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n      self.suffix_rules_objdir2.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n\n\n  def Write(self, qualified_target, base_path, output_filename, spec, configs,\n            part_of_all):\n    \"\"\"The main entry point: writes a .mk file for a single target.\n\n    Arguments:\n      qualified_target: target we're generating\n      base_path: path relative to source root we're building in, used to resolve\n                 target-relative paths\n      output_filename: output .mk file name to write\n      spec, configs: gyp info\n      part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    gyp.common.EnsureDirExists(output_filename)\n\n    self.fp = open(output_filename, 'w')\n\n    self.fp.write(header)\n\n    self.qualified_target = qualified_target\n    self.path = base_path\n    self.target = spec['target_name']\n    self.type = spec['type']\n    self.toolset = spec['toolset']\n\n    self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)\n    if self.flavor == 'mac':\n      self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n    else:\n      self.xcode_settings = None\n\n    deps, link_deps = self.ComputeDeps(spec)\n\n    # Some of the generation below can add extra output, sources, or\n    # link dependencies.  All of the out params of the functions that\n    # follow use names like extra_foo.\n    extra_outputs = []\n    extra_sources = []\n    extra_link_deps = []\n    extra_mac_bundle_resources = []\n    mac_bundle_deps = []\n\n    if self.is_mac_bundle:\n      self.output = self.ComputeMacBundleOutput(spec)\n      self.output_binary = self.ComputeMacBundleBinaryOutput(spec)\n    else:\n      self.output = self.output_binary = self.ComputeOutput(spec)\n\n    self.is_standalone_static_library = bool(\n        spec.get('standalone_static_library', 0))\n    self._INSTALLABLE_TARGETS = ('executable', 'loadable_module',\n                                 'shared_library')\n    if (self.is_standalone_static_library or\n        self.type in self._INSTALLABLE_TARGETS):\n      self.alias = os.path.basename(self.output)\n      install_path = self._InstallableTargetInstallPath()\n    else:\n      self.alias = self.output\n      install_path = self.output\n\n    self.WriteLn(\"TOOLSET := \" + self.toolset)\n    self.WriteLn(\"TARGET := \" + self.target)\n\n    # Actions must come first, since they can generate more OBJs for use below.\n    if 'actions' in spec:\n      self.WriteActions(spec['actions'], extra_sources, extra_outputs,\n                        extra_mac_bundle_resources, part_of_all)\n\n    # Rules must be early like actions.\n    if 'rules' in spec:\n      self.WriteRules(spec['rules'], extra_sources, extra_outputs,\n                      extra_mac_bundle_resources, part_of_all)\n\n    if 'copies' in spec:\n      self.WriteCopies(spec['copies'], extra_outputs, part_of_all)\n\n    # Bundle resources.\n    if self.is_mac_bundle:\n      all_mac_bundle_resources = (\n          spec.get('mac_bundle_resources', []) + extra_mac_bundle_resources)\n      self.WriteMacBundleResources(all_mac_bundle_resources, mac_bundle_deps)\n      self.WriteMacInfoPlist(mac_bundle_deps)\n\n    # Sources.\n    all_sources = spec.get('sources', []) + extra_sources\n    if all_sources:\n      if self.flavor == 'mac':\n        # libtool on OS X generates warnings for duplicate basenames in the same\n        # target.\n        _ValidateSourcesForOSX(spec, all_sources)\n      self.WriteSources(\n          configs, deps, all_sources, extra_outputs,\n          extra_link_deps, part_of_all,\n          gyp.xcode_emulation.MacPrefixHeader(\n              self.xcode_settings, lambda p: Sourceify(self.Absolutify(p)),\n              self.Pchify))\n      sources = filter(Compilable, all_sources)\n      if sources:\n        self.WriteLn(SHARED_HEADER_SUFFIX_RULES_COMMENT1)\n        extensions = set([os.path.splitext(s)[1] for s in sources])\n        for ext in extensions:\n          if ext in self.suffix_rules_srcdir:\n            self.WriteLn(self.suffix_rules_srcdir[ext])\n        self.WriteLn(SHARED_HEADER_SUFFIX_RULES_COMMENT2)\n        for ext in extensions:\n          if ext in self.suffix_rules_objdir1:\n            self.WriteLn(self.suffix_rules_objdir1[ext])\n        for ext in extensions:\n          if ext in self.suffix_rules_objdir2:\n            self.WriteLn(self.suffix_rules_objdir2[ext])\n        self.WriteLn('# End of this set of suffix rules')\n\n        # Add dependency from bundle to bundle binary.\n        if self.is_mac_bundle:\n          mac_bundle_deps.append(self.output_binary)\n\n    self.WriteTarget(spec, configs, deps, extra_link_deps + link_deps,\n                     mac_bundle_deps, extra_outputs, part_of_all)\n\n    # Update global list of target outputs, used in dependency tracking.\n    target_outputs[qualified_target] = install_path\n\n    # Update global list of link dependencies.\n    if self.type in ('static_library', 'shared_library'):\n      target_link_deps[qualified_target] = self.output_binary\n\n    # Currently any versions have the same effect, but in future the behavior\n    # could be different.\n    if self.generator_flags.get('android_ndk_version', None):\n      self.WriteAndroidNdkModuleRule(self.target, all_sources, link_deps)\n\n    self.fp.close()\n\n\n  def WriteSubMake(self, output_filename, makefile_path, targets, build_dir):\n    \"\"\"Write a \"sub-project\" Makefile.\n\n    This is a small, wrapper Makefile that calls the top-level Makefile to build\n    the targets from a single gyp file (i.e. a sub-project).\n\n    Arguments:\n      output_filename: sub-project Makefile name to write\n      makefile_path: path to the top-level Makefile\n      targets: list of \"all\" targets for this sub-project\n      build_dir: build output directory, relative to the sub-project\n    \"\"\"\n    gyp.common.EnsureDirExists(output_filename)\n    self.fp = open(output_filename, 'w')\n    self.fp.write(header)\n    # For consistency with other builders, put sub-project build output in the\n    # sub-project dir (see test/subdirectory/gyptest-subdir-all.py).\n    self.WriteLn('export builddir_name ?= %s' %\n                 os.path.join(os.path.dirname(output_filename), build_dir))\n    self.WriteLn('.PHONY: all')\n    self.WriteLn('all:')\n    if makefile_path:\n      makefile_path = ' -C ' + makefile_path\n    self.WriteLn('\\t$(MAKE)%s %s' % (makefile_path, ' '.join(targets)))\n    self.fp.close()\n\n\n  def WriteActions(self, actions, extra_sources, extra_outputs,\n                   extra_mac_bundle_resources, part_of_all):\n    \"\"\"Write Makefile code for any 'actions' from the gyp input.\n\n    extra_sources: a list that will be filled in with newly generated source\n                   files, if any\n    extra_outputs: a list that will be filled in with any outputs of these\n                   actions (used to make other pieces dependent on these\n                   actions)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    env = self.GetSortedXcodeEnv()\n    for action in actions:\n      name = StringToMakefileVariable('%s_%s' % (self.qualified_target,\n                                                 action['action_name']))\n      self.WriteLn('### Rules for action \"%s\":' % action['action_name'])\n      inputs = action['inputs']\n      outputs = action['outputs']\n\n      # Build up a list of outputs.\n      # Collect the output dirs we'll need.\n      dirs = set()\n      for out in outputs:\n        dir = os.path.split(out)[0]\n        if dir:\n          dirs.add(dir)\n      if int(action.get('process_outputs_as_sources', False)):\n        extra_sources += outputs\n      if int(action.get('process_outputs_as_mac_bundle_resources', False)):\n        extra_mac_bundle_resources += outputs\n\n      # Write the actual command.\n      action_commands = action['action']\n      if self.flavor == 'mac':\n        action_commands = [gyp.xcode_emulation.ExpandEnvVars(command, env)\n                          for command in action_commands]\n      command = gyp.common.EncodePOSIXShellList(action_commands)\n      if 'message' in action:\n        self.WriteLn('quiet_cmd_%s = ACTION %s $@' % (name, action['message']))\n      else:\n        self.WriteLn('quiet_cmd_%s = ACTION %s $@' % (name, name))\n      if len(dirs) > 0:\n        command = 'mkdir -p %s' % ' '.join(dirs) + '; ' + command\n\n      cd_action = 'cd %s; ' % Sourceify(self.path or '.')\n\n      # command and cd_action get written to a toplevel variable called\n      # cmd_foo. Toplevel variables can't handle things that change per\n      # makefile like $(TARGET), so hardcode the target.\n      command = command.replace('$(TARGET)', self.target)\n      cd_action = cd_action.replace('$(TARGET)', self.target)\n\n      # Set LD_LIBRARY_PATH in case the action runs an executable from this\n      # build which links to shared libs from this build.\n      # actions run on the host, so they should in theory only use host\n      # libraries, but until everything is made cross-compile safe, also use\n      # target libraries.\n      # TODO(piman): when everything is cross-compile safe, remove lib.target\n      self.WriteLn('cmd_%s = LD_LIBRARY_PATH=$(builddir)/lib.host:'\n                   '$(builddir)/lib.target:$$LD_LIBRARY_PATH; '\n                   'export LD_LIBRARY_PATH; '\n                   '%s%s'\n                   % (name, cd_action, command))\n      self.WriteLn()\n      outputs = map(self.Absolutify, outputs)\n      # The makefile rules are all relative to the top dir, but the gyp actions\n      # are defined relative to their containing dir.  This replaces the obj\n      # variable for the action rule with an absolute version so that the output\n      # goes in the right place.\n      # Only write the 'obj' and 'builddir' rules for the \"primary\" output (:1);\n      # it's superfluous for the \"extra outputs\", and this avoids accidentally\n      # writing duplicate dummy rules for those outputs.\n      # Same for environment.\n      self.WriteLn(\"%s: obj := $(abs_obj)\" % QuoteSpaces(outputs[0]))\n      self.WriteLn(\"%s: builddir := $(abs_builddir)\" % QuoteSpaces(outputs[0]))\n      self.WriteSortedXcodeEnv(outputs[0], self.GetSortedXcodeEnv())\n\n      for input in inputs:\n        assert ' ' not in input, (\n            \"Spaces in action input filenames not supported (%s)\"  % input)\n      for output in outputs:\n        assert ' ' not in output, (\n            \"Spaces in action output filenames not supported (%s)\"  % output)\n\n      # See the comment in WriteCopies about expanding env vars.\n      outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n      inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n      self.WriteDoCmd(outputs, map(Sourceify, map(self.Absolutify, inputs)),\n                      part_of_all=part_of_all, command=name)\n\n      # Stuff the outputs in a variable so we can refer to them later.\n      outputs_variable = 'action_%s_outputs' % name\n      self.WriteLn('%s := %s' % (outputs_variable, ' '.join(outputs)))\n      extra_outputs.append('$(%s)' % outputs_variable)\n      self.WriteLn()\n\n    self.WriteLn()\n\n\n  def WriteRules(self, rules, extra_sources, extra_outputs,\n                 extra_mac_bundle_resources, part_of_all):\n    \"\"\"Write Makefile code for any 'rules' from the gyp input.\n\n    extra_sources: a list that will be filled in with newly generated source\n                   files, if any\n    extra_outputs: a list that will be filled in with any outputs of these\n                   rules (used to make other pieces dependent on these rules)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    env = self.GetSortedXcodeEnv()\n    for rule in rules:\n      name = StringToMakefileVariable('%s_%s' % (self.qualified_target,\n                                                 rule['rule_name']))\n      count = 0\n      self.WriteLn('### Generated for rule %s:' % name)\n\n      all_outputs = []\n\n      for rule_source in rule.get('rule_sources', []):\n        dirs = set()\n        (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n        (rule_source_root, rule_source_ext) = \\\n            os.path.splitext(rule_source_basename)\n\n        outputs = [self.ExpandInputRoot(out, rule_source_root,\n                                        rule_source_dirname)\n                   for out in rule['outputs']]\n\n        for out in outputs:\n          dir = os.path.dirname(out)\n          if dir:\n            dirs.add(dir)\n        if int(rule.get('process_outputs_as_sources', False)):\n          extra_sources += outputs\n        if int(rule.get('process_outputs_as_mac_bundle_resources', False)):\n          extra_mac_bundle_resources += outputs\n        inputs = map(Sourceify, map(self.Absolutify, [rule_source] +\n                                    rule.get('inputs', [])))\n        actions = ['$(call do_cmd,%s_%d)' % (name, count)]\n\n        if name == 'resources_grit':\n          # HACK: This is ugly.  Grit intentionally doesn't touch the\n          # timestamp of its output file when the file doesn't change,\n          # which is fine in hash-based dependency systems like scons\n          # and forge, but not kosher in the make world.  After some\n          # discussion, hacking around it here seems like the least\n          # amount of pain.\n          actions += ['@touch --no-create $@']\n\n        # See the comment in WriteCopies about expanding env vars.\n        outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n        inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n        outputs = map(self.Absolutify, outputs)\n        all_outputs += outputs\n        # Only write the 'obj' and 'builddir' rules for the \"primary\" output\n        # (:1); it's superfluous for the \"extra outputs\", and this avoids\n        # accidentally writing duplicate dummy rules for those outputs.\n        self.WriteLn('%s: obj := $(abs_obj)' % outputs[0])\n        self.WriteLn('%s: builddir := $(abs_builddir)' % outputs[0])\n        self.WriteMakeRule(outputs, inputs, actions,\n                           command=\"%s_%d\" % (name, count))\n        # Spaces in rule filenames are not supported, but rule variables have\n        # spaces in them (e.g. RULE_INPUT_PATH expands to '$(abspath $<)').\n        # The spaces within the variables are valid, so remove the variables\n        # before checking.\n        variables_with_spaces = re.compile(r'\\$\\([^ ]* \\$<\\)')\n        for output in outputs:\n          output = re.sub(variables_with_spaces, '', output)\n          assert ' ' not in output, (\n              \"Spaces in rule filenames not yet supported (%s)\"  % output)\n        self.WriteLn('all_deps += %s' % ' '.join(outputs))\n\n        action = [self.ExpandInputRoot(ac, rule_source_root,\n                                       rule_source_dirname)\n                  for ac in rule['action']]\n        mkdirs = ''\n        if len(dirs) > 0:\n          mkdirs = 'mkdir -p %s; ' % ' '.join(dirs)\n        cd_action = 'cd %s; ' % Sourceify(self.path or '.')\n\n        # action, cd_action, and mkdirs get written to a toplevel variable\n        # called cmd_foo. Toplevel variables can't handle things that change\n        # per makefile like $(TARGET), so hardcode the target.\n        if self.flavor == 'mac':\n          action = [gyp.xcode_emulation.ExpandEnvVars(command, env)\n                    for command in action]\n        action = gyp.common.EncodePOSIXShellList(action)\n        action = action.replace('$(TARGET)', self.target)\n        cd_action = cd_action.replace('$(TARGET)', self.target)\n        mkdirs = mkdirs.replace('$(TARGET)', self.target)\n\n        # Set LD_LIBRARY_PATH in case the rule runs an executable from this\n        # build which links to shared libs from this build.\n        # rules run on the host, so they should in theory only use host\n        # libraries, but until everything is made cross-compile safe, also use\n        # target libraries.\n        # TODO(piman): when everything is cross-compile safe, remove lib.target\n        self.WriteLn(\n            \"cmd_%(name)s_%(count)d = LD_LIBRARY_PATH=\"\n              \"$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; \"\n              \"export LD_LIBRARY_PATH; \"\n              \"%(cd_action)s%(mkdirs)s%(action)s\" % {\n          'action': action,\n          'cd_action': cd_action,\n          'count': count,\n          'mkdirs': mkdirs,\n          'name': name,\n        })\n        self.WriteLn(\n            'quiet_cmd_%(name)s_%(count)d = RULE %(name)s_%(count)d $@' % {\n          'count': count,\n          'name': name,\n        })\n        self.WriteLn()\n        count += 1\n\n      outputs_variable = 'rule_%s_outputs' % name\n      self.WriteList(all_outputs, outputs_variable)\n      extra_outputs.append('$(%s)' % outputs_variable)\n\n      self.WriteLn('### Finished generating for rule: %s' % name)\n      self.WriteLn()\n    self.WriteLn('### Finished generating for all rules')\n    self.WriteLn('')\n\n\n  def WriteCopies(self, copies, extra_outputs, part_of_all):\n    \"\"\"Write Makefile code for any 'copies' from the gyp input.\n\n    extra_outputs: a list that will be filled in with any outputs of this action\n                   (used to make other pieces dependent on this action)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    self.WriteLn('### Generated for copy rule.')\n\n    variable = StringToMakefileVariable(self.qualified_target + '_copies')\n    outputs = []\n    for copy in copies:\n      for path in copy['files']:\n        # Absolutify() may call normpath, and will strip trailing slashes.\n        path = Sourceify(self.Absolutify(path))\n        filename = os.path.split(path)[1]\n        output = Sourceify(self.Absolutify(os.path.join(copy['destination'],\n                                                        filename)))\n\n        # If the output path has variables in it, which happens in practice for\n        # 'copies', writing the environment as target-local doesn't work,\n        # because the variables are already needed for the target name.\n        # Copying the environment variables into global make variables doesn't\n        # work either, because then the .d files will potentially contain spaces\n        # after variable expansion, and .d file handling cannot handle spaces.\n        # As a workaround, manually expand variables at gyp time. Since 'copies'\n        # can't run scripts, there's no need to write the env then.\n        # WriteDoCmd() will escape spaces for .d files.\n        env = self.GetSortedXcodeEnv()\n        output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n        path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n        self.WriteDoCmd([output], [path], 'copy', part_of_all)\n        outputs.append(output)\n    self.WriteLn('%s = %s' % (variable, ' '.join(map(QuoteSpaces, outputs))))\n    extra_outputs.append('$(%s)' % variable)\n    self.WriteLn()\n\n\n  def WriteMacBundleResources(self, resources, bundle_deps):\n    \"\"\"Writes Makefile code for 'mac_bundle_resources'.\"\"\"\n    self.WriteLn('### Generated for mac_bundle_resources')\n\n    for output, res in gyp.xcode_emulation.GetMacBundleResources(\n        generator_default_variables['PRODUCT_DIR'], self.xcode_settings,\n        map(Sourceify, map(self.Absolutify, resources))):\n      _, ext = os.path.splitext(output)\n      if ext != '.xcassets':\n        # Make does not supports '.xcassets' emulation.\n        self.WriteDoCmd([output], [res], 'mac_tool,,,copy-bundle-resource',\n                        part_of_all=True)\n        bundle_deps.append(output)\n\n\n  def WriteMacInfoPlist(self, bundle_deps):\n    \"\"\"Write Makefile code for bundle Info.plist files.\"\"\"\n    info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n        generator_default_variables['PRODUCT_DIR'], self.xcode_settings,\n        lambda p: Sourceify(self.Absolutify(p)))\n    if not info_plist:\n      return\n    if defines:\n      # Create an intermediate file to store preprocessed results.\n      intermediate_plist = ('$(obj).$(TOOLSET)/$(TARGET)/' +\n          os.path.basename(info_plist))\n      self.WriteList(defines, intermediate_plist + ': INFOPLIST_DEFINES', '-D',\n          quoter=EscapeCppDefine)\n      self.WriteMakeRule([intermediate_plist], [info_plist],\n          ['$(call do_cmd,infoplist)',\n           # \"Convert\" the plist so that any weird whitespace changes from the\n           # preprocessor do not affect the XML parser in mac_tool.\n           '@plutil -convert xml1 $@ $@'])\n      info_plist = intermediate_plist\n    # plists can contain envvars and substitute them into the file.\n    self.WriteSortedXcodeEnv(\n        out, self.GetSortedXcodeEnv(additional_settings=extra_env))\n    self.WriteDoCmd([out], [info_plist], 'mac_tool,,,copy-info-plist',\n                    part_of_all=True)\n    bundle_deps.append(out)\n\n\n  def WriteSources(self, configs, deps, sources,\n                   extra_outputs, extra_link_deps,\n                   part_of_all, precompiled_header):\n    \"\"\"Write Makefile code for any 'sources' from the gyp input.\n    These are source files necessary to build the current target.\n\n    configs, deps, sources: input from gyp.\n    extra_outputs: a list of extra outputs this action should be dependent on;\n                   used to serialize action/rules before compilation\n    extra_link_deps: a list that will be filled in with any outputs of\n                     compilation (to be used in link lines)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n\n    # Write configuration-specific variables for CFLAGS, etc.\n    for configname in sorted(configs.keys()):\n      config = configs[configname]\n      self.WriteList(config.get('defines'), 'DEFS_%s' % configname, prefix='-D',\n          quoter=EscapeCppDefine)\n\n      if self.flavor == 'mac':\n        cflags = self.xcode_settings.GetCflags(configname)\n        cflags_c = self.xcode_settings.GetCflagsC(configname)\n        cflags_cc = self.xcode_settings.GetCflagsCC(configname)\n        cflags_objc = self.xcode_settings.GetCflagsObjC(configname)\n        cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n      else:\n        cflags = config.get('cflags')\n        cflags_c = config.get('cflags_c')\n        cflags_cc = config.get('cflags_cc')\n\n      self.WriteLn(\"# Flags passed to all source files.\");\n      self.WriteList(cflags, 'CFLAGS_%s' % configname)\n      self.WriteLn(\"# Flags passed to only C files.\");\n      self.WriteList(cflags_c, 'CFLAGS_C_%s' % configname)\n      self.WriteLn(\"# Flags passed to only C++ files.\");\n      self.WriteList(cflags_cc, 'CFLAGS_CC_%s' % configname)\n      if self.flavor == 'mac':\n        self.WriteLn(\"# Flags passed to only ObjC files.\");\n        self.WriteList(cflags_objc, 'CFLAGS_OBJC_%s' % configname)\n        self.WriteLn(\"# Flags passed to only ObjC++ files.\");\n        self.WriteList(cflags_objcc, 'CFLAGS_OBJCC_%s' % configname)\n      includes = config.get('include_dirs')\n      if includes:\n        includes = map(Sourceify, map(self.Absolutify, includes))\n      self.WriteList(includes, 'INCS_%s' % configname, prefix='-I')\n\n    compilable = filter(Compilable, sources)\n    objs = map(self.Objectify, map(self.Absolutify, map(Target, compilable)))\n    self.WriteList(objs, 'OBJS')\n\n    for obj in objs:\n      assert ' ' not in obj, (\n          \"Spaces in object filenames not supported (%s)\"  % obj)\n    self.WriteLn('# Add to the list of files we specially track '\n                 'dependencies for.')\n    self.WriteLn('all_deps += $(OBJS)')\n    self.WriteLn()\n\n    # Make sure our dependencies are built first.\n    if deps:\n      self.WriteMakeRule(['$(OBJS)'], deps,\n                         comment = 'Make sure our dependencies are built '\n                                   'before any of us.',\n                         order_only = True)\n\n    # Make sure the actions and rules run first.\n    # If they generate any extra headers etc., the per-.o file dep tracking\n    # will catch the proper rebuilds, so order only is still ok here.\n    if extra_outputs:\n      self.WriteMakeRule(['$(OBJS)'], extra_outputs,\n                         comment = 'Make sure our actions/rules run '\n                                   'before any of us.',\n                         order_only = True)\n\n    pchdeps = precompiled_header.GetObjDependencies(compilable, objs )\n    if pchdeps:\n      self.WriteLn('# Dependencies from obj files to their precompiled headers')\n      for source, obj, gch in pchdeps:\n        self.WriteLn('%s: %s' % (obj, gch))\n      self.WriteLn('# End precompiled header dependencies')\n\n    if objs:\n      extra_link_deps.append('$(OBJS)')\n      self.WriteLn(\"\"\"\\\n# CFLAGS et al overrides must be target-local.\n# See \"Target-specific Variable Values\" in the GNU Make manual.\"\"\")\n      self.WriteLn(\"$(OBJS): TOOLSET := $(TOOLSET)\")\n      self.WriteLn(\"$(OBJS): GYP_CFLAGS := \"\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"%s \" % precompiled_header.GetInclude('c') +\n                   \"$(CFLAGS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_C_$(BUILDTYPE))\")\n      self.WriteLn(\"$(OBJS): GYP_CXXFLAGS := \"\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"%s \" % precompiled_header.GetInclude('cc') +\n                   \"$(CFLAGS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_CC_$(BUILDTYPE))\")\n      if self.flavor == 'mac':\n        self.WriteLn(\"$(OBJS): GYP_OBJCFLAGS := \"\n                     \"$(DEFS_$(BUILDTYPE)) \"\n                     \"$(INCS_$(BUILDTYPE)) \"\n                     \"%s \" % precompiled_header.GetInclude('m') +\n                     \"$(CFLAGS_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_C_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_OBJC_$(BUILDTYPE))\")\n        self.WriteLn(\"$(OBJS): GYP_OBJCXXFLAGS := \"\n                     \"$(DEFS_$(BUILDTYPE)) \"\n                     \"$(INCS_$(BUILDTYPE)) \"\n                     \"%s \" % precompiled_header.GetInclude('mm') +\n                     \"$(CFLAGS_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_CC_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_OBJCC_$(BUILDTYPE))\")\n\n    self.WritePchTargets(precompiled_header.GetPchBuildCommands())\n\n    # If there are any object files in our input file list, link them into our\n    # output.\n    extra_link_deps += filter(Linkable, sources)\n\n    self.WriteLn()\n\n  def WritePchTargets(self, pch_commands):\n    \"\"\"Writes make rules to compile prefix headers.\"\"\"\n    if not pch_commands:\n      return\n\n    for gch, lang_flag, lang, input in pch_commands:\n      extra_flags = {\n        'c': '$(CFLAGS_C_$(BUILDTYPE))',\n        'cc': '$(CFLAGS_CC_$(BUILDTYPE))',\n        'm': '$(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))',\n        'mm': '$(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))',\n      }[lang]\n      var_name = {\n        'c': 'GYP_PCH_CFLAGS',\n        'cc': 'GYP_PCH_CXXFLAGS',\n        'm': 'GYP_PCH_OBJCFLAGS',\n        'mm': 'GYP_PCH_OBJCXXFLAGS',\n      }[lang]\n      self.WriteLn(\"%s: %s := %s \" % (gch, var_name, lang_flag) +\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_$(BUILDTYPE)) \" +\n                   extra_flags)\n\n      self.WriteLn('%s: %s FORCE_DO_CMD' % (gch, input))\n      self.WriteLn('\\t@$(call do_cmd,pch_%s,1)' % lang)\n      self.WriteLn('')\n      assert ' ' not in gch, (\n          \"Spaces in gch filenames not supported (%s)\"  % gch)\n      self.WriteLn('all_deps += %s' % gch)\n      self.WriteLn('')\n\n\n  def ComputeOutputBasename(self, spec):\n    \"\"\"Return the 'output basename' of a gyp spec.\n\n    E.g., the loadable module 'foobar' in directory 'baz' will produce\n      'libfoobar.so'\n    \"\"\"\n    assert not self.is_mac_bundle\n\n    if self.flavor == 'mac' and self.type in (\n        'static_library', 'executable', 'shared_library', 'loadable_module'):\n      return self.xcode_settings.GetExecutablePath()\n\n    target = spec['target_name']\n    target_prefix = ''\n    target_ext = ''\n    if self.type == 'static_library':\n      if target[:3] == 'lib':\n        target = target[3:]\n      target_prefix = 'lib'\n      target_ext = '.a'\n    elif self.type in ('loadable_module', 'shared_library'):\n      if target[:3] == 'lib':\n        target = target[3:]\n      target_prefix = 'lib'\n      target_ext = '.so'\n    elif self.type == 'none':\n      target = '%s.stamp' % target\n    elif self.type != 'executable':\n      print (\"ERROR: What output file should be generated?\",\n             \"type\", self.type, \"target\", target)\n\n    target_prefix = spec.get('product_prefix', target_prefix)\n    target = spec.get('product_name', target)\n    product_ext = spec.get('product_extension')\n    if product_ext:\n      target_ext = '.' + product_ext\n\n    return target_prefix + target + target_ext\n\n\n  def _InstallImmediately(self):\n    return self.toolset == 'target' and self.flavor == 'mac' and self.type in (\n          'static_library', 'executable', 'shared_library', 'loadable_module')\n\n\n  def ComputeOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) of a gyp spec.\n\n    E.g., the loadable module 'foobar' in directory 'baz' will produce\n      '$(obj)/baz/libfoobar.so'\n    \"\"\"\n    assert not self.is_mac_bundle\n\n    path = os.path.join('$(obj).' + self.toolset, self.path)\n    if self.type == 'executable' or self._InstallImmediately():\n      path = '$(builddir)'\n    path = spec.get('product_dir', path)\n    return os.path.join(path, self.ComputeOutputBasename(spec))\n\n\n  def ComputeMacBundleOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) to a bundle output directory.\"\"\"\n    assert self.is_mac_bundle\n    path = generator_default_variables['PRODUCT_DIR']\n    return os.path.join(path, self.xcode_settings.GetWrapperName())\n\n\n  def ComputeMacBundleBinaryOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) to the binary in a bundle.\"\"\"\n    path = generator_default_variables['PRODUCT_DIR']\n    return os.path.join(path, self.xcode_settings.GetExecutablePath())\n\n\n  def ComputeDeps(self, spec):\n    \"\"\"Compute the dependencies of a gyp spec.\n\n    Returns a tuple (deps, link_deps), where each is a list of\n    filenames that will need to be put in front of make for either\n    building (deps) or linking (link_deps).\n    \"\"\"\n    deps = []\n    link_deps = []\n    if 'dependencies' in spec:\n      deps.extend([target_outputs[dep] for dep in spec['dependencies']\n                   if target_outputs[dep]])\n      for dep in spec['dependencies']:\n        if dep in target_link_deps:\n          link_deps.append(target_link_deps[dep])\n      deps.extend(link_deps)\n      # TODO: It seems we need to transitively link in libraries (e.g. -lfoo)?\n      # This hack makes it work:\n      # link_deps.extend(spec.get('libraries', []))\n    return (gyp.common.uniquer(deps), gyp.common.uniquer(link_deps))\n\n\n  def WriteDependencyOnExtraOutputs(self, target, extra_outputs):\n    self.WriteMakeRule([self.output_binary], extra_outputs,\n                       comment = 'Build our special outputs first.',\n                       order_only = True)\n\n\n  def WriteTarget(self, spec, configs, deps, link_deps, bundle_deps,\n                  extra_outputs, part_of_all):\n    \"\"\"Write Makefile code to produce the final target of the gyp spec.\n\n    spec, configs: input from gyp.\n    deps, link_deps: dependency lists; see ComputeDeps()\n    extra_outputs: any extra outputs that our target should depend on\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n\n    self.WriteLn('### Rules for final target.')\n\n    if extra_outputs:\n      self.WriteDependencyOnExtraOutputs(self.output_binary, extra_outputs)\n      self.WriteMakeRule(extra_outputs, deps,\n                         comment=('Preserve order dependency of '\n                                  'special output on deps.'),\n                         order_only = True)\n\n    target_postbuilds = {}\n    if self.type != 'none':\n      for configname in sorted(configs.keys()):\n        config = configs[configname]\n        if self.flavor == 'mac':\n          ldflags = self.xcode_settings.GetLdflags(configname,\n              generator_default_variables['PRODUCT_DIR'],\n              lambda p: Sourceify(self.Absolutify(p)))\n\n          # TARGET_POSTBUILDS_$(BUILDTYPE) is added to postbuilds later on.\n          gyp_to_build = gyp.common.InvertRelativePath(self.path)\n          target_postbuild = self.xcode_settings.AddImplicitPostbuilds(\n              configname,\n              QuoteSpaces(os.path.normpath(os.path.join(gyp_to_build,\n                                                        self.output))),\n              QuoteSpaces(os.path.normpath(os.path.join(gyp_to_build,\n                                                        self.output_binary))))\n          if target_postbuild:\n            target_postbuilds[configname] = target_postbuild\n        else:\n          ldflags = config.get('ldflags', [])\n          # Compute an rpath for this output if needed.\n          if any(dep.endswith('.so') or '.so.' in dep for dep in deps):\n            # We want to get the literal string \"$ORIGIN\" into the link command,\n            # so we need lots of escaping.\n            ldflags.append(r'-Wl,-rpath=\\$$ORIGIN/lib.%s/' % self.toolset)\n            ldflags.append(r'-Wl,-rpath-link=\\$(builddir)/lib.%s/' %\n                           self.toolset)\n        library_dirs = config.get('library_dirs', [])\n        ldflags += [('-L%s' % library_dir) for library_dir in library_dirs]\n        self.WriteList(ldflags, 'LDFLAGS_%s' % configname)\n        if self.flavor == 'mac':\n          self.WriteList(self.xcode_settings.GetLibtoolflags(configname),\n                         'LIBTOOLFLAGS_%s' % configname)\n      libraries = spec.get('libraries')\n      if libraries:\n        # Remove duplicate entries\n        libraries = gyp.common.uniquer(libraries)\n        if self.flavor == 'mac':\n          libraries = self.xcode_settings.AdjustLibraries(libraries)\n      self.WriteList(libraries, 'LIBS')\n      self.WriteLn('%s: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))' %\n          QuoteSpaces(self.output_binary))\n      self.WriteLn('%s: LIBS := $(LIBS)' % QuoteSpaces(self.output_binary))\n\n      if self.flavor == 'mac':\n        self.WriteLn('%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))' %\n            QuoteSpaces(self.output_binary))\n\n    # Postbuild actions. Like actions, but implicitly depend on the target's\n    # output.\n    postbuilds = []\n    if self.flavor == 'mac':\n      if target_postbuilds:\n        postbuilds.append('$(TARGET_POSTBUILDS_$(BUILDTYPE))')\n      postbuilds.extend(\n          gyp.xcode_emulation.GetSpecPostbuildCommands(spec))\n\n    if postbuilds:\n      # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n      # so we must output its definition first, since we declare variables\n      # using \":=\".\n      self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n\n      for configname in target_postbuilds:\n        self.WriteLn('%s: TARGET_POSTBUILDS_%s := %s' %\n            (QuoteSpaces(self.output),\n             configname,\n             gyp.common.EncodePOSIXShellList(target_postbuilds[configname])))\n\n      # Postbuilds expect to be run in the gyp file's directory, so insert an\n      # implicit postbuild to cd to there.\n      postbuilds.insert(0, gyp.common.EncodePOSIXShellList(['cd', self.path]))\n      for i in xrange(len(postbuilds)):\n        if not postbuilds[i].startswith('$'):\n          postbuilds[i] = EscapeShellArgument(postbuilds[i])\n      self.WriteLn('%s: builddir := $(abs_builddir)' % QuoteSpaces(self.output))\n      self.WriteLn('%s: POSTBUILDS := %s' % (\n          QuoteSpaces(self.output), ' '.join(postbuilds)))\n\n    # A bundle directory depends on its dependencies such as bundle resources\n    # and bundle binary. When all dependencies have been built, the bundle\n    # needs to be packaged.\n    if self.is_mac_bundle:\n      # If the framework doesn't contain a binary, then nothing depends\n      # on the actions -- make the framework depend on them directly too.\n      self.WriteDependencyOnExtraOutputs(self.output, extra_outputs)\n\n      # Bundle dependencies. Note that the code below adds actions to this\n      # target, so if you move these two lines, move the lines below as well.\n      self.WriteList(map(QuoteSpaces, bundle_deps), 'BUNDLE_DEPS')\n      self.WriteLn('%s: $(BUNDLE_DEPS)' % QuoteSpaces(self.output))\n\n      # After the framework is built, package it. Needs to happen before\n      # postbuilds, since postbuilds depend on this.\n      if self.type in ('shared_library', 'loadable_module'):\n        self.WriteLn('\\t@$(call do_cmd,mac_package_framework,,,%s)' %\n            self.xcode_settings.GetFrameworkVersion())\n\n      # Bundle postbuilds can depend on the whole bundle, so run them after\n      # the bundle is packaged, not already after the bundle binary is done.\n      if postbuilds:\n        self.WriteLn('\\t@$(call do_postbuilds)')\n      postbuilds = []  # Don't write postbuilds for target's output.\n\n      # Needed by test/mac/gyptest-rebuild.py.\n      self.WriteLn('\\t@true  # No-op, used by tests')\n\n      # Since this target depends on binary and resources which are in\n      # nested subfolders, the framework directory will be older than\n      # its dependencies usually. To prevent this rule from executing\n      # on every build (expensive, especially with postbuilds), expliclity\n      # update the time on the framework directory.\n      self.WriteLn('\\t@touch -c %s' % QuoteSpaces(self.output))\n\n    if postbuilds:\n      assert not self.is_mac_bundle, ('Postbuilds for bundles should be done '\n          'on the bundle, not the binary (target \\'%s\\')' % self.target)\n      assert 'product_dir' not in spec, ('Postbuilds do not work with '\n          'custom product_dir')\n\n    if self.type == 'executable':\n      self.WriteLn('%s: LD_INPUTS := %s' % (\n          QuoteSpaces(self.output_binary),\n          ' '.join(map(QuoteSpaces, link_deps))))\n      if self.toolset == 'host' and self.flavor == 'android':\n        self.WriteDoCmd([self.output_binary], link_deps, 'link_host',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd([self.output_binary], link_deps, 'link', part_of_all,\n                        postbuilds=postbuilds)\n\n    elif self.type == 'static_library':\n      for link_dep in link_deps:\n        assert ' ' not in link_dep, (\n            \"Spaces in alink input filenames not supported (%s)\"  % link_dep)\n      if (self.flavor not in ('mac', 'openbsd', 'netbsd', 'win') and not\n          self.is_standalone_static_library):\n        self.WriteDoCmd([self.output_binary], link_deps, 'alink_thin',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd([self.output_binary], link_deps, 'alink', part_of_all,\n                        postbuilds=postbuilds)\n    elif self.type == 'shared_library':\n      self.WriteLn('%s: LD_INPUTS := %s' % (\n            QuoteSpaces(self.output_binary),\n            ' '.join(map(QuoteSpaces, link_deps))))\n      self.WriteDoCmd([self.output_binary], link_deps, 'solink', part_of_all,\n                      postbuilds=postbuilds)\n    elif self.type == 'loadable_module':\n      for link_dep in link_deps:\n        assert ' ' not in link_dep, (\n            \"Spaces in module input filenames not supported (%s)\"  % link_dep)\n      if self.toolset == 'host' and self.flavor == 'android':\n        self.WriteDoCmd([self.output_binary], link_deps, 'solink_module_host',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd(\n            [self.output_binary], link_deps, 'solink_module', part_of_all,\n            postbuilds=postbuilds)\n    elif self.type == 'none':\n      # Write a stamp line.\n      self.WriteDoCmd([self.output_binary], deps, 'touch', part_of_all,\n                      postbuilds=postbuilds)\n    else:\n      print \"WARNING: no output for\", self.type, target\n\n    # Add an alias for each target (if there are any outputs).\n    # Installable target aliases are created below.\n    if ((self.output and self.output != self.target) and\n        (self.type not in self._INSTALLABLE_TARGETS)):\n      self.WriteMakeRule([self.target], [self.output],\n                         comment='Add target alias', phony = True)\n      if part_of_all:\n        self.WriteMakeRule(['all'], [self.target],\n                           comment = 'Add target alias to \"all\" target.',\n                           phony = True)\n\n    # Add special-case rules for our installable targets.\n    # 1) They need to install to the build dir or \"product\" dir.\n    # 2) They get shortcuts for building (e.g. \"make chrome\").\n    # 3) They are part of \"make all\".\n    if (self.type in self._INSTALLABLE_TARGETS or\n        self.is_standalone_static_library):\n      if self.type == 'shared_library':\n        file_desc = 'shared library'\n      elif self.type == 'static_library':\n        file_desc = 'static library'\n      else:\n        file_desc = 'executable'\n      install_path = self._InstallableTargetInstallPath()\n      installable_deps = [self.output]\n      if (self.flavor == 'mac' and not 'product_dir' in spec and\n          self.toolset == 'target'):\n        # On mac, products are created in install_path immediately.\n        assert install_path == self.output, '%s != %s' % (\n            install_path, self.output)\n\n      # Point the target alias to the final binary output.\n      self.WriteMakeRule([self.target], [install_path],\n                         comment='Add target alias', phony = True)\n      if install_path != self.output:\n        assert not self.is_mac_bundle  # See comment a few lines above.\n        self.WriteDoCmd([install_path], [self.output], 'copy',\n                        comment = 'Copy this to the %s output path.' %\n                        file_desc, part_of_all=part_of_all)\n        installable_deps.append(install_path)\n      if self.output != self.alias and self.alias != self.target:\n        self.WriteMakeRule([self.alias], installable_deps,\n                           comment = 'Short alias for building this %s.' %\n                           file_desc, phony = True)\n      if part_of_all:\n        self.WriteMakeRule(['all'], [install_path],\n                           comment = 'Add %s to \"all\" target.' % file_desc,\n                           phony = True)\n\n\n  def WriteList(self, value_list, variable=None, prefix='',\n                quoter=QuoteIfNecessary):\n    \"\"\"Write a variable definition that is a list of values.\n\n    E.g. WriteList(['a','b'], 'foo', prefix='blah') writes out\n         foo = blaha blahb\n    but in a pretty-printed style.\n    \"\"\"\n    values = ''\n    if value_list:\n      value_list = [quoter(prefix + l) for l in value_list]\n      values = ' \\\\\\n\\t' + ' \\\\\\n\\t'.join(value_list)\n    self.fp.write('%s :=%s\\n\\n' % (variable, values))\n\n\n  def WriteDoCmd(self, outputs, inputs, command, part_of_all, comment=None,\n                 postbuilds=False):\n    \"\"\"Write a Makefile rule that uses do_cmd.\n\n    This makes the outputs dependent on the command line that was run,\n    as well as support the V= make command line flag.\n    \"\"\"\n    suffix = ''\n    if postbuilds:\n      assert ',' not in command\n      suffix = ',,1'  # Tell do_cmd to honor $POSTBUILDS\n    self.WriteMakeRule(outputs, inputs,\n                       actions = ['$(call do_cmd,%s%s)' % (command, suffix)],\n                       comment = comment,\n                       command = command,\n                       force = True)\n    # Add our outputs to the list of targets we read depfiles from.\n    # all_deps is only used for deps file reading, and for deps files we replace\n    # spaces with ? because escaping doesn't work with make's $(sort) and\n    # other functions.\n    outputs = [QuoteSpaces(o, SPACE_REPLACEMENT) for o in outputs]\n    self.WriteLn('all_deps += %s' % ' '.join(outputs))\n\n\n  def WriteMakeRule(self, outputs, inputs, actions=None, comment=None,\n                    order_only=False, force=False, phony=False, command=None):\n    \"\"\"Write a Makefile rule, with some extra tricks.\n\n    outputs: a list of outputs for the rule (note: this is not directly\n             supported by make; see comments below)\n    inputs: a list of inputs for the rule\n    actions: a list of shell commands to run for the rule\n    comment: a comment to put in the Makefile above the rule (also useful\n             for making this Python script's code self-documenting)\n    order_only: if true, makes the dependency order-only\n    force: if true, include FORCE_DO_CMD as an order-only dep\n    phony: if true, the rule does not actually generate the named output, the\n           output is just a name to run the rule\n    command: (optional) command name to generate unambiguous labels\n    \"\"\"\n    outputs = map(QuoteSpaces, outputs)\n    inputs = map(QuoteSpaces, inputs)\n\n    if comment:\n      self.WriteLn('# ' + comment)\n    if phony:\n      self.WriteLn('.PHONY: ' + ' '.join(outputs))\n    if actions:\n      self.WriteLn(\"%s: TOOLSET := $(TOOLSET)\" % outputs[0])\n    force_append = ' FORCE_DO_CMD' if force else ''\n\n    if order_only:\n      # Order only rule: Just write a simple rule.\n      # TODO(evanm): just make order_only a list of deps instead of this hack.\n      self.WriteLn('%s: | %s%s' %\n                   (' '.join(outputs), ' '.join(inputs), force_append))\n    elif len(outputs) == 1:\n      # Regular rule, one output: Just write a simple rule.\n      self.WriteLn('%s: %s%s' % (outputs[0], ' '.join(inputs), force_append))\n    else:\n      # Regular rule, more than one output: Multiple outputs are tricky in\n      # make. We will write three rules:\n      # - All outputs depend on an intermediate file.\n      # - Make .INTERMEDIATE depend on the intermediate.\n      # - The intermediate file depends on the inputs and executes the\n      #   actual command.\n      # - The intermediate recipe will 'touch' the intermediate file.\n      # - The multi-output rule will have an do-nothing recipe.\n      intermediate = \"%s.intermediate\" % (command if command else self.target)\n      self.WriteLn('%s: %s' % (' '.join(outputs), intermediate))\n      self.WriteLn('\\t%s' % '@:');\n      self.WriteLn('%s: %s' % ('.INTERMEDIATE', intermediate))\n      self.WriteLn('%s: %s%s' %\n                   (intermediate, ' '.join(inputs), force_append))\n      actions.insert(0, '$(call do_cmd,touch)')\n\n    if actions:\n      for action in actions:\n        self.WriteLn('\\t%s' % action)\n    self.WriteLn()\n\n\n  def WriteAndroidNdkModuleRule(self, module_name, all_sources, link_deps):\n    \"\"\"Write a set of LOCAL_XXX definitions for Android NDK.\n\n    These variable definitions will be used by Android NDK but do nothing for\n    non-Android applications.\n\n    Arguments:\n      module_name: Android NDK module name, which must be unique among all\n          module names.\n      all_sources: A list of source files (will be filtered by Compilable).\n      link_deps: A list of link dependencies, which must be sorted in\n          the order from dependencies to dependents.\n    \"\"\"\n    if self.type not in ('executable', 'shared_library', 'static_library'):\n      return\n\n    self.WriteLn('# Variable definitions for Android applications')\n    self.WriteLn('include $(CLEAR_VARS)')\n    self.WriteLn('LOCAL_MODULE := ' + module_name)\n    self.WriteLn('LOCAL_CFLAGS := $(CFLAGS_$(BUILDTYPE)) '\n                 '$(DEFS_$(BUILDTYPE)) '\n                 # LOCAL_CFLAGS is applied to both of C and C++.  There is\n                 # no way to specify $(CFLAGS_C_$(BUILDTYPE)) only for C\n                 # sources.\n                 '$(CFLAGS_C_$(BUILDTYPE)) '\n                 # $(INCS_$(BUILDTYPE)) includes the prefix '-I' while\n                 # LOCAL_C_INCLUDES does not expect it.  So put it in\n                 # LOCAL_CFLAGS.\n                 '$(INCS_$(BUILDTYPE))')\n    # LOCAL_CXXFLAGS is obsolete and LOCAL_CPPFLAGS is preferred.\n    self.WriteLn('LOCAL_CPPFLAGS := $(CFLAGS_CC_$(BUILDTYPE))')\n    self.WriteLn('LOCAL_C_INCLUDES :=')\n    self.WriteLn('LOCAL_LDLIBS := $(LDFLAGS_$(BUILDTYPE)) $(LIBS)')\n\n    # Detect the C++ extension.\n    cpp_ext = {'.cc': 0, '.cpp': 0, '.cxx': 0}\n    default_cpp_ext = '.cpp'\n    for filename in all_sources:\n      ext = os.path.splitext(filename)[1]\n      if ext in cpp_ext:\n        cpp_ext[ext] += 1\n        if cpp_ext[ext] > cpp_ext[default_cpp_ext]:\n          default_cpp_ext = ext\n    self.WriteLn('LOCAL_CPP_EXTENSION := ' + default_cpp_ext)\n\n    self.WriteList(map(self.Absolutify, filter(Compilable, all_sources)),\n                   'LOCAL_SRC_FILES')\n\n    # Filter out those which do not match prefix and suffix and produce\n    # the resulting list without prefix and suffix.\n    def DepsToModules(deps, prefix, suffix):\n      modules = []\n      for filepath in deps:\n        filename = os.path.basename(filepath)\n        if filename.startswith(prefix) and filename.endswith(suffix):\n          modules.append(filename[len(prefix):-len(suffix)])\n      return modules\n\n    # Retrieve the default value of 'SHARED_LIB_SUFFIX'\n    params = {'flavor': 'linux'}\n    default_variables = {}\n    CalculateVariables(default_variables, params)\n\n    self.WriteList(\n        DepsToModules(link_deps,\n                      generator_default_variables['SHARED_LIB_PREFIX'],\n                      default_variables['SHARED_LIB_SUFFIX']),\n        'LOCAL_SHARED_LIBRARIES')\n    self.WriteList(\n        DepsToModules(link_deps,\n                      generator_default_variables['STATIC_LIB_PREFIX'],\n                      generator_default_variables['STATIC_LIB_SUFFIX']),\n        'LOCAL_STATIC_LIBRARIES')\n\n    if self.type == 'executable':\n      self.WriteLn('include $(BUILD_EXECUTABLE)')\n    elif self.type == 'shared_library':\n      self.WriteLn('include $(BUILD_SHARED_LIBRARY)')\n    elif self.type == 'static_library':\n      self.WriteLn('include $(BUILD_STATIC_LIBRARY)')\n    self.WriteLn()\n\n\n  def WriteLn(self, text=''):\n    self.fp.write(text + '\\n')\n\n\n  def GetSortedXcodeEnv(self, additional_settings=None):\n    return gyp.xcode_emulation.GetSortedXcodeEnv(\n        self.xcode_settings, \"$(abs_builddir)\",\n        os.path.join(\"$(abs_srcdir)\", self.path), \"$(BUILDTYPE)\",\n        additional_settings)\n\n\n  def GetSortedXcodePostbuildEnv(self):\n    # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n    # TODO(thakis): It would be nice to have some general mechanism instead.\n    strip_save_file = self.xcode_settings.GetPerTargetSetting(\n        'CHROMIUM_STRIP_SAVE_FILE', '')\n    # Even if strip_save_file is empty, explicitly write it. Else a postbuild\n    # might pick up an export from an earlier target.\n    return self.GetSortedXcodeEnv(\n        additional_settings={'CHROMIUM_STRIP_SAVE_FILE': strip_save_file})\n\n\n  def WriteSortedXcodeEnv(self, target, env):\n    for k, v in env:\n      # For\n      #  foo := a\\ b\n      # the escaped space does the right thing. For\n      #  export foo := a\\ b\n      # it does not -- the backslash is written to the env as literal character.\n      # So don't escape spaces in |env[k]|.\n      self.WriteLn('%s: export %s := %s' % (QuoteSpaces(target), k, v))\n\n\n  def Objectify(self, path):\n    \"\"\"Convert a path to its output directory form.\"\"\"\n    if '$(' in path:\n      path = path.replace('$(obj)/', '$(obj).%s/$(TARGET)/' % self.toolset)\n    if not '$(obj)' in path:\n      path = '$(obj).%s/$(TARGET)/%s' % (self.toolset, path)\n    return path\n\n\n  def Pchify(self, path, lang):\n    \"\"\"Convert a prefix header path to its output directory form.\"\"\"\n    path = self.Absolutify(path)\n    if '$(' in path:\n      path = path.replace('$(obj)/', '$(obj).%s/$(TARGET)/pch-%s' %\n                          (self.toolset, lang))\n      return path\n    return '$(obj).%s/$(TARGET)/pch-%s/%s' % (self.toolset, lang, path)\n\n\n  def Absolutify(self, path):\n    \"\"\"Convert a subdirectory-relative path into a base-relative path.\n    Skips over paths that contain variables.\"\"\"\n    if '$(' in path:\n      # Don't call normpath in this case, as it might collapse the\n      # path too aggressively if it features '..'. However it's still\n      # important to strip trailing slashes.\n      return path.rstrip('/')\n    return os.path.normpath(os.path.join(self.path, path))\n\n\n  def ExpandInputRoot(self, template, expansion, dirname):\n    if '%(INPUT_ROOT)s' not in template and '%(INPUT_DIRNAME)s' not in template:\n      return template\n    path = template % {\n        'INPUT_ROOT': expansion,\n        'INPUT_DIRNAME': dirname,\n        }\n    return path\n\n\n  def _InstallableTargetInstallPath(self):\n    \"\"\"Returns the location of the final output for an installable target.\"\"\"\n    # Xcode puts shared_library results into PRODUCT_DIR, and some gyp files\n    # rely on this. Emulate this behavior for mac.\n\n    # XXX(TooTallNate): disabling this code since we don't want this behavior...\n    #if (self.type == 'shared_library' and\n    #    (self.flavor != 'mac' or self.toolset != 'target')):\n    #  # Install all shared libs into a common directory (per toolset) for\n    #  # convenient access with LD_LIBRARY_PATH.\n    #  return '$(builddir)/lib.%s/%s' % (self.toolset, self.alias)\n    return '$(builddir)/' + self.alias\n\n\ndef WriteAutoRegenerationRule(params, root_makefile, makefile_name,\n                              build_files):\n  \"\"\"Write the target to regenerate the Makefile.\"\"\"\n  options = params['options']\n  build_files_args = [gyp.common.RelativePath(filename, options.toplevel_dir)\n                      for filename in params['build_files_arg']]\n\n  gyp_binary = gyp.common.FixIfRelativePath(params['gyp_binary'],\n                                            options.toplevel_dir)\n  if not gyp_binary.startswith(os.sep):\n    gyp_binary = os.path.join('.', gyp_binary)\n\n  root_makefile.write(\n      \"quiet_cmd_regen_makefile = ACTION Regenerating $@\\n\"\n      \"cmd_regen_makefile = cd $(srcdir); %(cmd)s\\n\"\n      \"%(makefile_name)s: %(deps)s\\n\"\n      \"\\t$(call do_cmd,regen_makefile)\\n\\n\" % {\n          'makefile_name': makefile_name,\n          'deps': ' '.join(map(Sourceify, build_files)),\n          'cmd': gyp.common.EncodePOSIXShellList(\n                     [gyp_binary, '-fmake'] +\n                     gyp.RegenerateFlags(options) +\n                     build_files_args)})\n\n\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    arguments = ['make']\n    if options.toplevel_dir and options.toplevel_dir != '.':\n      arguments += '-C', options.toplevel_dir\n    arguments.append('BUILDTYPE=' + config)\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\n\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  default_target = generator_flags.get('default_target', 'all')\n\n  def CalculateMakefilePath(build_file, base_name):\n    \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n    # Paths in gyp files are relative to the .gyp file, but we want\n    # paths relative to the source root for the master makefile.  Grab\n    # the path of the .gyp file as the base to relativize against.\n    # E.g. \"foo/bar\" when we're constructing targets for \"foo/bar/baz.gyp\".\n    base_path = gyp.common.RelativePath(os.path.dirname(build_file),\n                                        options.depth)\n    # We write the file in the base_path directory.\n    output_file = os.path.join(options.depth, base_path, base_name)\n    if options.generator_output:\n      output_file = os.path.join(\n          options.depth, options.generator_output, base_path, base_name)\n    base_path = gyp.common.RelativePath(os.path.dirname(build_file),\n                                        options.toplevel_dir)\n    return base_path, output_file\n\n  # TODO:  search for the first non-'Default' target.  This can go\n  # away when we add verification that all targets have the\n  # necessary configurations.\n  default_configuration = None\n  toolsets = set([target_dicts[target]['toolset'] for target in target_list])\n  for target in target_list:\n    spec = target_dicts[target]\n    if spec['default_configuration'] != 'Default':\n      default_configuration = spec['default_configuration']\n      break\n  if not default_configuration:\n    default_configuration = 'Default'\n\n  srcdir = '.'\n  makefile_name = 'Makefile' + options.suffix\n  makefile_path = os.path.join(options.toplevel_dir, makefile_name)\n  if options.generator_output:\n    global srcdir_prefix\n    makefile_path = os.path.join(\n        options.toplevel_dir, options.generator_output, makefile_name)\n    srcdir = gyp.common.RelativePath(srcdir, options.generator_output)\n    srcdir_prefix = '$(srcdir)/'\n\n  flock_command= 'flock'\n  copy_archive_arguments = '-af'\n  header_params = {\n      'default_target': default_target,\n      'builddir': builddir_name,\n      'default_configuration': default_configuration,\n      'flock': flock_command,\n      'flock_index': 1,\n      'link_commands': LINK_COMMANDS_LINUX,\n      'extra_commands': '',\n      'srcdir': srcdir,\n      'copy_archive_args': copy_archive_arguments,\n    }\n  if flavor == 'mac':\n    flock_command = './gyp-mac-tool flock'\n    header_params.update({\n        'flock': flock_command,\n        'flock_index': 2,\n        'link_commands': LINK_COMMANDS_MAC,\n        'extra_commands': SHARED_HEADER_MAC_COMMANDS,\n    })\n  elif flavor == 'android':\n    header_params.update({\n        'link_commands': LINK_COMMANDS_ANDROID,\n    })\n  elif flavor == 'solaris':\n    header_params.update({\n        'flock': './gyp-flock-tool flock',\n        'flock_index': 2,\n    })\n  elif flavor == 'freebsd':\n    # Note: OpenBSD has sysutils/flock. lockf seems to be FreeBSD specific.\n    header_params.update({\n        'flock': 'lockf',\n    })\n  elif flavor == 'openbsd':\n    copy_archive_arguments = '-pPRf'\n    header_params.update({\n        'copy_archive_args': copy_archive_arguments,\n    })\n  elif flavor == 'aix':\n    copy_archive_arguments = '-pPRf'\n    header_params.update({\n        'copy_archive_args': copy_archive_arguments,\n        'link_commands': LINK_COMMANDS_AIX,\n        'flock': './gyp-flock-tool flock',\n        'flock_index': 2,\n    })\n\n  header_params.update({\n    'CC.target':   GetEnvironFallback(('CC_target', 'CC'), '$(CC)'),\n    'AR.target':   GetEnvironFallback(('AR_target', 'AR'), '$(AR)'),\n    'CXX.target':  GetEnvironFallback(('CXX_target', 'CXX'), '$(CXX)'),\n    'LINK.target': GetEnvironFallback(('LINK_target', 'LINK'), '$(LINK)'),\n    'CC.host':     GetEnvironFallback(('CC_host',), 'gcc'),\n    'AR.host':     GetEnvironFallback(('AR_host',), 'ar'),\n    'CXX.host':    GetEnvironFallback(('CXX_host',), 'g++'),\n    'LINK.host':   GetEnvironFallback(('LINK_host',), '$(CXX.host)'),\n  })\n\n  build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n  make_global_settings_array = data[build_file].get('make_global_settings', [])\n  wrappers = {}\n  for key, value in make_global_settings_array:\n    if key.endswith('_wrapper'):\n      wrappers[key[:-len('_wrapper')]] = '$(abspath %s)' % value\n  make_global_settings = ''\n  for key, value in make_global_settings_array:\n    if re.match('.*_wrapper', key):\n      continue\n    if value[0] != '$':\n      value = '$(abspath %s)' % value\n    wrapper = wrappers.get(key)\n    if wrapper:\n      value = '%s %s' % (wrapper, value)\n      del wrappers[key]\n    if key in ('CC', 'CC.host', 'CXX', 'CXX.host'):\n      make_global_settings += (\n          'ifneq (,$(filter $(origin %s), undefined default))\\n' % key)\n      # Let gyp-time envvars win over global settings.\n      env_key = key.replace('.', '_')  # CC.host -> CC_host\n      if env_key in os.environ:\n        value = os.environ[env_key]\n      make_global_settings += '  %s = %s\\n' % (key, value)\n      make_global_settings += 'endif\\n'\n    else:\n      make_global_settings += '%s ?= %s\\n' % (key, value)\n  # TODO(ukai): define cmd when only wrapper is specified in\n  # make_global_settings.\n\n  header_params['make_global_settings'] = make_global_settings\n\n  gyp.common.EnsureDirExists(makefile_path)\n  root_makefile = open(makefile_path, 'w')\n  root_makefile.write(SHARED_HEADER % header_params)\n  # Currently any versions have the same effect, but in future the behavior\n  # could be different.\n  if android_ndk_version:\n    root_makefile.write(\n        '# Define LOCAL_PATH for build of Android applications.\\n'\n        'LOCAL_PATH := $(call my-dir)\\n'\n        '\\n')\n  for toolset in toolsets:\n    root_makefile.write('TOOLSET := %s\\n' % toolset)\n    WriteRootHeaderSuffixRules(root_makefile)\n\n  # Put build-time support tools next to the root Makefile.\n  dest_path = os.path.dirname(makefile_path)\n  gyp.common.CopyTool(flavor, dest_path)\n\n  # Find the list of targets that derive from the gyp file(s) being built.\n  needed_targets = set()\n  for build_file in params['build_files']:\n    for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n      needed_targets.add(target)\n\n  build_files = set()\n  include_list = set()\n  for qualified_target in target_list:\n    build_file, target, toolset = gyp.common.ParseQualifiedTarget(\n        qualified_target)\n\n    this_make_global_settings = data[build_file].get('make_global_settings', [])\n    assert make_global_settings_array == this_make_global_settings, (\n        \"make_global_settings needs to be the same for all targets. %s vs. %s\" %\n        (this_make_global_settings, make_global_settings))\n\n    build_files.add(gyp.common.RelativePath(build_file, options.toplevel_dir))\n    included_files = data[build_file]['included_files']\n    for included_file in included_files:\n      # The included_files entries are relative to the dir of the build file\n      # that included them, so we have to undo that and then make them relative\n      # to the root dir.\n      relative_include_file = gyp.common.RelativePath(\n          gyp.common.UnrelativePath(included_file, build_file),\n          options.toplevel_dir)\n      abs_include_file = os.path.abspath(relative_include_file)\n      # If the include file is from the ~/.gyp dir, we should use absolute path\n      # so that relocating the src dir doesn't break the path.\n      if (params['home_dot_gyp'] and\n          abs_include_file.startswith(params['home_dot_gyp'])):\n        build_files.add(abs_include_file)\n      else:\n        build_files.add(relative_include_file)\n\n    base_path, output_file = CalculateMakefilePath(build_file,\n        target + '.' + toolset + options.suffix + '.mk')\n\n    spec = target_dicts[qualified_target]\n    configs = spec['configurations']\n\n    if flavor == 'mac':\n      gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)\n\n    writer = MakefileWriter(generator_flags, flavor)\n    writer.Write(qualified_target, base_path, output_file, spec, configs,\n                 part_of_all=qualified_target in needed_targets)\n\n    # Our root_makefile lives at the source root.  Compute the relative path\n    # from there to the output_file for including.\n    mkfile_rel_path = gyp.common.RelativePath(output_file,\n                                              os.path.dirname(makefile_path))\n    include_list.add(mkfile_rel_path)\n\n  # Write out per-gyp (sub-project) Makefiles.\n  depth_rel_path = gyp.common.RelativePath(options.depth, os.getcwd())\n  for build_file in build_files:\n    # The paths in build_files were relativized above, so undo that before\n    # testing against the non-relativized items in target_list and before\n    # calculating the Makefile path.\n    build_file = os.path.join(depth_rel_path, build_file)\n    gyp_targets = [target_dicts[target]['target_name'] for target in target_list\n                   if target.startswith(build_file) and\n                   target in needed_targets]\n    # Only generate Makefiles for gyp files with targets.\n    if not gyp_targets:\n      continue\n    base_path, output_file = CalculateMakefilePath(build_file,\n        os.path.splitext(os.path.basename(build_file))[0] + '.Makefile')\n    makefile_rel_path = gyp.common.RelativePath(os.path.dirname(makefile_path),\n                                                os.path.dirname(output_file))\n    writer.WriteSubMake(output_file, makefile_rel_path, gyp_targets,\n                        builddir_name)\n\n\n  # Write out the sorted list of includes.\n  root_makefile.write('\\n')\n  for include_file in sorted(include_list):\n    # We wrap each .mk include in an if statement so users can tell make to\n    # not load a file by setting NO_LOAD.  The below make code says, only\n    # load the .mk file if the .mk filename doesn't start with a token in\n    # NO_LOAD.\n    root_makefile.write(\n        \"ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\\\\n\"\n        \"    $(findstring $(join ^,$(prefix)),\\\\\\n\"\n        \"                 $(join ^,\" + include_file + \")))),)\\n\")\n    root_makefile.write(\"  include \" + include_file + \"\\n\")\n    root_makefile.write(\"endif\\n\")\n  root_makefile.write('\\n')\n\n  if (not generator_flags.get('standalone')\n      and generator_flags.get('auto_regeneration', True)):\n    WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n\n  root_makefile.write(SHARED_FOOTER)\n\n  root_makefile.close()\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/tools/gyp/pylib/gyp/generator/make.py": "# Copyright (c) 2013 Google Inc. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Notes:\n#\n# This is all roughly based on the Makefile system used by the Linux\n# kernel, but is a non-recursive make -- we put the entire dependency\n# graph in front of make and let it figure it out.\n#\n# The code below generates a separate .mk file for each target, but\n# all are sourced by the top-level Makefile.  This means that all\n# variables in .mk-files clobber one another.  Be careful to use :=\n# where appropriate for immediate evaluation, and similarly to watch\n# that you're not relying on a variable value to last beween different\n# .mk files.\n#\n# TODOs:\n#\n# Global settings and utility functions are currently stuffed in the\n# toplevel Makefile.  It may make sense to generate some .mk files on\n# the side to keep the the files readable.\n\nimport os\nimport re\nimport sys\nimport subprocess\nimport gyp\nimport gyp.common\nimport gyp.xcode_emulation\nfrom gyp.common import GetEnvironFallback\nfrom gyp.common import GypError\n\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'SHARED_INTERMEDIATE_DIR': '$(obj)/gen',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_ROOT': '%(INPUT_ROOT)s',  # This gets expanded by Python.\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',  # This gets expanded by Python.\n  'RULE_INPUT_PATH': '$(abspath $<)',\n  'RULE_INPUT_EXT': '$(suffix $<)',\n  'RULE_INPUT_NAME': '$(notdir $<)',\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n}\n\n# Make supports multiple toolsets\ngenerator_supports_multiple_toolsets = True\n\n# Request sorted dependencies in the order from dependents to dependencies.\ngenerator_wants_sorted_dependencies = False\n\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\n\n\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n\n    # Copy additional generator configuration data from Xcode, which is shared\n    # by the Mac Make generator.\n    import gyp.generator.xcode as xcode_generator\n    global generator_additional_non_configuration_keys\n    generator_additional_non_configuration_keys = getattr(xcode_generator,\n        'generator_additional_non_configuration_keys', [])\n    global generator_additional_path_sections\n    generator_additional_path_sections = getattr(xcode_generator,\n        'generator_additional_path_sections', [])\n    global generator_extra_sources_for_rules\n    generator_extra_sources_for_rules = getattr(xcode_generator,\n        'generator_extra_sources_for_rules', [])\n    COMPILABLE_EXTENSIONS.update({'.m': 'objc', '.mm' : 'objcxx'})\n  else:\n    operating_system = flavor\n    if flavor == 'android':\n      operating_system = 'linux'  # Keep this legacy behavior for now.\n    default_variables.setdefault('OS', operating_system)\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.so')\n    default_variables.setdefault('SHARED_LIB_DIR','$(builddir)/lib.$(TOOLSET)')\n    default_variables.setdefault('LIB_DIR', '$(obj).$(TOOLSET)')\n\n\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  # Android NDK requires a strict link order.\n  if android_ndk_version:\n    global generator_wants_sorted_dependencies\n    generator_wants_sorted_dependencies = True\n\n  output_dir = params['options'].generator_output or \\\n               params['options'].toplevel_dir\n  builddir_name = generator_flags.get('output_dir', 'out')\n  qualified_out_dir = os.path.normpath(os.path.join(\n    output_dir, builddir_name, 'gypfiles'))\n\n  global generator_filelist_paths\n  generator_filelist_paths = {\n    'toplevel': params['options'].toplevel_dir,\n    'qualified_out_dir': qualified_out_dir,\n  }\n\n\n# The .d checking code below uses these functions:\n# wildcard, sort, foreach, shell, wordlist\n# wildcard can handle spaces, the rest can't.\n# Since I could find no way to make foreach work with spaces in filenames\n# correctly, the .d files have spaces replaced with another character. The .d\n# file for\n#     Chromium\\ Framework.framework/foo\n# is for example\n#     out/Release/.deps/out/Release/Chromium?Framework.framework/foo\n# This is the replacement character.\nSPACE_REPLACEMENT = '?'\n\n\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n# outermost module.\n# This means shared_library uses --whole-archive, while loadable_module doesn't.\n# (Note that --whole-archive is incompatible with the --start-group used in\n# normal linking.)\n\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\n\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\n\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\n\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n\n\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\nMAKEFLAGS=-r\n\n# The source directory tree.\nsrcdir := %(srcdir)s\nabs_srcdir := $(abspath $(srcdir))\n\n# The name of the builddir.\nbuilddir_name ?= %(builddir)s\n\n# The V=1 flag on command line makes us verbosely print command lines.\nifdef V\n  quiet=\nelse\n  quiet=quiet_\nendif\n\n# Specify BUILDTYPE=Release on the command line for a release build.\nBUILDTYPE ?= %(default_configuration)s\n\n# Directory all our build output goes into.\n# Note that this must be two directories beneath src/ for unit tests to pass,\n# as they reach into the src/ directory for data with relative paths.\nbuilddir ?= $(builddir_name)/$(BUILDTYPE)\nabs_builddir := $(abspath $(builddir))\ndepsdir := $(builddir)/.deps\n\n# Object output directory.\nobj := $(builddir)/obj\nabs_obj := $(abspath $(obj))\n\n# We build up a list of every single one of the targets so we can slurp in the\n# generated dependency rule Makefiles in one pass.\nall_deps :=\n\n%(make_global_settings)s\n\nCC.target ?= %(CC.target)s\nCFLAGS.target ?= $(CPPFLAGS) $(CFLAGS)\nCXX.target ?= %(CXX.target)s\nCXXFLAGS.target ?= $(CPPFLAGS) $(CXXFLAGS)\nLINK.target ?= %(LINK.target)s\nLDFLAGS.target ?= $(LDFLAGS)\nAR.target ?= $(AR)\n\n# C++ apps need to be linked with g++.\nLINK ?= $(CXX.target)\n\n# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n# to replicate this environment fallback in make as well.\nCC.host ?= %(CC.host)s\nCFLAGS.host ?= $(CPPFLAGS_host) $(CFLAGS_host)\nCXX.host ?= %(CXX.host)s\nCXXFLAGS.host ?= $(CPPFLAGS_host) $(CXXFLAGS_host)\nLINK.host ?= %(LINK.host)s\nLDFLAGS.host ?=\nAR.host ?= %(AR.host)s\n\n# Define a dir function that can handle spaces.\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n# \"leading spaces cannot appear in the text of the first argument as written.\n# These characters can be put into the argument value by variable substitution.\"\nempty :=\nspace := $(empty) $(empty)\n\n# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\nreplace_spaces = $(subst $(space),\"\"\" + SPACE_REPLACEMENT + \"\"\",$1)\nunreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = -MMD -MF $(depfile).raw\n\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n# We want to rewrite\n#   foobar.o: DEP1 DEP2 \\\\\n#               DEP3\n# to\n#   DEP1:\n#   DEP2:\n#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\nr\"\"\"\ndefine fixup_dep\n# The depfile may not exist if the input file didn't have any #includes.\ntouch $(depfile).raw\n# Fixup path as in (1).\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n# Add extra rules as in (2).\n# We remove slashes and replace spaces with new lines;\n# remove blank lines;\n# delete the first line and append a colon to the remaining lines.\nsed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\nendef\n\"\"\"\n\"\"\"\n# Command definitions:\n# - cmd_foo is the actual command to run;\n# - quiet_cmd_foo is the brief-output summary of the command.\n\nquiet_cmd_cc = CC($(TOOLSET)) $@\ncmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\n\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n\n%(link_commands)s\n\"\"\"\n\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n# This allows us to read/write command lines with shell variables (e.g.\n# $LD_LIBRARY_PATH), without triggering make substitution.\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n# positives, where one string reordered its arguments.\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n# We instead substitute each for the empty string into the other, and\n# say they're equal if both substitutions produce the empty string.\n# .d files contain \"\"\" + SPACE_REPLACEMENT + \\\n                   \"\"\" instead of spaces, take that into account.\ncommand_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\\\n                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n\n# Helper that is non-empty when a prerequisite changes.\n# Normally make does this implicitly, but we force rules to always run\n# so we can check their command lines.\n#   $? -- new prerequisites\n#   $| -- order-only dependencies\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n  @E=0;\\\\\n  for p in $(POSTBUILDS); do\\\\\n    eval $$p;\\\\\n    E=$$?;\\\\\n    if [ $$E -ne 0 ]; then\\\\\n      break;\\\\\n    fi;\\\\\n  done;\\\\\n  if [ $$E -ne 0 ]; then\\\\\n    rm -rf \"$@\";\\\\\n    exit $$E;\\\\\n  fi\nendef\n\n# do_cmd: run a command via the above cmd_foo names, if necessary.\n# Should always run for a given target to handle command-line changes.\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n# Note: We intentionally do NOT call dirx for depfile, since it contains \"\"\" + \\\n                                                     SPACE_REPLACEMENT + \"\"\" for\n# spaces already and dirx strips the \"\"\" + SPACE_REPLACEMENT + \\\n                                     \"\"\" characters.\ndefine do_cmd\n$(if $(or $(command_changed),$(prereq_changed)),\n  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n  $(if $(findstring flock,$(word %(flock_index)d,$(cmd_$1))),\n    @$(cmd_$(1))\n    @echo \"  $(quiet_cmd_$(1)): Finished\",\n    @$(cmd_$(1))\n  )\n  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n  @$(if $(2),$(fixup_dep))\n  $(if $(and $(3), $(POSTBUILDS)),\n    $(call do_postbuilds)\n  )\n)\nendef\n\n# Declare the \"%(default_target)s\" target first so it is the default,\n# even though we don't have the deps yet.\n.PHONY: %(default_target)s\n%(default_target)s:\n\n# make looks for ways to re-generate included makefiles, but in our case, we\n# don't have a direct way. Explicitly telling make that it has nothing to do\n# for them makes it go faster.\n%%.d: ;\n\n# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n# do_cmd.\n.PHONY: FORCE_DO_CMD\nFORCE_DO_CMD:\n\n\"\"\")\n\nSHARED_HEADER_MAC_COMMANDS = \"\"\"\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\n\n\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:\n    writer.write(\n        '$(obj).$(TOOLSET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(obj)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n')\n\n\nSHARED_HEADER_SUFFIX_RULES_COMMENT1 = (\"\"\"\\\n# Suffix rules, putting all outputs into $(obj).\n\"\"\")\n\n\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\n\n\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\nifneq ($(d_files),)\n  include $(d_files)\nendif\n\"\"\"\n\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\n\"\"\"\n\n# Maps every compilable file extension to the do_cmd that compiles it.\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',\n  '.S': 'cc',\n}\n\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  for res in (filename.endswith(e) for e in COMPILABLE_EXTENSIONS):\n    if res:\n      return True\n  return False\n\n\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\n\n\ndef Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\n\n\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\n\n\ndef EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')\n\n\ndef EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.\n  return s.replace('#', r'\\#')\n\n\ndef QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"\n  if '\"' in string:\n    string = '\"' + string.replace('\"', '\\\\\"') + '\"'\n  return string\n\n\ndef StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\n\n\nsrcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\n\n\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\n\n\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  \"\"\"\n  if spec.get('type', None) != 'static_library':\n    return\n\n  basenames = {}\n  for source in all_sources:\n    name, ext = os.path.splitext(source)\n    is_compiled_file = ext in [\n        '.c', '.cc', '.cpp', '.cxx', '.m', '.mm', '.s', '.S']\n    if not is_compiled_file:\n      continue\n    basename = os.path.basename(name)  # Don't include extension.\n    basenames.setdefault(basename, []).append(source)\n\n  error = ''\n  for basename, files in basenames.iteritems():\n    if len(files) > 1:\n      error += '  %s: %s\\n' % (basename, ' '.join(files))\n\n  if error:\n    print('static library %s has several files with the same basename:\\n' %\n          spec['target_name'] + error + 'libtool on OS X will generate' +\n          ' warnings for them.')\n    raise GypError('Duplicate basenames in sources section, see list above')\n\n\n# Map from qualified target to path to output.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\n\n\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}\n    self.suffix_rules_objdir2 = {}\n\n    # Generate suffix rules for all compilable extensions.\n    for ext in COMPILABLE_EXTENSIONS.keys():\n      # Suffix rules for source folder.\n      self.suffix_rules_srcdir.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n\n      # Suffix rules for generated source files.\n      self.suffix_rules_objdir1.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n      self.suffix_rules_objdir2.update({ext: (\"\"\"\\\n$(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD\n\t@$(call do_cmd,%s,1)\n\"\"\" % (ext, COMPILABLE_EXTENSIONS[ext]))})\n\n\n  def Write(self, qualified_target, base_path, output_filename, spec, configs,\n            part_of_all):\n    \"\"\"The main entry point: writes a .mk file for a single target.\n\n    Arguments:\n      qualified_target: target we're generating\n      base_path: path relative to source root we're building in, used to resolve\n                 target-relative paths\n      output_filename: output .mk file name to write\n      spec, configs: gyp info\n      part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    gyp.common.EnsureDirExists(output_filename)\n\n    self.fp = open(output_filename, 'w')\n\n    self.fp.write(header)\n\n    self.qualified_target = qualified_target\n    self.path = base_path\n    self.target = spec['target_name']\n    self.type = spec['type']\n    self.toolset = spec['toolset']\n\n    self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)\n    if self.flavor == 'mac':\n      self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n    else:\n      self.xcode_settings = None\n\n    deps, link_deps = self.ComputeDeps(spec)\n\n    # Some of the generation below can add extra output, sources, or\n    # link dependencies.  All of the out params of the functions that\n    # follow use names like extra_foo.\n    extra_outputs = []\n    extra_sources = []\n    extra_link_deps = []\n    extra_mac_bundle_resources = []\n    mac_bundle_deps = []\n\n    if self.is_mac_bundle:\n      self.output = self.ComputeMacBundleOutput(spec)\n      self.output_binary = self.ComputeMacBundleBinaryOutput(spec)\n    else:\n      self.output = self.output_binary = self.ComputeOutput(spec)\n\n    self.is_standalone_static_library = bool(\n        spec.get('standalone_static_library', 0))\n    self._INSTALLABLE_TARGETS = ('executable', 'loadable_module',\n                                 'shared_library')\n    if (self.is_standalone_static_library or\n        self.type in self._INSTALLABLE_TARGETS):\n      self.alias = os.path.basename(self.output)\n      install_path = self._InstallableTargetInstallPath()\n    else:\n      self.alias = self.output\n      install_path = self.output\n\n    self.WriteLn(\"TOOLSET := \" + self.toolset)\n    self.WriteLn(\"TARGET := \" + self.target)\n\n    # Actions must come first, since they can generate more OBJs for use below.\n    if 'actions' in spec:\n      self.WriteActions(spec['actions'], extra_sources, extra_outputs,\n                        extra_mac_bundle_resources, part_of_all)\n\n    # Rules must be early like actions.\n    if 'rules' in spec:\n      self.WriteRules(spec['rules'], extra_sources, extra_outputs,\n                      extra_mac_bundle_resources, part_of_all)\n\n    if 'copies' in spec:\n      self.WriteCopies(spec['copies'], extra_outputs, part_of_all)\n\n    # Bundle resources.\n    if self.is_mac_bundle:\n      all_mac_bundle_resources = (\n          spec.get('mac_bundle_resources', []) + extra_mac_bundle_resources)\n      self.WriteMacBundleResources(all_mac_bundle_resources, mac_bundle_deps)\n      self.WriteMacInfoPlist(mac_bundle_deps)\n\n    # Sources.\n    all_sources = spec.get('sources', []) + extra_sources\n    if all_sources:\n      if self.flavor == 'mac':\n        # libtool on OS X generates warnings for duplicate basenames in the same\n        # target.\n        _ValidateSourcesForOSX(spec, all_sources)\n      self.WriteSources(\n          configs, deps, all_sources, extra_outputs,\n          extra_link_deps, part_of_all,\n          gyp.xcode_emulation.MacPrefixHeader(\n              self.xcode_settings, lambda p: Sourceify(self.Absolutify(p)),\n              self.Pchify))\n      sources = filter(Compilable, all_sources)\n      if sources:\n        self.WriteLn(SHARED_HEADER_SUFFIX_RULES_COMMENT1)\n        extensions = set([os.path.splitext(s)[1] for s in sources])\n        for ext in extensions:\n          if ext in self.suffix_rules_srcdir:\n            self.WriteLn(self.suffix_rules_srcdir[ext])\n        self.WriteLn(SHARED_HEADER_SUFFIX_RULES_COMMENT2)\n        for ext in extensions:\n          if ext in self.suffix_rules_objdir1:\n            self.WriteLn(self.suffix_rules_objdir1[ext])\n        for ext in extensions:\n          if ext in self.suffix_rules_objdir2:\n            self.WriteLn(self.suffix_rules_objdir2[ext])\n        self.WriteLn('# End of this set of suffix rules')\n\n        # Add dependency from bundle to bundle binary.\n        if self.is_mac_bundle:\n          mac_bundle_deps.append(self.output_binary)\n\n    self.WriteTarget(spec, configs, deps, extra_link_deps + link_deps,\n                     mac_bundle_deps, extra_outputs, part_of_all)\n\n    # Update global list of target outputs, used in dependency tracking.\n    target_outputs[qualified_target] = install_path\n\n    # Update global list of link dependencies.\n    if self.type in ('static_library', 'shared_library'):\n      target_link_deps[qualified_target] = self.output_binary\n\n    # Currently any versions have the same effect, but in future the behavior\n    # could be different.\n    if self.generator_flags.get('android_ndk_version', None):\n      self.WriteAndroidNdkModuleRule(self.target, all_sources, link_deps)\n\n    self.fp.close()\n\n\n  def WriteSubMake(self, output_filename, makefile_path, targets, build_dir):\n    \"\"\"Write a \"sub-project\" Makefile.\n\n    This is a small, wrapper Makefile that calls the top-level Makefile to build\n    the targets from a single gyp file (i.e. a sub-project).\n\n    Arguments:\n      output_filename: sub-project Makefile name to write\n      makefile_path: path to the top-level Makefile\n      targets: list of \"all\" targets for this sub-project\n      build_dir: build output directory, relative to the sub-project\n    \"\"\"\n    gyp.common.EnsureDirExists(output_filename)\n    self.fp = open(output_filename, 'w')\n    self.fp.write(header)\n    # For consistency with other builders, put sub-project build output in the\n    # sub-project dir (see test/subdirectory/gyptest-subdir-all.py).\n    self.WriteLn('export builddir_name ?= %s' %\n                 os.path.join(os.path.dirname(output_filename), build_dir))\n    self.WriteLn('.PHONY: all')\n    self.WriteLn('all:')\n    if makefile_path:\n      makefile_path = ' -C ' + makefile_path\n    self.WriteLn('\\t$(MAKE)%s %s' % (makefile_path, ' '.join(targets)))\n    self.fp.close()\n\n\n  def WriteActions(self, actions, extra_sources, extra_outputs,\n                   extra_mac_bundle_resources, part_of_all):\n    \"\"\"Write Makefile code for any 'actions' from the gyp input.\n\n    extra_sources: a list that will be filled in with newly generated source\n                   files, if any\n    extra_outputs: a list that will be filled in with any outputs of these\n                   actions (used to make other pieces dependent on these\n                   actions)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    env = self.GetSortedXcodeEnv()\n    for action in actions:\n      name = StringToMakefileVariable('%s_%s' % (self.qualified_target,\n                                                 action['action_name']))\n      self.WriteLn('### Rules for action \"%s\":' % action['action_name'])\n      inputs = action['inputs']\n      outputs = action['outputs']\n\n      # Build up a list of outputs.\n      # Collect the output dirs we'll need.\n      dirs = set()\n      for out in outputs:\n        dir = os.path.split(out)[0]\n        if dir:\n          dirs.add(dir)\n      if int(action.get('process_outputs_as_sources', False)):\n        extra_sources += outputs\n      if int(action.get('process_outputs_as_mac_bundle_resources', False)):\n        extra_mac_bundle_resources += outputs\n\n      # Write the actual command.\n      action_commands = action['action']\n      if self.flavor == 'mac':\n        action_commands = [gyp.xcode_emulation.ExpandEnvVars(command, env)\n                          for command in action_commands]\n      command = gyp.common.EncodePOSIXShellList(action_commands)\n      if 'message' in action:\n        self.WriteLn('quiet_cmd_%s = ACTION %s $@' % (name, action['message']))\n      else:\n        self.WriteLn('quiet_cmd_%s = ACTION %s $@' % (name, name))\n      if len(dirs) > 0:\n        command = 'mkdir -p %s' % ' '.join(dirs) + '; ' + command\n\n      cd_action = 'cd %s; ' % Sourceify(self.path or '.')\n\n      # command and cd_action get written to a toplevel variable called\n      # cmd_foo. Toplevel variables can't handle things that change per\n      # makefile like $(TARGET), so hardcode the target.\n      command = command.replace('$(TARGET)', self.target)\n      cd_action = cd_action.replace('$(TARGET)', self.target)\n\n      # Set LD_LIBRARY_PATH in case the action runs an executable from this\n      # build which links to shared libs from this build.\n      # actions run on the host, so they should in theory only use host\n      # libraries, but until everything is made cross-compile safe, also use\n      # target libraries.\n      # TODO(piman): when everything is cross-compile safe, remove lib.target\n      self.WriteLn('cmd_%s = LD_LIBRARY_PATH=$(builddir)/lib.host:'\n                   '$(builddir)/lib.target:$$LD_LIBRARY_PATH; '\n                   'export LD_LIBRARY_PATH; '\n                   '%s%s'\n                   % (name, cd_action, command))\n      self.WriteLn()\n      outputs = map(self.Absolutify, outputs)\n      # The makefile rules are all relative to the top dir, but the gyp actions\n      # are defined relative to their containing dir.  This replaces the obj\n      # variable for the action rule with an absolute version so that the output\n      # goes in the right place.\n      # Only write the 'obj' and 'builddir' rules for the \"primary\" output (:1);\n      # it's superfluous for the \"extra outputs\", and this avoids accidentally\n      # writing duplicate dummy rules for those outputs.\n      # Same for environment.\n      self.WriteLn(\"%s: obj := $(abs_obj)\" % QuoteSpaces(outputs[0]))\n      self.WriteLn(\"%s: builddir := $(abs_builddir)\" % QuoteSpaces(outputs[0]))\n      self.WriteSortedXcodeEnv(outputs[0], self.GetSortedXcodeEnv())\n\n      for input in inputs:\n        assert ' ' not in input, (\n            \"Spaces in action input filenames not supported (%s)\"  % input)\n      for output in outputs:\n        assert ' ' not in output, (\n            \"Spaces in action output filenames not supported (%s)\"  % output)\n\n      # See the comment in WriteCopies about expanding env vars.\n      outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n      inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n      self.WriteDoCmd(outputs, map(Sourceify, map(self.Absolutify, inputs)),\n                      part_of_all=part_of_all, command=name)\n\n      # Stuff the outputs in a variable so we can refer to them later.\n      outputs_variable = 'action_%s_outputs' % name\n      self.WriteLn('%s := %s' % (outputs_variable, ' '.join(outputs)))\n      extra_outputs.append('$(%s)' % outputs_variable)\n      self.WriteLn()\n\n    self.WriteLn()\n\n\n  def WriteRules(self, rules, extra_sources, extra_outputs,\n                 extra_mac_bundle_resources, part_of_all):\n    \"\"\"Write Makefile code for any 'rules' from the gyp input.\n\n    extra_sources: a list that will be filled in with newly generated source\n                   files, if any\n    extra_outputs: a list that will be filled in with any outputs of these\n                   rules (used to make other pieces dependent on these rules)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    env = self.GetSortedXcodeEnv()\n    for rule in rules:\n      name = StringToMakefileVariable('%s_%s' % (self.qualified_target,\n                                                 rule['rule_name']))\n      count = 0\n      self.WriteLn('### Generated for rule %s:' % name)\n\n      all_outputs = []\n\n      for rule_source in rule.get('rule_sources', []):\n        dirs = set()\n        (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n        (rule_source_root, rule_source_ext) = \\\n            os.path.splitext(rule_source_basename)\n\n        outputs = [self.ExpandInputRoot(out, rule_source_root,\n                                        rule_source_dirname)\n                   for out in rule['outputs']]\n\n        for out in outputs:\n          dir = os.path.dirname(out)\n          if dir:\n            dirs.add(dir)\n        if int(rule.get('process_outputs_as_sources', False)):\n          extra_sources += outputs\n        if int(rule.get('process_outputs_as_mac_bundle_resources', False)):\n          extra_mac_bundle_resources += outputs\n        inputs = map(Sourceify, map(self.Absolutify, [rule_source] +\n                                    rule.get('inputs', [])))\n        actions = ['$(call do_cmd,%s_%d)' % (name, count)]\n\n        if name == 'resources_grit':\n          # HACK: This is ugly.  Grit intentionally doesn't touch the\n          # timestamp of its output file when the file doesn't change,\n          # which is fine in hash-based dependency systems like scons\n          # and forge, but not kosher in the make world.  After some\n          # discussion, hacking around it here seems like the least\n          # amount of pain.\n          actions += ['@touch --no-create $@']\n\n        # See the comment in WriteCopies about expanding env vars.\n        outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n        inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n        outputs = map(self.Absolutify, outputs)\n        all_outputs += outputs\n        # Only write the 'obj' and 'builddir' rules for the \"primary\" output\n        # (:1); it's superfluous for the \"extra outputs\", and this avoids\n        # accidentally writing duplicate dummy rules for those outputs.\n        self.WriteLn('%s: obj := $(abs_obj)' % outputs[0])\n        self.WriteLn('%s: builddir := $(abs_builddir)' % outputs[0])\n        self.WriteMakeRule(outputs, inputs, actions,\n                           command=\"%s_%d\" % (name, count))\n        # Spaces in rule filenames are not supported, but rule variables have\n        # spaces in them (e.g. RULE_INPUT_PATH expands to '$(abspath $<)').\n        # The spaces within the variables are valid, so remove the variables\n        # before checking.\n        variables_with_spaces = re.compile(r'\\$\\([^ ]* \\$<\\)')\n        for output in outputs:\n          output = re.sub(variables_with_spaces, '', output)\n          assert ' ' not in output, (\n              \"Spaces in rule filenames not yet supported (%s)\"  % output)\n        self.WriteLn('all_deps += %s' % ' '.join(outputs))\n\n        action = [self.ExpandInputRoot(ac, rule_source_root,\n                                       rule_source_dirname)\n                  for ac in rule['action']]\n        mkdirs = ''\n        if len(dirs) > 0:\n          mkdirs = 'mkdir -p %s; ' % ' '.join(dirs)\n        cd_action = 'cd %s; ' % Sourceify(self.path or '.')\n\n        # action, cd_action, and mkdirs get written to a toplevel variable\n        # called cmd_foo. Toplevel variables can't handle things that change\n        # per makefile like $(TARGET), so hardcode the target.\n        if self.flavor == 'mac':\n          action = [gyp.xcode_emulation.ExpandEnvVars(command, env)\n                    for command in action]\n        action = gyp.common.EncodePOSIXShellList(action)\n        action = action.replace('$(TARGET)', self.target)\n        cd_action = cd_action.replace('$(TARGET)', self.target)\n        mkdirs = mkdirs.replace('$(TARGET)', self.target)\n\n        # Set LD_LIBRARY_PATH in case the rule runs an executable from this\n        # build which links to shared libs from this build.\n        # rules run on the host, so they should in theory only use host\n        # libraries, but until everything is made cross-compile safe, also use\n        # target libraries.\n        # TODO(piman): when everything is cross-compile safe, remove lib.target\n        self.WriteLn(\n            \"cmd_%(name)s_%(count)d = LD_LIBRARY_PATH=\"\n              \"$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; \"\n              \"export LD_LIBRARY_PATH; \"\n              \"%(cd_action)s%(mkdirs)s%(action)s\" % {\n          'action': action,\n          'cd_action': cd_action,\n          'count': count,\n          'mkdirs': mkdirs,\n          'name': name,\n        })\n        self.WriteLn(\n            'quiet_cmd_%(name)s_%(count)d = RULE %(name)s_%(count)d $@' % {\n          'count': count,\n          'name': name,\n        })\n        self.WriteLn()\n        count += 1\n\n      outputs_variable = 'rule_%s_outputs' % name\n      self.WriteList(all_outputs, outputs_variable)\n      extra_outputs.append('$(%s)' % outputs_variable)\n\n      self.WriteLn('### Finished generating for rule: %s' % name)\n      self.WriteLn()\n    self.WriteLn('### Finished generating for all rules')\n    self.WriteLn('')\n\n\n  def WriteCopies(self, copies, extra_outputs, part_of_all):\n    \"\"\"Write Makefile code for any 'copies' from the gyp input.\n\n    extra_outputs: a list that will be filled in with any outputs of this action\n                   (used to make other pieces dependent on this action)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n    self.WriteLn('### Generated for copy rule.')\n\n    variable = StringToMakefileVariable(self.qualified_target + '_copies')\n    outputs = []\n    for copy in copies:\n      for path in copy['files']:\n        # Absolutify() may call normpath, and will strip trailing slashes.\n        path = Sourceify(self.Absolutify(path))\n        filename = os.path.split(path)[1]\n        output = Sourceify(self.Absolutify(os.path.join(copy['destination'],\n                                                        filename)))\n\n        # If the output path has variables in it, which happens in practice for\n        # 'copies', writing the environment as target-local doesn't work,\n        # because the variables are already needed for the target name.\n        # Copying the environment variables into global make variables doesn't\n        # work either, because then the .d files will potentially contain spaces\n        # after variable expansion, and .d file handling cannot handle spaces.\n        # As a workaround, manually expand variables at gyp time. Since 'copies'\n        # can't run scripts, there's no need to write the env then.\n        # WriteDoCmd() will escape spaces for .d files.\n        env = self.GetSortedXcodeEnv()\n        output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n        path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n        self.WriteDoCmd([output], [path], 'copy', part_of_all)\n        outputs.append(output)\n    self.WriteLn('%s = %s' % (variable, ' '.join(map(QuoteSpaces, outputs))))\n    extra_outputs.append('$(%s)' % variable)\n    self.WriteLn()\n\n\n  def WriteMacBundleResources(self, resources, bundle_deps):\n    \"\"\"Writes Makefile code for 'mac_bundle_resources'.\"\"\"\n    self.WriteLn('### Generated for mac_bundle_resources')\n\n    for output, res in gyp.xcode_emulation.GetMacBundleResources(\n        generator_default_variables['PRODUCT_DIR'], self.xcode_settings,\n        map(Sourceify, map(self.Absolutify, resources))):\n      _, ext = os.path.splitext(output)\n      if ext != '.xcassets':\n        # Make does not supports '.xcassets' emulation.\n        self.WriteDoCmd([output], [res], 'mac_tool,,,copy-bundle-resource',\n                        part_of_all=True)\n        bundle_deps.append(output)\n\n\n  def WriteMacInfoPlist(self, bundle_deps):\n    \"\"\"Write Makefile code for bundle Info.plist files.\"\"\"\n    info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n        generator_default_variables['PRODUCT_DIR'], self.xcode_settings,\n        lambda p: Sourceify(self.Absolutify(p)))\n    if not info_plist:\n      return\n    if defines:\n      # Create an intermediate file to store preprocessed results.\n      intermediate_plist = ('$(obj).$(TOOLSET)/$(TARGET)/' +\n          os.path.basename(info_plist))\n      self.WriteList(defines, intermediate_plist + ': INFOPLIST_DEFINES', '-D',\n          quoter=EscapeCppDefine)\n      self.WriteMakeRule([intermediate_plist], [info_plist],\n          ['$(call do_cmd,infoplist)',\n           # \"Convert\" the plist so that any weird whitespace changes from the\n           # preprocessor do not affect the XML parser in mac_tool.\n           '@plutil -convert xml1 $@ $@'])\n      info_plist = intermediate_plist\n    # plists can contain envvars and substitute them into the file.\n    self.WriteSortedXcodeEnv(\n        out, self.GetSortedXcodeEnv(additional_settings=extra_env))\n    self.WriteDoCmd([out], [info_plist], 'mac_tool,,,copy-info-plist',\n                    part_of_all=True)\n    bundle_deps.append(out)\n\n\n  def WriteSources(self, configs, deps, sources,\n                   extra_outputs, extra_link_deps,\n                   part_of_all, precompiled_header):\n    \"\"\"Write Makefile code for any 'sources' from the gyp input.\n    These are source files necessary to build the current target.\n\n    configs, deps, sources: input from gyp.\n    extra_outputs: a list of extra outputs this action should be dependent on;\n                   used to serialize action/rules before compilation\n    extra_link_deps: a list that will be filled in with any outputs of\n                     compilation (to be used in link lines)\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n\n    # Write configuration-specific variables for CFLAGS, etc.\n    for configname in sorted(configs.keys()):\n      config = configs[configname]\n      self.WriteList(config.get('defines'), 'DEFS_%s' % configname, prefix='-D',\n          quoter=EscapeCppDefine)\n\n      if self.flavor == 'mac':\n        cflags = self.xcode_settings.GetCflags(configname)\n        cflags_c = self.xcode_settings.GetCflagsC(configname)\n        cflags_cc = self.xcode_settings.GetCflagsCC(configname)\n        cflags_objc = self.xcode_settings.GetCflagsObjC(configname)\n        cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n      else:\n        cflags = config.get('cflags')\n        cflags_c = config.get('cflags_c')\n        cflags_cc = config.get('cflags_cc')\n\n      self.WriteLn(\"# Flags passed to all source files.\");\n      self.WriteList(cflags, 'CFLAGS_%s' % configname)\n      self.WriteLn(\"# Flags passed to only C files.\");\n      self.WriteList(cflags_c, 'CFLAGS_C_%s' % configname)\n      self.WriteLn(\"# Flags passed to only C++ files.\");\n      self.WriteList(cflags_cc, 'CFLAGS_CC_%s' % configname)\n      if self.flavor == 'mac':\n        self.WriteLn(\"# Flags passed to only ObjC files.\");\n        self.WriteList(cflags_objc, 'CFLAGS_OBJC_%s' % configname)\n        self.WriteLn(\"# Flags passed to only ObjC++ files.\");\n        self.WriteList(cflags_objcc, 'CFLAGS_OBJCC_%s' % configname)\n      includes = config.get('include_dirs')\n      if includes:\n        includes = map(Sourceify, map(self.Absolutify, includes))\n      self.WriteList(includes, 'INCS_%s' % configname, prefix='-I')\n\n    compilable = filter(Compilable, sources)\n    objs = map(self.Objectify, map(self.Absolutify, map(Target, compilable)))\n    self.WriteList(objs, 'OBJS')\n\n    for obj in objs:\n      assert ' ' not in obj, (\n          \"Spaces in object filenames not supported (%s)\"  % obj)\n    self.WriteLn('# Add to the list of files we specially track '\n                 'dependencies for.')\n    self.WriteLn('all_deps += $(OBJS)')\n    self.WriteLn()\n\n    # Make sure our dependencies are built first.\n    if deps:\n      self.WriteMakeRule(['$(OBJS)'], deps,\n                         comment = 'Make sure our dependencies are built '\n                                   'before any of us.',\n                         order_only = True)\n\n    # Make sure the actions and rules run first.\n    # If they generate any extra headers etc., the per-.o file dep tracking\n    # will catch the proper rebuilds, so order only is still ok here.\n    if extra_outputs:\n      self.WriteMakeRule(['$(OBJS)'], extra_outputs,\n                         comment = 'Make sure our actions/rules run '\n                                   'before any of us.',\n                         order_only = True)\n\n    pchdeps = precompiled_header.GetObjDependencies(compilable, objs )\n    if pchdeps:\n      self.WriteLn('# Dependencies from obj files to their precompiled headers')\n      for source, obj, gch in pchdeps:\n        self.WriteLn('%s: %s' % (obj, gch))\n      self.WriteLn('# End precompiled header dependencies')\n\n    if objs:\n      extra_link_deps.append('$(OBJS)')\n      self.WriteLn(\"\"\"\\\n# CFLAGS et al overrides must be target-local.\n# See \"Target-specific Variable Values\" in the GNU Make manual.\"\"\")\n      self.WriteLn(\"$(OBJS): TOOLSET := $(TOOLSET)\")\n      self.WriteLn(\"$(OBJS): GYP_CFLAGS := \"\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"%s \" % precompiled_header.GetInclude('c') +\n                   \"$(CFLAGS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_C_$(BUILDTYPE))\")\n      self.WriteLn(\"$(OBJS): GYP_CXXFLAGS := \"\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"%s \" % precompiled_header.GetInclude('cc') +\n                   \"$(CFLAGS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_CC_$(BUILDTYPE))\")\n      if self.flavor == 'mac':\n        self.WriteLn(\"$(OBJS): GYP_OBJCFLAGS := \"\n                     \"$(DEFS_$(BUILDTYPE)) \"\n                     \"$(INCS_$(BUILDTYPE)) \"\n                     \"%s \" % precompiled_header.GetInclude('m') +\n                     \"$(CFLAGS_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_C_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_OBJC_$(BUILDTYPE))\")\n        self.WriteLn(\"$(OBJS): GYP_OBJCXXFLAGS := \"\n                     \"$(DEFS_$(BUILDTYPE)) \"\n                     \"$(INCS_$(BUILDTYPE)) \"\n                     \"%s \" % precompiled_header.GetInclude('mm') +\n                     \"$(CFLAGS_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_CC_$(BUILDTYPE)) \"\n                     \"$(CFLAGS_OBJCC_$(BUILDTYPE))\")\n\n    self.WritePchTargets(precompiled_header.GetPchBuildCommands())\n\n    # If there are any object files in our input file list, link them into our\n    # output.\n    extra_link_deps += filter(Linkable, sources)\n\n    self.WriteLn()\n\n  def WritePchTargets(self, pch_commands):\n    \"\"\"Writes make rules to compile prefix headers.\"\"\"\n    if not pch_commands:\n      return\n\n    for gch, lang_flag, lang, input in pch_commands:\n      extra_flags = {\n        'c': '$(CFLAGS_C_$(BUILDTYPE))',\n        'cc': '$(CFLAGS_CC_$(BUILDTYPE))',\n        'm': '$(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))',\n        'mm': '$(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))',\n      }[lang]\n      var_name = {\n        'c': 'GYP_PCH_CFLAGS',\n        'cc': 'GYP_PCH_CXXFLAGS',\n        'm': 'GYP_PCH_OBJCFLAGS',\n        'mm': 'GYP_PCH_OBJCXXFLAGS',\n      }[lang]\n      self.WriteLn(\"%s: %s := %s \" % (gch, var_name, lang_flag) +\n                   \"$(DEFS_$(BUILDTYPE)) \"\n                   \"$(INCS_$(BUILDTYPE)) \"\n                   \"$(CFLAGS_$(BUILDTYPE)) \" +\n                   extra_flags)\n\n      self.WriteLn('%s: %s FORCE_DO_CMD' % (gch, input))\n      self.WriteLn('\\t@$(call do_cmd,pch_%s,1)' % lang)\n      self.WriteLn('')\n      assert ' ' not in gch, (\n          \"Spaces in gch filenames not supported (%s)\"  % gch)\n      self.WriteLn('all_deps += %s' % gch)\n      self.WriteLn('')\n\n\n  def ComputeOutputBasename(self, spec):\n    \"\"\"Return the 'output basename' of a gyp spec.\n\n    E.g., the loadable module 'foobar' in directory 'baz' will produce\n      'libfoobar.so'\n    \"\"\"\n    assert not self.is_mac_bundle\n\n    if self.flavor == 'mac' and self.type in (\n        'static_library', 'executable', 'shared_library', 'loadable_module'):\n      return self.xcode_settings.GetExecutablePath()\n\n    target = spec['target_name']\n    target_prefix = ''\n    target_ext = ''\n    if self.type == 'static_library':\n      if target[:3] == 'lib':\n        target = target[3:]\n      target_prefix = 'lib'\n      target_ext = '.a'\n    elif self.type in ('loadable_module', 'shared_library'):\n      if target[:3] == 'lib':\n        target = target[3:]\n      target_prefix = 'lib'\n      target_ext = '.so'\n    elif self.type == 'none':\n      target = '%s.stamp' % target\n    elif self.type != 'executable':\n      print (\"ERROR: What output file should be generated?\",\n             \"type\", self.type, \"target\", target)\n\n    target_prefix = spec.get('product_prefix', target_prefix)\n    target = spec.get('product_name', target)\n    product_ext = spec.get('product_extension')\n    if product_ext:\n      target_ext = '.' + product_ext\n\n    return target_prefix + target + target_ext\n\n\n  def _InstallImmediately(self):\n    return self.toolset == 'target' and self.flavor == 'mac' and self.type in (\n          'static_library', 'executable', 'shared_library', 'loadable_module')\n\n\n  def ComputeOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) of a gyp spec.\n\n    E.g., the loadable module 'foobar' in directory 'baz' will produce\n      '$(obj)/baz/libfoobar.so'\n    \"\"\"\n    assert not self.is_mac_bundle\n\n    path = os.path.join('$(obj).' + self.toolset, self.path)\n    if self.type == 'executable' or self._InstallImmediately():\n      path = '$(builddir)'\n    path = spec.get('product_dir', path)\n    return os.path.join(path, self.ComputeOutputBasename(spec))\n\n\n  def ComputeMacBundleOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) to a bundle output directory.\"\"\"\n    assert self.is_mac_bundle\n    path = generator_default_variables['PRODUCT_DIR']\n    return os.path.join(path, self.xcode_settings.GetWrapperName())\n\n\n  def ComputeMacBundleBinaryOutput(self, spec):\n    \"\"\"Return the 'output' (full output path) to the binary in a bundle.\"\"\"\n    path = generator_default_variables['PRODUCT_DIR']\n    return os.path.join(path, self.xcode_settings.GetExecutablePath())\n\n\n  def ComputeDeps(self, spec):\n    \"\"\"Compute the dependencies of a gyp spec.\n\n    Returns a tuple (deps, link_deps), where each is a list of\n    filenames that will need to be put in front of make for either\n    building (deps) or linking (link_deps).\n    \"\"\"\n    deps = []\n    link_deps = []\n    if 'dependencies' in spec:\n      deps.extend([target_outputs[dep] for dep in spec['dependencies']\n                   if target_outputs[dep]])\n      for dep in spec['dependencies']:\n        if dep in target_link_deps:\n          link_deps.append(target_link_deps[dep])\n      deps.extend(link_deps)\n      # TODO: It seems we need to transitively link in libraries (e.g. -lfoo)?\n      # This hack makes it work:\n      # link_deps.extend(spec.get('libraries', []))\n    return (gyp.common.uniquer(deps), gyp.common.uniquer(link_deps))\n\n\n  def WriteDependencyOnExtraOutputs(self, target, extra_outputs):\n    self.WriteMakeRule([self.output_binary], extra_outputs,\n                       comment = 'Build our special outputs first.',\n                       order_only = True)\n\n\n  def WriteTarget(self, spec, configs, deps, link_deps, bundle_deps,\n                  extra_outputs, part_of_all):\n    \"\"\"Write Makefile code to produce the final target of the gyp spec.\n\n    spec, configs: input from gyp.\n    deps, link_deps: dependency lists; see ComputeDeps()\n    extra_outputs: any extra outputs that our target should depend on\n    part_of_all: flag indicating this target is part of 'all'\n    \"\"\"\n\n    self.WriteLn('### Rules for final target.')\n\n    if extra_outputs:\n      self.WriteDependencyOnExtraOutputs(self.output_binary, extra_outputs)\n      self.WriteMakeRule(extra_outputs, deps,\n                         comment=('Preserve order dependency of '\n                                  'special output on deps.'),\n                         order_only = True)\n\n    target_postbuilds = {}\n    if self.type != 'none':\n      for configname in sorted(configs.keys()):\n        config = configs[configname]\n        if self.flavor == 'mac':\n          ldflags = self.xcode_settings.GetLdflags(configname,\n              generator_default_variables['PRODUCT_DIR'],\n              lambda p: Sourceify(self.Absolutify(p)))\n\n          # TARGET_POSTBUILDS_$(BUILDTYPE) is added to postbuilds later on.\n          gyp_to_build = gyp.common.InvertRelativePath(self.path)\n          target_postbuild = self.xcode_settings.AddImplicitPostbuilds(\n              configname,\n              QuoteSpaces(os.path.normpath(os.path.join(gyp_to_build,\n                                                        self.output))),\n              QuoteSpaces(os.path.normpath(os.path.join(gyp_to_build,\n                                                        self.output_binary))))\n          if target_postbuild:\n            target_postbuilds[configname] = target_postbuild\n        else:\n          ldflags = config.get('ldflags', [])\n          # Compute an rpath for this output if needed.\n          if any(dep.endswith('.so') or '.so.' in dep for dep in deps):\n            # We want to get the literal string \"$ORIGIN\" into the link command,\n            # so we need lots of escaping.\n            ldflags.append(r'-Wl,-rpath=\\$$ORIGIN/lib.%s/' % self.toolset)\n            ldflags.append(r'-Wl,-rpath-link=\\$(builddir)/lib.%s/' %\n                           self.toolset)\n        library_dirs = config.get('library_dirs', [])\n        ldflags += [('-L%s' % library_dir) for library_dir in library_dirs]\n        self.WriteList(ldflags, 'LDFLAGS_%s' % configname)\n        if self.flavor == 'mac':\n          self.WriteList(self.xcode_settings.GetLibtoolflags(configname),\n                         'LIBTOOLFLAGS_%s' % configname)\n      libraries = spec.get('libraries')\n      if libraries:\n        # Remove duplicate entries\n        libraries = gyp.common.uniquer(libraries)\n        if self.flavor == 'mac':\n          libraries = self.xcode_settings.AdjustLibraries(libraries)\n      self.WriteList(libraries, 'LIBS')\n      self.WriteLn('%s: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))' %\n          QuoteSpaces(self.output_binary))\n      self.WriteLn('%s: LIBS := $(LIBS)' % QuoteSpaces(self.output_binary))\n\n      if self.flavor == 'mac':\n        self.WriteLn('%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))' %\n            QuoteSpaces(self.output_binary))\n\n    # Postbuild actions. Like actions, but implicitly depend on the target's\n    # output.\n    postbuilds = []\n    if self.flavor == 'mac':\n      if target_postbuilds:\n        postbuilds.append('$(TARGET_POSTBUILDS_$(BUILDTYPE))')\n      postbuilds.extend(\n          gyp.xcode_emulation.GetSpecPostbuildCommands(spec))\n\n    if postbuilds:\n      # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n      # so we must output its definition first, since we declare variables\n      # using \":=\".\n      self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n\n      for configname in target_postbuilds:\n        self.WriteLn('%s: TARGET_POSTBUILDS_%s := %s' %\n            (QuoteSpaces(self.output),\n             configname,\n             gyp.common.EncodePOSIXShellList(target_postbuilds[configname])))\n\n      # Postbuilds expect to be run in the gyp file's directory, so insert an\n      # implicit postbuild to cd to there.\n      postbuilds.insert(0, gyp.common.EncodePOSIXShellList(['cd', self.path]))\n      for i in xrange(len(postbuilds)):\n        if not postbuilds[i].startswith('$'):\n          postbuilds[i] = EscapeShellArgument(postbuilds[i])\n      self.WriteLn('%s: builddir := $(abs_builddir)' % QuoteSpaces(self.output))\n      self.WriteLn('%s: POSTBUILDS := %s' % (\n          QuoteSpaces(self.output), ' '.join(postbuilds)))\n\n    # A bundle directory depends on its dependencies such as bundle resources\n    # and bundle binary. When all dependencies have been built, the bundle\n    # needs to be packaged.\n    if self.is_mac_bundle:\n      # If the framework doesn't contain a binary, then nothing depends\n      # on the actions -- make the framework depend on them directly too.\n      self.WriteDependencyOnExtraOutputs(self.output, extra_outputs)\n\n      # Bundle dependencies. Note that the code below adds actions to this\n      # target, so if you move these two lines, move the lines below as well.\n      self.WriteList(map(QuoteSpaces, bundle_deps), 'BUNDLE_DEPS')\n      self.WriteLn('%s: $(BUNDLE_DEPS)' % QuoteSpaces(self.output))\n\n      # After the framework is built, package it. Needs to happen before\n      # postbuilds, since postbuilds depend on this.\n      if self.type in ('shared_library', 'loadable_module'):\n        self.WriteLn('\\t@$(call do_cmd,mac_package_framework,,,%s)' %\n            self.xcode_settings.GetFrameworkVersion())\n\n      # Bundle postbuilds can depend on the whole bundle, so run them after\n      # the bundle is packaged, not already after the bundle binary is done.\n      if postbuilds:\n        self.WriteLn('\\t@$(call do_postbuilds)')\n      postbuilds = []  # Don't write postbuilds for target's output.\n\n      # Needed by test/mac/gyptest-rebuild.py.\n      self.WriteLn('\\t@true  # No-op, used by tests')\n\n      # Since this target depends on binary and resources which are in\n      # nested subfolders, the framework directory will be older than\n      # its dependencies usually. To prevent this rule from executing\n      # on every build (expensive, especially with postbuilds), expliclity\n      # update the time on the framework directory.\n      self.WriteLn('\\t@touch -c %s' % QuoteSpaces(self.output))\n\n    if postbuilds:\n      assert not self.is_mac_bundle, ('Postbuilds for bundles should be done '\n          'on the bundle, not the binary (target \\'%s\\')' % self.target)\n      assert 'product_dir' not in spec, ('Postbuilds do not work with '\n          'custom product_dir')\n\n    if self.type == 'executable':\n      self.WriteLn('%s: LD_INPUTS := %s' % (\n          QuoteSpaces(self.output_binary),\n          ' '.join(map(QuoteSpaces, link_deps))))\n      if self.toolset == 'host' and self.flavor == 'android':\n        self.WriteDoCmd([self.output_binary], link_deps, 'link_host',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd([self.output_binary], link_deps, 'link', part_of_all,\n                        postbuilds=postbuilds)\n\n    elif self.type == 'static_library':\n      for link_dep in link_deps:\n        assert ' ' not in link_dep, (\n            \"Spaces in alink input filenames not supported (%s)\"  % link_dep)\n      if (self.flavor not in ('mac', 'openbsd', 'win') and not\n          self.is_standalone_static_library):\n        self.WriteDoCmd([self.output_binary], link_deps, 'alink_thin',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd([self.output_binary], link_deps, 'alink', part_of_all,\n                        postbuilds=postbuilds)\n    elif self.type == 'shared_library':\n      self.WriteLn('%s: LD_INPUTS := %s' % (\n            QuoteSpaces(self.output_binary),\n            ' '.join(map(QuoteSpaces, link_deps))))\n      self.WriteDoCmd([self.output_binary], link_deps, 'solink', part_of_all,\n                      postbuilds=postbuilds)\n    elif self.type == 'loadable_module':\n      for link_dep in link_deps:\n        assert ' ' not in link_dep, (\n            \"Spaces in module input filenames not supported (%s)\"  % link_dep)\n      if self.toolset == 'host' and self.flavor == 'android':\n        self.WriteDoCmd([self.output_binary], link_deps, 'solink_module_host',\n                        part_of_all, postbuilds=postbuilds)\n      else:\n        self.WriteDoCmd(\n            [self.output_binary], link_deps, 'solink_module', part_of_all,\n            postbuilds=postbuilds)\n    elif self.type == 'none':\n      # Write a stamp line.\n      self.WriteDoCmd([self.output_binary], deps, 'touch', part_of_all,\n                      postbuilds=postbuilds)\n    else:\n      print \"WARNING: no output for\", self.type, target\n\n    # Add an alias for each target (if there are any outputs).\n    # Installable target aliases are created below.\n    if ((self.output and self.output != self.target) and\n        (self.type not in self._INSTALLABLE_TARGETS)):\n      self.WriteMakeRule([self.target], [self.output],\n                         comment='Add target alias', phony = True)\n      if part_of_all:\n        self.WriteMakeRule(['all'], [self.target],\n                           comment = 'Add target alias to \"all\" target.',\n                           phony = True)\n\n    # Add special-case rules for our installable targets.\n    # 1) They need to install to the build dir or \"product\" dir.\n    # 2) They get shortcuts for building (e.g. \"make chrome\").\n    # 3) They are part of \"make all\".\n    if (self.type in self._INSTALLABLE_TARGETS or\n        self.is_standalone_static_library):\n      if self.type == 'shared_library':\n        file_desc = 'shared library'\n      elif self.type == 'static_library':\n        file_desc = 'static library'\n      else:\n        file_desc = 'executable'\n      install_path = self._InstallableTargetInstallPath()\n      installable_deps = [self.output]\n      if (self.flavor == 'mac' and not 'product_dir' in spec and\n          self.toolset == 'target'):\n        # On mac, products are created in install_path immediately.\n        assert install_path == self.output, '%s != %s' % (\n            install_path, self.output)\n\n      # Point the target alias to the final binary output.\n      self.WriteMakeRule([self.target], [install_path],\n                         comment='Add target alias', phony = True)\n      if install_path != self.output:\n        assert not self.is_mac_bundle  # See comment a few lines above.\n        self.WriteDoCmd([install_path], [self.output], 'copy',\n                        comment = 'Copy this to the %s output path.' %\n                        file_desc, part_of_all=part_of_all)\n        installable_deps.append(install_path)\n      if self.output != self.alias and self.alias != self.target:\n        self.WriteMakeRule([self.alias], installable_deps,\n                           comment = 'Short alias for building this %s.' %\n                           file_desc, phony = True)\n      if part_of_all:\n        self.WriteMakeRule(['all'], [install_path],\n                           comment = 'Add %s to \"all\" target.' % file_desc,\n                           phony = True)\n\n\n  def WriteList(self, value_list, variable=None, prefix='',\n                quoter=QuoteIfNecessary):\n    \"\"\"Write a variable definition that is a list of values.\n\n    E.g. WriteList(['a','b'], 'foo', prefix='blah') writes out\n         foo = blaha blahb\n    but in a pretty-printed style.\n    \"\"\"\n    values = ''\n    if value_list:\n      value_list = [quoter(prefix + l) for l in value_list]\n      values = ' \\\\\\n\\t' + ' \\\\\\n\\t'.join(value_list)\n    self.fp.write('%s :=%s\\n\\n' % (variable, values))\n\n\n  def WriteDoCmd(self, outputs, inputs, command, part_of_all, comment=None,\n                 postbuilds=False):\n    \"\"\"Write a Makefile rule that uses do_cmd.\n\n    This makes the outputs dependent on the command line that was run,\n    as well as support the V= make command line flag.\n    \"\"\"\n    suffix = ''\n    if postbuilds:\n      assert ',' not in command\n      suffix = ',,1'  # Tell do_cmd to honor $POSTBUILDS\n    self.WriteMakeRule(outputs, inputs,\n                       actions = ['$(call do_cmd,%s%s)' % (command, suffix)],\n                       comment = comment,\n                       command = command,\n                       force = True)\n    # Add our outputs to the list of targets we read depfiles from.\n    # all_deps is only used for deps file reading, and for deps files we replace\n    # spaces with ? because escaping doesn't work with make's $(sort) and\n    # other functions.\n    outputs = [QuoteSpaces(o, SPACE_REPLACEMENT) for o in outputs]\n    self.WriteLn('all_deps += %s' % ' '.join(outputs))\n\n\n  def WriteMakeRule(self, outputs, inputs, actions=None, comment=None,\n                    order_only=False, force=False, phony=False, command=None):\n    \"\"\"Write a Makefile rule, with some extra tricks.\n\n    outputs: a list of outputs for the rule (note: this is not directly\n             supported by make; see comments below)\n    inputs: a list of inputs for the rule\n    actions: a list of shell commands to run for the rule\n    comment: a comment to put in the Makefile above the rule (also useful\n             for making this Python script's code self-documenting)\n    order_only: if true, makes the dependency order-only\n    force: if true, include FORCE_DO_CMD as an order-only dep\n    phony: if true, the rule does not actually generate the named output, the\n           output is just a name to run the rule\n    command: (optional) command name to generate unambiguous labels\n    \"\"\"\n    outputs = map(QuoteSpaces, outputs)\n    inputs = map(QuoteSpaces, inputs)\n\n    if comment:\n      self.WriteLn('# ' + comment)\n    if phony:\n      self.WriteLn('.PHONY: ' + ' '.join(outputs))\n    if actions:\n      self.WriteLn(\"%s: TOOLSET := $(TOOLSET)\" % outputs[0])\n    force_append = ' FORCE_DO_CMD' if force else ''\n\n    if order_only:\n      # Order only rule: Just write a simple rule.\n      # TODO(evanm): just make order_only a list of deps instead of this hack.\n      self.WriteLn('%s: | %s%s' %\n                   (' '.join(outputs), ' '.join(inputs), force_append))\n    elif len(outputs) == 1:\n      # Regular rule, one output: Just write a simple rule.\n      self.WriteLn('%s: %s%s' % (outputs[0], ' '.join(inputs), force_append))\n    else:\n      # Regular rule, more than one output: Multiple outputs are tricky in\n      # make. We will write three rules:\n      # - All outputs depend on an intermediate file.\n      # - Make .INTERMEDIATE depend on the intermediate.\n      # - The intermediate file depends on the inputs and executes the\n      #   actual command.\n      # - The intermediate recipe will 'touch' the intermediate file.\n      # - The multi-output rule will have an do-nothing recipe.\n      intermediate = \"%s.intermediate\" % (command if command else self.target)\n      self.WriteLn('%s: %s' % (' '.join(outputs), intermediate))\n      self.WriteLn('\\t%s' % '@:');\n      self.WriteLn('%s: %s' % ('.INTERMEDIATE', intermediate))\n      self.WriteLn('%s: %s%s' %\n                   (intermediate, ' '.join(inputs), force_append))\n      actions.insert(0, '$(call do_cmd,touch)')\n\n    if actions:\n      for action in actions:\n        self.WriteLn('\\t%s' % action)\n    self.WriteLn()\n\n\n  def WriteAndroidNdkModuleRule(self, module_name, all_sources, link_deps):\n    \"\"\"Write a set of LOCAL_XXX definitions for Android NDK.\n\n    These variable definitions will be used by Android NDK but do nothing for\n    non-Android applications.\n\n    Arguments:\n      module_name: Android NDK module name, which must be unique among all\n          module names.\n      all_sources: A list of source files (will be filtered by Compilable).\n      link_deps: A list of link dependencies, which must be sorted in\n          the order from dependencies to dependents.\n    \"\"\"\n    if self.type not in ('executable', 'shared_library', 'static_library'):\n      return\n\n    self.WriteLn('# Variable definitions for Android applications')\n    self.WriteLn('include $(CLEAR_VARS)')\n    self.WriteLn('LOCAL_MODULE := ' + module_name)\n    self.WriteLn('LOCAL_CFLAGS := $(CFLAGS_$(BUILDTYPE)) '\n                 '$(DEFS_$(BUILDTYPE)) '\n                 # LOCAL_CFLAGS is applied to both of C and C++.  There is\n                 # no way to specify $(CFLAGS_C_$(BUILDTYPE)) only for C\n                 # sources.\n                 '$(CFLAGS_C_$(BUILDTYPE)) '\n                 # $(INCS_$(BUILDTYPE)) includes the prefix '-I' while\n                 # LOCAL_C_INCLUDES does not expect it.  So put it in\n                 # LOCAL_CFLAGS.\n                 '$(INCS_$(BUILDTYPE))')\n    # LOCAL_CXXFLAGS is obsolete and LOCAL_CPPFLAGS is preferred.\n    self.WriteLn('LOCAL_CPPFLAGS := $(CFLAGS_CC_$(BUILDTYPE))')\n    self.WriteLn('LOCAL_C_INCLUDES :=')\n    self.WriteLn('LOCAL_LDLIBS := $(LDFLAGS_$(BUILDTYPE)) $(LIBS)')\n\n    # Detect the C++ extension.\n    cpp_ext = {'.cc': 0, '.cpp': 0, '.cxx': 0}\n    default_cpp_ext = '.cpp'\n    for filename in all_sources:\n      ext = os.path.splitext(filename)[1]\n      if ext in cpp_ext:\n        cpp_ext[ext] += 1\n        if cpp_ext[ext] > cpp_ext[default_cpp_ext]:\n          default_cpp_ext = ext\n    self.WriteLn('LOCAL_CPP_EXTENSION := ' + default_cpp_ext)\n\n    self.WriteList(map(self.Absolutify, filter(Compilable, all_sources)),\n                   'LOCAL_SRC_FILES')\n\n    # Filter out those which do not match prefix and suffix and produce\n    # the resulting list without prefix and suffix.\n    def DepsToModules(deps, prefix, suffix):\n      modules = []\n      for filepath in deps:\n        filename = os.path.basename(filepath)\n        if filename.startswith(prefix) and filename.endswith(suffix):\n          modules.append(filename[len(prefix):-len(suffix)])\n      return modules\n\n    # Retrieve the default value of 'SHARED_LIB_SUFFIX'\n    params = {'flavor': 'linux'}\n    default_variables = {}\n    CalculateVariables(default_variables, params)\n\n    self.WriteList(\n        DepsToModules(link_deps,\n                      generator_default_variables['SHARED_LIB_PREFIX'],\n                      default_variables['SHARED_LIB_SUFFIX']),\n        'LOCAL_SHARED_LIBRARIES')\n    self.WriteList(\n        DepsToModules(link_deps,\n                      generator_default_variables['STATIC_LIB_PREFIX'],\n                      generator_default_variables['STATIC_LIB_SUFFIX']),\n        'LOCAL_STATIC_LIBRARIES')\n\n    if self.type == 'executable':\n      self.WriteLn('include $(BUILD_EXECUTABLE)')\n    elif self.type == 'shared_library':\n      self.WriteLn('include $(BUILD_SHARED_LIBRARY)')\n    elif self.type == 'static_library':\n      self.WriteLn('include $(BUILD_STATIC_LIBRARY)')\n    self.WriteLn()\n\n\n  def WriteLn(self, text=''):\n    self.fp.write(text + '\\n')\n\n\n  def GetSortedXcodeEnv(self, additional_settings=None):\n    return gyp.xcode_emulation.GetSortedXcodeEnv(\n        self.xcode_settings, \"$(abs_builddir)\",\n        os.path.join(\"$(abs_srcdir)\", self.path), \"$(BUILDTYPE)\",\n        additional_settings)\n\n\n  def GetSortedXcodePostbuildEnv(self):\n    # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n    # TODO(thakis): It would be nice to have some general mechanism instead.\n    strip_save_file = self.xcode_settings.GetPerTargetSetting(\n        'CHROMIUM_STRIP_SAVE_FILE', '')\n    # Even if strip_save_file is empty, explicitly write it. Else a postbuild\n    # might pick up an export from an earlier target.\n    return self.GetSortedXcodeEnv(\n        additional_settings={'CHROMIUM_STRIP_SAVE_FILE': strip_save_file})\n\n\n  def WriteSortedXcodeEnv(self, target, env):\n    for k, v in env:\n      # For\n      #  foo := a\\ b\n      # the escaped space does the right thing. For\n      #  export foo := a\\ b\n      # it does not -- the backslash is written to the env as literal character.\n      # So don't escape spaces in |env[k]|.\n      self.WriteLn('%s: export %s := %s' % (QuoteSpaces(target), k, v))\n\n\n  def Objectify(self, path):\n    \"\"\"Convert a path to its output directory form.\"\"\"\n    if '$(' in path:\n      path = path.replace('$(obj)/', '$(obj).%s/$(TARGET)/' % self.toolset)\n    if not '$(obj)' in path:\n      path = '$(obj).%s/$(TARGET)/%s' % (self.toolset, path)\n    return path\n\n\n  def Pchify(self, path, lang):\n    \"\"\"Convert a prefix header path to its output directory form.\"\"\"\n    path = self.Absolutify(path)\n    if '$(' in path:\n      path = path.replace('$(obj)/', '$(obj).%s/$(TARGET)/pch-%s' %\n                          (self.toolset, lang))\n      return path\n    return '$(obj).%s/$(TARGET)/pch-%s/%s' % (self.toolset, lang, path)\n\n\n  def Absolutify(self, path):\n    \"\"\"Convert a subdirectory-relative path into a base-relative path.\n    Skips over paths that contain variables.\"\"\"\n    if '$(' in path:\n      # Don't call normpath in this case, as it might collapse the\n      # path too aggressively if it features '..'. However it's still\n      # important to strip trailing slashes.\n      return path.rstrip('/')\n    return os.path.normpath(os.path.join(self.path, path))\n\n\n  def ExpandInputRoot(self, template, expansion, dirname):\n    if '%(INPUT_ROOT)s' not in template and '%(INPUT_DIRNAME)s' not in template:\n      return template\n    path = template % {\n        'INPUT_ROOT': expansion,\n        'INPUT_DIRNAME': dirname,\n        }\n    return path\n\n\n  def _InstallableTargetInstallPath(self):\n    \"\"\"Returns the location of the final output for an installable target.\"\"\"\n    # Xcode puts shared_library results into PRODUCT_DIR, and some gyp files\n    # rely on this. Emulate this behavior for mac.\n    if (self.type == 'shared_library' and\n        (self.flavor != 'mac' or self.toolset != 'target')):\n      # Install all shared libs into a common directory (per toolset) for\n      # convenient access with LD_LIBRARY_PATH.\n      return '$(builddir)/lib.%s/%s' % (self.toolset, self.alias)\n    return '$(builddir)/' + self.alias\n\n\ndef WriteAutoRegenerationRule(params, root_makefile, makefile_name,\n                              build_files):\n  \"\"\"Write the target to regenerate the Makefile.\"\"\"\n  options = params['options']\n  build_files_args = [gyp.common.RelativePath(filename, options.toplevel_dir)\n                      for filename in params['build_files_arg']]\n\n  gyp_binary = gyp.common.FixIfRelativePath(params['gyp_binary'],\n                                            options.toplevel_dir)\n  if not gyp_binary.startswith(os.sep):\n    gyp_binary = os.path.join('.', gyp_binary)\n\n  root_makefile.write(\n      \"quiet_cmd_regen_makefile = ACTION Regenerating $@\\n\"\n      \"cmd_regen_makefile = cd $(srcdir); %(cmd)s\\n\"\n      \"%(makefile_name)s: %(deps)s\\n\"\n      \"\\t$(call do_cmd,regen_makefile)\\n\\n\" % {\n          'makefile_name': makefile_name,\n          'deps': ' '.join(map(Sourceify, build_files)),\n          'cmd': gyp.common.EncodePOSIXShellList(\n                     [gyp_binary, '-fmake'] +\n                     gyp.RegenerateFlags(options) +\n                     build_files_args)})\n\n\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    arguments = ['make']\n    if options.toplevel_dir and options.toplevel_dir != '.':\n      arguments += '-C', options.toplevel_dir\n    arguments.append('BUILDTYPE=' + config)\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\n\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  default_target = generator_flags.get('default_target', 'all')\n\n  def CalculateMakefilePath(build_file, base_name):\n    \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n    # Paths in gyp files are relative to the .gyp file, but we want\n    # paths relative to the source root for the master makefile.  Grab\n    # the path of the .gyp file as the base to relativize against.\n    # E.g. \"foo/bar\" when we're constructing targets for \"foo/bar/baz.gyp\".\n    base_path = gyp.common.RelativePath(os.path.dirname(build_file),\n                                        options.depth)\n    # We write the file in the base_path directory.\n    output_file = os.path.join(options.depth, base_path, base_name)\n    if options.generator_output:\n      output_file = os.path.join(\n          options.depth, options.generator_output, base_path, base_name)\n    base_path = gyp.common.RelativePath(os.path.dirname(build_file),\n                                        options.toplevel_dir)\n    return base_path, output_file\n\n  # TODO:  search for the first non-'Default' target.  This can go\n  # away when we add verification that all targets have the\n  # necessary configurations.\n  default_configuration = None\n  toolsets = set([target_dicts[target]['toolset'] for target in target_list])\n  for target in target_list:\n    spec = target_dicts[target]\n    if spec['default_configuration'] != 'Default':\n      default_configuration = spec['default_configuration']\n      break\n  if not default_configuration:\n    default_configuration = 'Default'\n\n  srcdir = '.'\n  makefile_name = 'Makefile' + options.suffix\n  makefile_path = os.path.join(options.toplevel_dir, makefile_name)\n  if options.generator_output:\n    global srcdir_prefix\n    makefile_path = os.path.join(\n        options.toplevel_dir, options.generator_output, makefile_name)\n    srcdir = gyp.common.RelativePath(srcdir, options.generator_output)\n    srcdir_prefix = '$(srcdir)/'\n\n  flock_command= 'flock'\n  copy_archive_arguments = '-af'\n  header_params = {\n      'default_target': default_target,\n      'builddir': builddir_name,\n      'default_configuration': default_configuration,\n      'flock': flock_command,\n      'flock_index': 1,\n      'link_commands': LINK_COMMANDS_LINUX,\n      'extra_commands': '',\n      'srcdir': srcdir,\n      'copy_archive_args': copy_archive_arguments,\n    }\n  if flavor == 'mac':\n    flock_command = './gyp-mac-tool flock'\n    header_params.update({\n        'flock': flock_command,\n        'flock_index': 2,\n        'link_commands': LINK_COMMANDS_MAC,\n        'extra_commands': SHARED_HEADER_MAC_COMMANDS,\n    })\n  elif flavor == 'android':\n    header_params.update({\n        'link_commands': LINK_COMMANDS_ANDROID,\n    })\n  elif flavor == 'solaris':\n    header_params.update({\n        'flock': './gyp-flock-tool flock',\n        'flock_index': 2,\n    })\n  elif flavor == 'freebsd':\n    # Note: OpenBSD has sysutils/flock. lockf seems to be FreeBSD specific.\n    header_params.update({\n        'flock': 'lockf',\n    })\n  elif flavor == 'aix':\n    copy_archive_arguments = '-pPRf'\n    header_params.update({\n        'copy_archive_args': copy_archive_arguments,\n        'link_commands': LINK_COMMANDS_AIX,\n        'flock': './gyp-flock-tool flock',\n        'flock_index': 2,\n    })\n\n  header_params.update({\n    'CC.target':   GetEnvironFallback(('CC_target', 'CC'), '$(CC)'),\n    'AR.target':   GetEnvironFallback(('AR_target', 'AR'), '$(AR)'),\n    'CXX.target':  GetEnvironFallback(('CXX_target', 'CXX'), '$(CXX)'),\n    'LINK.target': GetEnvironFallback(('LINK_target', 'LINK'), '$(LINK)'),\n    'CC.host':     GetEnvironFallback(('CC_host', 'CC'), 'gcc'),\n    'AR.host':     GetEnvironFallback(('AR_host', 'AR'), 'ar'),\n    'CXX.host':    GetEnvironFallback(('CXX_host', 'CXX'), 'g++'),\n    'LINK.host':   GetEnvironFallback(('LINK_host', 'LINK'), '$(CXX.host)'),\n  })\n\n  build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n  make_global_settings_array = data[build_file].get('make_global_settings', [])\n  wrappers = {}\n  for key, value in make_global_settings_array:\n    if key.endswith('_wrapper'):\n      wrappers[key[:-len('_wrapper')]] = '$(abspath %s)' % value\n  make_global_settings = ''\n  for key, value in make_global_settings_array:\n    if re.match('.*_wrapper', key):\n      continue\n    if value[0] != '$':\n      value = '$(abspath %s)' % value\n    wrapper = wrappers.get(key)\n    if wrapper:\n      value = '%s %s' % (wrapper, value)\n      del wrappers[key]\n    if key in ('CC', 'CC.host', 'CXX', 'CXX.host'):\n      make_global_settings += (\n          'ifneq (,$(filter $(origin %s), undefined default))\\n' % key)\n      # Let gyp-time envvars win over global settings.\n      env_key = key.replace('.', '_')  # CC.host -> CC_host\n      if env_key in os.environ:\n        value = os.environ[env_key]\n      make_global_settings += '  %s = %s\\n' % (key, value)\n      make_global_settings += 'endif\\n'\n    else:\n      make_global_settings += '%s ?= %s\\n' % (key, value)\n  # TODO(ukai): define cmd when only wrapper is specified in\n  # make_global_settings.\n\n  header_params['make_global_settings'] = make_global_settings\n\n  gyp.common.EnsureDirExists(makefile_path)\n  root_makefile = open(makefile_path, 'w')\n  root_makefile.write(SHARED_HEADER % header_params)\n  # Currently any versions have the same effect, but in future the behavior\n  # could be different.\n  if android_ndk_version:\n    root_makefile.write(\n        '# Define LOCAL_PATH for build of Android applications.\\n'\n        'LOCAL_PATH := $(call my-dir)\\n'\n        '\\n')\n  for toolset in toolsets:\n    root_makefile.write('TOOLSET := %s\\n' % toolset)\n    WriteRootHeaderSuffixRules(root_makefile)\n\n  # Put build-time support tools next to the root Makefile.\n  dest_path = os.path.dirname(makefile_path)\n  gyp.common.CopyTool(flavor, dest_path)\n\n  # Find the list of targets that derive from the gyp file(s) being built.\n  needed_targets = set()\n  for build_file in params['build_files']:\n    for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n      needed_targets.add(target)\n\n  build_files = set()\n  include_list = set()\n  for qualified_target in target_list:\n    build_file, target, toolset = gyp.common.ParseQualifiedTarget(\n        qualified_target)\n\n    this_make_global_settings = data[build_file].get('make_global_settings', [])\n    assert make_global_settings_array == this_make_global_settings, (\n        \"make_global_settings needs to be the same for all targets. %s vs. %s\" %\n        (this_make_global_settings, make_global_settings))\n\n    build_files.add(gyp.common.RelativePath(build_file, options.toplevel_dir))\n    included_files = data[build_file]['included_files']\n    for included_file in included_files:\n      # The included_files entries are relative to the dir of the build file\n      # that included them, so we have to undo that and then make them relative\n      # to the root dir.\n      relative_include_file = gyp.common.RelativePath(\n          gyp.common.UnrelativePath(included_file, build_file),\n          options.toplevel_dir)\n      abs_include_file = os.path.abspath(relative_include_file)\n      # If the include file is from the ~/.gyp dir, we should use absolute path\n      # so that relocating the src dir doesn't break the path.\n      if (params['home_dot_gyp'] and\n          abs_include_file.startswith(params['home_dot_gyp'])):\n        build_files.add(abs_include_file)\n      else:\n        build_files.add(relative_include_file)\n\n    base_path, output_file = CalculateMakefilePath(build_file,\n        target + '.' + toolset + options.suffix + '.mk')\n\n    spec = target_dicts[qualified_target]\n    configs = spec['configurations']\n\n    if flavor == 'mac':\n      gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)\n\n    writer = MakefileWriter(generator_flags, flavor)\n    writer.Write(qualified_target, base_path, output_file, spec, configs,\n                 part_of_all=qualified_target in needed_targets)\n\n    # Our root_makefile lives at the source root.  Compute the relative path\n    # from there to the output_file for including.\n    mkfile_rel_path = gyp.common.RelativePath(output_file,\n                                              os.path.dirname(makefile_path))\n    include_list.add(mkfile_rel_path)\n\n  # Write out per-gyp (sub-project) Makefiles.\n  depth_rel_path = gyp.common.RelativePath(options.depth, os.getcwd())\n  for build_file in build_files:\n    # The paths in build_files were relativized above, so undo that before\n    # testing against the non-relativized items in target_list and before\n    # calculating the Makefile path.\n    build_file = os.path.join(depth_rel_path, build_file)\n    gyp_targets = [target_dicts[target]['target_name'] for target in target_list\n                   if target.startswith(build_file) and\n                   target in needed_targets]\n    # Only generate Makefiles for gyp files with targets.\n    if not gyp_targets:\n      continue\n    base_path, output_file = CalculateMakefilePath(build_file,\n        os.path.splitext(os.path.basename(build_file))[0] + '.Makefile')\n    makefile_rel_path = gyp.common.RelativePath(os.path.dirname(makefile_path),\n                                                os.path.dirname(output_file))\n    writer.WriteSubMake(output_file, makefile_rel_path, gyp_targets,\n                        builddir_name)\n\n\n  # Write out the sorted list of includes.\n  root_makefile.write('\\n')\n  for include_file in sorted(include_list):\n    # We wrap each .mk include in an if statement so users can tell make to\n    # not load a file by setting NO_LOAD.  The below make code says, only\n    # load the .mk file if the .mk filename doesn't start with a token in\n    # NO_LOAD.\n    root_makefile.write(\n        \"ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\\\\n\"\n        \"    $(findstring $(join ^,$(prefix)),\\\\\\n\"\n        \"                 $(join ^,\" + include_file + \")))),)\\n\")\n    root_makefile.write(\"  include \" + include_file + \"\\n\")\n    root_makefile.write(\"endif\\n\")\n  root_makefile.write('\\n')\n\n  if (not generator_flags.get('standalone')\n      and generator_flags.get('auto_regeneration', True)):\n    WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n\n  root_makefile.write(SHARED_FOOTER)\n\n  root_makefile.close()\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/changelogs/CHANGELOG_V010.md": "# Node.js v0.10 ChangeLog\n\n<table>\n<tr>\n<th colspan=\"2\">Stable</th>\n</tr>\n<tr>\n<td valign=\"top\">\n<a href=\"#0.10.45\">0.10.45</a><br/>\n<a href=\"#0.10.44\">0.10.44</a><br/>\n<a href=\"#0.10.43\">0.10.43</a><br/>\n<a href=\"#0.10.42\">0.10.42</a><br/>\n<a href=\"#0.10.41\">0.10.41</a><br/>\n<a href=\"#0.10.40\">0.10.40</a><br/>\n<a href=\"#0.10.39\">0.10.39</a><br/>\n<a href=\"#0.10.38\">0.10.38</a><br/>\n<a href=\"#0.10.37\">0.10.37</a><br/>\n<a href=\"#0.10.36\">0.10.36</a><br/>\n<a href=\"#0.10.35\">0.10.35</a><br/>\n<a href=\"#0.10.34\">0.10.34</a><br/>\n<a href=\"#0.10.33\">0.10.33</a><br/>\n<a href=\"#0.10.32\">0.10.32</a><br/>\n<a href=\"#0.10.31\">0.10.31</a><br/>\n<a href=\"#0.10.30\">0.10.30</a><br/>\n<a href=\"#0.10.29\">0.10.29</a><br/>\n<a href=\"#0.10.28\">0.10.28</a><br/>\n<a href=\"#0.10.27\">0.10.27</a><br/>\n<a href=\"#0.10.26\">0.10.26</a><br/>\n<a href=\"#0.10.25\">0.10.25</a><br/>\n<a href=\"#0.10.24\">0.10.24</a><br/>\n<a href=\"#0.10.23\">0.10.23</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.10.22\">0.10.22</a><br/>\n<a href=\"#0.10.21\">0.10.21</a><br/>\n<a href=\"#0.10.20\">0.10.20</a><br/>\n<a href=\"#0.10.19\">0.10.19</a><br/>\n<a href=\"#0.10.18\">0.10.18</a><br/>\n<a href=\"#0.10.17\">0.10.17</a><br/>\n<a href=\"#0.10.16\">0.10.16</a><br/>\n<a href=\"#0.10.15\">0.10.15</a><br/>\n<a href=\"#0.10.14\">0.10.14</a><br/>\n<a href=\"#0.10.13\">0.10.13</a><br/>\n<a href=\"#0.10.12\">0.10.12</a><br/>\n<a href=\"#0.10.11\">0.10.11</a><br/>\n<a href=\"#0.10.10\">0.10.10</a><br/>\n<a href=\"#0.10.9\">0.10.9</a><br/>\n<a href=\"#0.10.8\">0.10.8</a><br/>\n<a href=\"#0.10.7\">0.10.7</a><br/>\n<a href=\"#0.10.6\">0.10.6</a><br/>\n<a href=\"#0.10.5\">0.10.5</a><br/>\n<a href=\"#0.10.4\">0.10.4</a><br/>\n<a href=\"#0.10.3\">0.10.3</a><br/>\n<a href=\"#0.10.2\">0.10.2</a><br/>\n<a href=\"#0.10.1\">0.10.1</a><br/>\n<a href=\"#0.10.0\">0.10.0</a><br/>\n</td>\n</tr>\n</table>\n\n* Other Versions\n  * [6.x](CHANGELOG_V6.md)\n  * [5.x](CHANGELOG_V5.md)\n  * [4.x](CHANGELOG_V4.md)\n  * [0.12.x](CHANGELOG_V012.md)\n  * [io.js](CHANGELOG_IOJS.md)\n  * [Archive](CHANGELOG_ARCHIVE.md)\n\n**Note:** Node.js v0.10 is covered by the \n[Node.js Long Term Support Plan](https://github.com/nodejs/LTS) and\nwill be maintained until October 2016.\n\n<a id=\"0.10.45\"></a>\n## 2016-05-06, Version 0.10.45 (Maintenance), @rvagg\n\n### Notable changes:\n\n* npm: Correct erroneous version number in v2.15.1 code (Forrest L Norvell) https://github.com/nodejs/node/pull/5987\n* openssl: Upgrade to v1.0.1t, addressing security vulnerabilities (Shigeki Ohtsu) https://github.com/nodejs/node/pull/6553\n  - Fixes CVE-2016-2107 \"Padding oracle in AES-NI CBC MAC check\"\n  - See https://nodejs.org/en/blog/vulnerability/openssl-may-2016/ for full details\n\n### Commits:\n\n* [3cff81c7d6] - deps: completely upgrade npm in LTS to 2.15.1 (Forrest L Norvell) https://github.com/nodejs/node/pull/5987\n* [7c22f19009] - deps: add -no_rand_screen to openssl s_client (Shigeki Ohtsu) https://github.com/joyent/node/pull/25368\n* [5d78366937] - deps: update openssl asm files (Shigeki Ohtsu) https://github.com/nodejs/node/pull/6553\n* [2bc2427cb7] - deps: fix openssl assembly error on ia32 win32 (Fedor Indutny) https://github.com/joyent/node/pull/25654\n* [8df4b0914c] - deps: separate sha256/sha512-x86_64.pl for openssl (Shigeki Ohtsu) https://github.com/joyent/node/pull/25654\n* [11eefefb17] - deps: copy all openssl header files to include dir (Shigeki Ohtsu) https://github.com/nodejs/node/pull/6553\n* [61ccc27b54] - deps: upgrade openssl sources to 1.0.1t (Shigeki Ohtsu) https://github.com/nodejs/node/pull/6553\n* [aa02438274] - openssl: fix keypress requirement in apps on win32 (Shigeki Ohtsu) https://github.com/joyent/node/pull/25654\n\n<a id=\"0.10.44\"></a>\n## 2016-03-31, Version 0.10.44 (Maintenance), @rvagg\n\n### Notable changes\n\n* npm: Upgrade to v2.15.1. Fixes a security flaw in the use of authentication tokens in HTTP requests that would allow an attacker to set up a server that could collect tokens from users of the command-line interface. Authentication tokens have previously been sent with every request made by the CLI for logged-in users, regardless of the destination of the request. This update fixes this by only including those tokens for requests made against the registry or registries used for the current install. IMPORTANT: This is a major upgrade to npm v2 LTS from the previously deprecated npm v1. (Forrest L Norvell) https://github.com/nodejs/node/pull/5967\n* openssl: OpenSSL v1.0.1s disables the EXPORT and LOW ciphers as they are obsolete and not considered safe. This release of Node.js turns on `OPENSSL_NO_WEAK_SSL_CIPHERS` to fully disable the 27 ciphers included in these lists which can be used in SSLv3 and higher. Full details can be found in our LTS discussion on the matter (https://github.com/nodejs/LTS/issues/85). (Shigeki Ohtsu) https://github.com/nodejs/node/pull/5712\n\n### Commits\n\n* [feceb77d7e] - deps: upgrade npm in LTS to 2.15.1 (Forrest L Norvell) https://github.com/nodejs/node/pull/5968\n* [0847954331] - deps: Disable EXPORT and LOW ciphers in openssl (Shigeki Ohtsu) https://github.com/nodejs/node/pull/5712\n* [6bb86e727a] - test: change tls tests not to use LOW cipher (Shigeki Ohtsu) https://github.com/nodejs/node/pull/5712\n* [905bec29ad] - win,build: support Visual C++ Build Tools 2015 (Jo\u00e3o Reis) https://github.com/nodejs/node/pull/5627\n\n<a id=\"0.10.43\"></a>\n## 2016-03-04, Version 0.10.43 (Maintenance), @rvagg\n\n### Notable changes:\n\n* http_parser: Update to http-parser 1.2 to fix an unintentionally strict limitation of allowable header characters. (James M Snell) https://github.com/nodejs/node/pull/5242\n* domains:\n  - Prevent an exit due to an exception being thrown rather than emitting an `'uncaughtException'` event on the `process` object when no error handler is set on the domain within which an error is thrown and an `'uncaughtException'` event listener is set on `process`. (Julien Gilli) https://github.com/nodejs/node/pull/3887\n  - Fix an issue where the process would not abort in the proper function call if an error is thrown within a domain with no error handler and `--abort-on-uncaught-exception` is used. (Julien Gilli) https://github.com/nodejs/node/pull/3887\n* openssl: Upgrade from 1.0.1r to 1.0.1s (Ben Noordhuis) https://github.com/nodejs/node/pull/5508\n  - Fix a double-free defect in parsing malformed DSA keys that may potentially be used for DoS or memory corruption attacks. It is likely to be very difficult to use this defect for a practical attack and is therefore considered low severity for Node.js users. More info is available at https://www.openssl.org/news/vulnerabilities.html#2016-0705\n  - Fix a defect that can cause memory corruption in certain very rare cases relating to the internal `BN_hex2bn()` and `BN_dec2bn()` functions. It is believed that Node.js is not invoking the code paths that use these functions so practical attacks via Node.js using this defect are _unlikely_ to be possible. More info is available at https://www.openssl.org/news/vulnerabilities.html#2016-0797\n  - Fix a defect that makes the CacheBleed Attack (https://ssrg.nicta.com.au/projects/TS/cachebleed/) possible. This defect enables attackers to execute side-channel attacks leading to the potential recovery of entire RSA private keys. It only affects the Intel Sandy Bridge (and possibly older) microarchitecture when using hyper-threading. Newer microarchitectures, including Haswell, are unaffected. More info is available at https://www.openssl.org/news/vulnerabilities.html#2016-0702\n  - Remove SSLv2 support, the `--enable-ssl2` command line argument will now produce an error. The DROWN Attack (https://drownattack.com/) creates a vulnerability where SSLv2 is enabled by a server, even if a client connection is not using SSLv2. The SSLv2 protocol is widely considered unacceptably broken and should not be supported. More information is available at https://www.openssl.org/news/vulnerabilities.html#2016-0800\n\n### Commits:\n\n* [164157abbb] - build: update Node.js logo on OSX installer (Rod Vagg) https://github.com/nodejs/node/pull/5401\n* [f8cb0dcf67] - crypto,tls: remove SSLv2 support (Ben Noordhuis) https://github.com/nodejs/node/pull/5529\n* [42ded2a590] - deps: upgrade openssl to 1.0.1s (Ben Noordhuis) https://github.com/nodejs/node/pull/5508\n* [1e45a6111c] - deps: update http-parser to version 1.2 (James M Snell) https://github.com/nodejs/node/pull/5242\n* [6db377b2f4] - doc: remove SSLv2 descriptions (Shigeki Ohtsu) https://github.com/nodejs/node/pull/5541\n* [563c359f5c] - domains: fix handling of uncaught exceptions (Julien Gilli) https://github.com/nodejs/node/pull/3887\n* [e483f3fd26] - test: fix hanging http obstext test (Ben Noordhuis) https://github.com/nodejs/node/pull/5511\n\n<a id=\"0.10.42\"></a>\n## 2016-02-09, Version 0.10.42 (Maintenance), @jasnell\n\nThis is an important security release. All Node.js users should consult the security release summary at nodejs.org for details on patched vulnerabilities.\n\n### Notable changes\n\n* http: fix defects in HTTP header parsing for requests and responses that can allow request smuggling (CVE-2016-2086) or response splitting (CVE-2016-2216). HTTP header parsing now aligns more closely with the HTTP spec including restricting the acceptable characters.\n* http-parser: upgrade from 1.0 to 1.1\n* openssl: upgrade from 1.0.1q to 1.0.1r. To mitigate against the Logjam attack, TLS clients now reject Diffie-Hellman handshakes with parameters shorter than 1024-bits, up from the previous limit of 768-bits.\n* src:\n  - introduce new `--security-revert={cvenum}` command line flag for selective reversion of specific CVE fixes\n  - allow the fix for CVE-2016-2216 to be selectively reverted using `--security-revert=CVE-2016-2216`\n* build:\n  - xz compressed tar files will be made available from nodejs.org for v0.10 builds from v0.10.42 onward\n  - A headers.tar.gz file will be made available from nodejs.org for v0.10 builds from v0.10.42 onward, a future change to node-gyp will be required to make use of these\n\n### Commits\n\n* [fdc332183e] - build: enable xz compressed tarballs where possible (Rod Vagg) https://github.com/nodejs/node/pull/4894\n* [2d35b421b5] - deps: upgrade openssl sources to 1.0.1r (Shigeki Ohtsu) https://github.com/joyent/node/pull/25368\n* [b31c0f3ea4] - deps: update http-parser to version 1.1 (James M Snell)\n* [616ec1d6b0] - doc: clarify v0.10.41 openssl tls security impact (Rod Vagg) https://github.com/nodejs/node/pull/4153\n* [ccb3c2377c] - http: strictly forbid invalid characters from headers (James M Snell)\n* [f0af0d1f96] - src: avoid compiler warning in node_revert.cc (James M Snell)\n* [df80e856c6] - src: add --security-revert command line flag (James M Snell)\n* [ff58dcdd74] - tools: backport tools/install.py for headers (Richard Lau) https://github.com/nodejs/node/pull/4149\n\n<a id=\"0.10.41\"></a>\n## 2015-12-04, Version 0.10.41 (Maintenance), @rvagg\n\nSecurity Update\n\n### Notable changes\n\n* build: Add support for Microsoft Visual Studio 2015\n* npm: Upgrade to v1.4.29 from v1.4.28. A special one-off release as part of the strategy to get a version of npm into Node.js v0.10.x that works with the current registry (https://github.com/nodejs/LTS/issues/37). This version of npm prints out a banner each time it is run. The banner warns that the next standard release of Node.js v0.10.x will ship with a version of npm v2.\n* openssl: Upgrade to 1.0.1q, containing fixes CVE-2015-3194 \"Certificate verify crash with missing PSS parameter\", a potential denial-of-service vector for Node.js TLS servers using client certificate authentication; TLS clients are also impacted. Details are available at <http://openssl.org/news/secadv/20151203.txt>. (Ben Noordhuis) https://github.com/nodejs/node/pull/4133\n\n### Commits\n\n* [16ca0779f5] - src/node.cc: fix build error without OpenSSL support (J\u00f6rg Krause) https://github.com/nodejs/node-v0.x-archive/pull/25862\n* [c559c7911d] - build: backport tools/release.sh (Rod Vagg) https://github.com/nodejs/node/pull/3965\n* [268d2b4637] - build: backport config for new CI infrastructure (Rod Vagg) https://github.com/nodejs/node/pull/3965\n* [c88a0b26da] - build: update manifest to include Windows 10 (Lucien Greathouse) https://github.com/nodejs/node/pull/2838\n* [8564a9f5f7] - build: gcc version detection on openSUSE Tumbleweed (Henrique Aparecido Lavezzo) https://github.com/nodejs/node-v0.x-archive/pull/25671\n* [9c7bd6de56] - build: run-ci makefile rule (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [ffa1e1f31d] - build: support flaky tests in test-ci (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [100dd19e61] - build: support Jenkins via test-ci (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [ec861f6f90] - build: make release process easier for multi users (Julien Gilli) https://github.com/nodejs/node-v0.x-archive/pull/25638\n* [d7ae79a452] - build,win: fix node.exe resource version (Jo\u00e3o Reis) https://github.com/nodejs/node/pull/3053\n* [6ac47aa9f5] - build,win: try next MSVS version on failure (Jo\u00e3o Reis) https://github.com/nodejs/node/pull/2910\n* [e669b27740] - crypto: replace rwlocks with simple mutexes (Ben Noordhuis) https://github.com/nodejs/node/pull/2723\n* [ce0a48826e] - deps: upgrade to openssl 1.0.1q (Ben Noordhuis) https://github.com/nodejs/node/pull/4132\n* [b68781e500] - deps: upgrade npm to 1.4.29 (Forrest L Norvell) https://github.com/nodejs/node/pull/3639\n* [7cf0d9c1d9] - deps: fix openssl for MSVS 2015 (Andy Polyakov) https://github.com/nodejs/node-v0.x-archive/pull/25857\n* [9ee8a14f9e] - deps: fix gyp to work on MacOSX without XCode (Shigeki Ohtsu) https://github.com/nodejs/node-v0.x-archive/pull/25857\n* [a525c7244e] - deps: update gyp to 25ed9ac (Jo\u00e3o Reis) https://github.com/nodejs/node-v0.x-archive/pull/25857\n* [6502160294] - dns: allow v8 to optimize lookup() (Brian White) https://github.com/nodejs/node-v0.x-archive/pull/8942\n* [5d829a63ab] - doc: backport README.md (Rod Vagg) https://github.com/nodejs/node/pull/3965\n* [62c8948109] - doc: fix Folders as Modules omission of index.json (Elan Shanker) https://github.com/nodejs/node-v0.x-archive/pull/8868\n* [572663f303] - https: don't overwrite servername option (skenqbx) https://github.com/nodejs/node-v0.x-archive/pull/9368\n* [75c84b2439] - test: add test for https agent servername option (skenqbx) https://github.com/nodejs/node-v0.x-archive/pull/9368\n* [841a6dd264] - test: mark more tests as flaky (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25807\n* [a7fee30da1] - test: mark test-tls-securepair-server as flaky (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25807\n* [7df57703dd] - test: mark test-net-error-twice flaky on SmartOS (Julien Gilli) https://github.com/nodejs/node-v0.x-archive/pull/25760\n* [e10892cccc] - test: make test-abort-fatal-error non flaky (Julien Gilli) https://github.com/nodejs/node-v0.x-archive/pull/25755\n* [a2f879f197] - test: mark recently failing tests as flaky (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [e7010bdf92] - test: runner should return 0 on flaky tests (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [c283c9bbb3] - test: support writing test output to file (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [eeaed586bb] - test: runner support for flaky tests (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [3bb8174b94] - test: refactor to use common testcfg (Timothy J Fontaine) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [df59d43586] - tools: pass constant to logger instead of string (Johan Bergstr\u00f6m) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [d103d4ed9a] - tools: fix test.py after v8 upgrade (Ben Noordhuis) https://github.com/nodejs/node-v0.x-archive/pull/25686\n* [8002192b4e] - win: manifest node.exe for Windows 8.1 (Alexis Campailla) https://github.com/nodejs/node/pull/2838\n* [66ec1dae8f] - win: add MSVS 2015 support (Rod Vagg) https://github.com/nodejs/node-v0.x-archive/pull/25857\n* [e192f61514] - win: fix custom actions for WiX older than 3.9 (Jo\u00e3o Reis) https://github.com/nodejs/node-v0.x-archive/pull/25569\n* [16bcd68dc5] - win: fix custom actions on Visual Studio != 2013 (Julien Gilli) https://github.com/nodejs/node-v0.x-archive/pull/25569\n* [517986c2f4] - win: backport bringing back xp/2k3 support (Bert Belder) https://github.com/nodejs/node-v0.x-archive/pull/25569\n* [10f251e8dd] - win: backport set env before generating projects (Alexis Campailla) https://github.com/nodejs/node-v0.x-archive/pull/25569\n\n\n<a id=\"0.10.40\"></a>\n## 2015-07-09, Version 0.10.40 (Maintenance)\n\n### Commits\n\n* [[`0cf9f27703`](https://github.com/nodejs/node/commit/0cf9f27703)] - **openssl**: upgrade to 1.0.1p [#25654](https://github.com/joyent/node/pull/25654)\n* [[`5a60e0d904`](https://github.com/nodejs/node/commit/5a60e0d904)] - **V8**: back-port JitCodeEvent patch from upstream (Ben Noordhuis) [#25588](https://github.com/joyent/node/pull/25588)\n* [[`18d413d299`](https://github.com/nodejs/node/commit/18d413d299)] - **win,msi**: create npm folder in AppData directory (Steven Rockarts) [#8838](https://github.com/joyent/node/pull/8838)\n\n<a id=\"0.10.39\"></a>\n## 2015-06-18, Version 0.10.39 (Maintenance)\n\n### Commits\n\n* [[`456c22f63f`](https://github.com/nodejs/node/commit/456c22f63f)] - **openssl**: upgrade to 1.0.1o (Addressing multiple CVEs) [#25523](https://github.com/joyent/node/pull/25523)\n* [[`9d19dfbfdb`](https://github.com/nodejs/node/commit/9d19dfbfdb)] - **install**: fix source path for openssl headers (Oguz Bastemur) [#14089](https://github.com/joyent/node/pull/14089)\n* [[`4028669531`](https://github.com/nodejs/node/commit/4028669531)] - **install**: make sure opensslconf.h is overwritten (Oguz Bastemur) [#14089](https://github.com/joyent/node/pull/14089)\n* [[`d38e865fce`](https://github.com/nodejs/node/commit/d38e865fce)] - **timers**: fix timeout when added in timer's callback (Julien Gilli) [#17203](https://github.com/joyent/node/pull/17203)\n* [[`e7c84f82c7`](https://github.com/nodejs/node/commit/e7c84f82c7)] - **windows**: broadcast WM_SETTINGCHANGE after install (Mathias K\u00fcsel) [#25100](https://github.com/joyent/node/pull/25100)\n\n<a id=\"0.10.38\"></a>\n## 2015-03-23, Version 0.10.38 (Maintenance)\n\n### Commits\n\n* [[`3b511a8ccd`](https://github.com/nodejs/node/commit/3b511a8ccd)] - **openssl**: upgrade to 1.0.1m (Addressing multiple CVES)\n\n<a id=\"0.10.37\"></a>\n## 2015-03-11, Version 0.10.37 (Maintenance)\n\n### Commits\n\n* [[`dcff5d565c`](https://github.com/nodejs/node/commit/dcff5d565c)] - uv: update to 0.10.36 (CVE-2015-0278) [#9274](https://github.com/joyent/node/pull/9274)\n* [[`f2a45caf2e`](https://github.com/nodejs/node/commit/f2a45caf2e)] - domains: fix stack clearing after error handled (Jonas Dohse) [#9364](https://github.com/joyent/node/pull/9364)\n* [[`d01a900078`](https://github.com/nodejs/node/commit/d01a900078)] - buffer: reword Buffer.concat error message (Chris Dickinson) [#8723](https://github.com/joyent/node/pull/8723)\n* [[`c8239c08d7`](https://github.com/nodejs/node/commit/c8239c08d7)] - console: allow Object.prototype fields as labels (Julien Gilli) [#9215](https://github.com/joyent/node/pull/9215)\n* [[`431eb172f9`](https://github.com/nodejs/node/commit/431eb172f9)] - V8: log version in profiler log file (Ben Noordhuis) [#9043](https://github.com/joyent/node/pull/9043)\n* [[`8bcd0a4c4a`](https://github.com/nodejs/node/commit/8bcd0a4c4a)] - http: fix performance regression for GET requests (Florin-Cristian Gavrila) [#9026](https://github.com/joyent/node/pull/9026)\n\n<a id=\"0.10.36\"></a>\n## 2015-01-26, Version 0.10.36 (Stable)\n\n### Commits\n\n* [[`deef605085`](https://github.com/nodejs/node/commit/deef605085)] - **openssl**: update to 1.0.1l\n* [[`45f1330425`](https://github.com/nodejs/node/commit/45f1330425)] - **v8**: Fix debugger and strict mode regression (Julien Gilli)\n* [[`6ebd85e105`](https://github.com/nodejs/node/commit/6ebd85e105)] - **v8**: don't busy loop in cpu profiler thread (Ben Noordhuis) [#8789](https://github.com/joyent/node/pull/8789)\n\n<a id=\"0.10.35\"></a>\n## 2014.12.22, Version 0.10.35 (Stable)\n\n* tls: re-add 1024-bit SSL certs removed by f9456a2 (Chris Dickinson)\n* timers: don't close interval timers when unrefd (Julien Gilli)\n* timers: don't mutate unref list while iterating it (Julien Gilli)\n\n<a id=\"0.10.34\"></a>\n## 2014.12.17, Version 0.10.34 (Stable)\n\nhttps://github.com/nodejs/node/commit/52795f8fcc2de77cf997e671ea58614e5e425dfe\n\n* uv: update to v0.10.30\n* zlib: upgrade to v1.2.8\n* child_process: check execFile args is an array (Sam Roberts)\n* child_process: check fork args is an array (Sam Roberts)\n* crypto: update root certificates (Ben Noordhuis)\n* domains: fix issues with abort on uncaught (Julien Gilli)\n* timers: Avoid linear scan in _unrefActive. (Julien Gilli)\n* timers: fix unref() memory leak (Trevor Norris)\n* v8: add api for aborting on uncaught exception (Julien Gilli)\n* debugger: fix when using \"use strict\" (Julien Gilli)\n\n<a id=\"0.10.33\"></a>\n## 2014.10.20, Version 0.10.33 (Stable)\n\nhttps://github.com/nodejs/node/commit/8d045a30e95602b443eb259a5021d33feb4df079\n\n* openssl: Update to 1.0.1j (Addressing multiple CVEs)\n* uv: Update to v0.10.29\n* child_process: properly support optional args (cjihrig)\n* crypto: Disable autonegotiation for SSLv2/3 by default (Fedor Indutny,\n\tTimothy J Fontaine, Alexis Campailla)\n\tThis is a behavior change, by default we will not allow the negotiation to\n\tSSLv2 or SSLv3. If you want this behavior, run Node.js with either\n\t`--enable-ssl2` or `--enable-ssl3` respectively.\n\tThis does not change the behavior for users specifically requesting\n\t`SSLv2_method` or `SSLv3_method`. While this behavior is not advised, it is\n\tassumed you know what you're doing since you're specifically asking to use\n\tthese methods.\n\n<a id=\"0.10.32\"></a>\n## 2014.09.16, Version 0.10.32 (Stable)\n\nhttps://github.com/nodejs/node/commit/0fe0d121551593c23a565db8397f85f17bb0f00e\n\n* npm: Update to 1.4.28\n* v8: fix a crash introduced by previous release (Fedor Indutny)\n* configure: add --openssl-no-asm flag (Fedor Indutny)\n* crypto: use domains for any callback-taking method (Chris Dickinson)\n* http: do not send `0\\r\\n\\r\\n` in TE HEAD responses (Fedor Indutny)\n* querystring: fix unescape override (Tristan Berger)\n* url: Add support for RFC 3490 separators (Mathias Bynens)\n\n<a id=\"0.10.31\"></a>\n## 2014.08.19, Version 0.10.31 (Stable)\n\nhttps://github.com/nodejs/node/commit/7fabdc23d843cb705d2d0739e7bbdaaf50aa3292\n\n* v8: backport CVE-2013-6668\n* openssl: Update to v1.0.1i\n* npm: Update to v1.4.23\n* cluster: disconnect should not be synchronous (Sam Roberts)\n* fs: fix fs.readFileSync fd leak when get RangeError (Jackson Tian)\n* stream: fix Readable.wrap objectMode falsy values (James Halliday)\n* timers: fix timers with non-integer delay hanging. (Julien Gilli)\n\n<a id=\"0.10.30\"></a>\n## 2014.07.31, Version 0.10.30 (Stable)\n\nhttps://github.com/nodejs/node/commit/bc0ff830aff1e016163d855e86ded5c98b0899e8\n\n* uv: Upgrade to v0.10.28\n* npm: Upgrade to v1.4.21\n* v8: Interrupts must not mask stack overflow.\n* Revert \"stream: start old-mode read in a next tick\" (Fedor Indutny)\n* buffer: fix sign overflow in `readUIn32BE` (Fedor Indutny)\n* buffer: improve {read,write}{U}Int* methods (Nick Apperson)\n* child_process: handle writeUtf8String error (Fedor Indutny)\n* deps: backport 4ed5fde4f from v8 upstream (Fedor Indutny)\n* deps: cherry-pick eca441b2 from OpenSSL (Fedor Indutny)\n* lib: remove and restructure calls to isNaN() (cjihrig)\n* module: eliminate double `getenv()` (Maciej Ma\u0142ecki)\n* stream2: flush extant data on read of ended stream (Chris Dickinson)\n* streams: remove unused require('assert') (Rod Vagg)\n* timers: backport f8193ab (Julien Gilli)\n* util.h: interface compatibility (Oguz Bastemur)\n* zlib: do not crash on write after close (Fedor Indutny)\n\n<a id=\"0.10.29\"></a>\n## 2014.06.05, Version 0.10.29 (Stable)\n\nhttps://github.com/nodejs/node/commit/ce82d6b8474bde7ac7df6d425fb88fb1bcba35bc\n\n* openssl: to 1.0.1h (CVE-2014-0224)\n* npm: upgrade to 1.4.14\n* utf8: Prevent Node from sending invalid UTF-8 (Felix Geisendo\u0308rfer)\n  - *NOTE* this introduces a breaking change, previously you could construct\n    invalid UTF-8 and invoke an error in a client that was expecting valid\n    UTF-8, now unmatched surrogate pairs are replaced with the unknown UTF-8\n    character. To restore the old functionality simply have NODE_INVALID_UTF8\n    environment variable set.\n\n* child_process: do not set args before throwing (Greg Sabia Tucker)\n* child_process: spawn() does not throw TypeError (Greg Sabia Tucker)\n* constants: export O_NONBLOCK (Fedor Indutny)\n* crypto: improve memory usage (Alexis Campailla)\n* fs: close file if fstat() fails in readFile() (cjihrig)\n* lib: name EventEmitter prototype methods (Ben Noordhuis)\n* tls: fix performance issue (Alexis Campailla)\n\n<a id=\"0.10.28\"></a>\n## 2014.05.01, Version 0.10.28 (Stable)\n\nhttps://github.com/nodejs/node/commit/b148cbe09d4657766fdb61575ba985734c2ff0a8\n\n* npm: upgrade to v1.4.9\n\n<a id=\"0.10.27\"></a>\n## 2014.05.01, Version 0.10.27 (Stable)\n\nhttps://github.com/nodejs/node/commit/cb7911f78ae96ef7a540df992cc1359ba9636e86\n\n* npm: upgrade to v1.4.8\n* openssl: upgrade to 1.0.1g\n* uv: update to v0.10.27\n* dns: fix certain txt entries (Fedor Indutny)\n* assert: Ensure reflexivity of deepEqual (Mike Pennisi)\n* child_process: fix deadlock when sending handles (Fedor Indutny)\n* child_process: fix sending handle twice (Fedor Indutny)\n* crypto: do not lowercase cipher/hash names (Fedor Indutny)\n* dtrace: workaround linker bug on FreeBSD (Fedor Indutny)\n* http: do not emit EOF non-readable socket (Fedor Indutny)\n* http: invoke createConnection when no agent (Nathan Rajlich)\n* stream: remove useless check (Brian White)\n* timer: don't reschedule timer bucket in a domain (Greg Brail)\n* url: treat \\ the same as / (isaacs)\n* util: format as Error if instanceof Error (Rod Vagg)\n\n<a id=\"0.10.26\"></a>\n## 2014.02.18, Version 0.10.26 (Stable)\n\nhttps://github.com/nodejs/node/commit/cc56c62ed879ad4f93b1fdab3235c43e60f48b7e\n\n* uv: Upgrade to v0.10.25 (Timothy J Fontaine)\n* npm: upgrade to 1.4.3 (isaacs)\n* v8: support compiling with VS2013 (Fedor Indutny)\n* cares: backport TXT parsing fix (Fedor Indutny)\n* crypto: throw on SignFinal failure (Fedor Indutny)\n* crypto: update root certificates (Ben Noordhuis)\n* debugger: Fix breakpoint not showing after restart (Farid Neshat)\n* fs: make unwatchFile() insensitive to path (iamdoron)\n* net: do not re-emit stream errors (Fedor Indutny)\n* net: make Socket destroy() re-entrance safe (Jun Ma)\n* net: reset `endEmitted` on reconnect (Fedor Indutny)\n* node: do not close stdio implicitly (Fedor Indutny)\n* zlib: avoid assertion in close (Fedor Indutny)\n\n<a id=\"0.10.25\"></a>\n## 2014.01.23, Version 0.10.25 (Stable)\n\nhttps://github.com/nodejs/node/commit/b0e5f195dfce3e2b99f5091373d49f6616682596\n\n* uv: Upgrade to v0.10.23\n* npm: Upgrade to v1.3.24\n* v8: Fix enumeration for objects with lots of properties\n* child_process: fix spawn() optional arguments (Sam Roberts)\n* cluster: report more errors to workers (Fedor Indutny)\n* domains: exit() only affects active domains (Ryan Graham)\n* src: OnFatalError handler must abort() (Timothy J Fontaine)\n* stream: writes may return false but forget to emit drain (Yang Tianyang)\n\n<a id=\"0.10.24\"></a>\n## 2013.12.18, Version 0.10.24 (Stable)\n\nhttps://github.com/nodejs/node/commit/b7fd6bc899ccb629d790c47aee06aba87e535c41\n\n* uv: Upgrade to v0.10.21\n* npm: upgrade to 1.3.21\n* v8: backport fix for CVE-2013-{6639|6640}\n* build: unix install node and dep library headers (Timothy J Fontaine)\n* cluster, v8: fix --logfile=%p.log (Ben Noordhuis)\n* module: only cache package main (Wyatt Preul)\n\n<a id=\"0.10.23\"></a>\n## 2013.12.12, Version 0.10.23 (Stable)\n\nhttps://github.com/nodejs/node/commit/0462bc23564e7e950a70ae4577a840b04db6c7c6\n\n* uv: Upgrade to v0.10.20 (Timothy J Fontaine)\n* npm: Upgrade to 1.3.17 (isaacs)\n* gyp: update to 78b26f7 (Timothy J Fontaine)\n* build: include postmortem symbols on linux (Timothy J Fontaine)\n* crypto: Make Decipher._flush() emit errors. (Kai Groner)\n* dgram: fix abort when getting `fd` of closed dgram (Fedor Indutny)\n* events: do not accept NaN in setMaxListeners (Fedor Indutny)\n* events: avoid calling `once` functions twice (Tim Wood)\n* events: fix TypeError in removeAllListeners (Jeremy Martin)\n* fs: report correct path when EEXIST (Fedor Indutny)\n* process: enforce allowed signals for kill (Sam Roberts)\n* tls: emit 'end' on .receivedShutdown (Fedor Indutny)\n* tls: fix potential data corruption (Fedor Indutny)\n* tls: handle `ssl.start()` errors appropriately (Fedor Indutny)\n* tls: reset NPN callbacks after SNI (Fedor Indutny)\n\n<a id=\"0.10.22\"></a>\n## 2013.11.12, Version 0.10.22 (Stable)\n\nhttps://github.com/nodejs/node/commit/cbff8f091c22fb1df6b238c7a1b9145db950fa65\n\n* npm: Upgrade to 1.3.14\n* uv: Upgrade to v0.10.19\n* child_process: don't assert on stale file descriptor events (Fedor Indutny)\n* darwin: Fix \"Not Responding\" in Mavericks activity monitor (Fedor Indutny)\n* debugger: Fix bug in sb() with unnamed script (Maxim Bogushevich)\n* repl: do not insert duplicates into completions (Maciej Ma\u0142ecki)\n* src: Fix memory leak on closed handles (Timothy J Fontaine)\n* tls: prevent stalls by using read(0) (Fedor Indutny)\n* v8: use correct timezone information on Solaris (Maciej Ma\u0142ecki)\n\n<a id=\"0.10.21\"></a>\n## 2013.10.18, Version 0.10.21 (Stable)\n\nhttps://github.com/nodejs/node/commit/e2da042844a830fafb8031f6c477eb4f96195210\n\n* uv: Upgrade to v0.10.18\n* crypto: clear errors from verify failure (Timothy J Fontaine)\n* dtrace: interpret two byte strings (Dave Pacheco)\n* fs: fix fs.truncate() file content zeroing bug (Ben Noordhuis)\n* http: provide backpressure for pipeline flood (isaacs)\n* tls: fix premature connection termination (Ben Noordhuis)\n\n<a id=\"0.10.20\"></a>\n## 2013.09.30, Version 0.10.20 (Stable)\n\nhttps://github.com/nodejs/node/commit/d7234c8d50a1af73f60d2d3c0cc7eed17429a481\n\n* tls: fix sporadic hang and partial reads (Fedor Indutny)\n  - fixes \"npm ERR! cb() never called!\"\n\n<a id=\"0.10.19\"></a>\n## 2013.09.24, Version 0.10.19 (Stable)\n\nhttps://github.com/nodejs/node/commit/6b5e6a5a3ec8d994c9aab3b800b9edbf1b287904\n\n* uv: Upgrade to v0.10.17\n* npm: upgrade to 1.3.11\n* readline: handle input starting with control chars (Eric Schrock)\n* configure: add mips-float-abi (soft, hard) option (Andrei Sedoi)\n* stream: objectMode transforms allow falsey values (isaacs)\n* tls: prevent duplicate values returned from read (Nathan Rajlich)\n* tls: NPN protocols are now local to connections (Fedor Indutny)\n\n<a id=\"0.10.18\"></a>\n## 2013.09.04, Version 0.10.18 (Stable)\n\nhttps://github.com/nodejs/node/commit/67a1f0c52e0708e2596f3f2134b8386d6112561e\n\n* uv: Upgrade to v0.10.15\n* stream: Don't crash on unset _events property (isaacs)\n* stream: Pass 'buffer' encoding with decoded writable chunks (isaacs)\n\n<a id=\"0.10.17\"></a>\n## 2013.08.21, Version 0.10.17 (Stable)\n\nhttps://github.com/nodejs/node/commit/469a4a5091a677df62be319675056b869c31b35c\n\n* uv: Upgrade v0.10.14\n* http_parser: Do not accept PUN/GEM methods as PUT/GET (Chris Dickinson)\n* tls: fix assertion when ssl is destroyed at read (Fedor Indutny)\n* stream: Throw on 'error' if listeners removed (isaacs)\n* dgram: fix assertion on bad send() arguments (Ben Noordhuis)\n* readline: pause stdin before turning off terminal raw mode (Daniel Chatfield)\n\n<a id=\"0.10.16\"></a>\n## 2013.08.16, Version 0.10.16 (Stable)\n\nhttps://github.com/nodejs/node/commit/50b4c905a4425430ae54db4906f88982309e128d\n\n* v8: back-port fix for CVE-2013-2882\n* npm: Upgrade to 1.3.8\n* crypto: fix assert() on malformed hex input (Ben Noordhuis)\n* crypto: fix memory leak in randomBytes() error path (Ben Noordhuis)\n* events: fix memory leak, don't leak event names (Ben Noordhuis)\n* http: Handle hex/base64 encodings properly (isaacs)\n* http: improve chunked res.write(buf) performance (Ben Noordhuis)\n* stream: Fix double pipe error emit (Eran Hammer)\n\n<a id=\"0.10.15\"></a>\n## 2013.07.25, Version 0.10.15 (Stable)\n\nhttps://github.com/nodejs/node/commit/2426d65af860bda7be9f0832a99601cc43c6cf63\n\n* src: fix process.getuid() return value (Ben Noordhuis)\n\n<a id=\"0.10.14\"></a>\n## 2013.07.25, Version 0.10.14 (Stable)\n\nhttps://github.com/nodejs/node/commit/fdf57f811f9683a4ec49a74dc7226517e32e6c9d\n\n* uv: Upgrade to v0.10.13\n* npm: Upgrade to v1.3.5\n* os: Don't report negative times in cpu info (Ben Noordhuis)\n* fs: Handle large UID and GID (Ben Noordhuis)\n* url: Fix edge-case when protocol is non-lowercase (Shuan Wang)\n* doc: Streams API Doc Rewrite (isaacs)\n* node: call MakeDomainCallback in all domain cases (Trevor Norris)\n* crypto: fix memory leak in LoadPKCS12 (Fedor Indutny)\n\n<a id=\"0.10.13\"></a>\n## 2013.07.09, Version 0.10.13 (Stable)\n\nhttps://github.com/nodejs/node/commit/e32660a984427d46af6a144983cf7b8045b7299c\n\n* uv: Upgrade to v0.10.12\n* npm: Upgrade to 1.3.2\n* windows: get proper errno (Ben Noordhuis)\n* tls: only wait for finish if we haven't seen it (Timothy J Fontaine)\n* http: Dump response when request is aborted (isaacs)\n* http: use an unref'd timer to fix delay in exit (Peter Rust)\n* zlib: level can be negative (Brian White)\n* zlib: allow zero values for level and strategy (Brian White)\n* buffer: add comment explaining buffer alignment (Ben Noordhuis)\n* string_bytes: properly detect 64bit (Timothy J Fontaine)\n* src: fix memory leak in UsingDomains() (Ben Noordhuis)\n\n<a id=\"0.10.12\"></a>\n## 2013.06.18, Version 0.10.12 (Stable)\n\nhttps://github.com/nodejs/node/commit/a088cf4f930d3928c97d239adf950ab43e7794aa\n\n* npm: Upgrade to 1.2.32\n* readline: make `ctrl + L` clear the screen (Yuan Chuan)\n* v8: add setVariableValue debugger command (Ben Noordhuis)\n* net: Do not destroy socket mid-write (isaacs)\n* v8: fix build for mips32r2 architecture (Andrei Sedoi)\n* configure: fix cross-compilation host_arch_cc() (Andrei Sedoi)\n\n<a id=\"0.10.11\"></a>\n## 2013.06.13, Version 0.10.11 (Stable)\n\nhttps://github.com/nodejs/node/commit/d9d5bc465450ae5d60da32e9ffcf71c2767f1fad\n\n* uv: upgrade to 0.10.11\n* npm: Upgrade to 1.2.30\n* openssl: add missing configuration pieces for MIPS (Andrei Sedoi)\n* Revert \"http: remove bodyHead from 'upgrade' events\" (isaacs)\n* v8: fix pointer arithmetic undefined behavior (Trevor Norris)\n* crypto: fix utf8/utf-8 encoding check (Ben Noordhuis)\n* net: Fix busy loop on POLLERR|POLLHUP on older linux kernels (Ben Noordhuis, isaacs)\n\n<a id=\"0.10.10\"></a>\n## 2013.06.04, Version 0.10.10 (Stable)\n\nhttps://github.com/nodejs/node/commit/25e51c396aa23018603baae2b1d9390f5d9db496\n\n* uv: Upgrade to 0.10.10\n* npm: Upgrade to 1.2.25\n* url: Properly parse certain oddly formed urls (isaacs)\n* stream: unshift('') is a noop (isaacs)\n\n<a id=\"0.10.9\"></a>\n## 2013.05.30, Version 0.10.9 (Stable)\n\nhttps://github.com/nodejs/node/commit/878ffdbe6a8eac918ef3a7f13925681c3778060b\n\n* npm: Upgrade to 1.2.24\n* uv: Upgrade to v0.10.9\n* repl: fix JSON.parse error check (Brian White)\n* tls: proper .destroySoon (Fedor Indutny)\n* tls: invoke write cb only after opposite read end (Fedor Indutny)\n* tls: ignore .shutdown() syscall error (Fedor Indutny)\n\n<a id=\"0.10.8\"></a>\n## 2013.05.24, Version 0.10.8 (Stable)\n\nhttps://github.com/nodejs/node/commit/30d9e9fdd9d4c33d3d95a129d021cd8b5b91eddb\n\n* v8: update to 3.14.5.9\n* uv: upgrade to 0.10.8\n* npm: Upgrade to 1.2.23\n* http: remove bodyHead from 'upgrade' events (Nathan Zadoks)\n* http: Return true on empty writes, not false (isaacs)\n* http: save roundtrips, convert buffers to strings (Ben Noordhuis)\n* configure: respect the --dest-os flag consistently (Nathan Rajlich)\n* buffer: throw when writing beyond buffer (Trevor Norris)\n* crypto: Clear error after DiffieHellman key errors (isaacs)\n* string_bytes: strip padding from base64 strings (Trevor Norris)\n\n<a id=\"0.10.7\"></a>\n## 2013.05.17, Version 0.10.7 (Stable)\n\nhttps://github.com/nodejs/node/commit/d2fdae197ac542f686ee06835d1153dd43b862e5\n\n* uv: upgrade to v0.10.7\n* npm: Upgrade to 1.2.21\n* crypto: Don't ignore verify encoding argument (isaacs)\n* buffer, crypto: fix default encoding regression (Ben Noordhuis)\n* timers: fix setInterval() assert (Ben Noordhuis)\n\n<a id=\"0.10.6\"></a>\n## 2013.05.14, Version 0.10.6 (Stable)\n\nhttps://github.com/nodejs/node/commit/5deb1672f2b5794f8be19498a425ea4dc0b0711f\n\n* module: Deprecate require.extensions (isaacs)\n* stream: make Readable.wrap support objectMode, empty streams (Daniel Moore)\n* child_process: fix handle delivery (Ben Noordhuis)\n* crypto: Fix performance regression (isaacs)\n* src: DRY string encoding/decoding (isaacs)\n\n<a id=\"0.10.5\"></a>\n## 2013.04.23, Version 0.10.5 (Stable)\n\nhttps://github.com/nodejs/node/commit/deeaf8fab978e3cadb364e46fb32dafdebe5f095\n\n* uv: Upgrade to 0.10.5 (isaacs)\n* build: added support for Visual Studio 2012 (Miroslav Bajto\u0161)\n* http: Don't try to destroy nonexistent sockets (isaacs)\n* crypto: LazyTransform on properties, not methods (isaacs)\n* assert: put info in err.message, not err.name (Ryan Doenges)\n* dgram: fix no address bind() (Ben Noordhuis)\n* handle_wrap: fix NULL pointer dereference (Ben Noordhuis)\n* os: fix unlikely buffer overflow in os.type() (Ben Noordhuis)\n* stream: Fix unshift() race conditions (isaacs)\n\n<a id=\"0.10.4\"></a>\n## 2013.04.11, Version 0.10.4 (Stable)\n\nhttps://github.com/nodejs/node/commit/9712aa9f76073c30850b20a188b1ed12ffb74d17\n\n* uv: Upgrade to 0.10.4\n* npm: Upgrade to 1.2.18\n* v8: Avoid excessive memory growth in JSON.parse (Fedor Indutny)\n* child_process, cluster: fix O(n*m) scan of cmd string (Ben Noordhuis)\n* net: fix socket.bytesWritten Buffers support (Fedor Indutny)\n* buffer: fix offset checks (\u0141ukasz Walukiewicz)\n* stream: call write cb before finish event (isaacs)\n* http: Support write(data, 'hex') (isaacs)\n* crypto: dh secret should be left-padded (Fedor Indutny)\n* process: expose NODE_MODULE_VERSION in process.versions (Rod Vagg)\n* crypto: fix constructor call in crypto streams (Andreas Madsen)\n* net: account for encoding in .byteLength (Fedor Indutny)\n* net: fix buffer iteration in bytesWritten (Fedor Indutny)\n* crypto: zero is not an error if writing 0 bytes (Fedor Indutny)\n* tls: Re-enable check of CN-ID in cert verification (Tobias M\u00fcllerleile)\n\n<a id=\"0.10.3\"></a>\n## 2013.04.03, Version 0.10.3 (Stable)\n\nhttps://github.com/nodejs/node/commit/d4982f6f5e4a9a703127489a553b8d782997ea43\n\n* npm: Upgrade to 1.2.17\n* child_process: acknowledge sent handles (Fedor Indutny)\n* etw: update prototypes to match dtrace provider (Timothy J Fontaine)\n* dtrace: pass more arguments to probes (Dave Pacheco)\n* build: allow building with dtrace on osx (Dave Pacheco)\n* http: Remove legacy ECONNRESET workaround code (isaacs)\n* http: Ensure socket cleanup on client response end (isaacs)\n* tls: Destroy socket when encrypted side closes (isaacs)\n* repl: isSyntaxError() catches \"strict mode\" errors (Nathan Rajlich)\n* crypto: Pass options to ctor calls (isaacs)\n* src: tie process.versions.uv to uv_version_string() (Ben Noordhuis)\n\n<a id=\"0.10.2\"></a>\n## 2013.03.28, Version 0.10.2 (Stable)\n\nhttps://github.com/nodejs/node/commit/1e0de9c426e07a260bbec2d2196c2d2db8eb8886\n\n* npm: Upgrade to 1.2.15\n* uv: Upgrade to 0.10.3\n* tls: handle SSL_ERROR_ZERO_RETURN (Fedor Indutny)\n* tls: handle errors before calling C++ methods (Fedor Indutny)\n* tls: remove harmful unnecessary bounds checking (Marcel Laverdet)\n* crypto: make getCiphers() return non-SSL ciphers (Ben Noordhuis)\n* crypto: check randomBytes() size argument (Ben Noordhuis)\n* timers: do not calculate Timeout._when property (Alexey Kupershtokh)\n* timers: fix off-by-one ms error (Alexey Kupershtokh)\n* timers: handle signed int32 overflow in enroll() (Fedor Indutny)\n* stream: Fix stall in Transform under very specific conditions (Gil Pedersen)\n* stream: Handle late 'readable' event listeners (isaacs)\n* stream: Fix early end in Writables on zero-length writes (isaacs)\n* domain: fix domain callback from MakeCallback (Trevor Norris)\n* child_process: don't emit same handle twice (Ben Noordhuis)\n* child_process: fix sending utf-8 to child process (Ben Noordhuis)\n\n<a id=\"0.10.1\"></a>\n## 2013.03.21, Version 0.10.1 (Stable)\n\nhttps://github.com/nodejs/node/commit/c274d1643589bf104122674a8c3fd147527a667d\n\n* npm: upgrade to 1.2.15\n* crypto: Improve performance of non-stream APIs (Fedor Indutny)\n* tls: always reset this.ssl.error after handling (Fedor Indutny)\n* tls: Prevent mid-stream hangs (Fedor Indutny, isaacs)\n* net: improve arbitrary tcp socket support (Ben Noordhuis)\n* net: handle 'finish' event only after 'connect' (Fedor Indutny)\n* http: Don't hot-path end() for large buffers (isaacs)\n* fs: Missing cb errors are deprecated, not a throw (isaacs)\n* fs: make write/appendFileSync correctly set file mode (Raymond Feng)\n* stream: Return self from readable.wrap (isaacs)\n* stream: Never call decoder.end() multiple times (Gil Pedersen)\n* windows: enable watching signals with process.on('SIGXYZ') (Bert Belder)\n* node: revert removal of MakeCallback (Trevor Norris)\n* node: Unwrap without aborting in handle fd getter (isaacs)\n\n<a id=\"0.10.0\"></a>\n## 2013.03.11, Version 0.10.0 (Stable)\n\nhttps://github.com/nodejs/node/commit/163ca274230fce536afe76c64676c332693ad7c1\n\n* npm: Upgrade to 1.2.14\n* core: Append filename properly in dlopen on windows (isaacs)\n* zlib: Manage flush flags appropriately (isaacs)\n* domains: Handle errors thrown in nested error handlers (isaacs)\n* buffer: Strip high bits when converting to ascii (Ben Noordhuis)\n* win/msi: Enable modify and repair (Bert Belder)\n* win/msi: Add feature selection for various node parts (Bert Belder)\n* win/msi: use consistent registry key paths (Bert Belder)\n* child_process: support sending dgram socket (Andreas Madsen)\n* fs: Raise EISDIR on Windows when calling fs.read/write on a dir (isaacs)\n* unix: fix strict aliasing warnings, macro-ify functions (Ben Noordhuis)\n* unix: honor UV_THREADPOOL_SIZE environment var (Ben Noordhuis)\n* win/tty: fix typo in color attributes enumeration (Bert Belder)\n* win/tty: don't touch insert mode or quick edit mode (Bert Belder)\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/changelogs/CHANGELOG_ARCHIVE.md": "# Node.js ChangeLog Archive\n\n<table>\n<tr>\n<th>v0.11</th>\n<th>v0.9</th>\n<th>v0.8</th>\n<th>v0.7</th>\n<th>v0.6</th>\n<th>v0.5</th>\n<th>&lt;= v0.4</th>\n</tr>\n<tr>\n<td valign=\"top\">\n<a href=\"#0.11.14\">0.11.14</a><br/>\n<a href=\"#0.11.13\">0.11.13</a><br/>\n<a href=\"#0.11.12\">0.11.12</a><br/>\n<a href=\"#0.11.11\">0.11.11</a><br/>\n<a href=\"#0.11.10\">0.11.10</a><br/>\n<a href=\"#0.11.9\">0.11.9</a><br/>\n<a href=\"#0.11.8\">0.11.8</a><br/>\n<a href=\"#0.11.7\">0.11.7</a><br/>\n<a href=\"#0.11.6\">0.11.6</a><br/>\n<a href=\"#0.11.5\">0.11.5</a><br/>\n<a href=\"#0.11.4\">0.11.4</a><br/>\n<a href=\"#0.11.3\">0.11.3</a><br/>\n<a href=\"#0.11.2\">0.11.2</a><br/>\n<a href=\"#0.11.1\">0.11.1</a><br/>\n<a href=\"#0.11.0\">0.11.0</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.9.12\">0.9.12</a><br/>\n<a href=\"#0.9.11\">0.9.11</a><br/>\n<a href=\"#0.9.10\">0.9.10</a><br/>\n<a href=\"#0.9.9\">0.9.9</a><br/>\n<a href=\"#0.9.8\">0.9.8</a><br/>\n<a href=\"#0.9.7\">0.9.7</a><br/>\n<a href=\"#0.9.6\">0.9.6</a><br/>\n<a href=\"#0.9.5\">0.9.5</a><br/>\n<a href=\"#0.9.4\">0.9.4</a><br/>\n<a href=\"#0.9.3\">0.9.3</a><br/>\n<a href=\"#0.9.2\">0.9.2</a><br/>\n<a href=\"#0.9.1\">0.9.1</a><br/>\n<a href=\"#0.9.0\">0.9.0</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.8.25\">0.8.25</a><br/>\n<a href=\"#0.8.24\">0.8.24</a><br/>\n<a href=\"#0.8.23\">0.8.23</a><br/>\n<a href=\"#0.8.22\">0.8.22</a><br/>\n<a href=\"#0.8.21\">0.8.21</a><br/>\n<a href=\"#0.8.20\">0.8.20</a><br/>\n<a href=\"#0.8.19\">0.8.19</a><br/>\n<a href=\"#0.8.18\">0.8.18</a><br/>\n<a href=\"#0.8.17\">0.8.17</a><br/>\n<a href=\"#0.8.16\">0.8.16</a><br/>\n<a href=\"#0.8.15\">0.8.15</a><br/>\n<a href=\"#0.8.14\">0.8.14</a><br/>\n<a href=\"#0.8.13\">0.8.13</a><br/>\n<a href=\"#0.8.12\">0.8.12</a><br/>\n<a href=\"#0.8.11\">0.8.11</a><br/>\n<a href=\"#0.8.10\">0.8.10</a><br/>\n<a href=\"#0.8.9\">0.8.9</a><br/>\n<a href=\"#0.8.8\">0.8.8</a><br/>\n<a href=\"#0.8.7\">0.8.7</a><br/>\n<a href=\"#0.8.6\">0.8.6</a><br/>\n<a href=\"#0.8.5\">0.8.5</a><br/>\n<a href=\"#0.8.4\">0.8.4</a><br/>\n<a href=\"#0.8.3\">0.8.3</a><br/>\n<a href=\"#0.8.2\">0.8.2</a><br/>\n<a href=\"#0.8.1\">0.8.1</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.7.12\">0.7.12</a><br/>\n<a href=\"#0.7.11\">0.7.11</a><br/>\n<a href=\"#0.7.10\">0.7.10</a><br/>\n<a href=\"#0.7.9\">0.7.9</a><br/>\n<a href=\"#0.7.8\">0.7.8</a><br/>\n<a href=\"#0.7.7\">0.7.7</a><br/>\n<a href=\"#0.7.6\">0.7.6</a><br/>\n<a href=\"#0.7.5\">0.7.5</a><br/>\n<a href=\"#0.7.4\">0.7.4</a><br/>\n<a href=\"#0.7.3\">0.7.3</a><br/>\n<a href=\"#0.7.2\">0.7.2</a><br/>\n<a href=\"#0.7.1\">0.7.1</a><br/>\n<a href=\"#0.7.0\">0.7.0</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.6.20\">0.6.20</a><br/>\n<a href=\"#0.6.19\">0.6.19</a><br/>\n<a href=\"#0.6.18\">0.6.18</a><br/>\n<a href=\"#0.6.17\">0.6.17</a><br/>\n<a href=\"#0.6.16\">0.6.16</a><br/>\n<a href=\"#0.6.15\">0.6.15</a><br/>\n<a href=\"#0.6.14\">0.6.14</a><br/>\n<a href=\"#0.6.13\">0.6.13</a><br/>\n<a href=\"#0.6.12\">0.6.12</a><br/>\n<a href=\"#0.6.11\">0.6.11</a><br/>\n<a href=\"#0.6.10\">0.6.10</a><br/>\n<a href=\"#0.6.9\">0.6.9</a><br/>\n<a href=\"#0.6.8\">0.6.8</a><br/>\n<a href=\"#0.6.7\">0.6.7</a><br/>\n<a href=\"#0.6.6\">0.6.6</a><br/>\n<a href=\"#0.6.5\">0.6.5</a><br/>\n<a href=\"#0.6.4\">0.6.4</a><br/>\n<a href=\"#0.6.3\">0.6.3</a><br/>\n<a href=\"#0.6.2\">0.6.2</a><br/>\n<a href=\"#0.6.1\">0.6.1</a><br/>\n<a href=\"#0.6.0\">0.6.0</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.5.10\">0.5.10</a><br/>\n<a href=\"#0.5.9\">0.5.9</a><br/>\n<a href=\"#0.5.8\">0.5.8</a><br/>\n<a href=\"#0.5.7\">0.5.7</a><br/>\n<a href=\"#0.5.6\">0.5.6</a><br/>\n<a href=\"#0.5.5\">0.5.5</a><br/>\n<a href=\"#0.5.4\">0.5.4</a><br/>\n<a href=\"#0.5.3\">0.5.3</a><br/>\n<a href=\"#0.5.2\">0.5.2</a><br/>\n<a href=\"#0.5.1\">0.5.1</a><br/>\n<a href=\"#0.5.0\">0.5.0</a><br/>\n</td>\n<td valign=\"top\">\n<a href=\"#0.4.12\">0.4.12</a><br/>\n<a href=\"#0.4.11\">0.4.11</a><br/>\n<a href=\"#0.4.10\">0.4.10</a><br/>\n<a href=\"#0.4.9\">0.4.9</a><br/>\n<a href=\"#0.4.8\">0.4.8</a><br/>\n<a href=\"#0.4.7\">0.4.7</a><br/>\n<a href=\"#0.4.6\">0.4.6</a><br/>\n<a href=\"#0.4.5\">0.4.5</a><br/>\n<a href=\"#0.4.4\">0.4.4</a><br/>\n<a href=\"#0.4.3\">0.4.3</a><br/>\n<a href=\"#0.4.2\">0.4.2</a><br/>\n<a href=\"#0.4.1\">0.4.1</a><br/>\n<a href=\"#0.4.0\">0.4.0</a><br/>\n<a href=\"#0.3.8\">0.3.8</a><br/>\n<a href=\"#0.3.7\">0.3.7</a><br/>\n<a href=\"#0.3.6\">0.3.6</a><br/>\n<a href=\"#0.3.5\">0.3.5</a><br/>\n<a href=\"#0.3.4\">0.3.4</a><br/>\n<a href=\"#0.3.3\">0.3.3</a><br/>\n<a href=\"#0.3.2\">0.3.2</a><br/>\n<a href=\"#0.3.1\">0.3.1</a><br/>\n<a href=\"#0.3.0\">0.3.0</a><br/>\n<a href=\"#0.2.0\">0.2.0</a><br/>\n<a href=\"#0.1.x\">&lt;= 0.1.x</a><br/>\n</td>\n</tr>\n</table>\n\n* Other Versions\n  * [6.x](CHANGELOG_V6.md)\n  * [5.x](CHANGELOG_V5.md)\n  * [4.x](CHANGELOG_V4.md)\n  * [0.12.x](CHANGELOG_V012.md)\n  * [0.10.x](CHANGELOG_V010.md)\n  * [io.js](CHANGELOG_IOJS.md)\n\n<a id=\"0.11.14\"></a>\n## 2014.09.24, Version 0.11.14 (Unstable)\n\n* uv: Upgrade to v1.0.0-rc1\n* http_parser: Upgrade to v2.3.0\n* npm: Upgrade to v2.0.0\n* openssl: Upgrade to v1.0.1i\n* v8: Upgrade to 3.26.33\n* Add fast path for simple URL parsing (Gabriel Wicke)\n* Added support for options parameter in console.dir() (Xavi Magrinya\u0300)\n* Cluster: fix shared handles on Windows (Alexis Campailla)\n* buffer: Fix incorrect Buffer.compare behavior (Feross Aboukhadijeh)\n* buffer: construct new buffer from buffer toJSON() output (cjihrig)\n* buffer: improve Buffer constructor (Kang-Hao Kenny)\n* build: linking CoreFoundation framework for OSX (Thorsten Lorenz)\n* child_process: accept uid/gid everywhere (Fedor Indutny)\n* child_process: add path to spawn ENOENT Error (Ryan Cole)\n* child_process: copy spawnSync() cwd option to proper buffer (cjihrig)\n* child_process: do not access stderr when stdio set to 'ignore' (cjihrig)\n* child_process: don't throw on EAGAIN (Charles)\n* child_process: don't throw on EMFILE/ENFILE (Ben Noordhuis)\n* child_process: use full path for cmd.exe on Win32 (Ed Morley)\n* cluster: allow multiple calls to setupMaster() (Ryan Graham)\n* cluster: centralize removal from workers list. (Julien Gilli)\n* cluster: enable error/message events using .worker (cjihrig)\n* cluster: include settings object in 'setup' event (Ryan Graham)\n* cluster: restore v0.10.x setupMaster() behaviour (Ryan Graham)\n* cluster: support options in Worker constructor (cjihrig)\n* cluster: test events emit on cluster.worker (Sam Roberts)\n* console: console.dir() accepts options object (Xavi Magrinya\u0300)\n* crypto: add `honorCipherOrder` argument (Fedor Indutny)\n* crypto: allow padding in RSA methods (Fedor Indutny)\n* crypto: clarify RandomBytes() error msg (Mickael van der Beek)\n* crypto: never store pointer to conn in SSL_CTX (Fedor Indutny)\n* crypto: unsigned value can't be negative (Brian White)\n* dgram: remove new keyword from errnoException (Jackson Tian)\n* dns: always set variable family in lookup() (cjihrig)\n* dns: include host name in error message if available (Maciej Ma\u0142ecki)\n* dns: introduce lookupService function (Sa\u00fal Ibarra Corretg\u00e9)\n* dns: send lookup c-ares errors to callback (Chris Dickinson)\n* dns: throw if hostname is not string or falsey (cjihrig)\n* events: Output the event that is leaking (Arnout Kazemier)\n* fs: close file if fstat() fails in readFile() (cjihrig)\n* fs: fs.readFile should not throw uncaughtException (Jackson Tian)\n* http: add 308 status_code, see RFC7238 (Yazhong Liu)\n* http: don't default OPTIONS to chunked encoding (Nick Muerdter)\n* http: fix bailout for writeHead (Alex Kocharin)\n* http: remove unused code block (Fedor Indutny)\n* http: write() after end() emits an error. (Julien Gilli)\n* lib, src: add vm.runInDebugContext() (Ben Noordhuis)\n* lib: noisy deprecation of child_process customFds (Ryan Graham)\n* module: don't require fs several times (Robert Kowalski)\n* net,dgram: workers can listen on exclusive ports (cjihrig)\n* net,stream: add isPaused, don't read() when paused (Chris Dickinson)\n* net: Ensure consistent binding to IPV6 if address is absent (Raymond Feng)\n* net: add remoteFamily for socket (Jackson Tian)\n* net: don't emit listening if handle is closed (Eli Skeggs)\n* net: don't prefer IPv4 addresses during resolution (cjihrig)\n* net: don't throw on net.Server.close() (cjihrig)\n* net: reset `errorEmitted` on reconnect (Ed Umansky)\n* node: set names for prototype methods (Trevor Norris)\n* node: support v8 microtask queue (Vladimir Kurchatkin)\n* path: fix slice OOB in trim (Lucio M. Tato)\n* path: isAbsolute() should always return boolean (Herman Lee)\n* process: throw TypeError if kill pid not a number (Sam Roberts)\n* querystring: custom encode and decode (fengmk2)\n* querystring: do not add sep for empty array (cjihrig)\n* querystring: remove prepended ? from query field (Ezequiel Rabinovich)\n* readline: fix close event of readline.Interface() (Yazhong Liu)\n* readline: fixes scoping bug (Dan Kaplun)\n* readline: implements keypress buffering (Dan Kaplun)\n* repl: fix multi-line input (Fedor Indutny)\n* repl: fix overwrite for this._prompt (Yazhong Liu)\n* repl: proper `setPrompt()` and `multiline` support (Fedor Indutny)\n* stream: don't try to finish if buffer is not empty (Vladimir Kurchatkin)\n* stream: only end reading on null, not undefined (Jonathan Reem)\n* streams: set default hwm properly for Duplex (Andrew Oppenlander)\n* string_bytes: ucs2 support big endian (Andrew Low)\n* tls, crypto: add DHE support (Shigeki Ohtsu)\n* tls: `checkServerIdentity` option (Trevor Livingston)\n* tls: add DHE-RSA-AES128-SHA256 to the def ciphers (Shigeki Ohtsu)\n* tls: better error reporting at cert validation (Fedor Indutny)\n* tls: support multiple keys/certs (Fedor Indutny)\n* tls: throw an error, not string (Jackson Tian)\n* udp: make it possible to receive empty udp packets (Andrius Bentkus)\n* url: treat \\ the same as / (isaacs)\n\n<a id=\"0.11.13\"></a>\n## 2014.05.01, Version 0.11.13 (Unstable)\n\nhttps://github.com/nodejs/node/commit/99c9930ad626e2796af23def7cac19b65c608d18\n\n* v8: upgrade to 3.24.35.22\n* buffer: add compare and equals methods (Sean McArthur)\n* buffer: improve {read,write}{U}Int* methods (Nick Apperson)\n* buffer: return uint if MSB is 1 in readUInt32 (goussardg)\n* buffer: truncate buffer after string decode (Fedor Indutny)\n* child_process: fix assertion error in spawnSync (Shigeki Ohtsu)\n* crypto: fix memory leak in CipherBase::Final (Fedor Indutny)\n* crypto: improve error messages (Ingmar Runge)\n* crypto: move `createCredentials` to tls (Fedor Indutny)\n* crypto: work around OpenSSL oddness (Fedor Indutny)\n* dgram: introduce `reuseAddr` option (Fedor Indutny)\n* domain: don't crash on \"throw null\" (Alex Kocharin)\n* events: check if _events is an own property (Vladimir Kurchatkin)\n* fs: improve performance of all stat functions (James Pickard)\n* fs: return blksize on stats object (Trevor Norris)\n* http: add request.flush() method (Ben Noordhuis)\n* http: better client \"protocol not supported\" error (Nathan Rajlich)\n* http: use defaultAgent.protocol in protocol check (Nathan Rajlich)\n* main: Handle SIGINT properly. (Geir Hauge)\n* net: bind to `::` TCP address by default (Fedor Indutny)\n* readline: consider newlines for cursor position (Yazhong Liu)\n* stream: split `objectMode` for Duplex (Vladimir Kurchatkin)\n* tls: `getPeerCertificate(detailed)` (Fedor Indutny)\n* tls: do not call SNICallback unless present (Fedor Indutny)\n* tls: force readable/writable to `true` (Fedor Indutny)\n* tls: support OCSP on client and server (Fedor Indutny)\n* util: made util.isArray a direct alias for Array.isArray (Evan Carroll)\n\n<a id=\"0.11.12\"></a>\n## 2014.03.11, Version 0.11.12 (Unstable)\n\nhttps://github.com/nodejs/node/commit/7d6b8db40f32e817ff145b7cfe6b3aec3179fba7\n\n* uv: Upgrade to v0.11.22 (Timothy J Fontaine)\n* buffer: allow toString to accept Infinity for end (Brian White)\n* child_process: add spawnSync/execSync (Bert Belder, Timothy J Fontaine)\n* cluster: handle bind errors on Windows (Alexis Campailla)\n* contextify: handle infinite recursion errors (Fedor Indutny)\n* crypto: allow custom generator for DiffieHellman (Brian White)\n* crypto: allow setting add'l authenticated data (Brian White)\n* crypto: fix CipherFinal return value check (Brian White)\n* crypto: make NewSessionDoneCb public (Fedor Indutny)\n* dgram: pass the bytes sent to the send callback (Timothy J Fontaine)\n* dns: validate arguments in resolver (Kenan Sulayman)\n* dns: verify argument is valid function in resolve (Kenan Sulayman)\n* http: avoid duplicate keys in writeHead (David Bjo\u0308rklund)\n* net: add localPort to connect options (Timothy J Fontaine)\n* node: do not print SyntaxError hints to stderr (Fedor Indutny)\n* node: invoke `beforeExit` again if loop was active (Fedor Indutny)\n* node: make AsyncListenerInst field more explicit (Trevor Norris)\n* os: networkInterfaces include scopeid for ipv6 (Xidorn Quan)\n* process: allow changing `exitCode` in `on('exit')` (Fedor Indutny)\n* readline: fix `line` event, if input emit 'end' (Yazhong Liu)\n* src: add tracing.v8.on('gc') statistics hooks (Ben Noordhuis)\n* src: add v8.getHeapStatistics() function (Ben Noordhuis)\n* src: emit 'beforeExit' event on process object (Ben Noordhuis)\n* src: move AsyncListener from process to tracing (Trevor Norris)\n* tls: fix crash in SNICallback (Fedor Indutny)\n* tls: introduce asynchronous `newSession` (Fedor Indutny)\n* util: show meaningful values for boxed primitives (Nathan Rajlich)\n* vm: don't copy Proxy object from parent context (Ben Noordhuis)\n* windows: make stdout/sterr pipes blocking (Alexis Campailla)\n* zlib: add sync versions for convenience methods (Nikolai Vavilov)\n\n<a id=\"0.11.11\"></a>\n## 2014.01.29, Version 0.11.11 (Unstable)\n\nhttps://github.com/nodejs/node/commit/b46e77421581ea358e221a8a843d057c747f7e90\n\n* v8: Upgrade to 3.22.24.19\n* http_parser: Upgrade to 2.2.1\n* openssl: Upgrade to 1.0.1f\n* uv: Upgrade to 0.11.18\n* async-listener: revamp of subsystem (Trevor Norris)\n* node: do not ever close stdio (Fedor Indutny)\n* http: use writev on chunked encoding (Trevor Norris)\n* async_wrap/timers: remove Add/RemoveAsyncListener (Trevor Norris)\n* child_process: better error reporting for exec (Fedor Indutny)\n* crypto: add newline to cert and key if not present (Fedor Indutny)\n* crypto: clear error in GetPeerCertificate (Fedor Indutny)\n* crypto: honor default ciphers in client mode (Jacob Hoffman-Andrews)\n* crypto: introduce .setEngine(engine, [flags]) (Fedor Indutny)\n* crypto: support custom pbkdf2 digest methods (Ben Noordhuis)\n* domain: fix off-by-one in Domain.exit() (Ryan Graham)\n* http: concatenate duplicate headers by default (Alex Kocharin)\n* http: do not emit EOF non-readable socket (Fedor Indutny)\n* node: fix argument parsing with -p arg (Alexis Campailla)\n* path: improve POSIX path.join() performance (Jo Liss)\n* tls: emit `clientError` on early socket close (Fedor Indutny)\n* tls: introduce `.setMaxSendFragment(size)` (Fedor Indutny)\n* tls: make cert/pfx optional in tls.createServer() (Ben Noordhuis)\n* tls: process accumulated input (Fedor Indutny)\n* tls: show human-readable error messages (Ben Noordhuis)\n* util: handle escaped forward slashes correctly (Tom Gallacher)\n\n<a id=\"0.11.10\"></a>\n## 2013.12.31, Version 0.11.10 (Unstable)\n\nhttps://github.com/nodejs/node/commit/66931791f06207d1cdfea5ec1529edf3c94026d3\n\n* http_parser: update to 2.2\n* uv: Upgrade to v0.11.17\n* v8: Upgrade to 3.22.24.10\n* buffer: optimize writeInt* methods (Paul Loyd)\n* child_process: better error handling (Alexis Campailla)\n* cluster: do not synchronously emit 'setup' event (Sam Roberts)\n* cluster: restore backwards compatibility and various fixes (Sam Roberts)\n* crypto: remove unnecessary OpenSSL_add_all_digests (Yorkie)\n* crypto: support GCM authenticated encryption mode. (Ingmar Runge)\n* dns: add resolveSoa and 'SOA' rrtype (Tu\u011frul Topuz)\n* events: move EE c'tor guts to EventEmitter.init (Bert Belder)\n* http: DELETE shouldn't default to chunked encoding (Lalit Kapoor)\n* http: parse the status message in a http response. (Cam Swords)\n* node: fix removing AsyncListener in callback (Vladimir Kurchatkin)\n* node: follow specification, zero-fill ArrayBuffers (Trevor Norris)\n* openssl: use ASM optimized routines (Fedor Indutny)\n* process: allow nextTick infinite recursion (Trevor Norris)\n* querystring: remove `name` from `stringify()` (Yorkie)\n* timers: setImmediate v8 optimization fix (pflannery)\n* tls: add serialNumber to getPeerCertificate() (Ben Noordhuis)\n* tls: reintroduce socket.encrypted (Fedor Indutny)\n* tls: fix handling of asterisk in SNI context (Fedor Indutny)\n* util: Format negative zero as '-0' (David Chan)\n* vm: fix race condition in timeout (Alexis Campailla)\n* windows: fix dns lookup of localhost with ipv6 (Alexis Campailla)\n\n<a id=\"0.11.9\"></a>\n## 2013.11.20, Version 0.11.9 (Unstable)\n\nhttps://github.com/nodejs/node/commit/dcfd032bdd69dfb38c120e18438d6316ae522edc\n\n* uv: upgrade to v0.11.15 (Timothy J Fontaine)\n* v8: upgrade to 3.22.24.5 (Timothy J Fontaine)\n* buffer: remove warning when no encoding is passed (Trevor Norris)\n* build: make v8 use random seed for hash tables (Ben Noordhuis)\n* crypto: build with shared openssl without NPN (Ben Noordhuis)\n* crypto: update root certificates (Ben Noordhuis)\n* debugger: pass on v8 debug switches (Ben Noordhuis)\n* domain: use AsyncListener API (Trevor Norris)\n* fs: add recursive subdirectory support to fs.watch (Nick Simmons)\n* fs: make fs.watch() non-recursive by default (Ben Noordhuis)\n* http: cleanup freeSockets when socket destroyed (fengmk2)\n* http: force socket encoding to be null (isaacs)\n* http: make DELETE requests set `req.method` (Nathan Rajlich)\n* node: add AsyncListener support (Trevor Norris)\n* src: remove global HandleScope that hid memory leaks (Ben Noordhuis)\n* tls: add ECDH ciphers support (Erik Dubbelboer)\n* tls: do not default to 'localhost' servername (Fedor Indutny)\n* tls: more accurate wrapping of connecting socket (Fedor Indutny)\n\n<a id=\"0.11.8\"></a>\n## 2013.10.30, Version 0.11.8 (Unstable)\n\nhttps://github.com/nodejs/node/commit/f8d86e24f3463c36f7f3f4c3b3ec779e5b6201e1\n\n* uv: Upgrade to v0.11.14\n* v8: upgrade 3.21.18.3\n* assert: indicate if exception message is generated (Glen Mailer)\n* buffer: add buf.toArrayBuffer() API (Trevor Norris)\n* cluster: fix premature 'disconnect' event (Ben Noordhuis)\n* crypto: add SPKAC support (Jason Gerfen)\n* debugger: count space for line numbers correctly (Alex Kocharin)\n* debugger: make busy loops SIGUSR1-interruptible (Ben Noordhuis)\n* debugger: repeat last command (Alex Kocharin)\n* debugger: show current line, fix for [#6150](https://github.com/joyent/node/issues/6150) (Alex Kocharin)\n* dgram: send() can accept strings (Trevor Norris)\n* dns: rename domain to hostname (Ben Noordhuis)\n* dns: set hostname property on error object (Ben Noordhuis)\n* dtrace, mdb_v8: support more string, frame types (Dave Pacheco)\n* http: add statusMessage (Patrik Stutz)\n* http: expose supported methods (Ben Noordhuis)\n* http: provide backpressure for pipeline flood (isaacs)\n* process: Add exitCode property (isaacs)\n* tls: socket.renegotiate(options, callback) (Fedor Indutny)\n* util: format as Error if instanceof Error (Rod Vagg)\n\n<a id=\"0.11.7\"></a>\n## 2013.08.21, Version 0.11.7 (Unstable)\n\nhttps://github.com/nodejs/node/commit/be52549bfa5311208b5fcdb3ba09210460fa9ceb\n\n* uv: upgrade to v0.11.13\n* v8: upgrade to 3.20.17\n* buffer: adhere to INSPECT_MAX_BYTES (Timothy J Fontaine)\n* buffer: fix regression for large buffer creation (Trevor Norris)\n* buffer: don't throw if slice length too long (Trevor Norris)\n* buffer: Buffer(buf) constructor copies into the proper buffer (Ben Noordhuis)\n* cli: remove --max-stack-size (Ben Noordhuis)\n* cli: unknown command line options are errors (Ben Noordhuis)\n* child_process: exec accept buffer as an encoding (Seth Fitzsimmons)\n* crypto: make randomBytes/pbkdf2 callbacks domain aware (Ben Noordhuis)\n* domain: deprecate domain.dispose(). (Forrest L Norvell)\n* fs: Expose birthtime on stat objects (isaacs)\n* http: Only send connection:keep-alive if necessary (isaacs)\n* repl: Catch syntax errors better (isaacs, Nathan Rajlich)\n* stream: change default highWaterMark for objectMode to 16 (Mathias Buus)\n* stream: make setEncoding/pause/resume chainable (Julian Gruber, isaacs)\n* util: pass opts to custom inspect functions (Timothy J Fontaine)\n* vm: rewritten to behave like Contextify (Domenic Denicola)\n\n<a id=\"0.11.6\"></a>\n## 2013.08.21, Version 0.11.6 (Unstable)\n\nhttps://github.com/nodejs/node/commit/04018d4b3938fd30ba14822e79195e4af2be36f6\n\n* uv: Upgrade to v0.11.8\n* v8: upgrade v8 to 3.20.14.1\n* build: disable SSLv2 by default (Ben Noordhuis)\n* build: don't auto-destroy existing configuration (Ben Noordhuis)\n* crypto: add TLS 1.1 and 1.2 to secureProtocol list (Matthias Bartelme\u00df)\n* crypto: fix memory leak in randomBytes() error path (Ben Noordhuis)\n* dgram: don't call into js when send cb is omitted (Ben Noordhuis)\n* dgram: fix regression in string argument handling (Ben Noordhuis)\n* domains: performance improvements (Trevor Norris)\n* events: EventEmitter = require('events') (Jake Verbaten)\n* http: Add write()/end() callbacks (isaacs)\n* http: Consistent 'finish' event semantics (isaacs)\n* http: Prefer 'binary' over 'ascii' (isaacs)\n* http: Support legacy agent.addRequest API (isaacs)\n* http: Write hex/base64 chunks properly (isaacs)\n* http: add agent.maxFreeSockets option (isaacs)\n* http: provide access to raw headers/trailers (isaacs)\n* http: removed headers stay removed (James Halliday)\n* http,timers: improve callback performance (Ben Noordhuis)\n* net: family option in net.connect (Vsevolod Strukchinsky)\n* readline: pause stdin before turning off terminal raw mode (Daniel Chatfield)\n* smalloc: allow different external array types (Trevor Norris)\n* smalloc: expose ExternalArraySize (Trevor Norris)\n* stream: Short-circuit buffer pushes when flowing (isaacs)\n* tls: handle errors on socket before releasing it (Fedor Indutny)\n* util: fix isPrimitive check (Trevor Norris)\n* util: isObject should always return boolean (Trevor Norris)\n\n<a id=\"0.11.5\"></a>\n## 2013.08.06, Version 0.11.5 (Unstable)\n\nhttps://github.com/nodejs/node/commit/6f92da2dd106b0c63fde563284f83e08e2a521b5\n\n* v8: upgrade to 3.20.11\n* uv: upgrade to v0.11.7\n* buffer: return offset for end of last write (Trevor Norris)\n* build: embed the mdb_v8.so into the binary (Timothy J Fontaine)\n* build: fix --without-ssl build (Ben Noordhuis)\n* child_process: add 'shell' option to .exec() (Ben Noordhuis)\n* dgram: report send errors to cb, don't pass bytes (Ben Noordhuis)\n* fs: write strings directly to disk (Trevor Norris)\n* https: fix default port (Koichi Kobayashi)\n* openssl: use asm for sha, md5, rmd (Fedor Indutny)\n* os: add mac address to networkInterfaces() output (Brian White)\n* smalloc: introduce smalloc module (Trevor Norris)\n* stream: Simplify flowing, passive data listening (streams3) (isaacs)\n* tls: asynchronous SNICallback (Fedor Indutny)\n* tls: share tls tickets key between cluster workers (Fedor Indutny)\n* util: don't throw on circular %j input to format() (Ben Noordhuis)\n\n<a id=\"0.11.4\"></a>\n## 2013.07.12, Version 0.11.4 (Unstable)\n\nhttps://github.com/nodejs/node/commit/b5b84197ed037918fd1a26e5cb87cce7c812ca55\n\n* npm: Upgrade to 1.3.4\n* v8: Upgrade to v3.20.2\n* c-ares: Upgrade to piscisaureus/cares@805d153\n* timers: setImmediate process full queue each turn (Ben Noordhuis)\n* http: Add agent.get/request methods (isaacs)\n* http: Proper KeepAlive behavior (isaacs)\n* configure: fix the --without-ssl option (Nathan Rajlich)\n* buffer: propagate originating parent (Trevor Norris)\n* tls_wrap: return Error not throw for missing cert (Timothy J Fontaine)\n* src: enable native v8 typed arrays (Ben Noordhuis)\n* stream: objectMode transform should allow falsey values (Jeff Barczewski)\n* slab_allocator: remove SlabAllocator (Trevor Norris)\n* crypto: fix memory leak in LoadPKCS12 (Fedor Indutny)\n* tls: export TLSSocket (Fedor Indutny)\n* zlib: allow changing of level and strategy (Brian White)\n* zlib: allow custom flush type for flush() (Brian White)\n\n<a id=\"0.11.3\"></a>\n## 2013.06.26, Version 0.11.3 (Unstable)\n\nhttps://github.com/nodejs/node/commit/38c0c47bbe280ddc42054418091571e532d82a1e\n\n* uv: Upgrade to v0.11.5\n* c-ares: upgrade to 1.10.0\n* v8: upgrade to v3.19.13\n* punycode: update to v1.2.3 (Mathias Bynens)\n* debugger: break on uncaught exception (Miroslav Bajtos)\n* child_process: emit 'disconnect' asynchronously (Ben Noordhuis)\n* dtrace: enable uv's probes if enabled (Timothy J Fontaine)\n* dtrace: unify dtrace and systemtap interfaces (Timothy J Fontaine)\n* buffer: New API for backing data store (Trevor Norris)\n* buffer: return `this` in fill() for chainability (Brian White)\n* build: fix include order for building on windows (Timothy J Fontaine)\n* build: add android support (Linus M\u00e5rtensson)\n* readline: strip ctrl chars for prompt width calc (Krzysztof Chrapka)\n* tls: introduce TLSSocket based on tls_wrap binding (Fedor Indutny)\n* tls: add localAddress and localPort properties (Ben Noordhuis)\n* crypto: free excessive memory in NodeBIO (Fedor Indutny)\n* process: remove maxTickDepth (Trevor Norris)\n* timers: use uv_now instead of Date.now (Timothy J Fontaine)\n* util: Add debuglog, deprecate console lookalikes (isaacs)\n* module: use path.sep instead of a custom solution (Robert Kowalski)\n* http: don't escape request path, reject bad chars (Ben Noordhuis)\n* net: emit dns 'lookup' event before connect (Ben Noordhuis)\n* dns: add getServers and setServers (Timothy J Fontaine)\n\n<a id=\"0.11.2\"></a>\n## 2013.05.13, Version 0.11.2 (Unstable)\n\nhttps://github.com/nodejs/node/commit/5d3dc0e4c3369dfb00b7b13e08936c2e652fa696\n\n* uv: Upgrade to 0.11.2\n* V8: Upgrade to 3.19.0\n* npm: Upgrade to 1.2.21\n* build: Makefile should respect configure --prefix (Timothy J Fontaine)\n* cluster: use round-robin load balancing (Ben Noordhuis)\n* debugger, cluster: each worker has new debug port (Miroslav Bajto\u0161)\n* debugger: `restart` with custom debug port (Miroslav Bajto\u0161)\n* debugger: breakpoints in scripts not loaded yet (Miroslav Bajto\u0161)\n* event: EventEmitter#setMaxListeners() returns this (Sam Roberts)\n* events: add EventEmitter.defaultMaxListeners (Ben Noordhuis)\n* install: Support $(PREFIX) install target directory prefix (Olof Johansson)\n* os: Include netmask in os.networkInterfaces() (Ben Kelly)\n* path: add path.isAbsolute(path) (Ryan Doenges)\n* stream: Guarantee ordering of 'finish' event (isaacs)\n* streams: introduce .cork/.uncork/._writev (Fedor Indutny)\n* vm: add support for timeout argument (Andrew Paprocki)\n\n<a id=\"0.11.1\"></a>\n## 2013.04.19, Version 0.11.1 (Unstable)\n\nhttps://github.com/nodejs/node/commit/4babd2b46ebf9fbea2c9946af5cfae25a33b2b22\n\n* V8: upgrade to 3.18.0\n* uv: Upgrade to v0.11.1\n* http: split into multiple separate modules (Timothy J Fontaine)\n* http: escape unsafe characters in request path (Ben Noordhuis)\n* url: Escape all unwise characters (isaacs)\n* build: depend on v8 postmortem-metadata if enabled (Paddy Byers)\n* etw: update prototypes to match dtrace provider (Timothy J Fontaine)\n* buffer: change output of Buffer.prototype.toJSON() (David Braun)\n* dtrace: actually use the _handle.fd value (Timothy J Fontaine)\n* dtrace: pass more arguments to probes (Dave Pacheco)\n* build: allow building with dtrace on osx (Dave Pacheco)\n* zlib: allow passing options to convenience methods (Kyle Robinson Young)\n\n<a id=\"0.11.0\"></a>\n## 2013.03.28, Version 0.11.0 (Unstable)\n\nhttps://github.com/nodejs/node/commit/bce38b3d74e64fcb7d04a2dd551151da6168cdc5\n\n* V8: update to 3.17.13\n* os: use %SystemRoot% or %windir% in os.tmpdir() (Suwon Chae)\n* util: fix util.inspect() line width calculation (Marcin Kostrzewa)\n* buffer: remove _charsWritten (Trevor Norris)\n* fs: uv_[fl]stat now reports subsecond resolution (Timothy J Fontaine)\n* fs: Throw if error raised and missing callback (bnoordhuis)\n* tls: expose SSL_CTX_set_timeout via tls.createServer (Manav Rathi)\n* tls: remove harmful unnecessary bounds checking (Marcel Laverdet)\n* buffer: write ascii strings using WriteOneByte (Trevor Norris)\n* dtrace: fix generation of v8 constants on freebsd (Fedor Indutny)\n* dtrace: x64 ustack helper (Fedor Indutny)\n* readline: handle wide characters properly (Nao Iizuka)\n* repl: Use a domain to catch async errors safely (isaacs)\n* repl: emit 'reset' event when context is reset (Sami Samhuri)\n* util: custom `inspect()` method may return an Object (Nathan Rajlich)\n* console: `console.dir()` bypasses inspect() methods (Nathan Rajlich)\n\n<a id=\"0.9.12\"></a>\n## 2013.03.06, Version 0.9.12 (Unstable)\n\nhttps://github.com/nodejs/node/commit/0debf5a82934da805592b6496756cdf27c993abc\n\n* stream: Allow strings in Readable.push/unshift (isaacs)\n* stream: Remove bufferSize option (isaacs)\n* stream: Increase highWaterMark on large reads (isaacs)\n* stream: _write: takes an encoding argument (isaacs)\n* stream: _transform: remove output() method, provide encoding (isaacs)\n* stream: Don't require read(0) to emit 'readable' event (isaacs)\n* node: Add --throw-deprecation (isaacs)\n* http: fix multiple timeout events (Eugene Girshov)\n* http: More useful setTimeout API on server (isaacs)\n* net: use close callback, not process.nextTick (Ben Noordhuis)\n* net: Provide better error when writing after FIN (isaacs)\n* dns: Support NAPTR queries (Pavel Lang)\n* dns: fix ReferenceError in resolve() error path (Xidorn Quan)\n* child_process: handle ENOENT correctly on Windows (Scott Blomquist)\n* cluster: Rename destroy() to kill(signal=SIGTERM) (isaacs)\n* build: define nightly tag external to build system (Timothy J Fontaine)\n* build: make msi build work when spaces are present in the path (Bert Belder)\n* build: fix msi build issue with WiX 3.7/3.8 (Raymond Feng)\n* repl: make compatible with domains (Dave Olszewski)\n* events: Code cleanup and performance improvements (Trevor Norris)\n\n<a id=\"0.9.11\"></a>\n## 2013.03.01, Version 0.9.11 (Unstable)\n\nhttps://github.com/nodejs/node/commit/83392403b7a9b7782b37c17688938c75010f81ba\n\n* V8: downgrade to 3.14.5\n* openssl: update to 1.0.1e\n* darwin: Make process.title work properly (Ben Noordhuis)\n* fs: Support mode/flag options to read/append/writeFile (isaacs)\n* stream: _read() no longer takes a callback (isaacs)\n* stream: Add stream.unshift(chunk) (isaacs)\n* stream: remove lowWaterMark feature (isaacs)\n* net: omit superfluous 'connect' event (Ben Noordhuis)\n* build, windows: disable SEH (Ben Noordhuis)\n* core: remove errno global (Ben Noordhuis)\n* core: Remove the nextTick for running the main file (isaacs)\n* core: Mark exit() calls with status codes (isaacs)\n* core: Fix debug signal handler race condition lock (isaacs)\n* crypto: clear error stack (Ben Noordhuis)\n* test: optionally set common.PORT via env variable (Timothy J Fontaine)\n* path: Throw TypeError on non-string args to path.resolve/join (isaacs, Arianit Uka)\n* crypto: fix uninitialized memory access in openssl (Ben Noordhuis)\n\n<a id=\"0.9.10\"></a>\n## 2013.02.19, Version 0.9.10 (Unstable)\n\n* V8: Upgrade to 3.15.11.15\n* npm: Upgrade to 1.2.12\n* fs: Change default WriteStream config, increase perf (isaacs)\n* process: streamlining tick callback logic (Trevor Norris)\n* stream_wrap, udp_wrap: add read-only fd property (Ben Noordhuis)\n* buffer: accept negative indices in Buffer#slice() (Ben Noordhuis)\n* tls: Cycle data when underlying socket drains (isaacs)\n* stream: read(0) should not always trigger _read(n,cb) (isaacs)\n* stream: Empty strings/buffers do not signal EOF any longer (isaacs)\n* crypto: improve cipher/decipher error messages (Ben Noordhuis)\n* net: Respect the 'readable' flag on sockets (isaacs)\n* net: don't suppress ECONNRESET (Ben Noordhuis)\n* typed arrays: copy Buffer in typed array constructor (Ben Noordhuis)\n* typed arrays: make DataView throw on non-ArrayBuffer (Ben Noordhuis)\n* windows: MSI installer enhancements (Scott Blomquist, Jim Schubert)\n\n<a id=\"0.9.9\"></a>\n## 2013.02.07, Version 0.9.9 (Unstable)\n\nhttps://github.com/nodejs/node/commit/4b9f0d190cd6b22853caeb0e07145a98ce1d1d7f\n\n* tls: port CryptoStream to streams2 (Fedor Indutny)\n* typed arrays: only share ArrayBuffer backing store (Ben Noordhuis)\n* stream: make Writable#end() accept a callback function (Nathan Rajlich)\n* buffer: optimize 'hex' handling (Ben Noordhuis)\n* dns, cares: don't filter NOTIMP, REFUSED, SERVFAIL (Ben Noordhuis)\n* readline: treat bare \\r as a line ending (isaacs)\n* readline: make \\r\\n emit one 'line' event (Ben Noordhuis)\n* cluster: support datagram sockets (Bert Belder)\n* stream: Correct Transform class backpressure (isaacs)\n* addon: Pass module object to NODE_MODULE init function (isaacs, Rod Vagg)\n* buffer: slow buffer copy compatibility fix (Trevor Norris)\n* Add bytesWritten to tls.CryptoStream (Andy Burke)\n\n<a id=\"0.9.8\"></a>\n## 2013.01.24, Version 0.9.8 (Unstable)\n\nhttps://github.com/nodejs/node/commit/5f2f8400f665dc32c3e10e7d31d53d756ded9156\n\n* npm: Upgrade to v1.2.3\n* V8: Upgrade to 3.15.11.10\n* streams: Support objects other than Buffers (Jake Verbaten)\n* buffer: remove float write range checks (Trevor Norris)\n* http: close connection on 304/204 responses with chunked encoding (Ben Noordhuis)\n* build: fix build with dtrace support on FreeBSD (Fedor Indutny)\n* console: Support formatting options in trace() (isaacs)\n* domain: empty stack on all exceptions (Dave Olszewski)\n* unix, windows: make uv_*_bind() error codes consistent (Andrius Bentkus)\n* linux: add futimes() fallback (Ben Noordhuis)\n\n<a id=\"0.9.7\"></a>\n## 2013.01.18, Version 0.9.7 (Unstable)\n\nhttps://github.com/nodejs/node/commit/9e7bebeb8305edd55735a95955a98fdbe47572e5\n\n* V8: Upgrade to 3.15.11.7\n* npm: Upgrade to 1.2.2\n* punycode: Upgrade to 1.2.0 (Mathias Bynens)\n* repl: make built-in modules available by default (Felix B\u00f6hm)\n* windows: add support for '_Total' perf counters (Scott Blomquist)\n* cluster: make --prof work for workers (Ben Noordhuis)\n* child_process: do not keep list of sent sockets (Fedor Indutny)\n* tls: Follow RFC6125 more strictly (Fedor Indutny)\n* buffer: floating point read/write improvements (Trevor Norris)\n* TypedArrays: Improve dataview perf without endian param (Dean McNamee)\n* module: assert require() called with a non-empty string (Felix B\u00f6hm, James Campos)\n* stdio: Set readable/writable flags properly (isaacs)\n* stream: Properly handle large reads from push-streams (isaacs)\n\n<a id=\"0.9.6\"></a>\n## 2013.01.11, Version 0.9.6 (Unstable)\n\nhttps://github.com/nodejs/node/commit/9313fdc71ca8335d5e3a391c103230ee6219b3e2\n\n* V8: update to 3.15.11.5\n* node: remove ev-emul.h (Ben Noordhuis)\n* path: make basename and extname ignore trailing slashes (Bert Belder)\n* typed arrays: fix sunos signed/unsigned char issue (Ben Noordhuis)\n* child_process: Fix {stdio:'inherit'} regression (Ben Noordhuis)\n* child_process: Fix pipe() from child stdio streams  (Maciej Ma\u0142ecki)\n* child_process: make fork() execPath configurable (Bradley Meck)\n* stream: Add readable.push(chunk) method (isaacs)\n* dtrace: x64 ustack helper (Fedor Indutny)\n* repl: fix floating point number parsing (Nirk Niggler)\n* repl: allow overriding builtins (Ben Noordhuis)\n* net: add localAddress and localPort to Socket (James Hight)\n* fs: make pool size coincide with ReadStream bufferSize (Shigeki Ohtsu)\n* typed arrays: implement load and store swizzling (Dean McNamee)\n* windows: fix perfctr crash on XP and 2003 (Scott Blomquist)\n* dgram: fix double implicit bind error (Ben Noordhuis)\n\n<a id=\"0.9.5\"></a>\n## 2012.12.30, Version 0.9.5 (Unstable)\n\nhttps://github.com/nodejs/node/commit/01994e8119c24f2284bac0779b32acb49c95bee7\n\n* assert: improve support for new execution contexts (lukebayes)\n* domain: use camelCase instead of snake_case (isaacs)\n* domain: Do not use uncaughtException handler (isaacs)\n* fs: make 'end' work with ReadStream without 'start' (Ben Noordhuis)\n* https: optimize createConnection() (Ryunosuke SATO)\n* buffer: speed up base64 encoding by 20% (Ben Noordhuis)\n* doc: Colorize API stability index headers in docs (Luke Arduini)\n* net: socket.readyState corrections (bentaber)\n* http: Performance enhancements for http under streams2 (isaacs)\n* stream: fix to emit end event on http.ClientResponse (Shigeki Ohtsu)\n* stream: fix event handler leak in readstream pipe and unpipe (Andreas Madsen)\n* build: Support ./configure --tag switch (Maciej Ma\u0142ecki)\n* repl: don't touch `require.cache` (Nathan Rajlich)\n* node: Emit 'exit' event when exiting for an uncaught exception (isaacs)\n\n<a id=\"0.9.4\"></a>\n## 2012.12.21, Version 0.9.4 (Unstable)\n\nhttps://github.com/nodejs/node/commit/d86d83c75f6343b5368bb7bd328b4466a035e1d4\n\n* streams: Update all streaming interfaces to use new classes (isaacs)\n* node: remove idle gc (Ben Noordhuis)\n* http: protect against response splitting attacks (Bert Belder)\n* fs: Raise error when null bytes detected in paths (isaacs)\n* fs: fix 'object is not a function' callback errors (Ben Noordhuis)\n* fs: add autoClose=true option to fs.createReadStream (Farid Neshat)\n* process: add getgroups(), setgroups(), initgroups() (Ben Noordhuis)\n* openssl: optimized asm code on x86 and x64 (Bert Belder)\n* crypto: fix leak in GetPeerCertificate (Fedor Indutny)\n* add systemtap support (Jan Wynholds)\n* windows: add ETW and PerfCounters support (Scott Blomquist)\n* windows: fix normalization of UNC paths (Bert Belder)\n* crypto: fix ssl error handling (Sergey Kholodilov)\n* node: remove eio-emul.h (Ben Noordhuis)\n* os: add os.endianness() function (Nathan Rajlich)\n* readline: don't emit \"line\" events with a trailing '\\n' char (Nathan Rajlich)\n* build: add configure option to generate xcode build files (Timothy J Fontaine)\n* build: allow linking against system libuv, cares, http_parser (Stephen Gallagher)\n* typed arrays: add slice() support to ArrayBuffer (Anthony Pesch)\n* debugger: exit and kill child on SIGTERM or SIGHUP (Fedor Indutny)\n* url: url.format escapes delimiters in path and query (J. Lee Coltrane)\n\n<a id=\"0.9.3\"></a>\n## 2012.10.24, Version 0.9.3 (Unstable)\n\nhttps://github.com/nodejs/node/commit/1ed4c6776e4f52956918b70565502e0f8869829d\n\n* V8: Upgrade to 3.13.7.4\n* crypto: Default to buffers instead of binary strings (isaacs, Fedor Indutny)\n* crypto: add getHashes() and getCiphers() (Ben Noordhuis)\n* unix: add custom thread pool, remove libeio (Ben Noordhuis)\n* util: make `inspect()` accept an \"options\" argument (Nathan Rajlich)\n* https: fix renegotation attack protection (Ben Noordhuis)\n* cluster: make 'listening' handler see actual port (Aaditya Bhatia)\n* windows: use USERPROFILE to get the user's home dir (Bert Belder)\n* path: add platform specific path delimiter (Paul Serby)\n* http: add response.headersSent property (Pavel Lang)\n* child_process: make .fork()'d child auto-exit (Ben Noordhuis)\n* events: add 'removeListener' event (Ben Noordhuis)\n* string_decoder: Add 'end' method, do base64 properly (isaacs)\n* buffer: include encoding value in exception when invalid (Ricky Ng-Adam)\n* http: make http.ServerResponse no longer emit 'end' (isaacs)\n* streams: fix pipe is destructed by 'end' from destination (koichik)\n\n<a id=\"0.9.2\"></a>\n## 2012.09.17, Version 0.9.2 (Unstable)\n\nhttps://github.com/nodejs/node/commit/6e2055889091a424fbb5c500bc3ab9c05d1c28b4\n\n* http_parser: upgrade to ad3b631\n* openssl: upgrade 1.0.1c\n* darwin: use FSEvents to watch directory changes (Fedor Indutny)\n* unix: support missing API on NetBSD (Shigeki Ohtsu)\n* unix: fix EMFILE busy loop (Ben Noordhuis)\n* windows: un-break writable tty handles (Bert Belder)\n* windows: map WSAESHUTDOWN to UV_EPIPE (Bert Belder)\n* windows: make spawn with custom environment work again (Bert Belder)\n* windows: map ERROR_DIRECTORY to UV_ENOENT (Bert Belder)\n* tls, https: validate server certificate by default (Ben Noordhuis)\n* tls, https: throw exception on missing key/cert (Ben Noordhuis)\n* tls: async session storage (Fedor Indutny)\n* installer: don't install header files (Ben Noordhuis)\n* buffer: implement Buffer.prototype.toJSON() (Nathan Rajlich)\n* buffer: added support for writing NaN and Infinity (koichik)\n* http: make http.ServerResponse emit 'end' (Ben Noordhuis)\n* build: ./configure --ninja (Ben Noordhuis, Timothy J Fontaine)\n* installer: fix --without-npm (Ben Noordhuis)\n* cli: make -p equivalent to -pe (Ben Noordhuis)\n* url: Go much faster by using Url class (isaacs)\n\n<a id=\"0.9.1\"></a>\n## 2012.08.28, Version 0.9.1 (Unstable)\n\nhttps://github.com/nodejs/node/commit/e6ce259d2caf338fec991c2dd447de763ce99ab7\n\n* buffer: Add Buffer.isEncoding(enc) to test for valid encoding values (isaacs)\n* Raise UV_ECANCELED on premature close. (Ben Noordhuis)\n* Remove c-ares from libuv, move to a top-level node dependency (Bert Belder)\n* ref/unref for all HandleWraps, timers, servers, and sockets (Timothy J Fontaine)\n* addon: remove node-waf, superseded by node-gyp (Ben Noordhuis)\n* child_process: emit error on exec failure (Ben Noordhuis)\n* cluster: do not use internal server API (Andreas Madsen)\n* constants: add O_DIRECT (Ian Babrou)\n* crypto: add sync interface to crypto.pbkdf2() (Ben Noordhuis)\n* darwin: emulate fdatasync() (Fedor Indutny)\n* dgram: make .bind() always asynchronous (Ben Noordhuis)\n* events: Make emitter.listeners() side-effect free (isaacs, Joe Andaverde)\n* fs: Throw early on invalid encoding args (isaacs)\n* fs: fix naming of truncate/ftruncate functions (isaacs)\n* http: bubble up parser errors to ClientRequest (Brian White)\n* linux: improve cpuinfo parser on ARM and MIPS (Ben Noordhuis)\n* net: add support for IPv6 addresses ending in :: (Josh Erickson)\n* net: support Server.listen(Pipe) (Andreas Madsen)\n* node: don't scan add-on for \"init\" symbol (Ben Noordhuis)\n* remove process.uvCounters() (Ben Noordhuis)\n* repl: console writes to repl rather than process stdio (Nathan Rajlich)\n* timers: implement setImmediate (Timothy J Fontaine)\n* tls: fix segfault in pummel/test-tls-ci-reneg-attack (Ben Noordhuis)\n* tools: Move gyp addon tools to node-gyp (Nathan Rajlich)\n* unix: preliminary signal handler support (Ben Noordhuis)\n* unix: remove dependency on ev_child (Ben Noordhuis)\n* unix: work around darwin bug, don't poll() on pipe (Fedor Indutny)\n* util: Formally deprecate util.pump() (Ben Noordhuis)\n* windows: make active and closing handle state independent (Bert Belder)\n* windows: report spawn errors to the exit callback (Bert Belder)\n* windows: signal handling support with uv_signal_t (Bert Belder)\n\n<a id=\"0.9.0\"></a>\n## 2012.07.20, Version 0.9.0 (Unstable)\n\nhttps://github.com/nodejs/node/commit/f9b237f478c372fd55e4590d7399dcd8f25f3603\n\n* punycode: update to v1.1.1 (Mathias Bynens)\n* c-ares: upgrade to 1.9.0 (Sa\u00fal Ibarra Corretg\u00e9)\n* dns: ignore rogue DNS servers reported by windows (Sa\u00fal Ibarra Corretg\u00e9)\n* unix: speed up uv_async_send() (Ben Noordhuis)\n* darwin: get cpu model correctly on mac (Xidorn Quan)\n* nextTick: Handle tick callbacks before any other I/O (isaacs)\n* Enable color customization of `util.inspect` (Pavel Lang)\n* tls: Speed and memory improvements (Fedor Indutny)\n* readline: Use one history item for reentered line (Vladimir Beloborodov)\n* Fix [#3521](https://github.com/joyent/node/issues/3521) Make process.env more like a regular Object (isaacs)\n\n<a id=\"0.8.25\"></a>\n## 2013.06.13, Version 0.8.25 (maintenance)\n\nhttps://github.com/nodejs/node/commit/0b9bdb2bc7e1c872f0ea4713517fda22a4b0b202\n\n* npm: Upgrade to 1.2.30\n* child_process: fix handle delivery (Ben Noordhuis)\n\n<a id=\"0.8.24\"></a>\n## 2013.06.04, Version 0.8.24 (maintenance)\n\nhttps://github.com/nodejs/node/commit/c1a1ab067721ea17ef7b05ec5c68b01321017f05\n\n* npm: Upgrade to v1.2.24\n* url: Properly parse certain oddly formed urls (isaacs)\n* http: Don't try to destroy nonexistent sockets (isaacs)\n* handle_wrap: fix NULL pointer dereference (Ben Noordhuis)\n\n<a id=\"0.8.23\"></a>\n## 2013.04.09, Version 0.8.23 (maintenance)\n\nhttps://github.com/nodejs/node/commit/c67f8d0500fe15637a623eb759d2ad7eb9fb3b0b\n\n* npm: Upgrade to v1.2.18\n* http: Avoid EE warning on ECONNREFUSED handling (isaacs)\n* tls: Re-enable check of CN-ID in cert verification (Tobias M\u00fcllerleile)\n* child_process: fix sending utf-8 to child process (Ben Noordhuis)\n* crypto: check key type in GetPeerCertificate() (Ben Noordhuis)\n* win/openssl: mark assembled object files as seh safe (Bert Belder)\n* windows/msi: fix msi build issue with WiX 3.7/3.8 (Raymond Feng)\n\n<a id=\"0.8.22\"></a>\n## 2013.03.07, Version 0.8.22 (Stable)\n\nhttps://github.com/nodejs/node/commit/67a4cb4fe8c2346e30ffb83f7178e205cc2dab33\n\n* npm: Update to 1.2.14\n* cluster: propagate bind errors (Ben Noordhuis)\n* crypto: don't assert when calling Cipher#final() twice (Ben Noordhuis)\n* build, windows: disable SEH (Ben Noordhuis)\n\n<a id=\"0.8.21\"></a>\n## 2013.02.25, Version 0.8.21 (Stable)\n\nhttps://github.com/nodejs/node/commit/530d8c05d4c546146f18e5ba811d7eb3b7b7c0c5\n\n* http: Do not free the wrong parser on socket close (isaacs)\n* http: Handle hangup writes more gently (isaacs)\n* zlib: fix assert on bad input (Ben Noordhuis)\n* test: add TAP output to the test runner (Timothy J Fontaine)\n* unix: Handle EINPROGRESS from domain sockets (Ben Noordhuis)\n\n<a id=\"0.8.20\"></a>\n## 2013.02.15, Version 0.8.20 (Stable)\n\nhttps://github.com/nodejs/node/commit/e10c75579b536581ddd7ae4e2c3bf8a9d550d343\n\n* npm: Upgrade to v1.2.11\n* http: Do not let Agent hand out destroyed sockets (isaacs)\n* http: Raise hangup error on destroyed socket write (isaacs)\n* http: protect against response splitting attacks (Bert Belder)\n\n<a id=\"0.8.19\"></a>\n## 2013.02.06, Version 0.8.19 (Stable)\n\nhttps://github.com/nodejs/node/commit/53978bdf420622ff0121c63c0338c9e7c2e60869\n\n* npm: Upgrade to v1.2.10\n* zlib: pass object size hint to V8 (Ben Noordhuis)\n* zlib: reduce memory consumption, release early (Ben Noordhuis)\n* buffer: slow buffer copy compatibility fix (Trevor Norris)\n* zlib: don't assert on malformed dictionary (Ben Noordhuis)\n* zlib: don't assert on missing dictionary (Ben Noordhuis)\n* windows: better ipv6 support (Bert Belder)\n* windows: add error mappings related to unsupported protocols (Bert Belder)\n* windows: map ERROR_DIRECTORY to UV_ENOENT (Bert Belder)\n\n<a id=\"0.8.18\"></a>\n## 2013.01.18, Version 0.8.18 (Stable)\n\nhttps://github.com/nodejs/node/commit/2c4eef0d972838c51999d32c0d251857a713dc18\n\n* npm: Upgrade to v1.2.2\n* dns: make error message match errno (Dan Milon)\n* tls: follow RFC6125 more strictly (Fedor Indutny)\n* buffer: reject negative SlowBuffer offsets (Ben Noordhuis)\n* install: add simplejson fallback (Chris Dent)\n* http: fix \"Cannot call method 'emit' of null\" (Ben Noordhuis)\n\n<a id=\"0.8.17\"></a>\n## 2013.01.09, Version 0.8.17 (Stable)\n\nhttps://github.com/nodejs/node/commit/c50c33e9397d7a0a8717e8ce7530572907c054ad\n\n* npm: Upgrade to v1.2.0\n  - peerDependencies (Domenic Denicola)\n  - node-gyp v0.8.2 (Nathan Rajlich)\n  - Faster installs from github user/project shorthands (Nathan Zadoks)\n\n* typed arrays: fix 32 bit size/index overflow (Ben Noordhuis)\n* http: Improve performance of single-packet responses (Ben Noordhuis)\n* install: fix openbsd man page location (Ben Noordhuis)\n* http: bubble up parser errors to ClientRequest (Brian White)\n\n<a id=\"0.8.16\"></a>\n## 2012.12.13, Version 0.8.16 (Stable)\n\nhttps://github.com/nodejs/node/commit/1c9c6277d5cfcaaac8569c0c8f7daa64292048a9\n\n* npm: Upgrade to 1.1.69\n* fs: fix WriteStream/ReadStream fd leaks (Ben Noordhuis)\n* crypto: fix leak in GetPeerCertificate (Fedor Indutny)\n* buffer: Don't double-negate numeric buffer arg (Trevor Norris)\n* net: More accurate IP address validation and IPv6 dotted notation. (Joshua Erickson)\n\n<a id=\"0.8.15\"></a>\n## 2012.11.26, Version 0.8.15 (Stable)\n\nhttps://github.com/nodejs/node/commit/fdf91afb494a7a2fff2913d817f589c191a2c88f\n\n* npm: Upgrade to 1.1.66 (isaacs)\n* linux: use /proc/cpuinfo for CPU frequency (Ben Noordhuis)\n* windows: map WSAESHUTDOWN to UV_EPIPE (Ben Noordhuis)\n* windows: map ERROR_GEN_FAILURE to UV_EIO (Bert Belder)\n* unix: do not set environ unless one is provided (Charlie McConnell)\n* domains: don't crash if domain is set to null (Bert Belder)\n* windows: fix the x64 debug build (Bert Belder)\n* net, tls: fix connect() resource leak (Ben Noordhuis)\n\n<a id=\"0.8.14\"></a>\n## 2012.10.25, Version 0.8.14 (Stable)\n\nhttps://github.com/nodejs/node/commit/b00527fcf05c3d9f https://github.com/nodejs/node/commit/b5d5d790f9472906a59fe218\n\n* events: Don't clobber pre-existing _events obj in EE ctor (isaacs)\n\n<a id=\"0.8.13\"></a>\n## 2012.10.25, Version 0.8.13 (Stable)\n\nhttps://github.com/nodejs/node/commit/ff4c974873f9a7cc6a5b042eb9b6389bb8dde6d6\n\n* V8: Upgrade to 3.11.10.25\n* npm: Upgrade to 1.1.65\n* url: parse hostnames that start with - or _ (Ben Noordhuis)\n* repl: Fix Windows 8 terminal issue (Bert Belder)\n* typed arrays: use signed char for signed int8s (Aaron Jacobs)\n* crypto: fix bugs in DiffieHellman (Ben Noordhuis)\n* configure: turn on VFPv3 on ARMv7 (Ben Noordhuis)\n* Re-enable OpenSSL UI for entering passphrases via tty (Ben Noordhuis)\n* repl: ensure each REPL instance gets its own \"context\" (Nathan Rajlich)\n\n<a id=\"0.8.12\"></a>\n## 2012.10.12, Version 0.8.12 (Stable)\n\nhttps://github.com/nodejs/node/commit/38c72d4e29574dec5205bcf23c2a85efe65331a4\n\n* npm: Upgrade to 1.1.63\n* crypto: Reduce stability index to 2-Unstable (isaacs)\n* windows: fix handle leak in uv_fs_utime (Bert Belder)\n* windows: fix application crashed popup in debug version (Bert Belder)\n* buffer: report proper retained size in profiler (Ben Noordhuis)\n* buffer: fix byteLength with UTF-16LE (koichik)\n* repl: make \"end of input\" JSON.parse() errors throw in the REPL (Nathan Rajlich)\n* repl: make invalid RegExp modifiers throw in the REPL (Nathan Rajlich)\n* http: handle multiple Proxy-Authenticate values (Willi Eggeling)\n\n<a id=\"0.8.11\"></a>\n## 2012.09.27, Version 0.8.11 (Stable)\n\nhttps://github.com/nodejs/node/commit/e1f39468fa580c1e4cb15fac621f87944ee625dc\n\n* fs: Fix stat() size reporting for large files (Ben Noordhuis)\n\n<a id=\"0.8.10\"></a>\n## 2012.09.25, Version 0.8.10 (Stable)\n\nhttps://github.com/nodejs/node/commit/0bc273da4fcaa79b209ed755ad249a3e7be626a6\n\n* npm: Upgrade to 1.1.62\n* repl: make invalid RegExps throw in the REPL (Nathan Rajlich)\n* v8: loosen artificial mmap constraint (Bryan Cantrill)\n* process: fix setuid() and setgid() error reporting (Ben Noordhuis)\n* domain: Properly exit() on domain disposal (isaacs)\n* fs: fix watchFile() missing deletion events (Ben Noordhuis)\n* fs: fix assert in fs.watch() (Ben Noordhuis)\n* fs: don't segfault on deeply recursive stat() (Ben Noordhuis)\n* http: Remove timeout handler when data arrives (Fr\u00e9d\u00e9ric Germain)\n* http: make the client \"res\" object gets the same domain as \"req\" (Nathan Rajlich)\n* windows: don't blow up when an invalid FD is used (Bert Belder)\n* unix: map EDQUOT to UV_ENOSPC (Charlie McConnell)\n* linux: improve /proc/cpuinfo parser (Ben Noordhuis)\n* win/tty: reset background brightness when color is set to default (Bert Belder)\n* unix: put child process stdio fds in blocking mode (Ben Noordhuis)\n* unix: fix EMFILE busy loop (Ben Noordhuis)\n* sunos: don't set TCP_KEEPALIVE (Ben Noordhuis)\n* tls: Use slab allocator for memory management (Fedor Indutny)\n* openssl: Use optimized assembly code for x86 and x64 (Bert Belder)\n\n<a id=\"0.8.9\"></a>\n## 2012.09.11, Version 0.8.9 (Stable)\n\nhttps://github.com/nodejs/node/commit/b88c3902b241cf934e75443b934f2033ad3915b1\n\n* v8: upgrade to 3.11.10.22\n* GYP: upgrade to r1477\n* npm: Upgrade to 1.1.61\n* npm: Don't create world-writable files (isaacs)\n* windows: fix single-accept mode for shared server sockets (Bert Belder)\n* windows: fix uninitialized memory access in uv_update_time() (Bert Belder)\n* windows: don't throw when a signal handler is attached (Bert Belder)\n* unix: fix memory leak in udp (Ben Noordhuis)\n* unix: map errno ESPIPE (Ben Noordhuis)\n* unix, windows: fix memory corruption in fs-poll.c (Ben Noordhuis)\n* sunos: fix os.cpus() on x86_64 (Ben Noordhuis)\n* child process: fix processes with IPC channel don't emit 'close' (Bert Belder)\n* build: add a \"--dest-os\" option to force a gyp \"flavor\" (Nathan Rajlich)\n* build: set `process.platform` to \"sunos\" on SunOS (Nathan Rajlich)\n* build: fix `make -j` fails after `make clean` (Bearice Ren)\n* build: fix openssl configuration for \"arm\" builds (Nathan Rajlich)\n* tls: support unix domain socket/named pipe in tls.connect (Shigeki Ohtsu)\n* https: make https.get() accept a URL (koichik)\n* http: respect HTTP/1.0 TE header (Ben Noordhuis)\n* crypto, tls: Domainify setSNICallback, pbkdf2, randomBytes (Ben Noordhuis)\n* stream.pipe: Don't call destroy() unless it's a function (isaacs)\n\n<a id=\"0.8.8\"></a>\n## 2012.08.22, Version 0.8.8 (Stable)\n\nhttps://github.com/nodejs/node/commit/a299c97bbc701f4d460e91214d7bfe7a9589d361\n\n* V8: upgrade to 3.11.10.19\n* npm: upgrade to 1.1.59\n* windows: fix uninitialized memory access in uv_update_time() (Bert Belder)\n* unix, windows: fix memory corruption in fs-poll.c (Ben Noordhuis)\n* unix: fix integer overflow in uv_hrtime (Tim Holy)\n* sunos: fix uv_cpu_info() on x86_64 (Ben Noordhuis)\n* tls: update default cipher list (Ben Noordhuis)\n* unix: Fix llvm and older gcc duplicate symbol warnings (Bert Belder)\n* fs: fix use after free in stat watcher (Ben Noordhuis)\n* build: Fix using manually compiled gcc on OS X (Nathan Rajlich)\n* windows: make junctions work again (Bert Belder)\n\n<a id=\"0.8.7\"></a>\n## 2012.08.15, Version 0.8.7 (Stable)\n\nhttps://github.com/nodejs/node/commit/f640c5d35cba96634cd8176a525a1d876e361a61\n\n* npm: Upgrade to 1.1.49\n* website: download page (Golo Roden)\n* crypto: fix uninitialized memory access in openssl (Ben Noordhuis)\n* buffer, crypto: fix buffer decoding (Ben Noordhuis)\n* build: compile with -fno-tree-vrp when gcc >= 4.0 (Ben Noordhuis)\n* tls: handle multiple CN fields when verifying cert (Ben Noordhuis)\n* doc: remove unused util from child_process (Kyle Robinson Young)\n* build: rework -fvisibility=hidden detection (Ben Noordhuis)\n* windows: don't duplicate invalid stdio handles (Bert Belder)\n* windows: fix typos in process-stdio.c (Bert Belder)\n\n<a id=\"0.8.6\"></a>\n## 2012.08.07, Version 0.8.6 (Stable)\n\nhttps://github.com/nodejs/node/commit/0544a586ca6b6b900a42e164033dbf350765700a\n\n* npm: Upgrade to v1.1.48\n* Add 'make binary' to build binary tarballs for all Unixes (Nathan Rajlich)\n* zlib: Emit 'close' on destroy(). (Dominic Tarr)\n* child_process: Fix stdout=null when stdio=['pipe'] (Tyler Neylon)\n* installer: prevent ETXTBSY errors (Ben Noordhuis)\n* installer: honor --without-npm, default install path (Ben Noordhuis)\n* net: make pause work with connecting sockets (Bert Belder)\n* installer: fix cross-compile installs (Ben Noordhuis)\n* net: fix .listen({fd:0}) (Ben Noordhuis)\n* windows: map WSANO_DATA to UV_ENOENT (Bert Belder)\n\n<a id=\"0.8.5\"></a>\n## 2012.08.02, Version 0.8.5 (Stable)\n\nhttps://github.com/nodejs/node/commit/9b86a4453f0c76f2707a75c0b2343aba33ec63bc\n\n* node: tag Encode and friends NODE_EXTERN (Ben Noordhuis)\n* fs: fix ReadStream / WriteStream missing callback (Gil Pedersen)\n* fs: fix readFileSync(\"/proc/cpuinfo\") regression (Ben Noordhuis)\n* installer: don't assume bash is installed (Ben Noordhuis)\n* Report errors properly from --eval and stdin (isaacs)\n* assert: fix throws() throws an error without message property (koichik)\n* cluster: fix libuv assert in net.listen() (Ben Noordhuis)\n* build: always link sunos builds with libumem (Trent Mick)\n* build: improve armv7 / hard-float detection (Adam Malcontenti-Wilson)\n* https: Use host header as effective servername (isaacs)\n* sunos: work around OS bug to prevent fs.watch() from spinning (Bryan Cantrill)\n* linux: fix 'two watchers, one path' segfault (Ben Noordhuis)\n* windows: fix memory leaks in many fs functions (Bert Belder)\n* windows: don't allow directories to be opened for writing/appending (Bert Belder)\n* windows: make fork() work even when not all stdio handles are valid (Bert Belder)\n* windows: make unlink() not remove mount points, and improve performance (Bert Belder)\n* build: Sign pkg installer for OS X (isaacs)\n\n<a id=\"0.8.4\"></a>\n## 2012.07.25, Version 0.8.4 (Stable)\n\nhttps://github.com/nodejs/node/commit/f98562fcd7d1cab573ca4dc1612157d6999befd4\n\n* V8: Upgrade to 3.11.10.17\n* npm: Upgrade to 1.1.45\n* net: fix Socket({ fd: 42 }) api (Ben Noordhuis)\n* readline: Remove event listeners on close (isaacs)\n* windows: correctly prep long path for fs.exists(Sync) (Bert Belder)\n* debugger: wake up the event loop when a debugger command is dispatched (Peter Rybin)\n* tls: verify server's identity (Fedor Indutny)\n* net: ignore socket.setTimeout(Infinity or NaN) (Fedor Indutny)\n\n<a id=\"0.8.3\"></a>\n## 2012.07.19, Version 0.8.3 (Stable)\n\nhttps://github.com/nodejs/node/commit/60bf2d6cb33e4ce55604f73889ab840a9de8bdab\n\n* V8: upgrade to 3.11.10.15\n* npm: Upgrade to 1.1.43\n* net: fix net.Server.listen({fd:x}) error reporting (Ben Noordhuis)\n* net: fix bogus errno reporting (Ben Noordhuis)\n* build: Move npm shebang logic into an npm script (isaacs)\n* build: fix add-on loading on freebsd (Ben Noordhuis)\n* build: disable unsafe optimizations (Ben Noordhuis)\n* build: fix spurious mksnapshot crashes for good (Ben Noordhuis)\n* build: speed up genv8constants (Dave Pacheco)\n* fs: make unwatchFile() remove a specific listener (Ben Noordhuis)\n* domain: Remove first arg from intercepted fn (Toshihiro Nakamura)\n* domain: Fix memory leak on error (isaacs)\n* events: Fix memory leak from removeAllListeners (Nathan Rajlich)\n* zlib: Fix memory leak in Unzip class. (isaacs)\n* crypto: Fix memory leak in DecipherUpdate() (Ben Noordhuis)\n\n<a id=\"0.8.2\"></a>\n## 2012.07.09, Version 0.8.2 (Stable)\n\nhttps://github.com/nodejs/node/commit/cc6084b9ac5cf1d4fe5e7165b71e8fc05d11be1f\n\n* npm: Upgrade to 1.1.36\n* readline: don't use Function#call() (Nathan Rajlich)\n* Code cleanup to pass 'use strict' (Jonas Westerlund)\n* module: add filename to require() json errors (TJ Holowaychuk)\n* readline: fix for unicode prompts (Tim Macfarlane)\n* timers: fix handling of large timeouts (Ben Noordhuis)\n* repl: fix passing an empty line inserting \"undefined\" into the buffer (Nathan Rajlich)\n* repl: fix crashes when buffering command (Maciej Ma\u0142ecki)\n* build: rename strict_aliasing to node_no_strict_aliasing (Ben Noordhuis)\n* build: disable -fstrict-aliasing for any gcc < 4.6.0 (Ben Noordhuis)\n* build: detect cc version with -dumpversion (Ben Noordhuis)\n* build: handle output of localized gcc or clang (Ben Noordhuis)\n* unix: fix memory corruption in freebsd.c (Ben Noordhuis)\n* unix: fix 'zero handles, one request' busy loop (Ben Noordhuis)\n* unix: fix busy loop on unexpected tcp message (Ben Noordhuis)\n* unix: fix EINPROGRESS busy loop (Ben Noordhuis)\n\n<a id=\"0.8.1\"></a>\n## 2012.06.29, Version 0.8.1 (stable)\n\nhttps://github.com/nodejs/node/commit/2134aa3d5c622fc3c3b02ccb713fcde0e0df479a\n\n* V8: upgrade to v3.11.10.12\n* npm: upgrade to v1.1.33\n  - Support for parallel use of the cache folder\n  - Retry on registry timeouts or network failures (Trent Mick)\n  - Reduce 'engines' failures to a warning\n  - Use new zsh completion if available (Jeremy Cantrell)\n\n* Fix [#3577](https://github.com/joyent/node/issues/3577) Un-break require('sys')\n* util: speed up formatting of large arrays/objects (Ben Noordhuis)\n* windows: make fs.realpath(Sync) work with UNC paths (Bert Belder)\n* build: fix --shared-v8 option (Ben Noordhuis)\n* doc: `detached` is a boolean (Andreas Madsen)\n* build: use proper python interpreter (Ben Noordhuis)\n* build: expand ~ in `./configure --prefix=~/a/b/c` (Ben Noordhuis)\n* build: handle CC env var with spaces (Gabriel de Perthuis)\n* build: fix V8 build when compiling with gcc 4.5 (Ben Noordhuis)\n* build: fix --shared-v8 option (Ben Noordhuis)\n* windows msi: Fix icon issue which caused huge file size (Bert Belder)\n* unix: assume that dlopen() may clobber dlerror() (Ben Noordhuis)\n* sunos: fix memory corruption bugs (Ben Noordhuis)\n* windows: better (f)utimes and (f)stat (Bert Belder)\n\n<a id=\"0.8.0\"></a>\n## 2012.06.25, Version 0.8.0 (stable)\n\nhttps://github.com/nodejs/node/commit/8b8a7a7f9b41e74e1e810d0330738ad06fc302ec\n\n* V8: upgrade to v3.11.10.10\n* npm: Upgrade to 1.1.32\n* Deprecate iowatcher (Ben Noordhuis)\n* windows: update icon (Bert Belder)\n* http: Hush 'MUST NOT have a body' warnings to debug() (isaacs)\n* Move blog.nodejs.org content into repository (isaacs)\n* Fix [#3503](https://github.com/joyent/node/issues/3503): stdin: resume() on pipe(dest) (isaacs)\n* crypto: fix error reporting in SetKey() (Fedor Indutny)\n* Add --no-deprecation and --trace-deprecation command-line flags (isaacs)\n* fs: fix fs.watchFile() (Ben Noordhuis)\n* fs: Fix fs.readfile() on pipes (isaacs)\n* Rename GYP variable node_use_system_openssl to be consistent (Ryan Dahl)\n\n<a id=\"0.7.12\"></a>\n## 2012.06.19, Version 0.7.12 (unstable)\n\nhttps://github.com/nodejs/node/commit/a72120190a8ffdbcd3d6ad2a2e6ceecd2087111e\n\n* npm: Upgrade to 1.1.30\n\t- Improved 'npm init'\n\t- Fix the 'cb never called' error from 'oudated' and 'update'\n\t- Add --save-bundle|-B config\n\t- Fix isaacs/npm[#2465](https://github.com/joyent/node/issues/2465): Make npm script and windows shims cygwin-aware\n\t- Fix isaacs/npm[#2452](https://github.com/joyent/node/issues/2452) Use --save(-dev|-optional) in npm rm\n\t- `logstream` option to replace removed `logfd` (Rod Vagg)\n\t- Read default descriptions from README.md files\n\n* Shims to support deprecated ev_* and eio_* methods (Ben Noordhuis)\n* [#3118](https://github.com/joyent/node/issues/3118) net.Socket: Delay pause/resume until after connect (isaacs)\n* [#3465](https://github.com/joyent/node/issues/3465) Add ./configure --no-ifaddrs flag (isaacs)\n* child_process: add .stdin stream to forks (Fedor Indutny)\n* build: fix `make install DESTDIR=/path` (Ben Noordhuis)\n* tls: fix off-by-one error in renegotiation check (Ben Noordhuis)\n* crypto: Fix diffie-hellman key generation UTF-8 errors (Fedor Indutny)\n* node: change the constructor name of process from EventEmitter to process (Andreas Madsen)\n* net: Prevent property access throws during close (Reid Burke)\n* querystring: improved speed and code cleanup (Felix B\u00f6hm)\n* sunos: fix assertion errors breaking fs.watch() (Fedor Indutny)\n* unix: stat: detect sub-second changes (Ben Noordhuis)\n* add stat() based file watcher (Ben Noordhuis)\n\n<a id=\"0.7.11\"></a>\n## 2012.06.15, Version 0.7.11 (unstable)\n\nhttps://github.com/nodejs/node/commit/5cfe0b86d5be266ef51bbba369c39e412ee51944\n\n* V8: Upgrade to v3.11.10\n* npm: Upgrade to 1.1.26\n* doc: Improve cross-linking in API docs markdown (Ben Kelly)\n* Fix [#3425](https://github.com/joyent/node/issues/3425): removeAllListeners should delete array (Reid Burke)\n* cluster: don't silently drop messages when the write queue gets big (Bert Belder)\n* Add Buffer.concat method (isaacs)\n* windows: make symlinks tolerant to forward slashes (Bert Belder)\n* build: Add node.d and node.1 to installer (isaacs)\n* cluster: rename worker.unqiueID to worker.id (Andreas Madsen)\n* Windows: Enable ETW events on Windows for existing DTrace probes. (Igor Zinkovsky)\n* test: bundle node-weak in test/gc so that it doesn't need to be downloaded (Nathan Rajlich)\n* Make many tests pass on Windows (Bert Belder)\n* Fix [#3388](https://github.com/joyent/node/issues/3388) Support listening on file descriptors (isaacs)\n* Fix [#3407](https://github.com/joyent/node/issues/3407) Add os.tmpDir() (isaacs)\n* Unbreak the snapshotted build on Windows (Bert Belder)\n* Clean up child_process.kill throws (Bert Belder)\n* crypto: make cipher/decipher accept buffer args (Ben Noordhuis)\n\n<a id=\"0.7.10\"></a>\n## 2012.06.11, Version 0.7.10 (unstable)\n\nhttps://github.com/nodejs/node/commit/12a32a48a30182621b3f8e9b9695d1946b53c131\n\n* Roll V8 back to 3.9.24.31\n* build: x64 target should always pass -m64 (Robert Mustacchi)\n* add NODE_EXTERN to node::Start (Joel Brandt)\n* repl: Warn about running npm commands (isaacs)\n* slab_allocator: fix crash in dtor if V8 is dead (Ben Noordhuis)\n* slab_allocator: fix leak of Persistent handles (Shigeki Ohtsu)\n* windows/msi: add node.js prompt to startmenu (Jeroen Janssen)\n* windows/msi: fix adding node to PATH (Jeroen Janssen)\n* windows/msi: add start menu links when installing (Jeroen Janssen)\n* windows: don't install x64 version into the 'program files (x86)' folder (Matt Gollob)\n* domain: Fix [#3379](https://github.com/joyent/node/issues/3379) domain.intercept no longer passes error arg to cb (Marc Harter)\n* fs: make callbacks run in global context (Ben Noordhuis)\n* fs: enable fs.realpath on windows (isaacs)\n* child_process: expose UV_PROCESS_DETACHED as options.detached (Charlie McConnell)\n* child_process: new stdio API for .spawn() method (Fedor Indutny)\n* child_process: spawn().ref() and spawn().unref() (Fedor Indutny)\n* Upgrade npm to 1.1.25\n\t- Enable npm link on windows\n\t- Properly remove sh-shim on Windows\n\t- Abstract out registry client and logger\n\n<a id=\"0.7.9\"></a>\n## 2012.05.28, Version 0.7.9 (unstable)\n\nhttps://github.com/nodejs/node/commit/782277f11a753ded831439ed826448c06fc0f356\n\n* Upgrade V8 to 3.11.1\n* Upgrade npm to 1.1.23\n* uv: rework reference counting scheme (Ben Noordhuis)\n* uv: add interface for joining external event loops (Bert Belder)\n* repl, readline: Handle Ctrl+Z and SIGCONT better (Nathan Rajlich)\n* fs: 64bit offsets for fs calls (Igor Zinkovsky)\n* fs: add sync open flags 'rs' and 'rs+' (Kevin Bowman)\n* windows: enable creating directory junctions with fs.symlink (Igor Zinkovsky, Bert Belder)\n* windows: fix fs.lstat to properly detect symlinks. (Igor Zinkovsky)\n* Fix [#3270](https://github.com/joyent/node/issues/3270) Escape url.parse delims (isaacs)\n* http: make http.get() accept a URL (Adam Malcontenti-Wilson)\n* Cleanup vm module memory leakage (Marcel Laverdet)\n* Optimize writing strings with Socket.write (Bert Belder)\n* add support for CESU-8 and UTF-16LE encodings (koichik)\n* path: add path.sep to get the path separator. (Yi, EungJun)\n* net, http: add backlog parameter to .listen() (Erik Dubbelboer)\n* debugger: support mirroring Date objects (Fedor Indutny)\n* addon: add AtExit() function (Ben Noordhuis)\n* net: signal localAddress bind failure in connect (Brian Schroeder)\n* util: handle non-string return value in .inspect() (Alex Kocharin)\n\n<a id=\"0.7.8\"></a>\n## 2012.04.18, Version 0.7.8 (unstable)\n\nhttps://github.com/nodejs/node/commit/c2b47097c0b483552efc1947c6766fa1128600b6\n\n* Upgrade V8 to 3.9.24.9\n* Upgrade OpenSSL to 1.0.0f\n* Upgrade npm to 1.1.18\n* Show licenses in Binary installers\n* Domains (isaacs)\n* readline: rename \"end\" to \"close\" (Nathan Rajlich)\n* tcp: make getsockname() return address family as string (Shigeki Ohtsu)\n* http, https: fix .setTimeout() (ssuda)\n* os: add cross platform EOL character (Mustansir Golawala)\n* typed arrays: unexport SizeOfArrayElementForType() (Aaron Jacobs)\n* net: honor 'enable' flag in .setNoDelay() (Ben Noordhuis)\n* child_process: emit error when .kill fails (Andreas Madsen)\n* gyp: fix 'argument list too long' build error (Ben Noordhuis)\n* fs.WriteStream: Handle modifications to fs.open (isaacs)\n* repl, readline: Handle newlines better (Nathan Rajlich, Nathan Friedly)\n* build: target OSX 10.5 when building on darwin (Nathan Rajlich)\n* Fix [#3052](https://github.com/joyent/node/issues/3052) Handle errors properly in zlib (isaacs)\n* build: add support for DTrace and postmortem (Dave Pacheco)\n* core: add reusable Slab allocator (Ben Noordhuis)\n\n<a id=\"0.7.7\"></a>\n## 2012.03.30, Version 0.7.7 (unstable)\n\nhttps://github.com/nodejs/node/commit/5cda2542fdb086f9fe5de889bea435a65e377dea\n\n* Upgrade V8 to 3.9.24.7\n* Upgrade npm to 1.1.15\n* Handle Emoji characters properly (Erik Corry, Bert Belder)\n* readline: migrate ansi/vt100 logic from tty to readline (Nathan Rajlich)\n* readline: Fix multiline handling (Alex Kocharin)\n* add a -i/--interactive flag to force the REPL (Nathan Rajlich)\n* debugger: add breakOnException command (Fedor Indutny)\n* cluster: kill workers when master dies (Andreas Madsen)\n* cluster: add graceful disconnect support (Andreas Madsen)\n* child_process: Separate 'close' event from 'exit' (Charlie McConnell)\n* typed arrays: add Uint8ClampedArray (Mikael Bourges-Sevenier)\n* buffer: Fix byte alignment issues (Ben Noordhuis, Erik Lundin)\n* tls: fix CryptoStream.setKeepAlive() (Shigeki Ohtsu)\n* Expose http parse error codes (Felix Geisendo\u0308rfer)\n* events: don't delete the listeners array (Ben Noordhuis, Nathan Rajlich)\n* process: add process.config to view node's ./configure settings (Nathan Rajlich)\n* process: process.execArgv to see node's arguments (Micheil Smith)\n* process: fix process.title setter (Ben Noordhuis)\n* timers: handle negative or non-numeric timeout values (Ben Noordhuis)\n\n<a id=\"0.7.6\"></a>\n## 2012.03.13, Version 0.7.6 (unstable)\n\nhttps://github.com/nodejs/node/commit/f06abda6f58e517349d1b63a2cbf5a8d04a03505\n\n* Upgrade v8 to 3.9.17\n* Upgrade npm to 1.1.8\n  - Add support for os/cpu fields in package.json (Adam Blackburn)\n  - Automatically node-gyp packages containing a binding.gyp\n  - Fix failures unpacking in UNC shares\n  - Never create un-listable directories\n  - Handle cases where an optionalDependency fails to build\n\n* events: newListener emit correct fn when using 'once' (Roly Fentanes)\n* url: Ignore empty port component (\u0141ukasz Walukiewicz)\n* module: replace 'children' array (isaacs)\n* tls: parse multiple values of a key in ssl certificate (Sambasiva Suda)\n* cluster: support passing of named pipes (Ben Noordhuis)\n* Windows: include syscall in fs errors (Bert Belder)\n* http: [#2888](https://github.com/joyent/node/issues/2888) Emit end event only once (Igor Zinkovsky)\n* readline: add multiline support (Rlidwka)\n* process: add `process.hrtime()` (Nathan Rajlich)\n* net, http, https: add localAddress option (Dmitry Nizovtsev)\n* addon improvements (Nathan Rajlich)\n* build improvements (Ben Noordhuis, Sadique Ali, T.C. Hollingsworth, Nathan Rajlich)\n* add support for \"SEARCH\" request methods (Nathan Rajlich)\n* expose the zlib and http_parser version in process.versions (Nathan Rajlich)\n\n<a id=\"0.7.5\"></a>\n## 2012.02.23, Version 0.7.5 (unstable)\n\nhttps://github.com/nodejs/node/commit/d384b8b0d2ab7f05465f0a3e15fe20b4e25b5f86\n\n* startup speed improvements (Maciej Ma\u0142ecki)\n* crypto: add function getDiffieHellman() (Tomasz Buchert)\n* buffer: support decoding of URL-safe base64 (Ben Noordhuis)\n* Make QueryString.parse() even faster (Brian White)\n* url: decode url entities in auth section (Ben Noordhuis)\n* http: support PURGE request method (Ben Noordhuis)\n* http: Generate Date headers on responses (Mark Nottingham)\n* Fix [#2762](https://github.com/joyent/node/issues/2762): Add callback to close function. (Mikeal Rogers)\n* dgram: fix out-of-bound memory read (Ben Noordhuis)\n* repl: add automatic loading of built-in libs (Brandon Benvie)\n* repl: remove double calls where possible (Fedor Indutny)\n* Readline improvements. Related: [#2737](https://github.com/joyent/node/issues/2737) [#2756](https://github.com/joyent/node/issues/2756) (Colton Baker)\n* build: disable -fomit-frame-pointer on solaris (Dave Pacheco)\n* build: arch detection improvements (Nathan Rajlich)\n* build: Make a fat binary for the OS X `make pkg`. (Nathan Rajlich)\n* jslint src/ and lib/ on 'make test' (isaacs)\n\n<a id=\"0.7.4\"></a>\n## 2012.02.14, Version 0.7.4 (unstable)\n\nhttps://github.com/nodejs/node/commit/de21de920cf93ec40736ada3792a7f85f3eadeda\n\n* Upgrade V8 to 3.9.5\n* Upgrade npm to 1.1.1\n* build: Detect host_arch better (Karl Skomski)\n* debugger: export `debug_port` to `process` (Fedor Indutny)\n* api docs: CSS bug fixes (isaacs)\n* build: use -fPIC for native addons on UNIX (Nathan Rajlich)\n* Re-add top-level v8::Locker (Marcel Laverdet)\n* Move images out of the dist tarballs (isaacs)\n* libuv: Remove uv_export and uv_import (Ben Noordhuis)\n* build: Support x64 build on Windows (Igor Zinkovsky)\n\n<a id=\"0.7.3\"></a>\n## 2012.02.07, Version 0.7.3 (unstable)\n\nhttps://github.com/nodejs/node/commit/99059aad8d654acda4abcfaa68df182b50f2ec90\n\n* Upgrade V8 to 3.9.2\n* Revert support for isolates. (Ben Noordhuis)\n* cluster: Cleanup docs, event handling, and process.disconnect (Andreas Madsen)\n* gyp_addon: link with node.lib on Windows (Nathan Rajlich)\n* http: fix case where http-parser is freed twice (koichik)\n* Windows: disable RTTI and exceptions (Bert Belder)\n\n<a id=\"0.7.2\"></a>\n## 2012.02.01, Version 0.7.2 (unstable)\n\nhttps://github.com/nodejs/node/commit/ec79acb3a6166e30f0bf271fbbfda1fb575b3321\n\n* Update V8 to 3.8.9\n* Support for sharing streams across Isolates (Igor Zinkovsky)\n* [#2636](https://github.com/joyent/node/issues/2636) - Fix case where http_parsers are freed too early (koichik)\n* url: Support for IPv6 addresses in URLs (\u0141ukasz Walukiewicz)\n* child_process: Add disconnect() method to child processes (Andreas Madsen)\n* fs: add O_EXCL support, exclusive open file (Ben Noordhuis)\n* fs: more specific error messages (Tj Holowaychuk)\n* tty: emit 'unknown' key event if key sequence not found (Dan VerWeire, Nathan Rajlich)\n* build: compile release build too if BUILDTYPE=Debug (Ben Noordhuis)\n* module: fix --debug-brk on symlinked scripts (Fedor Indutny)\n* zlib: fix `Failed to set dictionary` issue (Fedor Indutny)\n* waf: predict target arch for OS X (Fedor Indutny)\n\n<a id=\"0.7.1\"></a>\n## 2012.01.23, Version 0.7.1 (unstable)\n\nhttps://github.com/nodejs/node/commit/a74354735ab5d5b0fa35a1e4ff7e653757d2069b\n\n* Update V8 to 3.8.8\n* Install node-waf by default (Fedor Indutny)\n* crypto: Add ability to turn off PKCS padding (Ingmar Runge)\n* v8: implement VirtualMemory class on SunOS (Ben Noordhuis)\n* Add cluster.setupMaster (Andreas Madsen)\n* move `path.exists*` to `fs.exists*` (Maciej Ma\u0142ecki)\n* typed arrays: set class name (Ben Noordhuis)\n* libuv bug fixes (Igor Zinkovsky, Ben Noordhuis, Dan VerWeire)\n\n<a id=\"0.7.0\"></a>\n## 2012.01.16, Version 0.7.0 (unstable)\n\nhttps://github.com/nodejs/node/commit/9cc55dca6f67a6096c858b841c677b0593404321\n\n* Upgrade V8 to 3.8.6\n* Use GYP build system on unix (Ben Noordhuis)\n* Experimental isolates support (Ben Noordhuis)\n* Improvements to Cluster API (Andreas Madsen)\n* Use isolates for internal debugger (Fedor Indutny)\n* Bug fixes\n\n<a id=\"0.6.20\"></a>\n## 2012.07.10 Version 0.6.20 (maintenance)\n\nhttps://github.com/nodejs/node/commit/952e513379169ec1b40909d1db056e9bf4294899\n\n* npm: Upgrade to 1.1.37 (isaacs)\n* benchmark: Backport improvements made in master (isaacs)\n* build: always link with -lz (Trent Mick)\n* core: use proper #include directives (Ben Noordhuis)\n* cluster: don't silently drop messages when the write queue gets big (Bert Belder)\n* windows: don't print error when GetConsoleTitleW returns an empty string (Bert Belder)\n\n<a id=\"0.6.19\"></a>\n## 2012.06.06 Version 0.6.19 (stable)\n\nhttps://github.com/nodejs/node/commit/debf552ed2d4a53957446e82ff3c52a8182d5ff4\n\n* npm: upgrade to 1.1.24\n* fs: no end emit after createReadStream.pause() (Andreas Madsen)\n* vm: cleanup module memory leakage (Marcel Laverdet)\n* unix: fix loop starvation under high network load (Ben Noordhuis)\n* unix: remove abort() in ev_unref() (Ben Noordhuis)\n* windows/tty: never report error after forcibly aborting line-buffered read (Bert Belder)\n* windows: skip GetFileAttributes call when opening a file (Bert Belder)\n\n<a id=\"0.6.18\"></a>\n## 2012.05.15 Version 0.6.18 (stable)\n\nhttps://github.com/nodejs/node/commit/4bc1d395de6abed2cf1e4d0b7b3a1480a21c368f\n\n* windows: skip GetFileAttributes call when opening a file (Bert Belder)\n* crypto: add PKCS12/PFX support (Sambasiva Suda)\n* [#3240](https://github.com/joyent/node/issues/3240): child_process: delete NODE_CHANNEL_FD from env in spawn (Ben Noordhuis)\n* windows: add test for path.normalize with UNC paths (Bert Belder)\n* windows: make path.normalize convert all slashes to backslashes (Bert Belder)\n* fs: Automatically close FSWatcher on error (Bert Belder)\n* [#3258](https://github.com/joyent/node/issues/3258): fs.ReadStream.pause() emits duplicate data event (koichik)\n* pipe_wrap: don't assert() on pipe accept errors (Ben Noordhuis)\n* Better exception output for module load and process.nextTick (Felix Geisendo\u0308rfer)\n* zlib: fix error reporting (Ben Noordhuis)\n* http: Don't destroy on timeout (isaacs)\n* [#3231](https://github.com/joyent/node/issues/3231): http: Don't try to emit error on a null'ed req object (isaacs)\n* [#3236](https://github.com/joyent/node/issues/3236): http: Refactor ClientRequest.onSocket (isaacs)\n\n<a id=\"0.6.17\"></a>\n## 2012.05.04 Version 0.6.17 (stable)\n\nhttps://github.com/nodejs/node/commit/4ced23deaf36493f4303a18f6fdce768c58becc0\n\n* Upgrade npm to 1.1.21\n* uv: Add support for EROFS errors (Ben Noordhuis, Maciej Ma\u0142ecki)\n* uv: Add support for EIO and ENOSPC errors (Fedor Indutny)\n* windows: Add support for EXDEV errors (Bert Belder)\n* http: Fix client memory leaks (isaacs, Vincent Voyer)\n* fs: fix file descriptor leak in sync functions (Ben Noordhuis)\n* fs: fix ReadStream / WriteStream double close bug (Ben Noordhuis)\n\n<a id=\"0.6.16\"></a>\n## 2012.04.30 Version 0.6.16 (stable)\n\nhttps://github.com/nodejs/node/commit/a1d193963ddc80a27da5da01b59751e14e33d1d6\n\n* Upgrade V8 to 3.6.6.25\n* Upgrade npm to 1.1.19\n* Windows: add mappings for UV_ENOENT (Bert Belder)\n* linux: add IN_MOVE_SELF to inotify event mask (Ben Noordhuis)\n* unix: call pipe handle connection cb on accept() error (Ben Noordhuis)\n* unix: handle EWOULDBLOCK (Ben Noordhuis)\n* map EWOULDBLOCK to UV_EAGAIN (Ben Noordhuis)\n* Map ENOMEM to UV_ENOMEM (isaacs)\n* Child process: support the `gid` and `uid` options (Bert Belder)\n* test: cluster: add worker death event test (Ben Noordhuis)\n* typo in node_http_parser (isaacs)\n* http_parser: Eat CRLF between requests, even on connection:close. (Ben Noordhuis)\n* don't check return value of unsetenv (Ben Noordhuis)\n\n<a id=\"0.6.15\"></a>\n## 2012.04.09 Version 0.6.15 (stable)\n\nhttps://github.com/nodejs/node/commit/f160a45b254e591eb33716311c92be533c6d86c4\n\n* Update npm to 1.1.16\n* Show licenses in binary installers.\n* unix: add uv_fs_read64, uv_fs_write64 and uv_fs_ftruncate64 (Ben Noordhuis)\n* add 64bit offset fs functions (Igor Zinkovsky)\n* windows: don't report ENOTSOCK when attempting to bind an udp handle twice (Bert Belder)\n* windows: backport pipe-connect-to-file fixes from master (Bert Belder)\n* windows: never call fs event callbacks after closing the watcher (Bert Belder)\n* fs.readFile: don't make the callback before the fd is closed (Bert Belder)\n* windows: use 64bit offsets for uv_fs apis (Igor Zinkovsky)\n* Fix [#2061](https://github.com/joyent/node/issues/2061): segmentation fault on OS X due to stat size mismatch (Ben Noordhuis)\n\n<a id=\"0.6.14\"></a>\n## 2012.03.22 Version 0.6.14 (stable)\n\nhttps://github.com/nodejs/node/commit/e513ffef7549a56a5af728e1f0c2c0c8f290518a\n\n* net: don't crash when queued write fails (Igor Zinkovsky)\n* sunos: fix EMFILE on process.memoryUsage() (Bryan Cantrill)\n* crypto: fix compile-time error with openssl 0.9.7e (Ben Noordhuis)\n* unix: ignore ECONNABORTED errors from accept() (Ben Noordhuis)\n* Add UV_ENOSPC and mappings to it (Bert Belder)\n* http-parser: Fix response body is not read (koichik)\n* Upgrade npm to 1.1.12\n  - upgrade node-gyp to 0.3.7\n  - work around AV-locked directories on Windows\n  - Fix isaacs/npm[#2293](https://github.com/joyent/node/issues/2293) Don't try to 'uninstall' /\n  - Exclude symbolic links from packages.\n  - Fix isaacs/npm[#2275](https://github.com/joyent/node/issues/2275) Spurious 'unresolvable cycle' error.\n  - Exclude/include dot files as if they were normal files\n\n<a id=\"0.6.13\"></a>\n## 2012.03.15 Version 0.6.13 (stable)\n\nhttps://github.com/nodejs/node/commit/9f7f86b534f8556290eb8cad915984ff4ca54996\n\n* Windows: Many libuv test fixes (Bert Belder)\n* Windows: avoid uv_guess_handle crash in when fd < 0 (Bert Belder)\n* Map EBUSY and ENOTEMPTY errors (Bert Belder)\n* Windows: include syscall in fs errors (Bert Belder)\n* Fix fs.watch ENOSYS on Linux kernel version mismatch (Ben Noordhuis)\n* Update npm to 1.1.9\n  - upgrade node-gyp to 0.3.5 (Nathan Rajlich)\n  - Fix isaacs/npm[#2249](https://github.com/joyent/node/issues/2249) Add cache-max and cache-min configs\n  - Properly redirect across https/http registry requests\n  - log config usage if undefined key in set function (Kris Windham)\n  - Add support for os/cpu fields in package.json (Adam Blackburn)\n  - Automatically node-gyp packages containing a binding.gyp\n  - Fix failures unpacking in UNC shares\n  - Never create un-listable directories\n  - Handle cases where an optionalDependency fails to build\n\n<a id=\"0.6.12\"></a>\n## 2012.03.02 Version 0.6.12 (stable)\n\nhttps://github.com/nodejs/node/commit/48a2d34cfe6b7e1c9d15202a4ef5e3c82d1fba35\n\n* Upgrade V8 to 3.6.6.24\n* dtrace ustack helper improvements (Dave Pacheco)\n* API Documentation refactor (isaacs)\n* [#2827](https://github.com/joyent/node/issues/2827) net: fix race write() before and after connect() (koichik)\n* [#2554](https://github.com/joyent/node/issues/2554) [#2567](https://github.com/joyent/node/issues/2567) throw if fs args for 'start' or 'end' are strings (AJ ONeal)\n* punycode: Update to v1.0.0 (Mathias Bynens)\n* Make a fat binary for the OS X pkg (isaacs)\n* Fix hang on accessing process.stdin (isaacs)\n* repl: make tab completion work on non-objects (Nathan Rajlich)\n* Fix fs.watch on OS X (Ben Noordhuis)\n* Fix [#2515](https://github.com/joyent/node/issues/2515) nested setTimeouts cause premature process exit (Ben Noordhuis)\n* windows: fix time conversion in stat (Igor Zinkovsky)\n* windows: fs: handle EOF in read (Brandon Philips)\n* windows: avoid IOCP short-circuit on non-ifs lsps (Igor Zinkovsky)\n* Upgrade npm to 1.1.4 (isaacs)\n  - windows fixes\n  - Bundle nested bundleDependencies properly\n  - install: support --save with url install targets\n  - shrinkwrap: behave properly with url-installed modules\n  - support installing uncompressed tars or single file modules from urls etc.\n  - don't run make clean on rebuild\n  - support HTTPS-over-HTTP proxy tunneling\n\n<a id=\"0.6.11\"></a>\n## 2012.02.17 Version 0.6.11 (stable)\n\nhttps://github.com/nodejs/node/commit/1eb1fe32250fc88cb5b0a97cddf3e02be02e3f4a\n\n* http: allow multiple WebSocket RFC6455 headers (Einar Otto Stangvik)\n* http: allow multiple WWW-Authenticate headers (Ben Noordhuis)\n* windows: support unicode argv and environment variables (Bert Belder)\n* tls: mitigate session renegotiation attacks (Ben Noordhuis)\n* tcp, pipe: don't assert on uv_accept() errors (Ben Noordhuis)\n* tls: Allow establishing secure connection on the existing socket (koichik)\n* dgram: handle close of dgram socket before DNS lookup completes (Seth Fitzsimmons)\n* windows: Support half-duplex pipes (Igor Zinkovsky)\n* build: disable omit-frame-pointer on solaris systems (Dave Pacheco)\n* debugger: fix --debug-brk (Ben Noordhuis)\n* net: fix large file downloads failing (koichik)\n* fs: fix ReadStream failure to read from existing fd (Christopher Jeffrey)\n* net: destroy socket on DNS error (Stefan Rusu)\n* dtrace: add missing translator (Dave Pacheco)\n* unix: don't flush tty on switch to raw mode (Ben Noordhuis)\n* windows: reset brightness when reverting to default text color (Bert Belder)\n* npm: update to 1.1.1\n  - Update which, fstream, mkdirp, request, and rimraf\n  - Fix [#2123](https://github.com/joyent/node/issues/2123) Set path properly for lifecycle scripts on windows\n  - Mark the root as seen, so we don't recurse into it. Fixes [#1838](https://github.com/joyent/node/issues/1838). (Martin Cooper)\n\n<a id=\"0.6.10\"></a>\n## 2012.02.02, Version 0.6.10 (stable)\n\nhttps://github.com/nodejs/node/commit/051908e023f87894fa68f5b64d0b99a19a7db01e\n\n* Update V8 to 3.6.6.20\n* Add npm msysgit bash shim to msi installer (isaacs)\n* buffers: fix intermittent out of bounds error (Ben Noordhuis)\n* buffers: honor length argument in base64 decoder (Ben Noordhuis)\n* windows: Fix path.exists regression (Bert Belder)\n* Make QueryString.parse run faster (Philip Tellis)\n* http: avoid freeing http-parser objects too early (koichik)\n* timers: add v0.4 compatibility hack (Ben Noordhuis)\n* Proper EPERM error code support (Igor Zinkovsky, Brandon Philips)\n* dgram: Implement udp multicast methods on windows (Bert Belder)\n\n<a id=\"0.6.9\"></a>\n## 2012.01.27, Version 0.6.9 (stable)\n\nhttps://github.com/nodejs/node/commit/f19e20d33f57c4d2853aaea7d2724d44f3b0012f\n\n* dgram: Bring back missing functionality for Unix (Dan VerWeire, Roman Shtylman, Ben Noordhuis)\n  - Note: Windows UDP support not yet complete.\n\n* http: Fix parser memory leak (koichik)\n* zlib: Fix [#2365](https://github.com/joyent/node/issues/2365) crashes on invalid input (Nicolas LaCasse)\n* module: fix --debug-brk on symlinked scripts (Fedor Indutny)\n* Documentation Restyling (Matthew Fitzsimmons)\n* Update npm to 1.1.0-3 (isaacs)\n* Windows: fix regression in stat() calls to C:\\ (Bert Belder)\n\n<a id=\"0.6.8\"></a>\n## 2012.01.19, Version 0.6.8 (stable)\n\nhttps://github.com/nodejs/node/commit/d18cebaf8a7ac701dabd71a3aa4eb0571db6a645\n\n* Update V8 to 3.6.6.19\n* Numeric key hash collision fix for V8 (Erik Corry, Fedor Indutny)\n* Add missing TTY key translations for F1-F5 on Windows (Brandon Benvie)\n* path.extname bugfix with . and .. paths (Bert Belder)\n* cluster: don't always kill the master on uncaughtException (Ben Noordhuis)\n* Update npm to 1.1.0-2 (isaacs)\n* typed arrays: set class name (Ben Noordhuis)\n* zlib binding cleanup (isaacs, Bert Belder)\n* dgram: use slab memory allocator (Michael Bernstein)\n* fix segfault [#2473](https://github.com/joyent/node/issues/2473)\n* [#2521](https://github.com/joyent/node/issues/2521) 60% improvement in fs.stat on Windows (Igor Zinkovsky)\n\n<a id=\"0.6.7\"></a>\n## 2012.01.06, Version 0.6.7 (stable)\n\nhttps://github.com/nodejs/node/commit/d5a189acef14a851287ee555f7a39431fe276e1c\n\n* V8 hash collision fix (Breaks MIPS) (Bert Belder, Erik Corry)\n* Upgrade V8 to 3.6.6.15\n* Upgrade npm to 1.1.0-beta-10 (isaacs)\n* many doc updates (Ben Noordhuis, Jeremy Martin, koichik, Dave Irvine,\n  Seong-Rak Choi, Shannen, Adam Malcontenti-Wilson, koichik)\n\n* Fix segfault in node_http_parser.cc\n* dgram, timers: fix memory leaks (Ben Noordhuis, Yoshihiro Kikuchi)\n* repl: fix repl.start not passing the `ignoreUndefined` arg (Damon Oehlman)\n* [#1980](https://github.com/joyent/node/issues/1980): Socket.pause null reference when called on a closed Stream (koichik)\n* [#2263](https://github.com/joyent/node/issues/2263): XMLHttpRequest piped in a writable file stream hang (koichik)\n* [#2069](https://github.com/joyent/node/issues/2069): http resource leak (koichik)\n* buffer.readInt global pollution fix (Phil Sung)\n* timers: fix performance regression (Ben Noordhuis)\n* [#2308](https://github.com/joyent/node/issues/2308), [#2246](https://github.com/joyent/node/issues/2246): node swallows openssl error on request (koichik)\n* [#2114](https://github.com/joyent/node/issues/2114): timers: remove _idleTimeout from item in .unenroll() (James Hartig)\n* [#2379](https://github.com/joyent/node/issues/2379): debugger: Request backtrace w/o refs (Fedor Indutny)\n* simple DTrace ustack helper (Dave Pacheco)\n* crypto: rewrite HexDecode without snprintf (Roman Shtylman)\n* crypto: don't ignore DH init errors (Ben Noordhuis)\n\n<a id=\"0.6.6\"></a>\n## 2011.12.14, Version 0.6.6 (stable)\n\nhttps://github.com/nodejs/node/commit/9a059ea69e1f6ebd8899246682d8ca257610b8ab\n\n* npm update to 1.1.0-beta-4 (Isaac Z. Schlueter)\n* cli: fix output of --help (Ben Noordhuis)\n* new website\n* pause/resume semantics for stdin (Isaac Z. Schlueter)\n* Travis CI integration (Maciej Ma\u0142ecki)\n* child_process: Fix bug regarding closed stdin (Ben Noordhuis)\n* Enable upgrades in MSI. (Igor Zinkovsky)\n* net: Fixes memory leak (Ben Noordhuis)\n* fs: handle fractional or NaN ReadStream buffer size (Ben Noordhuis)\n* crypto: fix memory leaks in PBKDF2 error path (Ben Noordhuis)\n\n<a id=\"0.6.5\"></a>\n## 2011.12.04, Version 0.6.5 (stable)\n\nhttps://github.com/nodejs/node/commit/6cc94db653a2739ab28e33b2d6a63c51bd986a9f\n\n* npm workaround Windows antivirus software (isaacs)\n* Upgrade V8 to 3.6.6.11\n\n<a id=\"0.6.4\"></a>\n## 2011.12.02, Version 0.6.4 (stable)\n\nhttps://github.com/nodejs/node/commit/9170077f13e5e5475b23d1d3c2e7f69bfe139727\n\n* doc improvements (Kyle Young, Tim Oxley, Roman Shtylman, Mathias Bynens)\n* upgrade bundled npm (Isaac Schlueter)\n* polish Windows installer (Igor Zinkovsky, Isaac Schlueter)\n* punycode: upgrade to v0.2.1 (Mathias Bynens)\n* build: add \u2013without-npm flag to configure script\n* sys: deprecate module some more, print stack trace if NODE_DEBUG=sys\n* cli: add -p switch, prints result of \u2013eval\n* [#1997](https://github.com/joyent/node/issues/1997): fix Blowfish ECB encryption and decryption (Ingmar Runge)\n* [#2223](https://github.com/joyent/node/issues/2223): fix socket \u2018close\u2019 event being emitted twice\n* [#2224](https://github.com/joyent/node/issues/2224): fix RSS memory usage > 4 GB reporting (Russ Bradberry)\n* [#2225](https://github.com/joyent/node/issues/2225): fix util.inspect() object stringification bug (Nathan Rajlich)\n\n<a id=\"0.6.3\"></a>\n## 2011.11.25, Version 0.6.3 (stable)\n\nhttps://github.com/nodejs/node/commit/b159c6d62e5756d3f8847419d29c6959ea288b56\n\n* [#2083](https://github.com/joyent/node/issues/2083) Land NPM in Node. It is included in packages/installers and installed\n  on `make install`.\n\n* [#2076](https://github.com/joyent/node/issues/2076) Add logos to windows installer.\n* [#1711](https://github.com/joyent/node/issues/1711) Correctly handle http requests without headers. (Ben Noordhuis,\n  Felix Geisend\u00f6rfer)\n\n* TLS: expose more openssl SSL context options and constants. (Ben Noordhuis)\n* [#2177](https://github.com/joyent/node/issues/2177) Windows: don't kill UDP socket when a packet fails to reach its\n  destination. (Bert Belder)\n\n* Windows: support paths longer than 260 characters. (Igor Zinkovsky)\n* Windows: correctly resolve drive-relative paths. (Bert Belder)\n* [#2166](https://github.com/joyent/node/issues/2166) Don't leave file descriptor open after lchmod. (Isaac Schlueter)\n* [#2084](https://github.com/joyent/node/issues/2084) Add OS X .pkg build script to make file.\n* [#2160](https://github.com/joyent/node/issues/2160) Documentation improvements. (Ben Noordhuis)\n\n<a id=\"0.6.2\"></a>\n## 2011.11.18, Version 0.6.2 (stable)\n\nhttps://github.com/nodejs/node/commit/a4402f0b2e410b19375a1d5c5fb7fe7f66f3c7f8\n\n* doc improvements (Artur Adib, Trevor Burnham, Ryan Emery, Trent Mick)\n* timers: remember extra setTimeout() arguments when timeout==0\n* punycode: use Mathias Bynens's punycode library, it's more compliant\n* repl: improved tab completion (Ryan Emery)\n* buffer: fix range checks in .writeInt() functions (Lukasz Walukiewicz)\n* tls: make cipher list configurable\n* addons: make Buffer and ObjectWrap visible to Windows add-ons (Bert Belder)\n* crypto: add PKCS[#1](https://github.com/joyent/node/issues/1) a.k.a RSA public key verification support\n* windows: fix stdout writes when redirected to nul\n* sunos: fix build on Solaris and Illumos\n* Upgrade V8 to 3.6.6.8\n\n<a id=\"0.6.1\"></a>\n## 2011.11.11, Version 0.6.1 (stable)\n\nhttps://github.com/nodejs/node/commit/170f2addb2dd0c625bc4a6d461e89a31ad68b79b\n\n* doc improvements (Eric Lovett, Ben Noordhuis, Scott Anderson, Yoji SHIDARA)\n* crypto: make thread-safe (Ben Noordhuis)\n* fix process.kill error object\n* debugger: correctly handle source with multi-byte characters (Shigeki Ohtsu)\n* make stdout and stderr non-destroyable (Igor Zinkovsky)\n* fs: don't close uninitialized fs.watch handle (Ben Noordhuis)\n* [#2026](https://github.com/joyent/node/issues/2026) fix man page install on BSDs (Ben Noordhuis)\n* [#2040](https://github.com/joyent/node/issues/2040) fix unrecognized errno assert in uv_err_name\n* [#2043](https://github.com/joyent/node/issues/2043) fs: mkdir() should call callback if mode is omitted\n* [#2045](https://github.com/joyent/node/issues/2045) fs: fix fs.realpath on windows to return on error (Benjamin Pasero)\n* [#2047](https://github.com/joyent/node/issues/2047) minor cluster improvements\n* [#2052](https://github.com/joyent/node/issues/2052) readline get window columns correctly\n* Upgrade V8 to 3.6.6.7\n\n<a id=\"0.6.0\"></a>\n## 2011.11.04, Version 0.6.0 (stable)\n\nhttps://github.com/nodejs/node/commit/865b077819a9271a29f982faaef99dc635b57fbc\n\n* print undefined on undefined values in REPL (Nathan Rajlich)\n* doc improvements (koichik, seebees, bnoordhuis,\n  Maciej Ma\u0142ecki, Jacob Kragh)\n\n* support native addon loading in windows (Bert Belder)\n* rename getNetworkInterfaces() to networkInterfaces() (bnoordhuis)\n* add pending accepts knob for windows (igorzi)\n* http.request(url.parse(x)) (seebees)\n* [#1929](https://github.com/joyent/node/issues/1929) zlib Respond to 'resume' events properly (isaacs)\n* stream.pipe: Remove resume and pause events\n* test fixes for windows (igorzi)\n* build system improvements (bnoordhuis)\n* [#1936](https://github.com/joyent/node/issues/1936) tls: does not emit 'end' from EncryptedStream (koichik)\n* [#758](https://github.com/joyent/node/issues/758) tls: add address(), remoteAddress/remotePort\n* [#1399](https://github.com/joyent/node/issues/1399) http: emit Error object after .abort() (bnoordhuis)\n* [#1999](https://github.com/joyent/node/issues/1999) fs: make mkdir() default to 0777 permissions (bnoordhuis)\n* [#2001](https://github.com/joyent/node/issues/2001) fix pipe error codes\n* [#2002](https://github.com/joyent/node/issues/2002) Socket.write should reset timeout timer\n* stdout and stderr are blocking when associated with file too.\n* remote debugger support on windows (Bert Belder)\n* convenience methods for zlib (Matt Robenolt)\n* process.kill support on windows (igorzi)\n* process.uptime() support on windows (igorzi)\n* Return IPv4 addresses before IPv6 addresses from getaddrinfo\n* util.inspect improvements (Nathan Rajlich)\n* cluster module api changes\n* Downgrade V8 to 3.6.6.6\n\n<a id=\"0.5.10\"></a>\n## 2011.10.21, Version 0.5.10 (unstable)\n\nhttps://github.com/nodejs/node/commit/220e61c1f65bf4db09699fcf6399c0809c0bc446\n\n* Remove cmake build system, support for Cygwin, legacy code base,\n\tprocess.ENV, process.ARGV, process.memoryUsage().vsize, os.openOSHandle\n\n* Documentation improvements (Igor Zinkovsky, Bert Belder, Ilya Dmitrichenko,\nkoichik, Maciej Ma\u0142ecki, Guglielmo Ferri, isaacs)\n\n* Performance improvements (Daniel Ennis, Bert Belder, Ben Noordhuis)\n* Long process.title support (Ben Noordhuis)\n* net: register net.Server callback only once (Simen Brekken)\n* net: fix connect queue bugs (Ben Noordhuis)\n* debugger: fix backtrace err handling (Fedor Indutny)\n* Use getaddrinfo instead of c-ares for dns.lookup\n* Emit 'end' from crypto streams on close\n* [#1902](https://github.com/joyent/node/issues/1902) buffer: use NO_NULL_TERMINATION flag (koichik)\n* [#1907](https://github.com/joyent/node/issues/1907) http: Added support for HTTP PATCH verb (Thomas Parslow)\n* [#1644](https://github.com/joyent/node/issues/1644) add GetCPUInfo on windows (Karl Skomski)\n* [#1484](https://github.com/joyent/node/issues/1484), [#1834](https://github.com/joyent/node/issues/1834), [#1482](https://github.com/joyent/node/issues/1482), [#771](https://github.com/joyent/node/issues/771) Don't use a separate context for the repl.\n  (isaacs)\n\n* [#1882](https://github.com/joyent/node/issues/1882) zlib Update 'availOutBefore' value, and test (isaacs)\n* [#1888](https://github.com/joyent/node/issues/1888) child_process.fork: don't modify args (koichik)\n* [#1516](https://github.com/joyent/node/issues/1516) tls: requestCert unusable with Firefox and Chrome (koichik)\n* [#1467](https://github.com/joyent/node/issues/1467) tls: The TLS API is inconsistent with the TCP API (koichik)\n* [#1894](https://github.com/joyent/node/issues/1894) net: fix error handling in listen() (koichik)\n* [#1860](https://github.com/joyent/node/issues/1860) console.error now goes through uv_tty_t\n* Upgrade V8 to 3.7.0\n* Upgrade GYP to r1081\n\n<a id=\"0.5.9\"></a>\n## 2011.10.10, Version 0.5.9 (unstable)\n\nhttps://github.com/nodejs/node/commit/3bd9b08fb125b606f97a4079b147accfdeebb07d\n\n* fs.watch interface backed by kqueue, inotify, and ReadDirectoryChangesW\n  (Igor Zinkovsky, Ben Noordhuis)\n\n* add dns.resolveTxt (Christian Tellnes)\n* Remove legacy http library (Ben Noordhuis)\n* child_process.fork returns and works on Windows. Allows passing handles.\n  (Igor Zinkovsky, Bert Belder)\n\n* [#1774](https://github.com/joyent/node/issues/1774) Lint and clean up for --harmony_block_scoping (Tyler Larson, Colton\n  Baker)\n\n* [#1813](https://github.com/joyent/node/issues/1813) Fix ctrl+c on Windows (Bert Belder)\n* [#1844](https://github.com/joyent/node/issues/1844) unbreak --use-legacy (Ben Noordhuis)\n* process.stderr now goes through libuv. Both process.stdout and\n  process.stderr are blocking when referencing a TTY.\n\n* net_uv performance improvements (Ben Noordhuis, Bert Belder)\n\n<a id=\"0.5.8\"></a>\n## 2011.09.30, Version 0.5.8 (unstable)\n\nhttps://github.com/nodejs/node/commit/7cc17a0cea1d25188c103745a7d0c24375e3a609\n\n* zlib bindings (isaacs)\n* Windows supports TTY ANSI escape codes (Bert Belder)\n* Debugger improvements (Fedor Indutny)\n* crypto: look up SSL errors with ERR_print_errors() (Ben Noordhuis)\n* dns callbacks go through MakeCallback now\n* Raise an error when a malformed package.json file is found. (Ben Leslie)\n* buffers: handle bad length argument in constructor (Ben Noordhuis)\n* [#1726](https://github.com/joyent/node/issues/1726), unref process.stdout\n* Doc improvements (Ben Noordhuis, Fedor Indutny, koichik)\n* Upgrade libuv to fe18438\n\n<a id=\"0.5.7\"></a>\n## 2011.09.16, Version 0.5.7 (unstable)\n\nhttps://github.com/nodejs/node/commit/558241166c4f3c516e5a448e676db0b57119212f\n\n* Upgrade V8 to 3.6.4\n* Improve Windows compatibility\n* Documentation improvements\n* Debugger and REPL improvements (Fedor Indutny)\n* Add legacy API support: net.Stream(fd), process.stdout.writable,\n  process.stdout.fd\n\n* Fix mkdir EEXIST handling (isaacs)\n* Use net_uv instead of net_legacy for stdio\n* Do not load readline from util.inspect\n* [#1673](https://github.com/joyent/node/issues/1673) Fix bug related to V8 context with accessors (Fedor Indutny)\n* [#1634](https://github.com/joyent/node/issues/1634) util: Fix inspection for Error (koichik)\n* [#1645](https://github.com/joyent/node/issues/1645) fs: Add positioned file writing feature to fs.WriteStream (Thomas\n  Shinnick)\n\n* [#1637](https://github.com/joyent/node/issues/1637) fs: Unguarded fs.watchFile cache statWatchers checking fixed (Thomas\n  Shinnick)\n\n* [#1695](https://github.com/joyent/node/issues/1695) Forward customFds to ChildProcess.spawn\n* [#1707](https://github.com/joyent/node/issues/1707) Fix hasOwnProperty security problem in querystring (isaacs)\n* [#1719](https://github.com/joyent/node/issues/1719) Drain OpenSSL error queue\n\n<a id=\"0.5.6\"></a>\n## 2011.09.08, Version 0.5.6 (unstable)\n\nhttps://github.com/nodejs/node/commit/b49bec55806574a47403771bce1ee379c2b09ca2\n\n* [#345](https://github.com/joyent/node/issues/345), [#1635](https://github.com/joyent/node/issues/1635), [#1648](https://github.com/joyent/node/issues/1648) Documentation improvements (Thomas Shinnick,\n  Abimanyu Raja, AJ ONeal, Koichi Kobayashi, Michael Jackson, Logan Smyth,\n  Ben Noordhuis)\n\n* [#650](https://github.com/joyent/node/issues/650) Improve path parsing on windows (Bert Belder)\n* [#752](https://github.com/joyent/node/issues/752) Remove headers sent check in OutgoingMessage.getHeader()\n  (Peter Lyons)\n\n* [#1236](https://github.com/joyent/node/issues/1236), [#1438](https://github.com/joyent/node/issues/1438), [#1506](https://github.com/joyent/node/issues/1506), [#1513](https://github.com/joyent/node/issues/1513), [#1621](https://github.com/joyent/node/issues/1621), [#1640](https://github.com/joyent/node/issues/1640), [#1647](https://github.com/joyent/node/issues/1647) Libuv-related bugs fixed\n  (Jorge Chamorro Bieling, Peter Bright, Luis Lavena, Igor Zinkovsky)\n\n* [#1296](https://github.com/joyent/node/issues/1296), [#1612](https://github.com/joyent/node/issues/1612) crypto: Fix BIO's usage. (Koichi Kobayashi)\n* [#1345](https://github.com/joyent/node/issues/1345) Correctly set socket.remoteAddress with libuv backend (Bert Belder)\n* [#1429](https://github.com/joyent/node/issues/1429) Don't clobber quick edit mode on windows (Peter Bright)\n* [#1503](https://github.com/joyent/node/issues/1503) Make libuv backend default on unix, override with `node --use-legacy`\n* [#1565](https://github.com/joyent/node/issues/1565) Fix fs.stat for paths ending with \\ on windows (Igor Zinkovsky)\n* [#1568](https://github.com/joyent/node/issues/1568) Fix x509 certificate subject parsing (Koichi Kobayashi)\n* [#1586](https://github.com/joyent/node/issues/1586) Make socket write encoding case-insensitive (Koichi Kobayashi)\n* [#1591](https://github.com/joyent/node/issues/1591), [#1656](https://github.com/joyent/node/issues/1656), [#1657](https://github.com/joyent/node/issues/1657) Implement fs in libuv, remove libeio and pthread-win32\n  dependency on windows (Igor Zinkovsky, Ben Noordhuis, Ryan Dahl,\n  Isaac Schlueter)\n\n* [#1592](https://github.com/joyent/node/issues/1592) Don't load-time link against CreateSymbolicLink on windows\n  (Peter Bright)\n\n* [#1601](https://github.com/joyent/node/issues/1601) Improve API consistency when dealing with the socket underlying a HTTP\n  client request (Mikeal Rogers)\n\n* [#1610](https://github.com/joyent/node/issues/1610) Remove DigiNotar CA from trusted list (Isaac Schlueter)\n* [#1617](https://github.com/joyent/node/issues/1617) Added some win32 os functions (Karl Skomski)\n* [#1624](https://github.com/joyent/node/issues/1624) avoid buffer overrun with 'binary' encoding (Koichi Kobayashi)\n* [#1633](https://github.com/joyent/node/issues/1633) make Buffer.write() always set _charsWritten (Koichi Kobayashi)\n* [#1644](https://github.com/joyent/node/issues/1644) Windows: set executables to be console programs (Peter Bright)\n* [#1651](https://github.com/joyent/node/issues/1651) improve inspection for sparse array (Koichi Kobayashi)\n* [#1672](https://github.com/joyent/node/issues/1672) set .code='ECONNRESET' on socket hang up errors (Ben Noordhuis)\n* Add test case for foaf+ssl client certificate (Niclas Hoyer)\n* Added RPATH environment variable to override run-time library paths\n  (Ashok Mudukutore)\n\n* Added TLS client-side session resumption support (Sean Cunningham)\n* Added additional properties to getPeerCertificate (Nathan Rixham,\n  Niclas Hoyer)\n\n* Don't eval repl command twice when an error is thrown (Nathan Rajlich)\n* Improve util.isDate() (Nathan Rajlich)\n* Improvements in libuv backend and bindings, upgrade libuv to\n  bd6066cb349a9b3a1b0d87b146ddaee06db31d10\n\n* Show warning when using lib/sys.js (Maciej Malecki)\n* Support plus sign in url protocol (Maciej Malecki)\n* Upgrade V8 to 3.6.2\n\n<a id=\"0.5.5\"></a>\n## 2011.08.26, Version 0.5.5 (unstable)\n\nhttps://github.com/nodejs/node/commit/d2d53d4bb262f517a227cc178a1648094ba54c20\n\n* typed arrays, implementation from Plesk\n* fix IP multicast on SunOS\n* fix DNS lookup order: IPv4 first, IPv6 second (--use-uv only)\n* remove support for UNIX datagram sockets (--use-uv only)\n* UDP support for Windows (Bert Belder)\n* [#1572](https://github.com/joyent/node/issues/1572) improve tab completion for objects in the REPL (Nathan Rajlich)\n* [#1563](https://github.com/joyent/node/issues/1563) fix buffer overflow in child_process module (reported by Dean McNamee)\n* [#1546](https://github.com/joyent/node/issues/1546) fix performance regression in http module (reported by Brian Geffon)\n* [#1491](https://github.com/joyent/node/issues/1491) add PBKDF2 crypto support (Glen Low)\n* [#1447](https://github.com/joyent/node/issues/1447) remove deprecated http.cat() function (Mikeal Rogers)\n* [#1140](https://github.com/joyent/node/issues/1140) fix incorrect dispatch of vm.runInContext's filename argument\n  (Antranig Basman)\n\n* [#1140](https://github.com/joyent/node/issues/1140) document vm.runInContext() and vm.createContext() (Antranig Basman)\n* [#1428](https://github.com/joyent/node/issues/1428) fix os.freemem() on 64 bits freebsd (Artem Zaytsev)\n* [#1164](https://github.com/joyent/node/issues/1164) make all DNS lookups async, fixes uncatchable exceptions\n  (Koichi Kobayashi)\n\n* fix incorrect ssl shutdown check (Tom Hughes)\n* various cmake fixes (Tom Hughes)\n* improved documentation (Koichi Kobayashi, Logan Smyth, Fedor Indutny,\n  Mikeal Rogers, Maciej Ma\u0142ecki, Antranig Basman, Micka\u00ebl Delahaye)\n\n* upgrade libuv to commit 835782a\n* upgrade V8 to 3.5.8\n\n<a id=\"0.5.4\"></a>\n## 2011.08.12, Version 0.5.4 (unstable)\n\nhttps://github.com/nodejs/node/commit/cfba1f59224ff8602c3fe9145181cad4c6df89a9\n\n* libuv/Windows compatibility improvements\n* Build on Microsoft Visual Studio via GYP. Use generate-projects.bat in the\n  to build sln files. (Peter Bright, Igor Zinkovsky)\n\n* Make Mikeal's HTTP agent client the default. Use old HTTP client with\n  --use-http1\n\n* Fixes https host header default port handling. (Mikeal Rogers)\n* [#1440](https://github.com/joyent/node/issues/1440) strip byte order marker when loading *.js and *.json files\n  (Ben Noordhuis)\n\n* [#1434](https://github.com/joyent/node/issues/1434) Improve util.format() compatibility with browser. (Koichi Kobayashi)\n* Provide unchecked uint entry points for integer Buffer.read/writeInt\n  methods. (Robert Mustacchi)\n\n* CMake improvements (Tom Huges)\n* Upgrade V8 to 3.5.4.\n\n<a id=\"0.5.3\"></a>\n## 2011.08.01, Version 0.5.3 (unstable)\n\nhttps://github.com/nodejs/node/commit/4585330afef44ddfb6a4054bd9b0f190b352628b\n\n* Fix crypto encryption/decryption with Base64. (SAWADA Tadashi)\n* [#243](https://github.com/joyent/node/issues/243) Add an optional length argument to Buffer.write() (koichik)\n* [#657](https://github.com/joyent/node/issues/657) convert nonbuffer data to string in fs.writeFile/Sync\n  (Daniel Pihlstr\u00f6m)\n\n* Add process.features, remove process.useUV (Ben Noordhuis)\n* [#324](https://github.com/joyent/node/issues/324) Fix crypto hmac to accept binary keys + add test cases from rfc 2202\n  and 4231 (Stefan B\u00fchler)\n\n* Add Socket::bytesRead, Socket::bytesWritten (Alexander Uvarov)\n* [#572](https://github.com/joyent/node/issues/572) Don't print result of --eval in CLI (Ben Noordhuis)\n* [#1223](https://github.com/joyent/node/issues/1223) Fix http.ClientRequest crashes if end() was called twice (koichik)\n* [#1383](https://github.com/joyent/node/issues/1383) Emit 'close' after all connections have closed (Felix Geisendo\u0308rfer)\n* Add sprintf-like util.format() function (Ben Noordhuis)\n* Add support for TLS SNI (Fedor Indutny)\n* New http agent implementation. Off by default the command line flag\n  --use-http2 will enable it. \"make test-http2\" will run the tests\n\tfor the new implementation. (Mikeal Rogers)\n\n* Revert AMD compatibility. (isaacs)\n* Windows: improvements, child_process support.\n* Remove pkg-config file.\n* Fix startup time regressions.\n* doc improvements\n\n<a id=\"0.5.2\"></a>\n## 2011.07.22, Version 0.5.2 (unstable)\n\nhttps://github.com/nodejs/node/commit/08ffce1a00dde1199174b390a64a90b60768ddf5\n\n* libuv improvements; named pipe support\n* [#1242](https://github.com/joyent/node/issues/1242) check for SSL_COMP_get_compression_methods() (Ben Noordhuis)\n* [#1348](https://github.com/joyent/node/issues/1348) remove require.paths (isaacs)\n* [#1349](https://github.com/joyent/node/issues/1349) Delimit NODE_PATH with ; on Windows (isaacs)\n* [#1335](https://github.com/joyent/node/issues/1335) Remove EventEmitter from C++\n* [#1357](https://github.com/joyent/node/issues/1357) Load json files with require() (isaacs)\n* [#1374](https://github.com/joyent/node/issues/1374) fix setting ServerResponse.statusCode in writeHead (Trent Mick)\n* Fixed: GC was being run too often.\n* Upgrade V8 to 3.4.14\n* doc improvements\n\n<a id=\"0.5.1\"></a>\n## 2011.07.14, Version 0.5.1 (unstable)\n\nhttps://github.com/nodejs/node/commit/f8bfa54d0fa509f9242637bef2869a1b1e842ec8\n\n* [#1233](https://github.com/joyent/node/issues/1233) Fix os.totalmem on FreeBSD amd64 (Artem Zaytsev)\n* [#1149](https://github.com/joyent/node/issues/1149) IDNA and Punycode support in url.parse\n  (Jeremy Selier, Ben Noordhuis, isaacs)\n\n* Export $CC and $CXX to uv and V8's build systems\n* Include pthread-win32 static libraries in build (Igor Zinkovsky)\n* [#1199](https://github.com/joyent/node/issues/1199), [#1094](https://github.com/joyent/node/issues/1094) Fix fs can't handle large file on 64bit platform (koichik)\n* [#1281](https://github.com/joyent/node/issues/1281) Make require a public member of module (isaacs)\n* [#1303](https://github.com/joyent/node/issues/1303) Stream.pipe returns the destination (Elijah Insua)\n* [#1229](https://github.com/joyent/node/issues/1229) Addons should not -DEV_MULTIPLICITY=0 (Brian White)\n* libuv backend improvements\n* Upgrade V8 to 3.4.10\n\n<a id=\"0.5.0\"></a>\n## 2011.07.05, Version 0.5.0 (unstable)\n\nhttps://github.com/nodejs/node/commit/ae7ed8482ea7e53c59acbdf3cf0e0a0ae9d792cd\n\n* New non-default libuv backend to support IOCP on Windows.\n  Use --use-uv to enable.\n\n* deprecate http.cat\n* docs improved.\n* add child_process.fork\n* add fs.utimes() and fs.futimes() support (Ben Noordhuis)\n* add process.uptime() (Tom Huges)\n* add path.relative (Tony Huang)\n* add os.getNetworkInterfaces()\n* add remoteAddress and remotePort for client TCP connections\n  (Brian White)\n\n* add secureOptions flag, setting ciphers,\n  SSL_OP_CRYPTOPRO_TLSEXT_BUG to TLS (Theo Schlossnagle)\n\n* add process.arch (Nathan Rajlich)\n* add reading/writing of floats and doubles from/to buffers (Brian White)\n* Allow script to be read from stdin\n* [#477](https://github.com/joyent/node/issues/477) add Buffer::fill method to do memset (Konstantin K\u00e4fer)\n* [#573](https://github.com/joyent/node/issues/573) Diffie-Hellman support to crypto module (H\u00e5vard Stranden)\n* [#695](https://github.com/joyent/node/issues/695) add 'hex' encoding to buffer (isaacs)\n* [#851](https://github.com/joyent/node/issues/851) Update how REPLServer uses contexts (Ben Weaver)\n* [#853](https://github.com/joyent/node/issues/853) add fs.lchow, fs.lchmod, fs.fchmod, fs.fchown (isaacs)\n* [#889](https://github.com/joyent/node/issues/889) Allow to remove all EventEmitter listeners at once\n  (Felix Geisendo\u0308rfer)\n\n* [#926](https://github.com/joyent/node/issues/926) OpenSSL NPN support (Fedor Indutny)\n* [#955](https://github.com/joyent/node/issues/955) Change ^C handling in REPL (isaacs)\n* [#979](https://github.com/joyent/node/issues/979) add support for Unix Domain Sockets to HTTP (Mark Cavage)\n* [#1173](https://github.com/joyent/node/issues/1173) [#1170](https://github.com/joyent/node/issues/1170) add AMD, asynchronous module definition (isaacs)\n* DTrace probes: support X-Forwarded-For (Dave Pacheco)\n\n<a id=\"0.4.12\"></a>\n## 2011.09.15, Version 0.4.12 (stable)\n\nhttps://github.com/nodejs/node/commit/771ba34ca7b839add2ef96879e1ffc684813cf7c\n\n* Improve docs\n* [#1563](https://github.com/joyent/node/issues/1563) overflow in ChildProcess custom_fd.\n* [#1569](https://github.com/joyent/node/issues/1569), parse error on multi-line HTTP headers. (Ben Noordhuis)\n* [#1586](https://github.com/joyent/node/issues/1586) net: Socket write encoding case sensitivity (koichik)\n* [#1610](https://github.com/joyent/node/issues/1610) Remove DigiNotar CA from trusted list (isaacs)\n* [#1624](https://github.com/joyent/node/issues/1624) buffer: Avoid overrun with 'binary' encoding. (koichik)\n* [#1633](https://github.com/joyent/node/issues/1633) buffer: write() should always set _charsWritten. (koichik)\n* [#1707](https://github.com/joyent/node/issues/1707) hasOwnProperty usage security hole in querystring (isaacs)\n* [#1719](https://github.com/joyent/node/issues/1719) Drain OpenSSL error queue\n* Fix error reporting in net.Server.listen\n\n<a id=\"0.4.11\"></a>\n## 2011.08.17, Version 0.4.11 (stable)\n\nhttps://github.com/nodejs/node/commit/a745d19ce7d1c0e3778371af4f0346be70cf2c8e\n\n* [#738](https://github.com/joyent/node/issues/738) Fix crypto encryption/decryption with Base64. (SAWADA Tadashi)\n* [#1202](https://github.com/joyent/node/issues/1202) net.createConnection defer DNS lookup error events to next tick\n  (Ben Noordhuis)\n\n* [#1374](https://github.com/joyent/node/issues/1374) fix setting ServerResponse.statusCode in writeHead (Trent Mick)\n* [#1417](https://github.com/joyent/node/issues/1417) Fix http.ClientRequest crashes if end() was called twice\n* [#1497](https://github.com/joyent/node/issues/1497) querystring: Replace 'in' test with 'hasOwnProperty' (isaacs)\n* [#1546](https://github.com/joyent/node/issues/1546) http perf improvement\n* fix memleak in libeio (Tom Hughes)\n* cmake improvements (Tom Hughes)\n* node_net.cc: fix incorrect sizeof() (Tom Hughes)\n* Windows/cygwin: no more GetConsoleTitleW errors on XP (Bert Belder)\n* Doc improvements (koichik, Logan Smyth, Ben Noordhuis, Arnout Kazemier)\n\n<a id=\"0.4.10\"></a>\n## 2011.07.19, Version 0.4.10 (stable)\n\nhttps://github.com/nodejs/node/commit/1b8dd65d6e3b82b6863ef38835cc436c5d30c1d5\n\n* [#394](https://github.com/joyent/node/issues/394) Fix Buffer drops last null character in UTF-8\n* [#829](https://github.com/joyent/node/issues/829) Backport r8577 from V8 (Ben Noordhuis)\n* [#877](https://github.com/joyent/node/issues/877) Don't wait for HTTP Agent socket pool to establish connections.\n* [#915](https://github.com/joyent/node/issues/915) Find kqueue on FreeBSD correctly (Brett Kiefer)\n* [#1085](https://github.com/joyent/node/issues/1085) HTTP: Fix race in abort/dispatch code (Stefan Rusu)\n* [#1274](https://github.com/joyent/node/issues/1274) debugger improvement (Yoshihiro Kikuchi)\n* [#1291](https://github.com/joyent/node/issues/1291) Properly respond to HEAD during end(body) hot path (Reid Burke)\n* [#1304](https://github.com/joyent/node/issues/1304) TLS: Fix race in abort/connection code (Stefan Rusu)\n* [#1360](https://github.com/joyent/node/issues/1360) Allow _ in url hostnames.\n* Revert 37d529f8 - unbreaks debugger command parsing.\n* Bring back global execScript\n* Doc improvements\n\n<a id=\"0.4.9\"></a>\n## 2011.06.29, Version 0.4.9 (stable)\n\nhttps://github.com/nodejs/node/commit/de44eafd7854d06cd85006f509b7051e8540589b\n\n* Improve documentation\n* [#1095](https://github.com/joyent/node/issues/1095) error handling bug in stream.pipe() (Felix Geisendo\u0308rfer)\n* [#1097](https://github.com/joyent/node/issues/1097) Fix a few leaks in node_crypto.cc (Ben Noordhuis)\n* [#562](https://github.com/joyent/node/issues/562) [#1078](https://github.com/joyent/node/issues/1078) Parse file:// urls properly (Ryan Petrello)\n* [#880](https://github.com/joyent/node/issues/880) Option to disable SSLv2 (J\u00e9r\u00e9my Lal)\n* [#1087](https://github.com/joyent/node/issues/1087) Disabling SSL compression disabled with early OpenSSLs.\n* [#1144](https://github.com/joyent/node/issues/1144) debugger: don't allow users to input non-valid commands\n  (Siddharth Mahendraker)\n\n* Perf improvement for util.inherits\n* [#1166](https://github.com/joyent/node/issues/1166) Support for signature verification with RSA/DSA public keys\n  (Mark Cavage)\n\n* [#1177](https://github.com/joyent/node/issues/1177) Remove node_modules lookup optimization to better support\n  nested project structures (Mathias Buus)\n\n* [#1203](https://github.com/joyent/node/issues/1203) Add missing scope.Close to fs.sendfileSync\n* [#1187](https://github.com/joyent/node/issues/1187) Support multiple 'link' headers\n* [#1196](https://github.com/joyent/node/issues/1196) Fix -e/--eval can't load module from node_modules (Koichi Kobayashi)\n* Upgrade V8 to 3.1.8.25, upgrade http-parser.\n\n<a id=\"0.4.8\"></a>\n## 2011.05.20, Version 0.4.8 (stable)\n\nhttps://github.com/nodejs/node/commit/7dd22c26e4365698dc3efddf138c4d399cb912c8\n\n* [#974](https://github.com/joyent/node/issues/974) Properly report traceless errors (isaacs)\n* [#983](https://github.com/joyent/node/issues/983) Better JSON.parse error detection in REPL (isaacs)\n* [#836](https://github.com/joyent/node/issues/836) Agent socket errors bubble up to req only if req exists\n* [#1041](https://github.com/joyent/node/issues/1041) Fix event listener leak check timing (koichik)\n*\t[#1038](https://github.com/joyent/node/issues/1038) Fix dns.resolve() with 'PTR' throws Error: Unknown type \"PTR\"\n  (koichik)\n\n* [#1073](https://github.com/joyent/node/issues/1073) Share SSL context between server connections (Fedor Indutny)\n* Disable compression with OpenSSL. Improves memory perf.\n* Implement os.totalmem() and os.freemem() for SunOS (Alexandre Marangone)\n* Fix a special characters in URL regression (isaacs)\n* Fix idle timeouts in HTTPS (Felix Geisendo\u0308rfer)\n* SlowBuffer.write() with 'ucs2' throws ReferenceError. (koichik)\n* http.ServerRequest 'close' sometimes gets an error argument\n  (Felix Geisendo\u0308rfer)\n\n* Doc improvements\n* cleartextstream.destroy() should close(2) the socket. Previously was being\n\tmapped to a shutdown(2) syscall.\n\n* No longer compile out asserts and debug statements in normal build.\n* Debugger improvements.\n* Upgrade V8 to 3.1.8.16.\n\n<a id=\"0.4.7\"></a>\n## 2011.04.22, Version 0.4.7 (stable)\n\nhttps://github.com/nodejs/node/commit/c85455a954411b38232e79752d4abb61bb75031b\n\n* Don't emit error on ECONNRESET from read() [#670](https://github.com/joyent/node/issues/670)\n* Fix: Multiple pipes to the same stream were broken [#929](https://github.com/joyent/node/issues/929)\n  (Felix Geisendo\u0308rfer)\n\n* URL parsing/formatting corrections [#954](https://github.com/joyent/node/issues/954) (isaacs)\n* make it possible to do repl.start('', stream) (Wade Simmons)\n* Add os.loadavg for SunOS (Robert Mustacchi)\n* Fix timeouts with floating point numbers [#897](https://github.com/joyent/node/issues/897) (Jorge Chamorro Bieling)\n* Improve docs.\n\n<a id=\"0.4.6\"></a>\n## 2011.04.13, Version 0.4.6 (stable)\n\nhttps://github.com/nodejs/node/commit/58002d56bc79410c5ff397fc0e1ffec0665db38a\n\n* Don't error on ENOTCONN from shutdown() [#670](https://github.com/joyent/node/issues/670)\n* Auto completion of built-in debugger suggests prefix match rather than\n\tpartial match. (koichik)\n\n* circular reference in vm modules. [#822](https://github.com/joyent/node/issues/822) (Jakub Lekstan)\n* http response.readable should be false after 'end' [#867](https://github.com/joyent/node/issues/867) (Abe Fettig)\n* Implement os.cpus() and os.uptime() on Solaris (Scott McWhirter)\n* fs.ReadStream: Allow omission of end option for range reads [#801](https://github.com/joyent/node/issues/801)\n\t(Felix Geisend\u00f6rfer)\n\n* Buffer.write() with UCS-2 should not be write partial char\n\t[#916](https://github.com/joyent/node/issues/916) (koichik)\n\n* Pass secureProtocol through on tls.Server creation (Theo Schlossnagle)\n* TLS use RC4-SHA by default\n* Don't strangely drop out of event loop on HTTPS client uploads [#892](https://github.com/joyent/node/issues/892)\n* Doc improvements\n* Upgrade v8 to 3.1.8.10\n\n<a id=\"0.4.5\"></a>\n## 2011.04.01, Version 0.4.5 (stable)\n\nhttps://github.com/nodejs/node/commit/787a343b588de26784fef97f953420b53a6e1d73\n\n* Fix listener leak in stream.pipe() (Mikeal Rogers)\n* Retain buffers in fs.read/write() GH-814 (Jorge Chamorro Bieling)\n* TLS performance improvements\n* SlowBuffer.prototype.slice bug GH-843\n* process.stderr.write should return true\n* Immediate pause/resume race condition GH-535 (isaacs)\n* Set default host header properly GH-721 (isaacs)\n* Upgrade V8 to 3.1.8.8\n\n<a id=\"0.4.4\"></a>\n## 2011.03.26, Version 0.4.4 (stable)\n\nhttps://github.com/nodejs/node/commit/25122b986a90ba0982697b7abcb0158c302a1019\n\n* CryptoStream.end shouldn't throw if not writable GH-820\n* Drop out if connection destroyed before connect() GH-819\n* expose https.Agent\n* Correctly setsid in tty.open GH-815\n* Bug fix for failed buffer construction\n* Added support for removing .once listeners (GH-806)\n* Upgrade V8 to 3.1.8.5\n\n<a id=\"0.4.3\"></a>\n## 2011.03.18, Version 0.4.3 (stable)\n\nhttps://github.com/nodejs/node/commit/c095ce1a1b41ca015758a713283bf1f0bd41e4c4\n\n* Don't decrease server connection counter again if destroy() is called more\n\tthan once GH-431 (Andreas Reich, Anders Conbere)\n\n* Documentation improvements (koichik)\n* Fix bug with setMaxListeners GH-682\n* Start up memory footprint improvement. (Tom Hughes)\n* Solaris improvements.\n* Buffer::Length(Buffer*) should not invoke itself recursively GH-759 (Ben\n  Noordhuis)\n\n* TLS: Advertise support for client certs GH-774 (Theo Schlossnagle)\n* HTTP Agent bugs: GH-787, GH-784, GH-803.\n* Don't call GetMemoryUsage every 5 seconds.\n* Upgrade V8 to 3.1.8.3\n\n<a id=\"0.4.2\"></a>\n## 2011.03.02, Version 0.4.2 (stable)\n\nhttps://github.com/nodejs/node/commit/39280e1b5731f3fcd8cc42ad41b86cdfdcb6d58b\n\n* Improve docs.\n* Fix process.on edge case with signal event (Alexis Sellier)\n* Pragma HTTP header comma separation\n* In addition to 'aborted' emit 'close' from incoming requests\n  (Felix Geisend\u00f6rfer)\n\n* Fix memleak in vm.runInNewContext\n* Do not cache modules that throw exceptions (Felix Geisend\u00f6rfer)\n* Build system changes for libnode (Aria Stewart)\n* Read up the prototype of the 'env' object. (Nathan Rajlich)\n* Add 'close' and 'aborted' events to Agent responses\n* http: fix missing 'drain' events (Russell Haering)\n* Fix process.stdout.end() throws ENOTSOCK error. (Koichi Kobayashi)\n* REPL bug fixes (isaacs)\n* node_modules folders should be highest priority (isaacs)\n* URL parse more safely (isaacs)\n* Expose errno with a string for dns/cares (Felix Geisend\u00f6rfer)\n* Fix tty.setWindowSize\n* spawn: setuid after chdir (isaacs)\n* SIGUSR1 should break the VM without delay\n* Upgrade V8 to 3.1.8.\n\n<a id=\"0.4.1\"></a>\n## 2011.02.19, Version 0.4.1 (stable)\n\nhttps://github.com/nodejs/node/commit/e8aef84191bc2c1ba2bcaa54f30aabde7f03769b\n\n* Fixed field merging with progressive fields on writeHead()\n  (TJ Holowaychuk)\n\n* Make the repl respect node_modules folders (isaacs)\n* Fix for DNS fail in HTTP request (Richard Rodger)\n* Default to port 80 for http.request and http.get.\n* Improve V8 support for Cygwin (Bert Belder)\n* Fix fs.open param parsing. (Felix Geisend\u00f6rfer)\n* Fixed null signal.\n* Fix various HTTP and HTTPS bugs\n* cmake improvements (Tom Hughes)\n* Fix: TLS sockets should not be writable after 'end'\n* Fix os.cpus() on cygwin (Brian White)\n* MinGW: OpenSSL support (Bert Belder)\n* Upgrade V8 to 3.1.5, libev to 4.4.\n\n<a id=\"0.4.0\"></a>\n## 2011.02.10, Version 0.4.0 (stable)\n\nhttps://github.com/nodejs/node/commit/eb155ea6f6a6aa341aa8c731dca8da545c6a4008\n\n* require() improvements (isaacs)\n  - understand package.json (isaacs)\n  - look for 'node_modules' dir\n\n* cmake fixes (Daniel Gr\u00f6ber)\n* http: fix buffer writes to outgoing messages (Russell Haering)\n* Expose UCS-2 Encoding (Konstantin K\u00e4fer)\n* Support strings for octal modes (isaacs)\n* Support array-ish args to Buffer ctor (isaacs)\n* cygwin and mingw improvements (Bert Belder)\n* TLS improvements\n* Fewer syscalls during require (Bert Belder, isaacs)\n* More DTrace probes (Bryan Cantrill,  Robert Mustacchi)\n* 'pipe' event on pipe() (Mikeal Rogers)\n* CRL support in TLS (Theo Schlossnagle)\n* HTTP header manipulation methods (Tim Caswell, Charlie Robbins)\n* Upgrade V8 to 3.1.2\n\n<a id=\"0.3.8\"></a>\n## 2011.02.04, Version 0.3.8 (unstable)\n\nhttps://github.com/nodejs/node/commit/9493b7563bff31525b4080df5aeef09747782d5e\n\n* Add req.abort() for client side requests.\n* Add exception.code for easy testing:\n  Example: if (err.code == 'EADDRINUSE');\n\n* Add process.stderr.\n* require.main is the main module. (Isaac Schlueter)\n* dgram: setMulticastTTL, setMulticastLoopback and addMembership.\n  (Joe Walnes)\n\n* Fix throttling in TLS connections\n* Add socket.bufferSize\n* MinGW improvements (Bert Belder)\n* Upgrade V8 to 3.1.1\n\n<a id=\"0.3.7\"></a>\n## 2011.01.27, Version 0.3.7 (unstable)\n\nhttps://github.com/nodejs/node/commit/d8579c6afdbe868de6dffa8db78bbe4ba2d03e0e\n\n* Expose agent in http and https client. (Mikeal Rogers)\n* Fix bug in http request's end method. (Ali Farhadi)\n* MinGW: better net support (Bert Belder)\n* fs.open should set FD_CLOEXEC\n* DTrace probes (Bryan Cantrill)\n* REPL fixes and improvements (isaacs, Bert Belder)\n* Fix many bugs with legacy http.Client interface\n* Deprecate process.assert. Use require('assert').ok\n* Add callback parameter to socket.setTimeout(). (Ali Farhadi)\n* Fixing bug in http request default encoding (Ali Farhadi)\n* require: A module ID with a trailing slash must be a dir.\n  (isaacs)\n\n* Add ext_key_usage to getPeerCertificate (Greg Hughes)\n* Error when child_process.exec hits maxBuffer.\n* Fix option parsing in tls.connect()\n* Upgrade to V8 3.0.10\n\n<a id=\"0.3.6\"></a>\n## 2011.01.21, Version 0.3.6 (unstable)\n\nhttps://github.com/nodejs/node/commit/bb3e71466e5240626d9d21cf791fe43e87d90011\n\n* REPL and other improvements on MinGW (Bert Belder)\n* listen/bind errors should close net.Server\n* New HTTP and HTTPS client APIs\n* Upgrade V8 to 3.0.9\n\n<a id=\"0.3.5\"></a>\n## 2011.01.16, Version 0.3.5 (unstable)\n\nhttps://github.com/nodejs/node/commit/b622bc6305e3c675e0edfcdbaa387d849ad0bba0\n\n* Built-in debugger improvements.\n* Add setsid, setuid, setgid options to child_process.spawn\n  (Isaac Schlueter)\n\n* tty module improvements.\n* Upgrade libev to 4.3, libeio to latest, c-ares to 1.7.4\n* Allow third party hooks before main module load.\n  (See 496be457b6a2bc5b01ec13644b9c9783976159b2)\n\n* Don't stat() on cached modules. (Felix Geisend\u00f6rfer)\n\n<a id=\"0.3.4\"></a>\n## 2011.01.08, Version 0.3.4 (unstable)\n\nhttps://github.com/nodejs/node/commit/73f53e12e4a5b9ef7dbb4792bd5f8ad403094441\n\n* Primordial mingw build (Bert Belder)\n* HTTPS server\n* Built in debugger 'node debug script.js'\n* realpath files during module load (Mihai C\u0103lin Bazon)\n* Rename net.Stream to net.Socket (existing name will continue to be\n  supported)\n\n* Fix process.platform\n\n<a id=\"0.3.3\"></a>\n## 2011.01.02, Version 0.3.3 (unstable)\n\nhttps://github.com/nodejs/node/commit/57544ba1c54c7d0da890317deeb73076350c5647\n\n* TLS improvements.\n* url.parse(url, true) defaults query field to {} (Jeremy Martin)\n* Upgrade V8 to 3.0.4\n* Handle ECONNABORT properly (Theo Schlossnagle)\n* Fix memory leaks (Tom Hughes)\n* Add os.cpus(), os.freemem(), os.totalmem(), os.loadavg() and other\n  functions for OSX, Linux, and Cygwin. (Brian White)\n\n* Fix REPL syntax error bug (GH-543), improve how REPL commands are\n  evaluated.\n\n* Use process.stdin instead of process.openStdin().\n* Disable TLS tests when node doesn't have OpenSSL.\n\n<a id=\"0.3.2\"></a>\n## 2010.12.16, Version 0.3.2 (unstable)\n\nhttps://github.com/nodejs/node/commit/4bb914bde9f3c2d6de00853353b6b8fc9c66143a\n\n* Rip out the old (broken) TLS implementation introduce new tested\n  implementation and API. See docs. HTTPS not supported in this release.\n\n* Introduce 'os' and 'tty' modules.\n* Callback parameters for socket.write() and socket.connect().\n* Support CNAME lookups in DNS module. (Ben Noordhuis)\n* cmake support (Tom Hughes)\n* 'make lint'\n* oprofile support (./configure --oprofile)\n* Lots of bug fixes, including:\n  - Memory leak in ChildProcess:Spawn(). (Tom Hughes)\n  - buffer.slice(0, 0)\n  - Global variable leaks\n  - clearTimeouts calling multiple times (Michael W)\n  - utils.inspect's detection of circular structures (Tim Cooijmans)\n  - Apple's threaded write()s bug (Jorge Chamorro Bieling)\n  - Make sure raw mode is disabled when exiting a terminal-based REPL.\n    (Brian White)\n\n* Deprecate process.compile, process.ENV\n* Upgrade V8 to 3.0.3, upgrade http-parser.\n\n<a id=\"0.3.1\"></a>\n## 2010.11.16, Version 0.3.1 (unstable)\n\nhttps://github.com/nodejs/node/commit/ce9a54aa1fbf709dd30316af8a2f14d83150e947\n\n* TLS improvements (Paul Querna)\n  - Centralize error handling in SecureStream\n  - Add SecurePair for handling of a ssl/tls stream.\n\n* New documentation organization (Micheil Smith)\n* allowHalfOpen TCP connections disabled by default.\n* Add C++ API for constructing fast buffer from string\n* Move idle timers into its own module\n* Gracefully handle EMFILE and server.maxConnections\n* make \"node --eval\" eval in the global scope.\n  (Jorge Chamorro Bieling)\n\n* Let exit listeners know the exit code (isaacs)\n* Handle cyclic links smarter in fs.realpath (isaacs)\n* Remove node-repl (just use 'node' without args)\n* Rewrite libeio After callback to use req->result instead of req->errorno\n  for error checking (Micheil Smith)\n\n* Remove warning about deprecating 'sys' - too aggressive\n* Make writes to process.env update the real environment. (Ben Noordhuis)\n* Set FD_CLOEXEC flag on stdio FDs before spawning. (Guillaume Tuton)\n* Move ev_loop out of javascript\n* Switch \\n with \\r\\n for all strings printed out.\n* Added support for cross compilation (Rasmus Andersson)\n* Add --profile flag to configure script, enables gprof profiling.\n  (Ben Noordhuis)\n\n* writeFileSync could exhibit pathological behavior when a buffer\n  could not be written to the file in a single write() call.\n\n* new path.join behavior (isaacs)\n  - Express desired path.join behavior in tests.\n  - Update fs.realpath to reflect new path.join behavior\n  - Update url.resolve() to use new path.join behavior.\n\n* API: Move process.binding('evals') to require('vm')\n* Fix V8 build on Cygwin (Bert Belder)\n* Add ref to buffer during fs.write and fs.read\n* Fix segfault on test-crypto\n* Upgrade http-parser to latest and V8 to 2.5.3\n\n<a id=\"0.3.0\"></a>\n## 2010.10.23, Version 0.3.0 (unstable)\n\nhttps://github.com/nodejs/node/commit/1582cfebd6719b2d2373547994b3dca5c8c569c0\n\n* Bugfix: Do not spin on accept() with EMFILE\n* Improvements to readline.js (Trent Mick, Johan Euphrosine, Brian White)\n* Safe constructors (missing 'new' doesn't segfault)\n* Fix process.nextTick so thrown errors don't confuse it.\n  (Benjamin Thomas)\n\n* Allow Strings for ports on net.Server.listen (Bradley Meck)\n* fs bugfixes (Tj Holowaychuk, Tobie Langel, Marco Rogers, isaacs)\n* http bug fixes (Fedor Indutny, Mikeal Rogers)\n* Faster buffers; breaks C++ API (Tim-Smart, St\u00e9phan Kochen)\n* crypto, tls improvements (Paul Querna)\n* Add lfs flags to node addon script\n* Simpler querystring parsing; breaks API (Peter Griess)\n* HTTP trailers (Mark Nottingham)\n* http 100-continue support (Mark Nottingham)\n* Module system simplifications (Herbert Voj\u010d\u00edk, isaacs, Tim-Smart)\n  - remove require.async\n  - remove registerExtension, add .extensions\n  - expose require.resolve\n  - expose require.cache\n  - require looks in  node_modules folders\n\n* Add --eval command line option (TJ Holowaychuk)\n* Commas last in sys.inspect\n* Constants moved from process object to require('constants')\n* Fix parsing of linux memory (Vitali Lovich)\n* inspect shows function names (Jorge Chamorro Bieling)\n* uncaughtException corner cases (Felix Geisend\u00f6rfer)\n* TCP clients now buffer writes before connection\n* Rename sys module to 'util' (Micheil Smith)\n* Properly set stdio handlers to blocking on SIGTERM and SIGINT\n  (Tom Hughes)\n\n* Add destroy methods to HTTP messages\n* base64 improvements (isaacs, Jorge Chamorro Bieling)\n* API for defining REPL commands (Sami Samhuri)\n* child_process.exec timeout fix (Aaron Heckmann)\n* Upgrade V8 to 2.5.1, Libev to 4.00, libeio, http-parser\n\n<a id=\"0.2.0\"></a>\n## 2010.08.20, Version 0.2.0\n\nhttps://github.com/nodejs/node/commit/9283e134e558900ba89d9a33c18a9bdedab07cb9\n\n* process.title support for FreeBSD, Macintosh, Linux\n* Fix OpenSSL 100% CPU usage on error (Illarionov Oleg)\n* Implement net.Server.maxConnections.\n* Fix process.platform, add process.version.\n* Add --without-snapshot configure option.\n* Readline REPL improvements (Trent Mick)\n* Bug fixes.\n* Upgrade V8 to 2.3.8\n\n<a id=\"0.1.x\"></a>\n<a id=\"0.1.104\"></a>\n## 2010.08.13, Version 0.1.104\n\nhttps://github.com/nodejs/node/commit/b14dd49222687c12f3e8eac597cff4f2674f84e8\n\n* Various bug fixes (console, querystring, require)\n* Set cwd for child processes (Bert Belder)\n* Tab completion for readline (Trent Mick)\n* process.title getter/setter for OSX, Linux, Cygwin.\n\t(Rasmus Andersson, Bert Belder)\n\n* Upgrade V8 to 2.3.6\n\n<a id=\"0.1.103\"></a>\n## 2010.08.04, Version 0.1.103\n\nhttps://github.com/nodejs/node/commit/0b925d075d359d03426f0b32bb58a5e05825b4ea\n\n* Implement keep-alive for http.Client (Mikeal Rogers)\n* base64 fixes. (Ben Noordhuis)\n* Fix --debug-brk (Danny Coates)\n* Don't let path.normalize get above the root. (Isaac Schlueter)\n* Allow signals to be used with process.on in addition to\n  process.addListener. (Brian White)\n\n* Globalize the Buffer object\n* Use kqueue on recent macintosh builds\n* Fix addrlen for unix_dgram sockets (Benjamin Kramer)\n* Fix stats.isDirectory() and friends (Benjamin Kramer)\n* Upgrade http-parser, V8 to 2.3.5\n\n<a id=\"0.1.102\"></a>\n## 2010.07.25, Version 0.1.102\n\nhttps://github.com/nodejs/node/commit/2a4568c85f33869c75ff43ccd30f0ec188b43eab\n\n* base64 encoding for Buffers.\n* Buffer support for Cipher, Decipher, Hmac, Sign and Verify\n  (Andrew Naylor)\n\n* Support for reading byte ranges from files using fs.createReadStream.\n  (Chandra Sekar)\n\n* Fix Buffer.toString() on 0-length slices. (Peter Griess)\n* Cache modules based on filename rather than ID (Isaac Schlueter)\n* querystring improvements (Jan Kassens, Micheil Smith)\n* Support DEL in the REPL. (J\u00e9r\u00e9my Lal)\n* Upgrade http-parser, upgrade V8 to 2.3.2\n\n<a id=\"0.1.101\"></a>\n## 2010.07.16, Version 0.1.101\n\nhttps://github.com/nodejs/node/commit/0174ceb6b24caa0bdfc523934c56af9600fa9b58\n\n* Added env to child_process.exec (\u0421\u0435\u0440\u0433\u0435\u0439 \u041a\u0440\u044b\u0436\u0430\u043d\u043e\u0432\u0441\u043a\u0438\u0439)\n* Allow modules to optionally be loaded in separate contexts\n  with env var NODE_MODULE_CONTEXTS=1.\n\n* setTTL and setBroadcast for dgram (Matt Ranney)\n* Use execPath for default NODE_PATH, not installPrefix\n  (Isaac Schlueter)\n\n* Support of console.dir + console.assert (Jerome Etienne)\n* on() as alias to addListener()\n* Use javascript port of Ronn to build docs (J\u00e9r\u00e9my Lal)\n* Upgrade V8 to 2.3.0\n\n<a id=\"0.1.100\"></a>\n## 2010.07.03, Version 0.1.100\n\nhttps://github.com/nodejs/node/commit/a6b8586e947f9c3ced180fe68c233d0c252add8b\n\n* process.execPath (Marshall Culpepper)\n* sys.pump (Mikeal Rogers)\n* Remove ini and mjsunit libraries.\n* Introduce console.log() and friends.\n* Switch order of arguments for Buffer.write (Blake Mizerany)\n* On overlapping buffers use memmove (Matt Ranney)\n* Resolve .local domains with getaddrinfo()\n* Upgrade http-parser, V8 to 2.2.21\n\n<a id=\"0.1.99\"></a>\n## 2010.06.21, Version 0.1.99\n\nhttps://github.com/nodejs/node/commit/a620b7298f68f68a855306437a3b60b650d61d78\n\n* Datagram sockets (Paul Querna)\n* fs.writeFile could not handle utf8 (Felix Geisend\u00f6rfer)\n  and now accepts Buffers (Aaron Heckmann)\n\n* Fix crypto memory leaks.\n* A replacement for decodeURIComponent that doesn't throw.\n  (Isaac Schlueter)\n\n* Only concatenate some incoming HTTP headers. (Peter Griess)\n* Upgrade V8 to 2.2.18\n\n<a id=\"0.1.98\"></a>\n## 2010.06.11, Version 0.1.98\n\nhttps://github.com/nodejs/node/commit/10d8adb08933d1d4cea60192c2a31c56d896733d\n\n* Port to Windows/Cygwin (Raffaele Sena)\n* File descriptor passing on unix sockets. (Peter Griess)\n* Simple, builtin readline library. REPL is now entered by\n  executing \"node\" without arguments.\n\n* Add a parameter to spawn() that sets the child's stdio file\n  descriptors. (Orlando Vazquez)\n\n* Upgrade V8 to 2.2.16, http-parser fixes, upgrade c-ares to 1.7.3.\n\n<a id=\"0.1.97\"></a>\n## 2010.05.29, Version 0.1.97\n\nhttps://github.com/nodejs/node/commit/0c1aa36835fa6a3557843dcbc6ed6714d353a783\n\n* HTTP throttling: outgoing messages emit 'drain' and write() returns false\n  when send buffer is full.\n\n* API: readFileSync without encoding argument now returns a Buffer\n* Improve Buffer C++ API; addons now compile with debugging symbols.\n* Improvements to  path.extname() and REPL; add fs.chown().\n* fs.ReadStream now emits buffers, fs.readFileSync returns buffers.\n* Bugfix: parsing HTTP responses to HEAD requests.\n* Port to OpenBSD.\n* Upgrade V8 to 2.2.12, libeio, http-parser.\n\n<a id=\"0.1.96\"></a>\n## 2010.05.21, Version 0.1.96\n\nhttps://github.com/nodejs/node/commit/9514a4d5476225e8c8310ce5acae2857033bcaaa\n\n* Thrown errors in http and socket call back get bubbled up.\n* Add fs.fsync (Andrew Johnston)\n* Bugfix: signal unregistering (Jonas Pfenniger)\n* Added better error messages for async and sync fs calls with paths\n  (TJ Holowaychuk)\n\n* Support arrays and strings in buffer constructor.\n  (Felix Geisend\u00f6rfer)\n\n* Fix errno reporting in DNS exceptions.\n* Support buffers in fs.WriteStream.write.\n* Bugfix: Safely decode a utf8 streams that are broken on a multbyte\n  character (http and net). (Felix Geisend\u00f6rfer)\n\n* Make Buffer's C++ constructor public.\n* Deprecate sys.p()\n* FIX path.dirname('/tmp') => '/'. (Jonathan Rentzsch)\n\n<a id=\"0.1.95\"></a>\n## 2010.05.13, Version 0.1.95\n\nhttps://github.com/nodejs/node/commit/0914d33842976c2c870df06573b68f9192a1fb7a\n\n* Change GC idle notify so that it runs alongside setInterval\n* Install node_buffer.h on make install\n* fs.readFile returns Buffer by default (Tim Caswell)\n* Fix error reporting in child_process callbacks\n* Better logic for testing if an argument is a port\n* Improve error reporting (single line \"node.js:176:9\" errors)\n* Bugfix: Some http responses being truncated (appeared in 0.1.94)\n* Fix long standing net idle timeout bugs. Enable 2 minute timeout\n  by default in HTTP servers.\n\n* Add fs.fstat (Ben Noordhuis)\n* Upgrade to V8 2.2.9\n\n<a id=\"0.1.94\"></a>\n## 2010.05.06, Version 0.1.94\n\nhttps://github.com/nodejs/node/commit/f711d5343b29d1e72e87107315708e40951a7826\n\n* Look in /usr/local/lib/node for modules, so that there's a way\n  to install modules globally (Issac Schlueter)\n\n* SSL improvements (Rhys Jones, Paulo Matias)\n* Added c-ares headers for linux-arm (Jonathan Knezek)\n* Add symbols to release build\n* HTTP upgrade improvements, docs (Micheil Smith)\n* HTTP server emits 'clientError' instead of printing message\n* Bugfix: Don't emit 'error' twice from http.Client\n* Bugfix: Ignore SIGPIPE\n* Bugfix: destroy() instead of end() http connection at end of\n  pipeline\n\n* Bugfix: http.Client may be prematurely released back to the\n  free pool.  (Thomas Lee)\n\n* Upgrade V8 to 2.2.8\n\n<a id=\"0.1.93\"></a>\n## 2010.04.29, Version 0.1.93\n\nhttps://github.com/nodejs/node/commit/557ba6bd97bad3afe0f9bd3ac07efac0a39978c1\n\n  * Fixed no 'end' event on long chunked HTTP messages\n    https://github.com/joyent/node/issues/77\n\n  * Remove legacy modules http_old and tcp_old\n  * Support DNS MX queries (J\u00e9r\u00e9my Lal)\n\n  * Fix large socket write (tlb@tlb.org)\n  * Fix child process exit codes (Felix Geisend\u00f6rfer)\n\n  * Allow callers to disable PHP/Rails style parameter munging in\n    querystring.stringify (Thomas Lee)\n\n  * Upgrade V8 to 2.2.6\n\n<a id=\"0.1.92\"></a>\n## 2010.04.23, Version 0.1.92\n\nhttps://github.com/nodejs/node/commit/caa828a242f39b6158084ef4376355161c14fe34\n\n  * OpenSSL support. Still undocumented (see tests). (Rhys Jones)\n  * API: Unhandled 'error' events throw.\n\n  * Script class with eval-function-family in binding('evals') plus tests.\n    (Herbert Vojcik)\n\n  * stream.setKeepAlive (Julian Lamb)\n  * Bugfix: Force no body on http 204 and 304\n\n  * Upgrade Waf to 1.5.16, V8 to 2.2.4.2\n\n<a id=\"0.1.91\"></a>\n## 2010.04.15, Version 0.1.91\n\nhttps://github.com/nodejs/node/commit/311d7dee19034ff1c6bc9098c36973b8d687eaba\n\n  * Add incoming.httpVersion\n  * Object.prototype problem with C-Ares binding\n\n  * REPL can be run from multiple different streams. (Matt Ranney)\n  * After V8 heap is compact, don't use a timer every 2 seconds.\n\n  * Improve nextTick implementation.\n  * Add primative support for Upgrading HTTP connections.\n    (See commit log for docs 760bba5)\n\n  * Add timeout and maxBuffer options to child_process.exec\n  * Fix bugs.\n\n  * Upgrade V8 to 2.2.3.1\n\n<a id=\"0.1.90\"></a>\n## 2010.04.09, Version 0.1.90\n\nhttps://github.com/nodejs/node/commit/07e64d45ffa1856e824c4fa6afd0442ba61d6fd8\n\n  * Merge writing of networking system (net2)\n   - New Buffer object for binary data.\n   - Support UNIX sockets, Pipes\n   - Uniform stream API\n   - Currently no SSL\n   - Legacy modules can be accessed at 'http_old' and 'tcp_old'\n\n  * Replace udns with c-ares. (Krishna Rajendran)\n  * New documentation system using Markdown and Ronn\n    (Tim Caswell, Micheil Smith)\n\n  * Better idle-time GC\n  * Countless small bug fixes.\n\n  * Upgrade V8 to 2.2.X, WAF 1.5.15\n\n<a id=\"0.1.33\"></a>\n## 2010.03.19, Version 0.1.33\n\nhttps://github.com/nodejs/node/commit/618296ef571e873976f608d91a3d6b9e65fe8284\n\n  * Include lib/ directory in node executable. Compile on demand.\n  * evalcx clean ups (Isaac Z. Schlueter, Tim-Smart)\n\n  * Various fixes, clean ups\n  * V8 upgraded to 2.1.5\n\n<a id=\"0.1.32\"></a>\n## 2010.03.12, Version 0.1.32\n\nhttps://github.com/nodejs/node/commit/61c801413544a50000faa7f58376e9b33ba6254f\n\n  * Optimize event emitter for single listener\n  * Add process.evalcx, require.registerExtension (Tim Smart)\n\n  * Replace --cflags with --vars\n  * Fix bugs in fs.create*Stream (Felix Geisend\u00f6rfer)\n\n  * Deprecate process.mixin, process.unloop\n  * Remove the 'Error: (no message)' exceptions, print stack\n    trace instead\n\n  * INI parser bug fixes (Isaac Schlueter)\n  * FreeBSD fixes (Vanilla Hsu)\n\n  * Upgrade to V8 2.1.3, WAF 1.5.14a, libev\n\n<a id=\"0.1.31\"></a>\n## 2010.03.05, Version 0.1.31\n\nhttps://github.com/nodejs/node/commit/39b63dfe1737d46a8c8818c92773ef181fd174b3\n\n  * API: - Move process.watchFile into fs module\n         - Move process.inherits to sys\n\n  * Improve Solaris port\n  * tcp.Connection.prototype.write now returns boolean to indicate if\n    argument was flushed to the kernel buffer.\n\n  * Added fs.link, fs.symlink, fs.readlink, fs.realpath\n    (Rasmus Andersson)\n\n  * Add setgid,getgid (James Duncan)\n  * Improve sys.inspect (Benjamin Thomas)\n\n  * Allow passing env to child process (Isaac Schlueter)\n  * fs.createWriteStream, fs.createReadStream (Felix Geisend\u00f6rfer)\n\n  * Add INI parser (Rob Ellis)\n  * Bugfix: fs.readFile handling encoding (Jacek Becela)\n\n  * Upgrade V8 to 2.1.2\n\n<a id=\"0.1.30\"></a>\n## 2010.02.22, Version 0.1.30\n\nhttps://github.com/nodejs/node/commit/bb0d1e65e1671aaeb21fac186b066701da0bc33b\n\n  * Major API Changes\n    - Promises removed. See\n      http://groups.google.com/group/nodejs/msg/426f3071f3eec16b\n      http://groups.google.com/group/nodejs/msg/df199d233ff17efa\n      The API for fs was\n         fs.readdir(\"/usr\").addCallback(function (files) {\n           puts(\"/usr files: \" + files);\n         });\n      It is now\n         fs.readdir(\"/usr\", function (err, files) {\n           if (err) throw err;\n           puts(\"/usr files: \" + files);\n         });\n    - Synchronous fs operations exposed, use with care.\n    - tcp.Connection.prototype.readPause() and readResume()\n      renamed to pause() and resume()\n    - http.ServerResponse.prototype.sendHeader() renamed to\n      writeHeader(). Now accepts reasonPhrase.\n\n  * Compact garbage on idle.\n  * Configurable debug ports, and --debug-brk (Zoran Tomicic)\n\n  * Better command line option parsing (Jeremy Ashkenas)\n  * Add fs.chmod (Micheil Smith), fs.lstat (Isaac Z. Schlueter)\n\n  * Fixes to process.mixin (Rasmus Andersson, Benjamin Thomas)\n  * Upgrade V8 to 2.1.1\n\n<a id=\"0.1.29\"></a>\n## 2010.02.17, Version 0.1.29\n\nhttps://github.com/nodejs/node/commit/87d5e5b316a4276bcf881f176971c1a237dcdc7a\n\n  * Major API Changes\n    - Remove 'file' module\n    - require('posix') -----------------> require('fs')\n    - fs.cat ---------------------------> fs.readFile\n    - file.write -----------------------> fs.writeFile\n    - TCP 'receive' event --------------> 'data'\n    - TCP 'eof' event ------------------> 'end'\n    - TCP send() -----------------------> write()\n    - HTTP sendBody() ------------------> write()\n    - HTTP finish() --------------------> close()\n    - HTTP 'body' event ----------------> 'data'\n    - HTTP 'complete' event ------------> 'end'\n    - http.Client.prototype.close() (formerly finish()) no longer\n      takes an argument. Add the 'response' listener manually.\n    - Allow strings for the flag argument to fs.open\n      (\"r\", \"r+\", \"w\", \"w+\", \"a\", \"a+\")\n\n  * Added multiple arg support for sys.puts(), print(), etc.\n    (tj@vision-media.ca)\n\n  * sys.inspect(Date) now shows the date value (Mark Hansen)\n  * Calculate page size with getpagesize for armel (J\u00e9r\u00e9my Lal)\n\n  * Bugfix: stderr flushing.\n  * Bugfix: Promise late chain (Yuichiro MASUI)\n\n  * Bugfix: wait() on fired promises\n    (Felix Geisend\u00f6rfer, Jonas Pfenniger)\n\n  * Bugfix: Use InstanceTemplate() instead of PrototypeTemplate() for\n    accessor methods. Was causing a crash with Eclipse debugger.\n    (Zoran Tomicic)\n\n  * Bugfix: Throw from connection.connect if resolving.\n    (Reported by James Golick)\n\n<a id=\"0.1.28\"></a>\n## 2010.02.09, Version 0.1.28\n\nhttps://github.com/nodejs/node/commit/49de41ef463292988ddacfb01a20543b963d9669\n\n  * Use Google's jsmin.py which can be used for evil.\n  * Add posix.truncate()\n\n  * Throw errors from server.listen()\n  * stdio bugfix (test by Mikeal Rogers)\n\n  * Module system refactor (Felix Geisend\u00f6rfer, Blaine Cook)\n  * Add process.setuid(), getuid() (Michael Carter)\n\n  * sys.inspect refactor (Tim Caswell)\n  * Multipart library rewrite (isaacs)\n\n<a id=\"0.1.27\"></a>\n## 2010.02.03, Version 0.1.27\n\nhttps://github.com/nodejs/node/commit/0cfa789cc530848725a8cb5595224e78ae7b9dd0\n\n  * Implemented __dirname (Felix Geisend\u00f6rfer)\n  * Downcase process.ARGV, process.ENV, GLOBAL\n    (now process.argv, process.env, global)\n\n  * Bug Fix: Late promise promise callbacks firing\n    (Felix Geisend\u00f6rfer, Jonas Pfenniger)\n\n  * Make assert.AssertionError instance of Error\n  * Removed inline require call for querystring\n    (self@cloudhead.net)\n\n  * Add support for MX, TXT, and SRV records in DNS module.\n    (Blaine Cook)\n\n  * Bugfix: HTTP client automatically reconnecting\n  * Adding OS X .dmg build scripts. (Standa Opichal)\n\n  * Bugfix: ObjectWrap memory leak\n  * Bugfix: Multipart handle Content-Type headers with charset\n    (Felix Geisend\u00f6rfer)\n\n  * Upgrade http-parser to fix header overflow attack.\n  * Upgrade V8 to 2.1.0\n\n  * Various other bug fixes, performance improvements.\n\n<a id=\"0.1.26\"></a>\n## 2010.01.20, Version 0.1.26\n\nhttps://github.com/nodejs/node/commit/da00413196e432247346d9e587f8c78ce5ceb087\n\n  * Bugfix, HTTP eof causing crash (Ben Williamson)\n  * Better error message on SyntaxError\n\n  * API: Move Promise and EventEmitter into 'events' module\n  * API: Add process.nextTick()\n\n  * Allow optional params to setTimeout, setInterval\n    (Micheil Smith)\n\n  * API: change some Promise behavior (Felix Geisend\u00f6rfer)\n    - Removed Promise.cancel()\n    - Support late callback binding\n    - Make unhandled Promise errors throw an exception\n\n  * Upgrade V8 to 2.0.6.1\n  * Solaris port (Erich Ocean)\n\n<a id=\"0.1.25\"></a>\n## 2010.01.09, Version 0.1.25\n\nhttps://github.com/nodejs/node/commit/39ca93549af91575ca9d4cbafd1e170fbcef3dfa\n\n  * sys.inspect() improvements (Tim Caswell)\n  * path module improvements (isaacs, Benjamin Thomas)\n\n  * API: request.uri -> request.url\n    It is no longer an object, but a string. The 'url' module\n    was added to parse that string. That is, node no longer\n    parses the request URL automatically.\n       require('url').parse(request.url)\n    is roughly equivalent to the old request.uri object.\n    (isaacs)\n\n  * Bugfix: Several libeio related race conditions.\n  * Better errors for multipart library (Felix Geisend\u00f6rfer)\n\n  * Bugfix: Update node-waf version to 1.5.10\n  * getmem for freebsd (Vanilla Hsu)\n\n<a id=\"0.1.24\"></a>\n## 2009.12.31, Version 0.1.24\n\nhttps://github.com/nodejs/node/commit/642c2773a7eb2034f597af1cd404b9e086b59632\n\n  * Bugfix: don't chunk responses to HTTP/1.0 clients, even if\n    they send Connection: Keep-Alive (e.g. wget)\n\n  * Bugfix: libeio race condition\n  * Bugfix: Don't segfault on unknown http method\n\n  * Simplify exception reporting\n  * Upgrade V8 to 2.0.5.4\n\n<a id=\"0.1.23\"></a>\n## 2009.12.22, Version 0.1.23\n\nhttps://github.com/nodejs/node/commit/f91e347eeeeac1a8bd6a7b462df0321b60f3affc\n\n  * Bugfix: require(\"../blah\") issues (isaacs)\n  * Bugfix: posix.cat (Jonas Pfenniger)\n\n  * Do not pause request for multipart parsing (Felix Geisend\u00f6rfer)\n\n<a id=\"0.1.22\"></a>\n## 2009.12.19, Version 0.1.22\n\nhttps://github.com/nodejs/node/commit/a2d809fe902f6c4102dba8f2e3e9551aad137c0f\n\n  * Bugfix: child modules get wrong id with \"index.js\" (isaacs)\n  * Bugfix: require(\"../foo\") cycles (isaacs)\n\n  * Bugfix: require() should throw error if module does.\n  * New URI parser stolen from Narwhal (isaacs)\n\n  * Bugfix: correctly check kqueue and epoll. (Rasmus Andersson)\n  * Upgrade WAF to 1.5.10\n\n  * Bugfix: posix.statSync() was crashing\n  * Statically define string symbols for performance improvement\n\n  * Bugfix: ARGV[0] weirdness\n  * Added superCtor to ctor.super_ instead superCtor.prototype.\n    (Johan Dahlberg)\n\n  * http-parser supports webdav methods\n  * API: http.Client.prototype.request() (Christopher Lenz)\n\n<a id=\"0.1.21\"></a>\n## 2009.12.06, Version 0.1.21\n\nhttps://github.com/nodejs/node/commit/c6affb64f96a403a14d20035e7fbd6d0ce089db5\n\n  * Feature: Add HTTP client TLS support (Rhys Jones)\n  * Bugfix: use --jobs=1 with WAF\n\n  * Bugfix: Don't use chunked encoding for 1.0 requests\n  * Bugfix: Duplicated header weren't handled correctly\n\n  * Improve sys.inspect (Xavier Shay)\n  * Upgrade v8 to 2.0.3\n\n  * Use CommonJS assert API (Felix Geisend\u00f6rfer, Karl Guertin)\n\n<a id=\"0.1.20\"></a>\n## 2009.11.28, Version 0.1.20\n\nhttps://github.com/nodejs/node/commit/aa42c6790da8ed2cd2b72051c07f6251fe1724d8\n\n  * Add gnutls version to configure script\n  * Add V8 heap info to process.memoryUsage()\n\n  * process.watchFile callback has 2 arguments with the stat object\n    (choonkeat@gmail.com)\n\n<a id=\"0.1.19\"></a>\n## 2009.11.28, Version 0.1.19\n\nhttps://github.com/nodejs/node/commit/633d6be328708055897b72327b88ac88e158935f\n\n  * Feature: Initial TLS support for TCP servers and clients.\n    (Rhys Jones)\n\n  * Add options to process.watchFile()\n  * Add process.umask() (Friedemann Altrock)\n\n  * Bugfix: only detach timers when active.\n  * Bugfix: lib/file.js write(), shouldn't always emit errors or success\n    (onne@onnlucky.com)\n\n  * Bugfix: Memory leak in fs.write\n    (Reported by onne@onnlucky.com)\n\n  * Bugfix: Fix regular expressions detecting outgoing message headers.\n    (Reported by Elliott Cable)\n\n  * Improvements to Multipart parser (Felix Geisend\u00f6rfer)\n  * New HTTP parser\n\n  * Upgrade v8 to 2.0.2\n\n<a id=\"0.1.18\"></a>\n## 2009.11.17, Version 0.1.18\n\nhttps://github.com/nodejs/node/commit/027829d2853a14490e6de9fc5f7094652d045ab8\n\n  * Feature: process.watchFile() process.unwatchFile()\n  * Feature: \"uncaughtException\" event on process\n    (Felix Geisend\u00f6rfer)\n\n  * Feature: 'drain' event to tcp.Connection\n  * Bugfix: Promise.timeout() blocked the event loop\n    (Felix Geisend\u00f6rfer)\n\n  * Bugfix: sendBody() and chunked utf8 strings\n    (Felix Geisend\u00f6rfer)\n\n  * Supply the strerror as a second arg to the tcp.Connection close\n    event (Johan S\u00f8rensen)\n\n  * Add EventEmitter.removeListener (frodenius@gmail.com)\n  * Format JSON for inspecting objects (Felix Geisend\u00f6rfer)\n\n  * Upgrade libev to latest CVS\n\n<a id=\"0.1.17\"></a>\n## 2009.11.07, Version 0.1.17\n\nhttps://github.com/nodejs/node/commit/d1f69ef35dac810530df8249d523add168e09f03\n\n  * Feature: process.chdir() (Brandon Beacher)\n  * Revert http parser upgrade. (b893859c34f05db5c45f416949ebc0eee665cca6)\n    Broke keep-alive.\n\n  * API: rename process.inherits to sys.inherits\n\n<a id=\"0.1.16\"></a>\n## 2009.11.03, Version 0.1.16\n\nhttps://github.com/nodejs/node/commit/726865af7bbafe58435986f4a193ff11c84e4bfe\n\n  * API: Use CommonJS-style module requiring\n    - require(\"/sys.js\") becomes require(\"sys\")\n    - require(\"circle.js\") becomes require(\"./circle\")\n    - process.path.join() becomes require(\"path\").join()\n    - __module becomes module\n\n  * API: Many namespacing changes\n    - Move node.* into process.*\n    - Move node.dns into module \"dns\"\n    - Move node.fs into module \"posix\"\n    - process is no longer the global object. GLOBAL is.\n  For more information on the API changes see:\n    http://thread.gmane.org/gmane.comp.lang.javascript.nodejs/6\n    http://thread.gmane.org/gmane.comp.lang.javascript.nodejs/14\n\n  * Feature: process.platform, process.memoryUsage()\n  * Feature: promise.cancel() (Felix Geisend\u00f6rfer)\n\n  * Upgrade V8 to 1.3.18\n\n<a id=\"0.1.15\"></a>\n## 2009.10.28, Version 0.1.15\n\nhttps://github.com/nodejs/node/commit/eca2de73ed786b935507fd1c6faccd8df9938fd3\n\n  * Many build system fixes (esp. for OSX users)\n  * Feature: promise.timeout() (Felix Geisend\u00f6rfer)\n\n  * Feature: Added external interface for signal handlers, process.pid, and\n    process.kill() (Brandon Beacher)\n\n  * API: Rename node.libraryPaths to require.paths\n  * Bugfix: 'data' event for stdio should emit a string\n\n  * Large file support\n  * Upgrade http_parser\n\n  * Upgrade v8 to 1.3.16\n\n<a id=\"0.1.14\"></a>\n## 2009.10.09, Version 0.1.14\n\nhttps://github.com/nodejs/node/commit/b12c809bb84d1265b6a4d970a5b54ee8a4890513\n\n  * Feature: Improved addon builds with node-waf\n  * Feature: node.SignalHandler (Brandon Beacher)\n\n  * Feature: Enable V8 debugging (but still need to make a debugger)\n  * API: Rename library /utils.js to /sys.js\n\n  * Clean up Node's build system\n  * Don't use parseUri for HTTP server\n\n  * Remove node.pc\n  * Don't use /bin/sh to create child process except with exec()\n\n  * API: Add __module to reference current module\n  * API: Remove include() add node.mixin()\n\n  * Normalize http headers; \"Content-Length\" becomes \"content-length\"\n  * Upgrade V8 to 1.3.15\n\n<a id=\"0.1.13\"></a>\n## 2009.09.30, Version 0.1.13\n\nhttps://github.com/nodejs/node/commit/58493bb05b3da3dc8051fabc0bdea9e575c1a107\n\n  * Feature: Multipart stream parser (Felix Geisend\u00f6rfer)\n  * API: Move node.puts(), node.exec() and others to /utils.js\n\n  * API: Move http, tcp libraries to /http.js and /tcp.js\n  * API: Rename node.exit() to process.exit()\n\n  * Bugfix: require() and include() should work in callbacks.\n  * Pass the Host header in http.cat calls\n\n  * Add warning when coroutine stack size grows too large.\n  * Enhance repl library (Ray Morgan)\n\n  * Bugfix: build script for\n      GCC 4.4 (removed -Werror in V8),\n      on Linux 2.4,\n      and with Python 2.4.4.\n\n  * Add read() and write() to /file.js to read and write\n    whole files at once.\n\n<a id=\"0.1.12\"></a>\n## 2009.09.24, Version 0.1.12\n\nhttps://github.com/nodejs/node/commit/2f56ccb45e87510de712f56705598b3b4e3548ec\n\n  * Feature: System modules, node.libraryPaths\n  * API: Remove \"raw\" encoding, rename \"raws\" to \"binary\".\n\n  * API: Added connection.setNoDElay() to disable Nagle algo.\n  * Decrease default TCP server backlog to 128\n\n  * Bugfix: memory leak involving node.fs.* methods.\n  * Upgrade v8 to 1.3.13\n\n<a id=\"0.1.11\"></a>\n## 2009.09.18, Version 0.1.11\n\nhttps://github.com/nodejs/node/commit/5ddc4f5d0c002bac0ae3d62fc0dc58f0d2d83ec4\n\n  * API: default to utf8 encoding for node.fs.cat()\n  * API: add node.exec()\n\n  * API: node.fs.read() takes a normal encoding parameter.\n  * API: Change arguments of emit(), emitSuccess(), emitError()\n\n  * Bugfix: node.fs.write() was stack allocating buffer.\n  * Bugfix: ReportException shouldn't forget the top frame.\n\n  * Improve buffering for HTTP outgoing messages\n  * Fix and reenable x64 macintosh build.\n\n  * Upgrade v8 to 1.3.11\n\n<a id=\"0.1.10\"></a>\n## 2009.09.11, Version 0.1.10\n\nhttps://github.com/nodejs/node/commit/12bb0d46ce761e3d00a27170e63b40408c15b558\n\n  * Feature: raw string encoding \"raws\"\n  * Feature: access to environ through \"ENV\"\n\n  * Feature: add isDirectory, isFile, isSocket, ... methods\n    to stats object.\n\n  * Bugfix: Internally use full paths when loading modules\n    this fixes a shebang loading problem.\n\n  * Bugfix: Add '--' command line argument for separating v8\n    args from program args.\n\n  * Add man page.\n  * Add node-repl\n\n  * Upgrade v8 to 1.3.10\n\n<a id=\"0.1.9\"></a>\n## 2009.09.05, Version 0.1.9\n\nhttps://github.com/nodejs/node/commit/d029764bb32058389ecb31ed54a5d24d2915ad4c\n\n  * Bugfix: Compile on Snow Leopard.\n  * Bugfix: Malformed URIs raising exceptions.\n  \n<a id=\"0.1.8\"></a>\n## 2009.09.04, Version 0.1.8\n\nhttps://github.com/nodejs/node/commit/e6d712a937b61567e81b15085edba863be16ba96\n\n  * Feature: External modules\n  * Feature: setTimeout() for node.tcp.Connection\n\n  * Feature: add node.cwd(), node.fs.readdir(), node.fs.mkdir()\n  * Bugfix: promise.wait() releasing out of order.\n\n  * Bugfix: Asyncly do getaddrinfo() on Apple.\n  * Disable useless evcom error messages.\n\n  * Better stack traces.\n  * Built natively on x64.\n\n  * Upgrade v8 to 1.3.9\n\n<a id=\"0.1.7\"></a>\n## 2009.08.27, Version 0.1.7\n\nhttps://github.com/nodejs/node/commit/f7acef9acf8ba8433d697ad5ed99d2e857387e4b\n\n  * Feature: global 'process' object. Emits \"exit\".\n  * Feature: promise.wait()\n\n  * Feature: node.stdio\n  * Feature: EventEmitters emit \"newListener\" when listeners are\n    added\n\n  * API:  Use flat object instead of array-of-arrays for HTTP\n    headers.\n\n  * API: Remove buffered file object (node.File)\n  * API: require(), include() are synchronous. (Uses\n    continuations.)\n\n  * API: Deprecate onLoad and onExit.\n  * API: Rename node.Process to node.ChildProcess\n\n  * Refactor node.Process to take advantage of evcom_reader/writer.\n  * Upgrade v8 to 1.3.7\n\n<a id=\"0.1.6\"></a>\n## 2009.08.22, Version 0.1.6\n\nhttps://github.com/nodejs/node/commit/9c97b1db3099d61cd292aa59ec2227a619f3a7ab\n\n  * Bugfix: Ignore SIGPIPE.\n\n<a id=\"0.1.5\"></a>\n## 2009.08.21, Version 0.1.5\n\nhttps://github.com/nodejs/node/commit/b0fd3e281cb5f7cd8d3a26bd2b89e1b59998e5ed\n\n  * Bugfix: Buggy connections could crash node.js. Now check\n    connection before sending data every time (Kevin van Zonneveld)\n\n  * Bugfix: stdin fd (0) being ignored by node.File. (Abe Fettig)\n  * API: Remove connection.fullClose()\n\n  * API: Return the EventEmitter from addListener for chaining.\n  * API: tcp.Connection \"disconnect\" event renamed to \"close\"\n\n  * Upgrade evcom\n    Upgrade v8 to 1.3.6\n\n<a id=\"0.1.4\"></a>\n## 2009.08.13, Version 0.1.4\n\nhttps://github.com/nodejs/node/commit/0f888ed6de153f68c17005211d7e0f960a5e34f3\n\n  * Major refactor to evcom.\n  * Enable test-tcp-many-clients.\n\n  * Add -m32 gcc flag to udns.\n  * Add connection.readPause() and connection.readResume()\n    Add IncomingMessage.prototype.pause() and resume().\n\n  * Fix http benchmark. Wasn't correctly dispatching.\n  * Bugfix: response.setBodyEncoding(\"ascii\") not working.\n\n  * Bugfix: Negative ints in HTTP's on_body and node.fs.read()\n  * Upgrade v8 to 1.3.4\n    Upgrade libev to 3.8\n    Upgrade http_parser to v0.2\n\n<a id=\"0.1.3\"></a>\n## 2009.08.06, Version 0.1.3\n\nhttps://github.com/nodejs/node/commit/695f0296e35b30cf8322fd1bd934810403cca9f3\n\n  * Upgrade v8 to 1.3.2\n  * Bugfix: node.http.ServerRequest.setBodyEncoding('ascii') not\n    working\n\n  * Bugfix: node.encodeUtf8 was broken. (Connor Dunn)\n  * Add ranlib to udns Makefile.\n\n  * Upgrade evcom - fix accepting too many connections issue.\n  * Initial support for shebang\n\n  * Add simple command line switches\n  * Add node.version API\n\n<a id=\"0.1.2\"></a>\n## 2009.08.01, Version 0.1.2\n\nhttps://github.com/nodejs/node/commit/025a34244d1cea94d6d40ad7bf92671cb909a96c\n\n  * Add DNS API\n  * node.tcp.Server's backlog option is now an argument to listen()\n\n  * Upgrade V8 to 1.3.1\n  * Bugfix: Default to chunked for client requests without\n    Content-Length.\n\n  * Bugfix: Line numbers in stack traces.\n  * Bugfix: negative integers in raw encoding stream\n\n  * Bugfix: node.fs.File was not passing args to promise callbacks.\n\n<a id=\"0.1.1\"></a>\n## 2009.07.27, Version 0.1.1\n\nhttps://github.com/nodejs/node/commit/77d407df2826b20e9177c26c0d2bb4481e497937\n\n  * Simplify and clean up ObjectWrap.\n  * Upgrade liboi (which is now called evcom)\n    Upgrade libev to 3.7\n    Upgrade V8 to 1.2.14\n\n  * Array.prototype.encodeUtf8 renamed to node.encodeUtf8(array)\n  * Move EventEmitter.prototype.emit() completely into C++.\n\n  * Bugfix: Fix memory leak in event emitters.\n    http://groups.google.com/group/nodejs/browse_thread/thread/a8d1dfc2fd57a6d1\n\n  * Bugfix: Had problems reading scripts with non-ascii characters.\n  * Bugfix: Fix Detach() in node::Server\n\n  * Bugfix: Sockets not properly reattached if reconnected during\n    disconnect event.\n\n  * Bugfix: Server-side clients not attached between creation and\n    on_connect.\n\n  * Add 'close' event to node.tcp.Server\n  * Simplify and clean up http.js. (Takes more advantage of event\n    infrastructure.)\n\n  * Add benchmark scripts. Run with \"make benchmark\".\n\n<a id=\"0.1.0\"></a>\n## 2009.06.30, Version 0.1.0\n\nhttps://github.com/nodejs/node/commit/0fe44d52fe75f151bceb59534394658aae6ac328\n\n  * Update documentation, use asciidoc.\n  * EventEmitter and Promise interfaces. (Breaks previous API.)\n\n  * Remove node.Process constructor in favor of node.createProcess\n  * Add -m32 flags for compiling on x64 platforms.\n    (Thanks to Andr\u00e1s B\u00e1rth\u00e1zi)\n\n  * Upgrade v8 to 1.2.10 and libev to 3.6\n  * Bugfix: Timer::RepeatSetter wasn't working.\n\n  * Bugfix: Spawning many processes in a loop\n    (reported by Felix Geisend\u00f6rfer)\n\n<a id=\"0.0.6\"></a>\n## 2009.06.24, Version 0.0.6\n\nhttps://github.com/nodejs/node/commit/fbe0be19ebfb422d8fa20ea5204c1713e9214d5f\n\n  * Load modules via HTTP URLs (Urban Hafner)\n  * Bugfix: Add HTTPConnection->size() and HTTPServer->size()\n\n  * New node.Process API\n  * Clean up build tools, use v8's test runner.\n\n  * Use ev_unref() instead of starting/stopping the eio thread\n    pool watcher.\n\n<a id=\"0.0.5\"></a>\n## 2009.06.18, Version 0.0.5\n\nhttps://github.com/nodejs/node/commit/3a2b41de74b6c343b8464a68eff04c4bfd9aebea\n\n  * Support for IPv6\n  * Remove namespace node.constants\n\n  * Upgrade v8 to 1.2.8.1\n  * Accept ports as strings in the TCP client and server.\n\n  * Bugfix: HTTP Client race\n  * Bugfix: freeaddrinfo() wasn't getting called after\n    getaddrinfo() for TCP servers\n\n  * Add \"opening\" to TCP client readyState\n  * Add remoteAddress to TCP client\n\n  * Add global print() function.\n\n<a id=\"0.0.4\"></a>\n## 2009.06.13, Version 0.0.4\n\nhttps://github.com/nodejs/node/commit/916b9ca715b229b0703f0ed6c2fc065410fb189c\n\n * Add interrupt() method to server-side HTTP requests.\n * Bugfix: onBodyComplete was not getting called on server-side\n   HTTP\n\n<a id=\"0.0.3\"></a>\n## 2009.06.11, Version 0.0.3\n\nhttps://github.com/nodejs/node/commit/6e0dfe50006ae4f5dac987f055e0c9338662f40a\n\n * Many bug fixes including the problem with http.Client on\n   macintosh\n\n * Upgrades v8 to 1.2.7\n * Adds onExit hook\n\n * Guard against buffer overflow in http parser\n * require() and include() now need the \".js\" extension\n\n * http.Client uses identity transfer encoding by default.\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/api/all.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>About this Documentation Node.js v6.2.2 Manual &amp; Documentation</title>\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato:400,700,400italic\">\n  <link rel=\"stylesheet\" href=\"assets/style.css\">\n  <link rel=\"stylesheet\" href=\"assets/sh.css\">\n  <link rel=\"canonical\" href=\"https://nodejs.org/api/all.html\">\n</head>\n<body class=\"alt apidoc\" id=\"api-section-all\">\n  <div id=\"content\" class=\"clearfix\">\n    <div id=\"column2\" class=\"interior\">\n      <div id=\"intro\" class=\"interior\">\n        <a href=\"/\" title=\"Go back to the home page\">\n          Node.js\n        </a>\n      </div>\n      <ul>\n<li><a class=\"nav-documentation\" href=\"documentation.html\">About these Docs</a></li>\n<li><a class=\"nav-synopsis\" href=\"synopsis.html\">Usage &amp; Example</a></li>\n</ul>\n<div class=\"line\"></div>\n\n<ul>\n<li><a class=\"nav-assert\" href=\"assert.html\">Assertion Testing</a></li>\n<li><a class=\"nav-buffer\" href=\"buffer.html\">Buffer</a></li>\n<li><a class=\"nav-addons\" href=\"addons.html\">C/C++ Addons</a></li>\n<li><a class=\"nav-child_process\" href=\"child_process.html\">Child Processes</a></li>\n<li><a class=\"nav-cluster\" href=\"cluster.html\">Cluster</a></li>\n<li><a class=\"nav-cli\" href=\"cli.html\">Command Line Options</a></li>\n<li><a class=\"nav-console\" href=\"console.html\">Console</a></li>\n<li><a class=\"nav-crypto\" href=\"crypto.html\">Crypto</a></li>\n<li><a class=\"nav-debugger\" href=\"debugger.html\">Debugger</a></li>\n<li><a class=\"nav-dns\" href=\"dns.html\">DNS</a></li>\n<li><a class=\"nav-domain\" href=\"domain.html\">Domain</a></li>\n<li><a class=\"nav-errors\" href=\"errors.html\">Errors</a></li>\n<li><a class=\"nav-events\" href=\"events.html\">Events</a></li>\n<li><a class=\"nav-fs\" href=\"fs.html\">File System</a></li>\n<li><a class=\"nav-globals\" href=\"globals.html\">Globals</a></li>\n<li><a class=\"nav-http\" href=\"http.html\">HTTP</a></li>\n<li><a class=\"nav-https\" href=\"https.html\">HTTPS</a></li>\n<li><a class=\"nav-modules\" href=\"modules.html\">Modules</a></li>\n<li><a class=\"nav-net\" href=\"net.html\">Net</a></li>\n<li><a class=\"nav-os\" href=\"os.html\">OS</a></li>\n<li><a class=\"nav-path\" href=\"path.html\">Path</a></li>\n<li><a class=\"nav-process\" href=\"process.html\">Process</a></li>\n<li><a class=\"nav-punycode\" href=\"punycode.html\">Punycode</a></li>\n<li><a class=\"nav-querystring\" href=\"querystring.html\">Query Strings</a></li>\n<li><a class=\"nav-readline\" href=\"readline.html\">Readline</a></li>\n<li><a class=\"nav-repl\" href=\"repl.html\">REPL</a></li>\n<li><a class=\"nav-stream\" href=\"stream.html\">Stream</a></li>\n<li><a class=\"nav-string_decoder\" href=\"string_decoder.html\">String Decoder</a></li>\n<li><a class=\"nav-timers\" href=\"timers.html\">Timers</a></li>\n<li><a class=\"nav-tls\" href=\"tls.html\">TLS/SSL</a></li>\n<li><a class=\"nav-tty\" href=\"tty.html\">TTY</a></li>\n<li><a class=\"nav-dgram\" href=\"dgram.html\">UDP/Datagram</a></li>\n<li><a class=\"nav-url\" href=\"url.html\">URL</a></li>\n<li><a class=\"nav-util\" href=\"util.html\">Utilities</a></li>\n<li><a class=\"nav-v8\" href=\"v8.html\">V8</a></li>\n<li><a class=\"nav-vm\" href=\"vm.html\">VM</a></li>\n<li><a class=\"nav-zlib\" href=\"zlib.html\">ZLIB</a></li>\n</ul>\n<div class=\"line\"></div>\n\n<ul>\n<li><a class=\"nav-https-github-com-nodejs-node\" href=\"https://github.com/nodejs/node\">GitHub Repo &amp; Issue Tracker</a></li>\n<li><a class=\"nav-http-groups-google-com-group-nodejs\" href=\"http://groups.google.com/group/nodejs\">Mailing List</a></li>\n</ul>\n\n    </div>\n\n    <div id=\"column1\" data-id=\"all\" class=\"interior\">\n      <header>\n        <h1>Node.js v6.2.2 Documentation</h1>\n        <div id=\"gtoc\">\n          <p>\n            <a href=\"index.html\" name=\"toc\">Index</a> |\n            <a href=\"all.html\">View on single page</a> |\n            <a href=\"all.json\">View as JSON</a>\n          </p>\n        </div>\n        <hr>\n      </header>\n\n      <div id=\"toc\">\n        <h2>Table of Contents</h2>\n        <ul>\n<li><a href=\"#documentation_about_this_documentation\">About this Documentation</a><ul>\n<li><a href=\"#documentation_stability_index\">Stability Index</a></li>\n<li><a href=\"#documentation_json_output\">JSON Output</a></li>\n<li><a href=\"#documentation_syscalls_and_man_pages\">Syscalls and man pages</a></li>\n</ul>\n</li>\n<li><a href=\"#synopsis_usage\">Usage</a><ul>\n<li><a href=\"#synopsis_example\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#addons_addons\">Addons</a><ul>\n<li><a href=\"#addons_hello_world\">Hello world</a><ul>\n<li><a href=\"#addons_building\">Building</a></li>\n<li><a href=\"#addons_linking_to_node_js_own_dependencies\">Linking to Node.js&#39; own dependencies</a></li>\n<li><a href=\"#addons_loading_addons_using_require\">Loading Addons using require()</a></li>\n</ul>\n</li>\n<li><a href=\"#addons_native_abstractions_for_node_js\">Native Abstractions for Node.js</a></li>\n<li><a href=\"#addons_addon_examples\">Addon examples</a><ul>\n<li><a href=\"#addons_function_arguments\">Function arguments</a></li>\n<li><a href=\"#addons_callbacks\">Callbacks</a></li>\n<li><a href=\"#addons_object_factory\">Object factory</a></li>\n<li><a href=\"#addons_function_factory\">Function factory</a></li>\n<li><a href=\"#addons_wrapping_c_objects\">Wrapping C++ objects</a></li>\n<li><a href=\"#addons_factory_of_wrapped_objects\">Factory of wrapped objects</a></li>\n<li><a href=\"#addons_passing_wrapped_objects_around\">Passing wrapped objects around</a></li>\n<li><a href=\"#addons_atexit_hooks\">AtExit hooks</a><ul>\n<li><a href=\"#addons_void_atexit_callback_args\">void AtExit(callback, args)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#assert_assert\">Assert</a><ul>\n<li><a href=\"#assert_assert_value_message\">assert(value[, message])</a></li>\n<li><a href=\"#assert_assert_deepequal_actual_expected_message\">assert.deepEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_deepstrictequal_actual_expected_message\">assert.deepStrictEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_doesnotthrow_block_error_message\">assert.doesNotThrow(block[, error][, message])</a></li>\n<li><a href=\"#assert_assert_equal_actual_expected_message\">assert.equal(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_fail_actual_expected_message_operator\">assert.fail(actual, expected, message, operator)</a></li>\n<li><a href=\"#assert_assert_iferror_value\">assert.ifError(value)</a></li>\n<li><a href=\"#assert_assert_notdeepequal_actual_expected_message\">assert.notDeepEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_notdeepstrictequal_actual_expected_message\">assert.notDeepStrictEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_notequal_actual_expected_message\">assert.notEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_notstrictequal_actual_expected_message\">assert.notStrictEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_ok_value_message\">assert.ok(value[, message])</a></li>\n<li><a href=\"#assert_assert_strictequal_actual_expected_message\">assert.strictEqual(actual, expected[, message])</a></li>\n<li><a href=\"#assert_assert_throws_block_error_message\">assert.throws(block[, error][, message])</a></li>\n</ul>\n</li>\n<li><a href=\"#buffer_buffer\">Buffer</a><ul>\n<li><a href=\"#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\"><code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and <code>Buffer.allocUnsafe()</code></a><ul>\n<li><a href=\"#buffer_the_zero_fill_buffers_command_line_option\">The <code>--zero-fill-buffers</code> command line option</a></li>\n<li><a href=\"#buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe\">What makes <code>Buffer.allocUnsafe(size)</code> and <code>Buffer.allocUnsafeSlow(size)</code> &quot;unsafe&quot;?</a></li>\n</ul>\n</li>\n<li><a href=\"#buffer_buffers_and_character_encodings\">Buffers and Character Encodings</a></li>\n<li><a href=\"#buffer_buffers_and_typedarray\">Buffers and TypedArray</a></li>\n<li><a href=\"#buffer_buffers_and_es6_iteration\">Buffers and ES6 iteration</a></li>\n<li><a href=\"#buffer_class_buffer\">Class: Buffer</a><ul>\n<li><a href=\"#buffer_new_buffer_array\">new Buffer(array)</a></li>\n<li><a href=\"#buffer_new_buffer_buffer\">new Buffer(buffer)</a></li>\n<li><a href=\"#buffer_new_buffer_arraybuffer_byteoffset_length\">new Buffer(arrayBuffer[, byteOffset [, length]])</a></li>\n<li><a href=\"#buffer_new_buffer_size\">new Buffer(size)</a></li>\n<li><a href=\"#buffer_new_buffer_str_encoding\">new Buffer(str[, encoding])</a></li>\n<li><a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\">Class Method: Buffer.alloc(size[, fill[, encoding]])</a></li>\n<li><a href=\"#buffer_class_method_buffer_allocunsafe_size\">Class Method: Buffer.allocUnsafe(size)</a></li>\n<li><a href=\"#buffer_class_method_buffer_allocunsafeslow_size\">Class Method: Buffer.allocUnsafeSlow(size)</a></li>\n<li><a href=\"#buffer_class_method_buffer_bytelength_string_encoding\">Class Method: Buffer.byteLength(string[, encoding])</a></li>\n<li><a href=\"#buffer_class_method_buffer_compare_buf1_buf2\">Class Method: Buffer.compare(buf1, buf2)</a></li>\n<li><a href=\"#buffer_class_method_buffer_concat_list_totallength\">Class Method: Buffer.concat(list[, totalLength])</a></li>\n<li><a href=\"#buffer_class_method_buffer_from_array\">Class Method: Buffer.from(array)</a></li>\n<li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\">Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])</a></li>\n<li><a href=\"#buffer_class_method_buffer_from_buffer\">Class Method: Buffer.from(buffer)</a></li>\n<li><a href=\"#buffer_class_method_buffer_from_str_encoding\">Class Method: Buffer.from(str[, encoding])</a></li>\n<li><a href=\"#buffer_class_method_buffer_isbuffer_obj\">Class Method: Buffer.isBuffer(obj)</a></li>\n<li><a href=\"#buffer_class_method_buffer_isencoding_encoding\">Class Method: Buffer.isEncoding(encoding)</a></li>\n<li><a href=\"#buffer_buf_index\">buf[index]</a></li>\n<li><a href=\"#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\">buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])</a></li>\n<li><a href=\"#buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend\">buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</a></li>\n<li><a href=\"#buffer_buf_entries\">buf.entries()</a></li>\n<li><a href=\"#buffer_buf_equals_otherbuffer\">buf.equals(otherBuffer)</a></li>\n<li><a href=\"#buffer_buf_fill_value_offset_end_encoding\">buf.fill(value[, offset[, end]][, encoding])</a></li>\n<li><a href=\"#buffer_buf_indexof_value_byteoffset_encoding\">buf.indexOf(value[, byteOffset][, encoding])</a></li>\n<li><a href=\"#buffer_buf_includes_value_byteoffset_encoding\">buf.includes(value[, byteOffset][, encoding])</a></li>\n<li><a href=\"#buffer_buf_keys\">buf.keys()</a></li>\n<li><a href=\"#buffer_buf_lastindexof_value_byteoffset_encoding\">buf.lastIndexOf(value[, byteOffset][, encoding])</a></li>\n<li><a href=\"#buffer_buf_length\">buf.length</a></li>\n<li><a href=\"#buffer_buf_readdoublebe_offset_noassert\">buf.readDoubleBE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readdoublele_offset_noassert\">buf.readDoubleLE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readfloatbe_offset_noassert\">buf.readFloatBE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readfloatle_offset_noassert\">buf.readFloatLE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readint8_offset_noassert\">buf.readInt8(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readint16be_offset_noassert\">buf.readInt16BE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readint16le_offset_noassert\">buf.readInt16LE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readint32be_offset_noassert\">buf.readInt32BE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readint32le_offset_noassert\">buf.readInt32LE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readintbe_offset_bytelength_noassert\">buf.readIntBE(offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readintle_offset_bytelength_noassert\">buf.readIntLE(offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuint8_offset_noassert\">buf.readUInt8(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuint16be_offset_noassert\">buf.readUInt16BE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuint16le_offset_noassert\">buf.readUInt16LE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuint32be_offset_noassert\">buf.readUInt32BE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuint32le_offset_noassert\">buf.readUInt32LE(offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuintbe_offset_bytelength_noassert\">buf.readUIntBE(offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_readuintle_offset_bytelength_noassert\">buf.readUIntLE(offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_slice_start_end\">buf.slice([start[, end]])</a></li>\n<li><a href=\"#buffer_buf_swap16\">buf.swap16()</a></li>\n<li><a href=\"#buffer_buf_swap32\">buf.swap32()</a></li>\n<li><a href=\"#buffer_buf_tostring_encoding_start_end\">buf.toString([encoding[, start[, end]]])</a></li>\n<li><a href=\"#buffer_buf_tojson\">buf.toJSON()</a></li>\n<li><a href=\"#buffer_buf_values\">buf.values()</a></li>\n<li><a href=\"#buffer_buf_write_string_offset_length_encoding\">buf.write(string[, offset[, length]][, encoding])</a></li>\n<li><a href=\"#buffer_buf_writedoublebe_value_offset_noassert\">buf.writeDoubleBE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writedoublele_value_offset_noassert\">buf.writeDoubleLE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writefloatbe_value_offset_noassert\">buf.writeFloatBE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writefloatle_value_offset_noassert\">buf.writeFloatLE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeint8_value_offset_noassert\">buf.writeInt8(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeint16be_value_offset_noassert\">buf.writeInt16BE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeint16le_value_offset_noassert\">buf.writeInt16LE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeint32be_value_offset_noassert\">buf.writeInt32BE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeint32le_value_offset_noassert\">buf.writeInt32LE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeintbe_value_offset_bytelength_noassert\">buf.writeIntBE(value, offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeintle_value_offset_bytelength_noassert\">buf.writeIntLE(value, offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuint8_value_offset_noassert\">buf.writeUInt8(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuint16be_value_offset_noassert\">buf.writeUInt16BE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuint16le_value_offset_noassert\">buf.writeUInt16LE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuint32be_value_offset_noassert\">buf.writeUInt32BE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuint32le_value_offset_noassert\">buf.writeUInt32LE(value, offset[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuintbe_value_offset_bytelength_noassert\">buf.writeUIntBE(value, offset, byteLength[, noAssert])</a></li>\n<li><a href=\"#buffer_buf_writeuintle_value_offset_bytelength_noassert\">buf.writeUIntLE(value, offset, byteLength[, noAssert])</a></li>\n</ul>\n</li>\n<li><a href=\"#buffer_buffer_inspect_max_bytes\">buffer.INSPECT_MAX_BYTES</a></li>\n<li><a href=\"#buffer_class_slowbuffer\">Class: SlowBuffer</a><ul>\n<li><a href=\"#buffer_new_slowbuffer_size\">new SlowBuffer(size)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#child_process_child_process\">Child Process</a><ul>\n<li><a href=\"#child_process_asynchronous_process_creation\">Asynchronous Process Creation</a><ul>\n<li><a href=\"#child_process_spawning_bat_and_cmd_files_on_windows\">Spawning <code>.bat</code> and <code>.cmd</code> files on Windows</a></li>\n<li><a href=\"#child_process_child_process_exec_command_options_callback\">child_process.exec(command[, options][, callback])</a></li>\n<li><a href=\"#child_process_child_process_execfile_file_args_options_callback\">child_process.execFile(file[, args][, options][, callback])</a></li>\n<li><a href=\"#child_process_child_process_fork_modulepath_args_options\">child_process.fork(modulePath[, args][, options])</a></li>\n<li><a href=\"#child_process_child_process_spawn_command_args_options\">child_process.spawn(command[, args][, options])</a><ul>\n<li><a href=\"#child_process_options_detached\">options.detached</a></li>\n<li><a href=\"#child_process_options_stdio\">options.stdio</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#child_process_synchronous_process_creation\">Synchronous Process Creation</a><ul>\n<li><a href=\"#child_process_child_process_execfilesync_file_args_options\">child_process.execFileSync(file[, args][, options])</a></li>\n<li><a href=\"#child_process_child_process_execsync_command_options\">child_process.execSync(command[, options])</a></li>\n<li><a href=\"#child_process_child_process_spawnsync_command_args_options\">child_process.spawnSync(command[, args][, options])</a></li>\n</ul>\n</li>\n<li><a href=\"#child_process_class_childprocess\">Class: ChildProcess</a><ul>\n<li><a href=\"#child_process_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#child_process_event_disconnect\">Event: &#39;disconnect&#39;</a></li>\n<li><a href=\"#child_process_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#child_process_event_exit\">Event: &#39;exit&#39;</a></li>\n<li><a href=\"#child_process_event_message\">Event: &#39;message&#39;</a></li>\n<li><a href=\"#child_process_child_connected\">child.connected</a></li>\n<li><a href=\"#child_process_child_disconnect\">child.disconnect()</a></li>\n<li><a href=\"#child_process_child_kill_signal\">child.kill([signal])</a></li>\n<li><a href=\"#child_process_child_pid\">child.pid</a></li>\n<li><a href=\"#child_process_child_send_message_sendhandle_options_callback\">child.send(message[, sendHandle[, options]][, callback])</a><ul>\n<li><a href=\"#child_process_example_sending_a_server_object\">Example: sending a server object</a></li>\n<li><a href=\"#child_process_example_sending_a_socket_object\">Example: sending a socket object</a></li>\n</ul>\n</li>\n<li><a href=\"#child_process_child_stderr\">child.stderr</a></li>\n<li><a href=\"#child_process_child_stdin\">child.stdin</a></li>\n<li><a href=\"#child_process_child_stdio\">child.stdio</a></li>\n<li><a href=\"#child_process_child_stdout\">child.stdout</a></li>\n</ul>\n</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a></li>\n</ul>\n</li>\n<li><a href=\"#cluster_cluster\">Cluster</a><ul>\n<li><a href=\"#cluster_how_it_works\">How It Works</a></li>\n<li><a href=\"#cluster_class_worker\">Class: Worker</a><ul>\n<li><a href=\"#cluster_event_disconnect\">Event: &#39;disconnect&#39;</a></li>\n<li><a href=\"#cluster_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#cluster_event_exit\">Event: &#39;exit&#39;</a></li>\n<li><a href=\"#cluster_event_listening\">Event: &#39;listening&#39;</a></li>\n<li><a href=\"#cluster_event_message\">Event: &#39;message&#39;</a></li>\n<li><a href=\"#cluster_event_online\">Event: &#39;online&#39;</a></li>\n<li><a href=\"#cluster_worker_disconnect\">worker.disconnect()</a></li>\n<li><a href=\"#cluster_worker_exitedafterdisconnect\">worker.exitedAfterDisconnect</a></li>\n<li><a href=\"#cluster_worker_id\">worker.id</a></li>\n<li><a href=\"#cluster_worker_isconnected\">worker.isConnected()</a></li>\n<li><a href=\"#cluster_worker_isdead\">worker.isDead()</a></li>\n<li><a href=\"#cluster_worker_kill_signal_sigterm\">worker.kill([signal=&#39;SIGTERM&#39;])</a></li>\n<li><a href=\"#cluster_worker_process\">worker.process</a></li>\n<li><a href=\"#cluster_worker_send_message_sendhandle_callback\">worker.send(message[, sendHandle][, callback])</a></li>\n<li><a href=\"#cluster_worker_suicide\">worker.suicide</a></li>\n</ul>\n</li>\n<li><a href=\"#cluster_event_disconnect_1\">Event: &#39;disconnect&#39;</a></li>\n<li><a href=\"#cluster_event_exit_1\">Event: &#39;exit&#39;</a></li>\n<li><a href=\"#cluster_event_fork\">Event: &#39;fork&#39;</a></li>\n<li><a href=\"#cluster_event_listening_1\">Event: &#39;listening&#39;</a></li>\n<li><a href=\"#cluster_event_message_1\">Event: &#39;message&#39;</a></li>\n<li><a href=\"#cluster_event_online_1\">Event: &#39;online&#39;</a></li>\n<li><a href=\"#cluster_event_setup\">Event: &#39;setup&#39;</a></li>\n<li><a href=\"#cluster_cluster_disconnect_callback\">cluster.disconnect([callback])</a></li>\n<li><a href=\"#cluster_cluster_fork_env\">cluster.fork([env])</a></li>\n<li><a href=\"#cluster_cluster_ismaster\">cluster.isMaster</a></li>\n<li><a href=\"#cluster_cluster_isworker\">cluster.isWorker</a></li>\n<li><a href=\"#cluster_cluster_schedulingpolicy\">cluster.schedulingPolicy</a></li>\n<li><a href=\"#cluster_cluster_settings\">cluster.settings</a></li>\n<li><a href=\"#cluster_cluster_setupmaster_settings\">cluster.setupMaster([settings])</a></li>\n<li><a href=\"#cluster_cluster_worker\">cluster.worker</a></li>\n<li><a href=\"#cluster_cluster_workers\">cluster.workers</a></li>\n</ul>\n</li>\n<li><a href=\"#cli_command_line_options\">Command Line Options</a><ul>\n<li><a href=\"#cli_synopsis\">Synopsis</a></li>\n<li><a href=\"#cli_options\">Options</a><ul>\n<li><a href=\"#cli_v_version\"><code>-v</code>, <code>--version</code></a></li>\n<li><a href=\"#cli_h_help\"><code>-h</code>, <code>--help</code></a></li>\n<li><a href=\"#cli_e_eval_script\"><code>-e</code>, <code>--eval &quot;script&quot;</code></a></li>\n<li><a href=\"#cli_p_print_script\"><code>-p</code>, <code>--print &quot;script&quot;</code></a></li>\n<li><a href=\"#cli_c_check\"><code>-c</code>, <code>--check</code></a></li>\n<li><a href=\"#cli_i_interactive\"><code>-i</code>, <code>--interactive</code></a></li>\n<li><a href=\"#cli_r_require_module\"><code>-r</code>, <code>--require module</code></a></li>\n<li><a href=\"#cli_no_deprecation\"><code>--no-deprecation</code></a></li>\n<li><a href=\"#cli_trace_deprecation\"><code>--trace-deprecation</code></a></li>\n<li><a href=\"#cli_throw_deprecation\"><code>--throw-deprecation</code></a></li>\n<li><a href=\"#cli_no_warnings\"><code>--no-warnings</code></a></li>\n<li><a href=\"#cli_trace_warnings\"><code>--trace-warnings</code></a></li>\n<li><a href=\"#cli_trace_sync_io\"><code>--trace-sync-io</code></a></li>\n<li><a href=\"#cli_zero_fill_buffers\"><code>--zero-fill-buffers</code></a></li>\n<li><a href=\"#cli_preserve_symlinks\"><code>--preserve-symlinks</code></a></li>\n<li><a href=\"#cli_track_heap_objects\"><code>--track-heap-objects</code></a></li>\n<li><a href=\"#cli_prof_process\"><code>--prof-process</code></a></li>\n<li><a href=\"#cli_v8_options\"><code>--v8-options</code></a></li>\n<li><a href=\"#cli_tls_cipher_list_list\"><code>--tls-cipher-list=list</code></a></li>\n<li><a href=\"#cli_enable_fips\"><code>--enable-fips</code></a></li>\n<li><a href=\"#cli_force_fips\"><code>--force-fips</code></a></li>\n<li><a href=\"#cli_icu_data_dir_file\"><code>--icu-data-dir=file</code></a></li>\n</ul>\n</li>\n<li><a href=\"#cli_environment_variables\">Environment Variables</a><ul>\n<li><a href=\"#cli_node_debug_module\"><code>NODE_DEBUG=module[,\u2026]</code></a></li>\n<li><a href=\"#cli_node_path_path\"><code>NODE_PATH=path[:\u2026]</code></a></li>\n<li><a href=\"#cli_node_disable_colors_1\"><code>NODE_DISABLE_COLORS=1</code></a></li>\n<li><a href=\"#cli_node_icu_data_file\"><code>NODE_ICU_DATA=file</code></a></li>\n<li><a href=\"#cli_node_repl_history_file\"><code>NODE_REPL_HISTORY=file</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#console_console\">Console</a><ul>\n<li><a href=\"#console_asynchronous_vs_synchronous_consoles\">Asynchronous vs Synchronous Consoles</a></li>\n<li><a href=\"#console_class_console\">Class: Console</a><ul>\n<li><a href=\"#console_new_console_stdout_stderr\">new Console(stdout[, stderr])</a></li>\n<li><a href=\"#console_console_assert_value_message\">console.assert(value[, message][, ...])</a></li>\n<li><a href=\"#console_console_dir_obj_options\">console.dir(obj[, options])</a></li>\n<li><a href=\"#console_console_error_data\">console.error([data][, ...])</a></li>\n<li><a href=\"#console_console_info_data\">console.info([data][, ...])</a></li>\n<li><a href=\"#console_console_log_data\">console.log([data][, ...])</a></li>\n<li><a href=\"#console_console_time_label\">console.time(label)</a></li>\n<li><a href=\"#console_console_timeend_label\">console.timeEnd(label)</a></li>\n<li><a href=\"#console_console_trace_message\">console.trace(message[, ...])</a></li>\n<li><a href=\"#console_console_warn_data\">console.warn([data][, ...])</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#crypto_crypto\">Crypto</a><ul>\n<li><a href=\"#crypto_determining_if_crypto_support_is_unavailable\">Determining if crypto support is unavailable</a></li>\n<li><a href=\"#crypto_class_certificate\">Class: Certificate</a><ul>\n<li><a href=\"#crypto_new_crypto_certificate\">new crypto.Certificate()</a></li>\n<li><a href=\"#crypto_certificate_exportchallenge_spkac\">certificate.exportChallenge(spkac)</a></li>\n<li><a href=\"#crypto_certificate_exportpublickey_spkac\">certificate.exportPublicKey(spkac)</a></li>\n<li><a href=\"#crypto_certificate_verifyspkac_spkac\">certificate.verifySpkac(spkac)</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_cipher\">Class: Cipher</a><ul>\n<li><a href=\"#crypto_cipher_final_output_encoding\">cipher.final([output_encoding])</a></li>\n<li><a href=\"#crypto_cipher_setaad_buffer\">cipher.setAAD(buffer)</a></li>\n<li><a href=\"#crypto_cipher_getauthtag\">cipher.getAuthTag()</a></li>\n<li><a href=\"#crypto_cipher_setautopadding_auto_padding_true\">cipher.setAutoPadding(auto_padding=true)</a></li>\n<li><a href=\"#crypto_cipher_update_data_input_encoding_output_encoding\">cipher.update(data[, input_encoding][, output_encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_decipher\">Class: Decipher</a><ul>\n<li><a href=\"#crypto_decipher_final_output_encoding\">decipher.final([output_encoding])</a></li>\n<li><a href=\"#crypto_decipher_setaad_buffer\">decipher.setAAD(buffer)</a></li>\n<li><a href=\"#crypto_decipher_setauthtag_buffer\">decipher.setAuthTag(buffer)</a></li>\n<li><a href=\"#crypto_decipher_setautopadding_auto_padding_true\">decipher.setAutoPadding(auto_padding=true)</a></li>\n<li><a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\">decipher.update(data[, input_encoding][, output_encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_diffiehellman\">Class: DiffieHellman</a><ul>\n<li><a href=\"#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding\">diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_generatekeys_encoding\">diffieHellman.generateKeys([encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_getgenerator_encoding\">diffieHellman.getGenerator([encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_getprime_encoding\">diffieHellman.getPrime([encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_getprivatekey_encoding\">diffieHellman.getPrivateKey([encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_getpublickey_encoding\">diffieHellman.getPublicKey([encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_setprivatekey_private_key_encoding\">diffieHellman.setPrivateKey(private_key[, encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_setpublickey_public_key_encoding\">diffieHellman.setPublicKey(public_key[, encoding])</a></li>\n<li><a href=\"#crypto_diffiehellman_verifyerror\">diffieHellman.verifyError</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_ecdh\">Class: ECDH</a><ul>\n<li><a href=\"#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding\">ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</a></li>\n<li><a href=\"#crypto_ecdh_generatekeys_encoding_format\">ecdh.generateKeys([encoding[, format]])</a></li>\n<li><a href=\"#crypto_ecdh_getprivatekey_encoding\">ecdh.getPrivateKey([encoding])</a></li>\n<li><a href=\"#crypto_ecdh_getpublickey_encoding_format\">ecdh.getPublicKey([encoding[, format]])</a></li>\n<li><a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\">ecdh.setPrivateKey(private_key[, encoding])</a></li>\n<li><a href=\"#crypto_ecdh_setpublickey_public_key_encoding\">ecdh.setPublicKey(public_key[, encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_hash\">Class: Hash</a><ul>\n<li><a href=\"#crypto_hash_digest_encoding\">hash.digest([encoding])</a></li>\n<li><a href=\"#crypto_hash_update_data_input_encoding\">hash.update(data[, input_encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_hmac\">Class: Hmac</a><ul>\n<li><a href=\"#crypto_hmac_digest_encoding\">hmac.digest([encoding])</a></li>\n<li><a href=\"#crypto_hmac_update_data_input_encoding\">hmac.update(data[, input_encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_sign\">Class: Sign</a><ul>\n<li><a href=\"#crypto_sign_sign_private_key_output_format\">sign.sign(private_key[, output_format])</a></li>\n<li><a href=\"#crypto_sign_update_data_input_encoding\">sign.update(data[, input_encoding])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_class_verify\">Class: Verify</a><ul>\n<li><a href=\"#crypto_verifier_update_data_input_encoding\">verifier.update(data[, input_encoding])</a></li>\n<li><a href=\"#crypto_verifier_verify_object_signature_signature_format\">verifier.verify(object, signature[, signature_format])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_crypto_module_methods_and_properties\"><code>crypto</code> module methods and properties</a><ul>\n<li><a href=\"#crypto_crypto_default_encoding\">crypto.DEFAULT_ENCODING</a></li>\n<li><a href=\"#crypto_crypto_fips\">crypto.fips</a></li>\n<li><a href=\"#crypto_crypto_createcipher_algorithm_password\">crypto.createCipher(algorithm, password)</a></li>\n<li><a href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\">crypto.createCipheriv(algorithm, key, iv)</a></li>\n<li><a href=\"#crypto_crypto_createcredentials_details\">crypto.createCredentials(details)</a></li>\n<li><a href=\"#crypto_crypto_createdecipher_algorithm_password\">crypto.createDecipher(algorithm, password)</a></li>\n<li><a href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\">crypto.createDecipheriv(algorithm, key, iv)</a></li>\n<li><a href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\">crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])</a></li>\n<li><a href=\"#crypto_crypto_creatediffiehellman_prime_length_generator\">crypto.createDiffieHellman(prime_length[, generator])</a></li>\n<li><a href=\"#crypto_crypto_createecdh_curve_name\">crypto.createECDH(curve_name)</a></li>\n<li><a href=\"#crypto_crypto_createhash_algorithm\">crypto.createHash(algorithm)</a></li>\n<li><a href=\"#crypto_crypto_createhmac_algorithm_key\">crypto.createHmac(algorithm, key)</a></li>\n<li><a href=\"#crypto_crypto_createsign_algorithm\">crypto.createSign(algorithm)</a></li>\n<li><a href=\"#crypto_crypto_createverify_algorithm\">crypto.createVerify(algorithm)</a></li>\n<li><a href=\"#crypto_crypto_getciphers\">crypto.getCiphers()</a></li>\n<li><a href=\"#crypto_crypto_getcurves\">crypto.getCurves()</a></li>\n<li><a href=\"#crypto_crypto_getdiffiehellman_group_name\">crypto.getDiffieHellman(group_name)</a></li>\n<li><a href=\"#crypto_crypto_gethashes\">crypto.getHashes()</a></li>\n<li><a href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\">crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</a></li>\n<li><a href=\"#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\">crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)</a></li>\n<li><a href=\"#crypto_crypto_privatedecrypt_private_key_buffer\">crypto.privateDecrypt(private_key, buffer)</a></li>\n<li><a href=\"#crypto_crypto_privateencrypt_private_key_buffer\">crypto.privateEncrypt(private_key, buffer)</a></li>\n<li><a href=\"#crypto_crypto_publicdecrypt_public_key_buffer\">crypto.publicDecrypt(public_key, buffer)</a></li>\n<li><a href=\"#crypto_crypto_publicencrypt_public_key_buffer\">crypto.publicEncrypt(public_key, buffer)</a></li>\n<li><a href=\"#crypto_crypto_randombytes_size_callback\">crypto.randomBytes(size[, callback])</a></li>\n<li><a href=\"#crypto_crypto_setengine_engine_flags\">crypto.setEngine(engine[, flags])</a></li>\n</ul>\n</li>\n<li><a href=\"#crypto_notes\">Notes</a><ul>\n<li><a href=\"#crypto_legacy_streams_api_pre_node_js_v0_10\">Legacy Streams API (pre Node.js v0.10)</a></li>\n<li><a href=\"#crypto_recent_ecdh_changes\">Recent ECDH Changes</a></li>\n<li><a href=\"#crypto_support_for_weak_or_compromised_algorithms\">Support for weak or compromised algorithms</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#debugger_debugger\">Debugger</a><ul>\n<li><a href=\"#debugger_watchers\">Watchers</a></li>\n<li><a href=\"#debugger_command_reference\">Command reference</a><ul>\n<li><a href=\"#debugger_stepping\">Stepping</a></li>\n<li><a href=\"#debugger_breakpoints\">Breakpoints</a></li>\n<li><a href=\"#debugger_information\">Information</a></li>\n<li><a href=\"#debugger_execution_control\">Execution control</a></li>\n<li><a href=\"#debugger_various\">Various</a></li>\n</ul>\n</li>\n<li><a href=\"#debugger_advanced_usage\">Advanced Usage</a></li>\n</ul>\n</li>\n<li><a href=\"#dgram_udp_datagram_sockets\">UDP / Datagram Sockets</a><ul>\n<li><a href=\"#dgram_class_dgram_socket\">Class: dgram.Socket</a><ul>\n<li><a href=\"#dgram_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#dgram_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#dgram_event_listening\">Event: &#39;listening&#39;</a></li>\n<li><a href=\"#dgram_event_message\">Event: &#39;message&#39;</a></li>\n<li><a href=\"#dgram_socket_addmembership_multicastaddress_multicastinterface\">socket.addMembership(multicastAddress[, multicastInterface])</a></li>\n<li><a href=\"#dgram_socket_address\">socket.address()</a></li>\n<li><a href=\"#dgram_socket_bind_port_address_callback\">socket.bind([port][, address][, callback])</a></li>\n<li><a href=\"#dgram_socket_bind_options_callback\">socket.bind(options[, callback])</a></li>\n<li><a href=\"#dgram_socket_close_callback\">socket.close([callback])</a></li>\n<li><a href=\"#dgram_socket_dropmembership_multicastaddress_multicastinterface\">socket.dropMembership(multicastAddress[, multicastInterface])</a></li>\n<li><a href=\"#dgram_socket_send_msg_offset_length_port_address_callback\">socket.send(msg, [offset, length,] port, address[, callback])</a></li>\n<li><a href=\"#dgram_socket_setbroadcast_flag\">socket.setBroadcast(flag)</a></li>\n<li><a href=\"#dgram_socket_setmulticastloopback_flag\">socket.setMulticastLoopback(flag)</a></li>\n<li><a href=\"#dgram_socket_setmulticastttl_ttl\">socket.setMulticastTTL(ttl)</a></li>\n<li><a href=\"#dgram_socket_setttl_ttl\">socket.setTTL(ttl)</a></li>\n<li><a href=\"#dgram_socket_ref\">socket.ref()</a></li>\n<li><a href=\"#dgram_socket_unref\">socket.unref()</a></li>\n<li><a href=\"#dgram_change_to_asynchronous_socket_bind_behavior\">Change to asynchronous <code>socket.bind()</code> behavior</a></li>\n</ul>\n</li>\n<li><a href=\"#dgram_dgram_module_functions\"><code>dgram</code> module functions</a><ul>\n<li><a href=\"#dgram_dgram_createsocket_options_callback\">dgram.createSocket(options[, callback])</a></li>\n<li><a href=\"#dgram_dgram_createsocket_type_callback\">dgram.createSocket(type[, callback])</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#dns_dns\">DNS</a><ul>\n<li><a href=\"#dns_dns_getservers\">dns.getServers()</a></li>\n<li><a href=\"#dns_dns_lookup_hostname_options_callback\">dns.lookup(hostname[, options], callback)</a><ul>\n<li><a href=\"#dns_supported_getaddrinfo_flags\">Supported getaddrinfo flags</a></li>\n</ul>\n</li>\n<li><a href=\"#dns_dns_lookupservice_address_port_callback\">dns.lookupService(address, port, callback)</a></li>\n<li><a href=\"#dns_dns_resolve_hostname_rrtype_callback\">dns.resolve(hostname[, rrtype], callback)</a></li>\n<li><a href=\"#dns_dns_resolve4_hostname_callback\">dns.resolve4(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolve6_hostname_callback\">dns.resolve6(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvecname_hostname_callback\">dns.resolveCname(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvemx_hostname_callback\">dns.resolveMx(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvenaptr_hostname_callback\">dns.resolveNaptr(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvens_hostname_callback\">dns.resolveNs(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvesoa_hostname_callback\">dns.resolveSoa(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvesrv_hostname_callback\">dns.resolveSrv(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolveptr_hostname_callback\">dns.resolvePtr(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_resolvetxt_hostname_callback\">dns.resolveTxt(hostname, callback)</a></li>\n<li><a href=\"#dns_dns_reverse_ip_callback\">dns.reverse(ip, callback)</a></li>\n<li><a href=\"#dns_dns_setservers_servers\">dns.setServers(servers)</a></li>\n<li><a href=\"#dns_error_codes\">Error codes</a></li>\n<li><a href=\"#dns_implementation_considerations\">Implementation considerations</a><ul>\n<li><a href=\"#dns_dns_lookup\"><code>dns.lookup()</code></a></li>\n<li><a href=\"#dns_dns_resolve_dns_resolve_and_dns_reverse\"><code>dns.resolve()</code>, <code>dns.resolve*()</code> and <code>dns.reverse()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#domain_domain\">Domain</a><ul>\n<li><a href=\"#domain_warning_don_t_ignore_errors\">Warning: Don&#39;t Ignore Errors!</a></li>\n<li><a href=\"#domain_additions_to_error_objects\">Additions to Error objects</a></li>\n<li><a href=\"#domain_implicit_binding\">Implicit Binding</a></li>\n<li><a href=\"#domain_explicit_binding\">Explicit Binding</a></li>\n<li><a href=\"#domain_domain_create\">domain.create()</a></li>\n<li><a href=\"#domain_class_domain\">Class: Domain</a><ul>\n<li><a href=\"#domain_domain_run_fn_arg\">domain.run(fn[, arg][, ...])</a></li>\n<li><a href=\"#domain_domain_members\">domain.members</a></li>\n<li><a href=\"#domain_domain_add_emitter\">domain.add(emitter)</a></li>\n<li><a href=\"#domain_domain_remove_emitter\">domain.remove(emitter)</a></li>\n<li><a href=\"#domain_domain_bind_callback\">domain.bind(callback)</a><ul>\n<li><a href=\"#domain_example\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#domain_domain_intercept_callback\">domain.intercept(callback)</a><ul>\n<li><a href=\"#domain_example_1\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#domain_domain_enter\">domain.enter()</a></li>\n<li><a href=\"#domain_domain_exit\">domain.exit()</a></li>\n<li><a href=\"#domain_domain_dispose\">domain.dispose()</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#errors_errors\">Errors</a><ul>\n<li><a href=\"#errors_error_propagation_and_interception\">Error Propagation and Interception</a><ul>\n<li><a href=\"#errors_node_js_style_callbacks\">Node.js style callbacks</a></li>\n</ul>\n</li>\n<li><a href=\"#errors_class_error\">Class: Error</a><ul>\n<li><a href=\"#errors_new_error_message\">new Error(message)</a></li>\n<li><a href=\"#errors_error_capturestacktrace_targetobject_constructoropt\">Error.captureStackTrace(targetObject[, constructorOpt])</a></li>\n<li><a href=\"#errors_error_stacktracelimit\">Error.stackTraceLimit</a><ul>\n<li><a href=\"#errors_error_message\">error.message</a></li>\n<li><a href=\"#errors_error_stack\">error.stack</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#errors_class_rangeerror\">Class: RangeError</a></li>\n<li><a href=\"#errors_class_referenceerror\">Class: ReferenceError</a></li>\n<li><a href=\"#errors_class_syntaxerror\">Class: SyntaxError</a></li>\n<li><a href=\"#errors_class_typeerror\">Class: TypeError</a></li>\n<li><a href=\"#errors_exceptions_vs_errors\">Exceptions vs. Errors</a></li>\n<li><a href=\"#errors_system_errors\">System Errors</a><ul>\n<li><a href=\"#errors_class_system_error\">Class: System Error</a><ul>\n<li><a href=\"#errors_error_code\">error.code</a></li>\n<li><a href=\"#errors_error_errno\">error.errno</a></li>\n<li><a href=\"#errors_error_syscall\">error.syscall</a></li>\n</ul>\n</li>\n<li><a href=\"#errors_common_system_errors\">Common System Errors</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#events_events\">Events</a><ul>\n<li><a href=\"#events_passing_arguments_and_this_to_listeners\">Passing arguments and <code>this</code> to listeners</a></li>\n<li><a href=\"#events_asynchronous_vs_synchronous\">Asynchronous vs. Synchronous</a></li>\n<li><a href=\"#events_handling_events_only_once\">Handling events only once</a></li>\n<li><a href=\"#events_error_events\">Error events</a></li>\n<li><a href=\"#events_class_eventemitter\">Class: EventEmitter</a><ul>\n<li><a href=\"#events_event_newlistener\">Event: &#39;newListener&#39;</a></li>\n<li><a href=\"#events_event_removelistener\">Event: &#39;removeListener&#39;</a></li>\n<li><a href=\"#events_eventemitter_listenercount_emitter_eventname\">EventEmitter.listenerCount(emitter, eventName)</a></li>\n<li><a href=\"#events_eventemitter_defaultmaxlisteners\">EventEmitter.defaultMaxListeners</a></li>\n<li><a href=\"#events_emitter_addlistener_eventname_listener\">emitter.addListener(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_emit_eventname_arg1_arg2\">emitter.emit(eventName[, arg1][, arg2][, ...])</a></li>\n<li><a href=\"#events_emitter_eventnames\">emitter.eventNames()</a></li>\n<li><a href=\"#events_emitter_getmaxlisteners\">emitter.getMaxListeners()</a></li>\n<li><a href=\"#events_emitter_listenercount_eventname\">emitter.listenerCount(eventName)</a></li>\n<li><a href=\"#events_emitter_listeners_eventname\">emitter.listeners(eventName)</a></li>\n<li><a href=\"#events_emitter_on_eventname_listener\">emitter.on(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_once_eventname_listener\">emitter.once(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_prependlistener_eventname_listener\">emitter.prependListener(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_prependoncelistener_eventname_listener\">emitter.prependOnceListener(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_removealllisteners_eventname\">emitter.removeAllListeners([eventName])</a></li>\n<li><a href=\"#events_emitter_removelistener_eventname_listener\">emitter.removeListener(eventName, listener)</a></li>\n<li><a href=\"#events_emitter_setmaxlisteners_n\">emitter.setMaxListeners(n)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#fs_file_system\">File System</a><ul>\n<li><a href=\"#fs_buffer_api\">Buffer API</a></li>\n<li><a href=\"#fs_class_fs_fswatcher\">Class: fs.FSWatcher</a><ul>\n<li><a href=\"#fs_event_change\">Event: &#39;change&#39;</a></li>\n<li><a href=\"#fs_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#fs_watcher_close\">watcher.close()</a></li>\n</ul>\n</li>\n<li><a href=\"#fs_class_fs_readstream\">Class: fs.ReadStream</a><ul>\n<li><a href=\"#fs_event_open\">Event: &#39;open&#39;</a></li>\n<li><a href=\"#fs_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#fs_readstream_path\">readStream.path</a></li>\n</ul>\n</li>\n<li><a href=\"#fs_class_fs_stats\">Class: fs.Stats</a><ul>\n<li><a href=\"#fs_stat_time_values\">Stat Time Values</a></li>\n</ul>\n</li>\n<li><a href=\"#fs_class_fs_writestream\">Class: fs.WriteStream</a><ul>\n<li><a href=\"#fs_event_open_1\">Event: &#39;open&#39;</a></li>\n<li><a href=\"#fs_event_close_1\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#fs_writestream_byteswritten\">writeStream.bytesWritten</a></li>\n<li><a href=\"#fs_writestream_path\">writeStream.path</a></li>\n</ul>\n</li>\n<li><a href=\"#fs_fs_access_path_mode_callback\">fs.access(path[, mode], callback)</a></li>\n<li><a href=\"#fs_fs_accesssync_path_mode\">fs.accessSync(path[, mode])</a></li>\n<li><a href=\"#fs_fs_appendfile_file_data_options_callback\">fs.appendFile(file, data[, options], callback)</a></li>\n<li><a href=\"#fs_fs_appendfilesync_file_data_options\">fs.appendFileSync(file, data[, options])</a></li>\n<li><a href=\"#fs_fs_chmod_path_mode_callback\">fs.chmod(path, mode, callback)</a></li>\n<li><a href=\"#fs_fs_chmodsync_path_mode\">fs.chmodSync(path, mode)</a></li>\n<li><a href=\"#fs_fs_chown_path_uid_gid_callback\">fs.chown(path, uid, gid, callback)</a></li>\n<li><a href=\"#fs_fs_chownsync_path_uid_gid\">fs.chownSync(path, uid, gid)</a></li>\n<li><a href=\"#fs_fs_close_fd_callback\">fs.close(fd, callback)</a></li>\n<li><a href=\"#fs_fs_closesync_fd\">fs.closeSync(fd)</a></li>\n<li><a href=\"#fs_fs_createreadstream_path_options\">fs.createReadStream(path[, options])</a></li>\n<li><a href=\"#fs_fs_createwritestream_path_options\">fs.createWriteStream(path[, options])</a></li>\n<li><a href=\"#fs_fs_exists_path_callback\">fs.exists(path, callback)</a></li>\n<li><a href=\"#fs_fs_existssync_path\">fs.existsSync(path)</a></li>\n<li><a href=\"#fs_fs_fchmod_fd_mode_callback\">fs.fchmod(fd, mode, callback)</a></li>\n<li><a href=\"#fs_fs_fchmodsync_fd_mode\">fs.fchmodSync(fd, mode)</a></li>\n<li><a href=\"#fs_fs_fchown_fd_uid_gid_callback\">fs.fchown(fd, uid, gid, callback)</a></li>\n<li><a href=\"#fs_fs_fchownsync_fd_uid_gid\">fs.fchownSync(fd, uid, gid)</a></li>\n<li><a href=\"#fs_fs_fdatasync_fd_callback\">fs.fdatasync(fd, callback)</a></li>\n<li><a href=\"#fs_fs_fdatasyncsync_fd\">fs.fdatasyncSync(fd)</a></li>\n<li><a href=\"#fs_fs_fstat_fd_callback\">fs.fstat(fd, callback)</a></li>\n<li><a href=\"#fs_fs_fstatsync_fd\">fs.fstatSync(fd)</a></li>\n<li><a href=\"#fs_fs_fsync_fd_callback\">fs.fsync(fd, callback)</a></li>\n<li><a href=\"#fs_fs_fsyncsync_fd\">fs.fsyncSync(fd)</a></li>\n<li><a href=\"#fs_fs_ftruncate_fd_len_callback\">fs.ftruncate(fd, len, callback)</a></li>\n<li><a href=\"#fs_fs_ftruncatesync_fd_len\">fs.ftruncateSync(fd, len)</a></li>\n<li><a href=\"#fs_fs_futimes_fd_atime_mtime_callback\">fs.futimes(fd, atime, mtime, callback)</a></li>\n<li><a href=\"#fs_fs_futimessync_fd_atime_mtime\">fs.futimesSync(fd, atime, mtime)</a></li>\n<li><a href=\"#fs_fs_lchmod_path_mode_callback\">fs.lchmod(path, mode, callback)</a></li>\n<li><a href=\"#fs_fs_lchmodsync_path_mode\">fs.lchmodSync(path, mode)</a></li>\n<li><a href=\"#fs_fs_lchown_path_uid_gid_callback\">fs.lchown(path, uid, gid, callback)</a></li>\n<li><a href=\"#fs_fs_lchownsync_path_uid_gid\">fs.lchownSync(path, uid, gid)</a></li>\n<li><a href=\"#fs_fs_link_srcpath_dstpath_callback\">fs.link(srcpath, dstpath, callback)</a></li>\n<li><a href=\"#fs_fs_linksync_srcpath_dstpath\">fs.linkSync(srcpath, dstpath)</a></li>\n<li><a href=\"#fs_fs_lstat_path_callback\">fs.lstat(path, callback)</a></li>\n<li><a href=\"#fs_fs_lstatsync_path\">fs.lstatSync(path)</a></li>\n<li><a href=\"#fs_fs_mkdir_path_mode_callback\">fs.mkdir(path[, mode], callback)</a></li>\n<li><a href=\"#fs_fs_mkdirsync_path_mode\">fs.mkdirSync(path[, mode])</a></li>\n<li><a href=\"#fs_fs_mkdtemp_prefix_callback\">fs.mkdtemp(prefix, callback)</a></li>\n<li><a href=\"#fs_fs_mkdtempsync_prefix\">fs.mkdtempSync(prefix)</a></li>\n<li><a href=\"#fs_fs_open_path_flags_mode_callback\">fs.open(path, flags[, mode], callback)</a></li>\n<li><a href=\"#fs_fs_opensync_path_flags_mode\">fs.openSync(path, flags[, mode])</a></li>\n<li><a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\">fs.read(fd, buffer, offset, length, position, callback)</a></li>\n<li><a href=\"#fs_fs_readdir_path_options_callback\">fs.readdir(path[, options], callback)</a></li>\n<li><a href=\"#fs_fs_readdirsync_path_options\">fs.readdirSync(path[, options])</a></li>\n<li><a href=\"#fs_fs_readfile_file_options_callback\">fs.readFile(file[, options], callback)</a></li>\n<li><a href=\"#fs_fs_readfilesync_file_options\">fs.readFileSync(file[, options])</a></li>\n<li><a href=\"#fs_fs_readlink_path_options_callback\">fs.readlink(path[, options], callback)</a></li>\n<li><a href=\"#fs_fs_readlinksync_path_options\">fs.readlinkSync(path[, options])</a></li>\n<li><a href=\"#fs_fs_readsync_fd_buffer_offset_length_position\">fs.readSync(fd, buffer, offset, length, position)</a></li>\n<li><a href=\"#fs_fs_realpath_path_options_callback\">fs.realpath(path[, options], callback)</a></li>\n<li><a href=\"#fs_fs_realpathsync_path_options\">fs.realpathSync(path[, options])</a></li>\n<li><a href=\"#fs_fs_rename_oldpath_newpath_callback\">fs.rename(oldPath, newPath, callback)</a></li>\n<li><a href=\"#fs_fs_renamesync_oldpath_newpath\">fs.renameSync(oldPath, newPath)</a></li>\n<li><a href=\"#fs_fs_rmdir_path_callback\">fs.rmdir(path, callback)</a></li>\n<li><a href=\"#fs_fs_rmdirsync_path\">fs.rmdirSync(path)</a></li>\n<li><a href=\"#fs_fs_stat_path_callback\">fs.stat(path, callback)</a></li>\n<li><a href=\"#fs_fs_statsync_path\">fs.statSync(path)</a></li>\n<li><a href=\"#fs_fs_symlink_target_path_type_callback\">fs.symlink(target, path[, type], callback)</a></li>\n<li><a href=\"#fs_fs_symlinksync_target_path_type\">fs.symlinkSync(target, path[, type])</a></li>\n<li><a href=\"#fs_fs_truncate_path_len_callback\">fs.truncate(path, len, callback)</a></li>\n<li><a href=\"#fs_fs_truncatesync_path_len\">fs.truncateSync(path, len)</a></li>\n<li><a href=\"#fs_fs_unlink_path_callback\">fs.unlink(path, callback)</a></li>\n<li><a href=\"#fs_fs_unlinksync_path\">fs.unlinkSync(path)</a></li>\n<li><a href=\"#fs_fs_unwatchfile_filename_listener\">fs.unwatchFile(filename[, listener])</a></li>\n<li><a href=\"#fs_fs_utimes_path_atime_mtime_callback\">fs.utimes(path, atime, mtime, callback)</a></li>\n<li><a href=\"#fs_fs_utimessync_path_atime_mtime\">fs.utimesSync(path, atime, mtime)</a></li>\n<li><a href=\"#fs_fs_watch_filename_options_listener\">fs.watch(filename[, options][, listener])</a><ul>\n<li><a href=\"#fs_caveats\">Caveats</a><ul>\n<li><a href=\"#fs_availability\">Availability</a></li>\n<li><a href=\"#fs_inodes\">Inodes</a></li>\n<li><a href=\"#fs_filename_argument\">Filename Argument</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#fs_fs_watchfile_filename_options_listener\">fs.watchFile(filename[, options], listener)</a></li>\n<li><a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\">fs.write(fd, buffer, offset, length[, position], callback)</a></li>\n<li><a href=\"#fs_fs_write_fd_data_position_encoding_callback\">fs.write(fd, data[, position[, encoding]], callback)</a></li>\n<li><a href=\"#fs_fs_writefile_file_data_options_callback\">fs.writeFile(file, data[, options], callback)</a></li>\n<li><a href=\"#fs_fs_writefilesync_file_data_options\">fs.writeFileSync(file, data[, options])</a></li>\n<li><a href=\"#fs_fs_writesync_fd_buffer_offset_length_position\">fs.writeSync(fd, buffer, offset, length[, position])</a></li>\n<li><a href=\"#fs_fs_writesync_fd_data_position_encoding\">fs.writeSync(fd, data[, position[, encoding]])</a></li>\n</ul>\n</li>\n<li><a href=\"#globals_global_objects\">Global Objects</a><ul>\n<li><a href=\"#globals_class_buffer\">Class: Buffer</a></li>\n<li><a href=\"#globals_dirname\">__dirname</a></li>\n<li><a href=\"#globals_filename\">__filename</a></li>\n<li><a href=\"#globals_clearimmediate_immediateobject\">clearImmediate(immediateObject)</a></li>\n<li><a href=\"#globals_clearinterval_intervalobject\">clearInterval(intervalObject)</a></li>\n<li><a href=\"#globals_cleartimeout_timeoutobject\">clearTimeout(timeoutObject)</a></li>\n<li><a href=\"#globals_console\">console</a></li>\n<li><a href=\"#globals_exports\">exports</a></li>\n<li><a href=\"#globals_global\">global</a></li>\n<li><a href=\"#globals_module\">module</a></li>\n<li><a href=\"#globals_process\">process</a></li>\n<li><a href=\"#globals_require\">require()</a><ul>\n<li><a href=\"#globals_require_cache\">require.cache</a></li>\n<li><a href=\"#globals_require_extensions\">require.extensions</a></li>\n<li><a href=\"#globals_require_resolve\">require.resolve()</a></li>\n</ul>\n</li>\n<li><a href=\"#globals_setimmediate_callback_arg\">setImmediate(callback[, arg][, ...])</a></li>\n<li><a href=\"#globals_setinterval_callback_delay_arg\">setInterval(callback, delay[, arg][, ...])</a></li>\n<li><a href=\"#globals_settimeout_callback_delay_arg\">setTimeout(callback, delay[, arg][, ...])</a></li>\n</ul>\n</li>\n<li><a href=\"#http_http\">HTTP</a><ul>\n<li><a href=\"#http_class_http_agent\">Class: http.Agent</a><ul>\n<li><a href=\"#http_new_agent_options\">new Agent([options])</a></li>\n<li><a href=\"#http_agent_createconnection_options_callback\">agent.createConnection(options[, callback])</a></li>\n<li><a href=\"#http_agent_destroy\">agent.destroy()</a></li>\n<li><a href=\"#http_agent_freesockets\">agent.freeSockets</a></li>\n<li><a href=\"#http_agent_getname_options\">agent.getName(options)</a></li>\n<li><a href=\"#http_agent_maxfreesockets\">agent.maxFreeSockets</a></li>\n<li><a href=\"#http_agent_maxsockets\">agent.maxSockets</a></li>\n<li><a href=\"#http_agent_requests\">agent.requests</a></li>\n<li><a href=\"#http_agent_sockets\">agent.sockets</a></li>\n</ul>\n</li>\n<li><a href=\"#http_class_http_clientrequest\">Class: http.ClientRequest</a><ul>\n<li><a href=\"#http_event_abort\">Event: &#39;abort&#39;</a></li>\n<li><a href=\"#http_event_checkexpectation\">Event: &#39;checkExpectation&#39;</a></li>\n<li><a href=\"#http_event_connect\">Event: &#39;connect&#39;</a></li>\n<li><a href=\"#http_event_continue\">Event: &#39;continue&#39;</a></li>\n<li><a href=\"#http_event_response\">Event: &#39;response&#39;</a></li>\n<li><a href=\"#http_event_socket\">Event: &#39;socket&#39;</a></li>\n<li><a href=\"#http_event_upgrade\">Event: &#39;upgrade&#39;</a></li>\n<li><a href=\"#http_request_abort\">request.abort()</a></li>\n<li><a href=\"#http_request_end_data_encoding_callback\">request.end([data][, encoding][, callback])</a></li>\n<li><a href=\"#http_request_flushheaders\">request.flushHeaders()</a></li>\n<li><a href=\"#http_request_setnodelay_nodelay\">request.setNoDelay([noDelay])</a></li>\n<li><a href=\"#http_request_setsocketkeepalive_enable_initialdelay\">request.setSocketKeepAlive([enable][, initialDelay])</a></li>\n<li><a href=\"#http_request_settimeout_timeout_callback\">request.setTimeout(timeout[, callback])</a></li>\n<li><a href=\"#http_request_write_chunk_encoding_callback\">request.write(chunk[, encoding][, callback])</a></li>\n</ul>\n</li>\n<li><a href=\"#http_class_http_server\">Class: http.Server</a><ul>\n<li><a href=\"#http_event_checkcontinue\">Event: &#39;checkContinue&#39;</a></li>\n<li><a href=\"#http_event_clienterror\">Event: &#39;clientError&#39;</a></li>\n<li><a href=\"#http_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#http_event_connect_1\">Event: &#39;connect&#39;</a></li>\n<li><a href=\"#http_event_connection\">Event: &#39;connection&#39;</a></li>\n<li><a href=\"#http_event_request\">Event: &#39;request&#39;</a></li>\n<li><a href=\"#http_event_upgrade_1\">Event: &#39;upgrade&#39;</a></li>\n<li><a href=\"#http_server_close_callback\">server.close([callback])</a></li>\n<li><a href=\"#http_server_listen_handle_callback\">server.listen(handle[, callback])</a></li>\n<li><a href=\"#http_server_listen_path_callback\">server.listen(path[, callback])</a></li>\n<li><a href=\"#http_server_listen_port_hostname_backlog_callback\">server.listen(port[, hostname][, backlog][, callback])</a></li>\n<li><a href=\"#http_server_listening\">server.listening</a></li>\n<li><a href=\"#http_server_maxheaderscount\">server.maxHeadersCount</a></li>\n<li><a href=\"#http_server_settimeout_msecs_callback\">server.setTimeout(msecs, callback)</a></li>\n<li><a href=\"#http_server_timeout\">server.timeout</a></li>\n</ul>\n</li>\n<li><a href=\"#http_class_http_serverresponse\">Class: http.ServerResponse</a><ul>\n<li><a href=\"#http_event_close_1\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#http_event_finish\">Event: &#39;finish&#39;</a></li>\n<li><a href=\"#http_response_addtrailers_headers\">response.addTrailers(headers)</a></li>\n<li><a href=\"#http_response_end_data_encoding_callback\">response.end([data][, encoding][, callback])</a></li>\n<li><a href=\"#http_response_finished\">response.finished</a></li>\n<li><a href=\"#http_response_getheader_name\">response.getHeader(name)</a></li>\n<li><a href=\"#http_response_headerssent\">response.headersSent</a></li>\n<li><a href=\"#http_response_removeheader_name\">response.removeHeader(name)</a></li>\n<li><a href=\"#http_response_senddate\">response.sendDate</a></li>\n<li><a href=\"#http_response_setheader_name_value\">response.setHeader(name, value)</a></li>\n<li><a href=\"#http_response_settimeout_msecs_callback\">response.setTimeout(msecs, callback)</a></li>\n<li><a href=\"#http_response_statuscode\">response.statusCode</a></li>\n<li><a href=\"#http_response_statusmessage\">response.statusMessage</a></li>\n<li><a href=\"#http_response_write_chunk_encoding_callback\">response.write(chunk[, encoding][, callback])</a></li>\n<li><a href=\"#http_response_writecontinue\">response.writeContinue()</a></li>\n<li><a href=\"#http_response_writehead_statuscode_statusmessage_headers\">response.writeHead(statusCode[, statusMessage][, headers])</a></li>\n</ul>\n</li>\n<li><a href=\"#http_class_http_incomingmessage\">Class: http.IncomingMessage</a><ul>\n<li><a href=\"#http_event_close_2\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#http_message_destroy_error\">message.destroy([error])</a></li>\n<li><a href=\"#http_message_headers\">message.headers</a></li>\n<li><a href=\"#http_message_httpversion\">message.httpVersion</a></li>\n<li><a href=\"#http_message_method\">message.method</a></li>\n<li><a href=\"#http_message_rawheaders\">message.rawHeaders</a></li>\n<li><a href=\"#http_message_rawtrailers\">message.rawTrailers</a></li>\n<li><a href=\"#http_message_settimeout_msecs_callback\">message.setTimeout(msecs, callback)</a></li>\n<li><a href=\"#http_message_statuscode\">message.statusCode</a></li>\n<li><a href=\"#http_message_statusmessage\">message.statusMessage</a></li>\n<li><a href=\"#http_message_socket\">message.socket</a></li>\n<li><a href=\"#http_message_trailers\">message.trailers</a></li>\n<li><a href=\"#http_message_url\">message.url</a></li>\n</ul>\n</li>\n<li><a href=\"#http_http_methods\">http.METHODS</a></li>\n<li><a href=\"#http_http_status_codes\">http.STATUS_CODES</a></li>\n<li><a href=\"#http_http_createclient_port_host\">http.createClient([port][, host])</a></li>\n<li><a href=\"#http_http_createserver_requestlistener\">http.createServer([requestListener])</a></li>\n<li><a href=\"#http_http_get_options_callback\">http.get(options[, callback])</a></li>\n<li><a href=\"#http_http_globalagent\">http.globalAgent</a></li>\n<li><a href=\"#http_http_request_options_callback\">http.request(options[, callback])</a></li>\n</ul>\n</li>\n<li><a href=\"#https_https\">HTTPS</a><ul>\n<li><a href=\"#https_class_https_agent\">Class: https.Agent</a></li>\n<li><a href=\"#https_class_https_server\">Class: https.Server</a><ul>\n<li><a href=\"#https_server_settimeout_msecs_callback\">server.setTimeout(msecs, callback)</a></li>\n<li><a href=\"#https_server_timeout\">server.timeout</a></li>\n</ul>\n</li>\n<li><a href=\"#https_https_createserver_options_requestlistener\">https.createServer(options[, requestListener])</a><ul>\n<li><a href=\"#https_server_close_callback\">server.close([callback])</a></li>\n<li><a href=\"#https_server_listen_handle_callback\">server.listen(handle[, callback])</a></li>\n<li><a href=\"#https_server_listen_path_callback\">server.listen(path[, callback])</a></li>\n<li><a href=\"#https_server_listen_port_host_backlog_callback\">server.listen(port[, host][, backlog][, callback])</a></li>\n</ul>\n</li>\n<li><a href=\"#https_https_get_options_callback\">https.get(options, callback)</a></li>\n<li><a href=\"#https_https_globalagent\">https.globalAgent</a></li>\n<li><a href=\"#https_https_request_options_callback\">https.request(options, callback)</a></li>\n</ul>\n</li>\n<li><a href=\"#modules_modules\">Modules</a><ul>\n<li><a href=\"#modules_accessing_the_main_module\">Accessing the main module</a></li>\n<li><a href=\"#modules_addenda_package_manager_tips\">Addenda: Package Manager Tips</a></li>\n<li><a href=\"#modules_all_together\">All Together...</a></li>\n<li><a href=\"#modules_caching\">Caching</a><ul>\n<li><a href=\"#modules_module_caching_caveats\">Module Caching Caveats</a></li>\n</ul>\n</li>\n<li><a href=\"#modules_core_modules\">Core Modules</a></li>\n<li><a href=\"#modules_cycles\">Cycles</a></li>\n<li><a href=\"#modules_file_modules\">File Modules</a></li>\n<li><a href=\"#modules_folders_as_modules\">Folders as Modules</a></li>\n<li><a href=\"#modules_loading_from_node_modules_folders\">Loading from <code>node_modules</code> Folders</a></li>\n<li><a href=\"#modules_loading_from_the_global_folders\">Loading from the global folders</a></li>\n<li><a href=\"#modules_the_module_wrapper\">The module wrapper</a></li>\n<li><a href=\"#modules_the_module_object\">The <code>module</code> Object</a><ul>\n<li><a href=\"#modules_module_children\">module.children</a></li>\n<li><a href=\"#modules_module_exports\">module.exports</a><ul>\n<li><a href=\"#modules_exports_alias\">exports alias</a></li>\n</ul>\n</li>\n<li><a href=\"#modules_module_filename\">module.filename</a></li>\n<li><a href=\"#modules_module_id\">module.id</a></li>\n<li><a href=\"#modules_module_loaded\">module.loaded</a></li>\n<li><a href=\"#modules_module_parent\">module.parent</a></li>\n<li><a href=\"#modules_module_require_id\">module.require(id)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#net_net\">net</a><ul>\n<li><a href=\"#net_class_net_server\">Class: net.Server</a><ul>\n<li><a href=\"#net_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#net_event_connection\">Event: &#39;connection&#39;</a></li>\n<li><a href=\"#net_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#net_event_listening\">Event: &#39;listening&#39;</a></li>\n<li><a href=\"#net_server_address\">server.address()</a></li>\n<li><a href=\"#net_server_close_callback\">server.close([callback])</a></li>\n<li><a href=\"#net_server_connections\">server.connections</a></li>\n<li><a href=\"#net_server_getconnections_callback\">server.getConnections(callback)</a></li>\n<li><a href=\"#net_server_listen_handle_backlog_callback\">server.listen(handle[, backlog][, callback])</a></li>\n<li><a href=\"#net_server_listen_options_callback\">server.listen(options[, callback])</a></li>\n<li><a href=\"#net_server_listen_path_backlog_callback\">server.listen(path[, backlog][, callback])</a></li>\n<li><a href=\"#net_server_listen_port_hostname_backlog_callback\">server.listen(port[, hostname][, backlog][, callback])</a></li>\n<li><a href=\"#net_server_listening\">server.listening</a></li>\n<li><a href=\"#net_server_maxconnections\">server.maxConnections</a></li>\n<li><a href=\"#net_server_ref\">server.ref()</a></li>\n<li><a href=\"#net_server_unref\">server.unref()</a></li>\n</ul>\n</li>\n<li><a href=\"#net_class_net_socket\">Class: net.Socket</a><ul>\n<li><a href=\"#net_new_net_socket_options\">new net.Socket([options])</a></li>\n<li><a href=\"#net_event_close_1\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#net_event_connect\">Event: &#39;connect&#39;</a></li>\n<li><a href=\"#net_event_data\">Event: &#39;data&#39;</a></li>\n<li><a href=\"#net_event_drain\">Event: &#39;drain&#39;</a></li>\n<li><a href=\"#net_event_end\">Event: &#39;end&#39;</a></li>\n<li><a href=\"#net_event_error_1\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#net_event_lookup\">Event: &#39;lookup&#39;</a></li>\n<li><a href=\"#net_event_timeout\">Event: &#39;timeout&#39;</a></li>\n<li><a href=\"#net_socket_address\">socket.address()</a></li>\n<li><a href=\"#net_socket_buffersize\">socket.bufferSize</a></li>\n<li><a href=\"#net_socket_bytesread\">socket.bytesRead</a></li>\n<li><a href=\"#net_socket_byteswritten\">socket.bytesWritten</a></li>\n<li><a href=\"#net_socket_connect_options_connectlistener\">socket.connect(options[, connectListener])</a></li>\n<li><a href=\"#net_socket_connect_path_connectlistener\">socket.connect(path[, connectListener])</a></li>\n<li><a href=\"#net_socket_connect_port_host_connectlistener\">socket.connect(port[, host][, connectListener])</a></li>\n<li><a href=\"#net_socket_connecting\">socket.connecting</a></li>\n<li><a href=\"#net_socket_destroy\">socket.destroy()</a></li>\n<li><a href=\"#net_socket_end_data_encoding\">socket.end([data][, encoding])</a></li>\n<li><a href=\"#net_socket_localaddress\">socket.localAddress</a></li>\n<li><a href=\"#net_socket_localport\">socket.localPort</a></li>\n<li><a href=\"#net_socket_pause\">socket.pause()</a></li>\n<li><a href=\"#net_socket_ref\">socket.ref()</a></li>\n<li><a href=\"#net_socket_remoteaddress\">socket.remoteAddress</a></li>\n<li><a href=\"#net_socket_remotefamily\">socket.remoteFamily</a></li>\n<li><a href=\"#net_socket_remoteport\">socket.remotePort</a></li>\n<li><a href=\"#net_socket_resume\">socket.resume()</a></li>\n<li><a href=\"#net_socket_setencoding_encoding\">socket.setEncoding([encoding])</a></li>\n<li><a href=\"#net_socket_setkeepalive_enable_initialdelay\">socket.setKeepAlive([enable][, initialDelay])</a></li>\n<li><a href=\"#net_socket_setnodelay_nodelay\">socket.setNoDelay([noDelay])</a></li>\n<li><a href=\"#net_socket_settimeout_timeout_callback\">socket.setTimeout(timeout[, callback])</a></li>\n<li><a href=\"#net_socket_unref\">socket.unref()</a></li>\n<li><a href=\"#net_socket_write_data_encoding_callback\">socket.write(data[, encoding][, callback])</a></li>\n</ul>\n</li>\n<li><a href=\"#net_net_connect_options_connectlistener\">net.connect(options[, connectListener])</a></li>\n<li><a href=\"#net_net_connect_path_connectlistener\">net.connect(path[, connectListener])</a></li>\n<li><a href=\"#net_net_connect_port_host_connectlistener\">net.connect(port[, host][, connectListener])</a></li>\n<li><a href=\"#net_net_createconnection_options_connectlistener\">net.createConnection(options[, connectListener])</a></li>\n<li><a href=\"#net_net_createconnection_path_connectlistener\">net.createConnection(path[, connectListener])</a></li>\n<li><a href=\"#net_net_createconnection_port_host_connectlistener\">net.createConnection(port[, host][, connectListener])</a></li>\n<li><a href=\"#net_net_createserver_options_connectionlistener\">net.createServer([options][, connectionListener])</a></li>\n<li><a href=\"#net_net_isip_input\">net.isIP(input)</a></li>\n<li><a href=\"#net_net_isipv4_input\">net.isIPv4(input)</a></li>\n<li><a href=\"#net_net_isipv6_input\">net.isIPv6(input)</a></li>\n</ul>\n</li>\n<li><a href=\"#os_os\">OS</a><ul>\n<li><a href=\"#os_os_eol\">os.EOL</a></li>\n<li><a href=\"#os_os_arch\">os.arch()</a></li>\n<li><a href=\"#os_os_cpus\">os.cpus()</a></li>\n<li><a href=\"#os_os_endianness\">os.endianness()</a></li>\n<li><a href=\"#os_os_freemem\">os.freemem()</a></li>\n<li><a href=\"#os_os_homedir\">os.homedir()</a></li>\n<li><a href=\"#os_os_hostname\">os.hostname()</a></li>\n<li><a href=\"#os_os_loadavg\">os.loadavg()</a></li>\n<li><a href=\"#os_os_networkinterfaces\">os.networkInterfaces()</a></li>\n<li><a href=\"#os_os_platform\">os.platform()</a></li>\n<li><a href=\"#os_os_release\">os.release()</a></li>\n<li><a href=\"#os_os_tmpdir\">os.tmpdir()</a></li>\n<li><a href=\"#os_os_totalmem\">os.totalmem()</a></li>\n<li><a href=\"#os_os_type\">os.type()</a></li>\n<li><a href=\"#os_os_uptime\">os.uptime()</a></li>\n<li><a href=\"#os_os_userinfo_options\">os.userInfo([options])</a></li>\n</ul>\n</li>\n<li><a href=\"#path_path\">Path</a><ul>\n<li><a href=\"#path_windows_vs_posix\">Windows vs. POSIX</a></li>\n<li><a href=\"#path_path_basename_path_ext\">path.basename(path[, ext])</a></li>\n<li><a href=\"#path_path_delimiter\">path.delimiter</a></li>\n<li><a href=\"#path_path_dirname_path\">path.dirname(path)</a></li>\n<li><a href=\"#path_path_extname_path\">path.extname(path)</a></li>\n<li><a href=\"#path_path_format_pathobject\">path.format(pathObject)</a></li>\n<li><a href=\"#path_path_isabsolute_path\">path.isAbsolute(path)</a></li>\n<li><a href=\"#path_path_join_path\">path.join([path[, ...]])</a></li>\n<li><a href=\"#path_path_normalize_path\">path.normalize(path)</a></li>\n<li><a href=\"#path_path_parse_path\">path.parse(path)</a></li>\n<li><a href=\"#path_path_posix\">path.posix</a></li>\n<li><a href=\"#path_path_relative_from_to\">path.relative(from, to)</a></li>\n<li><a href=\"#path_path_resolve_path\">path.resolve([path[, ...]])</a></li>\n<li><a href=\"#path_path_sep\">path.sep</a></li>\n<li><a href=\"#path_path_win32\">path.win32</a></li>\n</ul>\n</li>\n<li><a href=\"#process_process\">process</a><ul>\n<li><a href=\"#process_process_events\">Process Events</a><ul>\n<li><a href=\"#process_event_beforeexit\">Event: &#39;beforeExit&#39;</a></li>\n<li><a href=\"#process_event_disconnect\">Event: &#39;disconnect&#39;</a></li>\n<li><a href=\"#process_event_exit\">Event: &#39;exit&#39;</a></li>\n<li><a href=\"#process_event_message\">Event: &#39;message&#39;</a></li>\n<li><a href=\"#process_event_rejectionhandled\">Event: &#39;rejectionHandled&#39;</a></li>\n<li><a href=\"#process_event_uncaughtexception\">Event: &#39;uncaughtException&#39;</a><ul>\n<li><a href=\"#process_warning_using_uncaughtexception_correctly\">Warning: Using <code>&#39;uncaughtException&#39;</code> correctly</a></li>\n</ul>\n</li>\n<li><a href=\"#process_event_unhandledrejection\">Event: &#39;unhandledRejection&#39;</a></li>\n<li><a href=\"#process_event_warning\">Event: &#39;warning&#39;</a><ul>\n<li><a href=\"#process_emitting_custom_warnings\">Emitting custom warnings</a></li>\n<li><a href=\"#process_emitting_custom_deprecation_warnings\">Emitting custom deprecation warnings</a></li>\n</ul>\n</li>\n<li><a href=\"#process_signal_events\">Signal Events</a></li>\n</ul>\n</li>\n<li><a href=\"#process_process_abort\">process.abort()</a></li>\n<li><a href=\"#process_process_arch\">process.arch</a></li>\n<li><a href=\"#process_process_argv\">process.argv</a></li>\n<li><a href=\"#process_process_chdir_directory\">process.chdir(directory)</a></li>\n<li><a href=\"#process_process_config\">process.config</a></li>\n<li><a href=\"#process_process_connected\">process.connected</a></li>\n<li><a href=\"#process_process_cpuusage_previousvalue\">process.cpuUsage([previousValue])</a></li>\n<li><a href=\"#process_process_cwd\">process.cwd()</a></li>\n<li><a href=\"#process_process_disconnect\">process.disconnect()</a></li>\n<li><a href=\"#process_process_env\">process.env</a></li>\n<li><a href=\"#process_process_emitwarning_warning_name_ctor\">process.emitWarning(warning[, name][, ctor])</a><ul>\n<li><a href=\"#process_avoiding_duplicate_warnings\">Avoiding duplicate warnings</a></li>\n</ul>\n</li>\n<li><a href=\"#process_process_execargv\">process.execArgv</a></li>\n<li><a href=\"#process_process_execpath\">process.execPath</a></li>\n<li><a href=\"#process_process_exit_code\">process.exit([code])</a></li>\n<li><a href=\"#process_process_exitcode\">process.exitCode</a></li>\n<li><a href=\"#process_process_getegid\">process.getegid()</a></li>\n<li><a href=\"#process_process_geteuid\">process.geteuid()</a></li>\n<li><a href=\"#process_process_getgid\">process.getgid()</a></li>\n<li><a href=\"#process_process_getgroups\">process.getgroups()</a></li>\n<li><a href=\"#process_process_getuid\">process.getuid()</a></li>\n<li><a href=\"#process_process_hrtime_time\">process.hrtime([time])</a></li>\n<li><a href=\"#process_process_initgroups_user_extra_group\">process.initgroups(user, extra_group)</a></li>\n<li><a href=\"#process_process_kill_pid_signal\">process.kill(pid[, signal])</a></li>\n<li><a href=\"#process_process_mainmodule\">process.mainModule</a></li>\n<li><a href=\"#process_process_memoryusage\">process.memoryUsage()</a></li>\n<li><a href=\"#process_process_nexttick_callback_arg\">process.nextTick(callback[, arg][, ...])</a></li>\n<li><a href=\"#process_process_pid\">process.pid</a></li>\n<li><a href=\"#process_process_platform\">process.platform</a></li>\n<li><a href=\"#process_process_release\">process.release</a></li>\n<li><a href=\"#process_process_send_message_sendhandle_options_callback\">process.send(message[, sendHandle[, options]][, callback])</a></li>\n<li><a href=\"#process_process_setegid_id\">process.setegid(id)</a></li>\n<li><a href=\"#process_process_seteuid_id\">process.seteuid(id)</a></li>\n<li><a href=\"#process_process_setgid_id\">process.setgid(id)</a></li>\n<li><a href=\"#process_process_setgroups_groups\">process.setgroups(groups)</a></li>\n<li><a href=\"#process_process_setuid_id\">process.setuid(id)</a></li>\n<li><a href=\"#process_process_stderr\">process.stderr</a></li>\n<li><a href=\"#process_process_stdin\">process.stdin</a></li>\n<li><a href=\"#process_process_stdout\">process.stdout</a><ul>\n<li><a href=\"#process_tty_terminals_and_process_stdout\">TTY Terminals and <code>process.stdout</code></a></li>\n</ul>\n</li>\n<li><a href=\"#process_process_title\">process.title</a></li>\n<li><a href=\"#process_process_umask_mask\">process.umask([mask])</a></li>\n<li><a href=\"#process_process_uptime\">process.uptime()</a></li>\n<li><a href=\"#process_process_version\">process.version</a></li>\n<li><a href=\"#process_process_versions\">process.versions</a></li>\n<li><a href=\"#process_exit_codes\">Exit Codes</a></li>\n</ul>\n</li>\n<li><a href=\"#punycode_punycode\">punycode</a><ul>\n<li><a href=\"#punycode_punycode_decode_string\">punycode.decode(string)</a></li>\n<li><a href=\"#punycode_punycode_encode_string\">punycode.encode(string)</a></li>\n<li><a href=\"#punycode_punycode_toascii_domain\">punycode.toASCII(domain)</a></li>\n<li><a href=\"#punycode_punycode_tounicode_domain\">punycode.toUnicode(domain)</a></li>\n<li><a href=\"#punycode_punycode_ucs2\">punycode.ucs2</a><ul>\n<li><a href=\"#punycode_punycode_ucs2_decode_string\">punycode.ucs2.decode(string)</a></li>\n<li><a href=\"#punycode_punycode_ucs2_encode_codepoints\">punycode.ucs2.encode(codePoints)</a></li>\n</ul>\n</li>\n<li><a href=\"#punycode_punycode_version\">punycode.version</a></li>\n</ul>\n</li>\n<li><a href=\"#querystring_query_string\">Query String</a><ul>\n<li><a href=\"#querystring_querystring_escape_str\">querystring.escape(str)</a></li>\n<li><a href=\"#querystring_querystring_parse_str_sep_eq_options\">querystring.parse(str[, sep[, eq[, options]]])</a></li>\n<li><a href=\"#querystring_querystring_stringify_obj_sep_eq_options\">querystring.stringify(obj[, sep[, eq[, options]]])</a></li>\n<li><a href=\"#querystring_querystring_unescape_str\">querystring.unescape(str)</a></li>\n</ul>\n</li>\n<li><a href=\"#readline_readline\">Readline</a><ul>\n<li><a href=\"#readline_class_interface\">Class: Interface</a><ul>\n<li><a href=\"#readline_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#readline_event_line\">Event: &#39;line&#39;</a></li>\n<li><a href=\"#readline_event_pause\">Event: &#39;pause&#39;</a></li>\n<li><a href=\"#readline_event_resume\">Event: &#39;resume&#39;</a></li>\n<li><a href=\"#readline_event_sigcont\">Event: &#39;SIGCONT&#39;</a></li>\n<li><a href=\"#readline_event_sigint\">Event: &#39;SIGINT&#39;</a></li>\n<li><a href=\"#readline_event_sigtstp\">Event: &#39;SIGTSTP&#39;</a></li>\n<li><a href=\"#readline_rl_close\">rl.close()</a></li>\n<li><a href=\"#readline_rl_pause\">rl.pause()</a></li>\n<li><a href=\"#readline_rl_prompt_preservecursor\">rl.prompt([preserveCursor])</a></li>\n<li><a href=\"#readline_rl_question_query_callback\">rl.question(query, callback)</a></li>\n<li><a href=\"#readline_rl_resume\">rl.resume()</a></li>\n<li><a href=\"#readline_rl_setprompt_prompt\">rl.setPrompt(prompt)</a></li>\n<li><a href=\"#readline_rl_write_data_key\">rl.write(data[, key])</a></li>\n</ul>\n</li>\n<li><a href=\"#readline_readline_clearline_stream_dir\">readline.clearLine(stream, dir)</a></li>\n<li><a href=\"#readline_readline_clearscreendown_stream\">readline.clearScreenDown(stream)</a></li>\n<li><a href=\"#readline_readline_createinterface_options\">readline.createInterface(options)</a><ul>\n<li><a href=\"#readline_use_of_the_completer_function\">Use of the <code>completer</code> Function</a></li>\n</ul>\n</li>\n<li><a href=\"#readline_readline_cursorto_stream_x_y\">readline.cursorTo(stream, x, y)</a></li>\n<li><a href=\"#readline_readline_emitkeypressevents_stream_interface\">readline.emitKeypressEvents(stream[, interface])</a></li>\n<li><a href=\"#readline_readline_movecursor_stream_dx_dy\">readline.moveCursor(stream, dx, dy)</a></li>\n<li><a href=\"#readline_example_tiny_cli\">Example: Tiny CLI</a></li>\n<li><a href=\"#readline_example_read_file_stream_line_by_line\">Example: Read File Stream Line-by-Line</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_repl\">REPL</a><ul>\n<li><a href=\"#repl_design_and_features\">Design and Features</a><ul>\n<li><a href=\"#repl_commands_and_special_keys\">Commands and Special Keys</a></li>\n<li><a href=\"#repl_default_evaluation\">Default Evaluation</a><ul>\n<li><a href=\"#repl_javascript_expressions\">JavaScript Expressions</a></li>\n<li><a href=\"#repl_global_and_local_scope\">Global and Local Scope</a></li>\n<li><a href=\"#repl_accessing_core_node_js_modules\">Accessing Core Node.js Modules</a></li>\n<li><a href=\"#repl_assignment_of_the_underscore_variable\">Assignment of the <code>_</code> (underscore) variable</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_custom_evaluation_functions\">Custom Evaluation Functions</a><ul>\n<li><a href=\"#repl_recoverable_errors\">Recoverable Errors</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_customizing_repl_output\">Customizing REPL Output</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_class_replserver\">Class: REPLServer</a><ul>\n<li><a href=\"#repl_event_exit\">Event: &#39;exit&#39;</a></li>\n<li><a href=\"#repl_event_reset\">Event: &#39;reset&#39;</a></li>\n<li><a href=\"#repl_replserver_definecommand_keyword_cmd\">replServer.defineCommand(keyword, cmd)</a></li>\n<li><a href=\"#repl_replserver_displayprompt_preservecursor\">replServer.displayPrompt([preserveCursor])</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_repl_start_options\">repl.start([options])</a></li>\n<li><a href=\"#repl_the_node_js_repl\">The Node.js REPL</a><ul>\n<li><a href=\"#repl_environment_variable_options\">Environment Variable Options</a></li>\n<li><a href=\"#repl_persistent_history\">Persistent History</a><ul>\n<li><a href=\"#repl_node_repl_history_file\">NODE_REPL_HISTORY_FILE</a></li>\n</ul>\n</li>\n<li><a href=\"#repl_using_the_node_js_repl_with_advanced_line_editors\">Using the Node.js REPL with advanced line-editors</a></li>\n<li><a href=\"#repl_starting_multiple_repl_instances_against_a_single_running_instance\">Starting multiple REPL instances against a single running instance</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#stream_stream\">Stream</a><ul>\n<li><a href=\"#stream_organization_of_this_document\">Organization of this document</a></li>\n<li><a href=\"#stream_types_of_streams\">Types of Streams</a><ul>\n<li><a href=\"#stream_object_mode\">Object Mode</a></li>\n<li><a href=\"#stream_buffering\">Buffering</a></li>\n</ul>\n</li>\n<li><a href=\"#stream_api_for_stream_consumers\">API for Stream Consumers</a><ul>\n<li><a href=\"#stream_writable_streams\">Writable Streams</a><ul>\n<li><a href=\"#stream_class_stream_writable\">Class: stream.Writable</a><ul>\n<li><a href=\"#stream_event_close\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#stream_event_drain\">Event: &#39;drain&#39;</a></li>\n<li><a href=\"#stream_event_error\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#stream_event_finish\">Event: &#39;finish&#39;</a></li>\n<li><a href=\"#stream_event_pipe\">Event: &#39;pipe&#39;</a></li>\n<li><a href=\"#stream_event_unpipe\">Event: &#39;unpipe&#39;</a></li>\n<li><a href=\"#stream_writable_cork\">writable.cork()</a></li>\n<li><a href=\"#stream_writable_end_chunk_encoding_callback\">writable.end([chunk][, encoding][, callback])</a></li>\n<li><a href=\"#stream_writable_setdefaultencoding_encoding\">writable.setDefaultEncoding(encoding)</a></li>\n<li><a href=\"#stream_writable_uncork\">writable.uncork()</a></li>\n<li><a href=\"#stream_writable_write_chunk_encoding_callback\">writable.write(chunk[, encoding][, callback])</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#stream_readable_streams\">Readable Streams</a><ul>\n<li><a href=\"#stream_two_modes\">Two Modes</a></li>\n<li><a href=\"#stream_three_states\">Three States</a></li>\n<li><a href=\"#stream_choose_one\">Choose One</a></li>\n<li><a href=\"#stream_class_stream_readable\">Class: stream.Readable</a><ul>\n<li><a href=\"#stream_event_close_1\">Event: &#39;close&#39;</a></li>\n<li><a href=\"#stream_event_data\">Event: &#39;data&#39;</a></li>\n<li><a href=\"#stream_event_end\">Event: &#39;end&#39;</a></li>\n<li><a href=\"#stream_event_error_1\">Event: &#39;error&#39;</a></li>\n<li><a href=\"#stream_event_readable\">Event: &#39;readable&#39;</a></li>\n<li><a href=\"#stream_readable_ispaused\">readable.isPaused()</a></li>\n<li><a href=\"#stream_readable_pause\">readable.pause()</a></li>\n<li><a href=\"#stream_readable_pipe_destination_options\">readable.pipe(destination[, options])</a></li>\n<li><a href=\"#stream_readable_read_size\">readable.read([size])</a></li>\n<li><a href=\"#stream_readable_resume\">readable.resume()</a></li>\n<li><a href=\"#stream_readable_setencoding_encoding\">readable.setEncoding(encoding)</a></li>\n<li><a href=\"#stream_readable_unpipe_destination\">readable.unpipe([destination])</a></li>\n<li><a href=\"#stream_readable_unshift_chunk\">readable.unshift(chunk)</a></li>\n<li><a href=\"#stream_readable_wrap_stream\">readable.wrap(stream)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#stream_duplex_and_transform_streams\">Duplex and Transform Streams</a><ul>\n<li><a href=\"#stream_class_stream_duplex\">Class: stream.Duplex</a></li>\n<li><a href=\"#stream_class_stream_transform\">Class: stream.Transform</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#stream_api_for_stream_implemeters\">API for Stream Implemeters</a><ul>\n<li><a href=\"#stream_simplified_construction\">Simplified Construction</a></li>\n<li><a href=\"#stream_implementing_a_writable_stream\">Implementing a Writable Stream</a><ul>\n<li><a href=\"#stream_constructor_new_stream_writable_options\">Constructor: new stream.Writable([options])</a></li>\n<li><a href=\"#stream_writable_write_chunk_encoding_callback_1\">writable._write(chunk, encoding, callback)</a></li>\n<li><a href=\"#stream_writable_writev_chunks_callback\">writable._writev(chunks, callback)</a></li>\n<li><a href=\"#stream_errors_while_writing\">Errors While Writing</a></li>\n<li><a href=\"#stream_an_example_writable_stream\">An Example Writable Stream</a></li>\n</ul>\n</li>\n<li><a href=\"#stream_implementing_a_readable_stream\">Implementing a Readable Stream</a><ul>\n<li><a href=\"#stream_new_stream_readable_options\">new stream.Readable([options])</a></li>\n<li><a href=\"#stream_readable_read_size_1\">readable._read(size)</a></li>\n<li><a href=\"#stream_readable_push_chunk_encoding\">readable.push(chunk[, encoding])</a></li>\n<li><a href=\"#stream_errors_while_reading\">Errors While Reading</a></li>\n<li><a href=\"#stream_an_example_counting_stream\">An Example Counting Stream</a></li>\n</ul>\n</li>\n<li><a href=\"#stream_implementing_a_duplex_stream\">Implementing a Duplex Stream</a><ul>\n<li><a href=\"#stream_new_stream_duplex_options\">new stream.Duplex(options)</a></li>\n<li><a href=\"#stream_an_example_duplex_stream\">An Example Duplex Stream</a></li>\n<li><a href=\"#stream_object_mode_duplex_streams\">Object Mode Duplex Streams</a></li>\n</ul>\n</li>\n<li><a href=\"#stream_implementing_a_transform_stream\">Implementing a Transform Stream</a><ul>\n<li><a href=\"#stream_new_stream_transform_options\">new stream.Transform([options])</a></li>\n<li><a href=\"#stream_events_finish_and_end\">Events: &#39;finish&#39; and &#39;end&#39;</a></li>\n<li><a href=\"#stream_transform_flush_callback\">transform._flush(callback)</a></li>\n<li><a href=\"#stream_transform_transform_chunk_encoding_callback\">transform._transform(chunk, encoding, callback)</a></li>\n<li><a href=\"#stream_class_stream_passthrough\">Class: stream.PassThrough</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#stream_additional_notes\">Additional Notes</a><ul>\n<li><a href=\"#stream_compatibility_with_older_node_js_versions\">Compatibility with Older Node.js Versions</a></li>\n<li><a href=\"#stream_readable_read_0\"><code>readable.read(0)</code></a></li>\n<li><a href=\"#stream_readable_push\"><code>readable.push(&#39;&#39;)</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#string_decoder_stringdecoder\">StringDecoder</a><ul>\n<li><a href=\"#string_decoder_class_new_stringdecoder_encoding\">Class: new StringDecoder([encoding])</a><ul>\n<li><a href=\"#string_decoder_stringdecoder_end_buffer\">stringDecoder.end([buffer])</a></li>\n<li><a href=\"#string_decoder_stringdecoder_write_buffer\">stringDecoder.write(buffer)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#timers_timers\">Timers</a><ul>\n<li><a href=\"#timers_clearimmediate_immediateobject\">clearImmediate(immediateObject)</a></li>\n<li><a href=\"#timers_clearinterval_intervalobject\">clearInterval(intervalObject)</a></li>\n<li><a href=\"#timers_cleartimeout_timeoutobject\">clearTimeout(timeoutObject)</a></li>\n<li><a href=\"#timers_ref\">ref()</a></li>\n<li><a href=\"#timers_setimmediate_callback_arg\">setImmediate(callback[, arg][, ...])</a></li>\n<li><a href=\"#timers_setinterval_callback_delay_arg\">setInterval(callback, delay[, arg][, ...])</a></li>\n<li><a href=\"#timers_settimeout_callback_delay_arg\">setTimeout(callback, delay[, arg][, ...])</a></li>\n<li><a href=\"#timers_unref\">unref()</a></li>\n</ul>\n</li>\n<li><a href=\"#tls_tls_ssl\">TLS (SSL)</a><ul>\n<li><a href=\"#tls_tls_ssl_concepts\">TLS/SSL Concepts</a><ul>\n<li><a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a></li>\n<li><a href=\"#tls_alpn_npn_and_sni\">ALPN, NPN and SNI</a></li>\n<li><a href=\"#tls_client_initiated_renegotiation_attack_mitigation\">Client-initiated renegotiation attack mitigation</a></li>\n</ul>\n</li>\n<li><a href=\"#tls_modifying_the_default_tls_cipher_suite\">Modifying the Default TLS Cipher suite</a></li>\n<li><a href=\"#tls_class_tls_server\">Class: tls.Server</a><ul>\n<li><a href=\"#tls_event_tlsclienterror\">Event: &#39;tlsClientError&#39;</a></li>\n<li><a href=\"#tls_event_newsession\">Event: &#39;newSession&#39;</a></li>\n<li><a href=\"#tls_event_ocsprequest\">Event: &#39;OCSPRequest&#39;</a></li>\n<li><a href=\"#tls_event_resumesession\">Event: &#39;resumeSession&#39;</a></li>\n<li><a href=\"#tls_event_secureconnection\">Event: &#39;secureConnection&#39;</a></li>\n<li><a href=\"#tls_server_addcontext_hostname_context\">server.addContext(hostname, context)</a></li>\n<li><a href=\"#tls_server_address\">server.address()</a></li>\n<li><a href=\"#tls_server_close_callback\">server.close([callback])</a></li>\n<li><a href=\"#tls_server_connections\">server.connections</a></li>\n<li><a href=\"#tls_server_getticketkeys\">server.getTicketKeys()</a></li>\n<li><a href=\"#tls_server_listen_port_hostname_callback\">server.listen(port[, hostname][, callback])</a></li>\n<li><a href=\"#tls_server_setticketkeys_keys\">server.setTicketKeys(keys)</a></li>\n</ul>\n</li>\n<li><a href=\"#tls_class_tls_tlssocket\">Class: tls.TLSSocket</a><ul>\n<li><a href=\"#tls_new_tls_tlssocket_socket_options\">new tls.TLSSocket(socket[, options])</a></li>\n<li><a href=\"#tls_event_ocspresponse\">Event: &#39;OCSPResponse&#39;</a></li>\n<li><a href=\"#tls_event_secureconnect\">Event: &#39;secureConnect&#39;</a></li>\n<li><a href=\"#tls_tlssocket_address\">tlsSocket.address()</a></li>\n<li><a href=\"#tls_tlssocket_authorized\">tlsSocket.authorized</a></li>\n<li><a href=\"#tls_tlssocket_authorizationerror\">tlsSocket.authorizationError</a></li>\n<li><a href=\"#tls_tlssocket_encrypted\">tlsSocket.encrypted</a></li>\n<li><a href=\"#tls_tlssocket_getcipher\">tlsSocket.getCipher()</a></li>\n<li><a href=\"#tls_tlssocket_getephemeralkeyinfo\">tlsSocket.getEphemeralKeyInfo()</a></li>\n<li><a href=\"#tls_tlssocket_getpeercertificate_detailed\">tlsSocket.getPeerCertificate([ detailed ])</a></li>\n<li><a href=\"#tls_tlssocket_getprotocol\">tlsSocket.getProtocol()</a></li>\n<li><a href=\"#tls_tlssocket_getsession\">tlsSocket.getSession()</a></li>\n<li><a href=\"#tls_tlssocket_gettlsticket\">tlsSocket.getTLSTicket()</a></li>\n<li><a href=\"#tls_tlssocket_localaddress\">tlsSocket.localAddress</a></li>\n<li><a href=\"#tls_tlssocket_localport\">tlsSocket.localPort</a></li>\n<li><a href=\"#tls_tlssocket_remoteaddress\">tlsSocket.remoteAddress</a></li>\n<li><a href=\"#tls_tlssocket_remotefamily\">tlsSocket.remoteFamily</a></li>\n<li><a href=\"#tls_tlssocket_remoteport\">tlsSocket.remotePort</a></li>\n<li><a href=\"#tls_tlssocket_renegotiate_options_callback\">tlsSocket.renegotiate(options, callback)</a></li>\n<li><a href=\"#tls_tlssocket_setmaxsendfragment_size\">tlsSocket.setMaxSendFragment(size)</a></li>\n</ul>\n</li>\n<li><a href=\"#tls_tls_connect_options_callback\">tls.connect(options[, callback])</a></li>\n<li><a href=\"#tls_tls_connect_port_host_options_callback\">tls.connect(port[, host][, options][, callback])</a></li>\n<li><a href=\"#tls_tls_createsecurecontext_options\">tls.createSecureContext(options)</a></li>\n<li><a href=\"#tls_tls_createserver_options_secureconnectionlistener\">tls.createServer(options[, secureConnectionListener])</a></li>\n<li><a href=\"#tls_tls_getciphers\">tls.getCiphers()</a></li>\n<li><a href=\"#tls_deprecated_apis\">Deprecated APIs</a><ul>\n<li><a href=\"#tls_class_cryptostream\">Class: CryptoStream</a><ul>\n<li><a href=\"#tls_cryptostream_byteswritten\">cryptoStream.bytesWritten</a></li>\n</ul>\n</li>\n<li><a href=\"#tls_class_securepair\">Class: SecurePair</a><ul>\n<li><a href=\"#tls_event_secure\">Event: &#39;secure&#39;</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\">tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])</a></li>\n</ul>\n</li>\n<li><a href=\"#tty_tty\">TTY</a><ul>\n<li><a href=\"#tty_class_tty_readstream\">Class: tty.ReadStream</a><ul>\n<li><a href=\"#tty_readstream_israw\">readStream.isRaw</a></li>\n<li><a href=\"#tty_readstream_setrawmode_mode\">readStream.setRawMode(mode)</a></li>\n</ul>\n</li>\n<li><a href=\"#tty_class_tty_writestream\">Class: tty.WriteStream</a><ul>\n<li><a href=\"#tty_event_resize\">Event: &#39;resize&#39;</a></li>\n<li><a href=\"#tty_writestream_columns\">writeStream.columns</a></li>\n<li><a href=\"#tty_writestream_rows\">writeStream.rows</a></li>\n</ul>\n</li>\n<li><a href=\"#tty_tty_isatty_fd\">tty.isatty(fd)</a></li>\n</ul>\n</li>\n<li><a href=\"#url_url\">URL</a><ul>\n<li><a href=\"#url_url_strings_and_url_objects\">URL Strings and URL Objects</a><ul>\n<li><a href=\"#url_urlobject_href\">urlObject.href</a></li>\n<li><a href=\"#url_urlobject_protocol\">urlObject.protocol</a></li>\n<li><a href=\"#url_urlobject_slashes\">urlObject.slashes</a></li>\n<li><a href=\"#url_urlobject_host\">urlObject.host</a></li>\n<li><a href=\"#url_urlobject_auth\">urlObject.auth</a></li>\n<li><a href=\"#url_urlobject_hostname\">urlObject.hostname</a></li>\n<li><a href=\"#url_urlobject_port\">urlObject.port</a></li>\n<li><a href=\"#url_urlobject_pathname\">urlObject.pathname</a></li>\n<li><a href=\"#url_urlobject_search\">urlObject.search</a></li>\n<li><a href=\"#url_urlobject_path\">urlObject.path</a></li>\n<li><a href=\"#url_urlobject_query\">urlObject.query</a></li>\n<li><a href=\"#url_urlobject_hash\">urlObject.hash</a></li>\n</ul>\n</li>\n<li><a href=\"#url_url_format_urlobject\">url.format(urlObject)</a></li>\n<li><a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\">url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</a></li>\n<li><a href=\"#url_url_resolve_from_to\">url.resolve(from, to)</a></li>\n<li><a href=\"#url_escaped_characters\">Escaped Characters</a></li>\n</ul>\n</li>\n<li><a href=\"#util_util\">util</a><ul>\n<li><a href=\"#util_util_debuglog_section\">util.debuglog(section)</a></li>\n<li><a href=\"#util_util_deprecate_function_string\">util.deprecate(function, string)</a></li>\n<li><a href=\"#util_util_format_format\">util.format(format[, ...])</a></li>\n<li><a href=\"#util_util_inherits_constructor_superconstructor\">util.inherits(constructor, superConstructor)</a></li>\n<li><a href=\"#util_util_inspect_object_options\">util.inspect(object[, options])</a><ul>\n<li><a href=\"#util_customizing_util_inspect_colors\">Customizing <code>util.inspect</code> colors</a></li>\n<li><a href=\"#util_custom_inspect_function_on_objects\">Custom <code>inspect()</code> function on Objects</a></li>\n</ul>\n</li>\n<li><a href=\"#util_deprecated_apis\">Deprecated APIs</a><ul>\n<li><a href=\"#util_util_debug_string\">util.debug(string)</a></li>\n<li><a href=\"#util_util_error\">util.error([...])</a></li>\n<li><a href=\"#util_util_isarray_object\">util.isArray(object)</a></li>\n<li><a href=\"#util_util_isboolean_object\">util.isBoolean(object)</a></li>\n<li><a href=\"#util_util_isbuffer_object\">util.isBuffer(object)</a></li>\n<li><a href=\"#util_util_isdate_object\">util.isDate(object)</a></li>\n<li><a href=\"#util_util_iserror_object\">util.isError(object)</a></li>\n<li><a href=\"#util_util_isfunction_object\">util.isFunction(object)</a></li>\n<li><a href=\"#util_util_isnull_object\">util.isNull(object)</a></li>\n<li><a href=\"#util_util_isnullorundefined_object\">util.isNullOrUndefined(object)</a></li>\n<li><a href=\"#util_util_isnumber_object\">util.isNumber(object)</a></li>\n<li><a href=\"#util_util_isobject_object\">util.isObject(object)</a></li>\n<li><a href=\"#util_util_isprimitive_object\">util.isPrimitive(object)</a></li>\n<li><a href=\"#util_util_isregexp_object\">util.isRegExp(object)</a></li>\n<li><a href=\"#util_util_isstring_object\">util.isString(object)</a></li>\n<li><a href=\"#util_util_issymbol_object\">util.isSymbol(object)</a></li>\n<li><a href=\"#util_util_isundefined_object\">util.isUndefined(object)</a></li>\n<li><a href=\"#util_util_log_string\">util.log(string)</a></li>\n<li><a href=\"#util_util_print\">util.print([...])</a></li>\n<li><a href=\"#util_util_puts\">util.puts([...])</a></li>\n<li><a href=\"#util_util_extend_obj\">util._extend(obj)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#v8_v8\">V8</a><ul>\n<li><a href=\"#v8_v8_getheapstatistics\">v8.getHeapStatistics()</a></li>\n<li><a href=\"#v8_v8_getheapspacestatistics\">v8.getHeapSpaceStatistics()</a></li>\n<li><a href=\"#v8_v8_setflagsfromstring_string\">v8.setFlagsFromString(string)</a></li>\n</ul>\n</li>\n<li><a href=\"#vm_executing_javascript\">Executing JavaScript</a><ul>\n<li><a href=\"#vm_class_vm_script\">Class: vm.Script</a><ul>\n<li><a href=\"#vm_new_vm_script_code_options\">new vm.Script(code, options)</a></li>\n<li><a href=\"#vm_script_runincontext_contextifiedsandbox_options\">script.runInContext(contextifiedSandbox[, options])</a></li>\n<li><a href=\"#vm_script_runinnewcontext_sandbox_options\">script.runInNewContext([sandbox][, options])</a></li>\n<li><a href=\"#vm_script_runinthiscontext_options\">script.runInThisContext([options])</a></li>\n</ul>\n</li>\n<li><a href=\"#vm_vm_createcontext_sandbox\">vm.createContext([sandbox])</a></li>\n<li><a href=\"#vm_vm_iscontext_sandbox\">vm.isContext(sandbox)</a></li>\n<li><a href=\"#vm_vm_runincontext_code_contextifiedsandbox_options\">vm.runInContext(code, contextifiedSandbox[, options])</a></li>\n<li><a href=\"#vm_vm_runindebugcontext_code\">vm.runInDebugContext(code)</a></li>\n<li><a href=\"#vm_vm_runinnewcontext_code_sandbox_options\">vm.runInNewContext(code[, sandbox][, options])</a></li>\n<li><a href=\"#vm_vm_runinthiscontext_code_options\">vm.runInThisContext(code[, options])</a></li>\n<li><a href=\"#vm_example_running_an_http_server_within_a_vm\">Example: Running an HTTP Server within a VM</a></li>\n<li><a href=\"#vm_what_does_it_mean_to_contextify_an_object\">What does it mean to &quot;contextify&quot; an object?</a></li>\n</ul>\n</li>\n<li><a href=\"#zlib_zlib\">Zlib</a><ul>\n<li><a href=\"#zlib_compressing_http_requests_and_responses\">Compressing HTTP requests and responses</a></li>\n<li><a href=\"#zlib_memory_usage_tuning\">Memory Usage Tuning</a></li>\n<li><a href=\"#zlib_flushing\">Flushing</a></li>\n<li><a href=\"#zlib_constants\">Constants</a></li>\n<li><a href=\"#zlib_class_options\">Class Options</a></li>\n<li><a href=\"#zlib_class_zlib_deflate\">Class: zlib.Deflate</a></li>\n<li><a href=\"#zlib_class_zlib_deflateraw\">Class: zlib.DeflateRaw</a></li>\n<li><a href=\"#zlib_class_zlib_gunzip\">Class: zlib.Gunzip</a></li>\n<li><a href=\"#zlib_class_zlib_gzip\">Class: zlib.Gzip</a></li>\n<li><a href=\"#zlib_class_zlib_inflate\">Class: zlib.Inflate</a></li>\n<li><a href=\"#zlib_class_zlib_inflateraw\">Class: zlib.InflateRaw</a></li>\n<li><a href=\"#zlib_class_zlib_unzip\">Class: zlib.Unzip</a></li>\n<li><a href=\"#zlib_class_zlib_zlib\">Class: zlib.Zlib</a><ul>\n<li><a href=\"#zlib_zlib_flush_kind_callback\">zlib.flush([kind], callback)</a></li>\n<li><a href=\"#zlib_zlib_params_level_strategy_callback\">zlib.params(level, strategy, callback)</a></li>\n<li><a href=\"#zlib_zlib_reset\">zlib.reset()</a></li>\n</ul>\n</li>\n<li><a href=\"#zlib_zlib_createdeflate_options\">zlib.createDeflate([options])</a></li>\n<li><a href=\"#zlib_zlib_createdeflateraw_options\">zlib.createDeflateRaw([options])</a></li>\n<li><a href=\"#zlib_zlib_creategunzip_options\">zlib.createGunzip([options])</a></li>\n<li><a href=\"#zlib_zlib_creategzip_options\">zlib.createGzip([options])</a></li>\n<li><a href=\"#zlib_zlib_createinflate_options\">zlib.createInflate([options])</a></li>\n<li><a href=\"#zlib_zlib_createinflateraw_options\">zlib.createInflateRaw([options])</a></li>\n<li><a href=\"#zlib_zlib_createunzip_options\">zlib.createUnzip([options])</a></li>\n<li><a href=\"#zlib_convenience_methods\">Convenience Methods</a><ul>\n<li><a href=\"#zlib_zlib_deflate_buf_options_callback\">zlib.deflate(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_deflatesync_buf_options\">zlib.deflateSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_deflateraw_buf_options_callback\">zlib.deflateRaw(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_deflaterawsync_buf_options\">zlib.deflateRawSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_gunzip_buf_options_callback\">zlib.gunzip(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_gunzipsync_buf_options\">zlib.gunzipSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_gzip_buf_options_callback\">zlib.gzip(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_gzipsync_buf_options\">zlib.gzipSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_inflate_buf_options_callback\">zlib.inflate(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_inflatesync_buf_options\">zlib.inflateSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_inflateraw_buf_options_callback\">zlib.inflateRaw(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_inflaterawsync_buf_options\">zlib.inflateRawSync(buf[, options])</a></li>\n<li><a href=\"#zlib_zlib_unzip_buf_options_callback\">zlib.unzip(buf[, options], callback)</a></li>\n<li><a href=\"#zlib_zlib_unzipsync_buf_options\">zlib.unzipSync(buf[, options])</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n      </div>\n\n      <div id=\"apicontent\">\n        <!-- [start-include:documentation.md] -->\n<h1>About this Documentation<span><a class=\"mark\" href=\"#documentation_about_this_documentation\" id=\"documentation_about_this_documentation\">#</a></span></h1>\n<!-- type=misc -->\n<p>The goal of this documentation is to comprehensively explain the Node.js\nAPI, both from a reference as well as a conceptual point of view.  Each\nsection describes a built-in module or high-level concept.</p>\n<p>Where appropriate, property types, method arguments, and the arguments\nprovided to event handlers are detailed in a list underneath the topic\nheading.</p>\n<p>Every <code>.html</code> document has a corresponding <code>.json</code> document presenting\nthe same information in a structured manner.  This feature is\nexperimental, and added for the benefit of IDEs and other utilities that\nwish to do programmatic things with the documentation.</p>\n<p>Every <code>.html</code> and <code>.json</code> file is generated based on the corresponding\n<code>.md</code> file in the <code>doc/api/</code> folder in Node.js&#39;s source tree.  The\ndocumentation is generated using the <code>tools/doc/generate.js</code> program.\nThe HTML template is located at <code>doc/template.html</code>.</p>\n<p>If you find an error in this documentation, please <a href=\"https://github.com/nodejs/node/issues/new\">submit an issue</a>\nor see <a href=\"https://github.com/nodejs/node/blob/master/CONTRIBUTING.md\">the contributing guide</a> for directions on how to submit a patch.</p>\n<h2>Stability Index<span><a class=\"mark\" href=\"#documentation_stability_index\" id=\"documentation_stability_index\">#</a></span></h2>\n<!--type=misc-->\n<p>Throughout the documentation, you will see indications of a section&#39;s\nstability.  The Node.js API is still somewhat changing, and as it\nmatures, certain parts are more reliable than others.  Some are so\nproven, and so relied upon, that they are unlikely to ever change at\nall.  Others are brand new and experimental, or known to be hazardous\nand in the process of being redesigned.</p>\n<p>The stability indices are as follows:</p>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated\nThis feature is known to be problematic, and changes are\nplanned.  Do not rely on it.  Use of the feature may cause warnings.  Backwards\ncompatibility should not be expected.</pre><pre class=\"api_stability api_stability_1\">Stability: 1 - Experimental\nThis feature is subject to change, and is gated by a command line flag.\nIt may change or be removed in future versions.</pre><pre class=\"api_stability api_stability_2\">Stability: 2 - Stable\nThe API has proven satisfactory. Compatibility with the npm ecosystem\nis a high priority, and will not be broken unless absolutely necessary.</pre><pre class=\"api_stability api_stability_3\">Stability: 3 - Locked\nOnly fixes related to security, performance, or bug fixes will be accepted.\nPlease do not suggest API changes in this area; they will be refused.</pre><h2>JSON Output<span><a class=\"mark\" href=\"#documentation_json_output\" id=\"documentation_json_output\">#</a></span></h2>\n<pre class=\"api_stability api_stability_1\">Stability: 1 - Experimental</pre><p>Every HTML file in the markdown has a corresponding JSON file with the\nsame data.</p>\n<p>This feature was added in Node.js v0.6.12.  It is experimental.</p>\n<h2>Syscalls and man pages<span><a class=\"mark\" href=\"#documentation_syscalls_and_man_pages\" id=\"documentation_syscalls_and_man_pages\">#</a></span></h2>\n<p>System calls like <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a> and <a href=\"http://man7.org/linux/man-pages/man2/read.2.html\">read(2)</a> define the interface between user programs\nand the underlying operating system. Node functions which simply wrap a syscall,\nlike <code>fs.open()</code>, will document that. The docs link to the corresponding man\npages (short for manual pages) which describe how the syscalls work.</p>\n<p><strong>Caveat:</strong> some syscalls, like <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>, are BSD-specific. That means, for\nexample, that <code>fs.lchown()</code> only works on Mac OS X and other BSD-derived systems,\nand is not available on Linux.</p>\n<p>Most Unix syscalls have Windows equivalents, but behavior may differ on Windows\nrelative to Linux and OS X. For an example of the subtle ways in which it&#39;s\nsometimes impossible to replace Unix syscall semantics on Windows, see <a href=\"https://github.com/nodejs/node/issues/4760\">Node\nissue 4760</a>.</p>\n<!-- [end-include:documentation.md] -->\n<!-- [start-include:synopsis.md] -->\n<h1>Usage<span><a class=\"mark\" href=\"#synopsis_usage\" id=\"synopsis_usage\">#</a></span></h1>\n<!--type=misc-->\n<p><code>node [options] [v8 options] [script.js | -e &quot;script&quot;] [arguments]</code></p>\n<p>Please see the <a href=\"cli.html#cli_command_line_options\">Command Line Options</a> document for information about\ndifferent options and ways to run scripts with Node.js.</p>\n<h2>Example<span><a class=\"mark\" href=\"#synopsis_example\" id=\"synopsis_example\">#</a></span></h2>\n<p>An example of a <a href=\"http.html\">web server</a> written with Node.js which responds with\n<code>&#39;Hello World&#39;</code>:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst hostname = &#39;127.0.0.1&#39;;\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);\n  res.end(&#39;Hello World\\n&#39;);\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>To run the server, put the code into a file called <code>example.js</code> and execute\nit with Node.js:</p>\n<pre><code>$ node example.js\nServer running at http://127.0.0.1:3000/\n</code></pre><p>All of the examples in the documentation can be run similarly.</p>\n<!-- [end-include:synopsis.md] -->\n<!-- [start-include:addons.md] -->\n<h1>Addons<span><a class=\"mark\" href=\"#addons_addons\" id=\"addons_addons\">#</a></span></h1>\n<p>Node.js Addons are dynamically-linked shared objects, written in C or C++, that\ncan be loaded into Node.js using the <a href=\"globals.html#globals_require\"><code>require()</code></a> function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.</p>\n<p>At the moment, the method for implementing Addons is rather complicated,\ninvolving knowledge of several components and APIs :</p>\n<ul>\n<li><p>V8: the C++ library Node.js currently uses to provide the\nJavaScript implementation. V8 provides the mechanisms for creating objects,\ncalling functions, etc. V8&#39;s API is documented mostly in the\n<code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source\ntree), which is also available <a href=\"https://v8docs.nodesource.com/\">online</a>.</p>\n</li>\n<li><p><a href=\"https://github.com/libuv/libuv\">libuv</a>: The C library that implements the Node.js event loop, its worker\nthreads and all of the asynchronous behaviors of the platform. It also\nserves as a cross-platform abstraction library, giving easy, POSIX-like\naccess across all major operating systems to many common system tasks, such\nas interacting with the filesystem, sockets, timers and system events. libuv\nalso provides a pthreads-like threading abstraction that may be used to\npower more sophisticated asynchronous Addons that need to move beyond the\nstandard event loop. Addon authors are encouraged to think about how to\navoid blocking the event loop with I/O or other time-intensive tasks by\noff-loading work via libuv to non-blocking system operations, worker threads\nor a custom use of libuv&#39;s threads.</p>\n</li>\n<li><p>Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs\nthat Addons can use &mdash; the most important of which is the\n<code>node::ObjectWrap</code> class.</p>\n</li>\n<li><p>Node.js includes a number of other statically linked libraries including\nOpenSSL. These other libraries are located in the <code>deps/</code> directory in the\nNode.js source tree. Only the V8 and OpenSSL symbols are purposefully\nre-exported by Node.js and may be used to various extents by Addons.\nSee <a href=\"#addons_linking_to_node_js_own_dependencies\">Linking to Node.js&#39; own dependencies</a> for additional information.</p>\n</li>\n</ul>\n<p>All of the following examples are available for <a href=\"https://github.com/nodejs/node-addon-examples\">download</a> and may\nbe used as a starting-point for your own Addon.</p>\n<h2>Hello world<span><a class=\"mark\" href=\"#addons_hello_world\" id=\"addons_hello_world\">#</a></span></h2>\n<p>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the\nequivalent of the following JavaScript code:</p>\n<pre><code class=\"lang-js\">module.exports.hello = () =&gt; &#39;world&#39;;\n</code></pre>\n<p>First, create the file <code>hello.cc</code>:</p>\n<pre><code class=\"lang-cpp\">// hello.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;world&quot;));\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, &quot;hello&quot;, Method);\n}\n\nNODE_MODULE(addon, init)\n\n}  // namespace demo\n</code></pre>\n<p>Note that all Node.js Addons must export an initialization function following\nthe pattern:</p>\n<pre><code class=\"lang-cpp\">void Initialize(Local&lt;Object&gt; exports);\nNODE_MODULE(module_name, Initialize)\n</code></pre>\n<p>There is no semi-colon after <code>NODE_MODULE</code> as it&#39;s not a function (see\n<code>node.h</code>).</p>\n<p>The <code>module_name</code> must match the filename of the final binary (excluding\nthe .node suffix).</p>\n<p>In the <code>hello.cc</code> example, then, the initialization function is <code>init</code> and the\nAddon module name is <code>addon</code>.</p>\n<h3>Building<span><a class=\"mark\" href=\"#addons_building\" id=\"addons_building\">#</a></span></h3>\n<p>Once the source code has been written, it must be compiled into the binary\n<code>addon.node</code> file. To do so, create a file called <code>binding.gyp</code> in the\ntop-level of the project describing the build configuration of your module\nusing a JSON-like format. This file is used by <a href=\"https://github.com/nodejs/node-gyp\">node-gyp</a> -- a tool written\nspecifically to compile Node.js Addons.</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ]\n    }\n  ]\n}\n</code></pre><p><em>Note: A version of the <code>node-gyp</code> utility is bundled and distributed with\nNode.js as part of <code>npm</code>. This version is not made directly available for\ndevelopers to use and is intended only to support the ability to use the\n<code>npm install</code> command to compile and install Addons. Developers who wish to\nuse <code>node-gyp</code> directly can install it using the command\n<code>npm install -g node-gyp</code>. See the <code>node-gyp</code> <a href=\"https://github.com/nodejs/node-gyp#installation\">installation instructions</a> for\nmore information, including platform-specific requirements.</em></p>\n<p>Once the <code>binding.gyp</code> file has been created, use <code>node-gyp configure</code> to\ngenerate the appropriate project build files for the current platform. This\nwill generate either a <code>Makefile</code> (on Unix platforms) or a <code>vcxproj</code> file\n(on Windows) in the <code>build/</code> directory.</p>\n<p>Next, invoke the <code>node-gyp build</code> command to generate the compiled <code>addon.node</code>\nfile. This will be put into the <code>build/Release/</code> directory.</p>\n<p>When using <code>npm install</code> to install a Node.js Addon, npm uses its own bundled\nversion of <code>node-gyp</code> to perform this same set of actions, generating a\ncompiled version of the Addon for the user&#39;s platform on demand.</p>\n<p>Once built, the binary Addon can be used from within Node.js by pointing\n<a href=\"globals.html#globals_require\"><code>require()</code></a> to the built <code>addon.node</code> module:</p>\n<pre><code class=\"lang-js\">// hello.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconsole.log(addon.hello()); // &#39;world&#39;\n</code></pre>\n<p>Please see the examples below for further information or\n<a href=\"https://github.com/arturadib/node-qt\">https://github.com/arturadib/node-qt</a> for an example in production.</p>\n<p>Because the exact path to the compiled Addon binary can vary depending on how\nit is compiled (i.e. sometimes it may be in <code>./build/Debug/</code>), Addons can use\nthe <a href=\"https://github.com/TooTallNate/node-bindings\">bindings</a> package to load the compiled module.</p>\n<p>Note that while the <code>bindings</code> package implementation is more sophisticated\nin how it locates Addon modules, it is essentially using a try-catch pattern\nsimilar to:</p>\n<pre><code class=\"lang-js\">try {\n  return require(&#39;./build/Release/addon.node&#39;);\n} catch (err) {\n  return require(&#39;./build/Debug/addon.node&#39;);\n}\n</code></pre>\n<h3>Linking to Node.js&#39; own dependencies<span><a class=\"mark\" href=\"#addons_linking_to_node_js_own_dependencies\" id=\"addons_linking_to_node_js_own_dependencies\">#</a></span></h3>\n<p>Node.js uses a number of statically linked libraries such as V8, libuv and\nOpenSSL. All Addons are required to link to V8 and may link to any of the\nother dependencies as well. Typically, this is as simple as including\nthe appropriate <code>#include &lt;...&gt;</code> statements (e.g. <code>#include &lt;v8.h&gt;</code>) and\n<code>node-gyp</code> will locate the appropriate headers automatically. However, there\nare a few caveats to be aware of:</p>\n<ul>\n<li><p>When <code>node-gyp</code> runs, it will detect the specific release version of Node.js\nand download either the full source tarball or just the headers. If the full\nsource is downloaded, Addons will have complete access to the full set of\nNode.js dependencies. However, if only the Node.js headers are downloaded, then\nonly the symbols exported by Node.js will be available.</p>\n</li>\n<li><p><code>node-gyp</code> can be run using the <code>--nodedir</code> flag pointing at a local Node.js\nsource image. Using this option, the Addon will have access to the full set of\ndependencies.</p>\n</li>\n</ul>\n<h3>Loading Addons using require()<span><a class=\"mark\" href=\"#addons_loading_addons_using_require\" id=\"addons_loading_addons_using_require\">#</a></span></h3>\n<p>The filename extension of the compiled Addon binary is <code>.node</code> (as opposed\nto <code>.dll</code> or <code>.so</code>). The <a href=\"globals.html#globals_require\"><code>require()</code></a> function is written to look for\nfiles with the <code>.node</code> file extension and initialize those as dynamically-linked\nlibraries.</p>\n<p>When calling <a href=\"globals.html#globals_require\"><code>require()</code></a>, the <code>.node</code> extension can usually be\nomitted and Node.js will still find and initialize the Addon. One caveat,\nhowever, is that Node.js will first attempt to locate and load modules or\nJavaScript files that happen to share the same base name. For instance, if\nthere is a file <code>addon.js</code> in the same directory as the binary <code>addon.node</code>,\nthen <a href=\"globals.html#globals_require\"><code>require(&#39;addon&#39;)</code></a> will give precedence to the <code>addon.js</code> file\nand load it instead.</p>\n<h2>Native Abstractions for Node.js<span><a class=\"mark\" href=\"#addons_native_abstractions_for_node_js\" id=\"addons_native_abstractions_for_node_js\">#</a></span></h2>\n<p>Each of the examples illustrated in this document make direct use of the\nNode.js and V8 APIs for implementing Addons. It is important to understand\nthat the V8 API can, and has, changed dramatically from one V8 release to the\nnext (and one major Node.js release to the next). With each change, Addons may\nneed to be updated and recompiled in order to continue functioning. The Node.js\nrelease schedule is designed to minimize the frequency and impact of such\nchanges but there is little that Node.js can do currently to ensure stability\nof the V8 APIs.</p>\n<p>The <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> (or <code>nan</code>) provide a set of tools that\nAddon developers are recommended to use to keep compatibility between past and\nfuture releases of V8 and Node.js. See the <code>nan</code> <a href=\"https://github.com/nodejs/nan/tree/master/examples/\">examples</a> for an\nillustration of how it can be used.</p>\n<h2>Addon examples<span><a class=\"mark\" href=\"#addons_addon_examples\" id=\"addons_addon_examples\">#</a></span></h2>\n<p>Following are some example Addons intended to help developers get started. The\nexamples make use of the V8 APIs. Refer to the online <a href=\"https://v8docs.nodesource.com/\">V8 reference</a>\nfor help with the various V8 calls, and V8&#39;s <a href=\"https://developers.google.com/v8/embed\">Embedder&#39;s Guide</a> for an\nexplanation of several concepts used such as handles, scopes, function\ntemplates, etc.</p>\n<p>Each of these examples using the following <code>binding.gyp</code> file:</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;addon.cc&quot; ]\n    }\n  ]\n}\n</code></pre><p>In cases where there is more than one <code>.cc</code> file, simply add the additional\nfilename to the <code>sources</code> array. For example:</p>\n<pre><code>&quot;sources&quot;: [&quot;addon.cc&quot;, &quot;myexample.cc&quot;]\n</code></pre><p>Once the <code>binding.gyp</code> file is ready, the example Addons can be configured and\nbuilt using <code>node-gyp</code>:</p>\n<pre><code>$ node-gyp configure build\n</code></pre><h3>Function arguments<span><a class=\"mark\" href=\"#addons_function_arguments\" id=\"addons_function_arguments\">#</a></span></h3>\n<p>Addons will typically expose objects and functions that can be accessed from\nJavaScript running within Node.js. When functions are invoked from JavaScript,\nthe input arguments and return value must be mapped to and from the C/C++\ncode.</p>\n<p>The following example illustrates how to read function arguments passed from\nJavaScript and how to return a result:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Exception;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// This is the implementation of the &quot;add&quot; method\n// Input arguments are passed using the\n// const FunctionCallbackInfo&lt;Value&gt;&amp; args struct\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  // Check the number of arguments passed.\n  if (args.Length() &lt; 2) {\n    // Throw an Error that is passed back to JavaScript\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, &quot;Wrong number of arguments&quot;)));\n    return;\n  }\n\n  // Check the argument types\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, &quot;Wrong arguments&quot;)));\n    return;\n  }\n\n  // Perform the operation\n  double value = args[0]-&gt;NumberValue() + args[1]-&gt;NumberValue();\n  Local&lt;Number&gt; num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo&lt;Value&gt;&amp;)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</code></pre>\n<p>Once compiled, the example Addon can be required and used from within Node.js:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconsole.log(&#39;This should be eight:&#39;, addon.add(3, 5));\n</code></pre>\n<h3>Callbacks<span><a class=\"mark\" href=\"#addons_callbacks\" id=\"addons_callbacks\">#</a></span></h3>\n<p>It is common practice within Addons to pass JavaScript functions to a C++\nfunction and execute them from there. The following example illustrates how\nto invoke such callbacks:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid RunCallback(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { String::NewFromUtf8(isolate, &quot;hello world&quot;) };\n  cb-&gt;Call(Null(isolate), argc, argv);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, RunCallback);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</code></pre>\n<p>Note that this example uses a two-argument form of <code>Init()</code> that receives\nthe full <code>module</code> object as the second argument. This allows the Addon\nto completely overwrite <code>exports</code> with a single function instead of\nadding the function as a property of <code>exports</code>.</p>\n<p>To test it, run the following JavaScript:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\naddon((msg) =&gt; {\n  console.log(msg); // &#39;hello world&#39;\n});\n</code></pre>\n<p>Note that, in this example, the callback function is invoked synchronously.</p>\n<h3>Object factory<span><a class=\"mark\" href=\"#addons_object_factory\" id=\"addons_object_factory\">#</a></span></h3>\n<p>Addons can create and return new objects from within a C++ function as\nillustrated in the following example. An object is created and returned with a\nproperty <code>msg</code> that echoes the string passed to <code>createObject()</code>:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  obj-&gt;Set(String::NewFromUtf8(isolate, &quot;msg&quot;), args[0]-&gt;ToString());\n\n  args.GetReturnValue().Set(obj);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</code></pre>\n<p>To test it in JavaScript:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nvar obj1 = addon(&#39;hello&#39;);\nvar obj2 = addon(&#39;world&#39;);\nconsole.log(obj1.msg + &#39; &#39; + obj2.msg); // &#39;hello world&#39;\n</code></pre>\n<h3>Function factory<span><a class=\"mark\" href=\"#addons_function_factory\" id=\"addons_function_factory\">#</a></span></h3>\n<p>Another common scenario is creating JavaScript functions that wrap C++\nfunctions and returning those back to JavaScript:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;hello world&quot;));\n}\n\nvoid CreateFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n\n  // omit this to make it anonymous\n  fn-&gt;SetName(String::NewFromUtf8(isolate, &quot;theFunction&quot;));\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateFunction);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</code></pre>\n<p>To test:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nvar fn = addon();\nconsole.log(fn()); // &#39;hello world&#39;\n</code></pre>\n<h3>Wrapping C++ objects<span><a class=\"mark\" href=\"#addons_wrapping_c_objects\" id=\"addons_wrapping_c_objects\">#</a></span></h3>\n<p>It is also possible to wrap C++ objects/classes in a way that allows new\ninstances to be created using the JavaScript <code>new</code> operator:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Local;\nusing v8::Object;\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>Then, in <code>myobject.h</code>, the wrapper class inherits from <code>node::ObjectWrap</code>:</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Local&lt;v8::Object&gt; exports);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>In <code>myobject.cc</code>, implement the various methods that are to be exposed.\nBelow, the method <code>plusOne()</code> is exposed by adding it to the constructor&#39;s\nprototype:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Local&lt;Object&gt; exports) {\n  Isolate* isolate = exports-&gt;GetIsolate();\n\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n  exports-&gt;Set(String::NewFromUtf8(isolate, &quot;MyObject&quot;),\n               tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; result =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(result);\n  }\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</code></pre>\n<p>To build this example, the <code>myobject.cc</code> file must be added to the\n<code>binding.gyp</code>:</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [\n        &quot;addon.cc&quot;,\n        &quot;myobject.cc&quot;\n      ]\n    }\n  ]\n}\n</code></pre><p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nvar obj = new addon.MyObject(10);\nconsole.log(obj.plusOne()); // 11\nconsole.log(obj.plusOne()); // 12\nconsole.log(obj.plusOne()); // 13\n</code></pre>\n<h3>Factory of wrapped objects<span><a class=\"mark\" href=\"#addons_factory_of_wrapped_objects\" id=\"addons_factory_of_wrapped_objects\">#</a></span></h3>\n<p>Alternatively, it is possible to use a factory pattern to avoid explicitly\ncreating object instances using the JavaScript <code>new</code> operator:</p>\n<pre><code class=\"lang-js\">var obj = addon.createObject();\n// instead of:\n// var obj = new addon.Object();\n</code></pre>\n<p>First, the <code>createObject()</code> method is implemented in <code>addon.cc</code>:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid InitAll(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>In <code>myobject.h</code>, the static method <code>NewInstance()</code> is added to handle\ninstantiating the object. This method takes the place of using <code>new</code> in\nJavaScript:</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>The implementation in <code>myobject.cc</code> is similar to the previous example:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</code></pre>\n<p>Once again, to build this example, the <code>myobject.cc</code> file must be added to the\n<code>binding.gyp</code>:</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [\n        &quot;addon.cc&quot;,\n        &quot;myobject.cc&quot;\n      ]\n    }\n  ]\n}\n</code></pre><p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst createObject = require(&#39;./build/Release/addon&#39;);\n\nvar obj = createObject(10);\nconsole.log(obj.plusOne()); // 11\nconsole.log(obj.plusOne()); // 12\nconsole.log(obj.plusOne()); // 13\n\nvar obj2 = createObject(20);\nconsole.log(obj2.plusOne()); // 21\nconsole.log(obj2.plusOne()); // 22\nconsole.log(obj2.plusOne()); // 23\n</code></pre>\n<h3>Passing wrapped objects around<span><a class=\"mark\" href=\"#addons_passing_wrapped_objects_around\" id=\"addons_passing_wrapped_objects_around\">#</a></span></h3>\n<p>In addition to wrapping and returning C++ objects, it is possible to pass\nwrapped objects around by unwrapping them with the Node.js helper function\n<code>node::ObjectWrap::Unwrap</code>. The following examples shows a function <code>add()</code>\nthat can take two <code>MyObject</code> objects as input arguments:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;value() + obj2-&gt;value();\n  args.GetReturnValue().Set(Number::New(isolate, sum));\n}\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(exports, &quot;createObject&quot;, CreateObject);\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>In <code>myobject.h</code>, a new public method is added to allow access to private values\nafter unwrapping the object.</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  inline double value() const { return value_; }\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>The implementation of <code>myobject.cc</code> is similar to before:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\n}  // namespace demo\n</code></pre>\n<p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nvar obj1 = addon.createObject(10);\nvar obj2 = addon.createObject(20);\nvar result = addon.add(obj1, obj2);\n\nconsole.log(result); // 30\n</code></pre>\n<h3>AtExit hooks<span><a class=\"mark\" href=\"#addons_atexit_hooks\" id=\"addons_atexit_hooks\">#</a></span></h3>\n<p>An &quot;AtExit&quot; hook is a function that is invoked after the Node.js event loop\nhas ended by before the JavaScript VM is terminated and Node.js shuts down.\n&quot;AtExit&quot; hooks are registered using the <code>node::AtExit</code> API.</p>\n<h4>void AtExit(callback, args)<span><a class=\"mark\" href=\"#addons_void_atexit_callback_args\" id=\"addons_void_atexit_callback_args\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>callback</code>: <code>void (*)(void*)</code> - A pointer to the function to call at exit.</li>\n<li><code>args</code>: <code>void*</code> - A pointer to pass to the callback at exit.</li>\n</ul>\n</div><p>Registers exit hooks that run after the event loop has ended but before the VM\nis killed.</p>\n<p>AtExit takes two parameters: a pointer to a callback function to run at exit,\nand a pointer to untyped context data to be passed to that callback.</p>\n<p>Callbacks are run in last-in first-out order.</p>\n<p>The following <code>addon.cc</code> implements AtExit:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#undef NDEBUG\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing node::AtExit;\nusing v8::HandleScope;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\n\nstatic char cookie[] = &quot;yum yum&quot;;\nstatic int at_exit_cb1_called = 0;\nstatic int at_exit_cb2_called = 0;\n\nstatic void at_exit_cb1(void* arg) {\n  Isolate* isolate = static_cast&lt;Isolate*&gt;(arg);\n  HandleScope scope(isolate);\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  assert(!obj.IsEmpty()); // assert VM is still alive\n  assert(obj-&gt;IsObject());\n  at_exit_cb1_called++;\n}\n\nstatic void at_exit_cb2(void* arg) {\n  assert(arg == static_cast&lt;void*&gt;(cookie));\n  at_exit_cb2_called++;\n}\n\nstatic void sanity_check(void*) {\n  assert(at_exit_cb1_called == 1);\n  assert(at_exit_cb2_called == 2);\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  AtExit(sanity_check);\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb1, exports-&gt;GetIsolate());\n}\n\nNODE_MODULE(addon, init);\n\n}  // namespace demo\n</code></pre>\n<p>Test in JavaScript by running:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n</code></pre>\n<!-- [end-include:addons.md] -->\n<!-- [start-include:assert.md] -->\n<h1>Assert<span><a class=\"mark\" href=\"#assert_assert\" id=\"assert_assert\">#</a></span></h1>\n<pre class=\"api_stability api_stability_3\">Stability: 3 - Locked</pre><p>The <code>assert</code> module provides a simple set of assertion tests that can be used to\ntest invariants. The module is intended for internal use by Node.js, but can be\nused in application code via <code>require(&#39;assert&#39;)</code>. However, <code>assert</code> is not a\ntesting framework, and is not intended to be used as a general purpose assertion\nlibrary.</p>\n<p>The API for the <code>assert</code> module is <a href=\"documentation.html#documentation_stability_index\">Locked</a>. This means that there will be no\nadditions or changes to any of the methods implemented and exposed by\nthe module.</p>\n<h2>assert(value[, message])<span><a class=\"mark\" href=\"#assert_assert_value_message\" id=\"assert_assert_value_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.9</span>\n</div><p>An alias of <a href=\"#assert_assert_ok_value_message\"><code>assert.ok()</code></a> .</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert(true);  // OK\nassert(1);     // OK\nassert(false);\n  // throws &quot;AssertionError: false == true&quot;\nassert(0);\n  // throws &quot;AssertionError: 0 == true&quot;\nassert(false, &#39;it\\&#39;s false&#39;);\n  // throws &quot;AssertionError: it&#39;s false&quot;\n</code></pre>\n<h2>assert.deepEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_deepequal_actual_expected_message\" id=\"assert_assert_deepequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\nPrimitive values are compared with the equal comparison operator ( <code>==</code> ).</p>\n<p>Only enumerable &quot;own&quot; properties are considered. The <code>deepEqual()</code>\nimplementation does not test object prototypes, attached symbols, or\nnon-enumerable properties. This can lead to some potentially surprising\nresults. For example, the following example does not throw an <code>AssertionError</code>\nbecause the properties on the <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object are non-enumerable:</p>\n<pre><code class=\"lang-js\">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(Error(&#39;a&#39;), Error(&#39;b&#39;));\n</code></pre>\n<p>&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare evaluated also:</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n}\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n  // OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n  // AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n  // values of b are different\n\nassert.deepEqual(obj1, obj3);\n  // OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n  // AssertionError: { a: { b: 1 } } deepEqual {}\n  // Prototypes are ignored\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.</p>\n<h2>assert.deepStrictEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_deepstrictequal_actual_expected_message\" id=\"assert_assert_deepstrictequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v1.2.0</span>\n</div><p>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,\nprimitive values are compared using the strict equality operator ( <code>===</code> ).\nSecond, object comparisons include a strict equality check of their prototypes.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.deepEqual({a:1}, {a:&#39;1&#39;});\n  // OK, because 1 == &#39;1&#39;\n\nassert.deepStrictEqual({a:1}, {a:&#39;1&#39;});\n  // AssertionError: { a: 1 } deepStrictEqual { a: &#39;1&#39; }\n  // because 1 !== &#39;1&#39; using strict equality\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.</p>\n<h2>assert.doesNotThrow(block[, error][, message])<span><a class=\"mark\" href=\"#assert_assert_doesnotthrow_block_error_message\" id=\"assert_assert_doesnotthrow_block_error_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Asserts that the function <code>block</code> does not throw an error. See\n<a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a> for more details.</p>\n<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code>\nfunction.</p>\n<p>If an error is thrown and it is the same type as that specified by the <code>error</code>\nparameter, then an <code>AssertionError</code> is thrown. If the error is of a different\ntype, or if the <code>error</code> parameter is undefined, the error is propagated back\nto the caller.</p>\n<p>The following, for instance, will throw the <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> because there is no\nmatching error type in the assertion:</p>\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  SyntaxError\n);\n</code></pre>\n<p>However, the following will result in an <code>AssertionError</code> with the message\n&#39;Got unwanted exception (TypeError)..&#39;:</p>\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError\n);\n</code></pre>\n<p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>\nparameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>\nmessage:</p>\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError,\n  &#39;Whoops&#39;\n);\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\n</code></pre>\n<h2>assert.equal(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_equal_actual_expected_message\" id=\"assert_assert_equal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\nusing the equal comparison operator ( <code>==</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.equal(1, 1);\n  // OK, 1 == 1\nassert.equal(1, &#39;1&#39;);\n  // OK, 1 == &#39;1&#39;\n\nassert.equal(1, 2);\n  // AssertionError: 1 == 2\nassert.equal({a: {b: 1}}, {a: {b: 1}});\n  //AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.</p>\n<h2>assert.fail(actual, expected, message, operator)<span><a class=\"mark\" href=\"#assert_assert_fail_actual_expected_message_operator\" id=\"assert_assert_fail_actual_expected_message_operator\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as\nthe values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.\nOtherwise, the error message is the value of <code>message</code>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.fail(1, 2, undefined, &#39;&gt;&#39;);\n  // AssertionError: 1 &gt; 2\n\nassert.fail(1, 2, &#39;whoops&#39;, &#39;&gt;&#39;);\n  // AssertionError: whoops\n</code></pre>\n<h2>assert.ifError(value)<span><a class=\"mark\" href=\"#assert_assert_iferror_value\" id=\"assert_assert_iferror_value\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.97</span>\n</div><p>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>\nargument in callbacks.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.ifError(0); // OK\nassert.ifError(1); // Throws 1\nassert.ifError(&#39;error&#39;) // Throws &#39;error&#39;\nassert.ifError(new Error()); // Throws Error\n</code></pre>\n<h2>assert.notDeepEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_notdeepequal_actual_expected_message\" id=\"assert_assert_notdeepequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests for any deep inequality. Opposite of <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n}\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n  // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n  // OK, obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n  // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n  // OK, obj1 and obj2 are not deeply equal\n</code></pre>\n<p>If the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.</p>\n<h2>assert.notDeepStrictEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_notdeepstrictequal_actual_expected_message\" id=\"assert_assert_notdeepstrictequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v1.2.0</span>\n</div><p>Tests for deep strict inequality. Opposite of <a href=\"#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.notDeepEqual({a:1}, {a:&#39;1&#39;});\n  // AssertionError: { a: 1 } notDeepEqual { a: &#39;1&#39; }\n\nassert.notDeepStrictEqual({a:1}, {a:&#39;1&#39;});\n  // OK\n</code></pre>\n<p>If the values are deeply and strictly equal, an <code>AssertionError</code> is thrown\nwith a <code>message</code> property set equal to the value of the <code>message</code> parameter. If\nthe <code>message</code> parameter is undefined, a default error message is assigned.</p>\n<h2>assert.notEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_notequal_actual_expected_message\" id=\"assert_assert_notequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests shallow, coercive inequality with the not equal comparison operator\n( <code>!=</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.notEqual(1, 2);\n  // OK\n\nassert.notEqual(1, 1);\n  // AssertionError: 1 != 1\n\nassert.notEqual(1, &#39;1&#39;);\n  // AssertionError: 1 != &#39;1&#39;\n</code></pre>\n<p>If the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned.</p>\n<h2>assert.notStrictEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_notstrictequal_actual_expected_message\" id=\"assert_assert_notstrictequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests strict inequality as determined by the strict not equal operator\n( <code>!==</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.notStrictEqual(1, 2);\n  // OK\n\nassert.notStrictEqual(1, 1);\n  // AssertionError: 1 != 1\n\nassert.notStrictEqual(1, &#39;1&#39;);\n  // OK\n</code></pre>\n<p>If the values are strictly equal, an <code>AssertionError</code> is thrown with a\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned.</p>\n<h2>assert.ok(value[, message])<span><a class=\"mark\" href=\"#assert_assert_ok_value_message\" id=\"assert_assert_ok_value_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests if <code>value</code> is truthy. It is equivalent to\n<code>assert.equal(!!value, true, message)</code>.</p>\n<p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is <code>undefined</code>, a default error message is assigned.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.ok(true);  // OK\nassert.ok(1);     // OK\nassert.ok(false);\n  // throws &quot;AssertionError: false == true&quot;\nassert.ok(0);\n  // throws &quot;AssertionError: 0 == true&quot;\nassert.ok(false, &#39;it\\&#39;s false&#39;);\n  // throws &quot;AssertionError: it&#39;s false&quot;\n</code></pre>\n<h2>assert.strictEqual(actual, expected[, message])<span><a class=\"mark\" href=\"#assert_assert_strictequal_actual_expected_message\" id=\"assert_assert_strictequal_actual_expected_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.strictEqual(1, 2);\n  // AssertionError: 1 === 2\n\nassert.strictEqual(1, 1);\n  // OK\n\nassert.strictEqual(1, &#39;1&#39;);\n  // AssertionError: 1 === &#39;1&#39;\n</code></pre>\n<p>If the values are not strictly equal, an <code>AssertionError</code> is thrown with a\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned.</p>\n<h2>assert.throws(block[, error][, message])<span><a class=\"mark\" href=\"#assert_assert_throws_block_error_message\" id=\"assert_assert_throws_block_error_message\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Expects the function <code>block</code> to throw an error.</p>\n<p>If specified, <code>error</code> can be a constructor, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>, or validation\nfunction.</p>\n<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if\nthe block fails to throw.</p>\n<p>Validate instanceof using constructor:</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  Error\n);\n</code></pre>\n<p>Validate error message using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>:</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  /value/\n);\n</code></pre>\n<p>Custom error validation:</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &#39;unexpected error&#39;\n);\n</code></pre>\n<p>Note that <code>error</code> can not be a string. If a string is provided as the second\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\n<code>message</code> instead. This can lead to easy-to-miss mistakes:</p>\n<pre><code class=\"lang-js\">// THIS IS A MISTAKE! DO NOT DO THIS!\nassert.throws(myFunction, &#39;missing foo&#39;, &#39;did not throw with expected message&#39;);\n\n// Do this instead.\nassert.throws(myFunction, /missing foo/, &#39;did not throw with expected message&#39;);\n</code></pre>\n<!-- [end-include:assert.md] -->\n<!-- [start-include:buffer.md] -->\n<h1>Buffer<span><a class=\"mark\" href=\"#buffer_buffer\" id=\"buffer_buffer\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>Prior to the introduction of <code>TypedArray</code> in ECMAScript 2015 (ES6), the\nJavaScript language had no mechanism for reading or manipulating streams\nof binary data. The <code>Buffer</code> class was introduced as part of the Node.js\nAPI to make it possible to interact with octet streams in the context of things\nlike TCP streams and file system operations.</p>\n<p>Now that <code>TypedArray</code> has been added in ES6, the <code>Buffer</code> class implements the\n<code>Uint8Array</code> API in a manner that is more optimized and suitable for Node.js&#39;\nuse cases.</p>\n<p>Instances of the <code>Buffer</code> class are similar to arrays of integers but\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\nThe size of the <code>Buffer</code> is established when it is created and cannot be\nresized.</p>\n<p>The <code>Buffer</code> class is a global within Node.js, making it unlikely that one\nwould need to ever use <code>require(&#39;buffer&#39;).Buffer</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.alloc(10);\n  // Creates a zero-filled Buffer of length 10.\n\nconst buf2 = Buffer.alloc(10, 1);\n  // Creates a Buffer of length 10, filled with 0x01.\n\nconst buf3 = Buffer.allocUnsafe(10);\n  // Creates an uninitialized buffer of length 10.\n  // This is faster than calling Buffer.alloc() but the returned\n  // Buffer instance might contain old data that needs to be\n  // overwritten using either fill() or write().\n\nconst buf4 = Buffer.from([1,2,3]);\n  // Creates a Buffer containing [01, 02, 03].\n\nconst buf5 = Buffer.from(&#39;test&#39;);\n  // Creates a Buffer containing ASCII bytes [74, 65, 73, 74].\n\nconst buf6 = Buffer.from(&#39;t\u00e9st&#39;, &#39;utf8&#39;);\n  // Creates a Buffer containing UTF8 bytes [74, c3, a9, 73, 74].\n</code></pre>\n<h2><code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and <code>Buffer.allocUnsafe()</code><span><a class=\"mark\" href=\"#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\" id=\"buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\">#</a></span></h2>\n<p>In versions of Node.js prior to v6, <code>Buffer</code> instances were created using the\n<code>Buffer</code> constructor function, which allocates the returned <code>Buffer</code>\ndifferently based on what arguments are provided:</p>\n<ul>\n<li>Passing a number as the first argument to <code>Buffer()</code> (e.g. <code>new Buffer(10)</code>),\nallocates a new <code>Buffer</code> object of the specified size. The memory allocated\nfor such <code>Buffer</code> instances is <em>not</em> initialized and <em>can contain sensitive\ndata</em>. Such <code>Buffer</code> objects <em>must</em> be initialized <em>manually</em> by using either\n<a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> or by writing to the <code>Buffer</code> completely. While this\nbehavior is <em>intentional</em> to improve performance, development experience has\ndemonstrated that a more explicit distinction is required between creating a\nfast-but-uninitialized <code>Buffer</code> versus creating a slower-but-safer <code>Buffer</code>.</li>\n<li>Passing a string, array, or <code>Buffer</code> as the first argument copies the\npassed object&#39;s data into the <code>Buffer</code>.</li>\n<li>Passing an <code>ArrayBuffer</code> returns a <code>Buffer</code> that shares allocated memory with\nthe given <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Because the behavior of <code>new Buffer()</code> changes significantly based on the type\nof value passed as the first argument, applications that do not properly\nvalidate the input arguments passed to <code>new Buffer()</code>, or that fail to\nappropriately initialize newly allocated <code>Buffer</code> content, can inadvertently\nintroduce security and reliability issues into their code.</p>\n<p>To make the creation of <code>Buffer</code> objects more reliable and less error prone,\nthe various forms of the <code>new Buffer()</code> constructor have been <strong>deprecated</strong>\nand replaced by separate <code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and\n<code>Buffer.allocUnsafe()</code> methods.</p>\n<p><em>Developers should migrate all existing uses of the <code>new Buffer()</code> constructors\nto one of these new APIs.</em></p>\n<ul>\n<li><a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a> returns a new <code>Buffer</code> containing\na <em>copy</em> of the provided octets.</li>\n<li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a>\nreturns a new <code>Buffer</code> that <em>shares</em> the same allocated memory as the given\n<code>ArrayBuffer</code>.</li>\n<li><a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a> returns a new <code>Buffer</code>\ncontaining a <em>copy</em> of the contents of the given <code>Buffer</code>.</li>\n<li><a href=\"#buffer_class_method_buffer_from_str_encoding\"><code>Buffer.from(str[, encoding])</code></a> returns a new <code>Buffer</code>\ncontaining a <em>copy</em> of the provided string.</li>\n<li><a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> returns a &quot;filled&quot;\n<code>Buffer</code> instance of the specified size. This method can be significantly\nslower than <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> but ensures\nthat newly created <code>Buffer</code> instances never contain old and potentially\nsensitive data.</li>\n<li><a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> and\n<a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> each return a\nnew <code>Buffer</code> of the specified <code>size</code> whose content <em>must</em> be initialized\nusing either <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> or written to completely.</li>\n</ul>\n<p><code>Buffer</code> instances returned by <code>Buffer.allocUnsafe(size)</code> <em>may</em> be allocated\noff a shared internal memory pool if <code>size</code> is less than or equal to half\n<code>Buffer.poolSize</code>. Instances returned by <code>Buffer.allocUnsafeSlow(size)</code> <em>never</em>\nuse the shared internal memory pool.</p>\n<h3>The <code>--zero-fill-buffers</code> command line option<span><a class=\"mark\" href=\"#buffer_the_zero_fill_buffers_command_line_option\" id=\"buffer_the_zero_fill_buffers_command_line_option\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><p>Node.js can be started using the <code>--zero-fill-buffers</code> command line option to\nforce all newly allocated <code>Buffer</code> instances created using either\n<code>new Buffer(size)</code>, <code>Buffer.allocUnsafe(size)</code>, <code>Buffer.allocUnsafeSlow(size)</code>\nor <code>new SlowBuffer(size)</code> to be <em>automatically zero-filled</em> upon creation. Use\nof this flag <em>changes the default behavior</em> of these methods and <em>can have a\nsignificant impact</em> on performance. Use of the <code>--zero-fill-buffers</code> option is\nrecommended only when absolutely necessary to enforce that newly allocated\n<code>Buffer</code> instances cannot contain potentially sensitive data.</p>\n<pre><code>$ node --zero-fill-buffers\n&gt; Buffer.allocUnsafe(5);\n&lt;Buffer 00 00 00 00 00&gt;\n</code></pre><h3>What makes <code>Buffer.allocUnsafe(size)</code> and <code>Buffer.allocUnsafeSlow(size)</code> &quot;unsafe&quot;?<span><a class=\"mark\" href=\"#buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe\" id=\"buffer_what_makes_buffer_allocunsafe_size_and_buffer_allocunsafeslow_size_unsafe\">#</a></span></h3>\n<p>When calling <code>Buffer.allocUnsafe()</code> (and <code>Buffer.allocUnsafeSlow()</code>), the\nsegment of allocated memory is <em>uninitialized</em> (it is not zeroed-out). While\nthis design makes the allocation of memory quite fast, the allocated segment of\nmemory might contain old data that is potentially sensitive. Using a <code>Buffer</code>\ncreated by <code>Buffer.allocUnsafe()</code> without <em>completely</em> overwriting the memory\ncan allow this old data to be leaked when the <code>Buffer</code> memory is read.</p>\n<p>While there are clear performance advantages to using <code>Buffer.allocUnsafe()</code>,\nextra care <em>must</em> be taken in order to avoid introducing security\nvulnerabilities into an application.</p>\n<h2>Buffers and Character Encodings<span><a class=\"mark\" href=\"#buffer_buffers_and_character_encodings\" id=\"buffer_buffers_and_character_encodings\">#</a></span></h2>\n<p>Buffers are commonly used to represent sequences of encoded characters\nsuch as UTF8, UCS2, Base64 or even Hex-encoded data. It is possible to\nconvert back and forth between Buffers and ordinary JavaScript string objects\nby using an explicit encoding method.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;hello world&#39;, &#39;ascii&#39;);\nconsole.log(buf.toString(&#39;hex&#39;));\n  // prints: 68656c6c6f20776f726c64\nconsole.log(buf.toString(&#39;base64&#39;));\n  // prints: aGVsbG8gd29ybGQ=\n</code></pre>\n<p>The character encodings currently supported by Node.js include:</p>\n<ul>\n<li><p><code>&#39;ascii&#39;</code> - for 7-bit ASCII data only.  This encoding method is very fast and\nwill strip the high bit if set.</p>\n</li>\n<li><p><code>&#39;utf8&#39;</code> - Multibyte encoded Unicode characters. Many web pages and other\ndocument formats use UTF-8.</p>\n</li>\n<li><p><code>&#39;utf16le&#39;</code> - 2 or 4 bytes, little-endian encoded Unicode characters.\nSurrogate pairs (U+10000 to U+10FFFF) are supported.</p>\n</li>\n<li><p><code>&#39;ucs2&#39;</code> - Alias of <code>&#39;utf16le&#39;</code>.</p>\n</li>\n<li><p><code>&#39;base64&#39;</code> - Base64 string encoding. When creating a buffer from a string,\nthis encoding will also correctly accept &quot;URL and Filename Safe Alphabet&quot; as\nspecified in <a href=\"https://tools.ietf.org/html/rfc4648#section-5\">RFC 4648, Section 5</a>.</p>\n</li>\n<li><p><code>&#39;binary&#39;</code> - A way of encoding the buffer into a one-byte (<code>latin-1</code>)\nencoded string. The string <code>&#39;latin-1&#39;</code> is not supported. Instead, pass\n<code>&#39;binary&#39;</code> to use <code>&#39;latin-1&#39;</code> encoding.</p>\n</li>\n<li><p><code>&#39;hex&#39;</code> - Encode each byte as two hexadecimal characters.</p>\n</li>\n</ul>\n<h2>Buffers and TypedArray<span><a class=\"mark\" href=\"#buffer_buffers_and_typedarray\" id=\"buffer_buffers_and_typedarray\">#</a></span></h2>\n<p>Buffers are also <code>Uint8Array</code> TypedArray instances. However, there are subtle\nincompatibilities with the TypedArray specification in ECMAScript 2015. For\ninstance, while <code>ArrayBuffer#slice()</code> creates a copy of the slice,\nthe implementation of <a href=\"#buffer_buf_slice_start_end\"><code>Buffer#slice()</code></a> creates a view over the\nexisting Buffer without copying, making <code>Buffer#slice()</code> far more efficient.</p>\n<p>It is also possible to create new TypedArray instances from a <code>Buffer</code> with the\nfollowing caveats:</p>\n<ol>\n<li><p>The <code>Buffer</code> object&#39;s memory is copied to the TypedArray, not shared.</p>\n</li>\n<li><p>The <code>Buffer</code> object&#39;s memory is interpreted as an array of distinct\nelements, and not as a byte array of the target type. That is,\n<code>new Uint32Array(Buffer.from([1,2,3,4]))</code> creates a 4-element <code>Uint32Array</code>\nwith elements <code>[1,2,3,4]</code>, not a <code>Uint32Array</code> with a single element\n<code>[0x1020304]</code> or <code>[0x4030201]</code>.</p>\n</li>\n</ol>\n<p>It is possible to create a new <code>Buffer</code> that shares the same allocated memory as\na TypedArray instance by using the TypeArray object&#39;s <code>.buffer</code> property:</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf1 = Buffer.from(arr); // copies the buffer\nconst buf2 = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf1);\n  // Prints: &lt;Buffer 88 a0&gt;, copied buffer has only two elements\nconsole.log(buf2);\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\n\narr[1] = 6000;\nconsole.log(buf1);\n  // Prints: &lt;Buffer 88 a0&gt;\nconsole.log(buf2);\n  // Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n<p>Note that when creating a <code>Buffer</code> using the TypedArray&#39;s <code>.buffer</code>, it is\npossible to use only a portion of the underlying <code>ArrayBuffer</code> by passing in\n<code>byteOffset</code> and <code>length</code> parameters:</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(20);\nconst buf = Buffer.from(arr.buffer, 0, 16);\nconsole.log(buf.length);\n  // Prints: 16\n</code></pre>\n<p>The <code>Buffer.from()</code> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> (e.g.<code>Uint8Array.from()</code>) have\ndifferent signatures and implementations. Specifically, the TypedArray variants\naccept a second argument that is a mapping function that is invoked on every\nelement of the typed array:</p>\n<ul>\n<li><code>TypedArray.from(source[, mapFn[, thisArg]])</code></li>\n</ul>\n<p>The <code>Buffer.from()</code> method, however, does not support the use of a mapping\nfunction:</p>\n<ul>\n<li><a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a></li>\n<li><a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a></li>\n<li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a></li>\n<li><a href=\"#buffer_class_method_buffer_from_str_encoding\"><code>Buffer.from(str[, encoding])</code></a></li>\n</ul>\n<h2>Buffers and ES6 iteration<span><a class=\"mark\" href=\"#buffer_buffers_and_es6_iteration\" id=\"buffer_buffers_and_es6_iteration\">#</a></span></h2>\n<p>Buffers can be iterated over using the ECMAScript 2015 (ES6) <code>for..of</code> syntax:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3]);\n\nfor (var b of buf)\n  console.log(b)\n\n// Prints:\n//   1\n//   2\n//   3\n</code></pre>\n<p>Additionally, the <a href=\"#buffer_buf_values\"><code>buf.values()</code></a>, <a href=\"#buffer_buf_keys\"><code>buf.keys()</code></a>, and\n<a href=\"#buffer_buf_entries\"><code>buf.entries()</code></a> methods can be used to create iterators.</p>\n<h2>Class: Buffer<span><a class=\"mark\" href=\"#buffer_class_buffer\" id=\"buffer_class_buffer\">#</a></span></h2>\n<p>The Buffer class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.</p>\n<h3>new Buffer(array)<span><a class=\"mark\" href=\"#buffer_new_buffer_array\" id=\"buffer_new_buffer_array\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a>\ninstead.</pre><ul>\n<li><code>array</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n<p>Allocates a new Buffer using an <code>array</code> of octets.</p>\n<pre><code class=\"lang-js\">const buf = new Buffer([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // [&#39;b&#39;,&#39;u&#39;,&#39;f&#39;,&#39;f&#39;,&#39;e&#39;,&#39;r&#39;]\n</code></pre>\n<h3>new Buffer(buffer)<span><a class=\"mark\" href=\"#buffer_new_buffer_buffer\" id=\"buffer_new_buffer_buffer\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a>\ninstead.</pre><ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;buffer&#39;);\nconst buf2 = new Buffer(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // &#39;auffer&#39;\nconsole.log(buf2.toString());\n  // &#39;buffer&#39; (copy is not changed)\n</code></pre>\n<h3>new Buffer(arrayBuffer[, byteOffset [, length]])<span><a class=\"mark\" href=\"#buffer_new_buffer_arraybuffer_byteoffset_length\" id=\"buffer_new_buffer_arraybuffer_byteoffset_length\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a>\ninstead.</pre><ul>\n<li><code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> The <code>.buffer</code> property of a <code>TypedArray</code> or a\n<code>new ArrayBuffer()</code></li>\n<li><code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>0</code></li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>arrayBuffer.length - byteOffset</code></li>\n</ul>\n<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\nthe newly created Buffer will share the same allocated memory as the\nTypedArray.</p>\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = new Buffer(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\n\n// changing the TypdArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n<h3>new Buffer(size)<span><a class=\"mark\" href=\"#buffer_new_buffer_size\" id=\"buffer_new_buffer_size\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> instead (also\nsee <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a>).</pre><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than\nor equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href=\"errors.html#errors_class_rangeerror\"><code>RangeError</code></a> is\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\n0 is specified.</p>\n<p>Unlike <code>ArrayBuffers</code>, the underlying memory for <code>Buffer</code> instances created in\nthis way is <em>not initialized</em>. The contents of a newly created <code>Buffer</code> are\nunknown and <em>could contain sensitive data</em>. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize\na <code>Buffer</code> to zeroes.</p>\n<pre><code class=\"lang-js\">const buf = new Buffer(5);\nconsole.log(buf);\n  // &lt;Buffer 78 e0 82 02 01&gt;\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n<h3>new Buffer(str[, encoding])<span><a class=\"mark\" href=\"#buffer_new_buffer_str_encoding\" id=\"buffer_new_buffer_str_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated:\nUse <a href=\"#buffer_class_method_buffer_from_str_encoding\"><code>Buffer.from(str[, encoding])</code></a> instead.</pre><ul>\n<li><code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> string to encode.</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n</ul>\n<p>Creates a new Buffer containing the given JavaScript string <code>str</code>. If\nprovided, the <code>encoding</code> parameter identifies the strings character encoding.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;this is a t\u00e9st&#39;);\nconsole.log(buf1.toString());\n  // prints: this is a t\u00e9st\nconsole.log(buf1.toString(&#39;ascii&#39;));\n  // prints: this is a tC)st\n\nconst buf2 = new Buffer(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\nconsole.log(buf2.toString());\n  // prints: this is a t\u00e9st\n</code></pre>\n<h3>Class Method: Buffer.alloc(size[, fill[, encoding]])<span><a class=\"mark\" href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\" id=\"buffer_class_method_buffer_alloc_size_fill_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>fill</code> <span class=\"type\">&lt;Value&gt;</span> Default: <code>undefined</code></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>utf8</code></li>\n</ul>\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the\n<code>Buffer</code> will be <em>zero-filled</em>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(5);\nconsole.log(buf);\n  // &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n<p>The <code>size</code> must be less than or equal to the value of\n<code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is\n<code>(2^31)-1</code>). Otherwise, a <a href=\"errors.html#errors_class_rangeerror\"><code>RangeError</code></a> is thrown. A zero-length Buffer will\nbe created if a <code>size</code> less than or equal to 0 is specified.</p>\n<p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling\n<code>buf.fill(fill)</code>. See <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill()</code></a> for more information.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(5, &#39;a&#39;);\nconsole.log(buf);\n  // &lt;Buffer 61 61 61 61 61&gt;\n</code></pre>\n<p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be\ninitialized by calling <code>buf.fill(fill, encoding)</code>. For example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;);\nconsole.log(buf);\n  // &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\n</code></pre>\n<p>Calling <code>Buffer.alloc(size)</code> can be significantly slower than the alternative\n<code>Buffer.allocUnsafe(size)</code> but ensures that the newly created <code>Buffer</code> instance\ncontents will <em>never contain sensitive data</em>.</p>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n<h3>Class Method: Buffer.allocUnsafe(size)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_allocunsafe_size\" id=\"buffer_class_method_buffer_allocunsafe_size\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Allocates a new <em>non-zero-filled</em> <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must\nbe less than or equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href=\"errors.html#errors_class_rangeerror\"><code>RangeError</code></a> is\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\n0 is specified.</p>\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize such\n<code>Buffer</code> instances to zeroes.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // &lt;Buffer 78 e0 82 02 01&gt;\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n<p>Note that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of\nsize <code>Buffer.poolSize</code> that is used as a pool for the fast allocation of new\n<code>Buffer</code> instances created using <code>Buffer.allocUnsafe(size)</code> (and the deprecated\n<code>new Buffer(size)</code> constructor) only when <code>size</code> is less than or equal to\n<code>Buffer.poolSize &gt;&gt; 1</code> (floor of <code>Buffer.poolSize</code> divided by two). The default\nvalue of <code>Buffer.poolSize</code> is <code>8192</code> but can be modified.</p>\n<p>Use of this pre-allocated internal memory pool is a key difference between\ncalling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.\nSpecifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal Buffer\npool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal\nBuffer pool if <code>size</code> is less than or equal to half <code>Buffer.poolSize</code>. The\ndifference is subtle but can be important when an application requires the\nadditional performance that <code>Buffer.allocUnsafe(size)</code> provides.</p>\n<h3>Class Method: Buffer.allocUnsafeSlow(size)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_allocunsafeslow_size\" id=\"buffer_class_method_buffer_allocunsafeslow_size\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Allocates a new <em>non-zero-filled</em> and non-pooled <code>Buffer</code> of <code>size</code> bytes.  The\n<code>size</code> must be less than or equal to the value of\n<code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is\n<code>(2^31)-1</code>). Otherwise, a <a href=\"errors.html#errors_class_rangeerror\"><code>RangeError</code></a> is thrown. A zero-length Buffer will\nbe created if a <code>size</code> less than or equal to 0 is specified.</p>\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize such\n<code>Buffer</code> instances to zeroes.</p>\n<p>When using <code>Buffer.allocUnsafe()</code> to allocate new <code>Buffer</code> instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n<code>Buffer</code>. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany <code>Persistent</code> objects.</p>\n<p>However, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using <code>Buffer.allocUnsafeSlow()</code> then\ncopy out the relevant bits.</p>\n<pre><code class=\"lang-js\">// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n</code></pre>\n<p>Use of <code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort <em>after</em>\na developer has observed undue memory retention in their applications.</p>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n<h3>Class Method: Buffer.byteLength(string[, encoding])<span><a class=\"mark\" href=\"#buffer_class_method_buffer_bytelength_string_encoding\" id=\"buffer_class_method_buffer_bytelength_string_encoding\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;TypedArray&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Returns the actual byte length of a string. This is not the same as\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String.prototype.length</code></a> since that returns the number of <em>characters</em> in\na string.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const str = &#39;\\u00bd + \\u00bc = \\u00be&#39;;\n\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, &#39;utf8&#39;)} bytes`);\n\n// \u00bd + \u00bc = \u00be: 9 characters, 12 bytes\n</code></pre>\n<p>When <code>string</code> is a <code>Buffer</code>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>/<code>ArrayBuffer</code>,\nreturns the actual byte length.</p>\n<p>Otherwise, converts to <code>String</code> and returns the byte length of string.</p>\n<h3>Class Method: Buffer.compare(buf1, buf2)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_compare_buf1_buf2\" id=\"buffer_class_method_buffer_compare_buf1_buf2\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.13</span>\n</div><ul>\n<li><code>buf1</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>buf2</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of\nBuffers. This is equivalent is calling <a href=\"#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\"><code>buf1.compare(buf2)</code></a>.</p>\n<pre><code class=\"lang-js\">const arr = [Buffer.from(&#39;1234&#39;), Buffer.from(&#39;0123&#39;)];\narr.sort(Buffer.compare);\n</code></pre>\n<h3>Class Method: Buffer.concat(list[, totalLength])<span><a class=\"mark\" href=\"#buffer_class_method_buffer_concat_list_totallength\" id=\"buffer_class_method_buffer_concat_list_totallength\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.11</span>\n</div><ul>\n<li><code>list</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of Buffer objects to concat</li>\n<li><code>totalLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Total length of the Buffers in the list\nwhen concatenated</li>\n<li>Return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Returns a new Buffer which is the result of concatenating all the Buffers in\nthe <code>list</code> together.</p>\n<p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length\nBuffer is returned.</p>\n<p>If <code>totalLength</code> is not provided, it is calculated from the Buffers in the\n<code>list</code>. This, however, adds an additional loop to the function, so it is faster\nto provide the length explicitly.</p>\n<p>Example: build a single Buffer from a list of three Buffers:</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\nconsole.log(totalLength);\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\nconsole.log(bufA);\nconsole.log(bufA.length);\n\n// 42\n// &lt;Buffer 00 00 00 00 ...&gt;\n// 42\n</code></pre>\n<h3>Class Method: Buffer.from(array)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_from_array\" id=\"buffer_class_method_buffer_from_array\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v3.0.0</span>\n</div><ul>\n<li><code>array</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // [&#39;b&#39;,&#39;u&#39;,&#39;f&#39;,&#39;f&#39;,&#39;e&#39;,&#39;r&#39;]\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.</p>\n<h3>Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])<span><a class=\"mark\" href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\" id=\"buffer_class_method_buffer_from_arraybuffer_byteoffset_length\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li><code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> The <code>.buffer</code> property of a <code>TypedArray</code> or\na <code>new ArrayBuffer()</code></li>\n<li><code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>0</code></li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>arrayBuffer.length - byteOffset</code></li>\n</ul>\n<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\nthe newly created <code>Buffer</code> will share the same allocated memory as the\nTypedArray.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <code>ArrayBuffer</code>.</p>\n<h3>Class Method: Buffer.from(buffer)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_from_buffer\" id=\"buffer_class_method_buffer_from_buffer\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v3.0.0</span>\n</div><ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;buffer&#39;);\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // &#39;auffer&#39;\nconsole.log(buf2.toString());\n  // &#39;buffer&#39; (copy is not changed)\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.</p>\n<h3>Class Method: Buffer.from(str[, encoding])<span><a class=\"mark\" href=\"#buffer_class_method_buffer_from_str_encoding\" id=\"buffer_class_method_buffer_from_str_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li><code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> String to encode.</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Encoding to use, Default: <code>&#39;utf8&#39;</code></li>\n</ul>\n<p>Creates a new <code>Buffer</code> containing the given JavaScript string <code>str</code>. If\nprovided, the <code>encoding</code> parameter identifies the character encoding.\nIf not provided, <code>encoding</code> defaults to <code>&#39;utf8&#39;</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;this is a t\u00e9st&#39;);\nconsole.log(buf1.toString());\n  // prints: this is a t\u00e9st\nconsole.log(buf1.toString(&#39;ascii&#39;));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\nconsole.log(buf2.toString());\n  // prints: this is a t\u00e9st\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>str</code> is not a string.</p>\n<h3>Class Method: Buffer.isBuffer(obj)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_isbuffer_obj\" id=\"buffer_class_method_buffer_isbuffer_obj\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>obj</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>Returns &#39;true&#39; if <code>obj</code> is a Buffer.</p>\n<h3>Class Method: Buffer.isEncoding(encoding)<span><a class=\"mark\" href=\"#buffer_class_method_buffer_isencoding_encoding\" id=\"buffer_class_method_buffer_isencoding_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.1</span>\n</div><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding string to test</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>Returns true if the <code>encoding</code> is a valid encoding argument, or false\notherwise.</p>\n<h3>buf[index]<span><a class=\"mark\" href=\"#buffer_buf_index\" id=\"buffer_buf_index\">#</a></span></h3>\n<div class=\"api_metadata\">\n</div><p>The index operator <code>[index]</code> can be used to get and set the octet at position\n<code>index</code> in the Buffer. The values refer to individual bytes, so the legal value\nrange is between <code>0x00</code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p>\n<p>Example: copy an ASCII string into a Buffer, one byte at a time:</p>\n<pre><code class=\"lang-js\">const str = &quot;Node.js&quot;;\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\nconsole.log(buf.toString(&#39;ascii&#39;));\n  // Prints: Node.js\n</code></pre>\n<h3>buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])<span><a class=\"mark\" href=\"#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\" id=\"buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.13</span>\n</div><ul>\n<li><code>target</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>targetStart</code> <span class=\"type\">&lt;Integer&gt;</span> The offset within <code>target</code> at which to begin\ncomparison. default = <code>0</code>.</li>\n<li><code>targetEnd</code> <span class=\"type\">&lt;Integer&gt;</span> The offset with <code>target</code> at which to end comparison.\nIgnored when <code>targetStart</code> is <code>undefined</code>. default = <code>target.byteLength</code>.</li>\n<li><code>sourceStart</code> <span class=\"type\">&lt;Integer&gt;</span> The offset within <code>buf</code> at which to begin comparison.\nIgnored when <code>targetStart</code> is <code>undefined</code>. default = <code>0</code></li>\n<li><code>sourceEnd</code> <span class=\"type\">&lt;Integer&gt;</span> The offset within <code>buf</code> at which to end comparison.\nIgnored when <code>targetStart</code> is <code>undefined</code>. default = <code>buf.byteLength</code>.</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Compares two Buffer instances and returns a number indicating whether <code>buf</code>\ncomes before, after, or is the same as the <code>target</code> in sort order.\nComparison is based on the actual sequence of bytes in each Buffer.</p>\n<ul>\n<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>\n<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>\n<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>\n</ul>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;BCD&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\nconsole.log(buf1.compare(buf1));\n  // Prints: 0\nconsole.log(buf1.compare(buf2));\n  // Prints: -1\nconsole.log(buf1.compare(buf3));\n  // Prints: 1\nconsole.log(buf2.compare(buf1));\n  // Prints: 1\nconsole.log(buf2.compare(buf3));\n  // Prints: 1\n\n[buf1, buf2, buf3].sort(Buffer.compare);\n  // produces sort order [buf1, buf3, buf2]\n</code></pre>\n<p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>\narguments can be used to limit the comparison to specific ranges within the two\n<code>Buffer</code> objects.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n  // Prints: 0\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n  // Prints: -1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n  // Prints: 1\n</code></pre>\n<p>A <code>RangeError</code> will be thrown if: <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>,\n<code>targetEnd &gt; target.byteLength</code> or <code>sourceEnd &gt; source.byteLength</code>.</p>\n<h3>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])<span><a class=\"mark\" href=\"#buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend\" id=\"buffer_buf_copy_targetbuffer_targetstart_sourcestart_sourceend\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>targetBuffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Buffer to copy into</li>\n<li><code>targetStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>sourceStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>sourceEnd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The number of bytes copied.</li>\n</ul>\n</div><p>Copies data from a region of this Buffer to a region in the target Buffer even\nif the target memory region overlaps with the source.</p>\n<p>Example: build two Buffers, then copy <code>buf1</code> from byte 16 through byte 19\ninto <code>buf2</code>, starting at the 8th byte in <code>buf2</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill(&#39;!&#39;);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n}\n\nbuf1.copy(buf2, 8, 16, 20);\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, 25));\n  // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\n</code></pre>\n<p>Example: Build a single Buffer, then copy data from one region to an overlapping\nregion in the same Buffer</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf[i] = i + 97; // 97 is ASCII a\n}\n\nbuf.copy(buf, 0, 4, 10);\nconsole.log(buf.toString());\n\n// efghijghijklmnopqrstuvwxyz\n</code></pre>\n<h3>buf.entries()<span><a class=\"mark\" href=\"#buffer_buf_entries\" id=\"buffer_buf_entries\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.1.0</span>\n</div><ul>\n<li>Return: <span class=\"type\">&lt;Iterator&gt;</span></li>\n</ul>\n<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of <code>[index, byte]</code> pairs from the Buffer\ncontents.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\nfor (var pair of buf.entries()) {\n  console.log(pair);\n}\n// prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\n</code></pre>\n<h3>buf.equals(otherBuffer)<span><a class=\"mark\" href=\"#buffer_buf_equals_otherbuffer\" id=\"buffer_buf_equals_otherbuffer\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><ul>\n<li><code>otherBuffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>Returns a boolean indicating whether <code>this</code> and <code>otherBuffer</code> have exactly the\nsame bytes.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;414243&#39;, &#39;hex&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\nconsole.log(buf1.equals(buf2));\n  // Prints: true\nconsole.log(buf1.equals(buf3));\n  // Prints: false\n</code></pre>\n<h3>buf.fill(value[, offset[, end]][, encoding])<span><a class=\"mark\" href=\"#buffer_buf_fill_value_offset_end_encoding\" id=\"buffer_buf_fill_value_offset_end_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buf.length</code></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Fills the Buffer with the specified value. If the <code>offset</code> (defaults to <code>0</code>)\nand <code>end</code> (defaults to <code>buf.length</code>) are not given the entire buffer will be\nfilled. The method returns a reference to the Buffer, so calls can be chained.\nThis is meant as a small simplification to creating a Buffer. Allowing the\ncreation and fill of the Buffer to be done on a single line:</p>\n<pre><code class=\"lang-js\">const b = Buffer.allocUnsafe(50).fill(&#39;h&#39;);\nconsole.log(b.toString());\n  // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n</code></pre>\n<p><code>encoding</code> is only relevant if <code>value</code> is a string. Otherwise it is ignored.\n<code>value</code> is coerced to a <code>uint32</code> value if it is not a String or Number.</p>\n<p>The <code>fill()</code> operation writes bytes into the Buffer dumbly. If the final write\nfalls in between a multi-byte character then whatever bytes fit into the buffer\nare written.</p>\n<pre><code class=\"lang-js\">Buffer(3).fill(&#39;\\u0222&#39;);\n  // Prints: &lt;Buffer c8 a2 c8&gt;\n</code></pre>\n<h3>buf.indexOf(value[, byteOffset][, encoding])<span><a class=\"mark\" href=\"#buffer_buf_indexof_value_byteoffset_encoding\" id=\"buffer_buf_indexof_value_byteoffset_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.5.0</span>\n</div><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Operates similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array#indexOf()</code></a> in that it returns either the\nstarting index position of <code>value</code> in Buffer or <code>-1</code> if the Buffer does not\ncontain <code>value</code>. The <code>value</code> can be a String, Buffer or Number. Strings are by\ndefault interpreted as UTF8. Buffers will use the entire Buffer (to compare a\npartial Buffer use <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a>).  Numbers can range from 0 to 255.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\nbuf.indexOf(&#39;this&#39;);\n  // returns 0\nbuf.indexOf(&#39;is&#39;);\n  // returns 2\nbuf.indexOf(Buffer.from(&#39;a buffer&#39;));\n  // returns 8\nbuf.indexOf(97); // ascii for &#39;a&#39;\n  // returns 8\nbuf.indexOf(Buffer.from(&#39;a buffer example&#39;));\n  // returns -1\nbuf.indexOf(Buffer.from(&#39;a buffer example&#39;).slice(0,8));\n  // returns 8\n\nconst utf16Buffer = Buffer.from(&#39;\\u039a\\u0391\\u03a3\\u03a3\\u0395&#39;, &#39;ucs2&#39;);\n\nutf16Buffer.indexOf(&#39;\\u03a3&#39;,  0, &#39;ucs2&#39;);\n  // returns 4\nutf16Buffer.indexOf(&#39;\\u03a3&#39;, -4, &#39;ucs2&#39;);\n  // returns 6\n</code></pre>\n<h3>buf.includes(value[, byteOffset][, encoding])<span><a class=\"mark\" href=\"#buffer_buf_includes_value_byteoffset_encoding\" id=\"buffer_buf_includes_value_byteoffset_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.3.0</span>\n</div><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>Operates similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array#includes()</code></a>. The <code>value</code> can be a String, Buffer\nor Number. Strings are interpreted as UTF8 unless overridden with the\n<code>encoding</code> argument. Buffers will use the entire Buffer (to compare a partial\nBuffer use <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a>). Numbers can range from 0 to 255.</p>\n<p>The <code>byteOffset</code> indicates the index in <code>buf</code> where searching begins.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\nbuf.includes(&#39;this&#39;);\n  // returns true\nbuf.includes(&#39;is&#39;);\n  // returns true\nbuf.includes(Buffer.from(&#39;a buffer&#39;));\n  // returns true\nbuf.includes(97); // ascii for &#39;a&#39;\n  // returns true\nbuf.includes(Buffer.from(&#39;a buffer example&#39;));\n  // returns false\nbuf.includes(Buffer.from(&#39;a buffer example&#39;).slice(0,8));\n  // returns true\nbuf.includes(&#39;this&#39;, 4);\n  // returns false\n</code></pre>\n<h3>buf.keys()<span><a class=\"mark\" href=\"#buffer_buf_keys\" id=\"buffer_buf_keys\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.1.0</span>\n</div><ul>\n<li>Return: <span class=\"type\">&lt;Iterator&gt;</span></li>\n</ul>\n<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of Buffer keys (indices).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\nfor (var key of buf.keys()) {\n  console.log(key);\n}\n// prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\n</code></pre>\n<h3>buf.lastIndexOf(value[, byteOffset][, encoding])<span><a class=\"mark\" href=\"#buffer_buf_lastindexof_value_byteoffset_encoding\" id=\"buffer_buf_lastindexof_value_byteoffset_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buf.length</code></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Identical to <a href=\"#buffer_buf_indexof_value_byteoffset_encoding\"><code>Buffer#indexOf()</code></a>, but searches the Buffer from back to front\ninstead of front to back. Returns the starting index position of <code>value</code> in\nBuffer or <code>-1</code> if the Buffer does not contain <code>value</code>. The <code>value</code> can be a\nString, Buffer or Number. Strings are by default interpreted as UTF8. If\n<code>byteOffset</code> is provided, will return the last match that begins at or before\n<code>byteOffset</code>.</p>\n<pre><code class=\"lang-js\">const buf = new Buffer(&#39;this buffer is a buffer&#39;);\n\nbuf.lastIndexOf(&#39;this&#39;);\n  // returns 0\nbuf.lastIndexOf(&#39;buffer&#39;);\n  // returns 17\nbuf.lastIndexOf(new Buffer(&#39;buffer&#39;));\n  // returns 17\nbuf.lastIndexOf(97); // ascii for &#39;a&#39;\n  // returns 15\nbuf.lastIndexOf(new Buffer(&#39;yolo&#39;));\n  // returns -1\nbuf.lastIndexOf(&#39;buffer&#39;, 5)\n  // returns 5\nbuf.lastIndexOf(&#39;buffer&#39;, 4)\n  // returns -1\n\nconst utf16Buffer = new Buffer(&#39;\\u039a\\u0391\\u03a3\\u03a3\\u0395&#39;, &#39;ucs2&#39;);\n\nutf16Buffer.lastIndexOf(&#39;\\u03a3&#39;, null, &#39;ucs2&#39;);\n  // returns 6\nutf16Buffer.lastIndexOf(&#39;\\u03a3&#39;, -5, &#39;ucs2&#39;);\n  // returns 4\n</code></pre>\n<h3>buf.length<span><a class=\"mark\" href=\"#buffer_buf_length\" id=\"buffer_buf_length\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Returns the amount of memory allocated for the Buffer in number of bytes. Note\nthat this does not necessarily reflect the amount of usable data within the\nBuffer. For instance, in the example below, a Buffer with 1234 bytes is\nallocated, but only 11 ASCII bytes are written.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(1234);\n\nconsole.log(buf.length);\n  // Prints: 1234\n\nbuf.write(&#39;some string&#39;, 0, &#39;ascii&#39;);\nconsole.log(buf.length);\n  // Prints: 1234\n</code></pre>\n<p>While the <code>length</code> property is not immutable, changing the value of <code>length</code>\ncan result in undefined and inconsistent behavior. Applications that wish to\nmodify the length of a Buffer should therefore treat <code>length</code> as read-only and\nuse <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a> to create a new Buffer.</p>\n<pre><code class=\"lang-js\">var buf = Buffer.allocUnsafe(10);\nbuf.write(&#39;abcdefghj&#39;, 0, &#39;ascii&#39;);\nconsole.log(buf.length);\n  // Prints: 10\nbuf = buf.slice(0,5);\nconsole.log(buf.length);\n  // Prints: 5\n</code></pre>\n<h3>buf.readDoubleBE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readdoublebe_offset_noassert\" id=\"buffer_buf_readdoublebe_offset_noassert\">#</a></span></h3>\n<h3>buf.readDoubleLE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readdoublele_offset_noassert\" id=\"buffer_buf_readdoublele_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 8</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads a 64-bit double from the Buffer at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,2,3,4,5,6,7,8]);\n\nbuf.readDoubleBE();\n  // Returns: 8.20788039913184e-304\nbuf.readDoubleLE();\n  // Returns: 5.447603722011605e-270\nbuf.readDoubleLE(1);\n  // throws RangeError: Index out of range\n\nbuf.readDoubleLE(1, true); // Warning: reads passed end of buffer!\n  // Segmentation fault! don&#39;t do this!\n</code></pre>\n<h3>buf.readFloatBE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readfloatbe_offset_noassert\" id=\"buffer_buf_readfloatbe_offset_noassert\">#</a></span></h3>\n<h3>buf.readFloatLE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readfloatle_offset_noassert\" id=\"buffer_buf_readfloatle_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads a 32-bit float from the Buffer at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,2,3,4]);\n\nbuf.readFloatBE();\n  // Returns: 2.387939260590663e-38\nbuf.readFloatLE();\n  // Returns: 1.539989614439558e-36\nbuf.readFloatLE(1);\n  // throws RangeError: Index out of range\n\nbuf.readFloatLE(1, true); // Warning: reads passed end of buffer!\n  // Segmentation fault! don&#39;t do this!\n</code></pre>\n<h3>buf.readInt8(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readint8_offset_noassert\" id=\"buffer_buf_readint8_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads a signed 8-bit integer from the Buffer at the specified <code>offset</code>.</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,-2,3,4]);\n\nbuf.readInt8(0);\n  // returns 1\nbuf.readInt8(1);\n  // returns -2\n</code></pre>\n<h3>buf.readInt16BE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readint16be_offset_noassert\" id=\"buffer_buf_readint16be_offset_noassert\">#</a></span></h3>\n<h3>buf.readInt16LE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readint16le_offset_noassert\" id=\"buffer_buf_readint16le_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads a signed 16-bit integer from the Buffer at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,-2,3,4]);\n\nbuf.readInt16BE();\n  // returns 510\nbuf.readInt16LE(1);\n  // returns 1022\n</code></pre>\n<h3>buf.readInt32BE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readint32be_offset_noassert\" id=\"buffer_buf_readint32be_offset_noassert\">#</a></span></h3>\n<h3>buf.readInt32LE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readint32le_offset_noassert\" id=\"buffer_buf_readint32le_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads a signed 32-bit integer from the Buffer at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,-2,3,4]);\n\nbuf.readInt32BE();\n  // returns 33424132\nbuf.readInt32LE();\n  // returns 67370497\nbuf.readInt32LE(1);\n  // throws RangeError: Index out of range\n</code></pre>\n<h3>buf.readIntBE(offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readintbe_offset_bytelength_noassert\" id=\"buffer_buf_readintbe_offset_bytelength_noassert\">#</a></span></h3>\n<h3>buf.readIntLE(offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readintle_offset_bytelength_noassert\" id=\"buffer_buf_readintle_offset_bytelength_noassert\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>\n<li><code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy. For example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\nbuf.writeUInt16LE(0x90ab, 0);\nbuf.writeUInt32LE(0x12345678, 2);\nbuf.readIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\n// Returns: &#39;1234567890ab&#39;\n\nbuf.readIntBE(0, 6).toString(16);\n// Returns: -546f87a9cbee\n</code></pre>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<h3>buf.readUInt8(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuint8_offset_noassert\" id=\"buffer_buf_readuint8_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads an unsigned 8-bit integer from the Buffer at the specified <code>offset</code>.</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1,-2,3,4]);\n\nbuf.readUInt8(0);\n  // returns 1\nbuf.readUInt8(1);\n  // returns 254\n</code></pre>\n<h3>buf.readUInt16BE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuint16be_offset_noassert\" id=\"buffer_buf_readuint16be_offset_noassert\">#</a></span></h3>\n<h3>buf.readUInt16LE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuint16le_offset_noassert\" id=\"buffer_buf_readuint16le_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads an unsigned 16-bit integer from the Buffer at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian,\n<code>readUInt16LE()</code> returns little endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\n\nbuf.readUInt16BE(0);\n  // Returns: 0x0304\nbuf.readUInt16LE(0);\n  // Returns: 0x0403\nbuf.readUInt16BE(1);\n  // Returns: 0x0423\nbuf.readUInt16LE(1);\n  // Returns: 0x2304\nbuf.readUInt16BE(2);\n  // Returns: 0x2342\nbuf.readUInt16LE(2);\n  // Returns: 0x4223\n</code></pre>\n<h3>buf.readUInt32BE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuint32be_offset_noassert\" id=\"buffer_buf_readuint32be_offset_noassert\">#</a></span></h3>\n<h3>buf.readUInt32LE(offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuint32le_offset_noassert\" id=\"buffer_buf_readuint32le_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Reads an unsigned 32-bit integer from the Buffer at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).</p>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\n\nbuf.readUInt32BE(0);\n  // Returns: 0x03042342\nconsole.log(buf.readUInt32LE(0));\n  // Returns: 0x42230403\n</code></pre>\n<h3>buf.readUIntBE(offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuintbe_offset_bytelength_noassert\" id=\"buffer_buf_readuintbe_offset_bytelength_noassert\">#</a></span></h3>\n<h3>buf.readUIntLE(offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_readuintle_offset_bytelength_noassert\" id=\"buffer_buf_readuintle_offset_bytelength_noassert\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><ul>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>\n<li><code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy. For example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\nbuf.writeUInt16LE(0x90ab, 0);\nbuf.writeUInt32LE(0x12345678, 2);\nbuf.readUIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\n// Returns: &#39;1234567890ab&#39;\n\nbuf.readUIntBE(0, 6).toString(16);\n// Returns: ab9078563412\n</code></pre>\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\n<code>offset</code> to be beyond the end of the Buffer.</p>\n<h3>buf.slice([start[, end]])<span><a class=\"mark\" href=\"#buffer_buf_slice_start_end\" id=\"buffer_buf_slice_start_end\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>\n<li>Return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n</div><p>Returns a new Buffer that references the same memory as the original, but\noffset and cropped by the <code>start</code> and <code>end</code> indices.</p>\n<p><strong>Note that modifying the new Buffer slice will modify the memory in the\noriginal Buffer because the allocated memory of the two objects overlap.</strong></p>\n<p>Example: build a Buffer with the ASCII alphabet, take a slice, then modify one\nbyte from the original Buffer.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.allocUnsafe(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n}\n\nconst buf2 = buf1.slice(0, 3);\nbuf2.toString(&#39;ascii&#39;, 0, buf2.length);\n  // Returns: &#39;abc&#39;\nbuf1[0] = 33;\nbuf2.toString(&#39;ascii&#39;, 0, buf2.length);\n  // Returns : &#39;!bc&#39;\n</code></pre>\n<p>Specifying negative indexes causes the slice to be generated relative to the\nend of the Buffer rather than the beginning.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\n\nbuf.slice(-6, -1).toString();\n  // Returns &#39;buffe&#39;, equivalent to buf.slice(0, 5)\nbuf.slice(-6, -2).toString();\n  // Returns &#39;buff&#39;, equivalent to buf.slice(0, 4)\nbuf.slice(-5, -2).toString();\n  // Returns &#39;uff&#39;, equivalent to buf.slice(1, 4)\n</code></pre>\n<h3>buf.swap16()<span><a class=\"mark\" href=\"#buffer_buf_swap16\" id=\"buffer_buf_swap16\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li>Return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Interprets the <code>Buffer</code> as an array of unsigned 16-bit integers and swaps\nthe byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is\nnot a multiple of 16 bits. The method returns a reference to the Buffer, so\ncalls can be chained.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\nconsole.log(buf);\n  // Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)\nbuf.swap16();\nconsole.log(buf);\n  // Prints Buffer(0x2, 0x1, 0x4, 0x3, 0x6, 0x5, 0x8, 0x7)\n</code></pre>\n<h3>buf.swap32()<span><a class=\"mark\" href=\"#buffer_buf_swap32\" id=\"buffer_buf_swap32\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><ul>\n<li>Return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Interprets the <code>Buffer</code> as an array of unsigned 32-bit integers and swaps\nthe byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is\nnot a multiple of 32 bits. The method returns a reference to the Buffer, so\ncalls can be chained.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\nconsole.log(buf);\n  // Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)\nbuf.swap32();\nconsole.log(buf);\n  // Prints Buffer(0x4, 0x3, 0x2, 0x1, 0x8, 0x7, 0x6, 0x5)\n</code></pre>\n<h3>buf.toString([encoding[, start[, end]]])<span><a class=\"mark\" href=\"#buffer_buf_tostring_encoding_start_end\" id=\"buffer_buf_tostring_encoding_start_end\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li><code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buffer.length</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</div><p>Decodes and returns a string from the Buffer data using the specified\ncharacter set <code>encoding</code>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(26);\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf[i] = i + 97; // 97 is ASCII a\n}\nbuf.toString(&#39;ascii&#39;);\n  // Returns: &#39;abcdefghijklmnopqrstuvwxyz&#39;\nbuf.toString(&#39;ascii&#39;,0,5);\n  // Returns: &#39;abcde&#39;\nbuf.toString(&#39;utf8&#39;,0,5);\n  // Returns: &#39;abcde&#39;\nbuf.toString(undefined,0,5);\n  // Returns: &#39;abcde&#39;, encoding defaults to &#39;utf8&#39;\n</code></pre>\n<h3>buf.toJSON()<span><a class=\"mark\" href=\"#buffer_buf_tojson\" id=\"buffer_buf_tojson\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.2</span>\n</div><ul>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns a JSON representation of the Buffer instance.  <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>\nimplicitly calls this function when stringifying a Buffer instance.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;test&#39;);\nconst json = JSON.stringify(buf);\n\nconsole.log(json);\n// Prints: &#39;{&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[116,101,115,116]}&#39;\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n    return value &amp;&amp; value.type === &#39;Buffer&#39;\n      ? Buffer.from(value.data)\n      : value;\n  });\n\nconsole.log(copy.toString());\n// Prints: &#39;test&#39;\n</code></pre>\n<h3>buf.values()<span><a class=\"mark\" href=\"#buffer_buf_values\" id=\"buffer_buf_values\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.1.0</span>\n</div><ul>\n<li>Return: <span class=\"type\">&lt;Iterator&gt;</span></li>\n</ul>\n<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> for Buffer values (bytes). This function is\ncalled automatically when the Buffer is used in a <code>for..of</code> statement.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\nfor (var value of buf.values()) {\n  console.log(value);\n}\n// prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n\nfor (var value of buf) {\n  console.log(value);\n}\n// prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n</code></pre>\n<h3>buf.write(string[, offset[, length]][, encoding])<span><a class=\"mark\" href=\"#buffer_buf_write_string_offset_length_encoding\" id=\"buffer_buf_write_string_offset_length_encoding\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Bytes to be written to buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 0</li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: <code>buffer.length - offset</code></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Default: <code>&#39;utf8&#39;</code></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Numbers of bytes written</li>\n</ul>\n</div><p>Writes <code>string</code> to the Buffer at <code>offset</code> using the given <code>encoding</code>.\nThe <code>length</code> parameter is the number of bytes to write. If the Buffer did not\ncontain enough space to fit the entire string, only a partial amount of the\nstring will be written however, it will not write only partially encoded\ncharacters.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(256);\nconst len = buf.write(&#39;\\u00bd + \\u00bc = \\u00be&#39;, 0);\nconsole.log(`${len} bytes: ${buf.toString(&#39;utf8&#39;, 0, len)}`);\n  // Prints: 12 bytes: \u00bd + \u00bc = \u00be\n</code></pre>\n<h3>buf.writeDoubleBE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writedoublebe_value_offset_noassert\" id=\"buffer_buf_writedoublebe_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeDoubleLE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writedoublele_value_offset_noassert\" id=\"buffer_buf_writedoublele_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 8</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). The <code>value</code> argument <em>should</em> be a valid 64-bit double. Behavior is\nnot defined when <code>value</code> is anything other than a 64-bit double.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\n</code></pre>\n<h3>buf.writeFloatBE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writefloatbe_value_offset_noassert\" id=\"buffer_buf_writefloatbe_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeFloatLE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writefloatle_value_offset_noassert\" id=\"buffer_buf_writefloatle_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). Behavior is not defined when <code>value</code> is anything other than a 32-bit\nfloat.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 4f 4a fe bb&gt;\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer bb fe 4a 4f&gt;\n</code></pre>\n<h3>buf.writeInt8(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeint8_value_offset_noassert\" id=\"buffer_buf_writeint8_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a\nvalid signed 8-bit integer.  Behavior is not defined when <code>value</code> is anything\nother than a signed 8-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(2);\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\nconsole.log(buf);\n  // Prints: &lt;Buffer 02 fe&gt;\n</code></pre>\n<h3>buf.writeInt16BE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeint16be_value_offset_noassert\" id=\"buffer_buf_writeint16be_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeInt16LE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeint16le_value_offset_noassert\" id=\"buffer_buf_writeint16le_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). The <code>value</code> should be a valid signed 16-bit integer. Behavior is\nnot defined when <code>value</code> is anything other than a signed 16-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\nbuf.writeInt16BE(0x0102,0);\nbuf.writeInt16LE(0x0304,2);\nconsole.log(buf);\n  // Prints: &lt;Buffer 01 02 04 03&gt;\n</code></pre>\n<h3>buf.writeInt32BE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeint32be_value_offset_noassert\" id=\"buffer_buf_writeint32be_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeInt32LE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeint32le_value_offset_noassert\" id=\"buffer_buf_writeint32le_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). The <code>value</code> should be a valid signed 32-bit integer. Behavior is\nnot defined when <code>value</code> is anything other than a signed 32-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\nbuf.writeInt32BE(0x01020304,0);\nbuf.writeInt32LE(0x05060708,4);\nconsole.log(buf);\n  // Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\n</code></pre>\n<h3>buf.writeIntBE(value, offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeintbe_value_offset_bytelength_noassert\" id=\"buffer_buf_writeintbe_value_offset_bytelength_noassert\">#</a></span></h3>\n<h3>buf.writeIntLE(value, offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeintle_value_offset_bytelength_noassert\" id=\"buffer_buf_writeintle_value_offset_bytelength_noassert\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>\n<li><code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\nSupports up to 48 bits of accuracy. For example:</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.allocUnsafe(6);\nbuf1.writeUIntBE(0x1234567890ab, 0, 6);\nconsole.log(buf1);\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n\nconst buf2 = Buffer.allocUnsafe(6);\nbuf2.writeUIntLE(0x1234567890ab, 0, 6);\nconsole.log(buf2);\n  // Prints: &lt;Buffer ab 90 78 56 34 12&gt;\n</code></pre>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Behavior is not defined when <code>value</code> is anything other than an integer.</p>\n<h3>buf.writeUInt8(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuint8_value_offset_noassert\" id=\"buffer_buf_writeuint8_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 1</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a\nvalid unsigned 8-bit integer.  Behavior is not defined when <code>value</code> is anything\nother than an unsigned 8-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer 03 04 23 42&gt;\n</code></pre>\n<h3>buf.writeUInt16BE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuint16be_value_offset_noassert\" id=\"buffer_buf_writeuint16be_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeUInt16LE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuint16le_value_offset_noassert\" id=\"buffer_buf_writeuint16le_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 2</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). The <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nnot defined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer de ad be ef&gt;\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer ad de ef be&gt;\n</code></pre>\n<h3>buf.writeUInt32BE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuint32be_value_offset_noassert\" id=\"buffer_buf_writeuint32be_value_offset_noassert\">#</a></span></h3>\n<h3>buf.writeUInt32LE(value, offset[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuint32le_value_offset_noassert\" id=\"buffer_buf_writeuint32le_value_offset_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - 4</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). The <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nnot defined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer fe ed fa ce&gt;\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n  // Prints: &lt;Buffer ce fa ed fe&gt;\n</code></pre>\n<h3>buf.writeUIntBE(value, offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuintbe_value_offset_bytelength_noassert\" id=\"buffer_buf_writeuintbe_value_offset_bytelength_noassert\">#</a></span></h3>\n<h3>buf.writeUIntLE(value, offset, byteLength[, noAssert])<span><a class=\"mark\" href=\"#buffer_buf_writeuintle_value_offset_bytelength_noassert\" id=\"buffer_buf_writeuintle_value_offset_bytelength_noassert\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Bytes to be written to Buffer</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt;= offset &lt;= buf.length - byteLength</code></li>\n<li><code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> <code>0 &lt; byteLength &lt;= 6</code></li>\n<li><code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Default: false</li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The offset plus the number of written bytes</li>\n</ul>\n</div><p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\nSupports up to 48 bits of accuracy. For example:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\nconsole.log(buf);\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n</code></pre>\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\nbeyond the end of the Buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness.</p>\n<p>Behavior is not defined when <code>value</code> is anything other than an unsigned integer.</p>\n<h2>buffer.INSPECT_MAX_BYTES<span><a class=\"mark\" href=\"#buffer_buffer_inspect_max_bytes\" id=\"buffer_buffer_inspect_max_bytes\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default: 50</li>\n</ul>\n</div><p>Returns the maximum number of bytes that will be returned when\n<code>buffer.inspect()</code> is called. This can be overridden by user modules. See\n<a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> for more details on <code>buffer.inspect()</code> behavior.</p>\n<p>Note that this is a property on the <code>buffer</code> module as returned by\n<code>require(&#39;buffer&#39;)</code>, not on the Buffer global or a Buffer instance.</p>\n<h2>Class: SlowBuffer<span><a class=\"mark\" href=\"#buffer_class_slowbuffer\" id=\"buffer_class_slowbuffer\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> instead.</pre><p>Returns an un-pooled <code>Buffer</code>.</p>\n<p>In order to avoid the garbage collection overhead of creating many individually\nallocated Buffers, by default allocations under 4KB are sliced from a single\nlarger allocated object. This approach improves both performance and memory\nusage since v8 does not need to track and cleanup as many <code>Persistent</code> objects.</p>\n<p>In the case where a developer may need to retain a small chunk of memory from a\npool for an indeterminate amount of time, it may be appropriate to create an\nun-pooled Buffer instance using <code>SlowBuffer</code> then copy out the relevant bits.</p>\n<pre><code class=\"lang-js\">// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  var data = socket.read();\n  // allocate for retained data\n  var sb = SlowBuffer(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n</code></pre>\n<p>Use of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer\nhas observed undue memory retention in their applications.</p>\n<h3>new SlowBuffer(size)<span><a class=\"mark\" href=\"#buffer_new_slowbuffer_size\" id=\"buffer_new_slowbuffer_size\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Deprecated since: v6.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> instead.</pre><ul>\n<li><code>size</code> Number</li>\n</ul>\n<p>Allocates a new <code>SlowBuffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than\nor equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a <a href=\"errors.html#errors_class_rangeerror\"><code>RangeError</code></a> is\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\n0 is specified.</p>\n<p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The\ncontents of a newly created <code>SlowBuffer</code> are unknown and could contain\nsensitive data. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize a <code>SlowBuffer</code> to zeroes.</p>\n<pre><code class=\"lang-js\">const SlowBuffer = require(&#39;buffer&#39;).SlowBuffer;\nconst buf = new SlowBuffer(5);\nconsole.log(buf);\n  // &lt;Buffer 78 e0 82 02 01&gt;\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n<!-- [end-include:buffer.md] -->\n<!-- [start-include:child_process.md] -->\n<h1>Child Process<span><a class=\"mark\" href=\"#child_process_child_process\" id=\"child_process_child_process\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>child_process</code> module provides the ability to spawn child processes in\na manner that is similar, but not identical, to <a href=\"http://man7.org/linux/man-pages/man3/popen.3.html\">popen(3)</a>. This capability\nis primarily provided by the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> function:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre>\n<p>By default, pipes for <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are established between\nthe parent Node.js process and the spawned child. It is possible to stream data\nthrough these pipes in a non-blocking way. <em>Note, however, that some programs\nuse line-buffered I/O internally. While that does not affect Node.js, it can\nmean that data sent to the child process may not be immediately consumed.</em></p>\n<p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>\nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.</p>\n<p>For convenience, the <code>child_process</code> module provides a handful of synchronous\nand asynchronous alternatives to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> and\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.  <em>Note that each of these alternatives are\nimplemented on top of <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> or <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.</em></p>\n<ul>\n<li><a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>: spawns a shell and runs a command within that shell,\npassing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li>\n<li><a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>: similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> except that\nit spawns the command directly without first spawning a shell.</li>\n<li><a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>: spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.</li>\n<li><a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>: a synchronous version of\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> that <em>will</em> block the Node.js event loop.</li>\n<li><a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a>: a synchronous version of\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> that <em>will</em> block the Node.js event loop.</li>\n</ul>\n<p>For certain use cases, such as automating shell scripts, the\n<a href=\"#child_process_synchronous_process_creation\">synchronous counterparts</a> may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.</p>\n<h2>Asynchronous Process Creation<span><a class=\"mark\" href=\"#child_process_asynchronous_process_creation\" id=\"child_process_asynchronous_process_creation\">#</a></span></h2>\n<p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>,\nand <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods all follow the idiomatic asynchronous\nprogramming pattern typical of other Node.js APIs.</p>\n<p>Each of the methods returns a <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> instance. These objects\nimplement the Node.js <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> API, allowing the parent process to\nregister listener functions that are called when certain events occur during\nthe life cycle of the child process.</p>\n<p>The <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods additionally\nallow for an optional <code>callback</code> function to be specified that is invoked\nwhen the child process terminates.</p>\n<h3>Spawning <code>.bat</code> and <code>.cmd</code> files on Windows<span><a class=\"mark\" href=\"#child_process_spawning_bat_and_cmd_files_on_windows\" id=\"child_process_spawning_bat_and_cmd_files_on_windows\">#</a></span></h3>\n<p>The importance of the distinction between <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can vary based on platform. On Unix-type operating\nsystems (Unix, Linux, OSX) <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can be more efficient\nbecause it does not spawn a shell. On Windows, however, <code>.bat</code> and <code>.cmd</code>\nfiles are not executable on their own without a terminal, and therefore cannot\nbe launched using <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>. When running on Windows, <code>.bat</code>\nand <code>.cmd</code> files can be invoked using <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the <code>shell</code>\noption set, with <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>, or by spawning <code>cmd.exe</code> and passing\nthe <code>.bat</code> or <code>.cmd</code> file as an argument (which is what the <code>shell</code> option and\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> do).</p>\n<pre><code class=\"lang-js\">// On Windows Only ...\nconst spawn = require(&#39;child_process&#39;).spawn;\nconst bat = spawn(&#39;cmd.exe&#39;, [&#39;/c&#39;, &#39;my.bat&#39;]);\n\nbat.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\n\nbat.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\n\nbat.on(&#39;exit&#39;, (code) =&gt; {\n  console.log(`Child exited with code ${code}`);\n});\n\n// OR...\nconst exec = require(&#39;child_process&#39;).exec;\nexec(&#39;my.bat&#39;, (err, stdout, stderr) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n</code></pre>\n<h3>child_process.exec(command[, options][, callback])<span><a class=\"mark\" href=\"#child_process_child_process_exec_command_options_callback\" id=\"child_process_child_process_exec_command_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The command to run, with space-separated arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> (Default: <code>&#39;utf8&#39;</code>)</li>\n<li><code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Shell to execute the command with\n(Default: <code>&#39;/bin/sh&#39;</code> on UNIX, <code>&#39;cmd.exe&#39;</code> on Windows, The shell should\n understand the <code>-c</code> switch on UNIX or <code>/s /c</code> on Windows. On Windows,\n command line parsing should be compatible with <code>cmd.exe</code>.)</li>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> (Default: <code>0</code>)</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code></a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on\nstdout or stderr - if exceeded child process is killed (Default: <code>200*1024</code>)</li>\n<li><code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> (Default: <code>&#39;SIGTERM&#39;</code>)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called with the output when process terminates<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n<li><code>stdout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>stderr</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n</li>\n<li>Return: <a href=\"child_process.html#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li>\n</ul>\n<p>Spawns a shell then executes the <code>command</code> within that shell, buffering any\ngenerated output.</p>\n<pre><code class=\"lang-js\">const exec = require(&#39;child_process&#39;).exec;\nexec(&#39;cat *.js bad_file | wc -l&#39;, (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n</code></pre>\n<p>If a <code>callback</code> function is provided, it is called with the arguments\n<code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>.  On error,\n<code>error</code> will be an instance of <a href=\"errors.html#errors_class_error\"><code>Error</code></a>. The <code>error.code</code> property will be\nthe exit code of the child process while <code>error.signal</code> will be set to the\nsignal that terminated the process. Any exit code other than <code>0</code> is considered\nto be an error.</p>\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, <code>Buffer</code> objects will be passed to\nthe callback instead.</p>\n<p>The <code>options</code> argument may be passed as the second argument to customize how\nthe process is spawned. The default options are:</p>\n<pre><code class=\"lang-js\">{\n  encoding: &#39;utf8&#39;,\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: &#39;SIGTERM&#39;,\n  cwd: null,\n  env: null\n}\n</code></pre>\n<p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the the signal\nidentified by the <code>killSignal</code> property (the default is <code>&#39;SIGTERM&#39;</code>) if the\nchild runs longer than <code>timeout</code> milliseconds.</p>\n<p><em>Note: Unlike the <a href=\"http://man7.org/linux/man-pages/man3/exec.3.html\">exec(3)</a> POSIX system call, <code>child_process.exec()</code> does not\nreplace the existing process and uses a shell to execute the command.</em></p>\n<h3>child_process.execFile(file[, args][, options][, callback])<span><a class=\"mark\" href=\"#child_process_child_process_execfile_file_args_options_callback\" id=\"child_process_child_process_execfile_file_args_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.91</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The name or path of the executable file to run</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> (Default: <code>&#39;utf8&#39;</code>)</li>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> (Default: <code>0</code>)</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code></a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on\nstdout or stderr - if exceeded child process is killed (Default: <code>200*1024</code>)</li>\n<li><code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> (Default: <code>&#39;SIGTERM&#39;</code>)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called with the output when process terminates<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n<li><code>stdout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>stderr</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n</li>\n<li>Return: <a href=\"child_process.html#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li>\n</ul>\n<p>The <code>child_process.execFile()</code> function is similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>\nexcept that it does not spawn a shell. Rather, the specified executable <code>file</code>\nis spawned directly as a new process making it slightly more efficient than\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>.</p>\n<p>The same options as <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> are supported. Since a shell is not\nspawned, behaviors such as I/O redirection and file globbing are not supported.</p>\n<pre><code class=\"lang-js\">const execFile = require(&#39;child_process&#39;).execFile;\nconst child = execFile(&#39;node&#39;, [&#39;--version&#39;], (error, stdout, stderr) =&gt; {\n  if (error) {\n    throw error;\n  }\n  console.log(stdout);\n});\n</code></pre>\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, <code>Buffer</code> objects will be passed to\nthe callback instead.</p>\n<h3>child_process.fork(modulePath[, args][, options])<span><a class=\"mark\" href=\"#child_process_child_process_fork_modulepath_args_options\" id=\"child_process_child_process_fork_modulepath_args_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><ul>\n<li><code>modulePath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The module to run in the child</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>execPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Executable used to create the child process</li>\n<li><code>execArgv</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments passed to the executable\n(Default: <code>process.execArgv</code>)</li>\n<li><code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> If <code>true</code>, stdin, stdout, and stderr of the child will be\npiped to the parent, otherwise they will be inherited from the parent, see\nthe <code>&#39;pipe&#39;</code> and <code>&#39;inherit&#39;</code> options for <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>&#39;s\n<a href=\"#child_process_options_stdio\"><code>stdio</code></a> for more details (Default: <code>false</code>)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n</ul>\n</li>\n<li>Return: <a href=\"child_process.html#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li>\n</ul>\n<p>The <code>child_process.fork()</code> method is a special case of\n<a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> used specifically to spawn new Node.js processes.\nLike <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, a <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object is returned. The returned\n<a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> will have an additional communication channel built-in that\nallows messages to be passed back and forth between the parent and child. See\n<a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a> for details.</p>\n<p>It is important to keep in mind that spawned Node.js child processes are\nindependent of the parent with exception of the IPC communication channel\nthat is established between the two. Each process has it&#39;s own memory, with\ntheir own V8 instances. Because of the additional resource allocations\nrequired, spawning a large number of child Node.js processes is not\nrecommended.</p>\n<p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the\n<a href=\"process.html#process_process_execpath\"><code>process.execPath</code></a> of the parent process. The <code>execPath</code> property in the\n<code>options</code> object allows for an alternative execution path to be used.</p>\n<p>Node.js processes launched with a custom <code>execPath</code> will communicate with the\nparent process using the file descriptor (fd) identified using the\nenvironment variable <code>NODE_CHANNEL_FD</code> on the child process. The input and\noutput on this fd is expected to be line delimited JSON objects.</p>\n<p><em>Note: Unlike the <a href=\"http://man7.org/linux/man-pages/man2/fork.2.html\">fork(2)</a> POSIX system call, <code>child_process.fork()</code> does\nnot clone the current process.</em></p>\n<h3>child_process.spawn(command[, args][, options])<span><a class=\"mark\" href=\"#child_process_child_process_spawn_command_args_options\" id=\"child_process_child_process_spawn_command_args_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The command to run</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Child&#39;s stdio configuration. (See\n<a href=\"#child_process_options_stdio\"><code>options.stdio</code></a>)</li>\n<li><code>detached</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Prepare child to run independently of its parent\nprocess. Specific behavior depends on the platform, see\n<a href=\"#child_process_options_detached\"><code>options.detached</code></a>)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n<li><code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses\n<code>&#39;/bin/sh&#39;</code> on UNIX, and <code>&#39;cmd.exe&#39;</code> on Windows. A different shell can be\nspecified as a string. The shell should understand the <code>-c</code> switch on UNIX,\nor <code>/s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li>\n</ul>\n</li>\n<li>return: <a href=\"child_process.html#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li>\n</ul>\n<p>The <code>child_process.spawn()</code> method spawns a new process using the given\n<code>command</code>, with command line arguments in <code>args</code>. If omitted, <code>args</code> defaults\nto an empty array.</p>\n<p>A third argument may be used to specify additional options, with these defaults:</p>\n<pre><code class=\"lang-js\">{\n  cwd: undefined,\n  env: process.env\n}\n</code></pre>\n<p>Use <code>cwd</code> to specify the working directory from which the process is spawned.\nIf not given, the default is to inherit the current working directory.</p>\n<p>Use <code>env</code> to specify environment variables that will be visible to the new\nprocess, the default is <a href=\"process.html#process_process_env\"><code>process.env</code></a>.</p>\n<p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the\nexit code:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre>\n<p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst ps = spawn(&#39;ps&#39;, [&#39;ax&#39;]);\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nps.stdout.on(&#39;data&#39;, (data) =&gt; {\n  grep.stdin.write(data);\n});\n\nps.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`ps stderr: ${data}`);\n});\n\nps.on(&#39;close&#39;, (code) =&gt; {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`${data}`);\n});\n\ngrep.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`grep stderr: ${data}`);\n});\n\ngrep.on(&#39;close&#39;, (code) =&gt; {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n</code></pre>\n<p>Example of checking for failed exec:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst child = spawn(&#39;bad_command&#39;);\n\nchild.on(&#39;error&#39;, (err) =&gt; {\n  console.log(&#39;Failed to start child process.&#39;);\n});\n</code></pre>\n<h4>options.detached<span><a class=\"mark\" href=\"#child_process_options_detached\" id=\"child_process_options_detached\">#</a></span></h4>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.10</span>\n</div><p>On Windows, setting <code>options.detached</code> to <code>true</code> makes it possible for the\nchild process to continue running after the parent exits. The child will have\nits own console window. <em>Once enabled for a child process, it cannot be\ndisabled</em>.</p>\n<p>On non-Windows platforms, if <code>options.detached</code> is set to <code>true</code>, the child\nprocess will be made the leader of a new process group and session. Note that\nchild processes may continue running after the parent exits regardless of\nwhether they are detached or not.  See <a href=\"http://man7.org/linux/man-pages/man2/setsid.2.html\">setsid(2)</a> for more information.</p>\n<p>By default, the parent will wait for the detached child to exit. To prevent\nthe parent from waiting for a given <code>child</code>, use the <code>child.unref()</code> method.\nDoing so will cause the parent&#39;s event loop to not include the child in its\nreference count, allowing the parent to exit independently of the child, unless\nthere is an established IPC channel between the child and parent.</p>\n<p>When using the <code>detached</code> option to start a long-running process, the process\nwill not stay running in the background after the parent exits unless it is\nprovided with a <code>stdio</code> configuration that is not connected to the parent.\nIf the parent&#39;s <code>stdio</code> is inherited, the child will remain attached to the\ncontrolling terminal.</p>\n<p>Example of a long-running process, by detaching and also ignoring its parent\n<code>stdio</code> file descriptors, in order to ignore the parent&#39;s termination:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\n\nconst child = spawn(process.argv[0], [&#39;child_program.js&#39;], {\n  detached: true,\n  stdio: [&#39;ignore&#39;]\n});\n\nchild.unref();\n</code></pre>\n<p>Alternatively one can redirect the child process&#39; output into files:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst spawn = require(&#39;child_process&#39;).spawn;\nconst out = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\nconst err = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\n\nconst child = spawn(&#39;prg&#39;, [], {\n detached: true,\n stdio: [ &#39;ignore&#39;, out, err ]\n});\n\nchild.unref();\n</code></pre>\n<h4>options.stdio<span><a class=\"mark\" href=\"#child_process_options_stdio\" id=\"child_process_options_stdio\">#</a></span></h4>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.10</span>\n</div><p>The <code>options.stdio</code> option is used to configure the pipes that are established\nbetween the parent and child process. By default, the child&#39;s stdin, stdout,\nand stderr are redirected to corresponding <a href=\"#child_process_child_stdin\"><code>child.stdin</code></a>, <a href=\"#child_process_child_stdout\"><code>child.stdout</code></a>, and\n<a href=\"#child_process_child_stderr\"><code>child.stderr</code></a> streams on the <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object. This is equivalent to\nsetting the <code>options.stdio</code> equal to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>.</p>\n<p>For convenience, <code>options.stdio</code> may be one of the following strings:</p>\n<ul>\n<li><code>&#39;pipe&#39;</code> - equivalent to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code> (the default)</li>\n<li><code>&#39;ignore&#39;</code> - equivalent to <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li>\n<li><code>&#39;inherit&#39;</code> - equivalent to <code>[process.stdin, process.stdout, process.stderr]</code>\n or <code>[0,1,2]</code></li>\n</ul>\n<p>Otherwise, the value of <code>options.stdio</code> is an array where each index corresponds\nto an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout,\nand stderr, respectively. Additional fds can be specified to create additional\npipes between the parent and child. The value is one of the following:</p>\n<ol>\n<li><code>&#39;pipe&#39;</code> - Create a pipe between the child process and the parent process.\nThe parent end of the pipe is exposed to the parent as a property on the\n<code>child_process</code> object as <a href=\"#child_process_options_stdio\"><code>child.stdio[fd]</code></a>. Pipes created for\nfds 0 - 2 are also available as <a href=\"#child_process_child_stdin\"><code>child.stdin</code></a>, <a href=\"#child_process_child_stdout\"><code>child.stdout</code></a>\nand <a href=\"#child_process_child_stderr\"><code>child.stderr</code></a>, respectively.</li>\n<li><code>&#39;ipc&#39;</code> - Create an IPC channel for passing messages/file descriptors\nbetween parent and child. A <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> may have at most <em>one</em> IPC stdio\nfile descriptor. Setting this option enables the <a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a> method.\nIf the child writes JSON messages to this file descriptor, the\n<a href=\"child_process.html#child_process_event_message\"><code>child.on(&#39;message&#39;)</code></a> event handler will be triggered in the parent.\nIf the child is a Node.js process, the presence of an IPC channel will enable\n<a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a>, <a href=\"process.html#process_process_disconnect\"><code>process.disconnect()</code></a>, <a href=\"process.html#process_event_disconnect\"><code>process.on(&#39;disconnect&#39;)</code></a>, and\n<a href=\"process.html#process_event_message\"><code>process.on(&#39;message&#39;)</code></a> within the child.</li>\n<li><code>&#39;ignore&#39;</code> - Instructs Node.js to ignore the fd in the child. While Node.js\nwill always open fds 0 - 2 for the processes it spawns, setting the fd to\n<code>&#39;ignore&#39;</code> will cause Node.js to open <code>/dev/null</code> and attach it to the\nchild&#39;s fd.</li>\n<li><a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a> object - Share a readable or writable stream that refers to a tty,\nfile, socket, or a pipe with the child process. The stream&#39;s underlying\nfile descriptor is duplicated in the child process to the fd that\ncorresponds to the index in the <code>stdio</code> array. Note that the stream must\nhave an underlying descriptor (file streams do not until the <code>&#39;open&#39;</code>\nevent has occurred).</li>\n<li>Positive integer - The integer value is interpreted as a file descriptor\nthat is is currently open in the parent process. It is shared with the child\nprocess, similar to how <a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a> objects can be shared.</li>\n<li><code>null</code>, <code>undefined</code> - Use default value. For stdio fds 0, 1 and 2 (in other\nwords, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\ndefault is <code>&#39;ignore&#39;</code>.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\n\n// Child will use parent&#39;s stdios\nspawn(&#39;prg&#39;, [], { stdio: &#39;inherit&#39; });\n\n// Spawn child sharing only stderr\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, &#39;pipe&#39;, process.stderr] });\n\n// Open an extra fd=4, to interact with programs presenting a\n// startd-style interface.\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, null, null, null, &#39;pipe&#39;] });\n</code></pre>\n<p><em>It is worth noting that when an IPC channel is established between the\nparent and child processes, and the child is a Node.js process, the child\nis launched with the IPC channel unreferenced (using <code>unref()</code>) until the\nchild registers an event handler for the <a href=\"process.html#process_event_disconnect\"><code>process.on(&#39;disconnect&#39;)</code></a> event.\nThis allows the child to exit normally without the process being held open\nby the open IPC channel.</em></p>\n<p>See also: <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a></p>\n<h2>Synchronous Process Creation<span><a class=\"mark\" href=\"#child_process_synchronous_process_creation\" id=\"child_process_synchronous_process_creation\">#</a></span></h2>\n<p>The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>, <a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>, and\n<a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a> methods are <strong>synchronous</strong> and <strong>WILL</strong> block\nthe Node.js event loop, pausing execution of any additional code until the\nspawned process exits.</p>\n<p>Blocking calls like these are mostly useful for simplifying general purpose\nscripting tasks and for simplifying the loading/processing of application\nconfiguration at startup.</p>\n<h3>child_process.execFileSync(file[, args][, options])<span><a class=\"mark\" href=\"#child_process_child_process_execfilesync_file_args_options\" id=\"child_process_child_process_execfilesync_file_args_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The name or path of the executable file to run</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the\nspawned process<ul>\n<li>supplying this value will override <code>stdio[0]</code></li>\n</ul>\n</li>\n<li><code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child&#39;s stdio configuration. (Default: <code>&#39;pipe&#39;</code>)<ul>\n<li><code>stderr</code> by default will be output to the parent process&#39; stderr unless\n<code>stdio</code> is specified</li>\n</ul>\n</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process\nis allowed to run. (Default: <code>undefined</code>)</li>\n<li><code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The signal value to be used when the spawned process\nwill be killed. (Default: <code>&#39;SIGTERM&#39;</code>)</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code></a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on\nstdout or stderr - if exceeded child process is killed</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs. (Default: <code>&#39;buffer&#39;</code>)</li>\n</ul>\n</li>\n<li>return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The stdout from the command</li>\n</ul>\n<p>The <code>child_process.execFileSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> with the exception that the method will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\ncompletely exited. <em>Note that if the child process intercepts and handles\nthe <code>SIGTERM</code> signal and does not exit, the parent process will still wait\nuntil the child process has exited.</em></p>\n<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>\nthrow.  The <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object will contain the entire result from\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a></p>\n<h3>child_process.execSync(command[, options])<span><a class=\"mark\" href=\"#child_process_child_process_execsync_command_options\" id=\"child_process_child_process_execsync_command_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><ul>\n<li><code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The command to run</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the\nspawned process<ul>\n<li>supplying this value will override <code>stdio[0]</code></li>\n</ul>\n</li>\n<li><code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child&#39;s stdio configuration. (Default: <code>&#39;pipe&#39;</code>)<ul>\n<li><code>stderr</code> by default will be output to the parent process&#39; stderr unless\n<code>stdio</code> is specified</li>\n</ul>\n</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Shell to execute the command with\n(Default: <code>&#39;/bin/sh&#39;</code> on UNIX, <code>&#39;cmd.exe&#39;</code> on Windows, The shell should\n understand the <code>-c</code> switch on UNIX or <code>/s /c</code> on Windows. On Windows,\n command line parsing should be compatible with <code>cmd.exe</code>.)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process\nis allowed to run. (Default: <code>undefined</code>)</li>\n<li><code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The signal value to be used when the spawned process\nwill be killed. (Default: <code>&#39;SIGTERM&#39;</code>)</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code></a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on\nstdout or stderr - if exceeded child process is killed</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs.\n(Default: <code>&#39;buffer&#39;</code>)</li>\n</ul>\n</li>\n<li>return: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The stdout from the command</li>\n</ul>\n<p>The <code>child_process.execSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> with the exception that the method will not return until\nthe child process has fully closed. When a timeout has been encountered and\n<code>killSignal</code> is sent, the method won&#39;t return until the process has completely\nexited. <em>Note that if  the child process intercepts and handles the <code>SIGTERM</code>\nsignal and doesn&#39;t exit, the parent process will wait until the child\nprocess has exited.</em></p>\n<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>\nthrow.  The <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object will contain the entire result from\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a></p>\n<h3>child_process.spawnSync(command[, args][, options])<span><a class=\"mark\" href=\"#child_process_child_process_spawnsync_command_args_options\" id=\"child_process_child_process_spawnsync_command_args_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><ul>\n<li><code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The command to run</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Current working directory of the child process</li>\n<li><code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the\nspawned process<ul>\n<li>supplying this value will override <code>stdio[0]</code></li>\n</ul>\n</li>\n<li><code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child&#39;s stdio configuration.</li>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> In milliseconds the maximum amount of time the process\nis allowed to run. (Default: <code>undefined</code>)</li>\n<li><code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The signal value to be used when the spawned process\nwill be killed. (Default: <code>&#39;SIGTERM&#39;</code>)</li>\n<li><a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code></a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> largest amount of data (in bytes) allowed on\nstdout or stderr - if exceeded child process is killed</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding used for all stdio inputs and outputs.\n(Default: <code>&#39;buffer&#39;</code>)</li>\n<li><code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses\n<code>&#39;/bin/sh&#39;</code> on UNIX, and <code>&#39;cmd.exe&#39;</code> on Windows. A different shell can be\nspecified as a string. The shell should understand the <code>-c</code> switch on UNIX,\nor <code>/s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li>\n</ul>\n</li>\n<li>return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>pid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Pid of the child process</li>\n<li><code>output</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Array of results from stdio output</li>\n<li><code>stdout</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The contents of <code>output[1]</code></li>\n<li><code>stderr</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The contents of <code>output[2]</code></li>\n<li><code>status</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The exit code of the child process</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The signal used to kill the child process</li>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The error object if the child process failed or timed out</li>\n</ul>\n</li>\n</ul>\n<p>The <code>child_process.spawnSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the exception that the function will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\ncompletely exited. Note that if the process intercepts and handles the\n<code>SIGTERM</code> signal and doesn&#39;t exit, the parent process will wait until the child\nprocess has exited.</p>\n<h2>Class: ChildProcess<span><a class=\"mark\" href=\"#child_process_class_childprocess\" id=\"child_process_class_childprocess\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.2.0</span>\n</div><p>Instances of the <code>ChildProcess</code> class are <a href=\"events.html#events_class_eventemitter\"><code>EventEmitters</code></a> that represent\nspawned child processes.</p>\n<p>Instances of <code>ChildProcess</code> are not intended to be created directly. Rather,\nuse the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>,\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>, or <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> methods to create\ninstances of <code>ChildProcess</code>.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#child_process_event_close\" id=\"child_process_event_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> the exit code if the child exited on its own.</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> the signal by which the child process was terminated.</li>\n</ul>\n<p>The <code>&#39;close&#39;</code> event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the <a href=\"#child_process_event_exit\"><code>&#39;exit&#39;</code></a> event, since multiple\nprocesses might share the same stdio streams.</p>\n<h3>Event: &#39;disconnect&#39;<span><a class=\"mark\" href=\"#child_process_event_disconnect\" id=\"child_process_event_disconnect\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.2</span>\n</div><p>The <code>&#39;disconnect&#39;</code> event is emitted after calling the\n<a href=\"#child_process_child_disconnect\"><code>child.disconnect()</code></a> method in parent process or <a href=\"process.html#process_process_disconnect\"><code>process.disconnect()</code></a> in child process. After\ndisconnecting it is no longer possible to send or receive messages, and the\n<a href=\"#child_process_child_connected\"><code>child.connected</code></a> property is <code>false</code>.</p>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#child_process_event_error\" id=\"child_process_event_error\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> the error.</li>\n</ul>\n</div><p>The <code>&#39;error&#39;</code> event is emitted whenever:</p>\n<ol>\n<li>The process could not be spawned, or</li>\n<li>The process could not be killed, or</li>\n<li>Sending a message to the child process failed.</li>\n</ol>\n<p>Note that the <code>&#39;exit&#39;</code> event may or may not fire after an error has occurred.\nIf you are listening to both the <code>&#39;exit&#39;</code> and <code>&#39;error&#39;</code> events, it is important\nto guard against accidentally invoking handler functions multiple times.</p>\n<p>See also <a href=\"#child_process_child_kill_signal\"><code>child.kill()</code></a> and <a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a>.</p>\n<h3>Event: &#39;exit&#39;<span><a class=\"mark\" href=\"#child_process_event_exit\" id=\"child_process_event_exit\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> the exit code if the child exited on its own.</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> the signal by which the child process was terminated.</li>\n</ul>\n<p>The <code>&#39;exit&#39;</code> event is emitted after the child process ends. If the process\nexited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the\nprocess terminated due to receipt of a signal, <code>signal</code> is the string name of\nthe signal, otherwise <code>null</code>. One of the two will always be non-null.</p>\n<p>Note that when the <code>&#39;exit&#39;</code> event is triggered, child process stdio streams\nmight still be open.</p>\n<p>Also, note that Node.js establishes signal handlers for <code>SIGINT</code> and\n<code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt\nof those signals. Rather, Node.js will perform a sequence of cleanup actions\nand then will re-raise the handled signal.</p>\n<p>See <a href=\"http://man7.org/linux/man-pages/man2/waitpid.2.html\">waitpid(2)</a>.</p>\n<h3>Event: &#39;message&#39;<span><a class=\"mark\" href=\"#child_process_event_message\" id=\"child_process_event_message\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.9</span>\n</div><ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> a parsed JSON object or primitive value.</li>\n<li><code>sendHandle</code> <a href=\"net.html#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a> a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> or <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> object, or\nundefined.</li>\n</ul>\n<p>The <code>&#39;message&#39;</code> event is triggered when a child process uses <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a>\nto send messages.</p>\n<h3>child.connected<span><a class=\"mark\" href=\"#child_process_child_connected\" id=\"child_process_child_connected\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.2</span>\n</div><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Set to <code>false</code> after <code>child.disconnect()</code> is called</li>\n</ul>\n<p>The <code>child.connected</code> property indicates whether it is still possible to send\nand receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it\nis no longer possible to send or receive messages.</p>\n<h3>child.disconnect()<span><a class=\"mark\" href=\"#child_process_child_disconnect\" id=\"child_process_child_disconnect\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.2</span>\n</div><p>Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the <code>child.connected</code> and <code>process.connected</code> properties in both\nthe parent and child (respectively) will be set to <code>false</code>, and it will be no\nlonger possible to pass messages between the processes.</p>\n<p>The <code>&#39;disconnect&#39;</code> event will be emitted when there are no messages in the\nprocess of being received. This will most often be triggered immediately after\ncalling <code>child.disconnect()</code>.</p>\n<p>Note that when the child process is a Node.js instance (e.g. spawned using\n<a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>process.disconnect()</code> method can be invoked\nwithin the child process to close the IPC channel as well.</p>\n<h3>child.kill([signal])<span><a class=\"mark\" href=\"#child_process_child_kill_signal\" id=\"child_process_child_kill_signal\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>child.kill()</code> methods sends a signal to the child process. If no argument\nis given, the process will be sent the <code>&#39;SIGTERM&#39;</code> signal. See <code>signal(7)</code> for\na list of available signals.</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\ngrep.on(&#39;close&#39;, (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill(&#39;SIGHUP&#39;);\n</code></pre>\n<p>The <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object may emit an <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> event if the signal cannot be\ndelivered. Sending a signal to a child process that has already exited is not\nan error but may have unforeseen consequences. Specifically, if the process\nidentifier (PID) has been reassigned to another process, the signal will be\ndelivered to that process instead which can have unexpected results.</p>\n<p>Note that while the function is called <code>kill</code>, the signal delivered to the\nchild process may not actually terminate the process.</p>\n<p>See <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a> for reference.</p>\n<p>Also note: on Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such\nas in this example:</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst spawn = require(&#39;child_process&#39;).spawn;\n\nlet child = spawn(&#39;sh&#39;, [&#39;-c&#39;,\n  `node -e &quot;setInterval(() =&gt; {\n      console.log(process.pid + &#39;is alive&#39;)\n    }, 500);&quot;`\n  ], {\n    stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]\n  });\n\nsetTimeout(() =&gt; {\n  child.kill(); // does not terminate the node process in the shell\n}, 2000);\n</code></pre>\n<h3>child.pid<span><a class=\"mark\" href=\"#child_process_child_pid\" id=\"child_process_child_pid\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer</li>\n</ul>\n<p>Returns the process identifier (PID) of the child process.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const spawn = require(&#39;child_process&#39;).spawn;\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n</code></pre>\n<h3>child.send(message[, sendHandle[, options]][, callback])<span><a class=\"mark\" href=\"#child_process_child_send_message_sendhandle_options_callback\" id=\"child_process_child_send_message_sendhandle_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.9</span>\n</div><ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>sendHandle</code> <a href=\"net.html#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>When an IPC channel has been established between the parent and child (\ni.e. when using <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>child.send()</code> method can be\nused to send messages to the child process. When the child process is a Node.js\ninstance, these messages can be received via the <a href=\"process.html#process_event_message\"><code>process.on(&#39;message&#39;)</code></a> event.</p>\n<p>For example, in the parent script:</p>\n<pre><code class=\"lang-js\">const cp = require(&#39;child_process&#39;);\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;PARENT got message:&#39;, m);\n});\n\nn.send({ hello: &#39;world&#39; });\n</code></pre>\n<p>And then the child script, <code>&#39;sub.js&#39;</code> might look like this:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;CHILD got message:&#39;, m);\n});\n\nprocess.send({ foo: &#39;bar&#39; });\n</code></pre>\n<p>Child Node.js processes will have a <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> method of their own that\nallows the child to send messages back to the parent.</p>\n<p>There is a special case when sending a <code>{cmd: &#39;NODE_foo&#39;}</code> message. All messages\ncontaining a <code>NODE_</code> prefix in its <code>cmd</code> property are considered to be reserved\nfor use within Node.js core and will not be emitted in the child&#39;s\n<a href=\"process.html#process_event_message\"><code>process.on(&#39;message&#39;)</code></a> event. Rather, such messages are emitted using the\n<code>process.on(&#39;internalMessage&#39;)</code> event and are consumed internally by Node.js.\nApplications should avoid using such messages or listening for\n<code>&#39;internalMessage&#39;</code> events as it is subject to change without notice.</p>\n<p>The optional <code>sendHandle</code> argument that may be passed to <code>child.send()</code> is for\npassing a TCP server or socket object to the child process. The child will\nreceive the object as the second argument passed to the callback function\nregistered on the <a href=\"process.html#process_event_message\"><code>process.on(&#39;message&#39;)</code></a> event. Any data that is received\nand buffered in the socket will not be sent to the child.</p>\n<p>The <code>options</code> argument, if present, is an object used to parameterize the\nsending of certain types of handles. <code>options</code> supports the following\nproperties:</p>\n<ul>\n<li><code>keepOpen</code> - A Boolean value that can be used when passing instances of\n<code>net.Socket</code>. When <code>true</code>, the socket is kept open in the sending process.\nDefaults to <code>false</code>.</li>\n</ul>\n<p>The optional <code>callback</code> is a function that is invoked after the message is\nsent but before the child may have received it.  The function is called with a\nsingle argument: <code>null</code> on success, or an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object on failure.</p>\n<p>If no <code>callback</code> function is provided and the message cannot be sent, an\n<code>&#39;error&#39;</code> event will be emitted by the <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object. This can happen,\nfor instance, when the child process has already exited.</p>\n<p><code>child.send()</code> will return <code>false</code> if the channel has closed or when the\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\nmore. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be\nused to implement flow control.</p>\n<h4>Example: sending a server object<span><a class=\"mark\" href=\"#child_process_example_sending_a_server_object\" id=\"child_process_example_sending_a_server_object\">#</a></span></h4>\n<p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:</p>\n<pre><code class=\"lang-js\">const child = require(&#39;child_process&#39;).fork(&#39;child.js&#39;);\n\n// Open up the server object and send the handle.\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.end(&#39;handled by parent&#39;);\n});\nserver.listen(1337, () =&gt; {\n  child.send(&#39;server&#39;, server);\n});\n</code></pre>\n<p>The child would then receive the server object as:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m, server) =&gt; {\n  if (m === &#39;server&#39;) {\n    server.on(&#39;connection&#39;, (socket) =&gt; {\n      socket.end(&#39;handled by child&#39;);\n    });\n  }\n});\n</code></pre>\n<p>Once the server is now shared between the parent and child, some connections\ncan be handled by the parent and some by the child.</p>\n<p>While the example above uses a server created using the <code>net</code> module, <code>dgram</code>\nmodule servers use exactly the same workflow with the exceptions of listening on\na <code>&#39;message&#39;</code> event instead of <code>&#39;connection&#39;</code> and using <code>server.bind()</code> instead of\n<code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.</p>\n<h4>Example: sending a socket object<span><a class=\"mark\" href=\"#child_process_example_sending_a_socket_object\" id=\"child_process_example_sending_a_socket_object\">#</a></span></h4>\n<p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:</p>\n<pre><code class=\"lang-js\">const normal = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;normal&#39;]);\nconst special = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;special&#39;]);\n\n// Open up the server and send sockets to child\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === &#39;74.125.127.100&#39;) {\n    special.send(&#39;socket&#39;, socket);\n    return;\n  }\n  // This is normal priority\n  normal.send(&#39;socket&#39;, socket);\n});\nserver.listen(1337);\n</code></pre>\n<p>The <code>child.js</code> would receive the socket handle as the second argument passed\nto the event callback function:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m, socket) =&gt; {\n  if (m === &#39;socket&#39;) {\n    socket.end(`Request handled with ${process.argv[2]} priority`);\n  }\n});\n</code></pre>\n<p>Once a socket has been passed to a child, the parent is no longer capable of\ntracking when the socket is destroyed. To indicate this, the <code>.connections</code>\nproperty becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when\nthis occurs.</p>\n<p><em>Note: this function uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> internally to serialize the\n<code>message</code>.</em></p>\n<h3>child.stderr<span><a class=\"mark\" href=\"#child_process_child_stderr\" id=\"child_process_child_stderr\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li>\n</ul>\n<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stderr</code>.</p>\n<p>If the child was spawned with <code>stdio[2]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.</p>\n<p><code>child.stderr</code> is an alias for <code>child.stdio[2]</code>. Both properties will refer to\nthe same value.</p>\n<h3>child.stdin<span><a class=\"mark\" href=\"#child_process_child_stdin\" id=\"child_process_child_stdin\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li>\n</ul>\n<p>A <code>Writable Stream</code> that represents the child process&#39;s <code>stdin</code>.</p>\n<p><em>Note that if a child process waits to read all of its input, the child will not\ncontinue until this stream has been closed via <code>end()</code>.</em></p>\n<p>If the child was spawned with <code>stdio[0]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.</p>\n<p><code>child.stdin</code> is an alias for <code>child.stdio[0]</code>. Both properties will refer to\nthe same value.</p>\n<h3>child.stdio<span><a class=\"mark\" href=\"#child_process_child_stdio\" id=\"child_process_child_stdio\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.10</span>\n</div><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n<p>A sparse array of pipes to the child process, corresponding with positions in\nthe <a href=\"#child_process_options_stdio\"><code>stdio</code></a> option passed to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> that have been set\nto the value <code>&#39;pipe&#39;</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and\n<code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and\n<code>child.stderr</code>, respectively.</p>\n<p>In the following example, only the child&#39;s fd <code>1</code> (stdout) is configured as a\npipe, so only the parent&#39;s <code>child.stdio[1]</code> is a stream, all other values in\nthe array are <code>null</code>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\nconst fs = require(&#39;fs&#39;);\nconst child_process = require(&#39;child_process&#39;);\n\nconst child = child_process.spawn(&#39;ls&#39;, {\n    stdio: [\n      0, // Use parents stdin for child\n      &#39;pipe&#39;, // Pipe child&#39;s stdout to parent\n      fs.openSync(&#39;err.out&#39;, &#39;w&#39;) // Direct child&#39;s stderr to a file\n    ]\n});\n\nassert.equal(child.stdio[0], null);\nassert.equal(child.stdio[0], child.stdin);\n\nassert(child.stdout);\nassert.equal(child.stdio[1], child.stdout);\n\nassert.equal(child.stdio[2], null);\nassert.equal(child.stdio[2], child.stderr);\n</code></pre>\n<h3>child.stdout<span><a class=\"mark\" href=\"#child_process_child_stdout\" id=\"child_process_child_stdout\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li>\n</ul>\n<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stdout</code>.</p>\n<p>If the child was spawned with <code>stdio[1]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>undefined</code>.</p>\n<p><code>child.stdout</code> is an alias for <code>child.stdio[1]</code>. Both properties will refer\nto the same value.</p>\n<h2><code>maxBuffer</code> and Unicode<span><a class=\"mark\" href=\"#child_process_maxbuffer_and_unicode\" id=\"child_process_maxbuffer_and_unicode\">#</a></span></h2>\n<p>It is important to keep in mind that the <code>maxBuffer</code> option specifies the\nlargest number of <em>octets</em> allowed on <code>stdout</code> or <code>stderr</code>. If this value is\nexceeded, then the child process is terminated. This particularly impacts\noutput that includes multibyte character encodings such as UTF-8 or UTF-16.\nFor instance, the following will output 13 UTF-8 encoded octets to <code>stdout</code>\nalthough there are only 4 characters:</p>\n<pre><code class=\"lang-js\">console.log(&#39;\u4e2d\u6587\u6d4b\u8bd5&#39;);\n</code></pre>\n<!-- [end-include:child_process.md] -->\n<!-- [start-include:cluster.md] -->\n<h1>Cluster<span><a class=\"mark\" href=\"#cluster_cluster\" id=\"cluster_cluster\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.</p>\n<p>The cluster module allows you to easily create child processes that\nall share server ports.</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\nconst numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\\n&#39;);\n  }).listen(8000);\n}\n</code></pre>\n<p>Running Node.js will now share port 8000 between the workers:</p>\n<pre><code>$ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n</code></pre><p>Please note that, on Windows, it is not yet possible to set up a named pipe\nserver in a worker.</p>\n<h2>How It Works<span><a class=\"mark\" href=\"#cluster_how_it_works\" id=\"cluster_how_it_works\">#</a></span></h2>\n<!--type=misc-->\n<p>The worker processes are spawned using the <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> method,\nso that they can communicate with the parent via IPC and pass server\nhandles back and forth.</p>\n<p>The cluster module supports two methods of distributing incoming\nconnections.</p>\n<p>The first one (and the default one on all platforms except Windows),\nis the round-robin approach, where the master process listens on a\nport, accepts new connections and distributes them across the workers\nin a round-robin fashion, with some built-in smarts to avoid\noverloading a worker process.</p>\n<p>The second approach is where the master process creates the listen\nsocket and sends it to interested workers. The workers then accept\nincoming connections directly.</p>\n<p>The second approach should, in theory, give the best performance.\nIn practice however, distribution tends to be very unbalanced due\nto operating system scheduler vagaries. Loads have been observed\nwhere over 70% of all connections ended up in just two processes,\nout of a total of eight.</p>\n<p>Because <code>server.listen()</code> hands off most of the work to the master\nprocess, there are three cases where the behavior between a normal\nNode.js process and a cluster worker differs:</p>\n<ol>\n<li><code>server.listen({fd: 7})</code> Because the message is passed to the master,\nfile descriptor 7 <strong>in the parent</strong> will be listened on, and the\nhandle passed to the worker, rather than listening to the worker&#39;s\nidea of what the number 7 file descriptor references.</li>\n<li><code>server.listen(handle)</code> Listening on handles explicitly will cause\nthe worker to use the supplied handle, rather than talk to the master\nprocess.  If the worker already has the handle, then it&#39;s presumed\nthat you know what you are doing.</li>\n<li><code>server.listen(0)</code> Normally, this will cause servers to listen on a\nrandom port.  However, in a cluster, each worker will receive the\nsame &quot;random&quot; port each time they do <code>listen(0)</code>.  In essence, the\nport is random the first time, but predictable thereafter.  If you\nwant to listen on a unique port, generate a port number based on the\ncluster worker ID.</li>\n</ol>\n<p>There is no routing logic in Node.js, or in your program, and no shared\nstate between the workers.  Therefore, it is important to design your\nprogram such that it does not rely too heavily on in-memory data objects\nfor things like sessions and login.</p>\n<p>Because workers are all separate processes, they can be killed or\nre-spawned depending on your program&#39;s needs, without affecting other\nworkers.  As long as there are some workers still alive, the server will\ncontinue to accept connections.  If no workers are alive, existing connections\nwill be dropped and new connections will be refused.  Node.js does not\nautomatically manage the number of workers for you, however.  It is your\nresponsibility to manage the worker pool for your application&#39;s needs.</p>\n<h2>Class: Worker<span><a class=\"mark\" href=\"#cluster_class_worker\" id=\"cluster_class_worker\">#</a></span></h2>\n<p>A Worker object contains all public information and method about a worker.\nIn the master it can be obtained using <code>cluster.workers</code>. In a worker\nit can be obtained using <code>cluster.worker</code>.</p>\n<h3>Event: &#39;disconnect&#39;<span><a class=\"mark\" href=\"#cluster_event_disconnect\" id=\"cluster_event_disconnect\">#</a></span></h3>\n<p>Similar to the <code>cluster.on(&#39;disconnect&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;disconnect&#39;, () =&gt; {\n  // Worker has disconnected\n});\n</code></pre>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#cluster_event_error\" id=\"cluster_event_error\">#</a></span></h3>\n<p>This event is the same as the one provided by <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n<p>In a worker you can also use <code>process.on(&#39;error&#39;)</code>.</p>\n<h3>Event: &#39;exit&#39;<span><a class=\"mark\" href=\"#cluster_event_exit\" id=\"cluster_event_exit\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> the exit code, if it exited normally.</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> the name of the signal (eg. <code>&#39;SIGHUP&#39;</code>) that caused\nthe process to be killed.</li>\n</ul>\n</div><p>Similar to the <code>cluster.on(&#39;exit&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">const worker = cluster.fork();\nworker.on(&#39;exit&#39;, (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log(&#39;worker success!&#39;);\n  }\n});\n</code></pre>\n<h3>Event: &#39;listening&#39;<span><a class=\"mark\" href=\"#cluster_event_listening\" id=\"cluster_event_listening\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Similar to the <code>cluster.on(&#39;listening&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;listening&#39;, (address) =&gt; {\n  // Worker is listening\n});\n</code></pre>\n<p>It is not emitted in the worker.</p>\n<h3>Event: &#39;message&#39;<span><a class=\"mark\" href=\"#cluster_event_message\" id=\"cluster_event_message\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Similar to the <code>cluster.on(&#39;message&#39;)</code> event, but specific to this worker.</p>\n<p>This event is the same as the one provided by <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n<p>In a worker you can also use <code>process.on(&#39;message&#39;)</code>.</p>\n<p>As an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(&#39;numReqs =&#39;, numReqs);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &#39;notifyRequest&#39;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require(&#39;os&#39;).cpus().length;\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  Object.keys(cluster.workers).forEach((id) =&gt; {\n    cluster.workers[id].on(&#39;message&#39;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\\n&#39;);\n\n    // notify master about the request\n    process.send({ cmd: &#39;notifyRequest&#39; });\n  }).listen(8000);\n}\n</code></pre>\n<h3>Event: &#39;online&#39;<span><a class=\"mark\" href=\"#cluster_event_online\" id=\"cluster_event_online\">#</a></span></h3>\n<p>Similar to the <code>cluster.on(&#39;online&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;online&#39;, () =&gt; {\n  // Worker is online\n});\n</code></pre>\n<p>It is not emitted in the worker.</p>\n<h3>worker.disconnect()<span><a class=\"mark\" href=\"#cluster_worker_disconnect\" id=\"cluster_worker_disconnect\">#</a></span></h3>\n<p>In a worker, this function will close all servers, wait for the <code>&#39;close&#39;</code> event on\nthose servers, and then disconnect the IPC channel.</p>\n<p>In the master, an internal message is sent to the worker causing it to call\n<code>.disconnect()</code> on itself.</p>\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\n<p>Note that after a server is closed, it will no longer accept new connections,\nbut connections may be accepted by any other listening worker. Existing\nconnections will be allowed to close as usual. When no more connections exist,\nsee <a href=\"net.html#net_event_close\"><code>server.close()</code></a>, the IPC channel to the worker will close allowing it to\ndie gracefully.</p>\n<p>The above applies <em>only</em> to server connections, client connections are not\nautomatically closed by workers, and disconnect does not wait for them to close\nbefore exiting.</p>\n<p>Note that in a worker, <code>process.disconnect</code> exists, but it is not this function,\nit is <a href=\"child_process.html#child_process_child_disconnect\"><code>disconnect</code></a>.</p>\n<p>Because long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe <code>&#39;disconnect&#39;</code> event has not been emitted after some time.</p>\n<pre><code class=\"lang-js\">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  var timeout;\n\n  worker.on(&#39;listening&#39;, (address) =&gt; {\n    worker.send(&#39;shutdown&#39;);\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&#39;disconnect&#39;, () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require(&#39;net&#39;);\n  var server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    if (msg === &#39;shutdown&#39;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n</code></pre>\n<h3>worker.exitedAfterDisconnect<span><a class=\"mark\" href=\"#cluster_worker_exitedafterdisconnect\" id=\"cluster_worker_exitedafterdisconnect\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>\n<p>The boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log(&#39;Oh, it was just voluntary \u2013 no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre>\n<h3>worker.id<span><a class=\"mark\" href=\"#cluster_worker_id\" id=\"cluster_worker_id\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n</div><p>Each new worker is given its own unique id, this id is stored in the\n<code>id</code>.</p>\n<p>While a worker is alive, this is the key that indexes it in\ncluster.workers</p>\n<h3>worker.isConnected()<span><a class=\"mark\" href=\"#cluster_worker_isconnected\" id=\"cluster_worker_isconnected\">#</a></span></h3>\n<p>This function returns <code>true</code> if the worker is connected to its master via its IPC\nchannel, <code>false</code> otherwise. A worker is connected to its master after it&#39;s been\ncreated. It is disconnected after the <code>&#39;disconnect&#39;</code> event is emitted.</p>\n<h3>worker.isDead()<span><a class=\"mark\" href=\"#cluster_worker_isdead\" id=\"cluster_worker_isdead\">#</a></span></h3>\n<p>This function returns <code>true</code> if the worker&#39;s process has terminated (either\nbecause of exiting or being signaled). Otherwise, it returns <code>false</code>.</p>\n<h3>worker.kill([signal=&#39;SIGTERM&#39;])<span><a class=\"mark\" href=\"#cluster_worker_kill_signal_sigterm\" id=\"cluster_worker_kill_signal_sigterm\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Name of the kill signal to send to the worker\nprocess.</li>\n</ul>\n</div><p>This function will kill the worker. In the master, it does this by disconnecting\nthe <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the\nworker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p>\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\n<p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p>\n<p>Note that in a worker, <code>process.kill()</code> exists, but it is not this function,\nit is <a href=\"process.html#process_process_kill_pid_signal\"><code>kill</code></a>.</p>\n<h3>worker.process<span><a class=\"mark\" href=\"#cluster_worker_process\" id=\"cluster_worker_process\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"child_process.html#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li>\n</ul>\n</div><p>All workers are created using <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, the returned object\nfrom this function is stored as <code>.process</code>. In a worker, the global <code>process</code>\nis stored.</p>\n<p>See: <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\">Child Process module</a></p>\n<p>Note that workers will call <code>process.exit(0)</code> if the <code>&#39;disconnect&#39;</code> event occurs\non <code>process</code> and <code>.exitedAfterDisconnect</code> is not <code>true</code>. This protects against\naccidental disconnection.</p>\n<h3>worker.send(message[, sendHandle][, callback])<span><a class=\"mark\" href=\"#cluster_worker_send_message_sendhandle_callback\" id=\"cluster_worker_send_message_sendhandle_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>sendHandle</code> <a href=\"net.html#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Return: Boolean</li>\n</ul>\n</div><p>Send a message to a worker or master, optionally with a handle.</p>\n<p>In the master this sends a message to a specific worker. It is identical to\n<a href=\"child_process.html#child_process_child_send_message_sendhandle_options_callback\"><code>ChildProcess.send()</code></a>.</p>\n<p>In a worker this sends a message to the master. It is identical to\n<code>process.send()</code>.</p>\n<p>This example will echo back all messages from the master:</p>\n<pre><code class=\"lang-js\">if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&#39;hi there&#39;);\n\n} else if (cluster.isWorker) {\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    process.send(msg);\n  });\n}\n</code></pre>\n<h3>worker.suicide<span><a class=\"mark\" href=\"#cluster_worker_suicide\" id=\"cluster_worker_suicide\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a> instead.</pre><p>An alias to <a href=\"#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a>.</p>\n<p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>\n<p>The boolean <code>worker.suicide</code> lets you distinguish between voluntary\nand accidental exit, the master may choose not to respawn a worker based on\nthis value.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.suicide === true) {\n    console.log(&#39;Oh, it was just voluntary \u2013 no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre>\n<p>This API only exists for backwards compatibility and will be removed in the\nfuture.</p>\n<h2>Event: &#39;disconnect&#39;<span><a class=\"mark\" href=\"#cluster_event_disconnect_1\" id=\"cluster_event_disconnect_1\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n</ul>\n</div><p>Emitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\nworker.disconnect()).</p>\n<p>There may be a delay between the <code>&#39;disconnect&#39;</code> and <code>&#39;exit&#39;</code> events.  These events\ncan be used to detect if the process is stuck in a cleanup or if there are\nlong-living connections.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n</code></pre>\n<h2>Event: &#39;exit&#39;<span><a class=\"mark\" href=\"#cluster_event_exit_1\" id=\"cluster_event_exit_1\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> the exit code, if it exited normally.</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> the name of the signal (eg. <code>&#39;SIGHUP&#39;</code>) that caused\nthe process to be killed.</li>\n</ul>\n</div><p>When any of the workers die the cluster module will emit the <code>&#39;exit&#39;</code> event.</p>\n<p>This can be used to restart the worker by calling <code>.fork()</code> again.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  console.log(&#39;worker %d died (%s). restarting...&#39;,\n    worker.process.pid, signal || code);\n  cluster.fork();\n});\n</code></pre>\n<p>See <a href=\"child_process.html#child_process_event_exit\">child_process event: &#39;exit&#39;</a>.</p>\n<h2>Event: &#39;fork&#39;<span><a class=\"mark\" href=\"#cluster_event_fork\" id=\"cluster_event_fork\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n</ul>\n</div><p>When a new worker is forked the cluster module will emit a <code>&#39;fork&#39;</code> event.\nThis can be used to log worker activity, and create your own timeout.</p>\n<pre><code class=\"lang-js\">var timeouts = [];\nfunction errorMsg() {\n  console.error(&#39;Something must be wrong with the connection ...&#39;);\n}\n\ncluster.on(&#39;fork&#39;, (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n</code></pre>\n<h2>Event: &#39;listening&#39;<span><a class=\"mark\" href=\"#cluster_event_listening_1\" id=\"cluster_event_listening_1\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>After calling <code>listen()</code> from a worker, when the <code>&#39;listening&#39;</code> event is emitted on\nthe server, a <code>&#39;listening&#39;</code> event will also be emitted on <code>cluster</code> in the master.</p>\n<p>The event handler is executed with two arguments, the <code>worker</code> contains the worker\nobject and the <code>address</code> object contains the following connection properties:\n<code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening\non more than one address.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n</code></pre>\n<p>The <code>addressType</code> is one of:</p>\n<ul>\n<li><code>4</code> (TCPv4)</li>\n<li><code>6</code> (TCPv6)</li>\n<li><code>-1</code> (unix domain socket)</li>\n<li><code>&quot;udp4&quot;</code> or <code>&quot;udp6&quot;</code> (UDP v4 or v6)</li>\n</ul>\n<h2>Event: &#39;message&#39;<span><a class=\"mark\" href=\"#cluster_event_message_1\" id=\"cluster_event_message_1\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>handle</code> <span class=\"type\">&lt;undefined&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Emitted when any worker receives a message.</p>\n<p>See <a href=\"child_process.html#child_process_event_message\">child_process event: &#39;message&#39;</a>.</p>\n<p>Before Node.js v6.0, this event emitted only the message and the handle,\nbut not the worker object, contrary to what the documentation stated.</p>\n<p>If you need to support older versions and don&#39;t need the worker object,\nyou can work around the discrepancy by checking the number of arguments:</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;message&#39;, function(worker, message, handle) {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n</code></pre>\n<h2>Event: &#39;online&#39;<span><a class=\"mark\" href=\"#cluster_event_online_1\" id=\"cluster_event_online_1\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>worker</code> <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n</ul>\n</div><p>After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between <code>&#39;fork&#39;</code> and <code>&#39;online&#39;</code> is that fork is emitted when the\nmaster forks a worker, and &#39;online&#39; is emitted when the worker is running.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;online&#39;, (worker) =&gt; {\n  console.log(&#39;Yay, the worker responded after it was forked&#39;);\n});\n</code></pre>\n<h2>Event: &#39;setup&#39;<span><a class=\"mark\" href=\"#cluster_event_setup\" id=\"cluster_event_setup\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>settings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Emitted every time <code>.setupMaster()</code> is called.</p>\n<p>The <code>settings</code> object is the <code>cluster.settings</code> object at the time\n<code>.setupMaster()</code> was called and is advisory only, since multiple calls to\n<code>.setupMaster()</code> can be made in a single tick.</p>\n<p>If accuracy is important, use <code>cluster.settings</code>.</p>\n<h2>cluster.disconnect([callback])<span><a class=\"mark\" href=\"#cluster_cluster_disconnect_callback\" id=\"cluster_cluster_disconnect_callback\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called when all workers are disconnected and handles are\nclosed</li>\n</ul>\n</div><p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p>\n<p>When they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.</p>\n<p>The method takes an optional callback argument which will be called when finished.</p>\n<p>This can only be called from the master process.</p>\n<h2>cluster.fork([env])<span><a class=\"mark\" href=\"#cluster_cluster_fork_env\" id=\"cluster_cluster_fork_env\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Key/value pairs to add to worker process environment.</li>\n<li>return <a href=\"cluster.html#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a></li>\n</ul>\n</div><p>Spawn a new worker process.</p>\n<p>This can only be called from the master process.</p>\n<h2>cluster.isMaster<span><a class=\"mark\" href=\"#cluster_cluster_ismaster\" id=\"cluster_cluster_ismaster\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>True if the process is a master. This is determined\nby the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is\nundefined, then <code>isMaster</code> is <code>true</code>.</p>\n<h2>cluster.isWorker<span><a class=\"mark\" href=\"#cluster_cluster_isworker\" id=\"cluster_cluster_isworker\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p>\n<h2>cluster.schedulingPolicy<span><a class=\"mark\" href=\"#cluster_cluster_schedulingpolicy\" id=\"cluster_cluster_schedulingpolicy\">#</a></span></h2>\n<p>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or\n<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a\nglobal setting and effectively frozen once you spawn the first worker\nor call <code>cluster.setupMaster()</code>, whatever comes first.</p>\n<p><code>SCHED_RR</code> is the default on all operating systems except Windows.\nWindows will change to <code>SCHED_RR</code> once libuv is able to effectively\ndistribute IOCP handles without incurring a large performance hit.</p>\n<p><code>cluster.schedulingPolicy</code> can also be set through the\n<code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid\nvalues are <code>&quot;rr&quot;</code> and <code>&quot;none&quot;</code>.</p>\n<h2>cluster.settings<span><a class=\"mark\" href=\"#cluster_cluster_settings\" id=\"cluster_cluster_settings\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>execArgv</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> list of string arguments passed to the Node.js\nexecutable. (Default=<code>process.execArgv</code>)</li>\n<li><code>exec</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> file path to worker file.  (Default=<code>process.argv[1]</code>)</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> string arguments passed to worker.\n(Default=<code>process.argv.slice(2)</code>)</li>\n<li><code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> whether or not to send output to parent&#39;s stdio.\n(Default=<code>false</code>)</li>\n<li><code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li>\n<li><code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li>\n</ul>\n</li>\n</ul>\n</div><p>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain\nthe settings, including the default values.</p>\n<p>This object is not supposed to be changed or set manually, by you.</p>\n<h2>cluster.setupMaster([settings])<span><a class=\"mark\" href=\"#cluster_cluster_setupmaster_settings\" id=\"cluster_cluster_setupmaster_settings\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>settings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>exec</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> file path to worker file.  (Default=<code>process.argv[1]</code>)</li>\n<li><code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> string arguments passed to worker.\n(Default=<code>process.argv.slice(2)</code>)</li>\n<li><code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> whether or not to send output to parent&#39;s stdio.\n(Default=<code>false</code>)</li>\n</ul>\n</li>\n</ul>\n</div><p><code>setupMaster</code> is used to change the default &#39;fork&#39; behavior. Once called,\nthe settings will be present in <code>cluster.settings</code>.</p>\n<p>Note that:</p>\n<ul>\n<li>any settings changes only affect future calls to <code>.fork()</code> and have no\neffect on workers that are already running</li>\n<li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is\nthe <code>env</code> passed to <code>.fork()</code></li>\n<li>the defaults above apply to the first call only, the defaults for later\ncalls is the current value at the time of <code>cluster.setupMaster()</code> is called</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;https&#39;],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;http&#39;]\n});\ncluster.fork(); // http worker\n</code></pre>\n<p>This can only be called from the master process.</p>\n<h2>cluster.worker<span><a class=\"mark\" href=\"#cluster_cluster_worker\" id=\"cluster_cluster_worker\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>A reference to the current worker object. Not available in the master process.</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\n\nif (cluster.isMaster) {\n  console.log(&#39;I am master&#39;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n</code></pre>\n<h2>cluster.workers<span><a class=\"mark\" href=\"#cluster_cluster_workers\" id=\"cluster_cluster_workers\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.</p>\n<p>A worker is removed from cluster.workers after the worker has disconnected <em>and</em>\nexited. The order between these two events cannot be determined in advance.\nHowever, it is guaranteed that the removal from the cluster.workers list happens\nbefore last <code>&#39;disconnect&#39;</code> or <code>&#39;exit&#39;</code> event is emitted.</p>\n<pre><code class=\"lang-js\">// Go through all workers\nfunction eachWorker(callback) {\n  for (var id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send(&#39;big announcement to all workers&#39;);\n});\n</code></pre>\n<p>Should you wish to reference a worker over a communication channel, using\nthe worker&#39;s unique id is the easiest way to find the worker.</p>\n<pre><code class=\"lang-js\">socket.on(&#39;data&#39;, (id) =&gt; {\n  var worker = cluster.workers[id];\n});\n</code></pre>\n<!-- [end-include:cluster.md] -->\n<!-- [start-include:cli.md] -->\n<h1>Command Line Options<span><a class=\"mark\" href=\"#cli_command_line_options\" id=\"cli_command_line_options\">#</a></span></h1>\n<!--type=misc-->\n<p>Node.js comes with a variety of CLI options. These options expose built-in\ndebugging, multiple ways to execute scripts, and other helpful runtime options.</p>\n<p>To view this documentation as a manual page in your terminal, run <code>man node</code>.</p>\n<h2>Synopsis<span><a class=\"mark\" href=\"#cli_synopsis\" id=\"cli_synopsis\">#</a></span></h2>\n<p><code>node [options] [v8 options] [script.js | -e &quot;script&quot;] [arguments]</code></p>\n<p><code>node debug [script.js | -e &quot;script&quot; | &lt;host&gt;:&lt;port&gt;] \u2026</code></p>\n<p><code>node --v8-options</code></p>\n<p>Execute without arguments to start the <a href=\"repl.html\">REPL</a>.</p>\n<p><em>For more info about <code>node debug</code>, please see the <a href=\"debugger.html\">debugger</a> documentation.</em></p>\n<h2>Options<span><a class=\"mark\" href=\"#cli_options\" id=\"cli_options\">#</a></span></h2>\n<h3><code>-v</code>, <code>--version</code><span><a class=\"mark\" href=\"#cli_v_version\" id=\"cli_v_version\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.3</span>\n</div><p>Print node&#39;s version.</p>\n<h3><code>-h</code>, <code>--help</code><span><a class=\"mark\" href=\"#cli_h_help\" id=\"cli_h_help\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.3</span>\n</div><p>Print node command line options.\nThe output of this option is less detailed than this document.</p>\n<h3><code>-e</code>, <code>--eval &quot;script&quot;</code><span><a class=\"mark\" href=\"#cli_e_eval_script\" id=\"cli_e_eval_script\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.2</span>\n</div><p>Evaluate the following argument as JavaScript. The modules which are\npredefined in the REPL can also be used in <code>script</code>.</p>\n<h3><code>-p</code>, <code>--print &quot;script&quot;</code><span><a class=\"mark\" href=\"#cli_p_print_script\" id=\"cli_p_print_script\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.4</span>\n</div><p>Identical to <code>-e</code> but prints the result.</p>\n<h3><code>-c</code>, <code>--check</code><span><a class=\"mark\" href=\"#cli_c_check\" id=\"cli_c_check\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.0.0</span>\n</div><p>Syntax check the script without executing.</p>\n<h3><code>-i</code>, <code>--interactive</code><span><a class=\"mark\" href=\"#cli_i_interactive\" id=\"cli_i_interactive\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>Opens the REPL even if stdin does not appear to be a terminal.</p>\n<h3><code>-r</code>, <code>--require module</code><span><a class=\"mark\" href=\"#cli_r_require_module\" id=\"cli_r_require_module\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.6.0</span>\n</div><p>Preload the specified module at startup.</p>\n<p>Follows <code>require()</code>&#39;s module resolution\nrules. <code>module</code> may be either a path to a file, or a node module name.</p>\n<h3><code>--no-deprecation</code><span><a class=\"mark\" href=\"#cli_no_deprecation\" id=\"cli_no_deprecation\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.0</span>\n</div><p>Silence deprecation warnings.</p>\n<h3><code>--trace-deprecation</code><span><a class=\"mark\" href=\"#cli_trace_deprecation\" id=\"cli_trace_deprecation\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.0</span>\n</div><p>Print stack traces for deprecations.</p>\n<h3><code>--throw-deprecation</code><span><a class=\"mark\" href=\"#cli_throw_deprecation\" id=\"cli_throw_deprecation\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.14</span>\n</div><p>Throw errors for deprecations.</p>\n<h3><code>--no-warnings</code><span><a class=\"mark\" href=\"#cli_no_warnings\" id=\"cli_no_warnings\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Silence all process warnings (including deprecations).</p>\n<h3><code>--trace-warnings</code><span><a class=\"mark\" href=\"#cli_trace_warnings\" id=\"cli_trace_warnings\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Print stack traces for process warnings (including deprecations).</p>\n<h3><code>--trace-sync-io</code><span><a class=\"mark\" href=\"#cli_trace_sync_io\" id=\"cli_trace_sync_io\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v2.1.0</span>\n</div><p>Prints a stack trace whenever synchronous I/O is detected after the first turn\nof the event loop.</p>\n<h3><code>--zero-fill-buffers</code><span><a class=\"mark\" href=\"#cli_zero_fill_buffers\" id=\"cli_zero_fill_buffers\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Automatically zero-fills all newly allocated <a href=\"buffer.html\">Buffer</a> and <a href=\"buffer.html#buffer_class_slowbuffer\">SlowBuffer</a>\ninstances.</p>\n<h3><code>--preserve-symlinks</code><span><a class=\"mark\" href=\"#cli_preserve_symlinks\" id=\"cli_preserve_symlinks\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.3.0</span>\n</div><p>Instructs the module loader to preserve symbolic links when resolving and\ncaching modules.</p>\n<p>By default, when Node.js loads a module from a path that is symbolically linked\nto a different on-disk location, Node.js will dereference the link and use the\nactual on-disk &quot;real path&quot; of the module as both an identifier and as a root\npath to locate other dependency modules. In most cases, this default behavior\nis acceptable. However, when using symbolically linked peer dependencies, as\nillustrated in the example below, the default behavior causes an exception to\nbe thrown if <code>moduleA</code> attempts to require <code>moduleB</code> as a peer dependency:</p>\n<pre><code class=\"lang-text\">{appDir}\n \u251c\u2500\u2500 app\n \u2502   \u251c\u2500\u2500 index.js\n \u2502   \u2514\u2500\u2500 node_modules\n \u2502       \u251c\u2500\u2500 moduleA -&gt; {appDir}/moduleA\n \u2502       \u2514\u2500\u2500 moduleB\n \u2502           \u251c\u2500\u2500 index.js\n \u2502           \u2514\u2500\u2500 package.json\n \u2514\u2500\u2500 moduleA\n     \u251c\u2500\u2500 index.js\n     \u2514\u2500\u2500 package.json\n</code></pre>\n<p>The <code>--preserve-symlinks</code> command line flag instructs Node.js to use the\nsymlink path for modules as opposed to the real path, allowing symbolically\nlinked peer dependencies to be found.</p>\n<p>Note, however, that using <code>--preserve-symlinks</code> can have other side effects.\nSpecifically, symbolically linked <em>native</em> modules can fail to load if those\nare linked from more than one location in the dependency tree (Node.js would\nsee those as two separate modules and would attempt to load the module multiple\ntimes, causing an exception to be thrown).</p>\n<h3><code>--track-heap-objects</code><span><a class=\"mark\" href=\"#cli_track_heap_objects\" id=\"cli_track_heap_objects\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v2.4.0</span>\n</div><p>Track heap object allocations for heap snapshots.</p>\n<h3><code>--prof-process</code><span><a class=\"mark\" href=\"#cli_prof_process\" id=\"cli_prof_process\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Process v8 profiler output generated using the v8 option <code>--prof</code>.</p>\n<h3><code>--v8-options</code><span><a class=\"mark\" href=\"#cli_v8_options\" id=\"cli_v8_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.3</span>\n</div><p>Print v8 command line options.</p>\n<p>Note: v8 options allow words to be separated by both dashes (<code>-</code>) or underscores\n(<code>_</code>).</p>\n<p>For example, <code>--stack-trace-limit</code> is equivalent to <code>--stack_trace_limit</code>.</p>\n<h3><code>--tls-cipher-list=list</code><span><a class=\"mark\" href=\"#cli_tls_cipher_list_list\" id=\"cli_tls_cipher_list_list\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v4.0.0</span>\n</div><p>Specify an alternative default TLS cipher list. (Requires Node.js to be built\nwith crypto support. (Default))</p>\n<h3><code>--enable-fips</code><span><a class=\"mark\" href=\"#cli_enable_fips\" id=\"cli_enable_fips\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with\n<code>./configure --openssl-fips</code>)</p>\n<h3><code>--force-fips</code><span><a class=\"mark\" href=\"#cli_force_fips\" id=\"cli_force_fips\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.)\n(Same requirements as <code>--enable-fips</code>)</p>\n<h3><code>--icu-data-dir=file</code><span><a class=\"mark\" href=\"#cli_icu_data_dir_file\" id=\"cli_icu_data_dir_file\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><p>Specify ICU data load path. (overrides <code>NODE_ICU_DATA</code>)</p>\n<h2>Environment Variables<span><a class=\"mark\" href=\"#cli_environment_variables\" id=\"cli_environment_variables\">#</a></span></h2>\n<h3><code>NODE_DEBUG=module[,\u2026]</code><span><a class=\"mark\" href=\"#cli_node_debug_module\" id=\"cli_node_debug_module\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.32</span>\n</div><p><code>&#39;,&#39;</code>-separated list of core modules that should print debug information.</p>\n<h3><code>NODE_PATH=path[:\u2026]</code><span><a class=\"mark\" href=\"#cli_node_path_path\" id=\"cli_node_path_path\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.32</span>\n</div><p><code>&#39;:&#39;</code>-separated list of directories prefixed to the module search path.</p>\n<p><em>Note: on Windows, this is a <code>&#39;;&#39;</code>-separated list instead.</em></p>\n<h3><code>NODE_DISABLE_COLORS=1</code><span><a class=\"mark\" href=\"#cli_node_disable_colors_1\" id=\"cli_node_disable_colors_1\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.0</span>\n</div><p>When set to <code>1</code> colors will not be used in the REPL.</p>\n<h3><code>NODE_ICU_DATA=file</code><span><a class=\"mark\" href=\"#cli_node_icu_data_file\" id=\"cli_node_icu_data_file\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><p>Data path for ICU (Intl object) data. Will extend linked-in data when compiled\nwith small-icu support.</p>\n<h3><code>NODE_REPL_HISTORY=file</code><span><a class=\"mark\" href=\"#cli_node_repl_history_file\" id=\"cli_node_repl_history_file\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.0.0</span>\n</div><p>Path to the file used to store the persistent REPL history. The default path is\n<code>~/.node_repl_history</code>, which is overridden by this variable. Setting the value\nto an empty string (<code>&quot;&quot;</code> or <code>&quot; &quot;</code>) disables persistent REPL history.</p>\n<!-- [end-include:cli.md] -->\n<!-- [start-include:console.md] -->\n<h1>Console<span><a class=\"mark\" href=\"#console_console\" id=\"console_console\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>console</code> module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.</p>\n<p>The module exports two specific components:</p>\n<ul>\n<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and\n<code>console.warn()</code> that can be used to write to any Node.js stream.</li>\n<li>A global <code>console</code> instance configured to write to <code>stdout</code> and <code>stderr</code>.\nBecause this object is global, it can be used without calling\n<code>require(&#39;console&#39;)</code>.</li>\n</ul>\n<p>Example using the global <code>console</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;hello world&#39;);\n  // Prints: hello world, to stdout\nconsole.log(&#39;hello %s&#39;, &#39;world&#39;);\n  // Prints: hello world, to stdout\nconsole.error(new Error(&#39;Whoops, something bad happened&#39;));\n  // Prints: [Error: Whoops, something bad happened], to stderr\n\nconst name = &#39;Will Robinson&#39;;\nconsole.warn(`Danger ${name}! Danger!`);\n  // Prints: Danger Will Robinson! Danger!, to stderr\n</code></pre>\n<p>Example using the <code>Console</code> class:</p>\n<pre><code class=\"lang-js\">const out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log(&#39;hello world&#39;);\n  // Prints: hello world, to out\nmyConsole.log(&#39;hello %s&#39;, &#39;world&#39;);\n  // Prints: hello world, to out\nmyConsole.error(new Error(&#39;Whoops, something bad happened&#39;));\n  // Prints: [Error: Whoops, something bad happened], to err\n\nconst name = &#39;Will Robinson&#39;;\nmyConsole.warn(`Danger ${name}! Danger!`);\n  // Prints: Danger Will Robinson! Danger!, to err\n</code></pre>\n<p>While the API for the <code>Console</code> class is designed fundamentally around the\nbrowser <code>console</code> object, the <code>Console</code> in Node.js is <em>not</em> intended to\nduplicate the browser&#39;s functionality exactly.</p>\n<h2>Asynchronous vs Synchronous Consoles<span><a class=\"mark\" href=\"#console_asynchronous_vs_synchronous_consoles\" id=\"console_asynchronous_vs_synchronous_consoles\">#</a></span></h2>\n<p>The console functions are usually asynchronous unless the destination is a file.\nDisks are fast and operating systems normally employ write-back caching;\nit should be a very rare occurrence indeed that a write blocks, but it\nis possible.</p>\n<p>Additionally, console functions are blocking when outputting to TTYs\n(terminals) on OS X as a workaround for the OS&#39;s very small, 1kb buffer size.\nThis is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Class: Console<span><a class=\"mark\" href=\"#console_class_console\" id=\"console_class_console\">#</a></span></h2>\n<!--type=class-->\n<p>The <code>Console</code> class can be used to create a simple logger with configurable\noutput streams and can be accessed using either <code>require(&#39;console&#39;).Console</code>\nor <code>console.Console</code>:</p>\n<pre><code class=\"lang-js\">const Console = require(&#39;console&#39;).Console;\nconst Console = console.Console;\n</code></pre>\n<h3>new Console(stdout[, stderr])<span><a class=\"mark\" href=\"#console_new_console_stdout_stderr\" id=\"console_new_console_stdout_stderr\">#</a></span></h3>\n<p>Creates a new <code>Console</code> by passing one or two writable stream instances.\n<code>stdout</code> is a writable stream to print log or info output. <code>stderr</code>\nis used for warning or error output. If <code>stderr</code> isn&#39;t passed, warning and error\noutput will be sent to <code>stdout</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console(output, errorOutput);\n// use it like console\nvar count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console(process.stdout, process.stderr);\n</code></pre>\n<h3>console.assert(value[, message][, ...])<span><a class=\"mark\" href=\"#console_console_assert_value_message\" id=\"console_console_assert_value_message\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.101</span>\n</div><p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not,\nan <code>AssertionError</code> is thrown. If provided, the error <code>message</code> is formatted\nusing <a href=\"util.html#util_util_format_format\"><code>util.format()</code></a> and used as the error message.</p>\n<pre><code class=\"lang-js\">console.assert(true, &#39;does nothing&#39;);\n  // OK\nconsole.assert(false, &#39;Whoops %s&#39;, &#39;didn\\&#39;t work&#39;);\n  // AssertionError: Whoops didn&#39;t work\n</code></pre>\n<p><em>Note: the <code>console.assert()</code> method is implemented differently in Node.js\nthan the <code>console.assert()</code> method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/assert\">available in browsers</a>.</em></p>\n<p>Specifically, in browsers, calling <code>console.assert()</code> with a falsy\nassertion will cause the <code>message</code> to be printed to the console without\ninterrupting execution of subsequent code. In Node.js, however, a falsy\nassertion will cause an <code>AssertionError</code> to be thrown.</p>\n<p>Functionality approximating that implemented by browsers can be implemented\nby extending Node.js&#39; <code>console</code> and overriding the <code>console.assert()</code> method.</p>\n<p>In the following example, a simple module is created that extends and overrides\nthe default behavior of <code>console</code> in Node.js.</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\n\n// Creates a simple extension of console with a\n// new impl for assert without monkey-patching.\nconst myConsole = Object.setPrototypeOf({\n  assert(assertion, message, ...args) {\n    try {\n      console.assert(assertion, message, ...args);\n    } catch (err) {\n      console.error(err.stack);\n    }\n  }\n}, console);\n\nmodule.exports = myConsole;\n</code></pre>\n<p>This can then be used as a direct replacement for the built in console:</p>\n<pre><code class=\"lang-js\">const console = require(&#39;./myConsole&#39;);\nconsole.assert(false, &#39;this message will print, but no error thrown&#39;);\nconsole.log(&#39;this will also print&#39;);\n</code></pre>\n<h3>console.dir(obj[, options])<span><a class=\"mark\" href=\"#console_console_dir_obj_options\" id=\"console_console_dir_obj_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.101</span>\n</div><p>Uses <a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>.\nThis function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>. An\noptional <code>options</code> object may be passed to alter certain aspects of the\nformatted string:</p>\n<ul>\n<li><p><code>showHidden</code> - if <code>true</code> then the object&#39;s non-enumerable and symbol\nproperties will be shown too. Defaults to <code>false</code>.</p>\n</li>\n<li><p><code>depth</code> - tells <a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> how many times to recurse while\nformatting the object. This is useful for inspecting large complicated objects.\nDefaults to <code>2</code>. To make it recurse indefinitely, pass <code>null</code>.</p>\n</li>\n<li><p><code>colors</code> - if <code>true</code>, then the output will be styled with ANSI color codes.\nDefaults to <code>false</code>. Colors are customizable; see\n<a href=\"util.html#util_customizing_util_inspect_colors\">customizing <code>util.inspect()</code> colors</a>.</p>\n</li>\n</ul>\n<h3>console.error([data][, ...])<span><a class=\"mark\" href=\"#console_console_error_data\" id=\"console_console_error_data\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.100</span>\n</div><p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to <code>printf(3)</code> (the arguments are all passed to\n<a href=\"util.html#util_util_format_format\"><code>util.format()</code></a>).</p>\n<pre><code class=\"lang-js\">const code = 5;\nconsole.error(&#39;error #%d&#39;, code);\n  // Prints: error #5, to stderr\nconsole.error(&#39;error&#39;, code);\n  // Prints: error 5, to stderr\n</code></pre>\n<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then\n<a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> is called on each argument and the resulting string\nvalues are concatenated. See <a href=\"util.html#util_util_format_format\"><code>util.format()</code></a> for more information.</p>\n<h3>console.info([data][, ...])<span><a class=\"mark\" href=\"#console_console_info_data\" id=\"console_console_info_data\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.100</span>\n</div><p>The <code>console.info()</code> function is an alias for <a href=\"console.html#console_console_log_data\"><code>console.log()</code></a>.</p>\n<h3>console.log([data][, ...])<span><a class=\"mark\" href=\"#console_console_log_data\" id=\"console_console_log_data\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.100</span>\n</div><p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to <code>printf(3)</code> (the arguments are all passed to\n<a href=\"util.html#util_util_format_format\"><code>util.format()</code></a>).</p>\n<pre><code class=\"lang-js\">var count = 5;\nconsole.log(&#39;count: %d&#39;, count);\n  // Prints: count: 5, to stdout\nconsole.log(&#39;count: &#39;, count);\n  // Prints: count: 5, to stdout\n</code></pre>\n<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then\n<a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> is called on each argument and the resulting string\nvalues are concatenated. See <a href=\"util.html#util_util_format_format\"><code>util.format()</code></a> for more information.</p>\n<h3>console.time(label)<span><a class=\"mark\" href=\"#console_console_time_label\" id=\"console_console_time_label\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.104</span>\n</div><p>Starts a timer that can be used to compute the duration of an operation. Timers\nare identified by a unique <code>label</code>. Use the same <code>label</code> when you call\n<a href=\"#console_console_timeend_label\"><code>console.timeEnd()</code></a> to stop the timer and output the elapsed time in\nmilliseconds to <code>stdout</code>. Timer durations are accurate to the sub-millisecond.</p>\n<h3>console.timeEnd(label)<span><a class=\"mark\" href=\"#console_console_timeend_label\" id=\"console_console_timeend_label\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.104</span>\n</div><p>Stops a timer that was previously started by calling <a href=\"#console_console_time_label\"><code>console.time()</code></a> and\nprints the result to <code>stdout</code>:</p>\n<pre><code class=\"lang-js\">console.time(&#39;100-elements&#39;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&#39;100-elements&#39;);\n// prints 100-elements: 225.438ms\n</code></pre>\n<p><em>Note: As of Node.js v6.0.0, <code>console.timeEnd()</code> deletes the timer to avoid\nleaking it. On older versions, the timer persisted. This allowed\n<code>console.timeEnd()</code> to be called multiple times for the same label. This\nfunctionality was unintended and is no longer supported.</em></p>\n<h3>console.trace(message[, ...])<span><a class=\"mark\" href=\"#console_console_trace_message\" id=\"console_console_trace_message\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.104</span>\n</div><p>Prints to <code>stderr</code> the string <code>&#39;Trace :&#39;</code>, followed by the <a href=\"util.html#util_util_format_format\"><code>util.format()</code></a>\nformatted message and stack trace to the current position in the code.</p>\n<pre><code class=\"lang-js\">console.trace(&#39;Show me&#39;);\n  // Prints: (stack trace will vary based on where trace is called)\n  //  Trace: Show me\n  //    at repl:2:9\n  //    at REPLServer.defaultEval (repl.js:248:27)\n  //    at bound (domain.js:287:14)\n  //    at REPLServer.runBound [as eval] (domain.js:300:12)\n  //    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)\n  //    at emitOne (events.js:82:20)\n  //    at REPLServer.emit (events.js:169:7)\n  //    at REPLServer.Interface._onLine (readline.js:210:10)\n  //    at REPLServer.Interface._line (readline.js:549:8)\n  //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\n</code></pre>\n<h3>console.warn([data][, ...])<span><a class=\"mark\" href=\"#console_console_warn_data\" id=\"console_console_warn_data\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.100</span>\n</div><p>The <code>console.warn()</code> function is an alias for <a href=\"console.html#console_console_error_data\"><code>console.error()</code></a>.</p>\n<!-- [end-include:console.md] -->\n<!-- [start-include:crypto.md] -->\n<h1>Crypto<span><a class=\"mark\" href=\"#crypto_crypto\" id=\"crypto_crypto\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>crypto</code> module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign and verify functions.</p>\n<p>Use <code>require(&#39;crypto&#39;)</code> to access this module.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\n\nconst secret = &#39;abcdefg&#39;;\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\n                   .update(&#39;I love cupcakes&#39;)\n                   .digest(&#39;hex&#39;);\nconsole.log(hash);\n  // Prints:\n  //   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n</code></pre>\n<h2>Determining if crypto support is unavailable<span><a class=\"mark\" href=\"#crypto_determining_if_crypto_support_is_unavailable\" id=\"crypto_determining_if_crypto_support_is_unavailable\">#</a></span></h2>\n<p>It is possible for Node.js to be built without including support for the\n<code>crypto</code> module. In such cases, calling <code>require(&#39;crypto&#39;)</code> will result in an\nerror being thrown.</p>\n<pre><code class=\"lang-js\">var crypto;\ntry {\n  crypto = require(&#39;crypto&#39;);\n} catch (err) {\n  console.log(&#39;crypto support is disabled!&#39;);\n}\n</code></pre>\n<h2>Class: Certificate<span><a class=\"mark\" href=\"#crypto_class_certificate\" id=\"crypto_class_certificate\">#</a></span></h2>\n<p>SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and now specified formally as part of <a href=\"http://www.w3.org/TR/html5/forms.html#the-keygen-element\">HTML5&#39;s <code>keygen</code> element</a>.</p>\n<p>The <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n<code>&lt;keygen&gt;</code> element. Node.js uses <a href=\"https://www.openssl.org/docs/apps/spkac.html\">OpenSSL&#39;s SPKAC implementation</a> internally.</p>\n<h3>new crypto.Certificate()<span><a class=\"mark\" href=\"#crypto_new_crypto_certificate\" id=\"crypto_new_crypto_certificate\">#</a></span></h3>\n<p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\nor by calling <code>crypto.Certificate()</code> as a function:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n</code></pre>\n<h3>certificate.exportChallenge(spkac)<span><a class=\"mark\" href=\"#crypto_certificate_exportchallenge_spkac\" id=\"crypto_certificate_exportchallenge_spkac\">#</a></span></h3>\n<p>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportChallenge()</code> returns the challenge component in the\nform of a Node.js <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string\nor a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString(&#39;utf8&#39;));\n  // Prints the challenge as a UTF8 string\n</code></pre>\n<h3>certificate.exportPublicKey(spkac)<span><a class=\"mark\" href=\"#crypto_certificate_exportpublickey_spkac\" id=\"crypto_certificate_exportpublickey_spkac\">#</a></span></h3>\n<p>The <code>spkac</code> data structure includes a public key and a challenge. The\n<code>certificate.exportPublicKey()</code> returns the public key component in the\nform of a Node.js <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string\nor a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n  // Prints the public key as &lt;Buffer ...&gt;\n</code></pre>\n<h3>certificate.verifySpkac(spkac)<span><a class=\"mark\" href=\"#crypto_certificate_verifyspkac_spkac\" id=\"crypto_certificate_verifyspkac_spkac\">#</a></span></h3>\n<p>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.\nThe <code>spkac</code> argument must be a Node.js <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n  // Prints true or false\n</code></pre>\n<h2>Class: Cipher<span><a class=\"mark\" href=\"#crypto_class_cipher\" id=\"crypto_class_cipher\">#</a></span></h2>\n<p>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or</li>\n<li>Using the <a href=\"#crypto_cipher_update_data_input_encoding_output_encoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> methods to produce\nthe encrypted data.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createcipher_algorithm_password\"><code>crypto.createCipher()</code></a> or <a href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\"><code>crypto.createCipheriv()</code></a> methods are\nused to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Cipher</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;&#39;;\ncipher.on(&#39;readable&#39;, () =&gt; {\n  var data = cipher.read();\n  if (data)\n    encrypted += data.toString(&#39;hex&#39;);\n});\ncipher.on(&#39;end&#39;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&#39;some clear text data&#39;);\ncipher.end();\n</code></pre>\n<p>Example: Using <code>Cipher</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\n\ninput.pipe(cipher).pipe(output);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_cipher_update_data_input_encoding_output_encoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\nencrypted += cipher.final(&#39;hex&#39;);\nconsole.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n</code></pre>\n<h3>cipher.final([output_encoding])<span><a class=\"mark\" href=\"#crypto_cipher_final_output_encoding\" id=\"crypto_cipher_final_output_encoding\">#</a></span></h3>\n<p>Returns any remaining enciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no\nlonger be used to encrypt data. Attempts to call <code>cipher.final()</code> more than\nonce will result in an error being thrown.</p>\n<h3>cipher.setAAD(buffer)<span><a class=\"mark\" href=\"#crypto_cipher_setaad_buffer\" id=\"crypto_cipher_setaad_buffer\">#</a></span></h3>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p>\n<h3>cipher.getAuthTag()<span><a class=\"mark\" href=\"#crypto_cipher_getauthtag\" id=\"crypto_cipher_getauthtag\">#</a></span></h3>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.getAuthTag()</code> method returns a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> containing\nthe <em>authentication tag</em> that has been computed from the given data.</p>\n<p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has\nbeen completed using the <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> method.</p>\n<h3>cipher.setAutoPadding(auto_padding=true)<span><a class=\"mark\" href=\"#crypto_cipher_setautopadding_auto_padding_true\" id=\"crypto_cipher_setautopadding_auto_padding_true\">#</a></span></h3>\n<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call <code>cipher.setAutoPadding(false)</code>.</p>\n<p>When <code>auto_padding</code> is <code>false</code>, the length of the entire input data must be a\nmultiple of the cipher&#39;s block size or <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> will throw an Error.\nDisabling automatic padding is useful for non-standard padding, for instance\nusing <code>0x0</code> instead of PKCS padding.</p>\n<p>The <code>cipher.setAutoPadding()</code> method must be called before <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a>.</p>\n<h3>cipher.update(data[, input_encoding][, output_encoding])<span><a class=\"mark\" href=\"#crypto_cipher_update_data_input_encoding_output_encoding\" id=\"crypto_cipher_update_data_input_encoding_output_encoding\">#</a></span></h3>\n<p>Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nit&#39;s value must be one of <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code>, or <code>&#39;binary&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. If <code>data</code> is a\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p>\n<p>The <code>output_encoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>. If the <code>output_encoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>output_encoding</code> is provided, a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>cipher.update()</code> method can be called multiple times with new data until\n<a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> is called. Calling <code>cipher.update()</code> after\n<a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> will result in an error being thrown.</p>\n<h2>Class: Decipher<span><a class=\"mark\" href=\"#crypto_class_decipher\" id=\"crypto_class_decipher\">#</a></span></h2>\n<p>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or</li>\n<li>Using the <a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a> and <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> methods to\nproduce the unencrypted data.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createdecipher_algorithm_password\"><code>crypto.createDecipher()</code></a> or <a href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\"><code>crypto.createDecipheriv()</code></a> methods are\nused to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Decipher</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar decrypted = &#39;&#39;;\ndecipher.on(&#39;readable&#39;, () =&gt; {\n  var data = decipher.read();\n  if (data)\n  decrypted += data.toString(&#39;utf8&#39;);\n});\ndecipher.on(&#39;end&#39;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\ndecipher.write(encrypted, &#39;hex&#39;);\ndecipher.end();\n</code></pre>\n<p>Example: Using <code>Decipher</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.enc&#39;);\nconst output = fs.createWriteStream(&#39;test.js&#39;);\n\ninput.pipe(decipher).pipe(output);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a> and <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\nvar decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\ndecrypted += decipher.final(&#39;utf8&#39;);\nconsole.log(decrypted);\n  // Prints: some clear text data\n</code></pre>\n<h3>decipher.final([output_encoding])<span><a class=\"mark\" href=\"#crypto_decipher_final_output_encoding\" id=\"crypto_decipher_final_output_encoding\">#</a></span></h3>\n<p>Returns any remaining deciphered contents. If <code>output_encoding</code>\nparameter is one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\nIf an <code>output_encoding</code> is not provided, a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can\nno longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more\nthan once will result in an error being thrown.</p>\n<h3>decipher.setAAD(buffer)<span><a class=\"mark\" href=\"#crypto_decipher_setaad_buffer\" id=\"crypto_decipher_setaad_buffer\">#</a></span></h3>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p>\n<h3>decipher.setAuthTag(buffer)<span><a class=\"mark\" href=\"#crypto_decipher_setauthtag_buffer\" id=\"crypto_decipher_setauthtag_buffer\">#</a></span></h3>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\nsupported), the <code>decipher.setAuthTag()</code> method is used to pass in the\nreceived <em>authentication tag</em>. If no tag is provided, or if the cipher text\nhas been tampered with, <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> with throw, indicating that the\ncipher text should be discarded due to failed authentication.</p>\n<h3>decipher.setAutoPadding(auto_padding=true)<span><a class=\"mark\" href=\"#crypto_decipher_setautopadding_auto_padding_true\" id=\"crypto_decipher_setautopadding_auto_padding_true\">#</a></span></h3>\n<p>When data has been encrypted without standard block padding, calling\n<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent\n<a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> from checking for and removing padding.</p>\n<p>Turning auto padding off will only work if the input data&#39;s length is a\nmultiple of the ciphers block size.</p>\n<p>The <code>decipher.setAutoPadding()</code> method must be called before\n<a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a>.</p>\n<h3>decipher.update(data[, input_encoding][, output_encoding])<span><a class=\"mark\" href=\"#crypto_decipher_update_data_input_encoding_output_encoding\" id=\"crypto_decipher_update_data_input_encoding_output_encoding\">#</a></span></h3>\n<p>Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\nit&#39;s value must be one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code>, or <code>&#39;hex&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>input_encoding</code>\nargument is not given, <code>data</code> must be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. If <code>data</code> is a\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p>\n<p>The <code>output_encoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;binary&#39;</code>, <code>&#39;ascii&#39;</code> or <code>&#39;utf8&#39;</code>. If the <code>output_encoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>output_encoding</code> is provided, a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>decipher.update()</code> method can be called multiple times with new data until\n<a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> is called. Calling <code>decipher.update()</code> after\n<a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> will result in an error being thrown.</p>\n<h2>Class: DiffieHellman<span><a class=\"mark\" href=\"#crypto_class_diffiehellman\" id=\"crypto_class_diffiehellman\">#</a></span></h2>\n<p>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key\nexchanges.</p>\n<p>Instances of the <code>DiffieHellman</code> class can be created using the\n<a href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\"><code>crypto.createDiffieHellman()</code></a> function.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\n// OK\nassert.equal(alice_secret.toString(&#39;hex&#39;), bob_secret.toString(&#39;hex&#39;));\n</code></pre>\n<h3>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding\" id=\"crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding\">#</a></span></h3>\n<p>Computes the shared secret using <code>other_public_key</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified <code>input_encoding</code>, and secret is\nencoded using specified <code>output_encoding</code>. Encodings can be\n<code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>output_encoding</code> is given a string is returned; otherwise, a\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.generateKeys([encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_generatekeys_encoding\" id=\"crypto_diffiehellman_generatekeys_encoding\">#</a></span></h3>\n<p>Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified <code>encoding</code>. This key should be\ntransferred to the other party. Encoding can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>,\nor <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is returned; otherwise a\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.getGenerator([encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_getgenerator_encoding\" id=\"crypto_diffiehellman_getgenerator_encoding\">#</a></span></h3>\n<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can\nbe <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If  <code>encoding</code> is provided a string is\nreturned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.getPrime([encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_getprime_encoding\" id=\"crypto_diffiehellman_getprime_encoding\">#</a></span></h3>\n<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can\nbe <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is\nreturned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.getPrivateKey([encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_getprivatekey_encoding\" id=\"crypto_diffiehellman_getprivatekey_encoding\">#</a></span></h3>\n<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.getPublicKey([encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_getpublickey_encoding\" id=\"crypto_diffiehellman_getpublickey_encoding\">#</a></span></h3>\n<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which\ncan be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>diffieHellman.setPrivateKey(private_key[, encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_setprivatekey_private_key_encoding\" id=\"crypto_diffiehellman_setprivatekey_private_key_encoding\">#</a></span></h3>\n<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>, <code>private_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<h3>diffieHellman.setPublicKey(public_key[, encoding])<span><a class=\"mark\" href=\"#crypto_diffiehellman_setpublickey_public_key_encoding\" id=\"crypto_diffiehellman_setpublickey_public_key_encoding\">#</a></span></h3>\n<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>, <code>public_key</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected\nto be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<h3>diffieHellman.verifyError<span><a class=\"mark\" href=\"#crypto_diffiehellman_verifyerror\" id=\"crypto_diffiehellman_verifyerror\">#</a></span></h3>\n<p>A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the <code>DiffieHellman</code> object.</p>\n<p>The following values are valid for this property (as defined in <code>constants</code>\nmodule):</p>\n<ul>\n<li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li>\n<li><code>DH_CHECK_P_NOT_PRIME</code></li>\n<li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li>\n<li><code>DH_NOT_SUITABLE_GENERATOR</code></li>\n</ul>\n<h2>Class: ECDH<span><a class=\"mark\" href=\"#crypto_class_ecdh\" id=\"crypto_class_ecdh\">#</a></span></h2>\n<p>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.</p>\n<p>Instances of the <code>ECDH</code> class can be created using the\n<a href=\"#crypto_crypto_createecdh_curve_name\"><code>crypto.createECDH()</code></a> function.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\nconst alice_key = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\nconst bob_key = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst alice_secret = alice.computeSecret(bob_key);\nconst bob_secret = bob.computeSecret(alice_key);\n\nassert(alice_secret, bob_secret);\n  // OK\n</code></pre>\n<h3>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])<span><a class=\"mark\" href=\"#crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding\" id=\"crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding\">#</a></span></h3>\n<p>Computes the shared secret using <code>other_public_key</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using specified <code>input_encoding</code>, and the returned secret\nis encoded using the specified <code>output_encoding</code>. Encodings can be\n<code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\nprovided, <code>other_public_key</code> is expected to be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>output_encoding</code> is given a string will be returned; otherwise a\n<a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>ecdh.generateKeys([encoding[, format]])<span><a class=\"mark\" href=\"#crypto_ecdh_generatekeys_encoding_format\" id=\"crypto_ecdh_generatekeys_encoding_format\">#</a></span></h3>\n<p>Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified <code>format</code> and <code>encoding</code>. This key should be\ntransferred to the other party.</p>\n<p>The <code>format</code> arguments specifies point encoding and can be <code>&#39;compressed&#39;</code>,\n<code>&#39;uncompressed&#39;</code>, or <code>&#39;hybrid&#39;</code>. If <code>format</code> is not specified, the point will\nbe returned in <code>&#39;uncompressed&#39;</code> format.</p>\n<p>The <code>encoding</code> argument can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>\nis returned.</p>\n<h3>ecdh.getPrivateKey([encoding])<span><a class=\"mark\" href=\"#crypto_ecdh_getprivatekey_encoding\" id=\"crypto_ecdh_getprivatekey_encoding\">#</a></span></h3>\n<p>Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided\na string is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<h3>ecdh.getPublicKey([encoding[, format]])<span><a class=\"mark\" href=\"#crypto_ecdh_getpublickey_encoding_format\" id=\"crypto_ecdh_getpublickey_encoding_format\">#</a></span></h3>\n<p>Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and\n<code>format</code>.</p>\n<p>The <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code>,\n<code>&#39;uncompressed&#39;</code>, or <code>&#39;hybrid&#39;</code>. If <code>format</code> is not specified the point will be\nreturned in <code>&#39;uncompressed&#39;</code> format.</p>\n<p>The <code>encoding</code> argument can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is specified, a string is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is\nreturned.</p>\n<h3>ecdh.setPrivateKey(private_key[, encoding])<span><a class=\"mark\" href=\"#crypto_ecdh_setprivatekey_private_key_encoding\" id=\"crypto_ecdh_setprivatekey_private_key_encoding\">#</a></span></h3>\n<p>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>&#39;binary&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected\nto be a string; otherwise <code>private_key</code> is expected to be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. If\n<code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the ECDH object.</p>\n<h3>ecdh.setPublicKey(public_key[, encoding])<span><a class=\"mark\" href=\"#crypto_ecdh_setpublickey_public_key_encoding\" id=\"crypto_ecdh_setpublickey_public_key_encoding\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><p>Sets the EC Diffie-Hellman public key. Key encoding can be <code>&#39;binary&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to\nbe a string; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is expected.</p>\n<p>Note that there is not normally a reason to call this method because <code>ECDH</code>\nonly requires a private key and the other party&#39;s public key to compute the\nshared secret. Typically either <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a> or\n<a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> will be called. The <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> method\nattempts to generate the public point/key associated with the private key being\nset.</p>\n<p>Example (obtaining a shared secret):</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.createECDH(&#39;secp256k1&#39;);\nconst bob = crypto.createECDH(&#39;secp256k1&#39;);\n\n// Note: This is a shortcut way to specify one of Alice&#39;s previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash(&#39;sha256&#39;).update(&#39;alice&#39;, &#39;utf8&#39;).digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair bob.generateKeys();\n\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n// alice_secret and bob_secret should be the same shared secret value\nconsole.log(alice_secret === bob_secret);\n</code></pre>\n<h2>Class: Hash<span><a class=\"mark\" href=\"#crypto_class_hash\" id=\"crypto_class_hash\">#</a></span></h2>\n<p>The <code>Hash</code> class is a utility for creating hash digests of data. It can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or</li>\n<li>Using the <a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> and <a href=\"#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods to produce the\ncomputed hash.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createhash_algorithm\"><code>crypto.createHash()</code></a> method is used to create <code>Hash</code> instances. <code>Hash</code>\nobjects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Hash</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.on(&#39;readable&#39;, () =&gt; {\n  var data = hash.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write(&#39;some data to hash&#39;);\nhash.end();\n</code></pre>\n<p>Example: Using <code>Hash</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hash).pipe(process.stdout);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> and <a href=\"#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.update(&#39;some data to hash&#39;);\nconsole.log(hash.digest(&#39;hex&#39;));\n  // Prints:\n  //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n</code></pre>\n<h3>hash.digest([encoding])<span><a class=\"mark\" href=\"#crypto_hash_digest_encoding\" id=\"crypto_hash_digest_encoding\">#</a></span></h3>\n<p>Calculates the digest of all of the data passed to be hashed (using the\n<a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> method). The <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;binary&#39;</code> or\n<code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string will be returned; otherwise\na <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been\ncalled. Multiple calls will cause an error to be thrown.</p>\n<h3>hash.update(data[, input_encoding])<span><a class=\"mark\" href=\"#crypto_hash_update_data_input_encoding\" id=\"crypto_hash_update_data_input_encoding\">#</a></span></h3>\n<p>Updates the hash content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then\n<code>input_encoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n<h2>Class: Hmac<span><a class=\"mark\" href=\"#crypto_class_hmac\" id=\"crypto_class_hmac\">#</a></span></h2>\n<p>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or</li>\n<li>Using the <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods to produce the\ncomputed HMAC digest.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createhmac_algorithm_key\"><code>crypto.createHmac()</code></a> method is used to create <code>Hmac</code> instances. <code>Hmac</code>\nobjects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Hmac</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.on(&#39;readable&#39;, () =&gt; {\n  var data = hmac.read();\n  if (data)\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write(&#39;some data to hash&#39;);\nhmac.end();\n</code></pre>\n<p>Example: Using <code>Hmac</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hmac).pipe(process.stdout);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.update(&#39;some data to hash&#39;);\nconsole.log(hmac.digest(&#39;hex&#39;));\n  // Prints:\n  //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n</code></pre>\n<h3>hmac.digest([encoding])<span><a class=\"mark\" href=\"#crypto_hmac_digest_encoding\" id=\"crypto_hmac_digest_encoding\">#</a></span></h3>\n<p>Calculates the HMAC digest of all of the data passed using <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a>.\nThe <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;binary&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is\nprovided a string is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is returned;</p>\n<p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been\ncalled. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p>\n<h3>hmac.update(data[, input_encoding])<span><a class=\"mark\" href=\"#crypto_hmac_update_data_input_encoding\" id=\"crypto_hmac_update_data_input_encoding\">#</a></span></h3>\n<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then\n<code>input_encoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n<h2>Class: Sign<span><a class=\"mark\" href=\"#crypto_class_sign\" id=\"crypto_class_sign\">#</a></span></h2>\n<p>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one\nof two ways:</p>\n<ul>\n<li>As a writable <a href=\"stream.html#stream_stream\">stream</a>, where data to be signed is written and the\n<a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> method is used to generate and return the signature, or</li>\n<li>Using the <a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> and <a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> methods to produce the\nsignature.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createsign_algorithm\"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances. <code>Sign</code>\nobjects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Sign</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.write(&#39;some data to sign&#39;);\nsign.end();\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n  // Prints the calculated signature\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> and <a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = getPrivateKeySomehow();\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\n  // Prints the calculated signature\n</code></pre>\n<p>A <code>Sign</code> instance can also be created by just passing in the digest\nalgorithm name, in which case OpenSSL will infer the full signature algorithm\nfrom the type of the PEM-formatted private key, including algorithms that\ndo not have directly exposed name constants, e.g. &#39;ecdsa-with-SHA256&#39;.</p>\n<p>Example: signing using ECDSA with SHA256</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;sha256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst private_key = &#39;-----BEGIN EC PRIVATE KEY-----\\n&#39; +\n        &#39;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\\n&#39; +\n        &#39;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\\n&#39; +\n        &#39;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\\n&#39; +\n        &#39;-----END EC PRIVATE KEY-----\\n&#39;;\n\nconsole.log(sign.sign(private_key).toString(&#39;hex&#39;));\n</code></pre>\n<h3>sign.sign(private_key[, output_format])<span><a class=\"mark\" href=\"#crypto_sign_sign_private_key_output_format\" id=\"crypto_sign_sign_private_key_output_format\">#</a></span></h3>\n<p>Calculates the signature on all the data passed through using either\n<a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> or <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>sign.write()</code></a>.</p>\n<p>The <code>private_key</code> argument can be an object or a string. If <code>private_key</code> is a\nstring, it is treated as a raw key with no passphrase. If <code>private_key</code> is an\nobject, it is interpreted as a hash containing two properties:</p>\n<ul>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded private key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - passphrase for the private key</li>\n</ul>\n<p>The <code>output_format</code> can specify one of <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If\n<code>output_format</code> is provided a string is returned; otherwise a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is\nreturned.</p>\n<p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been\ncalled. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p>\n<h3>sign.update(data[, input_encoding])<span><a class=\"mark\" href=\"#crypto_sign_update_data_input_encoding\" id=\"crypto_sign_update_data_input_encoding\">#</a></span></h3>\n<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then\n<code>input_encoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n<h2>Class: Verify<span><a class=\"mark\" href=\"#crypto_class_verify\" id=\"crypto_class_verify\">#</a></span></h2>\n<p>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one\nof two ways:</p>\n<ul>\n<li>As a writable <a href=\"stream.html#stream_stream\">stream</a> where written data is used to validate against the\nsupplied signature, or</li>\n<li><p>Using the <a href=\"#crypto_verifier_update_data_input_encoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verifier_verify_object_signature_signature_format\"><code>verify.verify()</code></a> methods to verify\nthe signature.</p>\n<p>The <a href=\"#crypto_crypto_createsign_algorithm\"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances.\n<code>Sign</code> objects are not to be created directly using the <code>new</code> keyword.</p>\n</li>\n</ul>\n<p>Example: Using <code>Verify</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.write(&#39;some data to sign&#39;);\nverify.end();\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(sign.verify(public_key, signature));\n  // Prints true or false\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_verifier_update_data_input_encoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verifier_verify_object_signature_signature_format\"><code>verify.verify()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\n\nverify.update(&#39;some data to sign&#39;);\n\nconst public_key = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(public_key, signature));\n  // Prints true or false\n</code></pre>\n<h3>verifier.update(data[, input_encoding])<span><a class=\"mark\" href=\"#crypto_verifier_update_data_input_encoding\" id=\"crypto_verifier_update_data_input_encoding\">#</a></span></h3>\n<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> then\n<code>input_encoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n<h3>verifier.verify(object, signature[, signature_format])<span><a class=\"mark\" href=\"#crypto_verifier_verify_object_signature_signature_format\" id=\"crypto_verifier_verify_object_signature_signature_format\">#</a></span></h3>\n<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>.\nThe <code>object</code> argument is a string containing a PEM encoded object, which can be\none an RSA public key, a DSA public key, or an X.509 certificate.\nThe <code>signature</code> argument is the previously calculated signature for the data, in\nthe <code>signature_format</code> which can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>.\nIf a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a\nstring; otherwise <code>signature</code> is expected to be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>Returns <code>true</code> or <code>false</code> depending on the validity of the signature for\nthe data and public key.</p>\n<p>The <code>verifier</code> object can not be used again after <code>verify.verify()</code> has been\ncalled. Multiple calls to <code>verify.verify()</code> will result in an error being\nthrown.</p>\n<h2><code>crypto</code> module methods and properties<span><a class=\"mark\" href=\"#crypto_crypto_module_methods_and_properties\" id=\"crypto_crypto_module_methods_and_properties\">#</a></span></h2>\n<h3>crypto.DEFAULT_ENCODING<span><a class=\"mark\" href=\"#crypto_crypto_default_encoding\" id=\"crypto_crypto_default_encoding\">#</a></span></h3>\n<p>The default encoding to use for functions that can take either strings\nor <a href=\"buffer.html#buffer_buffer\">buffers</a>. The default value is <code>&#39;buffer&#39;</code>, which makes methods\ndefault to <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> objects.</p>\n<p>The <code>crypto.DEFAULT_ENCODING</code> mechanism is provided for backwards compatibility\nwith legacy programs that expect <code>&#39;binary&#39;</code> to be the default encoding.</p>\n<p>New applications should expect the default to be <code>&#39;buffer&#39;</code>. This property may\nbecome deprecated in a future Node.js release.</p>\n<h3>crypto.fips<span><a class=\"mark\" href=\"#crypto_crypto_fips\" id=\"crypto_crypto_fips\">#</a></span></h3>\n<p>Property for checking and controlling whether a FIPS compliant crypto provider is\ncurrently in use. Setting to true requires a FIPS build of Node.js.</p>\n<h3>crypto.createCipher(algorithm, password)<span><a class=\"mark\" href=\"#crypto_crypto_createcipher_algorithm_password\" id=\"crypto_crypto_createcipher_algorithm_password\">#</a></span></h3>\n<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and\n<code>password</code>.</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\navailable cipher algorithms.</p>\n<p>The <code>password</code> is used to derive the cipher key and initialization vector (IV).\nThe value must be either a <code>&#39;binary&#39;</code> encoded string or a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL\nfunction <a href=\"https://www.openssl.org/docs/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.</p>\n<p>In line with OpenSSL&#39;s recommendation to use pbkdf2 instead of\n<a href=\"https://www.openssl.org/docs/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on\ntheir own using <a href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\"><code>crypto.createCipheriv()</code></a>\nto create the <code>Cipher</code> object.</p>\n<h3>crypto.createCipheriv(algorithm, key, iv)<span><a class=\"mark\" href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\" id=\"crypto_crypto_createcipheriv_algorithm_key_iv\">#</a></span></h3>\n<p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and\ninitialization vector (<code>iv</code>).</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\navailable cipher algorithms.</p>\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>&#39;binary&#39;</code> encoded strings or\n<a href=\"buffer.html#buffer_buffer\">buffers</a>.</p>\n<h3>crypto.createCredentials(details)<span><a class=\"mark\" href=\"#crypto_crypto_createcredentials_details\" id=\"crypto_crypto_createcredentials_details\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> instead.</pre><p>The <code>crypto.createCredentials()</code> method is a deprecated alias for creating\nand returning a <code>tls.SecureContext</code> object. The <code>crypto.createCredentials()</code>\nmethod should not be used.</p>\n<p>The optional <code>details</code> argument is a hash object with keys:</p>\n<ul>\n<li><code>pfx</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> - PFX or PKCS12 encoded private\nkey, certificate and CA certificates</li>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded private key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - passphrase for the private key or PFX</li>\n<li><code>cert</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded certificate</li>\n<li><code>ca</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> - Either a string or array of strings of PEM encoded CA\ncertificates to trust.</li>\n<li><code>crl</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> - Either a string or array of strings of PEM encoded CRLs\n(Certificate Revocation List)</li>\n<li><code>ciphers</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> using the <a href=\"https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format</a> describing the\ncipher algorithms to use or exclude.</li>\n</ul>\n<p>If no &#39;ca&#39; details are given, Node.js will use Mozilla&#39;s default\n<a href=\"https://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\">publicly trusted list of CAs</a>.</p>\n<h3>crypto.createDecipher(algorithm, password)<span><a class=\"mark\" href=\"#crypto_crypto_createdecipher_algorithm_password\" id=\"crypto_crypto_createdecipher_algorithm_password\">#</a></span></h3>\n<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and\n<code>password</code> (key).</p>\n<p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL\nfunction <a href=\"https://www.openssl.org/docs/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.</p>\n<p>In line with OpenSSL&#39;s recommendation to use pbkdf2 instead of\n<a href=\"https://www.openssl.org/docs/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on\ntheir own using <a href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\"><code>crypto.createDecipheriv()</code></a>\nto create the <code>Decipher</code> object.</p>\n<h3>crypto.createDecipheriv(algorithm, key, iv)<span><a class=\"mark\" href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\" id=\"crypto_crypto_createdecipheriv_algorithm_key_iv\">#</a></span></h3>\n<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code>\nand initialization vector (<code>iv</code>).</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\navailable cipher algorithms.</p>\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>&#39;binary&#39;</code> encoded strings or\n<a href=\"buffer.html#buffer_buffer\">buffers</a>.</p>\n<h3>crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])<span><a class=\"mark\" href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\" id=\"crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\">#</a></span></h3>\n<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an\noptional specific <code>generator</code>.</p>\n<p>The <code>generator</code> argument can be a number, string, or <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. If\n<code>generator</code> is not specified, the value <code>2</code> is used.</p>\n<p>The <code>prime_encoding</code> and <code>generator_encoding</code> arguments can be <code>&#39;binary&#39;</code>,\n<code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>.</p>\n<p>If <code>prime_encoding</code> is specified, <code>prime</code> is expected to be a string; otherwise\na <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is expected.</p>\n<p>If <code>generator_encoding</code> is specified, <code>generator</code> is expected to be a string;\notherwise either a number or <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> is expected.</p>\n<h3>crypto.createDiffieHellman(prime_length[, generator])<span><a class=\"mark\" href=\"#crypto_crypto_creatediffiehellman_prime_length_generator\" id=\"crypto_crypto_creatediffiehellman_prime_length_generator\">#</a></span></h3>\n<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of\n<code>prime_length</code> bits using an optional specific numeric <code>generator</code>.\nIf <code>generator</code> is not specified, the value <code>2</code> is used.</p>\n<h3>crypto.createECDH(curve_name)<span><a class=\"mark\" href=\"#crypto_crypto_createecdh_curve_name\" id=\"crypto_crypto_createecdh_curve_name\">#</a></span></h3>\n<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a\npredefined curve specified by the <code>curve_name</code> string. Use\n<a href=\"crypto.html#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent\nOpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name\nand description of each available elliptic curve.</p>\n<h3>crypto.createHash(algorithm)<span><a class=\"mark\" href=\"#crypto_crypto_createhash_algorithm\" id=\"crypto_crypto_createhash_algorithm\">#</a></span></h3>\n<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests\nusing the given <code>algorithm</code>.</p>\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\nOn recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will\ndisplay the available digest algorithms.</p>\n<p>Example: generating the sha256 sum of a file</p>\n<pre><code class=\"lang-js\">const filename = process.argv[2];\nconst crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(filename);\ninput.on(&#39;readable&#39;, () =&gt; {\n  var data = input.read();\n  if (data)\n    hash.update(data);\n  else {\n    console.log(`${hash.digest(&#39;hex&#39;)} ${filename}`);\n  }\n});\n</code></pre>\n<h3>crypto.createHmac(algorithm, key)<span><a class=\"mark\" href=\"#crypto_crypto_createhmac_algorithm_key\" id=\"crypto_crypto_createhmac_algorithm_key\">#</a></span></h3>\n<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.</p>\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\nOn recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will\ndisplay the available digest algorithms.</p>\n<p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash.</p>\n<p>Example: generating the sha256 HMAC of a file</p>\n<pre><code class=\"lang-js\">const filename = process.argv[2];\nconst crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(filename);\ninput.on(&#39;readable&#39;, () =&gt; {\n  var data = input.read();\n  if (data)\n    hmac.update(data);\n  else {\n    console.log(`${hmac.digest(&#39;hex&#39;)} ${filename}`);\n  }\n});\n</code></pre>\n<h3>crypto.createSign(algorithm)<span><a class=\"mark\" href=\"#crypto_crypto_createsign_algorithm\" id=\"crypto_crypto_createsign_algorithm\">#</a></span></h3>\n<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>. On\nrecent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will\ndisplay the available signing algorithms. One example is <code>&#39;RSA-SHA256&#39;</code>.</p>\n<h3>crypto.createVerify(algorithm)<span><a class=\"mark\" href=\"#crypto_crypto_createverify_algorithm\" id=\"crypto_crypto_createverify_algorithm\">#</a></span></h3>\n<p>Creates and returns a <code>Verify</code> object that uses the given algorithm. On\nrecent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will\ndisplay the available signing algorithms. One example is <code>&#39;RSA-SHA256&#39;</code>.</p>\n<h3>crypto.getCiphers()<span><a class=\"mark\" href=\"#crypto_crypto_getciphers\" id=\"crypto_crypto_getciphers\">#</a></span></h3>\n<p>Returns an array with the names of the supported cipher algorithms.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const ciphers = crypto.getCiphers();\nconsole.log(ciphers); // [&#39;aes-128-cbc&#39;, &#39;aes-128-ccm&#39;, ...]\n</code></pre>\n<h3>crypto.getCurves()<span><a class=\"mark\" href=\"#crypto_crypto_getcurves\" id=\"crypto_crypto_getcurves\">#</a></span></h3>\n<p>Returns an array with the names of the supported elliptic curves.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const curves = crypto.getCurves();\nconsole.log(curves); // [&#39;secp256k1&#39;, &#39;secp384r1&#39;, ...]\n</code></pre>\n<h3>crypto.getDiffieHellman(group_name)<span><a class=\"mark\" href=\"#crypto_crypto_getdiffiehellman_group_name\" id=\"crypto_crypto_getdiffiehellman_group_name\">#</a></span></h3>\n<p>Creates a predefined <code>DiffieHellman</code> key exchange object. The\nsupported groups are: <code>&#39;modp1&#39;</code>, <code>&#39;modp2&#39;</code>, <code>&#39;modp5&#39;</code> (defined in\n<a href=\"https://www.rfc-editor.org/rfc/rfc2412.txt\">RFC 2412</a>, but see <a href=\"#fs_caveats\">Caveats</a>) and <code>&#39;modp14&#39;</code>, <code>&#39;modp15&#39;</code>,\n<code>&#39;modp16&#39;</code>, <code>&#39;modp17&#39;</code>, <code>&#39;modp18&#39;</code> (defined in <a href=\"https://www.rfc-editor.org/rfc/rfc3526.txt\">RFC 3526</a>). The\nreturned object mimics the interface of objects created by\n<a href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\"><code>crypto.createDiffieHellman()</code></a>, but will not allow changing\nthe keys (with <a href=\"#crypto_diffiehellman_setpublickey_public_key_encoding\"><code>diffieHellman.setPublicKey()</code></a> for example). The\nadvantage of using this method is that the parties do not have to\ngenerate nor exchange a group modulus beforehand, saving both processor\nand communication time.</p>\n<p>Example (obtaining a shared secret):</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.getDiffieHellman(&#39;modp14&#39;);\nconst bob = crypto.getDiffieHellman(&#39;modp14&#39;);\n\nalice.generateKeys();\nbob.generateKeys();\n\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n/* alice_secret and bob_secret should be the same */\nconsole.log(alice_secret == bob_secret);\n</code></pre>\n<h3>crypto.getHashes()<span><a class=\"mark\" href=\"#crypto_crypto_gethashes\" id=\"crypto_crypto_gethashes\">#</a></span></h3>\n<p>Returns an array with the names of the supported hash algorithms.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const hashes = crypto.getHashes();\nconsole.log(hashes); // [&#39;sha&#39;, &#39;sha1&#39;, &#39;sha1WithRSAEncryption&#39;, ...]\n</code></pre>\n<h3>crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)<span><a class=\"mark\" href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\" id=\"crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\">#</a></span></h3>\n<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\n<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and\n<code>derivedKey</code>. If an error occurs, <code>err</code> will be set; otherwise <code>err</code> will be\nnull. The successfully generated <code>derivedKey</code> will be passed as a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.</p>\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\nsalts are random and their lengths are greater than 16 bytes. See\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST SP 800-132</a> for details.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\ncrypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;, (err, key) =&gt; {\n  if (err) throw err;\n  console.log(key.toString(&#39;hex&#39;));  // &#39;c5e478d...1469e50&#39;\n});\n</code></pre>\n<p>An array of supported digest functions can be retrieved using\n<a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p>\n<h3>crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)<span><a class=\"mark\" href=\"#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\" id=\"crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\">#</a></span></h3>\n<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\n<p>If an error occurs an Error will be thrown, otherwise the derived key will be\nreturned as a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.</p>\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\nsalts are random and their lengths are greater than 16 bytes. See\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST SP 800-132</a> for details.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;);\nconsole.log(key.toString(&#39;hex&#39;));  // &#39;c5e478d...1469e50&#39;\n</code></pre>\n<p>An array of supported digest functions can be retrieved using\n<a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p>\n<h3>crypto.privateDecrypt(private_key, buffer)<span><a class=\"mark\" href=\"#crypto_crypto_privatedecrypt_private_key_buffer\" id=\"crypto_crypto_privatedecrypt_private_key_buffer\">#</a></span></h3>\n<p>Decrypts <code>buffer</code> with <code>private_key</code>.</p>\n<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.\nIf <code>private_key</code> is an object, it is interpreted as a hash object with the\nkeys:</p>\n<ul>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded private key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional passphrase for the private key</li>\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\n<li><code>constants.RSA_NO_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\n</ul>\n</li>\n</ul>\n<p>All paddings are defined in the <code>constants</code> module.</p>\n<h3>crypto.privateEncrypt(private_key, buffer)<span><a class=\"mark\" href=\"#crypto_crypto_privateencrypt_private_key_buffer\" id=\"crypto_crypto_privateencrypt_private_key_buffer\">#</a></span></h3>\n<p>Encrypts <code>buffer</code> with <code>private_key</code>.</p>\n<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.\nIf <code>private_key</code> is an object, it is interpreted as a hash object with the\nkeys:</p>\n<ul>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded private key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional passphrase for the private key</li>\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\n<li><code>constants.RSA_NO_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\n</ul>\n</li>\n</ul>\n<p>All paddings are defined in the <code>constants</code> module.</p>\n<h3>crypto.publicDecrypt(public_key, buffer)<span><a class=\"mark\" href=\"#crypto_crypto_publicdecrypt_public_key_buffer\" id=\"crypto_crypto_publicdecrypt_public_key_buffer\">#</a></span></h3>\n<p>Decrypts <code>buffer</code> with <code>public_key</code>.</p>\n<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.\nIf <code>public_key</code> is an object, it is interpreted as a hash object with the\nkeys:</p>\n<ul>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded public key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional passphrase for the private key</li>\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\n<li><code>constants.RSA_NO_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\n</ul>\n</li>\n</ul>\n<p>Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.</p>\n<p>All paddings are defined in the <code>constants</code> module.</p>\n<h3>crypto.publicEncrypt(public_key, buffer)<span><a class=\"mark\" href=\"#crypto_crypto_publicencrypt_public_key_buffer\" id=\"crypto_crypto_publicencrypt_public_key_buffer\">#</a></span></h3>\n<p>Encrypts <code>buffer</code> with <code>public_key</code>.</p>\n<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.\nIf <code>public_key</code> is an object, it is interpreted as a hash object with the\nkeys:</p>\n<ul>\n<li><code>key</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - PEM encoded public key</li>\n<li><code>passphrase</code> : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional passphrase for the private key</li>\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\n<li><code>constants.RSA_NO_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\n</ul>\n</li>\n</ul>\n<p>Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.</p>\n<p>All paddings are defined in the <code>constants</code> module.</p>\n<h3>crypto.randomBytes(size[, callback])<span><a class=\"mark\" href=\"#crypto_crypto_randombytes_size_callback\" id=\"crypto_crypto_randombytes_size_callback\">#</a></span></h3>\n<p>Generates cryptographically strong pseudo-random data. The <code>size</code> argument\nis a number indicating the number of bytes to generate.</p>\n<p>If a <code>callback</code> function is provided, the bytes are generated asynchronously\nand the <code>callback</code> function is invoked with two arguments: <code>err</code> and <code>buf</code>.\nIf an error occurs, <code>err</code> will be an Error object; otherwise it is null. The\n<code>buf</code> argument is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> containing the generated bytes.</p>\n<pre><code class=\"lang-js\">// Asynchronous\nconst crypto = require(&#39;crypto&#39;);\ncrypto.randomBytes(256, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(`${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\n});\n</code></pre>\n<p>If the <code>callback</code> function is not provided, the random bytes are generated\nsynchronously and returned as a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>. An error will be thrown if\nthere is a problem generating the bytes.</p>\n<pre><code class=\"lang-js\">// Synchronous\nconst buf = crypto.randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\n</code></pre>\n<p>The <code>crypto.randomBytes()</code> method will block until there is sufficient entropy.\nThis should normally never take longer than a few milliseconds. The only time\nwhen generating the random bytes may conceivably block for a longer period of\ntime is right after boot, when the whole system is still low on entropy.</p>\n<h3>crypto.setEngine(engine[, flags])<span><a class=\"mark\" href=\"#crypto_crypto_setengine_engine_flags\" id=\"crypto_crypto_setengine_engine_flags\">#</a></span></h3>\n<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p>\n<p><code>engine</code> could be either an id or a path to the engine&#39;s shared library.</p>\n<p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code>\nis a bit field taking one of or a mix of the following flags (defined in the\n<code>constants</code> module):</p>\n<ul>\n<li><code>ENGINE_METHOD_RSA</code></li>\n<li><code>ENGINE_METHOD_DSA</code></li>\n<li><code>ENGINE_METHOD_DH</code></li>\n<li><code>ENGINE_METHOD_RAND</code></li>\n<li><code>ENGINE_METHOD_ECDH</code></li>\n<li><code>ENGINE_METHOD_ECDSA</code></li>\n<li><code>ENGINE_METHOD_CIPHERS</code></li>\n<li><code>ENGINE_METHOD_DIGESTS</code></li>\n<li><code>ENGINE_METHOD_STORE</code></li>\n<li><code>ENGINE_METHOD_PKEY_METHS</code></li>\n<li><code>ENGINE_METHOD_PKEY_ASN1_METHS</code></li>\n<li><code>ENGINE_METHOD_ALL</code></li>\n<li><code>ENGINE_METHOD_NONE</code></li>\n</ul>\n<h2>Notes<span><a class=\"mark\" href=\"#crypto_notes\" id=\"crypto_notes\">#</a></span></h2>\n<h3>Legacy Streams API (pre Node.js v0.10)<span><a class=\"mark\" href=\"#crypto_legacy_streams_api_pre_node_js_v0_10\" id=\"crypto_legacy_streams_api_pre_node_js_v0_10\">#</a></span></h3>\n<p>The Crypto module was added to Node.js before there was the concept of a\nunified Stream API, and before there were <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> objects for handling\nbinary data. As such, the many of the <code>crypto</code> defined classes have methods not\ntypically found on other Node.js classes that implement the <a href=\"stream.html#stream_stream\">streams</a>\nAPI (e.g. <code>update()</code>, <code>final()</code>, or <code>digest()</code>). Also, many methods accepted\nand returned <code>&#39;binary&#39;</code> encoded strings by default rather than Buffers. This\ndefault was changed after Node.js v0.8 to use <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> objects by default\ninstead.</p>\n<h3>Recent ECDH Changes<span><a class=\"mark\" href=\"#crypto_recent_ecdh_changes\" id=\"crypto_recent_ecdh_changes\">#</a></span></h3>\n<p>Usage of <code>ECDH</code> with non-dynamically generated key pairs has been simplified.\nNow, <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> can be called with a preselected private key\nand the associated public point (key) will be computed and stored in the object.\nThis allows code to only store and provide the private part of the EC key pair.\n<a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> now also validates that the private key is valid for\nthe selected curve.</p>\n<p>The <a href=\"#crypto_ecdh_setpublickey_public_key_encoding\"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the\nAPI is not useful. Either a previously stored private key should be set, which\nautomatically generates the associated public key, or <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a>\nshould be called. The main drawback of using <a href=\"#crypto_ecdh_setpublickey_public_key_encoding\"><code>ecdh.setPublicKey()</code></a> is that\nit can be used to put the ECDH key pair into an inconsistent state.</p>\n<h3>Support for weak or compromised algorithms<span><a class=\"mark\" href=\"#crypto_support_for_weak_or_compromised_algorithms\" id=\"crypto_support_for_weak_or_compromised_algorithms\">#</a></span></h3>\n<p>The <code>crypto</code> module still supports some algorithms which are already\ncompromised and are not currently recommended for use. The API also allows\nthe use of ciphers and hashes with a small key size that are considered to be\ntoo weak for safe use.</p>\n<p>Users should take full responsibility for selecting the crypto\nalgorithm and key size according to their security requirements.</p>\n<p>Based on the recommendations of <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST SP 800-131A</a>:</p>\n<ul>\n<li>MD5 and SHA-1 are no longer acceptable where collision resistance is\nrequired such as digital signatures.</li>\n<li>The key used with RSA, DSA and DH algorithms is recommended to have\nat least 2048 bits and that of the curve of ECDSA and ECDH at least\n224 bits, to be safe to use for several years.</li>\n<li>The DH groups of <code>modp1</code>, <code>modp2</code> and <code>modp5</code> have a key size\nsmaller than 2048 bits and are not recommended.</li>\n</ul>\n<p>See the reference for other recommendations and details.</p>\n<!-- [end-include:crypto.md] -->\n<!-- [start-include:debugger.md] -->\n<h1>Debugger<span><a class=\"mark\" href=\"#debugger_debugger\" id=\"debugger_debugger\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!-- type=misc -->\n<p>Node.js includes a full-featured out-of-process debugging utility accessible\nvia a simple <a href=\"https://github.com/v8/v8/wiki/Debugging-Protocol\">TCP-based protocol</a> and built-in debugging client. To use it,\nstart Node.js with the <code>debug</code> argument followed by the path to the script to\ndebug; a prompt will be displayed indicating successful launch of the debugger:</p>\n<pre><code>$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt;\n</code></pre><p>Node.js&#39;s debugger client is not a full-featured debugger, but simple step and\ninspection are possible.</p>\n<p>Inserting the statement <code>debugger;</code> into the source code of a script will\nenable a breakpoint at that position in the code:</p>\n<pre><code class=\"lang-js\">// myscript.js\nx = 5;\nsetTimeout(() =&gt; {\n  debugger;\n  console.log(&#39;world&#39;);\n}, 1000);\nconsole.log(&#39;hello&#39;);\n</code></pre>\n<p>Once the debugger is run, a breakpoint will occur at line 4:</p>\n<pre><code>$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\n  6 console.log(&#39;hello&#39;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\n  6 console.log(&#39;hello&#39;);\n  7\ndebug&gt; quit\n</code></pre><p>The <code>repl</code> command allows code to be evaluated remotely. The <code>next</code> command\nsteps to the next line. Type <code>help</code> to see what other commands are available.</p>\n<p>Pressing <code>enter</code> without typing a command will repeat the previous debugger\ncommand.</p>\n<h2>Watchers<span><a class=\"mark\" href=\"#debugger_watchers\" id=\"debugger_watchers\">#</a></span></h2>\n<p>It is possible to watch expression and variable values while debugging. On\nevery breakpoint, each expression from the watchers list will be evaluated\nin the current context and displayed immediately before the breakpoint&#39;s\nsource code listing.</p>\n<p>To begin watching an expression, type <code>watch(&#39;my_expression&#39;)</code>. The command\n<code>watchers</code> will print the active watchers. To remove a watcher, type\n<code>unwatch(&#39;my_expression&#39;)</code>.</p>\n<h2>Command reference<span><a class=\"mark\" href=\"#debugger_command_reference\" id=\"debugger_command_reference\">#</a></span></h2>\n<h3>Stepping<span><a class=\"mark\" href=\"#debugger_stepping\" id=\"debugger_stepping\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>cont</code>, <code>c</code> - Continue execution</li>\n<li><code>next</code>, <code>n</code> - Step next</li>\n<li><code>step</code>, <code>s</code> - Step in</li>\n<li><code>out</code>, <code>o</code> - Step out</li>\n<li><code>pause</code> - Pause running code (like pause button in Developer Tools)</li>\n</ul>\n</div><h3>Breakpoints<span><a class=\"mark\" href=\"#debugger_breakpoints\" id=\"debugger_breakpoints\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line</li>\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line</li>\n<li><code>setBreakpoint(&#39;fn()&#39;)</code>, <code>sb(...)</code> - Set breakpoint on a first statement in\nfunctions body</li>\n<li><code>setBreakpoint(&#39;script.js&#39;, 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of\nscript.js</li>\n<li><code>clearBreakpoint(&#39;script.js&#39;, 1)</code>, <code>cb(...)</code> - Clear breakpoint in script.js\non line 1</li>\n</ul>\n</div><p>It is also possible to set a breakpoint in a file (module) that\nisn&#39;t loaded yet:</p>\n<pre><code>$ ./node debug test/fixtures/break-in-module/main.js\n&lt; debugger listening on port 5858\nconnecting to port 5858... ok\nbreak in test/fixtures/break-in-module/main.js:1\n  1 var mod = require(&#39;./mod.js&#39;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint(&#39;mod.js&#39;, 23)\nWarning: script &#39;mod.js&#39; was not loaded yet.\n  1 var mod = require(&#39;./mod.js&#39;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; c\nbreak in test/fixtures/break-in-module/mod.js:23\n 21\n 22 exports.hello = () =&gt; {\n 23   return &#39;hello from module&#39;;\n 24 };\n 25\ndebug&gt;\n</code></pre><h3>Information<span><a class=\"mark\" href=\"#debugger_information\" id=\"debugger_information\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>backtrace</code>, <code>bt</code> - Print backtrace of current execution frame</li>\n<li><code>list(5)</code> - List scripts source code with 5 line context (5 lines before and\nafter)</li>\n<li><code>watch(expr)</code> - Add expression to watch list</li>\n<li><code>unwatch(expr)</code> - Remove expression from watch list</li>\n<li><code>watchers</code> - List all watchers and their values (automatically listed on each\nbreakpoint)</li>\n<li><code>repl</code> - Open debugger&#39;s repl for evaluation in debugging script&#39;s context</li>\n<li><code>exec expr</code> - Execute an expression in debugging script&#39;s context</li>\n</ul>\n</div><h3>Execution control<span><a class=\"mark\" href=\"#debugger_execution_control\" id=\"debugger_execution_control\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>run</code> - Run script (automatically runs on debugger&#39;s start)</li>\n<li><code>restart</code> - Restart script</li>\n<li><code>kill</code> - Kill script</li>\n</ul>\n</div><h3>Various<span><a class=\"mark\" href=\"#debugger_various\" id=\"debugger_various\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>scripts</code> - List all loaded scripts</li>\n<li><code>version</code> - Display V8&#39;s version</li>\n</ul>\n</div><h2>Advanced Usage<span><a class=\"mark\" href=\"#debugger_advanced_usage\" id=\"debugger_advanced_usage\">#</a></span></h2>\n<p>An alternative way of enabling and accessing the debugger is to start\nNode.js with the <code>--debug</code> command-line flag or by signaling an existing\nNode.js process with <code>SIGUSR1</code>.</p>\n<p>Once a process has been set in debug mode this way, it can be inspected\nusing the Node.js debugger by either connecting to the <code>pid</code> of the running\nprocess or via URI reference to the listening debugger:</p>\n<ul>\n<li><code>node debug -p &lt;pid&gt;</code> - Connects to the process via the <code>pid</code></li>\n<li><code>node debug &lt;URI&gt;</code> - Connects to the process via the URI such as\nlocalhost:5858</li>\n</ul>\n<!-- [end-include:debugger.md] -->\n<!-- [start-include:dgram.md] -->\n<h1>UDP / Datagram Sockets<span><a class=\"mark\" href=\"#dgram_udp_datagram_sockets\" id=\"dgram_udp_datagram_sockets\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!-- name=dgram -->\n<p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n<h2>Class: dgram.Socket<span><a class=\"mark\" href=\"#dgram_class_dgram_socket\" id=\"dgram_class_dgram_socket\">#</a></span></h2>\n<p>The <code>dgram.Socket</code> object is an <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> that encapsulates the\ndatagram functionality.</p>\n<p>New instances of <code>dgram.Socket</code> are created using <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>.\nThe <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#dgram_event_close\" id=\"dgram_event_close\">#</a></span></h3>\n<p>The <code>&#39;close&#39;</code> event is emitted after a socket is closed with <a href=\"#dgram_socket_close_callback\"><code>close()</code></a>.\nOnce triggered, no new <code>&#39;message&#39;</code> events will be emitted on this socket.</p>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#dgram_event_error\" id=\"dgram_event_error\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n</div><p>The <code>&#39;error&#39;</code> event is emitted whenever any error occurs. The event handler\nfunction is passed a single Error object.</p>\n<h3>Event: &#39;listening&#39;<span><a class=\"mark\" href=\"#dgram_event_listening\" id=\"dgram_event_listening\">#</a></span></h3>\n<p>The <code>&#39;listening&#39;</code> event is emitted whenever a socket begins listening for\ndatagram messages. This occurs as soon as UDP sockets are created.</p>\n<h3>Event: &#39;message&#39;<span><a class=\"mark\" href=\"#dgram_event_message\" id=\"dgram_event_message\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>msg</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> - The message</li>\n<li><code>rinfo</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Remote address information</li>\n</ul>\n</div><p>The <code>&#39;message&#39;</code> event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The\n<code>msg</code> argument is a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> and <code>rinfo</code> is an object with the sender&#39;s\naddress information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:</p>\n<pre><code class=\"lang-js\">socket.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(&#39;Received %d bytes from %s:%d\\n&#39;,\n              msg.length, rinfo.address, rinfo.port);\n});\n</code></pre>\n<h3>socket.addMembership(multicastAddress[, multicastInterface])<span><a class=\"mark\" href=\"#dgram_socket_addmembership_multicastaddress_multicastinterface\" id=\"dgram_socket_addmembership_multicastaddress_multicastinterface\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.9</span>\n</div><ul>\n<li><code>multicastAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>multicastInterface</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a>, Optional</li>\n</ul>\n<p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code>\nusing the <code>IP_ADD_MEMBERSHIP</code> socket option. If the <code>multicastInterface</code>\nargument is not specified, the operating system will try to add membership to\nall valid networking interfaces.</p>\n<h3>socket.address()<span><a class=\"mark\" href=\"#dgram_socket_address\" id=\"dgram_socket_address\">#</a></span></h3>\n<p>Returns an object containing the address information for a socket.\nFor UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>\nproperties.</p>\n<h3>socket.bind([port][, address][, callback])<span><a class=\"mark\" href=\"#dgram_socket_bind_port_address_callback\" id=\"dgram_socket_bind_port_address_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - Integer, Optional</li>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a>, Optional</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> with no parameters, Optional. Called when\nbinding is complete.</li>\n</ul>\n</div><p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified, the operating\nsystem will attempt to bind to a random port. If <code>address</code> is not specified,\nthe operating system will attempt to listen on all addresses.  Once binding is\ncomplete, a <code>&#39;listening&#39;</code> event is emitted and the optional <code>callback</code> function\nis called.</p>\n<p>Note that specifying both a <code>&#39;listening&#39;</code> event listener and passing a\n<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very\nuseful.</p>\n<p>A bound datagram socket keeps the Node.js process running to receive\ndatagram messages.</p>\n<p>If binding fails, an <code>&#39;error&#39;</code> event is generated. In rare case (e.g.\nattempting to bind with a closed socket), an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> may be thrown.</p>\n<p>Example of a UDP server listening on port 41234:</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n<h3>socket.bind(options[, callback])<span><a class=\"mark\" href=\"#dgram_socket_bind_options_callback\" id=\"dgram_socket_bind_options_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Required. Supports the following properties:<ul>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - Required.</li>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional.</li>\n<li><code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> - Optional.</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Optional.</li>\n</ul>\n</div><p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\nnamed <code>port</code> and optional <code>address</code> that are passed as properties of an\n<code>options</code> object passed as the first argument. If <code>port</code> is not specified, the\noperating system will attempt to bind to a random port. If <code>address</code> is not\nspecified, the operating system will attempt to listen on all addresses.  Once\nbinding is complete, a <code>&#39;listening&#39;</code> event is emitted and the optional\n<code>callback</code> function is called.</p>\n<p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is\nuse when using <code>dgram.Socket</code> objects with the [<code>cluster</code>] module. When\n<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same\nunderlying socket handle allowing connection handling duties to be shared.\nWhen <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted\nport sharing results in an error.</p>\n<p>An example socket listening on an exclusive port is shown below.</p>\n<pre><code class=\"lang-js\">socket.bind({\n  address: &#39;localhost&#39;,\n  port: 8000,\n  exclusive: true\n});\n</code></pre>\n<h3>socket.close([callback])<span><a class=\"mark\" href=\"#dgram_socket_close_callback\" id=\"dgram_socket_close_callback\">#</a></span></h3>\n<p>Close the underlying socket and stop listening for data on it. If a callback is\nprovided, it is added as a listener for the <a href=\"#net_event_close\"><code>&#39;close&#39;</code></a> event.</p>\n<h3>socket.dropMembership(multicastAddress[, multicastInterface])<span><a class=\"mark\" href=\"#dgram_socket_dropmembership_multicastaddress_multicastinterface\" id=\"dgram_socket_dropmembership_multicastaddress_multicastinterface\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.9</span>\n</div><ul>\n<li><code>multicastAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>multicastInterface</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a>, Optional</li>\n</ul>\n<p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the\n<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the\nkernel when the socket is closed or the process terminates, so most apps will\nnever have reason to call this.</p>\n<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to\ndrop membership on all valid interfaces.</p>\n<h3>socket.send(msg, [offset, length,] port, address[, callback])<span><a class=\"mark\" href=\"#dgram_socket_send_msg_offset_length_port_address_callback\" id=\"dgram_socket_send_msg_offset_length_port_address_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>msg</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Message to be sent</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer. Optional. Offset in the buffer where the message starts.</li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer. Optional. Number of bytes in the message.</li>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer. Destination port.</li>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Destination hostname or IP address.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Called when the message has been sent. Optional.</li>\n</ul>\n</div><p>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must\nbe specified.</p>\n<p>The <code>msg</code> argument contains the message to be sent.\nDepending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>,\nthe <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the\nmessage begins and the number of bytes in the message, respectively.\nIf <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>\nwith <code>&#39;utf8&#39;</code> encoding. With messages that\ncontain  multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with\nrespect to <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\">byte length</a> and not the character position.\nIf <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p>\n<p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name,\nDNS will be used to resolve the address of the host. If the <code>address</code> is not\nspecified or is an empty string, <code>&#39;127.0.0.1&#39;</code> or <code>&#39;::1&#39;</code> will be used instead.</p>\n<p>If the socket has not been previously bound with a call to <code>bind</code>, the socket\nis assigned a random port number and is bound to the &quot;all interfaces&quot; address\n(<code>&#39;0.0.0.0&#39;</code> for <code>udp4</code> sockets, <code>&#39;::0&#39;</code> for <code>udp6</code> sockets.)</p>\n<p>An optional <code>callback</code> function  may be specified to as a way of reporting\nDNS errors or for determining when it is safe to reuse the <code>buf</code> object.\nNote that DNS lookups delay the time to send for at least one tick of the\nNode.js event loop.</p>\n<p>The only way to know for sure that the datagram has been sent is by using a\n<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be\npassed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,\nthe error is emitted as an <code>&#39;error&#39;</code> event on the <code>socket</code> object.</p>\n<p>Offset and length are optional, but if you specify one you would need to\nspecify the other. Also, they are supported only when the first\nargument is a <code>Buffer</code>.</p>\n<p>Example of sending a UDP packet to a random port on <code>localhost</code>;</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst message = Buffer.from(&#39;Some bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n</code></pre>\n<p>Example of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst buf1 = Buffer.from(&#39;Some &#39;);\nconst buf2 = Buffer.from(&#39;bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send([buf1, buf2], 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n</code></pre>\n<p>Sending multiple buffers might be faster or slower depending on your\napplication and operating system: benchmark it. Usually it is faster.</p>\n<p><strong>A Note about UDP datagram size</strong></p>\n<p>The maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code>\n(<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.</p>\n<ul>\n<li><p>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal\npayload exceed 64K octets <em>including</em> the internet header and data\n(65,507 bytes = 65,535 \u2212 8 bytes UDP header \u2212 20 bytes IP header);\nthis is generally true for loopback interfaces, but such long datagram\nmessages are impractical for most hosts and networks.</p>\n</li>\n<li><p>The <code>MTU</code> is the largest size a given link layer technology can support for\ndatagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code>\noctets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended\nas the <code>MTU</code> for dial-up type applications), whether they arrive whole or in\nfragments.</p>\n<p>For <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum\nfragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is\nvery small, since most current link layer technologies, like Ethernet, have a\nminimum <code>MTU</code> of <code>1500</code>.</p>\n</li>\n</ul>\n<p>It is impossible to know in advance the MTU of each link through which\na packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will\nnot work because the packet will get silently dropped without informing the\nsource that the data did not reach its intended recipient.</p>\n<h3>socket.setBroadcast(flag)<span><a class=\"mark\" href=\"#dgram_socket_setbroadcast_flag\" id=\"dgram_socket_setbroadcast_flag\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.9</span>\n</div><ul>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>Sets or clears the <code>SO_BROADCAST</code> socket option.  When set to <code>true</code>, UDP\npackets may be sent to a local interface&#39;s broadcast address.</p>\n<h3>socket.setMulticastLoopback(flag)<span><a class=\"mark\" href=\"#dgram_socket_setmulticastloopback_flag\" id=\"dgram_socket_setmulticastloopback_flag\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option.  When set to <code>true</code>,\nmulticast packets will also be received on the local interface.</p>\n<h3>socket.setMulticastTTL(ttl)<span><a class=\"mark\" href=\"#dgram_socket_setmulticastttl_ttl\" id=\"dgram_socket_setmulticastttl_ttl\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer</li>\n</ul>\n</div><p>Sets the <code>IP_MULTICAST_TTL</code> socket option.  While TTL generally stands for\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\npacket is allowed to travel through, specifically for multicast traffic.  Each\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\ndecremented to 0 by a router, it will not be forwarded.</p>\n<p>The argument passed to to <code>socket.setMulticastTTL()</code> is a number of hops\nbetween 0 and 255. The default on most systems is <code>1</code> but can vary.</p>\n<h3>socket.setTTL(ttl)<span><a class=\"mark\" href=\"#dgram_socket_setttl_ttl\" id=\"dgram_socket_setttl_ttl\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Integer</li>\n</ul>\n</div><p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for &quot;Time to Live&quot;,\nin this context it specifies the number of IP hops that a packet is allowed to\ntravel through.  Each router or gateway that forwards a packet decrements the\nTTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.\nChanging TTL values is typically done for network probes or when multicasting.</p>\n<p>The argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255.\nThe default on most systems is 64 but can vary.</p>\n<h3>socket.ref()<span><a class=\"mark\" href=\"#dgram_socket_ref\" id=\"dgram_socket_ref\">#</a></span></h3>\n<p>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\ncounting and restores the default behavior.</p>\n<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>\n<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be\nchained.</p>\n<h3>socket.unref()<span><a class=\"mark\" href=\"#dgram_socket_unref\" id=\"dgram_socket_unref\">#</a></span></h3>\n<p>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active, allowing the process to exit even if the socket is still\nlistening.</p>\n<p>Calling <code>socket.unref()</code> multiple times will have no addition effect.</p>\n<p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be\nchained.</p>\n<h3>Change to asynchronous <code>socket.bind()</code> behavior<span><a class=\"mark\" href=\"#dgram_change_to_asynchronous_socket_bind_behavior\" id=\"dgram_change_to_asynchronous_socket_bind_behavior\">#</a></span></h3>\n<p>As of Node.js v0.10, <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a> changed to an asynchronous\nexecution model. Legacy code that assumes synchronous behavior, as in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">const s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234);\ns.addMembership(&#39;224.0.0.114&#39;);\n</code></pre>\n<p>Must be changed to pass a callback function to the <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a>\nfunction:</p>\n<pre><code class=\"lang-js\">const s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234, () =&gt; {\n  s.addMembership(&#39;224.0.0.114&#39;);\n});\n</code></pre>\n<h2><code>dgram</code> module functions<span><a class=\"mark\" href=\"#dgram_dgram_module_functions\" id=\"dgram_dgram_module_functions\">#</a></span></h2>\n<h3>dgram.createSocket(options[, callback])<span><a class=\"mark\" href=\"#dgram_dgram_createsocket_options_callback\" id=\"dgram_dgram_createsocket_options_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Attached as a listener to <code>&#39;message&#39;</code> events.</li>\n<li>Returns: <a href=\"dgram.html#dgram_class_dgram_socket\" class=\"type\">&lt;dgram.Socket&gt;</a></li>\n</ul>\n</div><p>Creates a <code>dgram.Socket</code> object. The <code>options</code> argument is an object that\nshould contain a <code>type</code> field of either <code>udp4</code> or <code>udp6</code> and an optional\nboolean <code>reuseAddr</code> field.</p>\n<p>When <code>reuseAddr</code> is <code>true</code> <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will reuse the address, even if\nanother process has already bound a socket on it. <code>reuseAddr</code> defaults to\n<code>false</code>. An optional <code>callback</code> function can be passed specified which is added\nas a listener for <code>&#39;message&#39;</code> events.</p>\n<p>Once the socket is created, calling <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the\nsocket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are\nnot passed to  <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the method will bind the socket to the &quot;all\ninterfaces&quot; address on a random port (it does the right thing for both <code>udp4</code>\nand <code>udp6</code> sockets). The bound address and port can be retrieved using\n<a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and <a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p>\n<h3>dgram.createSocket(type[, callback])<span><a class=\"mark\" href=\"#dgram_dgram_createsocket_type_callback\" id=\"dgram_dgram_createsocket_type_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Either &#39;udp4&#39; or &#39;udp6&#39;</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Attached as a listener to <code>&#39;message&#39;</code> events.\nOptional</li>\n<li>Returns: <a href=\"dgram.html#dgram_class_dgram_socket\" class=\"type\">&lt;dgram.Socket&gt;</a></li>\n</ul>\n</div><p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>. The <code>type</code> argument\ncan be either <code>udp4</code> or <code>udp6</code>. An optional <code>callback</code> function can be passed\nwhich is added as a listener for <code>&#39;message&#39;</code> events.</p>\n<p>Once the socket is created, calling <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the\nsocket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are\nnot passed to  <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the method will bind the socket to the &quot;all\ninterfaces&quot; address on a random port (it does the right thing for both <code>udp4</code>\nand <code>udp6</code> sockets). The bound address and port can be retrieved using\n<a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and <a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p>\n<!-- [end-include:dgram.md] -->\n<!-- [start-include:dns.md] -->\n<h1>DNS<span><a class=\"mark\" href=\"#dns_dns\" id=\"dns_dns\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>dns</code> module contains functions belonging to two different categories:</p>\n<p>1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function: <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. <strong>Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</strong></p>\n<p>For example, looking up <code>nodejs.org</code>.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\n\ndns.lookup(&#39;nodejs.org&#39;, (err, addresses, family) =&gt; {\n  console.log(&#39;addresses:&#39;, addresses);\n});\n</code></pre>\n<p>2) Functions that connect to an actual DNS server to perform name resolution,\nand that <em>always</em> use the network to perform DNS queries. This category\ncontains all functions in the <code>dns</code> module <em>except</em> <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. These\nfunctions do not use the same set of configuration files used by\n<a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> (e.g. <code>/etc/hosts</code>). These functions should be used by\ndevelopers who do not want to use the underlying operating system&#39;s facilities\nfor name resolution, and instead want to <em>always</em> perform DNS queries.</p>\n<p>Below is an example that resolves <code>&#39;nodejs.org&#39;</code> then reverse resolves the IP\naddresses that are returned.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;nodejs.org&#39;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n</code></pre>\n<p>There are subtle consequences in choosing one over the other, please consult\nthe <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> for more information.</p>\n<h2>dns.getServers()<span><a class=\"mark\" href=\"#dns_dns_getservers\" id=\"dns_dns_getservers\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.3</span>\n</div><p>Returns an array of IP address strings that are being used for name\nresolution.</p>\n<h2>dns.lookup(hostname[, options], callback)<span><a class=\"mark\" href=\"#dns_dns_lookup_hostname_options_callback\" id=\"dns_dns_lookup_hostname_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Resolves a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into the first found A (IPv4) or\nAAAA (IPv6) record. <code>options</code> can be an object or integer. If <code>options</code> is\nnot provided, then IPv4 and IPv6 addresses are both valid. If <code>options</code> is\nan integer, then it must be <code>4</code> or <code>6</code>.</p>\n<p>Alternatively, <code>options</code> can be an object containing these properties:</p>\n<ul>\n<li><code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - The record family. If present, must be the integer\n<code>4</code> or <code>6</code>. If not provided, both IP v4 and v6 addresses are accepted.</li>\n<li><code>hints</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - If present, it should be one or more of the supported\n<code>getaddrinfo</code> flags. If <code>hints</code> is not provided, then no flags are passed to\n<code>getaddrinfo</code>. Multiple flags can be passed through <code>hints</code> by logically\n<code>OR</code>ing their values.\nSee <a href=\"#dns_supported_getaddrinfo_flags\">supported <code>getaddrinfo</code> flags</a> for more information on supported\nflags.</li>\n<li><code>all</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> - When <code>true</code>, the callback returns all resolved addresses\nin an array, otherwise returns a single address. Defaults to <code>false</code>.</li>\n</ul>\n<p>All properties are optional. An example usage of options is shown below.</p>\n<pre><code>{\n  family: 4,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n  all: false\n}\n</code></pre><p>The <code>callback</code> function has arguments <code>(err, address, family)</code>. <code>address</code> is a\nstring representation of an IPv4 or IPv6 address. <code>family</code> is either the\ninteger <code>4</code> or <code>6</code> and denotes the family of <code>address</code> (not necessarily the\nvalue initially passed to <code>lookup</code>).</p>\n<p>With the <code>all</code> option set to <code>true</code>, the arguments change to\n<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the\nproperties <code>address</code> and <code>family</code>.</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code.\nKeep in mind that <code>err.code</code> will be set to <code>&#39;ENOENT&#39;</code> not only when\nthe hostname does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.</p>\n<p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.\nThe implementation uses an operating system facility that can associate names\nwith addresses, and vice versa. This implementation can have subtle but\nimportant consequences on the behavior of any Node.js program. Please take some\ntime to consult the <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> before using\n<code>dns.lookup()</code>.</p>\n<h3>Supported getaddrinfo flags<span><a class=\"mark\" href=\"#dns_supported_getaddrinfo_flags\" id=\"dns_supported_getaddrinfo_flags\">#</a></span></h3>\n<p>The following flags can be passed as hints to <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</p>\n<ul>\n<li><code>dns.ADDRCONFIG</code>: Returned address types are determined by the types\nof addresses supported by the current system. For example, IPv4 addresses\nare only returned if the current system has at least one IPv4 address\nconfigured. Loopback addresses are not considered.</li>\n<li><code>dns.V4MAPPED</code>: If the IPv6 family was specified, but no IPv6 addresses were\nfound, then return IPv4 mapped IPv6 addresses. Note that it is not supported\non some operating systems (e.g FreeBSD 10.1).</li>\n</ul>\n<h2>dns.lookupService(address, port, callback)<span><a class=\"mark\" href=\"#dns_dns_lookupservice_address_port_callback\" id=\"dns_dns_lookupservice_address_port_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.14</span>\n</div><p>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using\nthe operating system&#39;s underlying <code>getnameinfo</code> implementation.</p>\n<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.\nThe <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>\nwill be thrown.</p>\n<p>The callback has arguments <code>(err, hostname, service)</code>. The <code>hostname</code> and\n<code>service</code> arguments are strings (e.g. <code>&#39;localhost&#39;</code> and <code>&#39;http&#39;</code> respectively).</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\ndns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n    // Prints: localhost ssh\n});\n</code></pre>\n<h2>dns.resolve(hostname[, rrtype], callback)<span><a class=\"mark\" href=\"#dns_dns_resolve_hostname_rrtype_callback\" id=\"dns_dns_resolve_hostname_rrtype_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>Uses the DNS protocol to resolve a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into an\narray of the record types specified by <code>rrtype</code>.</p>\n<p>Valid values for <code>rrtype</code> are:</p>\n<ul>\n<li><code>&#39;A&#39;</code> - IPV4 addresses, default</li>\n<li><code>&#39;AAAA&#39;</code> - IPV6 addresses</li>\n<li><code>&#39;MX&#39;</code> - mail exchange records</li>\n<li><code>&#39;TXT&#39;</code> - text records</li>\n<li><code>&#39;SRV&#39;</code> - SRV records</li>\n<li><code>&#39;PTR&#39;</code> - PTR records</li>\n<li><code>&#39;NS&#39;</code> - name server records</li>\n<li><code>&#39;CNAME&#39;</code> - canonical name records</li>\n<li><code>&#39;SOA&#39;</code> - start of authority record</li>\n<li><code>&#39;NAPTR&#39;</code> - name authority pointer record</li>\n</ul>\n<p>The <code>callback</code> function has arguments <code>(err, addresses)</code>. When successful,\n<code>addresses</code> will be an array. The type of each  item in <code>addresses</code> is\ndetermined by the record type, and described in the documentation for the\ncorresponding lookup methods.</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is\none of the error codes listed <a href=\"#dns_error_codes\">here</a>.</p>\n<h2>dns.resolve4(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolve4_hostname_callback\" id=\"dns_dns_resolve4_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv4 addresses (e.g.\n<code>[&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]</code>).</p>\n<h2>dns.resolve6(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolve6_hostname_callback\" id=\"dns_dns_resolve6_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><p>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv6 addresses.</p>\n<h2>dns.resolveCname(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvecname_hostname_callback\" id=\"dns_dns_resolvecname_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.2</span>\n</div><p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The\n<code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of canonical name records available for the <code>hostname</code>\n(e.g. <code>[&#39;bar.example.com&#39;]</code>).</p>\n<h2>dns.resolveMx(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvemx_hostname_callback\" id=\"dns_dns_resolvemx_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of objects containing both a <code>priority</code> and <code>exchange</code>\nproperty (e.g. <code>[{priority: 10, exchange: &#39;mx.example.com&#39;}, ...]</code>).</p>\n<h2>dns.resolveNaptr(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvenaptr_hostname_callback\" id=\"dns_dns_resolvenaptr_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.12</span>\n</div><p>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>\nrecords) for the <code>hostname</code>. The <code>callback</code> function has arguments\n<code>(err, addresses)</code>.  The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of objects with the following properties:</p>\n<ul>\n<li><code>flags</code></li>\n<li><code>service</code></li>\n<li><code>regexp</code></li>\n<li><code>replacement</code></li>\n<li><code>order</code></li>\n<li><code>preference</code></li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"lang-js\">{\n  flags: &#39;s&#39;,\n  service: &#39;SIP+D2U&#39;,\n  regexp: &#39;&#39;,\n  replacement: &#39;_sip._udp.example.com&#39;,\n  order: 30,\n  preference: 100\n}\n</code></pre>\n<h2>dns.resolveNs(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvens_hostname_callback\" id=\"dns_dns_resolvens_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of name server records available for <code>hostname</code>\n(e.g., <code>[&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]</code>).</p>\n<h2>dns.resolveSoa(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvesoa_hostname_callback\" id=\"dns_dns_resolvesoa_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.10</span>\n</div><p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for\nthe <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an object with the following properties:</p>\n<ul>\n<li><code>nsname</code></li>\n<li><code>hostmaster</code></li>\n<li><code>serial</code></li>\n<li><code>refresh</code></li>\n<li><code>retry</code></li>\n<li><code>expire</code></li>\n<li><code>minttl</code></li>\n</ul>\n<pre><code>{\n  nsname: &#39;ns.example.com&#39;,\n  hostmaster: &#39;root.example.com&#39;,\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n</code></pre><h2>dns.resolveSrv(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvesrv_hostname_callback\" id=\"dns_dns_resolvesrv_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of objects with the following properties:</p>\n<ul>\n<li><code>priority</code></li>\n<li><code>weight</code></li>\n<li><code>port</code></li>\n<li><code>name</code></li>\n</ul>\n<pre><code>{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: &#39;service.example.com&#39;\n}\n</code></pre><h2>dns.resolvePtr(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolveptr_hostname_callback\" id=\"dns_dns_resolveptr_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of strings containing the reply records.</p>\n<h2>dns.resolveTxt(hostname, callback)<span><a class=\"mark\" href=\"#dns_dns_resolvetxt_hostname_callback\" id=\"dns_dns_resolvetxt_hostname_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is\nis a two-dimentional array of the text records available for <code>hostname</code> (e.g.,\n<code>[ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]</code>). Each sub-array contains TXT chunks of\none record. Depending on the use case, these could be either joined together or\ntreated separately.</p>\n<h2>dns.reverse(ip, callback)<span><a class=\"mark\" href=\"#dns_dns_reverse_ip_callback\" id=\"dns_dns_reverse_ip_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\narray of hostnames.</p>\n<p>The <code>callback</code> function has arguments <code>(err, hostnames)</code>, where <code>hostnames</code>\nis an array of resolved hostnames for the given <code>ip</code>.</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is\none of the <a href=\"#dns_error_codes\">DNS error codes</a>.</p>\n<h2>dns.setServers(servers)<span><a class=\"mark\" href=\"#dns_dns_setservers_servers\" id=\"dns_dns_setservers_servers\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.3</span>\n</div><p>Sets the IP addresses of the servers to be used when resolving. The <code>servers</code>\nargument is an array of IPv4 or IPv6 addresses.</p>\n<p>If a port specified on the address it will be removed.</p>\n<p>An error will be thrown if an invalid address is provided.</p>\n<p>The <code>dns.setServers()</code> method must not be called while a DNS query is in\nprogress.</p>\n<h2>Error codes<span><a class=\"mark\" href=\"#dns_error_codes\" id=\"dns_error_codes\">#</a></span></h2>\n<p>Each DNS query can return one of the following error codes:</p>\n<ul>\n<li><code>dns.NODATA</code>: DNS server returned answer with no data.</li>\n<li><code>dns.FORMERR</code>: DNS server claims query was misformatted.</li>\n<li><code>dns.SERVFAIL</code>: DNS server returned general failure.</li>\n<li><code>dns.NOTFOUND</code>: Domain name not found.</li>\n<li><code>dns.NOTIMP</code>: DNS server does not implement requested operation.</li>\n<li><code>dns.REFUSED</code>: DNS server refused query.</li>\n<li><code>dns.BADQUERY</code>: Misformatted DNS query.</li>\n<li><code>dns.BADNAME</code>: Misformatted hostname.</li>\n<li><code>dns.BADFAMILY</code>: Unsupported address family.</li>\n<li><code>dns.BADRESP</code>: Misformatted DNS reply.</li>\n<li><code>dns.CONNREFUSED</code>: Could not contact DNS servers.</li>\n<li><code>dns.TIMEOUT</code>: Timeout while contacting DNS servers.</li>\n<li><code>dns.EOF</code>: End of file.</li>\n<li><code>dns.FILE</code>: Error reading file.</li>\n<li><code>dns.NOMEM</code>: Out of memory.</li>\n<li><code>dns.DESTRUCTION</code>: Channel is being destroyed.</li>\n<li><code>dns.BADSTR</code>: Misformatted string.</li>\n<li><code>dns.BADFLAGS</code>: Illegal flags specified.</li>\n<li><code>dns.NONAME</code>: Given hostname is not numeric.</li>\n<li><code>dns.BADHINTS</code>: Illegal hints flags specified.</li>\n<li><code>dns.NOTINITIALIZED</code>: c-ares library initialization not yet performed.</li>\n<li><code>dns.LOADIPHLPAPI</code>: Error loading iphlpapi.dll.</li>\n<li><code>dns.ADDRGETNETWORKPARAMS</code>: Could not find GetNetworkParams function.</li>\n<li><code>dns.CANCELLED</code>: DNS query cancelled.</li>\n</ul>\n<h2>Implementation considerations<span><a class=\"mark\" href=\"#dns_implementation_considerations\" id=\"dns_implementation_considerations\">#</a></span></h2>\n<p>Although <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> and the various <code>dns.resolve*()/dns.reverse()</code>\nfunctions have the same goal of associating a network name with a network\naddress (or vice versa), their behavior is quite different. These differences\ncan have subtle but significant consequences on the behavior of Node.js\nprograms.</p>\n<h3><code>dns.lookup()</code><span><a class=\"mark\" href=\"#dns_dns_lookup\" id=\"dns_dns_lookup\">#</a></span></h3>\n<p>Under the hood, <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> uses the same operating system facilities\nas most other programs. For instance, <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> will almost always\nresolve a given name the same way as the <code>ping</code> command. On most POSIX-like\noperating systems, the behavior of the <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> function can be\nmodified by changing settings in <code>nsswitch.conf(5)</code> and/or <code>resolv.conf(5)</code>,\nbut note that changing these files will change the behavior of <em>all other\nprograms running on the same operating system</em>.</p>\n<p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript&#39;s\nperspective, it is implemented as a synchronous call to <code>getaddrinfo(3)</code> that\nruns on libuv&#39;s threadpool. Because libuv&#39;s threadpool has a fixed size, it\nmeans that if for whatever reason the call to <code>getaddrinfo(3)</code> takes a long\ntime, other operations that could run on libuv&#39;s threadpool (such as filesystem\noperations) will experience degraded performance. In order to mitigate this\nissue, one potential solution is to increase the size of libuv&#39;s threadpool by\nsetting the <code>&#39;UV_THREADPOOL_SIZE&#39;</code> environment variable to a value greater than\n<code>4</code> (its current default value). For more information on libuv&#39;s threadpool, see\n<a href=\"http://docs.libuv.org/en/latest/threadpool.html\">the official libuv documentation</a>.</p>\n<h3><code>dns.resolve()</code>, <code>dns.resolve*()</code> and <code>dns.reverse()</code><span><a class=\"mark\" href=\"#dns_dns_resolve_dns_resolve_and_dns_reverse\" id=\"dns_dns_resolve_dns_resolve_and_dns_reverse\">#</a></span></h3>\n<p>These functions are implemented quite differently than <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. They\ndo not use <code>getaddrinfo(3)</code> and they <em>always</em> perform a DNS query on the\nnetwork. This network communication is always done asynchronously, and does not\nuse libuv&#39;s threadpool.</p>\n<p>As a result, these functions cannot have the same negative impact on other\nprocessing that happens on libuv&#39;s threadpool that <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> can have.</p>\n<p>They do not use the same set of configuration files than what <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>\nuses. For instance, <em>they do not use the configuration from <code>/etc/hosts</code></em>.</p>\n<!-- [end-include:dns.md] -->\n<!-- [start-include:domain.md] -->\n<h1>Domain<span><a class=\"mark\" href=\"#domain_domain\" id=\"domain_domain\">#</a></span></h1>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><p><strong>This module is pending deprecation</strong>. Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n<strong>not</strong> have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.</p>\n<p>Domains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an <code>&#39;error&#39;</code> event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n<code>process.on(&#39;uncaughtException&#39;)</code> handler, or causing the program to\nexit immediately with an error code.</p>\n<h2>Warning: Don&#39;t Ignore Errors!<span><a class=\"mark\" href=\"#domain_warning_don_t_ignore_errors\" id=\"domain_warning_don_t_ignore_errors\">#</a></span></h2>\n<!-- type=misc -->\n<p>Domain error handlers are not a substitute for closing down your\nprocess when an error occurs.</p>\n<p>By the very nature of how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> works in JavaScript, there is almost\nnever any way to safely &quot;pick up where you left off&quot;, without leaking\nreferences, or creating some other sort of undefined brittle state.</p>\n<p>The safest way to respond to a thrown error is to shut down the\nprocess.  Of course, in a normal web server, you might have many\nconnections open, and it is not reasonable to abruptly shut those down\nbecause an error was triggered by someone else.</p>\n<p>The better approach is to send an error response to the request that\ntriggered the error, while letting the others finish in their normal\ntime, and stop listening for new requests in that worker.</p>\n<p>In this way, <code>domain</code> usage goes hand-in-hand with the cluster module,\nsince the master process can fork a new worker when a worker\nencounters an error.  For Node.js programs that scale to multiple\nmachines, the terminating proxy or service registry can take note of\nthe failure, and react accordingly.</p>\n<p>For example, this is not a good idea:</p>\n<pre><code class=\"lang-js\">// XXX WARNING!  BAD IDEA!\n\nvar d = require(&#39;domain&#39;).create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  // The error won&#39;t crash the process, but what it does is worse!\n  // Though we&#39;ve prevented abrupt process restarting, we are leaking\n  // resources like crazy if this ever happens.\n  // This is no better than process.on(&#39;uncaughtException&#39;)!\n  console.log(&#39;error, but oh well&#39;, er.message);\n});\nd.run(() =&gt; {\n  require(&#39;http&#39;).createServer((req, res) =&gt; {\n    handleRequest(req, res);\n  }).listen(PORT);\n});\n</code></pre>\n<p>By using the context of a domain, and the resilience of separating our\nprogram into multiple worker processes, we can react more\nappropriately, and handle errors with much greater safety.</p>\n<pre><code class=\"lang-js\">// Much better!\n\nconst cluster = require(&#39;cluster&#39;);\nconst PORT = +process.env.PORT || 1337;\n\nif (cluster.isMaster) {\n  // In real life, you&#39;d probably use more than just 2 workers,\n  // and perhaps not put the master and worker in the same file.\n  //\n  // You can also of course get a bit fancier about logging, and\n  // implement whatever custom logic you need to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the master does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n    console.error(&#39;disconnect!&#39;);\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  const domain = require(&#39;domain&#39;);\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests.  How it works, caveats, etc.\n\n  const server = require(&#39;http&#39;).createServer((req, res) =&gt; {\n    var d = domain.create();\n    d.on(&#39;error&#39;, (er) =&gt; {\n      console.error(&#39;error&#39;, er.stack);\n\n      // Note: we&#39;re in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn&#39;t want.\n      // Anything can happen now!  Be very careful!\n\n      try {\n        // make sure we close down within 30 seconds\n        var killtimer = setTimeout(() =&gt; {\n          process.exit(1);\n        }, 30000);\n        // But don&#39;t keep the process open just for that!\n        killtimer.unref();\n\n        // stop taking new requests.\n        server.close();\n\n        // Let the master know we&#39;re dead.  This will trigger a\n        // &#39;disconnect&#39; in the cluster master, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader(&#39;content-type&#39;, &#39;text/plain&#39;);\n        res.end(&#39;Oops, there was a problem!\\n&#39;);\n      } catch (er2) {\n        // oh well, not much we can do at this point.\n        console.error(&#39;Error sending 500!&#39;, er2.stack);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(() =&gt; {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part isn&#39;t important.  Just an example routing thing.\n// You&#39;d put your fancy application logic here.\nfunction handleRequest(req, res) {\n  switch(req.url) {\n    case &#39;/error&#39;:\n      // We do some async stuff, and then...\n      setTimeout(() =&gt; {\n        // Whoops!\n        flerb.bark();\n      });\n      break;\n    default:\n      res.end(&#39;ok&#39;);\n  }\n}\n</code></pre>\n<h2>Additions to Error objects<span><a class=\"mark\" href=\"#domain_additions_to_error_objects\" id=\"domain_additions_to_error_objects\">#</a></span></h2>\n<!-- type=misc -->\n<p>Any time an <code>Error</code> object is routed through a domain, a few extra fields\nare added to it.</p>\n<ul>\n<li><code>error.domain</code> The domain that first handled the error.</li>\n<li><code>error.domainEmitter</code> The event emitter that emitted an <code>&#39;error&#39;</code> event\nwith the error object.</li>\n<li><code>error.domainBound</code> The callback function which was bound to the\ndomain, and passed an error as its first argument.</li>\n<li><code>error.domainThrown</code> A boolean indicating whether the error was\nthrown, emitted, or passed to a bound callback function.</li>\n</ul>\n<h2>Implicit Binding<span><a class=\"mark\" href=\"#domain_implicit_binding\" id=\"domain_implicit_binding\">#</a></span></h2>\n<!--type=misc-->\n<p>If domains are in use, then all <strong>new</strong> EventEmitter objects (including\nStream objects, requests, responses, etc.) will be implicitly bound to\nthe active domain at the time of their creation.</p>\n<p>Additionally, callbacks passed to lowlevel event loop requests (such as\nto fs.open, or other callback-taking methods) will automatically be\nbound to the active domain.  If they throw, then the domain will catch\nthe error.</p>\n<p>In order to prevent excessive memory usage, Domain objects themselves\nare not implicitly added as children of the active domain.  If they\nwere, then it would be too easy to prevent request and response objects\nfrom being properly garbage collected.</p>\n<p>If you <em>want</em> to nest Domain objects as children of a parent Domain,\nthen you must explicitly add them.</p>\n<p>Implicit binding routes thrown errors and <code>&#39;error&#39;</code> events to the\nDomain&#39;s <code>&#39;error&#39;</code> event, but does not register the EventEmitter on the\nDomain, so <a href=\"#domain_domain_dispose\"><code>domain.dispose()</code></a> will not shut down the EventEmitter.\nImplicit binding only takes care of thrown errors and <code>&#39;error&#39;</code> events.</p>\n<h2>Explicit Binding<span><a class=\"mark\" href=\"#domain_explicit_binding\" id=\"domain_explicit_binding\">#</a></span></h2>\n<!--type=misc-->\n<p>Sometimes, the domain in use is not the one that ought to be used for a\nspecific event emitter.  Or, the event emitter could have been created\nin the context of one domain, but ought to instead be bound to some\nother domain.</p>\n<p>For example, there could be one domain in use for an HTTP server, but\nperhaps we would like to have a separate domain to use for each request.</p>\n<p>That is possible via explicit binding.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">// create a top-level domain for the server\nconst domain = require(&#39;domain&#39;);\nconst http = require(&#39;http&#39;);\nconst serverDomain = domain.create();\n\nserverDomain.run(() =&gt; {\n  // server is created in the scope of serverDomain\n  http.createServer((req, res) =&gt; {\n    // req and res are also created in the scope of serverDomain\n    // however, we&#39;d prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    var reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on(&#39;error&#39;, (er) =&gt; {\n      console.error(&#39;Error&#39;, er, req.url);\n      try {\n        res.writeHead(500);\n        res.end(&#39;Error occurred, sorry.&#39;);\n      } catch (er) {\n        console.error(&#39;Error sending 500&#39;, er, req.url);\n      }\n    });\n  }).listen(1337);\n});\n</code></pre>\n<h2>domain.create()<span><a class=\"mark\" href=\"#domain_domain_create\" id=\"domain_domain_create\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li>return: <span class=\"type\">&lt;Domain&gt;</span></li>\n</ul>\n</div><p>Returns a new Domain object.</p>\n<h2>Class: Domain<span><a class=\"mark\" href=\"#domain_class_domain\" id=\"domain_class_domain\">#</a></span></h2>\n<p>The Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.</p>\n<p>Domain is a child class of <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a>.  To handle the errors that it\ncatches, listen to its <code>&#39;error&#39;</code> event.</p>\n<h3>domain.run(fn[, arg][, ...])<span><a class=\"mark\" href=\"#domain_domain_run_fn_arg\" id=\"domain_domain_run_fn_arg\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>fn</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.</p>\n<p>This is the most basic way to use a domain.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const domain = require(&#39;domain&#39;);\nconst fs = require(&#39;fs&#39;);\nconst d = domain.create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  console.error(&#39;Caught error!&#39;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</code></pre>\n<p>In this example, the <code>d.on(&#39;error&#39;)</code> handler will be triggered, rather\nthan crashing the program.</p>\n<h3>domain.members<span><a class=\"mark\" href=\"#domain_domain_members\" id=\"domain_domain_members\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n</div><p>An array of timers and event emitters that have been explicitly added\nto the domain.</p>\n<h3>domain.add(emitter)<span><a class=\"mark\" href=\"#domain_domain_add_emitter\" id=\"domain_domain_add_emitter\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>emitter</code> <a href=\"events.html#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a> | <a href=\"timers.html#timers_timers\" class=\"type\">&lt;Timer&gt;</a> emitter or timer to be added to the domain</li>\n</ul>\n</div><p>Explicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an <code>&#39;error&#39;</code> event, it\nwill be routed to the domain&#39;s <code>&#39;error&#39;</code> event, just like with implicit\nbinding.</p>\n<p>This also works with timers that are returned from <a href=\"timers.html#timers_setinterval_callback_delay_arg\"><code>setInterval()</code></a> and\n<a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout()</code></a>.  If their callback function throws, it will be caught by\nthe domain &#39;error&#39; handler.</p>\n<p>If the Timer or EventEmitter was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.</p>\n<h3>domain.remove(emitter)<span><a class=\"mark\" href=\"#domain_domain_remove_emitter\" id=\"domain_domain_remove_emitter\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>emitter</code> <a href=\"events.html#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a> | <a href=\"timers.html#timers_timers\" class=\"type\">&lt;Timer&gt;</a> emitter or timer to be removed from the domain</li>\n</ul>\n</div><p>The opposite of <a href=\"#domain_domain_add_emitter\"><code>domain.add(emitter)</code></a>.  Removes domain handling from the\nspecified emitter.</p>\n<h3>domain.bind(callback)<span><a class=\"mark\" href=\"#domain_domain_bind_callback\" id=\"domain_domain_bind_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n<li>return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The bound function</li>\n</ul>\n</div><p>The returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain&#39;s <code>&#39;error&#39;</code> event.</p>\n<h4>Example<span><a class=\"mark\" href=\"#domain_example\" id=\"domain_example\">#</a></span></h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n<h3>domain.intercept(callback)<span><a class=\"mark\" href=\"#domain_domain_intercept_callback\" id=\"domain_domain_intercept_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n<li>return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The intercepted function</li>\n</ul>\n</div><p>This method is almost identical to <a href=\"#domain_domain_bind_callback\"><code>domain.bind(callback)</code></a>.  However, in\naddition to catching thrown errors, it will also intercept <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nobjects sent as the first argument to the function.</p>\n<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced\nwith a single error handler in a single place.</p>\n<h4>Example<span><a class=\"mark\" href=\"#domain_example_1\" id=\"domain_example_1\">#</a></span></h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &#39;Error&#39; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &#39;error&#39;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n<h3>domain.enter()<span><a class=\"mark\" href=\"#domain_domain_enter\" id=\"domain_domain_enter\">#</a></span></h3>\n<p>The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code>\nmethods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code>\nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see <a href=\"#domain_domain_exit\"><code>domain.exit()</code></a> for details on the domain stack). The\ncall to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.</p>\n<p>Calling <code>enter</code> changes only the active domain, and does not alter the domain\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n<p>If the domain on which <code>enter</code> is called has been disposed, <code>enter</code> will return\nwithout setting the domain.</p>\n<h3>domain.exit()<span><a class=\"mark\" href=\"#domain_domain_exit\" id=\"domain_domain_exit\">#</a></span></h3>\n<p>The <code>exit</code> method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\nThe call to <code>exit</code> delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.</p>\n<p>If there are multiple, nested domains bound to the current execution context,\n<code>exit</code> will exit any domains nested within this domain.</p>\n<p>Calling <code>exit</code> changes only the active domain, and does not alter the domain\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n<p>If the domain on which <code>exit</code> is called has been disposed, <code>exit</code> will return\nwithout exiting the domain.</p>\n<h3>domain.dispose()<span><a class=\"mark\" href=\"#domain_domain_dispose\" id=\"domain_domain_dispose\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated.  Please recover from failed IO actions\nexplicitly via error event handlers set on the domain.</pre><p>Once <code>dispose</code> has been called, the domain will no longer be used by callbacks\nbound into the domain via <code>run</code>, <code>bind</code>, or <code>intercept</code>, and a <code>&#39;dispose&#39;</code> event\nis emitted.</p>\n<!-- [end-include:domain.md] -->\n<!-- [start-include:errors.md] -->\n<h1>Errors<span><a class=\"mark\" href=\"#errors_errors\" id=\"errors_errors\">#</a></span></h1>\n<!--type=misc-->\n<p>Applications running in Node.js will generally experience four categories of\nerrors:</p>\n<ul>\n<li>Standard JavaScript errors such as:<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" class=\"type\">&lt;EvalError&gt;</a> : thrown when a call to <code>eval()</code> fails.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" class=\"type\">&lt;SyntaxError&gt;</a> : thrown in response to improper JavaScript language\nsyntax.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" class=\"type\">&lt;RangeError&gt;</a> : thrown when a value is not within an expected range</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" class=\"type\">&lt;ReferenceError&gt;</a> : thrown when using undefined variables</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" class=\"type\">&lt;TypeError&gt;</a> : thrown when passing arguments of the wrong type</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\" class=\"type\">&lt;URIError&gt;</a> : thrown when a global URI handling function is misused.</li>\n</ul>\n</li>\n<li>System errors triggered by underlying operating system constraints such\nas attempting to open a file that does not exist, attempting to send data\nover a closed socket, etc;</li>\n<li>And User-specified errors triggered by application code.</li>\n<li>Assertion Errors are a special class of error that can be triggered whenever\nNode.js detects an exceptional logic violation that should never occur. These\nare raised typically by the <code>assert</code> module.</li>\n</ul>\n<p>All JavaScript and System errors raised by Node.js inherit from, or are\ninstances of, the standard JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> class and are guaranteed\nto provide <em>at least</em> the properties available on that class.</p>\n<h2>Error Propagation and Interception<span><a class=\"mark\" href=\"#errors_error_propagation_and_interception\" id=\"errors_error_propagation_and_interception\">#</a></span></h2>\n<!--type=misc-->\n<p>Node.js supports several mechanisms for propagating and handling errors that\noccur while an application is running. How these errors are reported and\nhandled depends entirely on the type of Error and the style of the API that is\ncalled.</p>\n<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate\nand throw an error using the standard JavaScript <code>throw</code> mechanism. These\nare handled using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try / catch</code> construct</a> provided by the JavaScript\nlanguage.</p>\n<pre><code class=\"lang-js\">// Throws with a ReferenceError because z is undefined\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\n</code></pre>\n<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that\n<em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit\nimmediately.</p>\n<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not\naccept a <code>callback</code> function, such as <a href=\"fs.html#fs_fs_readfilesync_file_options\"><code>fs.readFileSync</code></a>), will use <code>throw</code>\nto report errors.</p>\n<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>\n<ul>\n<li><p>Most asynchronous methods that accept a <code>callback</code> function will accept an\n<code>Error</code> object passed as the first argument to that function. If that first\nargument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred\nthat should be handled.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nfs.readFile(&#39;a file that does not exist&#39;, (err, data) =&gt; {\n  if (err) {\n    console.error(&#39;There was an error reading the file!&#39;, err);\n    return;\n  }\n  // Otherwise handle the data\n});\n</code></pre>\n</li>\n<li><p>When an asynchronous method is called on an object that is an <code>EventEmitter</code>,\nerrors can be routed to that object&#39;s <code>&#39;error&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst connection = net.connect(&#39;localhost&#39;);\n\n// Adding an &#39;error&#39; event handler to a stream:\nconnection.on(&#39;error&#39;, (err) =&gt; {\n  // If the connection is reset by the server, or if it can&#39;t\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\n</code></pre>\n</li>\n<li><p>A handful of typically asynchronous methods in the Node.js API may still\nuse the <code>throw</code> mechanism to raise exceptions that must be handled using\n<code>try / catch</code>. There is no comprehensive list of such methods; please\nrefer to the documentation of each method to determine the appropriate\nerror handling mechanism required.</p>\n</li>\n</ul>\n<p>The use of the <code>&#39;error&#39;</code> event mechanism is most common for <a href=\"stream.html\">stream-based</a>\nand <a href=\"events.html#events_class_eventemitter\">event emitter-based</a> APIs, which themselves represent a series of\nasynchronous operations over time (as opposed to a single operation that may\npass or fail).</p>\n<p>For <em>all</em> <code>EventEmitter</code> objects, if an <code>&#39;error&#39;</code> event handler is not\nprovided, the error will be thrown, causing the Node.js process to report an\nunhandled exception and  crash unless either: The <a href=\"domain.html\"><code>domain</code></a> module is used\nappropriately or a handler has been registered for the\n<a href=\"process.html#process_event_uncaughtexception\"><code>process.on(&#39;uncaughtException&#39;)</code></a> event.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\nconst ee = new EventEmitter();\n\nsetImmediate(() =&gt; {\n  // This will crash the process because no &#39;error&#39; event\n  // handler has been added.\n  ee.emit(&#39;error&#39;, new Error(&#39;This will crash&#39;));\n});\n</code></pre>\n<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as\nthey are thrown <em>after</em> the calling code has already exited.</p>\n<p>Developers must refer to the documentation for each method to determine\nexactly how errors raised by those methods are propagated.</p>\n<h3>Node.js style callbacks<span><a class=\"mark\" href=\"#errors_node_js_style_callbacks\" id=\"errors_node_js_style_callbacks\">#</a></span></h3>\n<!--type=misc-->\n<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic\npattern  referred to as a &quot;Node.js style callback&quot;. With this pattern, a\ncallback function is passed to the method as an argument. When the operation\neither completes or an error is raised, the callback function is called with\nthe Error object (if any) passed as the first argument. If no error was raised,\nthe first argument will be passed as <code>null</code>.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfunction nodeStyleCallback(err, data) {\n if (err) {\n   console.error(&#39;There was an error&#39;, err);\n   return;\n }\n console.log(data);\n}\n\nfs.readFile(&#39;/some/file/that/does-not-exist&#39;, nodeStyleCallback);\nfs.readFile(&#39;/some/file/that/does-exist&#39;, nodeStyleCallback)\n</code></pre>\n<p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors\ngenerated by asynchronous APIs.  A common mistake for beginners is to try to\nuse <code>throw</code> inside a Node.js style callback:</p>\n<pre><code class=\"lang-js\">// THIS WILL NOT WORK:\nconst fs = require(&#39;fs&#39;);\n\ntry {\n  fs.readFile(&#39;/some/file/that/does-not-exist&#39;, (err, data) =&gt; {\n    // mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch(err) {\n  // This will not catch the throw!\n  console.log(err);\n}\n</code></pre>\n<p>This will not work because the callback function passed to <code>fs.readFile()</code> is\ncalled asynchronously. By the time the callback has been called, the\nsurrounding code (including the <code>try { } catch(err) { }</code> block will have\nalready exited. Throwing an error inside the callback <strong>can crash the Node.js\nprocess</strong> in most cases. If <a href=\"domain.html\">domains</a> are enabled, or a handler has been\nregistered with <code>process.on(&#39;uncaughtException&#39;)</code>, such errors can be\nintercepted.</p>\n<h2>Class: Error<span><a class=\"mark\" href=\"#errors_class_error\" id=\"errors_class_error\">#</a></span></h2>\n<!--type=class-->\n<p>A generic JavaScript <code>Error</code> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>All errors generated by Node.js, including all System and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\n<h3>new Error(message)<span><a class=\"mark\" href=\"#errors_new_error_message\" id=\"errors_new_error_message\">#</a></span></h3>\n<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of  <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n<h3>Error.captureStackTrace(targetObject[, constructorOpt])<span><a class=\"mark\" href=\"#errors_error_capturestacktrace_targetobject_constructoropt\" id=\"errors_error_capturestacktrace_targetobject_constructoropt\">#</a></span></h3>\n<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"lang-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack  // similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace, instead of being prefixed with <code>ErrorType:\nmessage</code>, will be the result of calling <code>targetObject.toString()</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from an end user. For instance:</p>\n<pre><code class=\"lang-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame and all frames above it.\nnew MyError().stack\n</code></pre>\n<h3>Error.stackTraceLimit<span><a class=\"mark\" href=\"#errors_error_stacktracelimit\" id=\"errors_error_stacktracelimit\">#</a></span></h3>\n<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>\n<h4>error.message<span><a class=\"mark\" href=\"#errors_error_message\" id=\"errors_error_message\">#</a></span></h4>\n<p>Returns the string description of error as set by calling <code>new Error(message)</code>.\nThe <code>message</code> passed to the constructor will also appear in the first line of\nthe stack trace of the <code>Error</code>, however changing this property after the\n<code>Error</code> object is created <em>may not</em> change the first line of the stack trace.</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;The message&#39;);\nconsole.log(err.message);\n  // Prints: The message\n</code></pre>\n<h4>error.stack<span><a class=\"mark\" href=\"#errors_error_stack\" id=\"errors_error_stack\">#</a></span></h4>\n<p>Returns a string describing the point in the code at which the <code>Error</code> was\ninstantiated.</p>\n<p>For example:</p>\n<pre><code>Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre><p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>It is important to note that frames are <strong>only</strong> generated for JavaScript\nfunctions. If, for example, execution synchronously passes through a C++ addon\nfunction called <code>cheetahify</code>, which itself calls a JavaScript function, the\nframe representing the <code>cheetahify</code> call will <strong>not</strong> be present in the stack\ntraces:</p>\n<pre><code class=\"lang-js\">const cheetahify = require(&#39;./native-binding.node&#39;);\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error(&#39;oh no!&#39;);\n  });\n}\n\nmakeFaster(); // will throw:\n  // /home/gbusey/file.js:6\n  //     throw new Error(&#39;oh no!&#39;);\n  //           ^\n  // Error: oh no!\n  //     at speedy (/home/gbusey/file.js:6:11)\n  //     at makeFaster (/home/gbusey/file.js:5:3)\n  //     at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n  //     at Module._compile (module.js:456:26)\n  //     at Object.Module._extensions..js (module.js:474:10)\n  //     at Module.load (module.js:356:32)\n  //     at Function.Module._load (module.js:312:12)\n  //     at Function.Module.runMain (module.js:497:10)\n  //     at startup (node.js:119:16)\n  //     at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\n to Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program, or its dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\ndetailed <a href=\"#errors_system_errors\">here</a>.</p>\n<h2>Class: RangeError<span><a class=\"mark\" href=\"#errors_class_rangeerror\" id=\"errors_class_rangeerror\">#</a></span></h2>\n<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\nset or range of acceptable values for a function; whether that is a numeric\nrange, or outside the set of options for a given function parameter.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).connect(-1);\n  // throws RangeError, port should be &gt; 0 &amp;&amp; &lt; 65536\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n<h2>Class: ReferenceError<span><a class=\"mark\" href=\"#errors_class_referenceerror\" id=\"errors_class_referenceerror\">#</a></span></h2>\n<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\nvariable that is not defined. Such errors commonly indicate typos in code, or\nan otherwise broken program.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"lang-js\">doesNotExist;\n  // throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p><code>ReferenceError</code> instances will have an <code>error.arguments</code> property whose value\nis an array containing a single element: a string representing the variable\nthat was not defined.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\ntry {\n  doesNotExist;\n} catch(err) {\n  assert(err.arguments[0], &#39;doesNotExist&#39;);\n}\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances should always be considered a bug in the code\nor its dependencies.</p>\n<h2>Class: SyntaxError<span><a class=\"mark\" href=\"#errors_class_syntaxerror\" id=\"errors_class_syntaxerror\">#</a></span></h2>\n<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\nThese errors may only be generated and propagated as a result of code\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\n<code>require</code>, or <a href=\"vm.html\">vm</a>. These errors are almost always indicative of a broken\nprogram.</p>\n<pre><code class=\"lang-js\">try {\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\n} catch(err) {\n  // err will be a SyntaxError\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them \u2013\nthey may only be caught by other contexts.</p>\n<h2>Class: TypeError<span><a class=\"mark\" href=\"#errors_class_typeerror\" id=\"errors_class_typeerror\">#</a></span></h2>\n<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\nallowable type. For example, passing a function to a parameter which expects a\nstring would be considered a TypeError.</p>\n<pre><code class=\"lang-js\">require(&#39;url&#39;).parse(() =&gt; { });\n  // throws TypeError, since it expected a string\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n<h2>Exceptions vs. Errors<span><a class=\"mark\" href=\"#errors_exceptions_vs_errors\" id=\"errors_exceptions_vs_errors\">#</a></span></h2>\n<!--type=misc-->\n<p>A JavaScript exception is a value that is thrown as a result of an invalid\noperation or as the target of a <code>throw</code> statement. While it is not required\nthat these values are instances of <code>Error</code> or classes which inherit from\n<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be\ninstances of Error.</p>\n<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions\nwill <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>\nchecks or <code>abort()</code> calls in the C++ layer.</p>\n<h2>System Errors<span><a class=\"mark\" href=\"#errors_system_errors\" id=\"errors_system_errors\">#</a></span></h2>\n<p>System errors are generated when exceptions occur within the program&#39;s\nruntime environment. Typically, these are operational errors that occur\nwhen an application violates an operating system constraint such as attempting\nto read a file that does not exist or when the user does not have sufficient\npermissions.</p>\n<p>System errors are typically generated at the syscall level: an exhaustive list\nof error codes and their meanings is available by running <code>man 2 intro</code> or\n<code>man 3 errno</code> on most Unices; or <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">online</a>.</p>\n<p>In Node.js, system errors are represented as augmented <code>Error</code> objects with\nadded properties.</p>\n<h3>Class: System Error<span><a class=\"mark\" href=\"#errors_class_system_error\" id=\"errors_class_system_error\">#</a></span></h3>\n<h4>error.code<span><a class=\"mark\" href=\"#errors_error_code\" id=\"errors_error_code\">#</a></span></h4>\n<h4>error.errno<span><a class=\"mark\" href=\"#errors_error_errno\" id=\"errors_error_errno\">#</a></span></h4>\n<p>Returns a string representing the error code, which is always <code>E</code> followed by\na sequence of capital letters, and may be referenced in <code>man 2 intro</code>.</p>\n<p>The properties <code>error.code</code> and <code>error.errno</code> are aliases of one another and\nreturn the same value.</p>\n<h4>error.syscall<span><a class=\"mark\" href=\"#errors_error_syscall\" id=\"errors_error_syscall\">#</a></span></h4>\n<p>Returns a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p>\n<h3>Common System Errors<span><a class=\"mark\" href=\"#errors_common_system_errors\" id=\"errors_common_system_errors\">#</a></span></h3>\n<p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system\nerrors encountered when writing a Node.js program. An exhaustive list may be\nfound <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">here</a>.</p>\n<ul>\n<li><p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\nforbidden by its file access permissions.</p>\n</li>\n<li><p><code>EADDRINUSE</code> (Address already in use):  An attempt to bind a server\n(<a href=\"net.html\"><code>net</code></a>, <a href=\"http.html\"><code>http</code></a>, or <a href=\"https.html\"><code>https</code></a>) to a local address failed due to\nanother server on the local system already occupying that address.</p>\n</li>\n<li><p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\ntarget machine actively refused it. This usually results from trying to\nconnect to a service that is inactive on the foreign host.</p>\n</li>\n<li><p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\na peer. This normally results from a loss of the connection on the remote\nsocket due to a timeout or reboot. Commonly encountered via the <a href=\"http.html\"><code>http</code></a>\nand <a href=\"net.html\"><code>net</code></a> modules.</p>\n</li>\n<li><p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\nrequired that the target not exist.</p>\n</li>\n<li><p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\npathname was a directory.</p>\n</li>\n<li><p><code>EMFILE</code> (Too many open files in system): Maximum number of\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and\nrequests for another descriptor cannot be fulfilled until at least one\nhas been closed. This is encountered when opening many files at once in\nparallel, especially on systems (in particular, OS X) where there is a low\nfile descriptor limit for processes. To remedy a low limit, run\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\n</li>\n<li><p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs.html\"><code>fs</code></a> operations\nto indicate that a component of the specified pathname does not exist -- no\nentity (file or directory) could be found by the given path.</p>\n</li>\n<li><p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\nwas not a directory as expected. Commonly raised by <a href=\"fs.html#fs_fs_readdir_path_options_callback\"><code>fs.readdir</code></a>.</p>\n</li>\n<li><p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\nof an operation that requires an empty directory -- usually <a href=\"fs.html#fs_fs_unlink_path_callback\"><code>fs.unlink</code></a>.</p>\n</li>\n<li><p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\noperation that requires elevated privileges.</p>\n</li>\n<li><p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\nno process to read the data. Commonly encountered at the <a href=\"net.html\"><code>net</code></a> and\n<a href=\"http.html\"><code>http</code></a> layers, indicative that the remote side of the stream being\nwritten to has been closed.</p>\n</li>\n<li><p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\nthe connected party did not properly respond after a period of time. Usually\nencountered by <a href=\"http.html\"><code>http</code></a> or <a href=\"net.html\"><code>net</code></a> -- often a sign that a <code>socket.end()</code>\nwas not properly called.</p>\n</li>\n</ul>\n<!-- [end-include:errors.md] -->\n<!-- [start-include:events.md] -->\n<h1>Events<span><a class=\"mark\" href=\"#events_events\" id=\"events_events\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!--type=module-->\n<p>Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\ncalled.</p>\n<p>For instance: a <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> object emits an event each time a peer\nconnects to it; a <a href=\"fs.html#fs_class_fs_readstream\"><code>fs.ReadStream</code></a> emits an event when the file is opened;\na <a href=\"stream.html#stream_stream\">stream</a> emits an event whenever data is available to be read.</p>\n<p>All objects that emit events are instances of the <code>EventEmitter</code> class. These\nobjects expose an <code>eventEmitter.on()</code> function that allows one or more\nFunctions to be attached to named events emitted by the object. Typically,\nevent names are camel-cased strings but any valid JavaScript property key\ncan be used.</p>\n<p>When the <code>EventEmitter</code> object emits an event, all of the Functions attached\nto that specific event are called <em>synchronously</em>. Any values returned by the\ncalled listeners are <em>ignored</em> and will be discarded.</p>\n<p>The following example shows a simple <code>EventEmitter</code> instance with a single\nlistener. The <code>eventEmitter.on()</code> method is used to register listeners, while\nthe <code>eventEmitter.emit()</code> method is used to trigger the event.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;an event occurred!&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n</code></pre>\n<h2>Passing arguments and <code>this</code> to listeners<span><a class=\"mark\" href=\"#events_passing_arguments_and_this_to_listeners\" id=\"events_passing_arguments_and_this_to_listeners\">#</a></span></h2>\n<p>The <code>eventEmitter.emit()</code> method allows an arbitrary set of arguments to be\npassed to the listener functions. It is important to keep in mind that when an\nordinary listener function is called by the <code>EventEmitter</code>, the standard <code>this</code>\nkeyword is intentionally set to reference the <code>EventEmitter</code> to which the\nlistener is attached.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, function(a, b) {\n  console.log(a, b, this);\n    // Prints:\n    //   a b MyEmitter {\n    //     domain: null,\n    //     _events: { event: [Function] },\n    //     _eventsCount: 1,\n    //     _maxListeners: undefined }\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n<p>It is possible to use ES6 Arrow Functions as listeners, however, when doing so,\nthe <code>this</code> keyword will no longer reference the <code>EventEmitter</code> instance:</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\n  console.log(a, b, this);\n    // Prints: a b {}\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n<h2>Asynchronous vs. Synchronous<span><a class=\"mark\" href=\"#events_asynchronous_vs_synchronous\" id=\"events_asynchronous_vs_synchronous\">#</a></span></h2>\n<p>The <code>EventListener</code> calls all listeners synchronously in the order in which\nthey were registered. This is important to ensure the proper sequencing of\nevents and to avoid race conditions or logic errors. When appropriate,\nlistener functions can switch to an asynchronous mode of operation using\nthe <code>setImmediate()</code> or <code>process.nextTick()</code> methods:</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\n  setImmediate(() =&gt; {\n    console.log(&#39;this happens asynchronously&#39;);\n  });\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n<h2>Handling events only once<span><a class=\"mark\" href=\"#events_handling_events_only_once\" id=\"events_handling_events_only_once\">#</a></span></h2>\n<p>When a listener is registered using the <code>eventEmitter.on()</code> method, that\nlistener will be invoked <em>every time</em> the named event is emitted.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nvar m = 0;\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit(&#39;event&#39;);\n  // Prints: 1\nmyEmitter.emit(&#39;event&#39;);\n  // Prints: 2\n</code></pre>\n<p>Using the <code>eventEmitter.once()</code> method, it is possible to register a listener\nthat is unregistered before it is called.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nvar m = 0;\nmyEmitter.once(&#39;event&#39;, () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit(&#39;event&#39;);\n  // Prints: 1\nmyEmitter.emit(&#39;event&#39;);\n  // Ignored\n</code></pre>\n<h2>Error events<span><a class=\"mark\" href=\"#events_error_events\" id=\"events_error_events\">#</a></span></h2>\n<p>When an error occurs within an <code>EventEmitter</code> instance, the typical action is\nfor an <code>&#39;error&#39;</code> event to be emitted. These are treated as a special case\nwithin Node.js.</p>\n<p>If an <code>EventEmitter</code> does <em>not</em> have at least one listener registered for the\n<code>&#39;error&#39;</code> event, and an <code>&#39;error&#39;</code> event is emitted, the error is thrown, a\nstack trace is printed, and the Node.js process exits.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\n  // Throws and crashes Node.js\n</code></pre>\n<p>To guard against crashing the Node.js process, developers can either register\na listener for the <code>process.on(&#39;uncaughtException&#39;)</code> event or use the\n<a href=\"domain.html\"><code>domain</code></a> module (<em>Note, however, that the <code>domain</code> module has been\ndeprecated</em>).</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\n\nprocess.on(&#39;uncaughtException&#39;, (err) =&gt; {\n  console.log(&#39;whoops! there was an error&#39;);\n});\n\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\n  // Prints: whoops! there was an error\n</code></pre>\n<p>As a best practice, developers should always register listeners for the\n<code>&#39;error&#39;</code> event:</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;error&#39;, (err) =&gt; {\n  console.log(&#39;whoops! there was an error&#39;);\n});\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\n  // Prints: whoops! there was an error\n</code></pre>\n<h2>Class: EventEmitter<span><a class=\"mark\" href=\"#events_class_eventemitter\" id=\"events_class_eventemitter\">#</a></span></h2>\n<p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n</code></pre>\n<p>All EventEmitters emit the event <code>&#39;newListener&#39;</code> when new listeners are\nadded and <code>&#39;removeListener&#39;</code> when a listener is removed.</p>\n<h3>Event: &#39;newListener&#39;<span><a class=\"mark\" href=\"#events_event_newlistener\" id=\"events_event_newlistener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The name of the event being listened for</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The event handler function</li>\n</ul>\n</div><p>The <code>EventEmitter</code> instance will emit it&#39;s own <code>&#39;newListener&#39;</code> event <em>before</em>\na listener is added to it&#39;s internal array of listeners.</p>\n<p>Listeners registered for the <code>&#39;newListener&#39;</code> event will be passed the event\nname and a reference to the listener being added.</p>\n<p>The fact that the event is triggered before adding the listener has a subtle\nbut important side effect: any <em>additional</em> listeners registered to the same\n<code>name</code> <em>within</em> the <code>&#39;newListener&#39;</code> callback will be inserted <em>before</em> the\nlistener that is in the process of being added.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\n// Only do this once so we don&#39;t loop forever\nmyEmitter.once(&#39;newListener&#39;, (event, listener) =&gt; {\n  if (event === &#39;event&#39;) {\n    // Insert a new listener in front\n    myEmitter.on(&#39;event&#39;, () =&gt; {\n      console.log(&#39;B&#39;);\n    });\n  }\n});\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;A&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n  // Prints:\n  //   B\n  //   A\n</code></pre>\n<h3>Event: &#39;removeListener&#39;<span><a class=\"mark\" href=\"#events_event_removelistener\" id=\"events_event_removelistener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The event name</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The event handler function</li>\n</ul>\n</div><p>The <code>&#39;removeListener&#39;</code> event is emitted <em>after</em> a listener is removed.</p>\n<h3>EventEmitter.listenerCount(emitter, eventName)<span><a class=\"mark\" href=\"#events_eventemitter_listenercount_emitter_eventname\" id=\"events_eventemitter_listenercount_emitter_eventname\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#events_emitter_listenercount_eventname\"><code>emitter.listenerCount()</code></a> instead.</pre><p>A class method that returns the number of listeners for the given <code>eventName</code>\nregistered on the given <code>emitter</code>.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, &#39;event&#39;));\n  // Prints: 2\n</code></pre>\n<h3>EventEmitter.defaultMaxListeners<span><a class=\"mark\" href=\"#events_eventemitter_defaultmaxlisteners\" id=\"events_eventemitter_defaultmaxlisteners\">#</a></span></h3>\n<p>By default, a maximum of <code>10</code> listeners can be registered for any single\nevent. This limit can be changed for individual <code>EventEmitter</code> instances\nusing the <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> method. To change the default\nfor <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>\nproperty can be used.</p>\n<p>Take caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the\nchange effects <em>all</em> <code>EventEmitter</code> instances, including those created before\nthe change is made. However, calling <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> still has\nprecedence over <code>EventEmitter.defaultMaxListeners</code>.</p>\n<p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a <code>possible EventEmitter memory leak</code> has been detected. For any single\n<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>\nmethods can be used to temporarily avoid this warning:</p>\n<pre><code class=\"lang-js\">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once(&#39;event&#39;, () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n</code></pre>\n<h3>emitter.addListener(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_addlistener_eventname_listener\" id=\"events_emitter_addlistener_eventname_listener\">#</a></span></h3>\n<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>\n<h3>emitter.emit(eventName[, arg1][, arg2][, ...])<span><a class=\"mark\" href=\"#events_emitter_emit_eventname_arg1_arg2\" id=\"events_emitter_emit_eventname_arg1_arg2\">#</a></span></h3>\n<p>Synchronously calls each of the listeners registered for the event named\n<code>eventName</code>, in the order they were registered, passing the supplied arguments\nto each.</p>\n<p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p>\n<h3>emitter.eventNames()<span><a class=\"mark\" href=\"#events_emitter_eventnames\" id=\"events_emitter_eventnames\">#</a></span></h3>\n<p>Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or Symbols.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\nconst myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; {});\nmyEE.on(&#39;bar&#39;, () =&gt; {});\n\nconst sym = Symbol(&#39;symbol&#39;);\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n  // Prints [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]\n</code></pre>\n<h3>emitter.getMaxListeners()<span><a class=\"mark\" href=\"#events_emitter_getmaxlisteners\" id=\"events_emitter_getmaxlisteners\">#</a></span></h3>\n<p>Returns the current max listener value for the <code>EventEmitter</code> which is either\nset by <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> or defaults to\n<a href=\"#events_eventemitter_defaultmaxlisteners\"><code>EventEmitter.defaultMaxListeners</code></a>.</p>\n<h3>emitter.listenerCount(eventName)<span><a class=\"mark\" href=\"#events_emitter_listenercount_eventname\" id=\"events_emitter_listenercount_eventname\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <span class=\"type\">&lt;Value&gt;</span> The name of the event being listened for</li>\n</ul>\n</div><p>Returns the number of listeners listening to the event named <code>eventName</code>.</p>\n<h3>emitter.listeners(eventName)<span><a class=\"mark\" href=\"#events_emitter_listeners_eventname\" id=\"events_emitter_listeners_eventname\">#</a></span></h3>\n<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>\n<pre><code class=\"lang-js\">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\nconsole.log(util.inspect(server.listeners(&#39;connection&#39;)));\n  // Prints: [ [Function] ]\n</code></pre>\n<h3>emitter.on(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_on_eventname_listener\" id=\"events_emitter_on_eventname_listener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The name of the event.</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n</ul>\n</div><p>Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"lang-js\">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"lang-js\">const myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n  // Prints:\n  //   b\n  //   a\n</code></pre>\n<h3>emitter.once(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_once_eventname_listener\" id=\"events_emitter_once_eventname_listener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The name of the event.</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n</ul>\n</div><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>\n<pre><code class=\"lang-js\">server.once(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"lang-js\">const myEE = new EventEmitter();\nmyEE.once(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependOnceListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n  // Prints:\n  //   b\n  //   a\n</code></pre>\n<h3>emitter.prependListener(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_prependlistener_eventname_listener\" id=\"events_emitter_prependlistener_eventname_listener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The name of the event.</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n</ul>\n</div><p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"lang-js\">server.prependListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<h3>emitter.prependOnceListener(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_prependoncelistener_eventname_listener\" id=\"events_emitter_prependoncelistener_eventname_listener\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>eventName</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type\" class=\"type\">&lt;Symbol&gt;</a> The name of the event.</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li>\n</ul>\n</div><p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.</p>\n<pre><code class=\"lang-js\">server.prependOnceListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<h3>emitter.removeAllListeners([eventName])<span><a class=\"mark\" href=\"#events_emitter_removealllisteners_eventname\" id=\"events_emitter_removealllisteners_eventname\">#</a></span></h3>\n<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>\n<p>Note that it is bad practice to remove listeners added elsewhere in the code,\nparticularly when the <code>EventEmitter</code> instance was created by some other\ncomponent or module (e.g. sockets or file streams).</p>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<h3>emitter.removeListener(eventName, listener)<span><a class=\"mark\" href=\"#events_emitter_removelistener_eventname_listener\" id=\"events_emitter_removelistener_eventname_listener\">#</a></span></h3>\n<p>Removes the specified <code>listener</code> from the listener array for the event named\n<code>eventName</code>.</p>\n<pre><code class=\"lang-js\">var callback = (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n};\nserver.on(&#39;connection&#39;, callback);\n// ...\nserver.removeListener(&#39;connection&#39;, callback);\n</code></pre>\n<p><code>removeListener</code> will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified <code>eventName</code>, then <code>removeListener</code> must be\ncalled multiple times to remove each instance.</p>\n<p>Note that once an event has been emitted, all listeners attached to it at the\ntime of emitting will be called in order. This implies that any <code>removeListener()</code>\nor <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener\nfinishes execution will not remove them from <code>emit()</code> in progress. Subsequent\nevents will behave as expected.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\n\nvar callbackA = () =&gt; {\n  console.log(&#39;A&#39;);\n  myEmitter.removeListener(&#39;event&#39;, callbackB);\n};\n\nvar callbackB = () =&gt; {\n  console.log(&#39;B&#39;);\n};\n\nmyEmitter.on(&#39;event&#39;, callbackA);\n\nmyEmitter.on(&#39;event&#39;, callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit(&#39;event&#39;);\n  // Prints:\n  //   A\n  //   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit(&#39;event&#39;);\n  // Prints:\n  //   A\n</code></pre>\n<p>Because listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered <em>after</em> the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it will means that any copies of the listener array as returned by\nthe <code>emitter.listeners()</code> method will need to be recreated.</p>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<h3>emitter.setMaxListeners(n)<span><a class=\"mark\" href=\"#events_emitter_setmaxlisteners_n\" id=\"events_emitter_setmaxlisteners_n\">#</a></span></h3>\n<p>By default EventEmitters will print a warning if more than <code>10</code> listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\nThe <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this\nspecific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)\nfor to indicate an unlimited number of listeners.</p>\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\n<!-- [end-include:events.md] -->\n<!-- [start-include:fs.md] -->\n<h1>File System<span><a class=\"mark\" href=\"#fs_file_system\" id=\"fs_file_system\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!--name=fs-->\n<p>File I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do <code>require(&#39;fs&#39;)</code>. All the methods have asynchronous and\nsynchronous forms.</p>\n<p>The asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be <code>null</code> or <code>undefined</code>.</p>\n<p>When using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.</p>\n<p>Here is an example of the asynchronous version:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n});\n</code></pre>\n<p>Here is the synchronous version:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfs.unlinkSync(&#39;/tmp/hello&#39;);\nconsole.log(&#39;successfully deleted /tmp/hello&#39;);\n</code></pre>\n<p>With the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n</code></pre>\n<p>It could be that <code>fs.stat</code> is executed before <code>fs.rename</code>.\nThe correct way to do this is to chain the callbacks.</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n</code></pre>\n<p>In busy processes, the programmer is <em>strongly encouraged</em> to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.</p>\n<p>The relative path to a filename can be used. Remember, however, that this path\nwill be relative to <code>process.cwd()</code>.</p>\n<p>Most fs functions let you omit the callback argument. If you do, a default\ncallback is used that rethrows errors. To get a trace to the original call\nsite, set the <code>NODE_DEBUG</code> environment variable:</p>\n<pre><code>$ cat script.js\nfunction bad() {\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n</code></pre><h2>Buffer API<span><a class=\"mark\" href=\"#fs_buffer_api\" id=\"fs_buffer_api\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p><code>fs</code> functions support passing and receiving paths as both strings\nand Buffers. The latter is intended to make it possible to work with\nfilesystems that allow for non-UTF-8 filenames. For most typical\nuses, working with paths as Buffers will be unnecessary, as the string\nAPI converts to and from UTF-8 automatically.</p>\n<p><em>Note</em> that on certain file systems (such as NTFS and HFS+) filenames\nwill always be encoded as UTF-8. On such file systems, passing\nnon-UTF-8 encoded Buffers to <code>fs</code> functions will not work as expected.</p>\n<h2>Class: fs.FSWatcher<span><a class=\"mark\" href=\"#fs_class_fs_fswatcher\" id=\"fs_class_fs_fswatcher\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Objects returned from <code>fs.watch()</code> are of this type.</p>\n<h3>Event: &#39;change&#39;<span><a class=\"mark\" href=\"#fs_event_change\" id=\"fs_event_change\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><ul>\n<li><code>event</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The type of fs change</li>\n<li><code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The filename that changed (if relevant/available)</li>\n</ul>\n<p>Emitted when something changes in a watched directory or file.\nSee more details in <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a>.</p>\n<p>The <code>filename</code> argument may not be provided depending on operating system\nsupport. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if\n<code>fs.watch()</code> is called with it&#39;s <code>encoding</code> option set to <code>&#39;buffer&#39;</code>, otherwise\n<code>filename</code> will be a string.</p>\n<pre><code class=\"lang-js\">fs.watch(&#39;./tmp&#39;, {encoding: &#39;buffer&#39;}, (event, filename) =&gt; {\n  if (filename)\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n});\n</code></pre>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#fs_event_error\" id=\"fs_event_error\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>Emitted when an error occurs.</p>\n<h3>watcher.close()<span><a class=\"mark\" href=\"#fs_watcher_close\" id=\"fs_watcher_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Stop watching for changes on the given <code>fs.FSWatcher</code>.</p>\n<h2>Class: fs.ReadStream<span><a class=\"mark\" href=\"#fs_class_fs_readstream\" id=\"fs_class_fs_readstream\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p><code>ReadStream</code> is a <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a>.</p>\n<h3>Event: &#39;open&#39;<span><a class=\"mark\" href=\"#fs_event_open\" id=\"fs_event_open\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span> Integer file descriptor used by the ReadStream.</li>\n</ul>\n<p>Emitted when the ReadStream&#39;s file is opened.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#fs_event_close\" id=\"fs_event_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p>Emitted when the <code>ReadStream</code>&#39;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.</p>\n<h3>readStream.path<span><a class=\"mark\" href=\"#fs_readstream_path\" id=\"fs_readstream_path\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p>The path to the file the stream is reading from as specified in the first\nargument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then\n<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>readStream.path</code> will be a <code>Buffer</code>.</p>\n<h2>Class: fs.Stats<span><a class=\"mark\" href=\"#fs_class_fs_stats\" id=\"fs_class_fs_stats\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><p>Objects returned from <a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a>, <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a> and <a href=\"#fs_fs_fstat_fd_callback\"><code>fs.fstat()</code></a> and their\nsynchronous counterparts are of this type.</p>\n<ul>\n<li><code>stats.isFile()</code></li>\n<li><code>stats.isDirectory()</code></li>\n<li><code>stats.isBlockDevice()</code></li>\n<li><code>stats.isCharacterDevice()</code></li>\n<li><code>stats.isSymbolicLink()</code> (only valid with <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a>)</li>\n<li><code>stats.isFIFO()</code></li>\n<li><code>stats.isSocket()</code></li>\n</ul>\n<p>For a regular file <a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect(stats)</code></a> would return a string very\nsimilar to this:</p>\n<pre><code class=\"lang-js\">{\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\n}\n</code></pre>\n<p>Please note that <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> are\ninstances of <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object and to compare the values of\nthese objects you should use appropriate methods. For most general\nuses <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime\"><code>getTime()</code></a> will return the number of\nmilliseconds elapsed since <em>1 January 1970 00:00:00 UTC</em> and this\ninteger should be sufficient for any comparison, however there are\nadditional methods which can be used for displaying fuzzy information.\nMore details can be found in the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">MDN JavaScript Reference</a>\npage.</p>\n<h3>Stat Time Values<span><a class=\"mark\" href=\"#fs_stat_time_values\" id=\"fs_stat_time_values\">#</a></span></h3>\n<p>The times in the stat object have the following semantics:</p>\n<ul>\n<li><code>atime</code> &quot;Access Time&quot; - Time when file data last accessed.  Changed\nby the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>read(2)</code> system calls.</li>\n<li><code>mtime</code> &quot;Modified Time&quot; - Time when file data last modified.\nChanged by the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>write(2)</code> system calls.</li>\n<li><code>ctime</code> &quot;Change Time&quot; - Time when file status was last changed\n(inode data modification).  Changed by the <code>chmod(2)</code>, <code>chown(2)</code>,\n<code>link(2)</code>, <code>mknod(2)</code>, <code>rename(2)</code>, <code>unlink(2)</code>, <code>utimes(2)</code>,\n<code>read(2)</code>, and <code>write(2)</code> system calls.</li>\n<li><code>birthtime</code> &quot;Birth Time&quot; -  Time of file creation. Set once when the\nfile is created.  On filesystems where birthtime is not available,\nthis field may instead hold either the <code>ctime</code> or\n<code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>). Note that this\nvalue may be greater than <code>atime</code> or <code>mtime</code> in this case. On Darwin\nand other FreeBSD variants, also set if the <code>atime</code> is explicitly\nset to an earlier value than the current <code>birthtime</code> using the\n<code>utimes(2)</code> system call.</li>\n</ul>\n<p>Prior to Node v0.12, the <code>ctime</code> held the <code>birthtime</code> on Windows\nsystems.  Note that as of v0.12, <code>ctime</code> is not &quot;creation time&quot;, and\non Unix systems, it never was.</p>\n<h2>Class: fs.WriteStream<span><a class=\"mark\" href=\"#fs_class_fs_writestream\" id=\"fs_class_fs_writestream\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p><code>WriteStream</code> is a <a href=\"stream.html#stream_class_stream_writable\">Writable Stream</a>.</p>\n<h3>Event: &#39;open&#39;<span><a class=\"mark\" href=\"#fs_event_open_1\" id=\"fs_event_open_1\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span> Integer file descriptor used by the WriteStream.</li>\n</ul>\n<p>Emitted when the WriteStream&#39;s file is opened.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#fs_event_close_1\" id=\"fs_event_close_1\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p>Emitted when the <code>WriteStream</code>&#39;s underlying file descriptor has been closed\nusing the <code>fs.close()</code> method.</p>\n<h3>writeStream.bytesWritten<span><a class=\"mark\" href=\"#fs_writestream_byteswritten\" id=\"fs_writestream_byteswritten\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.7</span>\n</div><p>The number of bytes written so far. Does not include data that is still queued\nfor writing.</p>\n<h3>writeStream.path<span><a class=\"mark\" href=\"#fs_writestream_path\" id=\"fs_writestream_path\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><p>The path to the file the stream is writing to as specified in the first\nargument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then\n<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>writeStream.path</code> will be a <code>Buffer</code>.</p>\n<h2>fs.access(path[, mode], callback)<span><a class=\"mark\" href=\"#fs_fs_access_path_mode_callback\" id=\"fs_fs_access_path_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Tests a user&#39;s permissions for the file specified by <code>path</code>. <code>mode</code> is an\noptional integer that specifies the accessibility checks to be performed. The\nfollowing constants define the possible values of <code>mode</code>. It is possible to\ncreate a mask consisting of the bitwise OR of two or more values.</p>\n<ul>\n<li><code>fs.F_OK</code> - File is visible to the calling process. This is useful for\ndetermining if a file exists, but says nothing about <code>rwx</code> permissions.\nDefault if no <code>mode</code> is specified.</li>\n<li><code>fs.R_OK</code> - File can be read by the calling process.</li>\n<li><code>fs.W_OK</code> - File can be written by the calling process.</li>\n<li><code>fs.X_OK</code> - File can be executed by the calling process. This has no effect\non Windows (will behave like <code>fs.F_OK</code>).</li>\n</ul>\n<p>The final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be populated. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.</p>\n<pre><code class=\"lang-js\">fs.access(&#39;/etc/passwd&#39;, fs.R_OK | fs.W_OK, (err) =&gt; {\n  console.log(err ? &#39;no access!&#39; : &#39;can read/write&#39;);\n});\n</code></pre>\n<h2>fs.accessSync(path[, mode])<span><a class=\"mark\" href=\"#fs_fs_accesssync_path_mode\" id=\"fs_fs_accesssync_path_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.93</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>. This throws if any accessibility checks\nfail, and does nothing otherwise.</p>\n<h2>fs.appendFile(file, data[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_appendfile_file_data_options_callback\" id=\"fs_fs_appendfile_file_data_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.7</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> filename or file descriptor</li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span> default = <code>0o666</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;a&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronously append data to a file, creating the file if it does not yet exist.\n<code>data</code> can be a string or a buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to have been opened for appending.</p>\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\n<h2>fs.appendFileSync(file, data[, options])<span><a class=\"mark\" href=\"#fs_fs_appendfilesync_file_data_options\" id=\"fs_fs_appendfilesync_file_data_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.7</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> filename or file descriptor</li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span> default = <code>0o666</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;a&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>The synchronous version of <a href=\"fs.html#fs_fs_appendfile_file_data_options_callback\"><code>fs.appendFile()</code></a>. Returns <code>undefined</code>.</p>\n<h2>fs.chmod(path, mode, callback)<span><a class=\"mark\" href=\"#fs_fs_chmod_path_mode_callback\" id=\"fs_fs_chmod_path_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.30</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.chmodSync(path, mode)<span><a class=\"mark\" href=\"#fs_fs_chmodsync_path_mode\" id=\"fs_fs_chmodsync_path_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.7</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.chown(path, uid, gid, callback)<span><a class=\"mark\" href=\"#fs_fs_chown_path_uid_gid_callback\" id=\"fs_fs_chown_path_uid_gid_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.97</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.chownSync(path, uid, gid)<span><a class=\"mark\" href=\"#fs_fs_chownsync_path_uid_gid\" id=\"fs_fs_chownsync_path_uid_gid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.97</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.close(fd, callback)<span><a class=\"mark\" href=\"#fs_fs_close_fd_callback\" id=\"fs_fs_close_fd_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/close.2.html\">close(2)</a>.  No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.closeSync(fd)<span><a class=\"mark\" href=\"#fs_fs_closesync_fd\" id=\"fs_fs_closesync_fd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/close.2.html\">close(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.createReadStream(path[, options])<span><a class=\"mark\" href=\"#fs_fs_createreadstream_path_options\" id=\"fs_fs_createreadstream_path_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>autoClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n<li><code>start</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>end</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n</li>\n</ul>\n<p>Returns a new <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a> object. (See <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a>).</p>\n<p>Be aware that, unlike the default value set for <code>highWaterMark</code> on a\nreadable stream (16 kb), the stream returned by this method has a\ndefault value of 64 kb for the same parameter.</p>\n<p><code>options</code> is an object or string with the following defaults:</p>\n<pre><code class=\"lang-js\">{\n  flags: &#39;r&#39;,\n  encoding: null,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre>\n<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\nthe file instead of the entire file.  Both <code>start</code> and <code>end</code> are inclusive and\nstart at 0. The <code>encoding</code> can be any one of those accepted by <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be emitted.\nNote that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error.  It is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.  If <code>autoClose</code> is set to true (default\nbehavior), on <code>error</code> or <code>end</code> the file descriptor will be closed\nautomatically.</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the\nfile was created.</p>\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>\n<pre><code class=\"lang-js\">fs.createReadStream(&#39;sample.txt&#39;, {start: 90, end: 99});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<h2>fs.createWriteStream(path[, options])<span><a class=\"mark\" href=\"#fs_fs_createwritestream_path_options\" id=\"fs_fs_createwritestream_path_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>defaultEncoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>autoClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n<li><code>start</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n</li>\n</ul>\n<p>Returns a new <a href=\"#fs_class_fs_writestream\"><code>WriteStream</code></a> object. (See <a href=\"stream.html#stream_class_stream_writable\">Writable Stream</a>).</p>\n<p><code>options</code> is an object or string with the following defaults:</p>\n<pre><code class=\"lang-js\">{\n  flags: &#39;w&#39;,\n  defaultEncoding: &#39;utf8&#39;,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n}\n</code></pre>\n<p><code>options</code> may also include a <code>start</code> option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\ndefault mode <code>w</code>. The <code>defaultEncoding</code> can be any one of those accepted by <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>autoClose</code> is set to true (default behavior) on <code>error</code> or <code>end</code>\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is your responsibility to close it and make sure\nthere&#39;s no file descriptor leak.</p>\n<p>Like <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a>, if <code>fd</code> is specified, <code>WriteStream</code> will ignore the\n<code>path</code> argument and will use the specified file descriptor. This means that no\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\n<code>fd</code>s should be passed to <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<h2>fs.exists(path, callback)<span><a class=\"mark\" href=\"#fs_fs_exists_path_callback\" id=\"fs_fs_exists_path_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n<span>Deprecated since: v1.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a> or <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a> instead.</pre><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false.  Example:</p>\n<pre><code class=\"lang-js\">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n</code></pre>\n<p><code>fs.exists()</code> should not be used to check if a file exists before calling\n<code>fs.open()</code>. Doing so introduces a race condition since other processes may\nchange the file&#39;s state between the two calls. Instead, user code should\ncall <code>fs.open()</code> directly and handle the error raised if the file is\nnon-existent.</p>\n<h2>fs.existsSync(path)<span><a class=\"mark\" href=\"#fs_fs_existssync_path\" id=\"fs_fs_existssync_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n<span>Deprecated since: v1.0.0 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#fs_fs_statsync_path\"><code>fs.statSync()</code></a> or <a href=\"#fs_fs_accesssync_path_mode\"><code>fs.accessSync()</code></a> instead.</pre><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous version of <a href=\"fs.html#fs_fs_exists_path_callback\"><code>fs.exists()</code></a>.\nReturns <code>true</code> if the file exists, <code>false</code> otherwise.</p>\n<h2>fs.fchmod(fd, mode, callback)<span><a class=\"mark\" href=\"#fs_fs_fchmod_fd_mode_callback\" id=\"fs_fs_fchmod_fd_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.7</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fchmod.2.html\">fchmod(2)</a>. No arguments other than a possible exception\nare given to the completion callback.</p>\n<h2>fs.fchmodSync(fd, mode)<span><a class=\"mark\" href=\"#fs_fs_fchmodsync_fd_mode\" id=\"fs_fs_fchmodsync_fd_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.7</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fchmod.2.html\">fchmod(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.fchown(fd, uid, gid, callback)<span><a class=\"mark\" href=\"#fs_fs_fchown_fd_uid_gid_callback\" id=\"fs_fs_fchown_fd_uid_gid_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.7</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fchown.2.html\">fchown(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.fchownSync(fd, uid, gid)<span><a class=\"mark\" href=\"#fs_fs_fchownsync_fd_uid_gid\" id=\"fs_fs_fchownsync_fd_uid_gid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.7</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fchown.2.html\">fchown(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.fdatasync(fd, callback)<span><a class=\"mark\" href=\"#fs_fs_fdatasync_fd_callback\" id=\"fs_fs_fdatasync_fd_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.96</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fdatasync.2.html\">fdatasync(2)</a>. No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<h2>fs.fdatasyncSync(fd)<span><a class=\"mark\" href=\"#fs_fs_fdatasyncsync_fd\" id=\"fs_fs_fdatasyncsync_fd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.96</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fdatasync.2.html\">fdatasync(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.fstat(fd, callback)<span><a class=\"mark\" href=\"#fs_fs_fstat_fd_callback\" id=\"fs_fs_fstat_fd_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.95</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fstat.2.html\">fstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href=\"fs.html#fs_fs_stat_path_callback\"><code>stat()</code></a>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\n<h2>fs.fstatSync(fd)<span><a class=\"mark\" href=\"#fs_fs_fstatsync_fd\" id=\"fs_fs_fstatsync_fd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.95</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fstat.2.html\">fstat(2)</a>. Returns an instance of <code>fs.Stats</code>.</p>\n<h2>fs.fsync(fd, callback)<span><a class=\"mark\" href=\"#fs_fs_fsync_fd_callback\" id=\"fs_fs_fsync_fd_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.96</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\">fsync(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.fsyncSync(fd)<span><a class=\"mark\" href=\"#fs_fs_fsyncsync_fd\" id=\"fs_fs_fsyncsync_fd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.96</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\">fsync(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.ftruncate(fd, len, callback)<span><a class=\"mark\" href=\"#fs_fs_ftruncate_fd_len_callback\" id=\"fs_fs_ftruncate_fd_len_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.6</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>len</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/ftruncate.2.html\">ftruncate(2)</a>. No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<h2>fs.ftruncateSync(fd, len)<span><a class=\"mark\" href=\"#fs_fs_ftruncatesync_fd_len\" id=\"fs_fs_ftruncatesync_fd_len\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.6</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>len</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/ftruncate.2.html\">ftruncate(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.futimes(fd, atime, mtime, callback)<span><a class=\"mark\" href=\"#fs_fs_futimes_fd_atime_mtime_callback\" id=\"fs_fs_futimes_fd_atime_mtime_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.2</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>atime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mtime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Change the file timestamps of a file referenced by the supplied file\ndescriptor.</p>\n<h2>fs.futimesSync(fd, atime, mtime)<span><a class=\"mark\" href=\"#fs_fs_futimessync_fd_atime_mtime\" id=\"fs_fs_futimessync_fd_atime_mtime\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.2</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>atime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mtime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>\n<h2>fs.lchmod(path, mode, callback)<span><a class=\"mark\" href=\"#fs_fs_lchmod_path_mode_callback\" id=\"fs_fs_lchmod_path_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Deprecated since: v0.4.7 </span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2\">lchmod(2)</a>. No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>Only available on Mac OS X.</p>\n<h2>fs.lchmodSync(path, mode)<span><a class=\"mark\" href=\"#fs_fs_lchmodsync_path_mode\" id=\"fs_fs_lchmodsync_path_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Deprecated since: v0.4.7 </span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2\">lchmod(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.lchown(path, uid, gid, callback)<span><a class=\"mark\" href=\"#fs_fs_lchown_path_uid_gid_callback\" id=\"fs_fs_lchown_path_uid_gid_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Deprecated since: v0.4.7 </span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.lchownSync(path, uid, gid)<span><a class=\"mark\" href=\"#fs_fs_lchownsync_path_uid_gid\" id=\"fs_fs_lchownsync_path_uid_gid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Deprecated since: v0.4.7 </span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>uid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>gid</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.link(srcpath, dstpath, callback)<span><a class=\"mark\" href=\"#fs_fs_link_srcpath_dstpath_callback\" id=\"fs_fs_link_srcpath_dstpath_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>srcpath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>dstpath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/link.2.html\">link(2)</a>. No arguments other than a possible exception are given to\nthe completion callback.</p>\n<h2>fs.linkSync(srcpath, dstpath)<span><a class=\"mark\" href=\"#fs_fs_linksync_srcpath_dstpath\" id=\"fs_fs_linksync_srcpath_dstpath\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>srcpath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>dstpath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/link.2.html\">link(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.lstat(path, callback)<span><a class=\"mark\" href=\"#fs_fs_lstat_path_callback\" id=\"fs_fs_lstat_path_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.30</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/lstat.2.html\">lstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.</p>\n<h2>fs.lstatSync(path)<span><a class=\"mark\" href=\"#fs_fs_lstatsync_path\" id=\"fs_fs_lstatsync_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.30</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/lstat.2.html\">lstat(2)</a>. Returns an instance of <code>fs.Stats</code>.</p>\n<h2>fs.mkdir(path[, mode], callback)<span><a class=\"mark\" href=\"#fs_fs_mkdir_path_mode_callback\" id=\"fs_fs_mkdir_path_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.8</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/mkdir.2.html\">mkdir(2)</a>. No arguments other than a possible exception are given\nto the completion callback. <code>mode</code> defaults to <code>0o777</code>.</p>\n<h2>fs.mkdirSync(path[, mode])<span><a class=\"mark\" href=\"#fs_fs_mkdirsync_path_mode\" id=\"fs_fs_mkdirsync_path_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/mkdir.2.html\">mkdir(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.mkdtemp(prefix, callback)<span><a class=\"mark\" href=\"#fs_fs_mkdtemp_prefix_callback\" id=\"fs_fs_mkdtemp_prefix_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><p>Creates a unique temporary directory.</p>\n<p>Generates six random characters to be appended behind a required\n<code>prefix</code> to create a unique temporary directory.</p>\n<p>The created folder path is passed as a string to the callback&#39;s second\nparameter.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.mkdtemp(&#39;/tmp/foo-&#39;, (err, folder) =&gt; {\n  console.log(folder);\n    // Prints: /tmp/foo-itXde2\n});\n</code></pre>\n<p><em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>,\nthe <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n<pre><code class=\"lang-js\">// The parent directory for the new temporary directory\nconst tmpDir = &#39;/tmp&#39;;\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n    // Will print something similar to `/tmpabc123`.\n    // Note that a new temporary directory is created\n    // at the file system root rather than *within*\n    // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst path = require(&#39;path&#39;);\nfs.mkdtemp(tmpDir + path.sep, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n    // Will print something similar to `/tmp/abc123`.\n    // A new temporary directory is created within\n    // the /tmp directory.\n});\n</code></pre>\n<h2>fs.mkdtempSync(prefix)<span><a class=\"mark\" href=\"#fs_fs_mkdtempsync_prefix\" id=\"fs_fs_mkdtempsync_prefix\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v5.10.0</span>\n</div><p>The synchronous version of <a href=\"#fs_fs_mkdtemp_prefix_callback\"><code>fs.mkdtemp()</code></a>. Returns the created\nfolder path.</p>\n<h2>fs.open(path, flags[, mode], callback)<span><a class=\"mark\" href=\"#fs_fs_open_path_flags_mode_callback\" id=\"fs_fs_open_path_flags_mode_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous file open. See <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>. <code>flags</code> can be:</p>\n<ul>\n<li><p><code>&#39;r&#39;</code> - Open file for reading.\nAn exception occurs if the file does not exist.</p>\n</li>\n<li><p><code>&#39;r+&#39;</code> - Open file for reading and writing.\nAn exception occurs if the file does not exist.</p>\n</li>\n<li><p><code>&#39;rs+&#39;</code> - Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.</p>\n<p>This is primarily useful for opening files on NFS mounts as it allows you to\nskip the potentially stale local cache. It has a very real impact on I/O\nperformance so don&#39;t use this flag unless you need it.</p>\n<p>Note that this doesn&#39;t turn <code>fs.open()</code> into a synchronous blocking call.\nIf that&#39;s what you want then you should be using <code>fs.openSync()</code></p>\n</li>\n<li><p><code>&#39;w&#39;</code> - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).</p>\n</li>\n<li><p><code>&#39;wx&#39;</code> - Like <code>&#39;w&#39;</code> but fails if <code>path</code> exists.</p>\n</li>\n<li><p><code>&#39;w+&#39;</code> - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).</p>\n</li>\n<li><p><code>&#39;wx+&#39;</code> - Like <code>&#39;w+&#39;</code> but fails if <code>path</code> exists.</p>\n</li>\n<li><p><code>&#39;a&#39;</code> - Open file for appending.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;ax&#39;</code> - Like <code>&#39;a&#39;</code> but fails if <code>path</code> exists.</p>\n</li>\n<li><p><code>&#39;a+&#39;</code> - Open file for reading and appending.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;ax+&#39;</code> - Like <code>&#39;a+&#39;</code> but fails if <code>path</code> exists.</p>\n</li>\n</ul>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated. It defaults to <code>0666</code>, readable and writable.</p>\n<p>The callback gets two arguments <code>(err, fd)</code>.</p>\n<p>The exclusive flag <code>&#39;x&#39;</code> (<code>O_EXCL</code> flag in <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>) ensures that <code>path</code> is newly\ncreated. On POSIX systems, <code>path</code> is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network file\nsystems.</p>\n<p><code>flags</code> can also be a number as documented by <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>; commonly used constants\nare available from <code>require(&#39;constants&#39;)</code>.  On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>,\nor <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by CreateFileW.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n<p><em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such,\nopening a directory on OS X and Linux with the <code>&#39;a+&#39;</code> flag - see example below -\nwill return an error. In contrast, on Windows and FreeBSD, a file descriptor\nwill be returned.</em></p>\n<pre><code class=\"lang-js\">// OS X and Linux\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n})\n\n// Windows and FreeBSD\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n})\n</code></pre>\n<h2>fs.openSync(path, flags[, mode])<span><a class=\"mark\" href=\"#fs_fs_opensync_path_flags_mode\" id=\"fs_fs_opensync_path_flags_mode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>. Returns an integer representing the file\ndescriptor.</p>\n<h2>fs.read(fd, buffer, offset, length, position, callback)<span><a class=\"mark\" href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\" id=\"fs_fs_read_fd_buffer_offset_length_position_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>buffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>offset</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>length</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Read data from the file specified by <code>fd</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an integer specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position.</p>\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\n<h2>fs.readdir(path[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_readdir_path_options_callback\" id=\"fs_fs_readdir_path_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.8</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man3/readdir.3.html\">readdir(3)</a>.  Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n<h2>fs.readdirSync(path[, options])<span><a class=\"mark\" href=\"#fs_fs_readdirsync_path_options\" id=\"fs_fs_readdirsync_path_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man3/readdir.3.html\">readdir(3)</a>. Returns an array of filenames excluding <code>&#39;.&#39;</code> and\n<code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n<h2>fs.readFile(file[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_readfile_file_options_callback\" id=\"fs_fs_readfile_file_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.29</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Integer&gt;</span> filename or file descriptor</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>null</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;r&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronously reads the entire contents of a file. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\n<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\ncontents of the file.</p>\n<p>If no encoding is specified, then the raw buffer is returned.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to support reading.</p>\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\n<h2>fs.readFileSync(file[, options])<span><a class=\"mark\" href=\"#fs_fs_readfilesync_file_options\" id=\"fs_fs_readfilesync_file_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.8</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Integer&gt;</span> filename or file descriptor</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>null</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;r&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_readfile_file_options_callback\"><code>fs.readFile</code></a>. Returns the contents of the <code>file</code>.</p>\n<p>If the <code>encoding</code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.</p>\n<h2>fs.readlink(path[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_readlink_path_options_callback\" id=\"fs_fs_readlink_path_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/readlink.2.html\">readlink(2)</a>. The callback gets two arguments <code>(err,\nlinkString)</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n<h2>fs.readlinkSync(path[, options])<span><a class=\"mark\" href=\"#fs_fs_readlinksync_path_options\" id=\"fs_fs_readlinksync_path_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/readlink.2.html\">readlink(2)</a>. Returns the symbolic link&#39;s string value.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n<h2>fs.readSync(fd, buffer, offset, length, position)<span><a class=\"mark\" href=\"#fs_fs_readsync_fd_buffer_offset_length_position\" id=\"fs_fs_readsync_fd_buffer_offset_length_position\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>buffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>offset</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>length</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p>\n<h2>fs.realpath(path[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_realpath_path_options_callback\" id=\"fs_fs_realpath_path_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man3/realpath.3.html\">realpath(3)</a>. The <code>callback</code> gets two arguments <code>(err,\nresolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<h2>fs.realpathSync(path[, options])<span><a class=\"mark\" href=\"#fs_fs_realpathsync_path_options\" id=\"fs_fs_realpathsync_path_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>;</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man3/realpath.3.html\">realpath(3)</a>. Returns the resolved path.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<h2>fs.rename(oldPath, newPath, callback)<span><a class=\"mark\" href=\"#fs_fs_rename_oldpath_newpath_callback\" id=\"fs_fs_rename_oldpath_newpath_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>oldPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.renameSync(oldPath, newPath)<span><a class=\"mark\" href=\"#fs_fs_renamesync_oldpath_newpath\" id=\"fs_fs_renamesync_oldpath_newpath\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>oldPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.rmdir(path, callback)<span><a class=\"mark\" href=\"#fs_fs_rmdir_path_callback\" id=\"fs_fs_rmdir_path_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/rmdir.2.html\">rmdir(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.rmdirSync(path)<span><a class=\"mark\" href=\"#fs_fs_rmdirsync_path\" id=\"fs_fs_rmdirsync_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/rmdir.2.html\">rmdir(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.stat(path, callback)<span><a class=\"mark\" href=\"#fs_fs_stat_path_callback\" id=\"fs_fs_stat_path_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/stat.2.html\">stat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object.  See the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> section for more\ninformation.</p>\n<h2>fs.statSync(path)<span><a class=\"mark\" href=\"#fs_fs_statsync_path\" id=\"fs_fs_statsync_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/stat.2.html\">stat(2)</a>. Returns an instance of <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a>.</p>\n<h2>fs.symlink(target, path[, type], callback)<span><a class=\"mark\" href=\"#fs_fs_symlink_target_path_type_callback\" id=\"fs_fs_symlink_target_path_type_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>target</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/symlink.2.html\">symlink(2)</a>. No arguments other than a possible exception are given\nto the completion callback.\nThe <code>type</code> argument can be set to <code>&#39;dir&#39;</code>, <code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> (default\nis <code>&#39;file&#39;</code>) and is only available on Windows (ignored on other platforms).\nNote that Windows junction points require the destination path to be absolute.  When using\n<code>&#39;junction&#39;</code>, the <code>target</code> argument will automatically be normalized to absolute path.</p>\n<p>Here is an example below:</p>\n<pre><code class=\"lang-js\">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;);\n</code></pre>\n<p>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</p>\n<h2>fs.symlinkSync(target, path[, type])<span><a class=\"mark\" href=\"#fs_fs_symlinksync_target_path_type\" id=\"fs_fs_symlinksync_target_path_type\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>target</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/symlink.2.html\">symlink(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.truncate(path, len, callback)<span><a class=\"mark\" href=\"#fs_fs_truncate_path_len_callback\" id=\"fs_fs_truncate_path_len_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.6</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>len</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/truncate.2.html\">truncate(2)</a>. No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p>\n<h2>fs.truncateSync(path, len)<span><a class=\"mark\" href=\"#fs_fs_truncatesync_path_len\" id=\"fs_fs_truncatesync_path_len\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.8.6</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>len</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/truncate.2.html\">truncate(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.unlink(path, callback)<span><a class=\"mark\" href=\"#fs_fs_unlink_path_callback\" id=\"fs_fs_unlink_path_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>. No arguments other than a possible exception are given\nto the completion callback.</p>\n<h2>fs.unlinkSync(path)<span><a class=\"mark\" href=\"#fs_fs_unlinksync_path\" id=\"fs_fs_unlinksync_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>. Returns <code>undefined</code>.</p>\n<h2>fs.unwatchFile(filename[, listener])<span><a class=\"mark\" href=\"#fs_fs_unwatchfile_filename_listener\" id=\"fs_fs_unwatchfile_filename_listener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed and you\nhave effectively stopped watching <code>filename</code>.</p>\n<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\nno-op, not an error.</p>\n<p><em>Note: <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>.\n<code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>\nwhen possible.</em></p>\n<h2>fs.utimes(path, atime, mtime, callback)<span><a class=\"mark\" href=\"#fs_fs_utimes_path_atime_mtime_callback\" id=\"fs_fs_utimes_path_atime_mtime_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>atime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mtime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Change file timestamps of the file referenced by the supplied path.</p>\n<p>Note: the arguments <code>atime</code> and <code>mtime</code> of the following related functions does\nfollow the below rules:</p>\n<ul>\n<li>If the value is a numberable string like <code>&#39;123456789&#39;</code>, the value would get\nconverted to corresponding number.</li>\n<li>If the value is <code>NaN</code> or <code>Infinity</code>, the value would get converted to\n<code>Date.now()</code>.</li>\n</ul>\n<h2>fs.utimesSync(path, atime, mtime)<span><a class=\"mark\" href=\"#fs_fs_utimessync_path_atime_mtime\" id=\"fs_fs_utimessync_path_atime_mtime\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.4.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>atime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>mtime</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p>\n<h2>fs.watch(filename[, options][, listener])<span><a class=\"mark\" href=\"#fs_fs_watch_filename_options_listener\" id=\"fs_fs_watch_filename_options_listener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.10</span>\n</div><ul>\n<li><code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>persistent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Indicates whether the process should continue to run\nas long as files are being watched. default = <code>true</code></li>\n<li><code>recursive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Indicates whether all subdirectories should be\nwatched, or only the current directory. The applies when a directory is\nspecified, and only on supported platforms (See <a href=\"#fs_caveats\">Caveats</a>). default =\n<code>false</code></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Specifies the character encoding to be used for the\n filename passed to the listener. default = <code>&#39;utf8&#39;</code></li>\n</ul>\n</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.  The returned object is a <a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>.</p>\n<p>The second argument is optional. If <code>options</code> is provided as a string, it\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>\n<p>The listener callback gets two arguments <code>(event, filename)</code>.  <code>event</code> is either\n<code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file which triggered\nthe event.</p>\n<h3>Caveats<span><a class=\"mark\" href=\"#fs_caveats\" id=\"fs_caveats\">#</a></span></h3>\n<!--type=misc-->\n<p>The <code>fs.watch</code> API is not 100% consistent across platforms, and is\nunavailable in some situations.</p>\n<p>The recursive option is only supported on OS X and Windows.</p>\n<h4>Availability<span><a class=\"mark\" href=\"#fs_availability\" id=\"fs_availability\">#</a></span></h4>\n<!--type=misc-->\n<p>This feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.</p>\n<ul>\n<li>On Linux systems, this uses <a href=\"http://man7.org/linux/man-pages/man7/inotify.7.html\"><code>inotify</code></a></li>\n<li>On BSD systems, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a></li>\n<li>On OS X, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a> for files and <a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1\"><code>FSEvents</code></a> for directories.</li>\n<li>On SunOS systems (including Solaris and SmartOS), this uses <a href=\"http://illumos.org/man/port_create\"><code>event ports</code></a>.</li>\n<li>On Windows systems, this feature depends on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465%28v=vs.85%29.aspx\"><code>ReadDirectoryChangesW</code></a>.</li>\n<li>On Aix systems, this feature depends on <a href=\"https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/\"><code>AHAFS</code></a>, which must be enabled.</li>\n</ul>\n<p>If the underlying functionality is not available for some reason, then\n<code>fs.watch</code> will not be able to function. For example, watching files or\ndirectories can be unreliable, and in some cases impossible, on network file\nsystems (NFS, SMB, etc), or host file systems when using virtualization software\nsuch as Vagrant, Docker, etc.</p>\n<p>You can still use <code>fs.watchFile</code>, which uses stat polling, but it is slower and\nless reliable.</p>\n<h4>Inodes<span><a class=\"mark\" href=\"#fs_inodes\" id=\"fs_inodes\">#</a></span></h4>\n<!--type=misc-->\n<p>On Linux and OS X systems, <code>fs.watch()</code> resolves the path to an <a href=\"http://www.linux.org/threads/intro-to-inodes.4130\">inode</a> and\nwatches the inode. If the watched path is deleted and recreated, it is assigned\na new inode. The watch will emit an event for the delete but will continue\nwatching the <em>original</em> inode. Events for the new inode will not be emitted.\nThis is expected behavior.</p>\n<h4>Filename Argument<span><a class=\"mark\" href=\"#fs_filename_argument\" id=\"fs_filename_argument\">#</a></span></h4>\n<!--type=misc-->\n<p>Providing <code>filename</code> argument in the callback is only supported on Linux and\nWindows.  Even on supported platforms, <code>filename</code> is not always guaranteed to\nbe provided. Therefore, don&#39;t assume that <code>filename</code> argument is always\nprovided in the callback, and have some fallback logic if it is null.</p>\n<pre><code class=\"lang-js\">fs.watch(&#39;somedir&#39;, (event, filename) =&gt; {\n  console.log(`event is: ${event}`);\n  if (filename) {\n    console.log(`filename provided: ${filename}`);\n  } else {\n    console.log(&#39;filename not provided&#39;);\n  }\n});\n</code></pre>\n<h2>fs.watchFile(filename[, options], listener)<span><a class=\"mark\" href=\"#fs_fs_watchfile_filename_options_listener\" id=\"fs_fs_watchfile_filename_options_listener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>persistent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n<li><code>interval</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.</p>\n<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\nwhether the process should continue to run as long as files are being watched.\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\ntarget should be polled in milliseconds. The default is\n<code>{ persistent: true, interval: 5007 }</code>.</p>\n<p>The <code>listener</code> gets two arguments the current stat object and the previous\nstat object:</p>\n<pre><code class=\"lang-js\">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre>\n<p>These stat objects are instances of <code>fs.Stat</code>.</p>\n<p>If you want to be notified when the file was modified, not just accessed,\nyou need to compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>\n<p><em>Note: when an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it will\n invoke the listener once, with all the fields zeroed (or, for dates, the Unix\n Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>, instead\n of zero. If the file is created later on, the listener will be called again,\n with the latest stat objects. This is a change in functionality since v0.10.</em></p>\n<p><em>Note: <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and <code>fs.unwatchFile</code>.\n<code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and <code>fs.unwatchFile</code>\nwhen possible.</em></p>\n<h2>fs.write(fd, buffer, offset, length[, position], callback)<span><a class=\"mark\" href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\" id=\"fs_fs_write_fd_buffer_offset_length_position_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.2</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>buffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>offset</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>length</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>\n<p><code>offset</code> and <code>length</code> determine the part of the buffer to be written.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.</p>\n<p>The callback will be given three arguments <code>(err, written, buffer)</code> where\n<code>written</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n<h2>fs.write(fd, data[, position[, encoding]], callback)<span><a class=\"mark\" href=\"#fs_fs_write_fd_data_position_encoding_callback\" id=\"fs_fs_write_fd_data_position_encoding_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.5</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Write <code>data</code> to the file specified by <code>fd</code>.  If <code>data</code> is not a Buffer instance\nthen the value will be coerced to a string.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\nthe current position. See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.</p>\n<p><code>encoding</code> is the expected string encoding.</p>\n<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\nbytes written is not the same as string characters. See <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\"><code>Buffer.byteLength</code></a>.</p>\n<p>Unlike when writing <code>buffer</code>, the entire string must be written. No substring\nmay be specified. This is because the byte offset of the resulting data may not\nbe the same as the string offset.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n<h2>fs.writeFile(file, data[, options], callback)<span><a class=\"mark\" href=\"#fs_fs_writefile_file_data_options_callback\" id=\"fs_fs_writefile_file_data_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.29</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Integer&gt;</span> filename or file descriptor</li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span> default = <code>0o666</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;w&#39;</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer. It defaults\nto <code>&#39;utf8&#39;</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;It\\&#39;s saved!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to support writing.</p>\n<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\n<h2>fs.writeFileSync(file, data[, options])<span><a class=\"mark\" href=\"#fs_fs_writefilesync_file_data_options\" id=\"fs_fs_writefilesync_file_data_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.29</span>\n</div><ul>\n<li><code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Integer&gt;</span> filename or file descriptor</li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> default = <code>&#39;utf8&#39;</code></li>\n<li><code>mode</code> <span class=\"type\">&lt;Integer&gt;</span> default = <code>0o666</code></li>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> default = <code>&#39;w&#39;</code></li>\n</ul>\n</li>\n</ul>\n<p>The synchronous version of <a href=\"#fs_fs_writefile_file_data_options_callback\"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p>\n<h2>fs.writeSync(fd, buffer, offset, length[, position])<span><a class=\"mark\" href=\"#fs_fs_writesync_fd_buffer_offset_length_position\" id=\"fs_fs_writesync_fd_buffer_offset_length_position\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.21</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>buffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>offset</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>length</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n</ul>\n<h2>fs.writeSync(fd, data[, position[, encoding]])<span><a class=\"mark\" href=\"#fs_fs_writesync_fd_data_position_encoding\" id=\"fs_fs_writesync_fd_data_position_encoding\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.5</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>position</code> <span class=\"type\">&lt;Integer&gt;</span></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n<!-- [end-include:fs.md] -->\n<!-- [start-include:globals.md] -->\n<h1>Global Objects<span><a class=\"mark\" href=\"#globals_global_objects\" id=\"globals_global_objects\">#</a></span></h1>\n<!-- type=misc -->\n<p>These objects are available in all modules. Some of these objects aren&#39;t\nactually in the global scope but in the module scope - this will be noted.</p>\n<p>The objects listed here are specific to Node.js. There are a number of\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">built-in objects</a> that are part of the JavaScript language itself, which are\nalso globally accessible.</p>\n<h2>Class: Buffer<span><a class=\"mark\" href=\"#globals_class_buffer\" id=\"globals_class_buffer\">#</a></span></h2>\n<!-- type=global -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Used to handle binary data. See the <a href=\"buffer.html\">buffer section</a>.</p>\n<h2>__dirname<span><a class=\"mark\" href=\"#globals_dirname\" id=\"globals_dirname\">#</a></span></h2>\n<!-- type=var -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The name of the directory that the currently executing script resides in.</p>\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code class=\"lang-js\">console.log(__dirname);\n// /Users/mjr\n</code></pre>\n<p><code>__dirname</code> isn&#39;t actually a global but rather local to each module.</p>\n<p>For instance, given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of\n<code>a</code> and there is a directory structure of:</p>\n<ul>\n<li><code>/Users/mjr/app/a.js</code></li>\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\n</ul>\n<p>References to <code>__dirname</code> within <code>b.js</code> will return\n<code>/Users/mjr/app/node_modules/b</code> while references to <code>__dirname</code> within <code>a.js</code>\nwill return <code>/Users/mjr/app</code>.</p>\n<h2>__filename<span><a class=\"mark\" href=\"#globals_filename\" id=\"globals_filename\">#</a></span></h2>\n<!-- type=var -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.</p>\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code class=\"lang-js\">console.log(__filename);\n// /Users/mjr/example.js\n</code></pre>\n<p><code>__filename</code> isn&#39;t actually a global but rather local to each module.</p>\n<h2>clearImmediate(immediateObject)<span><a class=\"mark\" href=\"#globals_clearimmediate_immediateobject\" id=\"globals_clearimmediate_immediateobject\">#</a></span></h2>\n<!--type=global-->\n<p><a href=\"timers.html#timers_clearimmediate_immediateobject\"><code>clearImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<h2>clearInterval(intervalObject)<span><a class=\"mark\" href=\"#globals_clearinterval_intervalobject\" id=\"globals_clearinterval_intervalobject\">#</a></span></h2>\n<!--type=global-->\n<p><a href=\"timers.html#timers_clearinterval_intervalobject\"><code>clearInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<h2>clearTimeout(timeoutObject)<span><a class=\"mark\" href=\"#globals_cleartimeout_timeoutobject\" id=\"globals_cleartimeout_timeoutobject\">#</a></span></h2>\n<!--type=global-->\n<p><a href=\"timers.html#timers_cleartimeout_timeoutobject\"><code>clearTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<h2>console<span><a class=\"mark\" href=\"#globals_console\" id=\"globals_console\">#</a></span></h2>\n<!-- type=global -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Used to print to stdout and stderr. See the <a href=\"console.html\"><code>console</code></a> section.</p>\n<h2>exports<span><a class=\"mark\" href=\"#globals_exports\" id=\"globals_exports\">#</a></span></h2>\n<!-- type=var -->\n<p>A reference to the <code>module.exports</code> that is shorter to type.\nSee <a href=\"modules.html\">module system documentation</a> for details on when to use <code>exports</code> and\nwhen to use <code>module.exports</code>.</p>\n<p><code>exports</code> isn&#39;t actually a global but rather local to each module.</p>\n<p>See the <a href=\"modules.html\">module system documentation</a> for more information.</p>\n<h2>global<span><a class=\"mark\" href=\"#globals_global\" id=\"globals_global\">#</a></span></h2>\n<!-- type=global -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The global namespace object.</li>\n</ul>\n<p>In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope <code>var something</code> will define a global\nvariable. In Node.js this is different. The top-level scope is not the global\nscope; <code>var something</code> inside an Node.js module will be local to that module.</p>\n<h2>module<span><a class=\"mark\" href=\"#globals_module\" id=\"globals_module\">#</a></span></h2>\n<!-- type=var -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>A reference to the current module. In particular\n<code>module.exports</code> is used for defining what a module exports and makes\navailable through <code>require()</code>.</p>\n<p><code>module</code> isn&#39;t actually a global but rather local to each module.</p>\n<p>See the <a href=\"modules.html\">module system documentation</a> for more information.</p>\n<h2>process<span><a class=\"mark\" href=\"#globals_process\" id=\"globals_process\">#</a></span></h2>\n<!-- type=global -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>The process object. See the <a href=\"process.html#process_process\"><code>process</code> object</a> section.</p>\n<h2>require()<span><a class=\"mark\" href=\"#globals_require\" id=\"globals_require\">#</a></span></h2>\n<!-- type=var -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>To require modules. See the <a href=\"modules.html#modules_modules\">Modules</a> section.  <code>require</code> isn&#39;t actually a\nglobal but rather local to each module.</p>\n<h3>require.cache<span><a class=\"mark\" href=\"#globals_require_cache\" id=\"globals_require_cache\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Modules are cached in this object when they are required. By deleting a key\nvalue from this object, the next <code>require</code> will reload the module. Note that\nthis does not apply to <a href=\"addons.html\">native addons</a>, for which reloading will result in an\nError.</p>\n<h3>require.extensions<span><a class=\"mark\" href=\"#globals_require_extensions\" id=\"globals_require_extensions\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>Instruct <code>require</code> on how to handle certain file extensions.</p>\n<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>\n<pre><code class=\"lang-js\">require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\n</code></pre>\n<p><strong>Deprecated</strong>  In the past, this list has been used to load\nnon-JavaScript modules into Node.js by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node.js program, or compiling them to\nJavaScript ahead of time.</p>\n<p>Since the Module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.</p>\n<h3>require.resolve()<span><a class=\"mark\" href=\"#globals_require_resolve\" id=\"globals_require_resolve\">#</a></span></h3>\n<p>Use the internal <code>require()</code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.</p>\n<h2>setImmediate(callback[, arg][, ...])<span><a class=\"mark\" href=\"#globals_setimmediate_callback_arg\" id=\"globals_setimmediate_callback_arg\">#</a></span></h2>\n<!-- type=global -->\n<p><a href=\"timers.html#timers_setimmediate_callback_arg\"><code>setImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<h2>setInterval(callback, delay[, arg][, ...])<span><a class=\"mark\" href=\"#globals_setinterval_callback_delay_arg\" id=\"globals_setinterval_callback_delay_arg\">#</a></span></h2>\n<!-- type=global -->\n<p><a href=\"timers.html#timers_setinterval_callback_delay_arg\"><code>setInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<h2>setTimeout(callback, delay[, arg][, ...])<span><a class=\"mark\" href=\"#globals_settimeout_callback_delay_arg\" id=\"globals_settimeout_callback_delay_arg\">#</a></span></h2>\n<!-- type=global -->\n<p><a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n<!-- [end-include:globals.md] -->\n<!-- [start-include:http.md] -->\n<h1>HTTP<span><a class=\"mark\" href=\"#http_http\" id=\"http_http\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>To use the HTTP server and client one must <code>require(&#39;http&#39;)</code>.</p>\n<p>The HTTP interfaces in Node.js are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.</p>\n<p>HTTP message headers are represented by an object like this:</p>\n<pre><code>{ &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;host&#39;: &#39;mysite.com&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }\n</code></pre><p>Keys are lowercased. Values are not modified.</p>\n<p>In order to support the full spectrum of possible HTTP applications, Node.js&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.</p>\n<p>See <a href=\"#http_message_headers\"><code>message.headers</code></a> for details on how duplicate headers are handled.</p>\n<p>The raw headers as they were received are retained in the <code>rawHeaders</code>\nproperty, which is an array of <code>[key, value, key2, value2, ...]</code>.  For\nexample, the previous message header object might have a <code>rawHeaders</code>\nlist like the following:</p>\n<pre><code>[ &#39;ConTent-Length&#39;, &#39;123456&#39;,\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\n  &#39;content-type&#39;, &#39;text/plain&#39;,\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\n  &#39;Host&#39;, &#39;mysite.com&#39;,\n  &#39;accepT&#39;, &#39;*/*&#39; ]\n</code></pre><h2>Class: http.Agent<span><a class=\"mark\" href=\"#http_class_http_agent\" id=\"http_class_http_agent\">#</a></span></h2>\n<p>The HTTP Agent is used for pooling sockets used in HTTP client\nrequests.</p>\n<p>The HTTP Agent also defaults client requests to using\nConnection:keep-alive. If no pending HTTP requests are waiting on a\nsocket to become free the socket is closed. This means that Node.js&#39;s\npool has the benefit of keep-alive when under load but still does not\nrequire developers to manually close the HTTP clients using\nKeepAlive.</p>\n<p>If you opt into using HTTP KeepAlive, you can create an Agent object\nwith that flag set to <code>true</code>.  (See the <a href=\"#http_new_agent_options\">constructor options</a>.)\nThen, the Agent will keep unused sockets in a pool for later use.  They\nwill be explicitly marked so as to not keep the Node.js process running.\nHowever, it is still a good idea to explicitly <a href=\"#net_socket_destroy\"><code>destroy()</code></a> KeepAlive\nagents when they are no longer in use, so that the Sockets will be shut\ndown.</p>\n<p>Sockets are removed from the agent&#39;s pool when the socket emits either\na <code>&#39;close&#39;</code> event or a special <code>&#39;agentRemove&#39;</code> event. This means that if\nyou intend to keep one HTTP request open for a long time and don&#39;t\nwant it to stay in the pool you can do something along the lines of:</p>\n<pre><code class=\"lang-js\">http.get(options, (res) =&gt; {\n  // Do stuff\n}).on(&#39;socket&#39;, (socket) =&gt; {\n  socket.emit(&#39;agentRemove&#39;);\n});\n</code></pre>\n<p>Alternatively, you could just opt out of pooling entirely using\n<code>agent:false</code>:</p>\n<pre><code class=\"lang-js\">http.get({\n  hostname: &#39;localhost&#39;,\n  port: 80,\n  path: &#39;/&#39;,\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n})\n</code></pre>\n<h3>new Agent(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#http_new_agent_options\" id=\"http_new_agent_options\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Set of configurable options to set on the agent.\nCan have the following fields:<ul>\n<li><code>keepAlive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Keep sockets around in a pool to be used by\nother requests in the future. Default = <code>false</code></li>\n<li><code>keepAliveMsecs</code> <span class=\"type\">&lt;Integer&gt;</span> When using HTTP KeepAlive, how often\nto send TCP KeepAlive packets over sockets being kept alive.\nDefault = <code>1000</code>.  Only relevant if <code>keepAlive</code> is set to <code>true</code>.</li>\n<li><code>maxSockets</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Maximum number of sockets to allow per\nhost.  Default = <code>Infinity</code>.</li>\n<li><code>maxFreeSockets</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Maximum number of sockets to leave open\nin a free state.  Only relevant if <code>keepAlive</code> is set to <code>true</code>.\nDefault = <code>256</code>.</li>\n</ul>\n</li>\n</ul>\n</div><p>The default <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> that is used by <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> has all\nof these values set to their respective defaults.</p>\n<p>To configure any of them, you must create your own <a href=\"http.html#http_class_http_agent\"><code>http.Agent</code></a> object.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nvar keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\n</code></pre>\n<h3>agent.createConnection(options[, callback])<span><a class=\"mark\" href=\"#http_agent_createconnection_options_callback\" id=\"http_agent_createconnection_options_callback\">#</a></span></h3>\n<p>Produces a socket/stream to be used for HTTP requests.</p>\n<p>By default, this function is the same as <a href=\"net.html#net_net_createconnection_options_connectlistener\"><code>net.createConnection()</code></a>. However,\ncustom Agents may override this method in case greater flexibility is desired.</p>\n<p>A socket/stream can be supplied in one of two ways: by returning the\nsocket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p>\n<p><code>callback</code> has a signature of <code>(err, stream)</code>.</p>\n<h3>agent.destroy()<span><a class=\"mark\" href=\"#http_agent_destroy\" id=\"http_agent_destroy\">#</a></span></h3>\n<p>Destroy any sockets that are currently in use by the agent.</p>\n<p>It is usually not necessary to do this.  However, if you are using an\nagent with KeepAlive enabled, then it is best to explicitly shut down\nthe agent when you know that it will no longer be used.  Otherwise,\nsockets may hang open for quite a long time before the server\nterminates them.</p>\n<h3>agent.freeSockets<span><a class=\"mark\" href=\"#http_agent_freesockets\" id=\"http_agent_freesockets\">#</a></span></h3>\n<p>An object which contains arrays of sockets currently awaiting use by\nthe Agent when HTTP KeepAlive is used.  Do not modify.</p>\n<h3>agent.getName(options)<span><a class=\"mark\" href=\"#http_agent_getname_options\" id=\"http_agent_getname_options\">#</a></span></h3>\n<p>Get a unique name for a set of request options, to determine whether a\nconnection can be reused.  In the http agent, this returns\n<code>host:port:localAddress</code>.  In the https agent, the name includes the\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\nsocket reusability.</p>\n<p>Options:</p>\n<ul>\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.</li>\n<li><code>port</code>: Port of remote server.</li>\n<li><code>localAddress</code>: Local interface to bind for network connections when issuing\nthe request.</li>\n</ul>\n<h3>agent.maxFreeSockets<span><a class=\"mark\" href=\"#http_agent_maxfreesockets\" id=\"http_agent_maxfreesockets\">#</a></span></h3>\n<p>By default set to 256.  For Agents supporting HTTP KeepAlive, this\nsets the maximum number of sockets that will be left open in the free\nstate.</p>\n<h3>agent.maxSockets<span><a class=\"mark\" href=\"#http_agent_maxsockets\" id=\"http_agent_maxsockets\">#</a></span></h3>\n<p>By default set to Infinity. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is either a &#39;host:port&#39; or\n&#39;host:port:localAddress&#39; combination.</p>\n<h3>agent.requests<span><a class=\"mark\" href=\"#http_agent_requests\" id=\"http_agent_requests\">#</a></span></h3>\n<p>An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.</p>\n<h3>agent.sockets<span><a class=\"mark\" href=\"#http_agent_sockets\" id=\"http_agent_sockets\">#</a></span></h3>\n<p>An object which contains arrays of sockets currently in use by the\nAgent.  Do not modify.</p>\n<h2>Class: http.ClientRequest<span><a class=\"mark\" href=\"#http_class_http_clientrequest\" id=\"http_class_http_clientrequest\">#</a></span></h2>\n<p>This object is created internally and returned from <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a>.  It\nrepresents an <em>in-progress</em> request whose header has already been queued.  The\nheader is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,\n<code>removeHeader(name)</code> API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.</p>\n<p>To get the response, add a listener for <code>&#39;response&#39;</code> to the request object.\n<code>&#39;response&#39;</code> will be emitted from the request object when the response\nheaders have been received.  The <code>&#39;response&#39;</code> event is executed with one\nargument which is an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a>.</p>\n<p>During the <code>&#39;response&#39;</code> event, one can add listeners to the\nresponse object; particularly to listen for the <code>&#39;data&#39;</code> event.</p>\n<p>If no <code>&#39;response&#39;</code> handler is added, then the response will be\nentirely discarded.  However, if you add a <code>&#39;response&#39;</code> event handler,\nthen you <strong>must</strong> consume the data from the response object, either by\ncalling <code>response.read()</code> whenever there is a <code>&#39;readable&#39;</code> event, or\nby adding a <code>&#39;data&#39;</code> handler, or by calling the <code>.resume()</code> method.\nUntil the data is consumed, the <code>&#39;end&#39;</code> event will not fire.  Also, until\nthe data is read it will consume memory that can eventually lead to a\n&#39;process out of memory&#39; error.</p>\n<p>Note: Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.</p>\n<p>The request implements the <a href=\"stream.html#stream_class_stream_writable\">Writable Stream</a> interface. This is an\n<a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p>\n<h3>Event: &#39;abort&#39;<span><a class=\"mark\" href=\"#http_event_abort\" id=\"http_event_abort\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Emitted when the request has been aborted by the client. This event is only\nemitted on the first call to <code>abort()</code>.</p>\n<h3>Event: &#39;checkExpectation&#39;<span><a class=\"mark\" href=\"#http_event_checkexpectation\" id=\"http_event_checkexpectation\">#</a></span></h3>\n<p><code>function (request, response) { }</code></p>\n<p>Emitted each time a request with an http Expect header is received, where the\nvalue is not 100-continue. If this event isn&#39;t listened for, the server will\nautomatically respond with a 417 Expectation Failed as appropriate.</p>\n<p>Note that when this event is emitted and handled, the <code>request</code> event will\nnot be emitted.</p>\n<h3>Event: &#39;connect&#39;<span><a class=\"mark\" href=\"#http_event_connect\" id=\"http_event_connect\">#</a></span></h3>\n<p><code>function (response, socket, head) { }</code></p>\n<p>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this\nevent isn&#39;t being listened for, clients receiving a <code>CONNECT</code> method will have\ntheir connections closed.</p>\n<p>A client server pair that show you how to listen for the <code>&#39;connect&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst net = require(&#39;net&#39;);\nconst url = require(&#39;url&#39;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nproxy.on(&#39;connect&#39;, (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  var srvUrl = url.parse(`http://${req.url}`);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\\r\\n&#39; +\n                    &#39;Proxy-agent: Node.js-Proxy\\r\\n&#39; +\n                    &#39;\\r\\n&#39;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    method: &#39;CONNECT&#39;,\n    path: &#39;www.google.com:80&#39;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;connect&#39;, (res, socket, head) =&gt; {\n    console.log(&#39;got connected!&#39;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&#39;GET / HTTP/1.1\\r\\n&#39; +\n                 &#39;Host: www.google.com:80\\r\\n&#39; +\n                 &#39;Connection: close\\r\\n&#39; +\n                 &#39;\\r\\n&#39;);\n    socket.on(&#39;data&#39;, (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on(&#39;end&#39;, () =&gt; {\n      proxy.close();\n    });\n  });\n});\n</code></pre>\n<h3>Event: &#39;continue&#39;<span><a class=\"mark\" href=\"#http_event_continue\" id=\"http_event_continue\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Emitted when the server sends a &#39;100 Continue&#39; HTTP response, usually because\nthe request contained &#39;Expect: 100-continue&#39;. This is an instruction that\nthe client should send the request body.</p>\n<h3>Event: &#39;response&#39;<span><a class=\"mark\" href=\"#http_event_response\" id=\"http_event_response\">#</a></span></h3>\n<p><code>function (response) { }</code></p>\n<p>Emitted when a response is received to this request. This event is emitted only\nonce. The <code>response</code> argument will be an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a>.</p>\n<h3>Event: &#39;socket&#39;<span><a class=\"mark\" href=\"#http_event_socket\" id=\"http_event_socket\">#</a></span></h3>\n<p><code>function (socket) { }</code></p>\n<p>Emitted after a socket is assigned to this request.</p>\n<h3>Event: &#39;upgrade&#39;<span><a class=\"mark\" href=\"#http_event_upgrade\" id=\"http_event_upgrade\">#</a></span></h3>\n<p><code>function (response, socket, head) { }</code></p>\n<p>Emitted each time a server responds to a request with an upgrade. If this\nevent isn&#39;t being listened for, clients receiving an upgrade header will have\ntheir connections closed.</p>\n<p>A client server pair that show you how to listen for the <code>&#39;upgrade&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\n// Create an HTTP server\nvar srv = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nsrv.on(&#39;upgrade&#39;, (req, socket, head) =&gt; {\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&#39; +\n               &#39;Upgrade: WebSocket\\r\\n&#39; +\n               &#39;Connection: Upgrade\\r\\n&#39; +\n               &#39;\\r\\n&#39;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    headers: {\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\n      &#39;Upgrade&#39;: &#39;websocket&#39;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;upgrade&#39;, (res, socket, upgradeHead) =&gt; {\n    console.log(&#39;got upgraded!&#39;);\n    socket.end();\n    process.exit(0);\n  });\n});\n</code></pre>\n<h3>request.abort()<span><a class=\"mark\" href=\"#http_request_abort\" id=\"http_request_abort\">#</a></span></h3>\n<p>Marks the request as aborting. Calling this will cause remaining data\nin the response to be dropped and the socket to be destroyed.</p>\n<h3>request.end([data][, encoding][, callback])<span><a class=\"mark\" href=\"#http_request_end_data_encoding_callback\" id=\"http_request_end_data_encoding_callback\">#</a></span></h3>\n<p>Finishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating <code>&#39;0\\r\\n\\r\\n&#39;</code>.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>request.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the request stream\nis finished.</p>\n<h3>request.flushHeaders()<span><a class=\"mark\" href=\"#http_request_flushheaders\" id=\"http_request_flushheaders\">#</a></span></h3>\n<p>Flush the request headers.</p>\n<p>For efficiency reasons, Node.js normally buffers the request headers until you\ncall <code>request.end()</code> or write the first chunk of request data.  It then tries\nhard to pack the request headers and data into a single TCP packet.</p>\n<p>That&#39;s usually what you want (it saves a TCP round-trip) but not when the first\ndata isn&#39;t sent until possibly much later.  <code>request.flushHeaders()</code> lets you bypass\nthe optimization and kickstart the request.</p>\n<h3>request.setNoDelay([noDelay])<span><a class=\"mark\" href=\"#http_request_setnodelay_nodelay\" id=\"http_request_setnodelay_nodelay\">#</a></span></h3>\n<p>Once a socket is assigned to this request and is connected\n<a href=\"net.html#net_socket_setnodelay_nodelay\"><code>socket.setNoDelay()</code></a> will be called.</p>\n<h3>request.setSocketKeepAlive([enable][, initialDelay])<span><a class=\"mark\" href=\"#http_request_setsocketkeepalive_enable_initialdelay\" id=\"http_request_setsocketkeepalive_enable_initialdelay\">#</a></span></h3>\n<p>Once a socket is assigned to this request and is connected\n<a href=\"net.html#net_socket_setkeepalive_enable_initialdelay\"><code>socket.setKeepAlive()</code></a> will be called.</p>\n<h3>request.setTimeout(timeout[, callback])<span><a class=\"mark\" href=\"#http_request_settimeout_timeout_callback\" id=\"http_request_settimeout_timeout_callback\">#</a></span></h3>\n<p>Once a socket is assigned to this request and is connected\n<a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a> will be called.</p>\n<ul>\n<li><code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Milliseconds before a request is considered to be timed out.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Optional function to be called when a timeout occurs. Same as binding to the <code>timeout</code> event.</li>\n</ul>\n<h3>request.write(chunk[, encoding][, callback])<span><a class=\"mark\" href=\"#http_request_write_chunk_encoding_callback\" id=\"http_request_write_chunk_encoding_callback\">#</a></span></h3>\n<p>Sends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n<code>[&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]</code> header line when\ncreating the request.</p>\n<p>The <code>chunk</code> argument should be a <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> or a string.</p>\n<p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.\nDefaults to <code>&#39;utf8&#39;</code>.</p>\n<p>The <code>callback</code> argument is optional and will be called when this chunk of data\nis flushed.</p>\n<p>Returns <code>request</code>.</p>\n<h2>Class: http.Server<span><a class=\"mark\" href=\"#http_class_http_server\" id=\"http_class_http_server\">#</a></span></h2>\n<p>This class inherits from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> and has the following additional events:</p>\n<h3>Event: &#39;checkContinue&#39;<span><a class=\"mark\" href=\"#http_event_checkcontinue\" id=\"http_event_checkcontinue\">#</a></span></h3>\n<p><code>function (request, response) { }</code></p>\n<p>Emitted each time a request with an http Expect: 100-continue is received.\nIf this event isn&#39;t listened for, the server will automatically respond\nwith a 100 Continue as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http_response_writecontinue\"><code>response.writeContinue()</code></a> if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g., 400 Bad Request) if the client should not continue to send the\nrequest body.</p>\n<p>Note that when this event is emitted and handled, the <code>&#39;request&#39;</code> event will\nnot be emitted.</p>\n<h3>Event: &#39;clientError&#39;<span><a class=\"mark\" href=\"#http_event_clienterror\" id=\"http_event_clienterror\">#</a></span></h3>\n<p><code>function (exception, socket) { }</code></p>\n<p>If a client connection emits an <code>&#39;error&#39;</code> event, it will be forwarded here.\nListener of this event is responsible for closing/destroying the underlying\nsocket. For example, one may wish to more gracefully close the socket with an\nHTTP &#39;400 Bad Request&#39; response instead of abruptly severing the connection.</p>\n<p>Default behavior is to destroy the socket immediately on malformed request.</p>\n<p><code>socket</code> is the <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> object that the error originated from.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on(&#39;clientError&#39;, (err, socket) =&gt; {\n  socket.end(&#39;HTTP/1.1 400 Bad Request\\r\\n\\r\\n&#39;);\n});\nserver.listen(8000);\n</code></pre>\n<p>When the <code>&#39;clientError&#39;</code> event occurs, there is no <code>request</code> or <code>response</code>\nobject, so any HTTP response sent, including response headers and payload,\n<em>must</em> be written directly to the <code>socket</code> object. Care must be taken to\nensure the response is a properly formatted HTTP response message.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#http_event_close\" id=\"http_event_close\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Emitted when the server closes.</p>\n<h3>Event: &#39;connect&#39;<span><a class=\"mark\" href=\"#http_event_connect_1\" id=\"http_event_connect_1\">#</a></span></h3>\n<p><code>function (request, socket, head) { }</code></p>\n<p>Emitted each time a client requests a http <code>CONNECT</code> method. If this event isn&#39;t\nlistened for, then clients requesting a <code>CONNECT</code> method will have their\nconnections closed.</p>\n<ul>\n<li><code>request</code> is the arguments for the http request, as it is in the request\nevent.</li>\n<li><code>socket</code> is the network socket between the server and client.</li>\n<li><code>head</code> is an instance of Buffer, the first packet of the tunneling stream,\nthis may be empty.</li>\n</ul>\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.</p>\n<h3>Event: &#39;connection&#39;<span><a class=\"mark\" href=\"#http_event_connection\" id=\"http_event_connection\">#</a></span></h3>\n<p><code>function (socket) { }</code></p>\n<p>When a new TCP stream is established. <code>socket</code> is an object of type\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>. Usually users will not want to access this event. In\nparticular, the socket will not emit <code>&#39;readable&#39;</code> events because of how\nthe protocol parser attaches to the socket. The <code>socket</code> can also be\naccessed at <code>request.connection</code>.</p>\n<h3>Event: &#39;request&#39;<span><a class=\"mark\" href=\"#http_event_request\" id=\"http_event_request\">#</a></span></h3>\n<p><code>function (request, response) { }</code></p>\n<p>Emitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).\n <code>request</code> is an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a> and <code>response</code> is\nan instance of <a href=\"#http_class_http_serverresponse\"><code>http.ServerResponse</code></a>.</p>\n<h3>Event: &#39;upgrade&#39;<span><a class=\"mark\" href=\"#http_event_upgrade_1\" id=\"http_event_upgrade_1\">#</a></span></h3>\n<p><code>function (request, socket, head) { }</code></p>\n<p>Emitted each time a client requests a http upgrade. If this event isn&#39;t\nlistened for, then clients requesting an upgrade will have their connections\nclosed.</p>\n<ul>\n<li><code>request</code> is the arguments for the http request, as it is in the request\nevent.</li>\n<li><code>socket</code> is the network socket between the server and client.</li>\n<li><code>head</code> is an instance of Buffer, the first packet of the upgraded stream,\nthis may be empty.</li>\n</ul>\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.</p>\n<h3>server.close([callback])<span><a class=\"mark\" href=\"#http_server_close_callback\" id=\"http_server_close_callback\">#</a></span></h3>\n<p>Stops the server from accepting new connections.  See <a href=\"net.html#net_server_close_callback\"><code>net.Server.close()</code></a>.</p>\n<h3>server.listen(handle[, callback])<span><a class=\"mark\" href=\"#http_server_listen_handle_callback\" id=\"http_server_listen_handle_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>\n<p>This will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.</p>\n<p>Listening on a file descriptor is not supported on Windows.</p>\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\na listener for the <code>&#39;listening&#39;</code> event. See also <a href=\"net.html#net_server_listen_handle_backlog_callback\"><code>net.Server.listen()</code></a>.</p>\n<p>Returns <code>server</code>.</p>\n<h3>server.listen(path[, callback])<span><a class=\"mark\" href=\"#http_server_listen_path_callback\" id=\"http_server_listen_path_callback\">#</a></span></h3>\n<p>Start a UNIX socket server listening for connections on the given <code>path</code>.</p>\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\na listener for the <code>&#39;listening&#39;</code> event.  See also <a href=\"net.html#net_server_listen_path_backlog_callback\"><code>net.Server.listen(path)</code></a>.</p>\n<h3>server.listen(port[, hostname][, backlog][, callback])<span><a class=\"mark\" href=\"#http_server_listen_port_hostname_backlog_callback\" id=\"http_server_listen_port_hostname_backlog_callback\">#</a></span></h3>\n<p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a\nport value of zero to have the operating system assign an available port.</p>\n<p>To listen to a unix socket, supply a filename instead of port and hostname.</p>\n<p>Backlog is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on linux. The default value of this\nparameter is 511 (not 512).</p>\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\na listener for the <code>&#39;listening&#39;</code> event.  See also <a href=\"net.html#net_server_listen_port_hostname_backlog_callback\"><code>net.Server.listen(port)</code></a>.</p>\n<h3>server.listening<span><a class=\"mark\" href=\"#http_server_listening\" id=\"http_server_listening\">#</a></span></h3>\n<p>A Boolean indicating whether or not the server is listening for\nconnections.</p>\n<h3>server.maxHeadersCount<span><a class=\"mark\" href=\"#http_server_maxheaderscount\" id=\"http_server_maxheaderscount\">#</a></span></h3>\n<p>Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.</p>\n<h3>server.setTimeout(msecs, callback)<span><a class=\"mark\" href=\"#http_server_settimeout_msecs_callback\" id=\"http_server_settimeout_msecs_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Sets the timeout value for sockets, and emits a <code>&#39;timeout&#39;</code> event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.</p>\n<p>If there is a <code>&#39;timeout&#39;</code> event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.</p>\n<p>By default, the Server&#39;s timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out.  However, if you assign a\ncallback to the Server&#39;s <code>&#39;timeout&#39;</code> event, then you are responsible\nfor handling socket timeouts.</p>\n<p>Returns <code>server</code>.</p>\n<h3>server.timeout<span><a class=\"mark\" href=\"#http_server_timeout\" id=\"http_server_timeout\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Default = 120000 (2 minutes)</li>\n</ul>\n</div><p>The number of milliseconds of inactivity before a socket is presumed\nto have timed out.</p>\n<p>Note that the socket timeout logic is set up on connection, so\nchanging this value only affects <em>new</em> connections to the server, not\nany existing connections.</p>\n<p>Set to 0 to disable any kind of automatic timeout behavior on incoming\nconnections.</p>\n<h2>Class: http.ServerResponse<span><a class=\"mark\" href=\"#http_class_http_serverresponse\" id=\"http_class_http_serverresponse\">#</a></span></h2>\n<p>This object is created internally by a HTTP server--not by the user. It is\npassed as the second parameter to the <code>&#39;request&#39;</code> event.</p>\n<p>The response implements, but does not inherit from, the <a href=\"stream.html#stream_class_stream_writable\">Writable Stream</a>\ninterface. This is an <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#http_event_close_1\" id=\"http_event_close_1\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Indicates that the underlying connection was terminated before\n<a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> was called or able to flush.</p>\n<h3>Event: &#39;finish&#39;<span><a class=\"mark\" href=\"#http_event_finish\" id=\"http_event_finish\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.</p>\n<p>After this event, no more events will be emitted on the response object.</p>\n<h3>response.addTrailers(headers)<span><a class=\"mark\" href=\"#http_response_addtrailers_headers\" id=\"http_response_addtrailers_headers\">#</a></span></h3>\n<p>This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.</p>\n<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the\nresponse; if it is not (e.g., if the request was HTTP/1.0), they will\nbe silently discarded.</p>\n<p>Note that HTTP requires the <code>Trailer</code> header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,</p>\n<pre><code class=\"lang-js\">response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\nresponse.write(fileData);\nresponse.addTrailers({&#39;Content-MD5&#39;: &#39;7895bf4b8828b55ceaf47747b4bca667&#39;});\nresponse.end();\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<h3>response.end([data][, encoding][, callback])<span><a class=\"mark\" href=\"#http_response_end_data_encoding_callback\" id=\"http_response_end_data_encoding_callback\">#</a></span></h3>\n<p>This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the response stream\nis finished.</p>\n<h3>response.finished<span><a class=\"mark\" href=\"#http_response_finished\" id=\"http_response_finished\">#</a></span></h3>\n<p>Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p>\n<h3>response.getHeader(name)<span><a class=\"mark\" href=\"#http_response_getheader_name\" id=\"http_response_getheader_name\">#</a></span></h3>\n<p>Reads out a header that&#39;s already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var contentType = response.getHeader(&#39;content-type&#39;);\n</code></pre>\n<h3>response.headersSent<span><a class=\"mark\" href=\"#http_response_headerssent\" id=\"http_response_headerssent\">#</a></span></h3>\n<p>Boolean (read-only). True if headers were sent, false otherwise.</p>\n<h3>response.removeHeader(name)<span><a class=\"mark\" href=\"#http_response_removeheader_name\" id=\"http_response_removeheader_name\">#</a></span></h3>\n<p>Removes a header that&#39;s queued for implicit sending.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.removeHeader(&#39;Content-Encoding&#39;);\n</code></pre>\n<h3>response.sendDate<span><a class=\"mark\" href=\"#http_response_senddate\" id=\"http_response_senddate\">#</a></span></h3>\n<p>When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.</p>\n<p>This should only be disabled for testing; HTTP requires the Date header\nin responses.</p>\n<h3>response.setHeader(name, value)<span><a class=\"mark\" href=\"#http_response_setheader_name_value\" id=\"http_response_setheader_name_value\">#</a></span></h3>\n<p>Sets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<p>When headers have been set with <a href=\"#http_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged with\nany headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed to\n<a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<h3>response.setTimeout(msecs, callback)<span><a class=\"mark\" href=\"#http_response_settimeout_msecs_callback\" id=\"http_response_settimeout_msecs_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Sets the Socket&#39;s timeout value to <code>msecs</code>.  If a callback is\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\nthe response object.</p>\n<p>If no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out.  If you\nassign a handler on the request, the response, or the server&#39;s\n<code>&#39;timeout&#39;</code> events, then it is your responsibility to handle timed out\nsockets.</p>\n<p>Returns <code>response</code>.</p>\n<h3>response.statusCode<span><a class=\"mark\" href=\"#http_response_statuscode\" id=\"http_response_statuscode\">#</a></span></h3>\n<p>When using implicit headers (not calling <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.statusCode = 404;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus code which was sent out.</p>\n<h3>response.statusMessage<span><a class=\"mark\" href=\"#http_response_statusmessage\" id=\"http_response_statusmessage\">#</a></span></h3>\n<p>When using implicit headers (not calling <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly), this property\ncontrols the status message that will be sent to the client when the headers get\nflushed. If this is left as <code>undefined</code> then the standard message for the status\ncode will be used.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.statusMessage = &#39;Not found&#39;;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus message which was sent out.</p>\n<h3>response.write(chunk[, encoding][, callback])<span><a class=\"mark\" href=\"#http_response_write_chunk_encoding_callback\" id=\"http_response_write_chunk_encoding_callback\">#</a></span></h3>\n<p>If this method is called and <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> has not been called,\nit will switch to implicit header mode and flush the implicit headers.</p>\n<p>This sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.</p>\n<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the <code>encoding</code> is <code>&#39;utf8&#39;</code>. The last parameter <code>callback</code>\nwill be called when this chunk of data is flushed.</p>\n<p><strong>Note</strong>: This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.</p>\n<p>The first time <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, it will send the buffered\nheader information and the first body to the client. The second time\n<a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, Node.js assumes you&#39;re going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.</p>\n<h3>response.writeContinue()<span><a class=\"mark\" href=\"#http_response_writecontinue\" id=\"http_response_writecontinue\">#</a></span></h3>\n<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the <a href=\"#http_event_checkcontinue\"><code>&#39;checkContinue&#39;</code></a> event on <code>Server</code>.</p>\n<h3>response.writeHead(statusCode[, statusMessage][, headers])<span><a class=\"mark\" href=\"#http_response_writehead_statuscode_statusmessage_headers\" id=\"http_response_writehead_statuscode_statusmessage_headers\">#</a></span></h3>\n<p>Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.\nOptionally one can give a human-readable <code>statusMessage</code> as the second\nargument.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\n</code></pre>\n<p>This method must only be called once on a message and it must\nbe called before <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> is called.</p>\n<p>If you call <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> or <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> before calling this,\nthe implicit/mutable headers will be calculated and call this function for you.</p>\n<p>When headers have been set with <a href=\"#http_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged with\nany headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed to\n<a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http.createServer((req,res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<p>Note that Content-Length is given in bytes not characters. The above example\nworks because the string <code>&#39;hello world&#39;</code> contains only single byte characters.\nIf the body contains higher coded characters then <code>Buffer.byteLength()</code>\nshould be used to determine the number of bytes in a given encoding.\nAnd Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.</p>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<h2>Class: http.IncomingMessage<span><a class=\"mark\" href=\"#http_class_http_incomingmessage\" id=\"http_class_http_incomingmessage\">#</a></span></h2>\n<p>An <code>IncomingMessage</code> object is created by <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a> or\n<a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> and passed as the first argument to the <code>&#39;request&#39;</code>\nand <code>&#39;response&#39;</code> event respectively. It may be used to access response status,\nheaders and data.</p>\n<p>It implements the <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a> interface, as well as the\nfollowing additional events, methods, and properties.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#http_event_close_2\" id=\"http_event_close_2\">#</a></span></h3>\n<p><code>function () { }</code></p>\n<p>Indicates that the underlying connection was closed.\nJust like <code>&#39;end&#39;</code>, this event occurs only once per response.</p>\n<h3>message.destroy([error])<span><a class=\"mark\" href=\"#http_message_destroy_error\" id=\"http_message_destroy_error\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n</div><p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>\nis provided, an <code>&#39;error&#39;</code> event is emitted and <code>error</code> is passed as an argument\nto any listeners on the event.</p>\n<h3>message.headers<span><a class=\"mark\" href=\"#http_message_headers\" id=\"http_message_headers\">#</a></span></h3>\n<p>The request/response headers object.</p>\n<p>Key-value pairs of header names and values. Header names are lower-cased.\nExample:</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);\n</code></pre>\n<p>Duplicates in raw headers are handled in the following ways, depending on the\nheader name:</p>\n<ul>\n<li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>,\n<code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>,\n<code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>,\n<code>retry-after</code>, or <code>user-agent</code> are discarded.</li>\n<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>\n<li>For all other headers, the values are joined together with &#39;, &#39;.</li>\n</ul>\n<h3>message.httpVersion<span><a class=\"mark\" href=\"#http_message_httpversion\" id=\"http_message_httpversion\">#</a></span></h3>\n<p>In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either <code>&#39;1.1&#39;</code> or <code>&#39;1.0&#39;</code>.</p>\n<p>Also <code>message.httpVersionMajor</code> is the first integer and\n<code>message.httpVersionMinor</code> is the second.</p>\n<h3>message.method<span><a class=\"mark\" href=\"#http_message_method\" id=\"http_message_method\">#</a></span></h3>\n<p><strong>Only valid for request obtained from <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</strong></p>\n<p>The request method as a string. Read only. Example:\n<code>&#39;GET&#39;</code>, <code>&#39;DELETE&#39;</code>.</p>\n<h3>message.rawHeaders<span><a class=\"mark\" href=\"#http_message_rawheaders\" id=\"http_message_rawheaders\">#</a></span></h3>\n<p>The raw request/response headers list exactly as they were received.</p>\n<p>Note that the keys and values are in the same list.  It is <em>not</em> a\nlist of tuples.  So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.</p>\n<p>Header names are not lowercased, and duplicates are not merged.</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// [ &#39;user-agent&#39;,\n//   &#39;this is invalid because there can be only one&#39;,\n//   &#39;User-Agent&#39;,\n//   &#39;curl/7.22.0&#39;,\n//   &#39;Host&#39;,\n//   &#39;127.0.0.1:8000&#39;,\n//   &#39;ACCEPT&#39;,\n//   &#39;*/*&#39; ]\nconsole.log(request.rawHeaders);\n</code></pre>\n<h3>message.rawTrailers<span><a class=\"mark\" href=\"#http_message_rawtrailers\" id=\"http_message_rawtrailers\">#</a></span></h3>\n<p>The raw request/response trailer keys and values exactly as they were\nreceived.  Only populated at the <code>&#39;end&#39;</code> event.</p>\n<h3>message.setTimeout(msecs, callback)<span><a class=\"mark\" href=\"#http_message_settimeout_msecs_callback\" id=\"http_message_settimeout_msecs_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p>\n<p>Returns <code>message</code>.</p>\n<h3>message.statusCode<span><a class=\"mark\" href=\"#http_message_statuscode\" id=\"http_message_statuscode\">#</a></span></h3>\n<p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p>\n<p>The 3-digit HTTP response status code. E.G. <code>404</code>.</p>\n<h3>message.statusMessage<span><a class=\"mark\" href=\"#http_message_statusmessage\" id=\"http_message_statusmessage\">#</a></span></h3>\n<p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p>\n<p>The HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server Error</code>.</p>\n<h3>message.socket<span><a class=\"mark\" href=\"#http_message_socket\" id=\"http_message_socket\">#</a></span></h3>\n<p>The <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> object associated with the connection.</p>\n<p>With HTTPS support, use <a href=\"tls.html#tls_tlssocket_getpeercertificate_detailed\"><code>request.socket.getPeerCertificate()</code></a> to obtain the\nclient&#39;s authentication details.</p>\n<h3>message.trailers<span><a class=\"mark\" href=\"#http_message_trailers\" id=\"http_message_trailers\">#</a></span></h3>\n<p>The request/response trailers object. Only populated at the <code>&#39;end&#39;</code> event.</p>\n<h3>message.url<span><a class=\"mark\" href=\"#http_message_url\" id=\"http_message_url\">#</a></span></h3>\n<p><strong>Only valid for request obtained from <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</strong></p>\n<p>Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:</p>\n<pre><code>GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n\n</code></pre><p>Then <code>request.url</code> will be:</p>\n<pre><code>&#39;/status?name=ryan&#39;\n</code></pre><p>If you would like to parse the URL into its parts, you can use\n<code>require(&#39;url&#39;).parse(request.url)</code>.  Example:</p>\n<pre><code>$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39;\n}\n</code></pre><p>If you would like to extract the params from the query string,\nyou can use the <code>require(&#39;querystring&#39;).parse</code> function, or pass\n<code>true</code> as the second argument to <code>require(&#39;url&#39;).parse</code>.  Example:</p>\n<pre><code>$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\n{\n  href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: {name: &#39;ryan&#39;},\n  pathname: &#39;/status&#39;\n}\n</code></pre><h2>http.METHODS<span><a class=\"mark\" href=\"#http_http_methods\" id=\"http_http_methods\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n</div><p>A list of the HTTP methods that are supported by the parser.</p>\n<h2>http.STATUS_CODES<span><a class=\"mark\" href=\"#http_http_status_codes\" id=\"http_http_status_codes\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example, <code>http.STATUS_CODES[404] === &#39;Not\nFound&#39;</code>.</p>\n<h2>http.createClient([port][, host])<span><a class=\"mark\" href=\"#http_http_createclient_port_host\" id=\"http_http_createclient_port_host\">#</a></span></h2>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> instead.</pre><p>Constructs a new HTTP client. <code>port</code> and <code>host</code> refer to the server to be\nconnected to.</p>\n<h2>http.createServer([requestListener])<span><a class=\"mark\" href=\"#http_http_createserver_requestlistener\" id=\"http_http_createserver_requestlistener\">#</a></span></h2>\n<p>Returns a new instance of <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</p>\n<p>The <code>requestListener</code> is a function which is automatically\nadded to the <code>&#39;request&#39;</code> event.</p>\n<h2>http.get(options[, callback])<span><a class=\"mark\" href=\"#http_http_get_options_callback\" id=\"http_http_get_options_callback\">#</a></span></h2>\n<p>Since most requests are GET requests without bodies, Node.js provides this\nconvenience method. The only difference between this method and <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a>\nis that it sets the method to GET and calls <code>req.end()</code> automatically.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">http.get(&#39;http://www.google.com/index.html&#39;, (res) =&gt; {\n  console.log(`Got response: ${res.statusCode}`);\n  // consume response body\n  res.resume();\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.log(`Got error: ${e.message}`);\n});\n</code></pre>\n<h2>http.globalAgent<span><a class=\"mark\" href=\"#http_http_globalagent\" id=\"http_http_globalagent\">#</a></span></h2>\n<p>Global instance of Agent which is used as the default for all http client\nrequests.</p>\n<h2>http.request(options[, callback])<span><a class=\"mark\" href=\"#http_http_request_options_callback\" id=\"http_http_request_options_callback\">#</a></span></h2>\n<p>Node.js maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.</p>\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <a href=\"url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p>\n<p>Options:</p>\n<ul>\n<li><code>protocol</code>: Protocol to use. Defaults to <code>&#39;http:&#39;</code>.</li>\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.\nDefaults to <code>&#39;localhost&#39;</code>.</li>\n<li><code>hostname</code>: Alias for <code>host</code>. To support <a href=\"url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> <code>hostname</code> is\npreferred over <code>host</code>.</li>\n<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.\nValid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be\nused.</li>\n<li><code>port</code>: Port of remote server. Defaults to 80.</li>\n<li><code>localAddress</code>: Local interface to bind for network connections.</li>\n<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>\n<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;</code>.</li>\n<li><code>path</code>: Request path. Defaults to <code>&#39;/&#39;</code>. Should include query string if any.\nE.G. <code>&#39;/index.html?page=12&#39;</code>. An exception is thrown when the request path\ncontains illegal characters. Currently, only spaces are rejected but that\nmay change in the future.</li>\n<li><code>headers</code>: An object containing request headers.</li>\n<li><code>auth</code>: Basic authentication i.e. <code>&#39;user:password&#39;</code> to compute an\nAuthorization header.</li>\n<li><code>agent</code>: Controls <a href=\"#https_class_https_agent\"><code>Agent</code></a> behavior. When an Agent is used request will\ndefault to <code>Connection: keep-alive</code>. Possible values:<ul>\n<li><code>undefined</code> (default): use <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> for this host and port.</li>\n<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>\n<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to\n<code>Connection: close</code>.</li>\n</ul>\n</li>\n<li><code>createConnection</code>: A function that produces a socket/stream to use for the\nrequest when the <code>agent</code> option is not used. This can be used to avoid\ncreating a custom Agent class just to override the default <code>createConnection</code>\nfunction. See <a href=\"#http_agent_createconnection_options_callback\"><code>agent.createConnection()</code></a> for more details.</li>\n</ul>\n<p>The optional <code>callback</code> parameter will be added as a one time listener for\nthe <code>&#39;response&#39;</code> event.</p>\n<p><code>http.request()</code> returns an instance of the <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>\nclass. The <code>ClientRequest</code> instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the <code>ClientRequest</code> object.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var postData = querystring.stringify({\n  &#39;msg&#39; : &#39;Hello World!&#39;\n});\n\nvar options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;/upload&#39;,\n  method: &#39;POST&#39;,\n  headers: {\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\n    &#39;Content-Length&#39;: Buffer.byteLength(postData)\n  }\n};\n\nvar req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;No more data in response.&#39;)\n  })\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.log(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n</code></pre>\n<p>Note that in the example <code>req.end()</code> was called. With <code>http.request()</code> one\nmust always call <code>req.end()</code> to signify that you&#39;re done with the request -\neven if there is no data being written to the request body.</p>\n<p>If any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an <code>&#39;error&#39;</code> event is emitted\non the returned request object. As with all <code>&#39;error&#39;</code> events, if no listeners\nare registered the error will be thrown.</p>\n<p>There are a few special headers that should be noted.</p>\n<ul>\n<li><p>Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to\nthe server should be persisted until the next request.</p>\n</li>\n<li><p>Sending a &#39;Content-length&#39; header will disable the default chunked encoding.</p>\n</li>\n<li><p>Sending an &#39;Expect&#39; header will immediately send the request headers.\nUsually, when sending &#39;Expect: 100-continue&#39;, you should both set a timeout\nand listen for the <code>&#39;continue&#39;</code> event. See RFC2616 Section 8.2.3 for more\ninformation.</p>\n</li>\n<li><p>Sending an Authorization header will override using the <code>auth</code> option\nto compute basic authentication.</p>\n</li>\n</ul>\n<!-- [end-include:http.md] -->\n<!-- [start-include:https.md] -->\n<h1>HTTPS<span><a class=\"mark\" href=\"#https_https\" id=\"https_https\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.</p>\n<h2>Class: https.Agent<span><a class=\"mark\" href=\"#https_class_https_agent\" id=\"https_class_https_agent\">#</a></span></h2>\n<p>An Agent object for HTTPS similar to <a href=\"http.html#http_class_http_agent\"><code>http.Agent</code></a>.  See <a href=\"#https_https_request_options_callback\"><code>https.request()</code></a>\nfor more information.</p>\n<h2>Class: https.Server<span><a class=\"mark\" href=\"#https_class_https_server\" id=\"https_class_https_server\">#</a></span></h2>\n<p>This class is a subclass of <code>tls.Server</code> and emits events same as\n<a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>. See <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a> for more information.</p>\n<h3>server.setTimeout(msecs, callback)<span><a class=\"mark\" href=\"#https_server_settimeout_msecs_callback\" id=\"https_server_settimeout_msecs_callback\">#</a></span></h3>\n<p>See <a href=\"http.html#http_server_settimeout_msecs_callback\"><code>http.Server#setTimeout()</code></a>.</p>\n<h3>server.timeout<span><a class=\"mark\" href=\"#https_server_timeout\" id=\"https_server_timeout\">#</a></span></h3>\n<p>See <a href=\"http.html#http_server_timeout\"><code>http.Server#timeout</code></a>.</p>\n<h2>https.createServer(options[, requestListener])<span><a class=\"mark\" href=\"#https_https_createserver_options_requestlistener\" id=\"https_https_createserver_options_requestlistener\">#</a></span></h2>\n<p>Returns a new HTTPS web server object. The <code>options</code> is similar to\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>.  The <code>requestListener</code> is a function which is\nautomatically added to the <code>&#39;request&#39;</code> event.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">// curl -k https://localhost:8000/\nconst https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\\n&#39;);\n}).listen(8000);\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\\n&#39;);\n}).listen(8000);\n</code></pre>\n<h3>server.close([callback])<span><a class=\"mark\" href=\"#https_server_close_callback\" id=\"https_server_close_callback\">#</a></span></h3>\n<p>See <a href=\"http.html#http_server_close_callback\"><code>http.close()</code></a> for details.</p>\n<h3>server.listen(handle[, callback])<span><a class=\"mark\" href=\"#https_server_listen_handle_callback\" id=\"https_server_listen_handle_callback\">#</a></span></h3>\n<h3>server.listen(path[, callback])<span><a class=\"mark\" href=\"#https_server_listen_path_callback\" id=\"https_server_listen_path_callback\">#</a></span></h3>\n<h3>server.listen(port[, host][, backlog][, callback])<span><a class=\"mark\" href=\"#https_server_listen_port_host_backlog_callback\" id=\"https_server_listen_port_host_backlog_callback\">#</a></span></h3>\n<p>See <a href=\"http.html#http_server_listen_port_hostname_backlog_callback\"><code>http.listen()</code></a> for details.</p>\n<h2>https.get(options, callback)<span><a class=\"mark\" href=\"#https_https_get_options_callback\" id=\"https_https_get_options_callback\">#</a></span></h2>\n<p>Like <a href=\"http.html#http_http_get_options_callback\"><code>http.get()</code></a> but for HTTPS.</p>\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <a href=\"url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\n\nhttps.get(&#39;https://encrypted.google.com/&#39;, (res) =&gt; {\n  console.log(&#39;statusCode: &#39;, res.statusCode);\n  console.log(&#39;headers: &#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre>\n<h2>https.globalAgent<span><a class=\"mark\" href=\"#https_https_globalagent\" id=\"https_https_globalagent\">#</a></span></h2>\n<p>Global instance of <a href=\"#https_class_https_agent\"><code>https.Agent</code></a> for all HTTPS client requests.</p>\n<h2>https.request(options, callback)<span><a class=\"mark\" href=\"#https_https_request_options_callback\" id=\"https_https_request_options_callback\">#</a></span></h2>\n<p>Makes a request to a secure web server.</p>\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\nautomatically parsed with <a href=\"url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p>\n<p>All options from <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> are valid.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\n\nvar options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;\n};\n\nvar req = https.request(options, (res) =&gt; {\n  console.log(&#39;statusCode: &#39;, res.statusCode);\n  console.log(&#39;headers: &#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre>\n<p>The options argument has the following options</p>\n<ul>\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.\nDefaults to <code>&#39;localhost&#39;</code>.</li>\n<li><code>hostname</code>: Alias for <code>host</code>. To support <code>url.parse()</code> <code>hostname</code> is\npreferred over <code>host</code>.</li>\n<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.\nValid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be\nused.</li>\n<li><code>port</code>: Port of remote server. Defaults to 443.</li>\n<li><code>localAddress</code>: Local interface to bind for network connections.</li>\n<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>\n<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;</code>.</li>\n<li><code>path</code>: Request path. Defaults to <code>&#39;/&#39;</code>. Should include query string if any.\nE.G. <code>&#39;/index.html?page=12&#39;</code>. An exception is thrown when the request path\ncontains illegal characters. Currently, only spaces are rejected but that\nmay change in the future.</li>\n<li><code>headers</code>: An object containing request headers.</li>\n<li><code>auth</code>: Basic authentication i.e. <code>&#39;user:password&#39;</code> to compute an\nAuthorization header.</li>\n<li><code>agent</code>: Controls <a href=\"#https_class_https_agent\"><code>Agent</code></a> behavior. When an Agent is used request will\ndefault to <code>Connection: keep-alive</code>. Possible values:<ul>\n<li><code>undefined</code> (default): use <a href=\"#https_https_globalagent\"><code>globalAgent</code></a> for this host and port.</li>\n<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>\n<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to\n<code>Connection: close</code>.</li>\n</ul>\n</li>\n</ul>\n<p>The following options from <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> can also be specified. However, a\n<a href=\"#https_https_globalagent\"><code>globalAgent</code></a> silently ignores these.</p>\n<ul>\n<li><code>pfx</code>: Certificate, Private key and CA certificates to use for SSL. Default <code>null</code>.</li>\n<li><code>key</code>: Private key to use for SSL. Default <code>null</code>.</li>\n<li><code>passphrase</code>: A string of passphrase for the private key or pfx. Default <code>null</code>.</li>\n<li><code>cert</code>: Public x509 certificate to use. Default <code>null</code>.</li>\n<li><code>ca</code>: A string, <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a> or array of strings or <a href=\"buffer.html#buffer_buffer\"><code>Buffer</code></a>s of trusted\ncertificates in PEM format. If this is omitted several well known &quot;root&quot;\nCAs will be used, like VeriSign. These are used to authorize connections.</li>\n<li><code>ciphers</code>: A string describing the ciphers to use or exclude. Consult\n<a href=\"https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT\">https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT</a> for\ndetails on the format.</li>\n<li><code>rejectUnauthorized</code>: If <code>true</code>, the server certificate is verified against\nthe list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if verification\nfails. Verification happens at the connection level, <em>before</em> the HTTP\nrequest is sent. Default <code>true</code>.</li>\n<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force\nSSL version 3. The possible values depend on your installation of\nOpenSSL and are defined in the constant <a href=\"https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS\"><code>SSL_METHODS</code></a>.</li>\n<li><code>servername</code>: Servername for SNI (Server Name Indication) TLS extension.</li>\n</ul>\n<p>In order to specify these options, use a custom <a href=\"#https_class_https_agent\"><code>Agent</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n}\n</code></pre>\n<p>Alternatively, opt out of connection pooling by not using an <code>Agent</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;),\n  agent: false\n};\n\nvar req = https.request(options, (res) =&gt; {\n  ...\n}\n</code></pre>\n<!-- [end-include:https.md] -->\n<!-- [start-include:modules.md] -->\n<h1>Modules<span><a class=\"mark\" href=\"#modules_modules\" id=\"modules_modules\">#</a></span></h1>\n<pre class=\"api_stability api_stability_3\">Stability: 3 - Locked</pre><!--name=module-->\n<p>Node.js has a simple module loading system.  In Node.js, files and modules are\nin one-to-one correspondence.  As an example, <code>foo.js</code> loads the module\n<code>circle.js</code> in the same directory.</p>\n<p>The contents of <code>foo.js</code>:</p>\n<pre><code class=\"lang-js\">const circle = require(&#39;./circle.js&#39;);\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\n<p>The contents of <code>circle.js</code>:</p>\n<pre><code class=\"lang-js\">const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre>\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and\n<code>circumference()</code>.  To add functions and objects to the root of your module,\nyou can add them to the special <code>exports</code> object.</p>\n<p>Variables local to the module will be private, because the module is wrapped\nin a function by Node.js (see <a href=\"#modules_the_module_wrapper\">module wrapper</a>).\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\n<p>If you want the root of your module&#39;s export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to <code>module.exports</code>\ninstead of <code>exports</code>.</p>\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p>\n<pre><code class=\"lang-js\">const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</code></pre>\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\n<pre><code class=\"lang-js\">// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n</code></pre>\n<p>The module system is implemented in the <code>require(&quot;module&quot;)</code> module.</p>\n<h2>Accessing the main module<span><a class=\"mark\" href=\"#modules_accessing_the_main_module\" id=\"modules_accessing_the_main_module\">#</a></span></h2>\n<!-- type=misc -->\n<p>When a file is run directly from Node.js, <code>require.main</code> is set to its\n<code>module</code>. That means that you can determine whether a file has been run\ndirectly by testing</p>\n<pre><code class=\"lang-js\">require.main === module\n</code></pre>\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but\n<code>false</code> if run by <code>require(&#39;./foo&#39;)</code>.</p>\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to\n<code>__filename</code>), the entry point of the current application can be obtained\nby checking <code>require.main.filename</code>.</p>\n<h2>Addenda: Package Manager Tips<span><a class=\"mark\" href=\"#modules_addenda_package_manager_tips\" id=\"modules_addenda_package_manager_tips\">#</a></span></h2>\n<!-- type=misc -->\n<p>The semantics of Node.js&#39;s <code>require()</code> function were designed to be general\nenough to support a number of reasonable directory structures. Package manager\nprograms such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to\nbuild native packages from Node.js modules without modification.</p>\n<p>Below we give a suggested directory structure that could work:</p>\n<p>Let&#39;s say that we wanted to have the folder at\n<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a\nspecific version of a package.</p>\n<p>Packages can depend on one another. In order to install package <code>foo</code>, you\nmay have to install a specific version of package <code>bar</code>.  The <code>bar</code> package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.</p>\n<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the <code>node_modules</code>\nfolders as described <a href=\"#modules_loading_from_node_modules_folders\">here</a>, this\nsituation is very simple to resolve with the following architecture:</p>\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>\ndepends on.</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to\n<code>/usr/lib/node/bar/4.3.2/</code>.</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages\nthat <code>bar</code> depends on.</li>\n</ul>\n<p>Thus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.</p>\n<p>When the code in the <code>foo</code> package does <code>require(&#39;bar&#39;)</code>, it will get the\nversion that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.\nThen, when the code in the <code>bar</code> package calls <code>require(&#39;quux&#39;)</code>, it&#39;ll get\nthe version that is symlinked into\n<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\n<p>Furthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in <code>/usr/lib/node</code>, we could put them in\n<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>.  Then Node.js will not bother\nlooking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\n<p>In order to make modules available to the Node.js REPL, it might be useful to\nalso add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment\nvariable.  Since the module lookups using <code>node_modules</code> folders are all\nrelative, and based on the real path of the files making the calls to\n<code>require()</code>, the packages themselves can be anywhere.</p>\n<h2>All Together...<span><a class=\"mark\" href=\"#modules_all_together\" id=\"modules_all_together\">#</a></span></h2>\n<!-- type=misc -->\n<p>To get the exact filename that will be loaded when <code>require()</code> is called, use\nthe <code>require.resolve()</code> function.</p>\n<p>Putting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:</p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &#39;./&#39; or &#39;/&#39; or &#39;../&#39;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n4. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I &gt;= 0,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n5. return DIRS\n</code></pre><h2>Caching<span><a class=\"mark\" href=\"#modules_caching\" id=\"modules_caching\">#</a></span></h2>\n<!--type=misc-->\n<p>Modules are cached after the first time they are loaded.  This means\n(among other things) that every call to <code>require(&#39;foo&#39;)</code> will get\nexactly the same object returned, if it would resolve to the same file.</p>\n<p>Multiple calls to <code>require(&#39;foo&#39;)</code> may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n&quot;partially done&quot; objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.</p>\n<p>If you want to have a module execute code multiple times, then export a\nfunction, and call that function.</p>\n<h3>Module Caching Caveats<span><a class=\"mark\" href=\"#modules_module_caching_caveats\" id=\"modules_module_caching_caveats\">#</a></span></h3>\n<!--type=misc-->\n<p>Modules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>\nthat <code>require(&#39;foo&#39;)</code> will always return the exact same object, if it\nwould resolve to different files.</p>\n<p>Additionally, on case-insensitive file systems or operating systems, different\nresolved filenames can point to the same file, but the cache will still treat\nthem as different modules and will reload the file multiple times. For example,\n<code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects,\nirrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h2>Core Modules<span><a class=\"mark\" href=\"#modules_core_modules\" id=\"modules_core_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>Node.js has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.</p>\n<p>The core modules are defined within Node.js&#39;s source and are located in the\n<code>lib/</code> folder.</p>\n<p>Core modules are always preferentially loaded if their identifier is\npassed to <code>require()</code>.  For instance, <code>require(&#39;http&#39;)</code> will always\nreturn the built in HTTP module, even if there is a file by that name.</p>\n<h2>Cycles<span><a class=\"mark\" href=\"#modules_cycles\" id=\"modules_cycles\">#</a></span></h2>\n<!--type=misc-->\n<p>When there are circular <code>require()</code> calls, a module might not have finished\nexecuting when it is returned.</p>\n<p>Consider this situation:</p>\n<p><code>a.js</code>:</p>\n<pre><code>console.log(&#39;a starting&#39;);\nexports.done = false;\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\nexports.done = true;\nconsole.log(&#39;a done&#39;);\n</code></pre><p><code>b.js</code>:</p>\n<pre><code>console.log(&#39;b starting&#39;);\nexports.done = false;\nconst a = require(&#39;./a.js&#39;);\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\nexports.done = true;\nconsole.log(&#39;b done&#39;);\n</code></pre><p><code>main.js</code>:</p>\n<pre><code>console.log(&#39;main starting&#39;);\nconst a = require(&#39;./a.js&#39;);\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in main, a.done=%j, b.done=%j&#39;, a.done, b.done);\n</code></pre><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>.  At that\npoint, <code>b.js</code> tries to load <code>a.js</code>.  In order to prevent an infinite\nloop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the\n<code>b.js</code> module.  <code>b.js</code> then finishes loading, and its <code>exports</code> object is\nprovided to the <code>a.js</code> module.</p>\n<p>By the time <code>main.js</code> has loaded both modules, they&#39;re both finished.\nThe output of this program would thus be:</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true\n</code></pre><p>If you have cyclic module dependencies in your program, make sure to\nplan accordingly.</p>\n<h2>File Modules<span><a class=\"mark\" href=\"#modules_file_modules\" id=\"modules_file_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>If the exact filename is not found, then Node.js will attempt to load the\nrequired filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally\n<code>.node</code>.</p>\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are\nparsed as JSON text files. <code>.node</code> files are interpreted as compiled addon\nmodules loaded with <code>dlopen</code>.</p>\n<p>A required module prefixed with <code>&#39;/&#39;</code> is an absolute path to the file.  For\nexample, <code>require(&#39;/home/marco/foo.js&#39;)</code> will load the file at\n<code>/home/marco/foo.js</code>.</p>\n<p>A required module prefixed with <code>&#39;./&#39;</code> is relative to the file calling\n<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for\n<code>require(&#39;./circle&#39;)</code> to find it.</p>\n<p>Without a leading &#39;/&#39;, &#39;./&#39;, or &#39;../&#39; to indicate a file, the module must\neither be a core module or is loaded from a <code>node_modules</code> folder.</p>\n<p>If the given path does not exist, <code>require()</code> will throw an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> with its\n<code>code</code> property set to <code>&#39;MODULE_NOT_FOUND&#39;</code>.</p>\n<h2>Folders as Modules<span><a class=\"mark\" href=\"#modules_folders_as_modules\" id=\"modules_folders_as_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>It is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to <code>require()</code> as\nan argument.</p>\n<p>The first is to create a <code>package.json</code> file in the root of the folder,\nwhich specifies a <code>main</code> module.  An example package.json file might\nlook like this:</p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\n</code></pre><p>If this was in a folder at <code>./some-library</code>, then\n<code>require(&#39;./some-library&#39;)</code> would attempt to load\n<code>./some-library/lib/some-library.js</code>.</p>\n<p>This is the extent of Node.js&#39;s awareness of package.json files.</p>\n<p>Note: If the file specified by the <code>&quot;main&quot;</code> entry of <code>package.json</code> is missing\nand can not be resolved, Node.js will report the entire module as missing with\nthe default error:</p>\n<pre><code>Error: Cannot find module &#39;some-library&#39;\n</code></pre><p>If there is no package.json file present in the directory, then Node.js\nwill attempt to load an <code>index.js</code> or <code>index.node</code> file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then <code>require(&#39;./some-library&#39;)</code> would attempt to load:</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n<h2>Loading from <code>node_modules</code> Folders<span><a class=\"mark\" href=\"#modules_loading_from_node_modules_folders\" id=\"modules_loading_from_node_modules_folders\">#</a></span></h2>\n<!--type=misc-->\n<p>If the module identifier passed to <code>require()</code> is not a native module,\nand does not begin with <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code>, or <code>&#39;./&#39;</code>, then Node.js starts at the\nparent directory of the current module, and adds <code>/node_modules</code>, and\nattempts to load the module from that location. Node will not append\n<code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\n<p>If it is not found there, then it moves to the parent directory, and so\non, until the root of the file system is reached.</p>\n<p>For example, if the file at <code>&#39;/home/ry/projects/foo.js&#39;</code> called\n<code>require(&#39;bar.js&#39;)</code>, then Node.js would look in the following locations, in\nthis order:</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<p>This allows programs to localize their dependencies, so that they do not\nclash.</p>\n<p>You can require specific files or sub modules distributed with a module by\nincluding a path suffix after the module name. For instance\n<code>require(&#39;example-module/path/to/file&#39;)</code> would resolve <code>path/to/file</code>\nrelative to where <code>example-module</code> is located. The suffixed path follows the\nsame module resolution semantics.</p>\n<h2>Loading from the global folders<span><a class=\"mark\" href=\"#modules_loading_from_the_global_folders\" id=\"modules_loading_from_the_global_folders\">#</a></span></h2>\n<!-- type=misc -->\n<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list\nof absolute paths, then Node.js will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, <code>NODE_PATH</code> is delimited by\nsemicolons instead of colons.)</p>\n<p><code>NODE_PATH</code> was originally created to support loading modules from\nvarying paths before the current <a href=\"#modules_all_together\">module resolution</a> algorithm was frozen.</p>\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js\necosystem has settled on a convention for locating dependent modules.\nSometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior\nwhen people are unaware that <code>NODE_PATH</code> must be set.  Sometimes a\nmodule&#39;s dependencies change, causing a different version (or even a\ndifferent module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\n<p>Additionally, Node.js will search in the following locations:</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<p>Where <code>$HOME</code> is the user&#39;s home directory, and <code>$PREFIX</code> is Node.js&#39;s\nconfigured <code>node_prefix</code>.</p>\n<p>These are mostly for historic reasons.  <strong>You are highly encouraged\nto place your dependencies locally in <code>node_modules</code> folders.</strong>  They\nwill be loaded faster, and more reliably.</p>\n<h2>The module wrapper<span><a class=\"mark\" href=\"#modules_the_module_wrapper\" id=\"modules_the_module_wrapper\">#</a></span></h2>\n<!-- type=misc -->\n<p>Before a module&#39;s code is executed, Node.js will wrap it with a function\nwrapper that looks like the following:</p>\n<pre><code class=\"lang-js\">(function (exports, require, module, __filename, __dirname) {\n// Your module code actually lives in here\n});\n</code></pre>\n<p>By doing this, Node.js achieves a few things:</p>\n<ul>\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to\nthe module rather than the global object.</li>\n<li>It helps to provide some global-looking variables that are actually specific\nto the module, such as:<ul>\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export\nvalues from the module.</li>\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the\nmodule&#39;s absolute filename and directory path.</li>\n</ul>\n</li>\n</ul>\n<h2>The <code>module</code> Object<span><a class=\"mark\" href=\"#modules_the_module_object\" id=\"modules_the_module_object\">#</a></span></h2>\n<!-- type=var -->\n<!-- name=module -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>In each module, the <code>module</code> free variable is a reference to the object\nrepresenting the current module.  For convenience, <code>module.exports</code> is\nalso accessible via the <code>exports</code> module-global. <code>module</code> isn&#39;t actually\na global but rather local to each module.</p>\n<h3>module.children<span><a class=\"mark\" href=\"#modules_module_children\" id=\"modules_module_children\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n</div><p>The module objects required by this one.</p>\n<h3>module.exports<span><a class=\"mark\" href=\"#modules_module_exports\" id=\"modules_module_exports\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>The <code>module.exports</code> object is created by the Module system. Sometimes this is\nnot acceptable; many want their module to be an instance of some class. To do\nthis, assign the desired export object to <code>module.exports</code>. Note that assigning\nthe desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,\nwhich is probably not what you want to do.</p>\n<p>For example suppose we were making a module called <code>a.js</code></p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &#39;ready&#39; event from the module itself.\nsetTimeout(() =&gt; {\n  module.exports.emit(&#39;ready&#39;);\n}, 1000);\n</code></pre>\n<p>Then in another file we could do</p>\n<pre><code class=\"lang-js\">const a = require(&#39;./a&#39;);\na.on(&#39;ready&#39;, () =&gt; {\n  console.log(&#39;module a is ready&#39;);\n});\n</code></pre>\n<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be\ndone in any callbacks.  This does not work:</p>\n<p>x.js:</p>\n<pre><code class=\"lang-js\">setTimeout(() =&gt; {\n  module.exports = { a: &#39;hello&#39; };\n}, 0);\n</code></pre>\n<p>y.js:</p>\n<pre><code class=\"lang-js\">const x = require(&#39;./x&#39;);\nconsole.log(x.a);\n</code></pre>\n<h4>exports alias<span><a class=\"mark\" href=\"#modules_exports_alias\" id=\"modules_exports_alias\">#</a></span></h4>\n<p>The <code>exports</code> variable that is available within a module starts as a reference\nto <code>module.exports</code>. As with any variable, if you assign a new value to it, it\nis no longer bound to the previous value.</p>\n<p>To illustrate the behavior, imagine this hypothetical implementation of\n<code>require()</code>:</p>\n<pre><code class=\"lang-js\">function require(...) {\n  // ...\n  ((module, exports) =&gt; {\n    // Your module code here\n    exports = some_func;        // re-assigns exports, exports is no longer\n                                // a shortcut, and nothing is exported.\n    module.exports = some_func; // makes your module export 0\n  })(module, module.exports);\n  return module;\n}\n</code></pre>\n<p>As a guideline, if the relationship between <code>exports</code> and <code>module.exports</code>\nseems like magic to you, ignore <code>exports</code> and only use <code>module.exports</code>.</p>\n<h3>module.filename<span><a class=\"mark\" href=\"#modules_module_filename\" id=\"modules_module_filename\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</div><p>The fully resolved filename to the module.</p>\n<h3>module.id<span><a class=\"mark\" href=\"#modules_module_id\" id=\"modules_module_id\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</div><p>The identifier for the module.  Typically this is the fully resolved\nfilename.</p>\n<h3>module.loaded<span><a class=\"mark\" href=\"#modules_module_loaded\" id=\"modules_module_loaded\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>Whether or not the module is done loading, or is in the process of\nloading.</p>\n<h3>module.parent<span><a class=\"mark\" href=\"#modules_module_parent\" id=\"modules_module_parent\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Module object</li>\n</ul>\n</div><p>The module that first required this one.</p>\n<h3>module.require(id)<span><a class=\"mark\" href=\"#modules_module_require_id\" id=\"modules_module_require_id\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> <code>module.exports</code> from the resolved module</li>\n</ul>\n</div><p>The <code>module.require</code> method provides a way to load a module as if\n<code>require()</code> was called from the original module.</p>\n<p>Note that in order to do this, you must get a reference to the <code>module</code>\nobject.  Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is\ntypically <em>only</em> available within a specific module&#39;s code, it must be\nexplicitly exported in order to be used.</p>\n<!-- [end-include:modules.md] -->\n<!-- [start-include:net.md] -->\n<h1>net<span><a class=\"mark\" href=\"#net_net\" id=\"net_net\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>net</code> module provides you with an asynchronous network wrapper. It contains\nfunctions for creating both servers and clients (called streams). You can include\nthis module with <code>require(&#39;net&#39;);</code>.</p>\n<h2>Class: net.Server<span><a class=\"mark\" href=\"#net_class_net_server\" id=\"net_class_net_server\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>This class is used to create a TCP or local server.</p>\n<p><code>net.Server</code> is an <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#net_event_close\" id=\"net_event_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>Emitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.</p>\n<h3>Event: &#39;connection&#39;<span><a class=\"mark\" href=\"#net_event_connection\" id=\"net_event_connection\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> The connection object</li>\n</ul>\n<p>Emitted when a new connection is made. <code>socket</code> is an instance of\n<code>net.Socket</code>.</p>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#net_event_error\" id=\"net_event_error\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>Emitted when an error occurs.  The <a href=\"#net_event_close\"><code>&#39;close&#39;</code></a> event will be called directly\nfollowing this event.  See example in discussion of <code>server.listen</code>.</p>\n<h3>Event: &#39;listening&#39;<span><a class=\"mark\" href=\"#net_event_listening\" id=\"net_event_listening\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Emitted when the server has been bound after calling <code>server.listen</code>.</p>\n<h3>server.address()<span><a class=\"mark\" href=\"#net_server_address\" id=\"net_server_address\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Returns the bound address, the address family name, and port of the server\nas reported by the operating system.\nUseful to find which port was assigned when getting an OS-assigned address.\nReturns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties:\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">var server = net.createServer((socket) =&gt; {\n  socket.end(&#39;goodbye\\n&#39;);\n}).on(&#39;error&#39;, (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab a random port.\nserver.listen(() =&gt; {\n  address = server.address();\n  console.log(&#39;opened server on %j&#39;, address);\n});\n</code></pre>\n<p>Don&#39;t call <code>server.address()</code> until the <code>&#39;listening&#39;</code> event has been emitted.</p>\n<h3>server.close([callback])<span><a class=\"mark\" href=\"#net_server_close_callback\" id=\"net_server_close_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally\nclosed when all connections are ended and the server emits a <a href=\"#net_event_close\"><code>&#39;close&#39;</code></a> event.\nThe optional <code>callback</code> will be called once the <code>&#39;close&#39;</code> event occurs. Unlike\nthat event, it will be called with an Error as its only argument if the server\nwas not open when it was closed.</p>\n<h3>server.connections<span><a class=\"mark\" href=\"#net_server_connections\" id=\"net_server_connections\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.2.0</span>\n<span>Deprecated since: v0.9.7 </span>\n</div><pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#net_server_getconnections_callback\"><code>server.getConnections()</code></a> instead.</pre><p>The number of concurrent connections on the server.</p>\n<p>This becomes <code>null</code> when sending a socket to a child with\n<a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>. To poll forks and get current number of active\nconnections use asynchronous <code>server.getConnections</code> instead.</p>\n<h3>server.getConnections(callback)<span><a class=\"mark\" href=\"#net_server_getconnections_callback\" id=\"net_server_getconnections_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.7</span>\n</div><p>Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.</p>\n<p>Callback should take two arguments <code>err</code> and <code>count</code>.</p>\n<h3>server.listen(handle[, backlog][, callback])<span><a class=\"mark\" href=\"#net_server_listen_handle_backlog_callback\" id=\"net_server_listen_handle_backlog_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.10</span>\n</div><ul>\n<li><code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>The <code>handle</code> object can be set to either a server or socket (anything\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>\n<p>This will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.</p>\n<p>Listening on a file descriptor is not supported on Windows.</p>\n<p>This function is asynchronous.  When the server has been bound,\n<a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event will be emitted.\nThe last parameter <code>callback</code> will be added as a listener for the\n<a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event.</p>\n<p>The parameter <code>backlog</code> behaves the same as in\n<a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.</p>\n<h3>server.listen(options[, callback])<span><a class=\"mark\" href=\"#net_server_listen_options_callback\" id=\"net_server_listen_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.14</span>\n</div><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Required. Supports the following properties:<ul>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - Optional.</li>\n<li><code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional.</li>\n<li><code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> - Optional.</li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> - Optional.</li>\n<li><code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> - Optional.</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Optional.</li>\n</ul>\n<p>The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the\noptional callback function, behave as they do on a call to\n<a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.\nAlternatively, the <code>path</code> option can be used to specify a UNIX socket.</p>\n<p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.</p>\n<pre><code class=\"lang-js\">server.listen({\n  host: &#39;localhost&#39;,\n  port: 80,\n  exclusive: true\n});\n</code></pre>\n<h3>server.listen(path[, backlog][, callback])<span><a class=\"mark\" href=\"#net_server_listen_path_backlog_callback\" id=\"net_server_listen_path_backlog_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Start a local socket server listening for connections on the given <code>path</code>.</p>\n<p>This function is asynchronous.  When the server has been bound,\n<a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event will be emitted.  The last parameter <code>callback</code>\nwill be added as a listener for the <a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event.</p>\n<p>On UNIX, the local domain is usually known as the UNIX domain. The path is a\nfilesystem path name. It gets truncated to <code>sizeof(sockaddr_un.sun_path)</code>\nbytes, decreased by 1. It varies on different operating system between 91 and\n107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is\nsubject to the same naming conventions and permissions checks as would be done\non file creation, will be visible in the filesystem, and will <em>persist until\nunlinked</em>.</p>\n<p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em>\nrefer to an entry in <code>\\\\?\\pipe\\</code> or <code>\\\\.\\pipe\\</code>. Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving <code>..</code>\nsequences. Despite appearances, the pipe name space is flat.  Pipes will <em>not\npersist</em>, they are removed when the last reference to them is closed. Do not\nforget JavaScript string escaping requires paths to be specified with\ndouble-backslashes, such as:</p>\n<pre><code>net.createServer().listen(\n    path.join(&#39;\\\\\\\\?\\\\pipe&#39;, process.cwd(), &#39;myctl&#39;))\n</code></pre><p>The parameter <code>backlog</code> behaves the same as in\n<a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen(port[, hostname][, backlog][, callback])</code></a>.</p>\n<h3>server.listen(port[, hostname][, backlog][, callback])<span><a class=\"mark\" href=\"#net_server_listen_port_hostname_backlog_callback\" id=\"net_server_listen_port_hostname_backlog_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a\nport value of <code>0</code> to have the operating system assign an available port.</p>\n<p>Backlog is the maximum length of the queue of pending connections.\nThe actual length will be determined by the OS through sysctl settings such as\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on Linux. The default value of this\nparameter is 511 (not 512).</p>\n<p>This function is asynchronous.  When the server has been bound,\n<a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event will be emitted.  The last parameter <code>callback</code>\nwill be added as a listener for the <a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event.</p>\n<p>One issue some users run into is getting <code>EADDRINUSE</code> errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again:</p>\n<pre><code class=\"lang-js\">server.on(&#39;error&#39;, (e) =&gt; {\n  if (e.code == &#39;EADDRINUSE&#39;) {\n    console.log(&#39;Address in use, retrying...&#39;);\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n</code></pre>\n<p>(Note: All sockets in Node.js are set <code>SO_REUSEADDR</code>.)</p>\n<h3>server.listening<span><a class=\"mark\" href=\"#net_server_listening\" id=\"net_server_listening\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v5.7.0</span>\n</div><p>A Boolean indicating whether or not the server is listening for\nconnections.</p>\n<h3>server.maxConnections<span><a class=\"mark\" href=\"#net_server_maxconnections\" id=\"net_server_maxconnections\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.2.0</span>\n</div><p>Set this property to reject connections when the server&#39;s connection count gets\nhigh.</p>\n<p>It is not recommended to use this option once a socket has been sent to a child\nwith <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n<h3>server.ref()<span><a class=\"mark\" href=\"#net_server_ref\" id=\"net_server_ref\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.1</span>\n</div><p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em>\nlet the program exit if it&#39;s the only server left (the default behavior). If\nthe server is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>\n<p>Returns <code>server</code>.</p>\n<h3>server.unref()<span><a class=\"mark\" href=\"#net_server_unref\" id=\"net_server_unref\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.1</span>\n</div><p>Calling <code>unref</code> on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.</p>\n<p>Returns <code>server</code>.</p>\n<h2>Class: net.Socket<span><a class=\"mark\" href=\"#net_class_net_socket\" id=\"net_class_net_socket\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.4</span>\n</div><p>This object is an abstraction of a TCP or local socket.  <code>net.Socket</code>\ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with <a href=\"#net_socket_connect_options_connectlistener\"><code>connect()</code></a>) or they can be created by Node.js\nand passed to the user through the <code>&#39;connection&#39;</code> event of a server.</p>\n<h3>new net.Socket(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#net_new_net_socket_options\" id=\"net_new_net_socket_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.4</span>\n</div><p>Construct a new socket object.</p>\n<p><code>options</code> is an object with the following defaults:</p>\n<pre><code class=\"lang-js\">{\n  fd: null,\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}\n</code></pre>\n<p><code>fd</code> allows you to specify the existing file descriptor of socket.\nSet <code>readable</code> and/or <code>writable</code> to <code>true</code> to allow reads and/or writes on this\nsocket (NOTE: Works only when <code>fd</code> is passed).\nAbout <code>allowHalfOpen</code>, refer to <code>createServer()</code> and <code>&#39;end&#39;</code> event.</p>\n<p><code>net.Socket</code> instances are <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#net_event_close_1\" id=\"net_event_close_1\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><code>had_error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> <code>true</code> if the socket had a transmission error.</li>\n</ul>\n<p>Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean\nwhich says if the socket was closed due to a transmission error.</p>\n<h3>Event: &#39;connect&#39;<span><a class=\"mark\" href=\"#net_event_connect\" id=\"net_event_connect\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Emitted when a socket connection is successfully established.\nSee <a href=\"#net_socket_connect_options_connectlistener\"><code>connect()</code></a>.</p>\n<h3>Event: &#39;data&#39;<span><a class=\"mark\" href=\"#net_event_data\" id=\"net_event_data\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Emitted when data is received.  The argument <code>data</code> will be a <code>Buffer</code> or\n<code>String</code>.  Encoding of data is set by <code>socket.setEncoding()</code>.\n(See the <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a> section for more information.)</p>\n<p>Note that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code>\nemits a <code>&#39;data&#39;</code> event.</p>\n<h3>Event: &#39;drain&#39;<span><a class=\"mark\" href=\"#net_event_drain\" id=\"net_event_drain\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p>\n<p>See also: the return values of <code>socket.write()</code></p>\n<h3>Event: &#39;end&#39;<span><a class=\"mark\" href=\"#net_event_end\" id=\"net_event_end\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Emitted when the other end of the socket sends a FIN packet.</p>\n<p>By default (<code>allowHalfOpen == false</code>) the socket will destroy its file\ndescriptor  once it has written out its pending write queue.  However, by\nsetting <code>allowHalfOpen == true</code> the socket will not automatically <code>end()</code>\nits side allowing the user to write arbitrary amounts of data, with the\ncaveat that the user is required to <code>end()</code> their side now.</p>\n<h3>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#net_event_error_1\" id=\"net_event_error_1\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>Emitted when an error occurs.  The <code>&#39;close&#39;</code> event will be called directly\nfollowing this event.</p>\n<h3>Event: &#39;lookup&#39;<span><a class=\"mark\" href=\"#net_event_lookup\" id=\"net_event_lookup\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.3</span>\n</div><p>Emitted after resolving the hostname but before connecting.\nNot applicable to UNIX sockets.</p>\n<ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> The error object.  See <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li>\n<li><code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The IP address.</li>\n<li><code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> The address type.  See <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li>\n<li><code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The hostname.</li>\n</ul>\n<h3>Event: &#39;timeout&#39;<span><a class=\"mark\" href=\"#net_event_timeout\" id=\"net_event_timeout\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.</p>\n<p>See also: <a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a></p>\n<h3>socket.address()<span><a class=\"mark\" href=\"#net_socket_address\" id=\"net_socket_address\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Returns the bound address, the address family name and port of the\nsocket as reported by the operating system. Returns an object with\nthree properties, e.g.\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\n<h3>socket.bufferSize<span><a class=\"mark\" href=\"#net_socket_buffersize\" id=\"net_socket_buffersize\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.8</span>\n</div><p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket&#39;s file descriptor for being writable).</p>\n<p>The consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)</p>\n<p>Users who experience large or growing <code>bufferSize</code> should attempt to\n&quot;throttle&quot; the data flows in their program with <a href=\"#net_socket_pause\"><code>pause()</code></a> and <a href=\"#net_socket_resume\"><code>resume()</code></a>.</p>\n<h3>socket.bytesRead<span><a class=\"mark\" href=\"#net_socket_bytesread\" id=\"net_socket_bytesread\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.3</span>\n</div><p>The amount of received bytes.</p>\n<h3>socket.bytesWritten<span><a class=\"mark\" href=\"#net_socket_byteswritten\" id=\"net_socket_byteswritten\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.3</span>\n</div><p>The amount of bytes sent.</p>\n<h3>socket.connect(options[, connectListener])<span><a class=\"mark\" href=\"#net_socket_connect_options_connectlistener\" id=\"net_socket_connect_options_connectlistener\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Opens the connection for a given socket.</p>\n<p>For TCP sockets, <code>options</code> argument should be an object which specifies:</p>\n<ul>\n<li><p><code>port</code>: Port the client should connect to (Required).</p>\n</li>\n<li><p><code>host</code>: Host the client should connect to. Defaults to <code>&#39;localhost&#39;</code>.</p>\n</li>\n<li><p><code>localAddress</code>: Local interface to bind to for network connections.</p>\n</li>\n<li><p><code>localPort</code>: Local port to bind to for network connections.</p>\n</li>\n<li><p><code>family</code> : Version of IP stack. Defaults to <code>4</code>.</p>\n</li>\n<li><p><code>hints</code>: <a href=\"dns.html#dns_supported_getaddrinfo_flags\"><code>dns.lookup()</code> hints</a>. Defaults to <code>0</code>.</p>\n</li>\n<li><p><code>lookup</code> : Custom lookup function. Defaults to <code>dns.lookup</code>.</p>\n</li>\n</ul>\n<p>For local domain sockets, <code>options</code> argument should be an object which\nspecifies:</p>\n<ul>\n<li><code>path</code>: Path the client should connect to (Required).</li>\n</ul>\n<p>Normally this method is not needed, as <code>net.createConnection</code> opens the\nsocket. Use this only if you are implementing a custom Socket.</p>\n<p>This function is asynchronous. When the <a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event is emitted the\nsocket is established. If there is a problem connecting, the <code>&#39;connect&#39;</code> event\nwill not be emitted, the <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> event will be emitted with the exception.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event.</p>\n<h3>socket.connect(path[, connectListener])<span><a class=\"mark\" href=\"#net_socket_connect_path_connectlistener\" id=\"net_socket_connect_path_connectlistener\">#</a></span></h3>\n<h3>socket.connect(port[, host][, connectListener])<span><a class=\"mark\" href=\"#net_socket_connect_port_host_connectlistener\" id=\"net_socket_connect_port_host_connectlistener\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>As <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>,\nwith options either as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p>\n<h3>socket.connecting<span><a class=\"mark\" href=\"#net_socket_connecting\" id=\"net_socket_connecting\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.1.0</span>\n</div><p>If <code>true</code> - <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a> was called and\nhaven&#39;t yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event\nand/or calling <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>&#39;s callback.</p>\n<h3>socket.destroy()<span><a class=\"mark\" href=\"#net_socket_destroy\" id=\"net_socket_destroy\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).</p>\n<h3>socket.end([data][, encoding])<span><a class=\"mark\" href=\"#net_socket_end_data_encoding\" id=\"net_socket_end_data_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<code>socket.write(data, encoding)</code> followed by <code>socket.end()</code>.</p>\n<h3>socket.localAddress<span><a class=\"mark\" href=\"#net_socket_localaddress\" id=\"net_socket_localaddress\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.6</span>\n</div><p>The string representation of the local IP address the remote client is\nconnecting on. For example, if you are listening on <code>&#39;0.0.0.0&#39;</code> and the\nclient connects on <code>&#39;192.168.1.1&#39;</code>, the value would be <code>&#39;192.168.1.1&#39;</code>.</p>\n<h3>socket.localPort<span><a class=\"mark\" href=\"#net_socket_localport\" id=\"net_socket_localport\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.6</span>\n</div><p>The numeric representation of the local port. For example,\n<code>80</code> or <code>21</code>.</p>\n<h3>socket.pause()<span><a class=\"mark\" href=\"#net_socket_pause\" id=\"net_socket_pause\">#</a></span></h3>\n<p>Pauses the reading of data. That is, <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events will not be emitted.\nUseful to throttle back an upload.</p>\n<h3>socket.ref()<span><a class=\"mark\" href=\"#net_socket_ref\" id=\"net_socket_ref\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.1</span>\n</div><p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em>\nlet the program exit if it&#39;s the only socket left (the default behavior). If\nthe socket is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>\n<p>Returns <code>socket</code>.</p>\n<h3>socket.remoteAddress<span><a class=\"mark\" href=\"#net_socket_remoteaddress\" id=\"net_socket_remoteaddress\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.10</span>\n</div><p>The string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>. Value may be <code>undefined</code> if\nthe socket is destroyed (for example, if the client disconnected).</p>\n<h3>socket.remoteFamily<span><a class=\"mark\" href=\"#net_socket_remotefamily\" id=\"net_socket_remotefamily\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.14</span>\n</div><p>The string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\n<h3>socket.remotePort<span><a class=\"mark\" href=\"#net_socket_remoteport\" id=\"net_socket_remoteport\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.10</span>\n</div><p>The numeric representation of the remote port. For example,\n<code>80</code> or <code>21</code>.</p>\n<h3>socket.resume()<span><a class=\"mark\" href=\"#net_socket_resume\" id=\"net_socket_resume\">#</a></span></h3>\n<p>Resumes reading after a call to <a href=\"#net_socket_pause\"><code>pause()</code></a>.</p>\n<h3>socket.setEncoding([encoding])<span><a class=\"mark\" href=\"#net_socket_setencoding_encoding\" id=\"net_socket_setencoding_encoding\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Set the encoding for the socket as a <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a>. See\n<a href=\"stream.html#stream_readable_setencoding_encoding\"><code>stream.setEncoding()</code></a> for more information.</p>\n<h3>socket.setKeepAlive([enable][, initialDelay])<span><a class=\"mark\" href=\"#net_socket_setkeepalive_enable_initialdelay\" id=\"net_socket_setkeepalive_enable_initialdelay\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.92</span>\n</div><p>Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n<code>enable</code> defaults to <code>false</code>.</p>\n<p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting 0 for\ninitialDelay will leave the value unchanged from the default\n(or previous) setting. Defaults to <code>0</code>.</p>\n<p>Returns <code>socket</code>.</p>\n<h3>socket.setNoDelay([noDelay])<span><a class=\"mark\" href=\"#net_socket_setnodelay_nodelay\" id=\"net_socket_setnodelay_nodelay\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting <code>true</code> for\n<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.\n<code>noDelay</code> defaults to <code>true</code>.</p>\n<p>Returns <code>socket</code>.</p>\n<h3>socket.setTimeout(timeout[, callback])<span><a class=\"mark\" href=\"#net_socket_settimeout_timeout_callback\" id=\"net_socket_settimeout_timeout_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on\nthe socket. By default <code>net.Socket</code> do not have a timeout.</p>\n<p>When an idle timeout is triggered the socket will receive a <a href=\"#net_event_timeout\"><code>&#39;timeout&#39;</code></a>\nevent but the connection will not be severed. The user must manually <a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a>\nor <a href=\"#net_socket_destroy\"><code>destroy()</code></a> the socket.</p>\n<p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p>\n<p>The optional <code>callback</code> parameter will be added as a one time listener for the\n<a href=\"#net_event_timeout\"><code>&#39;timeout&#39;</code></a> event.</p>\n<p>Returns <code>socket</code>.</p>\n<h3>socket.unref()<span><a class=\"mark\" href=\"#net_socket_unref\" id=\"net_socket_unref\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.1</span>\n</div><p>Calling <code>unref</code> on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already <code>unref</code>d calling\n<code>unref</code> again will have no effect.</p>\n<p>Returns <code>socket</code>.</p>\n<h3>socket.write(data[, encoding][, callback])<span><a class=\"mark\" href=\"#net_socket_write_data_encoding_callback\" id=\"net_socket_write_data_encoding_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<a href=\"#stream_event_drain\"><code>&#39;drain&#39;</code></a> will be emitted when the buffer is again free.</p>\n<p>The optional <code>callback</code> parameter will be executed when the data is finally\nwritten out - this may not be immediately.</p>\n<h2>net.connect(options[, connectListener])<span><a class=\"mark\" href=\"#net_net_connect_options_connectlistener\" id=\"net_net_connect_options_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><p>A factory function, which returns a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects with the supplied <code>options</code>.</p>\n<p>The options are passed to both the <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> constructor and the\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect</code></a> method.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<p>Here is an example of a client of the previously described echo server:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst client = net.connect({port: 8124}, () =&gt; {\n  // &#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\\r\\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n</code></pre>\n<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to</p>\n<pre><code class=\"lang-js\">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n</code></pre>\n<h2>net.connect(path[, connectListener])<span><a class=\"mark\" href=\"#net_net_connect_path_connectlistener\" id=\"net_net_connect_path_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>A factory function, which returns a new unix <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects to the supplied <code>path</code>.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<h2>net.connect(port[, host][, connectListener])<span><a class=\"mark\" href=\"#net_net_connect_port_host_connectlistener\" id=\"net_net_connect_port_host_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>A factory function, which returns a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.</p>\n<p>If <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<h2>net.createConnection(options[, connectListener])<span><a class=\"mark\" href=\"#net_net_createconnection_options_connectlistener\" id=\"net_net_createconnection_options_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>A factory function, which returns a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects with the supplied <code>options</code>.</p>\n<p>The options are passed to both the <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> constructor and the\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect</code></a> method.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<p>Here is an example of a client of the previously described echo server:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst client = net.createConnection({port: 8124}, () =&gt; {\n  //&#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\\r\\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n</code></pre>\n<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to</p>\n<pre><code class=\"lang-js\">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\n</code></pre>\n<h2>net.createConnection(path[, connectListener])<span><a class=\"mark\" href=\"#net_net_createconnection_path_connectlistener\" id=\"net_net_createconnection_path_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>A factory function, which returns a new unix <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects to the supplied <code>path</code>.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<h2>net.createConnection(port[, host][, connectListener])<span><a class=\"mark\" href=\"#net_net_createconnection_port_host_connectlistener\" id=\"net_net_createconnection_port_host_connectlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.90</span>\n</div><p>A factory function, which returns a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> and automatically\nconnects to the supplied <code>port</code> and <code>host</code>.</p>\n<p>If <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.</p>\n<p>The <code>connectListener</code> parameter will be added as a listener for the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event once.</p>\n<h2>net.createServer([options][, connectionListener])<span><a class=\"mark\" href=\"#net_net_createserver_options_connectionlistener\" id=\"net_net_createserver_options_connectionlistener\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>Creates a new server. The <code>connectionListener</code> argument is\nautomatically set as a listener for the <a href=\"#net_event_connection\"><code>&#39;connection&#39;</code></a> event.</p>\n<p><code>options</code> is an object with the following defaults:</p>\n<pre><code class=\"lang-js\">{\n  allowHalfOpen: false,\n  pauseOnConnect: false\n}\n</code></pre>\n<p>If <code>allowHalfOpen</code> is <code>true</code>, then the socket won&#39;t automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the <a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> method explicitly.\nSee <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event for more information.</p>\n<p>If <code>pauseOnConnect</code> is <code>true</code>, then the socket associated with each incoming\nconnection will be paused, and no data will be read from its handle. This allows\nconnections to be passed between processes without any data being read by the\noriginal process. To begin reading data from a paused socket, call <a href=\"#net_socket_resume\"><code>resume()</code></a>.</p>\n<p>Here is an example of an echo server which listens for connections\non port 8124:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst server = net.createServer((c) =&gt; {\n  // &#39;connection&#39; listener\n  console.log(&#39;client connected&#39;);\n  c.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;client disconnected&#39;);\n  });\n  c.write(&#39;hello\\r\\n&#39;);\n  c.pipe(c);\n});\nserver.on(&#39;error&#39;, (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Test this by using <code>telnet</code>:</p>\n<pre><code>telnet localhost 8124\n</code></pre><p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would\njust be changed to</p>\n<pre><code class=\"lang-js\">server.listen(&#39;/tmp/echo.sock&#39;, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Use <code>nc</code> to connect to a UNIX domain socket server:</p>\n<pre><code class=\"lang-js\">nc -U /tmp/echo.sock\n</code></pre>\n<h2>net.isIP(input)<span><a class=\"mark\" href=\"#net_net_isip_input\" id=\"net_net_isip_input\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.0</span>\n</div><p>Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</p>\n<h2>net.isIPv4(input)<span><a class=\"mark\" href=\"#net_net_isipv4_input\" id=\"net_net_isipv4_input\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.0</span>\n</div><p>Returns true if input is a version 4 IP address, otherwise returns false.</p>\n<h2>net.isIPv6(input)<span><a class=\"mark\" href=\"#net_net_isipv6_input\" id=\"net_net_isipv6_input\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.0</span>\n</div><p>Returns true if input is a version 6 IP address, otherwise returns false.</p>\n<!-- [end-include:net.md] -->\n<!-- [start-include:os.md] -->\n<h1>OS<span><a class=\"mark\" href=\"#os_os\" id=\"os_os\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>Provides a few basic operating-system related utility functions.</p>\n<p>Use <code>require(&#39;os&#39;)</code> to access this module.</p>\n<h2>os.EOL<span><a class=\"mark\" href=\"#os_os_eol\" id=\"os_os_eol\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.8</span>\n</div><p>A constant defining the appropriate End-of-line marker for the operating\nsystem.</p>\n<h2>os.arch()<span><a class=\"mark\" href=\"#os_os_arch\" id=\"os_os_arch\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>Returns the operating system CPU architecture. Possible values are <code>&#39;x64&#39;</code>,\n<code>&#39;arm&#39;</code> and <code>&#39;ia32&#39;</code>. Returns the value of <a href=\"process.html#process_process_arch\"><code>process.arch</code></a>.</p>\n<h2>os.cpus()<span><a class=\"mark\" href=\"#os_os_cpus\" id=\"os_os_cpus\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns an array of objects containing information about each CPU/core\ninstalled: model, speed (in MHz), and times (an object containing the number of\nmilliseconds the CPU/core spent in: user, nice, sys, idle, and irq).</p>\n<p>Example inspection of os.cpus:</p>\n<pre><code class=\"lang-js\">[ { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 252020,\n       nice: 0,\n       sys: 30340,\n       idle: 1070356870,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 306960,\n       nice: 0,\n       sys: 26980,\n       idle: 1071569080,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 248450,\n       nice: 0,\n       sys: 21750,\n       idle: 1070919370,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 256880,\n       nice: 0,\n       sys: 19430,\n       idle: 1070905480,\n       irq: 20 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 511580,\n       nice: 20,\n       sys: 40900,\n       idle: 1070842510,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 291660,\n       nice: 0,\n       sys: 34360,\n       idle: 1070888000,\n       irq: 10 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 308260,\n       nice: 0,\n       sys: 55410,\n       idle: 1071129970,\n       irq: 880 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 266450,\n       nice: 1480,\n       sys: 34920,\n       idle: 1072572010,\n       irq: 30 } } ]\n</code></pre>\n<p>Note that since <code>nice</code> values are UNIX centric in Windows the <code>nice</code> values of\nall processors are always 0.</p>\n<h2>os.endianness()<span><a class=\"mark\" href=\"#os_os_endianness\" id=\"os_os_endianness\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.4</span>\n</div><p>Returns the endianness of the CPU. Possible values are <code>&#39;BE&#39;</code> for big endian\nor <code>&#39;LE&#39;</code> for little endian.</p>\n<h2>os.freemem()<span><a class=\"mark\" href=\"#os_os_freemem\" id=\"os_os_freemem\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the amount of free system memory in bytes.</p>\n<h2>os.homedir()<span><a class=\"mark\" href=\"#os_os_homedir\" id=\"os_os_homedir\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.3.0</span>\n</div><p>Returns the home directory of the current user.</p>\n<h2>os.hostname()<span><a class=\"mark\" href=\"#os_os_hostname\" id=\"os_os_hostname\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the hostname of the operating system.</p>\n<h2>os.loadavg()<span><a class=\"mark\" href=\"#os_os_loadavg\" id=\"os_os_loadavg\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns an array containing the 1, 5, and 15 minute load averages.</p>\n<p>The load average is a measure of system activity, calculated by the operating\nsystem and expressed as a fractional number.  As a rule of thumb, the load\naverage should ideally be less than the number of logical CPUs in the system.</p>\n<p>The load average is a very UNIX-y concept; there is no real equivalent on\nWindows platforms.  That is why this function always returns <code>[0, 0, 0]</code> on\nWindows.</p>\n<h2>os.networkInterfaces()<span><a class=\"mark\" href=\"#os_os_networkinterfaces\" id=\"os_os_networkinterfaces\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><p>Get a list of network interfaces:</p>\n<pre><code class=\"lang-js\">{ lo:\n   [ { address: &#39;127.0.0.1&#39;,\n       netmask: &#39;255.0.0.0&#39;,\n       family: &#39;IPv4&#39;,\n       mac: &#39;00:00:00:00:00:00&#39;,\n       internal: true },\n     { address: &#39;::1&#39;,\n       netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,\n       family: &#39;IPv6&#39;,\n       mac: &#39;00:00:00:00:00:00&#39;,\n       internal: true } ],\n  eth0:\n   [ { address: &#39;192.168.1.108&#39;,\n       netmask: &#39;255.255.255.0&#39;,\n       family: &#39;IPv4&#39;,\n       mac: &#39;01:02:03:0a:0b:0c&#39;,\n       internal: false },\n     { address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,\n       netmask: &#39;ffff:ffff:ffff:ffff::&#39;,\n       family: &#39;IPv6&#39;,\n       mac: &#39;01:02:03:0a:0b:0c&#39;,\n       internal: false } ] }\n</code></pre>\n<p>Note that due to the underlying implementation this will only return network\ninterfaces that have been assigned an address.</p>\n<h2>os.platform()<span><a class=\"mark\" href=\"#os_os_platform\" id=\"os_os_platform\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>Returns the operating system platform. Possible values are <code>&#39;darwin&#39;</code>,\n<code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code>. Returns the value of\n<a href=\"process.html#process_process_platform\"><code>process.platform</code></a>.</p>\n<h2>os.release()<span><a class=\"mark\" href=\"#os_os_release\" id=\"os_os_release\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the operating system release.</p>\n<h2>os.tmpdir()<span><a class=\"mark\" href=\"#os_os_tmpdir\" id=\"os_os_tmpdir\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.9</span>\n</div><p>Returns the operating system&#39;s default directory for temporary files.</p>\n<h2>os.totalmem()<span><a class=\"mark\" href=\"#os_os_totalmem\" id=\"os_os_totalmem\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the total amount of system memory in bytes.</p>\n<h2>os.type()<span><a class=\"mark\" href=\"#os_os_type\" id=\"os_os_type\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the operating system name. For example <code>&#39;Linux&#39;</code> on Linux, <code>&#39;Darwin&#39;</code>\non OS X and <code>&#39;Windows_NT&#39;</code> on Windows.</p>\n<h2>os.uptime()<span><a class=\"mark\" href=\"#os_os_uptime\" id=\"os_os_uptime\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><p>Returns the system uptime in seconds.</p>\n<h2>os.userInfo(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#os_os_userinfo_options\" id=\"os_os_userinfo_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Character encoding used to interpret resulting strings.\nIf <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the <code>username</code>, <code>shell</code>, and <code>homedir</code>\nvalues will be <code>Buffer</code> instances. (Default: &#39;utf8&#39;)</li>\n</ul>\n</li>\n</ul>\n<p>Returns a subset of the password file entry for the current effective user. The\nreturned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.\nOn Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p>\n<p>The value of <code>homedir</code> returned by <code>userInfo()</code> comes directly from the\noperating system. This differs from the result of <code>os.homedir()</code>, which queries\nseveral environment variables for the home directory before falling back to the\noperating system response.</p>\n<!-- [end-include:os.md] -->\n<!-- [start-include:path.md] -->\n<h1>Path<span><a class=\"mark\" href=\"#path_path\" id=\"path_path\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const path = require(&#39;path&#39;);\n</code></pre>\n<h2>Windows vs. POSIX<span><a class=\"mark\" href=\"#path_windows_vs_posix\" id=\"path_windows_vs_posix\">#</a></span></h2>\n<p>The default operation of the <code>path</code> module varies based on the operating system\non which a Node.js application is running. Specifically, when running on a\nWindows operating system, the <code>path</code> module will assume that Windows-style\npaths are being used.</p>\n<p>For example, using the <code>path.basename()</code> function with the Windows file path\n<code>C:\\temp\\myfile.html</code>, will yield different results when running on POSIX than\nwhen run on Windows:</p>\n<p>On POSIX:</p>\n<pre><code class=\"lang-js\">path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n  // returns &#39;C:\\temp\\myfile.html&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n  // returns &#39;myfile.html&#39;\n</code></pre>\n<p>To achieve consistent results when working with Windows file paths on any\noperating system, use <a href=\"#path_path_win32\"><code>path.win32</code></a>:</p>\n<p>On POSIX and Windows:</p>\n<pre><code class=\"lang-js\">path.win32.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n  // returns &#39;myfile.html&#39;\n</code></pre>\n<p>To achieve consistent results when working with POSIX file paths on any\noperating system, use <a href=\"#path_path_posix\"><code>path.posix</code></a>:</p>\n<p>On POSIX and Windows:</p>\n<pre><code class=\"lang-js\">path.posix.basename(&#39;/tmp/myfile.html&#39;);\n  // returns &#39;myfile.html&#39;\n</code></pre>\n<h2>path.basename(path[, ext])<span><a class=\"mark\" href=\"#path_path_basename_path_ext\" id=\"path_path_basename_path_ext\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> An optional file extension</li>\n</ul>\n<p>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to\nthe Unix <code>basename</code> command.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;)\n  // returns &#39;quux.html&#39;\n\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;)\n  // returns &#39;quux&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string or if <code>ext</code> is given\nand is not a string.</p>\n<h2>path.delimiter<span><a class=\"mark\" href=\"#path_path_delimiter\" id=\"path_path_delimiter\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.3</span>\n</div><p>Provides the platform-specific path delimiter:</p>\n<ul>\n<li><code>;</code> for Windows</li>\n<li><code>:</code> for POSIX</li>\n</ul>\n<p>For example, on POSIX:</p>\n<pre><code class=\"lang-js\">console.log(process.env.PATH)\n// &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// returns [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">console.log(process.env.PATH)\n// &#39;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\&#39;\n\nprocess.env.PATH.split(path.delimiter)\n// returns [&#39;C:\\\\Windows\\\\system32&#39;, &#39;C:\\\\Windows&#39;, &#39;C:\\\\Program Files\\\\node\\\\&#39;]\n</code></pre>\n<h2>path.dirname(path)<span><a class=\"mark\" href=\"#path_path_dirname_path\" id=\"path_path_dirname_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to\nthe Unix <code>dirname</code> command.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;)\n// returns &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n<h2>path.extname(path)<span><a class=\"mark\" href=\"#path_path_extname_path\" id=\"path_path_extname_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last\noccurance of the <code>.</code> (period) character to end of string in the last portion of\nthe <code>path</code>.  If there is no <code>.</code> in the last portion of the <code>path</code>, or if the\nfirst character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then\nan empty string is returned.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">path.extname(&#39;index.html&#39;)\n// returns &#39;.html&#39;\n\npath.extname(&#39;index.coffee.md&#39;)\n// returns &#39;.md&#39;\n\npath.extname(&#39;index.&#39;)\n// returns &#39;.&#39;\n\npath.extname(&#39;index&#39;)\n// returns &#39;&#39;\n\npath.extname(&#39;.index&#39;)\n// returns &#39;&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n<h2>path.format(pathObject)<span><a class=\"mark\" href=\"#path_path_format_pathobject\" id=\"path_path_format_pathobject\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><ul>\n<li><code>pathObject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>root</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> </li>\n<li><code>base</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The <code>path.format()</code> method returns a path string from an object. This is the\nopposite of <a href=\"#path_path_parse_path\"><code>path.parse()</code></a>.</p>\n<p>The following process is used when constructing the path string:</p>\n<ul>\n<li><code>output</code> is set to an empty string.</li>\n<li>If <code>pathObject.dir</code> is specified, <code>pathObject.dir</code> is appended to <code>output</code>\nfollowed by the value of <code>path.sep</code>;</li>\n<li>Otherwise, if <code>pathObject.root</code> is specified, <code>pathObject.root</code> is appended\nto <code>output</code>.</li>\n<li>If <code>pathObject.base</code> is specified, <code>pathObject.base</code> is appended to <code>output</code>;</li>\n<li>Otherwise:<ul>\n<li>If <code>pathObject.name</code> is specified, <code>pathObject.name</code> is appended to <code>output</code></li>\n<li>If <code>pathObject.ext</code> is specified, <code>pathObject.ext</code> is appended to <code>output</code>.</li>\n</ul>\n</li>\n<li>Return <code>output</code></li>\n</ul>\n<p>For example, on POSIX:</p>\n<pre><code class=\"lang-js\">// If `dir` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned.\npath.format({\n  dir: &#39;/home/user/dir&#39;,\n  base: &#39;file.txt&#39;\n});\n// returns &#39;/home/user/dir/file.txt&#39;\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included.\npath.format({\n  root: &#39;/&#39;,\n  base: &#39;file.txt&#39;\n});\n// returns &#39;/file.txt&#39;\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: &#39;/&#39;,\n  name: &#39;file&#39;,\n  ext: &#39;.txt&#39;\n});\n// returns &#39;/file.txt&#39;\n\n// `base` will be returned if `dir` or `root` are not provided.\npath.format({\n  base: &#39;file.txt&#39;\n});\n// returns &#39;file.txt&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.format({\n    root : &quot;C:\\\\&quot;,\n    dir : &quot;C:\\\\path\\\\dir&quot;,\n    base : &quot;file.txt&quot;,\n    ext : &quot;.txt&quot;,\n    name : &quot;file&quot;\n})\n// returns &#39;C:\\\\path\\\\dir\\\\file.txt&#39;\n</code></pre>\n<h2>path.isAbsolute(path)<span><a class=\"mark\" href=\"#path_path_isabsolute_path\" id=\"path_path_isabsolute_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.2</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>\n<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.isAbsolute(&#39;/foo/bar&#39;) // true\npath.isAbsolute(&#39;/baz/..&#39;)  // true\npath.isAbsolute(&#39;qux/&#39;)     // false\npath.isAbsolute(&#39;.&#39;)        // false\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.isAbsolute(&#39;//server&#39;)  // true\npath.isAbsolute(&#39;C:/foo/..&#39;) // true\npath.isAbsolute(&#39;bar\\\\baz&#39;)  // false\npath.isAbsolute(&#39;.&#39;)         // false\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n<h2>path.join([path[, ...]])<span><a class=\"mark\" href=\"#path_path_join_path\" id=\"path_path_join_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><ul>\n<li><code>[path[, ...]]</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A sequence of path segments</li>\n</ul>\n<p>The <code>path.join()</code> method join all given <code>path</code> segments together using the\nplatform specific separator as a delimiter, then normalizes the resulting path.</p>\n<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a\nzero-length string then <code>&#39;.&#39;</code> will be returned, representing the current\nworking directory.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;)\n// returns &#39;/foo/bar/baz/asdf&#39;\n\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n// throws TypeError: Arguments to path.join must be strings\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the path segments is not a string.</p>\n<h2>path.normalize(path)<span><a class=\"mark\" href=\"#path_path_normalize_path\" id=\"path_path_normalize_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.23</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>&#39;..&#39;</code> and\n<code>&#39;.&#39;</code> segments.</p>\n<p>When multiple, sequential path segment separation characters are found (e.g.\n<code>/</code> on POSIX and <code>\\</code> on Windows), they are replaced by a single instance of the\nplatform specific path segment separator. Trailing separators are preserved.</p>\n<p>If the <code>path</code> is a zero-length string, <code>&#39;.&#39;</code> is returned, representing the\ncurrent working directory.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;)\n// returns &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.normalize(&#39;C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\&#39;);\n// returns &#39;C:\\\\temp\\\\foo\\\\&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n<h2>path.parse(path)<span><a class=\"mark\" href=\"#path_path_parse_path\" id=\"path_path_parse_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.parse()</code> method returns an object whose properties represent\nsignificant elements of the <code>path</code>.</p>\n<p>The returned object will have the following properties:</p>\n<ul>\n<li><code>root</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>base</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.parse(&#39;/home/user/dir/file.txt&#39;)\n// returns\n// {\n//    root : &quot;/&quot;,\n//    dir : &quot;/home/user/dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre>\n<pre><code class=\"lang-text\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          dir        \u2502    base    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\n&quot;  /    home/user/dir / file  .txt &quot;\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.parse(&#39;C:\\\\path\\\\dir\\\\file.txt&#39;)\n// returns\n// {\n//    root : &quot;C:\\\\&quot;,\n//    dir : &quot;C:\\\\path\\\\dir&quot;,\n//    base : &quot;file.txt&quot;,\n//    ext : &quot;.txt&quot;,\n//    name : &quot;file&quot;\n// }\n</code></pre>\n<pre><code class=\"lang-text\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          dir        \u2502    base    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\n&quot; C:\\      path\\dir   \\ file  .txt &quot;\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n<h2>path.posix<span><a class=\"mark\" href=\"#path_path_posix\" id=\"path_path_posix\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><p>The <code>path.posix</code> property provides access to POSIX specific implementations\nof the <code>path</code> methods.</p>\n<h2>path.relative(from, to)<span><a class=\"mark\" href=\"#path_path_relative_from_to\" id=\"path_path_relative_from_to\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><ul>\n<li><code>from</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>to</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>.\nIf <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code>\non each), a zero-length string is returned.</p>\n<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working\ndirectory will be used instead of the zero-length strings.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;)\n// returns &#39;../../impl/bbb&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;, &#39;C:\\\\orandea\\\\impl\\\\bbb&#39;)\n// returns &#39;..\\\\..\\\\impl\\\\bbb&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if neither <code>from</code> nor <code>to</code> is a string.</p>\n<h2>path.resolve([path[, ...]])<span><a class=\"mark\" href=\"#path_path_resolve_path\" id=\"path_path_resolve_path\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.4</span>\n</div><ul>\n<li><code>[path[, ...]]</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A sequence of paths or path segments</li>\n</ul>\n<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into\nan absolute path.</p>\n<p>The given sequence of paths is processed from right to left, with each\nsubsequent <code>path</code> prepended until an absolute path is constructed.\nFor instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,\ncalling <code>path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;)</code> would return <code>/bar/baz</code>.</p>\n<p>If after processing all given <code>path</code> segments an absolute path has not yet\nbeen generated, the current working directory is used.</p>\n<p>The resulting path is normalized and trailing slashes are removed unless the\npath is resolved to the root directory.</p>\n<p>Zero-length <code>path</code> segments are ignored.</p>\n<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path\nof the current working directory.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\n// returns &#39;/foo/bar/baz&#39;\n\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\n// returns &#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\n// if the current working directory is /home/myself/node,\n// this returns &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the arguments is not a string.</p>\n<h2>path.sep<span><a class=\"mark\" href=\"#path_path_sep\" id=\"path_path_sep\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.9</span>\n</div><p>Provides the platform-specific path segment separator:</p>\n<ul>\n<li><code>\\</code> on Windows</li>\n<li><code>/</code> on POSIX</li>\n</ul>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">&#39;foo/bar/baz&#39;.split(path.sep)\n// returns [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">&#39;foo\\\\bar\\\\baz&#39;.split(path.sep)\n// returns [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\n<h2>path.win32<span><a class=\"mark\" href=\"#path_path_win32\" id=\"path_path_win32\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.15</span>\n</div><p>The <code>path.win32</code> property provides access to Windows-specific implementations\nof the <code>path</code> methods.</p>\n<!-- [end-include:path.md] -->\n<!-- [start-include:process.md] -->\n<h1>process<span><a class=\"mark\" href=\"#process_process\" id=\"process_process\">#</a></span></h1>\n<!-- type=global -->\n<p>The <code>process</code> object is a <code>global</code> that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using <code>require()</code>.</p>\n<h2>Process Events<span><a class=\"mark\" href=\"#process_process_events\" id=\"process_process_events\">#</a></span></h2>\n<p>The <code>process</code> object is an instance of <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a>.</p>\n<h3>Event: &#39;beforeExit&#39;<span><a class=\"mark\" href=\"#process_event_beforeexit\" id=\"process_event_beforeexit\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>The <code>&#39;beforeExit&#39;</code> event is emitted when Node.js empties its event loop and has\nno additional work to schedule. Normally, the Node.js process will exit when\nthere is no work scheduled, but a listener registered on the <code>&#39;beforeExit&#39;</code>\nevent can make asynchronous calls, and thereby cause the Node.js process to\ncontinue.</p>\n<p>The listener callback function is invoked with the value of\n[<code>process.exitCode</code>][] passed as the only argument.</p>\n<p>The <code>&#39;beforeExit&#39;</code> event is <em>not</em> emitted for conditions causing explicit\ntermination, such as calling <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> or uncaught exceptions.</p>\n<p>The <code>&#39;beforeExit&#39;</code> should <em>not</em> be used as an alternative to the <code>&#39;exit&#39;</code> event\nunless the intention is to schedule additional work.</p>\n<h3>Event: &#39;disconnect&#39;<span><a class=\"mark\" href=\"#process_event_disconnect\" id=\"process_event_disconnect\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;disconnect&#39;</code> event will be emitted when\nthe IPC channel is closed.</p>\n<h3>Event: &#39;exit&#39;<span><a class=\"mark\" href=\"#process_event_exit\" id=\"process_event_exit\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.7</span>\n</div><p>The <code>&#39;exit&#39;</code> event is emitted when the Node.js process is about to exit as a\nresult of either:</p>\n<ul>\n<li>The <code>process.exit()</code> method being called explicitly;</li>\n<li>The Node.js event loop no longer having any additional work to perform.</li>\n</ul>\n<p>There is no way to prevent the exiting of the event loop at this point, and once\nall <code>&#39;exit&#39;</code> listeners have finished running the Node.js process will terminate.</p>\n<p>The listener callback function is invoked with the exit code specified either\nby the [<code>process.exitCode</code>][] property, or the <code>exitCode</code> argument passed to the\n<a href=\"#process_process_exit_code\"><code>process.exit()</code></a> method, as the only argument.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  console.log(`About to exit with code: ${code}`);\n});\n</code></pre>\n<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js\nprocess will exit immediately after calling the <code>&#39;exit&#39;</code> event listeners\ncausing any additional work still queued in the event loop to be abandoned.\nIn the following example, for instance, the timeout will never occur:</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  setTimeout(() =&gt; {\n    console.log(&#39;This will not run&#39;);\n  }, 0);\n});\n</code></pre>\n<h3>Event: &#39;message&#39;<span><a class=\"mark\" href=\"#process_event_message\" id=\"process_event_message\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.10</span>\n</div><p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;message&#39;</code> event is emitted whenever a\nmessage sent by a parent process using <a href=\"child_process.html#child_process_child_send_message_sendhandle_options_callback\"><code>childprocess.send()</code></a> is received by\nthe child process.</p>\n<p>The listener callback is invoked with the following arguments:</p>\n<ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> a parsed JSON object or primitive value</li>\n<li><code>sendHandle</code> <span class=\"type\">&lt;Handle object&gt;</span> a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> or <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> object, or\nundefined.</li>\n</ul>\n<h3>Event: &#39;rejectionHandled&#39;<span><a class=\"mark\" href=\"#process_event_rejectionhandled\" id=\"process_event_rejectionhandled\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.4.1</span>\n</div><p>The <code>&#39;rejectionHandled&#39;</code> event is emitted whenever a <code>Promise</code> has been rejected\nand an error handler was attached to it (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a>, for\nexample) later than one turn of the Node.js event loop.</p>\n<p>The listener callback is invoked with a reference to the rejected <code>Promise</code> as\nthe only argument.</p>\n<p>The <code>Promise</code> object would have previously been emitted in an\n<code>&#39;unhandledRejection&#39;</code> event, but during the course of processing gained a\nrejection handler.</p>\n<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can\nalways be handled. Being inherently asynchronous in nature, a <code>Promise</code>\nrejection can be handled at a future point in time \u2014 possibly much later than\nthe event loop turn it takes for the <code>&#39;unhandledRejection&#39;</code> event to be emitted.</p>\n<p>Another way of stating this is that, unlike in synchronous code where there is\nan ever-growing list of unhandled exceptions, with Promises there can be a\ngrowing-and-shrinking list of unhandled rejections.</p>\n<p>In synchronous code, the <code>&#39;uncaughtException&#39;</code> event is emitted when the list of\nunhandled exceptions grows.</p>\n<p>In asynchronous code, the <code>&#39;unhandledRejection&#39;</code> event is emitted when the list\nof unhandled rejections grows, and the <code>&#39;rejectionHandled&#39;</code> event is emitted\nwhen the list of unhandled rejections shrinks.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const unhandledRejections = new Map();\nprocess.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\n  unhandledRejections.set(p, reason);\n});\nprocess.on(&#39;rejectionHandled&#39;, (p) =&gt; {\n  unhandledRejections.delete(p);\n});\n</code></pre>\n<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,\nreflecting rejections that start unhandled and then become handled. It is\npossible to record such errors in an error log, either periodically (which is\nlikely best for long-running application) or upon process exit (which is likely\nmost convenient for scripts).</p>\n<h3>Event: &#39;uncaughtException&#39;<span><a class=\"mark\" href=\"#process_event_uncaughtexception\" id=\"process_event_uncaughtexception\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.18</span>\n</div><p>The <code>&#39;uncaughtException&#39;</code> event is emitted when an exception bubbles all the\nway back to the event loop. By default, Node.js handles such exceptions by\nprinting the stack trace to <code>stderr</code> and exiting. Adding a handler for the\n<code>&#39;uncaughtException&#39;</code> event overrides this default behavior.</p>\n<p>The listener function is called with the <code>Error</code> object passed as the only\nargument.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">process.on(&#39;uncaughtException&#39;, (err) =&gt; {\n  console.log(`Caught exception: ${err}`);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;This will still run.&#39;);\n}, 500);\n\n// Intentionally cause an exception, but don&#39;t catch it.\nnonexistentFunc();\nconsole.log(&#39;This will not run.&#39;);\n</code></pre>\n<h4>Warning: Using <code>&#39;uncaughtException&#39;</code> correctly<span><a class=\"mark\" href=\"#process_warning_using_uncaughtexception_correctly\" id=\"process_warning_using_uncaughtexception_correctly\">#</a></span></h4>\n<p>Note that <code>&#39;uncaughtException&#39;</code> is a crude mechanism for exception handling\nintended to be used only as a last resort. The event <em>should not</em> be used as\nan equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean\nthat an application is in an undefined state. Attempting to resume application\ncode without properly recovering from the exception can cause additional\nunforeseen and unpredictable issues.</p>\n<p>Exceptions thrown from within the event handler will not be caught. Instead the\nprocess will exit with a non zero exit code and the stack trace will be printed.\nThis is to avoid infinite recursion.</p>\n<p>Attempting to resume normally after an uncaught exception can be similar to\npulling out of the power cord when upgrading a computer -- nine out of ten\ntimes nothing happens - but the 10th time, the system becomes corrupted.</p>\n<p>The correct use of <code>&#39;uncaughtException&#39;</code> is to perform synchronous cleanup\nof allocated resources (e.g. file descriptors, handles, etc) before shutting\ndown the process. It is not safe to resume normal operation after\n<code>&#39;uncaughtException&#39;</code>.</p>\n<h3>Event: &#39;unhandledRejection&#39;<span><a class=\"mark\" href=\"#process_event_unhandledrejection\" id=\"process_event_unhandledrejection\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v1.4.1</span>\n</div><p>The <code>&#39;unhandledRejection</code>&#39; event is emitted whenever a <code>Promise</code> is rejected and\nno error handler is attached to the promise within a turn of the event loop. \nWhen programming with Promises, exceptions are encapsulated as &quot;rejected\npromises&quot;. Rejections can be caught and handled using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a> and\nare propagated through a <code>Promise</code> chain. The <code>&#39;unhandledRejection&#39;</code> event is\nuseful for detecting and keeping track of promises that were rejected whose \nrejections have not yet been handled.</p>\n<p>The listener function is called with the following arguments:</p>\n<ul>\n<li><code>reason</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The object with which the promise was rejected\n(typically an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> objet).</li>\n<li><code>p</code> the <code>Promise</code> that was rejected.</li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"lang-js\">process.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\n    console.log(&quot;Unhandled Rejection at: Promise &quot;, p, &quot; reason: &quot;, reason);\n    // application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) =&gt; {\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\n}); // no `.catch` or `.then`\n</code></pre>\n<p>The following will also trigger the <code>&#39;unhandledRejection&#39;</code> event to be\nemitted:</p>\n<pre><code class=\"lang-js\">function SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error(&#39;Resource not yet loaded!&#39;));\n}\n\nvar resource = new SomeResource();\n// no .catch or .then on resource.loaded for at least a turn\n</code></pre>\n<p>In this example case, it is possible to track the rejection as a developer error\nas would typically be the case for other <code>&#39;unhandledRejection&#39;</code> events. To\naddress such failures, a non-operational\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>.catch(() =&gt; { })</code></a> handler may be attached to\n<code>resource.loaded</code>, which would prevent the <code>&#39;unhandledRejection&#39;</code> event from\nbeing emitted. Alternatively, the <a href=\"#process_event_rejectionhandled\"><code>&#39;rejectionHandled&#39;</code></a> event may be used.</p>\n<h3>Event: &#39;warning&#39;<span><a class=\"mark\" href=\"#process_event_warning\" id=\"process_event_warning\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>The <code>&#39;warning&#39;</code> event is emitted whenever Node.js emits a process warning.</p>\n<p>A process warning is similar to an error in that it describes exceptional\nconditions that are being brought to the user&#39;s attention. However, warnings\nare not part of the normal Node.js and JavaScript error handling flow.\nNode.js can emit warnings whenever it detects bad coding practices that could\nlead to sub-optimal application performance, bugs or security vulnerabilities.</p>\n<p>The listener function is called with a single <code>warning</code> argument whose value is\nan <code>Error</code> object. There are three key properties that describe the warning:</p>\n<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The name of the warning (currently <code>Warning</code> by default).</li>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A system-provided description of the warning.</li>\n<li><code>stack</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A stack trace to the location in the code where the warning\nwas issued.</li>\n</ul>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);    // Print the warning name\n  console.warn(warning.message); // Print the warning message\n  console.warn(warning.stack);   // Print the stack trace\n});\n</code></pre>\n<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>\ncommand-line option can be used to suppress the default console output but the\n<code>&#39;warning&#39;</code> event will still be emitted by the <code>process</code> object.</p>\n<p>The following example illustrates the warning that is printed to <code>stderr</code> when\ntoo many listeners have been added to an event</p>\n<pre><code>$ node\n&gt; event.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; (node:38638) Warning: Possible EventEmitter memory leak detected. 2 foo\n... listeners added. Use emitter.setMaxListeners() to increase limit\n</code></pre><p>In contrast, the following example turns off the default warning output and\nadds a custom handler to the <code>&#39;warning&#39;</code> event:</p>\n<pre><code>$ node --no-warnings\n&gt; var p = process.on(&#39;warning&#39;, (warning) =&gt; console.warn(&#39;Do not do that!&#39;));\n&gt; event.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; Do not do that!\n</code></pre><p>The <code>--trace-warnings</code> command-line option can be used to have the default\nconsole output for warnings include the full stack trace of the warning.</p>\n<h4>Emitting custom warnings<span><a class=\"mark\" href=\"#process_emitting_custom_warnings\" id=\"process_emitting_custom_warnings\">#</a></span></h4>\n<p>The <a href=\"#process_process_emitwarning_warning_name_ctor\"><code>process.emitWarning()</code></a> method can be used to issue\ncustom or application specific warnings.</p>\n<pre><code class=\"lang-js\">// Emit a warning using a string...\nprocess.emitWarning(&#39;Something happened!&#39;);\n  // Prints: (node 12345) Warning: Something happened!\n\n// Emit a warning using an object...\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n  // Prints: (node 12345) CustomWarning: Something happened!\n\n// Emit a warning using a custom Error object...\nclass CustomWarning extends Error {\n  constructor(message) {\n    super(message);\n    this.name = &#39;CustomWarning&#39;;\n    Error.captureStackTrace(this, CustomWarning);\n  }\n}\nconst myWarning = new CustomWarning(&#39;Something happened!&#39;);\nprocess.emitWarning(myWarning);\n  // Prints: (node 12345) CustomWarning: Something happened!\n</code></pre>\n<h4>Emitting custom deprecation warnings<span><a class=\"mark\" href=\"#process_emitting_custom_deprecation_warnings\" id=\"process_emitting_custom_deprecation_warnings\">#</a></span></h4>\n<p>Custom deprecation warnings can be emitted by setting the <code>name</code> of a custom\nwarning to <code>DeprecationWarning</code>. For instance:</p>\n<pre><code class=\"lang-js\">process.emitWarning(&#39;This API is deprecated&#39;, &#39;DeprecationWarning&#39;);\n</code></pre>\n<p>Or,</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;This API is deprecated&#39;);\nerr.name = &#39;DeprecationWarning&#39;;\nprocess.emitWarning(err);\n</code></pre>\n<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will\ncause custom deprecation warnings to be thrown as exceptions.</p>\n<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom\ndeprecation to be printed to <code>stderr</code> along with the stack trace.</p>\n<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting\nof the custom deprecation.</p>\n<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name\n<code>DeprecationWarning</code>.</p>\n<h3>Signal Events<span><a class=\"mark\" href=\"#process_signal_events\" id=\"process_signal_events\">#</a></span></h3>\n<!--type=event-->\n<!--name=SIGINT, SIGHUP, etc.-->\n<p>Signal events will be emitted when the Node.js process receives a signal. Please\nrefer to <a href=\"http://man7.org/linux/man-pages/man2/sigaction.2.html\">sigaction(2)</a> for a listing of standard POSIX signal names such as\n<code>SIGINT</code>, <code>SIGHUP</code>, etc.</p>\n<p>The name of each event will be the uppercase common name for the signal (e.g.\n<code>&#39;SIGINT&#39;</code> for <code>SIGINT</code> signals).</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">// Begin reading from stdin so the process does not exit.\nprocess.stdin.resume();\n\nprocess.on(&#39;SIGINT&#39;, () =&gt; {\n  console.log(&#39;Received SIGINT.  Press Control-D to exit.&#39;);\n});\n</code></pre>\n<p><em>Note</em>: An easy way to send the <code>SIGINT</code> signal is with <code>&lt;Ctrl&gt;-C</code> in most\nterminal programs.</p>\n<p>It is important to take note of the following:</p>\n<ul>\n<li><code>SIGUSR1</code> is reserved by Node.js to start the debugger.  It&#39;s possible to\ninstall a listener but doing so will <em>not</em> stop the debugger from starting.</li>\n<li><code>SIGTERM</code> and <code>SIGINT</code> have default handlers on non-Windows platforms that\nresets the terminal mode before exiting with code <code>128 + signal number</code>. If\none of these signals has a listener installed, its default behavior will be\nremoved (Node.js will no longer exit).</li>\n<li><code>SIGPIPE</code> is ignored by default. It can have a listener installed.</li>\n<li><code>SIGHUP</code> is generated on Windows when the console window is closed, and on\nother platforms under various similar conditions, see <a href=\"http://man7.org/linux/man-pages/man7/signal.7.html\">signal(7)</a>. It can have a\nlistener installed, however Node.js will be unconditionally terminated by\nWindows about 10 seconds later. On non-Windows platforms, the default\nbehavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been\ninstalled its default behavior will be removed.</li>\n<li><code>SIGTERM</code> is not supported on Windows, it can be listened on.</li>\n<li><code>SIGINT</code> from the terminal is supported on all platforms, and can usually be\ngenerated with <code>CTRL+C</code> (though this may be configurable). It is not generated\nwhen terminal raw mode is enabled.</li>\n<li><code>SIGBREAK</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on\nnon-Windows platforms it can be listened on, but there is no way to send or\ngenerate it.</li>\n<li><code>SIGWINCH</code> is delivered when the console has been resized. On Windows, this\nwill only happen on write to the console when the cursor is being moved, or\nwhen a readable tty is used in raw mode.</li>\n<li><code>SIGKILL</code> cannot have a listener installed, it will unconditionally terminate\nNode.js on all platforms.</li>\n<li><code>SIGSTOP</code> cannot have a listener installed.</li>\n</ul>\n<p><em>Note</em>: Windows does not support sending signals, but Node.js offers some\nemulation with <a href=\"#process_process_kill_pid_signal\"><code>process.kill()</code></a>, and <a href=\"child_process.html#child_process_child_kill_signal\"><code>ChildProcess.kill()</code></a>. Sending\nsignal <code>0</code> can be used to test for the existence of a process. Sending <code>SIGINT</code>,\n<code>SIGTERM</code>, and <code>SIGKILL</code> cause the unconditional termination of the target\nprocess.</p>\n<h2>process.abort()<span><a class=\"mark\" href=\"#process_process_abort\" id=\"process_process_abort\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\ngenerate a core file.</p>\n<h2>process.arch<span><a class=\"mark\" href=\"#process_process_arch\" id=\"process_process_arch\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>The <code>process.arch</code> property returns a String identifying the processor\narchitecture that the Node.js process is currently running on. For instance\n<code>&#39;arm&#39;</code>, <code>&#39;ia32&#39;</code>, or <code>&#39;x64&#39;</code>.</p>\n<pre><code class=\"lang-js\">console.log(`This processor architecture is ${process.arch}`);\n</code></pre>\n<h2>process.argv<span><a class=\"mark\" href=\"#process_process_argv\" id=\"process_process_argv\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>The <code>process.argv</code> property returns a array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe &#39;node&#39;, the second element will be the name of the JavaScript file. The\nremaining elements will be any additional command line arguments.</p>\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\n<pre><code class=\"lang-js\">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</code></pre>\n<p>Launching the Node.js process as:</p>\n<pre><code>$ node process-2.js one two=three four\n</code></pre><p>Would generate the output:</p>\n<pre><code class=\"lang-text\">0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</code></pre>\n<h2>process.chdir(directory)<span><a class=\"mark\" href=\"#process_process_chdir_directory\" id=\"process_process_chdir_directory\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.17</span>\n</div><ul>\n<li><code>directory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).</p>\n<pre><code class=\"lang-js\">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(`New directory: ${process.cwd()}`);\n}\ncatch (err) {\n  console.log(`chdir: ${err}`);\n}\n</code></pre>\n<h2>process.config<span><a class=\"mark\" href=\"#process_process_config\" id=\"process_process_config\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>The <code>process.config</code> property returns an Object containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\nrunning the <code>./configure</code> script.</p>\n<p>An example of the possible output looks like:</p>\n<pre><code class=\"lang-js\">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39;\n   }\n}\n</code></pre>\n<p><em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are\nexisting modules in the ecosystem that are known to extend, modify, or entirely\nreplace the value of <code>process.config</code>.</p>\n<h2>process.connected<span><a class=\"mark\" href=\"#process_process_connected\" id=\"process_process_connected\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.2</span>\n</div><p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.connected</code> property will return\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\n<code>process.disconnect()</code> is called.</p>\n<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\nover the IPC channel using <code>process.send()</code>.</p>\n<h2>process.cpuUsage([previousValue])<span><a class=\"mark\" href=\"#process_process_cpuusage_previousvalue\" id=\"process_process_cpuusage_previousvalue\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.1.0</span>\n</div><ul>\n<li><code>previousValue</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> A previous return value from calling\n<code>process.cpuUsage()</code></li>\n</ul>\n<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.</p>\n<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\nargument to the function, to get a diff reading.</p>\n<pre><code class=\"lang-js\">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</code></pre>\n<h2>process.cwd()<span><a class=\"mark\" href=\"#process_process_cwd\" id=\"process_process_cwd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.8</span>\n</div><p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.</p>\n<pre><code class=\"lang-js\">console.log(`Current directory: ${process.cwd()}`);\n</code></pre>\n<h2>process.disconnect()<span><a class=\"mark\" href=\"#process_process_disconnect\" id=\"process_process_disconnect\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.2</span>\n</div><p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.disconnect()</code> method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.</p>\n<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent\nprocess&#39;s <a href=\"child_process.html#child_process_child_disconnect\"><code>ChildProcess.disconnect()</code></a>.</p>\n<p>If the Node.js process was not spawned with an IPC channel,\n<code>process.disconnect()</code> will be <code>undefined</code>.</p>\n<h2>process.env<span><a class=\"mark\" href=\"#process_process_env\" id=\"process_process_env\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.27</span>\n</div><p>The <code>process.env</code> property returns an object containing the user environment.\nSee <a href=\"http://man7.org/linux/man-pages/man7/environ.7.html\">environ(7)</a>.</p>\n<p>An example of this object looks like:</p>\n<pre><code class=\"lang-js\">{\n  TERM: &#39;xterm-256color&#39;,\n  SHELL: &#39;/usr/local/bin/bash&#39;,\n  USER: &#39;maciej&#39;,\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\n  PWD: &#39;/Users/maciej&#39;,\n  EDITOR: &#39;vim&#39;,\n  SHLVL: &#39;1&#39;,\n  HOME: &#39;/Users/maciej&#39;,\n  LOGNAME: &#39;maciej&#39;,\n  _: &#39;/usr/local/bin/node&#39; \n}\n</code></pre>\n<p>It is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:</p>\n<pre><code>$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\n</code></pre><p>While the following will:</p>\n<pre><code class=\"lang-js\">process.env.foo = &#39;bar&#39;;\nconsole.log(process.env.foo);\n</code></pre>\n<p>Assigning a property on <code>process.env</code> will implicitly convert the value\nto a string.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &#39;null&#39;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &#39;undefined&#39;\n</code></pre>\n<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</code></pre>\n<h2>process.emitWarning(warning[, name][, ctor])<span><a class=\"mark\" href=\"#process_process_emitwarning_warning_name_ctor\" id=\"process_process_emitwarning_warning_name_ctor\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><ul>\n<li><code>warning</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The warning to emit.</li>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> When <code>warning</code> is a String, <code>name</code> is the name to use\nfor the warning. Default: <code>Warning</code>.</li>\n<li><code>ctor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> When <code>warning</code> is a String, <code>ctor</code> is an optional\nfunction used to limit the generated stack trace. Default\n<code>process.emitWarning</code></li>\n</ul>\n<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<a href=\"#process_event_warning\"><code>process.on(&#39;warning&#39;)</code></a> event.</p>\n<pre><code class=\"lang-js\">// Emit a warning using a string...\nprocess.emitWarning(&#39;Something happened!&#39;);\n  // Emits: (node: 56338) Warning: Something happened!\n</code></pre>\n<pre><code>// Emit a warning using a string and a name...\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n  // Emits: (node:56338) CustomWarning: Something Happened!\n</code></pre><p>In each of the previous examples, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the\n<a href=\"#process_event_warning\"><code>process.on(&#39;warning&#39;)</code></a> event.</p>\n<pre><code>process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.stack);\n});\n</code></pre><p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\n<code>process.on(&#39;warning&#39;)</code> event handler unmodified (and the optional <code>name</code>\nand <code>ctor</code> arguments will be ignored):</p>\n<pre><code>// Emit a warning using an Error object...\nconst myWarning = new Error(&#39;Warning! Something happened!&#39;);\nmyWarning.name = &#39;CustomWarning&#39;;\n\nprocess.emitWarning(myWarning);\n  // Emits: (node:56338) CustomWarning: Warning! Something Happened!\n</code></pre><p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\nobject.</p>\n<p>Note that while process warnings use <code>Error</code> objects, the process warning\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>\n<p>The following additional handling is implemented if the warning <code>name</code> is\n<code>DeprecationWarning</code>:</p>\n<ul>\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\nwarning is thrown as an exception rather than being emitted as an event.</li>\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\nwarning is suppressed.</li>\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\n</ul>\n<h3>Avoiding duplicate warnings<span><a class=\"mark\" href=\"#process_avoiding_duplicate_warnings\" id=\"process_avoiding_duplicate_warnings\">#</a></span></h3>\n<p>As a best practice, warnings should be emitted only once per process. To do\nso, it is recommended to place the <code>emitWarning()</code> behind a simple boolean\nflag as illustrated in the example below:</p>\n<pre><code>var warned = false;\nfunction emitMyWarning() {\n  if (!warned) {\n    process.emitWarning(&#39;Only warn once!&#39;);\n    warned = true;\n  }\n}\nemitMyWarning();\n  // Emits: (node: 56339) Warning: Only warn once!\nemitMyWarning();\n  // Emits nothing\n</code></pre><h2>process.execArgv<span><a class=\"mark\" href=\"#process_process_execargv\" id=\"process_process_execargv\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>The <code>process.execArgv&#39; property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the [</code>process.argv`][] property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.</p>\n<p>For example:</p>\n<pre><code>$ node --harmony script.js --version\n</code></pre><p>Results in <code>process.execArgv</code>:</p>\n<pre><code class=\"lang-js\">[&#39;--harmony&#39;]\n</code></pre>\n<p>And <code>process.argv</code>:</p>\n<pre><code class=\"lang-js\">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\n</code></pre>\n<h2>process.execPath<span><a class=\"mark\" href=\"#process_process_execpath\" id=\"process_process_execpath\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.100</span>\n</div><p>The <code>process.execPath</code> property returns the absolute pathname of the executable\nthat started the Node.js process.</p>\n<p>For example:</p>\n<pre><code>/usr/local/bin/node\n</code></pre><h2>process.exit([code])<span><a class=\"mark\" href=\"#process_process_exit_code\" id=\"process_process_exit_code\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.13</span>\n</div><ul>\n<li><code>code</code> <span class=\"type\">&lt;Integer&gt;</span> The exit code. Defaults to <code>0</code>.</li>\n</ul>\n<p>The <code>process.exit()</code> method instructs Node.js to terminate the process as\nquickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,\nexit uses either the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if\nspecified.</p>\n<p>To exit with a &#39;failure&#39; code:</p>\n<pre><code class=\"lang-js\">process.exit(1);\n</code></pre>\n<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>\n<p>It is important to note that calling <code>process.exit()</code> will force the process to\nexit as quickly as possible <em>even if there are still asynchronous operations\npending</em> that have not yet completed fully, <em>including</em> I/O operations to\n<code>process.stdout</code> and <code>process.stderr</code>.</p>\n<p>In most situations, it is not actually necessary to call <code>process.exit()</code>\nexplicitly. The Node.js process will exit on it&#39;s own <em>if there is no additional\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\ntell the process which exit code to use when the process exits gracefully.</p>\n<p>For instance, the following example illustrates a <em>misuse</em> of the\n<code>process.exit()</code> method that could lead to data printed to stdout being\ntruncated and lost:</p>\n<pre><code class=\"lang-js\">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</code></pre>\n<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js\nare usually <em>non-blocking</em> and may occur over multiple ticks of the Node.js\nevent loop.\nCalling <code>process.exit()</code>, however, forces the process to exit <em>before</em> those\nadditional writes to <code>stdout</code> can be performed.</p>\n<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:</p>\n<pre><code class=\"lang-js\">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</code></pre>\n<p>If it is necessary to terminate the Node.js process due to an error condition,\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\nis safer than calling <code>process.exit()</code>.</p>\n<h2>process.exitCode<span><a class=\"mark\" href=\"#process_process_exitcode\" id=\"process_process_exitcode\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.8</span>\n</div><p>A number which will be the process exit code, when the process either\nexits gracefully, or is exited via <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> without specifying\na code.</p>\n<p>Specifying a code to <a href=\"#process_process_exit_code\"><code>process.exit(code)</code></a> will override any\nprevious setting of <code>process.exitCode</code>.</p>\n<h2>process.getegid()<span><a class=\"mark\" href=\"#process_process_getegid\" id=\"process_process_getegid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.0.0</span>\n</div><p>The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See <a href=\"http://man7.org/linux/man-pages/man2/getegid.2.html\">getegid(2)</a>.)</p>\n<pre><code class=\"lang-js\">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows\nor Android)</p>\n<h2>process.geteuid()<span><a class=\"mark\" href=\"#process_process_geteuid\" id=\"process_process_geteuid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.0.0</span>\n</div><p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See <a href=\"http://man7.org/linux/man-pages/man2/geteuid.2.html\">geteuid(2)</a>.)</p>\n<pre><code class=\"lang-js\">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.getgid()<span><a class=\"mark\" href=\"#process_process_getgid\" id=\"process_process_getgid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><p>The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See <a href=\"http://man7.org/linux/man-pages/man2/getgid.2.html\">getgid(2)</a>.)</p>\n<pre><code class=\"lang-js\">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.getgroups()<span><a class=\"mark\" href=\"#process_process_getgroups\" id=\"process_process_getgroups\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.4</span>\n</div><p>The <code>process.getgroups()</code> method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.</p>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.getuid()<span><a class=\"mark\" href=\"#process_process_getuid\" id=\"process_process_getuid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.28</span>\n</div><p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See <a href=\"http://man7.org/linux/man-pages/man2/getuid.2.html\">getuid(2)</a>.)</p>\n<pre><code class=\"lang-js\">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.hrtime([time])<span><a class=\"mark\" href=\"#process_process_hrtime_time\" id=\"process_process_hrtime_time\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.6</span>\n</div><p>The <code>process.hrtime()</code> method returns the current high-resolution real time in a\n<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must\nbe the result of a previous <code>process.hrtime()</code> call (and therefore, a real time\nin a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff\nwith the current time. These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals.</p>\n<p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for\ncalculating an amount of time passed between calls:</p>\n<pre><code class=\"lang-js\">var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);\n</code></pre>\n<p>Constructing an array by some method other than calling <code>process.hrtime()</code> and\npassing the result to process.hrtime() will result in undefined behavior.</p>\n<h2>process.initgroups(user, extra_group)<span><a class=\"mark\" href=\"#process_process_initgroups_user_extra_group\" id=\"process_process_initgroups_user_extra_group\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.4</span>\n</div><ul>\n<li><code>user</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> The user name or numeric identifier.</li>\n<li><code>extra_group</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> A group name or numeric identifier.</li>\n</ul>\n<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have <code>root</code>\naccess or the <code>CAP_SETGID</code> capability.</p>\n<p>Note that care must be taken when dropping privileges. Example:</p>\n<pre><code class=\"lang-js\">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.kill(pid[, signal])<span><a class=\"mark\" href=\"#process_process_kill_pid_signal\" id=\"process_process_kill_pid_signal\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.0.6</span>\n</div><ul>\n<li><code>pid</code> <span class=\"type\">&lt;number&gt;</span> A process ID</li>\n<li><code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> The signal to send, either as a string or number.\nDefaults to <code>&#39;SIGTERM&#39;</code>.</li>\n</ul>\n<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\n<code>pid</code>.</p>\n<p>Signal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See <a href=\"#process_signal_events\">Signal Events</a>\nand <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a> for more information.</p>\n<p>This method will throw an error if the target <code>pid</code> does not exist. As a special\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\ngroup.</p>\n<p><em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really\njust a signal sender, like the <code>kill</code> system call.  The signal sent may do\nsomething other than kill the target process.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">process.on(&#39;SIGHUP&#39;, () =&gt; {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\n</code></pre>\n<p><em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\ndebugger, see <a href=\"#process_signal_events\">Signal Events</a>.</p>\n<h2>process.mainModule<span><a class=\"mark\" href=\"#process_process_mainmodule\" id=\"process_process_mainmodule\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.17</span>\n</div><p>The <code>process.mainModule</code> property provides an alternative way of retrieving\n<a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>. The difference is that if the main module changes at\nruntime, <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a> may still refer to the original main module in\nmodules that were required before the change occurred. Generally it&#39;s\nsafe to assume that the two refer to the same module.</p>\n<p>As with <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>, <code>process.mainModule</code> will be <code>undefined</code> if there\nis no entry script.</p>\n<h2>process.memoryUsage()<span><a class=\"mark\" href=\"#process_process_memoryusage\" id=\"process_process_memoryusage\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\nof the Node.js process measured in bytes.</p>\n<p>For example, the code:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(process.memoryUsage()));\n</code></pre>\n<p>Will generate:</p>\n<pre><code class=\"lang-js\">{ \n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 \n}\n</code></pre>\n<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.</p>\n<h2>process.nextTick(callback[, arg][, ...])<span><a class=\"mark\" href=\"#process_process_nexttick_callback_arg\" id=\"process_process_nexttick_callback_arg\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.26</span>\n</div><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li><code>[, arg][, ...]</code> <span class=\"type\">&lt;any&gt;</span> Additional arguments to pass when invoking the\n<code>callback</code></li>\n</ul>\n<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.</p>\n<p>This is <em>not</em> a simple alias to <a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout(fn, 0)</code></a>, it&#39;s much more\nefficient.  It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.</p>\n<pre><code class=\"lang-js\">console.log(&#39;start&#39;);\nprocess.nextTick(() =&gt; {\n  console.log(&#39;nextTick callback&#39;);\n});\nconsole.log(&#39;scheduled&#39;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n</code></pre>\n<p>This is important when developing APIs in order to give users the opportunity\nto assign event handlers <em>after</em> an object has been constructed but before any\nI/O has occurred:</p>\n<pre><code class=\"lang-js\">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</code></pre>\n<p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:</p>\n<pre><code class=\"lang-js\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p>This API is hazardous because in the following case:</p>\n<pre><code class=\"lang-js\">maybeSync(true, () =&gt; {\n  foo();\n});\nbar();\n</code></pre>\n<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>\n<p>The following approach is much better:</p>\n<pre><code class=\"lang-js\">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p><em>Note</em>: the next tick queue is completely drained on each pass of the\nevent loop <strong>before</strong> additional I/O is processed.  As a result,\nrecursively setting nextTick callbacks will block any I/O from\nhappening, just like a <code>while(true);</code> loop.</p>\n<h2>process.pid<span><a class=\"mark\" href=\"#process_process_pid\" id=\"process_process_pid\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.15</span>\n</div><p>The <code>process.pid</code> property returns the PID of the process.</p>\n<pre><code class=\"lang-js\">console.log(`This process is pid ${process.pid}`);\n</code></pre>\n<h2>process.platform<span><a class=\"mark\" href=\"#process_process_platform\" id=\"process_process_platform\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.16</span>\n</div><p>The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running. For instance\n<code>&#39;darwin&#39;</code>, <code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code></p>\n<pre><code class=\"lang-js\">console.log(`This platform is ${process.platform}`);\n</code></pre>\n<h2>process.release<span><a class=\"mark\" href=\"#process_process_release\" id=\"process_process_release\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v3.0.0</span>\n</div><p>The <code>process.release</code> property returns an Object containing metadata related to\nthe current release, including URLs for the source tarball and headers-only\ntarball.</p>\n<p><code>process.release</code> contains the following properties:</p>\n<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A value that will always be <code>&#39;node&#39;</code> for Node.js. For\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\n<li><code>sourceUrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> an absolute URL pointing to a <code>_.tar.gz_</code> file containing\nthe source code of the current release.</li>\n<li><code>headersUrl</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> an absolute URL pointing to a <code>_.tar.gz_</code> file containing\nonly the source header files for the current release. This file is\nsignificantly smaller than the full source file and can be used for compiling\nNode.js native add-ons.</li>\n<li><code>libUrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> an absolute URL pointing to a <code>_node.lib_</code> file matching the\narchitecture and version of the current release. This file is used for\ncompiling Node.js native add-ons. <em>This property is only present on Windows\nbuilds of Node.js and will be missing on all other platforms.</em></li>\n<li><code>lts</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> a string label identifying the [LTS][] label for this release.\nIf the Node.js release is not an LTS release, this will be <code>undefined</code>.</li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"lang-js\">{\n  name: &#39;node&#39;,\n  lts: &#39;Argon&#39;,\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\n}\n</code></pre>\n<p>In custom builds from non-release versions of the source tree, only the\n<code>name</code> property may be present. The additional properties should not be\nrelied upon to exist.</p>\n<h2>process.send(message[, sendHandle[, options]][, callback])<span><a class=\"mark\" href=\"#process_process_send_message_sendhandle_options_callback\" id=\"process_process_send_message_sendhandle_options_callback\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.9</span>\n</div><ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>sendHandle</code> <span class=\"type\">&lt;Handle object&gt;</span></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\nused to send messages to the parent process. Messages will be received as a\n<a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event on the parent&#39;s <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object.</p>\n<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\n<code>undefined</code>.</p>\n<p><em>Note</em>: This function uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> internally to serialize the\n<code>message</code>.*</p>\n<h2>process.setegid(id)<span><a class=\"mark\" href=\"#process_process_setegid_id\" id=\"process_process_setegid_id\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.0.0</span>\n</div><ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> A group name or ID</li>\n</ul>\n<p>The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See <a href=\"http://man7.org/linux/man-pages/man2/setegid.2.html\">setegid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.seteuid(id)<span><a class=\"mark\" href=\"#process_process_seteuid_id\" id=\"process_process_seteuid_id\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v2.0.0</span>\n</div><ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> A user name or ID</li>\n</ul>\n<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See <a href=\"http://man7.org/linux/man-pages/man2/seteuid.2.html\">seteuid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a username\nstring.  If a username is specified, the method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.setgid(id)<span><a class=\"mark\" href=\"#process_process_setgid_id\" id=\"process_process_setgid_id\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.31</span>\n</div><ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;number&gt;</span> The group name or ID</li>\n</ul>\n<p>The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.setgroups(groups)<span><a class=\"mark\" href=\"#process_process_setgroups_groups\" id=\"process_process_setgroups_groups\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.4</span>\n</div><ul>\n<li><code>groups</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\nNode.js proess. This is a privileged operation that requires the Node.js process\nto have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>\n<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.setuid(id)<span><a class=\"mark\" href=\"#process_process_setuid_id\" id=\"process_process_setuid_id\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.28</span>\n</div><p>The <code>process.setuid(id) method sets the user identity of the process. (See\nsetuid(2).)  The</code>id` can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\nAndroid)</p>\n<h2>process.stderr<span><a class=\"mark\" href=\"#process_process_stderr\" id=\"process_process_stderr\">#</a></span></h2>\n<p>The <code>process.stderr</code> property returns a <a href=\"#stream_class_stream_writable\">Writable</a> stream equivalent to or\nassociated with <code>stderr</code> (fd <code>2</code>).</p>\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\nthat they cannot be closed (calling <a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> will throw an Error), they never\nemit the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event, and writes can block when output is redirected to\na file (although disks are fast and operating systems normally employ write-back\ncaching so it should be a very rare occurrence indeed.)</p>\n<p>Additionally, <code>process.stderr</code> and <code>process.stdout</code> are blocking when outputting\nto TTYs (terminals) on OS X as a workaround for the OS&#39;s very small, 1kb\nbuffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\n<h2>process.stdin<span><a class=\"mark\" href=\"#process_process_stdin\" id=\"process_process_stdin\">#</a></span></h2>\n<p>The <code>process.stdin</code> property returns a <a href=\"#stream_class_stream_readable\">Readable</a> stream equivalent to or\nassociated with <code>stdin</code> (fd <code>0</code>).</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">process.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\n  process.stdout.write(&#39;end&#39;);\n});\n</code></pre>\n<p>As a <a href=\"#stream_class_stream_readable\">Readable</a> stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\nis compatible with scripts written for Node.js prior to v0.10.\nFor more information see <a href=\"stream.html#stream_compatibility_with_older_node_js_versions\">Stream compatibility</a>.</p>\n<p><em>Note</em>: In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.</p>\n<h2>process.stdout<span><a class=\"mark\" href=\"#process_process_stdout\" id=\"process_process_stdout\">#</a></span></h2>\n<p>The <code>process.stdout</code> propety returns a <a href=\"#stream_class_stream_writable\">Writable</a> stream equivalent to or\nassociated with <code>stdout</code> (fd <code>1</code>).</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">console.log = (msg) =&gt; {\n  process.stdout.write(`${msg}\\n`);\n};\n</code></pre>\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\nthat they cannot be closed (calling <a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> will throw an Error), they never\nemit the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event and that writes can block when output is\nredirected to a file (although disks are fast and operating systems normally\nemploy write-back caching so it should be a very rare occurrence indeed.)</p>\n<p>To check if Node.js is being run in a TTY context, read the <code>isTTY</code> property\non <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:</p>\n<h3>TTY Terminals and <code>process.stdout</code><span><a class=\"mark\" href=\"#process_tty_terminals_and_process_stdout\" id=\"process_tty_terminals_and_process_stdout\">#</a></span></h3>\n<p>The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting\nto TTYs (terminals) on OS X as a workaround for the operating system&#39;s small,\n1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\n<p>To check if Node.js is being run in a <a href=\"tty.html\">TTY</a> context, check the <code>isTTY</code>\nproperty on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>.</p>\n<p>For instance:</p>\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre><p>See the <a href=\"tty.html\">TTY</a> documentation for more information.</p>\n<h2>process.title<span><a class=\"mark\" href=\"#process_process_title\" id=\"process_process_title\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.104</span>\n</div><p>The <code>process.title</code> property returns the current process title (i.e. returns\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\nthe current value of <code>ps</code>.</p>\n<p><em>Note</em>: When a new value is assigned, different platforms will impose different\nmaximum length restrictions on the title. Usually such restrictions are quite\nlimited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size\nof the binary name plus the length of the command line arguments because setting\nthe <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\nallowed for longer process title strings by also overwriting the <code>environ</code>\nmemory but that was potentially insecure and confusing in some (rather obscure)\ncases.</p>\n<h2>process.umask([mask])<span><a class=\"mark\" href=\"#process_process_umask_mask\" id=\"process_process_umask_mask\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.19</span>\n</div><ul>\n<li><code>mask</code> <span class=\"type\">&lt;number&gt;</span></li>\n</ul>\n<p>The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\ncreation mask. Child processes inherit the mask from the parent process. The old\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\nmask.</p>\n<pre><code class=\"lang-js\">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</code></pre>\n<h2>process.uptime()<span><a class=\"mark\" href=\"#process_process_uptime\" id=\"process_process_uptime\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.0</span>\n</div><p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\nprocess has been running.</p>\n<h2>process.version<span><a class=\"mark\" href=\"#process_process_version\" id=\"process_process_version\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.3</span>\n</div><p>The <code>process.version</code> property returns the Node.js version string.</p>\n<pre><code class=\"lang-js\">console.log(`Version: ${process.version}`);\n</code></pre>\n<h2>process.versions<span><a class=\"mark\" href=\"#process_process_versions\" id=\"process_process_versions\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.2.0</span>\n</div><p>The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies.</p>\n<pre><code class=\"lang-js\">console.log(process.versions);\n</code></pre>\n<p>Will generate output similar to:</p>\n<pre><code class=\"lang-js\">{\n  http_parser: &#39;2.3.0&#39;,\n  node: &#39;1.1.1&#39;,\n  v8: &#39;4.1.0.14&#39;,\n  uv: &#39;1.3.0&#39;,\n  zlib: &#39;1.2.8&#39;,\n  ares: &#39;1.10.0-DEV&#39;,\n  modules: &#39;43&#39;,\n  icu: &#39;55.1&#39;,\n  openssl: &#39;1.0.1k&#39;\n}\n</code></pre>\n<h2>Exit Codes<span><a class=\"mark\" href=\"#process_exit_codes\" id=\"process_exit_codes\">#</a></span></h2>\n<p>Node.js will normally exit with a <code>0</code> status code when no more async\noperations are pending.  The following status codes are used in other\ncases:</p>\n<ul>\n<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,\nand it was not handled by a domain or an <a href=\"#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event\nhandler.</li>\n<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>\n<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code\ninternal in Node.js&#39;s bootstrapping process caused a parse error.  This\nis extremely rare, and generally can only happen during development\nof Node.js itself.</li>\n<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process failed to\nreturn a function value when evaluated.  This is extremely rare, and\ngenerally can only happen during development of Node.js itself.</li>\n<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.\nTypically a message will be printed to stderr with the prefix <code>FATAL\nERROR</code>.</li>\n<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an\nuncaught exception, but the internal fatal exception handler\nfunction was somehow set to a non-function, and could not be called.</li>\n<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an\nuncaught exception, and the internal fatal exception handler\nfunction itself threw an error while attempting to handle it.  This\ncan happen, for example, if a <a href=\"#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> or\n<code>domain.on(&#39;error&#39;)</code> handler throws an error.</li>\n<li><code>8</code> - Unused.  In previous versions of Node.js, exit code 8 sometimes\nindicated an uncaught exception.</li>\n<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,\nor an option requiring a value was provided without a value.</li>\n<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process threw an error\nwhen the bootstrapping function was called.  This is extremely rare,\nand generally can only happen during development of Node.js itself.</li>\n<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--debug</code> and/or <code>--debug-brk</code>\noptions were set, but an invalid port number was chosen.</li>\n<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as\n<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the\nvalue of the signal code.  This is a standard Unix practice, since\nexit codes are defined to be 7-bit integers, and signal exits set\nthe high-order bit, and then contain the value of the signal code.</li>\n</ul>\n<!-- [end-include:process.md] -->\n<!-- [start-include:punycode.md] -->\n<h1>punycode<span><a class=\"mark\" href=\"#punycode_punycode\" id=\"punycode_punycode\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>punycode</code> module is a bundled version of the <a href=\"https://mths.be/punycode\">Punycode.js</a> module. It\ncan be accessed using:</p>\n<pre><code class=\"lang-js\">const punycode = require(&#39;punycode&#39;);\n</code></pre>\n<p><a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> is a character encoding scheme defined by RFC 3492 that is\nprimarily intended for use in Internationalized Domain Names. Because host\nnames in URLs are limited to ASCII characters only, Domain Names that contain\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\nFor instance, the Japanese character that translates into the English word,\n<code>&#39;example&#39;</code> is <code>&#39;\u4f8b&#39;</code>. The Internationalized Domain Name, <code>&#39;\u4f8b.com&#39;</code> (equivalent\nto <code>&#39;example.com&#39;</code>) is represented by Punycode as the ASCII string\n<code>&#39;xn--fsq.com&#39;</code>.</p>\n<p>The <code>punycode</code> module provides a simple implementation of the Punycode standard.</p>\n<p><em>Note</em>: The <code>punycode</code> module is a third-party dependency used by Node.js and\nmade available to developers as a convenience. Fixes or other modifications to\nthe module must be directed to the <a href=\"https://mths.be/punycode\">Punycode.js</a> project.</p>\n<h2>punycode.decode(string)<span><a class=\"mark\" href=\"#punycode_punycode_decode_string\" id=\"punycode_punycode_decode_string\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.1</span>\n</div><ul>\n<li><code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>punycode.decode()</code> method converts a <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.</p>\n<pre><code class=\"lang-js\">punycode.decode(&#39;maana-pta&#39;); // &#39;ma\u00f1ana&#39;\npunycode.decode(&#39;--dqo34k&#39;); // &#39;\u2603-\u2318&#39;\n</code></pre>\n<h2>punycode.encode(string)<span><a class=\"mark\" href=\"#punycode_punycode_encode_string\" id=\"punycode_punycode_encode_string\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.1</span>\n</div><ul>\n<li><code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\n<a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> string of ASCII-only characters.</p>\n<pre><code class=\"lang-js\">punycode.encode(&#39;ma\u00f1ana&#39;); // &#39;maana-pta&#39;\npunycode.encode(&#39;\u2603-\u2318&#39;); // &#39;--dqo34k&#39;\n</code></pre>\n<h2>punycode.toASCII(domain)<span><a class=\"mark\" href=\"#punycode_punycode_toascii_domain\" id=\"punycode_punycode_toascii_domain\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.1</span>\n</div><ul>\n<li><code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an\nInternationalized Domain Name to <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a>. Only the non-ASCII parts of the\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\nalready only contains ASCII characters will have no effect.</p>\n<pre><code class=\"lang-js\">// encode domain names\npunycode.toASCII(&#39;ma\u00f1ana.com&#39;);  // &#39;xn--maana-pta.com&#39;\npunycode.toASCII(&#39;\u2603-\u2318.com&#39;);   // &#39;xn----dqo34k.com&#39;\npunycode.toASCII(&#39;example.com&#39;); // &#39;example.com&#39;\n</code></pre>\n<h2>punycode.toUnicode(domain)<span><a class=\"mark\" href=\"#punycode_punycode_tounicode_domain\" id=\"punycode_punycode_tounicode_domain\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.1</span>\n</div><ul>\n<li><code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name\ncontaining <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> encoded characters into Unicode. Only the <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a>\nencoded parts of the domain name are be converted.</p>\n<pre><code class=\"lang-js\">// decode domain names\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); // &#39;ma\u00f1ana.com&#39;\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;);  // &#39;\u2603-\u2318.com&#39;\npunycode.toUnicode(&#39;example.com&#39;);       // &#39;example.com&#39;\n</code></pre>\n<h2>punycode.ucs2<span><a class=\"mark\" href=\"#punycode_punycode_ucs2\" id=\"punycode_punycode_ucs2\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><h3>punycode.ucs2.decode(string)<span><a class=\"mark\" href=\"#punycode_punycode_ucs2_decode_string\" id=\"punycode_punycode_ucs2_decode_string\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><ul>\n<li><code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>punycode.ucs2.decode()</code> method returns an array containing the numeric\ncodepoint values of each Unicode symbol in the string.</p>\n<pre><code class=\"lang-js\">punycode.ucs2.decode(&#39;abc&#39;); // [0x61, 0x62, 0x63]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode(&#39;\\uD834\\uDF06&#39;); // [0x1D306]\n</code></pre>\n<h3>punycode.ucs2.encode(codePoints)<span><a class=\"mark\" href=\"#punycode_punycode_ucs2_encode_codepoints\" id=\"punycode_punycode_ucs2_encode_codepoints\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><ul>\n<li><code>codePoints</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n<p>The <code>punycode.ucs2.encode()</code> method returns a string based on an array of\nnumeric code point values.</p>\n<pre><code class=\"lang-js\">punycode.ucs2.encode([0x61, 0x62, 0x63]); // &#39;abc&#39;\npunycode.ucs2.encode([0x1D306]); // &#39;\\uD834\\uDF06&#39;\n</code></pre>\n<h2>punycode.version<span><a class=\"mark\" href=\"#punycode_punycode_version\" id=\"punycode_punycode_version\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.1</span>\n</div><p>Returns a string identifying the current <a href=\"https://mths.be/punycode\">Punycode.js</a> version number.</p>\n<!-- [end-include:punycode.md] -->\n<!-- [start-include:querystring.md] -->\n<h1>Query String<span><a class=\"mark\" href=\"#querystring_query_string\" id=\"querystring_query_string\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!--name=querystring-->\n<p>The <code>querystring</code> module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const querystring = require(&#39;querystring&#39;);\n</code></pre>\n<h2>querystring.escape(str)<span><a class=\"mark\" href=\"#querystring_querystring_escape_str\" id=\"querystring_querystring_escape_str\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given\n<code>str</code> in a manner that is optimized for the specific requirements of URL\nquery strings.</p>\n<p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement percent-encoding implementation if\nnecessary by assigning <code>querystring.escape</code> to an alternative function.</p>\n<h2>querystring.parse(str[, sep[, eq[, options]]])<span><a class=\"mark\" href=\"#querystring_querystring_parse_str_sep_eq_options\" id=\"querystring_querystring_parse_str_sep_eq_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The URL query string to parse</li>\n<li><code>sep</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The substring used to delimit key and value pairs in the\nquery string. Defaults to <code>&#39;&amp;&#39;</code>.</li>\n<li><code>eq</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a>. The substring used to delimit keys and values in the\nquery string. Defaults to <code>&#39;=&#39;</code>.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>decodeURIComponent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to use when decoding\npercent-encoded characters in the query string. Defaults to\n<code>querystring.unescape()</code>.</li>\n<li><code>maxKeys</code> <span class=\"type\">&lt;number&gt;</span> Specifies the maximum number of keys to parse.\nDefaults to <code>1000</code>. Specify <code>0</code> to remove key counting limitations.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a\ncollection of key and value pairs.</p>\n<p>For example, the query string <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> is parsed into:</p>\n<pre><code class=\"lang-js\">{\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}\n</code></pre>\n<p><em>Note</em>: The object returned by the <code>querystring.parse()</code> method <em>does not</em>\nprototypically extend from the JavaScript <code>Object</code>. This means that the\ntypical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hashOwnProperty()</code>,\nand others are not defined and <em>will not work</em>.</p>\n<p>By default, percent-encoded characters within the query string will be assumed\nto use UTF-8 encoding. If an alternative character encoding is used, then an\nalternative <code>decodeURIComponent</code> option will need to be specified as illustrated\nin the following example:</p>\n<pre><code class=\"lang-js\">// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,\n  { decodeURIComponent: gbkDecodeURIComponent })\n</code></pre>\n<h2>querystring.stringify(obj[, sep[, eq[, options]]])<span><a class=\"mark\" href=\"#querystring_querystring_stringify_obj_sep_eq_options\" id=\"querystring_querystring_stringify_obj_sep_eq_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>obj</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The object to serialize into a URL query string</li>\n<li><code>sep</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The substring used to delimit key and value pairs in the\nquery string. Defaults to <code>&#39;&amp;&#39;</code>.</li>\n<li><code>eq</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a>. The substring used to delimit keys and values in the\nquery string. Defaults to <code>&#39;=&#39;</code>.</li>\n<li><code>options</code><ul>\n<li><code>encodeURIComponent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to use when converting\nURL-unsafe characters to percent-encoding in the query string. Defaults to\n<code>querystring.escape()</code>.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>querystring.stringify()</code> method produces a URL query string from a\ngiven <code>obj</code> by iterating through the object&#39;s &quot;own properties&quot;.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\n// returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\n// returns &#39;foo:bar;baz:qux&#39;\n</code></pre>\n<p>By default, characters requiring percent-encoding within the query string will\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\n<code>encodeURIComponent</code> option will need to be specified as illustrated in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: &#39;\u4e2d\u6587&#39;, foo: &#39;bar&#39; }, null, null,\n  { encodeURIComponent: gbkEncodeURIComponent })\n</code></pre>\n<h2>querystring.unescape(str)<span><a class=\"mark\" href=\"#querystring_querystring_unescape_str\" id=\"querystring_querystring_unescape_str\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded\ncharacters on the given <code>str</code>.</p>\n<p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement decoding implementation if\nnecessary by assigning <code>querystring.unescape</code> to an alternative function.</p>\n<p>By default, the <code>querystring.unescape()</code> method will attempt to use the\nJavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,\na safer equivalent that does not throw on malformed URLs will be used.</p>\n<!-- [end-include:querystring.md] -->\n<!-- [start-include:readline.md] -->\n<h1>Readline<span><a class=\"mark\" href=\"#readline_readline\" id=\"readline_readline\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>readline</code> module provides an interface for reading data from a <a href=\"#stream_class_stream_readable\">Readable</a>\nstream (such as <a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a>) one line at a time. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\n</code></pre>\n<p>The following simple example illustrates the basic use of the <code>readline</code> module.</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(&#39;Thank you for your valuable feedback:&#39;, answer);\n\n  rl.close();\n});\n</code></pre>\n<p><em>Note</em> Once this code is invoked, the Node.js application will not\nterminate until the <code>readline.Interface</code> is closed because the interface\nwaits for data to be received on the <code>input</code> stream.</p>\n<h2>Class: Interface<span><a class=\"mark\" href=\"#readline_class_interface\" id=\"readline_class_interface\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.104</span>\n</div><p>Instances of the <code>readline.Interface</code> class are constructed using the\n<code>readline.createInterface()</code> method. Every instance is associated with a\nsingle <code>input</code> <a href=\"#stream_class_stream_readable\">Readable</a> stream and a single <code>output</code> <a href=\"#stream_class_stream_writable\">Writable</a> stream.\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\nand is read from, the <code>input</code> stream.</p>\n<h3>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#readline_event_close\" id=\"readline_event_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><p>The <code>&#39;close&#39;</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has\nrelinquished control over the <code>input</code> and <code>output</code> streams;</li>\n<li>The <code>input</code> stream receives its <code>&#39;end&#39;</code> event;</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no\n<code>SIGINT</code> event listener registered on the <code>readline.Interface</code> instance.</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<p>The <code>readline.Interface</code> instance should be considered to be &quot;finished&quot; once\nthe <code>&#39;close&#39;</code> event is emitted.</p>\n<h3>Event: &#39;line&#39;<span><a class=\"mark\" href=\"#readline_event_line\" id=\"readline_event_line\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><p>The <code>&#39;line&#39;</code> event is emitted whenever the <code>input</code> stream receives an\nend-of-line input (<code>\\n</code>, <code>\\r</code>, or <code>\\r\\n</code>). This usually occurs when the user\npresses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p>\n<p>The listener function is called with a string containing the single line of\nreceived input.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;line&#39;, (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n</code></pre>\n<h3>Event: &#39;pause&#39;<span><a class=\"mark\" href=\"#readline_event_pause\" id=\"readline_event_pause\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.5</span>\n</div><p>The <code>&#39;pause&#39;</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>input</code> stream is paused.</li>\n<li>The <code>input</code> stream is not paused and receives the <code>SIGCONT</code> event. (See\nevents <code>SIGTSTP</code> and <code>SIGCONT</code>)</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;pause&#39;, () =&gt; {\n  console.log(&#39;Readline paused.&#39;);\n});\n</code></pre>\n<h3>Event: &#39;resume&#39;<span><a class=\"mark\" href=\"#readline_event_resume\" id=\"readline_event_resume\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.5</span>\n</div><p>The <code>&#39;resume&#39;</code> event is emitted whenever the <code>input</code> stream is resumed.</p>\n<p>The listener function is called without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;resume&#39;, () =&gt; {\n  console.log(&#39;Readline resumed.&#39;);\n});\n</code></pre>\n<h3>Event: &#39;SIGCONT&#39;<span><a class=\"mark\" href=\"#readline_event_sigcont\" id=\"readline_event_sigcont\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.5</span>\n</div><p>The <code>&#39;SIGCONT&#39;</code> event is emitted when a Node.js process previously moved into\nthe background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\nforeground using <code>fg(1)</code>.</p>\n<p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGSTP</code> request, this event will\nnot be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGCONT&#39;, () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</code></pre>\n<p><em>Note</em>: The <code>&#39;SIGCONT&#39;</code> event is <em>not</em> supported on Windows.</p>\n<h3>Event: &#39;SIGINT&#39;<span><a class=\"mark\" href=\"#readline_event_sigint\" id=\"readline_event_sigint\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.0</span>\n</div><p>The <code>&#39;SIGINT&#39;</code> event is emitted whenever the <code>input</code> stream receives a\n<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>&#39;SIGINT&#39;</code> event\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>&#39;pause&#39;</code>\nevent will be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGINT&#39;, () =&gt; {\n  rl.question(&#39;Are you sure you want to exit?&#39;, (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</code></pre>\n<h3>Event: &#39;SIGTSTP&#39;<span><a class=\"mark\" href=\"#readline_event_sigtstp\" id=\"readline_event_sigtstp\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.5</span>\n</div><p>The <code>&#39;SIGTSPT&#39;</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\nwill be sent to the background.</p>\n<p>When the program is resumed using <code>fg(1)</code>, the <code>&#39;pause&#39;</code> and <code>SIGCONT</code> events\nwill be emitted. These can be used to resume the <code>input</code> stream.</p>\n<p>The <code>&#39;pause&#39;</code> and <code>&#39;SIGCONT&#39;</code> events will not be emitted if the <code>input</code> was\npaused before the process was sent to the background.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGTSTP&#39;, () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&#39;Caught SIGTSTP.&#39;);\n});\n</code></pre>\n<p><em>Note</em>: The <code>&#39;SIGTSTP&#39;</code> event is <em>not</em> supported on Windows.</p>\n<h3>rl.close()<span><a class=\"mark\" href=\"#readline_rl_close\" id=\"readline_rl_close\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\nthe <code>&#39;close&#39;</code> event will be emitted.\nCloses the <code>Interface</code> instance, relinquishing control on the <code>input</code> and\n<code>output</code> streams. The <code>&#39;close&#39;</code> event will also be emitted.</p>\n<h3>rl.pause()<span><a class=\"mark\" href=\"#readline_rl_pause\" id=\"readline_rl_pause\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.4</span>\n</div><p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\nlater if necessary.</p>\n<p>Calling <code>rl.pause()</code> does not immediately pause other events (including\n<code>&#39;line&#39;</code>) from being emitted by the <code>readline.Interface</code> instance.</p>\n<h3>rl.prompt([preserveCursor])<span><a class=\"mark\" href=\"#readline_rl_prompt_preservecursor\" id=\"readline_rl_prompt_preservecursor\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><ul>\n<li><code>preserveCursor</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, prevents the cursor placement from\nbeing reset to <code>0</code>.</li>\n</ul>\n<p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\nlocation at which to provide input.</p>\n<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the prompt is not written.</p>\n<h3>rl.question(query, callback)<span><a class=\"mark\" href=\"#readline_rl_question_query_callback\" id=\"readline_rl_question_query_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.3</span>\n</div><ul>\n<li><code>query</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A statement or query to write to <code>output</code>, prepended to the\nprompt.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that is invoked with the user&#39;s\ninput in response to the <code>query</code>.</li>\n</ul>\n<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\nfunction passing the provided input as the first argument.</p>\n<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>query</code> is not written.</p>\n<p>Example usage:</p>\n<pre><code class=\"lang-js\">rl.question(&#39;What is your favorite food?&#39;, (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</code></pre>\n<p><em>Note</em>: The <code>callback</code> function passed to <code>rl.question()</code> does not follow the\ntypical pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.\nThe <code>callback</code> is called with the provided answer as the only argument.</p>\n<h3>rl.resume()<span><a class=\"mark\" href=\"#readline_rl_resume\" id=\"readline_rl_resume\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.4</span>\n</div><p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>\n<h3>rl.setPrompt(prompt)<span><a class=\"mark\" href=\"#readline_rl_setprompt_prompt\" id=\"readline_rl_setprompt_prompt\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><ul>\n<li><code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\nwhenever <code>rl.prompt()</code> is called.</p>\n<h3>rl.write(data[, key])<span><a class=\"mark\" href=\"#readline_rl_write_data_key\" id=\"readline_rl_write_data_key\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><ul>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li><code>key</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>ctrl</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;ctrl&gt;</code> key.</li>\n<li><code>meta</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;Meta&gt;</code> key.</li>\n<li><code>shift</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to indicate the <code>&lt;Shift&gt;</code> key.</li>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The name of the a key.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence  identified\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\na <a href=\"tty.html\">TTY</a> text terminal.</p>\n<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>\n<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">rl.write(&#39;Delete this!&#39;);\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: &#39;u&#39;});\n</code></pre>\n<h2>readline.clearLine(stream, dir)<span><a class=\"mark\" href=\"#readline_readline_clearline_stream_dir\" id=\"readline_readline_clearline_stream_dir\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>stream</code> <span class=\"type\">&lt;Writable&gt;</span></li>\n<li><code>dir</code> <span class=\"type\">&lt;number&gt;</span><ul>\n<li><code>-1</code> - to the left from cursor</li>\n<li><code>1</code> - to the right from cursor</li>\n<li><code>0</code> - the entire line</li>\n</ul>\n</li>\n</ul>\n<p>The <code>readline.clearLine()</code> method clears current line of given <a href=\"tty.html\">TTY</a> stream\nin a specified direction identified by <code>dir</code>.</p>\n<h2>readline.clearScreenDown(stream)<span><a class=\"mark\" href=\"#readline_readline_clearscreendown_stream\" id=\"readline_readline_clearscreendown_stream\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>stream</code> <span class=\"type\">&lt;Writable&gt;</span></li>\n</ul>\n<p>The <code>readline.clearScreenDown()</code> method clears the given <a href=\"tty.html\">TTY</a> stream from\nthe current position of the cursor down.</p>\n<h2>readline.createInterface(options)<span><a class=\"mark\" href=\"#readline_readline_createinterface_options\" id=\"readline_readline_createinterface_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.98</span>\n</div><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>input</code> <span class=\"type\">&lt;Readable&gt;</span> The <a href=\"#stream_class_stream_readable\">Readable</a> stream to listen to. This option is\n<em>required</em>.</li>\n<li><code>output</code> <span class=\"type\">&lt;Writable&gt;</span> The <a href=\"#stream_class_stream_writable\">Writable</a> stream to write readline data to.</li>\n<li><code>completer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional function used for Tab autocompletion.</li>\n<li><code>terminal</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> if the <code>input</code> and <code>output</code> streams should be\ntreated like a TTY, and have ANSI/VT100 escape codes written to it.\nDefaults to checking <code>isTTY</code> on the <code>output</code> stream upon instantiation.</li>\n<li><code>historySize</code> <span class=\"type\">&lt;number&gt;</span> maximum number of history lines retained. To disable\nthe history set this value to <code>0</code>. Defaults to <code>30</code>. This option makes sense\nonly if <code>terminal</code> is set to <code>true</code> by the user or by an internal <code>output</code>\ncheck, otherwise the history caching mechanism is not initialized at all.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\ninstance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</code></pre>\n<p>Once the <code>readline.Interface</code> instance is created, the most common case is to\nlisten for the <code>&#39;line&#39;</code> event:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n</code></pre>\n<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get\nthe best compatibility if it defines an <code>output.columns</code> property and emits\na <code>&#39;resize&#39;</code> event on the <code>output</code> if or when the columns ever change\n(<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> does this automatically when it is a TTY).</p>\n<h3>Use of the <code>completer</code> Function<span><a class=\"mark\" href=\"#readline_use_of_the_completer_function\" id=\"readline_use_of_the_completer_function\">#</a></span></h3>\n<p>When called, the <code>completer</code> function is provided the current line entered by\nthe user, and is expected to return an Array with 2 entries:</p>\n<ul>\n<li>An Array with matching entries for the completion.</li>\n<li>The substring that was used for the matching.</li>\n</ul>\n<p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p>\n<pre><code class=\"lang-js\">function completer(line) {\n  var completions = &#39;.help .error .exit .quit .q&#39;.split(&#39; &#39;)\n  var hits = completions.filter((c) =&gt; { return c.indexOf(line) == 0 })\n  // show all completions if none found\n  return [hits.length ? hits : completions, line]\n}\n</code></pre>\n<p>The <code>completer</code> function can be called asynchronously if it accepts two\narguments:</p>\n<pre><code class=\"lang-js\">function completer(linePartial, callback) {\n  callback(null, [[&#39;123&#39;], linePartial]);\n}\n</code></pre>\n<h2>readline.cursorTo(stream, x, y)<span><a class=\"mark\" href=\"#readline_readline_cursorto_stream_x_y\" id=\"readline_readline_cursorto_stream_x_y\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>stream</code> <span class=\"type\">&lt;Writable&gt;</span></li>\n<li><code>x</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>y</code> <span class=\"type\">&lt;number&gt;</span></li>\n</ul>\n<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\ngiven <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>\n<h2>readline.emitKeypressEvents(stream[, interface])<span><a class=\"mark\" href=\"#readline_readline_emitkeypressevents_stream_interface\" id=\"readline_readline_emitkeypressevents_stream_interface\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>stream</code> <span class=\"type\">&lt;Readable&gt;</span></li>\n<li><code>interface</code> <span class=\"type\">&lt;readline.Interface&gt;</span></li>\n</ul>\n<p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href=\"#stream_class_stream_writable\">Writable</a>\n<code>stream</code> to begin emitting <code>&#39;keypress&#39;</code> events corresponding to received input.</p>\n<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which\nautocompletion is disabled when copy-pasted input is detected.</p>\n<p>If the <code>stream</code> is a <a href=\"tty.html\">TTY</a>, then it must be in raw mode.</p>\n<pre><code class=\"lang-js\">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</code></pre>\n<h2>readline.moveCursor(stream, dx, dy)<span><a class=\"mark\" href=\"#readline_readline_movecursor_stream_dx_dy\" id=\"readline_readline_movecursor_stream_dx_dy\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>stream</code> <span class=\"type\">&lt;Writable&gt;</span></li>\n<li><code>dx</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>dy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a></li>\n</ul>\n<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\nposition in a given <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>\n<h2>Example: Tiny CLI<span><a class=\"mark\" href=\"#readline_example_tiny_cli\" id=\"readline_example_tiny_cli\">#</a></span></h2>\n<p>The following example illustrates the use of <code>readline.Interface</code> class to\nimplement a small command-line interface:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface(process.stdin, process.stdout);\n\nrl.setPrompt(&#39;OHAI&gt; &#39;);\nrl.prompt();\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  switch(line.trim()) {\n    case &#39;hello&#39;:\n      console.log(&#39;world!&#39;);\n      break;\n    default:\n      console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);\n      break;\n  }\n  rl.prompt();\n}).on(&#39;close&#39;, () =&gt; {\n  console.log(&#39;Have a great day!&#39;);\n  process.exit(0);\n});\n</code></pre>\n<h2>Example: Read File Stream Line-by-Line<span><a class=\"mark\" href=\"#readline_example_read_file_stream_line_by_line\" id=\"readline_example_read_file_stream_line_by_line\">#</a></span></h2>\n<p>A common use case for <code>readline</code> is to consume input from a filesystem\n<a href=\"#stream_class_stream_readable\">Readable</a> stream one line at a time, as illustrated in the following\nexample:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream(&#39;sample.txt&#39;)\n});\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(&#39;Line from file:&#39;, line);\n});\n</code></pre>\n<!-- [end-include:readline.md] -->\n<!-- [start-include:repl.md] -->\n<h1>REPL<span><a class=\"mark\" href=\"#repl_repl\" id=\"repl_repl\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includable in other applications.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n</code></pre>\n<h2>Design and Features<span><a class=\"mark\" href=\"#repl_design_and_features\" id=\"repl_design_and_features\">#</a></span></h2>\n<p>The <code>repl</code> module exports the <code>repl.REPLServer</code> class. While running, instances\nof <code>repl.REPLServer</code> will accept individual lines of user input, evaluate those\naccording to a user-defined evaluation function, then output the result. Input\nand output may be from <code>stdin</code> and <code>stdout</code>, respectively, or may be connected\nto any Node.js <a href=\"stream.html#stream_stream\">stream</a>.</p>\n<p>Instances of <code>repl.REPLServer</code> support automatic completion of inputs,\nsimplistic Emacs-style line editing, multi-line inputs, ANSI-styled output,\nsaving and restoring current REPL session state, error recovery, and\ncustomizable evaluation functions.</p>\n<h3>Commands and Special Keys<span><a class=\"mark\" href=\"#repl_commands_and_special_keys\" id=\"repl_commands_and_special_keys\">#</a></span></h3>\n<p>The following special commands are supported by all REPL instances:</p>\n<ul>\n<li><code>.break</code> - When in the process of inputting a multi-line expression, entering\nthe <code>.break</code> command (or pressing the <code>&lt;ctrl&gt;-C</code> key combination) will abort\nfurther input or processing of that expression.</li>\n<li><code>.clear</code> - Resets the REPL <code>context</code> to an empty object and clears any\nmulti-line expression currently being input.</li>\n<li><code>.exit</code> - Close the I/O stream, causing the REPL to exit.</li>\n<li><code>.help</code> - Show this list of special commands.</li>\n<li><code>.save</code> - Save the current REPL session to a file:\n<code>&gt; .save ./file/to/save.js</code></li>\n<li><code>.load</code> - Load a file into the current REPL session.\n<code>&gt; .load ./file/to/load.js</code></li>\n</ul>\n<p>The following key combinations in the REPL have these special effects:</p>\n<ul>\n<li><code>&lt;ctrl&gt;-C</code> - When pressed once, has the same effect as the <code>.break</code> command.\nWhen pressed twice on a blank line, has the same effect as the <code>.exit</code>\ncommand.</li>\n<li><code>&lt;ctrl&gt;-D</code> - Has the same effect as the <code>.exit</code> command.</li>\n<li><code>&lt;tab&gt;</code> - When pressed on a blank line, displays global and local(scope)\nvariables. When pressed while entering other input, displays relevant\nautocompletion options.</li>\n</ul>\n<h3>Default Evaluation<span><a class=\"mark\" href=\"#repl_default_evaluation\" id=\"repl_default_evaluation\">#</a></span></h3>\n<p>By default, all instances of <code>repl.REPLServer</code> use an evaluation function that\nevaluates JavaScript expressions and provides access to Node.js&#39; built-in\nmodules. This default behavior can be overridden by passing in an alternative\nevaluation function when the <code>repl.REPLServer</code> instance is created.</p>\n<h4>JavaScript Expressions<span><a class=\"mark\" href=\"#repl_javascript_expressions\" id=\"repl_javascript_expressions\">#</a></span></h4>\n<p>The default evaluator supports direct evaluation of JavaScript expressions:</p>\n<pre><code class=\"lang-js\">&gt; 1 + 1\n2\n&gt; var m = 2\nundefined\n&gt; m + 1\n3\n</code></pre>\n<p>Unless otherwise scoped within blocks (e.g. <code>{ ... }</code>) or functions, variables\ndeclared either implicitly or using the <code>var</code> keyword are declared at the\n<code>global</code> scope.</p>\n<h4>Global and Local Scope<span><a class=\"mark\" href=\"#repl_global_and_local_scope\" id=\"repl_global_and_local_scope\">#</a></span></h4>\n<p>The default evaluator provides access to any variables that exist in the global\nscope. It is possible to expose a variable to the REPL explicitly by assigning\nit to the <code>context</code> object associated with each <code>REPLServer</code>.  For example:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nvar msg = &#39;message&#39;;\n\nrepl.start(&#39;&gt; &#39;).context.m = msg;\n</code></pre>\n<p>Properties in the <code>context</code> object appear as local within the REPL:</p>\n<pre><code class=\"lang-js\">$ node repl_test.js\n&gt; m\n&#39;message&#39;\n</code></pre>\n<p>It is important to note that context properties are <em>not</em> read-only by default.\nTo specify read-only globals, context properties must be defined using\n<code>Object.defineProperty()</code>:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nvar msg = &#39;message&#39;;\n\nconst r = repl.start(&#39;&gt; &#39;);\nObject.defineProperty(r, &#39;m&#39;, {\n  configurable: false,\n  enumerable: true,\n  value: msg\n});\n</code></pre>\n<h4>Accessing Core Node.js Modules<span><a class=\"mark\" href=\"#repl_accessing_core_node_js_modules\" id=\"repl_accessing_core_node_js_modules\">#</a></span></h4>\n<p>The default evaluator will automatically load Node.js core modules into the\nREPL environment when used. For instance, unless otherwise declared as a\nglobal or scoped variable, the input <code>fs</code> will be evaluated on-demand as\n<code>global.fs = require(&#39;fs&#39;)</code>.</p>\n<pre><code class=\"lang-js\">&gt; fs.createReadStream(&#39;./some/file&#39;);\n</code></pre>\n<h4>Assignment of the <code>_</code> (underscore) variable<span><a class=\"mark\" href=\"#repl_assignment_of_the_underscore_variable\" id=\"repl_assignment_of_the_underscore_variable\">#</a></span></h4>\n<p>The default evaluator will, by default, assign the result of the most recently\nevaluated expression to the special variable <code>_</code> (underscore).</p>\n<pre><code class=\"lang-js\">&gt; [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n&gt; _.length\n3\n&gt; _ += 1\n4\n</code></pre>\n<p>Explicitly setting <code>_</code> to a value will disable this behavior.</p>\n<h3>Custom Evaluation Functions<span><a class=\"mark\" href=\"#repl_custom_evaluation_functions\" id=\"repl_custom_evaluation_functions\">#</a></span></h3>\n<p>When a new <code>repl.REPLServer</code> is created, a custom evaluation function may be\nprovided. This can be used, for instance, to implement fully customized REPL\napplications.</p>\n<p>The following illustrates a hypothetical example of a REPL that performs\ntranslation of text from one language to another:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nconst Translator = require(&#39;translator&#39;).Translator;\n\nconst myTranslator = new Translator(&#39;en&#39;, &#39;fr&#39;);\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, myTranslator.translate(cmd));\n}\n\nrepl.start({prompt: &#39;&gt; &#39;, eval: myEval});\n</code></pre>\n<h4>Recoverable Errors<span><a class=\"mark\" href=\"#repl_recoverable_errors\" id=\"repl_recoverable_errors\">#</a></span></h4>\n<p>As a user is typing input into the REPL prompt, pressing the <code>&lt;enter&gt;</code> key will\nsend the current line of input to the <code>eval</code> function. In order to support\nmulti-line input, the eval function can return an instance of <code>repl.Recoverable</code>\nto the provided callback function:</p>\n<pre><code class=\"lang-js\">function eval(cmd, context, filename, callback) {\n  var result;\n  try {\n    result = vm.runInThisContext(cmd);\n  } catch (e) {\n    if (isRecoverableError(e)) {\n      return callback(new repl.Recoverable(e));\n    }\n  }\n  callback(null, result);\n}\n\nfunction isRecoverableError(error) {\n  if (error.name === &#39;SyntaxError&#39;) {\n    return /^(Unexpected end of input|Unexpected token)/.test(error.message);\n  }\n  return false;\n}\n</code></pre>\n<h3>Customizing REPL Output<span><a class=\"mark\" href=\"#repl_customizing_repl_output\" id=\"repl_customizing_repl_output\">#</a></span></h3>\n<p>By default, <code>repl.REPLServer</code> instances format output using the\n<a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a> method before writing the output to the provided Writable\nstream (<code>process.stdout</code> by default). The <code>useColors</code> boolean option can be\nspecified at construction to instruct the default writer to use ANSI style\ncodes to colorize the output from the <code>util.inspect()</code> method.</p>\n<p>It is possible to fully customize the output of a <code>repl.REPLServer</code> instance\nby passing a new function in using the <code>writer</code> option on construction. The\nfollowing example, for instance, simply converts any input text to upper case:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nconst r = repl.start({prompt: &#39;&gt;&#39;, eval: myEval, writer: myWriter});\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null,cmd);\n}\n\nfunction myWriter(output) {\n  return output.toUpperCase();\n}\n</code></pre>\n<h2>Class: REPLServer<span><a class=\"mark\" href=\"#repl_class_replserver\" id=\"repl_class_replserver\">#</a></span></h2>\n<p>The <code>repl.REPLServer</code> class inherits from the <a href=\"readline.html#readline_class_interface\"><code>readline.Interface</code></a> class.\nInstances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and\n<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p>\n<h3>Event: &#39;exit&#39;<span><a class=\"mark\" href=\"#repl_event_exit\" id=\"repl_event_exit\">#</a></span></h3>\n<p>The <code>&#39;exit&#39;</code> event is emitted when the REPL is exited either by receiving the\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&#39;end&#39;</code> on the input stream. The listener\ncallback is invoked without any arguments.</p>\n<pre><code class=\"lang-js\">replServer.on(&#39;exit&#39;, () =&gt; {\n  console.log(&#39;Received &quot;exit&quot; event from repl!&#39;);\n  process.exit();\n});\n</code></pre>\n<h3>Event: &#39;reset&#39;<span><a class=\"mark\" href=\"#repl_event_reset\" id=\"repl_event_reset\">#</a></span></h3>\n<p>The <code>&#39;reset&#39;</code> event is emitted when the REPL&#39;s context is reset. This occurs\nwhenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using\nthe default evaluator and the <code>repl.REPLServer</code> instance was created with the\n<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a\nreference to the <code>context</code> object as the only argument.</p>\n<p>This can be used primarily to re-initialize REPL context to some pre-defined\nstate as illustrated in the following simple example:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nfunction initializeContext(context) {\n  context.m = &#39;test&#39;;\n}\n\nvar r = repl.start({prompt: &#39;&gt;&#39;});\ninitializeContext(r.context);\n\nr.on(&#39;reset&#39;, initializeContext);\n</code></pre>\n<p>When this code is executed, the global <code>&#39;m&#39;</code> variable can be modified but then\nreset to its initial value using the <code>.clear</code> command:</p>\n<pre><code class=\"lang-js\">$ ./node example.js\n&gt;m\n&#39;test&#39;\n&gt;m = 1\n1\n&gt;m\n1\n&gt;.clear\nClearing context...\n&gt;m\n&#39;test&#39;\n&gt;\n</code></pre>\n<h3>replServer.defineCommand(keyword, cmd)<span><a class=\"mark\" href=\"#repl_replserver_definecommand_keyword_cmd\" id=\"repl_replserver_definecommand_keyword_cmd\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>keyword</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The command keyword (<em>without</em> a leading <code>.</code> character).</li>\n<li><code>cmd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to invoke when the command is processed.</li>\n</ul>\n</div><p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands\nto the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the\n<code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following\nproperties:</p>\n<ul>\n<li><code>help</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Help text to be displayed when <code>.help</code> is entered (Optional).</li>\n<li><code>action</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to execute, optionally accepting a single\nstring argument.</li>\n</ul>\n<p>The following example shows two new commands added to the REPL instance:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nvar replServer = repl.start({prompt: &#39;&gt; &#39;});\nreplServer.defineCommand(&#39;sayhello&#39;, {\n  help: &#39;Say hello&#39;,\n  action: function(name) {\n    this.lineParser.reset();\n    this.bufferedCommand = &#39;&#39;;\n    this.write(`Hello, ${name}!\\n`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand(&#39;saybye&#39;, function() {\n  this.write(&#39;Goodbye!\\n&#39;);\n  this.close();\n});\n</code></pre>\n<p>The new commands can then be used from within the REPL instance:</p>\n<pre><code>&gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n</code></pre><h3>replServer.displayPrompt([preserveCursor])<span><a class=\"mark\" href=\"#repl_replserver_displayprompt_preservecursor\" id=\"repl_replserver_displayprompt_preservecursor\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>preserveCursor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input\nfrom the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>\nand resuming the <code>input</code> to accept new input.</p>\n<p>When multi-line input is being entered, an ellipsis is printed rather than the\n&#39;prompt&#39;.</p>\n<p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p>\n<p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from\nwithin the action function for commands registered using the\n<code>replServer.defineCommand()</code> method.</p>\n<h2>repl.start(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#repl_repl_start_options\" id=\"repl_repl_start_options\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The input prompt to display. Defaults to <code>&gt;</code>.</li>\n<li><code>input</code> <span class=\"type\">&lt;Readable&gt;</span> The Readable stream from which REPL input will be read.\nDefaults to <code>process.stdin</code>.</li>\n<li><code>output</code> <span class=\"type\">&lt;Writable&gt;</span> The Writable stream to which REPL output will be\nwritten. Defaults to <code>process.stdout</code>.</li>\n<li><code>terminal</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the <code>output</code> should be\ntreated as a a TTY terminal, and have ANSI/VT100 escape codes written to it.\nDefaults to checking the value of the <code>isTTY</code> property on the <code>output</code>\nstream upon instantiation.</li>\n<li><code>eval</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to be used when evaluating each given line\nof input. Defaults to an async wrapper for the JavaScript <code>eval()</code>\nfunction.  An <code>eval</code> function can error with <code>repl.Recoverable</code> to indicate\nthe input was incomplete and prompt for additional lines.</li>\n<li><code>useColors</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default <code>writer</code>\nfunction should include ANSI color styling to REPL output. If a custom\n<code>writer</code> function is provided then this has no effect. Defaults to the\n REPL instances <code>terminal</code> value.</li>\n<li><code>useGlobal</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default evaluation\n function will use the JavaScript <code>global</code> as the context as opposed to\n creating a new separate context for the REPL instance. Defaults to <code>false</code>.</li>\n<li><code>ignoreUndefined</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the default writer\n will not output the return value of a command if it evaluates to\n <code>undefined</code>. Defaults to <code>false</code>.</li>\n<li><code>writer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to invoke to format the output of each\n command before writing to <code>output</code>. Defaults to <a href=\"util.html#util_util_inspect_object_options\"><code>util.inspect()</code></a>.</li>\n<li><code>replMode</code> - A flag that specifies whether the default evaluator executes\nall JavaScript commands in strict mode, default mode, or a hybrid mode\n(&quot;magic&quot; mode.) Acceptable values are:<ul>\n<li><code>repl.REPL_MODE_SLOPPY</code> - evaluates expressions in sloppy mode.</li>\n<li><code>repl.REPL_MODE_STRICT</code> - evaluates expressions in strict mode. This is\nequivalent to prefacing every repl statement with <code>&#39;use strict&#39;</code>.</li>\n<li><code>repl.REPL_MODE_MAGIC</code> - attempt to evaluates expressions in default\nmode.  If expressions fail to parse, re-try in strict mode.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><p>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p>\n<h2>The Node.js REPL<span><a class=\"mark\" href=\"#repl_the_node_js_repl\" id=\"repl_the_node_js_repl\">#</a></span></h2>\n<p>Node.js itself uses the <code>repl</code> module to provide its own interactive interface\nfor executing JavaScript. This can used by executing the Node.js binary without\npassing any arguments (or by passing the <code>-i</code> argument):</p>\n<pre><code class=\"lang-js\">$ node\n&gt; a = [1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach((v) =&gt; {\n...   console.log(v);\n...   });\n1\n2\n3\n</code></pre>\n<h3>Environment Variable Options<span><a class=\"mark\" href=\"#repl_environment_variable_options\" id=\"repl_environment_variable_options\">#</a></span></h3>\n<p>Various behaviors of the Node.js REPL can be customized using the following\nenvironment variables:</p>\n<ul>\n<li><code>NODE_REPL_HISTORY</code> - When a valid path is given, persistent REPL history\nwill be saved to the specified file rather than <code>.node_repl_history</code> in the\nuser&#39;s home directory. Setting this value to <code>&quot;&quot;</code> will disable persistent\nREPL history. Whitespace will be trimmed from the value.</li>\n<li><code>NODE_REPL_HISTORY_SIZE</code> - Defaults to <code>1000</code>. Controls how many lines of\nhistory will be persisted if history is available. Must be a positive number.</li>\n<li><code>NODE_REPL_MODE</code> - May be any of <code>sloppy</code>, <code>strict</code>, or <code>magic</code>. Defaults\nto <code>magic</code>, which will automatically run &quot;strict mode only&quot; statements in\nstrict mode.</li>\n</ul>\n<h3>Persistent History<span><a class=\"mark\" href=\"#repl_persistent_history\" id=\"repl_persistent_history\">#</a></span></h3>\n<p>By default, the Node.js REPL will persist history between <code>node</code> REPL sessions\nby saving inputs to a <code>.node_repl_history</code> file located in the user&#39;s home\ndirectory. This can be disabled by setting the environment variable\n<code>NODE_REPL_HISTORY=&quot;&quot;</code>.</p>\n<h4>NODE_REPL_HISTORY_FILE<span><a class=\"mark\" href=\"#repl_node_repl_history_file\" id=\"repl_node_repl_history_file\">#</a></span></h4>\n<p>   Stability: 0 - Deprecated: Use <code>NODE_REPL_HISTORY</code> instead.</p>\n<p>Previously in Node.js/io.js v2.x, REPL history was controlled by using a\n<code>NODE_REPL_HISTORY_FILE</code> environment variable, and the history was saved in JSON\nformat. This variable has now been deprecated, and the old JSON REPL history\nfile will be automatically converted to a simplified plain text format. This new\nfile will be saved to either the user&#39;s home directory, or a directory defined\nby the <code>NODE_REPL_HISTORY</code> variable, as documented in the\n<a href=\"#repl_environment_variable_options\">Environment Variable Options</a>.</p>\n<h3>Using the Node.js REPL with advanced line-editors<span><a class=\"mark\" href=\"#repl_using_the_node_js_repl_with_advanced_line_editors\" id=\"repl_using_the_node_js_repl_with_advanced_line_editors\">#</a></span></h3>\n<p>For advanced line-editors, start Node.js with the environmental variable\n<code>NODE_NO_READLINE=1</code>. This will start the main and debugger REPL in canonical\nterminal settings which will allow you to use with <code>rlwrap</code>.</p>\n<p>For example, you could add this to your bashrc file:</p>\n<pre><code class=\"lang-text\">alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;\n</code></pre>\n<h3>Starting multiple REPL instances against a single running instance<span><a class=\"mark\" href=\"#repl_starting_multiple_repl_instances_against_a_single_running_instance\" id=\"repl_starting_multiple_repl_instances_against_a_single_running_instance\">#</a></span></h3>\n<p>It is possible to create and run multiple REPL instances against a single\nrunning instance of Node.js that share a single <code>global</code> object but have\nseparate I/O interfaces.</p>\n<p>The following example, for instance, provides separate REPLs on <code>stdin</code>, a Unix\nsocket, and a TCP socket:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst repl = require(&#39;repl&#39;);\nvar connections = 0;\n\nrepl.start({\n  prompt: &#39;Node.js via stdin&gt; &#39;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: &#39;Node.js via Unix socket&gt; &#39;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, () =&gt; {\n    socket.end();\n  })\n}).listen(&#39;/tmp/node-repl-sock&#39;);\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: &#39;Node.js via TCP socket&gt; &#39;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, () =&gt; {\n    socket.end();\n  });\n}).listen(5001);\n</code></pre>\n<p>Running this application from the command line will start a REPL on stdin.\nOther REPL clients may connect through the Unix socket or TCP socket. <code>telnet</code>,\nfor instance, is useful for connecting to TCP sockets, while <code>socat</code> can be used\nto connect to both Unix and TCP sockets.</p>\n<p>By starting a REPL from a Unix socket-based server instead of stdin, it is\npossible to connect to a long-running Node.js process without restarting it.</p>\n<p>For an example of running a &quot;full-featured&quot; (<code>terminal</code>) REPL over\na <code>net.Server</code> and <code>net.Socket</code> instance, see: <a href=\"https://gist.github.com/2209310\">https://gist.github.com/2209310</a></p>\n<p>For an example of running a REPL instance over <code>curl(1)</code>,\nsee: <a href=\"https://gist.github.com/2053342\">https://gist.github.com/2053342</a></p>\n<!-- [end-include:repl.md] -->\n<!-- [start-include:stream.md] -->\n<h1>Stream<span><a class=\"mark\" href=\"#stream_stream\" id=\"stream_stream\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>A stream is an abstract interface for working with streaming data in Node.js.\nThe <code>stream</code> module provides a base API that makes it easy to build objects\nthat implement the stream interface.</p>\n<p>There are many stream objects provided by Node.js. For instance, a\n<a href=\"http.html#http_class_http_incomingmessage\">request to an HTTP server</a> and <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a>\nare both stream instances.</p>\n<p>Streams can be readable, writable, or both. All streams are instances of\n<a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a>.</p>\n<p>The <code>stream</code> module can be accessed using:</p>\n<pre><code class=\"lang-js\">const stream = require(&#39;stream&#39;);\n</code></pre>\n<p>While it is important for all Node.js users to understand how streams works,\nthe <code>stream</code> module itself is most useful for developer&#39;s that are creating new\ntypes of stream instances. Developer&#39;s who are primarily <em>consuming</em> stream\nobjects will rarely (if ever) have need to use the <code>stream</code> module directly.</p>\n<h2>Organization of this document<span><a class=\"mark\" href=\"#stream_organization_of_this_document\" id=\"stream_organization_of_this_document\">#</a></span></h2>\n<p>This document is divided into two primary sections and third section for\nadditional notes. The first section explains the elements of the stream API that\nare required to <em>use</em> streams within an application. The second section explains\nthe elements of the API that are required to <em>implement</em> new types of streams.</p>\n<h2>Types of Streams<span><a class=\"mark\" href=\"#stream_types_of_streams\" id=\"stream_types_of_streams\">#</a></span></h2>\n<p>There are four fundamental stream types within Node.js:</p>\n<ul>\n<li><a href=\"#stream_class_stream_readable\">Readable</a> - streams from which data can be read (for example\n<a href=\"fs.html#fs_fs_createreadstream_path_options\"><code>fs.createReadStream()</code></a>).</li>\n<li><a href=\"#stream_class_stream_writable\">Writable</a> - streams to which data can be written (for example\n[<code>fs.createWriteStream</code>][]).</li>\n<li><a href=\"#stream_class_stream_duplex\">Duplex</a> - streams that are both Readable and Writable (for example\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>).</li>\n<li><a href=\"#stream_class_stream_transform\">Transform</a> - Duplex streams that can modify or transform the data as it\nis written and read (for example <a href=\"zlib.html#zlib_zlib_createdeflate_options\"><code>zlib.createDeflate()</code></a>).</li>\n</ul>\n<h3>Object Mode<span><a class=\"mark\" href=\"#stream_object_mode\" id=\"stream_object_mode\">#</a></span></h3>\n<p>All streams created by Node.js APIs operate exclusively on strings and <code>Buffer</code>\nobjects. It is possible, however, for stream implementations to work with other\ntypes of JavaScript values (with the exception of <code>null</code> which serves a special\npurpose within streams). Such streams are considered to operate in &quot;object\nmode&quot;.</p>\n<p>Stream instances are switched into object mode using the <code>objectMode</code> option\nwhen the stream is created. Attempting to switch an existing stream into\nobject mode is not safe.</p>\n<h3>Buffering<span><a class=\"mark\" href=\"#stream_buffering\" id=\"stream_buffering\">#</a></span></h3>\n<!--type=misc-->\n<p>Both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a> streams will store data in an internal\nbuffer that can be retrieved using <code>writable._writableState.getBuffer()</code> or\n<code>readable._readableState.buffer</code>, respectively.</p>\n<p>The amount of data potentially buffered depends on the <code>highWaterMark</code> option\npassed into the streams constructor. For normal streams, the <code>highWaterMark</code>\noption specifies a total number of bytes. For streams operating in object mode,\nthe <code>highWaterMark</code> specifies a total number of objects.</p>\n<p>Data is buffered in Readable streams when the implementation calls\n<a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>. If the consumer of the Stream does not\ncall <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a>, the data will sit in the internal\nqueue until it is consumed.</p>\n<p>Once the total size of the internal read buffer reaches the threshold specified\nby <code>highWaterMark</code>, the stream will temporarily stop reading data from the\nunderlying resource until the data currently buffered can be consumed (that is,\nthe stream will stop calling the internal <code>readable.\\_read()</code> method that is\nused to fill the read buffer).</p>\n<p>Data is buffered in Writable streams when the\n<a href=\"#stream_writable_write_chunk_encoding_callback\"><code>writable.write(chunk)</code></a> method is called repeatedly. While the\ntotal size of the internal write buffer is below the threshold set by\n<code>highWaterMark</code>, calls to <code>writable.write()</code> will return <code>true</code>. Once the\nthe size of the internal buffer reaches or exceeds the <code>highWaterMark</code>, <code>false</code>\nwill be returned.</p>\n<p>A key goal of the <code>stream</code> API, an in particular the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method,\nis to limit the buffering of data to acceptable levels such that sources and\ndestinations of differing speeds will not overwhelm the available memory.</p>\n<p>Because <a href=\"#stream_class_stream_duplex\">Duplex</a> and <a href=\"#stream_class_stream_transform\">Transform</a> streams are both Readable and Writable,\neach maintain <em>two</em> separate internal buffers used for reading and writing,\nallowing each side to operate independently of the other while maintaining an\nappropriate and efficient flow of data. For example, <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> instances\nare <a href=\"#stream_class_stream_duplex\">Duplex</a> streams whose Readable side allows consumption of data received\n<em>from</em> the socket and whose Writable side allows writing data <em>to</em> the socket.\nBecause data may be written to the socket at a faster or slower rate than data\nis received, it is important each side operate (and buffer) independently of\nthe other.</p>\n<h2>API for Stream Consumers<span><a class=\"mark\" href=\"#stream_api_for_stream_consumers\" id=\"stream_api_for_stream_consumers\">#</a></span></h2>\n<!--type=misc-->\n<p>Almost all Node.js applications, no matter how simple, use streams in some\nmanner. The following is an example of using streams in a Node.js application\nthat implements an HTTP server:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst server = http.createServer( (req, res) =&gt; {\n  // req is an http.IncomingMessage, which is a Readable Stream\n  // res is an http.ServerResponse, which is a Writable Stream\n\n  var body = &#39;&#39;;\n  // Get the data as utf8 strings.\n  // If an encoding is not set, Buffer objects will be received.\n  req.setEncoding(&#39;utf8&#39;);\n\n  // Readable streams emit &#39;data&#39; events once a listener is added\n  req.on(&#39;data&#39;, (chunk) =&gt; {\n    body += chunk;\n  });\n\n  // the end event indicates that the entire body has been received\n  req.on(&#39;end&#39;, () =&gt; {\n    try {\n      const data = JSON.parse(body);\n    } catch (er) {\n      // uh oh!  bad json!\n      res.statusCode = 400;\n      return res.end(`error: ${er.message}`);\n    }\n\n    // write back something interesting to the user:\n    res.write(typeof data);\n    res.end();\n  });\n});\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d &#39;{}&#39;\n// object\n// $ curl localhost:1337 -d &#39;&quot;foo&quot;&#39;\n// string\n// $ curl localhost:1337 -d &#39;not json&#39;\n// error: Unexpected token o\n</code></pre>\n<p><a href=\"#stream_class_stream_writable\">Writable</a> streams (such as <code>res</code> in the example) expose methods such as\n<code>write()</code> and <code>end()</code> that are used to write data onto the stream.</p>\n<p><a href=\"#stream_class_stream_readable\">Readable</a> streams use the <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> API for notifying application\ncode when data is available to be read off the stream. That available data can\nbe read from the stream in multiple ways.</p>\n<p>Both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a> streams use the <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> API in\nvarious ways to communicate the current state of the stream.</p>\n<p><a href=\"#stream_class_stream_duplex\">Duplex</a> and <a href=\"#stream_class_stream_transform\">Transform</a> streams are both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a>.</p>\n<p>Applications that are either writing data to or consuming data from a stream\nare not required to implement the stream interfaces directly and will generally\nhave no reason to call <code>require(&#39;stream&#39;)</code>.</p>\n<p>Developers wishing to implement new types of streams should refer to the\nsection <a href=\"#stream_api_for_stream_Implemeters\">API for Stream Implemeters</a>.</p>\n<h3>Writable Streams<span><a class=\"mark\" href=\"#stream_writable_streams\" id=\"stream_writable_streams\">#</a></span></h3>\n<p>Writable streams are an abstraction for a <em>destination</em> to which data is\nwritten.</p>\n<p>Examples of <a href=\"#stream_class_stream_writable\">Writable</a> streams include:</p>\n<ul>\n<li><a href=\"http.html#http_class_http_clientrequest\">HTTP requests, on the client</a></li>\n<li><a href=\"http.html#http_class_http_serverresponse\">HTTP responses, on the server</a></li>\n<li><a href=\"fs.html#fs_class_fs_writestream\">fs write streams</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"child_process.html#child_process_child_stdin\">child process stdin</a></li>\n<li><a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a>, <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a></li>\n</ul>\n<p><em>Note</em>: Some of these examples are actually <a href=\"#stream_class_stream_duplex\">Duplex</a> streams that implement\nthe <a href=\"#stream_class_stream_writable\">Writable</a> interface.</p>\n<p>All <a href=\"#stream_class_stream_writable\">Writable</a> streams implement the interface defined by the\n<code>stream.Writable</code> class.</p>\n<p>While specific instances of <a href=\"#stream_class_stream_writable\">Writable</a> streams may differ in various ways,\nall Writable streams follow the same fundamental usage pattern as illustrated\nin the example below:</p>\n<pre><code class=\"lang-js\">const myStream = getWritableStreamSomehow();\nmyStream.write(&#39;some data&#39;);\nmyStream.write(&#39;some more data&#39;);\nmyStream.end(&#39;done writing data&#39;);\n</code></pre>\n<h4>Class: stream.Writable<span><a class=\"mark\" href=\"#stream_class_stream_writable\" id=\"stream_class_stream_writable\">#</a></span></h4>\n<!--type=class-->\n<h5>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#stream_event_close\" id=\"stream_event_close\">#</a></span></h5>\n<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\nresources (a file descriptor, for example) have been closed. The event indicates\nthat no more events will be emitted, and no further computation will occur.</p>\n<p>Not all Writable streams will emit the <code>&#39;close&#39;</code> event.</p>\n<h5>Event: &#39;drain&#39;<span><a class=\"mark\" href=\"#stream_event_drain\" id=\"stream_event_drain\">#</a></span></h5>\n<p>If a call to <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write(chunk)</code></a> returns <code>false</code>, the\n<code>&#39;drain&#39;</code> event will be emitted when it is appropriate to resume writing data\nto the stream.</p>\n<pre><code class=\"lang-js\">// Write the data to the supplied writable stream one million times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  var i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i--;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&#39;t pass the callback, because we&#39;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&#39;drain&#39;, write);\n    }\n  }\n}\n</code></pre>\n<h5>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#stream_event_error\" id=\"stream_event_error\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n</div><p>The <code>&#39;error&#39;</code> event is emitted if an error occurred while writing or piping\ndata. The listener callback is passed a single <code>Error</code> argument when called.</p>\n<p><em>Note</em>: The stream is not closed when the <code>&#39;error&#39;</code> event is emitted.</p>\n<h5>Event: &#39;finish&#39;<span><a class=\"mark\" href=\"#stream_event_finish\" id=\"stream_event_finish\">#</a></span></h5>\n<p>The <code>&#39;finish&#39;</code> event is emitted after the <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> method\nhas been called, and all data has been flushed to the underlying system.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(&#39;hello, #${i}!\\n&#39;);\n}\nwriter.end(&#39;This is the end\\n&#39;);\nwriter.on(&#39;finish&#39;, () =&gt; {\n  console.error(&#39;All writes are now complete.&#39;);\n});\n</code></pre>\n<h5>Event: &#39;pipe&#39;<span><a class=\"mark\" href=\"#stream_event_pipe\" id=\"stream_event_pipe\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>src</code> <a href=\"stream.html#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a> source stream that is piping to this writable</li>\n</ul>\n</div><p>The <code>&#39;pipe&#39;</code> event is emitted when the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method is called on\na readable stream, adding this writable to its set of destinations.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on(&#39;pipe&#39;, (src) =&gt; {\n  console.error(&#39;something is piping into the writer&#39;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\n</code></pre>\n<h5>Event: &#39;unpipe&#39;<span><a class=\"mark\" href=\"#stream_event_unpipe\" id=\"stream_event_unpipe\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>src</code> <span class=\"type\">&lt;<a href=\"#stream_class_stream_readable\">Readable</a> Stream&gt;</span> The source stream that\n<a href=\"#stream_readable_unpipe_destination\">unpiped</a> this writable</li>\n</ul>\n</div><p>The <code>&#39;unpipe&#39;</code> event is emitted when the <a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method is called\non a <a href=\"#stream_class_stream_readable\">Readable</a> stream, removing this <a href=\"#stream_class_stream_writable\">Writable</a> from its set of\ndestinations.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on(&#39;unpipe&#39;, (src) =&gt; {\n  console.error(&#39;Something has stopped piping into the writer.&#39;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);\n</code></pre>\n<h5>writable.cork()<span><a class=\"mark\" href=\"#stream_writable_cork\" id=\"stream_writable_cork\">#</a></span></h5>\n<p>The <code>writable.cork()</code> method forces all written data to be buffered in memory.\nThe buffered data will be flushed when either the <a href=\"#stream_writable_uncork\"><code>stream.uncork()</code></a> or\n<a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> methods are called.</p>\n<p>The primary intent of <code>writable.cork()</code> is to avoid a situation where writing\nmany small chunks of data to a stream do not cause an backup in the internal\nbuffer that would have an adverse impact on performance. In such situations,\nimplementations that implement the <code>writable.\\_writev()</code> method can perform\nbuffered writes in a more optimized manner.</p>\n<h5>writable.end([chunk][, encoding][, callback])<span><a class=\"mark\" href=\"#stream_writable_end_chunk_encoding_callback\" id=\"stream_writable_end_chunk_encoding_callback\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;any&gt;</span> Optional data to write. For streams not operating\nin object mode, <code>chunk</code> must be a string or a <code>Buffer</code>. For object mode\nstreams, <code>chunk</code> may be any JavaScript value other than <code>null</code>.</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding, if <code>chunk</code> is a String</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Optional callback for when the stream is finished</li>\n</ul>\n</div><p>Calling the <code>writable.end()</code> method signals that no more data will be written\nto the <a href=\"#stream_class_stream_writable\">Writable</a>. The optional <code>chunk</code> and <code>encoding</code> arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream. If provided, the optional <code>callback</code> function is attached as a listener\nfor the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event.</p>\n<p>Calling the <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> method after calling\n<a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> will raise an error.</p>\n<pre><code class=\"lang-js\">// write &#39;hello, &#39; and then end with &#39;world!&#39;\nconst file = fs.createWriteStream(&#39;example.txt&#39;);\nfile.write(&#39;hello, &#39;);\nfile.end(&#39;world!&#39;);\n// writing more now is not allowed!\n</code></pre>\n<h5>writable.setDefaultEncoding(encoding)<span><a class=\"mark\" href=\"#stream_writable_setdefaultencoding_encoding\" id=\"stream_writable_setdefaultencoding_encoding\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The new default encoding</li>\n<li>Return: <code>this</code></li>\n</ul>\n</div><p>The <code>writable.setDefaultEncoding()</code> method sets the default <code>encoding</code> for a\n<a href=\"#stream_class_stream_writable\">Writable</a> stream.</p>\n<h5>writable.uncork()<span><a class=\"mark\" href=\"#stream_writable_uncork\" id=\"stream_writable_uncork\">#</a></span></h5>\n<p>The <code>writable.uncork()</code> method flushes all data buffered since\n<a href=\"#stream_writable_cork\"><code>stream.cork()</code></a> was called.</p>\n<p>When using <code>writable.cork()</code> and <code>writable.uncork()</code> to manage the buffering\nof writes to a stream, it is recommended that calls to <code>writable.uncork()</code> be\ndeferred using <code>process.nextTick()</code>. Doing so allows batching of all\n<code>writable.write()</code> calls that occur within a given Node.js event loop phase.</p>\n<pre><code class=\"lang-js\">stream.cork();\nstream.write(&#39;some &#39;);\nstream.write(&#39;data &#39;);\nprocess.nextTick(() =&gt; stream.uncork());\n</code></pre>\n<p>If the <code>writable.cork()</code> method is called multiple times on a stream, the same\nnumber of calls to <code>writable.uncork()</code> must be called to flush the buffered\ndata.</p>\n<pre><code>stream.cork();\nstream.write(&#39;some &#39;);\nstream.cork();\nstream.write(&#39;data &#39;);\nprocess.nextTick(() =&gt; {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n</code></pre><h5>writable.write(chunk[, encoding][, callback])<span><a class=\"mark\" href=\"#stream_writable_write_chunk_encoding_callback\" id=\"stream_writable_write_chunk_encoding_callback\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The data to write</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding, if <code>chunk</code> is a String</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback for when this chunk of data is flushed</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to\nwait for the <code>&#39;drain&#39;</code> event to be emitted before continuing to write\nadditional data; otherwise <code>true</code>.</li>\n</ul>\n</div><p>The <code>writable.write()</code> method writes some data to the stream, and calls the\nsupplied <code>callback</code> once the data has been fully handled. If an error\noccurs, the <code>callback</code> <em>may or may not</em> be called with the error as its\nfirst argument. To reliably detect write errors, add a listener for the\n<code>&#39;error&#39;</code> event.</p>\n<p>The return value indicates whether the written <code>chunk</code> was buffered internally\nand the buffer has exceeded the <code>highWaterMark</code> configured when the stream was\ncreated. If <code>false</code> is returned, further attempts to write data to the stream\nshould be paused until the <code>&#39;drain&#39;</code> event is emitted.</p>\n<p>A Writable stream in object mode will always ignore the <code>encoding</code> argument.</p>\n<h3>Readable Streams<span><a class=\"mark\" href=\"#stream_readable_streams\" id=\"stream_readable_streams\">#</a></span></h3>\n<p>Readable streams are an abstraction for a <em>source</em> from which data is\nconsumed.</p>\n<p>Examples of Readable streams include:</p>\n<ul>\n<li><a href=\"http.html#http_class_http_incomingmessage\">HTTP responses, on the client</a></li>\n<li><a href=\"http.html#http_class_http_incomingmessage\">HTTP requests, on the server</a></li>\n<li><a href=\"fs.html#fs_class_fs_readstream\">fs read streams</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"child_process.html#child_process_child_stdout\">child process stdout and stderr</a></li>\n<li><a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a></li>\n</ul>\n<p>All <a href=\"#stream_class_stream_readable\">Readable</a> streams implement the interface defined by the\n<code>stream.Readable</code> class.</p>\n<h4>Two Modes<span><a class=\"mark\" href=\"#stream_two_modes\" id=\"stream_two_modes\">#</a></span></h4>\n<p>Readable streams effectively operate in one of two modes: flowing and paused.</p>\n<p>When in flowing mode, data is read from the underlying system automatically\nand provided to an application as quickly as possible using events via the\n<a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> interface.</p>\n<p>In paused mode, the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method must be called\nexplicitly to read chunks of data from the stream.</p>\n<p>All <a href=\"#stream_class_stream_readable\">Readable</a> streams begin in paused mode but can be switched to flowing\nmode in one of the following ways:</p>\n<ul>\n<li>Adding a <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event handler.</li>\n<li>Calling the <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method.</li>\n<li>Calling the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method to send the data to a <a href=\"#stream_class_stream_writable\">Writable</a>.</li>\n</ul>\n<p>The Readable can switch back to paused mode using one of the following:</p>\n<ul>\n<li>If there are no pipe destinations, by calling the\n<a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method.</li>\n<li>If there are pipe destinations, by removing any <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event\nhandlers, and removing all pipe destinations by calling the\n<a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method.</li>\n</ul>\n<p>The important concept to remember is that a Readable will not generate data\nuntil a mechanism for either consuming or ignoring that data is provided. If\nthe consuming mechanism is disabled or taken away, the Readable will <em>attempt</em>\nto stop generating the data.</p>\n<p><em>Note</em>: For backwards compatibility reasons, removing <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event\nhandlers will <strong>not</strong> automatically pause the stream. Also, if there are piped\ndestinations, then calling <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> will not guarantee\nthat the stream will <em>remain</em> paused once those destinations drain and ask for\nmore data.</p>\n<p><em>Note</em>: If a <a href=\"#stream_class_stream_readable\">Readable</a> is switched into flowing mode and there are no\nconsumers available handle the data, that data will be lost. This can occur,\nfor instance, when the <code>readable.resume()</code> method is called without a listener\nattached to the <code>&#39;data&#39;</code> event, or when a <code>&#39;data&#39;</code> event handler is removed\nfrom the stream.</p>\n<h4>Three States<span><a class=\"mark\" href=\"#stream_three_states\" id=\"stream_three_states\">#</a></span></h4>\n<p>The &quot;two modes&quot; of operation for a Readable stream are a simplified abstraction\nfor the more complicated internal state management that is happening within the\nReadable stream implementation.</p>\n<p>Specifically, at any given point in time, every Readable is in one of three\npossible states:</p>\n<ul>\n<li><code>readable._readableState.flowing = null</code></li>\n<li><code>readable._readableState.flowing = false</code></li>\n<li><code>readable._readableState.flowing = true</code></li>\n</ul>\n<p>When <code>readable._readableState.flowing</code> is <code>null</code>, no mechanism for consuming the\nstreams data is provided so the stream will not generate its data.</p>\n<p>Attaching a listener for the <code>&#39;data&#39;</code> event, calling the <code>readable.pipe()</code>\nmethod, or calling the <code>readable.resume()</code> method will switch\n<code>readable._readableState.flowing</code> to <code>true</code>, causing the Readable to begin\nactively emitting events as data is generated.</p>\n<p>Calling <code>readable.pause()</code>, <code>readable.unpipe()</code>, or receiving &quot;back pressure&quot;\nwill cause the <code>readable._readableState.flowing</code> to be set as <code>false</code>,\ntemporarily halting the flowing of events but <em>not</em> halting the generation of\ndata.</p>\n<p>While <code>readable._readableState.flowing</code> is <code>false</code>, data may be accumulating\nwithin the streams internal buffer.</p>\n<h4>Choose One<span><a class=\"mark\" href=\"#stream_choose_one\" id=\"stream_choose_one\">#</a></span></h4>\n<p>The Readable stream API evolved across multiple Node.js versions and provides\nmultiple methods of consuming stream data. In general, developers should choose\n<em>one</em> of the methods of consuming data and <em>should never</em> use multiple methods\nto consume data from a single stream.</p>\n<p>Use of the <code>readable.pipe()</code> method is recommended for most users as it has been\nimplemented to provide the easiest way of consuming stream data. Developers that\nrequire more fine-grained control over the transfer and generation of data can\nuse the <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> and <code>readable.pause()</code>/<code>readable.resume()</code> APIs.</p>\n<h4>Class: stream.Readable<span><a class=\"mark\" href=\"#stream_class_stream_readable\" id=\"stream_class_stream_readable\">#</a></span></h4>\n<!--type=class-->\n<h5>Event: &#39;close&#39;<span><a class=\"mark\" href=\"#stream_event_close_1\" id=\"stream_event_close_1\">#</a></span></h5>\n<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\nresources (a file descriptor, for example) have been closed. The event indicates\nthat no more events will be emitted, and no further computation will occur.</p>\n<p>Not all <a href=\"#stream_class_stream_readable\">Readable</a> streams will emit the <code>&#39;close&#39;</code> event.</p>\n<h5>Event: &#39;data&#39;<span><a class=\"mark\" href=\"#stream_event_data\" id=\"stream_event_data\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The chunk of data. For streams that are not\noperating in object mode, the chunk will be either a string or <code>Buffer</code>.\nFor streams that are in object mode, the chunk can be any JavaScript value\nother than <code>null</code>.</li>\n</ul>\n</div><p>The <code>&#39;data&#39;</code> event is emitted whenever the stream is relinquishing ownership of\na chunk of data to a consumer. This may occur whenever the stream is switched\nin flowing mode by calling <code>readable.pipe()</code>, <code>readable.resume()</code>, or by\nattaching a listener callback to the <code>&#39;data&#39;</code> event. The <code>&#39;data&#39;</code> event will\nalso be emitted whenever the <code>readable.read()</code> method is called and a chunk of\ndata is available to be returned.</p>\n<p>Attaching a <code>&#39;data&#39;</code> event listener to a stream that has not been explicitly\npaused will switch the stream into flowing mode. Data will then be passed as\nsoon as it is available.</p>\n<p>The listener callback will be passed the chunk of data as a string if a default\nencoding has been specified for the stream using the\n<code>readable.setEncoding()</code> method; otherwise the data will be passed as a\n<code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\n</code></pre>\n<h5>Event: &#39;end&#39;<span><a class=\"mark\" href=\"#stream_event_end\" id=\"stream_event_end\">#</a></span></h5>\n<p>The <code>&#39;end&#39;</code> event is emitted when there is no more data to be consumed from\nthe stream.</p>\n<p><em>Note</em>: The <code>&#39;end&#39;</code> event <strong>will not be emitted</strong> unless the data is\ncompletely consumed. This can be accomplished by switching the stream into\nflowing mode, or by calling <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> repeatedly until\nall data has been consumed.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\nreadable.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;There will be no more data.&#39;);\n});\n</code></pre>\n<h5>Event: &#39;error&#39;<span><a class=\"mark\" href=\"#stream_event_error_1\" id=\"stream_event_error_1\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n</div><p>The <code>&#39;error&#39;</code> event may be emitted by a Readable implementation at any time.\nTypically, this may occur if the underlying stream in unable to generate data\ndue to an underlying internal failure, or when a stream implementation attempts\nto push an invalid chunk of data.</p>\n<p>The listener callback will be passed a single <code>Error</code> object.</p>\n<h5>Event: &#39;readable&#39;<span><a class=\"mark\" href=\"#stream_event_readable\" id=\"stream_event_readable\">#</a></span></h5>\n<p>The <code>&#39;readable&#39;</code> event is emitted when there is data available to be read from\nthe stream. In some cases, attaching a listener for the <code>&#39;readable&#39;</code> event will\ncause some amount of data to be read into an internal buffer.</p>\n<pre><code class=\"lang-javascript\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;readable&#39;, () =&gt; {\n  // there is some data to read now\n});\n</code></pre>\n<p>The <code>&#39;readable&#39;</code> event will also be emitted once the end of the stream data\nhas been reached but before the <code>&#39;end&#39;</code> event is emitted.</p>\n<p>Effectively, the <code>&#39;readable&#39;</code> event indicates that the stream has new\ninformation: either new data is available or the end of the stream has been\nreached. In the former case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return the\navailable data. In the latter case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return\n<code>null</code>. For instance, in the following example, <code>foo.txt</code> is an empty file:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst rr = fs.createReadStream(&#39;foo.txt&#39;);\nrr.on(&#39;readable&#39;, () =&gt; {\n  console.log(&#39;readable:&#39;, rr.read());\n});\nrr.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;end&#39;);\n});\n</code></pre>\n<p>The output of running this script is:</p>\n<pre><code>$ node test.js\nreadable: null\nend\n</code></pre><p><em>Note</em>: In general, the <code>readable.pipe()</code> and <code>&#39;data&#39;</code> event mechanisms are\npreferred over the use of the <code>&#39;readable&#39;</code> event.</p>\n<h5>readable.isPaused()<span><a class=\"mark\" href=\"#stream_readable_ispaused\" id=\"stream_readable_ispaused\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>The <code>readable.isPaused()</code> method returns the current operating state of the\nReadable. This is used primarily by the mechanism that underlies the\n<code>readable.pipe()</code> method. In most typical cases, there will be no reason to\nuse this method directly.</p>\n<pre><code class=\"lang-js\">const readable = new stream.Readable\n\nreadable.isPaused() // === false\nreadable.pause()\nreadable.isPaused() // === true\nreadable.resume()\nreadable.isPaused() // === false\n</code></pre>\n<h5>readable.pause()<span><a class=\"mark\" href=\"#stream_readable_pause\" id=\"stream_readable_pause\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li>Return: <code>this</code></li>\n</ul>\n</div><p>The <code>readable.pause()</code> method will cause a stream in flowing mode to stop\nemitting <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log(&#39;There will be no additional data for 1 second.&#39;);\n  setTimeout(() =&gt; {\n    console.log(&#39;Now data will start flowing again.&#39;);\n    readable.resume();\n  }, 1000);\n});\n</code></pre>\n<h5>readable.pipe(destination[, options])<span><a class=\"mark\" href=\"#stream_readable_pipe_destination_options\" id=\"stream_readable_pipe_destination_options\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>destination</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a> The destination for writing data</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Pipe options<ul>\n<li><code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> End the writer when the reader ends. Defaults to <code>true</code>.</li>\n</ul>\n</li>\n</ul>\n</div><p>The <code>readable.pipe()</code> method attaches a <a href=\"#stream_class_stream_writable\">Writable</a> stream to the <code>readable</code>,\ncausing it to switch automatically into flowing mode and push all of its data\nto the attached <a href=\"#stream_class_stream_writable\">Writable</a>. The flow of data will be automatically managed so\nthat the destination Writable stream is not overwhelmed by a faster Readable\nstream.</p>\n<p>The following example pipes all of the data from the <code>readable</code> into a file\nnamed <code>file.txt</code>:</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\n// All the data from readable goes into &#39;file.txt&#39;\nreadable.pipe(writable);\n</code></pre>\n<p>It is possible to attach multiple Writable streams to a single Readable stream.</p>\n<p>The <code>readable.pipe()</code> method returns a reference to the <em>destination</em> stream\nmaking it possible to set up chains of piped streams:</p>\n<pre><code class=\"lang-js\">const r = fs.createReadStream(&#39;file.txt&#39;);\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream(&#39;file.txt.gz&#39;);\nr.pipe(z).pipe(w);\n</code></pre>\n<p>By default, <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called on the destination Writable\nstream when the source Readable stream emits <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a>, so that the\ndestination is no longer writable. To disable this default behavior, the <code>end</code>\noption can be passed as <code>false</code>, causing the destination stream to remain open,\nas illustrated in the following example:</p>\n<pre><code class=\"lang-js\">reader.pipe(writer, { end: false });\nreader.on(&#39;end&#39;, () =&gt; {\n  writer.end(&#39;Goodbye\\n&#39;);\n});\n</code></pre>\n<p>One important caveat is that if the Readable stream emits an error during\nprocessing, the Writable destination <em>is not closed</em> automatically. If an\nerror occurs, it will be necessary to <em>manually</em> close each stream in order\nto prevent memory leaks.</p>\n<p><em>Note</em>: The <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a> and <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> Writable streams are\nnever closed until the Node.js process exits, regardless of the specified\noptions.</p>\n<h5>readable.read([size])<span><a class=\"mark\" href=\"#stream_readable_read_size\" id=\"stream_readable_read_size\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Optional argument to specify how much data to read.</li>\n<li>Return <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a></li>\n</ul>\n</div><p>The <code>readable.read()</code> method pulls some data out of the internal buffer and\nreturns it. If no data available to be read, <code>null</code> is returned. By default,\nthe data will be returned as a <code>Buffer</code> object unless an encoding has been\nspecified using the <code>readable.setEncoding()</code> method or the stream is operating\nin object mode.</p>\n<p>The optional <code>size</code> argument specifies a specific number of bytes to read. If\n<code>size</code> bytes are not available to be read, <code>null</code> will be returned <em>unless</em>\nthe stream has ended, in which case all of the data remaining in the internal\nbuffer will be returned (<em>even if it exceeds <code>size</code> bytes</em>).</p>\n<p>If the <code>size</code> argument is not specified, all of the data contained in the\ninternal buffer will be returned.</p>\n<p>The <code>readable.read()</code> method should only be called on Readable streams operating\nin paused mode. In flowing mode, <code>readable.read()</code> is called automatically until\nthe internal buffer is fully drained.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;readable&#39;, () =&gt; {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(`Received ${chunk.length} bytes of data.`);\n  }\n});\n</code></pre>\n<p>In general, it is recommended that developers avoid the use of the <code>&#39;readable&#39;</code>\nevent and the <code>readable.read()</code> method in favor of using either\n<code>readable.pipe()</code> or the <code>&#39;data&#39;</code> event.</p>\n<p>A Readable stream in object mode will always return a single item from\na call to <a href=\"#stream_readable_read_size\"><code>readable.read(size)</code></a>, regardless of the value of the\n<code>size</code> argument.</p>\n<p><em>Note:</em> If the <code>readable.read()</code> method returns a chunk of data, a <code>&#39;data&#39;</code>\nevent will also be emitted.</p>\n<p><em>Note</em>: Calling <a href=\"#stream_readable_read_size\"><code>stream.read([size])</code></a> after the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a>\nevent has been emitted will return <code>null</code>. No runtime error will be raised.</p>\n<h5>readable.resume()<span><a class=\"mark\" href=\"#stream_readable_resume\" id=\"stream_readable_resume\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li>Return: <code>this</code></li>\n</ul>\n</div><p>The <code>readable.resume()</code> method causes an explicitly paused Readable stream to\nresume emitting <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events, switching the stream into flowing mode.</p>\n<p>The <code>readable.resume()</code> method can be used to fully consume the data from a\nstream without actually processing any of that data as illustrated in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">getReadableStreamSomehow()\n  .resume();\n  .on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;Reached the end, but did not read anything.&#39;);\n  });\n</code></pre>\n<h5>readable.setEncoding(encoding)<span><a class=\"mark\" href=\"#stream_readable_setencoding_encoding\" id=\"stream_readable_setencoding_encoding\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The encoding to use.</li>\n<li>Return: <code>this</code></li>\n</ul>\n</div><p>The <code>readable.setEncoding()</code> method sets the default character encoding for\ndata read from the Readable stream.</p>\n<p>Setting an encoding causes the stream data\nto be returned as string of the specified encoding rather than as <code>Buffer</code>\nobjects. For instance, calling <code>readable.setEncoding(&#39;utf8&#39;)</code> will cause the\noutput data will be interpreted as UTF-8 data, and passed as strings. Calling\n<code>readable.setEncoding(&#39;hex&#39;)</code> will cause the data to be encoded in hexadecimal\nstring format.</p>\n<p>The Readable stream will properly handle multi-byte characters delivered through\nthe stream that would otherwise become improperly decoded if simply pulled from\nthe stream as <code>Buffer</code> objects.</p>\n<p>Encoding can be disabled by calling <code>readable.setEncoding(null)</code>. This approach\nis useful when working with binary data or with large multi-byte strings spread\nout over multiple chunks.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.setEncoding(&#39;utf8&#39;);\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  assert.equal(typeof chunk, &#39;string&#39;);\n  console.log(&#39;got %d characters of string data&#39;, chunk.length);\n});\n</code></pre>\n<h5>readable.unpipe([destination])<span><a class=\"mark\" href=\"#stream_readable_unpipe_destination\" id=\"stream_readable_unpipe_destination\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>destination</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a> Optional specific stream to unpipe</li>\n</ul>\n</div><p>The <code>readable.unpipe()</code> method detaches a Writable stream previously attached\nusing the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method.</p>\n<p>If the <code>destination</code> is not specified, then <em>all</em> pipes are detached.</p>\n<p>If the <code>destination</code> is specified, but no pipe is set up for it, then\nthe method does nothing.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\n// All the data from readable goes into &#39;file.txt&#39;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(() =&gt; {\n  console.log(&#39;Stop writing to file.txt&#39;);\n  readable.unpipe(writable);\n  console.log(&#39;Manually close the file stream&#39;);\n  writable.end();\n}, 1000);\n</code></pre>\n<h5>readable.unshift(chunk)<span><a class=\"mark\" href=\"#stream_readable_unshift_chunk\" id=\"stream_readable_unshift_chunk\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Chunk of data to unshift onto the read queue</li>\n</ul>\n</div><p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to &quot;un-consume&quot; some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.</p>\n<p><em>Note</em>: The <code>stream.unshift(chunk)</code> method cannot be called after the\n<a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event has been emitted or a runtime error will be thrown.</p>\n<p>Developers using <code>stream.unshift()</code> often should consider switching to\nuse of a <a href=\"#stream_class_stream_transform\">Transform</a> stream instead. See the <a href=\"#stream_api_for_stream_Implemeters\">API for Stream Implemeters</a>\nsection for more information.</p>\n<pre><code class=\"lang-js\">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nconst StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on(&#39;error&#39;, callback);\n  stream.on(&#39;readable&#39;, onReadable);\n  const decoder = new StringDecoder(&#39;utf8&#39;);\n  var header = &#39;&#39;;\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join(&#39;\\n\\n&#39;);\n        const buf = Buffer.from(remaining, &#39;utf8&#39;);\n        if (buf.length)\n          stream.unshift(buf);\n        stream.removeListener(&#39;error&#39;, callback);\n        stream.removeListener(&#39;readable&#39;, onReadable);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}\n</code></pre>\n<p><em>Note</em>: Unlike <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>, <code>stream.unshift(chunk)</code>\nwill not end the reading process by resetting the internal reading state of the\nstream. This can cause unexpected results if <code>readable.unshift()</code> is called\nduring a read (i.e. from within a <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a>\nimplementation on a custom stream). Following the call to <code>readable.unshift()</code>\nwith an immediate <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(&#39;&#39;)</code></a> will reset the reading state\nappropriately, however it is best to simply avoid calling <code>readable.unshift()</code>\nwhile in the process of performing a read.</p>\n<h5>readable.wrap(stream)<span><a class=\"mark\" href=\"#stream_readable_wrap_stream\" id=\"stream_readable_wrap_stream\">#</a></span></h5>\n<div class=\"signature\"><ul>\n<li><code>stream</code> <a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a> An &quot;old style&quot; readable stream</li>\n</ul>\n</div><p>Versions of Node.js prior to v0.10 had streams that did not implement the\nentire <code>stream</code> module API as it is currently defined. (See <a href=\"#stream_compatibility_with_older_node_js_versions\">Compatibility</a>\nfor more information.)</p>\n<p>When using an older Node.js library that emits <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events and has a\n<a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method that is advisory only, the\n<code>readable.wrap()</code> method can be used to create a <a href=\"#stream_class_stream_readable\">Readable</a> stream that uses\nthe old stream as its data source.</p>\n<p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const OldReader = require(&#39;./old-api-module.js&#39;).OldReader;\nconst Readable = require(&#39;stream&#39;).Readable;\nconst oreader = new OldReader;\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on(&#39;readable&#39;, () =&gt; {\n  myReader.read(); // etc.\n});\n</code></pre>\n<h3>Duplex and Transform Streams<span><a class=\"mark\" href=\"#stream_duplex_and_transform_streams\" id=\"stream_duplex_and_transform_streams\">#</a></span></h3>\n<h4>Class: stream.Duplex<span><a class=\"mark\" href=\"#stream_class_stream_duplex\" id=\"stream_class_stream_duplex\">#</a></span></h4>\n<!--type=class-->\n<p>Duplex streams are streams that implement both the <a href=\"#stream_class_stream_readable\">Readable</a> and\n<a href=\"#stream_class_stream_writable\">Writable</a> interfaces.</p>\n<p>Examples of Duplex streams include:</p>\n<ul>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n</ul>\n<h4>Class: stream.Transform<span><a class=\"mark\" href=\"#stream_class_stream_transform\" id=\"stream_class_stream_transform\">#</a></span></h4>\n<!--type=class-->\n<p>Transform streams are <a href=\"#stream_class_stream_duplex\">Duplex</a> streams where the output is in some way\nrelated to the input. Like all <a href=\"#stream_class_stream_duplex\">Duplex</a> streams, Transform streams\nimplement both the <a href=\"#stream_class_stream_readable\">Readable</a> and <a href=\"#stream_class_stream_writable\">Writable</a> interfaces.</p>\n<p>Examples of Transform streams include:</p>\n<ul>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n</ul>\n<h2>API for Stream Implemeters<span><a class=\"mark\" href=\"#stream_api_for_stream_implemeters\" id=\"stream_api_for_stream_implemeters\">#</a></span></h2>\n<!--type=misc-->\n<p>The <code>stream</code> module API has been designed to make it possible to easily\nimplement streams using JavaScript&#39;s prototypical inheritance model.</p>\n<p>First, a stream developer would declare a new JavaScript class that extends one\nof the four basic stream classes (<code>stream.Writable</code>, <code>stream.Readable</code>,\n<code>stream.Duplex</code>, or <code>stream.Transform</code>), making sure the call the appropriate\nparent class constructor:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n  }\n}\n</code></pre>\n<p>The new stream class must then implement one or more specific methods, depending\non the type of stream being created, as detailed in the chart below:</p>\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>Use-case</p>\n      </th>\n      <th>\n        <p>Class</p>\n      </th>\n      <th>\n        <p>Method(s) to implement</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>Reading only</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_readable_1\">Readable</a></p>\n    </td>\n    <td>\n      <p><code><a href=\"#stream_readable_read_size_1\">_read</a></code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Writing only</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_writable_1\">Writable</a></p>\n    </td>\n    <td>\n      <p><code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>, <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Reading and writing</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_duplex_1\">Duplex</a></p>\n    </td>\n    <td>\n      <p><code><a href=\"#stream_readable_read_size_1\">_read</a></code>, <code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>, <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Operate on written data, then read the result</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_transform_1\">Transform</a></p>\n    </td>\n    <td>\n      <p><code><a href=\"#stream_transform_transform_chunk_encoding_callback\">_transform</a></code>, <code><a href=\"#stream_transform_flush_callback\">_flush</a></code></p>\n    </td>\n  </tr>\n</table>\n\n<p><em>Note</em>: The implementation code for a stream should <em>never</em> call the &quot;public&quot;\nmethods of a stream that are intended for use by consumers (as described in\nthe <a href=\"#stream_api_for_stream_consumers\">API for Stream Consumers</a> section). Doing so may lead to adverse\nside effects in application code consuming the stream.</p>\n<h3>Simplified Construction<span><a class=\"mark\" href=\"#stream_simplified_construction\" id=\"stream_simplified_construction\">#</a></span></h3>\n<p>For many simple cases, it is possible to construct a stream without relying on\ninheritance. This can be accomplished by directly creating instances of the\n<code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code> or <code>stream.Transform</code>\nobjects and passing appropriate methods as constructor options.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n<h3>Implementing a Writable Stream<span><a class=\"mark\" href=\"#stream_implementing_a_writable_stream\" id=\"stream_implementing_a_writable_stream\">#</a></span></h3>\n<p>The <code>stream.Writable</code> class is extended to implement a <a href=\"#stream_class_stream_writable\">Writable</a> stream.</p>\n<p>Custom Writable streams <em>must</em> call the <code>new stream.Writable([options])</code>\nconstructor and implement the <code>writable.\\_write()</code> method. The\n<code>writable.\\_writev()</code> method <em>may</em> also be implemented.</p>\n<h4>Constructor: new stream.Writable(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#stream_constructor_new_stream_writable_options\" id=\"stream_constructor_new_stream_writable_options\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>highWaterMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Buffer level when\n<a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> starts returning <code>false</code>. Defaults to\n<code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams.</li>\n<li><code>decodeStrings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Whether or not to decode strings into\nBuffers before passing them to <a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>stream._write()</code></a>.\nDefaults to <code>true</code></li>\n<li><code>objectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Whether or not the\n<a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write(anyObj)</code></a> is a valid operation. When set,\nit becomes possible to write JavaScript values other than string or\n<code>Buffer</code> if supported by the stream implementation. Defaults to <code>false</code></li>\n<li><code>write</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the\n<a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>stream._write()</code></a> method.</li>\n<li><code>writev</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the\n<a href=\"#stream_writable_writev_chunks_callback\"><code>stream._writev()</code></a> method.</li>\n</ul>\n</li>\n</ul>\n</div><p>For example:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    // Calls the stream.Writable() constructor\n    super(options);\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\nconst util = require(&#39;util&#39;);\n\nfunction MyWritable(options) {\n  if (!(this instanceof MyWritable))\n    return new MyWritable(options);\n  Writable.call(this, options);\n}\nutil.inherits(MyWritable, Writable);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  writev(chunks, callback) {\n    // ...\n  }\n});\n</code></pre>\n<h4>writable._write(chunk, encoding, callback)<span><a class=\"mark\" href=\"#stream_writable_write_chunk_encoding_callback_1\" id=\"stream_writable_write_chunk_encoding_callback_1\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The chunk to be written. Will <strong>always</strong>\nbe a buffer unless the <code>decodeStrings</code> option was set to <code>false</code>.</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> If the chunk is a string, then <code>encoding</code> is the\ncharacter encoding of that string. If chunk is a <code>Buffer</code>, or if the\nstream is operating in object mode, <code>encoding</code> may be ignored.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Call this function (optionally with an error\nargument) when processing is complete for the supplied chunk.</li>\n</ul>\n</div><p>All Writable stream implementations must provide a\n<a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>writable._write()</code></a> method to send data to the underlying\nresource.</p>\n<p><em>Note</em>: <a href=\"#stream_class_stream_transform\">Transform</a> streams provide their own implementation of the\n[<code>writable._write()</code>].</p>\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\nshould be implemented by child classes, and called only by the internal Writable\nclass methods only.</p>\n<p>The <code>callback</code> method must be called to signal either that the write completed\nsuccessfully or failed with an error. The first argument passed to the\n<code>callback</code> must be the <code>Error</code> object if the call failed or <code>null</code> if the\nwrite succeeded.</p>\n<p>It is important to note that all calls to <code>writable.write()</code> that occur between\nthe time <code>writable.\\_write()</code> is called and the <code>callback</code> is called will cause\nthe written data to be buffered. Once the <code>callback</code> is invoked, the stream will\nemit a <code>&#39;drain&#39;</code> event. If a stream implementation is capable of processing\nmultiple chunks of data at once, the <code>writable.\\_writev()</code> method should be\nimplemented.</p>\n<p>If the <code>decodeStrings</code> property is set in the constructor options, then\n<code>chunk</code> may be a string rather than a Buffer, and <code>encoding</code> will\nindicate the character encoding of the string. This is to support\nimplementations that have an optimized handling for certain string\ndata encodings. If the <code>decodeStrings</code> property is explicitly set to <code>false</code>,\nthe <code>encoding</code> argument can be safely ignored, and <code>chunk</code> will always be a\n<code>Buffer</code>.</p>\n<p>The <code>writable.\\_write()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<h4>writable._writev(chunks, callback)<span><a class=\"mark\" href=\"#stream_writable_writev_chunks_callback\" id=\"stream_writable_writev_chunks_callback\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>chunks</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> The chunks to be written. Each chunk has following\nformat: <code>{ chunk: ..., encoding: ... }</code>.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error\nargument) to be invoked when processing is complete for the supplied chunks.</li>\n</ul>\n</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\nshould be implemented by child classes, and called only by the internal Writable\nclass methods only.</p>\n<p>The <code>writable.\\_writev()</code> method may be implemented in addition to\n<code>writable.\\_write()</code> in stream implementations that are capable of processing\nmultiple chunks of data at once. If implemented, the method will be called with\nall chunks of data currently buffered in the write queue.</p>\n<p>The <code>writable.\\_writev()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<h4>Errors While Writing<span><a class=\"mark\" href=\"#stream_errors_while_writing\" id=\"stream_errors_while_writing\">#</a></span></h4>\n<p>It is recommended that errors occurring during the processing of the\n<code>writable.\\_write()</code> and <code>writable.\\_writev()</code> methods are reported by invoking\nthe callback and passing the error as the first argument. This will cause an\n<code>&#39;error&#39;</code> event to be emitted by the Writable. Throwing an Error from within\n<code>writable.\\_write()</code> can result in expected and inconsistent behavior depending\non how the stream is being used.  Using the callback ensures consistent and\npredictable handling of errors.</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\n      callback(new Error(&#39;chunk is invalid&#39;))\n    } else {\n       callback()\n    }\n  }\n});\n</code></pre>\n<h4>An Example Writable Stream<span><a class=\"mark\" href=\"#stream_an_example_writable_stream\" id=\"stream_an_example_writable_stream\">#</a></span></h4>\n<p>The following illustrates a rather simplistic (and somewhat pointless) custom\nWritable stream implementation. While this specific Writable stream instance\nis not of any real particular usefulness, the example illustrates each of the\nrequired elements of a custom <a href=\"#stream_class_stream_writable\">Writable</a> stream instance:</p>\n<pre><code class=\"lang-js\">const Writable = require(&#39;stream&#39;).Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n  }\n\n  _write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\n      callback(new Error(&#39;chunk is invalid&#39;))\n    } else {\n       callback()\n    }\n  }\n}\n</code></pre>\n<h3>Implementing a Readable Stream<span><a class=\"mark\" href=\"#stream_implementing_a_readable_stream\" id=\"stream_implementing_a_readable_stream\">#</a></span></h3>\n<p>The <code>stream.Readable</code> class is extended to implement a <a href=\"#stream_class_stream_readable\">Readable</a> stream.</p>\n<p>Custom Readable streams <em>must</em> call the <code>new stream.Readable([options])</code>\nconstructor and implement the <code>readable.\\_read()</code> method.</p>\n<h4>new stream.Readable(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#stream_new_stream_readable_options\" id=\"stream_new_stream_readable_options\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>highWaterMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> The maximum number of bytes to store in\nthe internal buffer before ceasing to read from the underlying\nresource. Defaults to <code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> If specified, then buffers will be decoded to\nstrings using the specified encoding. Defaults to <code>null</code></li>\n<li><code>objectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Whether this stream should behave\nas a stream of objects. Meaning that <a href=\"#stream_readable_read_size\"><code>stream.read(n)</code></a> returns\na single value instead of a Buffer of size n. Defaults to <code>false</code></li>\n<li><code>read</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a>\nmethod.</li>\n</ul>\n</li>\n</ul>\n</div><p>For example:</p>\n<pre><code class=\"lang-js\">const Readable = require(&#39;stream&#39;).Readable;\n\nclass MyReadable extends Readable {\n  constructor(options) {\n    // Calls the stream.Readable(options) constructor\n    super(options);\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const Readable = require(&#39;stream&#39;).Readable;\nconst util = require(&#39;util&#39;);\n\nfunction MyReadable(options) {\n  if (!(this instanceof MyReadable))\n    return new MyReadable(options);\n  Readable.call(this, options);\n}\nutil.inherits(MyReadable, Readable);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const Readable = require(&#39;stream&#39;).Readable;\n\nconst myReadable = new Readable({\n  read(size) {\n    // ...\n  }\n});\n</code></pre>\n<h4>readable._read(size)<span><a class=\"mark\" href=\"#stream_readable_read_size_1\" id=\"stream_readable_read_size_1\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;Number&gt;</a> Number of bytes to read asynchronously</li>\n</ul>\n</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\nshould be implemented by child classes, and called only by the internal Readable\nclass methods only.</p>\n<p>All Readable stream implementations must provide an implementation of the\n<code>readable.\\_read()</code> method to fetch data from the underlying resource.</p>\n<p>When <code>readable._read()</code> is called, if data is available from the resource, the\nimplementation should begin pushing that data into the read queue using the\n<a href=\"#stream_readable_push_chunk_encoding\"><code>this.push(dataChunk)</code></a> method. <code>_read()</code> should continue reading\nfrom the resource and pushing data until <code>readable.push()</code> returns <code>false</code>. Only\nwhen <code>_read()</code> is called again after it has stopped should it resume pushing\nadditional data onto the queue.</p>\n<p><em>Note</em>: Once the <code>readable._read()</code> method has been called, it will not be\ncalled again until the <a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a> method is called.</p>\n<p>The <code>size</code> argument is advisory. For implementations where a &quot;read&quot; is a\nsingle operation that returns data can use the <code>size</code> argument to determine how\nmuch data to fetch. Other implementations may ignore this argument and simply\nprovide data whenever it becomes available. There is no need to &quot;wait&quot; until\n<code>size</code> bytes are available before calling <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>.</p>\n<p>The <code>readable.\\_read()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<h4>readable.push(chunk[, encoding])<span><a class=\"mark\" href=\"#stream_readable_push_chunk_encoding\" id=\"stream_readable_push_chunk_encoding\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;Null&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Chunk of data to push into the read queue</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> Encoding of String chunks.  Must be a valid\nBuffer encoding, such as <code>&#39;utf8&#39;</code> or <code>&#39;ascii&#39;</code></li>\n<li>Returns <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> <code>true</code> if additional chunks of data may continued to be\npushed; <code>false</code> otherwise.</li>\n</ul>\n</div><p>When <code>chunk</code> is a <code>Buffer</code> or <code>string</code>, the <code>chunk</code> of data will be added to the\ninternal queue for users of the stream to consume. Passing <code>chunk</code> as <code>null</code>\nsignals the end of the stream (EOF), after which no more data can be written.</p>\n<p>When the Readable is operating in paused mode, the data added with\n<code>readable.push()</code> can be read out by calling the\n<a href=\"#stream_readable_read_size\"><code>readable.read()</code></a> method when the <a href=\"#stream_event_readable\"><code>&#39;readable&#39;</code></a> event is\nemitted.</p>\n<p>When the Readable is operating in flowing mode, the data added with\n<code>readable.push()</code> will be delivered by emitting a <code>&#39;data&#39;</code> event.</p>\n<p>The <code>readable.push()</code> method is designed to be as flexible as possible. For\nexample, when wrapping a lower-level source that provides some form of\npause/resume mechanism, and a data callback, the low-level source can be wrapped\nby the custom Readable instance as illustrated in the following example:</p>\n<pre><code class=\"lang-js\">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nclass SourceWrapper extends Readable {\n  constructor(options) {\n    super(options);\n\n    this._source = getLowlevelSourceObject();\n\n    // Every time there&#39;s data, push it into the internal buffer.\n    this._source.ondata = (chunk) =&gt; {\n      // if push() returns false, then stop reading from source\n      if (!this.push(chunk))\n        this._source.readStop();\n    };\n\n    // When the source ends, push the EOF-signaling `null` chunk\n    this._source.onend = () =&gt; {\n      this.push(null);\n    };\n  }\n  // _read will be called when the stream wants to pull more data in\n  // the advisory size argument is ignored in this case.\n  _read(size) {\n    this._source.readStart();\n  }\n}\n</code></pre>\n<p><em>Note</em>: The <code>readable.push()</code> method is intended be called only by Readable\nImplemeters, and only from within the <code>readable.\\_read()</code> method.</p>\n<h4>Errors While Reading<span><a class=\"mark\" href=\"#stream_errors_while_reading\" id=\"stream_errors_while_reading\">#</a></span></h4>\n<p>It is recommended that errors occurring during the processing of the\n<code>readable.\\_read()</code> method are emitted using the <code>&#39;error&#39;</code> event rather than\nbeing thrown. Throwing an Error from within <code>readable.\\_read()</code> can result in\nexpected and inconsistent behavior depending on whether the stream is operating\nin flowing or paused mode. Using the <code>&#39;error&#39;</code> event ensures consistent and\npredictable handling of errors.</p>\n<pre><code class=\"lang-js\">const Readable = require(&#39;stream&#39;).Readable;\n\nconst myReadable = new Readable({\n  read(size) {\n    if (checkSomeErrorCondition()) {\n      process.nextTick(() =&gt; this.emit(&#39;error&#39;, err));\n      return;\n    }\n    // do some work\n  }\n});\n</code></pre>\n<h4>An Example Counting Stream<span><a class=\"mark\" href=\"#stream_an_example_counting_stream\" id=\"stream_an_example_counting_stream\">#</a></span></h4>\n<!--type=example-->\n<p>The following is a basic example of a Readable stream that emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.</p>\n<pre><code class=\"lang-js\">const Readable = require(&#39;stream&#39;).Readable;\n\nclass Counter extends Readable {\n  constructor(opt) {\n    super(opt);\n    this._max = 1000000;\n    this._index = 1;\n  }\n\n  _read() {\n    var i = this._index++;\n    if (i &gt; this._max)\n      this.push(null);\n    else {\n      var str = &#39;&#39; + i;\n      var buf = Buffer.from(str, &#39;ascii&#39;);\n      this.push(buf);\n    }\n  }\n}\n</code></pre>\n<h3>Implementing a Duplex Stream<span><a class=\"mark\" href=\"#stream_implementing_a_duplex_stream\" id=\"stream_implementing_a_duplex_stream\">#</a></span></h3>\n<p>A <a href=\"#stream_class_stream_duplex\">Duplex</a> stream is one that implements both <a href=\"#stream_class_stream_readable\">Readable</a> and <a href=\"#stream_class_stream_writable\">Writable</a>,\nsuch as a TCP socket connection.</p>\n<p>Because Javascript does not have support for multiple inheritance, the\n<code>stream.Duplex</code> class is extended to implement a <a href=\"#stream_class_stream_duplex\">Duplex</a> stream (as opposed\nto extending the <code>stream.Readable</code> <em>and</em> <code>stream.Writable</code> classes).</p>\n<p><em>Note</em>: The <code>stream.Duplex</code> class prototypically inherits from <code>stream.Readable</code>\nand parasitically from <code>stream.Writable</code>.</p>\n<p>Custom Duplex streams <em>must</em> call the <code>new stream.Duplex([options])</code>\nconstructor and implement <em>both</em> the <code>readable.\\_read()</code> and\n<code>writable.\\_write()</code> methods.</p>\n<h4>new stream.Duplex(options)<span><a class=\"mark\" href=\"#stream_new_stream_duplex_options\" id=\"stream_new_stream_duplex_options\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Passed to both Writable and Readable\nconstructors. Also has the following fields:<ul>\n<li><code>allowHalfOpen</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Defaults to <code>true</code>. If set to <code>false</code>, then\nthe stream will automatically end the readable side when the\nwritable side ends and vice versa.</li>\n<li><code>readableObjectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code>\nfor readable side of the stream. Has no effect if <code>objectMode</code>\nis <code>true</code>.</li>\n<li><code>writableObjectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code>\nfor writable side of the stream. Has no effect if <code>objectMode</code>\nis <code>true</code>.</li>\n</ul>\n</li>\n</ul>\n</div><p>For example:</p>\n<pre><code class=\"lang-js\">const Duplex = require(&#39;stream&#39;).Duplex;\n\nclass MyDuplex extends Duplex {\n  constructor(options) {\n    super(options);\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const Duplex = require(&#39;stream&#39;).Duplex;\nconst util = require(&#39;util&#39;);\n\nfunction MyDuplex(options) {\n  if (!(this instanceof MyDuplex))\n    return new MyDuplex(options);\n  Duplex.call(this, options);\n}\nutil.inherits(MyDuplex, Duplex);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const Duplex = require(&#39;stream&#39;).Duplex;\n\nconst myDuplex = new Duplex({\n  read(size) {\n    // ...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n<h4>An Example Duplex Stream<span><a class=\"mark\" href=\"#stream_an_example_duplex_stream\" id=\"stream_an_example_duplex_stream\">#</a></span></h4>\n<p>The following illustrates a simple example of a Duplex stream that wraps a\nhypothetical lower-level source object to which data can be written, and\nfrom which data can be read, albeit using an API that is not compatible with\nNode.js streams.\nThe following illustrates a simple example of a Duplex stream that buffers\nincoming written data via the <a href=\"#stream_class_stream_writable\">Writable</a> interface that is read back out\nvia the <a href=\"#stream_class_stream_readable\">Readable</a> interface.</p>\n<pre><code class=\"lang-js\">const Duplex = require(&#39;stream&#39;).Duplex;\nconst kSource = Symbol(&#39;source&#39;);\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // The underlying source only deals with strings\n    if (Buffer.isBuffer(chunk))\n      chunk = chunk.toString(encoding);\n    this[kSource].writeSomeData(chunk, encoding);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) =&gt; {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\n</code></pre>\n<p>The most important aspect of a Duplex stream is that the Readable and Writable\nsides operate independently of one another despite co-existing within a single\nobject instance.</p>\n<h4>Object Mode Duplex Streams<span><a class=\"mark\" href=\"#stream_object_mode_duplex_streams\" id=\"stream_object_mode_duplex_streams\">#</a></span></h4>\n<p>For Duplex streams, <code>objectMode</code> can be set exclusively for either the Readable\nor Writable side using the <code>readableObjectMode</code> and <code>writableObjectMode</code> options\nrespectively.</p>\n<p>In the following example, for instance, a new Transform stream (which is a \ntype of <a href=\"#stream_class_stream_duplex\">Duplex</a> stream) is created that has an object mode Writable side\nthat accepts JavaScript numbers that are converted to hexidecimal strings on\nthe Readable side.</p>\n<pre><code class=\"lang-js\">const Transform = require(&#39;stream&#39;).Transform;\n\n// All Transform streams are also Duplex Streams\nconst myTransform = new Transform({\n  writableObjectMode: true,\n\n  transform(chunk, encoding, callback) {\n    // Coerce the chunk to a number if necessary\n    chunk |= 0;\n\n    // Transform the chunk into something else.\n    const data = chunk.toString(16);\n\n    // Push the data onto the readable queue.\n    callback(null, &#39;0&#39;.repeat(data.length % 2) + data);\n  }\n});\n\nmyTransform.setEncoding(&#39;ascii&#39;);\nmyTransform.on(&#39;data&#39;, (chunk) =&gt; console.log(chunk));\n\nmyTransform.write(1);\n  // Prints: 01\nmyTransform.write(10);\n  // Prints: 0a\nmyTransform.write(100);\n  // Prints: 64\n</code></pre>\n<h3>Implementing a Transform Stream<span><a class=\"mark\" href=\"#stream_implementing_a_transform_stream\" id=\"stream_implementing_a_transform_stream\">#</a></span></h3>\n<p>A <a href=\"#stream_class_stream_transform\">Transform</a> stream is a <a href=\"#stream_class_stream_duplex\">Duplex</a> stream where the output is computed\nin some way from the input. Examples include <a href=\"zlib.html\">zlib</a> streams or <a href=\"crypto.html\">crypto</a>\nstreams that compress, encrypt, or decrypt data.</p>\n<p><em>Note</em>: There is no requirement that the output be the same size as the input,\nthe same number of chunks, or arrive at the same time. For example, a\nHash stream will only ever have a single chunk of output which is\nprovided when the input is ended. A <code>zlib</code> stream will produce output\nthat is either much smaller or much larger than its input.</p>\n<p>The <code>stream.Transform</code> class is extended to implement a <a href=\"#stream_class_stream_transform\">Transform</a> stream.</p>\n<p>The <code>stream.Transform</code> class prototypically inherits from <code>stream.Duplex</code> and\nimplements its own versions of the <code>writable.\\_write()</code> and <code>readable.\\_read()</code>\nmethods. Custom Transform implementations <em>must</em> implement the\n<a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>transform.\\_transform()</code></a> method and <em>may</em> also implement\nthe [<code>transform.\\_flush()</code>][stream-._flush] method.</p>\n<p><em>Note</em>: Care must be taken when using Transform streams in that data written\nto the stream can cause the Writable side of the stream to become paused if\nthe output on the Readable side is not consumed.</p>\n<h4>new stream.Transform(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#stream_new_stream_transform_options\" id=\"stream_new_stream_transform_options\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Passed to both Writable and Readable\nconstructors. Also has the following fields:<ul>\n<li><code>transform</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the\n<a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>stream._transform()</code></a> method.</li>\n<li><code>flush</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_transform_flush_callback\"><code>stream._flush()</code></a>\nmethod.</li>\n</ul>\n</li>\n</ul>\n</div><p>For example:</p>\n<pre><code class=\"lang-js\">const Transform = require(&#39;stream&#39;).Transform;\n\nclass MyTransform extends Transform {\n  constructor(options) {\n    super(options);\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const Transform = require(&#39;stream&#39;).Transform;\nconst util = require(&#39;util&#39;);\n\nfunction MyTransform(options) {\n  if (!(this instanceof MyTransform))\n    return new MyTransform(options);\n  Transform.call(this, options);\n}\nutil.inherits(MyTransform, Transform);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const Transform = require(&#39;stream&#39;).Transform;\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n<h4>Events: &#39;finish&#39; and &#39;end&#39;<span><a class=\"mark\" href=\"#stream_events_finish_and_end\" id=\"stream_events_finish_and_end\">#</a></span></h4>\n<p>The <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> and <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> events are from the <code>stream.Writable</code>\nand <code>stream.Readable</code> classes, respectively. The <code>&#39;finish&#39;</code> event is emitted\nafter <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called and all chunks have been processed\nby <a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>stream._transform()</code></a>. The <code>&#39;end&#39;</code> event is emitted\nafter all data has been output, which occurs after the callback in\n<a href=\"#stream_transform_flush_callback\"><code>transform._flush()</code></a> has been called.</p>\n<h4>transform._flush(callback)<span><a class=\"mark\" href=\"#stream_transform_flush_callback\" id=\"stream_transform_flush_callback\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error\nargument) to be called when remaining data has been flushed.</li>\n</ul>\n</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\nshould be implemented by child classes, and called only by the internal Readable\nclass methods only.</p>\n<p>In some cases, a transform operation may need to emit an additional bit of\ndata at the end of the stream. For example, a <code>zlib</code> compression stream will\nstore an amount of internal state used to optimally compress the output. When\nthe stream ends, however, that additional data needs to be flushed so that the\ncompressed data will be complete.</p>\n<p>Custom <a href=\"#stream_class_stream_transform\">Transform</a> implementations <em>may</em> implement the <code>transform.\\_flush()</code>\nmethod. This will be called when there is no more written data to be consumed,\nbut before the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event is emitted signaling the end of the\n<a href=\"#stream_class_stream_readable\">Readable</a> stream.</p>\n<p>Within the <code>transform.\\_flush()</code> implementation, the <code>readable.push()</code> method\nmay be called zero or more times, as appropriate. The <code>callback</code> function must\nbe called when the flush operation is complete.</p>\n<p>The <code>transform.\\_flush()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<h4>transform._transform(chunk, encoding, callback)<span><a class=\"mark\" href=\"#stream_transform_transform_chunk_encoding_callback\" id=\"stream_transform_transform_chunk_encoding_callback\">#</a></span></h4>\n<div class=\"signature\"><ul>\n<li><code>chunk</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> The chunk to be transformed. Will <strong>always</strong>\nbe a buffer unless the <code>decodeStrings</code> option was set to <code>false</code>.</li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> If the chunk is a string, then this is the\nencoding type. If chunk is a buffer, then this is the special\nvalue - &#39;buffer&#39;, ignore it in this case.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error\nargument and data) to be called after the supplied <code>chunk</code> has been\nprocessed.</li>\n</ul>\n</div><p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\nshould be implemented by child classes, and called only by the internal Readable\nclass methods only.</p>\n<p>All Transform stream implementations must provide a <code>_transform()</code>\nmethod to accept input and produce output. The <code>transform.\\_transform()</code>\nimplementation handles the bytes being written, computes an output, then passes\nthat output off to the readable portion using the <code>readable.push()</code> method.</p>\n<p>The <code>transform.push()</code> method may be called zero or more times to generate\noutput from a single input chunk, depending on how much is to be output\nas a result of the chunk.</p>\n<p>It is possible that no output is generated from any given chunk of input data.</p>\n<p>The <code>callback</code> function must be called only when the current chunk is completely\nconsumed. The first argument passed to the <code>callback</code> must be an <code>Error</code> object\nif an error occurred while processing the input or <code>null</code> otherwise. If a second\nargument is passed to the <code>callback</code>, it will be forwarded on to the\n<code>readable.push()</code> method. In other words the following are equivalent:</p>\n<pre><code class=\"lang-js\">transform.prototype._transform = function (data, encoding, callback) {\n  this.push(data);\n  callback();\n};\n\ntransform.prototype._transform = function (data, encoding, callback) {\n  callback(null, data);\n};\n</code></pre>\n<p>The <code>transform.\\_transform()</code> method is prefixed with an underscore because it\nis internal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<h4>Class: stream.PassThrough<span><a class=\"mark\" href=\"#stream_class_stream_passthrough\" id=\"stream_class_stream_passthrough\">#</a></span></h4>\n<p>The <code>stream.PassThrough</code> class is a trivial implementation of a <a href=\"#stream_class_stream_transform\">Transform</a>\nstream that simply passes the input bytes across to the output. Its purpose is\nprimarily for examples and testing, but there are some use cases where\n<code>stream.PassThrough</code> is useful as a building block for novel sorts of streams.</p>\n<h2>Additional Notes<span><a class=\"mark\" href=\"#stream_additional_notes\" id=\"stream_additional_notes\">#</a></span></h2>\n<!--type=misc-->\n<h3>Compatibility with Older Node.js Versions<span><a class=\"mark\" href=\"#stream_compatibility_with_older_node_js_versions\" id=\"stream_compatibility_with_older_node_js_versions\">#</a></span></h3>\n<!--type=misc-->\n<p>In versions of Node.js prior to v0.10, the Readable stream interface was\nsimpler, but also less powerful and less useful.</p>\n<ul>\n<li>Rather than waiting for calls the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method,\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events would begin emitting immediately. Applications that\nwould need to perform some amount of work to decide how to handle data\nwere required to store read data into buffers so the data would not be lost.</li>\n<li>The <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method was advisory, rather than\nguaranteed. This meant that it was still necessary to be prepared to receive\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events <em>even when the stream was in a paused state</em>.</li>\n</ul>\n<p>In Node.js v0.10, the <a href=\"#stream_class_stream_readable\">Readable</a> class was added. For backwards compatibility\nwith older Node.js programs, Readable streams switch into &quot;flowing mode&quot; when a\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event handler is added, or when the\n<a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is called. The effect is that, even\nwhen not using the new <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method and\n<a href=\"#stream_event_readable\"><code>&#39;readable&#39;</code></a> event, it is no longer necessary to worry about losing\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> chunks.</p>\n<p>While most applications will continue to function normally, this introduces an\nedge case in the following conditions:</p>\n<ul>\n<li>No <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event listener is added.</li>\n<li>The <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is never called.</li>\n<li>The stream is not piped to any writable destination.</li>\n</ul>\n<p>For example, consider the following code:</p>\n<pre><code class=\"lang-js\">// WARNING!  BROKEN!\nnet.createServer((socket) =&gt; {\n\n  // we add an &#39;end&#39; method, but never consume the data\n  socket.on(&#39;end&#39;, () =&gt; {\n    // It will never get here.\n    socket.end(&#39;The message was received but was not processed.\\n&#39;);\n  });\n\n}).listen(1337);\n</code></pre>\n<p>In versions of Node.js prior to v0.10, the incoming message data would be\nsimply discarded. However, in Node.js v0.10 and beyond, the socket remains\npaused forever.</p>\n<p>The workaround in this situation is to call the\n<a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method to begin the flow of data:</p>\n<pre><code class=\"lang-js\">// Workaround\nnet.createServer((socket) =&gt; {\n\n  socket.on(&#39;end&#39;, () =&gt; {\n    socket.end(&#39;The message was received but was not processed.\\n&#39;);\n  });\n\n  // start the flow of data, discarding it.\n  socket.resume();\n\n}).listen(1337);\n</code></pre>\n<p>In addition to new Readable streams switching into flowing mode,\npre-v0.10 style streams can be wrapped in a Readable class using the\n[<code>readable.wrap()</code>][] method.</p>\n<h3><code>readable.read(0)</code><span><a class=\"mark\" href=\"#stream_readable_read_0\" id=\"stream_readable_read_0\">#</a></span></h3>\n<p>There are some cases where it is necessary to trigger a refresh of the\nunderlying readable stream mechanisms, without actually consuming any\ndata. In such cases, it is possible to call <code>readable.read(0)</code>, which will\nalways return <code>null</code>.</p>\n<p>If the internal read buffer is below the <code>highWaterMark</code>, and the\nstream is not currently reading, then calling <code>stream.read(0)</code> will trigger\na low-level <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> call.</p>\n<p>While most applications will almost never need to do this, there are\nsituations within Node.js where this is done, particularly in the\nReadable stream class internals.</p>\n<h3><code>readable.push(&#39;&#39;)</code><span><a class=\"mark\" href=\"#stream_readable_push\" id=\"stream_readable_push\">#</a></span></h3>\n<p>Use of <code>readable.push(&#39;&#39;)</code> is not recommended.</p>\n<p>Pushing a zero-byte string or <code>Buffer</code> to a stream that is not in object mode\nhas an interesting side effect. Because it <em>is</em> a call to\n<a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a>, the call will end the reading process.\nHowever, because the argument is an empty string, no data is added to the\nreadable buffer so there is nothing for a user to consume.</p>\n<!-- [end-include:stream.md] -->\n<!-- [start-include:string_decoder.md] -->\n<h1>StringDecoder<span><a class=\"mark\" href=\"#string_decoder_stringdecoder\" id=\"string_decoder_stringdecoder\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\n</code></pre>\n<p>The following example shows the basic use of the <code>StringDecoder</code> class.</p>\n<pre><code class=\"lang-js\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n</code></pre>\n<p>When a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an\ninternal buffer is used to ensure that the decoded string does not contain\nany incomplete multibyte characters. These are held in the buffer until the\nnext call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.</p>\n<p>In the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (<code>\u20ac</code>) are written over three separate operations:</p>\n<pre><code class=\"lang-js\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n</code></pre>\n<h2>Class: new StringDecoder([encoding])<span><a class=\"mark\" href=\"#string_decoder_class_new_stringdecoder_encoding\" id=\"string_decoder_class_new_stringdecoder_encoding\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.99</span>\n</div><ul>\n<li><code>encoding</code> <span class=\"type\">&lt;string&gt;</span> The character encoding the <code>StringDecoder</code> will use.\nDefaults to <code>&#39;utf8&#39;</code>.</li>\n</ul>\n<p>Creates a new <code>StringDecoder</code> instance.</p>\n<h3>stringDecoder.end(<a href=\"buffer.html\">buffer</a>)<span><a class=\"mark\" href=\"#string_decoder_stringdecoder_end_buffer\" id=\"string_decoder_stringdecoder_end_buffer\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.9.3</span>\n</div><ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li>\n</ul>\n<p>Returns any remaining input stored in the internal buffer as a string. Bytes\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\nsubstitution characters appropriate for the character encoding.</p>\n<p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>\nis performed before returning the remaining input.</p>\n<h3>stringDecoder.write(buffer)<span><a class=\"mark\" href=\"#string_decoder_stringdecoder_write_buffer\" id=\"string_decoder_stringdecoder_write_buffer\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.99</span>\n</div><ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li>\n</ul>\n<p>Returns a decoded string, ensuring that any incomplete multibyte characters at\nthe end of the <code>Buffer</code> are omitted from the returned string and stored in an\ninternal buffer for the next call to <code>stringDecoder.write()</code> or\n<code>stringDecoder.end()</code>.</p>\n<!-- [end-include:string_decoder.md] -->\n<!-- [start-include:timers.md] -->\n<h1>Timers<span><a class=\"mark\" href=\"#timers_timers\" id=\"timers_timers\">#</a></span></h1>\n<pre class=\"api_stability api_stability_3\">Stability: 3 - Locked</pre><p>All of the timer functions are globals.  You do not need to <code>require()</code>\nthis module in order to use them.</p>\n<h2>clearImmediate(immediateObject)<span><a class=\"mark\" href=\"#timers_clearimmediate_immediateobject\" id=\"timers_clearimmediate_immediateobject\">#</a></span></h2>\n<p>Stops an <code>immediateObject</code>, as created by <a href=\"timers.html#timers_setimmediate_callback_arg\"><code>setImmediate</code></a>, from triggering.</p>\n<h2>clearInterval(intervalObject)<span><a class=\"mark\" href=\"#timers_clearinterval_intervalobject\" id=\"timers_clearinterval_intervalobject\">#</a></span></h2>\n<p>Stops an <code>intervalObject</code>, as created by <a href=\"timers.html#timers_setinterval_callback_delay_arg\"><code>setInterval</code></a>, from triggering.</p>\n<h2>clearTimeout(timeoutObject)<span><a class=\"mark\" href=\"#timers_cleartimeout_timeoutobject\" id=\"timers_cleartimeout_timeoutobject\">#</a></span></h2>\n<p>Prevents a <code>timeoutObject</code>, as created by <a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout</code></a>, from triggering.</p>\n<h2>ref()<span><a class=\"mark\" href=\"#timers_ref\" id=\"timers_ref\">#</a></span></h2>\n<p>If a timer was previously <code>unref()</code>d, then <code>ref()</code> can be called to explicitly\nrequest the timer hold the program open. If the timer is already <code>ref</code>d calling\n<code>ref</code> again will have no effect.</p>\n<p>Returns the timer.</p>\n<h2>setImmediate(callback[, arg][, ...])<span><a class=\"mark\" href=\"#timers_setimmediate_callback_arg\" id=\"timers_setimmediate_callback_arg\">#</a></span></h2>\n<p>Schedules &quot;immediate&quot; execution of <code>callback</code> after I/O events&#39;\ncallbacks and before timers set by <a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout</code></a> and <a href=\"timers.html#timers_setinterval_callback_delay_arg\"><code>setInterval</code></a> are\ntriggered. Returns an <code>immediateObject</code> for possible use with\n<a href=\"timers.html#timers_clearimmediate_immediateobject\"><code>clearImmediate</code></a>. Additional optional arguments may be passed to the\ncallback.</p>\n<p>Callbacks for immediates are queued in the order in which they were created.\nThe entire callback queue is processed every event loop iteration. If an\nimmediate is queued from inside an executing callback, that immediate won&#39;t fire\nuntil the next event loop iteration.</p>\n<p>If <code>callback</code> is not a function <code>setImmediate()</code> will throw immediately.</p>\n<h2>setInterval(callback, delay[, arg][, ...])<span><a class=\"mark\" href=\"#timers_setinterval_callback_delay_arg\" id=\"timers_setinterval_callback_delay_arg\">#</a></span></h2>\n<p>Schedules repeated execution of <code>callback</code> every <code>delay</code> milliseconds.\nReturns a <code>intervalObject</code> for possible use with <a href=\"timers.html#timers_clearinterval_intervalobject\"><code>clearInterval</code></a>. Additional\noptional arguments may be passed to the callback.</p>\n<p>To follow browser behavior, when using delays larger than 2147483647\nmilliseconds (approximately 25 days) or less than 1, Node.js will use 1 as the\n<code>delay</code>.</p>\n<p>If <code>callback</code> is not a function <code>setInterval()</code> will throw immediately.</p>\n<h2>setTimeout(callback, delay[, arg][, ...])<span><a class=\"mark\" href=\"#timers_settimeout_callback_delay_arg\" id=\"timers_settimeout_callback_delay_arg\">#</a></span></h2>\n<p>Schedules execution of a one-time <code>callback</code> after <code>delay</code> milliseconds.\nReturns a <code>timeoutObject</code> for possible use with <a href=\"timers.html#timers_cleartimeout_timeoutobject\"><code>clearTimeout</code></a>. Additional\noptional arguments may be passed to the callback.</p>\n<p>The callback will likely not be invoked in precisely <code>delay</code> milliseconds.\nNode.js makes no guarantees about the exact timing of when callbacks will fire,\nnor of their ordering. The callback will be called as close as possible to the\ntime specified.</p>\n<p>To follow browser behavior, when using delays larger than 2147483647\nmilliseconds (approximately 25 days) or less than 1, the timeout is executed\nimmediately, as if the <code>delay</code> was set to 1.</p>\n<p>If <code>callback</code> is not a function <code>setTimeout()</code> will throw immediately.</p>\n<h2>unref()<span><a class=\"mark\" href=\"#timers_unref\" id=\"timers_unref\">#</a></span></h2>\n<p>The opaque value returned by <a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout</code></a> and <a href=\"timers.html#timers_setinterval_callback_delay_arg\"><code>setInterval</code></a> also has the\nmethod <code>timer.unref()</code> which allows the creation of a timer that is active but\nif it is the only item left in the event loop, it won&#39;t keep the program\nrunning. If the timer is already <code>unref</code>d calling <code>unref</code> again will have no\neffect.</p>\n<p>In the case of <a href=\"timers.html#timers_settimeout_callback_delay_arg\"><code>setTimeout</code></a>, <code>unref</code> creates a separate timer that will\nwakeup the event loop, creating too many of these may adversely effect event\nloop performance -- use wisely.</p>\n<p>Returns the timer.</p>\n<!-- [end-include:timers.md] -->\n<!-- [start-include:tls.md] -->\n<h1>TLS (SSL)<span><a class=\"mark\" href=\"#tls_tls_ssl\" id=\"tls_tls_ssl\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\n</code></pre>\n<h2>TLS/SSL Concepts<span><a class=\"mark\" href=\"#tls_tls_ssl_concepts\" id=\"tls_tls_ssl_concepts\">#</a></span></h2>\n<p>The TLS/SSL is a public/private key infrastructure (PKI). For most common\ncases, each client and server must have a <em>private key</em>.</p>\n<p>Private keys can be generated in multiple ways. The example below illustrates\nuse of the OpenSSL command-line interface to generate a 2048-bit RSA private\nkey:</p>\n<pre><code>openssl genrsa -out ryans-key.pem 2048\n</code></pre><p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>.\nCertificates are <em>public keys</em> that correspond to a private key, and that are\ndigitally signed either by a Certificate Authority or by the owner of the\nprivate key (such certificates are referred to as &quot;self-signed&quot;). The first\nstep to obtaining a certificate is to create a <em>Certificate Signing Request</em>\n(CSR) file.</p>\n<p>The OpenSSL command-line interface can be used to generate a CSR for a private\nkey:</p>\n<pre><code>openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\n</code></pre><p>Once the CSR file is generated, it can either be sent to a Certificate\nAuthority for signing or used to generate a self-signed certificate.</p>\n<p>Creating a self-signed certificate using the OpenSSL command-line interface\nis illustrated in the example below:</p>\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\n</code></pre><p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or\n<code>.p12</code> file:</p>\n<pre><code>openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\n      -certfile ca-cert.pem -out ryans.pfx\n</code></pre><p>Where:</p>\n<ul>\n<li><code>in</code>: is the signed certificate</li>\n<li><code>inkey</code>: is the associated private key</li>\n<li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into\n a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\n</ul>\n<h3>Perfect Forward Secrecy<span><a class=\"mark\" href=\"#tls_perfect_forward_secrecy\" id=\"tls_perfect_forward_secrecy\">#</a></span></h3>\n<!-- type=misc -->\n<p>The term &quot;<a href=\"https://en.wikipedia.org/wiki/Perfect_forward_secrecy\">Forward Secrecy</a>&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of\nkey-agreement (i.e., key-exchange) methods. That is, the server and client keys\nare used to negotiate new temporary keys that are used specifically and only for\nthe current communication session. Practically, this means that even if the\nserver&#39;s private key is compromised, communication can only be decrypted by\neavesdroppers if the attacker manages to obtain the key-pair specifically\ngenerated for the session.</p>\n<p>Perfect Forward Secrecy is achieved by randomly generating a key pair for\nkey-agreement on every TLS/SSL handshake (in contrast to using the same key for\nall sessions). Methods implementing this technique are called &quot;ephemeral&quot;.</p>\n<p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note\nthe character &quot;E&quot; appended to the traditional abbreviations):</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">DHE</a> - An ephemeral version of the Diffie Hellman key-agreement protocol.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman\">ECDHE</a> - An ephemeral version of the Elliptic Curve Diffie Hellman\nkey-agreement protocol.</li>\n</ul>\n<p>Ephemeral methods may have some performance drawbacks, because key generation\nis expensive.</p>\n<p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required\nto generate Diffie-Hellman parameters. The following illustrates the use of the\nOpenSSL command-line interface to generate such parameters:</p>\n<pre><code>openssl dhparam -outform PEM -out dhparam.pem 2048\n</code></pre><p>If using Perfect Foward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are\nnot required and a default ECDHE curve will be used. The <code>ecdheCurve</code> property\ncan be used when creating a TLS Server to specify the name of an\nalternative curve to use.</p>\n<h3>ALPN, NPN and SNI<span><a class=\"mark\" href=\"#tls_alpn_npn_and_sni\" id=\"tls_alpn_npn_and_sni\">#</a></span></h3>\n<!-- type=misc -->\n<p>ALPN (Application-Layer Protocol Negotiation Extension), NPN (Next\nProtocol Negotiation) and, SNI (Server Name Indication) are TLS\nhandshake extensions:</p>\n<ul>\n<li>ALPN/NPN - Allows the use of one TLS server for multiple protocols (HTTP,\nSPDY, HTTP/2)</li>\n<li>SNI - Allows the use of one TLS server for multiple hostnames with different\nSSL certificates.</li>\n</ul>\n<p><em>Note</em>: Use of ALPN is recommended over NPN. The NPN extension has never been\nformally defined or documented and generally not recommended for use.</p>\n<h3>Client-initiated renegotiation attack mitigation<span><a class=\"mark\" href=\"#tls_client_initiated_renegotiation_attack_mitigation\" id=\"tls_client_initiated_renegotiation_attack_mitigation\">#</a></span></h3>\n<!-- type=misc -->\n<p>The TLS protocol allows clients to renegotiate certain aspects of the TLS\nsession. Unfortunately, session renegotiation requires a disproportionate amount\nof server-side resources, making it a potential vector for denial-of-service\nattacks.</p>\n<p>To mitigate the risk, renegotiation is limited to three times every ten minutes.\nAn <code>&#39;error&#39;</code> event is emitted on the <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instance when this\nthreshold is exceeded. The limits are configurable:</p>\n<ul>\n<li><code>tls.CLIENT_RENEG_LIMIT</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of renegotiation\nrequests. Defaults to <code>3</code>.</li>\n<li><code>tls.CLIENT_RENEG_WINDOW</code> <span class=\"type\">&lt;number&gt;</span> Specifies the time renegotiation window\nin seconds. Defaults to <code>600</code> (10 minutes).</li>\n</ul>\n<p><em>Note</em>: The default renegotiation limits should not be modified without a full\nunderstanding of the implications and risks.</p>\n<p>To test the renegotiation limits on a server, connect to it using the OpenSSL\ncommand-line client (<code>openssl s_client -connect address:port</code>) then input\n<code>R&lt;CR&gt;</code> (i.e., the letter <code>R</code> followed by a carriage return) multiple times.</p>\n<h2>Modifying the Default TLS Cipher suite<span><a class=\"mark\" href=\"#tls_modifying_the_default_tls_cipher_suite\" id=\"tls_modifying_the_default_tls_cipher_suite\">#</a></span></h2>\n<p>Node.js is built with a default suite of enabled and disabled TLS ciphers.\nCurrently, the default cipher suite is:</p>\n<pre><code>ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</code></pre><p>This default can be replaced entirely using the <code>--tls-cipher-list</code> command\nline switch. For instance, the following makes\n<code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p>\n<pre><code>node --tls-cipher-list=&quot;ECDHE-RSA-AES128-GCM-SHA256:!RC4&quot;\n</code></pre><p><em>Note</em>: The default cipher suite included within Node.js has been carefully\nselected to reflect current security best practices and risk mitigation.\nChanging the default cipher suite can have a significant impact on the security\nof an application. The <code>--tls-cipher-list</code> switch should by used only if\nabsolutely necessary.</p>\n<h2>Class: tls.Server<span><a class=\"mark\" href=\"#tls_class_tls_server\" id=\"tls_class_tls_server\">#</a></span></h2>\n<p>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted\nconnections using TLS or SSL.</p>\n<h3>Event: &#39;tlsClientError&#39;<span><a class=\"mark\" href=\"#tls_event_tlsclienterror\" id=\"tls_event_tlsclienterror\">#</a></span></h3>\n<p>The <code>&#39;tlsClientError&#39;</code> event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The <code>Error</code> object describing the error</li>\n<li><code>tlsSocket</code> <span class=\"type\">&lt;tls.TLSSocket&gt;</span> The <code>tls.TLSSocket</code> instance from which the\nerror originated.</li>\n</ul>\n<h3>Event: &#39;newSession&#39;<span><a class=\"mark\" href=\"#tls_event_newsession\" id=\"tls_event_newsession\">#</a></span></h3>\n<p>The <code>&#39;newSession&#39;</code> event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The listener callback is passed\nthree arguments when called:</p>\n<ul>\n<li><code>sessionId</code> - The TLS session identifier</li>\n<li><code>sessionData</code> - The TLS session data</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function taking no arguments that must be\ninvoked in order for data to be sent or received over the secure connection.</li>\n</ul>\n<p><em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.</p>\n<h3>Event: &#39;OCSPRequest&#39;<span><a class=\"mark\" href=\"#tls_event_ocsprequest\" id=\"tls_event_ocsprequest\">#</a></span></h3>\n<p>The <code>&#39;OCSPRequest&#39;</code> event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:</p>\n<ul>\n<li><code>certificate</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server certificate</li>\n<li><code>issuer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The issuer&#39;s certificate</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that must be invoked to provide\nthe results of the OCSP request.</li>\n</ul>\n<p>The server&#39;s current certificate can be parsed to obtain the OCSP URL\nand certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is\nthen invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.\nBoth <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the\nprimary and issuer&#39;s certificates. These can be used to obtain the OCSP\ncertificate ID and OCSP endpoint URL.</p>\n<p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was\nno OCSP response.</p>\n<p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p>\n<p>The typical flow of an OCSP Request is as follows:</p>\n<ol>\n<li>Client connects to the server and sends an <code>&#39;OCSPRequest&#39;</code> (via the status\ninfo extension in ClientHello).</li>\n<li>Server receives the request and emits the <code>&#39;OCSPRequest&#39;</code> event, calling the\nlistener if registered.</li>\n<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and\nperforms an <a href=\"https://en.wikipedia.org/wiki/OCSP_stapling\">OCSP request</a> to the CA.</li>\n<li>Server receives <code>OCSPResponse</code> from the CA and sends it back to the client\nvia the <code>callback</code> argument</li>\n<li>Client validates the response and either destroys the socket or performs a\nhandshake.</li>\n</ol>\n<p><em>Note</em>: The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or\nthe issuer is not in the root certificates list. (An issuer may be provided\nvia the <code>ca</code> option when establishing the TLS connection.)</p>\n<p><em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.</p>\n<p><em>Note</em>: An npm module like <a href=\"https://npmjs.org/package/asn1.js\">asn1.js</a> may be used to parse the certificates.</p>\n<h3>Event: &#39;resumeSession&#39;<span><a class=\"mark\" href=\"#tls_event_resumesession\" id=\"tls_event_resumesession\">#</a></span></h3>\n<p>The <code>&#39;resumeSession&#39;</code> event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>sessionId</code> - The TLS/SSL session identifier</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be called when the prior session\nhas been recovered.</li>\n</ul>\n<p>When called, the event listener may perform a lookup in external storage using\nthe given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If\nthe session cannot be resumed (i.e., doesn&#39;t exist in storage) the callback may\nbe invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the\nincoming connection and destroy the socket.</p>\n<p><em>Note</em>: Listening for this event will have an effect only on connections\nestablished after the addition of the event listener.</p>\n<p>The following illustrates resuming a TLS session:</p>\n<pre><code class=\"lang-js\">const tlsSessionStore = {};\nserver.on(&#39;newSession&#39;, (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString(&#39;hex&#39;)] = data;\n  cb();\n});\nserver.on(&#39;resumeSession&#39;, (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString(&#39;hex&#39;)] || null);\n});\n</code></pre>\n<h3>Event: &#39;secureConnection&#39;<span><a class=\"mark\" href=\"#tls_event_secureconnection\" id=\"tls_event_secureconnection\">#</a></span></h3>\n<p>The <code>&#39;secureConnection&#39;</code> event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:</p>\n<ul>\n<li><code>tlsSocket</code> <span class=\"type\">&lt;tls.TLSSocket&gt;</span> The established TLS socket.</li>\n</ul>\n<p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the\nclient has been verified by one of the supplied Certificate Authorities for the\nserver. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>\nis set to describe how authorization failed. Note that depending on the settings\nof the TLS server, unauthorized connections may still be accepted.</p>\n<p>The <code>tlsSocket.npnProtocol</code> and <code>tlsSocket.alpnProtocol</code> properties are strings\nthat contain the selected NPN and ALPN protocols, respectively. When both NPN\nand ALPN extensions are received, ALPN takes precedence over NPN and the next\nprotocol is selected by ALPN.</p>\n<p>When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code> returns <code>false</code>.</p>\n<p>The <code>tlsSocket.servername</code> property is a string containing the server name\nrequested via SNI.</p>\n<h3>server.addContext(hostname, context)<span><a class=\"mark\" href=\"#tls_server_addcontext_hostname_context\" id=\"tls_server_addcontext_hostname_context\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>hostname</code> <span class=\"type\">&lt;string&gt;</span> A SNI hostname or wildcard (e.g. <code>&#39;*&#39;</code>)</li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object containing any of the possible properties\nfrom the <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>,\n<code>cert</code>, <code>ca</code>, etc).</li>\n</ul>\n</div><p>The <code>server.addContext()</code> method adds a secure context that will be used if\nthe client request&#39;s SNS hostname matches the supplied <code>hostname</code> (or wildcard).</p>\n<h3>server.address()<span><a class=\"mark\" href=\"#tls_server_address\" id=\"tls_server_address\">#</a></span></h3>\n<p>Returns the bound address, the address family name, and port of the\nserver as reported by the operating system.  See <a href=\"net.html#net_server_address\"><code>net.Server.address()</code></a> for\nmore information.</p>\n<h3>server.close([callback])<span><a class=\"mark\" href=\"#tls_server_close_callback\" id=\"tls_server_close_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional listener callback that will be registered to\nlisten for the server instance&#39;s <code>&#39;close&#39;</code> event.</li>\n</ul>\n</div><p>The <code>server.close()</code> method stops the server from accepting new connections.</p>\n<p>This function operates asynchronously. The <code>&#39;close&#39;</code> event will be emitted\nwhen the the server is finally closed.</p>\n<h3>server.connections<span><a class=\"mark\" href=\"#tls_server_connections\" id=\"tls_server_connections\">#</a></span></h3>\n<p>Returns the current number of concurrent connections on the server.</p>\n<h3>server.getTicketKeys()<span><a class=\"mark\" href=\"#tls_server_getticketkeys\" id=\"tls_server_getticketkeys\">#</a></span></h3>\n<p>Returns a <code>Buffer</code> instance holding the keys currently used for\nencryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a></p>\n<h3>server.listen(port[, hostname][, callback])<span><a class=\"mark\" href=\"#tls_server_listen_port_hostname_callback\" id=\"tls_server_listen_port_hostname_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>port</code> <span class=\"type\">&lt;number&gt;</span> The TCP/IP port on which to begin listening for connections.\nA value of <code>0</code> (zero) will assign a random port.</li>\n<li><code>hostname</code> <span class=\"type\">&lt;string&gt;</span> The hostname, IPv4, or IPv6 address on which to begin\nlistening for connections. If <code>undefined</code>, the server will accept connections\non any IPv6 address (<code>::</code>) when IPv6 is available, or any IPv4 address\n(<code>0.0.0.0</code>) otherwise.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be invoked when the server has\nbegun listening the the <code>port</code> and <code>hostname</code>.</li>\n</ul>\n</div><p>The <code>server.listen()</code> methods instructs the server to begin accepting\nconnections on the specified <code>port</code> and <code>hostname</code>.</p>\n<p>This function operates asynchronously. If the <code>callback</code> is given, it will be\ncalled when the server has started listening.</p>\n<p>See <code>net.Server</code> for more information.</p>\n<h3>server.setTicketKeys(keys)<span><a class=\"mark\" href=\"#tls_server_setticketkeys_keys\" id=\"tls_server_setticketkeys_keys\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>keys</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The keys used for encryption/decryption of the\n<a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</li>\n</ul>\n</div><p>Updates the keys for encryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</p>\n<p><em>Note</em>: The key&#39;s <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\">tls.createServer</a> for\nmore information on how it is used.</p>\n<p><em>Note</em>: Changes to the ticket keys are effective only for future server\nconnections. Existing or currently pending server connections will use the\nprevious keys.</p>\n<h2>Class: tls.TLSSocket<span><a class=\"mark\" href=\"#tls_class_tls_tlssocket\" id=\"tls_class_tls_tlssocket\">#</a></span></h2>\n<p>The <code>tls.TLSSocket</code> is a subclass of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> that performs transparent\nencryption of written data and all required TLS negotiation.</p>\n<p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href=\"stream.html#stream_stream\">Stream</a> interface.</p>\n<p><em>Note</em>: Methods that return TLS connection metadata (e.g.\n<a href=\"#tls_tlssocket_getpeercertificate_detailed\"><code>tls.TLSSocket.getPeerCertificate()</code></a> will only return data while the\nconnection is open.</p>\n<h3>new tls.TLSSocket(socket[, options])<span><a class=\"mark\" href=\"#tls_new_tls_tlssocket_socket_options\" id=\"tls_new_tls_tlssocket_socket_options\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>socket</code> <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> An instance of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>secureContext</code>: An optional TLS context object from\n <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a></li>\n<li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode.\nDefaults to <code>false</code>.</li>\n<li><code>server</code> <span class=\"type\">&lt;net.Server&gt;</span> An optional <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> instance.</li>\n<li><code>requestCert</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>rejectUnauthorized</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>NPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>ALPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>SNICallback</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li>\n<li><code>requestOCSP</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the OCSP status request\nextension will be added to the client hello and an <code>&#39;OCSPResponse&#39;</code> event\nwill be emitted on the socket before establishing a secure communication</li>\n</ul>\n</li>\n</ul>\n</div><p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>\n<h3>Event: &#39;OCSPResponse&#39;<span><a class=\"mark\" href=\"#tls_event_ocspresponse\" id=\"tls_event_ocspresponse\">#</a></span></h3>\n<p>The <code>&#39;OCSPResponse&#39;</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:</p>\n<ul>\n<li><code>response</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server&#39;s OCSP response</li>\n</ul>\n<p>Typically, the <code>response</code> is a digitally signed object from the server&#39;s CA that\ncontains information about server&#39;s certificate revocation status.</p>\n<h3>Event: &#39;secureConnect&#39;<span><a class=\"mark\" href=\"#tls_event_secureconnect\" id=\"tls_event_secureconnect\">#</a></span></h3>\n<p>The <code>&#39;secureConnect&#39;</code> event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server&#39;s certificate has been authorized. It\nis the client&#39;s responsibility to check the <code>tlsSocket.authorized</code> property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\n<code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used,\nthe <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be\nchecked to determine the negotiated protocol.</p>\n<h3>tlsSocket.address()<span><a class=\"mark\" href=\"#tls_tlssocket_address\" id=\"tls_tlssocket_address\">#</a></span></h3>\n<p>Returns the bound address, the address family name, and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.,\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\n<h3>tlsSocket.authorized<span><a class=\"mark\" href=\"#tls_tlssocket_authorized\" id=\"tls_tlssocket_authorized\">#</a></span></h3>\n<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p>\n<h3>tlsSocket.authorizationError<span><a class=\"mark\" href=\"#tls_tlssocket_authorizationerror\" id=\"tls_tlssocket_authorizationerror\">#</a></span></h3>\n<p>Returns the reason why the peer&#39;s certificate was not been verified. This\nproperty is set only when <code>tlsSocket.authorized === false</code>.</p>\n<h3>tlsSocket.encrypted<span><a class=\"mark\" href=\"#tls_tlssocket_encrypted\" id=\"tls_tlssocket_encrypted\">#</a></span></h3>\n<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\n<code>net.Socket</code> instances.</p>\n<h3>tlsSocket.getCipher()<span><a class=\"mark\" href=\"#tls_tlssocket_getcipher\" id=\"tls_tlssocket_getcipher\">#</a></span></h3>\n<p>Returns an object representing the cipher name and the SSL/TLS protocol version\nthat first defined the cipher.</p>\n<p>For example: <code>{ name: &#39;AES256-SHA&#39;, version: &#39;TLSv1/SSLv3&#39; }</code></p>\n<p>See <code>SSL_CIPHER_get_name()</code> and <code>SSL_CIPHER_get_version()</code> in\n<a href=\"https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html\">https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html</a> for more\ninformation.</p>\n<h3>tlsSocket.getEphemeralKeyInfo()<span><a class=\"mark\" href=\"#tls_tlssocket_getephemeralkeyinfo\" id=\"tls_tlssocket_getephemeralkeyinfo\">#</a></span></h3>\n<p>Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a> on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\nif called on a server socket. The supported types are <code>&#39;DH&#39;</code> and <code>&#39;ECDH&#39;</code>. The\n<code>name</code> property is available only when type is &#39;ECDH&#39;.</p>\n<p>For Example: <code>{ type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }</code></p>\n<h3>tlsSocket.getPeerCertificate([ detailed ])<span><a class=\"mark\" href=\"#tls_tlssocket_getpeercertificate_detailed\" id=\"tls_tlssocket_getpeercertificate_detailed\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>detailed</code> <span class=\"type\">&lt;boolean&gt;</span> Specify <code>true</code> to request that the full certificate\nchain with the <code>issuer</code> property be returned; <code>false</code> to return only the\ntop certificate without the <code>issuer</code> property.</li>\n</ul>\n</div><p>Returns an object representing the peer&#39;s certificate. The returned object has\nsome properties corresponding to the fields of the certificate.</p>\n<p>For example:</p>\n<pre><code class=\"lang-text\">{ subject:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuerInfo:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuer:\n   { ... another certificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  valid_from: &#39;Nov 11 09:52:22 2009 GMT&#39;,\n  valid_to: &#39;Nov  6 09:52:22 2029 GMT&#39;,\n  fingerprint: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&#39;,\n  serialNumber: &#39;B9B0D332A1AA5635&#39; }\n</code></pre>\n<p>If the peer does not provide a certificate, <code>null</code> or an empty object will be\nreturned.</p>\n<h3>tlsSocket.getProtocol()<span><a class=\"mark\" href=\"#tls_tlssocket_getprotocol\" id=\"tls_tlssocket_getprotocol\">#</a></span></h3>\n<p>Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value <code>&#39;unknown&#39;</code> will be returned for connected\nsockets that have not completed the handshaking process. The value <code>null</code> will\nbe returned for server sockets or disconnected client sockets.</p>\n<p>Example responses include:</p>\n<ul>\n<li><code>SSLv3</code></li>\n<li><code>TLSv1</code></li>\n<li><code>TLSv1.1</code></li>\n<li><code>TLSv1.2</code></li>\n<li><code>unknown</code></li>\n</ul>\n<p>See <a href=\"https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html\">https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html</a> for more\ninformation.</p>\n<h3>tlsSocket.getSession()<span><a class=\"mark\" href=\"#tls_tlssocket_getsession\" id=\"tls_tlssocket_getsession\">#</a></span></h3>\n<p>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was\nnegotiated. Can be used to speed up handshake establishment when reconnecting\nto the server.</p>\n<h3>tlsSocket.getTLSTicket()<span><a class=\"mark\" href=\"#tls_tlssocket_gettlsticket\" id=\"tls_tlssocket_gettlsticket\">#</a></span></h3>\n<p>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p>\n<p><em>Note</em>: This only works with client TLS sockets. Useful only for debugging, for\nsession reuse provide <code>session</code> option to <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</p>\n<h3>tlsSocket.localAddress<span><a class=\"mark\" href=\"#tls_tlssocket_localaddress\" id=\"tls_tlssocket_localaddress\">#</a></span></h3>\n<p>Returns the string representation of the local IP address.</p>\n<h3>tlsSocket.localPort<span><a class=\"mark\" href=\"#tls_tlssocket_localport\" id=\"tls_tlssocket_localport\">#</a></span></h3>\n<p>Returns the numeric representation of the local port.</p>\n<h3>tlsSocket.remoteAddress<span><a class=\"mark\" href=\"#tls_tlssocket_remoteaddress\" id=\"tls_tlssocket_remoteaddress\">#</a></span></h3>\n<p>Returns the string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>.</p>\n<h3>tlsSocket.remoteFamily<span><a class=\"mark\" href=\"#tls_tlssocket_remotefamily\" id=\"tls_tlssocket_remotefamily\">#</a></span></h3>\n<p>Returns the string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\n<h3>tlsSocket.remotePort<span><a class=\"mark\" href=\"#tls_tlssocket_remoteport\" id=\"tls_tlssocket_remoteport\">#</a></span></h3>\n<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p>\n<h3>tlsSocket.renegotiate(options, callback)<span><a class=\"mark\" href=\"#tls_tlssocket_renegotiate_options_callback\" id=\"tls_tlssocket_renegotiate_options_callback\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>rejectUnauthorized</code> <span class=\"type\">&lt;boolean&gt;</span></li>\n<li><code>requestCert</code></li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that will be called when the renegotiation\nrequest has been completed.</li>\n</ul>\n</div><p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\nUpon completion, the <code>callback</code> function will be passed a single argument\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>\n<p><em>Note</em>: This method can be used to request a peer&#39;s certificate after the\nsecure connection has been established.</p>\n<p><em>Note</em>: When running as the server, the socket will be destroyed with an error\nafter <code>handshakeTimeout</code> timeout.</p>\n<h3>tlsSocket.setMaxSendFragment(size)<span><a class=\"mark\" href=\"#tls_tlssocket_setmaxsendfragment_size\" id=\"tls_tlssocket_setmaxsendfragment_size\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>size</code> <span class=\"type\">&lt;number&gt;</span> The maximum TLS fragment size. Defaults to <code>16384</code>. The\nmaximum value is <code>16384</code>.</li>\n</ul>\n</div><p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>\n<p>Smaller fragment sizes decrease the buffering latency on the client: larger\nfragments are buffered by the TLS layer until the entire fragment is received\nand its integrity is verified; large fragments can span multiple roundtrips\nand their processing can be delayed due to packet loss or reordering. However,\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\ndecrease overall server throughput.</p>\n<h2>tls.connect(options[, callback])<span><a class=\"mark\" href=\"#tls_tls_connect_options_callback\" id=\"tls_tls_connect_options_callback\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>host</code> <span class=\"type\">&lt;string&gt;</span> Host the client should connect to.</li>\n<li><code>port</code> <span class=\"type\">&lt;number&gt;</span> Port the client should connect to.</li>\n<li><code>socket</code> <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> Establish secure connection on a given socket rather\nthan creating a new socket. If this option is specified, <code>host</code> and <code>port</code>\nare ignored.</li>\n<li><code>path</code> <span class=\"type\">&lt;string&gt;</span> Creates unix socket connection to path. If this option is\nspecified, <code>host</code> and <code>port</code> are ignored.</li>\n<li><code>pfx</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,\ncertificate, and CA certs of the client in PFX or PKCS12 format.</li>\n<li><code>key</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;stringp[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of\nstrings, or array of <code>Buffer</code>s containing the private key of the client in\nPEM format.</li>\n<li><code>passphrase</code> <span class=\"type\">&lt;string&gt;</span> A string containing the passphrase for the private key\nor pfx.</li>\n<li><code>cert</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of\nstrings, or array of <code>Buffer</code>s containing the certificate key of the client\nin PEM format.</li>\n<li><code>ca</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,\nor array of <code>Buffer</code>s of trusted certificates in PEM format. If this is\nomitted several well known &quot;root&quot; CAs (like VeriSign) will be used. These\nare used to authorize connections.</li>\n<li><code>ciphers</code> <span class=\"type\">&lt;string&gt;</span> A string describing the ciphers to use or exclude,\nseparated by <code>:</code>. Uses the same default cipher suite as\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>.</li>\n<li><code>rejectUnauthorized</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the server certificate is verified\nagainst the list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if\nverification fails; <code>err.code</code> contains the OpenSSL error code. Defaults to\n<code>true</code>.</li>\n<li><code>NPNProtocols</code> <span class=\"type\">&lt;string[]&gt;</span> | <span class=\"type\">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s\ncontaining supported NPN protocols. <code>Buffer</code>s should have the format\n<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first\nbyte is the length of the next protocol name. Passing an array is usually\nmuch simpler, e.g. <code>[&#39;hello&#39;, &#39;world&#39;]</code>.</li>\n<li><code>ALPNProtocols</code>: <span class=\"type\">&lt;string[]&gt;</span> | <span class=\"type\">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s\ncontaining the supported ALPN protocols. <code>Buffer</code>s should have the format\n<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte\nis the length of the next protocol name. Passing an array is usually much\nsimpler: <code>[&#39;hello&#39;, &#39;world&#39;]</code>.)</li>\n<li><code>servername</code>: <span class=\"type\">&lt;string&gt;</span> Server name for the SNI (Server Name Indication) TLS\nextension.</li>\n<li><code>checkServerIdentity(servername, cert)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function\nto be used when checking the server&#39;s hostname against the certificate.\nThis should throw an error if verification fails. The method should return\n<code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li>\n<li><code>secureProtocol</code> <span class=\"type\">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to\nforce SSL version 3. The possible values depend on the version of OpenSSL\ninstalled in the environment and are defined in the constant\n<a href=\"https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS\">SSL_METHODS</a>.</li>\n<li><code>secureContext</code> <span class=\"type\">&lt;object&gt;</span> An optional TLS context object as returned by from\n<code>tls.createSecureContext( ... )</code>. It can be used for caching client\ncertificates, keys, and CA certificates.</li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li>\n<li><code>minDHSize</code> <span class=\"type\">&lt;number&gt;</span> Minimum size of the DH parameter in bits to accept a\nTLS connection. When a server offers a DH parameter with a size less\nthan <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown.\nDefaults to <code>1024</code>.</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Creates a new client connection to the given <code>options.port</code> and <code>options.host</code>\nIf <code>options.host</code> is omitted, it defaults to <code>localhost</code>.</p>\n<p>The <code>callback</code> function, if specified, will be added as a listener for the\n<a href=\"#tls_event_secureconnect\"><code>&#39;secureConnect&#39;</code></a> event.</p>\n<p><code>tls.connect()</code> returns a <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> object.</p>\n<h2>tls.connect(port[, host][, options][, callback])<span><a class=\"mark\" href=\"#tls_tls_connect_port_host_options_callback\" id=\"tls_tls_connect_port_host_options_callback\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>port</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>host</code> <span class=\"type\">&lt;string&gt;</span></li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>host</code> <span class=\"type\">&lt;string&gt;</span> Host the client should connect to.</li>\n<li><code>port</code> <span class=\"type\">&lt;number&gt;</span> Port the client should connect to.</li>\n<li><code>socket</code> <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> Establish secure connection on a given socket rather\nthan creating a new socket. If this option is specified, <code>host</code> and <code>port</code>\nare ignored.</li>\n<li><code>path</code> <span class=\"type\">&lt;string&gt;</span> Creates unix socket connection to path. If this option is\nspecified, <code>host</code> and <code>port</code> are ignored.</li>\n<li><code>pfx</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,\ncertificate, and CA certs of the client in PFX or PKCS12 format.</li>\n<li><code>key</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;stringp[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of\nstrings, or array of <code>Buffer</code>s containing the private key of the client in\nPEM format.</li>\n<li><code>passphrase</code> <span class=\"type\">&lt;string&gt;</span> A string containing the passphrase for the private key\nor pfx.</li>\n<li><code>cert</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of\nstrings, or array of <code>Buffer</code>s containing the certificate key of the client\nin PEM format.</li>\n<li><code>ca</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,\nor array of <code>Buffer</code>s of trusted certificates in PEM format. If this is\nomitted several well known &quot;root&quot; CAs (like VeriSign) will be used. These\nare used to authorize connections.</li>\n<li><code>ciphers</code> <span class=\"type\">&lt;string&gt;</span> A string describing the ciphers to use or exclude,\nseparated by <code>:</code>. Uses the same default cipher suite as\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>.</li>\n<li><code>rejectUnauthorized</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the server certificate is verified\nagainst the list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if\nverification fails; <code>err.code</code> contains the OpenSSL error code. Defaults to\n<code>true</code>.</li>\n<li><code>NPNProtocols</code> <span class=\"type\">&lt;string[]&gt;</span> | <span class=\"type\">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s\ncontaining supported NPN protocols. <code>Buffer</code>s should have the format\n<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first\nbyte is the length of the next protocol name. Passing an array is usually\nmuch simpler, e.g. <code>[&#39;hello&#39;, &#39;world&#39;]</code>.</li>\n<li><code>ALPNProtocols</code>: <span class=\"type\">&lt;string[]&gt;</span> | <span class=\"type\">&lt;Buffer[]&gt;</span> An array of strings or <code>Buffer</code>s\ncontaining the supported ALPN protocols. <code>Buffer</code>s should have the format\n<code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte\nis the length of the next protocol name. Passing an array is usually much\nsimpler: <code>[&#39;hello&#39;, &#39;world&#39;]</code>.)</li>\n<li><code>servername</code>: <span class=\"type\">&lt;string&gt;</span> Server name for the SNI (Server Name Indication) TLS\nextension.</li>\n<li><code>checkServerIdentity(servername, cert)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function\nto be used when checking the server&#39;s hostname against the certificate.\nThis should throw an error if verification fails. The method should return\n<code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li>\n<li><code>secureProtocol</code> <span class=\"type\">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to\nforce SSL version 3. The possible values depend on the version of OpenSSL\ninstalled in the environment and are defined in the constant\n<a href=\"https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS\">SSL_METHODS</a>.</li>\n<li><code>secureContext</code> <span class=\"type\">&lt;object&gt;</span> An optional TLS context object as returned by from\n<code>tls.createSecureContext( ... )</code>. It can be used for caching client\ncertificates, keys, and CA certificates.</li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li>\n<li><code>minDHSize</code> <span class=\"type\">&lt;number&gt;</span> Minimum size of the DH parameter in bits to accept a\nTLS connection. When a server offers a DH parameter with a size less\nthan <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown.\nDefaults to <code>1024</code>.</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Creates a new client connection to the given <code>port</code> and <code>host</code> or\n<code>options.port</code> and <code>options.host</code>. (If <code>host</code> is omitted, it defaults to\n<code>localhost</code>.)</p>\n<p>The <code>callback</code> function, if specified, will be added as a listener for the\n<a href=\"#tls_event_secureconnect\"><code>&#39;secureConnect&#39;</code></a> event.</p>\n<p><code>tls.connect()</code> returns a <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> object.</p>\n<p>The following implements a simple &quot;echo server&quot; example:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\n<h2>tls.createSecureContext(options)<span><a class=\"mark\" href=\"#tls_tls_createsecurecontext_options\" id=\"tls_tls_createsecurecontext_options\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>pfx</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A string or <code>Buffer</code> holding the PFX or PKCS12 encoded\nprivate key, certificate, and CA certificates.</li>\n<li><code>key</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Object[]&gt;</span> The private key of the server in\nPEM format. To support multiple keys using different algorithms, an array\ncan be provided either as an array of key strings or as an array of objects\nin the format <code>{pem: key, passphrase: passphrase}</code>. This option is\n<em>required</em> for ciphers that make use of private keys.</li>\n<li><code>passphrase</code> <span class=\"type\">&lt;string&gt;</span> A string containing the passphrase for the private key\nor pfx.</li>\n<li><code>cert</code> <span class=\"type\">&lt;string&gt;</span> A string containing the PEM encoded certificate</li>\n<li><code>ca</code><span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,\nor array of <code>Buffer</code>s of trusted certificates in PEM format. If omitted,\nseveral well known &quot;root&quot; CAs (like VeriSign) will be used. These are used\nto authorize connections.</li>\n<li><code>crl</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> Either a string or array of strings of PEM encoded\nCRLs (Certificate Revocation List).</li>\n<li><code>ciphers</code> <span class=\"type\">&lt;string&gt;</span> A string describing the ciphers to use or exclude.\nConsult\n<a href=\"https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT\">https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT</a>\nfor details on the format.</li>\n<li><code>honorCipherOrder</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, when a cipher is being selected,\nthe server&#39;s preferences will be used instead of the client preferences.</li>\n</ul>\n</li>\n</ul>\n</div><p>The <code>tls.createSecureContext()</code> method creates a credentials object.</p>\n<p>If the &#39;ca&#39; option is not given, then Node.js will use the default\npublicly trusted list of CAs as given in\n<a href=\"http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>.</p>\n<h2>tls.createServer(options[, secureConnectionListener])<span><a class=\"mark\" href=\"#tls_tls_createserver_options_secureconnectionlistener\" id=\"tls_tls_createserver_options_secureconnectionlistener\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>pfx</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing the private key,\ncertificate and CA certs of the server in PFX or PKCS12 format. (Mutually\nexclusive with the <code>key</code>, <code>cert</code>, and <code>ca</code> options.)</li>\n<li><code>key</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Object[]&gt;</span> The private key of the server in\nPEM format. To support multiple keys using different algorithms an array can\nbe provided either as a plain array of key strings or an array of objects\nin the format <code>{pem: key, passphrase: passphrase}</code>. This option is\n<em>required</em> for ciphers that make use of private keys.</li>\n<li><code>passphrase</code> <span class=\"type\">&lt;string&gt;</span> A string containing the passphrase for the private\nkey or pfx.</li>\n<li><code>cert</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of\nstrings, or array of <code>Buffer</code>s containing the certificate key of the server\nin PEM format. (Required)</li>\n<li><code>ca</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;Buffer[]&gt;</span> A string, <code>Buffer</code>, array of strings,\nor array of <code>Buffer</code>s of trusted certificates in PEM format. If this is\nomitted several well known &quot;root&quot; CAs (like VeriSign) will be used. These\nare used to authorize connections.</li>\n<li><code>crl</code> <span class=\"type\">&lt;string&gt;</span> | <span class=\"type\">&lt;string[]&gt;</span> Either a string or array of strings of PEM encoded\nCRLs (Certificate Revocation List).</li>\n<li><code>ciphers</code> <span class=\"type\">&lt;string&gt;</span> A string describing the ciphers to use or exclude,\nseparated by <code>:</code>.</li>\n<li><code>ecdhCurve</code> <span class=\"type\">&lt;string&gt;</span> A string describing a named curve to use for ECDH key\nagreement or <code>false</code> to disable ECDH. Defaults to <code>prime256v1</code> (NIST P-256).\nUse <a href=\"crypto.html#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On\nrecent releases, <code>openssl ecparam -list_curves</code> will also display the name\nand description of each available elliptic curve.</li>\n<li><code>dhparam</code> <span class=\"type\">&lt;string&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A string or <code>Buffer</code> containing Diffie Hellman\nparameters, required for <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a>. Use\n<code>openssl dhparam</code> to create the parameters. The key length must be greater\nthan or equal to 1024 bits, otherwise an error will be thrown. It is\nstrongly recommended to use 2048 bits or larger for stronger security. If\nomitted or invalid, the parameters are silently discarded and DHE ciphers\nwill not be available.</li>\n<li><code>handshakeTimeout</code> <span class=\"type\">&lt;number&gt;</span> Abort the connection if the SSL/TLS handshake\ndoes not finish in the specified number of milliseconds. Defaults to <code>120</code>\nseconds. A <code>&#39;clientError&#39;</code> is emitted on the <code>tls.Server</code> object whenever a\nhandshake times out.</li>\n<li><code>honorCipherOrder</code> <span class=\"type\">&lt;boolean&gt;</span> When choosing a cipher, use the server&#39;s\npreferences instead of the client preferences. Defaults to <code>true</code>.</li>\n<li><code>requestCert</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code> the server will request a certificate from\nclients that connect and attempt to verify that certificate. Defaults to\n<code>false</code>.</li>\n<li><code>rejectUnauthorized</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code> the server will reject any\nconnection which is not authorized with the list of supplied CAs. This\noption only has an effect if <code>requestCert</code> is <code>true</code>. Defaults to <code>false</code>.</li>\n<li><code>NPNProtocols</code> <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming\npossible NPN protocols. (Protocols should be ordered by their priority.)</li>\n<li><code>ALPNProtocols</code> <span class=\"type\">&lt;string[]&gt;</span> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming\npossible ALPN protocols. (Protocols should be ordered by their priority.)\nWhen the server receives both NPN and ALPN extensions from the client,\nALPN takes precedence over NPN and the server does not send an NPN\nextension to the client.</li>\n<li><code>SNICallback(servername, cb)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that will be called if\nthe client supports SNI TLS extension. Two arguments will be passed when\ncalled: <code>servername</code> and <code>cb</code>. <code>SNICallback</code> should invoke <code>cb(null, ctx)</code>,\nwhere <code>ctx</code> is a SecureContext instance. (<code>tls.createSecureContext(...)</code> can\nbe used to get a proper SecureContext.) If <code>SNICallback</code> wasn&#39;t provided the\ndefault callback with high-level API will be used (see below).</li>\n<li><code>sessionTimeout</code> <span class=\"type\">&lt;number&gt;</span> An integer specifying the number of seconds after\nwhich the TLS session identifiers and TLS session tickets created by the\nserver will time out. See <a href=\"https://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html\">SSL_CTX_set_timeout</a> for more details.</li>\n<li><code>ticketKeys</code>: A 48-byte <code>Buffer</code> instance consisting of a 16-byte prefix,\na 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS\nsession tickets on multiple instances of the TLS server. <em>Note</em> that this is\nautomatically shared between <code>cluster</code> module workers.</li>\n<li><code>sessionIdContext</code> <span class=\"type\">&lt;string&gt;</span> A string containing an opaque identifier for\nsession resumption. If <code>requestCert</code> is <code>true</code>, the default is a 128 bit\ntruncated SHA1 hash value generated from the command-line. Otherwise, a\ndefault is not provided.</li>\n<li><code>secureProtocol</code> <span class=\"type\">&lt;string&gt;</span> The SSL method to use, e.g., <code>SSLv3_method</code> to\nforce SSL version 3. The possible values depend on the version of OpenSSL\ninstalled in the environment and are defined in the constant\n<a href=\"https://www.openssl.org/docs/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS\">SSL_METHODS</a>.</li>\n</ul>\n</li>\n<li><code>secureConnectionListener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n</div><p>Creates a new <a href=\"#tls_class_tls_server\">tls.Server</a>.  The <code>secureConnectionListener</code>, if provided, is\nautomatically set as a listener for the <a href=\"#tls_event_secureconnection\"><code>&#39;secureConnection&#39;</code></a> event.</p>\n<p>For the <code>ciphers</code> option, the default cipher suite is:</p>\n<pre><code class=\"lang-text\">ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</code></pre>\n<p>The default cipher suite prefers GCM ciphers for <a href=\"https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites\">Chrome&#39;s &#39;modern\ncryptography&#39; setting</a> and also prefers ECDHE and DHE ciphers for Perfect\nForward Secrecy, while offering <em>some</em> backward compatibility.</p>\n<p>128 bit AES is preferred over 192 and 256 bit AES in light of <a href=\"https://www.schneier.com/blog/archives/2009/07/another_new_aes.html\">specific\nattacks affecting larger AES key sizes</a>.</p>\n<p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers\n(like Internet Explorer 6) cannot complete the handshaking process with\nthe default configuration. If these clients <em>must</em> be supported, the\n<a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">TLS recommendations</a> may offer a compatible cipher suite. For more details\non the format, see the <a href=\"https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format documentation</a>.</p>\n<p>The following illustrates a simple echo server:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p>\n<pre><code>openssl s_client -connect 127.0.0.1:8000\n</code></pre><h2>tls.getCiphers()<span><a class=\"mark\" href=\"#tls_tls_getciphers\" id=\"tls_tls_getciphers\">#</a></span></h2>\n<p>Returns an array with the names of the supported SSL ciphers.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">console.log(tls.getCiphers()); // [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]\n</code></pre>\n<h2>Deprecated APIs<span><a class=\"mark\" href=\"#tls_deprecated_apis\" id=\"tls_deprecated_apis\">#</a></span></h2>\n<h3>Class: CryptoStream<span><a class=\"mark\" href=\"#tls_class_cryptostream\" id=\"tls_class_cryptostream\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</pre><p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class\nhas been deprecated and should no longer be used.</p>\n<h4>cryptoStream.bytesWritten<span><a class=\"mark\" href=\"#tls_cryptostream_byteswritten\" id=\"tls_cryptostream_byteswritten\">#</a></span></h4>\n<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes\nwritten to the underlying socket <em>including</em> the bytes required for the\nimplementation of the TLS protocol.</p>\n<h3>Class: SecurePair<span><a class=\"mark\" href=\"#tls_class_securepair\" id=\"tls_class_securepair\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</pre><p>Returned by <code>tls.createSecurePair()</code>.</p>\n<h4>Event: &#39;secure&#39;<span><a class=\"mark\" href=\"#tls_event_secure\" id=\"tls_event_secure\">#</a></span></h4>\n<p>The <code>&#39;secure&#39;</code> event is emitted by the <code>SecurePair</code> object once a secure\nconnection has been established.</p>\n<p>As with checking for the server <a href=\"#tls_event_secureconnection\"><code>secureConnection</code></a>\nevent, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the\ncertificate used is properly authorized.</p>\n<h2>tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])<span><a class=\"mark\" href=\"#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\" id=\"tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\">#</a></span></h2>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</pre><div class=\"signature\"><ul>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A secure context object as returned by\n<code>tls.createSecureContext()</code></li>\n<li><code>isServer</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to specify that this TLS connection should be\nopened as a server.</li>\n<li><code>requestCert</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to specify whether a server should request a\ncertificate from a connecting client. Only applies when <code>isServer</code> is <code>true</code>.</li>\n<li><code>rejectUnauthorized</code> <span class=\"type\">&lt;boolean&gt;</span> <code>true</code> to specify whether a server should\nautomatically reject clients with invalid certificates. Only applies when\n<code>isServer</code> is <code>true</code>.</li>\n<li><code>options</code><ul>\n<li><code>secureContext</code>: An optional TLS context object from\n <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a></li>\n<li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode.\nDefaults to <code>false</code>.</li>\n<li><code>server</code> <span class=\"type\">&lt;net.Server&gt;</span> An optional <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> instance</li>\n<li><code>requestCert</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>rejectUnauthorized</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>NPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>ALPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>SNICallback</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li>\n<li><code>requestOCSP</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, specifies that the OCSP status request\nextension will be added to the client hello and an <code>&#39;OCSPResponse&#39;</code> event\nwill be emitted on the socket before establishing a secure communication</li>\n</ul>\n</li>\n</ul>\n</div><p>Creates a new secure pair object with two streams, one of which reads and writes\nthe encrypted data and the other of which reads and writes the cleartext data.\nGenerally, the encrypted stream is piped to/from an incoming encrypted data\nstream and the cleartext one is used as a replacement for the initial encrypted\nstream.</p>\n<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and\n<code>encrypted</code> stream properties.</p>\n<p><em>Note</em>: <code>cleartext</code> has the same API as <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>.</p>\n<p><em>Note</em>: The <code>tls.createSecurePair()</code> method is now deprecated in favor of\n<code>tls.TLSSocket()</code>. For example, the code:</p>\n<pre><code class=\"lang-js\">pair = tls.createSecurePair( ... );\npair.encrypted.pipe(socket);\nsocket.pipe(pair.encrypted);\n</code></pre>\n<p>can be replaced by:</p>\n<pre><code class=\"lang-js\">secure_socket = tls.TLSSocket(socket, options);\n</code></pre>\n<p>where <code>secure_socket</code> has the same API as <code>pair.cleartext</code>.</p>\n<!-- [end-include:tls.md] -->\n<!-- [start-include:tty.md] -->\n<h1>TTY<span><a class=\"mark\" href=\"#tty_tty\" id=\"tty_tty\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:</p>\n<pre><code class=\"lang-js\">const tty = require(&#39;tty&#39;);\n</code></pre>\n<p>When Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\ncontext, the <code>process.stdin</code> will, by default, be initialized as an instance of\n<code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by\ndefault be instances of <code>tty.WriteStream</code>. The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe <code>process.stdout.isTTY</code> property is <code>true</code>:</p>\n<pre><code>$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre><p>In most cases, there should be little to no reason for an application to\ncreate instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.</p>\n<h2>Class: tty.ReadStream<span><a class=\"mark\" href=\"#tty_class_tty_readstream\" id=\"tty_class_tty_readstream\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the\nreadable side of a TTY. In normal circumstances <code>process.stdin</code> will be the\nonly <code>tty.ReadStream</code> instance in a Node.js process and there should be no\nreason to create additional instances.</p>\n<h3>readStream.isRaw<span><a class=\"mark\" href=\"#tty_readstream_israw\" id=\"tty_readstream_israw\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a\nraw device. Defaults to <code>false</code>.</p>\n<h3>readStream.setRawMode(mode)<span><a class=\"mark\" href=\"#tty_readstream_setrawmode_mode\" id=\"tty_readstream_setrawmode_mode\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><ul>\n<li><code>mode</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, configures the <code>tty.ReadStream</code> to operate as a\nraw device. If <code>false</code>, configures the <code>tty.ReadStream</code> to operate in its\ndefault mode. The <code>readStream.isRaw</code> property will be set to the resulting\nmode.</li>\n</ul>\n<h2>Class: tty.WriteStream<span><a class=\"mark\" href=\"#tty_class_tty_writestream\" id=\"tty_class_tty_writestream\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the\nwritable side of a TTY. In normal circumstances, <code>process.stdout</code> and\n<code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a\nNode.js process and there should be no reason to create additional instances.</p>\n<h3>Event: &#39;resize&#39;<span><a class=\"mark\" href=\"#tty_event_resize\" id=\"tty_event_resize\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>The <code>&#39;resize&#39;</code> event is emitted whenever either of the <code>writeStream.columns</code>\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\nlistener callback when called.</p>\n<pre><code class=\"lang-js\">process.stdout.on(&#39;resize&#39;, () =&gt; {\n  console.log(&#39;screen size has changed!&#39;);\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n</code></pre>\n<h3>writeStream.columns<span><a class=\"mark\" href=\"#tty_writestream_columns\" id=\"tty_writestream_columns\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>A <code>number</code> specifying the number of columns the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\n<h3>writeStream.rows<span><a class=\"mark\" href=\"#tty_writestream_rows\" id=\"tty_writestream_rows\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.7</span>\n</div><p>A <code>number</code> specifying the number of rows the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\n<h2>tty.isatty(fd)<span><a class=\"mark\" href=\"#tty_tty_isatty_fd\" id=\"tty_tty_isatty_fd\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><ul>\n<li><code>fd</code> <span class=\"type\">&lt;number&gt;</span> A numeric file descriptor</li>\n</ul>\n<p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with\na TTY and <code>false</code> if is not.</p>\n<!-- [end-include:tty.md] -->\n<!-- [start-include:url.md] -->\n<h1>URL<span><a class=\"mark\" href=\"#url_url\" id=\"url_url\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be\naccessed using:</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\n</code></pre>\n<h2>URL Strings and URL Objects<span><a class=\"mark\" href=\"#url_url_strings_and_url_objects\" id=\"url_url_strings_and_url_objects\">#</a></span></h2>\n<p>A URL string is a structured string containing multiple meaningful components.\nWhen parsed, a URL object is returned containing properties for each of these\ncomponents.</p>\n<p>The following details each of the components of a parsed URL. The example\n<code>&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</code> is used to\nillustrate each.</p>\n<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                    href                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 protocol \u2502\u2502   auth    \u2502      host       \u2502           path            \u2502 hash  \u2502\n\u2502          \u2502\u2502           \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\n\u2502          \u2502\u2502           \u2502 hostname \u2502 port \u2502 pathname \u2502     search     \u2502       \u2502\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u251c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u2502 \u2502    query     \u2502       \u2502\n&quot;  http:   // user:pass @ host.com : 8080   /p/a/t/h  ?  query=string   #hash &quot;\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u2502 \u2502              \u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\n</code></pre><h3>urlObject.href<span><a class=\"mark\" href=\"#url_urlobject_href\" id=\"url_urlobject_href\">#</a></span></h3>\n<p>The <code>href</code> property is the full URL string that was parsed with both the\n<code>protocol</code> and <code>host</code> components converted to lower-case.</p>\n<p>For example: <code>&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</code></p>\n<h3>urlObject.protocol<span><a class=\"mark\" href=\"#url_urlobject_protocol\" id=\"url_urlobject_protocol\">#</a></span></h3>\n<p>The <code>protocol</code> property identifies the URL&#39;s lower-cased protocol scheme.</p>\n<p>For example: <code>&#39;http:&#39;</code></p>\n<h3>urlObject.slashes<span><a class=\"mark\" href=\"#url_urlobject_slashes\" id=\"url_urlobject_slashes\">#</a></span></h3>\n<p>The <code>slashes</code> property is a <code>boolean</code> with a value of <code>true</code> if two ASCII\nforward-slash characters (<code>/</code>) are required following the colon in the\n<code>protocol</code>.</p>\n<h3>urlObject.host<span><a class=\"mark\" href=\"#url_urlobject_host\" id=\"url_urlobject_host\">#</a></span></h3>\n<p>The <code>host</code> property is the full lower-cased host portion of the URL, including\nthe <code>port</code> if specified.</p>\n<p>For example: <code>&#39;host.com:8080&#39;</code></p>\n<h3>urlObject.auth<span><a class=\"mark\" href=\"#url_urlobject_auth\" id=\"url_urlobject_auth\">#</a></span></h3>\n<p>The <code>auth</code> property is the username and password portion of the URL, also\nreferred to as &quot;userinfo&quot;. This string subset follows the <code>protocol</code> and\ndouble slashes (if present) and preceeds the <code>host</code> component, delimited by an\nASCII &quot;at sign&quot; (<code>@</code>). The format of the string is <code>{username}[:{password}]</code>,\nwith the <code>[:{password}]</code> portion being optional.</p>\n<p>For example: <code>&#39;user:pass&#39;</code></p>\n<h3>urlObject.hostname<span><a class=\"mark\" href=\"#url_urlobject_hostname\" id=\"url_urlobject_hostname\">#</a></span></h3>\n<p>The <code>hostname</code> property is the lower-cased host name portion of the <code>host</code>\ncomponent <em>without</em> the <code>port</code> included.</p>\n<p>For example: <code>&#39;host.com&#39;</code></p>\n<h3>urlObject.port<span><a class=\"mark\" href=\"#url_urlobject_port\" id=\"url_urlobject_port\">#</a></span></h3>\n<p>The <code>port</code> property is the numeric port portion of the <code>host</code> component.</p>\n<p>For example: <code>&#39;8080&#39;</code></p>\n<h3>urlObject.pathname<span><a class=\"mark\" href=\"#url_urlobject_pathname\" id=\"url_urlobject_pathname\">#</a></span></h3>\n<p>The <code>pathname</code> property consists of the entire path section of the URL. This\nis everything following the <code>host</code> (including the <code>port</code>) and before the start\nof the <code>query</code> or <code>hash</code> components, delimited by either the ASCII question\nmark (<code>?</code>) or hash (<code>#</code>) characters.</p>\n<p>For example <code>&#39;/p/a/t/h&#39;</code></p>\n<p>No decoding of the path string is performed.</p>\n<h3>urlObject.search<span><a class=\"mark\" href=\"#url_urlobject_search\" id=\"url_urlobject_search\">#</a></span></h3>\n<p>The <code>search</code> property consists of the entire &quot;query string&quot; portion of the\nURL, including the leading ASCII question mark (<code>?</code>) character.</p>\n<p>For example: <code>&#39;?query=string&#39;</code></p>\n<p>No decoding of the query string is performed.</p>\n<h3>urlObject.path<span><a class=\"mark\" href=\"#url_urlobject_path\" id=\"url_urlobject_path\">#</a></span></h3>\n<p>The <code>path</code> property is a concatenation of the <code>pathname</code> and <code>search</code>\ncomponents.</p>\n<p>For example: <code>&#39;/p/a/t/h?query=string&#39;</code></p>\n<p>No decoding of the <code>path</code> is performed.</p>\n<h3>urlObject.query<span><a class=\"mark\" href=\"#url_urlobject_query\" id=\"url_urlobject_query\">#</a></span></h3>\n<p>The <code>query</code> property is either the &quot;params&quot; portion of the query string (\neverything <em>except</em> the leading ASCII question mark (<code>?</code>), or an object\nreturned by the <a href=\"querystring.html\"><code>querystring</code></a> module&#39;s <code>parse()</code> method:</p>\n<p>For example: <code>&#39;query=string&#39;</code> or <code>{&#39;query&#39;: &#39;string&#39;}</code></p>\n<p>If returned as a string, no decoding of the query string is performed. If\nreturned as an object, both keys and values are decoded.</p>\n<h3>urlObject.hash<span><a class=\"mark\" href=\"#url_urlobject_hash\" id=\"url_urlobject_hash\">#</a></span></h3>\n<p>The <code>hash</code> property consists of the &quot;fragment&quot; portion of the URL including\nthe leading ASCII hash (<code>#</code>) character.</p>\n<p>For example: <code>&#39;#hash&#39;</code></p>\n<h2>url.format(urlObject)<span><a class=\"mark\" href=\"#url_url_format_urlobject\" id=\"url_url_format_urlobject\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>urlObject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A URL object (as returned by <code>url.parse()</code> or\nconstructed otherwise). If a string, it is converted to an object by passing\nit to <code>url.parse()</code>.</li>\n</ul>\n<p>The <code>url.format()</code> method returns a formatted URL string derived from\n<code>urlObject</code>.</p>\n<p>If <code>urlObject</code> is not an object or a string, <code>url.parse()</code> will throw a\n<a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a>.</p>\n<p>The formatting process operates as follows:</p>\n<ul>\n<li>A new empty string <code>result</code> is created.</li>\n<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII\ncolon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>\n<li>If either the <code>urlObject.slashes</code> property is true, <code>urlObject.protocol</code>\nbegins with one of <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or <code>file</code>, or\n<code>urlObject.protocol</code> is <code>undefined</code>, the literal string <code>//</code> will be appended\nto <code>result</code>.</li>\n<li>If the value of the <code>urlObject.auth</code> property is truthy, and either\n<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of\n<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>\n followed by the literal string <code>@</code>.</li>\n<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul>\n<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,\nan <a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>\nis not <code>undefined</code>:<ul>\n<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>\n<li>The value of <code>urlObject.port</code> is coerced to a string and appended to\n<code>result</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of\n<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>\n<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul>\n<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash\n(<code>/</code>), then the literal string &#39;/&#39; is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>\nproperty is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>\nfollowed by the output of calling the <a href=\"querystring.html\"><code>querystring</code></a> module&#39;s <code>stringify()</code>\nmethod passing the value of <code>urlObject.query</code>.</li>\n<li>Otherwise, if <code>urlObject.search</code> is a string:<ul>\n<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question\nmark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.hash</code> property is a string:<ul>\n<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)\ncharacter, the literal string <code>#</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a\nstring, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li><code>result</code> is returned.</li>\n</ul>\n<h2>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])<span><a class=\"mark\" href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\" id=\"url_url_parse_urlstring_parsequerystring_slashesdenotehost\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>urlString</code> <span class=\"type\">&lt;string&gt;</span> The URL string to parse.</li>\n<li><code>parseQueryString</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the <code>query</code> property will always\nbe set to an object returned by the <a href=\"querystring.html\"><code>querystring</code></a> module&#39;s <code>parse()</code>\nmethod. If <code>false</code>, the <code>query</code> property on the returned URL object will be an\nunparsed, undecoded string. Defaults to <code>false</code>.</li>\n<li><code>slashesDenoteHost</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the first token after the literal\nstring <code>//</code> and preceeding the next <code>/</code> will be interpreted as the <code>host</code>.\nFor instance, given <code>//foo/bar</code>, the result would be\n<code>{host: &#39;foo&#39;, pathname: &#39;/bar&#39;}</code> rather than <code>{pathname: &#39;//foo/bar&#39;}</code>.\nDefaults to <code>false</code>.</li>\n</ul>\n<p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL\nobject.</p>\n<h2>url.resolve(from, to)<span><a class=\"mark\" href=\"#url_url_resolve_from_to\" id=\"url_url_resolve_from_to\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.1.25</span>\n</div><ul>\n<li><code>from</code> <span class=\"type\">&lt;string&gt;</span> The Base URL being resolved against.</li>\n<li><code>to</code> <span class=\"type\">&lt;string&gt;</span> The HREF URL being resolved.</li>\n</ul>\n<p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a\nmanner similar to that of a Web browser resolving an anchor tag HREF.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">url.resolve(&#39;/one/two/three&#39;, &#39;four&#39;)         // &#39;/one/two/four&#39;\nurl.resolve(&#39;http://example.com/&#39;, &#39;/one&#39;)    // &#39;http://example.com/one&#39;\nurl.resolve(&#39;http://example.com/one&#39;, &#39;/two&#39;) // &#39;http://example.com/two&#39;\n</code></pre>\n<h2>Escaped Characters<span><a class=\"mark\" href=\"#url_escaped_characters\" id=\"url_escaped_characters\">#</a></span></h2>\n<p>URLs are only permitted to contain a certain range of characters. Spaces (<code>&#39; &#39;</code>)\nand the following characters will be automatically escaped in the\nproperties of URL objects:</p>\n<pre><code>&lt; &gt; &quot; ` \\r \\n \\t { } | \\ ^ &#39;\n</code></pre><p>For example, the ASCII space character (<code>&#39; &#39;</code>) is encoded as <code>%20</code>. The ASCII\nforward slash (<code>/</code>) character is encoded as <code>%3C</code>.</p>\n<!-- [end-include:url.md] -->\n<!-- [start-include:util.md] -->\n<h1>util<span><a class=\"mark\" href=\"#util_util\" id=\"util_util\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>util</code> module is primarily designed to support the needs of Node.js&#39; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n</code></pre>\n<h2>util.debuglog(section)<span><a class=\"mark\" href=\"#util_util_debuglog_section\" id=\"util_util_debuglog_section\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>section</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a> A string identifying the portion of the application for\nwhich the <code>debuglog</code> function is being created.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The logging function</li>\n</ul>\n</div><p>The <code>util.debuglog()</code> method is used to create a function that conditionally\nwrites debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>\nenvironment variable.  If the <code>section</code> name appears within the value of that\nenvironment variable, then the returned function operates similar to\n<code>console.error()</code>.  If not, then the returned function is a no-op.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst debuglog = util.debuglog(&#39;foo&#39;);\n\ndebuglog(&#39;hello from foo [%d]&#39;, 123);\n</code></pre>\n<p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then\nit will output something like:</p>\n<pre><code>FOO 3245: hello from foo [123]\n</code></pre><p>where <code>3245</code> is the process id.  If it is not run with that\nenvironment variable set, then it will not print anything.</p>\n<p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>\nenvironment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.</p>\n<h2>util.deprecate(function, string)<span><a class=\"mark\" href=\"#util_util_deprecate_function_string\" id=\"util_util_deprecate_function_string\">#</a></span></h2>\n<p>The <code>util.deprecate()</code> method wraps the given <code>function</code> in such a way that\nit is marked as deprecated.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nexports.puts = util.deprecate(() =&gt; {\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\n    process.stdout.write(arguments[i] + &#39;\\n&#39;);\n  }\n}, &#39;util.puts: Use console.log instead&#39;);\n</code></pre>\n<p>When called, <code>util.deprecate()</code> will return a function that will emit a\n<code>DeprecationWarning</code> using the <code>process.on(&#39;warning&#39;)</code> event. By default,\nthis warning will be emitted and printed to <code>stderr</code> exactly once, the first\ntime it is called. After the warning is emitted, the wrapped <code>function</code>\nis called.</p>\n<p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are\nused, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to\nthe first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p>\n<p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set,\nor the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a\nstack trace are printed to <code>stderr</code> the first time the deprecated function is\ncalled.</p>\n<p>If the <code>--throw-deprecation</code> command line flag is set, or the\n<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be\nthrown when the deprecated function is called.</p>\n<p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code>\nproperty take precedence over <code>--trace-deprecation</code> and\n<code>process.traceDeprecation</code>.</p>\n<h2>util.format(format[, ...])<span><a class=\"mark\" href=\"#util_util_format_format\" id=\"util_util_format_format\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>format</code> <span class=\"type\">&lt;string&gt;</span> A <code>printf</code>-like format string.</li>\n</ul>\n</div><p>The <code>util.format()</code> method returns a formatted string using the first argument\nas a <code>printf</code>-like format.</p>\n<p>The first argument is a string containing zero or more <em>placeholder</em> tokens.\nEach placeholder token is replaced with the converted value from the\ncorresponding argument. Supported placeholders are:</p>\n<ul>\n<li><code>%s</code> - String.</li>\n<li><code>%d</code> - Number (both integer and float).</li>\n<li><code>%j</code> - JSON.  Replaced with the string <code>&#39;[Circular]&#39;</code> if the argument\ncontains circular references.</li>\n<li><code>%%</code> - single percent sign (<code>&#39;%&#39;</code>). This does not consume an argument.</li>\n</ul>\n<p>If the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.</p>\n<pre><code class=\"lang-js\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;);\n  // Returns &#39;foo:%s&#39;\n</code></pre>\n<p>If there are more arguments passed to the <code>util.format()</code> method than the\nnumber of placeholders, the extra arguments are coerced into strings (for\nobjects and symbols, <code>util.inspect()</code> is used) then concatenated to the\nreturned string, each delimited by a space.</p>\n<pre><code class=\"lang-js\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); // &#39;foo:bar baz&#39;\n</code></pre>\n<p>If the first argument is not a format string then <code>util.format()</code> returns\na string that is the concatenation of all arguments separated by spaces.\nEach argument is converted to a string using <code>util.inspect()</code>.</p>\n<pre><code class=\"lang-js\">util.format(1, 2, 3); // &#39;1 2 3&#39;\n</code></pre>\n<h2>util.inherits(constructor, superConstructor)<span><a class=\"mark\" href=\"#util_util_inherits_constructor_superconstructor\" id=\"util_util_inherits_constructor_superconstructor\">#</a></span></h2>\n<p><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and\n<code>extends</code> keywords to get language level inheritance support. Also note that\nthe two styles are <a href=\"https://github.com/nodejs/node/issues/4179\">semantically incompatible</a>.</em></p>\n<ul>\n<li><code>constructor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li><code>superConstructor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Inherit the prototype methods from one <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\">constructor</a> into another.  The\nprototype of <code>constructor</code> will be set to a new object created from\n<code>superConstructor</code>.</p>\n<p>As an additional convenience, <code>superConstructor</code> will be accessible\nthrough the <code>constructor.super_</code> property.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nfunction MyStream() {\n    EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n    this.emit(&#39;data&#39;, data);\n}\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n})\nstream.write(&#39;It works!&#39;); // Received data: &quot;It works!&quot;\n</code></pre>\n<h2>util.inspect(object[, options])<span><a class=\"mark\" href=\"#util_util_inspect_object_options\" id=\"util_util_inspect_object_options\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span> Any JavaScript primitive or Object.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>showHidden</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the <code>object</code>&#39;s non-enumerable symbols and\nproperties will be included in the formatted result. Defaults to <code>false</code>.</li>\n<li><code>depth</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of times to recurse while formatting\nthe <code>object</code>. This is useful for inspecting large complicated objects.\nDefaults to <code>2</code>. To make it recurse indefinitely pass <code>null</code>.</li>\n<li><code>colors</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, the output will be styled with ANSI color\ncodes. Defaults to <code>false</code>. Colors are customizable, see\n<a href=\"#util_customizing_util_inspect_colors\">Customizing <code>util.inspect</code> colors</a>.</li>\n<li><code>customInspect</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>false</code>, then custom <code>inspect(depth, opts)</code>\nfunctions exported on the <code>object</code> being inspected will not be called.\nDefaults to <code>true</code>.</li>\n<li><code>showProxy</code> <span class=\"type\">&lt;boolean&gt;</span> If <code>true</code>, then objects and functions that are\n<code>Proxy</code> objects will be introspected to show their <code>target</code> and <code>handler</code>\nobjects. Defaults to <code>false</code>.</li>\n<li><code>maxArrayLength</code> <span class=\"type\">&lt;number&gt;</span> Specifies the maximum number of array and\n<code>TypedArray</code> elements to include when formatting. Defaults to <code>100</code>. Set to\n<code>null</code> to show all array elements. Set to <code>0</code> or negative to show no array\nelements.</li>\n</ul>\n</li>\n</ul>\n</div><p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is\nprimarily useful for debugging. Additional <code>options</code> may be passed that alter\ncertain aspects of the formatted string.</p>\n<p>The following example inspects all properties of the <code>util</code> object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n</code></pre>\n<p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when\ncalled these receive the current <code>depth</code> in the recursive inspection, as well as\nthe options object passed to <code>util.inspect()</code>.</p>\n<h3>Customizing <code>util.inspect</code> colors<span><a class=\"mark\" href=\"#util_customizing_util_inspect_colors\" id=\"util_customizing_util_inspect_colors\">#</a></span></h3>\n<!-- type=misc -->\n<p>Color output (if enabled) of <code>util.inspect</code> is customizable globally\nvia the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p>\n<p><code>util.inspect.styles</code> is a map associating a style name to a color from\n<code>util.inspect.colors</code>.</p>\n<p>The default styles and associated colors are:</p>\n<ul>\n<li><code>number</code> - <code>yellow</code></li>\n<li><code>boolean</code> - <code>yellow</code></li>\n<li><code>string</code> - <code>green</code></li>\n<li><code>date</code> - <code>magenta</code></li>\n<li><code>regexp</code> - <code>red</code></li>\n<li><code>null</code> - <code>bold</code></li>\n<li><code>undefined</code> - <code>grey</code></li>\n<li><code>special</code> - <code>cyan</code> (only applied to functions at this time)</li>\n<li><code>name</code> - (no styling)</li>\n</ul>\n<p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>,\n<code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>,\n<code>underline</code> and <code>inverse</code> codes.</p>\n<p>Color styling uses ANSI control codes that may not be supported on all\nterminals.</p>\n<h3>Custom <code>inspect()</code> function on Objects<span><a class=\"mark\" href=\"#util_custom_inspect_function_on_objects\" id=\"util_custom_inspect_function_on_objects\">#</a></span></h3>\n<!-- type=misc -->\n<p>Objects may also define their own <code>inspect(depth, opts)</code> function that\n<code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst obj = { name: &#39;nate&#39; };\nobj.inspect = function(depth) {\n  return `{${this.name}}`;\n};\n\nutil.inspect(obj);\n  // &quot;{nate}&quot;\n</code></pre>\n<p>Custom <code>inspect(depth, opts)</code> functions typically return a string but may\nreturn a value of any type that will be formatted accordingly by\n<code>util.inspect()</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst obj = { foo: &#39;this will not show up in the inspect() output&#39; };\nobj.inspect = function(depth) {\n  return { bar: &#39;baz&#39; };\n};\n\nutil.inspect(obj);\n  // &quot;{ bar: &#39;baz&#39; }&quot;\n</code></pre>\n<h2>Deprecated APIs<span><a class=\"mark\" href=\"#util_deprecated_apis\" id=\"util_deprecated_apis\">#</a></span></h2>\n<p>The following APIs have been deprecated and should no longer be used. Existing\napplications and modules should be updated to find alternative approaches.</p>\n<h3>util.debug(string)<span><a class=\"mark\" href=\"#util_util_debug_string\" id=\"util_util_debug_string\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"console.html#console_console_error_data\"><code>console.error()</code></a> instead.</pre><div class=\"signature\"><ul>\n<li><code>string</code> <span class=\"type\">&lt;string&gt;</span> The message to print to <code>stderr</code></li>\n</ul>\n</div><p>Deprecated predecessor of <code>console.error</code>.</p>\n<h3>util.error([...])<span><a class=\"mark\" href=\"#util_util_error\" id=\"util_util_error\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"console.html#console_console_error_data\"><code>console.error()</code></a> instead.</pre><div class=\"signature\"><ul>\n<li><code>string</code> <span class=\"type\">&lt;string&gt;</span> The message to print to <code>stderr</code></li>\n</ul>\n</div><p>Deprecated predecessor of <code>console.error</code>.</p>\n<h3>util.isArray(object)<span><a class=\"mark\" href=\"#util_util_isarray_object\" id=\"util_util_isarray_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Internal alias for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray</code></a>.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isArray([]);\n  // true\nutil.isArray(new Array);\n  // true\nutil.isArray({});\n  // false\n</code></pre>\n<h3>util.isBoolean(object)<span><a class=\"mark\" href=\"#util_util_isboolean_object\" id=\"util_util_isboolean_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isBoolean(1);\n  // false\nutil.isBoolean(0);\n  // false\nutil.isBoolean(false);\n  // true\n</code></pre>\n<h3>util.isBuffer(object)<span><a class=\"mark\" href=\"#util_util_isbuffer_object\" id=\"util_util_isbuffer_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"buffer.html#buffer_class_method_buffer_isbuffer_obj\"><code>Buffer.isBuffer()</code></a> instead.</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isBuffer({ length: 0 });\n  // false\nutil.isBuffer([]);\n  // false\nutil.isBuffer(Buffer.from(&#39;hello world&#39;));\n  // true\n</code></pre>\n<h3>util.isDate(object)<span><a class=\"mark\" href=\"#util_util_isdate_object\" id=\"util_util_isdate_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isDate(new Date());\n  // true\nutil.isDate(Date());\n  // false (without &#39;new&#39; returns a String)\nutil.isDate({});\n  // false\n</code></pre>\n<h3>util.isError(object)<span><a class=\"mark\" href=\"#util_util_iserror_object\" id=\"util_util_iserror_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isError(new Error());\n  // true\nutil.isError(new TypeError());\n  // true\nutil.isError({ name: &#39;Error&#39;, message: &#39;an error occurred&#39; });\n  // false\n</code></pre>\n<p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is\npossible to obtain an incorrect result when the <code>object</code> argument manipulates\n<code>@@toStringTag</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst obj = { name: &#39;Error&#39;, message: &#39;an error occurred&#39; };\n\nutil.isError(obj);\n  // false\nobj[Symbol.toStringTag] = &#39;Error&#39;;\nutil.isError(obj);\n  // true\n</code></pre>\n<h3>util.isFunction(object)<span><a class=\"mark\" href=\"#util_util_isfunction_object\" id=\"util_util_isfunction_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nfunction Foo() {}\nconst Bar = function() {};\n\nutil.isFunction({});\n  // false\nutil.isFunction(Foo);\n  // true\nutil.isFunction(Bar);\n  // true\n</code></pre>\n<h3>util.isNull(object)<span><a class=\"mark\" href=\"#util_util_isnull_object\" id=\"util_util_isnull_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNull(0);\n  // false\nutil.isNull(undefined);\n  // false\nutil.isNull(null);\n  // true\n</code></pre>\n<h3>util.isNullOrUndefined(object)<span><a class=\"mark\" href=\"#util_util_isnullorundefined_object\" id=\"util_util_isnullorundefined_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise,\nreturns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNullOrUndefined(0);\n  // false\nutil.isNullOrUndefined(undefined);\n  // true\nutil.isNullOrUndefined(null);\n  // true\n</code></pre>\n<h3>util.isNumber(object)<span><a class=\"mark\" href=\"#util_util_isnumber_object\" id=\"util_util_isnumber_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNumber(false);\n  // false\nutil.isNumber(Infinity);\n  // true\nutil.isNumber(0);\n  // true\nutil.isNumber(NaN);\n  // true\n</code></pre>\n<h3>util.isObject(object)<span><a class=\"mark\" href=\"#util_util_isobject_object\" id=\"util_util_isobject_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a\n<code>Function</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isObject(5);\n  // false\nutil.isObject(null);\n  // false\nutil.isObject({});\n  // true\nutil.isObject(function(){});\n  // false\n</code></pre>\n<h3>util.isPrimitive(object)<span><a class=\"mark\" href=\"#util_util_isprimitive_object\" id=\"util_util_isprimitive_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isPrimitive(5);\n  // true\nutil.isPrimitive(&#39;foo&#39;);\n  // true\nutil.isPrimitive(false);\n  // true\nutil.isPrimitive(null);\n  // true\nutil.isPrimitive(undefined);\n  // true\nutil.isPrimitive({});\n  // false\nutil.isPrimitive(function() {});\n  // false\nutil.isPrimitive(/^$/);\n  // false\nutil.isPrimitive(new Date());\n  // false\n</code></pre>\n<h3>util.isRegExp(object)<span><a class=\"mark\" href=\"#util_util_isregexp_object\" id=\"util_util_isregexp_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isRegExp(/some regexp/);\n  // true\nutil.isRegExp(new RegExp(&#39;another regexp&#39;));\n  // true\nutil.isRegExp({});\n  // false\n</code></pre>\n<h3>util.isString(object)<span><a class=\"mark\" href=\"#util_util_isstring_object\" id=\"util_util_isstring_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isString(&#39;&#39;);\n  // true\nutil.isString(&#39;foo&#39;);\n  // true\nutil.isString(String(&#39;foo&#39;));\n  // true\nutil.isString(5);\n  // false\n</code></pre>\n<h3>util.isSymbol(object)<span><a class=\"mark\" href=\"#util_util_issymbol_object\" id=\"util_util_issymbol_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isSymbol(5);\n  // false\nutil.isSymbol(&#39;foo&#39;);\n  // false\nutil.isSymbol(Symbol(&#39;foo&#39;));\n  // true\n</code></pre>\n<h3>util.isUndefined(object)<span><a class=\"mark\" href=\"#util_util_isundefined_object\" id=\"util_util_isundefined_object\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated</pre><div class=\"signature\"><ul>\n<li><code>object</code> <span class=\"type\">&lt;any&gt;</span></li>\n</ul>\n</div><p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst foo = undefined;\nutil.isUndefined(5);\n  // false\nutil.isUndefined(foo);\n  // true\nutil.isUndefined(null);\n  // false\n</code></pre>\n<h3>util.log(string)<span><a class=\"mark\" href=\"#util_util_log_string\" id=\"util_util_log_string\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use a third party module instead.</pre><div class=\"signature\"><ul>\n<li><code>string</code> <span class=\"type\">&lt;string&gt;</span></li>\n</ul>\n</div><p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included\ntimestamp.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.log(&#39;Timestamped message.&#39;);\n</code></pre>\n<h3>util.print([...])<span><a class=\"mark\" href=\"#util_util_print\" id=\"util_util_print\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"console.html#console_console_log_data\"><code>console.log()</code></a> instead.</pre><p>Deprecated predecessor of <code>console.log</code>.</p>\n<h3>util.puts([...])<span><a class=\"mark\" href=\"#util_util_puts\" id=\"util_util_puts\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use <a href=\"console.html#console_console_log_data\"><code>console.log()</code></a> instead.</pre><p>Deprecated predecessor of <code>console.log</code>.</p>\n<h3>util._extend(obj)<span><a class=\"mark\" href=\"#util_util_extend_obj\" id=\"util_util_extend_obj\">#</a></span></h3>\n<pre class=\"api_stability api_stability_0\">Stability: 0 - Deprecated: Use Object.assign() instead.</pre><p>The <code>util._extend()</code> method was never intended to be used outside of internal\nNode.js modules. The community found and used it anyway.</p>\n<p>It is deprecated and should not be used in new code. JavaScript comes with very\nsimilar built-in functionality through <code>Object.assign()</code>.</p>\n<!-- [end-include:util.md] -->\n<!-- [start-include:v8.md] -->\n<h1>V8<span><a class=\"mark\" href=\"#v8_v8\" id=\"v8_v8\">#</a></span></h1>\n<p>The <code>v8</code> module exposes APIs that are specific to the version of <a href=\"https://developers.google.com/v8/\">V8</a>\nbuilt into the Node.js binary. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const v8 = require(&#39;v8&#39;);\n</code></pre>\n<p><em>Note</em>: The APIs and implementation are subject to change at any time.</p>\n<h2>v8.getHeapStatistics()<span><a class=\"mark\" href=\"#v8_v8_getheapstatistics\" id=\"v8_v8_getheapstatistics\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><p>Returns an object with the following properties:</p>\n<ul>\n<li><code>total_heap_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>total_heap_size_executable</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>total_physical_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>total_available_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>used_heap_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>heap_size_limit</code> <span class=\"type\">&lt;number&gt;</span></li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"lang-js\">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264\n}\n</code></pre>\n<h2>v8.getHeapSpaceStatistics()<span><a class=\"mark\" href=\"#v8_v8_getheapspacestatistics\" id=\"v8_v8_getheapspacestatistics\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v6.0.0</span>\n</div><p>Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n<a href=\"https://v8docs.nodesource.com/node-5.0/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4\"><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the\nnext.</p>\n<p>The value returned is an array of objects containing the following properties:</p>\n<ul>\n<li><code>space_name</code> <span class=\"type\">&lt;string&gt;</span></li>\n<li><code>space_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>space_used_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>space_available_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n<li><code>physical_space_size</code> <span class=\"type\">&lt;number&gt;</span></li>\n</ul>\n<p>For example:</p>\n<pre><code>[\n  {\n    &quot;space_name&quot;: &quot;new_space&quot;,\n    &quot;space_size&quot;: 2063872,\n    &quot;space_used_size&quot;: 951112,\n    &quot;space_available_size&quot;: 80824,\n    &quot;physical_space_size&quot;: 2063872\n  },\n  {\n    &quot;space_name&quot;: &quot;old_space&quot;,\n    &quot;space_size&quot;: 3090560,\n    &quot;space_used_size&quot;: 2493792,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 3090560\n  },\n  {\n    &quot;space_name&quot;: &quot;code_space&quot;,\n    &quot;space_size&quot;: 1260160,\n    &quot;space_used_size&quot;: 644256,\n    &quot;space_available_size&quot;: 960,\n    &quot;physical_space_size&quot;: 1260160\n  },\n  {\n    &quot;space_name&quot;: &quot;map_space&quot;,\n    &quot;space_size&quot;: 1094160,\n    &quot;space_used_size&quot;: 201608,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 1094160\n  },\n  {\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\n    &quot;space_size&quot;: 0,\n    &quot;space_used_size&quot;: 0,\n    &quot;space_available_size&quot;: 1490980608,\n    &quot;physical_space_size&quot;: 0\n  }\n]\n</code></pre><h2>v8.setFlagsFromString(string)<span><a class=\"mark\" href=\"#v8_v8_setflagsfromstring_string\" id=\"v8_v8_setflagsfromstring_string\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v1.0.0</span>\n</div><p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set \nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.</p>\n<p>The V8 options available for a version of Node.js may be determined by running\n<code>node --v8-options</code>.  An unofficial, community-maintained list of options\nand their effects is available <a href=\"https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md\">here</a>.</p>\n<p>Usage:</p>\n<pre><code class=\"lang-js\">// Print GC events to stdout for one minute.\nconst v8 = require(&#39;v8&#39;);\nv8.setFlagsFromString(&#39;--trace_gc&#39;);\nsetTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);\n</code></pre>\n<!-- [end-include:v8.md] -->\n<!-- [start-include:vm.md] -->\n<h1>Executing JavaScript<span><a class=\"mark\" href=\"#vm_executing_javascript\" id=\"vm_executing_javascript\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><!--name=vm-->\n<p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\nMachine contexts. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n</code></pre>\n<p>JavaScript code can be compiled and run immediately or compiled, saved, and run\nlater.</p>\n<h2>Class: vm.Script<span><a class=\"mark\" href=\"#vm_class_vm_script\" id=\"vm_class_vm_script\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><p>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be\nexecuted in specific sandboxes (or &quot;contexts&quot;).</p>\n<h3>new vm.Script(code, options)<span><a class=\"mark\" href=\"#vm_new_vm_script_code_options\" id=\"vm_new_vm_script_code_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>code</code> <span class=\"type\">&lt;string&gt;</span> The JavaScript code to compile.</li>\n<li><code>options</code><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n<li><code>cachedData</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Provides an optional <code>Buffer</code> with V8&#39;s code cache\ndata for the supplied source. When supplied, the <code>cachedDataRejected</code> value\nwill be set to either <code>true</code> or <code>false</code> depending on acceptance of the data\nby V8.</li>\n<li><code>produceCachedData</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code> and no <code>cachedData</code> is present, V8\nwill attempt to produce code cache data for <code>code</code>. Upon success, a\n<code>Buffer</code> with V8&#39;s code cache data will be produced and stored in the\n<code>cachedData</code> property of the returned <code>vm.Script</code> instance.\nThe <code>cachedDataProduced</code> value will be set to either <code>true</code> or <code>false</code>\ndepending on whether code cache data is produced successfully.</li>\n</ul>\n</li>\n</ul>\n<p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\ncompiled <code>vm.Script</code> can be run later multiple times. It is important to note\nthat the <code>code</code> is not bound to any global object; rather, it is bound before\neach run, just for that run.</p>\n<h3>script.runInContext(contextifiedSandbox[, options])<span><a class=\"mark\" href=\"#vm_script_runincontext_contextifiedsandbox_options\" id=\"vm_script_runincontext_contextifiedsandbox_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>contextifiedSandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object as returned by the\n<code>vm.createContext()</code> method.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n<p>Runs the compiled code contained by the <code>vm.Script</code> object within the given\n<code>contextifiedSandbox</code> and returns the result. Running code does not have access\nto local scope.</p>\n<p>The following example compiles code that increments a global variable, sets\nthe value of another global variable, then execute the code multiple times.\nThe globals are contained in the <code>sandbox</code> object.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nconst script = new vm.Script(&#39;count += 1; name = &quot;kitty&quot;;&#39;);\n\nconst context = new vm.createContext(sandbox);\nfor (var i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 12, name: &#39;kitty&#39; }\n</code></pre>\n<h3>script.runInNewContext([sandbox][, options])<span><a class=\"mark\" href=\"#vm_script_runinnewcontext_sandbox_options\" id=\"vm_script_runinnewcontext_sandbox_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object that will be <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a>. If <code>undefined</code>, a\nnew object will be created.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n<p>First contextifies the given <code>sandbox</code>, runs the compiled code contained by\nthe <code>vm.Script</code> object within the created sandbox, and returns the result.\nRunning code does not have access to local scope.</p>\n<p>The following example compiles code that sets a global variable, then executes\nthe code multiple times in different contexts. The globals are set on and\ncontained within each individual <code>sandbox</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst script = new vm.Script(&#39;globalVar = &quot;set&quot;&#39;);\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }]\n</code></pre>\n<h3>script.runInThisContext(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#vm_script_runinthiscontext_options\" id=\"vm_script_runinthiscontext_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n<p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the\ncurrent <code>global</code> object. Running code does not have access to local scope, but\n<em>does</em> have access to the current <code>global</code> object.</p>\n<p>The following example compiles code that increments a <code>global</code> variable then\nexecutes that code multiple times:</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script(&#39;globalVar += 1&#39;, { filename: &#39;myfile.vm&#39; });\n\nfor (var i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n</code></pre>\n<h2>vm.createContext([sandbox])<span><a class=\"mark\" href=\"#vm_vm_createcontext_sandbox\" id=\"vm_vm_createcontext_sandbox\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will [prepare\nthat sandbox][#vm_what_does_it_mean_to_contextify_an_object] so that it can be\nused in calls to <a href=\"#vm_vm_runincontext_code_contextifiedsandbox_options\"><code>vm.runInContext()</code></a> or <a href=\"#vm_script_runincontext_contextifiedsandbox_options\"><code>script.runInContext()</code></a>. Inside\nsuch scripts, the <code>sandbox</code> object will be the global object, retaining all of\nits existing properties but also having the built-in objects and functions any\nstandard <a href=\"https://es5.github.io/#x15.1\">global object</a> has. Outside of scripts run by the vm module,\n<code>sandbox</code> will remain unchanged.</p>\n<p>If <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty\n<a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> sandbox object will be returned.</p>\n<p>The <code>vm.createContext()</code> method is primarily useful for creating a single\nsandbox that can be used to run multiple scripts. For instance, if emulating a\nweb browser, the method can be used to create a single sandbox representing a\nwindow&#39;s global object, then run all <code>&lt;script&gt;</code> tags together within the context\nof that sandbox.</p>\n<h2>vm.isContext(sandbox)<span><a class=\"mark\" href=\"#vm_vm_iscontext_sandbox\" id=\"vm_vm_iscontext_sandbox\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.7</span>\n</div><ul>\n<li><code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns <code>true</code> if the given <code>sandbox</code> object has been <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using\n<a href=\"#vm_vm_createcontext_sandbox\"><code>vm.createContext()</code></a>.</p>\n<h2>vm.runInContext(code, contextifiedSandbox[, options])<span><a class=\"mark\" href=\"#vm_vm_runincontext_code_contextifiedsandbox_options\" id=\"vm_vm_runincontext_code_contextifiedsandbox_options\">#</a></span></h2>\n<div class=\"signature\"><ul>\n<li><code>code</code> <span class=\"type\">&lt;string&gt;</span> The JavaScript code to compile and run.</li>\n<li><code>contextifiedSandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object that will be used\nas the <code>global</code> when the <code>code</code> is compiled and run.</li>\n<li><code>options</code><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n</div><p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of\nthe <code>contextifiedSandbox</code>, then returns the result. Running code does not have\naccess to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been\npreviously <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using the <a href=\"#vm_vm_createcontext_sandbox\"><code>vm.createContext()</code></a> method.</p>\n<p>The following example compiles and executes different scripts using a single\n<a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (var i = 0; i &lt; 10; ++i) {\n  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n</code></pre>\n<h2>vm.runInDebugContext(code)<span><a class=\"mark\" href=\"#vm_vm_runindebugcontext_code\" id=\"vm_vm_runindebugcontext_code\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.14</span>\n</div><ul>\n<li><code>code</code> <span class=\"type\">&lt;string&gt;</span> The JavaScript code to compile and run.</li>\n</ul>\n<p>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8\ndebug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\nconst Debug = vm.runInDebugContext(&#39;Debug&#39;);\nconsole.log(Debug.findScript(process.emit).name);  // &#39;events.js&#39;\nconsole.log(Debug.findScript(process.exit).name);  // &#39;internal/process.js&#39;\n</code></pre>\n<p><em>Note</em>: The debug context and object are intrinsically tied to V8&#39;s debugger\nimplementation and may change (or even be removed) without prior warning.</p>\n<p>The <code>Debug</code> object can also be made available using the V8-specific\n<code>--expose_debug_as=</code> [command line option][cli.md].</p>\n<h2>vm.runInNewContext(code[, sandbox][, options])<span><a class=\"mark\" href=\"#vm_vm_runinnewcontext_code_sandbox_options\" id=\"vm_vm_runinnewcontext_code_sandbox_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>code</code> <span class=\"type\">&lt;string&gt;</span> The JavaScript code to compile and run.</li>\n<li><code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object that will be <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a>. If <code>undefined</code>, a\nnew object will be created.</li>\n<li><code>options</code><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>vm.runInContext()</code> first contextifies the given <code>sandbox</code> object (or\ncreates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it\nwithin the context of the created context, then returns the result. Running code\ndoes not have access to the local scope.</p>\n<p>The following example compiles and executes code that increments a global\nvariable and sets a new one. These globals are contained in the <code>sandbox</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }\n</code></pre>\n<h2>vm.runInThisContext(code[, options])<span><a class=\"mark\" href=\"#vm_vm_runinthiscontext_code_options\" id=\"vm_vm_runinthiscontext_code_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.3.1</span>\n</div><ul>\n<li><code>code</code> <span class=\"type\">&lt;string&gt;</span> The JavaScript code to compile and run.</li>\n<li><code>options</code><ul>\n<li><code>filename</code> <span class=\"type\">&lt;string&gt;</span> Specifies the filename used in stack traces produced\nby this script.</li>\n<li><code>lineOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the line number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>columnOffset</code> <span class=\"type\">&lt;number&gt;</span> Specifies the column number offset that is displayed\nin stack traces produced by this script.</li>\n<li><code>displayErrors</code> <span class=\"type\">&lt;boolean&gt;</span> When <code>true</code>, if an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> error occurs\nwhile compiling the <code>code</code>, the line of code causing the error is attached\nto the stack trace.</li>\n<li><code>timeout</code> <span class=\"type\">&lt;number&gt;</span> Specifies the number of milliseconds to execute <code>code</code>\nbefore terminating execution. If execution is terminated, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nwill be thrown.</li>\n</ul>\n</li>\n</ul>\n<p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the\ncurrent <code>global</code> and returns the result. Running code does not have access to\nlocal scope, but does have access to the current <code>global</code> object.</p>\n<p>The following example illustrates using both <code>vm.runInThisContext()</code> and\nthe JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function to run the same code:</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\nvar localVar = &#39;initial value&#39;;\n\nconst vmResult = vm.runInThisContext(&#39;localVar = &quot;vm&quot;;&#39;);\nconsole.log(&#39;vmResult: &#39;, vmResult);\nconsole.log(&#39;localVar: &#39;, localVar);\n\nconst evalResult = eval(&#39;localVar = &quot;eval&quot;;&#39;);\nconsole.log(&#39;evalResult: &#39;, evalResult);\nconsole.log(&#39;localVar: &#39;, localVar);\n\n// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;\n// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;\n</code></pre>\n<p>Because <code>vm.runInThisContext()</code> does not have access to the local scope,\n<code>localVar</code> is unchanged. In contrast, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> <em>does</em> have access to the\nlocal scope, so the value <code>localVar</code> is changed. In this way\n<code>vm.runInThisContext()</code> is much like an <a href=\"https://es5.github.io/#x10.4.2\">indirect <code>eval()</code> call</a>, e.g. \n<code>(0,eval)(&#39;code&#39;)</code>.</p>\n<h2>Example: Running an HTTP Server within a VM<span><a class=\"mark\" href=\"#vm_example_running_an_http_server_within_a_vm\" id=\"vm_example_running_an_http_server_within_a_vm\">#</a></span></h2>\n<p>When using either <code>script.runInThisContext()</code> or <code>vm.runInThisContext()</code>, the\ncode is executed within the current V8 global context. The code passed\nto this VM context will have its own isolated scope.</p>\n<p>In order to run a simple web server using the <code>http</code> module the code passed to\nthe context must either call <code>require(&#39;http&#39;)</code> on its own, or have a reference\nto the <code>http</code> module passed to it. For instance:</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst vm = require(&#39;vm&#39;);\n\nlet code =\n`(function(require) {\n\n   const http = require(&#39;http&#39;);\n\n   http.createServer( (request, response) =&gt; {\n     response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n     response.end(&#39;Hello World\\\\n&#39;);\n   }).listen(8124);\n\n   console.log(&#39;Server running at http://127.0.0.1:8124/&#39;);\n })`;\n\n vm.runInThisContext(code)(require);\n</code></pre>\n<p><em>Note</em>: The <code>require()</code> in the above case shares the state with context it is\npassed from. This may introduce risks when untrusted code is executed, e.g.\naltering objects from the calling thread&#39;s context in unwanted ways.</p>\n<h2>What does it mean to &quot;contextify&quot; an object?<span><a class=\"mark\" href=\"#vm_what_does_it_mean_to_contextify_an_object\" id=\"vm_what_does_it_mean_to_contextify_an_object\">#</a></span></h2>\n<p>All JavaScript executed within Node.js runs within the scope of a &quot;context&quot;.\nAccording to the <a href=\"https://developers.google.com/v8/embed#contexts\">V8 Embedder&#39;s Guide</a>:</p>\n<blockquote>\n<p>In V8, a context is an execution environment that allows separate, unrelated,\nJavaScript applications to run in a single instance of V8. You must explicitly\nspecify the context in which you want any JavaScript code to be run.</p>\n</blockquote>\n<p>When the method <code>vm.createContext()</code> is called, the <code>sandbox</code> object that is\npassed in (or a newly created object if <code>sandbox</code> is <code>undefined</code>) is associated\ninternally with a new instance of a V8 Context. This V8 Context provides the\n<code>code</code> run using the <code>vm</code> modules methods with an isolated global environment\nwithin which it can operate. The process of creating the V8 Context and\nassociating it with the <code>sandbox</code> object is what this document refers to as\n&quot;contextifying&quot; the <code>sandbox</code>.</p>\n<!-- [end-include:vm.md] -->\n<!-- [start-include:zlib.md] -->\n<h1>Zlib<span><a class=\"mark\" href=\"#zlib_zlib\" id=\"zlib_zlib\">#</a></span></h1>\n<pre class=\"api_stability api_stability_2\">Stability: 2 - Stable</pre><p>The <code>zlib</code> module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const zlib = require(&#39;zlib&#39;);\n</code></pre>\n<p>Compressing or decompressing a stream (such as a file) can be accomplished by \npiping the source stream data through a <code>zlib</code> stream into a destination stream:</p>\n<pre><code class=\"lang-js\">const gzip = zlib.createGzip();\nconst fs = require(&#39;fs&#39;);\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);\n</code></pre>\n<p>It is also possible to compress or decompress data in a single step:</p>\n<pre><code class=\"lang-js\">const input = &#39;.................................&#39;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</code></pre>\n<h2>Compressing HTTP requests and responses<span><a class=\"mark\" href=\"#zlib_compressing_http_requests_and_responses\" id=\"zlib_compressing_http_requests_and_responses\">#</a></span></h2>\n<p>The <code>zlib</code> module can be used to implement support for the <code>gzip</code> and <code>deflate</code>\ncontent-encoding mechanisms defined by \n<a href=\"https://tools.ietf.org/html/rfc7230#section-4.2\">HTTP</a>.</p>\n<p>The HTTP <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\"><code>Accept-Encoding</code></a> header is used within an http request to identify\nthe compression encodings accepted by the client. The <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\"><code>Content-Encoding</code></a> \nheader is used to identify the compression encodings actually applied to a \nmessage.</p>\n<p><strong>Note: the examples given below are drastically simplified to show\nthe basic concept.</strong>  Using <code>zlib</code> encoding can be expensive, and the results\nought to be cached.  See <a href=\"#zlib_memory_usage_tuning\">Memory Usage Tuning</a> for more information\non the speed/memory/compression tradeoffs involved in <code>zlib</code> usage.</p>\n<pre><code class=\"lang-js\">// client request example\nconst zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\nconst fs = require(&#39;fs&#39;);\nconst request = http.get({ host: &#39;example.com&#39;,\n                         path: &#39;/&#39;,\n                         port: 80,\n                         headers: { &#39;Accept-Encoding&#39;: &#39;gzip,deflate&#39; } });\nrequest.on(&#39;response&#39;, (response) =&gt; {\n  var output = fs.createWriteStream(&#39;example.com_index.html&#39;);\n\n  switch (response.headers[&#39;content-encoding&#39;]) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case &#39;gzip&#39;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &#39;deflate&#39;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n\n// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nconst zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\nconst fs = require(&#39;fs&#39;);\nhttp.createServer((request, response) =&gt; {\n  var raw = fs.createReadStream(&#39;index.html&#39;);\n  var acceptEncoding = request.headers[&#39;accept-encoding&#39;];\n  if (!acceptEncoding) {\n    acceptEncoding = &#39;&#39;;\n  }\n\n  // Note: this is not a conformant accept-encoding parser.\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(/\\bdeflate\\b/)) {\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;deflate&#39; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;gzip&#39; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);\n</code></pre>\n<p>By default, the <code>zlib</code> methods with throw an error when decompressing\ntruncated data. However, if it is known that the data is incomplete, or\nthe desire is to inspect only the beginning of a compressed file, it is\npossible to suppress the default error handling by changing the flushing\nmethod that is used to compressed the last chunk of input data:</p>\n<pre><code class=\"lang-js\">// This is a truncated version of the buffer from the above examples\nconst buffer = Buffer.from(&#39;eJzT0yMA&#39;, &#39;base64&#39;);\n\nzlib.unzip(buffer, { finishFlush: zlib.Z_SYNC_FLUSH }, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</code></pre>\n<p>This will not change the behavior in other error-throwing situations, e.g.\nwhen the input data has an invalid format. Using this method, it will not be\npossible to determine whether the input ended prematurely or lacks the\nintegrity checks, making it necessary to manually check that the\ndecompressed result is valid.</p>\n<h2>Memory Usage Tuning<span><a class=\"mark\" href=\"#zlib_memory_usage_tuning\" id=\"zlib_memory_usage_tuning\">#</a></span></h2>\n<!--type=misc-->\n<p>From <code>zlib/zconf.h</code>, modified to node.js&#39;s usage:</p>\n<p>The memory requirements for deflate are (in bytes):</p>\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))\n</code></pre><p>That is: 128K for windowBits=15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.</p>\n<p>For example, to reduce the default memory requirements from 256K to 128K, the\noptions shoud be set to:</p>\n<pre><code>{ windowBits: 14, memLevel: 7 }\n</code></pre><p>This will, however, generally degrade compression.</p>\n<p>The memory requirements for inflate are (in bytes)</p>\n<pre><code>1 &lt;&lt; windowBits\n</code></pre><p>That is, 32K for windowBits=15 (default value) plus a few kilobytes\nfor small objects.</p>\n<p>This is in addition to a single internal output slab buffer of size\n<code>chunkSize</code>, which defaults to 16K.</p>\n<p>The speed of <code>zlib</code> compression is affected most dramatically by the\n<code>level</code> setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.</p>\n<p>In general, greater memory usage options will mean that Node.js has to make\nfewer calls to <code>zlib</code> because it will be able to process more data on\neach <code>write</code> operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.</p>\n<h2>Flushing<span><a class=\"mark\" href=\"#zlib_flushing\" id=\"zlib_flushing\">#</a></span></h2>\n<p>Calling <a href=\"#zlib_zlib_flush_kind_callback\"><code>.flush()</code></a> on a compression stream will make <code>zlib</code> return as much\noutput as currently possible. This may come at the cost of degraded compression\nquality, but can be useful when data needs to be available as soon as possible.</p>\n<p>In the following example, <code>flush()</code> is used to write a compressed partial\nHTTP response to the client:</p>\n<pre><code class=\"lang-js\">const zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\n\nhttp.createServer((request, response) =&gt; {\n  // For the sake of simplicity, the Accept-Encoding checks are omitted.\n  response.writeHead(200, { &#39;content-encoding&#39;: &#39;gzip&#39; });\n  const output = zlib.createGzip();\n  output.pipe(response);\n\n  setInterval(() =&gt; {\n    output.write(`The current time is ${Date()}\\n`, () =&gt; {\n      // The data has been passed to zlib, but the compression algorithm may\n      // have decided to buffer the data for more efficient compression.\n      // Calling .flush() will make the data available as soon as the client\n      // is ready to receive it.\n      output.flush();\n    });\n  }, 1000);\n}).listen(1337);\n</code></pre>\n<h2>Constants<span><a class=\"mark\" href=\"#zlib_constants\" id=\"zlib_constants\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><!--type=misc-->\n<p>All of the constants defined in <code>zlib.h</code> are also defined on <code>require(&#39;zlib&#39;)</code>.\nIn the normal course of operations, it will not be necessary to use these \nconstants. They are documented so that their presence is not surprising. This \nsection is taken almost directly from the <a href=\"http://zlib.net/manual.html#Constants\">zlib documentation</a>.  See\n<a href=\"http://zlib.net/manual.html#Constants\">http://zlib.net/manual.html#Constants</a> for more details.</p>\n<p>Allowed flush values.</p>\n<ul>\n<li><code>zlib.Z_NO_FLUSH</code></li>\n<li><code>zlib.Z_PARTIAL_FLUSH</code></li>\n<li><code>zlib.Z_SYNC_FLUSH</code></li>\n<li><code>zlib.Z_FULL_FLUSH</code></li>\n<li><code>zlib.Z_FINISH</code></li>\n<li><code>zlib.Z_BLOCK</code></li>\n<li><code>zlib.Z_TREES</code></li>\n</ul>\n<p>Return codes for the compression/decompression functions. Negative\nvalues are errors, positive values are used for special but normal\nevents.</p>\n<ul>\n<li><code>zlib.Z_OK</code></li>\n<li><code>zlib.Z_STREAM_END</code></li>\n<li><code>zlib.Z_NEED_DICT</code></li>\n<li><code>zlib.Z_ERRNO</code></li>\n<li><code>zlib.Z_STREAM_ERROR</code></li>\n<li><code>zlib.Z_DATA_ERROR</code></li>\n<li><code>zlib.Z_MEM_ERROR</code></li>\n<li><code>zlib.Z_BUF_ERROR</code></li>\n<li><code>zlib.Z_VERSION_ERROR</code></li>\n</ul>\n<p>Compression levels.</p>\n<ul>\n<li><code>zlib.Z_NO_COMPRESSION</code></li>\n<li><code>zlib.Z_BEST_SPEED</code></li>\n<li><code>zlib.Z_BEST_COMPRESSION</code></li>\n<li><code>zlib.Z_DEFAULT_COMPRESSION</code></li>\n</ul>\n<p>Compression strategy.</p>\n<ul>\n<li><code>zlib.Z_FILTERED</code></li>\n<li><code>zlib.Z_HUFFMAN_ONLY</code></li>\n<li><code>zlib.Z_RLE</code></li>\n<li><code>zlib.Z_FIXED</code></li>\n<li><code>zlib.Z_DEFAULT_STRATEGY</code></li>\n</ul>\n<p>Possible values of the data_type field.</p>\n<ul>\n<li><code>zlib.Z_BINARY</code></li>\n<li><code>zlib.Z_TEXT</code></li>\n<li><code>zlib.Z_ASCII</code></li>\n<li><code>zlib.Z_UNKNOWN</code></li>\n</ul>\n<p>The deflate compression method (the only one supported in this version).</p>\n<ul>\n<li><code>zlib.Z_DEFLATED</code></li>\n</ul>\n<p>For initializing zalloc, zfree, opaque.</p>\n<ul>\n<li><code>zlib.Z_NULL</code></li>\n</ul>\n<h2>Class Options<span><a class=\"mark\" href=\"#zlib_class_options\" id=\"zlib_class_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.1</span>\n</div><!--type=misc-->\n<p>Each class takes an <code>options</code> object.  All options are optional.</p>\n<p>Note that some options are only relevant when compressing, and are\nignored by the decompression classes.</p>\n<ul>\n<li><code>flush</code> (default: <code>zlib.Z_NO_FLUSH</code>)</li>\n<li><code>finishFlush</code> (default: <code>zlib.Z_FINISH</code>)</li>\n<li><code>chunkSize</code> (default: 16*1024)</li>\n<li><code>windowBits</code></li>\n<li><code>level</code> (compression only)</li>\n<li><code>memLevel</code> (compression only)</li>\n<li><code>strategy</code> (compression only)</li>\n<li><code>dictionary</code> (deflate/inflate only, empty dictionary by default)</li>\n</ul>\n<p>See the description of <code>deflateInit2</code> and <code>inflateInit2</code> at\n<a href=\"http://zlib.net/manual.html#Advanced\">http://zlib.net/manual.html#Advanced</a> for more information on these.</p>\n<h2>Class: zlib.Deflate<span><a class=\"mark\" href=\"#zlib_class_zlib_deflate\" id=\"zlib_class_zlib_deflate\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Compress data using deflate.</p>\n<h2>Class: zlib.DeflateRaw<span><a class=\"mark\" href=\"#zlib_class_zlib_deflateraw\" id=\"zlib_class_zlib_deflateraw\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Compress data using deflate, and do not append a <code>zlib</code> header.</p>\n<h2>Class: zlib.Gunzip<span><a class=\"mark\" href=\"#zlib_class_zlib_gunzip\" id=\"zlib_class_zlib_gunzip\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Decompress a gzip stream.</p>\n<h2>Class: zlib.Gzip<span><a class=\"mark\" href=\"#zlib_class_zlib_gzip\" id=\"zlib_class_zlib_gzip\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Compress data using gzip.</p>\n<h2>Class: zlib.Inflate<span><a class=\"mark\" href=\"#zlib_class_zlib_inflate\" id=\"zlib_class_zlib_inflate\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Decompress a deflate stream.</p>\n<h2>Class: zlib.InflateRaw<span><a class=\"mark\" href=\"#zlib_class_zlib_inflateraw\" id=\"zlib_class_zlib_inflateraw\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Decompress a raw deflate stream.</p>\n<h2>Class: zlib.Unzip<span><a class=\"mark\" href=\"#zlib_class_zlib_unzip\" id=\"zlib_class_zlib_unzip\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.</p>\n<h2>Class: zlib.Zlib<span><a class=\"mark\" href=\"#zlib_class_zlib_zlib\" id=\"zlib_class_zlib_zlib\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Not exported by the <code>zlib</code> module. It is documented here because it is the base\nclass of the compressor/decompressor classes.</p>\n<h3>zlib.flush([kind], callback)<span><a class=\"mark\" href=\"#zlib_zlib_flush_kind_callback\" id=\"zlib_zlib_flush_kind_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p><code>kind</code> defaults to <code>zlib.Z_FULL_FLUSH</code>.</p>\n<p>Flush pending data. Don&#39;t call this frivolously, premature flushes negatively\nimpact the effectiveness of the compression algorithm.</p>\n<p>Calling this only flushes data from the internal <code>zlib</code> state, and does not\nperform flushing of any kind on the streams level. Rather, it behaves like a\nnormal call to <code>.write()</code>, i.e. it will be queued up behind other pending\nwrites and will only produce output when data is being read from the stream.</p>\n<h3>zlib.params(level, strategy, callback)<span><a class=\"mark\" href=\"#zlib_zlib_params_level_strategy_callback\" id=\"zlib_zlib_params_level_strategy_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.4</span>\n</div><p>Dynamically update the compression level and compression strategy.\nOnly applicable to deflate algorithm.</p>\n<h3>zlib.reset()<span><a class=\"mark\" href=\"#zlib_zlib_reset\" id=\"zlib_zlib_reset\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.7.0</span>\n</div><p>Reset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.</p>\n<h2>zlib.createDeflate(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_createdeflate_options\" id=\"zlib_zlib_createdeflate_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_deflate\">Deflate</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createDeflateRaw(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_createdeflateraw_options\" id=\"zlib_zlib_createdeflateraw_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_deflateraw\">DeflateRaw</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createGunzip(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_creategunzip_options\" id=\"zlib_zlib_creategunzip_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_gunzip\">Gunzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createGzip(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_creategzip_options\" id=\"zlib_zlib_creategzip_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_gzip\">Gzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createInflate(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_createinflate_options\" id=\"zlib_zlib_createinflate_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_inflate\">Inflate</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createInflateRaw(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_createinflateraw_options\" id=\"zlib_zlib_createinflateraw_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_inflateraw\">InflateRaw</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>zlib.createUnzip(<a href=\"#zlib_class_options\">options</a>)<span><a class=\"mark\" href=\"#zlib_zlib_createunzip_options\" id=\"zlib_zlib_createunzip_options\">#</a></span></h2>\n<div class=\"api_metadata\">\n<span>Added in: v0.5.8</span>\n</div><p>Returns a new <a href=\"#zlib_class_zlib_unzip\">Unzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p>\n<h2>Convenience Methods<span><a class=\"mark\" href=\"#zlib_convenience_methods\" id=\"zlib_convenience_methods\">#</a></span></h2>\n<!--type=misc-->\n<p>All of these take a <a href=\"buffer.html\">Buffer</a> or string as the first argument, an optional \nsecond argument to supply options to the <code>zlib</code> classes and will call the \nsupplied callback with <code>callback(error, result)</code>.</p>\n<p>Every method has a <code>*Sync</code> counterpart, which accept the same arguments, but\nwithout a callback.</p>\n<h3>zlib.deflate(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_deflate_buf_options_callback\" id=\"zlib_zlib_deflate_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.deflateSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_deflatesync_buf_options\" id=\"zlib_zlib_deflatesync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Compress a Buffer or string with Deflate.</p>\n<h3>zlib.deflateRaw(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_deflateraw_buf_options_callback\" id=\"zlib_zlib_deflateraw_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.deflateRawSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_deflaterawsync_buf_options\" id=\"zlib_zlib_deflaterawsync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Compress a Buffer or string with DeflateRaw.</p>\n<h3>zlib.gunzip(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_gunzip_buf_options_callback\" id=\"zlib_zlib_gunzip_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.gunzipSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_gunzipsync_buf_options\" id=\"zlib_zlib_gunzipsync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Decompress a Buffer or string with Gunzip.</p>\n<h3>zlib.gzip(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_gzip_buf_options_callback\" id=\"zlib_zlib_gzip_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.gzipSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_gzipsync_buf_options\" id=\"zlib_zlib_gzipsync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Compress a Buffer or string with Gzip.</p>\n<h3>zlib.inflate(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_inflate_buf_options_callback\" id=\"zlib_zlib_inflate_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.inflateSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_inflatesync_buf_options\" id=\"zlib_zlib_inflatesync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Decompress a Buffer or string with Inflate.</p>\n<h3>zlib.inflateRaw(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_inflateraw_buf_options_callback\" id=\"zlib_zlib_inflateraw_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.inflateRawSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_inflaterawsync_buf_options\" id=\"zlib_zlib_inflaterawsync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Decompress a Buffer or string with InflateRaw.</p>\n<h3>zlib.unzip(buf[, options], callback)<span><a class=\"mark\" href=\"#zlib_zlib_unzip_buf_options_callback\" id=\"zlib_zlib_unzip_buf_options_callback\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.6.0</span>\n</div><h3>zlib.unzipSync(buf[, options])<span><a class=\"mark\" href=\"#zlib_zlib_unzipsync_buf_options\" id=\"zlib_zlib_unzipsync_buf_options\">#</a></span></h3>\n<div class=\"api_metadata\">\n<span>Added in: v0.11.12</span>\n</div><p>Decompress a Buffer or string with Unzip.</p>\n<!-- [end-include:zlib.md] -->\n\n      </div>\n    </div>\n  </div>\n  <script src=\"assets/sh_main.js\"></script>\n  <script src=\"assets/sh_javascript.min.js\"></script>\n  <script>highlight(undefined, undefined, 'pre');</script>\n</body>\n</html>\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/api/modules.md": "# Modules\n\n    Stability: 3 - Locked\n\n<!--name=module-->\n\nNode.js has a simple module loading system.  In Node.js, files and modules are\nin one-to-one correspondence.  As an example, `foo.js` loads the module\n`circle.js` in the same directory.\n\nThe contents of `foo.js`:\n\n```js\nconst circle = require('./circle.js');\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n```\n\nThe contents of `circle.js`:\n\n```js\nconst PI = Math.PI;\n\nexports.area = (r) => PI * r * r;\n\nexports.circumference = (r) => 2 * PI * r;\n\n```\n\nThe module `circle.js` has exported the functions `area()` and\n`circumference()`.  To add functions and objects to the root of your module,\nyou can add them to the special `exports` object.\n\nVariables local to the module will be private, because the module is wrapped\nin a function by Node.js (see [module wrapper](#modules_the_module_wrapper)).\nIn this example, the variable `PI` is private to `circle.js`.\n\nIf you want the root of your module's export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to `module.exports`\ninstead of `exports`.\n\nBelow, `bar.js` makes use of the `square` module, which exports a constructor:\n\n```js\nconst square = require('./square.js');\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n```\n\nThe `square` module is defined in `square.js`:\n\n```js\n// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) => {\n  return {\n    area: () => width * width\n  };\n}\n```\n\nThe module system is implemented in the `require(\"module\")` module.\n\n## Accessing the main module\n\n<!-- type=misc -->\n\nWhen a file is run directly from Node.js, `require.main` is set to its\n`module`. That means that you can determine whether a file has been run\ndirectly by testing\n\n```js\nrequire.main === module\n```\n\nFor a file `foo.js`, this will be `true` if run via `node foo.js`, but\n`false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to\n`__filename`), the entry point of the current application can be obtained\nby checking `require.main.filename`.\n\n## Addenda: Package Manager Tips\n\n<!-- type=misc -->\n\nThe semantics of Node.js's `require()` function were designed to be general\nenough to support a number of reasonable directory structures. Package manager\nprograms such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to\nbuild native packages from Node.js modules without modification.\n\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at\n`/usr/lib/node/<some-package>/<some-version>` hold the contents of a\nspecific version of a package.\n\nPackages can depend on one another. In order to install package `foo`, you\nmay have to install a specific version of package `bar`.  The `bar` package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.\n\nSince Node.js looks up the `realpath` of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the `node_modules`\nfolders as described [here](#modules_loading_from_node_modules_folders), this\nsituation is very simple to resolve with the following architecture:\n\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo`\n  depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to\n  `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages\n  that `bar` depends on.\n\nThus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it will get the\nversion that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`.\nThen, when the code in the `bar` package calls `require('quux')`, it'll get\nthe version that is symlinked into\n`/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in `/usr/lib/node`, we could put them in\n`/usr/lib/node_modules/<name>/<version>`.  Then Node.js will not bother\nlooking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the Node.js REPL, it might be useful to\nalso add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment\nvariable.  Since the module lookups using `node_modules` folders are all\nrelative, and based on the real path of the files making the calls to\n`require()`, the packages themselves can be anywhere.\n\n## All Together...\n\n<!-- type=misc -->\n\nTo get the exact filename that will be loaded when `require()` is called, use\nthe `require.resolve()` function.\n\nPutting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:\n\n```\nrequire(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with './' or '/' or '../'\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW \"not found\"\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for \"main\" field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n4. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I >= 0,\n   a. if PARTS[I] = \"node_modules\" CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n5. return DIRS\n```\n\n## Caching\n\n<!--type=misc-->\n\nModules are cached after the first time they are loaded.  This means\n(among other things) that every call to `require('foo')` will get\nexactly the same object returned, if it would resolve to the same file.\n\nMultiple calls to `require('foo')` may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n\"partially done\" objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.\n\nIf you want to have a module execute code multiple times, then export a\nfunction, and call that function.\n\n### Module Caching Caveats\n\n<!--type=misc-->\n\nModules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from `node_modules` folders), it is not a *guarantee*\nthat `require('foo')` will always return the exact same object, if it\nwould resolve to different files.\n\nAdditionally, on case-insensitive file systems or operating systems, different\nresolved filenames can point to the same file, but the cache will still treat\nthem as different modules and will reload the file multiple times. For example,\n`require('./foo')` and `require('./FOO')` return two different objects,\nirrespective of whether or not `./foo` and `./FOO` are the same file.\n\n## Core Modules\n\n<!--type=misc-->\n\nNode.js has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.\n\nThe core modules are defined within Node.js's source and are located in the\n`lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is\npassed to `require()`.  For instance, `require('http')` will always\nreturn the built in HTTP module, even if there is a file by that name.\n\n## Cycles\n\n<!--type=misc-->\n\nWhen there are circular `require()` calls, a module might not have finished\nexecuting when it is returned.\n\nConsider this situation:\n\n`a.js`:\n\n```\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n```\n\n`b.js`:\n\n```\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n```\n\n`main.js`:\n\n```\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`.  At that\npoint, `b.js` tries to load `a.js`.  In order to prevent an infinite\nloop, an **unfinished copy** of the `a.js` exports object is returned to the\n`b.js` module.  `b.js` then finishes loading, and its `exports` object is\nprovided to the `a.js` module.\n\nBy the time `main.js` has loaded both modules, they're both finished.\nThe output of this program would thus be:\n\n```\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true\n```\n\nIf you have cyclic module dependencies in your program, make sure to\nplan accordingly.\n\n## File Modules\n\n<!--type=misc-->\n\nIf the exact filename is not found, then Node.js will attempt to load the\nrequired filename with the added extensions: `.js`, `.json`, and finally\n`.node`.\n\n`.js` files are interpreted as JavaScript text files, and `.json` files are\nparsed as JSON text files. `.node` files are interpreted as compiled addon\nmodules loaded with `dlopen`.\n\nA required module prefixed with `'/'` is an absolute path to the file.  For\nexample, `require('/home/marco/foo.js')` will load the file at\n`/home/marco/foo.js`.\n\nA required module prefixed with `'./'` is relative to the file calling\n`require()`. That is, `circle.js` must be in the same directory as `foo.js` for\n`require('./circle')` to find it.\n\nWithout a leading '/', './', or '../' to indicate a file, the module must\neither be a core module or is loaded from a `node_modules` folder.\n\nIf the given path does not exist, `require()` will throw an [`Error`][] with its\n`code` property set to `'MODULE_NOT_FOUND'`.\n\n## Folders as Modules\n\n<!--type=misc-->\n\nIt is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to `require()` as\nan argument.\n\nThe first is to create a `package.json` file in the root of the folder,\nwhich specifies a `main` module.  An example package.json file might\nlook like this:\n\n```\n{ \"name\" : \"some-library\",\n  \"main\" : \"./lib/some-library.js\" }\n```\n\nIf this was in a folder at `./some-library`, then\n`require('./some-library')` would attempt to load\n`./some-library/lib/some-library.js`.\n\nThis is the extent of Node.js's awareness of package.json files.\n\nNote: If the file specified by the `\"main\"` entry of `package.json` is missing\nand can not be resolved, Node.js will report the entire module as missing with\nthe default error:\n\n```\nError: Cannot find module 'some-library'\n```\n\nIf there is no package.json file present in the directory, then Node.js\nwill attempt to load an `index.js` or `index.node` file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then `require('./some-library')` would attempt to load:\n\n* `./some-library/index.js`\n* `./some-library/index.node`\n\n## Loading from `node_modules` Folders\n\n<!--type=misc-->\n\nIf the module identifier passed to `require()` is not a native module,\nand does not begin with `'/'`, `'../'`, or `'./'`, then Node.js starts at the\nparent directory of the current module, and adds `/node_modules`, and\nattempts to load the module from that location. Node will not append\n`node_modules` to a path already ending in `node_modules`.\n\nIf it is not found there, then it moves to the parent directory, and so\non, until the root of the file system is reached.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` called\n`require('bar.js')`, then Node.js would look in the following locations, in\nthis order:\n\n* `/home/ry/projects/node_modules/bar.js`\n* `/home/ry/node_modules/bar.js`\n* `/home/node_modules/bar.js`\n* `/node_modules/bar.js`\n\nThis allows programs to localize their dependencies, so that they do not\nclash.\n\nYou can require specific files or sub modules distributed with a module by\nincluding a path suffix after the module name. For instance\n`require('example-module/path/to/file')` would resolve `path/to/file`\nrelative to where `example-module` is located. The suffixed path follows the\nsame module resolution semantics.\n\n## Loading from the global folders\n\n<!-- type=misc -->\n\nIf the `NODE_PATH` environment variable is set to a colon-delimited list\nof absolute paths, then Node.js will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, `NODE_PATH` is delimited by\nsemicolons instead of colons.)\n\n`NODE_PATH` was originally created to support loading modules from\nvarying paths before the current [module resolution][] algorithm was frozen.\n\n`NODE_PATH` is still supported, but is less necessary now that the Node.js\necosystem has settled on a convention for locating dependent modules.\nSometimes deployments that rely on `NODE_PATH` show surprising behavior\nwhen people are unaware that `NODE_PATH` must be set.  Sometimes a\nmodule's dependencies change, causing a different version (or even a\ndifferent module) to be loaded as the `NODE_PATH` is searched.\n\nAdditionally, Node.js will search in the following locations:\n\n* 1: `$HOME/.node_modules`\n* 2: `$HOME/.node_libraries`\n* 3: `$PREFIX/lib/node`\n\nWhere `$HOME` is the user's home directory, and `$PREFIX` is Node.js's\nconfigured `node_prefix`.\n\nThese are mostly for historic reasons.  **You are highly encouraged\nto place your dependencies locally in `node_modules` folders.**  They\nwill be loaded faster, and more reliably.\n\n## The module wrapper\n\n<!-- type=misc -->\n\nBefore a module's code is executed, Node.js will wrap it with a function\nwrapper that looks like the following:\n\n```js\n(function (exports, require, module, __filename, __dirname) {\n// Your module code actually lives in here\n});\n```\n\nBy doing this, Node.js achieves a few things:\n\n- It keeps top-level variables (defined with `var`, `const` or `let`) scoped to\nthe module rather than the global object.\n- It helps to provide some global-looking variables that are actually specific\nto the module, such as:\n  - The `module` and `exports` objects that the implementor can use to export\n  values from the module.\n  - The convenience variables `__filename` and `__dirname`, containing the\n  module's absolute filename and directory path.\n\n## The `module` Object\n\n<!-- type=var -->\n<!-- name=module -->\n\n* {Object}\n\nIn each module, the `module` free variable is a reference to the object\nrepresenting the current module.  For convenience, `module.exports` is\nalso accessible via the `exports` module-global. `module` isn't actually\na global but rather local to each module.\n\n### module.children\n\n* {Array}\n\nThe module objects required by this one.\n\n### module.exports\n\n* {Object}\n\nThe `module.exports` object is created by the Module system. Sometimes this is\nnot acceptable; many want their module to be an instance of some class. To do\nthis, assign the desired export object to `module.exports`. Note that assigning\nthe desired object to `exports` will simply rebind the local `exports` variable,\nwhich is probably not what you want to do.\n\nFor example suppose we were making a module called `a.js`\n\n```js\nconst EventEmitter = require('events');\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the 'ready' event from the module itself.\nsetTimeout(() => {\n  module.exports.emit('ready');\n}, 1000);\n```\n\nThen in another file we could do\n\n```js\nconst a = require('./a');\na.on('ready', () => {\n  console.log('module a is ready');\n});\n```\n\n\nNote that assignment to `module.exports` must be done immediately. It cannot be\ndone in any callbacks.  This does not work:\n\nx.js:\n\n```js\nsetTimeout(() => {\n  module.exports = { a: 'hello' };\n}, 0);\n```\n\ny.js:\n\n```js\nconst x = require('./x');\nconsole.log(x.a);\n```\n\n#### exports alias\n\nThe `exports` variable that is available within a module starts as a reference\nto `module.exports`. As with any variable, if you assign a new value to it, it\nis no longer bound to the previous value.\n\nTo illustrate the behavior, imagine this hypothetical implementation of\n`require()`:\n\n```js\nfunction require(...) {\n  // ...\n  ((module, exports) => {\n    // Your module code here\n    exports = some_func;        // re-assigns exports, exports is no longer\n                                // a shortcut, and nothing is exported.\n    module.exports = some_func; // makes your module export 0\n  })(module, module.exports);\n  return module;\n}\n```\n\nAs a guideline, if the relationship between `exports` and `module.exports`\nseems like magic to you, ignore `exports` and only use `module.exports`.\n\n### module.filename\n\n* {String}\n\nThe fully resolved filename to the module.\n\n### module.id\n\n* {String}\n\nThe identifier for the module.  Typically this is the fully resolved\nfilename.\n\n### module.loaded\n\n* {Boolean}\n\nWhether or not the module is done loading, or is in the process of\nloading.\n\n### module.parent\n\n* {Object} Module object\n\nThe module that first required this one.\n\n### module.require(id)\n\n* `id` {String}\n* Return: {Object} `module.exports` from the resolved module\n\nThe `module.require` method provides a way to load a module as if\n`require()` was called from the original module.\n\nNote that in order to do this, you must get a reference to the `module`\nobject.  Since `require()` returns the `module.exports`, and the `module` is\ntypically *only* available within a specific module's code, it must be\nexplicitly exported in order to be used.\n\n[`Error`]: errors.html#errors_class_error\n[module resolution]: #modules_all_together\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/api/modules.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Modules Node.js v6.2.2 Manual &amp; Documentation</title>\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato:400,700,400italic\">\n  <link rel=\"stylesheet\" href=\"assets/style.css\">\n  <link rel=\"stylesheet\" href=\"assets/sh.css\">\n  <link rel=\"canonical\" href=\"https://nodejs.org/api/modules.html\">\n</head>\n<body class=\"alt apidoc\" id=\"api-section-modules\">\n  <div id=\"content\" class=\"clearfix\">\n    <div id=\"column2\" class=\"interior\">\n      <div id=\"intro\" class=\"interior\">\n        <a href=\"/\" title=\"Go back to the home page\">\n          Node.js\n        </a>\n      </div>\n      <ul>\n<li><a class=\"nav-documentation\" href=\"documentation.html\">About these Docs</a></li>\n<li><a class=\"nav-synopsis\" href=\"synopsis.html\">Usage &amp; Example</a></li>\n</ul>\n<div class=\"line\"></div>\n\n<ul>\n<li><a class=\"nav-assert\" href=\"assert.html\">Assertion Testing</a></li>\n<li><a class=\"nav-buffer\" href=\"buffer.html\">Buffer</a></li>\n<li><a class=\"nav-addons\" href=\"addons.html\">C/C++ Addons</a></li>\n<li><a class=\"nav-child_process\" href=\"child_process.html\">Child Processes</a></li>\n<li><a class=\"nav-cluster\" href=\"cluster.html\">Cluster</a></li>\n<li><a class=\"nav-cli\" href=\"cli.html\">Command Line Options</a></li>\n<li><a class=\"nav-console\" href=\"console.html\">Console</a></li>\n<li><a class=\"nav-crypto\" href=\"crypto.html\">Crypto</a></li>\n<li><a class=\"nav-debugger\" href=\"debugger.html\">Debugger</a></li>\n<li><a class=\"nav-dns\" href=\"dns.html\">DNS</a></li>\n<li><a class=\"nav-domain\" href=\"domain.html\">Domain</a></li>\n<li><a class=\"nav-errors\" href=\"errors.html\">Errors</a></li>\n<li><a class=\"nav-events\" href=\"events.html\">Events</a></li>\n<li><a class=\"nav-fs\" href=\"fs.html\">File System</a></li>\n<li><a class=\"nav-globals\" href=\"globals.html\">Globals</a></li>\n<li><a class=\"nav-http\" href=\"http.html\">HTTP</a></li>\n<li><a class=\"nav-https\" href=\"https.html\">HTTPS</a></li>\n<li><a class=\"nav-modules active\" href=\"modules.html\">Modules</a></li>\n<li><a class=\"nav-net\" href=\"net.html\">Net</a></li>\n<li><a class=\"nav-os\" href=\"os.html\">OS</a></li>\n<li><a class=\"nav-path\" href=\"path.html\">Path</a></li>\n<li><a class=\"nav-process\" href=\"process.html\">Process</a></li>\n<li><a class=\"nav-punycode\" href=\"punycode.html\">Punycode</a></li>\n<li><a class=\"nav-querystring\" href=\"querystring.html\">Query Strings</a></li>\n<li><a class=\"nav-readline\" href=\"readline.html\">Readline</a></li>\n<li><a class=\"nav-repl\" href=\"repl.html\">REPL</a></li>\n<li><a class=\"nav-stream\" href=\"stream.html\">Stream</a></li>\n<li><a class=\"nav-string_decoder\" href=\"string_decoder.html\">String Decoder</a></li>\n<li><a class=\"nav-timers\" href=\"timers.html\">Timers</a></li>\n<li><a class=\"nav-tls\" href=\"tls.html\">TLS/SSL</a></li>\n<li><a class=\"nav-tty\" href=\"tty.html\">TTY</a></li>\n<li><a class=\"nav-dgram\" href=\"dgram.html\">UDP/Datagram</a></li>\n<li><a class=\"nav-url\" href=\"url.html\">URL</a></li>\n<li><a class=\"nav-util\" href=\"util.html\">Utilities</a></li>\n<li><a class=\"nav-v8\" href=\"v8.html\">V8</a></li>\n<li><a class=\"nav-vm\" href=\"vm.html\">VM</a></li>\n<li><a class=\"nav-zlib\" href=\"zlib.html\">ZLIB</a></li>\n</ul>\n<div class=\"line\"></div>\n\n<ul>\n<li><a class=\"nav-https-github-com-nodejs-node\" href=\"https://github.com/nodejs/node\">GitHub Repo &amp; Issue Tracker</a></li>\n<li><a class=\"nav-http-groups-google-com-group-nodejs\" href=\"http://groups.google.com/group/nodejs\">Mailing List</a></li>\n</ul>\n\n    </div>\n\n    <div id=\"column1\" data-id=\"modules\" class=\"interior\">\n      <header>\n        <h1>Node.js v6.2.2 Documentation</h1>\n        <div id=\"gtoc\">\n          <p>\n            <a href=\"index.html\" name=\"toc\">Index</a> |\n            <a href=\"all.html\">View on single page</a> |\n            <a href=\"modules.json\">View as JSON</a>\n          </p>\n        </div>\n        <hr>\n      </header>\n\n      <div id=\"toc\">\n        <h2>Table of Contents</h2>\n        <ul>\n<li><a href=\"#modules_modules\">Modules</a><ul>\n<li><a href=\"#modules_accessing_the_main_module\">Accessing the main module</a></li>\n<li><a href=\"#modules_addenda_package_manager_tips\">Addenda: Package Manager Tips</a></li>\n<li><a href=\"#modules_all_together\">All Together...</a></li>\n<li><a href=\"#modules_caching\">Caching</a><ul>\n<li><a href=\"#modules_module_caching_caveats\">Module Caching Caveats</a></li>\n</ul>\n</li>\n<li><a href=\"#modules_core_modules\">Core Modules</a></li>\n<li><a href=\"#modules_cycles\">Cycles</a></li>\n<li><a href=\"#modules_file_modules\">File Modules</a></li>\n<li><a href=\"#modules_folders_as_modules\">Folders as Modules</a></li>\n<li><a href=\"#modules_loading_from_node_modules_folders\">Loading from <code>node_modules</code> Folders</a></li>\n<li><a href=\"#modules_loading_from_the_global_folders\">Loading from the global folders</a></li>\n<li><a href=\"#modules_the_module_wrapper\">The module wrapper</a></li>\n<li><a href=\"#modules_the_module_object\">The <code>module</code> Object</a><ul>\n<li><a href=\"#modules_module_children\">module.children</a></li>\n<li><a href=\"#modules_module_exports\">module.exports</a><ul>\n<li><a href=\"#modules_exports_alias\">exports alias</a></li>\n</ul>\n</li>\n<li><a href=\"#modules_module_filename\">module.filename</a></li>\n<li><a href=\"#modules_module_id\">module.id</a></li>\n<li><a href=\"#modules_module_loaded\">module.loaded</a></li>\n<li><a href=\"#modules_module_parent\">module.parent</a></li>\n<li><a href=\"#modules_module_require_id\">module.require(id)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n      </div>\n\n      <div id=\"apicontent\">\n        <h1>Modules<span><a class=\"mark\" href=\"#modules_modules\" id=\"modules_modules\">#</a></span></h1>\n<pre class=\"api_stability api_stability_3\">Stability: 3 - Locked</pre><!--name=module-->\n<p>Node.js has a simple module loading system.  In Node.js, files and modules are\nin one-to-one correspondence.  As an example, <code>foo.js</code> loads the module\n<code>circle.js</code> in the same directory.</p>\n<p>The contents of <code>foo.js</code>:</p>\n<pre><code class=\"lang-js\">const circle = require(&#39;./circle.js&#39;);\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\n<p>The contents of <code>circle.js</code>:</p>\n<pre><code class=\"lang-js\">const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre>\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and\n<code>circumference()</code>.  To add functions and objects to the root of your module,\nyou can add them to the special <code>exports</code> object.</p>\n<p>Variables local to the module will be private, because the module is wrapped\nin a function by Node.js (see <a href=\"#modules_the_module_wrapper\">module wrapper</a>).\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\n<p>If you want the root of your module&#39;s export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to <code>module.exports</code>\ninstead of <code>exports</code>.</p>\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p>\n<pre><code class=\"lang-js\">const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</code></pre>\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\n<pre><code class=\"lang-js\">// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n</code></pre>\n<p>The module system is implemented in the <code>require(&quot;module&quot;)</code> module.</p>\n<h2>Accessing the main module<span><a class=\"mark\" href=\"#modules_accessing_the_main_module\" id=\"modules_accessing_the_main_module\">#</a></span></h2>\n<!-- type=misc -->\n<p>When a file is run directly from Node.js, <code>require.main</code> is set to its\n<code>module</code>. That means that you can determine whether a file has been run\ndirectly by testing</p>\n<pre><code class=\"lang-js\">require.main === module\n</code></pre>\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but\n<code>false</code> if run by <code>require(&#39;./foo&#39;)</code>.</p>\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to\n<code>__filename</code>), the entry point of the current application can be obtained\nby checking <code>require.main.filename</code>.</p>\n<h2>Addenda: Package Manager Tips<span><a class=\"mark\" href=\"#modules_addenda_package_manager_tips\" id=\"modules_addenda_package_manager_tips\">#</a></span></h2>\n<!-- type=misc -->\n<p>The semantics of Node.js&#39;s <code>require()</code> function were designed to be general\nenough to support a number of reasonable directory structures. Package manager\nprograms such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to\nbuild native packages from Node.js modules without modification.</p>\n<p>Below we give a suggested directory structure that could work:</p>\n<p>Let&#39;s say that we wanted to have the folder at\n<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a\nspecific version of a package.</p>\n<p>Packages can depend on one another. In order to install package <code>foo</code>, you\nmay have to install a specific version of package <code>bar</code>.  The <code>bar</code> package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.</p>\n<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the <code>node_modules</code>\nfolders as described <a href=\"#modules_loading_from_node_modules_folders\">here</a>, this\nsituation is very simple to resolve with the following architecture:</p>\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>\ndepends on.</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to\n<code>/usr/lib/node/bar/4.3.2/</code>.</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages\nthat <code>bar</code> depends on.</li>\n</ul>\n<p>Thus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.</p>\n<p>When the code in the <code>foo</code> package does <code>require(&#39;bar&#39;)</code>, it will get the\nversion that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.\nThen, when the code in the <code>bar</code> package calls <code>require(&#39;quux&#39;)</code>, it&#39;ll get\nthe version that is symlinked into\n<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\n<p>Furthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in <code>/usr/lib/node</code>, we could put them in\n<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>.  Then Node.js will not bother\nlooking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\n<p>In order to make modules available to the Node.js REPL, it might be useful to\nalso add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment\nvariable.  Since the module lookups using <code>node_modules</code> folders are all\nrelative, and based on the real path of the files making the calls to\n<code>require()</code>, the packages themselves can be anywhere.</p>\n<h2>All Together...<span><a class=\"mark\" href=\"#modules_all_together\" id=\"modules_all_together\">#</a></span></h2>\n<!-- type=misc -->\n<p>To get the exact filename that will be loaded when <code>require()</code> is called, use\nthe <code>require.resolve()</code> function.</p>\n<p>Putting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:</p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &#39;./&#39; or &#39;/&#39; or &#39;../&#39;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n4. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I &gt;= 0,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n5. return DIRS\n</code></pre><h2>Caching<span><a class=\"mark\" href=\"#modules_caching\" id=\"modules_caching\">#</a></span></h2>\n<!--type=misc-->\n<p>Modules are cached after the first time they are loaded.  This means\n(among other things) that every call to <code>require(&#39;foo&#39;)</code> will get\nexactly the same object returned, if it would resolve to the same file.</p>\n<p>Multiple calls to <code>require(&#39;foo&#39;)</code> may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n&quot;partially done&quot; objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.</p>\n<p>If you want to have a module execute code multiple times, then export a\nfunction, and call that function.</p>\n<h3>Module Caching Caveats<span><a class=\"mark\" href=\"#modules_module_caching_caveats\" id=\"modules_module_caching_caveats\">#</a></span></h3>\n<!--type=misc-->\n<p>Modules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>\nthat <code>require(&#39;foo&#39;)</code> will always return the exact same object, if it\nwould resolve to different files.</p>\n<p>Additionally, on case-insensitive file systems or operating systems, different\nresolved filenames can point to the same file, but the cache will still treat\nthem as different modules and will reload the file multiple times. For example,\n<code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects,\nirrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h2>Core Modules<span><a class=\"mark\" href=\"#modules_core_modules\" id=\"modules_core_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>Node.js has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.</p>\n<p>The core modules are defined within Node.js&#39;s source and are located in the\n<code>lib/</code> folder.</p>\n<p>Core modules are always preferentially loaded if their identifier is\npassed to <code>require()</code>.  For instance, <code>require(&#39;http&#39;)</code> will always\nreturn the built in HTTP module, even if there is a file by that name.</p>\n<h2>Cycles<span><a class=\"mark\" href=\"#modules_cycles\" id=\"modules_cycles\">#</a></span></h2>\n<!--type=misc-->\n<p>When there are circular <code>require()</code> calls, a module might not have finished\nexecuting when it is returned.</p>\n<p>Consider this situation:</p>\n<p><code>a.js</code>:</p>\n<pre><code>console.log(&#39;a starting&#39;);\nexports.done = false;\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\nexports.done = true;\nconsole.log(&#39;a done&#39;);\n</code></pre><p><code>b.js</code>:</p>\n<pre><code>console.log(&#39;b starting&#39;);\nexports.done = false;\nconst a = require(&#39;./a.js&#39;);\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\nexports.done = true;\nconsole.log(&#39;b done&#39;);\n</code></pre><p><code>main.js</code>:</p>\n<pre><code>console.log(&#39;main starting&#39;);\nconst a = require(&#39;./a.js&#39;);\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in main, a.done=%j, b.done=%j&#39;, a.done, b.done);\n</code></pre><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>.  At that\npoint, <code>b.js</code> tries to load <code>a.js</code>.  In order to prevent an infinite\nloop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the\n<code>b.js</code> module.  <code>b.js</code> then finishes loading, and its <code>exports</code> object is\nprovided to the <code>a.js</code> module.</p>\n<p>By the time <code>main.js</code> has loaded both modules, they&#39;re both finished.\nThe output of this program would thus be:</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true\n</code></pre><p>If you have cyclic module dependencies in your program, make sure to\nplan accordingly.</p>\n<h2>File Modules<span><a class=\"mark\" href=\"#modules_file_modules\" id=\"modules_file_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>If the exact filename is not found, then Node.js will attempt to load the\nrequired filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally\n<code>.node</code>.</p>\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are\nparsed as JSON text files. <code>.node</code> files are interpreted as compiled addon\nmodules loaded with <code>dlopen</code>.</p>\n<p>A required module prefixed with <code>&#39;/&#39;</code> is an absolute path to the file.  For\nexample, <code>require(&#39;/home/marco/foo.js&#39;)</code> will load the file at\n<code>/home/marco/foo.js</code>.</p>\n<p>A required module prefixed with <code>&#39;./&#39;</code> is relative to the file calling\n<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for\n<code>require(&#39;./circle&#39;)</code> to find it.</p>\n<p>Without a leading &#39;/&#39;, &#39;./&#39;, or &#39;../&#39; to indicate a file, the module must\neither be a core module or is loaded from a <code>node_modules</code> folder.</p>\n<p>If the given path does not exist, <code>require()</code> will throw an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> with its\n<code>code</code> property set to <code>&#39;MODULE_NOT_FOUND&#39;</code>.</p>\n<h2>Folders as Modules<span><a class=\"mark\" href=\"#modules_folders_as_modules\" id=\"modules_folders_as_modules\">#</a></span></h2>\n<!--type=misc-->\n<p>It is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to <code>require()</code> as\nan argument.</p>\n<p>The first is to create a <code>package.json</code> file in the root of the folder,\nwhich specifies a <code>main</code> module.  An example package.json file might\nlook like this:</p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\n</code></pre><p>If this was in a folder at <code>./some-library</code>, then\n<code>require(&#39;./some-library&#39;)</code> would attempt to load\n<code>./some-library/lib/some-library.js</code>.</p>\n<p>This is the extent of Node.js&#39;s awareness of package.json files.</p>\n<p>Note: If the file specified by the <code>&quot;main&quot;</code> entry of <code>package.json</code> is missing\nand can not be resolved, Node.js will report the entire module as missing with\nthe default error:</p>\n<pre><code>Error: Cannot find module &#39;some-library&#39;\n</code></pre><p>If there is no package.json file present in the directory, then Node.js\nwill attempt to load an <code>index.js</code> or <code>index.node</code> file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then <code>require(&#39;./some-library&#39;)</code> would attempt to load:</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n<h2>Loading from <code>node_modules</code> Folders<span><a class=\"mark\" href=\"#modules_loading_from_node_modules_folders\" id=\"modules_loading_from_node_modules_folders\">#</a></span></h2>\n<!--type=misc-->\n<p>If the module identifier passed to <code>require()</code> is not a native module,\nand does not begin with <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code>, or <code>&#39;./&#39;</code>, then Node.js starts at the\nparent directory of the current module, and adds <code>/node_modules</code>, and\nattempts to load the module from that location. Node will not append\n<code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\n<p>If it is not found there, then it moves to the parent directory, and so\non, until the root of the file system is reached.</p>\n<p>For example, if the file at <code>&#39;/home/ry/projects/foo.js&#39;</code> called\n<code>require(&#39;bar.js&#39;)</code>, then Node.js would look in the following locations, in\nthis order:</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<p>This allows programs to localize their dependencies, so that they do not\nclash.</p>\n<p>You can require specific files or sub modules distributed with a module by\nincluding a path suffix after the module name. For instance\n<code>require(&#39;example-module/path/to/file&#39;)</code> would resolve <code>path/to/file</code>\nrelative to where <code>example-module</code> is located. The suffixed path follows the\nsame module resolution semantics.</p>\n<h2>Loading from the global folders<span><a class=\"mark\" href=\"#modules_loading_from_the_global_folders\" id=\"modules_loading_from_the_global_folders\">#</a></span></h2>\n<!-- type=misc -->\n<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list\nof absolute paths, then Node.js will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, <code>NODE_PATH</code> is delimited by\nsemicolons instead of colons.)</p>\n<p><code>NODE_PATH</code> was originally created to support loading modules from\nvarying paths before the current <a href=\"#modules_all_together\">module resolution</a> algorithm was frozen.</p>\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js\necosystem has settled on a convention for locating dependent modules.\nSometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior\nwhen people are unaware that <code>NODE_PATH</code> must be set.  Sometimes a\nmodule&#39;s dependencies change, causing a different version (or even a\ndifferent module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\n<p>Additionally, Node.js will search in the following locations:</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<p>Where <code>$HOME</code> is the user&#39;s home directory, and <code>$PREFIX</code> is Node.js&#39;s\nconfigured <code>node_prefix</code>.</p>\n<p>These are mostly for historic reasons.  <strong>You are highly encouraged\nto place your dependencies locally in <code>node_modules</code> folders.</strong>  They\nwill be loaded faster, and more reliably.</p>\n<h2>The module wrapper<span><a class=\"mark\" href=\"#modules_the_module_wrapper\" id=\"modules_the_module_wrapper\">#</a></span></h2>\n<!-- type=misc -->\n<p>Before a module&#39;s code is executed, Node.js will wrap it with a function\nwrapper that looks like the following:</p>\n<pre><code class=\"lang-js\">(function (exports, require, module, __filename, __dirname) {\n// Your module code actually lives in here\n});\n</code></pre>\n<p>By doing this, Node.js achieves a few things:</p>\n<ul>\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to\nthe module rather than the global object.</li>\n<li>It helps to provide some global-looking variables that are actually specific\nto the module, such as:<ul>\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export\nvalues from the module.</li>\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the\nmodule&#39;s absolute filename and directory path.</li>\n</ul>\n</li>\n</ul>\n<h2>The <code>module</code> Object<span><a class=\"mark\" href=\"#modules_the_module_object\" id=\"modules_the_module_object\">#</a></span></h2>\n<!-- type=var -->\n<!-- name=module -->\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>In each module, the <code>module</code> free variable is a reference to the object\nrepresenting the current module.  For convenience, <code>module.exports</code> is\nalso accessible via the <code>exports</code> module-global. <code>module</code> isn&#39;t actually\na global but rather local to each module.</p>\n<h3>module.children<span><a class=\"mark\" href=\"#modules_module_children\" id=\"modules_module_children\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li>\n</ul>\n</div><p>The module objects required by this one.</p>\n<h3>module.exports<span><a class=\"mark\" href=\"#modules_module_exports\" id=\"modules_module_exports\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n</div><p>The <code>module.exports</code> object is created by the Module system. Sometimes this is\nnot acceptable; many want their module to be an instance of some class. To do\nthis, assign the desired export object to <code>module.exports</code>. Note that assigning\nthe desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,\nwhich is probably not what you want to do.</p>\n<p>For example suppose we were making a module called <code>a.js</code></p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &#39;ready&#39; event from the module itself.\nsetTimeout(() =&gt; {\n  module.exports.emit(&#39;ready&#39;);\n}, 1000);\n</code></pre>\n<p>Then in another file we could do</p>\n<pre><code class=\"lang-js\">const a = require(&#39;./a&#39;);\na.on(&#39;ready&#39;, () =&gt; {\n  console.log(&#39;module a is ready&#39;);\n});\n</code></pre>\n<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be\ndone in any callbacks.  This does not work:</p>\n<p>x.js:</p>\n<pre><code class=\"lang-js\">setTimeout(() =&gt; {\n  module.exports = { a: &#39;hello&#39; };\n}, 0);\n</code></pre>\n<p>y.js:</p>\n<pre><code class=\"lang-js\">const x = require(&#39;./x&#39;);\nconsole.log(x.a);\n</code></pre>\n<h4>exports alias<span><a class=\"mark\" href=\"#modules_exports_alias\" id=\"modules_exports_alias\">#</a></span></h4>\n<p>The <code>exports</code> variable that is available within a module starts as a reference\nto <code>module.exports</code>. As with any variable, if you assign a new value to it, it\nis no longer bound to the previous value.</p>\n<p>To illustrate the behavior, imagine this hypothetical implementation of\n<code>require()</code>:</p>\n<pre><code class=\"lang-js\">function require(...) {\n  // ...\n  ((module, exports) =&gt; {\n    // Your module code here\n    exports = some_func;        // re-assigns exports, exports is no longer\n                                // a shortcut, and nothing is exported.\n    module.exports = some_func; // makes your module export 0\n  })(module, module.exports);\n  return module;\n}\n</code></pre>\n<p>As a guideline, if the relationship between <code>exports</code> and <code>module.exports</code>\nseems like magic to you, ignore <code>exports</code> and only use <code>module.exports</code>.</p>\n<h3>module.filename<span><a class=\"mark\" href=\"#modules_module_filename\" id=\"modules_module_filename\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</div><p>The fully resolved filename to the module.</p>\n<h3>module.id<span><a class=\"mark\" href=\"#modules_module_id\" id=\"modules_module_id\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n</ul>\n</div><p>The identifier for the module.  Typically this is the fully resolved\nfilename.</p>\n<h3>module.loaded<span><a class=\"mark\" href=\"#modules_module_loaded\" id=\"modules_module_loaded\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;Boolean&gt;</a></li>\n</ul>\n</div><p>Whether or not the module is done loading, or is in the process of\nloading.</p>\n<h3>module.parent<span><a class=\"mark\" href=\"#modules_module_parent\" id=\"modules_module_parent\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Module object</li>\n</ul>\n</div><p>The module that first required this one.</p>\n<h3>module.require(id)<span><a class=\"mark\" href=\"#modules_module_require_id\" id=\"modules_module_require_id\">#</a></span></h3>\n<div class=\"signature\"><ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;String&gt;</a></li>\n<li>Return: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> <code>module.exports</code> from the resolved module</li>\n</ul>\n</div><p>The <code>module.require</code> method provides a way to load a module as if\n<code>require()</code> was called from the original module.</p>\n<p>Note that in order to do this, you must get a reference to the <code>module</code>\nobject.  Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is\ntypically <em>only</em> available within a specific module&#39;s code, it must be\nexplicitly exported in order to be used.</p>\n\n      </div>\n    </div>\n  </div>\n  <script src=\"assets/sh_main.js\"></script>\n  <script src=\"assets/sh_javascript.min.js\"></script>\n  <script>highlight(undefined, undefined, 'pre');</script>\n</body>\n</html>\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/api/all.json": "{\n  \"source\": \"doc/api/all.md\",\n  \"desc\": [\n    {\n      \"type\": \"html\",\n      \"pre\": false,\n      \"text\": \"<!-- [start-include:documentation.md] -->\\n\"\n    }\n  ],\n  \"miscs\": [\n    {\n      \"textRaw\": \"About this Documentation\",\n      \"name\": \"About this Documentation\",\n      \"type\": \"misc\",\n      \"desc\": \"<p>The goal of this documentation is to comprehensively explain the Node.js\\nAPI, both from a reference as well as a conceptual point of view.  Each\\nsection describes a built-in module or high-level concept.</p>\\n<p>Where appropriate, property types, method arguments, and the arguments\\nprovided to event handlers are detailed in a list underneath the topic\\nheading.</p>\\n<p>Every <code>.html</code> document has a corresponding <code>.json</code> document presenting\\nthe same information in a structured manner.  This feature is\\nexperimental, and added for the benefit of IDEs and other utilities that\\nwish to do programmatic things with the documentation.</p>\\n<p>Every <code>.html</code> and <code>.json</code> file is generated based on the corresponding\\n<code>.md</code> file in the <code>doc/api/</code> folder in Node.js&#39;s source tree.  The\\ndocumentation is generated using the <code>tools/doc/generate.js</code> program.\\nThe HTML template is located at <code>doc/template.html</code>.</p>\\n<p>If you find an error in this documentation, please [submit an issue][]\\nor see [the contributing guide][] for directions on how to submit a patch.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Stability Index\",\n          \"name\": \"Stability Index\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Throughout the documentation, you will see indications of a section&#39;s\\nstability.  The Node.js API is still somewhat changing, and as it\\nmatures, certain parts are more reliable than others.  Some are so\\nproven, and so relied upon, that they are unlikely to ever change at\\nall.  Others are brand new and experimental, or known to be hazardous\\nand in the process of being redesigned.</p>\\n<p>The stability indices are as follows:</p>\\n<pre><code>Stability: 0 - Deprecated\\nThis feature is known to be problematic, and changes are\\nplanned.  Do not rely on it.  Use of the feature may cause warnings.  Backwards\\ncompatibility should not be expected.\\n</code></pre><pre><code>Stability: 1 - Experimental\\nThis feature is subject to change, and is gated by a command line flag.\\nIt may change or be removed in future versions.\\n</code></pre><pre><code>Stability: 2 - Stable\\nThe API has proven satisfactory. Compatibility with the npm ecosystem\\nis a high priority, and will not be broken unless absolutely necessary.\\n</code></pre><pre><code>Stability: 3 - Locked\\nOnly fixes related to security, performance, or bug fixes will be accepted.\\nPlease do not suggest API changes in this area; they will be refused.\\n</code></pre>\"\n        },\n        {\n          \"textRaw\": \"JSON Output\",\n          \"name\": \"json_output\",\n          \"stability\": 1,\n          \"stabilityText\": \"Experimental\",\n          \"desc\": \"<p>Every HTML file in the markdown has a corresponding JSON file with the\\nsame data.</p>\\n<p>This feature was added in Node.js v0.6.12.  It is experimental.</p>\\n\",\n          \"type\": \"misc\",\n          \"displayName\": \"JSON Output\"\n        },\n        {\n          \"textRaw\": \"Syscalls and man pages\",\n          \"name\": \"syscalls_and_man_pages\",\n          \"desc\": \"<p>System calls like open(2) and read(2) define the interface between user programs\\nand the underlying operating system. Node functions which simply wrap a syscall,\\nlike <code>fs.open()</code>, will document that. The docs link to the corresponding man\\npages (short for manual pages) which describe how the syscalls work.</p>\\n<p><strong>Caveat:</strong> some syscalls, like lchown(2), are BSD-specific. That means, for\\nexample, that <code>fs.lchown()</code> only works on Mac OS X and other BSD-derived systems,\\nand is not available on Linux.</p>\\n<p>Most Unix syscalls have Windows equivalents, but behavior may differ on Windows\\nrelative to Linux and OS X. For an example of the subtle ways in which it&#39;s\\nsometimes impossible to replace Unix syscall semantics on Windows, see <a href=\\\"https://github.com/nodejs/node/issues/4760\\\">Node\\nissue 4760</a>.</p>\\n<!-- [end-include:documentation.md] -->\\n<!-- [start-include:synopsis.md] -->\\n\",\n          \"type\": \"misc\",\n          \"displayName\": \"Syscalls and man pages\"\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"Usage\",\n      \"name\": \"Usage\",\n      \"type\": \"misc\",\n      \"desc\": \"<p><code>node [options] [v8 options] [script.js | -e &quot;script&quot;] [arguments]</code></p>\\n<p>Please see the [Command Line Options][] document for information about\\ndifferent options and ways to run scripts with Node.js.</p>\\n<h2>Example</h2>\\n<p>An example of a [web server][] written with Node.js which responds with\\n<code>&#39;Hello World&#39;</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\n\\nconst hostname = &#39;127.0.0.1&#39;;\\nconst port = 3000;\\n\\nconst server = http.createServer((req, res) =&gt; {\\n  res.statusCode = 200;\\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);\\n  res.end(&#39;Hello World\\\\n&#39;);\\n});\\n\\nserver.listen(port, hostname, () =&gt; {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\\n</code></pre>\\n<p>To run the server, put the code into a file called <code>example.js</code> and execute\\nit with Node.js:</p>\\n<pre><code>$ node example.js\\nServer running at http://127.0.0.1:3000/\\n</code></pre><p>All of the examples in the documentation can be run similarly.</p>\\n<!-- [end-include:synopsis.md] -->\\n<!-- [start-include:addons.md] -->\\n\"\n    },\n    {\n      \"textRaw\": \"Command Line Options\",\n      \"name\": \"Command Line Options\",\n      \"type\": \"misc\",\n      \"desc\": \"<p>Node.js comes with a variety of CLI options. These options expose built-in\\ndebugging, multiple ways to execute scripts, and other helpful runtime options.</p>\\n<p>To view this documentation as a manual page in your terminal, run <code>man node</code>.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Synopsis\",\n          \"name\": \"synopsis\",\n          \"desc\": \"<p><code>node [options] [v8 options] [script.js | -e &quot;script&quot;] [arguments]</code></p>\\n<p><code>node debug [script.js | -e &quot;script&quot; | &lt;host&gt;:&lt;port&gt;] \u2026</code></p>\\n<p><code>node --v8-options</code></p>\\n<p>Execute without arguments to start the [REPL][].</p>\\n<p><em>For more info about <code>node debug</code>, please see the [debugger][] documentation.</em></p>\\n\",\n          \"type\": \"misc\",\n          \"displayName\": \"Synopsis\"\n        },\n        {\n          \"textRaw\": \"Options\",\n          \"name\": \"options\",\n          \"modules\": [\n            {\n              \"textRaw\": \"`-v`, `--version`\",\n              \"name\": \"`-v`,_`--version`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.3\"\n                ]\n              },\n              \"desc\": \"<p>Print node&#39;s version.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-v`, `--version`\"\n            },\n            {\n              \"textRaw\": \"`-h`, `--help`\",\n              \"name\": \"`-h`,_`--help`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.3\"\n                ]\n              },\n              \"desc\": \"<p>Print node command line options.\\nThe output of this option is less detailed than this document.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-h`, `--help`\"\n            },\n            {\n              \"textRaw\": \"`-e`, `--eval \\\"script\\\"`\",\n              \"name\": \"`-e`,_`--eval_\\\"script\\\"`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.2\"\n                ]\n              },\n              \"desc\": \"<p>Evaluate the following argument as JavaScript. The modules which are\\npredefined in the REPL can also be used in <code>script</code>.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-e`, `--eval \\\"script\\\"`\"\n            },\n            {\n              \"textRaw\": \"`-p`, `--print \\\"script\\\"`\",\n              \"name\": \"`-p`,_`--print_\\\"script\\\"`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.4\"\n                ]\n              },\n              \"desc\": \"<p>Identical to <code>-e</code> but prints the result.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-p`, `--print \\\"script\\\"`\"\n            },\n            {\n              \"textRaw\": \"`-c`, `--check`\",\n              \"name\": \"`-c`,_`--check`\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Syntax check the script without executing.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-c`, `--check`\"\n            },\n            {\n              \"textRaw\": \"`-i`, `--interactive`\",\n              \"name\": \"`-i`,_`--interactive`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>Opens the REPL even if stdin does not appear to be a terminal.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-i`, `--interactive`\"\n            },\n            {\n              \"textRaw\": \"`-r`, `--require module`\",\n              \"name\": \"`-r`,_`--require_module`\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Preload the specified module at startup.</p>\\n<p>Follows <code>require()</code>&#39;s module resolution\\nrules. <code>module</code> may be either a path to a file, or a node module name.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`-r`, `--require module`\"\n            },\n            {\n              \"textRaw\": \"`--no-deprecation`\",\n              \"name\": \"`--no-deprecation`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.8.0\"\n                ]\n              },\n              \"desc\": \"<p>Silence deprecation warnings.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--no-deprecation`\"\n            },\n            {\n              \"textRaw\": \"`--trace-deprecation`\",\n              \"name\": \"`--trace-deprecation`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.8.0\"\n                ]\n              },\n              \"desc\": \"<p>Print stack traces for deprecations.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--trace-deprecation`\"\n            },\n            {\n              \"textRaw\": \"`--throw-deprecation`\",\n              \"name\": \"`--throw-deprecation`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.14\"\n                ]\n              },\n              \"desc\": \"<p>Throw errors for deprecations.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--throw-deprecation`\"\n            },\n            {\n              \"textRaw\": \"`--no-warnings`\",\n              \"name\": \"`--no-warnings`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Silence all process warnings (including deprecations).</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--no-warnings`\"\n            },\n            {\n              \"textRaw\": \"`--trace-warnings`\",\n              \"name\": \"`--trace-warnings`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Print stack traces for process warnings (including deprecations).</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--trace-warnings`\"\n            },\n            {\n              \"textRaw\": \"`--trace-sync-io`\",\n              \"name\": \"`--trace-sync-io`\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.1.0\"\n                ]\n              },\n              \"desc\": \"<p>Prints a stack trace whenever synchronous I/O is detected after the first turn\\nof the event loop.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--trace-sync-io`\"\n            },\n            {\n              \"textRaw\": \"`--zero-fill-buffers`\",\n              \"name\": \"`--zero-fill-buffers`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Automatically zero-fills all newly allocated [Buffer][] and [SlowBuffer][]\\ninstances.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--zero-fill-buffers`\"\n            },\n            {\n              \"textRaw\": \"`--preserve-symlinks`\",\n              \"name\": \"`--preserve-symlinks`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.3.0\"\n                ]\n              },\n              \"desc\": \"<p>Instructs the module loader to preserve symbolic links when resolving and\\ncaching modules.</p>\\n<p>By default, when Node.js loads a module from a path that is symbolically linked\\nto a different on-disk location, Node.js will dereference the link and use the\\nactual on-disk &quot;real path&quot; of the module as both an identifier and as a root\\npath to locate other dependency modules. In most cases, this default behavior\\nis acceptable. However, when using symbolically linked peer dependencies, as\\nillustrated in the example below, the default behavior causes an exception to\\nbe thrown if <code>moduleA</code> attempts to require <code>moduleB</code> as a peer dependency:</p>\\n<pre><code class=\\\"lang-text\\\">{appDir}\\n \u251c\u2500\u2500 app\\n \u2502   \u251c\u2500\u2500 index.js\\n \u2502   \u2514\u2500\u2500 node_modules\\n \u2502       \u251c\u2500\u2500 moduleA -&gt; {appDir}/moduleA\\n \u2502       \u2514\u2500\u2500 moduleB\\n \u2502           \u251c\u2500\u2500 index.js\\n \u2502           \u2514\u2500\u2500 package.json\\n \u2514\u2500\u2500 moduleA\\n     \u251c\u2500\u2500 index.js\\n     \u2514\u2500\u2500 package.json\\n</code></pre>\\n<p>The <code>--preserve-symlinks</code> command line flag instructs Node.js to use the\\nsymlink path for modules as opposed to the real path, allowing symbolically\\nlinked peer dependencies to be found.</p>\\n<p>Note, however, that using <code>--preserve-symlinks</code> can have other side effects.\\nSpecifically, symbolically linked <em>native</em> modules can fail to load if those\\nare linked from more than one location in the dependency tree (Node.js would\\nsee those as two separate modules and would attempt to load the module multiple\\ntimes, causing an exception to be thrown).</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--preserve-symlinks`\"\n            },\n            {\n              \"textRaw\": \"`--track-heap-objects`\",\n              \"name\": \"`--track-heap-objects`\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.4.0\"\n                ]\n              },\n              \"desc\": \"<p>Track heap object allocations for heap snapshots.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--track-heap-objects`\"\n            },\n            {\n              \"textRaw\": \"`--prof-process`\",\n              \"name\": \"`--prof-process`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Process v8 profiler output generated using the v8 option <code>--prof</code>.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--prof-process`\"\n            },\n            {\n              \"textRaw\": \"`--v8-options`\",\n              \"name\": \"`--v8-options`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.3\"\n                ]\n              },\n              \"desc\": \"<p>Print v8 command line options.</p>\\n<p>Note: v8 options allow words to be separated by both dashes (<code>-</code>) or underscores\\n(<code>_</code>).</p>\\n<p>For example, <code>--stack-trace-limit</code> is equivalent to <code>--stack_trace_limit</code>.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--v8-options`\"\n            },\n            {\n              \"textRaw\": \"`--tls-cipher-list=list`\",\n              \"name\": \"`--tls-cipher-list=list`\",\n              \"meta\": {\n                \"added\": [\n                  \"v4.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Specify an alternative default TLS cipher list. (Requires Node.js to be built\\nwith crypto support. (Default))</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--tls-cipher-list=list`\"\n            },\n            {\n              \"textRaw\": \"`--enable-fips`\",\n              \"name\": \"`--enable-fips`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with\\n<code>./configure --openssl-fips</code>)</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--enable-fips`\"\n            },\n            {\n              \"textRaw\": \"`--force-fips`\",\n              \"name\": \"`--force-fips`\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.)\\n(Same requirements as <code>--enable-fips</code>)</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--force-fips`\"\n            },\n            {\n              \"textRaw\": \"`--icu-data-dir=file`\",\n              \"name\": \"`--icu-data-dir=file`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.15\"\n                ]\n              },\n              \"desc\": \"<p>Specify ICU data load path. (overrides <code>NODE_ICU_DATA</code>)</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`--icu-data-dir=file`\"\n            }\n          ],\n          \"type\": \"misc\",\n          \"displayName\": \"Options\"\n        },\n        {\n          \"textRaw\": \"Environment Variables\",\n          \"name\": \"environment_variables\",\n          \"modules\": [\n            {\n              \"textRaw\": \"`NODE_DEBUG=module[,\u2026]`\",\n              \"name\": \"`node_debug=module[,\u2026]`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.32\"\n                ]\n              },\n              \"desc\": \"<p><code>&#39;,&#39;</code>-separated list of core modules that should print debug information.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`NODE_DEBUG=module[,\u2026]`\"\n            },\n            {\n              \"textRaw\": \"`NODE_PATH=path[:\u2026]`\",\n              \"name\": \"`node_path=path[:\u2026]`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.32\"\n                ]\n              },\n              \"desc\": \"<p><code>&#39;:&#39;</code>-separated list of directories prefixed to the module search path.</p>\\n<p><em>Note: on Windows, this is a <code>&#39;;&#39;</code>-separated list instead.</em></p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`NODE_PATH=path[:\u2026]`\"\n            },\n            {\n              \"textRaw\": \"`NODE_DISABLE_COLORS=1`\",\n              \"name\": \"`node_disable_colors=1`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.0\"\n                ]\n              },\n              \"desc\": \"<p>When set to <code>1</code> colors will not be used in the REPL.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`NODE_DISABLE_COLORS=1`\"\n            },\n            {\n              \"textRaw\": \"`NODE_ICU_DATA=file`\",\n              \"name\": \"`node_icu_data=file`\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.15\"\n                ]\n              },\n              \"desc\": \"<p>Data path for ICU (Intl object) data. Will extend linked-in data when compiled\\nwith small-icu support.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`NODE_ICU_DATA=file`\"\n            },\n            {\n              \"textRaw\": \"`NODE_REPL_HISTORY=file`\",\n              \"name\": \"`node_repl_history=file`\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.0.0\"\n                ]\n              },\n              \"desc\": \"<p>Path to the file used to store the persistent REPL history. The default path is\\n<code>~/.node_repl_history</code>, which is overridden by this variable. Setting the value\\nto an empty string (<code>&quot;&quot;</code> or <code>&quot; &quot;</code>) disables persistent REPL history.</p>\\n<!-- [end-include:cli.md] -->\\n<!-- [start-include:console.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`NODE_REPL_HISTORY=file`\"\n            }\n          ],\n          \"type\": \"misc\",\n          \"displayName\": \"Environment Variables\"\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"Debugger\",\n      \"name\": \"Debugger\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"type\": \"misc\",\n      \"desc\": \"<p>Node.js includes a full-featured out-of-process debugging utility accessible\\nvia a simple [TCP-based protocol][] and built-in debugging client. To use it,\\nstart Node.js with the <code>debug</code> argument followed by the path to the script to\\ndebug; a prompt will be displayed indicating successful launch of the debugger:</p>\\n<pre><code>$ node debug myscript.js\\n&lt; debugger listening on port 5858\\nconnecting... ok\\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\\n  1 x = 5;\\n  2 setTimeout(() =&gt; {\\n  3   debugger;\\ndebug&gt;\\n</code></pre><p>Node.js&#39;s debugger client is not a full-featured debugger, but simple step and\\ninspection are possible.</p>\\n<p>Inserting the statement <code>debugger;</code> into the source code of a script will\\nenable a breakpoint at that position in the code:</p>\\n<pre><code class=\\\"lang-js\\\">// myscript.js\\nx = 5;\\nsetTimeout(() =&gt; {\\n  debugger;\\n  console.log(&#39;world&#39;);\\n}, 1000);\\nconsole.log(&#39;hello&#39;);\\n</code></pre>\\n<p>Once the debugger is run, a breakpoint will occur at line 4:</p>\\n<pre><code>$ node debug myscript.js\\n&lt; debugger listening on port 5858\\nconnecting... ok\\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\\n  1 x = 5;\\n  2 setTimeout(() =&gt; {\\n  3   debugger;\\ndebug&gt; cont\\n&lt; hello\\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\\n  1 x = 5;\\n  2 setTimeout(() =&gt; {\\n  3   debugger;\\n  4   console.log(&#39;world&#39;);\\n  5 }, 1000);\\ndebug&gt; next\\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\\n  2 setTimeout(() =&gt; {\\n  3   debugger;\\n  4   console.log(&#39;world&#39;);\\n  5 }, 1000);\\n  6 console.log(&#39;hello&#39;);\\ndebug&gt; repl\\nPress Ctrl + C to leave debug repl\\n&gt; x\\n5\\n&gt; 2+2\\n4\\ndebug&gt; next\\n&lt; world\\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\\n  3   debugger;\\n  4   console.log(&#39;world&#39;);\\n  5 }, 1000);\\n  6 console.log(&#39;hello&#39;);\\n  7\\ndebug&gt; quit\\n</code></pre><p>The <code>repl</code> command allows code to be evaluated remotely. The <code>next</code> command\\nsteps to the next line. Type <code>help</code> to see what other commands are available.</p>\\n<p>Pressing <code>enter</code> without typing a command will repeat the previous debugger\\ncommand.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Watchers\",\n          \"name\": \"watchers\",\n          \"desc\": \"<p>It is possible to watch expression and variable values while debugging. On\\nevery breakpoint, each expression from the watchers list will be evaluated\\nin the current context and displayed immediately before the breakpoint&#39;s\\nsource code listing.</p>\\n<p>To begin watching an expression, type <code>watch(&#39;my_expression&#39;)</code>. The command\\n<code>watchers</code> will print the active watchers. To remove a watcher, type\\n<code>unwatch(&#39;my_expression&#39;)</code>.</p>\\n\",\n          \"type\": \"misc\",\n          \"displayName\": \"Watchers\"\n        },\n        {\n          \"textRaw\": \"Command reference\",\n          \"name\": \"command_reference\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Stepping\",\n              \"name\": \"Stepping\",\n              \"desc\": \"<ul>\\n<li><code>cont</code>, <code>c</code> - Continue execution</li>\\n<li><code>next</code>, <code>n</code> - Step next</li>\\n<li><code>step</code>, <code>s</code> - Step in</li>\\n<li><code>out</code>, <code>o</code> - Step out</li>\\n<li><code>pause</code> - Pause running code (like pause button in Developer Tools)</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Breakpoints\"\n            },\n            {\n              \"textRaw\": \"Breakpoints\",\n              \"name\": \"breakpoints\",\n              \"desc\": \"<ul>\\n<li><code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line</li>\\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line</li>\\n<li><code>setBreakpoint(&#39;fn()&#39;)</code>, <code>sb(...)</code> - Set breakpoint on a first statement in\\nfunctions body</li>\\n<li><code>setBreakpoint(&#39;script.js&#39;, 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of\\nscript.js</li>\\n<li><code>clearBreakpoint(&#39;script.js&#39;, 1)</code>, <code>cb(...)</code> - Clear breakpoint in script.js\\non line 1</li>\\n</ul>\\n<p>It is also possible to set a breakpoint in a file (module) that\\nisn&#39;t loaded yet:</p>\\n<pre><code>$ ./node debug test/fixtures/break-in-module/main.js\\n&lt; debugger listening on port 5858\\nconnecting to port 5858... ok\\nbreak in test/fixtures/break-in-module/main.js:1\\n  1 var mod = require(&#39;./mod.js&#39;);\\n  2 mod.hello();\\n  3 mod.hello();\\ndebug&gt; setBreakpoint(&#39;mod.js&#39;, 23)\\nWarning: script &#39;mod.js&#39; was not loaded yet.\\n  1 var mod = require(&#39;./mod.js&#39;);\\n  2 mod.hello();\\n  3 mod.hello();\\ndebug&gt; c\\nbreak in test/fixtures/break-in-module/mod.js:23\\n 21\\n 22 exports.hello = () =&gt; {\\n 23   return &#39;hello from module&#39;;\\n 24 };\\n 25\\ndebug&gt;\\n</code></pre>\",\n              \"type\": \"module\",\n              \"displayName\": \"Breakpoints\"\n            },\n            {\n              \"textRaw\": \"Execution control\",\n              \"name\": \"Execution control\",\n              \"desc\": \"<ul>\\n<li><code>run</code> - Run script (automatically runs on debugger&#39;s start)</li>\\n<li><code>restart</code> - Restart script</li>\\n<li><code>kill</code> - Kill script</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Various\"\n            },\n            {\n              \"textRaw\": \"Various\",\n              \"name\": \"various\",\n              \"desc\": \"<ul>\\n<li><code>scripts</code> - List all loaded scripts</li>\\n<li><code>version</code> - Display V8&#39;s version</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Various\"\n            }\n          ],\n          \"type\": \"misc\",\n          \"displayName\": \"Command reference\"\n        },\n        {\n          \"textRaw\": \"Advanced Usage\",\n          \"name\": \"advanced_usage\",\n          \"desc\": \"<p>An alternative way of enabling and accessing the debugger is to start\\nNode.js with the <code>--debug</code> command-line flag or by signaling an existing\\nNode.js process with <code>SIGUSR1</code>.</p>\\n<p>Once a process has been set in debug mode this way, it can be inspected\\nusing the Node.js debugger by either connecting to the <code>pid</code> of the running\\nprocess or via URI reference to the listening debugger:</p>\\n<ul>\\n<li><code>node debug -p &lt;pid&gt;</code> - Connects to the process via the <code>pid</code></li>\\n<li><code>node debug &lt;URI&gt;</code> - Connects to the process via the URI such as\\nlocalhost:5858</li>\\n</ul>\\n<!-- [end-include:debugger.md] -->\\n<!-- [start-include:dgram.md] -->\\n\",\n          \"type\": \"misc\",\n          \"displayName\": \"Advanced Usage\"\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"Errors\",\n      \"name\": \"Errors\",\n      \"type\": \"misc\",\n      \"desc\": \"<p>Applications running in Node.js will generally experience four categories of\\nerrors:</p>\\n<ul>\\n<li>Standard JavaScript errors such as:<ul>\\n<li>{EvalError} : thrown when a call to <code>eval()</code> fails.</li>\\n<li>{SyntaxError} : thrown in response to improper JavaScript language\\nsyntax.</li>\\n<li>{RangeError} : thrown when a value is not within an expected range</li>\\n<li>{ReferenceError} : thrown when using undefined variables</li>\\n<li>{TypeError} : thrown when passing arguments of the wrong type</li>\\n<li>{URIError} : thrown when a global URI handling function is misused.</li>\\n</ul>\\n</li>\\n<li>System errors triggered by underlying operating system constraints such\\nas attempting to open a file that does not exist, attempting to send data\\nover a closed socket, etc;</li>\\n<li>And User-specified errors triggered by application code.</li>\\n<li>Assertion Errors are a special class of error that can be triggered whenever\\nNode.js detects an exceptional logic violation that should never occur. These\\nare raised typically by the <code>assert</code> module.</li>\\n</ul>\\n<p>All JavaScript and System errors raised by Node.js inherit from, or are\\ninstances of, the standard JavaScript {Error} class and are guaranteed\\nto provide <em>at least</em> the properties available on that class.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Error Propagation and Interception\",\n          \"name\": \"Error Propagation and Interception\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Node.js supports several mechanisms for propagating and handling errors that\\noccur while an application is running. How these errors are reported and\\nhandled depends entirely on the type of Error and the style of the API that is\\ncalled.</p>\\n<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate\\nand throw an error using the standard JavaScript <code>throw</code> mechanism. These\\nare handled using the [<code>try / catch</code> construct][try-catch] provided by the JavaScript\\nlanguage.</p>\\n<pre><code class=\\\"lang-js\\\">// Throws with a ReferenceError because z is undefined\\ntry {\\n  const m = 1;\\n  const n = m + z;\\n} catch (err) {\\n  // Handle the error here.\\n}\\n</code></pre>\\n<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that\\n<em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit\\nimmediately.</p>\\n<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not\\naccept a <code>callback</code> function, such as [<code>fs.readFileSync</code>][]), will use <code>throw</code>\\nto report errors.</p>\\n<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>\\n<ul>\\n<li><p>Most asynchronous methods that accept a <code>callback</code> function will accept an\\n<code>Error</code> object passed as the first argument to that function. If that first\\nargument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred\\nthat should be handled.</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\nfs.readFile(&#39;a file that does not exist&#39;, (err, data) =&gt; {\\n  if (err) {\\n    console.error(&#39;There was an error reading the file!&#39;, err);\\n    return;\\n  }\\n  // Otherwise handle the data\\n});\\n</code></pre>\\n</li>\\n<li><p>When an asynchronous method is called on an object that is an <code>EventEmitter</code>,\\nerrors can be routed to that object&#39;s <code>&#39;error&#39;</code> event.</p>\\n<pre><code class=\\\"lang-js\\\">const net = require(&#39;net&#39;);\\nconst connection = net.connect(&#39;localhost&#39;);\\n\\n// Adding an &#39;error&#39; event handler to a stream:\\nconnection.on(&#39;error&#39;, (err) =&gt; {\\n  // If the connection is reset by the server, or if it can&#39;t\\n  // connect at all, or on any sort of error encountered by\\n  // the connection, the error will be sent here.\\n  console.error(err);\\n});\\n\\nconnection.pipe(process.stdout);\\n</code></pre>\\n</li>\\n<li><p>A handful of typically asynchronous methods in the Node.js API may still\\nuse the <code>throw</code> mechanism to raise exceptions that must be handled using\\n<code>try / catch</code>. There is no comprehensive list of such methods; please\\nrefer to the documentation of each method to determine the appropriate\\nerror handling mechanism required.</p>\\n</li>\\n</ul>\\n<p>The use of the <code>&#39;error&#39;</code> event mechanism is most common for [stream-based][]\\nand [event emitter-based][] APIs, which themselves represent a series of\\nasynchronous operations over time (as opposed to a single operation that may\\npass or fail).</p>\\n<p>For <em>all</em> <code>EventEmitter</code> objects, if an <code>&#39;error&#39;</code> event handler is not\\nprovided, the error will be thrown, causing the Node.js process to report an\\nunhandled exception and  crash unless either: The [<code>domain</code>][domains] module is used\\nappropriately or a handler has been registered for the\\n[<code>process.on(&#39;uncaughtException&#39;)</code>][] event.</p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\nconst ee = new EventEmitter();\\n\\nsetImmediate(() =&gt; {\\n  // This will crash the process because no &#39;error&#39; event\\n  // handler has been added.\\n  ee.emit(&#39;error&#39;, new Error(&#39;This will crash&#39;));\\n});\\n</code></pre>\\n<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as\\nthey are thrown <em>after</em> the calling code has already exited.</p>\\n<p>Developers must refer to the documentation for each method to determine\\nexactly how errors raised by those methods are propagated.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Node.js style callbacks\",\n              \"name\": \"Node.js style callbacks\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic\\npattern  referred to as a &quot;Node.js style callback&quot;. With this pattern, a\\ncallback function is passed to the method as an argument. When the operation\\neither completes or an error is raised, the callback function is called with\\nthe Error object (if any) passed as the first argument. If no error was raised,\\nthe first argument will be passed as <code>null</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\n\\nfunction nodeStyleCallback(err, data) {\\n if (err) {\\n   console.error(&#39;There was an error&#39;, err);\\n   return;\\n }\\n console.log(data);\\n}\\n\\nfs.readFile(&#39;/some/file/that/does-not-exist&#39;, nodeStyleCallback);\\nfs.readFile(&#39;/some/file/that/does-exist&#39;, nodeStyleCallback)\\n</code></pre>\\n<p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors\\ngenerated by asynchronous APIs.  A common mistake for beginners is to try to\\nuse <code>throw</code> inside a Node.js style callback:</p>\\n<pre><code class=\\\"lang-js\\\">// THIS WILL NOT WORK:\\nconst fs = require(&#39;fs&#39;);\\n\\ntry {\\n  fs.readFile(&#39;/some/file/that/does-not-exist&#39;, (err, data) =&gt; {\\n    // mistaken assumption: throwing here...\\n    if (err) {\\n      throw err;\\n    }\\n  });\\n} catch(err) {\\n  // This will not catch the throw!\\n  console.log(err);\\n}\\n</code></pre>\\n<p>This will not work because the callback function passed to <code>fs.readFile()</code> is\\ncalled asynchronously. By the time the callback has been called, the\\nsurrounding code (including the <code>try { } catch(err) { }</code> block will have\\nalready exited. Throwing an error inside the callback <strong>can crash the Node.js\\nprocess</strong> in most cases. If [domains][] are enabled, or a handler has been\\nregistered with <code>process.on(&#39;uncaughtException&#39;)</code>, such errors can be\\nintercepted.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Exceptions vs. Errors\",\n          \"name\": \"Exceptions vs. Errors\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>A JavaScript exception is a value that is thrown as a result of an invalid\\noperation or as the target of a <code>throw</code> statement. While it is not required\\nthat these values are instances of <code>Error</code> or classes which inherit from\\n<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be\\ninstances of Error.</p>\\n<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions\\nwill <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>\\nchecks or <code>abort()</code> calls in the C++ layer.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"System Errors\",\n          \"name\": \"system_errors\",\n          \"desc\": \"<p>System errors are generated when exceptions occur within the program&#39;s\\nruntime environment. Typically, these are operational errors that occur\\nwhen an application violates an operating system constraint such as attempting\\nto read a file that does not exist or when the user does not have sufficient\\npermissions.</p>\\n<p>System errors are typically generated at the syscall level: an exhaustive list\\nof error codes and their meanings is available by running <code>man 2 intro</code> or\\n<code>man 3 errno</code> on most Unices; or [online][].</p>\\n<p>In Node.js, system errors are represented as augmented <code>Error</code> objects with\\nadded properties.</p>\\n\",\n          \"classes\": [\n            {\n              \"textRaw\": \"Class: System Error\",\n              \"type\": \"class\",\n              \"name\": \"System\",\n              \"properties\": [\n                {\n                  \"textRaw\": \"error.code\",\n                  \"name\": \"code\",\n                  \"desc\": \"<p>Returns a string representing the error code, which is always <code>E</code> followed by\\na sequence of capital letters, and may be referenced in <code>man 2 intro</code>.</p>\\n<p>The properties <code>error.code</code> and <code>error.errno</code> are aliases of one another and\\nreturn the same value.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"error.errno\",\n                  \"name\": \"errno\",\n                  \"desc\": \"<p>Returns a string representing the error code, which is always <code>E</code> followed by\\na sequence of capital letters, and may be referenced in <code>man 2 intro</code>.</p>\\n<p>The properties <code>error.code</code> and <code>error.errno</code> are aliases of one another and\\nreturn the same value.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"error.syscall\",\n                  \"name\": \"syscall\",\n                  \"desc\": \"<p>Returns a string describing the [syscall][] that failed.</p>\\n\"\n                }\n              ]\n            }\n          ],\n          \"modules\": [\n            {\n              \"textRaw\": \"Common System Errors\",\n              \"name\": \"common_system_errors\",\n              \"desc\": \"<p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system\\nerrors encountered when writing a Node.js program. An exhaustive list may be\\nfound [here][online].</p>\\n<ul>\\n<li><p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\\nforbidden by its file access permissions.</p>\\n</li>\\n<li><p><code>EADDRINUSE</code> (Address already in use):  An attempt to bind a server\\n([<code>net</code>][], [<code>http</code>][], or [<code>https</code>][]) to a local address failed due to\\nanother server on the local system already occupying that address.</p>\\n</li>\\n<li><p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\\ntarget machine actively refused it. This usually results from trying to\\nconnect to a service that is inactive on the foreign host.</p>\\n</li>\\n<li><p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\\na peer. This normally results from a loss of the connection on the remote\\nsocket due to a timeout or reboot. Commonly encountered via the [<code>http</code>][]\\nand [<code>net</code>][] modules.</p>\\n</li>\\n<li><p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\\nrequired that the target not exist.</p>\\n</li>\\n<li><p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\\npathname was a directory.</p>\\n</li>\\n<li><p><code>EMFILE</code> (Too many open files in system): Maximum number of\\n[file descriptors][] allowable on the system has been reached, and\\nrequests for another descriptor cannot be fulfilled until at least one\\nhas been closed. This is encountered when opening many files at once in\\nparallel, especially on systems (in particular, OS X) where there is a low\\nfile descriptor limit for processes. To remedy a low limit, run\\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\\n</li>\\n<li><p><code>ENOENT</code> (No such file or directory): Commonly raised by [<code>fs</code>][] operations\\nto indicate that a component of the specified pathname does not exist -- no\\nentity (file or directory) could be found by the given path.</p>\\n</li>\\n<li><p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\\nwas not a directory as expected. Commonly raised by [<code>fs.readdir</code>][].</p>\\n</li>\\n<li><p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\\nof an operation that requires an empty directory -- usually [<code>fs.unlink</code>][].</p>\\n</li>\\n<li><p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\\noperation that requires elevated privileges.</p>\\n</li>\\n<li><p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\\nno process to read the data. Commonly encountered at the [<code>net</code>][] and\\n[<code>http</code>][] layers, indicative that the remote side of the stream being\\nwritten to has been closed.</p>\\n</li>\\n<li><p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\\nthe connected party did not properly respond after a period of time. Usually\\nencountered by [<code>http</code>][] or [<code>net</code>][] -- often a sign that a <code>socket.end()</code>\\nwas not properly called.</p>\\n</li>\\n</ul>\\n<!-- [end-include:errors.md] -->\\n<!-- [start-include:events.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Common System Errors\"\n            }\n          ],\n          \"type\": \"misc\",\n          \"displayName\": \"System Errors\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Error\",\n          \"type\": \"class\",\n          \"name\": \"Error\",\n          \"desc\": \"<p>A generic JavaScript <code>Error</code> object that does not denote any specific\\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\\nprovide a text description of the error.</p>\\n<p>All errors generated by Node.js, including all System and JavaScript errors,\\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"Error.captureStackTrace(targetObject[, constructorOpt])\",\n              \"type\": \"method\",\n              \"name\": \"captureStackTrace\",\n              \"desc\": \"<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\\na string representing the location in the code at which\\n<code>Error.captureStackTrace()</code> was called.</p>\\n<pre><code class=\\\"lang-js\\\">const myObject = {};\\nError.captureStackTrace(myObject);\\nmyObject.stack  // similar to `new Error().stack`\\n</code></pre>\\n<p>The first line of the trace, instead of being prefixed with <code>ErrorType:\\nmessage</code>, will be the result of calling <code>targetObject.toString()</code>.</p>\\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\\ngenerated stack trace.</p>\\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\\ndetails of error generation from an end user. For instance:</p>\\n<pre><code class=\\\"lang-js\\\">function MyError() {\\n  Error.captureStackTrace(this, MyError);\\n}\\n\\n// Without passing MyError to captureStackTrace, the MyError\\n// frame would show up in the .stack property. By passing\\n// the constructor, we omit that frame and all frames above it.\\nnew MyError().stack\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"targetObject\"\n                    },\n                    {\n                      \"name\": \"constructorOpt\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"Error.stackTraceLimit\",\n              \"name\": \"stackTraceLimit\",\n              \"desc\": \"<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\\n<code>Error.captureStackTrace(obj)</code>).</p>\\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\\n<p>If set to a non-number value, or set to a negative number, stack traces will\\nnot capture any frames.</p>\\n\",\n              \"properties\": [\n                {\n                  \"textRaw\": \"error.message\",\n                  \"name\": \"message\",\n                  \"desc\": \"<p>Returns the string description of error as set by calling <code>new Error(message)</code>.\\nThe <code>message</code> passed to the constructor will also appear in the first line of\\nthe stack trace of the <code>Error</code>, however changing this property after the\\n<code>Error</code> object is created <em>may not</em> change the first line of the stack trace.</p>\\n<pre><code class=\\\"lang-js\\\">const err = new Error(&#39;The message&#39;);\\nconsole.log(err.message);\\n  // Prints: The message\\n</code></pre>\\n\"\n                },\n                {\n                  \"textRaw\": \"error.stack\",\n                  \"name\": \"stack\",\n                  \"desc\": \"<p>Returns a string describing the point in the code at which the <code>Error</code> was\\ninstantiated.</p>\\n<p>For example:</p>\\n<pre><code>Error: Things keep happening!\\n   at /home/gbusey/file.js:525:2\\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\\n</code></pre><p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\\nEach frame describes a call site within the code that lead to the error being\\ngenerated. V8 attempts to display a name for each function (by variable name,\\nfunction name, or object method name), but occasionally it will not be able to\\nfind a suitable name. If V8 cannot determine a name for the function, only\\nlocation information will be displayed for that frame. Otherwise, the\\ndetermined function name will be displayed with location information appended\\nin parentheses.</p>\\n<p>It is important to note that frames are <strong>only</strong> generated for JavaScript\\nfunctions. If, for example, execution synchronously passes through a C++ addon\\nfunction called <code>cheetahify</code>, which itself calls a JavaScript function, the\\nframe representing the <code>cheetahify</code> call will <strong>not</strong> be present in the stack\\ntraces:</p>\\n<pre><code class=\\\"lang-js\\\">const cheetahify = require(&#39;./native-binding.node&#39;);\\n\\nfunction makeFaster() {\\n  // cheetahify *synchronously* calls speedy.\\n  cheetahify(function speedy() {\\n    throw new Error(&#39;oh no!&#39;);\\n  });\\n}\\n\\nmakeFaster(); // will throw:\\n  // /home/gbusey/file.js:6\\n  //     throw new Error(&#39;oh no!&#39;);\\n  //           ^\\n  // Error: oh no!\\n  //     at speedy (/home/gbusey/file.js:6:11)\\n  //     at makeFaster (/home/gbusey/file.js:5:3)\\n  //     at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\\n  //     at Module._compile (module.js:456:26)\\n  //     at Object.Module._extensions..js (module.js:474:10)\\n  //     at Module.load (module.js:356:32)\\n  //     at Function.Module._load (module.js:312:12)\\n  //     at Function.Module.runMain (module.js:497:10)\\n  //     at startup (node.js:119:16)\\n  //     at node.js:906:3\\n</code></pre>\\n<p>The location information will be one of:</p>\\n<ul>\\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\\n to Node.js.</li>\\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\\na user program, or its dependencies.</li>\\n</ul>\\n<p>The string representing the stack trace is lazily generated when the\\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\\n<p>The number of frames captured by the stack trace is bounded by the smaller of\\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\\nloop tick.</p>\\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\\ndetailed <a href=\\\"#errors_system_errors\\\">here</a>.</p>\\n\"\n                }\n              ]\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"message\"\n                }\n              ],\n              \"desc\": \"<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\\nprovided text message. If an object is passed as <code>message</code>, the text message\\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\\nare dependent on [V8&#39;s stack trace API][]. Stack traces extend only to either\\n(a) the beginning of  <em>synchronous code execution</em>, or (b) the number of frames\\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: RangeError\",\n          \"type\": \"class\",\n          \"name\": \"RangeError\",\n          \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\\nset or range of acceptable values for a function; whether that is a numeric\\nrange, or outside the set of options for a given function parameter.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">require(&#39;net&#39;).connect(-1);\\n  // throws RangeError, port should be &gt; 0 &amp;&amp; &lt; 65536\\n</code></pre>\\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\\nof argument validation.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: ReferenceError\",\n          \"type\": \"class\",\n          \"name\": \"ReferenceError\",\n          \"desc\": \"<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\\nvariable that is not defined. Such errors commonly indicate typos in code, or\\nan otherwise broken program.</p>\\n<p>While client code may generate and propagate these errors, in practice, only V8\\nwill do so.</p>\\n<pre><code class=\\\"lang-js\\\">doesNotExist;\\n  // throws ReferenceError, doesNotExist is not a variable in this program.\\n</code></pre>\\n<p><code>ReferenceError</code> instances will have an <code>error.arguments</code> property whose value\\nis an array containing a single element: a string representing the variable\\nthat was not defined.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\ntry {\\n  doesNotExist;\\n} catch(err) {\\n  assert(err.arguments[0], &#39;doesNotExist&#39;);\\n}\\n</code></pre>\\n<p>Unless an application is dynamically generating and running code,\\n<code>ReferenceError</code> instances should always be considered a bug in the code\\nor its dependencies.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: SyntaxError\",\n          \"type\": \"class\",\n          \"name\": \"SyntaxError\",\n          \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\\nThese errors may only be generated and propagated as a result of code\\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\\n<code>require</code>, or [vm][]. These errors are almost always indicative of a broken\\nprogram.</p>\\n<pre><code class=\\\"lang-js\\\">try {\\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\\n} catch(err) {\\n  // err will be a SyntaxError\\n}\\n</code></pre>\\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them \u2013\\nthey may only be caught by other contexts.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: TypeError\",\n          \"type\": \"class\",\n          \"name\": \"TypeError\",\n          \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\\nallowable type. For example, passing a function to a parameter which expects a\\nstring would be considered a TypeError.</p>\\n<pre><code class=\\\"lang-js\\\">require(&#39;url&#39;).parse(() =&gt; { });\\n  // throws TypeError, since it expected a string\\n</code></pre>\\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\\nof argument validation.</p>\\n\"\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"Global Objects\",\n      \"name\": \"Global Objects\",\n      \"type\": \"misc\",\n      \"desc\": \"<p>These objects are available in all modules. Some of these objects aren&#39;t\\nactually in the global scope but in the module scope - this will be noted.</p>\\n<p>The objects listed here are specific to Node.js. There are a number of\\n[built-in objects][] that are part of the JavaScript language itself, which are\\nalso globally accessible.</p>\\n\",\n      \"globals\": [\n        {\n          \"textRaw\": \"Class: Buffer\",\n          \"type\": \"global\",\n          \"name\": \"Buffer\",\n          \"desc\": \"<ul>\\n<li>{Function}</li>\\n</ul>\\n<p>Used to handle binary data. See the [buffer section][].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"clearImmediate(immediateObject)\",\n          \"type\": \"global\",\n          \"name\": \"clearImmediate\",\n          \"desc\": \"<p>[<code>clearImmediate</code>] is described in the [timers][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"clearInterval(intervalObject)\",\n          \"type\": \"global\",\n          \"name\": \"clearInterval\",\n          \"desc\": \"<p>[<code>clearInterval</code>] is described in the [timers][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"clearTimeout(timeoutObject)\",\n          \"type\": \"global\",\n          \"name\": \"clearTimeout\",\n          \"desc\": \"<p>[<code>clearTimeout</code>] is described in the [timers][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"console\",\n          \"name\": \"console\",\n          \"type\": \"global\",\n          \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>Used to print to stdout and stderr. See the [<code>console</code>][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"global\",\n          \"name\": \"global\",\n          \"type\": \"global\",\n          \"desc\": \"<ul>\\n<li>{Object} The global namespace object.</li>\\n</ul>\\n<p>In browsers, the top-level scope is the global scope. That means that in\\nbrowsers if you&#39;re in the global scope <code>var something</code> will define a global\\nvariable. In Node.js this is different. The top-level scope is not the global\\nscope; <code>var something</code> inside an Node.js module will be local to that module.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process\",\n          \"name\": \"process\",\n          \"type\": \"global\",\n          \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>The process object. See the [<code>process</code> object][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"setImmediate(callback[, arg][, ...])\",\n          \"type\": \"global\",\n          \"name\": \"setImmediate\",\n          \"desc\": \"<p>[<code>setImmediate</code>] is described in the [timers][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"setInterval(callback, delay[, arg][, ...])\",\n          \"type\": \"global\",\n          \"name\": \"setInterval\",\n          \"desc\": \"<p>[<code>setInterval</code>] is described in the [timers][] section.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"setTimeout(callback, delay[, arg][, ...])\",\n          \"type\": \"global\",\n          \"name\": \"setTimeout\",\n          \"desc\": \"<p>[<code>setTimeout</code>] is described in the [timers][] section.</p>\\n<!-- [end-include:globals.md] -->\\n<!-- [start-include:http.md] -->\\n\"\n        },\n        {\n          \"textRaw\": \"process\",\n          \"name\": \"process\",\n          \"type\": \"global\",\n          \"desc\": \"<p>The <code>process</code> object is a <code>global</code> that provides information about, and control\\nover, the current Node.js process. As a global, it is always available to\\nNode.js applications without using <code>require()</code>.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Process Events\",\n              \"name\": \"process_events\",\n              \"desc\": \"<p>The <code>process</code> object is an instance of [<code>EventEmitter</code>][].</p>\\n\",\n              \"events\": [\n                {\n                  \"textRaw\": \"Event: 'beforeExit'\",\n                  \"type\": \"event\",\n                  \"name\": \"beforeExit\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.11.12\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;beforeExit&#39;</code> event is emitted when Node.js empties its event loop and has\\nno additional work to schedule. Normally, the Node.js process will exit when\\nthere is no work scheduled, but a listener registered on the <code>&#39;beforeExit&#39;</code>\\nevent can make asynchronous calls, and thereby cause the Node.js process to\\ncontinue.</p>\\n<p>The listener callback function is invoked with the value of\\n[<code>process.exitCode</code>][] passed as the only argument.</p>\\n<p>The <code>&#39;beforeExit&#39;</code> event is <em>not</em> emitted for conditions causing explicit\\ntermination, such as calling [<code>process.exit()</code>][] or uncaught exceptions.</p>\\n<p>The <code>&#39;beforeExit&#39;</code> should <em>not</em> be used as an alternative to the <code>&#39;exit&#39;</code> event\\nunless the intention is to schedule additional work.</p>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'disconnect'\",\n                  \"type\": \"event\",\n                  \"name\": \"disconnect\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.7.7\"\n                    ]\n                  },\n                  \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>&#39;disconnect&#39;</code> event will be emitted when\\nthe IPC channel is closed.</p>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'exit'\",\n                  \"type\": \"event\",\n                  \"name\": \"exit\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.1.7\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;exit&#39;</code> event is emitted when the Node.js process is about to exit as a\\nresult of either:</p>\\n<ul>\\n<li>The <code>process.exit()</code> method being called explicitly;</li>\\n<li>The Node.js event loop no longer having any additional work to perform.</li>\\n</ul>\\n<p>There is no way to prevent the exiting of the event loop at this point, and once\\nall <code>&#39;exit&#39;</code> listeners have finished running the Node.js process will terminate.</p>\\n<p>The listener callback function is invoked with the exit code specified either\\nby the [<code>process.exitCode</code>][] property, or the <code>exitCode</code> argument passed to the\\n[<code>process.exit()</code>] method, as the only argument.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;exit&#39;, (code) =&gt; {\\n  console.log(`About to exit with code: ${code}`);\\n});\\n</code></pre>\\n<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js\\nprocess will exit immediately after calling the <code>&#39;exit&#39;</code> event listeners\\ncausing any additional work still queued in the event loop to be abandoned.\\nIn the following example, for instance, the timeout will never occur:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;exit&#39;, (code) =&gt; {\\n  setTimeout(() =&gt; {\\n    console.log(&#39;This will not run&#39;);\\n  }, 0);\\n});\\n</code></pre>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'message'\",\n                  \"type\": \"event\",\n                  \"name\": \"message\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.5.10\"\n                    ]\n                  },\n                  \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>&#39;message&#39;</code> event is emitted whenever a\\nmessage sent by a parent process using [<code>childprocess.send()</code>][] is received by\\nthe child process.</p>\\n<p>The listener callback is invoked with the following arguments:</p>\\n<ul>\\n<li><code>message</code> {Object} a parsed JSON object or primitive value</li>\\n<li><code>sendHandle</code> {Handle object} a [<code>net.Socket</code>][] or [<code>net.Server</code>][] object, or\\nundefined.</li>\\n</ul>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'rejectionHandled'\",\n                  \"type\": \"event\",\n                  \"name\": \"rejectionHandled\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v1.4.1\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;rejectionHandled&#39;</code> event is emitted whenever a <code>Promise</code> has been rejected\\nand an error handler was attached to it (using [<code>promise.catch()</code>][], for\\nexample) later than one turn of the Node.js event loop.</p>\\n<p>The listener callback is invoked with a reference to the rejected <code>Promise</code> as\\nthe only argument.</p>\\n<p>The <code>Promise</code> object would have previously been emitted in an\\n<code>&#39;unhandledRejection&#39;</code> event, but during the course of processing gained a\\nrejection handler.</p>\\n<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can\\nalways be handled. Being inherently asynchronous in nature, a <code>Promise</code>\\nrejection can be handled at a future point in time \u2014 possibly much later than\\nthe event loop turn it takes for the <code>&#39;unhandledRejection&#39;</code> event to be emitted.</p>\\n<p>Another way of stating this is that, unlike in synchronous code where there is\\nan ever-growing list of unhandled exceptions, with Promises there can be a\\ngrowing-and-shrinking list of unhandled rejections.</p>\\n<p>In synchronous code, the <code>&#39;uncaughtException&#39;</code> event is emitted when the list of\\nunhandled exceptions grows.</p>\\n<p>In asynchronous code, the <code>&#39;unhandledRejection&#39;</code> event is emitted when the list\\nof unhandled rejections grows, and the <code>&#39;rejectionHandled&#39;</code> event is emitted\\nwhen the list of unhandled rejections shrinks.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const unhandledRejections = new Map();\\nprocess.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\\n  unhandledRejections.set(p, reason);\\n});\\nprocess.on(&#39;rejectionHandled&#39;, (p) =&gt; {\\n  unhandledRejections.delete(p);\\n});\\n</code></pre>\\n<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,\\nreflecting rejections that start unhandled and then become handled. It is\\npossible to record such errors in an error log, either periodically (which is\\nlikely best for long-running application) or upon process exit (which is likely\\nmost convenient for scripts).</p>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'uncaughtException'\",\n                  \"type\": \"event\",\n                  \"name\": \"uncaughtException\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.1.18\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;uncaughtException&#39;</code> event is emitted when an exception bubbles all the\\nway back to the event loop. By default, Node.js handles such exceptions by\\nprinting the stack trace to <code>stderr</code> and exiting. Adding a handler for the\\n<code>&#39;uncaughtException&#39;</code> event overrides this default behavior.</p>\\n<p>The listener function is called with the <code>Error</code> object passed as the only\\nargument.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;uncaughtException&#39;, (err) =&gt; {\\n  console.log(`Caught exception: ${err}`);\\n});\\n\\nsetTimeout(() =&gt; {\\n  console.log(&#39;This will still run.&#39;);\\n}, 500);\\n\\n// Intentionally cause an exception, but don&#39;t catch it.\\nnonexistentFunc();\\nconsole.log(&#39;This will not run.&#39;);\\n</code></pre>\\n\",\n                  \"modules\": [\n                    {\n                      \"textRaw\": \"Warning: Using `'uncaughtException'` correctly\",\n                      \"name\": \"warning:_using_`'uncaughtexception'`_correctly\",\n                      \"desc\": \"<p>Note that <code>&#39;uncaughtException&#39;</code> is a crude mechanism for exception handling\\nintended to be used only as a last resort. The event <em>should not</em> be used as\\nan equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean\\nthat an application is in an undefined state. Attempting to resume application\\ncode without properly recovering from the exception can cause additional\\nunforeseen and unpredictable issues.</p>\\n<p>Exceptions thrown from within the event handler will not be caught. Instead the\\nprocess will exit with a non zero exit code and the stack trace will be printed.\\nThis is to avoid infinite recursion.</p>\\n<p>Attempting to resume normally after an uncaught exception can be similar to\\npulling out of the power cord when upgrading a computer -- nine out of ten\\ntimes nothing happens - but the 10th time, the system becomes corrupted.</p>\\n<p>The correct use of <code>&#39;uncaughtException&#39;</code> is to perform synchronous cleanup\\nof allocated resources (e.g. file descriptors, handles, etc) before shutting\\ndown the process. It is not safe to resume normal operation after\\n<code>&#39;uncaughtException&#39;</code>.</p>\\n\",\n                      \"type\": \"module\",\n                      \"displayName\": \"Warning: Using `'uncaughtException'` correctly\"\n                    }\n                  ],\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'unhandledRejection'\",\n                  \"type\": \"event\",\n                  \"name\": \"unhandledRejection\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v1.4.1\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;unhandledRejection</code>&#39; event is emitted whenever a <code>Promise</code> is rejected and\\nno error handler is attached to the promise within a turn of the event loop. \\nWhen programming with Promises, exceptions are encapsulated as &quot;rejected\\npromises&quot;. Rejections can be caught and handled using [<code>promise.catch()</code>][] and\\nare propagated through a <code>Promise</code> chain. The <code>&#39;unhandledRejection&#39;</code> event is\\nuseful for detecting and keeping track of promises that were rejected whose \\nrejections have not yet been handled.</p>\\n<p>The listener function is called with the following arguments:</p>\\n<ul>\\n<li><code>reason</code> {Error|any} The object with which the promise was rejected\\n(typically an [<code>Error</code>][] objet).</li>\\n<li><code>p</code> the <code>Promise</code> that was rejected.</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\\n    console.log(&quot;Unhandled Rejection at: Promise &quot;, p, &quot; reason: &quot;, reason);\\n    // application specific logging, throwing an error, or other logic here\\n});\\n\\nsomePromise.then((res) =&gt; {\\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\\n}); // no `.catch` or `.then`\\n</code></pre>\\n<p>The following will also trigger the <code>&#39;unhandledRejection&#39;</code> event to be\\nemitted:</p>\\n<pre><code class=\\\"lang-js\\\">function SomeResource() {\\n  // Initially set the loaded status to a rejected promise\\n  this.loaded = Promise.reject(new Error(&#39;Resource not yet loaded!&#39;));\\n}\\n\\nvar resource = new SomeResource();\\n// no .catch or .then on resource.loaded for at least a turn\\n</code></pre>\\n<p>In this example case, it is possible to track the rejection as a developer error\\nas would typically be the case for other <code>&#39;unhandledRejection&#39;</code> events. To\\naddress such failures, a non-operational\\n[<code>.catch(() =&gt; { })</code>][<code>promise.catch()</code>] handler may be attached to\\n<code>resource.loaded</code>, which would prevent the <code>&#39;unhandledRejection&#39;</code> event from\\nbeing emitted. Alternatively, the [<code>&#39;rejectionHandled&#39;</code>][] event may be used.</p>\\n\",\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Event: 'warning'\",\n                  \"type\": \"event\",\n                  \"name\": \"warning\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v6.0.0\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>&#39;warning&#39;</code> event is emitted whenever Node.js emits a process warning.</p>\\n<p>A process warning is similar to an error in that it describes exceptional\\nconditions that are being brought to the user&#39;s attention. However, warnings\\nare not part of the normal Node.js and JavaScript error handling flow.\\nNode.js can emit warnings whenever it detects bad coding practices that could\\nlead to sub-optimal application performance, bugs or security vulnerabilities.</p>\\n<p>The listener function is called with a single <code>warning</code> argument whose value is\\nan <code>Error</code> object. There are three key properties that describe the warning:</p>\\n<ul>\\n<li><code>name</code> {String} The name of the warning (currently <code>Warning</code> by default).</li>\\n<li><code>message</code> {String} A system-provided description of the warning.</li>\\n<li><code>stack</code> {String} A stack trace to the location in the code where the warning\\nwas issued.</li>\\n</ul>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;warning&#39;, (warning) =&gt; {\\n  console.warn(warning.name);    // Print the warning name\\n  console.warn(warning.message); // Print the warning message\\n  console.warn(warning.stack);   // Print the stack trace\\n});\\n</code></pre>\\n<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>\\ncommand-line option can be used to suppress the default console output but the\\n<code>&#39;warning&#39;</code> event will still be emitted by the <code>process</code> object.</p>\\n<p>The following example illustrates the warning that is printed to <code>stderr</code> when\\ntoo many listeners have been added to an event</p>\\n<pre><code>$ node\\n&gt; event.defaultMaxListeners = 1;\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; (node:38638) Warning: Possible EventEmitter memory leak detected. 2 foo\\n... listeners added. Use emitter.setMaxListeners() to increase limit\\n</code></pre><p>In contrast, the following example turns off the default warning output and\\nadds a custom handler to the <code>&#39;warning&#39;</code> event:</p>\\n<pre><code>$ node --no-warnings\\n&gt; var p = process.on(&#39;warning&#39;, (warning) =&gt; console.warn(&#39;Do not do that!&#39;));\\n&gt; event.defaultMaxListeners = 1;\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; Do not do that!\\n</code></pre><p>The <code>--trace-warnings</code> command-line option can be used to have the default\\nconsole output for warnings include the full stack trace of the warning.</p>\\n\",\n                  \"modules\": [\n                    {\n                      \"textRaw\": \"Emitting custom warnings\",\n                      \"name\": \"emitting_custom_warnings\",\n                      \"desc\": \"<p>The [<code>process.emitWarning()</code>][process_emit_warning] method can be used to issue\\ncustom or application specific warnings.</p>\\n<pre><code class=\\\"lang-js\\\">// Emit a warning using a string...\\nprocess.emitWarning(&#39;Something happened!&#39;);\\n  // Prints: (node 12345) Warning: Something happened!\\n\\n// Emit a warning using an object...\\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\\n  // Prints: (node 12345) CustomWarning: Something happened!\\n\\n// Emit a warning using a custom Error object...\\nclass CustomWarning extends Error {\\n  constructor(message) {\\n    super(message);\\n    this.name = &#39;CustomWarning&#39;;\\n    Error.captureStackTrace(this, CustomWarning);\\n  }\\n}\\nconst myWarning = new CustomWarning(&#39;Something happened!&#39;);\\nprocess.emitWarning(myWarning);\\n  // Prints: (node 12345) CustomWarning: Something happened!\\n</code></pre>\\n\",\n                      \"type\": \"module\",\n                      \"displayName\": \"Emitting custom warnings\"\n                    },\n                    {\n                      \"textRaw\": \"Emitting custom deprecation warnings\",\n                      \"name\": \"emitting_custom_deprecation_warnings\",\n                      \"desc\": \"<p>Custom deprecation warnings can be emitted by setting the <code>name</code> of a custom\\nwarning to <code>DeprecationWarning</code>. For instance:</p>\\n<pre><code class=\\\"lang-js\\\">process.emitWarning(&#39;This API is deprecated&#39;, &#39;DeprecationWarning&#39;);\\n</code></pre>\\n<p>Or,</p>\\n<pre><code class=\\\"lang-js\\\">const err = new Error(&#39;This API is deprecated&#39;);\\nerr.name = &#39;DeprecationWarning&#39;;\\nprocess.emitWarning(err);\\n</code></pre>\\n<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will\\ncause custom deprecation warnings to be thrown as exceptions.</p>\\n<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom\\ndeprecation to be printed to <code>stderr</code> along with the stack trace.</p>\\n<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting\\nof the custom deprecation.</p>\\n<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name\\n<code>DeprecationWarning</code>.</p>\\n\",\n                      \"type\": \"module\",\n                      \"displayName\": \"Emitting custom deprecation warnings\"\n                    }\n                  ],\n                  \"params\": []\n                },\n                {\n                  \"textRaw\": \"Signal Events\",\n                  \"name\": \"SIGINT, SIGHUP, etc.\",\n                  \"type\": \"event\",\n                  \"desc\": \"<p>Signal events will be emitted when the Node.js process receives a signal. Please\\nrefer to sigaction(2) for a listing of standard POSIX signal names such as\\n<code>SIGINT</code>, <code>SIGHUP</code>, etc.</p>\\n<p>The name of each event will be the uppercase common name for the signal (e.g.\\n<code>&#39;SIGINT&#39;</code> for <code>SIGINT</code> signals).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">// Begin reading from stdin so the process does not exit.\\nprocess.stdin.resume();\\n\\nprocess.on(&#39;SIGINT&#39;, () =&gt; {\\n  console.log(&#39;Received SIGINT.  Press Control-D to exit.&#39;);\\n});\\n</code></pre>\\n<p><em>Note</em>: An easy way to send the <code>SIGINT</code> signal is with <code>&lt;Ctrl&gt;-C</code> in most\\nterminal programs.</p>\\n<p>It is important to take note of the following:</p>\\n<ul>\\n<li><code>SIGUSR1</code> is reserved by Node.js to start the debugger.  It&#39;s possible to\\ninstall a listener but doing so will <em>not</em> stop the debugger from starting.</li>\\n<li><code>SIGTERM</code> and <code>SIGINT</code> have default handlers on non-Windows platforms that\\nresets the terminal mode before exiting with code <code>128 + signal number</code>. If\\none of these signals has a listener installed, its default behavior will be\\nremoved (Node.js will no longer exit).</li>\\n<li><code>SIGPIPE</code> is ignored by default. It can have a listener installed.</li>\\n<li><code>SIGHUP</code> is generated on Windows when the console window is closed, and on\\nother platforms under various similar conditions, see signal(7). It can have a\\nlistener installed, however Node.js will be unconditionally terminated by\\nWindows about 10 seconds later. On non-Windows platforms, the default\\nbehavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been\\ninstalled its default behavior will be removed.</li>\\n<li><code>SIGTERM</code> is not supported on Windows, it can be listened on.</li>\\n<li><code>SIGINT</code> from the terminal is supported on all platforms, and can usually be\\ngenerated with <code>CTRL+C</code> (though this may be configurable). It is not generated\\nwhen terminal raw mode is enabled.</li>\\n<li><code>SIGBREAK</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on\\nnon-Windows platforms it can be listened on, but there is no way to send or\\ngenerate it.</li>\\n<li><code>SIGWINCH</code> is delivered when the console has been resized. On Windows, this\\nwill only happen on write to the console when the cursor is being moved, or\\nwhen a readable tty is used in raw mode.</li>\\n<li><code>SIGKILL</code> cannot have a listener installed, it will unconditionally terminate\\nNode.js on all platforms.</li>\\n<li><code>SIGSTOP</code> cannot have a listener installed.</li>\\n</ul>\\n<p><em>Note</em>: Windows does not support sending signals, but Node.js offers some\\nemulation with [<code>process.kill()</code>][], and [<code>ChildProcess.kill()</code>][]. Sending\\nsignal <code>0</code> can be used to test for the existence of a process. Sending <code>SIGINT</code>,\\n<code>SIGTERM</code>, and <code>SIGKILL</code> cause the unconditional termination of the target\\nprocess.</p>\\n\",\n                  \"params\": []\n                }\n              ],\n              \"type\": \"module\",\n              \"displayName\": \"Process Events\"\n            },\n            {\n              \"textRaw\": \"Exit Codes\",\n              \"name\": \"exit_codes\",\n              \"desc\": \"<p>Node.js will normally exit with a <code>0</code> status code when no more async\\noperations are pending.  The following status codes are used in other\\ncases:</p>\\n<ul>\\n<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,\\nand it was not handled by a domain or an [<code>&#39;uncaughtException&#39;</code>][] event\\nhandler.</li>\\n<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>\\n<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code\\ninternal in Node.js&#39;s bootstrapping process caused a parse error.  This\\nis extremely rare, and generally can only happen during development\\nof Node.js itself.</li>\\n<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript\\nsource code internal in Node.js&#39;s bootstrapping process failed to\\nreturn a function value when evaluated.  This is extremely rare, and\\ngenerally can only happen during development of Node.js itself.</li>\\n<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.\\nTypically a message will be printed to stderr with the prefix <code>FATAL\\nERROR</code>.</li>\\n<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an\\nuncaught exception, but the internal fatal exception handler\\nfunction was somehow set to a non-function, and could not be called.</li>\\n<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an\\nuncaught exception, and the internal fatal exception handler\\nfunction itself threw an error while attempting to handle it.  This\\ncan happen, for example, if a [<code>&#39;uncaughtException&#39;</code>][] or\\n<code>domain.on(&#39;error&#39;)</code> handler throws an error.</li>\\n<li><code>8</code> - Unused.  In previous versions of Node.js, exit code 8 sometimes\\nindicated an uncaught exception.</li>\\n<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,\\nor an option requiring a value was provided without a value.</li>\\n<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript\\nsource code internal in Node.js&#39;s bootstrapping process threw an error\\nwhen the bootstrapping function was called.  This is extremely rare,\\nand generally can only happen during development of Node.js itself.</li>\\n<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--debug</code> and/or <code>--debug-brk</code>\\noptions were set, but an invalid port number was chosen.</li>\\n<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as\\n<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the\\nvalue of the signal code.  This is a standard Unix practice, since\\nexit codes are defined to be 7-bit integers, and signal exits set\\nthe high-order bit, and then contain the value of the signal code.</li>\\n</ul>\\n<!-- [end-include:process.md] -->\\n<!-- [start-include:punycode.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Exit Codes\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"process.abort()\",\n              \"type\": \"method\",\n              \"name\": \"abort\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\\ngenerate a core file.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.chdir(directory)\",\n              \"type\": \"method\",\n              \"name\": \"chdir\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.17\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`directory` {String} \",\n                      \"name\": \"directory\",\n                      \"type\": \"String\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"directory\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.chdir()</code> method changes the current working directory of the\\nNode.js process or throws an exception if doing so fails (for instance, if\\nthe specified <code>directory</code> does not exist).</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Starting directory: ${process.cwd()}`);\\ntry {\\n  process.chdir(&#39;/tmp&#39;);\\n  console.log(`New directory: ${process.cwd()}`);\\n}\\ncatch (err) {\\n  console.log(`chdir: ${err}`);\\n}\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.cpuUsage([previousValue])\",\n              \"type\": \"method\",\n              \"name\": \"cpuUsage\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.1.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`previousValue` {Array} A previous return value from calling `process.cpuUsage()` \",\n                      \"name\": \"previousValue\",\n                      \"type\": \"Array\",\n                      \"desc\": \"A previous return value from calling `process.cpuUsage()`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"previousValue\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\\nvalues are microsecond values (millionth of a second). These values measure time\\nspent in user and system code respectively, and may end up being greater than\\nactual elapsed time if multiple CPU cores are performing work for this process.</p>\\n<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\\nargument to the function, to get a diff reading.</p>\\n<pre><code class=\\\"lang-js\\\">const startUsage = process.cpuUsage();\\n// { user: 38579, system: 6986 }\\n\\n// spin the CPU for 500 milliseconds\\nconst now = Date.now();\\nwhile (Date.now() - now &lt; 500);\\n\\nconsole.log(process.cpuUsage(startUsage));\\n// { user: 514883, system: 11226 }\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.cwd()\",\n              \"type\": \"method\",\n              \"name\": \"cwd\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.8\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\\nprocess.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Current directory: ${process.cwd()}`);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.disconnect()\",\n              \"type\": \"method\",\n              \"name\": \"disconnect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.2\"\n                ]\n              },\n              \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>process.disconnect()</code> method will close the\\nIPC channel to the parent process, allowing the child process to exit gracefully\\nonce there are no other connections keeping it alive.</p>\\n<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent\\nprocess&#39;s [<code>ChildProcess.disconnect()</code>][].</p>\\n<p>If the Node.js process was not spawned with an IPC channel,\\n<code>process.disconnect()</code> will be <code>undefined</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.emitWarning(warning[, name][, ctor])\",\n              \"type\": \"method\",\n              \"name\": \"emitWarning\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`warning` {String | Error} The warning to emit. \",\n                      \"name\": \"warning\",\n                      \"type\": \"String | Error\",\n                      \"desc\": \"The warning to emit.\"\n                    },\n                    {\n                      \"textRaw\": \"`name` {String} When `warning` is a String, `name` is the name to use for the warning. Default: `Warning`. \",\n                      \"name\": \"name\",\n                      \"type\": \"String\",\n                      \"desc\": \"When `warning` is a String, `name` is the name to use for the warning. Default: `Warning`.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`ctor` {Function} When `warning` is a String, `ctor` is an optional function used to limit the generated stack trace. Default `process.emitWarning` \",\n                      \"name\": \"ctor\",\n                      \"type\": \"Function\",\n                      \"desc\": \"When `warning` is a String, `ctor` is an optional function used to limit the generated stack trace. Default `process.emitWarning`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"warning\"\n                    },\n                    {\n                      \"name\": \"name\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"ctor\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\\nspecific process warnings. These can be listened for by adding a handler to the\\n[<code>process.on(&#39;warning&#39;)</code>][process_warning] event.</p>\\n<pre><code class=\\\"lang-js\\\">// Emit a warning using a string...\\nprocess.emitWarning(&#39;Something happened!&#39;);\\n  // Emits: (node: 56338) Warning: Something happened!\\n</code></pre>\\n<pre><code>// Emit a warning using a string and a name...\\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\\n  // Emits: (node:56338) CustomWarning: Something Happened!\\n</code></pre><p>In each of the previous examples, an <code>Error</code> object is generated internally by\\n<code>process.emitWarning()</code> and passed through to the\\n[<code>process.on(&#39;warning&#39;)</code>][process_warning] event.</p>\\n<pre><code>process.on(&#39;warning&#39;, (warning) =&gt; {\\n  console.warn(warning.name);\\n  console.warn(warning.message);\\n  console.warn(warning.stack);\\n});\\n</code></pre><p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\\n<code>process.on(&#39;warning&#39;)</code> event handler unmodified (and the optional <code>name</code>\\nand <code>ctor</code> arguments will be ignored):</p>\\n<pre><code>// Emit a warning using an Error object...\\nconst myWarning = new Error(&#39;Warning! Something happened!&#39;);\\nmyWarning.name = &#39;CustomWarning&#39;;\\n\\nprocess.emitWarning(myWarning);\\n  // Emits: (node:56338) CustomWarning: Warning! Something Happened!\\n</code></pre><p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\\nobject.</p>\\n<p>Note that while process warnings use <code>Error</code> objects, the process warning\\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>\\n<p>The following additional handling is implemented if the warning <code>name</code> is\\n<code>DeprecationWarning</code>:</p>\\n<ul>\\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\\nwarning is thrown as an exception rather than being emitted as an event.</li>\\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\\nwarning is suppressed.</li>\\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\\n</ul>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"Avoiding duplicate warnings\",\n                  \"name\": \"avoiding_duplicate_warnings\",\n                  \"desc\": \"<p>As a best practice, warnings should be emitted only once per process. To do\\nso, it is recommended to place the <code>emitWarning()</code> behind a simple boolean\\nflag as illustrated in the example below:</p>\\n<pre><code>var warned = false;\\nfunction emitMyWarning() {\\n  if (!warned) {\\n    process.emitWarning(&#39;Only warn once!&#39;);\\n    warned = true;\\n  }\\n}\\nemitMyWarning();\\n  // Emits: (node: 56339) Warning: Only warn once!\\nemitMyWarning();\\n  // Emits nothing\\n</code></pre>\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Avoiding duplicate warnings\"\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.exit([code])\",\n              \"type\": \"method\",\n              \"name\": \"exit\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.13\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`code` {Integer} The exit code. Defaults to `0`. \",\n                      \"name\": \"code\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"The exit code. Defaults to `0`.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"code\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.exit()</code> method instructs Node.js to terminate the process as\\nquickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,\\nexit uses either the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if\\nspecified.</p>\\n<p>To exit with a &#39;failure&#39; code:</p>\\n<pre><code class=\\\"lang-js\\\">process.exit(1);\\n</code></pre>\\n<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>\\n<p>It is important to note that calling <code>process.exit()</code> will force the process to\\nexit as quickly as possible <em>even if there are still asynchronous operations\\npending</em> that have not yet completed fully, <em>including</em> I/O operations to\\n<code>process.stdout</code> and <code>process.stderr</code>.</p>\\n<p>In most situations, it is not actually necessary to call <code>process.exit()</code>\\nexplicitly. The Node.js process will exit on it&#39;s own <em>if there is no additional\\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\\ntell the process which exit code to use when the process exits gracefully.</p>\\n<p>For instance, the following example illustrates a <em>misuse</em> of the\\n<code>process.exit()</code> method that could lead to data printed to stdout being\\ntruncated and lost:</p>\\n<pre><code class=\\\"lang-js\\\">// This is an example of what *not* to do:\\nif (someConditionNotMet()) {\\n  printUsageToStdout();\\n  process.exit(1);\\n}\\n</code></pre>\\n<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js\\nare usually <em>non-blocking</em> and may occur over multiple ticks of the Node.js\\nevent loop.\\nCalling <code>process.exit()</code>, however, forces the process to exit <em>before</em> those\\nadditional writes to <code>stdout</code> can be performed.</p>\\n<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\\nscheduling any additional work for the event loop:</p>\\n<pre><code class=\\\"lang-js\\\">// How to properly set the exit code while letting\\n// the process exit gracefully.\\nif (someConditionNotMet()) {\\n  printUsageToStdout();\\n  process.exitCode = 1;\\n}\\n</code></pre>\\n<p>If it is necessary to terminate the Node.js process due to an error condition,\\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\\nis safer than calling <code>process.exit()</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.getegid()\",\n              \"type\": \"method\",\n              \"name\": \"getegid\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.0.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.getegid()</code> method returns the numerical effective group identity\\nof the Node.js process. (See getegid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getegid) {\\n  console.log(`Current gid: ${process.getegid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows\\nor Android)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.geteuid()\",\n              \"type\": \"method\",\n              \"name\": \"geteuid\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.0.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\\nthe process. (See geteuid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.geteuid) {\\n  console.log(`Current uid: ${process.geteuid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.getgid()\",\n              \"type\": \"method\",\n              \"name\": \"getgid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.31\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.getgid()</code> method returns the numerical group identity of the\\nprocess. (See getgid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getgid) {\\n  console.log(`Current gid: ${process.getgid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.getgroups()\",\n              \"type\": \"method\",\n              \"name\": \"getgroups\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.4\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.getgroups()</code> method returns an array with the supplementary group\\nIDs. POSIX leaves it unspecified if the effective group ID is included but\\nNode.js ensures it always is.</p>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.getuid()\",\n              \"type\": \"method\",\n              \"name\": \"getuid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.28\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\\n(See getuid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getuid) {\\n  console.log(`Current uid: ${process.getuid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.hrtime([time])\",\n              \"type\": \"method\",\n              \"name\": \"hrtime\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.6\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.hrtime()</code> method returns the current high-resolution real time in a\\n<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must\\nbe the result of a previous <code>process.hrtime()</code> call (and therefore, a real time\\nin a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff\\nwith the current time. These times are relative to an arbitrary time in the\\npast, and not related to the time of day and therefore not subject to clock\\ndrift. The primary use is for measuring performance between intervals.</p>\\n<p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for\\ncalculating an amount of time passed between calls:</p>\\n<pre><code class=\\\"lang-js\\\">var time = process.hrtime();\\n// [ 1800216, 25 ]\\n\\nsetTimeout(() =&gt; {\\n  var diff = process.hrtime(time);\\n  // [ 1, 552 ]\\n\\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\\n  // benchmark took 1000000527 nanoseconds\\n}, 1000);\\n</code></pre>\\n<p>Constructing an array by some method other than calling <code>process.hrtime()</code> and\\npassing the result to process.hrtime() will result in undefined behavior.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"time\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.initgroups(user, extra_group)\",\n              \"type\": \"method\",\n              \"name\": \"initgroups\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.4\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`user` {String|number} The user name or numeric identifier. \",\n                      \"name\": \"user\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"The user name or numeric identifier.\"\n                    },\n                    {\n                      \"textRaw\": \"`extra_group` {String|number} A group name or numeric identifier. \",\n                      \"name\": \"extra_group\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"A group name or numeric identifier.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"user\"\n                    },\n                    {\n                      \"name\": \"extra_group\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\\nthe group access list, using all groups of which the user is a member. This is\\na privileged operation that requires that the Node.js process either have <code>root</code>\\naccess or the <code>CAP_SETGID</code> capability.</p>\\n<p>Note that care must be taken when dropping privileges. Example:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.getgroups());         // [ 0 ]\\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\\nprocess.setgid(1000);                     // drop root gid\\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.kill(pid[, signal])\",\n              \"type\": \"method\",\n              \"name\": \"kill\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.0.6\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`pid` {number} A process ID \",\n                      \"name\": \"pid\",\n                      \"type\": \"number\",\n                      \"desc\": \"A process ID\"\n                    },\n                    {\n                      \"textRaw\": \"`signal` {String|number} The signal to send, either as a string or number. Defaults to `'SIGTERM'`. \",\n                      \"name\": \"signal\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"The signal to send, either as a string or number. Defaults to `'SIGTERM'`.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"pid\"\n                    },\n                    {\n                      \"name\": \"signal\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\\n<code>pid</code>.</p>\\n<p>Signal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See [Signal Events][]\\nand kill(2) for more information.</p>\\n<p>This method will throw an error if the target <code>pid</code> does not exist. As a special\\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\\ngroup.</p>\\n<p><em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really\\njust a signal sender, like the <code>kill</code> system call.  The signal sent may do\\nsomething other than kill the target process.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;SIGHUP&#39;, () =&gt; {\\n  console.log(&#39;Got SIGHUP signal.&#39;);\\n});\\n\\nsetTimeout(() =&gt; {\\n  console.log(&#39;Exiting.&#39;);\\n  process.exit(0);\\n}, 100);\\n\\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\\n</code></pre>\\n<p><em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\\ndebugger, see [Signal Events][].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.memoryUsage()\",\n              \"type\": \"method\",\n              \"name\": \"memoryUsage\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.16\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\\nof the Node.js process measured in bytes.</p>\\n<p>For example, the code:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconsole.log(util.inspect(process.memoryUsage()));\\n</code></pre>\\n<p>Will generate:</p>\\n<pre><code class=\\\"lang-js\\\">{ \\n  rss: 4935680,\\n  heapTotal: 1826816,\\n  heapUsed: 650472 \\n}\\n</code></pre>\\n<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.nextTick(callback[, arg][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"nextTick\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.26\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\"\n                    },\n                    {\n                      \"textRaw\": \"`[, arg][, ...]` {any} Additional arguments to pass when invoking the `callback` \",\n                      \"name\": \"[,\",\n                      \"desc\": \"arg][, ...]` {any} Additional arguments to pass when invoking the `callback`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\"\n                    },\n                    {\n                      \"name\": \"arg\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\\nOnce the current turn of the event loop turn runs to completion, all callbacks\\ncurrently in the next tick queue will be called.</p>\\n<p>This is <em>not</em> a simple alias to [<code>setTimeout(fn, 0)</code>][], it&#39;s much more\\nefficient.  It runs before any additional I/O events (including\\ntimers) fire in subsequent ticks of the event loop.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(&#39;start&#39;);\\nprocess.nextTick(() =&gt; {\\n  console.log(&#39;nextTick callback&#39;);\\n});\\nconsole.log(&#39;scheduled&#39;);\\n// Output:\\n// start\\n// scheduled\\n// nextTick callback\\n</code></pre>\\n<p>This is important when developing APIs in order to give users the opportunity\\nto assign event handlers <em>after</em> an object has been constructed but before any\\nI/O has occurred:</p>\\n<pre><code class=\\\"lang-js\\\">function MyThing(options) {\\n  this.setupOptions(options);\\n\\n  process.nextTick(() =&gt; {\\n    this.startDoingStuff();\\n  });\\n}\\n\\nvar thing = new MyThing();\\nthing.getReadyForStuff();\\n\\n// thing.startDoingStuff() gets called now, not before.\\n</code></pre>\\n<p>It is very important for APIs to be either 100% synchronous or 100%\\nasynchronous.  Consider this example:</p>\\n<pre><code class=\\\"lang-js\\\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\\nfunction maybeSync(arg, cb) {\\n  if (arg) {\\n    cb();\\n    return;\\n  }\\n\\n  fs.stat(&#39;file&#39;, cb);\\n}\\n</code></pre>\\n<p>This API is hazardous because in the following case:</p>\\n<pre><code class=\\\"lang-js\\\">maybeSync(true, () =&gt; {\\n  foo();\\n});\\nbar();\\n</code></pre>\\n<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>\\n<p>The following approach is much better:</p>\\n<pre><code class=\\\"lang-js\\\">function definitelyAsync(arg, cb) {\\n  if (arg) {\\n    process.nextTick(cb);\\n    return;\\n  }\\n\\n  fs.stat(&#39;file&#39;, cb);\\n}\\n</code></pre>\\n<p><em>Note</em>: the next tick queue is completely drained on each pass of the\\nevent loop <strong>before</strong> additional I/O is processed.  As a result,\\nrecursively setting nextTick callbacks will block any I/O from\\nhappening, just like a <code>while(true);</code> loop.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.send(message[, sendHandle[, options]][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"send\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.9\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`message` {Object} \",\n                      \"name\": \"message\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`sendHandle` {Handle object} \",\n                      \"name\": \"sendHandle\",\n                      \"type\": \"Handle object\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"message\"\n                    },\n                    {\n                      \"name\": \"sendHandle\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\\nused to send messages to the parent process. Messages will be received as a\\n[<code>&#39;message&#39;</code>][] event on the parent&#39;s [<code>ChildProcess</code>][] object.</p>\\n<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\\n<code>undefined</code>.</p>\\n<p><em>Note</em>: This function uses [<code>JSON.stringify()</code>][] internally to serialize the\\n<code>message</code>.*</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.setegid(id)\",\n              \"type\": \"method\",\n              \"name\": \"setegid\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`id` {String|number} A group name or ID \",\n                      \"name\": \"id\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"A group name or ID\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.setegid()</code> method sets the effective group identity of the process.\\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\\nname string. If a group name is specified, this method blocks while resolving\\nthe associated a numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getegid &amp;&amp; process.setegid) {\\n  console.log(`Current gid: ${process.getegid()}`);\\n  try {\\n    process.setegid(501);\\n    console.log(`New gid: ${process.getegid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set gid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.seteuid(id)\",\n              \"type\": \"method\",\n              \"name\": \"seteuid\",\n              \"meta\": {\n                \"added\": [\n                  \"v2.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`id` {String|number} A user name or ID \",\n                      \"name\": \"id\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"A user name or ID\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\\nstring.  If a username is specified, the method blocks while resolving the\\nassociated numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.geteuid &amp;&amp; process.seteuid) {\\n  console.log(`Current uid: ${process.geteuid()}`);\\n  try {\\n    process.seteuid(501);\\n    console.log(`New uid: ${process.geteuid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set uid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.setgid(id)\",\n              \"type\": \"method\",\n              \"name\": \"setgid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.31\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`id` {String|number} The group name or ID \",\n                      \"name\": \"id\",\n                      \"type\": \"String|number\",\n                      \"desc\": \"The group name or ID\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.setgid()</code> method sets the group identity of the process. (See\\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\\nstring. If a group name is specified, this method blocks while resolving the\\nassociated numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getgid &amp;&amp; process.setgid) {\\n  console.log(`Current gid: ${process.getgid()}`);\\n  try {\\n    process.setgid(501);\\n    console.log(`New gid: ${process.getgid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set gid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.setgroups(groups)\",\n              \"type\": \"method\",\n              \"name\": \"setgroups\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.4\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`groups` {Array} \",\n                      \"name\": \"groups\",\n                      \"type\": \"Array\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"groups\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\\nNode.js proess. This is a privileged operation that requires the Node.js process\\nto have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>\\n<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.setuid(id)\",\n              \"type\": \"method\",\n              \"name\": \"setuid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.28\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.setuid(id) method sets the user identity of the process. (See\\nsetuid(2).)  The</code>id` can be passed as either a numeric ID or a username string.\\nIf a username is specified, the method blocks while resolving the associated\\nnumeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getuid &amp;&amp; process.setuid) {\\n  console.log(`Current uid: ${process.getuid()}`);\\n  try {\\n    process.setuid(501);\\n    console.log(`New uid: ${process.getuid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set uid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.umask([mask])\",\n              \"type\": \"method\",\n              \"name\": \"umask\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.19\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`mask` {number} \",\n                      \"name\": \"mask\",\n                      \"type\": \"number\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"mask\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\\ncreation mask. Child processes inherit the mask from the parent process. The old\\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\\nmask.</p>\\n<pre><code class=\\\"lang-js\\\">const newmask = 0o022;\\nconst oldmask = process.umask(newmask);\\nconsole.log(\\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\\n);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.uptime()\",\n              \"type\": \"method\",\n              \"name\": \"uptime\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\\nprocess has been running.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"process.arch\",\n              \"name\": \"arch\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.arch</code> property returns a String identifying the processor\\narchitecture that the Node.js process is currently running on. For instance\\n<code>&#39;arm&#39;</code>, <code>&#39;ia32&#39;</code>, or <code>&#39;x64&#39;</code>.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This processor architecture is ${process.arch}`);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.argv\",\n              \"name\": \"argv\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.27\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.argv</code> property returns a array containing the command line\\narguments passed when the Node.js process was launched. The first element will\\nbe &#39;node&#39;, the second element will be the name of the JavaScript file. The\\nremaining elements will be any additional command line arguments.</p>\\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">// print process.argv\\nprocess.argv.forEach((val, index) =&gt; {\\n  console.log(`${index}: ${val}`);\\n});\\n</code></pre>\\n<p>Launching the Node.js process as:</p>\\n<pre><code>$ node process-2.js one two=three four\\n</code></pre><p>Would generate the output:</p>\\n<pre><code class=\\\"lang-text\\\">0: node\\n1: /Users/mjr/work/node/process-2.js\\n2: one\\n3: two=three\\n4: four\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.config\",\n              \"name\": \"config\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.config</code> property returns an Object containing the JavaScript\\nrepresentation of the configure options used to compile the current Node.js\\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\\nrunning the <code>./configure</code> script.</p>\\n<p>An example of the possible output looks like:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  target_defaults:\\n   { cflags: [],\\n     default_configuration: &#39;Release&#39;,\\n     defines: [],\\n     include_dirs: [],\\n     libraries: [] },\\n  variables:\\n   {\\n     host_arch: &#39;x64&#39;,\\n     node_install_npm: &#39;true&#39;,\\n     node_prefix: &#39;&#39;,\\n     node_shared_cares: &#39;false&#39;,\\n     node_shared_http_parser: &#39;false&#39;,\\n     node_shared_libuv: &#39;false&#39;,\\n     node_shared_zlib: &#39;false&#39;,\\n     node_use_dtrace: &#39;false&#39;,\\n     node_use_openssl: &#39;true&#39;,\\n     node_shared_openssl: &#39;false&#39;,\\n     strict_aliasing: &#39;true&#39;,\\n     target_arch: &#39;x64&#39;,\\n     v8_use_snapshot: &#39;true&#39;\\n   }\\n}\\n</code></pre>\\n<p><em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are\\nexisting modules in the ecosystem that are known to extend, modify, or entirely\\nreplace the value of <code>process.config</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.connected\",\n              \"name\": \"connected\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.2\"\n                ]\n              },\n              \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>process.connected</code> property will return\\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\\n<code>process.disconnect()</code> is called.</p>\\n<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\\nover the IPC channel using <code>process.send()</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.env\",\n              \"name\": \"env\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.27\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.env</code> property returns an object containing the user environment.\\nSee environ(7).</p>\\n<p>An example of this object looks like:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  TERM: &#39;xterm-256color&#39;,\\n  SHELL: &#39;/usr/local/bin/bash&#39;,\\n  USER: &#39;maciej&#39;,\\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\\n  PWD: &#39;/Users/maciej&#39;,\\n  EDITOR: &#39;vim&#39;,\\n  SHLVL: &#39;1&#39;,\\n  HOME: &#39;/Users/maciej&#39;,\\n  LOGNAME: &#39;maciej&#39;,\\n  _: &#39;/usr/local/bin/node&#39; \\n}\\n</code></pre>\\n<p>It is possible to modify this object, but such modifications will not be\\nreflected outside the Node.js process. In other words, the following example\\nwould not work:</p>\\n<pre><code>$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\\n</code></pre><p>While the following will:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.foo = &#39;bar&#39;;\\nconsole.log(process.env.foo);\\n</code></pre>\\n<p>Assigning a property on <code>process.env</code> will implicitly convert the value\\nto a string.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.test = null;\\nconsole.log(process.env.test);\\n// =&gt; &#39;null&#39;\\nprocess.env.test = undefined;\\nconsole.log(process.env.test);\\n// =&gt; &#39;undefined&#39;\\n</code></pre>\\n<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.TEST = 1;\\ndelete process.env.TEST;\\nconsole.log(process.env.TEST);\\n// =&gt; undefined\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.execArgv\",\n              \"name\": \"execArgv\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.execArgv&#39; property returns the set of Node.js-specific command-line\\noptions passed when the Node.js process was launched. These options do not\\nappear in the array returned by the [</code>process.argv`][] property, and do not\\ninclude the Node.js executable, the name of the script, or any options following\\nthe script name. These options are useful in order to spawn child processes with\\nthe same execution environment as the parent.</p>\\n<p>For example:</p>\\n<pre><code>$ node --harmony script.js --version\\n</code></pre><p>Results in <code>process.execArgv</code>:</p>\\n<pre><code class=\\\"lang-js\\\">[&#39;--harmony&#39;]\\n</code></pre>\\n<p>And <code>process.argv</code>:</p>\\n<pre><code class=\\\"lang-js\\\">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.execPath\",\n              \"name\": \"execPath\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.100\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.execPath</code> property returns the absolute pathname of the executable\\nthat started the Node.js process.</p>\\n<p>For example:</p>\\n<pre><code>/usr/local/bin/node\\n</code></pre>\"\n            },\n            {\n              \"textRaw\": \"process.exitCode\",\n              \"name\": \"exitCode\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.8\"\n                ]\n              },\n              \"desc\": \"<p>A number which will be the process exit code, when the process either\\nexits gracefully, or is exited via [<code>process.exit()</code>][] without specifying\\na code.</p>\\n<p>Specifying a code to [<code>process.exit(code)</code>][<code>process.exit()</code>] will override any\\nprevious setting of <code>process.exitCode</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.mainModule\",\n              \"name\": \"mainModule\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.17\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.mainModule</code> property provides an alternative way of retrieving\\n[<code>require.main</code>][]. The difference is that if the main module changes at\\nruntime, [<code>require.main</code>][] may still refer to the original main module in\\nmodules that were required before the change occurred. Generally it&#39;s\\nsafe to assume that the two refer to the same module.</p>\\n<p>As with [<code>require.main</code>][], <code>process.mainModule</code> will be <code>undefined</code> if there\\nis no entry script.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.pid\",\n              \"name\": \"pid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.15\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.pid</code> property returns the PID of the process.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This process is pid ${process.pid}`);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.platform\",\n              \"name\": \"platform\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.16\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.platform</code> property returns a string identifying the operating\\nsystem platform on which the Node.js process is running. For instance\\n<code>&#39;darwin&#39;</code>, <code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This platform is ${process.platform}`);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.release\",\n              \"name\": \"release\",\n              \"meta\": {\n                \"added\": [\n                  \"v3.0.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.release</code> property returns an Object containing metadata related to\\nthe current release, including URLs for the source tarball and headers-only\\ntarball.</p>\\n<p><code>process.release</code> contains the following properties:</p>\\n<ul>\\n<li><code>name</code> {String} A value that will always be <code>&#39;node&#39;</code> for Node.js. For\\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\\n<li><code>sourceUrl</code> {String} an absolute URL pointing to a <code>_.tar.gz_</code> file containing\\nthe source code of the current release.</li>\\n<li><code>headersUrl</code>{String} an absolute URL pointing to a <code>_.tar.gz_</code> file containing\\nonly the source header files for the current release. This file is\\nsignificantly smaller than the full source file and can be used for compiling\\nNode.js native add-ons.</li>\\n<li><code>libUrl</code> {String} an absolute URL pointing to a <code>_node.lib_</code> file matching the\\narchitecture and version of the current release. This file is used for\\ncompiling Node.js native add-ons. <em>This property is only present on Windows\\nbuilds of Node.js and will be missing on all other platforms.</em></li>\\n<li><code>lts</code> {String} a string label identifying the [LTS][] label for this release.\\nIf the Node.js release is not an LTS release, this will be <code>undefined</code>.</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  name: &#39;node&#39;,\\n  lts: &#39;Argon&#39;,\\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\\n}\\n</code></pre>\\n<p>In custom builds from non-release versions of the source tree, only the\\n<code>name</code> property may be present. The additional properties should not be\\nrelied upon to exist.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.stderr\",\n              \"name\": \"stderr\",\n              \"desc\": \"<p>The <code>process.stderr</code> property returns a [Writable][] stream equivalent to or\\nassociated with <code>stderr</code> (fd <code>2</code>).</p>\\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\\nthat they cannot be closed (calling [<code>end()</code>][] will throw an Error), they never\\nemit the [<code>&#39;finish&#39;</code>][] event, and writes can block when output is redirected to\\na file (although disks are fast and operating systems normally employ write-back\\ncaching so it should be a very rare occurrence indeed.)</p>\\n<p>Additionally, <code>process.stderr</code> and <code>process.stdout</code> are blocking when outputting\\nto TTYs (terminals) on OS X as a workaround for the OS&#39;s very small, 1kb\\nbuffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.stdin\",\n              \"name\": \"stdin\",\n              \"desc\": \"<p>The <code>process.stdin</code> property returns a [Readable][] stream equivalent to or\\nassociated with <code>stdin</code> (fd <code>0</code>).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.stdin.setEncoding(&#39;utf8&#39;);\\n\\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\\n  var chunk = process.stdin.read();\\n  if (chunk !== null) {\\n    process.stdout.write(`data: ${chunk}`);\\n  }\\n});\\n\\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\\n  process.stdout.write(&#39;end&#39;);\\n});\\n</code></pre>\\n<p>As a [Readable][] stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\\nis compatible with scripts written for Node.js prior to v0.10.\\nFor more information see [Stream compatibility][].</p>\\n<p><em>Note</em>: In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.stdout\",\n              \"name\": \"stdout\",\n              \"desc\": \"<p>The <code>process.stdout</code> propety returns a [Writable][] stream equivalent to or\\nassociated with <code>stdout</code> (fd <code>1</code>).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">console.log = (msg) =&gt; {\\n  process.stdout.write(`${msg}\\\\n`);\\n};\\n</code></pre>\\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\\nthat they cannot be closed (calling [<code>end()</code>][] will throw an Error), they never\\nemit the [<code>&#39;finish&#39;</code>][] event and that writes can block when output is\\nredirected to a file (although disks are fast and operating systems normally\\nemploy write-back caching so it should be a very rare occurrence indeed.)</p>\\n<p>To check if Node.js is being run in a TTY context, read the <code>isTTY</code> property\\non <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:</p>\\n\",\n              \"properties\": [\n                {\n                  \"textRaw\": \"TTY Terminals and `process.stdout`\",\n                  \"name\": \"stdout`\",\n                  \"desc\": \"<p>The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting\\nto TTYs (terminals) on OS X as a workaround for the operating system&#39;s small,\\n1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\\n<p>To check if Node.js is being run in a [TTY][] context, check the <code>isTTY</code>\\nproperty on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>.</p>\\n<p>For instance:</p>\\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\\ntrue\\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\\nfalse\\n\\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\\ntrue\\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\\nfalse\\n</code></pre><p>See the [TTY][] documentation for more information.</p>\\n\"\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"process.title\",\n              \"name\": \"title\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.104\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.title</code> property returns the current process title (i.e. returns\\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\\nthe current value of <code>ps</code>.</p>\\n<p><em>Note</em>: When a new value is assigned, different platforms will impose different\\nmaximum length restrictions on the title. Usually such restrictions are quite\\nlimited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size\\nof the binary name plus the length of the command line arguments because setting\\nthe <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\\nallowed for longer process title strings by also overwriting the <code>environ</code>\\nmemory but that was potentially insecure and confusing in some (rather obscure)\\ncases.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"process.version\",\n              \"name\": \"version\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.3\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.version</code> property returns the Node.js version string.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Version: ${process.version}`);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"process.versions\",\n              \"name\": \"versions\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.2.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>process.versions</code> property returns an object listing the version strings of\\nNode.js and its dependencies.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.versions);\\n</code></pre>\\n<p>Will generate output similar to:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  http_parser: &#39;2.3.0&#39;,\\n  node: &#39;1.1.1&#39;,\\n  v8: &#39;4.1.0.14&#39;,\\n  uv: &#39;1.3.0&#39;,\\n  zlib: &#39;1.2.8&#39;,\\n  ares: &#39;1.10.0-DEV&#39;,\\n  modules: &#39;43&#39;,\\n  icu: &#39;55.1&#39;,\\n  openssl: &#39;1.0.1k&#39;\\n}\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ],\n      \"vars\": [\n        {\n          \"textRaw\": \"\\\\_\\\\_dirname\",\n          \"name\": \"\\\\_\\\\_dirname\",\n          \"type\": \"var\",\n          \"desc\": \"<ul>\\n<li>{String}</li>\\n</ul>\\n<p>The name of the directory that the currently executing script resides in.</p>\\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(__dirname);\\n// /Users/mjr\\n</code></pre>\\n<p><code>__dirname</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>For instance, given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of\\n<code>a</code> and there is a directory structure of:</p>\\n<ul>\\n<li><code>/Users/mjr/app/a.js</code></li>\\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\\n</ul>\\n<p>References to <code>__dirname</code> within <code>b.js</code> will return\\n<code>/Users/mjr/app/node_modules/b</code> while references to <code>__dirname</code> within <code>a.js</code>\\nwill return <code>/Users/mjr/app</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"\\\\_\\\\_filename\",\n          \"name\": \"\\\\_\\\\_filename\",\n          \"type\": \"var\",\n          \"desc\": \"<ul>\\n<li>{String}</li>\\n</ul>\\n<p>The filename of the code being executed.  This is the resolved absolute path\\nof this code file.  For a main program this is not necessarily the same\\nfilename used in the command line.  The value inside a module is the path\\nto that module file.</p>\\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(__filename);\\n// /Users/mjr/example.js\\n</code></pre>\\n<p><code>__filename</code> isn&#39;t actually a global but rather local to each module.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"exports\",\n          \"name\": \"exports\",\n          \"type\": \"var\",\n          \"desc\": \"<p>A reference to the <code>module.exports</code> that is shorter to type.\\nSee [module system documentation][] for details on when to use <code>exports</code> and\\nwhen to use <code>module.exports</code>.</p>\\n<p><code>exports</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>See the [module system documentation][] for more information.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"module\",\n          \"name\": \"module\",\n          \"type\": \"var\",\n          \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>A reference to the current module. In particular\\n<code>module.exports</code> is used for defining what a module exports and makes\\navailable through <code>require()</code>.</p>\\n<p><code>module</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>See the [module system documentation][] for more information.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"require()\",\n          \"type\": \"var\",\n          \"name\": \"require\",\n          \"desc\": \"<ul>\\n<li>{Function}</li>\\n</ul>\\n<p>To require modules. See the [Modules][] section.  <code>require</code> isn&#39;t actually a\\nglobal but rather local to each module.</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"`cache` {Object} \",\n              \"type\": \"Object\",\n              \"name\": \"cache\",\n              \"desc\": \"<p>Modules are cached in this object when they are required. By deleting a key\\nvalue from this object, the next <code>require</code> will reload the module. Note that\\nthis does not apply to [native addons][], for which reloading will result in an\\nError.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`extensions` {Object} \",\n              \"type\": \"Object\",\n              \"name\": \"extensions\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"desc\": \"<p>Instruct <code>require</code> on how to handle certain file extensions.</p>\\n<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\\n</code></pre>\\n<p><strong>Deprecated</strong>  In the past, this list has been used to load\\nnon-JavaScript modules into Node.js by compiling them on-demand.\\nHowever, in practice, there are much better ways to do this, such as\\nloading modules via some other Node.js program, or compiling them to\\nJavaScript ahead of time.</p>\\n<p>Since the Module system is locked, this feature will probably never go\\naway.  However, it may have subtle bugs and complexities that are best\\nleft untouched.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"require.resolve()\",\n              \"type\": \"method\",\n              \"name\": \"resolve\",\n              \"desc\": \"<p>Use the internal <code>require()</code> machinery to look up the location of a module,\\nbut rather than loading the module, just return the resolved filename.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"modules\": [\n    {\n      \"textRaw\": \"Addons\",\n      \"name\": \"addons\",\n      \"desc\": \"<p>Node.js Addons are dynamically-linked shared objects, written in C or C++, that\\ncan be loaded into Node.js using the [<code>require()</code>][require] function, and used\\njust as if they were an ordinary Node.js module. They are used primarily to\\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.</p>\\n<p>At the moment, the method for implementing Addons is rather complicated,\\ninvolving knowledge of several components and APIs :</p>\\n<ul>\\n<li><p>V8: the C++ library Node.js currently uses to provide the\\nJavaScript implementation. V8 provides the mechanisms for creating objects,\\ncalling functions, etc. V8&#39;s API is documented mostly in the\\n<code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source\\ntree), which is also available [online][v8-docs].</p>\\n</li>\\n<li><p>[libuv][]: The C library that implements the Node.js event loop, its worker\\nthreads and all of the asynchronous behaviors of the platform. It also\\nserves as a cross-platform abstraction library, giving easy, POSIX-like\\naccess across all major operating systems to many common system tasks, such\\nas interacting with the filesystem, sockets, timers and system events. libuv\\nalso provides a pthreads-like threading abstraction that may be used to\\npower more sophisticated asynchronous Addons that need to move beyond the\\nstandard event loop. Addon authors are encouraged to think about how to\\navoid blocking the event loop with I/O or other time-intensive tasks by\\noff-loading work via libuv to non-blocking system operations, worker threads\\nor a custom use of libuv&#39;s threads.</p>\\n</li>\\n<li><p>Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs\\nthat Addons can use &mdash; the most important of which is the\\n<code>node::ObjectWrap</code> class.</p>\\n</li>\\n<li><p>Node.js includes a number of other statically linked libraries including\\nOpenSSL. These other libraries are located in the <code>deps/</code> directory in the\\nNode.js source tree. Only the V8 and OpenSSL symbols are purposefully\\nre-exported by Node.js and may be used to various extents by Addons.\\nSee [Linking to Node.js&#39; own dependencies][] for additional information.</p>\\n</li>\\n</ul>\\n<p>All of the following examples are available for [download][] and may\\nbe used as a starting-point for your own Addon.</p>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Hello world\",\n          \"name\": \"hello_world\",\n          \"desc\": \"<p>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the\\nequivalent of the following JavaScript code:</p>\\n<pre><code class=\\\"lang-js\\\">module.exports.hello = () =&gt; &#39;world&#39;;\\n</code></pre>\\n<p>First, create the file <code>hello.cc</code>:</p>\\n<pre><code class=\\\"lang-cpp\\\">// hello.cc\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;world&quot;));\\n}\\n\\nvoid init(Local&lt;Object&gt; exports) {\\n  NODE_SET_METHOD(exports, &quot;hello&quot;, Method);\\n}\\n\\nNODE_MODULE(addon, init)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Note that all Node.js Addons must export an initialization function following\\nthe pattern:</p>\\n<pre><code class=\\\"lang-cpp\\\">void Initialize(Local&lt;Object&gt; exports);\\nNODE_MODULE(module_name, Initialize)\\n</code></pre>\\n<p>There is no semi-colon after <code>NODE_MODULE</code> as it&#39;s not a function (see\\n<code>node.h</code>).</p>\\n<p>The <code>module_name</code> must match the filename of the final binary (excluding\\nthe .node suffix).</p>\\n<p>In the <code>hello.cc</code> example, then, the initialization function is <code>init</code> and the\\nAddon module name is <code>addon</code>.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Building\",\n              \"name\": \"building\",\n              \"desc\": \"<p>Once the source code has been written, it must be compiled into the binary\\n<code>addon.node</code> file. To do so, create a file called <code>binding.gyp</code> in the\\ntop-level of the project describing the build configuration of your module\\nusing a JSON-like format. This file is used by [node-gyp][] -- a tool written\\nspecifically to compile Node.js Addons.</p>\\n<pre><code>{\\n  &quot;targets&quot;: [\\n    {\\n      &quot;target_name&quot;: &quot;addon&quot;,\\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ]\\n    }\\n  ]\\n}\\n</code></pre><p><em>Note: A version of the <code>node-gyp</code> utility is bundled and distributed with\\nNode.js as part of <code>npm</code>. This version is not made directly available for\\ndevelopers to use and is intended only to support the ability to use the\\n<code>npm install</code> command to compile and install Addons. Developers who wish to\\nuse <code>node-gyp</code> directly can install it using the command\\n<code>npm install -g node-gyp</code>. See the <code>node-gyp</code> [installation instructions][] for\\nmore information, including platform-specific requirements.</em></p>\\n<p>Once the <code>binding.gyp</code> file has been created, use <code>node-gyp configure</code> to\\ngenerate the appropriate project build files for the current platform. This\\nwill generate either a <code>Makefile</code> (on Unix platforms) or a <code>vcxproj</code> file\\n(on Windows) in the <code>build/</code> directory.</p>\\n<p>Next, invoke the <code>node-gyp build</code> command to generate the compiled <code>addon.node</code>\\nfile. This will be put into the <code>build/Release/</code> directory.</p>\\n<p>When using <code>npm install</code> to install a Node.js Addon, npm uses its own bundled\\nversion of <code>node-gyp</code> to perform this same set of actions, generating a\\ncompiled version of the Addon for the user&#39;s platform on demand.</p>\\n<p>Once built, the binary Addon can be used from within Node.js by pointing\\n[<code>require()</code>][require] to the built <code>addon.node</code> module:</p>\\n<pre><code class=\\\"lang-js\\\">// hello.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nconsole.log(addon.hello()); // &#39;world&#39;\\n</code></pre>\\n<p>Please see the examples below for further information or\\n<a href=\\\"https://github.com/arturadib/node-qt\\\">https://github.com/arturadib/node-qt</a> for an example in production.</p>\\n<p>Because the exact path to the compiled Addon binary can vary depending on how\\nit is compiled (i.e. sometimes it may be in <code>./build/Debug/</code>), Addons can use\\nthe [bindings][] package to load the compiled module.</p>\\n<p>Note that while the <code>bindings</code> package implementation is more sophisticated\\nin how it locates Addon modules, it is essentially using a try-catch pattern\\nsimilar to:</p>\\n<pre><code class=\\\"lang-js\\\">try {\\n  return require(&#39;./build/Release/addon.node&#39;);\\n} catch (err) {\\n  return require(&#39;./build/Debug/addon.node&#39;);\\n}\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Building\"\n            },\n            {\n              \"textRaw\": \"Linking to Node.js' own dependencies\",\n              \"name\": \"linking_to_node.js'_own_dependencies\",\n              \"desc\": \"<p>Node.js uses a number of statically linked libraries such as V8, libuv and\\nOpenSSL. All Addons are required to link to V8 and may link to any of the\\nother dependencies as well. Typically, this is as simple as including\\nthe appropriate <code>#include &lt;...&gt;</code> statements (e.g. <code>#include &lt;v8.h&gt;</code>) and\\n<code>node-gyp</code> will locate the appropriate headers automatically. However, there\\nare a few caveats to be aware of:</p>\\n<ul>\\n<li><p>When <code>node-gyp</code> runs, it will detect the specific release version of Node.js\\nand download either the full source tarball or just the headers. If the full\\nsource is downloaded, Addons will have complete access to the full set of\\nNode.js dependencies. However, if only the Node.js headers are downloaded, then\\nonly the symbols exported by Node.js will be available.</p>\\n</li>\\n<li><p><code>node-gyp</code> can be run using the <code>--nodedir</code> flag pointing at a local Node.js\\nsource image. Using this option, the Addon will have access to the full set of\\ndependencies.</p>\\n</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Linking to Node.js' own dependencies\"\n            },\n            {\n              \"textRaw\": \"Loading Addons using require()\",\n              \"name\": \"loading_addons_using_require()\",\n              \"desc\": \"<p>The filename extension of the compiled Addon binary is <code>.node</code> (as opposed\\nto <code>.dll</code> or <code>.so</code>). The [<code>require()</code>][require] function is written to look for\\nfiles with the <code>.node</code> file extension and initialize those as dynamically-linked\\nlibraries.</p>\\n<p>When calling [<code>require()</code>][require], the <code>.node</code> extension can usually be\\nomitted and Node.js will still find and initialize the Addon. One caveat,\\nhowever, is that Node.js will first attempt to locate and load modules or\\nJavaScript files that happen to share the same base name. For instance, if\\nthere is a file <code>addon.js</code> in the same directory as the binary <code>addon.node</code>,\\nthen [<code>require(&#39;addon&#39;)</code>][require] will give precedence to the <code>addon.js</code> file\\nand load it instead.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Loading Addons using require()\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Hello world\"\n        },\n        {\n          \"textRaw\": \"Addon examples\",\n          \"name\": \"addon_examples\",\n          \"desc\": \"<p>Following are some example Addons intended to help developers get started. The\\nexamples make use of the V8 APIs. Refer to the online [V8 reference][v8-docs]\\nfor help with the various V8 calls, and V8&#39;s [Embedder&#39;s Guide][] for an\\nexplanation of several concepts used such as handles, scopes, function\\ntemplates, etc.</p>\\n<p>Each of these examples using the following <code>binding.gyp</code> file:</p>\\n<pre><code>{\\n  &quot;targets&quot;: [\\n    {\\n      &quot;target_name&quot;: &quot;addon&quot;,\\n      &quot;sources&quot;: [ &quot;addon.cc&quot; ]\\n    }\\n  ]\\n}\\n</code></pre><p>In cases where there is more than one <code>.cc</code> file, simply add the additional\\nfilename to the <code>sources</code> array. For example:</p>\\n<pre><code>&quot;sources&quot;: [&quot;addon.cc&quot;, &quot;myexample.cc&quot;]\\n</code></pre><p>Once the <code>binding.gyp</code> file is ready, the example Addons can be configured and\\nbuilt using <code>node-gyp</code>:</p>\\n<pre><code>$ node-gyp configure build\\n</code></pre>\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Function arguments\",\n              \"name\": \"function_arguments\",\n              \"desc\": \"<p>Addons will typically expose objects and functions that can be accessed from\\nJavaScript running within Node.js. When functions are invoked from JavaScript,\\nthe input arguments and return value must be mapped to and from the C/C++\\ncode.</p>\\n<p>The following example illustrates how to read function arguments passed from\\nJavaScript and how to return a result:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing v8::Exception;\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Number;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\n// This is the implementation of the &quot;add&quot; method\\n// Input arguments are passed using the\\n// const FunctionCallbackInfo&lt;Value&gt;&amp; args struct\\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  // Check the number of arguments passed.\\n  if (args.Length() &lt; 2) {\\n    // Throw an Error that is passed back to JavaScript\\n    isolate-&gt;ThrowException(Exception::TypeError(\\n        String::NewFromUtf8(isolate, &quot;Wrong number of arguments&quot;)));\\n    return;\\n  }\\n\\n  // Check the argument types\\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\\n    isolate-&gt;ThrowException(Exception::TypeError(\\n        String::NewFromUtf8(isolate, &quot;Wrong arguments&quot;)));\\n    return;\\n  }\\n\\n  // Perform the operation\\n  double value = args[0]-&gt;NumberValue() + args[1]-&gt;NumberValue();\\n  Local&lt;Number&gt; num = Number::New(isolate, value);\\n\\n  // Set the return value (using the passed in\\n  // FunctionCallbackInfo&lt;Value&gt;&amp;)\\n  args.GetReturnValue().Set(num);\\n}\\n\\nvoid Init(Local&lt;Object&gt; exports) {\\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\\n}\\n\\nNODE_MODULE(addon, Init)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Once compiled, the example Addon can be required and used from within Node.js:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nconsole.log(&#39;This should be eight:&#39;, addon.add(3, 5));\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Function arguments\"\n            },\n            {\n              \"textRaw\": \"Callbacks\",\n              \"name\": \"callbacks\",\n              \"desc\": \"<p>It is common practice within Addons to pass JavaScript functions to a C++\\nfunction and execute them from there. The following example illustrates how\\nto invoke such callbacks:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing v8::Function;\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Null;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid RunCallback(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\\n  const unsigned argc = 1;\\n  Local&lt;Value&gt; argv[argc] = { String::NewFromUtf8(isolate, &quot;hello world&quot;) };\\n  cb-&gt;Call(Null(isolate), argc, argv);\\n}\\n\\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\\n  NODE_SET_METHOD(module, &quot;exports&quot;, RunCallback);\\n}\\n\\nNODE_MODULE(addon, Init)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Note that this example uses a two-argument form of <code>Init()</code> that receives\\nthe full <code>module</code> object as the second argument. This allows the Addon\\nto completely overwrite <code>exports</code> with a single function instead of\\nadding the function as a property of <code>exports</code>.</p>\\n<p>To test it, run the following JavaScript:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\naddon((msg) =&gt; {\\n  console.log(msg); // &#39;hello world&#39;\\n});\\n</code></pre>\\n<p>Note that, in this example, the callback function is invoked synchronously.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Callbacks\"\n            },\n            {\n              \"textRaw\": \"Object factory\",\n              \"name\": \"object_factory\",\n              \"desc\": \"<p>Addons can create and return new objects from within a C++ function as\\nillustrated in the following example. An object is created and returned with a\\nproperty <code>msg</code> that echoes the string passed to <code>createObject()</code>:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  Local&lt;Object&gt; obj = Object::New(isolate);\\n  obj-&gt;Set(String::NewFromUtf8(isolate, &quot;msg&quot;), args[0]-&gt;ToString());\\n\\n  args.GetReturnValue().Set(obj);\\n}\\n\\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\\n}\\n\\nNODE_MODULE(addon, Init)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>To test it in JavaScript:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nvar obj1 = addon(&#39;hello&#39;);\\nvar obj2 = addon(&#39;world&#39;);\\nconsole.log(obj1.msg + &#39; &#39; + obj2.msg); // &#39;hello world&#39;\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Object factory\"\n            },\n            {\n              \"textRaw\": \"Function factory\",\n              \"name\": \"function_factory\",\n              \"desc\": \"<p>Another common scenario is creating JavaScript functions that wrap C++\\nfunctions and returning those back to JavaScript:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing v8::Function;\\nusing v8::FunctionCallbackInfo;\\nusing v8::FunctionTemplate;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid MyFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;hello world&quot;));\\n}\\n\\nvoid CreateFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, MyFunction);\\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\\n\\n  // omit this to make it anonymous\\n  fn-&gt;SetName(String::NewFromUtf8(isolate, &quot;theFunction&quot;));\\n\\n  args.GetReturnValue().Set(fn);\\n}\\n\\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateFunction);\\n}\\n\\nNODE_MODULE(addon, Init)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>To test:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nvar fn = addon();\\nconsole.log(fn()); // &#39;hello world&#39;\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Function factory\"\n            },\n            {\n              \"textRaw\": \"Wrapping C++ objects\",\n              \"name\": \"wrapping_c++_objects\",\n              \"desc\": \"<p>It is also possible to wrap C++ objects/classes in a way that allows new\\ninstances to be created using the JavaScript <code>new</code> operator:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::Local;\\nusing v8::Object;\\n\\nvoid InitAll(Local&lt;Object&gt; exports) {\\n  MyObject::Init(exports);\\n}\\n\\nNODE_MODULE(addon, InitAll)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Then, in <code>myobject.h</code>, the wrapper class inherits from <code>node::ObjectWrap</code>:</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.h\\n#ifndef MYOBJECT_H\\n#define MYOBJECT_H\\n\\n#include &lt;node.h&gt;\\n#include &lt;node_object_wrap.h&gt;\\n\\nnamespace demo {\\n\\nclass MyObject : public node::ObjectWrap {\\n public:\\n  static void Init(v8::Local&lt;v8::Object&gt; exports);\\n\\n private:\\n  explicit MyObject(double value = 0);\\n  ~MyObject();\\n\\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  static v8::Persistent&lt;v8::Function&gt; constructor;\\n  double value_;\\n};\\n\\n}  // namespace demo\\n\\n#endif\\n</code></pre>\\n<p>In <code>myobject.cc</code>, implement the various methods that are to be exposed.\\nBelow, the method <code>plusOne()</code> is exposed by adding it to the constructor&#39;s\\nprototype:</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.cc\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::Context;\\nusing v8::Function;\\nusing v8::FunctionCallbackInfo;\\nusing v8::FunctionTemplate;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Number;\\nusing v8::Object;\\nusing v8::Persistent;\\nusing v8::String;\\nusing v8::Value;\\n\\nPersistent&lt;Function&gt; MyObject::constructor;\\n\\nMyObject::MyObject(double value) : value_(value) {\\n}\\n\\nMyObject::~MyObject() {\\n}\\n\\nvoid MyObject::Init(Local&lt;Object&gt; exports) {\\n  Isolate* isolate = exports-&gt;GetIsolate();\\n\\n  // Prepare constructor template\\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\\n\\n  // Prototype\\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\\n\\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\\n  exports-&gt;Set(String::NewFromUtf8(isolate, &quot;MyObject&quot;),\\n               tpl-&gt;GetFunction());\\n}\\n\\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  if (args.IsConstructCall()) {\\n    // Invoked as constructor: `new MyObject(...)`\\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\\n    MyObject* obj = new MyObject(value);\\n    obj-&gt;Wrap(args.This());\\n    args.GetReturnValue().Set(args.This());\\n  } else {\\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\\n    const int argc = 1;\\n    Local&lt;Value&gt; argv[argc] = { args[0] };\\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\\n    Local&lt;Object&gt; result =\\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\\n    args.GetReturnValue().Set(result);\\n  }\\n}\\n\\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\\n  obj-&gt;value_ += 1;\\n\\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\\n}\\n\\n}  // namespace demo\\n</code></pre>\\n<p>To build this example, the <code>myobject.cc</code> file must be added to the\\n<code>binding.gyp</code>:</p>\\n<pre><code>{\\n  &quot;targets&quot;: [\\n    {\\n      &quot;target_name&quot;: &quot;addon&quot;,\\n      &quot;sources&quot;: [\\n        &quot;addon.cc&quot;,\\n        &quot;myobject.cc&quot;\\n      ]\\n    }\\n  ]\\n}\\n</code></pre><p>Test it with:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nvar obj = new addon.MyObject(10);\\nconsole.log(obj.plusOne()); // 11\\nconsole.log(obj.plusOne()); // 12\\nconsole.log(obj.plusOne()); // 13\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Wrapping C++ objects\"\n            },\n            {\n              \"textRaw\": \"Factory of wrapped objects\",\n              \"name\": \"factory_of_wrapped_objects\",\n              \"desc\": \"<p>Alternatively, it is possible to use a factory pattern to avoid explicitly\\ncreating object instances using the JavaScript <code>new</code> operator:</p>\\n<pre><code class=\\\"lang-js\\\">var obj = addon.createObject();\\n// instead of:\\n// var obj = new addon.Object();\\n</code></pre>\\n<p>First, the <code>createObject()</code> method is implemented in <code>addon.cc</code>:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  MyObject::NewInstance(args);\\n}\\n\\nvoid InitAll(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\\n  MyObject::Init(exports-&gt;GetIsolate());\\n\\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\\n}\\n\\nNODE_MODULE(addon, InitAll)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>In <code>myobject.h</code>, the static method <code>NewInstance()</code> is added to handle\\ninstantiating the object. This method takes the place of using <code>new</code> in\\nJavaScript:</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.h\\n#ifndef MYOBJECT_H\\n#define MYOBJECT_H\\n\\n#include &lt;node.h&gt;\\n#include &lt;node_object_wrap.h&gt;\\n\\nnamespace demo {\\n\\nclass MyObject : public node::ObjectWrap {\\n public:\\n  static void Init(v8::Isolate* isolate);\\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n\\n private:\\n  explicit MyObject(double value = 0);\\n  ~MyObject();\\n\\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  static v8::Persistent&lt;v8::Function&gt; constructor;\\n  double value_;\\n};\\n\\n}  // namespace demo\\n\\n#endif\\n</code></pre>\\n<p>The implementation in <code>myobject.cc</code> is similar to the previous example:</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.cc\\n#include &lt;node.h&gt;\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::Context;\\nusing v8::Function;\\nusing v8::FunctionCallbackInfo;\\nusing v8::FunctionTemplate;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Number;\\nusing v8::Object;\\nusing v8::Persistent;\\nusing v8::String;\\nusing v8::Value;\\n\\nPersistent&lt;Function&gt; MyObject::constructor;\\n\\nMyObject::MyObject(double value) : value_(value) {\\n}\\n\\nMyObject::~MyObject() {\\n}\\n\\nvoid MyObject::Init(Isolate* isolate) {\\n  // Prepare constructor template\\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\\n\\n  // Prototype\\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\\n\\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\\n}\\n\\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  if (args.IsConstructCall()) {\\n    // Invoked as constructor: `new MyObject(...)`\\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\\n    MyObject* obj = new MyObject(value);\\n    obj-&gt;Wrap(args.This());\\n    args.GetReturnValue().Set(args.This());\\n  } else {\\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\\n    const int argc = 1;\\n    Local&lt;Value&gt; argv[argc] = { args[0] };\\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\\n    Local&lt;Object&gt; instance =\\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\\n    args.GetReturnValue().Set(instance);\\n  }\\n}\\n\\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  const unsigned argc = 1;\\n  Local&lt;Value&gt; argv[argc] = { args[0] };\\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\\n  Local&lt;Object&gt; instance =\\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\\n\\n  args.GetReturnValue().Set(instance);\\n}\\n\\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\\n  obj-&gt;value_ += 1;\\n\\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\\n}\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Once again, to build this example, the <code>myobject.cc</code> file must be added to the\\n<code>binding.gyp</code>:</p>\\n<pre><code>{\\n  &quot;targets&quot;: [\\n    {\\n      &quot;target_name&quot;: &quot;addon&quot;,\\n      &quot;sources&quot;: [\\n        &quot;addon.cc&quot;,\\n        &quot;myobject.cc&quot;\\n      ]\\n    }\\n  ]\\n}\\n</code></pre><p>Test it with:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst createObject = require(&#39;./build/Release/addon&#39;);\\n\\nvar obj = createObject(10);\\nconsole.log(obj.plusOne()); // 11\\nconsole.log(obj.plusOne()); // 12\\nconsole.log(obj.plusOne()); // 13\\n\\nvar obj2 = createObject(20);\\nconsole.log(obj2.plusOne()); // 21\\nconsole.log(obj2.plusOne()); // 22\\nconsole.log(obj2.plusOne()); // 23\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Factory of wrapped objects\"\n            },\n            {\n              \"textRaw\": \"Passing wrapped objects around\",\n              \"name\": \"passing_wrapped_objects_around\",\n              \"desc\": \"<p>In addition to wrapping and returning C++ objects, it is possible to pass\\nwrapped objects around by unwrapping them with the Node.js helper function\\n<code>node::ObjectWrap::Unwrap</code>. The following examples shows a function <code>add()</code>\\nthat can take two <code>MyObject</code> objects as input arguments:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#include &lt;node.h&gt;\\n#include &lt;node_object_wrap.h&gt;\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::FunctionCallbackInfo;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Number;\\nusing v8::Object;\\nusing v8::String;\\nusing v8::Value;\\n\\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  MyObject::NewInstance(args);\\n}\\n\\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\\n      args[0]-&gt;ToObject());\\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\\n      args[1]-&gt;ToObject());\\n\\n  double sum = obj1-&gt;value() + obj2-&gt;value();\\n  args.GetReturnValue().Set(Number::New(isolate, sum));\\n}\\n\\nvoid InitAll(Local&lt;Object&gt; exports) {\\n  MyObject::Init(exports-&gt;GetIsolate());\\n\\n  NODE_SET_METHOD(exports, &quot;createObject&quot;, CreateObject);\\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\\n}\\n\\nNODE_MODULE(addon, InitAll)\\n\\n}  // namespace demo\\n</code></pre>\\n<p>In <code>myobject.h</code>, a new public method is added to allow access to private values\\nafter unwrapping the object.</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.h\\n#ifndef MYOBJECT_H\\n#define MYOBJECT_H\\n\\n#include &lt;node.h&gt;\\n#include &lt;node_object_wrap.h&gt;\\n\\nnamespace demo {\\n\\nclass MyObject : public node::ObjectWrap {\\n public:\\n  static void Init(v8::Isolate* isolate);\\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  inline double value() const { return value_; }\\n\\n private:\\n  explicit MyObject(double value = 0);\\n  ~MyObject();\\n\\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\\n  static v8::Persistent&lt;v8::Function&gt; constructor;\\n  double value_;\\n};\\n\\n}  // namespace demo\\n\\n#endif\\n</code></pre>\\n<p>The implementation of <code>myobject.cc</code> is similar to before:</p>\\n<pre><code class=\\\"lang-cpp\\\">// myobject.cc\\n#include &lt;node.h&gt;\\n#include &quot;myobject.h&quot;\\n\\nnamespace demo {\\n\\nusing v8::Context;\\nusing v8::Function;\\nusing v8::FunctionCallbackInfo;\\nusing v8::FunctionTemplate;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\nusing v8::Persistent;\\nusing v8::String;\\nusing v8::Value;\\n\\nPersistent&lt;Function&gt; MyObject::constructor;\\n\\nMyObject::MyObject(double value) : value_(value) {\\n}\\n\\nMyObject::~MyObject() {\\n}\\n\\nvoid MyObject::Init(Isolate* isolate) {\\n  // Prepare constructor template\\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\\n\\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\\n}\\n\\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  if (args.IsConstructCall()) {\\n    // Invoked as constructor: `new MyObject(...)`\\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\\n    MyObject* obj = new MyObject(value);\\n    obj-&gt;Wrap(args.This());\\n    args.GetReturnValue().Set(args.This());\\n  } else {\\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\\n    const int argc = 1;\\n    Local&lt;Value&gt; argv[argc] = { args[0] };\\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\\n    Local&lt;Object&gt; instance =\\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\\n    args.GetReturnValue().Set(instance);\\n  }\\n}\\n\\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n  Isolate* isolate = args.GetIsolate();\\n\\n  const unsigned argc = 1;\\n  Local&lt;Value&gt; argv[argc] = { args[0] };\\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\\n  Local&lt;Object&gt; instance =\\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\\n\\n  args.GetReturnValue().Set(instance);\\n}\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Test it with:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n\\nvar obj1 = addon.createObject(10);\\nvar obj2 = addon.createObject(20);\\nvar result = addon.add(obj1, obj2);\\n\\nconsole.log(result); // 30\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Passing wrapped objects around\"\n            },\n            {\n              \"textRaw\": \"AtExit hooks\",\n              \"name\": \"atexit_hooks\",\n              \"desc\": \"<p>An &quot;AtExit&quot; hook is a function that is invoked after the Node.js event loop\\nhas ended by before the JavaScript VM is terminated and Node.js shuts down.\\n&quot;AtExit&quot; hooks are registered using the <code>node::AtExit</code> API.</p>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"void AtExit(callback, args)\",\n                  \"name\": \"void_atexit(callback,_args)\",\n                  \"desc\": \"<ul>\\n<li><code>callback</code>: <code>void (*)(void*)</code> - A pointer to the function to call at exit.</li>\\n<li><code>args</code>: <code>void*</code> - A pointer to pass to the callback at exit.</li>\\n</ul>\\n<p>Registers exit hooks that run after the event loop has ended but before the VM\\nis killed.</p>\\n<p>AtExit takes two parameters: a pointer to a callback function to run at exit,\\nand a pointer to untyped context data to be passed to that callback.</p>\\n<p>Callbacks are run in last-in first-out order.</p>\\n<p>The following <code>addon.cc</code> implements AtExit:</p>\\n<pre><code class=\\\"lang-cpp\\\">// addon.cc\\n#undef NDEBUG\\n#include &lt;assert.h&gt;\\n#include &lt;stdlib.h&gt;\\n#include &lt;node.h&gt;\\n\\nnamespace demo {\\n\\nusing node::AtExit;\\nusing v8::HandleScope;\\nusing v8::Isolate;\\nusing v8::Local;\\nusing v8::Object;\\n\\nstatic char cookie[] = &quot;yum yum&quot;;\\nstatic int at_exit_cb1_called = 0;\\nstatic int at_exit_cb2_called = 0;\\n\\nstatic void at_exit_cb1(void* arg) {\\n  Isolate* isolate = static_cast&lt;Isolate*&gt;(arg);\\n  HandleScope scope(isolate);\\n  Local&lt;Object&gt; obj = Object::New(isolate);\\n  assert(!obj.IsEmpty()); // assert VM is still alive\\n  assert(obj-&gt;IsObject());\\n  at_exit_cb1_called++;\\n}\\n\\nstatic void at_exit_cb2(void* arg) {\\n  assert(arg == static_cast&lt;void*&gt;(cookie));\\n  at_exit_cb2_called++;\\n}\\n\\nstatic void sanity_check(void*) {\\n  assert(at_exit_cb1_called == 1);\\n  assert(at_exit_cb2_called == 2);\\n}\\n\\nvoid init(Local&lt;Object&gt; exports) {\\n  AtExit(sanity_check);\\n  AtExit(at_exit_cb2, cookie);\\n  AtExit(at_exit_cb2, cookie);\\n  AtExit(at_exit_cb1, exports-&gt;GetIsolate());\\n}\\n\\nNODE_MODULE(addon, init);\\n\\n}  // namespace demo\\n</code></pre>\\n<p>Test in JavaScript by running:</p>\\n<pre><code class=\\\"lang-js\\\">// test.js\\nconst addon = require(&#39;./build/Release/addon&#39;);\\n</code></pre>\\n<!-- [end-include:addons.md] -->\\n<!-- [start-include:assert.md] -->\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"void AtExit(callback, args)\"\n                }\n              ],\n              \"type\": \"module\",\n              \"displayName\": \"AtExit hooks\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Addon examples\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"Native Abstractions for Node.js\",\n          \"name\": \"js\",\n          \"desc\": \"<p>Each of the examples illustrated in this document make direct use of the\\nNode.js and V8 APIs for implementing Addons. It is important to understand\\nthat the V8 API can, and has, changed dramatically from one V8 release to the\\nnext (and one major Node.js release to the next). With each change, Addons may\\nneed to be updated and recompiled in order to continue functioning. The Node.js\\nrelease schedule is designed to minimize the frequency and impact of such\\nchanges but there is little that Node.js can do currently to ensure stability\\nof the V8 APIs.</p>\\n<p>The [Native Abstractions for Node.js][] (or <code>nan</code>) provide a set of tools that\\nAddon developers are recommended to use to keep compatibility between past and\\nfuture releases of V8 and Node.js. See the <code>nan</code> [examples][] for an\\nillustration of how it can be used.</p>\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Addons\"\n    },\n    {\n      \"textRaw\": \"Assert\",\n      \"name\": \"assert\",\n      \"stability\": 3,\n      \"stabilityText\": \"Locked\",\n      \"desc\": \"<p>The <code>assert</code> module provides a simple set of assertion tests that can be used to\\ntest invariants. The module is intended for internal use by Node.js, but can be\\nused in application code via <code>require(&#39;assert&#39;)</code>. However, <code>assert</code> is not a\\ntesting framework, and is not intended to be used as a general purpose assertion\\nlibrary.</p>\\n<p>The API for the <code>assert</code> module is [Locked][]. This means that there will be no\\nadditions or changes to any of the methods implemented and exposed by\\nthe module.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"assert(value[, message])\",\n          \"type\": \"method\",\n          \"name\": \"assert\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.9\"\n            ]\n          },\n          \"desc\": \"<p>An alias of [<code>assert.ok()</code>][] .</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert(true);  // OK\\nassert(1);     // OK\\nassert(false);\\n  // throws &quot;AssertionError: false == true&quot;\\nassert(0);\\n  // throws &quot;AssertionError: 0 == true&quot;\\nassert(false, &#39;it\\\\&#39;s false&#39;);\\n  // throws &quot;AssertionError: it&#39;s false&quot;\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"value\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.deepEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"deepEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\\nPrimitive values are compared with the equal comparison operator ( <code>==</code> ).</p>\\n<p>Only enumerable &quot;own&quot; properties are considered. The <code>deepEqual()</code>\\nimplementation does not test object prototypes, attached symbols, or\\nnon-enumerable properties. This can lead to some potentially surprising\\nresults. For example, the following example does not throw an <code>AssertionError</code>\\nbecause the properties on the [<code>Error</code>][] object are non-enumerable:</p>\\n<pre><code class=\\\"lang-js\\\">// WARNING: This does not throw an AssertionError!\\nassert.deepEqual(Error(&#39;a&#39;), Error(&#39;b&#39;));\\n</code></pre>\\n<p>&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\\nare evaluated also:</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nconst obj1 = {\\n  a : {\\n    b : 1\\n  }\\n};\\nconst obj2 = {\\n  a : {\\n    b : 2\\n  }\\n};\\nconst obj3 = {\\n  a : {\\n    b : 1\\n  }\\n}\\nconst obj4 = Object.create(obj1);\\n\\nassert.deepEqual(obj1, obj1);\\n  // OK, object is equal to itself\\n\\nassert.deepEqual(obj1, obj2);\\n  // AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\\n  // values of b are different\\n\\nassert.deepEqual(obj1, obj3);\\n  // OK, objects are equal\\n\\nassert.deepEqual(obj1, obj4);\\n  // AssertionError: { a: { b: 1 } } deepEqual {}\\n  // Prototypes are ignored\\n</code></pre>\\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.deepStrictEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"deepStrictEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v1.2.0\"\n            ]\n          },\n          \"desc\": \"<p>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First,\\nprimitive values are compared using the strict equality operator ( <code>===</code> ).\\nSecond, object comparisons include a strict equality check of their prototypes.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.deepEqual({a:1}, {a:&#39;1&#39;});\\n  // OK, because 1 == &#39;1&#39;\\n\\nassert.deepStrictEqual({a:1}, {a:&#39;1&#39;});\\n  // AssertionError: { a: 1 } deepStrictEqual { a: &#39;1&#39; }\\n  // because 1 !== &#39;1&#39; using strict equality\\n</code></pre>\\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.doesNotThrow(block[, error][, message])\",\n          \"type\": \"method\",\n          \"name\": \"doesNotThrow\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Asserts that the function <code>block</code> does not throw an error. See\\n[<code>assert.throws()</code>][] for more details.</p>\\n<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code>\\nfunction.</p>\\n<p>If an error is thrown and it is the same type as that specified by the <code>error</code>\\nparameter, then an <code>AssertionError</code> is thrown. If the error is of a different\\ntype, or if the <code>error</code> parameter is undefined, the error is propagated back\\nto the caller.</p>\\n<p>The following, for instance, will throw the [<code>TypeError</code>][] because there is no\\nmatching error type in the assertion:</p>\\n<pre><code class=\\\"lang-js\\\">assert.doesNotThrow(\\n  () =&gt; {\\n    throw new TypeError(&#39;Wrong value&#39;);\\n  },\\n  SyntaxError\\n);\\n</code></pre>\\n<p>However, the following will result in an <code>AssertionError</code> with the message\\n&#39;Got unwanted exception (TypeError)..&#39;:</p>\\n<pre><code class=\\\"lang-js\\\">assert.doesNotThrow(\\n  () =&gt; {\\n    throw new TypeError(&#39;Wrong value&#39;);\\n  },\\n  TypeError\\n);\\n</code></pre>\\n<p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>\\nparameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>\\nmessage:</p>\\n<pre><code class=\\\"lang-js\\\">assert.doesNotThrow(\\n  () =&gt; {\\n    throw new TypeError(&#39;Wrong value&#39;);\\n  },\\n  TypeError,\\n  &#39;Whoops&#39;\\n);\\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"block\"\n                },\n                {\n                  \"name\": \"error\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.equal(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"equal\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\\nusing the equal comparison operator ( <code>==</code> ).</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.equal(1, 1);\\n  // OK, 1 == 1\\nassert.equal(1, &#39;1&#39;);\\n  // OK, 1 == &#39;1&#39;\\n\\nassert.equal(1, 2);\\n  // AssertionError: 1 == 2\\nassert.equal({a: {b: 1}}, {a: {b: 1}});\\n  //AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\\n</code></pre>\\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.fail(actual, expected, message, operator)\",\n          \"type\": \"method\",\n          \"name\": \"fail\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as\\nthe values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>.\\nOtherwise, the error message is the value of <code>message</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.fail(1, 2, undefined, &#39;&gt;&#39;);\\n  // AssertionError: 1 &gt; 2\\n\\nassert.fail(1, 2, &#39;whoops&#39;, &#39;&gt;&#39;);\\n  // AssertionError: whoops\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\"\n                },\n                {\n                  \"name\": \"operator\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.ifError(value)\",\n          \"type\": \"method\",\n          \"name\": \"ifError\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.97\"\n            ]\n          },\n          \"desc\": \"<p>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code>\\nargument in callbacks.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.ifError(0); // OK\\nassert.ifError(1); // Throws 1\\nassert.ifError(&#39;error&#39;) // Throws &#39;error&#39;\\nassert.ifError(new Error()); // Throws Error\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"value\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.notDeepEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"notDeepEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests for any deep inequality. Opposite of [<code>assert.deepEqual()</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nconst obj1 = {\\n  a : {\\n    b : 1\\n  }\\n};\\nconst obj2 = {\\n  a : {\\n    b : 2\\n  }\\n};\\nconst obj3 = {\\n  a : {\\n    b : 1\\n  }\\n}\\nconst obj4 = Object.create(obj1);\\n\\nassert.notDeepEqual(obj1, obj1);\\n  // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n\\nassert.notDeepEqual(obj1, obj2);\\n  // OK, obj1 and obj2 are not deeply equal\\n\\nassert.notDeepEqual(obj1, obj3);\\n  // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\\n\\nassert.notDeepEqual(obj1, obj4);\\n  // OK, obj1 and obj2 are not deeply equal\\n</code></pre>\\n<p>If the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.notDeepStrictEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"notDeepStrictEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v1.2.0\"\n            ]\n          },\n          \"desc\": \"<p>Tests for deep strict inequality. Opposite of [<code>assert.deepStrictEqual()</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.notDeepEqual({a:1}, {a:&#39;1&#39;});\\n  // AssertionError: { a: 1 } notDeepEqual { a: &#39;1&#39; }\\n\\nassert.notDeepStrictEqual({a:1}, {a:&#39;1&#39;});\\n  // OK\\n</code></pre>\\n<p>If the values are deeply and strictly equal, an <code>AssertionError</code> is thrown\\nwith a <code>message</code> property set equal to the value of the <code>message</code> parameter. If\\nthe <code>message</code> parameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.notEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"notEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests shallow, coercive inequality with the not equal comparison operator\\n( <code>!=</code> ).</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.notEqual(1, 2);\\n  // OK\\n\\nassert.notEqual(1, 1);\\n  // AssertionError: 1 != 1\\n\\nassert.notEqual(1, &#39;1&#39;);\\n  // AssertionError: 1 != &#39;1&#39;\\n</code></pre>\\n<p>If the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.notStrictEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"notStrictEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests strict inequality as determined by the strict not equal operator\\n( <code>!==</code> ).</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.notStrictEqual(1, 2);\\n  // OK\\n\\nassert.notStrictEqual(1, 1);\\n  // AssertionError: 1 != 1\\n\\nassert.notStrictEqual(1, &#39;1&#39;);\\n  // OK\\n</code></pre>\\n<p>If the values are strictly equal, an <code>AssertionError</code> is thrown with a\\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\\n<code>message</code> parameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.ok(value[, message])\",\n          \"type\": \"method\",\n          \"name\": \"ok\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests if <code>value</code> is truthy. It is equivalent to\\n<code>assert.equal(!!value, true, message)</code>.</p>\\n<p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>\\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\\nparameter is <code>undefined</code>, a default error message is assigned.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.ok(true);  // OK\\nassert.ok(1);     // OK\\nassert.ok(false);\\n  // throws &quot;AssertionError: false == true&quot;\\nassert.ok(0);\\n  // throws &quot;AssertionError: 0 == true&quot;\\nassert.ok(false, &#39;it\\\\&#39;s false&#39;);\\n  // throws &quot;AssertionError: it&#39;s false&quot;\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"value\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.strictEqual(actual, expected[, message])\",\n          \"type\": \"method\",\n          \"name\": \"strictEqual\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\n\\nassert.strictEqual(1, 2);\\n  // AssertionError: 1 === 2\\n\\nassert.strictEqual(1, 1);\\n  // OK\\n\\nassert.strictEqual(1, &#39;1&#39;);\\n  // AssertionError: 1 === &#39;1&#39;\\n</code></pre>\\n<p>If the values are not strictly equal, an <code>AssertionError</code> is thrown with a\\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\\n<code>message</code> parameter is undefined, a default error message is assigned.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"actual\"\n                },\n                {\n                  \"name\": \"expected\"\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"assert.throws(block[, error][, message])\",\n          \"type\": \"method\",\n          \"name\": \"throws\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Expects the function <code>block</code> to throw an error.</p>\\n<p>If specified, <code>error</code> can be a constructor, [<code>RegExp</code>][], or validation\\nfunction.</p>\\n<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if\\nthe block fails to throw.</p>\\n<p>Validate instanceof using constructor:</p>\\n<pre><code class=\\\"lang-js\\\">assert.throws(\\n  () =&gt; {\\n    throw new Error(&#39;Wrong value&#39;);\\n  },\\n  Error\\n);\\n</code></pre>\\n<p>Validate error message using [<code>RegExp</code>][]:</p>\\n<pre><code class=\\\"lang-js\\\">assert.throws(\\n  () =&gt; {\\n    throw new Error(&#39;Wrong value&#39;);\\n  },\\n  /value/\\n);\\n</code></pre>\\n<p>Custom error validation:</p>\\n<pre><code class=\\\"lang-js\\\">assert.throws(\\n  () =&gt; {\\n    throw new Error(&#39;Wrong value&#39;);\\n  },\\n  function(err) {\\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\\n      return true;\\n    }\\n  },\\n  &#39;unexpected error&#39;\\n);\\n</code></pre>\\n<p>Note that <code>error</code> can not be a string. If a string is provided as the second\\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\\n<code>message</code> instead. This can lead to easy-to-miss mistakes:</p>\\n<pre><code class=\\\"lang-js\\\">// THIS IS A MISTAKE! DO NOT DO THIS!\\nassert.throws(myFunction, &#39;missing foo&#39;, &#39;did not throw with expected message&#39;);\\n\\n// Do this instead.\\nassert.throws(myFunction, /missing foo/, &#39;did not throw with expected message&#39;);\\n</code></pre>\\n<!-- [end-include:assert.md] -->\\n<!-- [start-include:buffer.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"block\"\n                },\n                {\n                  \"name\": \"error\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"message\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Assert\"\n    },\n    {\n      \"textRaw\": \"Buffer\",\n      \"name\": \"buffer\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>Prior to the introduction of <code>TypedArray</code> in ECMAScript 2015 (ES6), the\\nJavaScript language had no mechanism for reading or manipulating streams\\nof binary data. The <code>Buffer</code> class was introduced as part of the Node.js\\nAPI to make it possible to interact with octet streams in the context of things\\nlike TCP streams and file system operations.</p>\\n<p>Now that <code>TypedArray</code> has been added in ES6, the <code>Buffer</code> class implements the\\n<code>Uint8Array</code> API in a manner that is more optimized and suitable for Node.js&#39;\\nuse cases.</p>\\n<p>Instances of the <code>Buffer</code> class are similar to arrays of integers but\\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\\nThe size of the <code>Buffer</code> is established when it is created and cannot be\\nresized.</p>\\n<p>The <code>Buffer</code> class is a global within Node.js, making it unlikely that one\\nwould need to ever use <code>require(&#39;buffer&#39;).Buffer</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.alloc(10);\\n  // Creates a zero-filled Buffer of length 10.\\n\\nconst buf2 = Buffer.alloc(10, 1);\\n  // Creates a Buffer of length 10, filled with 0x01.\\n\\nconst buf3 = Buffer.allocUnsafe(10);\\n  // Creates an uninitialized buffer of length 10.\\n  // This is faster than calling Buffer.alloc() but the returned\\n  // Buffer instance might contain old data that needs to be\\n  // overwritten using either fill() or write().\\n\\nconst buf4 = Buffer.from([1,2,3]);\\n  // Creates a Buffer containing [01, 02, 03].\\n\\nconst buf5 = Buffer.from(&#39;test&#39;);\\n  // Creates a Buffer containing ASCII bytes [74, 65, 73, 74].\\n\\nconst buf6 = Buffer.from(&#39;t\u00e9st&#39;, &#39;utf8&#39;);\\n  // Creates a Buffer containing UTF8 bytes [74, c3, a9, 73, 74].\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"`Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`\",\n          \"name\": \"`buffer.from()`,_`buffer.alloc()`,_and_`buffer.allocunsafe()`\",\n          \"desc\": \"<p>In versions of Node.js prior to v6, <code>Buffer</code> instances were created using the\\n<code>Buffer</code> constructor function, which allocates the returned <code>Buffer</code>\\ndifferently based on what arguments are provided:</p>\\n<ul>\\n<li>Passing a number as the first argument to <code>Buffer()</code> (e.g. <code>new Buffer(10)</code>),\\nallocates a new <code>Buffer</code> object of the specified size. The memory allocated\\nfor such <code>Buffer</code> instances is <em>not</em> initialized and <em>can contain sensitive\\ndata</em>. Such <code>Buffer</code> objects <em>must</em> be initialized <em>manually</em> by using either\\n[<code>buf.fill(0)</code>][] or by writing to the <code>Buffer</code> completely. While this\\nbehavior is <em>intentional</em> to improve performance, development experience has\\ndemonstrated that a more explicit distinction is required between creating a\\nfast-but-uninitialized <code>Buffer</code> versus creating a slower-but-safer <code>Buffer</code>.</li>\\n<li>Passing a string, array, or <code>Buffer</code> as the first argument copies the\\npassed object&#39;s data into the <code>Buffer</code>.</li>\\n<li>Passing an <code>ArrayBuffer</code> returns a <code>Buffer</code> that shares allocated memory with\\nthe given <code>ArrayBuffer</code>.</li>\\n</ul>\\n<p>Because the behavior of <code>new Buffer()</code> changes significantly based on the type\\nof value passed as the first argument, applications that do not properly\\nvalidate the input arguments passed to <code>new Buffer()</code>, or that fail to\\nappropriately initialize newly allocated <code>Buffer</code> content, can inadvertently\\nintroduce security and reliability issues into their code.</p>\\n<p>To make the creation of <code>Buffer</code> objects more reliable and less error prone,\\nthe various forms of the <code>new Buffer()</code> constructor have been <strong>deprecated</strong>\\nand replaced by separate <code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and\\n<code>Buffer.allocUnsafe()</code> methods.</p>\\n<p><em>Developers should migrate all existing uses of the <code>new Buffer()</code> constructors\\nto one of these new APIs.</em></p>\\n<ul>\\n<li>[<code>Buffer.from(array)</code>][buffer_from_array] returns a new <code>Buffer</code> containing\\na <em>copy</em> of the provided octets.</li>\\n<li>[<code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code>][buffer_from_arraybuf]\\nreturns a new <code>Buffer</code> that <em>shares</em> the same allocated memory as the given\\n<code>ArrayBuffer</code>.</li>\\n<li>[<code>Buffer.from(buffer)</code>][buffer_from_buffer] returns a new <code>Buffer</code>\\ncontaining a <em>copy</em> of the contents of the given <code>Buffer</code>.</li>\\n<li>[<code>Buffer.from(str[, encoding])</code>][buffer_from_string] returns a new <code>Buffer</code>\\ncontaining a <em>copy</em> of the provided string.</li>\\n<li>[<code>Buffer.alloc(size[, fill[, encoding]])</code>][buffer_alloc] returns a &quot;filled&quot;\\n<code>Buffer</code> instance of the specified size. This method can be significantly\\nslower than [<code>Buffer.allocUnsafe(size)</code>][buffer_allocunsafe] but ensures\\nthat newly created <code>Buffer</code> instances never contain old and potentially\\nsensitive data.</li>\\n<li>[<code>Buffer.allocUnsafe(size)</code>][buffer_allocunsafe] and\\n[<code>Buffer.allocUnsafeSlow(size)</code>][buffer_allocunsafeslow] each return a\\nnew <code>Buffer</code> of the specified <code>size</code> whose content <em>must</em> be initialized\\nusing either [<code>buf.fill(0)</code>][] or written to completely.</li>\\n</ul>\\n<p><code>Buffer</code> instances returned by <code>Buffer.allocUnsafe(size)</code> <em>may</em> be allocated\\noff a shared internal memory pool if <code>size</code> is less than or equal to half\\n<code>Buffer.poolSize</code>. Instances returned by <code>Buffer.allocUnsafeSlow(size)</code> <em>never</em>\\nuse the shared internal memory pool.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"The `--zero-fill-buffers` command line option\",\n              \"name\": \"the_`--zero-fill-buffers`_command_line_option\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"desc\": \"<p>Node.js can be started using the <code>--zero-fill-buffers</code> command line option to\\nforce all newly allocated <code>Buffer</code> instances created using either\\n<code>new Buffer(size)</code>, <code>Buffer.allocUnsafe(size)</code>, <code>Buffer.allocUnsafeSlow(size)</code>\\nor <code>new SlowBuffer(size)</code> to be <em>automatically zero-filled</em> upon creation. Use\\nof this flag <em>changes the default behavior</em> of these methods and <em>can have a\\nsignificant impact</em> on performance. Use of the <code>--zero-fill-buffers</code> option is\\nrecommended only when absolutely necessary to enforce that newly allocated\\n<code>Buffer</code> instances cannot contain potentially sensitive data.</p>\\n<pre><code>$ node --zero-fill-buffers\\n&gt; Buffer.allocUnsafe(5);\\n&lt;Buffer 00 00 00 00 00&gt;\\n</code></pre>\",\n              \"type\": \"module\",\n              \"displayName\": \"The `--zero-fill-buffers` command line option\"\n            },\n            {\n              \"textRaw\": \"What makes `Buffer.allocUnsafe(size)` and `Buffer.allocUnsafeSlow(size)` \\\"unsafe\\\"?\",\n              \"name\": \"what_makes_`buffer.allocunsafe(size)`_and_`buffer.allocunsafeslow(size)`_\\\"unsafe\\\"?\",\n              \"desc\": \"<p>When calling <code>Buffer.allocUnsafe()</code> (and <code>Buffer.allocUnsafeSlow()</code>), the\\nsegment of allocated memory is <em>uninitialized</em> (it is not zeroed-out). While\\nthis design makes the allocation of memory quite fast, the allocated segment of\\nmemory might contain old data that is potentially sensitive. Using a <code>Buffer</code>\\ncreated by <code>Buffer.allocUnsafe()</code> without <em>completely</em> overwriting the memory\\ncan allow this old data to be leaked when the <code>Buffer</code> memory is read.</p>\\n<p>While there are clear performance advantages to using <code>Buffer.allocUnsafe()</code>,\\nextra care <em>must</em> be taken in order to avoid introducing security\\nvulnerabilities into an application.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"What makes `Buffer.allocUnsafe(size)` and `Buffer.allocUnsafeSlow(size)` \\\"unsafe\\\"?\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"`Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`\"\n        },\n        {\n          \"textRaw\": \"Buffers and Character Encodings\",\n          \"name\": \"buffers_and_character_encodings\",\n          \"desc\": \"<p>Buffers are commonly used to represent sequences of encoded characters\\nsuch as UTF8, UCS2, Base64 or even Hex-encoded data. It is possible to\\nconvert back and forth between Buffers and ordinary JavaScript string objects\\nby using an explicit encoding method.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;hello world&#39;, &#39;ascii&#39;);\\nconsole.log(buf.toString(&#39;hex&#39;));\\n  // prints: 68656c6c6f20776f726c64\\nconsole.log(buf.toString(&#39;base64&#39;));\\n  // prints: aGVsbG8gd29ybGQ=\\n</code></pre>\\n<p>The character encodings currently supported by Node.js include:</p>\\n<ul>\\n<li><p><code>&#39;ascii&#39;</code> - for 7-bit ASCII data only.  This encoding method is very fast and\\nwill strip the high bit if set.</p>\\n</li>\\n<li><p><code>&#39;utf8&#39;</code> - Multibyte encoded Unicode characters. Many web pages and other\\ndocument formats use UTF-8.</p>\\n</li>\\n<li><p><code>&#39;utf16le&#39;</code> - 2 or 4 bytes, little-endian encoded Unicode characters.\\nSurrogate pairs (U+10000 to U+10FFFF) are supported.</p>\\n</li>\\n<li><p><code>&#39;ucs2&#39;</code> - Alias of <code>&#39;utf16le&#39;</code>.</p>\\n</li>\\n<li><p><code>&#39;base64&#39;</code> - Base64 string encoding. When creating a buffer from a string,\\nthis encoding will also correctly accept &quot;URL and Filename Safe Alphabet&quot; as\\nspecified in [RFC 4648, Section 5].</p>\\n</li>\\n<li><p><code>&#39;binary&#39;</code> - A way of encoding the buffer into a one-byte (<code>latin-1</code>)\\nencoded string. The string <code>&#39;latin-1&#39;</code> is not supported. Instead, pass\\n<code>&#39;binary&#39;</code> to use <code>&#39;latin-1&#39;</code> encoding.</p>\\n</li>\\n<li><p><code>&#39;hex&#39;</code> - Encode each byte as two hexadecimal characters.</p>\\n</li>\\n</ul>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Buffers and Character Encodings\"\n        },\n        {\n          \"textRaw\": \"Buffers and TypedArray\",\n          \"name\": \"buffers_and_typedarray\",\n          \"desc\": \"<p>Buffers are also <code>Uint8Array</code> TypedArray instances. However, there are subtle\\nincompatibilities with the TypedArray specification in ECMAScript 2015. For\\ninstance, while <code>ArrayBuffer#slice()</code> creates a copy of the slice,\\nthe implementation of [<code>Buffer#slice()</code>][<code>buf.slice()</code>] creates a view over the\\nexisting Buffer without copying, making <code>Buffer#slice()</code> far more efficient.</p>\\n<p>It is also possible to create new TypedArray instances from a <code>Buffer</code> with the\\nfollowing caveats:</p>\\n<ol>\\n<li><p>The <code>Buffer</code> object&#39;s memory is copied to the TypedArray, not shared.</p>\\n</li>\\n<li><p>The <code>Buffer</code> object&#39;s memory is interpreted as an array of distinct\\nelements, and not as a byte array of the target type. That is,\\n<code>new Uint32Array(Buffer.from([1,2,3,4]))</code> creates a 4-element <code>Uint32Array</code>\\nwith elements <code>[1,2,3,4]</code>, not a <code>Uint32Array</code> with a single element\\n<code>[0x1020304]</code> or <code>[0x4030201]</code>.</p>\\n</li>\\n</ol>\\n<p>It is possible to create a new <code>Buffer</code> that shares the same allocated memory as\\na TypedArray instance by using the TypeArray object&#39;s <code>.buffer</code> property:</p>\\n<pre><code class=\\\"lang-js\\\">const arr = new Uint16Array(2);\\narr[0] = 5000;\\narr[1] = 4000;\\n\\nconst buf1 = Buffer.from(arr); // copies the buffer\\nconst buf2 = Buffer.from(arr.buffer); // shares the memory with arr;\\n\\nconsole.log(buf1);\\n  // Prints: &lt;Buffer 88 a0&gt;, copied buffer has only two elements\\nconsole.log(buf2);\\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\\n\\narr[1] = 6000;\\nconsole.log(buf1);\\n  // Prints: &lt;Buffer 88 a0&gt;\\nconsole.log(buf2);\\n  // Prints: &lt;Buffer 88 13 70 17&gt;\\n</code></pre>\\n<p>Note that when creating a <code>Buffer</code> using the TypedArray&#39;s <code>.buffer</code>, it is\\npossible to use only a portion of the underlying <code>ArrayBuffer</code> by passing in\\n<code>byteOffset</code> and <code>length</code> parameters:</p>\\n<pre><code class=\\\"lang-js\\\">const arr = new Uint16Array(20);\\nconst buf = Buffer.from(arr.buffer, 0, 16);\\nconsole.log(buf.length);\\n  // Prints: 16\\n</code></pre>\\n<p>The <code>Buffer.from()</code> and [<code>TypedArray.from()</code>][] (e.g.<code>Uint8Array.from()</code>) have\\ndifferent signatures and implementations. Specifically, the TypedArray variants\\naccept a second argument that is a mapping function that is invoked on every\\nelement of the typed array:</p>\\n<ul>\\n<li><code>TypedArray.from(source[, mapFn[, thisArg]])</code></li>\\n</ul>\\n<p>The <code>Buffer.from()</code> method, however, does not support the use of a mapping\\nfunction:</p>\\n<ul>\\n<li>[<code>Buffer.from(array)</code>][buffer_from_array]</li>\\n<li>[<code>Buffer.from(buffer)</code>][buffer_from_buffer]</li>\\n<li>[<code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code>][buffer_from_arraybuf]</li>\\n<li>[<code>Buffer.from(str[, encoding])</code>][buffer_from_string]</li>\\n</ul>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Buffers and TypedArray\"\n        },\n        {\n          \"textRaw\": \"Buffers and ES6 iteration\",\n          \"name\": \"buffers_and_es6_iteration\",\n          \"desc\": \"<p>Buffers can be iterated over using the ECMAScript 2015 (ES6) <code>for..of</code> syntax:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1, 2, 3]);\\n\\nfor (var b of buf)\\n  console.log(b)\\n\\n// Prints:\\n//   1\\n//   2\\n//   3\\n</code></pre>\\n<p>Additionally, the [<code>buf.values()</code>][], [<code>buf.keys()</code>][], and\\n[<code>buf.entries()</code>][] methods can be used to create iterators.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Buffers and ES6 iteration\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Buffer\",\n          \"type\": \"class\",\n          \"name\": \"Buffer\",\n          \"desc\": \"<p>The Buffer class is a global type for dealing with binary data directly.\\nIt can be constructed in a variety of ways.</p>\\n\",\n          \"classMethods\": [\n            {\n              \"textRaw\": \"Class Method: Buffer.alloc(size[, fill[, encoding]])\",\n              \"type\": \"classMethod\",\n              \"name\": \"alloc\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`size` {Number} \",\n                      \"name\": \"size\",\n                      \"type\": \"Number\"\n                    },\n                    {\n                      \"textRaw\": \"`fill` {Value} Default: `undefined` \",\n                      \"name\": \"fill\",\n                      \"type\": \"Value\",\n                      \"desc\": \"Default: `undefined`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `utf8` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `utf8`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"size\"\n                    },\n                    {\n                      \"name\": \"fill\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the\\n<code>Buffer</code> will be <em>zero-filled</em>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.alloc(5);\\nconsole.log(buf);\\n  // &lt;Buffer 00 00 00 00 00&gt;\\n</code></pre>\\n<p>The <code>size</code> must be less than or equal to the value of\\n<code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is\\n<code>(2^31)-1</code>). Otherwise, a [<code>RangeError</code>][] is thrown. A zero-length Buffer will\\nbe created if a <code>size</code> less than or equal to 0 is specified.</p>\\n<p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling\\n<code>buf.fill(fill)</code>. See [<code>buf.fill()</code>][] for more information.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.alloc(5, &#39;a&#39;);\\nconsole.log(buf);\\n  // &lt;Buffer 61 61 61 61 61&gt;\\n</code></pre>\\n<p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be\\ninitialized by calling <code>buf.fill(fill, encoding)</code>. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;);\\nconsole.log(buf);\\n  // &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\\n</code></pre>\\n<p>Calling <code>Buffer.alloc(size)</code> can be significantly slower than the alternative\\n<code>Buffer.allocUnsafe(size)</code> but ensures that the newly created <code>Buffer</code> instance\\ncontents will <em>never contain sensitive data</em>.</p>\\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.allocUnsafe(size)\",\n              \"type\": \"classMethod\",\n              \"name\": \"allocUnsafe\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`size` {Number} \",\n                      \"name\": \"size\",\n                      \"type\": \"Number\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"size\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Allocates a new <em>non-zero-filled</em> <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must\\nbe less than or equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a [<code>RangeError</code>][] is\\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\\n0 is specified.</p>\\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\\n<em>may contain sensitive data</em>. Use [<code>buf.fill(0)</code>][] to initialize such\\n<code>Buffer</code> instances to zeroes.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(5);\\nconsole.log(buf);\\n  // &lt;Buffer 78 e0 82 02 01&gt;\\n  // (octets will be different, every time)\\nbuf.fill(0);\\nconsole.log(buf);\\n  // &lt;Buffer 00 00 00 00 00&gt;\\n</code></pre>\\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\\n<p>Note that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of\\nsize <code>Buffer.poolSize</code> that is used as a pool for the fast allocation of new\\n<code>Buffer</code> instances created using <code>Buffer.allocUnsafe(size)</code> (and the deprecated\\n<code>new Buffer(size)</code> constructor) only when <code>size</code> is less than or equal to\\n<code>Buffer.poolSize &gt;&gt; 1</code> (floor of <code>Buffer.poolSize</code> divided by two). The default\\nvalue of <code>Buffer.poolSize</code> is <code>8192</code> but can be modified.</p>\\n<p>Use of this pre-allocated internal memory pool is a key difference between\\ncalling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.\\nSpecifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal Buffer\\npool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal\\nBuffer pool if <code>size</code> is less than or equal to half <code>Buffer.poolSize</code>. The\\ndifference is subtle but can be important when an application requires the\\nadditional performance that <code>Buffer.allocUnsafe(size)</code> provides.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.allocUnsafeSlow(size)\",\n              \"type\": \"classMethod\",\n              \"name\": \"allocUnsafeSlow\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`size` {Number} \",\n                      \"name\": \"size\",\n                      \"type\": \"Number\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"size\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Allocates a new <em>non-zero-filled</em> and non-pooled <code>Buffer</code> of <code>size</code> bytes.  The\\n<code>size</code> must be less than or equal to the value of\\n<code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit architectures, <code>kMaxLength</code> is\\n<code>(2^31)-1</code>). Otherwise, a [<code>RangeError</code>][] is thrown. A zero-length Buffer will\\nbe created if a <code>size</code> less than or equal to 0 is specified.</p>\\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\\n<em>may contain sensitive data</em>. Use [<code>buf.fill(0)</code>][] to initialize such\\n<code>Buffer</code> instances to zeroes.</p>\\n<p>When using <code>Buffer.allocUnsafe()</code> to allocate new <code>Buffer</code> instances,\\nallocations under 4KB are, by default, sliced from a single pre-allocated\\n<code>Buffer</code>. This allows applications to avoid the garbage collection overhead of\\ncreating many individually allocated Buffers. This approach improves both\\nperformance and memory usage by eliminating the need to track and cleanup as\\nmany <code>Persistent</code> objects.</p>\\n<p>However, in the case where a developer may need to retain a small chunk of\\nmemory from a pool for an indeterminate amount of time, it may be appropriate\\nto create an un-pooled Buffer instance using <code>Buffer.allocUnsafeSlow()</code> then\\ncopy out the relevant bits.</p>\\n<pre><code class=\\\"lang-js\\\">// need to keep around a few small chunks of memory\\nconst store = [];\\n\\nsocket.on(&#39;readable&#39;, () =&gt; {\\n  const data = socket.read();\\n  // allocate for retained data\\n  const sb = Buffer.allocUnsafeSlow(10);\\n  // copy the data into the new allocation\\n  data.copy(sb, 0, 0, 10);\\n  store.push(sb);\\n});\\n</code></pre>\\n<p>Use of <code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort <em>after</em>\\na developer has observed undue memory retention in their applications.</p>\\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.byteLength(string[, encoding])\",\n              \"type\": \"classMethod\",\n              \"name\": \"byteLength\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`string` {String | Buffer | TypedArray | DataView | ArrayBuffer} \",\n                      \"name\": \"string\",\n                      \"type\": \"String | Buffer | TypedArray | DataView | ArrayBuffer\"\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"string\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns the actual byte length of a string. This is not the same as\\n[<code>String.prototype.length</code>][] since that returns the number of <em>characters</em> in\\na string.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const str = &#39;\\\\u00bd + \\\\u00bc = \\\\u00be&#39;;\\n\\nconsole.log(`${str}: ${str.length} characters, ` +\\n            `${Buffer.byteLength(str, &#39;utf8&#39;)} bytes`);\\n\\n// \u00bd + \u00bc = \u00be: 9 characters, 12 bytes\\n</code></pre>\\n<p>When <code>string</code> is a <code>Buffer</code>/[<code>DataView</code>][]/[<code>TypedArray</code>][]/<code>ArrayBuffer</code>,\\nreturns the actual byte length.</p>\\n<p>Otherwise, converts to <code>String</code> and returns the byte length of string.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.compare(buf1, buf2)\",\n              \"type\": \"classMethod\",\n              \"name\": \"compare\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.13\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`buf1` {Buffer} \",\n                      \"name\": \"buf1\",\n                      \"type\": \"Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`buf2` {Buffer} \",\n                      \"name\": \"buf2\",\n                      \"type\": \"Buffer\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf1\"\n                    },\n                    {\n                      \"name\": \"buf2\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of\\nBuffers. This is equivalent is calling [<code>buf1.compare(buf2)</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const arr = [Buffer.from(&#39;1234&#39;), Buffer.from(&#39;0123&#39;)];\\narr.sort(Buffer.compare);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.concat(list[, totalLength])\",\n              \"type\": \"classMethod\",\n              \"name\": \"concat\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.11\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Buffer} \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`list` {Array} List of Buffer objects to concat \",\n                      \"name\": \"list\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of Buffer objects to concat\"\n                    },\n                    {\n                      \"textRaw\": \"`totalLength` {Number} Total length of the Buffers in the list when concatenated \",\n                      \"name\": \"totalLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Total length of the Buffers in the list when concatenated\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"list\"\n                    },\n                    {\n                      \"name\": \"totalLength\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns a new Buffer which is the result of concatenating all the Buffers in\\nthe <code>list</code> together.</p>\\n<p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length\\nBuffer is returned.</p>\\n<p>If <code>totalLength</code> is not provided, it is calculated from the Buffers in the\\n<code>list</code>. This, however, adds an additional loop to the function, so it is faster\\nto provide the length explicitly.</p>\\n<p>Example: build a single Buffer from a list of three Buffers:</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.alloc(10);\\nconst buf2 = Buffer.alloc(14);\\nconst buf3 = Buffer.alloc(18);\\nconst totalLength = buf1.length + buf2.length + buf3.length;\\n\\nconsole.log(totalLength);\\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\\nconsole.log(bufA);\\nconsole.log(bufA.length);\\n\\n// 42\\n// &lt;Buffer 00 00 00 00 ...&gt;\\n// 42\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.from(array)\",\n              \"type\": \"classMethod\",\n              \"name\": \"from\",\n              \"meta\": {\n                \"added\": [\n                  \"v3.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`array` {Array} \",\n                      \"name\": \"array\",\n                      \"type\": \"Array\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"array\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\\n  // creates a new Buffer containing ASCII bytes\\n  // [&#39;b&#39;,&#39;u&#39;,&#39;f&#39;,&#39;f&#39;,&#39;e&#39;,&#39;r&#39;]\\n</code></pre>\\n<p>A <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\",\n              \"type\": \"classMethod\",\n              \"name\": \"from\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or a `new ArrayBuffer()` \",\n                      \"name\": \"arrayBuffer\",\n                      \"type\": \"ArrayBuffer\",\n                      \"desc\": \"The `.buffer` property of a `TypedArray` or a `new ArrayBuffer()`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteOffset` {Number} Default: `0` \",\n                      \"name\": \"byteOffset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `0`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`length` {Number} Default: `arrayBuffer.length - byteOffset` \",\n                      \"name\": \"length\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `arrayBuffer.length - byteOffset`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"arrayBuffer\"\n                    },\n                    {\n                      \"name\": \"byteOffset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"length\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\\nthe newly created <code>Buffer</code> will share the same allocated memory as the\\nTypedArray.</p>\\n<pre><code class=\\\"lang-js\\\">const arr = new Uint16Array(2);\\narr[0] = 5000;\\narr[1] = 4000;\\n\\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\\n\\n// changing the TypedArray changes the Buffer also\\narr[1] = 6000;\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 88 13 70 17&gt;\\n</code></pre>\\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const ab = new ArrayBuffer(10);\\nconst buf = Buffer.from(ab, 0, 2);\\nconsole.log(buf.length);\\n  // Prints: 2\\n</code></pre>\\n<p>A <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <code>ArrayBuffer</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.from(buffer)\",\n              \"type\": \"classMethod\",\n              \"name\": \"from\",\n              \"meta\": {\n                \"added\": [\n                  \"v3.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`buffer` {Buffer} \",\n                      \"name\": \"buffer\",\n                      \"type\": \"Buffer\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.from(&#39;buffer&#39;);\\nconst buf2 = Buffer.from(buf1);\\n\\nbuf1[0] = 0x61;\\nconsole.log(buf1.toString());\\n  // &#39;auffer&#39;\\nconsole.log(buf2.toString());\\n  // &#39;buffer&#39; (copy is not changed)\\n</code></pre>\\n<p>A <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.from(str[, encoding])\",\n              \"type\": \"classMethod\",\n              \"name\": \"from\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`str` {String} String to encode. \",\n                      \"name\": \"str\",\n                      \"type\": \"String\",\n                      \"desc\": \"String to encode.\"\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Encoding to use, Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Encoding to use, Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"str\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Creates a new <code>Buffer</code> containing the given JavaScript string <code>str</code>. If\\nprovided, the <code>encoding</code> parameter identifies the character encoding.\\nIf not provided, <code>encoding</code> defaults to <code>&#39;utf8&#39;</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.from(&#39;this is a t\u00e9st&#39;);\\nconsole.log(buf1.toString());\\n  // prints: this is a t\u00e9st\\nconsole.log(buf1.toString(&#39;ascii&#39;));\\n  // prints: this is a tC)st\\n\\nconst buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\\nconsole.log(buf2.toString());\\n  // prints: this is a t\u00e9st\\n</code></pre>\\n<p>A <code>TypeError</code> will be thrown if <code>str</code> is not a string.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.isBuffer(obj)\",\n              \"type\": \"classMethod\",\n              \"name\": \"isBuffer\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`obj` {Object} \",\n                      \"name\": \"obj\",\n                      \"type\": \"Object\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"obj\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns &#39;true&#39; if <code>obj</code> is a Buffer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Class Method: Buffer.isEncoding(encoding)\",\n              \"type\": \"classMethod\",\n              \"name\": \"isEncoding\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.1\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} The encoding string to test \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"The encoding string to test\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns true if the <code>encoding</code> is a valid encoding argument, or false\\notherwise.</p>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"buf[index]\",\n              \"name\": \"[index]\",\n              \"meta\": {\n                \"type\": \"property\",\n                \"name\": [\n                  \"index\"\n                ]\n              },\n              \"desc\": \"<p>The index operator <code>[index]</code> can be used to get and set the octet at position\\n<code>index</code> in the Buffer. The values refer to individual bytes, so the legal value\\nrange is between <code>0x00</code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p>\\n<p>Example: copy an ASCII string into a Buffer, one byte at a time:</p>\\n<pre><code class=\\\"lang-js\\\">const str = &quot;Node.js&quot;;\\nconst buf = Buffer.allocUnsafe(str.length);\\n\\nfor (let i = 0; i &lt; str.length ; i++) {\\n  buf[i] = str.charCodeAt(i);\\n}\\n\\nconsole.log(buf.toString(&#39;ascii&#39;));\\n  // Prints: Node.js\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"`length` {Number} \",\n              \"type\": \"Number\",\n              \"name\": \"length\",\n              \"desc\": \"<p>Returns the amount of memory allocated for the Buffer in number of bytes. Note\\nthat this does not necessarily reflect the amount of usable data within the\\nBuffer. For instance, in the example below, a Buffer with 1234 bytes is\\nallocated, but only 11 ASCII bytes are written.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.alloc(1234);\\n\\nconsole.log(buf.length);\\n  // Prints: 1234\\n\\nbuf.write(&#39;some string&#39;, 0, &#39;ascii&#39;);\\nconsole.log(buf.length);\\n  // Prints: 1234\\n</code></pre>\\n<p>While the <code>length</code> property is not immutable, changing the value of <code>length</code>\\ncan result in undefined and inconsistent behavior. Applications that wish to\\nmodify the length of a Buffer should therefore treat <code>length</code> as read-only and\\nuse [<code>buf.slice()</code>][] to create a new Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">var buf = Buffer.allocUnsafe(10);\\nbuf.write(&#39;abcdefghj&#39;, 0, &#39;ascii&#39;);\\nconsole.log(buf.length);\\n  // Prints: 10\\nbuf = buf.slice(0,5);\\nconsole.log(buf.length);\\n  // Prints: 5\\n</code></pre>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])\",\n              \"type\": \"method\",\n              \"name\": \"compare\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.13\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`target` {Buffer} \",\n                      \"name\": \"target\",\n                      \"type\": \"Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`targetStart` {Integer} The offset within `target` at which to begin comparison. default = `0`. \",\n                      \"name\": \"targetStart\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"The offset within `target` at which to begin comparison. default = `0`.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`targetEnd` {Integer} The offset with `target` at which to end comparison. Ignored when `targetStart` is `undefined`. default = `target.byteLength`. \",\n                      \"name\": \"targetEnd\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"The offset with `target` at which to end comparison. Ignored when `targetStart` is `undefined`. default = `target.byteLength`.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`sourceStart` {Integer} The offset within `buf` at which to begin comparison. Ignored when `targetStart` is `undefined`. default = `0` \",\n                      \"name\": \"sourceStart\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"The offset within `buf` at which to begin comparison. Ignored when `targetStart` is `undefined`. default = `0`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`sourceEnd` {Integer} The offset within `buf` at which to end comparison. Ignored when `targetStart` is `undefined`. default = `buf.byteLength`. \",\n                      \"name\": \"sourceEnd\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"The offset within `buf` at which to end comparison. Ignored when `targetStart` is `undefined`. default = `buf.byteLength`.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"target\"\n                    },\n                    {\n                      \"name\": \"targetStart\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"targetEnd\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"sourceStart\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"sourceEnd\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Compares two Buffer instances and returns a number indicating whether <code>buf</code>\\ncomes before, after, or is the same as the <code>target</code> in sort order.\\nComparison is based on the actual sequence of bytes in each Buffer.</p>\\n<ul>\\n<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>\\n<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>\\n<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>\\n</ul>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.from(&#39;ABC&#39;);\\nconst buf2 = Buffer.from(&#39;BCD&#39;);\\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\\n\\nconsole.log(buf1.compare(buf1));\\n  // Prints: 0\\nconsole.log(buf1.compare(buf2));\\n  // Prints: -1\\nconsole.log(buf1.compare(buf3));\\n  // Prints: 1\\nconsole.log(buf2.compare(buf1));\\n  // Prints: 1\\nconsole.log(buf2.compare(buf3));\\n  // Prints: 1\\n\\n[buf1, buf2, buf3].sort(Buffer.compare);\\n  // produces sort order [buf1, buf3, buf2]\\n</code></pre>\\n<p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>\\narguments can be used to limit the comparison to specific ranges within the two\\n<code>Buffer</code> objects.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\\n\\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\\n  // Prints: 0\\nconsole.log(buf1.compare(buf2, 0, 6, 4));\\n  // Prints: -1\\nconsole.log(buf1.compare(buf2, 5, 6, 5));\\n  // Prints: 1\\n</code></pre>\\n<p>A <code>RangeError</code> will be thrown if: <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>,\\n<code>targetEnd &gt; target.byteLength</code> or <code>sourceEnd &gt; source.byteLength</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])\",\n              \"type\": \"method\",\n              \"name\": \"copy\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The number of bytes copied. \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The number of bytes copied.\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`targetBuffer` {Buffer} Buffer to copy into \",\n                      \"name\": \"targetBuffer\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"Buffer to copy into\"\n                    },\n                    {\n                      \"textRaw\": \"`targetStart` {Number} Default: 0 \",\n                      \"name\": \"targetStart\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`sourceStart` {Number} Default: 0 \",\n                      \"name\": \"sourceStart\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`sourceEnd` {Number} Default: `buffer.length` \",\n                      \"name\": \"sourceEnd\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buffer.length`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"targetBuffer\"\n                    },\n                    {\n                      \"name\": \"targetStart\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"sourceStart\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"sourceEnd\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Copies data from a region of this Buffer to a region in the target Buffer even\\nif the target memory region overlaps with the source.</p>\\n<p>Example: build two Buffers, then copy <code>buf1</code> from byte 16 through byte 19\\ninto <code>buf2</code>, starting at the 8th byte in <code>buf2</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.allocUnsafe(26);\\nconst buf2 = Buffer.allocUnsafe(26).fill(&#39;!&#39;);\\n\\nfor (let i = 0 ; i &lt; 26 ; i++) {\\n  buf1[i] = i + 97; // 97 is ASCII a\\n}\\n\\nbuf1.copy(buf2, 8, 16, 20);\\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, 25));\\n  // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\\n</code></pre>\\n<p>Example: Build a single Buffer, then copy data from one region to an overlapping\\nregion in the same Buffer</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(26);\\n\\nfor (var i = 0 ; i &lt; 26 ; i++) {\\n  buf[i] = i + 97; // 97 is ASCII a\\n}\\n\\nbuf.copy(buf, 0, 4, 10);\\nconsole.log(buf.toString());\\n\\n// efghijghijklmnopqrstuvwxyz\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.entries()\",\n              \"type\": \"method\",\n              \"name\": \"entries\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.1.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Iterator} \",\n                    \"name\": \"return\",\n                    \"type\": \"Iterator\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Creates and returns an [iterator][] of <code>[index, byte]</code> pairs from the Buffer\\ncontents.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;buffer&#39;);\\nfor (var pair of buf.entries()) {\\n  console.log(pair);\\n}\\n// prints:\\n//   [0, 98]\\n//   [1, 117]\\n//   [2, 102]\\n//   [3, 102]\\n//   [4, 101]\\n//   [5, 114]\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.equals(otherBuffer)\",\n              \"type\": \"method\",\n              \"name\": \"equals\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`otherBuffer` {Buffer} \",\n                      \"name\": \"otherBuffer\",\n                      \"type\": \"Buffer\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"otherBuffer\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns a boolean indicating whether <code>this</code> and <code>otherBuffer</code> have exactly the\\nsame bytes.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.from(&#39;ABC&#39;);\\nconst buf2 = Buffer.from(&#39;414243&#39;, &#39;hex&#39;);\\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\\n\\nconsole.log(buf1.equals(buf2));\\n  // Prints: true\\nconsole.log(buf1.equals(buf3));\\n  // Prints: false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.fill(value[, offset[, end]][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"fill\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Buffer} \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {String|Buffer|Number} \",\n                      \"name\": \"value\",\n                      \"type\": \"String|Buffer|Number\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} Default: 0 \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`end` {Number} Default: `buf.length` \",\n                      \"name\": \"end\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buf.length`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"end\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Fills the Buffer with the specified value. If the <code>offset</code> (defaults to <code>0</code>)\\nand <code>end</code> (defaults to <code>buf.length</code>) are not given the entire buffer will be\\nfilled. The method returns a reference to the Buffer, so calls can be chained.\\nThis is meant as a small simplification to creating a Buffer. Allowing the\\ncreation and fill of the Buffer to be done on a single line:</p>\\n<pre><code class=\\\"lang-js\\\">const b = Buffer.allocUnsafe(50).fill(&#39;h&#39;);\\nconsole.log(b.toString());\\n  // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\n</code></pre>\\n<p><code>encoding</code> is only relevant if <code>value</code> is a string. Otherwise it is ignored.\\n<code>value</code> is coerced to a <code>uint32</code> value if it is not a String or Number.</p>\\n<p>The <code>fill()</code> operation writes bytes into the Buffer dumbly. If the final write\\nfalls in between a multi-byte character then whatever bytes fit into the buffer\\nare written.</p>\\n<pre><code class=\\\"lang-js\\\">Buffer(3).fill(&#39;\\\\u0222&#39;);\\n  // Prints: &lt;Buffer c8 a2 c8&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.indexOf(value[, byteOffset][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"indexOf\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.5.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {String|Buffer|Number} \",\n                      \"name\": \"value\",\n                      \"type\": \"String|Buffer|Number\"\n                    },\n                    {\n                      \"textRaw\": \"`byteOffset` {Number} Default: 0 \",\n                      \"name\": \"byteOffset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"byteOffset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Operates similar to [<code>Array#indexOf()</code>][] in that it returns either the\\nstarting index position of <code>value</code> in Buffer or <code>-1</code> if the Buffer does not\\ncontain <code>value</code>. The <code>value</code> can be a String, Buffer or Number. Strings are by\\ndefault interpreted as UTF8. Buffers will use the entire Buffer (to compare a\\npartial Buffer use [<code>buf.slice()</code>][]).  Numbers can range from 0 to 255.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;this is a buffer&#39;);\\n\\nbuf.indexOf(&#39;this&#39;);\\n  // returns 0\\nbuf.indexOf(&#39;is&#39;);\\n  // returns 2\\nbuf.indexOf(Buffer.from(&#39;a buffer&#39;));\\n  // returns 8\\nbuf.indexOf(97); // ascii for &#39;a&#39;\\n  // returns 8\\nbuf.indexOf(Buffer.from(&#39;a buffer example&#39;));\\n  // returns -1\\nbuf.indexOf(Buffer.from(&#39;a buffer example&#39;).slice(0,8));\\n  // returns 8\\n\\nconst utf16Buffer = Buffer.from(&#39;\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395&#39;, &#39;ucs2&#39;);\\n\\nutf16Buffer.indexOf(&#39;\\\\u03a3&#39;,  0, &#39;ucs2&#39;);\\n  // returns 4\\nutf16Buffer.indexOf(&#39;\\\\u03a3&#39;, -4, &#39;ucs2&#39;);\\n  // returns 6\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.includes(value[, byteOffset][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"includes\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.3.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {String|Buffer|Number} \",\n                      \"name\": \"value\",\n                      \"type\": \"String|Buffer|Number\"\n                    },\n                    {\n                      \"textRaw\": \"`byteOffset` {Number} Default: 0 \",\n                      \"name\": \"byteOffset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"byteOffset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Operates similar to [<code>Array#includes()</code>][]. The <code>value</code> can be a String, Buffer\\nor Number. Strings are interpreted as UTF8 unless overridden with the\\n<code>encoding</code> argument. Buffers will use the entire Buffer (to compare a partial\\nBuffer use [<code>buf.slice()</code>][]). Numbers can range from 0 to 255.</p>\\n<p>The <code>byteOffset</code> indicates the index in <code>buf</code> where searching begins.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;this is a buffer&#39;);\\n\\nbuf.includes(&#39;this&#39;);\\n  // returns true\\nbuf.includes(&#39;is&#39;);\\n  // returns true\\nbuf.includes(Buffer.from(&#39;a buffer&#39;));\\n  // returns true\\nbuf.includes(97); // ascii for &#39;a&#39;\\n  // returns true\\nbuf.includes(Buffer.from(&#39;a buffer example&#39;));\\n  // returns false\\nbuf.includes(Buffer.from(&#39;a buffer example&#39;).slice(0,8));\\n  // returns true\\nbuf.includes(&#39;this&#39;, 4);\\n  // returns false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.keys()\",\n              \"type\": \"method\",\n              \"name\": \"keys\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.1.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Iterator} \",\n                    \"name\": \"return\",\n                    \"type\": \"Iterator\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Creates and returns an [iterator][] of Buffer keys (indices).</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;buffer&#39;);\\nfor (var key of buf.keys()) {\\n  console.log(key);\\n}\\n// prints:\\n//   0\\n//   1\\n//   2\\n//   3\\n//   4\\n//   5\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.lastIndexOf(value[, byteOffset][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"lastIndexOf\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {String|Buffer|Number} \",\n                      \"name\": \"value\",\n                      \"type\": \"String|Buffer|Number\"\n                    },\n                    {\n                      \"textRaw\": \"`byteOffset` {Number} Default: `buf.length` \",\n                      \"name\": \"byteOffset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buf.length`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"byteOffset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Identical to [<code>Buffer#indexOf()</code>][], but searches the Buffer from back to front\\ninstead of front to back. Returns the starting index position of <code>value</code> in\\nBuffer or <code>-1</code> if the Buffer does not contain <code>value</code>. The <code>value</code> can be a\\nString, Buffer or Number. Strings are by default interpreted as UTF8. If\\n<code>byteOffset</code> is provided, will return the last match that begins at or before\\n<code>byteOffset</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = new Buffer(&#39;this buffer is a buffer&#39;);\\n\\nbuf.lastIndexOf(&#39;this&#39;);\\n  // returns 0\\nbuf.lastIndexOf(&#39;buffer&#39;);\\n  // returns 17\\nbuf.lastIndexOf(new Buffer(&#39;buffer&#39;));\\n  // returns 17\\nbuf.lastIndexOf(97); // ascii for &#39;a&#39;\\n  // returns 15\\nbuf.lastIndexOf(new Buffer(&#39;yolo&#39;));\\n  // returns -1\\nbuf.lastIndexOf(&#39;buffer&#39;, 5)\\n  // returns 5\\nbuf.lastIndexOf(&#39;buffer&#39;, 4)\\n  // returns -1\\n\\nconst utf16Buffer = new Buffer(&#39;\\\\u039a\\\\u0391\\\\u03a3\\\\u03a3\\\\u0395&#39;, &#39;ucs2&#39;);\\n\\nutf16Buffer.lastIndexOf(&#39;\\\\u03a3&#39;, null, &#39;ucs2&#39;);\\n  // returns 6\\nutf16Buffer.lastIndexOf(&#39;\\\\u03a3&#39;, -5, &#39;ucs2&#39;);\\n  // returns 4\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readDoubleBE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readDoubleBE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 8` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 8`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a 64-bit double from the Buffer at the specified <code>offset</code> with specified\\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\\nlittle endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,2,3,4,5,6,7,8]);\\n\\nbuf.readDoubleBE();\\n  // Returns: 8.20788039913184e-304\\nbuf.readDoubleLE();\\n  // Returns: 5.447603722011605e-270\\nbuf.readDoubleLE(1);\\n  // throws RangeError: Index out of range\\n\\nbuf.readDoubleLE(1, true); // Warning: reads passed end of buffer!\\n  // Segmentation fault! don&#39;t do this!\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readDoubleLE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readDoubleLE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 8` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 8`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a 64-bit double from the Buffer at the specified <code>offset</code> with specified\\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\\nlittle endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,2,3,4,5,6,7,8]);\\n\\nbuf.readDoubleBE();\\n  // Returns: 8.20788039913184e-304\\nbuf.readDoubleLE();\\n  // Returns: 5.447603722011605e-270\\nbuf.readDoubleLE(1);\\n  // throws RangeError: Index out of range\\n\\nbuf.readDoubleLE(1, true); // Warning: reads passed end of buffer!\\n  // Segmentation fault! don&#39;t do this!\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readFloatBE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readFloatBE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a 32-bit float from the Buffer at the specified <code>offset</code> with specified\\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\\nlittle endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,2,3,4]);\\n\\nbuf.readFloatBE();\\n  // Returns: 2.387939260590663e-38\\nbuf.readFloatLE();\\n  // Returns: 1.539989614439558e-36\\nbuf.readFloatLE(1);\\n  // throws RangeError: Index out of range\\n\\nbuf.readFloatLE(1, true); // Warning: reads passed end of buffer!\\n  // Segmentation fault! don&#39;t do this!\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readFloatLE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readFloatLE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a 32-bit float from the Buffer at the specified <code>offset</code> with specified\\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\\nlittle endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,2,3,4]);\\n\\nbuf.readFloatBE();\\n  // Returns: 2.387939260590663e-38\\nbuf.readFloatLE();\\n  // Returns: 1.539989614439558e-36\\nbuf.readFloatLE(1);\\n  // throws RangeError: Index out of range\\n\\nbuf.readFloatLE(1, true); // Warning: reads passed end of buffer!\\n  // Segmentation fault! don&#39;t do this!\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readInt8(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readInt8\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 1` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 1`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a signed 8-bit integer from the Buffer at the specified <code>offset</code>.</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readInt8(0);\\n  // returns 1\\nbuf.readInt8(1);\\n  // returns -2\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readInt16BE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readInt16BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a signed 16-bit integer from the Buffer at the specified <code>offset</code> with\\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\\n<code>readInt16LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readInt16BE();\\n  // returns 510\\nbuf.readInt16LE(1);\\n  // returns 1022\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readInt16LE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readInt16LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a signed 16-bit integer from the Buffer at the specified <code>offset</code> with\\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\\n<code>readInt16LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readInt16BE();\\n  // returns 510\\nbuf.readInt16LE(1);\\n  // returns 1022\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readInt32BE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readInt32BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a signed 32-bit integer from the Buffer at the specified <code>offset</code> with\\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\\n<code>readInt32LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readInt32BE();\\n  // returns 33424132\\nbuf.readInt32LE();\\n  // returns 67370497\\nbuf.readInt32LE(1);\\n  // throws RangeError: Index out of range\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readInt32LE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readInt32LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads a signed 32-bit integer from the Buffer at the specified <code>offset</code> with\\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\\n<code>readInt32LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Integers read from the Buffer are interpreted as two&#39;s complement signed values.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readInt32BE();\\n  // returns 33424132\\nbuf.readInt32LE();\\n  // returns 67370497\\nbuf.readInt32LE(1);\\n  // throws RangeError: Index out of range\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readIntBE(offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readIntBE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\\nbits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUInt16LE(0x90ab, 0);\\nbuf.writeUInt32LE(0x12345678, 2);\\nbuf.readIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\\n// Returns: &#39;1234567890ab&#39;\\n\\nbuf.readIntBE(0, 6).toString(16);\\n// Returns: -546f87a9cbee\\n</code></pre>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readIntLE(offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readIntLE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\\nbits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUInt16LE(0x90ab, 0);\\nbuf.writeUInt32LE(0x12345678, 2);\\nbuf.readIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\\n// Returns: &#39;1234567890ab&#39;\\n\\nbuf.readIntBE(0, 6).toString(16);\\n// Returns: -546f87a9cbee\\n</code></pre>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUInt8(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUInt8\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 1` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 1`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads an unsigned 8-bit integer from the Buffer at the specified <code>offset</code>.</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([1,-2,3,4]);\\n\\nbuf.readUInt8(0);\\n  // returns 1\\nbuf.readUInt8(1);\\n  // returns 254\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUInt16BE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUInt16BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads an unsigned 16-bit integer from the Buffer at the specified <code>offset</code> with\\nspecified endian format (<code>readUInt16BE()</code> returns big endian,\\n<code>readUInt16LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\\n\\nbuf.readUInt16BE(0);\\n  // Returns: 0x0304\\nbuf.readUInt16LE(0);\\n  // Returns: 0x0403\\nbuf.readUInt16BE(1);\\n  // Returns: 0x0423\\nbuf.readUInt16LE(1);\\n  // Returns: 0x2304\\nbuf.readUInt16BE(2);\\n  // Returns: 0x2342\\nbuf.readUInt16LE(2);\\n  // Returns: 0x4223\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUInt16LE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUInt16LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads an unsigned 16-bit integer from the Buffer at the specified <code>offset</code> with\\nspecified endian format (<code>readUInt16BE()</code> returns big endian,\\n<code>readUInt16LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\\n\\nbuf.readUInt16BE(0);\\n  // Returns: 0x0304\\nbuf.readUInt16LE(0);\\n  // Returns: 0x0403\\nbuf.readUInt16BE(1);\\n  // Returns: 0x0423\\nbuf.readUInt16LE(1);\\n  // Returns: 0x2304\\nbuf.readUInt16BE(2);\\n  // Returns: 0x2342\\nbuf.readUInt16LE(2);\\n  // Returns: 0x4223\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUInt32BE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUInt32BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads an unsigned 32-bit integer from the Buffer at the specified <code>offset</code> with\\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\\n<code>readUInt32LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\\n\\nbuf.readUInt32BE(0);\\n  // Returns: 0x03042342\\nconsole.log(buf.readUInt32LE(0));\\n  // Returns: 0x42230403\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUInt32LE(offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUInt32LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads an unsigned 32-bit integer from the Buffer at the specified <code>offset</code> with\\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\\n<code>readUInt32LE()</code> returns little endian).</p>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x3, 0x4, 0x23, 0x42]);\\n\\nbuf.readUInt32BE(0);\\n  // Returns: 0x03042342\\nconsole.log(buf.readUInt32LE(0));\\n  // Returns: 0x42230403\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUIntBE(offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUIntBE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\\nand interprets the result as an unsigned integer. Supports up to 48\\nbits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUInt16LE(0x90ab, 0);\\nbuf.writeUInt32LE(0x12345678, 2);\\nbuf.readUIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\\n// Returns: &#39;1234567890ab&#39;\\n\\nbuf.readUIntBE(0, 6).toString(16);\\n// Returns: ab9078563412\\n</code></pre>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.readUIntLE(offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"readUIntLE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Reads <code>byteLength</code> number of bytes from the Buffer at the specified <code>offset</code>\\nand interprets the result as an unsigned integer. Supports up to 48\\nbits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUInt16LE(0x90ab, 0);\\nbuf.writeUInt32LE(0x12345678, 2);\\nbuf.readUIntLE(0, 6).toString(16);  // Specify 6 bytes (48 bits)\\n// Returns: &#39;1234567890ab&#39;\\n\\nbuf.readUIntBE(0, 6).toString(16);\\n// Returns: ab9078563412\\n</code></pre>\\n<p>Setting <code>noAssert</code> to <code>true</code> skips validation of the <code>offset</code>. This allows the\\n<code>offset</code> to be beyond the end of the Buffer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.slice([start[, end]])\",\n              \"type\": \"method\",\n              \"name\": \"slice\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Buffer} \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`start` {Number} Default: 0 \",\n                      \"name\": \"start\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`end` {Number} Default: `buffer.length` \",\n                      \"name\": \"end\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buffer.length`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"start\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"end\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns a new Buffer that references the same memory as the original, but\\noffset and cropped by the <code>start</code> and <code>end</code> indices.</p>\\n<p><strong>Note that modifying the new Buffer slice will modify the memory in the\\noriginal Buffer because the allocated memory of the two objects overlap.</strong></p>\\n<p>Example: build a Buffer with the ASCII alphabet, take a slice, then modify one\\nbyte from the original Buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.allocUnsafe(26);\\n\\nfor (var i = 0 ; i &lt; 26 ; i++) {\\n  buf1[i] = i + 97; // 97 is ASCII a\\n}\\n\\nconst buf2 = buf1.slice(0, 3);\\nbuf2.toString(&#39;ascii&#39;, 0, buf2.length);\\n  // Returns: &#39;abc&#39;\\nbuf1[0] = 33;\\nbuf2.toString(&#39;ascii&#39;, 0, buf2.length);\\n  // Returns : &#39;!bc&#39;\\n</code></pre>\\n<p>Specifying negative indexes causes the slice to be generated relative to the\\nend of the Buffer rather than the beginning.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;buffer&#39;);\\n\\nbuf.slice(-6, -1).toString();\\n  // Returns &#39;buffe&#39;, equivalent to buf.slice(0, 5)\\nbuf.slice(-6, -2).toString();\\n  // Returns &#39;buff&#39;, equivalent to buf.slice(0, 4)\\nbuf.slice(-5, -2).toString();\\n  // Returns &#39;uff&#39;, equivalent to buf.slice(1, 4)\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.swap16()\",\n              \"type\": \"method\",\n              \"name\": \"swap16\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Buffer} \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Interprets the <code>Buffer</code> as an array of unsigned 16-bit integers and swaps\\nthe byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is\\nnot a multiple of 16 bits. The method returns a reference to the Buffer, so\\ncalls can be chained.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\nconsole.log(buf);\\n  // Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)\\nbuf.swap16();\\nconsole.log(buf);\\n  // Prints Buffer(0x2, 0x1, 0x4, 0x3, 0x6, 0x5, 0x8, 0x7)\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.swap32()\",\n              \"type\": \"method\",\n              \"name\": \"swap32\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.10.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Buffer} \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Interprets the <code>Buffer</code> as an array of unsigned 32-bit integers and swaps\\nthe byte-order <em>in-place</em>. Throws a <code>RangeError</code> if the <code>Buffer</code> length is\\nnot a multiple of 32 bits. The method returns a reference to the Buffer, so\\ncalls can be chained.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\\nconsole.log(buf);\\n  // Prints Buffer(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8)\\nbuf.swap32();\\nconsole.log(buf);\\n  // Prints Buffer(0x4, 0x3, 0x2, 0x1, 0x8, 0x7, 0x6, 0x5)\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.toString([encoding[, start[, end]]])\",\n              \"type\": \"method\",\n              \"name\": \"toString\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {String} \",\n                    \"name\": \"return\",\n                    \"type\": \"String\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`start` {Number} Default: 0 \",\n                      \"name\": \"start\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`end` {Number} Default: `buffer.length` \",\n                      \"name\": \"end\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buffer.length`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"start\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"end\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Decodes and returns a string from the Buffer data using the specified\\ncharacter set <code>encoding</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(26);\\nfor (var i = 0 ; i &lt; 26 ; i++) {\\n  buf[i] = i + 97; // 97 is ASCII a\\n}\\nbuf.toString(&#39;ascii&#39;);\\n  // Returns: &#39;abcdefghijklmnopqrstuvwxyz&#39;\\nbuf.toString(&#39;ascii&#39;,0,5);\\n  // Returns: &#39;abcde&#39;\\nbuf.toString(&#39;utf8&#39;,0,5);\\n  // Returns: &#39;abcde&#39;\\nbuf.toString(undefined,0,5);\\n  // Returns: &#39;abcde&#39;, encoding defaults to &#39;utf8&#39;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.toJSON()\",\n              \"type\": \"method\",\n              \"name\": \"toJSON\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.2\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Object} \",\n                    \"name\": \"return\",\n                    \"type\": \"Object\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Returns a JSON representation of the Buffer instance.  [<code>JSON.stringify()</code>][]\\nimplicitly calls this function when stringifying a Buffer instance.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;test&#39;);\\nconst json = JSON.stringify(buf);\\n\\nconsole.log(json);\\n// Prints: &#39;{&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[116,101,115,116]}&#39;\\n\\nconst copy = JSON.parse(json, (key, value) =&gt; {\\n    return value &amp;&amp; value.type === &#39;Buffer&#39;\\n      ? Buffer.from(value.data)\\n      : value;\\n  });\\n\\nconsole.log(copy.toString());\\n// Prints: &#39;test&#39;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.values()\",\n              \"type\": \"method\",\n              \"name\": \"values\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.1.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Iterator} \",\n                    \"name\": \"return\",\n                    \"type\": \"Iterator\"\n                  },\n                  \"params\": []\n                },\n                {\n                  \"params\": []\n                }\n              ],\n              \"desc\": \"<p>Creates and returns an [iterator][] for Buffer values (bytes). This function is\\ncalled automatically when the Buffer is used in a <code>for..of</code> statement.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.from(&#39;buffer&#39;);\\nfor (var value of buf.values()) {\\n  console.log(value);\\n}\\n// prints:\\n//   98\\n//   117\\n//   102\\n//   102\\n//   101\\n//   114\\n\\nfor (var value of buf) {\\n  console.log(value);\\n}\\n// prints:\\n//   98\\n//   117\\n//   102\\n//   102\\n//   101\\n//   114\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.write(string[, offset[, length]][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} Numbers of bytes written \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"Numbers of bytes written\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`string` {String} Bytes to be written to buffer \",\n                      \"name\": \"string\",\n                      \"type\": \"String\",\n                      \"desc\": \"Bytes to be written to buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} Default: 0 \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: 0\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`length` {Number} Default: `buffer.length - offset` \",\n                      \"name\": \"length\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Default: `buffer.length - offset`\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Default: `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Default: `'utf8'`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"string\"\n                    },\n                    {\n                      \"name\": \"offset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"length\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>string</code> to the Buffer at <code>offset</code> using the given <code>encoding</code>.\\nThe <code>length</code> parameter is the number of bytes to write. If the Buffer did not\\ncontain enough space to fit the entire string, only a partial amount of the\\nstring will be written however, it will not write only partially encoded\\ncharacters.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(256);\\nconst len = buf.write(&#39;\\\\u00bd + \\\\u00bc = \\\\u00be&#39;, 0);\\nconsole.log(`${len} bytes: ${buf.toString(&#39;utf8&#39;, 0, len)}`);\\n  // Prints: 12 bytes: \u00bd + \u00bc = \u00be\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeDoubleBE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeDoubleBE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 8` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 8`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\\nendian). The <code>value</code> argument <em>should</em> be a valid 64-bit double. Behavior is\\nnot defined when <code>value</code> is anything other than a 64-bit double.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(8);\\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\\n\\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeDoubleLE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeDoubleLE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 8` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 8`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\\nendian). The <code>value</code> argument <em>should</em> be a valid 64-bit double. Behavior is\\nnot defined when <code>value</code> is anything other than a 64-bit double.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(8);\\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\\n\\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeFloatBE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeFloatBE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\\nendian). Behavior is not defined when <code>value</code> is anything other than a 32-bit\\nfloat.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeFloatBE(0xcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 4f 4a fe bb&gt;\\n\\nbuf.writeFloatLE(0xcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer bb fe 4a 4f&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeFloatLE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeFloatLE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\\nendian). Behavior is not defined when <code>value</code> is anything other than a 32-bit\\nfloat.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeFloatBE(0xcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 4f 4a fe bb&gt;\\n\\nbuf.writeFloatLE(0xcafebabe, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer bb fe 4a 4f&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeInt8(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeInt8\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 1` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 1`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a\\nvalid signed 8-bit integer.  Behavior is not defined when <code>value</code> is anything\\nother than a signed 8-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(2);\\nbuf.writeInt8(2, 0);\\nbuf.writeInt8(-2, 1);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 02 fe&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeInt16BE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeInt16BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\\nendian). The <code>value</code> should be a valid signed 16-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than a signed 16-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeInt16BE(0x0102,0);\\nbuf.writeInt16LE(0x0304,2);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 01 02 04 03&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeInt16LE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeInt16LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\\nendian). The <code>value</code> should be a valid signed 16-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than a signed 16-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeInt16BE(0x0102,0);\\nbuf.writeInt16LE(0x0304,2);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 01 02 04 03&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeInt32BE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeInt32BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\\nendian). The <code>value</code> should be a valid signed 32-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than a signed 32-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(8);\\nbuf.writeInt32BE(0x01020304,0);\\nbuf.writeInt32LE(0x05060708,4);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeInt32LE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeInt32LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\\nendian). The <code>value</code> should be a valid signed 32-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than a signed 32-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>The <code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(8);\\nbuf.writeInt32BE(0x01020304,0);\\nbuf.writeInt32LE(0x05060708,4);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeIntBE(value, offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeIntBE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\\nSupports up to 48 bits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.allocUnsafe(6);\\nbuf1.writeUIntBE(0x1234567890ab, 0, 6);\\nconsole.log(buf1);\\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\\n\\nconst buf2 = Buffer.allocUnsafe(6);\\nbuf2.writeUIntLE(0x1234567890ab, 0, 6);\\nconsole.log(buf2);\\n  // Prints: &lt;Buffer ab 90 78 56 34 12&gt;\\n</code></pre>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Behavior is not defined when <code>value</code> is anything other than an integer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeIntLE(value, offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeIntLE\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.0.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\\nSupports up to 48 bits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = Buffer.allocUnsafe(6);\\nbuf1.writeUIntBE(0x1234567890ab, 0, 6);\\nconsole.log(buf1);\\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\\n\\nconst buf2 = Buffer.allocUnsafe(6);\\nbuf2.writeUIntLE(0x1234567890ab, 0, 6);\\nconsole.log(buf2);\\n  // Prints: &lt;Buffer ab 90 78 56 34 12&gt;\\n</code></pre>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Behavior is not defined when <code>value</code> is anything other than an integer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUInt8(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUInt8\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 1` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 1`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code>. The <code>value</code> should be a\\nvalid unsigned 8-bit integer.  Behavior is not defined when <code>value</code> is anything\\nother than an unsigned 8-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeUInt8(0x3, 0);\\nbuf.writeUInt8(0x4, 1);\\nbuf.writeUInt8(0x23, 2);\\nbuf.writeUInt8(0x42, 3);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 03 04 23 42&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUInt16BE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUInt16BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\\nendian). The <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeUInt16BE(0xdead, 0);\\nbuf.writeUInt16BE(0xbeef, 2);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer de ad be ef&gt;\\n\\nbuf.writeUInt16LE(0xdead, 0);\\nbuf.writeUInt16LE(0xbeef, 2);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer ad de ef be&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUInt16LE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUInt16LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 2` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 2`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\\nendian). The <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeUInt16BE(0xdead, 0);\\nbuf.writeUInt16BE(0xbeef, 2);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer de ad be ef&gt;\\n\\nbuf.writeUInt16LE(0xdead, 0);\\nbuf.writeUInt16LE(0xbeef, 2);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer ad de ef be&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUInt32BE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUInt32BE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\\nendian). The <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeUInt32BE(0xfeedface, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer fe ed fa ce&gt;\\n\\nbuf.writeUInt32LE(0xfeedface, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer ce fa ed fe&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUInt32LE(value, offset[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUInt32LE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - 4` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - 4`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> with specified endian\\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\\nendian). The <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\\nnot defined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(4);\\nbuf.writeUInt32BE(0xfeedface, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer fe ed fa ce&gt;\\n\\nbuf.writeUInt32LE(0xfeedface, 0);\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer ce fa ed fe&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUIntBE(value, offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUIntBE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\\nSupports up to 48 bits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\\n</code></pre>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Behavior is not defined when <code>value</code> is anything other than an unsigned integer.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"buf.writeUIntLE(value, offset, byteLength[, noAssert])\",\n              \"type\": \"method\",\n              \"name\": \"writeUIntLE\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Number} The offset plus the number of written bytes \",\n                    \"name\": \"return\",\n                    \"type\": \"Number\",\n                    \"desc\": \"The offset plus the number of written bytes\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`value` {Number} Bytes to be written to Buffer \",\n                      \"name\": \"value\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Bytes to be written to Buffer\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} `0 <= offset <= buf.length - byteLength` \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 <= offset <= buf.length - byteLength`\"\n                    },\n                    {\n                      \"textRaw\": \"`byteLength` {Number} `0 < byteLength <= 6` \",\n                      \"name\": \"byteLength\",\n                      \"type\": \"Number\",\n                      \"desc\": \"`0 < byteLength <= 6`\"\n                    },\n                    {\n                      \"textRaw\": \"`noAssert` {Boolean} Default: false \",\n                      \"name\": \"noAssert\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Default: false\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"offset\"\n                    },\n                    {\n                      \"name\": \"byteLength\"\n                    },\n                    {\n                      \"name\": \"noAssert\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Writes <code>value</code> to the Buffer at the specified <code>offset</code> and <code>byteLength</code>.\\nSupports up to 48 bits of accuracy. For example:</p>\\n<pre><code class=\\\"lang-js\\\">const buf = Buffer.allocUnsafe(6);\\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\\n</code></pre>\\n<p>Set <code>noAssert</code> to true to skip validation of <code>value</code> and <code>offset</code>. This means\\nthat <code>value</code> may be too large for the specific function and <code>offset</code> may be\\nbeyond the end of the Buffer leading to the values being silently dropped. This\\nshould not be used unless you are certain of correctness.</p>\\n<p>Behavior is not defined when <code>value</code> is anything other than an unsigned integer.</p>\\n\"\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"array\"\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use [`Buffer.from(array)`][buffer_from_array]\\ninstead.\\n</code></pre><ul>\\n<li><code>array</code> {Array}</li>\\n</ul>\\n<p>Allocates a new Buffer using an <code>array</code> of octets.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = new Buffer([0x62,0x75,0x66,0x66,0x65,0x72]);\\n  // creates a new Buffer containing ASCII bytes\\n  // [&#39;b&#39;,&#39;u&#39;,&#39;f&#39;,&#39;f&#39;,&#39;e&#39;,&#39;r&#39;]\\n</code></pre>\\n\"\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"buffer\"\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use [`Buffer.from(buffer)`][buffer_from_buffer]\\ninstead.\\n</code></pre><ul>\\n<li><code>buffer</code> {Buffer}</li>\\n</ul>\\n<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = new Buffer(&#39;buffer&#39;);\\nconst buf2 = new Buffer(buf1);\\n\\nbuf1[0] = 0x61;\\nconsole.log(buf1.toString());\\n  // &#39;auffer&#39;\\nconsole.log(buf2.toString());\\n  // &#39;buffer&#39; (copy is not changed)\\n</code></pre>\\n\"\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"arrayBuffer\"\n                },\n                {\n                  \"name\": \"byteOffset\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"length\",\n                  \"optional\": true\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use\\n[`Buffer.from(arrayBuffer[, byteOffset [, length]])`][buffer_from_arraybuf]\\ninstead.\\n</code></pre><ul>\\n<li><code>arrayBuffer</code> {ArrayBuffer} The <code>.buffer</code> property of a <code>TypedArray</code> or a\\n<code>new ArrayBuffer()</code></li>\\n<li><code>byteOffset</code> {Number} Default: <code>0</code></li>\\n<li><code>length</code> {Number} Default: <code>arrayBuffer.length - byteOffset</code></li>\\n</ul>\\n<p>When passed a reference to the <code>.buffer</code> property of a <code>TypedArray</code> instance,\\nthe newly created Buffer will share the same allocated memory as the\\nTypedArray.</p>\\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const arr = new Uint16Array(2);\\narr[0] = 5000;\\narr[1] = 4000;\\n\\nconst buf = new Buffer(arr.buffer); // shares the memory with arr;\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 88 13 a0 0f&gt;\\n\\n// changing the TypdArray changes the Buffer also\\narr[1] = 6000;\\n\\nconsole.log(buf);\\n  // Prints: &lt;Buffer 88 13 70 17&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"size\"\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use\\n[`Buffer.alloc(size[, fill[, encoding]])`][buffer_alloc] instead (also\\nsee [`Buffer.allocUnsafe(size)`][buffer_allocunsafe]).\\n</code></pre><ul>\\n<li><code>size</code> {Number}</li>\\n</ul>\\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than\\nor equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a [<code>RangeError</code>][] is\\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\\n0 is specified.</p>\\n<p>Unlike <code>ArrayBuffers</code>, the underlying memory for <code>Buffer</code> instances created in\\nthis way is <em>not initialized</em>. The contents of a newly created <code>Buffer</code> are\\nunknown and <em>could contain sensitive data</em>. Use [<code>buf.fill(0)</code>][] to initialize\\na <code>Buffer</code> to zeroes.</p>\\n<pre><code class=\\\"lang-js\\\">const buf = new Buffer(5);\\nconsole.log(buf);\\n  // &lt;Buffer 78 e0 82 02 01&gt;\\n  // (octets will be different, every time)\\nbuf.fill(0);\\nconsole.log(buf);\\n  // &lt;Buffer 00 00 00 00 00&gt;\\n</code></pre>\\n\"\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"str\"\n                },\n                {\n                  \"name\": \"encoding\",\n                  \"optional\": true\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated:\\nUse [`Buffer.from(str[, encoding])`][buffer_from_string] instead.\\n</code></pre><ul>\\n<li><code>str</code> {String} string to encode.</li>\\n<li><code>encoding</code> {String} Default: <code>&#39;utf8&#39;</code></li>\\n</ul>\\n<p>Creates a new Buffer containing the given JavaScript string <code>str</code>. If\\nprovided, the <code>encoding</code> parameter identifies the strings character encoding.</p>\\n<pre><code class=\\\"lang-js\\\">const buf1 = new Buffer(&#39;this is a t\u00e9st&#39;);\\nconsole.log(buf1.toString());\\n  // prints: this is a t\u00e9st\\nconsole.log(buf1.toString(&#39;ascii&#39;));\\n  // prints: this is a tC)st\\n\\nconst buf2 = new Buffer(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\\nconsole.log(buf2.toString());\\n  // prints: this is a t\u00e9st\\n</code></pre>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: SlowBuffer\",\n          \"type\": \"class\",\n          \"name\": \"SlowBuffer\",\n          \"meta\": {\n            \"deprecated\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use\\n[`Buffer.allocUnsafeSlow(size)`][buffer_allocunsafeslow] instead.\\n</code></pre><p>Returns an un-pooled <code>Buffer</code>.</p>\\n<p>In order to avoid the garbage collection overhead of creating many individually\\nallocated Buffers, by default allocations under 4KB are sliced from a single\\nlarger allocated object. This approach improves both performance and memory\\nusage since v8 does not need to track and cleanup as many <code>Persistent</code> objects.</p>\\n<p>In the case where a developer may need to retain a small chunk of memory from a\\npool for an indeterminate amount of time, it may be appropriate to create an\\nun-pooled Buffer instance using <code>SlowBuffer</code> then copy out the relevant bits.</p>\\n<pre><code class=\\\"lang-js\\\">// need to keep around a few small chunks of memory\\nconst store = [];\\n\\nsocket.on(&#39;readable&#39;, () =&gt; {\\n  var data = socket.read();\\n  // allocate for retained data\\n  var sb = SlowBuffer(10);\\n  // copy the data into the new allocation\\n  data.copy(sb, 0, 0, 10);\\n  store.push(sb);\\n});\\n</code></pre>\\n<p>Use of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer\\nhas observed undue memory retention in their applications.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"size\"\n                }\n              ],\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated: Use\\n[`Buffer.allocUnsafeSlow(size)`][buffer_allocunsafeslow] instead.\\n</code></pre><ul>\\n<li><code>size</code> Number</li>\\n</ul>\\n<p>Allocates a new <code>SlowBuffer</code> of <code>size</code> bytes.  The <code>size</code> must be less than\\nor equal to the value of <code>require(&#39;buffer&#39;).kMaxLength</code> (on 64-bit\\narchitectures, <code>kMaxLength</code> is <code>(2^31)-1</code>). Otherwise, a [<code>RangeError</code>][] is\\nthrown. A zero-length Buffer will be created if a <code>size</code> less than or equal to\\n0 is specified.</p>\\n<p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The\\ncontents of a newly created <code>SlowBuffer</code> are unknown and could contain\\nsensitive data. Use [<code>buf.fill(0)</code>][] to initialize a <code>SlowBuffer</code> to zeroes.</p>\\n<pre><code class=\\\"lang-js\\\">const SlowBuffer = require(&#39;buffer&#39;).SlowBuffer;\\nconst buf = new SlowBuffer(5);\\nconsole.log(buf);\\n  // &lt;Buffer 78 e0 82 02 01&gt;\\n  // (octets will be different, every time)\\nbuf.fill(0);\\nconsole.log(buf);\\n  // &lt;Buffer 00 00 00 00 00&gt;\\n</code></pre>\\n<!-- [end-include:buffer.md] -->\\n<!-- [start-include:child_process.md] -->\\n\"\n            }\n          ]\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"`INSPECT_MAX_BYTES` {Number} Default: 50 \",\n          \"type\": \"Number\",\n          \"name\": \"INSPECT_MAX_BYTES\",\n          \"desc\": \"<p>Returns the maximum number of bytes that will be returned when\\n<code>buffer.inspect()</code> is called. This can be overridden by user modules. See\\n[<code>util.inspect()</code>][] for more details on <code>buffer.inspect()</code> behavior.</p>\\n<p>Note that this is a property on the <code>buffer</code> module as returned by\\n<code>require(&#39;buffer&#39;)</code>, not on the Buffer global or a Buffer instance.</p>\\n\",\n          \"shortDesc\": \"Default: 50\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Buffer\"\n    },\n    {\n      \"textRaw\": \"Child Process\",\n      \"name\": \"child_process\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>child_process</code> module provides the ability to spawn child processes in\\na manner that is similar, but not identical, to popen(3). This capability\\nis primarily provided by the [<code>child_process.spawn()</code>][] function:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\\n\\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`stdout: ${data}`);\\n});\\n\\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`stderr: ${data}`);\\n});\\n\\nls.on(&#39;close&#39;, (code) =&gt; {\\n  console.log(`child process exited with code ${code}`);\\n});\\n</code></pre>\\n<p>By default, pipes for <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are established between\\nthe parent Node.js process and the spawned child. It is possible to stream data\\nthrough these pipes in a non-blocking way. <em>Note, however, that some programs\\nuse line-buffered I/O internally. While that does not affect Node.js, it can\\nmean that data sent to the child process may not be immediately consumed.</em></p>\\n<p>The [<code>child_process.spawn()</code>][] method spawns the child process asynchronously,\\nwithout blocking the Node.js event loop. The [<code>child_process.spawnSync()</code>][]\\nfunction provides equivalent functionality in a synchronous manner that blocks\\nthe event loop until the spawned process either exits or is terminated.</p>\\n<p>For convenience, the <code>child_process</code> module provides a handful of synchronous\\nand asynchronous alternatives to [<code>child_process.spawn()</code>][] and\\n[<code>child_process.spawnSync()</code>][].  <em>Note that each of these alternatives are\\nimplemented on top of [<code>child_process.spawn()</code>][] or [<code>child_process.spawnSync()</code>][].</em></p>\\n<ul>\\n<li>[<code>child_process.exec()</code>][]: spawns a shell and runs a command within that shell,\\npassing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li>\\n<li>[<code>child_process.execFile()</code>][]: similar to [<code>child_process.exec()</code>][] except that\\nit spawns the command directly without first spawning a shell.</li>\\n<li>[<code>child_process.fork()</code>][]: spawns a new Node.js process and invokes a\\nspecified module with an IPC communication channel established that allows\\nsending messages between parent and child.</li>\\n<li>[<code>child_process.execSync()</code>][]: a synchronous version of\\n[<code>child_process.exec()</code>][] that <em>will</em> block the Node.js event loop.</li>\\n<li>[<code>child_process.execFileSync()</code>][]: a synchronous version of\\n[<code>child_process.execFile()</code>][] that <em>will</em> block the Node.js event loop.</li>\\n</ul>\\n<p>For certain use cases, such as automating shell scripts, the\\n[synchronous counterparts][] may be more convenient. In many cases, however,\\nthe synchronous methods can have significant impact on performance due to\\nstalling the event loop while spawned processes complete.</p>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Asynchronous Process Creation\",\n          \"name\": \"asynchronous_process_creation\",\n          \"desc\": \"<p>The [<code>child_process.spawn()</code>][], [<code>child_process.fork()</code>][], [<code>child_process.exec()</code>][],\\nand [<code>child_process.execFile()</code>][] methods all follow the idiomatic asynchronous\\nprogramming pattern typical of other Node.js APIs.</p>\\n<p>Each of the methods returns a [<code>ChildProcess</code>][] instance. These objects\\nimplement the Node.js [<code>EventEmitter</code>][] API, allowing the parent process to\\nregister listener functions that are called when certain events occur during\\nthe life cycle of the child process.</p>\\n<p>The [<code>child_process.exec()</code>][] and [<code>child_process.execFile()</code>][] methods additionally\\nallow for an optional <code>callback</code> function to be specified that is invoked\\nwhen the child process terminates.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Spawning `.bat` and `.cmd` files on Windows\",\n              \"name\": \"spawning_`.bat`_and_`.cmd`_files_on_windows\",\n              \"desc\": \"<p>The importance of the distinction between [<code>child_process.exec()</code>][] and\\n[<code>child_process.execFile()</code>][] can vary based on platform. On Unix-type operating\\nsystems (Unix, Linux, OSX) [<code>child_process.execFile()</code>][] can be more efficient\\nbecause it does not spawn a shell. On Windows, however, <code>.bat</code> and <code>.cmd</code>\\nfiles are not executable on their own without a terminal, and therefore cannot\\nbe launched using [<code>child_process.execFile()</code>][]. When running on Windows, <code>.bat</code>\\nand <code>.cmd</code> files can be invoked using [<code>child_process.spawn()</code>][] with the <code>shell</code>\\noption set, with [<code>child_process.exec()</code>][], or by spawning <code>cmd.exe</code> and passing\\nthe <code>.bat</code> or <code>.cmd</code> file as an argument (which is what the <code>shell</code> option and\\n[<code>child_process.exec()</code>][] do).</p>\\n<pre><code class=\\\"lang-js\\\">// On Windows Only ...\\nconst spawn = require(&#39;child_process&#39;).spawn;\\nconst bat = spawn(&#39;cmd.exe&#39;, [&#39;/c&#39;, &#39;my.bat&#39;]);\\n\\nbat.stdout.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data);\\n});\\n\\nbat.stderr.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data);\\n});\\n\\nbat.on(&#39;exit&#39;, (code) =&gt; {\\n  console.log(`Child exited with code ${code}`);\\n});\\n\\n// OR...\\nconst exec = require(&#39;child_process&#39;).exec;\\nexec(&#39;my.bat&#39;, (err, stdout, stderr) =&gt; {\\n  if (err) {\\n    console.error(err);\\n    return;\\n  }\\n  console.log(stdout);\\n});\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Spawning `.bat` and `.cmd` files on Windows\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"child_process.exec(command[, options][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"exec\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {ChildProcess} \",\n                    \"name\": \"return\",\n                    \"type\": \"ChildProcess\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`command` {String} The command to run, with space-separated arguments \",\n                      \"name\": \"command\",\n                      \"type\": \"String\",\n                      \"desc\": \"The command to run, with space-separated arguments\"\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} (Default: `'utf8'`) \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"(Default: `'utf8'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`shell` {String} Shell to execute the command with (Default: `'/bin/sh'` on UNIX, `'cmd.exe'` on Windows, The shell should  understand the `-c` switch on UNIX or `/s /c` on Windows. On Windows,  command line parsing should be compatible with `cmd.exe`.) \",\n                          \"name\": \"shell\",\n                          \"type\": \"String\",\n                          \"desc\": \"Shell to execute the command with (Default: `'/bin/sh'` on UNIX, `'cmd.exe'` on Windows, The shell should  understand the `-c` switch on UNIX or `/s /c` on Windows. On Windows,  command line parsing should be compatible with `cmd.exe`.)\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {Number} (Default: `0`) \",\n                          \"name\": \"timeout\",\n                          \"default\": \"0\",\n                          \"type\": \"Number\"\n                        },\n                        {\n                          \"textRaw\": \"[`maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: `200*1024`) \",\n                          \"name\": \"[\",\n                          \"default\": \"200*1024\",\n                          \"desc\": \"maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed\"\n                        },\n                        {\n                          \"textRaw\": \"`killSignal` {String} (Default: `'SIGTERM'`) \",\n                          \"name\": \"killSignal\",\n                          \"type\": \"String\",\n                          \"desc\": \"(Default: `'SIGTERM'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} called with the output when process terminates \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`error` {Error} \",\n                          \"name\": \"error\",\n                          \"type\": \"Error\"\n                        },\n                        {\n                          \"textRaw\": \"`stdout` {String|Buffer} \",\n                          \"name\": \"stdout\",\n                          \"type\": \"String|Buffer\"\n                        },\n                        {\n                          \"textRaw\": \"`stderr` {String|Buffer} \",\n                          \"name\": \"stderr\",\n                          \"type\": \"String|Buffer\"\n                        }\n                      ],\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"called with the output when process terminates\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"command\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Spawns a shell then executes the <code>command</code> within that shell, buffering any\\ngenerated output.</p>\\n<pre><code class=\\\"lang-js\\\">const exec = require(&#39;child_process&#39;).exec;\\nexec(&#39;cat *.js bad_file | wc -l&#39;, (error, stdout, stderr) =&gt; {\\n  if (error) {\\n    console.error(`exec error: ${error}`);\\n    return;\\n  }\\n  console.log(`stdout: ${stdout}`);\\n  console.log(`stderr: ${stderr}`);\\n});\\n</code></pre>\\n<p>If a <code>callback</code> function is provided, it is called with the arguments\\n<code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>.  On error,\\n<code>error</code> will be an instance of [<code>Error</code>][]. The <code>error.code</code> property will be\\nthe exit code of the child process while <code>error.signal</code> will be set to the\\nsignal that terminated the process. Any exit code other than <code>0</code> is considered\\nto be an error.</p>\\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\\nstdout and stderr output of the child process. By default, Node.js will decode\\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\\ncan be used to specify the character encoding used to decode the stdout and\\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, <code>Buffer</code> objects will be passed to\\nthe callback instead.</p>\\n<p>The <code>options</code> argument may be passed as the second argument to customize how\\nthe process is spawned. The default options are:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  encoding: &#39;utf8&#39;,\\n  timeout: 0,\\n  maxBuffer: 200*1024,\\n  killSignal: &#39;SIGTERM&#39;,\\n  cwd: null,\\n  env: null\\n}\\n</code></pre>\\n<p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the the signal\\nidentified by the <code>killSignal</code> property (the default is <code>&#39;SIGTERM&#39;</code>) if the\\nchild runs longer than <code>timeout</code> milliseconds.</p>\\n<p><em>Note: Unlike the exec(3) POSIX system call, <code>child_process.exec()</code> does not\\nreplace the existing process and uses a shell to execute the command.</em></p>\\n\"\n            },\n            {\n              \"textRaw\": \"child_process.execFile(file[, args][, options][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"execFile\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.91\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {ChildProcess} \",\n                    \"name\": \"return\",\n                    \"type\": \"ChildProcess\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`file` {String} The name or path of the executable file to run \",\n                      \"name\": \"file\",\n                      \"type\": \"String\",\n                      \"desc\": \"The name or path of the executable file to run\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} List of string arguments \",\n                      \"name\": \"args\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of string arguments\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} (Default: `'utf8'`) \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"(Default: `'utf8'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {Number} (Default: `0`) \",\n                          \"name\": \"timeout\",\n                          \"default\": \"0\",\n                          \"type\": \"Number\"\n                        },\n                        {\n                          \"textRaw\": \"[`maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: `200*1024`) \",\n                          \"name\": \"[\",\n                          \"default\": \"200*1024\",\n                          \"desc\": \"maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed\"\n                        },\n                        {\n                          \"textRaw\": \"`killSignal` {String} (Default: `'SIGTERM'`) \",\n                          \"name\": \"killSignal\",\n                          \"type\": \"String\",\n                          \"desc\": \"(Default: `'SIGTERM'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} called with the output when process terminates \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`error` {Error} \",\n                          \"name\": \"error\",\n                          \"type\": \"Error\"\n                        },\n                        {\n                          \"textRaw\": \"`stdout` {String|Buffer} \",\n                          \"name\": \"stdout\",\n                          \"type\": \"String|Buffer\"\n                        },\n                        {\n                          \"textRaw\": \"`stderr` {String|Buffer} \",\n                          \"name\": \"stderr\",\n                          \"type\": \"String|Buffer\"\n                        }\n                      ],\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"called with the output when process terminates\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"file\"\n                    },\n                    {\n                      \"name\": \"args\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.execFile()</code> function is similar to [<code>child_process.exec()</code>][]\\nexcept that it does not spawn a shell. Rather, the specified executable <code>file</code>\\nis spawned directly as a new process making it slightly more efficient than\\n[<code>child_process.exec()</code>][].</p>\\n<p>The same options as [<code>child_process.exec()</code>][] are supported. Since a shell is not\\nspawned, behaviors such as I/O redirection and file globbing are not supported.</p>\\n<pre><code class=\\\"lang-js\\\">const execFile = require(&#39;child_process&#39;).execFile;\\nconst child = execFile(&#39;node&#39;, [&#39;--version&#39;], (error, stdout, stderr) =&gt; {\\n  if (error) {\\n    throw error;\\n  }\\n  console.log(stdout);\\n});\\n</code></pre>\\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\\nstdout and stderr output of the child process. By default, Node.js will decode\\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\\ncan be used to specify the character encoding used to decode the stdout and\\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, <code>Buffer</code> objects will be passed to\\nthe callback instead.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"child_process.fork(modulePath[, args][, options])\",\n              \"type\": \"method\",\n              \"name\": \"fork\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.0\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {ChildProcess} \",\n                    \"name\": \"return\",\n                    \"type\": \"ChildProcess\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`modulePath` {String} The module to run in the child \",\n                      \"name\": \"modulePath\",\n                      \"type\": \"String\",\n                      \"desc\": \"The module to run in the child\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} List of string arguments \",\n                      \"name\": \"args\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of string arguments\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`execPath` {String} Executable used to create the child process \",\n                          \"name\": \"execPath\",\n                          \"type\": \"String\",\n                          \"desc\": \"Executable used to create the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`execArgv` {Array} List of string arguments passed to the executable (Default: `process.execArgv`) \",\n                          \"name\": \"execArgv\",\n                          \"default\": \"process.execArgv\",\n                          \"type\": \"Array\",\n                          \"desc\": \"List of string arguments passed to the executable\"\n                        },\n                        {\n                          \"textRaw\": \"`silent` {Boolean} If `true`, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the `'pipe'` and `'inherit'` options for [`child_process.spawn()`][]'s [`stdio`][] for more details (Default: `false`) \",\n                          \"name\": \"silent\",\n                          \"default\": \"false\",\n                          \"type\": \"Boolean\",\n                          \"desc\": \"If `true`, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the `'pipe'` and `'inherit'` options for [`child_process.spawn()`][]'s [`stdio`][] for more details\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"modulePath\"\n                    },\n                    {\n                      \"name\": \"args\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.fork()</code> method is a special case of\\n[<code>child_process.spawn()</code>][] used specifically to spawn new Node.js processes.\\nLike [<code>child_process.spawn()</code>][], a [<code>ChildProcess</code>][] object is returned. The returned\\n[<code>ChildProcess</code>][] will have an additional communication channel built-in that\\nallows messages to be passed back and forth between the parent and child. See\\n[<code>child.send()</code>][] for details.</p>\\n<p>It is important to keep in mind that spawned Node.js child processes are\\nindependent of the parent with exception of the IPC communication channel\\nthat is established between the two. Each process has it&#39;s own memory, with\\ntheir own V8 instances. Because of the additional resource allocations\\nrequired, spawning a large number of child Node.js processes is not\\nrecommended.</p>\\n<p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the\\n[<code>process.execPath</code>][] of the parent process. The <code>execPath</code> property in the\\n<code>options</code> object allows for an alternative execution path to be used.</p>\\n<p>Node.js processes launched with a custom <code>execPath</code> will communicate with the\\nparent process using the file descriptor (fd) identified using the\\nenvironment variable <code>NODE_CHANNEL_FD</code> on the child process. The input and\\noutput on this fd is expected to be line delimited JSON objects.</p>\\n<p><em>Note: Unlike the fork(2) POSIX system call, <code>child_process.fork()</code> does\\nnot clone the current process.</em></p>\\n\"\n            },\n            {\n              \"textRaw\": \"child_process.spawn(command[, args][, options])\",\n              \"type\": \"method\",\n              \"name\": \"spawn\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {ChildProcess} \",\n                    \"name\": \"return\",\n                    \"type\": \"ChildProcess\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`command` {String} The command to run \",\n                      \"name\": \"command\",\n                      \"type\": \"String\",\n                      \"desc\": \"The command to run\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} List of string arguments \",\n                      \"name\": \"args\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of string arguments\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`stdio` {Array|String} Child's stdio configuration. (See [`options.stdio`][`stdio`]) \",\n                          \"name\": \"stdio\",\n                          \"type\": \"Array|String\",\n                          \"desc\": \"Child's stdio configuration. (See [`options.stdio`][`stdio`])\"\n                        },\n                        {\n                          \"textRaw\": \"`detached` {Boolean} Prepare child to run independently of its parent process. Specific behavior depends on the platform, see [`options.detached`][]) \",\n                          \"name\": \"detached\",\n                          \"type\": \"Boolean\",\n                          \"desc\": \"Prepare child to run independently of its parent process. Specific behavior depends on the platform, see [`options.detached`][])\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`shell` {Boolean|String} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `'cmd.exe'` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX, or `/s /c` on Windows. Defaults to `false` (no shell). \",\n                          \"name\": \"shell\",\n                          \"type\": \"Boolean|String\",\n                          \"desc\": \"If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `'cmd.exe'` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX, or `/s /c` on Windows. Defaults to `false` (no shell).\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"command\"\n                    },\n                    {\n                      \"name\": \"args\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.spawn()</code> method spawns a new process using the given\\n<code>command</code>, with command line arguments in <code>args</code>. If omitted, <code>args</code> defaults\\nto an empty array.</p>\\n<p>A third argument may be used to specify additional options, with these defaults:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  cwd: undefined,\\n  env: process.env\\n}\\n</code></pre>\\n<p>Use <code>cwd</code> to specify the working directory from which the process is spawned.\\nIf not given, the default is to inherit the current working directory.</p>\\n<p>Use <code>env</code> to specify environment variables that will be visible to the new\\nprocess, the default is [<code>process.env</code>][].</p>\\n<p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the\\nexit code:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\\n\\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`stdout: ${data}`);\\n});\\n\\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`stderr: ${data}`);\\n});\\n\\nls.on(&#39;close&#39;, (code) =&gt; {\\n  console.log(`child process exited with code ${code}`);\\n});\\n</code></pre>\\n<p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst ps = spawn(&#39;ps&#39;, [&#39;ax&#39;]);\\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\\n\\nps.stdout.on(&#39;data&#39;, (data) =&gt; {\\n  grep.stdin.write(data);\\n});\\n\\nps.stderr.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`ps stderr: ${data}`);\\n});\\n\\nps.on(&#39;close&#39;, (code) =&gt; {\\n  if (code !== 0) {\\n    console.log(`ps process exited with code ${code}`);\\n  }\\n  grep.stdin.end();\\n});\\n\\ngrep.stdout.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`${data}`);\\n});\\n\\ngrep.stderr.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`grep stderr: ${data}`);\\n});\\n\\ngrep.on(&#39;close&#39;, (code) =&gt; {\\n  if (code !== 0) {\\n    console.log(`grep process exited with code ${code}`);\\n  }\\n});\\n</code></pre>\\n<p>Example of checking for failed exec:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst child = spawn(&#39;bad_command&#39;);\\n\\nchild.on(&#39;error&#39;, (err) =&gt; {\\n  console.log(&#39;Failed to start child process.&#39;);\\n});\\n</code></pre>\\n\",\n              \"properties\": [\n                {\n                  \"textRaw\": \"options.detached\",\n                  \"name\": \"detached\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.7.10\"\n                    ]\n                  },\n                  \"desc\": \"<p>On Windows, setting <code>options.detached</code> to <code>true</code> makes it possible for the\\nchild process to continue running after the parent exits. The child will have\\nits own console window. <em>Once enabled for a child process, it cannot be\\ndisabled</em>.</p>\\n<p>On non-Windows platforms, if <code>options.detached</code> is set to <code>true</code>, the child\\nprocess will be made the leader of a new process group and session. Note that\\nchild processes may continue running after the parent exits regardless of\\nwhether they are detached or not.  See setsid(2) for more information.</p>\\n<p>By default, the parent will wait for the detached child to exit. To prevent\\nthe parent from waiting for a given <code>child</code>, use the <code>child.unref()</code> method.\\nDoing so will cause the parent&#39;s event loop to not include the child in its\\nreference count, allowing the parent to exit independently of the child, unless\\nthere is an established IPC channel between the child and parent.</p>\\n<p>When using the <code>detached</code> option to start a long-running process, the process\\nwill not stay running in the background after the parent exits unless it is\\nprovided with a <code>stdio</code> configuration that is not connected to the parent.\\nIf the parent&#39;s <code>stdio</code> is inherited, the child will remain attached to the\\ncontrolling terminal.</p>\\n<p>Example of a long-running process, by detaching and also ignoring its parent\\n<code>stdio</code> file descriptors, in order to ignore the parent&#39;s termination:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\n\\nconst child = spawn(process.argv[0], [&#39;child_program.js&#39;], {\\n  detached: true,\\n  stdio: [&#39;ignore&#39;]\\n});\\n\\nchild.unref();\\n</code></pre>\\n<p>Alternatively one can redirect the child process&#39; output into files:</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\nconst spawn = require(&#39;child_process&#39;).spawn;\\nconst out = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\\nconst err = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\\n\\nconst child = spawn(&#39;prg&#39;, [], {\\n detached: true,\\n stdio: [ &#39;ignore&#39;, out, err ]\\n});\\n\\nchild.unref();\\n</code></pre>\\n\"\n                },\n                {\n                  \"textRaw\": \"options.stdio\",\n                  \"name\": \"stdio\",\n                  \"meta\": {\n                    \"added\": [\n                      \"v0.7.10\"\n                    ]\n                  },\n                  \"desc\": \"<p>The <code>options.stdio</code> option is used to configure the pipes that are established\\nbetween the parent and child process. By default, the child&#39;s stdin, stdout,\\nand stderr are redirected to corresponding [<code>child.stdin</code>][], [<code>child.stdout</code>][], and\\n[<code>child.stderr</code>][] streams on the [<code>ChildProcess</code>][] object. This is equivalent to\\nsetting the <code>options.stdio</code> equal to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>.</p>\\n<p>For convenience, <code>options.stdio</code> may be one of the following strings:</p>\\n<ul>\\n<li><code>&#39;pipe&#39;</code> - equivalent to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code> (the default)</li>\\n<li><code>&#39;ignore&#39;</code> - equivalent to <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li>\\n<li><code>&#39;inherit&#39;</code> - equivalent to <code>[process.stdin, process.stdout, process.stderr]</code>\\n or <code>[0,1,2]</code></li>\\n</ul>\\n<p>Otherwise, the value of <code>options.stdio</code> is an array where each index corresponds\\nto an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout,\\nand stderr, respectively. Additional fds can be specified to create additional\\npipes between the parent and child. The value is one of the following:</p>\\n<ol>\\n<li><code>&#39;pipe&#39;</code> - Create a pipe between the child process and the parent process.\\nThe parent end of the pipe is exposed to the parent as a property on the\\n<code>child_process</code> object as [<code>child.stdio[fd]</code>][<code>stdio</code>]. Pipes created for\\nfds 0 - 2 are also available as [<code>child.stdin</code>][], [<code>child.stdout</code>][]\\nand [<code>child.stderr</code>][], respectively.</li>\\n<li><code>&#39;ipc&#39;</code> - Create an IPC channel for passing messages/file descriptors\\nbetween parent and child. A [<code>ChildProcess</code>][] may have at most <em>one</em> IPC stdio\\nfile descriptor. Setting this option enables the [<code>child.send()</code>][] method.\\nIf the child writes JSON messages to this file descriptor, the\\n[<code>child.on(&#39;message&#39;)</code>][<code>&#39;message&#39;</code>] event handler will be triggered in the parent.\\nIf the child is a Node.js process, the presence of an IPC channel will enable\\n[<code>process.send()</code>][], [<code>process.disconnect()</code>][], [<code>process.on(&#39;disconnect&#39;)</code>][], and\\n[<code>process.on(&#39;message&#39;)</code>] within the child.</li>\\n<li><code>&#39;ignore&#39;</code> - Instructs Node.js to ignore the fd in the child. While Node.js\\nwill always open fds 0 - 2 for the processes it spawns, setting the fd to\\n<code>&#39;ignore&#39;</code> will cause Node.js to open <code>/dev/null</code> and attach it to the\\nchild&#39;s fd.</li>\\n<li>{Stream} object - Share a readable or writable stream that refers to a tty,\\nfile, socket, or a pipe with the child process. The stream&#39;s underlying\\nfile descriptor is duplicated in the child process to the fd that\\ncorresponds to the index in the <code>stdio</code> array. Note that the stream must\\nhave an underlying descriptor (file streams do not until the <code>&#39;open&#39;</code>\\nevent has occurred).</li>\\n<li>Positive integer - The integer value is interpreted as a file descriptor\\nthat is is currently open in the parent process. It is shared with the child\\nprocess, similar to how {Stream} objects can be shared.</li>\\n<li><code>null</code>, <code>undefined</code> - Use default value. For stdio fds 0, 1 and 2 (in other\\nwords, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\\ndefault is <code>&#39;ignore&#39;</code>.</li>\\n</ol>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\n\\n// Child will use parent&#39;s stdios\\nspawn(&#39;prg&#39;, [], { stdio: &#39;inherit&#39; });\\n\\n// Spawn child sharing only stderr\\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, &#39;pipe&#39;, process.stderr] });\\n\\n// Open an extra fd=4, to interact with programs presenting a\\n// startd-style interface.\\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, null, null, null, &#39;pipe&#39;] });\\n</code></pre>\\n<p><em>It is worth noting that when an IPC channel is established between the\\nparent and child processes, and the child is a Node.js process, the child\\nis launched with the IPC channel unreferenced (using <code>unref()</code>) until the\\nchild registers an event handler for the [<code>process.on(&#39;disconnect&#39;)</code>][] event.\\nThis allows the child to exit normally without the process being held open\\nby the open IPC channel.</em></p>\\n<p>See also: [<code>child_process.exec()</code>][] and [<code>child_process.fork()</code>][]</p>\\n\"\n                }\n              ]\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Asynchronous Process Creation\"\n        },\n        {\n          \"textRaw\": \"Synchronous Process Creation\",\n          \"name\": \"synchronous_process_creation\",\n          \"desc\": \"<p>The [<code>child_process.spawnSync()</code>][], [<code>child_process.execSync()</code>][], and\\n[<code>child_process.execFileSync()</code>][] methods are <strong>synchronous</strong> and <strong>WILL</strong> block\\nthe Node.js event loop, pausing execution of any additional code until the\\nspawned process exits.</p>\\n<p>Blocking calls like these are mostly useful for simplifying general purpose\\nscripting tasks and for simplifying the loading/processing of application\\nconfiguration at startup.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"child_process.execFileSync(file[, args][, options])\",\n              \"type\": \"method\",\n              \"name\": \"execFileSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {Buffer|String} The stdout from the command \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer|String\",\n                    \"desc\": \"The stdout from the command\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`file` {String} The name or path of the executable file to run \",\n                      \"name\": \"file\",\n                      \"type\": \"String\",\n                      \"desc\": \"The name or path of the executable file to run\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} List of string arguments \",\n                      \"name\": \"args\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of string arguments\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`input` {String|Buffer} The value which will be passed as stdin to the spawned process \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"supplying this value will override `stdio[0]` \",\n                              \"name\": \"supplying\",\n                              \"desc\": \"this value will override `stdio[0]`\"\n                            }\n                          ],\n                          \"name\": \"input\",\n                          \"type\": \"String|Buffer\",\n                          \"desc\": \"The value which will be passed as stdin to the spawned process\"\n                        },\n                        {\n                          \"textRaw\": \"`stdio` {Array} Child's stdio configuration. (Default: `'pipe'`) \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`stderr` by default will be output to the parent process' stderr unless `stdio` is specified \",\n                              \"name\": \"stderr\",\n                              \"desc\": \"by default will be output to the parent process' stderr unless `stdio` is specified\"\n                            }\n                          ],\n                          \"name\": \"stdio\",\n                          \"type\": \"Array\",\n                          \"desc\": \"Child's stdio configuration. (Default: `'pipe'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {Number} In milliseconds the maximum amount of time the process is allowed to run. (Default: `undefined`) \",\n                          \"name\": \"timeout\",\n                          \"default\": \"undefined\",\n                          \"type\": \"Number\",\n                          \"desc\": \"In milliseconds the maximum amount of time the process is allowed to run.\"\n                        },\n                        {\n                          \"textRaw\": \"`killSignal` {String} The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`) \",\n                          \"name\": \"killSignal\",\n                          \"type\": \"String\",\n                          \"desc\": \"The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`)\"\n                        },\n                        {\n                          \"textRaw\": \"[`maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed \",\n                          \"name\": \"[\",\n                          \"desc\": \"maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} The encoding used for all stdio inputs and outputs. (Default: `'buffer'`) \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"The encoding used for all stdio inputs and outputs. (Default: `'buffer'`)\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"file\"\n                    },\n                    {\n                      \"name\": \"args\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.execFileSync()</code> method is generally identical to\\n[<code>child_process.execFile()</code>][] with the exception that the method will not return\\nuntil the child process has fully closed. When a timeout has been encountered\\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\\ncompletely exited. <em>Note that if the child process intercepts and handles\\nthe <code>SIGTERM</code> signal and does not exit, the parent process will still wait\\nuntil the child process has exited.</em></p>\\n<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>\\nthrow.  The [<code>Error</code>][] object will contain the entire result from\\n[<code>child_process.spawnSync()</code>][]</p>\\n\"\n            },\n            {\n              \"textRaw\": \"child_process.execSync(command[, options])\",\n              \"type\": \"method\",\n              \"name\": \"execSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {Buffer|String} The stdout from the command \",\n                    \"name\": \"return\",\n                    \"type\": \"Buffer|String\",\n                    \"desc\": \"The stdout from the command\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`command` {String} The command to run \",\n                      \"name\": \"command\",\n                      \"type\": \"String\",\n                      \"desc\": \"The command to run\"\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`input` {String|Buffer} The value which will be passed as stdin to the spawned process \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"supplying this value will override `stdio[0]` \",\n                              \"name\": \"supplying\",\n                              \"desc\": \"this value will override `stdio[0]`\"\n                            }\n                          ],\n                          \"name\": \"input\",\n                          \"type\": \"String|Buffer\",\n                          \"desc\": \"The value which will be passed as stdin to the spawned process\"\n                        },\n                        {\n                          \"textRaw\": \"`stdio` {Array} Child's stdio configuration. (Default: `'pipe'`) \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`stderr` by default will be output to the parent process' stderr unless `stdio` is specified \",\n                              \"name\": \"stderr\",\n                              \"desc\": \"by default will be output to the parent process' stderr unless `stdio` is specified\"\n                            }\n                          ],\n                          \"name\": \"stdio\",\n                          \"type\": \"Array\",\n                          \"desc\": \"Child's stdio configuration. (Default: `'pipe'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`shell` {String} Shell to execute the command with (Default: `'/bin/sh'` on UNIX, `'cmd.exe'` on Windows, The shell should  understand the `-c` switch on UNIX or `/s /c` on Windows. On Windows,  command line parsing should be compatible with `cmd.exe`.) \",\n                          \"name\": \"shell\",\n                          \"type\": \"String\",\n                          \"desc\": \"Shell to execute the command with (Default: `'/bin/sh'` on UNIX, `'cmd.exe'` on Windows, The shell should  understand the `-c` switch on UNIX or `/s /c` on Windows. On Windows,  command line parsing should be compatible with `cmd.exe`.)\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {Number} In milliseconds the maximum amount of time the process is allowed to run. (Default: `undefined`) \",\n                          \"name\": \"timeout\",\n                          \"default\": \"undefined\",\n                          \"type\": \"Number\",\n                          \"desc\": \"In milliseconds the maximum amount of time the process is allowed to run.\"\n                        },\n                        {\n                          \"textRaw\": \"`killSignal` {String} The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`) \",\n                          \"name\": \"killSignal\",\n                          \"type\": \"String\",\n                          \"desc\": \"The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`)\"\n                        },\n                        {\n                          \"textRaw\": \"[`maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed \",\n                          \"name\": \"[\",\n                          \"desc\": \"maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} The encoding used for all stdio inputs and outputs. (Default: `'buffer'`) \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"The encoding used for all stdio inputs and outputs. (Default: `'buffer'`)\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"command\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.execSync()</code> method is generally identical to\\n[<code>child_process.exec()</code>][] with the exception that the method will not return until\\nthe child process has fully closed. When a timeout has been encountered and\\n<code>killSignal</code> is sent, the method won&#39;t return until the process has completely\\nexited. <em>Note that if  the child process intercepts and handles the <code>SIGTERM</code>\\nsignal and doesn&#39;t exit, the parent process will wait until the child\\nprocess has exited.</em></p>\\n<p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong>\\nthrow.  The [<code>Error</code>][] object will contain the entire result from\\n[<code>child_process.spawnSync()</code>][]</p>\\n\"\n            },\n            {\n              \"textRaw\": \"child_process.spawnSync(command[, args][, options])\",\n              \"type\": \"method\",\n              \"name\": \"spawnSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {Object} \",\n                    \"options\": [\n                      {\n                        \"textRaw\": \"`pid` {Number} Pid of the child process \",\n                        \"name\": \"pid\",\n                        \"type\": \"Number\",\n                        \"desc\": \"Pid of the child process\"\n                      },\n                      {\n                        \"textRaw\": \"`output` {Array} Array of results from stdio output \",\n                        \"name\": \"output\",\n                        \"type\": \"Array\",\n                        \"desc\": \"Array of results from stdio output\"\n                      },\n                      {\n                        \"textRaw\": \"`stdout` {Buffer|String} The contents of `output[1]` \",\n                        \"name\": \"stdout\",\n                        \"type\": \"Buffer|String\",\n                        \"desc\": \"The contents of `output[1]`\"\n                      },\n                      {\n                        \"textRaw\": \"`stderr` {Buffer|String} The contents of `output[2]` \",\n                        \"name\": \"stderr\",\n                        \"type\": \"Buffer|String\",\n                        \"desc\": \"The contents of `output[2]`\"\n                      },\n                      {\n                        \"textRaw\": \"`status` {Number} The exit code of the child process \",\n                        \"name\": \"status\",\n                        \"type\": \"Number\",\n                        \"desc\": \"The exit code of the child process\"\n                      },\n                      {\n                        \"textRaw\": \"`signal` {String} The signal used to kill the child process \",\n                        \"name\": \"signal\",\n                        \"type\": \"String\",\n                        \"desc\": \"The signal used to kill the child process\"\n                      },\n                      {\n                        \"textRaw\": \"`error` {Error} The error object if the child process failed or timed out \",\n                        \"name\": \"error\",\n                        \"type\": \"Error\",\n                        \"desc\": \"The error object if the child process failed or timed out\"\n                      }\n                    ],\n                    \"name\": \"return\",\n                    \"type\": \"Object\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`command` {String} The command to run \",\n                      \"name\": \"command\",\n                      \"type\": \"String\",\n                      \"desc\": \"The command to run\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} List of string arguments \",\n                      \"name\": \"args\",\n                      \"type\": \"Array\",\n                      \"desc\": \"List of string arguments\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`cwd` {String} Current working directory of the child process \",\n                          \"name\": \"cwd\",\n                          \"type\": \"String\",\n                          \"desc\": \"Current working directory of the child process\"\n                        },\n                        {\n                          \"textRaw\": \"`input` {String|Buffer} The value which will be passed as stdin to the spawned process \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"supplying this value will override `stdio[0]` \",\n                              \"name\": \"supplying\",\n                              \"desc\": \"this value will override `stdio[0]`\"\n                            }\n                          ],\n                          \"name\": \"input\",\n                          \"type\": \"String|Buffer\",\n                          \"desc\": \"The value which will be passed as stdin to the spawned process\"\n                        },\n                        {\n                          \"textRaw\": \"`stdio` {Array} Child's stdio configuration. \",\n                          \"name\": \"stdio\",\n                          \"type\": \"Array\",\n                          \"desc\": \"Child's stdio configuration.\"\n                        },\n                        {\n                          \"textRaw\": \"`env` {Object} Environment key-value pairs \",\n                          \"name\": \"env\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Environment key-value pairs\"\n                        },\n                        {\n                          \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n                          \"name\": \"uid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n                          \"name\": \"gid\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {Number} In milliseconds the maximum amount of time the process is allowed to run. (Default: `undefined`) \",\n                          \"name\": \"timeout\",\n                          \"default\": \"undefined\",\n                          \"type\": \"Number\",\n                          \"desc\": \"In milliseconds the maximum amount of time the process is allowed to run.\"\n                        },\n                        {\n                          \"textRaw\": \"`killSignal` {String} The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`) \",\n                          \"name\": \"killSignal\",\n                          \"type\": \"String\",\n                          \"desc\": \"The signal value to be used when the spawned process will be killed. (Default: `'SIGTERM'`)\"\n                        },\n                        {\n                          \"textRaw\": \"[`maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed \",\n                          \"name\": \"[\",\n                          \"desc\": \"maxBuffer`][] {Number} largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} The encoding used for all stdio inputs and outputs. (Default: `'buffer'`) \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"The encoding used for all stdio inputs and outputs. (Default: `'buffer'`)\"\n                        },\n                        {\n                          \"textRaw\": \"`shell` {Boolean|String} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `'cmd.exe'` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX, or `/s /c` on Windows. Defaults to `false` (no shell). \",\n                          \"name\": \"shell\",\n                          \"type\": \"Boolean|String\",\n                          \"desc\": \"If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `'cmd.exe'` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX, or `/s /c` on Windows. Defaults to `false` (no shell).\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"command\"\n                    },\n                    {\n                      \"name\": \"args\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child_process.spawnSync()</code> method is generally identical to\\n[<code>child_process.spawn()</code>][] with the exception that the function will not return\\nuntil the child process has fully closed. When a timeout has been encountered\\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\\ncompletely exited. Note that if the process intercepts and handles the\\n<code>SIGTERM</code> signal and doesn&#39;t exit, the parent process will wait until the child\\nprocess has exited.</p>\\n\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Synchronous Process Creation\"\n        },\n        {\n          \"textRaw\": \"`maxBuffer` and Unicode\",\n          \"name\": \"`maxbuffer`_and_unicode\",\n          \"desc\": \"<p>It is important to keep in mind that the <code>maxBuffer</code> option specifies the\\nlargest number of <em>octets</em> allowed on <code>stdout</code> or <code>stderr</code>. If this value is\\nexceeded, then the child process is terminated. This particularly impacts\\noutput that includes multibyte character encodings such as UTF-8 or UTF-16.\\nFor instance, the following will output 13 UTF-8 encoded octets to <code>stdout</code>\\nalthough there are only 4 characters:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(&#39;\u4e2d\u6587\u6d4b\u8bd5&#39;);\\n</code></pre>\\n<!-- [end-include:child_process.md] -->\\n<!-- [start-include:cluster.md] -->\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"`maxBuffer` and Unicode\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: ChildProcess\",\n          \"type\": \"class\",\n          \"name\": \"ChildProcess\",\n          \"meta\": {\n            \"added\": [\n              \"v2.2.0\"\n            ]\n          },\n          \"desc\": \"<p>Instances of the <code>ChildProcess</code> class are [<code>EventEmitters</code>][<code>EventEmitter</code>] that represent\\nspawned child processes.</p>\\n<p>Instances of <code>ChildProcess</code> are not intended to be created directly. Rather,\\nuse the [<code>child_process.spawn()</code>][], [<code>child_process.exec()</code>][],\\n[<code>child_process.execFile()</code>][], or [<code>child_process.fork()</code>][] methods to create\\ninstances of <code>ChildProcess</code>.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;close&#39;</code> event is emitted when the stdio streams of a child process have\\nbeen closed. This is distinct from the [<code>&#39;exit&#39;</code>][] event, since multiple\\nprocesses might share the same stdio streams.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'disconnect'\",\n              \"type\": \"event\",\n              \"name\": \"disconnect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.2\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;disconnect&#39;</code> event is emitted after calling the\\n[<code>child.disconnect()</code>][] method in parent process or [<code>process.disconnect()</code>][] in child process. After\\ndisconnecting it is no longer possible to send or receive messages, and the\\n[<code>child.connected</code>][] property is <code>false</code>.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;error&#39;</code> event is emitted whenever:</p>\\n<ol>\\n<li>The process could not be spawned, or</li>\\n<li>The process could not be killed, or</li>\\n<li>Sending a message to the child process failed.</li>\\n</ol>\\n<p>Note that the <code>&#39;exit&#39;</code> event may or may not fire after an error has occurred.\\nIf you are listening to both the <code>&#39;exit&#39;</code> and <code>&#39;error&#39;</code> events, it is important\\nto guard against accidentally invoking handler functions multiple times.</p>\\n<p>See also [<code>child.kill()</code>][] and [<code>child.send()</code>][].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'exit'\",\n              \"type\": \"event\",\n              \"name\": \"exit\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;exit&#39;</code> event is emitted after the child process ends. If the process\\nexited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the\\nprocess terminated due to receipt of a signal, <code>signal</code> is the string name of\\nthe signal, otherwise <code>null</code>. One of the two will always be non-null.</p>\\n<p>Note that when the <code>&#39;exit&#39;</code> event is triggered, child process stdio streams\\nmight still be open.</p>\\n<p>Also, note that Node.js establishes signal handlers for <code>SIGINT</code> and\\n<code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt\\nof those signals. Rather, Node.js will perform a sequence of cleanup actions\\nand then will re-raise the handled signal.</p>\\n<p>See waitpid(2).</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'message'\",\n              \"type\": \"event\",\n              \"name\": \"message\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.9\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;message&#39;</code> event is triggered when a child process uses [<code>process.send()</code>][]\\nto send messages.</p>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"`connected` {Boolean} Set to `false` after `child.disconnect()` is called \",\n              \"type\": \"Boolean\",\n              \"name\": \"connected\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.2\"\n                ]\n              },\n              \"desc\": \"<p>The <code>child.connected</code> property indicates whether it is still possible to send\\nand receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it\\nis no longer possible to send or receive messages.</p>\\n\",\n              \"shortDesc\": \"Set to `false` after `child.disconnect()` is called\"\n            },\n            {\n              \"textRaw\": \"`pid` {Number} Integer \",\n              \"type\": \"Number\",\n              \"name\": \"pid\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Returns the process identifier (PID) of the child process.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\\n\\nconsole.log(`Spawned child pid: ${grep.pid}`);\\ngrep.stdin.end();\\n</code></pre>\\n\",\n              \"shortDesc\": \"Integer\"\n            },\n            {\n              \"textRaw\": \"`stderr` {Stream} \",\n              \"type\": \"Stream\",\n              \"name\": \"stderr\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stderr</code>.</p>\\n<p>If the child was spawned with <code>stdio[2]</code> set to anything other than <code>&#39;pipe&#39;</code>,\\nthen this will be <code>undefined</code>.</p>\\n<p><code>child.stderr</code> is an alias for <code>child.stdio[2]</code>. Both properties will refer to\\nthe same value.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`stdin` {Stream} \",\n              \"type\": \"Stream\",\n              \"name\": \"stdin\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>A <code>Writable Stream</code> that represents the child process&#39;s <code>stdin</code>.</p>\\n<p><em>Note that if a child process waits to read all of its input, the child will not\\ncontinue until this stream has been closed via <code>end()</code>.</em></p>\\n<p>If the child was spawned with <code>stdio[0]</code> set to anything other than <code>&#39;pipe&#39;</code>,\\nthen this will be <code>undefined</code>.</p>\\n<p><code>child.stdin</code> is an alias for <code>child.stdio[0]</code>. Both properties will refer to\\nthe same value.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`stdio` {Array} \",\n              \"type\": \"Array\",\n              \"name\": \"stdio\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.10\"\n                ]\n              },\n              \"desc\": \"<p>A sparse array of pipes to the child process, corresponding with positions in\\nthe [<code>stdio</code>][] option passed to [<code>child_process.spawn()</code>][] that have been set\\nto the value <code>&#39;pipe&#39;</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and\\n<code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and\\n<code>child.stderr</code>, respectively.</p>\\n<p>In the following example, only the child&#39;s fd <code>1</code> (stdout) is configured as a\\npipe, so only the parent&#39;s <code>child.stdio[1]</code> is a stream, all other values in\\nthe array are <code>null</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst child_process = require(&#39;child_process&#39;);\\n\\nconst child = child_process.spawn(&#39;ls&#39;, {\\n    stdio: [\\n      0, // Use parents stdin for child\\n      &#39;pipe&#39;, // Pipe child&#39;s stdout to parent\\n      fs.openSync(&#39;err.out&#39;, &#39;w&#39;) // Direct child&#39;s stderr to a file\\n    ]\\n});\\n\\nassert.equal(child.stdio[0], null);\\nassert.equal(child.stdio[0], child.stdin);\\n\\nassert(child.stdout);\\nassert.equal(child.stdio[1], child.stdout);\\n\\nassert.equal(child.stdio[2], null);\\nassert.equal(child.stdio[2], child.stderr);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"`stdout` {Stream} \",\n              \"type\": \"Stream\",\n              \"name\": \"stdout\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stdout</code>.</p>\\n<p>If the child was spawned with <code>stdio[1]</code> set to anything other than <code>&#39;pipe&#39;</code>,\\nthen this will be <code>undefined</code>.</p>\\n<p><code>child.stdout</code> is an alias for <code>child.stdio[1]</code>. Both properties will refer\\nto the same value.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"child.disconnect()\",\n              \"type\": \"method\",\n              \"name\": \"disconnect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.2\"\n                ]\n              },\n              \"desc\": \"<p>Closes the IPC channel between parent and child, allowing the child to exit\\ngracefully once there are no other connections keeping it alive. After calling\\nthis method the <code>child.connected</code> and <code>process.connected</code> properties in both\\nthe parent and child (respectively) will be set to <code>false</code>, and it will be no\\nlonger possible to pass messages between the processes.</p>\\n<p>The <code>&#39;disconnect&#39;</code> event will be emitted when there are no messages in the\\nprocess of being received. This will most often be triggered immediately after\\ncalling <code>child.disconnect()</code>.</p>\\n<p>Note that when the child process is a Node.js instance (e.g. spawned using\\n[<code>child_process.fork()</code>]), the <code>process.disconnect()</code> method can be invoked\\nwithin the child process to close the IPC channel as well.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"child.kill([signal])\",\n              \"type\": \"method\",\n              \"name\": \"kill\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`signal` {String} \",\n                      \"name\": \"signal\",\n                      \"type\": \"String\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"signal\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>child.kill()</code> methods sends a signal to the child process. If no argument\\nis given, the process will be sent the <code>&#39;SIGTERM&#39;</code> signal. See <code>signal(7)</code> for\\na list of available signals.</p>\\n<pre><code class=\\\"lang-js\\\">const spawn = require(&#39;child_process&#39;).spawn;\\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\\n\\ngrep.on(&#39;close&#39;, (code, signal) =&gt; {\\n  console.log(\\n    `child process terminated due to receipt of signal ${signal}`);\\n});\\n\\n// Send SIGHUP to process\\ngrep.kill(&#39;SIGHUP&#39;);\\n</code></pre>\\n<p>The [<code>ChildProcess</code>][] object may emit an [<code>&#39;error&#39;</code>][] event if the signal cannot be\\ndelivered. Sending a signal to a child process that has already exited is not\\nan error but may have unforeseen consequences. Specifically, if the process\\nidentifier (PID) has been reassigned to another process, the signal will be\\ndelivered to that process instead which can have unexpected results.</p>\\n<p>Note that while the function is called <code>kill</code>, the signal delivered to the\\nchild process may not actually terminate the process.</p>\\n<p>See kill(2) for reference.</p>\\n<p>Also note: on Linux, child processes of child processes will not be terminated\\nwhen attempting to kill their parent. This is likely to happen when running a\\nnew process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such\\nas in this example:</p>\\n<pre><code class=\\\"lang-js\\\">&#39;use strict&#39;;\\nconst spawn = require(&#39;child_process&#39;).spawn;\\n\\nlet child = spawn(&#39;sh&#39;, [&#39;-c&#39;,\\n  `node -e &quot;setInterval(() =&gt; {\\n      console.log(process.pid + &#39;is alive&#39;)\\n    }, 500);&quot;`\\n  ], {\\n    stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]\\n  });\\n\\nsetTimeout(() =&gt; {\\n  child.kill(); // does not terminate the node process in the shell\\n}, 2000);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"child.send(message[, sendHandle[, options]][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"send\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.9\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Boolean} \",\n                    \"name\": \"return\",\n                    \"type\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`message` {Object} \",\n                      \"name\": \"message\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`sendHandle` {Handle} \",\n                      \"name\": \"sendHandle\",\n                      \"type\": \"Handle\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"message\"\n                    },\n                    {\n                      \"name\": \"sendHandle\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>When an IPC channel has been established between the parent and child (\\ni.e. when using [<code>child_process.fork()</code>][]), the <code>child.send()</code> method can be\\nused to send messages to the child process. When the child process is a Node.js\\ninstance, these messages can be received via the [<code>process.on(&#39;message&#39;)</code>][] event.</p>\\n<p>For example, in the parent script:</p>\\n<pre><code class=\\\"lang-js\\\">const cp = require(&#39;child_process&#39;);\\nconst n = cp.fork(`${__dirname}/sub.js`);\\n\\nn.on(&#39;message&#39;, (m) =&gt; {\\n  console.log(&#39;PARENT got message:&#39;, m);\\n});\\n\\nn.send({ hello: &#39;world&#39; });\\n</code></pre>\\n<p>And then the child script, <code>&#39;sub.js&#39;</code> might look like this:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;message&#39;, (m) =&gt; {\\n  console.log(&#39;CHILD got message:&#39;, m);\\n});\\n\\nprocess.send({ foo: &#39;bar&#39; });\\n</code></pre>\\n<p>Child Node.js processes will have a [<code>process.send()</code>][] method of their own that\\nallows the child to send messages back to the parent.</p>\\n<p>There is a special case when sending a <code>{cmd: &#39;NODE_foo&#39;}</code> message. All messages\\ncontaining a <code>NODE_</code> prefix in its <code>cmd</code> property are considered to be reserved\\nfor use within Node.js core and will not be emitted in the child&#39;s\\n[<code>process.on(&#39;message&#39;)</code>][] event. Rather, such messages are emitted using the\\n<code>process.on(&#39;internalMessage&#39;)</code> event and are consumed internally by Node.js.\\nApplications should avoid using such messages or listening for\\n<code>&#39;internalMessage&#39;</code> events as it is subject to change without notice.</p>\\n<p>The optional <code>sendHandle</code> argument that may be passed to <code>child.send()</code> is for\\npassing a TCP server or socket object to the child process. The child will\\nreceive the object as the second argument passed to the callback function\\nregistered on the [<code>process.on(&#39;message&#39;)</code>][] event. Any data that is received\\nand buffered in the socket will not be sent to the child.</p>\\n<p>The <code>options</code> argument, if present, is an object used to parameterize the\\nsending of certain types of handles. <code>options</code> supports the following\\nproperties:</p>\\n<ul>\\n<li><code>keepOpen</code> - A Boolean value that can be used when passing instances of\\n<code>net.Socket</code>. When <code>true</code>, the socket is kept open in the sending process.\\nDefaults to <code>false</code>.</li>\\n</ul>\\n<p>The optional <code>callback</code> is a function that is invoked after the message is\\nsent but before the child may have received it.  The function is called with a\\nsingle argument: <code>null</code> on success, or an [<code>Error</code>][] object on failure.</p>\\n<p>If no <code>callback</code> function is provided and the message cannot be sent, an\\n<code>&#39;error&#39;</code> event will be emitted by the [<code>ChildProcess</code>][] object. This can happen,\\nfor instance, when the child process has already exited.</p>\\n<p><code>child.send()</code> will return <code>false</code> if the channel has closed or when the\\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\\nmore. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be\\nused to implement flow control.</p>\\n<h4>Example: sending a server object</h4>\\n<p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of\\na TCP server object to the child process as illustrated in the example below:</p>\\n<pre><code class=\\\"lang-js\\\">const child = require(&#39;child_process&#39;).fork(&#39;child.js&#39;);\\n\\n// Open up the server object and send the handle.\\nconst server = require(&#39;net&#39;).createServer();\\nserver.on(&#39;connection&#39;, (socket) =&gt; {\\n  socket.end(&#39;handled by parent&#39;);\\n});\\nserver.listen(1337, () =&gt; {\\n  child.send(&#39;server&#39;, server);\\n});\\n</code></pre>\\n<p>The child would then receive the server object as:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;message&#39;, (m, server) =&gt; {\\n  if (m === &#39;server&#39;) {\\n    server.on(&#39;connection&#39;, (socket) =&gt; {\\n      socket.end(&#39;handled by child&#39;);\\n    });\\n  }\\n});\\n</code></pre>\\n<p>Once the server is now shared between the parent and child, some connections\\ncan be handled by the parent and some by the child.</p>\\n<p>While the example above uses a server created using the <code>net</code> module, <code>dgram</code>\\nmodule servers use exactly the same workflow with the exceptions of listening on\\na <code>&#39;message&#39;</code> event instead of <code>&#39;connection&#39;</code> and using <code>server.bind()</code> instead of\\n<code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.</p>\\n<h4>Example: sending a socket object</h4>\\n<p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a\\nsocket to the child process. The example below spawns two children that each\\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:</p>\\n<pre><code class=\\\"lang-js\\\">const normal = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;normal&#39;]);\\nconst special = require(&#39;child_process&#39;).fork(&#39;child.js&#39;, [&#39;special&#39;]);\\n\\n// Open up the server and send sockets to child\\nconst server = require(&#39;net&#39;).createServer();\\nserver.on(&#39;connection&#39;, (socket) =&gt; {\\n\\n  // If this is special priority\\n  if (socket.remoteAddress === &#39;74.125.127.100&#39;) {\\n    special.send(&#39;socket&#39;, socket);\\n    return;\\n  }\\n  // This is normal priority\\n  normal.send(&#39;socket&#39;, socket);\\n});\\nserver.listen(1337);\\n</code></pre>\\n<p>The <code>child.js</code> would receive the socket handle as the second argument passed\\nto the event callback function:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;message&#39;, (m, socket) =&gt; {\\n  if (m === &#39;socket&#39;) {\\n    socket.end(`Request handled with ${process.argv[2]} priority`);\\n  }\\n});\\n</code></pre>\\n<p>Once a socket has been passed to a child, the parent is no longer capable of\\ntracking when the socket is destroyed. To indicate this, the <code>.connections</code>\\nproperty becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when\\nthis occurs.</p>\\n<p><em>Note: this function uses [<code>JSON.stringify()</code>][] internally to serialize the\\n<code>message</code>.</em></p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Child Process\"\n    },\n    {\n      \"textRaw\": \"Cluster\",\n      \"name\": \"cluster\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>A single instance of Node.js runs in a single thread. To take advantage of\\nmulti-core systems the user will sometimes want to launch a cluster of Node.js\\nprocesses to handle the load.</p>\\n<p>The cluster module allows you to easily create child processes that\\nall share server ports.</p>\\n<pre><code class=\\\"lang-js\\\">const cluster = require(&#39;cluster&#39;);\\nconst http = require(&#39;http&#39;);\\nconst numCPUs = require(&#39;os&#39;).cpus().length;\\n\\nif (cluster.isMaster) {\\n  // Fork workers.\\n  for (var i = 0; i &lt; numCPUs; i++) {\\n    cluster.fork();\\n  }\\n\\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\\n    console.log(`worker ${worker.process.pid} died`);\\n  });\\n} else {\\n  // Workers can share any TCP connection\\n  // In this case it is an HTTP server\\n  http.createServer((req, res) =&gt; {\\n    res.writeHead(200);\\n    res.end(&#39;hello world\\\\n&#39;);\\n  }).listen(8000);\\n}\\n</code></pre>\\n<p>Running Node.js will now share port 8000 between the workers:</p>\\n<pre><code>$ NODE_DEBUG=cluster node server.js\\n23521,Master Worker 23524 online\\n23521,Master Worker 23526 online\\n23521,Master Worker 23523 online\\n23521,Master Worker 23528 online\\n</code></pre><p>Please note that, on Windows, it is not yet possible to set up a named pipe\\nserver in a worker.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"How It Works\",\n          \"name\": \"How It Works\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>The worker processes are spawned using the [<code>child_process.fork()</code>][] method,\\nso that they can communicate with the parent via IPC and pass server\\nhandles back and forth.</p>\\n<p>The cluster module supports two methods of distributing incoming\\nconnections.</p>\\n<p>The first one (and the default one on all platforms except Windows),\\nis the round-robin approach, where the master process listens on a\\nport, accepts new connections and distributes them across the workers\\nin a round-robin fashion, with some built-in smarts to avoid\\noverloading a worker process.</p>\\n<p>The second approach is where the master process creates the listen\\nsocket and sends it to interested workers. The workers then accept\\nincoming connections directly.</p>\\n<p>The second approach should, in theory, give the best performance.\\nIn practice however, distribution tends to be very unbalanced due\\nto operating system scheduler vagaries. Loads have been observed\\nwhere over 70% of all connections ended up in just two processes,\\nout of a total of eight.</p>\\n<p>Because <code>server.listen()</code> hands off most of the work to the master\\nprocess, there are three cases where the behavior between a normal\\nNode.js process and a cluster worker differs:</p>\\n<ol>\\n<li><code>server.listen({fd: 7})</code> Because the message is passed to the master,\\nfile descriptor 7 <strong>in the parent</strong> will be listened on, and the\\nhandle passed to the worker, rather than listening to the worker&#39;s\\nidea of what the number 7 file descriptor references.</li>\\n<li><code>server.listen(handle)</code> Listening on handles explicitly will cause\\nthe worker to use the supplied handle, rather than talk to the master\\nprocess.  If the worker already has the handle, then it&#39;s presumed\\nthat you know what you are doing.</li>\\n<li><code>server.listen(0)</code> Normally, this will cause servers to listen on a\\nrandom port.  However, in a cluster, each worker will receive the\\nsame &quot;random&quot; port each time they do <code>listen(0)</code>.  In essence, the\\nport is random the first time, but predictable thereafter.  If you\\nwant to listen on a unique port, generate a port number based on the\\ncluster worker ID.</li>\\n</ol>\\n<p>There is no routing logic in Node.js, or in your program, and no shared\\nstate between the workers.  Therefore, it is important to design your\\nprogram such that it does not rely too heavily on in-memory data objects\\nfor things like sessions and login.</p>\\n<p>Because workers are all separate processes, they can be killed or\\nre-spawned depending on your program&#39;s needs, without affecting other\\nworkers.  As long as there are some workers still alive, the server will\\ncontinue to accept connections.  If no workers are alive, existing connections\\nwill be dropped and new connections will be refused.  Node.js does not\\nautomatically manage the number of workers for you, however.  It is your\\nresponsibility to manage the worker pool for your application&#39;s needs.</p>\\n\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Worker\",\n          \"type\": \"class\",\n          \"name\": \"Worker\",\n          \"desc\": \"<p>A Worker object contains all public information and method about a worker.\\nIn the master it can be obtained using <code>cluster.workers</code>. In a worker\\nit can be obtained using <code>cluster.worker</code>.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'disconnect'\",\n              \"type\": \"event\",\n              \"name\": \"disconnect\",\n              \"desc\": \"<p>Similar to the <code>cluster.on(&#39;disconnect&#39;)</code> event, but specific to this worker.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.fork().on(&#39;disconnect&#39;, () =&gt; {\\n  // Worker has disconnected\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"desc\": \"<p>This event is the same as the one provided by [<code>child_process.fork()</code>][].</p>\\n<p>In a worker you can also use <code>process.on(&#39;error&#39;)</code>.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'exit'\",\n              \"type\": \"event\",\n              \"name\": \"exit\",\n              \"params\": [],\n              \"desc\": \"<p>Similar to the <code>cluster.on(&#39;exit&#39;)</code> event, but specific to this worker.</p>\\n<pre><code class=\\\"lang-js\\\">const worker = cluster.fork();\\nworker.on(&#39;exit&#39;, (code, signal) =&gt; {\\n  if (signal) {\\n    console.log(`worker was killed by signal: ${signal}`);\\n  } else if (code !== 0) {\\n    console.log(`worker exited with error code: ${code}`);\\n  } else {\\n    console.log(&#39;worker success!&#39;);\\n  }\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'listening'\",\n              \"type\": \"event\",\n              \"name\": \"listening\",\n              \"params\": [],\n              \"desc\": \"<p>Similar to the <code>cluster.on(&#39;listening&#39;)</code> event, but specific to this worker.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.fork().on(&#39;listening&#39;, (address) =&gt; {\\n  // Worker is listening\\n});\\n</code></pre>\\n<p>It is not emitted in the worker.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'message'\",\n              \"type\": \"event\",\n              \"name\": \"message\",\n              \"params\": [],\n              \"desc\": \"<p>Similar to the <code>cluster.on(&#39;message&#39;)</code> event, but specific to this worker.</p>\\n<p>This event is the same as the one provided by [<code>child_process.fork()</code>][].</p>\\n<p>In a worker you can also use <code>process.on(&#39;message&#39;)</code>.</p>\\n<p>As an example, here is a cluster that keeps count of the number of requests\\nin the master process using the message system:</p>\\n<pre><code class=\\\"lang-js\\\">const cluster = require(&#39;cluster&#39;);\\nconst http = require(&#39;http&#39;);\\n\\nif (cluster.isMaster) {\\n\\n  // Keep track of http requests\\n  var numReqs = 0;\\n  setInterval(() =&gt; {\\n    console.log(&#39;numReqs =&#39;, numReqs);\\n  }, 1000);\\n\\n  // Count requests\\n  function messageHandler(msg) {\\n    if (msg.cmd &amp;&amp; msg.cmd == &#39;notifyRequest&#39;) {\\n      numReqs += 1;\\n    }\\n  }\\n\\n  // Start workers and listen for messages containing notifyRequest\\n  const numCPUs = require(&#39;os&#39;).cpus().length;\\n  for (var i = 0; i &lt; numCPUs; i++) {\\n    cluster.fork();\\n  }\\n\\n  Object.keys(cluster.workers).forEach((id) =&gt; {\\n    cluster.workers[id].on(&#39;message&#39;, messageHandler);\\n  });\\n\\n} else {\\n\\n  // Worker processes have a http server.\\n  http.Server((req, res) =&gt; {\\n    res.writeHead(200);\\n    res.end(&#39;hello world\\\\n&#39;);\\n\\n    // notify master about the request\\n    process.send({ cmd: &#39;notifyRequest&#39; });\\n  }).listen(8000);\\n}\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'online'\",\n              \"type\": \"event\",\n              \"name\": \"online\",\n              \"desc\": \"<p>Similar to the <code>cluster.on(&#39;online&#39;)</code> event, but specific to this worker.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.fork().on(&#39;online&#39;, () =&gt; {\\n  // Worker is online\\n});\\n</code></pre>\\n<p>It is not emitted in the worker.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"worker.disconnect()\",\n              \"type\": \"method\",\n              \"name\": \"disconnect\",\n              \"desc\": \"<p>In a worker, this function will close all servers, wait for the <code>&#39;close&#39;</code> event on\\nthose servers, and then disconnect the IPC channel.</p>\\n<p>In the master, an internal message is sent to the worker causing it to call\\n<code>.disconnect()</code> on itself.</p>\\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\\n<p>Note that after a server is closed, it will no longer accept new connections,\\nbut connections may be accepted by any other listening worker. Existing\\nconnections will be allowed to close as usual. When no more connections exist,\\nsee [<code>server.close()</code>][], the IPC channel to the worker will close allowing it to\\ndie gracefully.</p>\\n<p>The above applies <em>only</em> to server connections, client connections are not\\nautomatically closed by workers, and disconnect does not wait for them to close\\nbefore exiting.</p>\\n<p>Note that in a worker, <code>process.disconnect</code> exists, but it is not this function,\\nit is [<code>disconnect</code>][].</p>\\n<p>Because long living server connections may block workers from disconnecting, it\\nmay be useful to send a message, so application specific actions may be taken to\\nclose them. It also may be useful to implement a timeout, killing a worker if\\nthe <code>&#39;disconnect&#39;</code> event has not been emitted after some time.</p>\\n<pre><code class=\\\"lang-js\\\">if (cluster.isMaster) {\\n  var worker = cluster.fork();\\n  var timeout;\\n\\n  worker.on(&#39;listening&#39;, (address) =&gt; {\\n    worker.send(&#39;shutdown&#39;);\\n    worker.disconnect();\\n    timeout = setTimeout(() =&gt; {\\n      worker.kill();\\n    }, 2000);\\n  });\\n\\n  worker.on(&#39;disconnect&#39;, () =&gt; {\\n    clearTimeout(timeout);\\n  });\\n\\n} else if (cluster.isWorker) {\\n  const net = require(&#39;net&#39;);\\n  var server = net.createServer((socket) =&gt; {\\n    // connections never end\\n  });\\n\\n  server.listen(8000);\\n\\n  process.on(&#39;message&#39;, (msg) =&gt; {\\n    if (msg === &#39;shutdown&#39;) {\\n      // initiate graceful close of any connections to server\\n    }\\n  });\\n}\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"worker.isConnected()\",\n              \"type\": \"method\",\n              \"name\": \"isConnected\",\n              \"desc\": \"<p>This function returns <code>true</code> if the worker is connected to its master via its IPC\\nchannel, <code>false</code> otherwise. A worker is connected to its master after it&#39;s been\\ncreated. It is disconnected after the <code>&#39;disconnect&#39;</code> event is emitted.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"worker.isDead()\",\n              \"type\": \"method\",\n              \"name\": \"isDead\",\n              \"desc\": \"<p>This function returns <code>true</code> if the worker&#39;s process has terminated (either\\nbecause of exiting or being signaled). Otherwise, it returns <code>false</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"worker.kill([signal='SIGTERM'])\",\n              \"type\": \"method\",\n              \"name\": \"kill\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`signal` {String} Name of the kill signal to send to the worker process. \",\n                      \"name\": \"signal\",\n                      \"type\": \"String\",\n                      \"desc\": \"Name of the kill signal to send to the worker process.\",\n                      \"optional\": true,\n                      \"default\": \"'SIGTERM'\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"signal\",\n                      \"optional\": true,\n                      \"default\": \"'SIGTERM'\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>This function will kill the worker. In the master, it does this by disconnecting\\nthe <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the\\nworker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p>\\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\\n<p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p>\\n<p>Note that in a worker, <code>process.kill()</code> exists, but it is not this function,\\nit is [<code>kill</code>][].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"worker.send(message[, sendHandle][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"send\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: Boolean \",\n                    \"name\": \"return\",\n                    \"desc\": \"Boolean\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`message` {Object} \",\n                      \"name\": \"message\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`sendHandle` {Handle} \",\n                      \"name\": \"sendHandle\",\n                      \"type\": \"Handle\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"message\"\n                    },\n                    {\n                      \"name\": \"sendHandle\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Send a message to a worker or master, optionally with a handle.</p>\\n<p>In the master this sends a message to a specific worker. It is identical to\\n[<code>ChildProcess.send()</code>][].</p>\\n<p>In a worker this sends a message to the master. It is identical to\\n<code>process.send()</code>.</p>\\n<p>This example will echo back all messages from the master:</p>\\n<pre><code class=\\\"lang-js\\\">if (cluster.isMaster) {\\n  var worker = cluster.fork();\\n  worker.send(&#39;hi there&#39;);\\n\\n} else if (cluster.isWorker) {\\n  process.on(&#39;message&#39;, (msg) =&gt; {\\n    process.send(msg);\\n  });\\n}\\n</code></pre>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"`exitedAfterDisconnect` {Boolean} \",\n              \"type\": \"Boolean\",\n              \"name\": \"exitedAfterDisconnect\",\n              \"desc\": \"<p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>\\n<p>The boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary\\nand accidental exit, the master may choose not to respawn a worker based on\\nthis value.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\\n  if (worker.exitedAfterDisconnect === true) {\\n    console.log(&#39;Oh, it was just voluntary \u2013 no need to worry&#39;);\\n  }\\n});\\n\\n// kill worker\\nworker.kill();\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"`id` {Number} \",\n              \"type\": \"Number\",\n              \"name\": \"id\",\n              \"desc\": \"<p>Each new worker is given its own unique id, this id is stored in the\\n<code>id</code>.</p>\\n<p>While a worker is alive, this is the key that indexes it in\\ncluster.workers</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`process` {ChildProcess} \",\n              \"type\": \"ChildProcess\",\n              \"name\": \"process\",\n              \"desc\": \"<p>All workers are created using [<code>child_process.fork()</code>][], the returned object\\nfrom this function is stored as <code>.process</code>. In a worker, the global <code>process</code>\\nis stored.</p>\\n<p>See: [Child Process module][]</p>\\n<p>Note that workers will call <code>process.exit(0)</code> if the <code>&#39;disconnect&#39;</code> event occurs\\non <code>process</code> and <code>.exitedAfterDisconnect</code> is not <code>true</code>. This protects against\\naccidental disconnection.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"worker.suicide\",\n              \"name\": \"suicide\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`worker.exitedAfterDisconnect`][] instead.\",\n              \"desc\": \"<p>An alias to [<code>worker.exitedAfterDisconnect</code>][].</p>\\n<p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>\\n<p>The boolean <code>worker.suicide</code> lets you distinguish between voluntary\\nand accidental exit, the master may choose not to respawn a worker based on\\nthis value.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\\n  if (worker.suicide === true) {\\n    console.log(&#39;Oh, it was just voluntary \u2013 no need to worry&#39;);\\n  }\\n});\\n\\n// kill worker\\nworker.kill();\\n</code></pre>\\n<p>This API only exists for backwards compatibility and will be removed in the\\nfuture.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"events\": [\n        {\n          \"textRaw\": \"Event: 'disconnect'\",\n          \"type\": \"event\",\n          \"name\": \"disconnect\",\n          \"params\": [],\n          \"desc\": \"<p>Emitted after the worker IPC channel has disconnected. This can occur when a\\nworker exits gracefully, is killed, or is disconnected manually (such as with\\nworker.disconnect()).</p>\\n<p>There may be a delay between the <code>&#39;disconnect&#39;</code> and <code>&#39;exit&#39;</code> events.  These events\\ncan be used to detect if the process is stuck in a cleanup or if there are\\nlong-living connections.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\\n  console.log(`The worker #${worker.id} has disconnected`);\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'exit'\",\n          \"type\": \"event\",\n          \"name\": \"exit\",\n          \"params\": [],\n          \"desc\": \"<p>When any of the workers die the cluster module will emit the <code>&#39;exit&#39;</code> event.</p>\\n<p>This can be used to restart the worker by calling <code>.fork()</code> again.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\\n  console.log(&#39;worker %d died (%s). restarting...&#39;,\\n    worker.process.pid, signal || code);\\n  cluster.fork();\\n});\\n</code></pre>\\n<p>See [child_process event: &#39;exit&#39;][].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'fork'\",\n          \"type\": \"event\",\n          \"name\": \"fork\",\n          \"params\": [],\n          \"desc\": \"<p>When a new worker is forked the cluster module will emit a <code>&#39;fork&#39;</code> event.\\nThis can be used to log worker activity, and create your own timeout.</p>\\n<pre><code class=\\\"lang-js\\\">var timeouts = [];\\nfunction errorMsg() {\\n  console.error(&#39;Something must be wrong with the connection ...&#39;);\\n}\\n\\ncluster.on(&#39;fork&#39;, (worker) =&gt; {\\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\\n});\\ncluster.on(&#39;listening&#39;, (worker, address) =&gt; {\\n  clearTimeout(timeouts[worker.id]);\\n});\\ncluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\\n  clearTimeout(timeouts[worker.id]);\\n  errorMsg();\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'listening'\",\n          \"type\": \"event\",\n          \"name\": \"listening\",\n          \"params\": [],\n          \"desc\": \"<p>After calling <code>listen()</code> from a worker, when the <code>&#39;listening&#39;</code> event is emitted on\\nthe server, a <code>&#39;listening&#39;</code> event will also be emitted on <code>cluster</code> in the master.</p>\\n<p>The event handler is executed with two arguments, the <code>worker</code> contains the worker\\nobject and the <code>address</code> object contains the following connection properties:\\n<code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening\\non more than one address.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;listening&#39;, (worker, address) =&gt; {\\n  console.log(\\n    `A worker is now connected to ${address.address}:${address.port}`);\\n});\\n</code></pre>\\n<p>The <code>addressType</code> is one of:</p>\\n<ul>\\n<li><code>4</code> (TCPv4)</li>\\n<li><code>6</code> (TCPv6)</li>\\n<li><code>-1</code> (unix domain socket)</li>\\n<li><code>&quot;udp4&quot;</code> or <code>&quot;udp6&quot;</code> (UDP v4 or v6)</li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'message'\",\n          \"type\": \"event\",\n          \"name\": \"message\",\n          \"params\": [],\n          \"desc\": \"<p>Emitted when any worker receives a message.</p>\\n<p>See [child_process event: &#39;message&#39;][].</p>\\n<p>Before Node.js v6.0, this event emitted only the message and the handle,\\nbut not the worker object, contrary to what the documentation stated.</p>\\n<p>If you need to support older versions and don&#39;t need the worker object,\\nyou can work around the discrepancy by checking the number of arguments:</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;message&#39;, function(worker, message, handle) {\\n  if (arguments.length === 2) {\\n    handle = message;\\n    message = worker;\\n    worker = undefined;\\n  }\\n  // ...\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'online'\",\n          \"type\": \"event\",\n          \"name\": \"online\",\n          \"params\": [],\n          \"desc\": \"<p>After forking a new worker, the worker should respond with an online message.\\nWhen the master receives an online message it will emit this event.\\nThe difference between <code>&#39;fork&#39;</code> and <code>&#39;online&#39;</code> is that fork is emitted when the\\nmaster forks a worker, and &#39;online&#39; is emitted when the worker is running.</p>\\n<pre><code class=\\\"lang-js\\\">cluster.on(&#39;online&#39;, (worker) =&gt; {\\n  console.log(&#39;Yay, the worker responded after it was forked&#39;);\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"Event: 'setup'\",\n          \"type\": \"event\",\n          \"name\": \"setup\",\n          \"params\": [],\n          \"desc\": \"<p>Emitted every time <code>.setupMaster()</code> is called.</p>\\n<p>The <code>settings</code> object is the <code>cluster.settings</code> object at the time\\n<code>.setupMaster()</code> was called and is advisory only, since multiple calls to\\n<code>.setupMaster()</code> can be made in a single tick.</p>\\n<p>If accuracy is important, use <code>cluster.settings</code>.</p>\\n\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"cluster.disconnect([callback])\",\n          \"type\": \"method\",\n          \"name\": \"disconnect\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`callback` {Function} called when all workers are disconnected and handles are closed \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\",\n                  \"desc\": \"called when all workers are disconnected and handles are closed\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p>\\n<p>When they are disconnected all internal handles will be closed, allowing the\\nmaster process to die gracefully if no other event is waiting.</p>\\n<p>The method takes an optional callback argument which will be called when finished.</p>\\n<p>This can only be called from the master process.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"cluster.fork([env])\",\n          \"type\": \"method\",\n          \"name\": \"fork\",\n          \"signatures\": [\n            {\n              \"return\": {\n                \"textRaw\": \"return {cluster.Worker} \",\n                \"name\": \"return\",\n                \"type\": \"cluster.Worker\"\n              },\n              \"params\": [\n                {\n                  \"textRaw\": \"`env` {Object} Key/value pairs to add to worker process environment. \",\n                  \"name\": \"env\",\n                  \"type\": \"Object\",\n                  \"desc\": \"Key/value pairs to add to worker process environment.\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"env\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Spawn a new worker process.</p>\\n<p>This can only be called from the master process.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"cluster.setupMaster([settings])\",\n          \"type\": \"method\",\n          \"name\": \"setupMaster\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`settings` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`exec` {String} file path to worker file.  (Default=`process.argv[1]`) \",\n                      \"name\": \"exec\",\n                      \"default\": \"process.argv[1]\",\n                      \"type\": \"String\",\n                      \"desc\": \"file path to worker file.\"\n                    },\n                    {\n                      \"textRaw\": \"`args` {Array} string arguments passed to worker. (Default=`process.argv.slice(2)`) \",\n                      \"name\": \"args\",\n                      \"default\": \"process.argv.slice(2)\",\n                      \"type\": \"Array\",\n                      \"desc\": \"string arguments passed to worker.\"\n                    },\n                    {\n                      \"textRaw\": \"`silent` {Boolean} whether or not to send output to parent's stdio. (Default=`false`) \",\n                      \"name\": \"silent\",\n                      \"default\": \"false\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"whether or not to send output to parent's stdio.\"\n                    }\n                  ],\n                  \"name\": \"settings\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"settings\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p><code>setupMaster</code> is used to change the default &#39;fork&#39; behavior. Once called,\\nthe settings will be present in <code>cluster.settings</code>.</p>\\n<p>Note that:</p>\\n<ul>\\n<li>any settings changes only affect future calls to <code>.fork()</code> and have no\\neffect on workers that are already running</li>\\n<li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is\\nthe <code>env</code> passed to <code>.fork()</code></li>\\n<li>the defaults above apply to the first call only, the defaults for later\\ncalls is the current value at the time of <code>cluster.setupMaster()</code> is called</li>\\n</ul>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const cluster = require(&#39;cluster&#39;);\\ncluster.setupMaster({\\n  exec: &#39;worker.js&#39;,\\n  args: [&#39;--use&#39;, &#39;https&#39;],\\n  silent: true\\n});\\ncluster.fork(); // https worker\\ncluster.setupMaster({\\n  exec: &#39;worker.js&#39;,\\n  args: [&#39;--use&#39;, &#39;http&#39;]\\n});\\ncluster.fork(); // http worker\\n</code></pre>\\n<p>This can only be called from the master process.</p>\\n\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"`isMaster` {Boolean} \",\n          \"type\": \"Boolean\",\n          \"name\": \"isMaster\",\n          \"desc\": \"<p>True if the process is a master. This is determined\\nby the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is\\nundefined, then <code>isMaster</code> is <code>true</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"`isWorker` {Boolean} \",\n          \"type\": \"Boolean\",\n          \"name\": \"isWorker\",\n          \"desc\": \"<p>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p>\\n\"\n        },\n        {\n          \"textRaw\": \"cluster.schedulingPolicy\",\n          \"name\": \"schedulingPolicy\",\n          \"desc\": \"<p>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or\\n<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a\\nglobal setting and effectively frozen once you spawn the first worker\\nor call <code>cluster.setupMaster()</code>, whatever comes first.</p>\\n<p><code>SCHED_RR</code> is the default on all operating systems except Windows.\\nWindows will change to <code>SCHED_RR</code> once libuv is able to effectively\\ndistribute IOCP handles without incurring a large performance hit.</p>\\n<p><code>cluster.schedulingPolicy</code> can also be set through the\\n<code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid\\nvalues are <code>&quot;rr&quot;</code> and <code>&quot;none&quot;</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"`settings` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"settings\",\n          \"options\": [\n            {\n              \"textRaw\": \"`execArgv` {Array} list of string arguments passed to the Node.js executable. (Default=`process.execArgv`) \",\n              \"name\": \"execArgv\",\n              \"default\": \"process.execArgv\",\n              \"type\": \"Array\",\n              \"desc\": \"list of string arguments passed to the Node.js executable.\"\n            },\n            {\n              \"textRaw\": \"`exec` {String} file path to worker file.  (Default=`process.argv[1]`) \",\n              \"name\": \"exec\",\n              \"default\": \"process.argv[1]\",\n              \"type\": \"String\",\n              \"desc\": \"file path to worker file.\"\n            },\n            {\n              \"textRaw\": \"`args` {Array} string arguments passed to worker. (Default=`process.argv.slice(2)`) \",\n              \"name\": \"args\",\n              \"default\": \"process.argv.slice(2)\",\n              \"type\": \"Array\",\n              \"desc\": \"string arguments passed to worker.\"\n            },\n            {\n              \"textRaw\": \"`silent` {Boolean} whether or not to send output to parent's stdio. (Default=`false`) \",\n              \"name\": \"silent\",\n              \"default\": \"false\",\n              \"type\": \"Boolean\",\n              \"desc\": \"whether or not to send output to parent's stdio.\"\n            },\n            {\n              \"textRaw\": \"`uid` {Number} Sets the user identity of the process. (See setuid(2).) \",\n              \"name\": \"uid\",\n              \"type\": \"Number\",\n              \"desc\": \"Sets the user identity of the process. (See setuid(2).)\"\n            },\n            {\n              \"textRaw\": \"`gid` {Number} Sets the group identity of the process. (See setgid(2).) \",\n              \"name\": \"gid\",\n              \"type\": \"Number\",\n              \"desc\": \"Sets the group identity of the process. (See setgid(2).)\"\n            }\n          ],\n          \"desc\": \"<p>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain\\nthe settings, including the default values.</p>\\n<p>This object is not supposed to be changed or set manually, by you.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"`worker` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"worker\",\n          \"desc\": \"<p>A reference to the current worker object. Not available in the master process.</p>\\n<pre><code class=\\\"lang-js\\\">const cluster = require(&#39;cluster&#39;);\\n\\nif (cluster.isMaster) {\\n  console.log(&#39;I am master&#39;);\\n  cluster.fork();\\n  cluster.fork();\\n} else if (cluster.isWorker) {\\n  console.log(`I am worker #${cluster.worker.id}`);\\n}\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"`workers` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"workers\",\n          \"desc\": \"<p>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it\\neasy to loop through all the workers. It is only available in the master\\nprocess.</p>\\n<p>A worker is removed from cluster.workers after the worker has disconnected <em>and</em>\\nexited. The order between these two events cannot be determined in advance.\\nHowever, it is guaranteed that the removal from the cluster.workers list happens\\nbefore last <code>&#39;disconnect&#39;</code> or <code>&#39;exit&#39;</code> event is emitted.</p>\\n<pre><code class=\\\"lang-js\\\">// Go through all workers\\nfunction eachWorker(callback) {\\n  for (var id in cluster.workers) {\\n    callback(cluster.workers[id]);\\n  }\\n}\\neachWorker((worker) =&gt; {\\n  worker.send(&#39;big announcement to all workers&#39;);\\n});\\n</code></pre>\\n<p>Should you wish to reference a worker over a communication channel, using\\nthe worker&#39;s unique id is the easiest way to find the worker.</p>\\n<pre><code class=\\\"lang-js\\\">socket.on(&#39;data&#39;, (id) =&gt; {\\n  var worker = cluster.workers[id];\\n});\\n</code></pre>\\n<!-- [end-include:cluster.md] -->\\n<!-- [start-include:cli.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Cluster\"\n    },\n    {\n      \"textRaw\": \"Console\",\n      \"name\": \"console\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>console</code> module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.</p>\\n<p>The module exports two specific components:</p>\\n<ul>\\n<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and\\n<code>console.warn()</code> that can be used to write to any Node.js stream.</li>\\n<li>A global <code>console</code> instance configured to write to <code>stdout</code> and <code>stderr</code>.\\nBecause this object is global, it can be used without calling\\n<code>require(&#39;console&#39;)</code>.</li>\\n</ul>\\n<p>Example using the global <code>console</code>:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(&#39;hello world&#39;);\\n  // Prints: hello world, to stdout\\nconsole.log(&#39;hello %s&#39;, &#39;world&#39;);\\n  // Prints: hello world, to stdout\\nconsole.error(new Error(&#39;Whoops, something bad happened&#39;));\\n  // Prints: [Error: Whoops, something bad happened], to stderr\\n\\nconst name = &#39;Will Robinson&#39;;\\nconsole.warn(`Danger ${name}! Danger!`);\\n  // Prints: Danger Will Robinson! Danger!, to stderr\\n</code></pre>\\n<p>Example using the <code>Console</code> class:</p>\\n<pre><code class=\\\"lang-js\\\">const out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log(&#39;hello world&#39;);\\n  // Prints: hello world, to out\\nmyConsole.log(&#39;hello %s&#39;, &#39;world&#39;);\\n  // Prints: hello world, to out\\nmyConsole.error(new Error(&#39;Whoops, something bad happened&#39;));\\n  // Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = &#39;Will Robinson&#39;;\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n  // Prints: Danger Will Robinson! Danger!, to err\\n</code></pre>\\n<p>While the API for the <code>Console</code> class is designed fundamentally around the\\nbrowser <code>console</code> object, the <code>Console</code> in Node.js is <em>not</em> intended to\\nduplicate the browser&#39;s functionality exactly.</p>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Asynchronous vs Synchronous Consoles\",\n          \"name\": \"asynchronous_vs_synchronous_consoles\",\n          \"desc\": \"<p>The console functions are usually asynchronous unless the destination is a file.\\nDisks are fast and operating systems normally employ write-back caching;\\nit should be a very rare occurrence indeed that a write blocks, but it\\nis possible.</p>\\n<p>Additionally, console functions are blocking when outputting to TTYs\\n(terminals) on OS X as a workaround for the OS&#39;s very small, 1kb buffer size.\\nThis is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Asynchronous vs Synchronous Consoles\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Console\",\n          \"type\": \"class\",\n          \"name\": \"Console\",\n          \"desc\": \"<p>The <code>Console</code> class can be used to create a simple logger with configurable\\noutput streams and can be accessed using either <code>require(&#39;console&#39;).Console</code>\\nor <code>console.Console</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const Console = require(&#39;console&#39;).Console;\\nconst Console = console.Console;\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"console.assert(value[, message][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"assert\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.101\"\n                ]\n              },\n              \"desc\": \"<p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not,\\nan <code>AssertionError</code> is thrown. If provided, the error <code>message</code> is formatted\\nusing [<code>util.format()</code>][] and used as the error message.</p>\\n<pre><code class=\\\"lang-js\\\">console.assert(true, &#39;does nothing&#39;);\\n  // OK\\nconsole.assert(false, &#39;Whoops %s&#39;, &#39;didn\\\\&#39;t work&#39;);\\n  // AssertionError: Whoops didn&#39;t work\\n</code></pre>\\n<p><em>Note: the <code>console.assert()</code> method is implemented differently in Node.js\\nthan the <code>console.assert()</code> method [available in browsers][web-api-assert].</em></p>\\n<p>Specifically, in browsers, calling <code>console.assert()</code> with a falsy\\nassertion will cause the <code>message</code> to be printed to the console without\\ninterrupting execution of subsequent code. In Node.js, however, a falsy\\nassertion will cause an <code>AssertionError</code> to be thrown.</p>\\n<p>Functionality approximating that implemented by browsers can be implemented\\nby extending Node.js&#39; <code>console</code> and overriding the <code>console.assert()</code> method.</p>\\n<p>In the following example, a simple module is created that extends and overrides\\nthe default behavior of <code>console</code> in Node.js.</p>\\n<pre><code class=\\\"lang-js\\\">&#39;use strict&#39;;\\n\\n// Creates a simple extension of console with a\\n// new impl for assert without monkey-patching.\\nconst myConsole = Object.setPrototypeOf({\\n  assert(assertion, message, ...args) {\\n    try {\\n      console.assert(assertion, message, ...args);\\n    } catch (err) {\\n      console.error(err.stack);\\n    }\\n  }\\n}, console);\\n\\nmodule.exports = myConsole;\\n</code></pre>\\n<p>This can then be used as a direct replacement for the built in console:</p>\\n<pre><code class=\\\"lang-js\\\">const console = require(&#39;./myConsole&#39;);\\nconsole.assert(false, &#39;this message will print, but no error thrown&#39;);\\nconsole.log(&#39;this will also print&#39;);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"value\"\n                    },\n                    {\n                      \"name\": \"message\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.dir(obj[, options])\",\n              \"type\": \"method\",\n              \"name\": \"dir\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.101\"\n                ]\n              },\n              \"desc\": \"<p>Uses [<code>util.inspect()</code>][] on <code>obj</code> and prints the resulting string to <code>stdout</code>.\\nThis function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>. An\\noptional <code>options</code> object may be passed to alter certain aspects of the\\nformatted string:</p>\\n<ul>\\n<li><p><code>showHidden</code> - if <code>true</code> then the object&#39;s non-enumerable and symbol\\nproperties will be shown too. Defaults to <code>false</code>.</p>\\n</li>\\n<li><p><code>depth</code> - tells [<code>util.inspect()</code>][] how many times to recurse while\\nformatting the object. This is useful for inspecting large complicated objects.\\nDefaults to <code>2</code>. To make it recurse indefinitely, pass <code>null</code>.</p>\\n</li>\\n<li><p><code>colors</code> - if <code>true</code>, then the output will be styled with ANSI color codes.\\nDefaults to <code>false</code>. Colors are customizable; see\\n[customizing <code>util.inspect()</code> colors][].</p>\\n</li>\\n</ul>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"obj\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.error([data][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"error\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.100\"\n                ]\n              },\n              \"desc\": \"<p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the\\nfirst used as the primary message and all additional used as substitution\\nvalues similar to <code>printf(3)</code> (the arguments are all passed to\\n[<code>util.format()</code>][]).</p>\\n<pre><code class=\\\"lang-js\\\">const code = 5;\\nconsole.error(&#39;error #%d&#39;, code);\\n  // Prints: error #5, to stderr\\nconsole.error(&#39;error&#39;, code);\\n  // Prints: error 5, to stderr\\n</code></pre>\\n<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then\\n[<code>util.inspect()</code>][] is called on each argument and the resulting string\\nvalues are concatenated. See [<code>util.format()</code>][] for more information.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.info([data][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"info\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.100\"\n                ]\n              },\n              \"desc\": \"<p>The <code>console.info()</code> function is an alias for [<code>console.log()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.log([data][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"log\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.100\"\n                ]\n              },\n              \"desc\": \"<p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the\\nfirst used as the primary message and all additional used as substitution\\nvalues similar to <code>printf(3)</code> (the arguments are all passed to\\n[<code>util.format()</code>][]).</p>\\n<pre><code class=\\\"lang-js\\\">var count = 5;\\nconsole.log(&#39;count: %d&#39;, count);\\n  // Prints: count: 5, to stdout\\nconsole.log(&#39;count: &#39;, count);\\n  // Prints: count: 5, to stdout\\n</code></pre>\\n<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then\\n[<code>util.inspect()</code>][] is called on each argument and the resulting string\\nvalues are concatenated. See [<code>util.format()</code>][] for more information.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.time(label)\",\n              \"type\": \"method\",\n              \"name\": \"time\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.104\"\n                ]\n              },\n              \"desc\": \"<p>Starts a timer that can be used to compute the duration of an operation. Timers\\nare identified by a unique <code>label</code>. Use the same <code>label</code> when you call\\n[<code>console.timeEnd()</code>][] to stop the timer and output the elapsed time in\\nmilliseconds to <code>stdout</code>. Timer durations are accurate to the sub-millisecond.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"label\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.timeEnd(label)\",\n              \"type\": \"method\",\n              \"name\": \"timeEnd\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.104\"\n                ]\n              },\n              \"desc\": \"<p>Stops a timer that was previously started by calling [<code>console.time()</code>][] and\\nprints the result to <code>stdout</code>:</p>\\n<pre><code class=\\\"lang-js\\\">console.time(&#39;100-elements&#39;);\\nfor (var i = 0; i &lt; 100; i++) {\\n  ;\\n}\\nconsole.timeEnd(&#39;100-elements&#39;);\\n// prints 100-elements: 225.438ms\\n</code></pre>\\n<p><em>Note: As of Node.js v6.0.0, <code>console.timeEnd()</code> deletes the timer to avoid\\nleaking it. On older versions, the timer persisted. This allowed\\n<code>console.timeEnd()</code> to be called multiple times for the same label. This\\nfunctionality was unintended and is no longer supported.</em></p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"label\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.trace(message[, ...])\",\n              \"type\": \"method\",\n              \"name\": \"trace\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.104\"\n                ]\n              },\n              \"desc\": \"<p>Prints to <code>stderr</code> the string <code>&#39;Trace :&#39;</code>, followed by the [<code>util.format()</code>][]\\nformatted message and stack trace to the current position in the code.</p>\\n<pre><code class=\\\"lang-js\\\">console.trace(&#39;Show me&#39;);\\n  // Prints: (stack trace will vary based on where trace is called)\\n  //  Trace: Show me\\n  //    at repl:2:9\\n  //    at REPLServer.defaultEval (repl.js:248:27)\\n  //    at bound (domain.js:287:14)\\n  //    at REPLServer.runBound [as eval] (domain.js:300:12)\\n  //    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)\\n  //    at emitOne (events.js:82:20)\\n  //    at REPLServer.emit (events.js:169:7)\\n  //    at REPLServer.Interface._onLine (readline.js:210:10)\\n  //    at REPLServer.Interface._line (readline.js:549:8)\\n  //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"message\"\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"console.warn([data][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"warn\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.100\"\n                ]\n              },\n              \"desc\": \"<p>The <code>console.warn()</code> function is an alias for [<code>console.error()</code>][].</p>\\n<!-- [end-include:console.md] -->\\n<!-- [start-include:crypto.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"stdout\"\n                },\n                {\n                  \"name\": \"stderr\",\n                  \"optional\": true\n                }\n              ],\n              \"desc\": \"<p>Creates a new <code>Console</code> by passing one or two writable stream instances.\\n<code>stdout</code> is a writable stream to print log or info output. <code>stderr</code>\\nis used for warning or error output. If <code>stderr</code> isn&#39;t passed, warning and error\\noutput will be sent to <code>stdout</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\\n// custom simple logger\\nconst logger = new Console(output, errorOutput);\\n// use it like console\\nvar count = 5;\\nlogger.log(&#39;count: %d&#39;, count);\\n// in stdout.log: count 5\\n</code></pre>\\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\\n[<code>process.stdout</code>][] and [<code>process.stderr</code>][]. It is equivalent to calling:</p>\\n<pre><code class=\\\"lang-js\\\">new Console(process.stdout, process.stderr);\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Console\"\n    },\n    {\n      \"textRaw\": \"Crypto\",\n      \"name\": \"crypto\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>crypto</code> module provides cryptographic functionality that includes a set of\\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign and verify functions.</p>\\n<p>Use <code>require(&#39;crypto&#39;)</code> to access this module.</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\n\\nconst secret = &#39;abcdefg&#39;;\\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\\n                   .update(&#39;I love cupcakes&#39;)\\n                   .digest(&#39;hex&#39;);\\nconsole.log(hash);\\n  // Prints:\\n  //   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Determining if crypto support is unavailable\",\n          \"name\": \"determining_if_crypto_support_is_unavailable\",\n          \"desc\": \"<p>It is possible for Node.js to be built without including support for the\\n<code>crypto</code> module. In such cases, calling <code>require(&#39;crypto&#39;)</code> will result in an\\nerror being thrown.</p>\\n<pre><code class=\\\"lang-js\\\">var crypto;\\ntry {\\n  crypto = require(&#39;crypto&#39;);\\n} catch (err) {\\n  console.log(&#39;crypto support is disabled!&#39;);\\n}\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Determining if crypto support is unavailable\"\n        },\n        {\n          \"textRaw\": \"`crypto` module methods and properties\",\n          \"name\": \"`crypto`_module_methods_and_properties\",\n          \"properties\": [\n            {\n              \"textRaw\": \"crypto.DEFAULT_ENCODING\",\n              \"name\": \"DEFAULT_ENCODING\",\n              \"desc\": \"<p>The default encoding to use for functions that can take either strings\\nor [buffers][<code>Buffer</code>]. The default value is <code>&#39;buffer&#39;</code>, which makes methods\\ndefault to [<code>Buffer</code>][] objects.</p>\\n<p>The <code>crypto.DEFAULT_ENCODING</code> mechanism is provided for backwards compatibility\\nwith legacy programs that expect <code>&#39;binary&#39;</code> to be the default encoding.</p>\\n<p>New applications should expect the default to be <code>&#39;buffer&#39;</code>. This property may\\nbecome deprecated in a future Node.js release.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"crypto.fips\",\n              \"name\": \"fips\",\n              \"desc\": \"<p>Property for checking and controlling whether a FIPS compliant crypto provider is\\ncurrently in use. Setting to true requires a FIPS build of Node.js.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"crypto.createCipher(algorithm, password)\",\n              \"type\": \"method\",\n              \"name\": \"createCipher\",\n              \"desc\": \"<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and\\n<code>password</code>.</p>\\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\\navailable cipher algorithms.</p>\\n<p>The <code>password</code> is used to derive the cipher key and initialization vector (IV).\\nThe value must be either a <code>&#39;binary&#39;</code> encoded string or a [<code>Buffer</code>][].</p>\\n<p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL\\nfunction [<code>EVP_BytesToKey</code>][] with the digest algorithm set to MD5, one\\niteration, and no salt. The lack of salt allows dictionary attacks as the same\\npassword always creates the same key. The low iteration count and\\nnon-cryptographically secure hash algorithm allow passwords to be tested very\\nrapidly.</p>\\n<p>In line with OpenSSL&#39;s recommendation to use pbkdf2 instead of\\n[<code>EVP_BytesToKey</code>][] it is recommended that developers derive a key and IV on\\ntheir own using [<code>crypto.pbkdf2()</code>][] and to use [<code>crypto.createCipheriv()</code>][]\\nto create the <code>Cipher</code> object.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    },\n                    {\n                      \"name\": \"password\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createCipheriv(algorithm, key, iv)\",\n              \"type\": \"method\",\n              \"name\": \"createCipheriv\",\n              \"desc\": \"<p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and\\ninitialization vector (<code>iv</code>).</p>\\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\\navailable cipher algorithms.</p>\\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\\n[initialization vector][]. Both arguments must be <code>&#39;binary&#39;</code> encoded strings or\\n[buffers][<code>Buffer</code>].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    },\n                    {\n                      \"name\": \"key\"\n                    },\n                    {\n                      \"name\": \"iv\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createCredentials(details)\",\n              \"type\": \"method\",\n              \"name\": \"createCredentials\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`tls.createSecureContext()`][] instead.\",\n              \"desc\": \"<p>The <code>crypto.createCredentials()</code> method is a deprecated alias for creating\\nand returning a <code>tls.SecureContext</code> object. The <code>crypto.createCredentials()</code>\\nmethod should not be used.</p>\\n<p>The optional <code>details</code> argument is a hash object with keys:</p>\\n<ul>\\n<li><code>pfx</code> : {String|Buffer} - PFX or PKCS12 encoded private\\nkey, certificate and CA certificates</li>\\n<li><code>key</code> : {String} - PEM encoded private key</li>\\n<li><code>passphrase</code> : {String} - passphrase for the private key or PFX</li>\\n<li><code>cert</code> : {String} - PEM encoded certificate</li>\\n<li><code>ca</code> : {String|Array} - Either a string or array of strings of PEM encoded CA\\ncertificates to trust.</li>\\n<li><code>crl</code> : {String|Array} - Either a string or array of strings of PEM encoded CRLs\\n(Certificate Revocation List)</li>\\n<li><code>ciphers</code>: {String} using the [OpenSSL cipher list format][] describing the\\ncipher algorithms to use or exclude.</li>\\n</ul>\\n<p>If no &#39;ca&#39; details are given, Node.js will use Mozilla&#39;s default\\n[publicly trusted list of CAs][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"details\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createDecipher(algorithm, password)\",\n              \"type\": \"method\",\n              \"name\": \"createDecipher\",\n              \"desc\": \"<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and\\n<code>password</code> (key).</p>\\n<p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL\\nfunction [<code>EVP_BytesToKey</code>][] with the digest algorithm set to MD5, one\\niteration, and no salt. The lack of salt allows dictionary attacks as the same\\npassword always creates the same key. The low iteration count and\\nnon-cryptographically secure hash algorithm allow passwords to be tested very\\nrapidly.</p>\\n<p>In line with OpenSSL&#39;s recommendation to use pbkdf2 instead of\\n[<code>EVP_BytesToKey</code>][] it is recommended that developers derive a key and IV on\\ntheir own using [<code>crypto.pbkdf2()</code>][] and to use [<code>crypto.createDecipheriv()</code>][]\\nto create the <code>Decipher</code> object.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    },\n                    {\n                      \"name\": \"password\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createDecipheriv(algorithm, key, iv)\",\n              \"type\": \"method\",\n              \"name\": \"createDecipheriv\",\n              \"desc\": \"<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code>\\nand initialization vector (<code>iv</code>).</p>\\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\\nrecent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the\\navailable cipher algorithms.</p>\\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\\n[initialization vector][]. Both arguments must be <code>&#39;binary&#39;</code> encoded strings or\\n[buffers][<code>Buffer</code>].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    },\n                    {\n                      \"name\": \"key\"\n                    },\n                    {\n                      \"name\": \"iv\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"createDiffieHellman\",\n              \"desc\": \"<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an\\noptional specific <code>generator</code>.</p>\\n<p>The <code>generator</code> argument can be a number, string, or [<code>Buffer</code>][]. If\\n<code>generator</code> is not specified, the value <code>2</code> is used.</p>\\n<p>The <code>prime_encoding</code> and <code>generator_encoding</code> arguments can be <code>&#39;binary&#39;</code>,\\n<code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>.</p>\\n<p>If <code>prime_encoding</code> is specified, <code>prime</code> is expected to be a string; otherwise\\na [<code>Buffer</code>][] is expected.</p>\\n<p>If <code>generator_encoding</code> is specified, <code>generator</code> is expected to be a string;\\notherwise either a number or [<code>Buffer</code>][] is expected.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"prime\"\n                    },\n                    {\n                      \"name\": \"prime_encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"generator\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"generator_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createDiffieHellman(prime_length[, generator])\",\n              \"type\": \"method\",\n              \"name\": \"createDiffieHellman\",\n              \"desc\": \"<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of\\n<code>prime_length</code> bits using an optional specific numeric <code>generator</code>.\\nIf <code>generator</code> is not specified, the value <code>2</code> is used.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"prime_length\"\n                    },\n                    {\n                      \"name\": \"generator\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createECDH(curve_name)\",\n              \"type\": \"method\",\n              \"name\": \"createECDH\",\n              \"desc\": \"<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a\\npredefined curve specified by the <code>curve_name</code> string. Use\\n[<code>crypto.getCurves()</code>][] to obtain a list of available curve names. On recent\\nOpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name\\nand description of each available elliptic curve.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"curve_name\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createHash(algorithm)\",\n              \"type\": \"method\",\n              \"name\": \"createHash\",\n              \"desc\": \"<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests\\nusing the given <code>algorithm</code>.</p>\\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\\nOn recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will\\ndisplay the available digest algorithms.</p>\\n<p>Example: generating the sha256 sum of a file</p>\\n<pre><code class=\\\"lang-js\\\">const filename = process.argv[2];\\nconst crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst hash = crypto.createHash(&#39;sha256&#39;);\\n\\nconst input = fs.createReadStream(filename);\\ninput.on(&#39;readable&#39;, () =&gt; {\\n  var data = input.read();\\n  if (data)\\n    hash.update(data);\\n  else {\\n    console.log(`${hash.digest(&#39;hex&#39;)} ${filename}`);\\n  }\\n});\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createHmac(algorithm, key)\",\n              \"type\": \"method\",\n              \"name\": \"createHmac\",\n              \"desc\": \"<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.</p>\\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\\nOn recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will\\ndisplay the available digest algorithms.</p>\\n<p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash.</p>\\n<p>Example: generating the sha256 HMAC of a file</p>\\n<pre><code class=\\\"lang-js\\\">const filename = process.argv[2];\\nconst crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\\n\\nconst input = fs.createReadStream(filename);\\ninput.on(&#39;readable&#39;, () =&gt; {\\n  var data = input.read();\\n  if (data)\\n    hmac.update(data);\\n  else {\\n    console.log(`${hmac.digest(&#39;hex&#39;)} ${filename}`);\\n  }\\n});\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    },\n                    {\n                      \"name\": \"key\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createSign(algorithm)\",\n              \"type\": \"method\",\n              \"name\": \"createSign\",\n              \"desc\": \"<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>. On\\nrecent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will\\ndisplay the available signing algorithms. One example is <code>&#39;RSA-SHA256&#39;</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.createVerify(algorithm)\",\n              \"type\": \"method\",\n              \"name\": \"createVerify\",\n              \"desc\": \"<p>Creates and returns a <code>Verify</code> object that uses the given algorithm. On\\nrecent OpenSSL releases, <code>openssl list-public-key-algorithms</code> will\\ndisplay the available signing algorithms. One example is <code>&#39;RSA-SHA256&#39;</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"algorithm\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.getCiphers()\",\n              \"type\": \"method\",\n              \"name\": \"getCiphers\",\n              \"desc\": \"<p>Returns an array with the names of the supported cipher algorithms.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const ciphers = crypto.getCiphers();\\nconsole.log(ciphers); // [&#39;aes-128-cbc&#39;, &#39;aes-128-ccm&#39;, ...]\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.getCurves()\",\n              \"type\": \"method\",\n              \"name\": \"getCurves\",\n              \"desc\": \"<p>Returns an array with the names of the supported elliptic curves.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const curves = crypto.getCurves();\\nconsole.log(curves); // [&#39;secp256k1&#39;, &#39;secp384r1&#39;, ...]\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.getDiffieHellman(group_name)\",\n              \"type\": \"method\",\n              \"name\": \"getDiffieHellman\",\n              \"desc\": \"<p>Creates a predefined <code>DiffieHellman</code> key exchange object. The\\nsupported groups are: <code>&#39;modp1&#39;</code>, <code>&#39;modp2&#39;</code>, <code>&#39;modp5&#39;</code> (defined in\\n[RFC 2412][], but see [Caveats][]) and <code>&#39;modp14&#39;</code>, <code>&#39;modp15&#39;</code>,\\n<code>&#39;modp16&#39;</code>, <code>&#39;modp17&#39;</code>, <code>&#39;modp18&#39;</code> (defined in [RFC 3526][]). The\\nreturned object mimics the interface of objects created by\\n[<code>crypto.createDiffieHellman()</code>][], but will not allow changing\\nthe keys (with [<code>diffieHellman.setPublicKey()</code>][] for example). The\\nadvantage of using this method is that the parties do not have to\\ngenerate nor exchange a group modulus beforehand, saving both processor\\nand communication time.</p>\\n<p>Example (obtaining a shared secret):</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst alice = crypto.getDiffieHellman(&#39;modp14&#39;);\\nconst bob = crypto.getDiffieHellman(&#39;modp14&#39;);\\n\\nalice.generateKeys();\\nbob.generateKeys();\\n\\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\\n\\n/* alice_secret and bob_secret should be the same */\\nconsole.log(alice_secret == bob_secret);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"group_name\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.getHashes()\",\n              \"type\": \"method\",\n              \"name\": \"getHashes\",\n              \"desc\": \"<p>Returns an array with the names of the supported hash algorithms.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const hashes = crypto.getHashes();\\nconsole.log(hashes); // [&#39;sha&#39;, &#39;sha1&#39;, &#39;sha1WithRSAEncryption&#39;, ...]\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)\",\n              \"type\": \"method\",\n              \"name\": \"pbkdf2\",\n              \"desc\": \"<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\\n<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and\\n<code>derivedKey</code>. If an error occurs, <code>err</code> will be set; otherwise <code>err</code> will be\\nnull. The successfully generated <code>derivedKey</code> will be passed as a [<code>Buffer</code>][].</p>\\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\\nhigher the number of iterations, the more secure the derived key will be,\\nbut will take a longer amount of time to complete.</p>\\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\\nsalts are random and their lengths are greater than 16 bytes. See\\n[NIST SP 800-132][] for details.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\ncrypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;, (err, key) =&gt; {\\n  if (err) throw err;\\n  console.log(key.toString(&#39;hex&#39;));  // &#39;c5e478d...1469e50&#39;\\n});\\n</code></pre>\\n<p>An array of supported digest functions can be retrieved using\\n[<code>crypto.getHashes()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"password\"\n                    },\n                    {\n                      \"name\": \"salt\"\n                    },\n                    {\n                      \"name\": \"iterations\"\n                    },\n                    {\n                      \"name\": \"keylen\"\n                    },\n                    {\n                      \"name\": \"digest\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)\",\n              \"type\": \"method\",\n              \"name\": \"pbkdf2Sync\",\n              \"desc\": \"<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\\n<p>If an error occurs an Error will be thrown, otherwise the derived key will be\\nreturned as a [<code>Buffer</code>][].</p>\\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\\nhigher the number of iterations, the more secure the derived key will be,\\nbut will take a longer amount of time to complete.</p>\\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\\nsalts are random and their lengths are greater than 16 bytes. See\\n[NIST SP 800-132][] for details.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;);\\nconsole.log(key.toString(&#39;hex&#39;));  // &#39;c5e478d...1469e50&#39;\\n</code></pre>\\n<p>An array of supported digest functions can be retrieved using\\n[<code>crypto.getHashes()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"password\"\n                    },\n                    {\n                      \"name\": \"salt\"\n                    },\n                    {\n                      \"name\": \"iterations\"\n                    },\n                    {\n                      \"name\": \"keylen\"\n                    },\n                    {\n                      \"name\": \"digest\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.privateDecrypt(private_key, buffer)\",\n              \"type\": \"method\",\n              \"name\": \"privateDecrypt\",\n              \"desc\": \"<p>Decrypts <code>buffer</code> with <code>private_key</code>.</p>\\n<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is\\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.\\nIf <code>private_key</code> is an object, it is interpreted as a hash object with the\\nkeys:</p>\\n<ul>\\n<li><code>key</code> : {String} - PEM encoded private key</li>\\n<li><code>passphrase</code> : {String} - Optional passphrase for the private key</li>\\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\\n<li><code>constants.RSA_NO_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\\n</ul>\\n</li>\\n</ul>\\n<p>All paddings are defined in the <code>constants</code> module.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"private_key\"\n                    },\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.privateEncrypt(private_key, buffer)\",\n              \"type\": \"method\",\n              \"name\": \"privateEncrypt\",\n              \"desc\": \"<p>Encrypts <code>buffer</code> with <code>private_key</code>.</p>\\n<p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is\\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.\\nIf <code>private_key</code> is an object, it is interpreted as a hash object with the\\nkeys:</p>\\n<ul>\\n<li><code>key</code> : {String} - PEM encoded private key</li>\\n<li><code>passphrase</code> : {String} - Optional passphrase for the private key</li>\\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\\n<li><code>constants.RSA_NO_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\\n</ul>\\n</li>\\n</ul>\\n<p>All paddings are defined in the <code>constants</code> module.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"private_key\"\n                    },\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.publicDecrypt(public_key, buffer)\",\n              \"type\": \"method\",\n              \"name\": \"publicDecrypt\",\n              \"desc\": \"<p>Decrypts <code>buffer</code> with <code>public_key</code>.</p>\\n<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is\\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.\\nIf <code>public_key</code> is an object, it is interpreted as a hash object with the\\nkeys:</p>\\n<ul>\\n<li><code>key</code> : {String} - PEM encoded public key</li>\\n<li><code>passphrase</code> : {String} - Optional passphrase for the private key</li>\\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\\n<li><code>constants.RSA_NO_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\\n</ul>\\n</li>\\n</ul>\\n<p>Because RSA public keys can be derived from private keys, a private key may\\nbe passed instead of a public key.</p>\\n<p>All paddings are defined in the <code>constants</code> module.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"public_key\"\n                    },\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.publicEncrypt(public_key, buffer)\",\n              \"type\": \"method\",\n              \"name\": \"publicEncrypt\",\n              \"desc\": \"<p>Encrypts <code>buffer</code> with <code>public_key</code>.</p>\\n<p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is\\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.\\nIf <code>public_key</code> is an object, it is interpreted as a hash object with the\\nkeys:</p>\\n<ul>\\n<li><code>key</code> : {String} - PEM encoded public key</li>\\n<li><code>passphrase</code> : {String} - Optional passphrase for the private key</li>\\n<li><code>padding</code> : An optional padding value, one of the following:<ul>\\n<li><code>constants.RSA_NO_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_PADDING</code></li>\\n<li><code>constants.RSA_PKCS1_OAEP_PADDING</code></li>\\n</ul>\\n</li>\\n</ul>\\n<p>Because RSA public keys can be derived from private keys, a private key may\\nbe passed instead of a public key.</p>\\n<p>All paddings are defined in the <code>constants</code> module.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"public_key\"\n                    },\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.randomBytes(size[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"randomBytes\",\n              \"desc\": \"<p>Generates cryptographically strong pseudo-random data. The <code>size</code> argument\\nis a number indicating the number of bytes to generate.</p>\\n<p>If a <code>callback</code> function is provided, the bytes are generated asynchronously\\nand the <code>callback</code> function is invoked with two arguments: <code>err</code> and <code>buf</code>.\\nIf an error occurs, <code>err</code> will be an Error object; otherwise it is null. The\\n<code>buf</code> argument is a [<code>Buffer</code>][] containing the generated bytes.</p>\\n<pre><code class=\\\"lang-js\\\">// Asynchronous\\nconst crypto = require(&#39;crypto&#39;);\\ncrypto.randomBytes(256, (err, buf) =&gt; {\\n  if (err) throw err;\\n  console.log(`${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\\n});\\n</code></pre>\\n<p>If the <code>callback</code> function is not provided, the random bytes are generated\\nsynchronously and returned as a [<code>Buffer</code>][]. An error will be thrown if\\nthere is a problem generating the bytes.</p>\\n<pre><code class=\\\"lang-js\\\">// Synchronous\\nconst buf = crypto.randomBytes(256);\\nconsole.log(\\n  `${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\\n</code></pre>\\n<p>The <code>crypto.randomBytes()</code> method will block until there is sufficient entropy.\\nThis should normally never take longer than a few milliseconds. The only time\\nwhen generating the random bytes may conceivably block for a longer period of\\ntime is right after boot, when the whole system is still low on entropy.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"size\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"crypto.setEngine(engine[, flags])\",\n              \"type\": \"method\",\n              \"name\": \"setEngine\",\n              \"desc\": \"<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p>\\n<p><code>engine</code> could be either an id or a path to the engine&#39;s shared library.</p>\\n<p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code>\\nis a bit field taking one of or a mix of the following flags (defined in the\\n<code>constants</code> module):</p>\\n<ul>\\n<li><code>ENGINE_METHOD_RSA</code></li>\\n<li><code>ENGINE_METHOD_DSA</code></li>\\n<li><code>ENGINE_METHOD_DH</code></li>\\n<li><code>ENGINE_METHOD_RAND</code></li>\\n<li><code>ENGINE_METHOD_ECDH</code></li>\\n<li><code>ENGINE_METHOD_ECDSA</code></li>\\n<li><code>ENGINE_METHOD_CIPHERS</code></li>\\n<li><code>ENGINE_METHOD_DIGESTS</code></li>\\n<li><code>ENGINE_METHOD_STORE</code></li>\\n<li><code>ENGINE_METHOD_PKEY_METHS</code></li>\\n<li><code>ENGINE_METHOD_PKEY_ASN1_METHS</code></li>\\n<li><code>ENGINE_METHOD_ALL</code></li>\\n<li><code>ENGINE_METHOD_NONE</code></li>\\n</ul>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"engine\"\n                    },\n                    {\n                      \"name\": \"flags\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"`crypto` module methods and properties\"\n        },\n        {\n          \"textRaw\": \"Notes\",\n          \"name\": \"notes\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Legacy Streams API (pre Node.js v0.10)\",\n              \"name\": \"legacy_streams_api_(pre_node.js_v0.10)\",\n              \"desc\": \"<p>The Crypto module was added to Node.js before there was the concept of a\\nunified Stream API, and before there were [<code>Buffer</code>][] objects for handling\\nbinary data. As such, the many of the <code>crypto</code> defined classes have methods not\\ntypically found on other Node.js classes that implement the [streams][stream]\\nAPI (e.g. <code>update()</code>, <code>final()</code>, or <code>digest()</code>). Also, many methods accepted\\nand returned <code>&#39;binary&#39;</code> encoded strings by default rather than Buffers. This\\ndefault was changed after Node.js v0.8 to use [<code>Buffer</code>][] objects by default\\ninstead.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Legacy Streams API (pre Node.js v0.10)\"\n            },\n            {\n              \"textRaw\": \"Recent ECDH Changes\",\n              \"name\": \"recent_ecdh_changes\",\n              \"desc\": \"<p>Usage of <code>ECDH</code> with non-dynamically generated key pairs has been simplified.\\nNow, [<code>ecdh.setPrivateKey()</code>][] can be called with a preselected private key\\nand the associated public point (key) will be computed and stored in the object.\\nThis allows code to only store and provide the private part of the EC key pair.\\n[<code>ecdh.setPrivateKey()</code>][] now also validates that the private key is valid for\\nthe selected curve.</p>\\n<p>The [<code>ecdh.setPublicKey()</code>][] method is now deprecated as its inclusion in the\\nAPI is not useful. Either a previously stored private key should be set, which\\nautomatically generates the associated public key, or [<code>ecdh.generateKeys()</code>][]\\nshould be called. The main drawback of using [<code>ecdh.setPublicKey()</code>][] is that\\nit can be used to put the ECDH key pair into an inconsistent state.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Recent ECDH Changes\"\n            },\n            {\n              \"textRaw\": \"Support for weak or compromised algorithms\",\n              \"name\": \"support_for_weak_or_compromised_algorithms\",\n              \"desc\": \"<p>The <code>crypto</code> module still supports some algorithms which are already\\ncompromised and are not currently recommended for use. The API also allows\\nthe use of ciphers and hashes with a small key size that are considered to be\\ntoo weak for safe use.</p>\\n<p>Users should take full responsibility for selecting the crypto\\nalgorithm and key size according to their security requirements.</p>\\n<p>Based on the recommendations of [NIST SP 800-131A][]:</p>\\n<ul>\\n<li>MD5 and SHA-1 are no longer acceptable where collision resistance is\\nrequired such as digital signatures.</li>\\n<li>The key used with RSA, DSA and DH algorithms is recommended to have\\nat least 2048 bits and that of the curve of ECDSA and ECDH at least\\n224 bits, to be safe to use for several years.</li>\\n<li>The DH groups of <code>modp1</code>, <code>modp2</code> and <code>modp5</code> have a key size\\nsmaller than 2048 bits and are not recommended.</li>\\n</ul>\\n<p>See the reference for other recommendations and details.</p>\\n<!-- [end-include:crypto.md] -->\\n<!-- [start-include:debugger.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Support for weak or compromised algorithms\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Notes\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Certificate\",\n          \"type\": \"class\",\n          \"name\": \"Certificate\",\n          \"desc\": \"<p>SPKAC is a Certificate Signing Request mechanism originally implemented by\\nNetscape and now specified formally as part of [HTML5&#39;s <code>keygen</code> element][].</p>\\n<p>The <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC\\ndata. The most common usage is handling output generated by the HTML5\\n<code>&lt;keygen&gt;</code> element. Node.js uses [OpenSSL&#39;s SPKAC implementation][] internally.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"new crypto.Certificate()\",\n              \"type\": \"method\",\n              \"name\": \"Certificate\",\n              \"desc\": \"<p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\\nor by calling <code>crypto.Certificate()</code> as a function:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\n\\nconst cert1 = new crypto.Certificate();\\nconst cert2 = crypto.Certificate();\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"certificate.exportChallenge(spkac)\",\n              \"type\": \"method\",\n              \"name\": \"exportChallenge\",\n              \"desc\": \"<p>The <code>spkac</code> data structure includes a public key and a challenge. The\\n<code>certificate.exportChallenge()</code> returns the challenge component in the\\nform of a Node.js [<code>Buffer</code>][]. The <code>spkac</code> argument can be either a string\\nor a [<code>Buffer</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const cert = require(&#39;crypto&#39;).Certificate();\\nconst spkac = getSpkacSomehow();\\nconst challenge = cert.exportChallenge(spkac);\\nconsole.log(challenge.toString(&#39;utf8&#39;));\\n  // Prints the challenge as a UTF8 string\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"spkac\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"certificate.exportPublicKey(spkac)\",\n              \"type\": \"method\",\n              \"name\": \"exportPublicKey\",\n              \"desc\": \"<p>The <code>spkac</code> data structure includes a public key and a challenge. The\\n<code>certificate.exportPublicKey()</code> returns the public key component in the\\nform of a Node.js [<code>Buffer</code>][]. The <code>spkac</code> argument can be either a string\\nor a [<code>Buffer</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const cert = require(&#39;crypto&#39;).Certificate();\\nconst spkac = getSpkacSomehow();\\nconst publicKey = cert.exportPublicKey(spkac);\\nconsole.log(publicKey);\\n  // Prints the public key as &lt;Buffer ...&gt;\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"spkac\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"certificate.verifySpkac(spkac)\",\n              \"type\": \"method\",\n              \"name\": \"verifySpkac\",\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise.\\nThe <code>spkac</code> argument must be a Node.js [<code>Buffer</code>][].</p>\\n<pre><code class=\\\"lang-js\\\">const cert = require(&#39;crypto&#39;).Certificate();\\nconst spkac = getSpkacSomehow();\\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\\n  // Prints true or false\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"spkac\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Cipher\",\n          \"type\": \"class\",\n          \"name\": \"Cipher\",\n          \"desc\": \"<p>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be\\nused in one of two ways:</p>\\n<ul>\\n<li>As a [stream][] that is both readable and writable, where plain unencrypted\\ndata is written to produce encrypted data on the readable side, or</li>\\n<li>Using the [<code>cipher.update()</code>][] and [<code>cipher.final()</code>][] methods to produce\\nthe encrypted data.</li>\\n</ul>\\n<p>The [<code>crypto.createCipher()</code>][] or [<code>crypto.createCipheriv()</code>][] methods are\\nused to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created\\ndirectly using the <code>new</code> keyword.</p>\\n<p>Example: Using <code>Cipher</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nvar encrypted = &#39;&#39;;\\ncipher.on(&#39;readable&#39;, () =&gt; {\\n  var data = cipher.read();\\n  if (data)\\n    encrypted += data.toString(&#39;hex&#39;);\\n});\\ncipher.on(&#39;end&#39;, () =&gt; {\\n  console.log(encrypted);\\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\\n});\\n\\ncipher.write(&#39;some clear text data&#39;);\\ncipher.end();\\n</code></pre>\\n<p>Example: Using <code>Cipher</code> and piped streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nconst input = fs.createReadStream(&#39;test.js&#39;);\\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\\n\\ninput.pipe(cipher).pipe(output);\\n</code></pre>\\n<p>Example: Using the [<code>cipher.update()</code>][] and [<code>cipher.final()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nvar encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\\nencrypted += cipher.final(&#39;hex&#39;);\\nconsole.log(encrypted);\\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"cipher.final([output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"final\",\n              \"desc\": \"<p>Returns any remaining enciphered contents. If <code>output_encoding</code>\\nparameter is one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\\nIf an <code>output_encoding</code> is not provided, a [<code>Buffer</code>][] is returned.</p>\\n<p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no\\nlonger be used to encrypt data. Attempts to call <code>cipher.final()</code> more than\\nonce will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"cipher.setAAD(buffer)\",\n              \"type\": \"method\",\n              \"name\": \"setAAD\",\n              \"desc\": \"<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\\n<em>additional authenticated data</em> (AAD) input parameter.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"cipher.getAuthTag()\",\n              \"type\": \"method\",\n              \"name\": \"getAuthTag\",\n              \"desc\": \"<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\\nsupported), the <code>cipher.getAuthTag()</code> method returns a [<code>Buffer</code>][] containing\\nthe <em>authentication tag</em> that has been computed from the given data.</p>\\n<p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has\\nbeen completed using the [<code>cipher.final()</code>][] method.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"cipher.setAutoPadding(auto_padding=true)\",\n              \"type\": \"method\",\n              \"name\": \"setAutoPadding\",\n              \"desc\": \"<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically\\nadd padding to the input data to the appropriate block size. To disable the\\ndefault padding call <code>cipher.setAutoPadding(false)</code>.</p>\\n<p>When <code>auto_padding</code> is <code>false</code>, the length of the entire input data must be a\\nmultiple of the cipher&#39;s block size or [<code>cipher.final()</code>][] will throw an Error.\\nDisabling automatic padding is useful for non-standard padding, for instance\\nusing <code>0x0</code> instead of PKCS padding.</p>\\n<p>The <code>cipher.setAutoPadding()</code> method must be called before [<code>cipher.final()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"auto_padding\",\n                      \"default\": \"true\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"cipher.update(data[, input_encoding][, output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\\nit&#39;s value must be one of <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code>, or <code>&#39;binary&#39;</code> and the <code>data</code>\\nargument is a string using the specified encoding. If the <code>input_encoding</code>\\nargument is not given, <code>data</code> must be a [<code>Buffer</code>][]. If <code>data</code> is a\\n[<code>Buffer</code>][] then <code>input_encoding</code> is ignored.</p>\\n<p>The <code>output_encoding</code> specifies the output format of the enciphered\\ndata, and can be <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>. If the <code>output_encoding</code>\\nis specified, a string using the specified encoding is returned. If no\\n<code>output_encoding</code> is provided, a [<code>Buffer</code>][] is returned.</p>\\n<p>The <code>cipher.update()</code> method can be called multiple times with new data until\\n[<code>cipher.final()</code>][] is called. Calling <code>cipher.update()</code> after\\n[<code>cipher.final()</code>][] will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Decipher\",\n          \"type\": \"class\",\n          \"name\": \"Decipher\",\n          \"desc\": \"<p>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be\\nused in one of two ways:</p>\\n<ul>\\n<li>As a [stream][] that is both readable and writable, where plain encrypted\\ndata is written to produce unencrypted data on the readable side, or</li>\\n<li>Using the [<code>decipher.update()</code>][] and [<code>decipher.final()</code>][] methods to\\nproduce the unencrypted data.</li>\\n</ul>\\n<p>The [<code>crypto.createDecipher()</code>][] or [<code>crypto.createDecipheriv()</code>][] methods are\\nused to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created\\ndirectly using the <code>new</code> keyword.</p>\\n<p>Example: Using <code>Decipher</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nvar decrypted = &#39;&#39;;\\ndecipher.on(&#39;readable&#39;, () =&gt; {\\n  var data = decipher.read();\\n  if (data)\\n  decrypted += data.toString(&#39;utf8&#39;);\\n});\\ndecipher.on(&#39;end&#39;, () =&gt; {\\n  console.log(decrypted);\\n  // Prints: some clear text data\\n});\\n\\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\\ndecipher.write(encrypted, &#39;hex&#39;);\\ndecipher.end();\\n</code></pre>\\n<p>Example: Using <code>Decipher</code> and piped streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nconst input = fs.createReadStream(&#39;test.enc&#39;);\\nconst output = fs.createWriteStream(&#39;test.js&#39;);\\n\\ninput.pipe(decipher).pipe(output);\\n</code></pre>\\n<p>Example: Using the [<code>decipher.update()</code>][] and [<code>decipher.final()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\\n\\nvar encrypted = &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\\nvar decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\\ndecrypted += decipher.final(&#39;utf8&#39;);\\nconsole.log(decrypted);\\n  // Prints: some clear text data\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"decipher.final([output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"final\",\n              \"desc\": \"<p>Returns any remaining deciphered contents. If <code>output_encoding</code>\\nparameter is one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>, a string is returned.\\nIf an <code>output_encoding</code> is not provided, a [<code>Buffer</code>][] is returned.</p>\\n<p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can\\nno longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more\\nthan once will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"decipher.setAAD(buffer)\",\n              \"type\": \"method\",\n              \"name\": \"setAAD\",\n              \"desc\": \"<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\\n<em>additional authenticated data</em> (AAD) input parameter.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"decipher.setAuthTag(buffer)\",\n              \"type\": \"method\",\n              \"name\": \"setAuthTag\",\n              \"desc\": \"<p>When using an authenticated encryption mode (only <code>GCM</code> is currently\\nsupported), the <code>decipher.setAuthTag()</code> method is used to pass in the\\nreceived <em>authentication tag</em>. If no tag is provided, or if the cipher text\\nhas been tampered with, [<code>decipher.final()</code>][] with throw, indicating that the\\ncipher text should be discarded due to failed authentication.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"decipher.setAutoPadding(auto_padding=true)\",\n              \"type\": \"method\",\n              \"name\": \"setAutoPadding\",\n              \"desc\": \"<p>When data has been encrypted without standard block padding, calling\\n<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent\\n[<code>decipher.final()</code>][] from checking for and removing padding.</p>\\n<p>Turning auto padding off will only work if the input data&#39;s length is a\\nmultiple of the ciphers block size.</p>\\n<p>The <code>decipher.setAutoPadding()</code> method must be called before\\n[<code>decipher.update()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"auto_padding\",\n                      \"default\": \"true\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"decipher.update(data[, input_encoding][, output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given,\\nit&#39;s value must be one of <code>&#39;binary&#39;</code>, <code>&#39;base64&#39;</code>, or <code>&#39;hex&#39;</code> and the <code>data</code>\\nargument is a string using the specified encoding. If the <code>input_encoding</code>\\nargument is not given, <code>data</code> must be a [<code>Buffer</code>][]. If <code>data</code> is a\\n[<code>Buffer</code>][] then <code>input_encoding</code> is ignored.</p>\\n<p>The <code>output_encoding</code> specifies the output format of the enciphered\\ndata, and can be <code>&#39;binary&#39;</code>, <code>&#39;ascii&#39;</code> or <code>&#39;utf8&#39;</code>. If the <code>output_encoding</code>\\nis specified, a string using the specified encoding is returned. If no\\n<code>output_encoding</code> is provided, a [<code>Buffer</code>][] is returned.</p>\\n<p>The <code>decipher.update()</code> method can be called multiple times with new data until\\n[<code>decipher.final()</code>][] is called. Calling <code>decipher.update()</code> after\\n[<code>decipher.final()</code>][] will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: DiffieHellman\",\n          \"type\": \"class\",\n          \"name\": \"DiffieHellman\",\n          \"desc\": \"<p>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key\\nexchanges.</p>\\n<p>Instances of the <code>DiffieHellman</code> class can be created using the\\n[<code>crypto.createDiffieHellman()</code>][] function.</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst assert = require(&#39;assert&#39;);\\n\\n// Generate Alice&#39;s keys...\\nconst alice = crypto.createDiffieHellman(2048);\\nconst alice_key = alice.generateKeys();\\n\\n// Generate Bob&#39;s keys...\\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\\nconst bob_key = bob.generateKeys();\\n\\n// Exchange and generate the secret...\\nconst alice_secret = alice.computeSecret(bob_key);\\nconst bob_secret = bob.computeSecret(alice_key);\\n\\n// OK\\nassert.equal(alice_secret.toString(&#39;hex&#39;), bob_secret.toString(&#39;hex&#39;));\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"computeSecret\",\n              \"desc\": \"<p>Computes the shared secret using <code>other_public_key</code> as the other\\nparty&#39;s public key and returns the computed shared secret. The supplied\\nkey is interpreted using the specified <code>input_encoding</code>, and secret is\\nencoded using specified <code>output_encoding</code>. Encodings can be\\n<code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\\nprovided, <code>other_public_key</code> is expected to be a [<code>Buffer</code>][].</p>\\n<p>If <code>output_encoding</code> is given a string is returned; otherwise, a\\n[<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"other_public_key\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.generateKeys([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"generateKeys\",\n              \"desc\": \"<p>Generates private and public Diffie-Hellman key values, and returns\\nthe public key in the specified <code>encoding</code>. This key should be\\ntransferred to the other party. Encoding can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>,\\nor <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is returned; otherwise a\\n[<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.getGenerator([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"getGenerator\",\n              \"desc\": \"<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can\\nbe <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If  <code>encoding</code> is provided a string is\\nreturned; otherwise a [<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.getPrime([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"getPrime\",\n              \"desc\": \"<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can\\nbe <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is\\nreturned; otherwise a [<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.getPrivateKey([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"getPrivateKey\",\n              \"desc\": \"<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>,\\nwhich can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\\nstring is returned; otherwise a [<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.getPublicKey([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"getPublicKey\",\n              \"desc\": \"<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which\\ncan be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\\nstring is returned; otherwise a [<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.setPrivateKey(private_key[, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"setPrivateKey\",\n              \"desc\": \"<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided\\nand is either <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>, <code>private_key</code> is expected\\nto be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected\\nto be a [<code>Buffer</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"private_key\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"diffieHellman.setPublicKey(public_key[, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"setPublicKey\",\n              \"desc\": \"<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided\\nand is either <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>, <code>public_key</code> is expected\\nto be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected\\nto be a [<code>Buffer</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"public_key\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"diffieHellman.verifyError\",\n              \"name\": \"verifyError\",\n              \"desc\": \"<p>A bit field containing any warnings and/or errors resulting from a check\\nperformed during initialization of the <code>DiffieHellman</code> object.</p>\\n<p>The following values are valid for this property (as defined in <code>constants</code>\\nmodule):</p>\\n<ul>\\n<li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li>\\n<li><code>DH_CHECK_P_NOT_PRIME</code></li>\\n<li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li>\\n<li><code>DH_NOT_SUITABLE_GENERATOR</code></li>\\n</ul>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: ECDH\",\n          \"type\": \"class\",\n          \"name\": \"ECDH\",\n          \"desc\": \"<p>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\\nkey exchanges.</p>\\n<p>Instances of the <code>ECDH</code> class can be created using the\\n[<code>crypto.createECDH()</code>][] function.</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst assert = require(&#39;assert&#39;);\\n\\n// Generate Alice&#39;s keys...\\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\\nconst alice_key = alice.generateKeys();\\n\\n// Generate Bob&#39;s keys...\\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\\nconst bob_key = bob.generateKeys();\\n\\n// Exchange and generate the secret...\\nconst alice_secret = alice.computeSecret(bob_key);\\nconst bob_secret = bob.computeSecret(alice_key);\\n\\nassert(alice_secret, bob_secret);\\n  // OK\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"computeSecret\",\n              \"desc\": \"<p>Computes the shared secret using <code>other_public_key</code> as the other\\nparty&#39;s public key and returns the computed shared secret. The supplied\\nkey is interpreted using specified <code>input_encoding</code>, and the returned secret\\nis encoded using the specified <code>output_encoding</code>. Encodings can be\\n<code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>input_encoding</code> is not\\nprovided, <code>other_public_key</code> is expected to be a [<code>Buffer</code>][].</p>\\n<p>If <code>output_encoding</code> is given a string will be returned; otherwise a\\n[<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"other_public_key\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"output_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"ecdh.generateKeys([encoding[, format]])\",\n              \"type\": \"method\",\n              \"name\": \"generateKeys\",\n              \"desc\": \"<p>Generates private and public EC Diffie-Hellman key values, and returns\\nthe public key in the specified <code>format</code> and <code>encoding</code>. This key should be\\ntransferred to the other party.</p>\\n<p>The <code>format</code> arguments specifies point encoding and can be <code>&#39;compressed&#39;</code>,\\n<code>&#39;uncompressed&#39;</code>, or <code>&#39;hybrid&#39;</code>. If <code>format</code> is not specified, the point will\\nbe returned in <code>&#39;uncompressed&#39;</code> format.</p>\\n<p>The <code>encoding</code> argument can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\\n<code>encoding</code> is provided a string is returned; otherwise a [<code>Buffer</code>][]\\nis returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"format\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"ecdh.getPrivateKey([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"getPrivateKey\",\n              \"desc\": \"<p>Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>,\\nwhich can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided\\na string is returned; otherwise a [<code>Buffer</code>][] is returned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"ecdh.getPublicKey([encoding[, format]])\",\n              \"type\": \"method\",\n              \"name\": \"getPublicKey\",\n              \"desc\": \"<p>Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and\\n<code>format</code>.</p>\\n<p>The <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code>,\\n<code>&#39;uncompressed&#39;</code>, or <code>&#39;hybrid&#39;</code>. If <code>format</code> is not specified the point will be\\nreturned in <code>&#39;uncompressed&#39;</code> format.</p>\\n<p>The <code>encoding</code> argument can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\\n<code>encoding</code> is specified, a string is returned; otherwise a [<code>Buffer</code>][] is\\nreturned.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"format\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"ecdh.setPrivateKey(private_key[, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"setPrivateKey\",\n              \"desc\": \"<p>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>&#39;binary&#39;</code>,\\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected\\nto be a string; otherwise <code>private_key</code> is expected to be a [<code>Buffer</code>][]. If\\n<code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was\\ncreated, an error is thrown. Upon setting the private key, the associated\\npublic point (key) is also generated and set in the ECDH object.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"private_key\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"ecdh.setPublicKey(public_key[, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"setPublicKey\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"desc\": \"<p>Sets the EC Diffie-Hellman public key. Key encoding can be <code>&#39;binary&#39;</code>,\\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to\\nbe a string; otherwise a [<code>Buffer</code>][] is expected.</p>\\n<p>Note that there is not normally a reason to call this method because <code>ECDH</code>\\nonly requires a private key and the other party&#39;s public key to compute the\\nshared secret. Typically either [<code>ecdh.generateKeys()</code>][] or\\n[<code>ecdh.setPrivateKey()</code>][] will be called. The [<code>ecdh.setPrivateKey()</code>][] method\\nattempts to generate the public point/key associated with the private key being\\nset.</p>\\n<p>Example (obtaining a shared secret):</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst alice = crypto.createECDH(&#39;secp256k1&#39;);\\nconst bob = crypto.createECDH(&#39;secp256k1&#39;);\\n\\n// Note: This is a shortcut way to specify one of Alice&#39;s previous private\\n// keys. It would be unwise to use such a predictable private key in a real\\n// application.\\nalice.setPrivateKey(\\n  crypto.createHash(&#39;sha256&#39;).update(&#39;alice&#39;, &#39;utf8&#39;).digest()\\n);\\n\\n// Bob uses a newly generated cryptographically strong\\n// pseudorandom key pair bob.generateKeys();\\n\\nconst alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\\nconst bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\\n\\n// alice_secret and bob_secret should be the same shared secret value\\nconsole.log(alice_secret === bob_secret);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"public_key\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Hash\",\n          \"type\": \"class\",\n          \"name\": \"Hash\",\n          \"desc\": \"<p>The <code>Hash</code> class is a utility for creating hash digests of data. It can be\\nused in one of two ways:</p>\\n<ul>\\n<li>As a [stream][] that is both readable and writable, where data is written\\nto produce a computed hash digest on the readable side, or</li>\\n<li>Using the [<code>hash.update()</code>][] and [<code>hash.digest()</code>][] methods to produce the\\ncomputed hash.</li>\\n</ul>\\n<p>The [<code>crypto.createHash()</code>][] method is used to create <code>Hash</code> instances. <code>Hash</code>\\nobjects are not to be created directly using the <code>new</code> keyword.</p>\\n<p>Example: Using <code>Hash</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst hash = crypto.createHash(&#39;sha256&#39;);\\n\\nhash.on(&#39;readable&#39;, () =&gt; {\\n  var data = hash.read();\\n  if (data)\\n    console.log(data.toString(&#39;hex&#39;));\\n    // Prints:\\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n});\\n\\nhash.write(&#39;some data to hash&#39;);\\nhash.end();\\n</code></pre>\\n<p>Example: Using <code>Hash</code> and piped streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst hash = crypto.createHash(&#39;sha256&#39;);\\n\\nconst input = fs.createReadStream(&#39;test.js&#39;);\\ninput.pipe(hash).pipe(process.stdout);\\n</code></pre>\\n<p>Example: Using the [<code>hash.update()</code>][] and [<code>hash.digest()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst hash = crypto.createHash(&#39;sha256&#39;);\\n\\nhash.update(&#39;some data to hash&#39;);\\nconsole.log(hash.digest(&#39;hex&#39;));\\n  // Prints:\\n  //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"hash.digest([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"digest\",\n              \"desc\": \"<p>Calculates the digest of all of the data passed to be hashed (using the\\n[<code>hash.update()</code>][] method). The <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;binary&#39;</code> or\\n<code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string will be returned; otherwise\\na [<code>Buffer</code>][] is returned.</p>\\n<p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been\\ncalled. Multiple calls will cause an error to be thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"hash.update(data[, input_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the hash content with the given <code>data</code>, the encoding of which\\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a [<code>Buffer</code>][] then\\n<code>input_encoding</code> is ignored.</p>\\n<p>This can be called many times with new data as it is streamed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Hmac\",\n          \"type\": \"class\",\n          \"name\": \"Hmac\",\n          \"desc\": \"<p>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can\\nbe used in one of two ways:</p>\\n<ul>\\n<li>As a [stream][] that is both readable and writable, where data is written\\nto produce a computed HMAC digest on the readable side, or</li>\\n<li>Using the [<code>hmac.update()</code>][] and [<code>hmac.digest()</code>][] methods to produce the\\ncomputed HMAC digest.</li>\\n</ul>\\n<p>The [<code>crypto.createHmac()</code>][] method is used to create <code>Hmac</code> instances. <code>Hmac</code>\\nobjects are not to be created directly using the <code>new</code> keyword.</p>\\n<p>Example: Using <code>Hmac</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\\n\\nhmac.on(&#39;readable&#39;, () =&gt; {\\n  var data = hmac.read();\\n  if (data)\\n    console.log(data.toString(&#39;hex&#39;));\\n    // Prints:\\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n});\\n\\nhmac.write(&#39;some data to hash&#39;);\\nhmac.end();\\n</code></pre>\\n<p>Example: Using <code>Hmac</code> and piped streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\\n\\nconst input = fs.createReadStream(&#39;test.js&#39;);\\ninput.pipe(hmac).pipe(process.stdout);\\n</code></pre>\\n<p>Example: Using the [<code>hmac.update()</code>][] and [<code>hmac.digest()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\\n\\nhmac.update(&#39;some data to hash&#39;);\\nconsole.log(hmac.digest(&#39;hex&#39;));\\n  // Prints:\\n  //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"hmac.digest([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"digest\",\n              \"desc\": \"<p>Calculates the HMAC digest of all of the data passed using [<code>hmac.update()</code>][].\\nThe <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;binary&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is\\nprovided a string is returned; otherwise a [<code>Buffer</code>][] is returned;</p>\\n<p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been\\ncalled. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"hmac.update(data[, input_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which\\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a [<code>Buffer</code>][] then\\n<code>input_encoding</code> is ignored.</p>\\n<p>This can be called many times with new data as it is streamed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Sign\",\n          \"type\": \"class\",\n          \"name\": \"Sign\",\n          \"desc\": \"<p>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one\\nof two ways:</p>\\n<ul>\\n<li>As a writable [stream][], where data to be signed is written and the\\n[<code>sign.sign()</code>][] method is used to generate and return the signature, or</li>\\n<li>Using the [<code>sign.update()</code>][] and [<code>sign.sign()</code>][] methods to produce the\\nsignature.</li>\\n</ul>\\n<p>The [<code>crypto.createSign()</code>][] method is used to create <code>Sign</code> instances. <code>Sign</code>\\nobjects are not to be created directly using the <code>new</code> keyword.</p>\\n<p>Example: Using <code>Sign</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\\n\\nsign.write(&#39;some data to sign&#39;);\\nsign.end();\\n\\nconst private_key = getPrivateKeySomehow();\\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\\n  // Prints the calculated signature\\n</code></pre>\\n<p>Example: Using the [<code>sign.update()</code>][] and [<code>sign.sign()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\\n\\nsign.update(&#39;some data to sign&#39;);\\n\\nconst private_key = getPrivateKeySomehow();\\nconsole.log(sign.sign(private_key, &#39;hex&#39;));\\n  // Prints the calculated signature\\n</code></pre>\\n<p>A <code>Sign</code> instance can also be created by just passing in the digest\\nalgorithm name, in which case OpenSSL will infer the full signature algorithm\\nfrom the type of the PEM-formatted private key, including algorithms that\\ndo not have directly exposed name constants, e.g. &#39;ecdsa-with-SHA256&#39;.</p>\\n<p>Example: signing using ECDSA with SHA256</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst sign = crypto.createSign(&#39;sha256&#39;);\\n\\nsign.update(&#39;some data to sign&#39;);\\n\\nconst private_key = &#39;-----BEGIN EC PRIVATE KEY-----\\\\n&#39; +\\n        &#39;MHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\\\\n&#39; +\\n        &#39;AwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\\\\n&#39; +\\n        &#39;pQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\\\\n&#39; +\\n        &#39;-----END EC PRIVATE KEY-----\\\\n&#39;;\\n\\nconsole.log(sign.sign(private_key).toString(&#39;hex&#39;));\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"sign.sign(private_key[, output_format])\",\n              \"type\": \"method\",\n              \"name\": \"sign\",\n              \"desc\": \"<p>Calculates the signature on all the data passed through using either\\n[<code>sign.update()</code>][] or [<code>sign.write()</code>][stream-writable-write].</p>\\n<p>The <code>private_key</code> argument can be an object or a string. If <code>private_key</code> is a\\nstring, it is treated as a raw key with no passphrase. If <code>private_key</code> is an\\nobject, it is interpreted as a hash containing two properties:</p>\\n<ul>\\n<li><code>key</code> : {String} - PEM encoded private key</li>\\n<li><code>passphrase</code> : {String} - passphrase for the private key</li>\\n</ul>\\n<p>The <code>output_format</code> can specify one of <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If\\n<code>output_format</code> is provided a string is returned; otherwise a [<code>Buffer</code>][] is\\nreturned.</p>\\n<p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been\\ncalled. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"private_key\"\n                    },\n                    {\n                      \"name\": \"output_format\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"sign.update(data[, input_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which\\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a [<code>Buffer</code>][] then\\n<code>input_encoding</code> is ignored.</p>\\n<p>This can be called many times with new data as it is streamed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: Verify\",\n          \"type\": \"class\",\n          \"name\": \"Verify\",\n          \"desc\": \"<p>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one\\nof two ways:</p>\\n<ul>\\n<li>As a writable [stream][] where written data is used to validate against the\\nsupplied signature, or</li>\\n<li><p>Using the [<code>verify.update()</code>][] and [<code>verify.verify()</code>][] methods to verify\\nthe signature.</p>\\n<p>The [<code>crypto.createSign()</code>][] method is used to create <code>Sign</code> instances.\\n<code>Sign</code> objects are not to be created directly using the <code>new</code> keyword.</p>\\n</li>\\n</ul>\\n<p>Example: Using <code>Verify</code> objects as streams:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\\n\\nverify.write(&#39;some data to sign&#39;);\\nverify.end();\\n\\nconst public_key = getPublicKeySomehow();\\nconst signature = getSignatureToVerify();\\nconsole.log(sign.verify(public_key, signature));\\n  // Prints true or false\\n</code></pre>\\n<p>Example: Using the [<code>verify.update()</code>][] and [<code>verify.verify()</code>][] methods:</p>\\n<pre><code class=\\\"lang-js\\\">const crypto = require(&#39;crypto&#39;);\\nconst verify = crypto.createVerify(&#39;RSA-SHA256&#39;);\\n\\nverify.update(&#39;some data to sign&#39;);\\n\\nconst public_key = getPublicKeySomehow();\\nconst signature = getSignatureToVerify();\\nconsole.log(verify.verify(public_key, signature));\\n  // Prints true or false\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"verifier.update(data[, input_encoding])\",\n              \"type\": \"method\",\n              \"name\": \"update\",\n              \"desc\": \"<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which\\nis given in <code>input_encoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\\n<code>&#39;binary&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a [<code>Buffer</code>][] then\\n<code>input_encoding</code> is ignored.</p>\\n<p>This can be called many times with new data as it is streamed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"input_encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"verifier.verify(object, signature[, signature_format])\",\n              \"type\": \"method\",\n              \"name\": \"verify\",\n              \"desc\": \"<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>.\\nThe <code>object</code> argument is a string containing a PEM encoded object, which can be\\none an RSA public key, a DSA public key, or an X.509 certificate.\\nThe <code>signature</code> argument is the previously calculated signature for the data, in\\nthe <code>signature_format</code> which can be <code>&#39;binary&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>.\\nIf a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a\\nstring; otherwise <code>signature</code> is expected to be a [<code>Buffer</code>][].</p>\\n<p>Returns <code>true</code> or <code>false</code> depending on the validity of the signature for\\nthe data and public key.</p>\\n<p>The <code>verifier</code> object can not be used again after <code>verify.verify()</code> has been\\ncalled. Multiple calls to <code>verify.verify()</code> will result in an error being\\nthrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    },\n                    {\n                      \"name\": \"signature\"\n                    },\n                    {\n                      \"name\": \"signature_format\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Crypto\"\n    },\n    {\n      \"textRaw\": \"UDP / Datagram Sockets\",\n      \"name\": \"dgram\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p>\\n<pre><code class=\\\"lang-js\\\">const dgram = require(&#39;dgram&#39;);\\nconst server = dgram.createSocket(&#39;udp4&#39;);\\n\\nserver.on(&#39;error&#39;, (err) =&gt; {\\n  console.log(`server error:\\\\n${err.stack}`);\\n  server.close();\\n});\\n\\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n});\\n\\nserver.on(&#39;listening&#39;, () =&gt; {\\n  var address = server.address();\\n  console.log(`server listening ${address.address}:${address.port}`);\\n});\\n\\nserver.bind(41234);\\n// server listening 0.0.0.0:41234\\n</code></pre>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: dgram.Socket\",\n          \"type\": \"class\",\n          \"name\": \"dgram.Socket\",\n          \"desc\": \"<p>The <code>dgram.Socket</code> object is an [<code>EventEmitter</code>][] that encapsulates the\\ndatagram functionality.</p>\\n<p>New instances of <code>dgram.Socket</code> are created using [<code>dgram.createSocket()</code>][].\\nThe <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"desc\": \"<p>The <code>&#39;close&#39;</code> event is emitted after a socket is closed with [<code>close()</code>][].\\nOnce triggered, no new <code>&#39;message&#39;</code> events will be emitted on this socket.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;error&#39;</code> event is emitted whenever any error occurs. The event handler\\nfunction is passed a single Error object.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'listening'\",\n              \"type\": \"event\",\n              \"name\": \"listening\",\n              \"desc\": \"<p>The <code>&#39;listening&#39;</code> event is emitted whenever a socket begins listening for\\ndatagram messages. This occurs as soon as UDP sockets are created.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'message'\",\n              \"type\": \"event\",\n              \"name\": \"message\",\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;message&#39;</code> event is emitted when a new datagram is available on a socket.\\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>. The\\n<code>msg</code> argument is a [<code>Buffer</code>][] and <code>rinfo</code> is an object with the sender&#39;s\\naddress information provided by the <code>address</code>, <code>family</code> and <code>port</code> properties:</p>\\n<pre><code class=\\\"lang-js\\\">socket.on(&#39;message&#39;, (msg, rinfo) =&gt; {\\n  console.log(&#39;Received %d bytes from %s:%d\\\\n&#39;,\\n              msg.length, rinfo.address, rinfo.port);\\n});\\n</code></pre>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"socket.addMembership(multicastAddress[, multicastInterface])\",\n              \"type\": \"method\",\n              \"name\": \"addMembership\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.9\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`multicastAddress` {String} \",\n                      \"name\": \"multicastAddress\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`multicastInterface` {String}, Optional \",\n                      \"name\": \"multicastInterface\",\n                      \"type\": \"String\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"multicastAddress\"\n                    },\n                    {\n                      \"name\": \"multicastInterface\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code>\\nusing the <code>IP_ADD_MEMBERSHIP</code> socket option. If the <code>multicastInterface</code>\\nargument is not specified, the operating system will try to add membership to\\nall valid networking interfaces.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.address()\",\n              \"type\": \"method\",\n              \"name\": \"address\",\n              \"desc\": \"<p>Returns an object containing the address information for a socket.\\nFor UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>\\nproperties.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.bind([port][, address][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"bind\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`port` {Number} - Integer, Optional \",\n                      \"name\": \"port\",\n                      \"type\": \"Number\",\n                      \"optional\": true,\n                      \"desc\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`address` {String}, Optional \",\n                      \"name\": \"address\",\n                      \"type\": \"String\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} with no parameters, Optional. Called when binding is complete. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"with no parameters, Optional. Called when binding is complete.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"address\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\\nnamed <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified, the operating\\nsystem will attempt to bind to a random port. If <code>address</code> is not specified,\\nthe operating system will attempt to listen on all addresses.  Once binding is\\ncomplete, a <code>&#39;listening&#39;</code> event is emitted and the optional <code>callback</code> function\\nis called.</p>\\n<p>Note that specifying both a <code>&#39;listening&#39;</code> event listener and passing a\\n<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very\\nuseful.</p>\\n<p>A bound datagram socket keeps the Node.js process running to receive\\ndatagram messages.</p>\\n<p>If binding fails, an <code>&#39;error&#39;</code> event is generated. In rare case (e.g.\\nattempting to bind with a closed socket), an [<code>Error</code>][] may be thrown.</p>\\n<p>Example of a UDP server listening on port 41234:</p>\\n<pre><code class=\\\"lang-js\\\">const dgram = require(&#39;dgram&#39;);\\nconst server = dgram.createSocket(&#39;udp4&#39;);\\n\\nserver.on(&#39;error&#39;, (err) =&gt; {\\n  console.log(`server error:\\\\n${err.stack}`);\\n  server.close();\\n});\\n\\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\\n});\\n\\nserver.on(&#39;listening&#39;, () =&gt; {\\n  var address = server.address();\\n  console.log(`server listening ${address.address}:${address.port}`);\\n});\\n\\nserver.bind(41234);\\n// server listening 0.0.0.0:41234\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.bind(options[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"bind\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`options` {Object} - Required. Supports the following properties: \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`port` {Number} - Required. \",\n                          \"name\": \"port\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Required.\"\n                        },\n                        {\n                          \"textRaw\": \"`address` {String} - Optional. \",\n                          \"name\": \"address\",\n                          \"type\": \"String\",\n                          \"desc\": \"Optional.\"\n                        },\n                        {\n                          \"textRaw\": \"`exclusive` {Boolean} - Optional. \",\n                          \"name\": \"exclusive\",\n                          \"type\": \"Boolean\",\n                          \"desc\": \"Optional.\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"desc\": \"Required. Supports the following properties:\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} - Optional. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"Optional.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a\\nnamed <code>port</code> and optional <code>address</code> that are passed as properties of an\\n<code>options</code> object passed as the first argument. If <code>port</code> is not specified, the\\noperating system will attempt to bind to a random port. If <code>address</code> is not\\nspecified, the operating system will attempt to listen on all addresses.  Once\\nbinding is complete, a <code>&#39;listening&#39;</code> event is emitted and the optional\\n<code>callback</code> function is called.</p>\\n<p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is\\nuse when using <code>dgram.Socket</code> objects with the [<code>cluster</code>] module. When\\n<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same\\nunderlying socket handle allowing connection handling duties to be shared.\\nWhen <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted\\nport sharing results in an error.</p>\\n<p>An example socket listening on an exclusive port is shown below.</p>\\n<pre><code class=\\\"lang-js\\\">socket.bind({\\n  address: &#39;localhost&#39;,\\n  port: 8000,\\n  exclusive: true\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.close([callback])\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"desc\": \"<p>Close the underlying socket and stop listening for data on it. If a callback is\\nprovided, it is added as a listener for the [<code>&#39;close&#39;</code>][] event.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.dropMembership(multicastAddress[, multicastInterface])\",\n              \"type\": \"method\",\n              \"name\": \"dropMembership\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.9\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`multicastAddress` {String} \",\n                      \"name\": \"multicastAddress\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`multicastInterface` {String}, Optional \",\n                      \"name\": \"multicastInterface\",\n                      \"type\": \"String\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"multicastAddress\"\n                    },\n                    {\n                      \"name\": \"multicastInterface\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the\\n<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the\\nkernel when the socket is closed or the process terminates, so most apps will\\nnever have reason to call this.</p>\\n<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to\\ndrop membership on all valid interfaces.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.send(msg, [offset, length,] port, address[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"send\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`msg` {Buffer|String|Array} Message to be sent \",\n                      \"name\": \"msg\",\n                      \"type\": \"Buffer|String|Array\",\n                      \"desc\": \"Message to be sent\"\n                    },\n                    {\n                      \"textRaw\": \"`offset` {Number} Integer. Optional. Offset in the buffer where the message starts. \",\n                      \"name\": \"offset\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Integer. Optional. Offset in the buffer where the message starts.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`length` {Number} Integer. Optional. Number of bytes in the message. \",\n                      \"name\": \"length\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Integer. Optional. Number of bytes in the message.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`port` {Number} Integer. Destination port. \",\n                      \"name\": \"port\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Integer. Destination port.\"\n                    },\n                    {\n                      \"textRaw\": \"`address` {String} Destination hostname or IP address. \",\n                      \"name\": \"address\",\n                      \"type\": \"String\",\n                      \"desc\": \"Destination hostname or IP address.\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} Called when the message has been sent. Optional. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"Called when the message has been sent. Optional.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"msg\"\n                    },\n                    {\n                      \"name\": \"offset\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"length\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"address\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must\\nbe specified.</p>\\n<p>The <code>msg</code> argument contains the message to be sent.\\nDepending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>,\\nthe <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the\\nmessage begins and the number of bytes in the message, respectively.\\nIf <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>\\nwith <code>&#39;utf8&#39;</code> encoding. With messages that\\ncontain  multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with\\nrespect to [byte length][] and not the character position.\\nIf <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p>\\n<p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name,\\nDNS will be used to resolve the address of the host. If the <code>address</code> is not\\nspecified or is an empty string, <code>&#39;127.0.0.1&#39;</code> or <code>&#39;::1&#39;</code> will be used instead.</p>\\n<p>If the socket has not been previously bound with a call to <code>bind</code>, the socket\\nis assigned a random port number and is bound to the &quot;all interfaces&quot; address\\n(<code>&#39;0.0.0.0&#39;</code> for <code>udp4</code> sockets, <code>&#39;::0&#39;</code> for <code>udp6</code> sockets.)</p>\\n<p>An optional <code>callback</code> function  may be specified to as a way of reporting\\nDNS errors or for determining when it is safe to reuse the <code>buf</code> object.\\nNote that DNS lookups delay the time to send for at least one tick of the\\nNode.js event loop.</p>\\n<p>The only way to know for sure that the datagram has been sent is by using a\\n<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be\\npassed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,\\nthe error is emitted as an <code>&#39;error&#39;</code> event on the <code>socket</code> object.</p>\\n<p>Offset and length are optional, but if you specify one you would need to\\nspecify the other. Also, they are supported only when the first\\nargument is a <code>Buffer</code>.</p>\\n<p>Example of sending a UDP packet to a random port on <code>localhost</code>;</p>\\n<pre><code class=\\\"lang-js\\\">const dgram = require(&#39;dgram&#39;);\\nconst message = Buffer.from(&#39;Some bytes&#39;);\\nconst client = dgram.createSocket(&#39;udp4&#39;);\\nclient.send(message, 41234, &#39;localhost&#39;, (err) =&gt; {\\n  client.close();\\n});\\n</code></pre>\\n<p>Example of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;</p>\\n<pre><code class=\\\"lang-js\\\">const dgram = require(&#39;dgram&#39;);\\nconst buf1 = Buffer.from(&#39;Some &#39;);\\nconst buf2 = Buffer.from(&#39;bytes&#39;);\\nconst client = dgram.createSocket(&#39;udp4&#39;);\\nclient.send([buf1, buf2], 41234, &#39;localhost&#39;, (err) =&gt; {\\n  client.close();\\n});\\n</code></pre>\\n<p>Sending multiple buffers might be faster or slower depending on your\\napplication and operating system: benchmark it. Usually it is faster.</p>\\n<p><strong>A Note about UDP datagram size</strong></p>\\n<p>The maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code>\\n(<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.</p>\\n<ul>\\n<li><p>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal\\npayload exceed 64K octets <em>including</em> the internet header and data\\n(65,507 bytes = 65,535 \u2212 8 bytes UDP header \u2212 20 bytes IP header);\\nthis is generally true for loopback interfaces, but such long datagram\\nmessages are impractical for most hosts and networks.</p>\\n</li>\\n<li><p>The <code>MTU</code> is the largest size a given link layer technology can support for\\ndatagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code>\\noctets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended\\nas the <code>MTU</code> for dial-up type applications), whether they arrive whole or in\\nfragments.</p>\\n<p>For <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum\\nfragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is\\nvery small, since most current link layer technologies, like Ethernet, have a\\nminimum <code>MTU</code> of <code>1500</code>.</p>\\n</li>\\n</ul>\\n<p>It is impossible to know in advance the MTU of each link through which\\na packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will\\nnot work because the packet will get silently dropped without informing the\\nsource that the data did not reach its intended recipient.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.setBroadcast(flag)\",\n              \"type\": \"method\",\n              \"name\": \"setBroadcast\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.9\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`flag` {Boolean} \",\n                      \"name\": \"flag\",\n                      \"type\": \"Boolean\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"flag\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets or clears the <code>SO_BROADCAST</code> socket option.  When set to <code>true</code>, UDP\\npackets may be sent to a local interface&#39;s broadcast address.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.setMulticastLoopback(flag)\",\n              \"type\": \"method\",\n              \"name\": \"setMulticastLoopback\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`flag` {Boolean} \",\n                      \"name\": \"flag\",\n                      \"type\": \"Boolean\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"flag\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option.  When set to <code>true</code>,\\nmulticast packets will also be received on the local interface.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.setMulticastTTL(ttl)\",\n              \"type\": \"method\",\n              \"name\": \"setMulticastTTL\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`ttl` {Number} Integer \",\n                      \"name\": \"ttl\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Integer\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"ttl\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets the <code>IP_MULTICAST_TTL</code> socket option.  While TTL generally stands for\\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\\npacket is allowed to travel through, specifically for multicast traffic.  Each\\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\\ndecremented to 0 by a router, it will not be forwarded.</p>\\n<p>The argument passed to to <code>socket.setMulticastTTL()</code> is a number of hops\\nbetween 0 and 255. The default on most systems is <code>1</code> but can vary.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.setTTL(ttl)\",\n              \"type\": \"method\",\n              \"name\": \"setTTL\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`ttl` {Number} Integer \",\n                      \"name\": \"ttl\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Integer\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"ttl\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for &quot;Time to Live&quot;,\\nin this context it specifies the number of IP hops that a packet is allowed to\\ntravel through.  Each router or gateway that forwards a packet decrements the\\nTTL.  If the TTL is decremented to 0 by a router, it will not be forwarded.\\nChanging TTL values is typically done for network probes or when multicasting.</p>\\n<p>The argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255.\\nThe default on most systems is 64 but can vary.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.ref()\",\n              \"type\": \"method\",\n              \"name\": \"ref\",\n              \"desc\": \"<p>By default, binding a socket will cause it to block the Node.js process from\\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\\nto exclude the socket from the reference counting that keeps the Node.js\\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\\ncounting and restores the default behavior.</p>\\n<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>\\n<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be\\nchained.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.unref()\",\n              \"type\": \"method\",\n              \"name\": \"unref\",\n              \"desc\": \"<p>By default, binding a socket will cause it to block the Node.js process from\\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\\nto exclude the socket from the reference counting that keeps the Node.js\\nprocess active, allowing the process to exit even if the socket is still\\nlistening.</p>\\n<p>Calling <code>socket.unref()</code> multiple times will have no addition effect.</p>\\n<p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be\\nchained.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ],\n          \"modules\": [\n            {\n              \"textRaw\": \"Change to asynchronous `socket.bind()` behavior\",\n              \"name\": \"change_to_asynchronous_`socket.bind()`_behavior\",\n              \"desc\": \"<p>As of Node.js v0.10, [<code>dgram.Socket#bind()</code>][] changed to an asynchronous\\nexecution model. Legacy code that assumes synchronous behavior, as in the\\nfollowing example:</p>\\n<pre><code class=\\\"lang-js\\\">const s = dgram.createSocket(&#39;udp4&#39;);\\ns.bind(1234);\\ns.addMembership(&#39;224.0.0.114&#39;);\\n</code></pre>\\n<p>Must be changed to pass a callback function to the [<code>dgram.Socket#bind()</code>][]\\nfunction:</p>\\n<pre><code class=\\\"lang-js\\\">const s = dgram.createSocket(&#39;udp4&#39;);\\ns.bind(1234, () =&gt; {\\n  s.addMembership(&#39;224.0.0.114&#39;);\\n});\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Change to asynchronous `socket.bind()` behavior\"\n            }\n          ]\n        }\n      ],\n      \"modules\": [\n        {\n          \"textRaw\": \"`dgram` module functions\",\n          \"name\": \"`dgram`_module_functions\",\n          \"methods\": [\n            {\n              \"textRaw\": \"dgram.createSocket(options[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"createSocket\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Returns: {dgram.Socket} \",\n                    \"name\": \"return\",\n                    \"type\": \"dgram.Socket\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"name\": \"options\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} Attached as a listener to `'message'` events. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"Attached as a listener to `'message'` events.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Creates a <code>dgram.Socket</code> object. The <code>options</code> argument is an object that\\nshould contain a <code>type</code> field of either <code>udp4</code> or <code>udp6</code> and an optional\\nboolean <code>reuseAddr</code> field.</p>\\n<p>When <code>reuseAddr</code> is <code>true</code> [<code>socket.bind()</code>][] will reuse the address, even if\\nanother process has already bound a socket on it. <code>reuseAddr</code> defaults to\\n<code>false</code>. An optional <code>callback</code> function can be passed specified which is added\\nas a listener for <code>&#39;message&#39;</code> events.</p>\\n<p>Once the socket is created, calling [<code>socket.bind()</code>][] will instruct the\\nsocket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are\\nnot passed to  [<code>socket.bind()</code>][] the method will bind the socket to the &quot;all\\ninterfaces&quot; address on a random port (it does the right thing for both <code>udp4</code>\\nand <code>udp6</code> sockets). The bound address and port can be retrieved using\\n[<code>socket.address().address</code>][] and [<code>socket.address().port</code>][].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"dgram.createSocket(type[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"createSocket\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Returns: {dgram.Socket} \",\n                    \"name\": \"return\",\n                    \"type\": \"dgram.Socket\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`type` {String} - Either 'udp4' or 'udp6' \",\n                      \"name\": \"type\",\n                      \"type\": \"String\",\n                      \"desc\": \"Either 'udp4' or 'udp6'\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} - Attached as a listener to `'message'` events. Optional \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true,\n                      \"desc\": \"Attached as a listener to `'message'` events.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"type\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>. The <code>type</code> argument\\ncan be either <code>udp4</code> or <code>udp6</code>. An optional <code>callback</code> function can be passed\\nwhich is added as a listener for <code>&#39;message&#39;</code> events.</p>\\n<p>Once the socket is created, calling [<code>socket.bind()</code>][] will instruct the\\nsocket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are\\nnot passed to  [<code>socket.bind()</code>][] the method will bind the socket to the &quot;all\\ninterfaces&quot; address on a random port (it does the right thing for both <code>udp4</code>\\nand <code>udp6</code> sockets). The bound address and port can be retrieved using\\n[<code>socket.address().address</code>][] and [<code>socket.address().port</code>][].</p>\\n<!-- [end-include:dgram.md] -->\\n<!-- [start-include:dns.md] -->\\n\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"`dgram` module functions\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"dgram\"\n    },\n    {\n      \"textRaw\": \"DNS\",\n      \"name\": \"dns\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>dns</code> module contains functions belonging to two different categories:</p>\\n<p>1) Functions that use the underlying operating system facilities to perform\\nname resolution, and that do not necessarily perform any network communication.\\nThis category contains only one function: [<code>dns.lookup()</code>][]. <strong>Developers\\nlooking to perform name resolution in the same way that other applications on\\nthe same operating system behave should use [<code>dns.lookup()</code>][].</strong></p>\\n<p>For example, looking up <code>nodejs.org</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const dns = require(&#39;dns&#39;);\\n\\ndns.lookup(&#39;nodejs.org&#39;, (err, addresses, family) =&gt; {\\n  console.log(&#39;addresses:&#39;, addresses);\\n});\\n</code></pre>\\n<p>2) Functions that connect to an actual DNS server to perform name resolution,\\nand that <em>always</em> use the network to perform DNS queries. This category\\ncontains all functions in the <code>dns</code> module <em>except</em> [<code>dns.lookup()</code>][]. These\\nfunctions do not use the same set of configuration files used by\\n[<code>dns.lookup()</code>][] (e.g. <code>/etc/hosts</code>). These functions should be used by\\ndevelopers who do not want to use the underlying operating system&#39;s facilities\\nfor name resolution, and instead want to <em>always</em> perform DNS queries.</p>\\n<p>Below is an example that resolves <code>&#39;nodejs.org&#39;</code> then reverse resolves the IP\\naddresses that are returned.</p>\\n<pre><code class=\\\"lang-js\\\">const dns = require(&#39;dns&#39;);\\n\\ndns.resolve4(&#39;nodejs.org&#39;, (err, addresses) =&gt; {\\n  if (err) throw err;\\n\\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\\n\\n  addresses.forEach((a) =&gt; {\\n    dns.reverse(a, (err, hostnames) =&gt; {\\n      if (err) {\\n        throw err;\\n      }\\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\\n    });\\n  });\\n});\\n</code></pre>\\n<p>There are subtle consequences in choosing one over the other, please consult\\nthe [Implementation considerations section][] for more information.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"dns.getServers()\",\n          \"type\": \"method\",\n          \"name\": \"getServers\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns an array of IP address strings that are being used for name\\nresolution.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.lookup(hostname[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"lookup\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>Resolves a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into the first found A (IPv4) or\\nAAAA (IPv6) record. <code>options</code> can be an object or integer. If <code>options</code> is\\nnot provided, then IPv4 and IPv6 addresses are both valid. If <code>options</code> is\\nan integer, then it must be <code>4</code> or <code>6</code>.</p>\\n<p>Alternatively, <code>options</code> can be an object containing these properties:</p>\\n<ul>\\n<li><code>family</code> {Number} - The record family. If present, must be the integer\\n<code>4</code> or <code>6</code>. If not provided, both IP v4 and v6 addresses are accepted.</li>\\n<li><code>hints</code>: {Number} - If present, it should be one or more of the supported\\n<code>getaddrinfo</code> flags. If <code>hints</code> is not provided, then no flags are passed to\\n<code>getaddrinfo</code>. Multiple flags can be passed through <code>hints</code> by logically\\n<code>OR</code>ing their values.\\nSee [supported <code>getaddrinfo</code> flags][] for more information on supported\\nflags.</li>\\n<li><code>all</code>: {Boolean} - When <code>true</code>, the callback returns all resolved addresses\\nin an array, otherwise returns a single address. Defaults to <code>false</code>.</li>\\n</ul>\\n<p>All properties are optional. An example usage of options is shown below.</p>\\n<pre><code>{\\n  family: 4,\\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\\n  all: false\\n}\\n</code></pre><p>The <code>callback</code> function has arguments <code>(err, address, family)</code>. <code>address</code> is a\\nstring representation of an IPv4 or IPv6 address. <code>family</code> is either the\\ninteger <code>4</code> or <code>6</code> and denotes the family of <code>address</code> (not necessarily the\\nvalue initially passed to <code>lookup</code>).</p>\\n<p>With the <code>all</code> option set to <code>true</code>, the arguments change to\\n<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the\\nproperties <code>address</code> and <code>family</code>.</p>\\n<p>On error, <code>err</code> is an [<code>Error</code>][] object, where <code>err.code</code> is the error code.\\nKeep in mind that <code>err.code</code> will be set to <code>&#39;ENOENT&#39;</code> not only when\\nthe hostname does not exist but also when the lookup fails in other ways\\nsuch as no available file descriptors.</p>\\n<p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.\\nThe implementation uses an operating system facility that can associate names\\nwith addresses, and vice versa. This implementation can have subtle but\\nimportant consequences on the behavior of any Node.js program. Please take some\\ntime to consult the [Implementation considerations section][] before using\\n<code>dns.lookup()</code>.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Supported getaddrinfo flags\",\n              \"name\": \"supported_getaddrinfo_flags\",\n              \"desc\": \"<p>The following flags can be passed as hints to [<code>dns.lookup()</code>][].</p>\\n<ul>\\n<li><code>dns.ADDRCONFIG</code>: Returned address types are determined by the types\\nof addresses supported by the current system. For example, IPv4 addresses\\nare only returned if the current system has at least one IPv4 address\\nconfigured. Loopback addresses are not considered.</li>\\n<li><code>dns.V4MAPPED</code>: If the IPv6 family was specified, but no IPv6 addresses were\\nfound, then return IPv4 mapped IPv6 addresses. Note that it is not supported\\non some operating systems (e.g FreeBSD 10.1).</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Supported getaddrinfo flags\"\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.lookupService(address, port, callback)\",\n          \"type\": \"method\",\n          \"name\": \"lookupService\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.14\"\n            ]\n          },\n          \"desc\": \"<p>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using\\nthe operating system&#39;s underlying <code>getnameinfo</code> implementation.</p>\\n<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.\\nThe <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>\\nwill be thrown.</p>\\n<p>The callback has arguments <code>(err, hostname, service)</code>. The <code>hostname</code> and\\n<code>service</code> arguments are strings (e.g. <code>&#39;localhost&#39;</code> and <code>&#39;http&#39;</code> respectively).</p>\\n<p>On error, <code>err</code> is an [<code>Error</code>][] object, where <code>err.code</code> is the error code.</p>\\n<pre><code class=\\\"lang-js\\\">const dns = require(&#39;dns&#39;);\\ndns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&gt; {\\n  console.log(hostname, service);\\n    // Prints: localhost ssh\\n});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"address\"\n                },\n                {\n                  \"name\": \"port\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolve(hostname[, rrtype], callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolve\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into an\\narray of the record types specified by <code>rrtype</code>.</p>\\n<p>Valid values for <code>rrtype</code> are:</p>\\n<ul>\\n<li><code>&#39;A&#39;</code> - IPV4 addresses, default</li>\\n<li><code>&#39;AAAA&#39;</code> - IPV6 addresses</li>\\n<li><code>&#39;MX&#39;</code> - mail exchange records</li>\\n<li><code>&#39;TXT&#39;</code> - text records</li>\\n<li><code>&#39;SRV&#39;</code> - SRV records</li>\\n<li><code>&#39;PTR&#39;</code> - PTR records</li>\\n<li><code>&#39;NS&#39;</code> - name server records</li>\\n<li><code>&#39;CNAME&#39;</code> - canonical name records</li>\\n<li><code>&#39;SOA&#39;</code> - start of authority record</li>\\n<li><code>&#39;NAPTR&#39;</code> - name authority pointer record</li>\\n</ul>\\n<p>The <code>callback</code> function has arguments <code>(err, addresses)</code>. When successful,\\n<code>addresses</code> will be an array. The type of each  item in <code>addresses</code> is\\ndetermined by the record type, and described in the documentation for the\\ncorresponding lookup methods.</p>\\n<p>On error, <code>err</code> is an [<code>Error</code>][] object, where <code>err.code</code> is\\none of the error codes listed <a href=\\\"#dns_error_codes\\\">here</a>.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"rrtype\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolve4(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolve4\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\\nwill contain an array of IPv4 addresses (e.g.\\n<code>[&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]</code>).</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolve6(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolve6\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\\nwill contain an array of IPv6 addresses.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveCname(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveCname\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.2\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The\\n<code>addresses</code> argument passed to the <code>callback</code> function\\nwill contain an array of canonical name records available for the <code>hostname</code>\\n(e.g. <code>[&#39;bar.example.com&#39;]</code>).</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveMx(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveMx\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\\ncontain an array of objects containing both a <code>priority</code> and <code>exchange</code>\\nproperty (e.g. <code>[{priority: 10, exchange: &#39;mx.example.com&#39;}, ...]</code>).</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveNaptr(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveNaptr\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.12\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>\\nrecords) for the <code>hostname</code>. The <code>callback</code> function has arguments\\n<code>(err, addresses)</code>.  The <code>addresses</code> argument passed to the <code>callback</code> function\\nwill contain an array of objects with the following properties:</p>\\n<ul>\\n<li><code>flags</code></li>\\n<li><code>service</code></li>\\n<li><code>regexp</code></li>\\n<li><code>replacement</code></li>\\n<li><code>order</code></li>\\n<li><code>preference</code></li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  flags: &#39;s&#39;,\\n  service: &#39;SIP+D2U&#39;,\\n  regexp: &#39;&#39;,\\n  replacement: &#39;_sip._udp.example.com&#39;,\\n  order: 30,\\n  preference: 100\\n}\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveNs(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveNs\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\\ncontain an array of name server records available for <code>hostname</code>\\n(e.g., <code>[&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]</code>).</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveSoa(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveSoa\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.10\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for\\nthe <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\\nbe an object with the following properties:</p>\\n<ul>\\n<li><code>nsname</code></li>\\n<li><code>hostmaster</code></li>\\n<li><code>serial</code></li>\\n<li><code>refresh</code></li>\\n<li><code>retry</code></li>\\n<li><code>expire</code></li>\\n<li><code>minttl</code></li>\\n</ul>\\n<pre><code>{\\n  nsname: &#39;ns.example.com&#39;,\\n  hostmaster: &#39;root.example.com&#39;,\\n  serial: 2013101809,\\n  refresh: 10000,\\n  retry: 2400,\\n  expire: 604800,\\n  minttl: 3600\\n}\\n</code></pre>\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveSrv(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveSrv\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\\nbe an array of objects with the following properties:</p>\\n<ul>\\n<li><code>priority</code></li>\\n<li><code>weight</code></li>\\n<li><code>port</code></li>\\n<li><code>name</code></li>\\n</ul>\\n<pre><code>{\\n  priority: 10,\\n  weight: 5,\\n  port: 21223,\\n  name: &#39;service.example.com&#39;\\n}\\n</code></pre>\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolvePtr(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolvePtr\",\n          \"meta\": {\n            \"added\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\\nbe an array of strings containing the reply records.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.resolveTxt(hostname, callback)\",\n          \"type\": \"method\",\n          \"name\": \"resolveTxt\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the\\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is\\nis a two-dimentional array of the text records available for <code>hostname</code> (e.g.,\\n<code>[ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]</code>). Each sub-array contains TXT chunks of\\none record. Depending on the use case, these could be either joined together or\\ntreated separately.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"hostname\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.reverse(ip, callback)\",\n          \"type\": \"method\",\n          \"name\": \"reverse\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"desc\": \"<p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\\narray of hostnames.</p>\\n<p>The <code>callback</code> function has arguments <code>(err, hostnames)</code>, where <code>hostnames</code>\\nis an array of resolved hostnames for the given <code>ip</code>.</p>\\n<p>On error, <code>err</code> is an [<code>Error</code>][] object, where <code>err.code</code> is\\none of the [DNS error codes][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"ip\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"dns.setServers(servers)\",\n          \"type\": \"method\",\n          \"name\": \"setServers\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.3\"\n            ]\n          },\n          \"desc\": \"<p>Sets the IP addresses of the servers to be used when resolving. The <code>servers</code>\\nargument is an array of IPv4 or IPv6 addresses.</p>\\n<p>If a port specified on the address it will be removed.</p>\\n<p>An error will be thrown if an invalid address is provided.</p>\\n<p>The <code>dns.setServers()</code> method must not be called while a DNS query is in\\nprogress.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"servers\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"modules\": [\n        {\n          \"textRaw\": \"Error codes\",\n          \"name\": \"error_codes\",\n          \"desc\": \"<p>Each DNS query can return one of the following error codes:</p>\\n<ul>\\n<li><code>dns.NODATA</code>: DNS server returned answer with no data.</li>\\n<li><code>dns.FORMERR</code>: DNS server claims query was misformatted.</li>\\n<li><code>dns.SERVFAIL</code>: DNS server returned general failure.</li>\\n<li><code>dns.NOTFOUND</code>: Domain name not found.</li>\\n<li><code>dns.NOTIMP</code>: DNS server does not implement requested operation.</li>\\n<li><code>dns.REFUSED</code>: DNS server refused query.</li>\\n<li><code>dns.BADQUERY</code>: Misformatted DNS query.</li>\\n<li><code>dns.BADNAME</code>: Misformatted hostname.</li>\\n<li><code>dns.BADFAMILY</code>: Unsupported address family.</li>\\n<li><code>dns.BADRESP</code>: Misformatted DNS reply.</li>\\n<li><code>dns.CONNREFUSED</code>: Could not contact DNS servers.</li>\\n<li><code>dns.TIMEOUT</code>: Timeout while contacting DNS servers.</li>\\n<li><code>dns.EOF</code>: End of file.</li>\\n<li><code>dns.FILE</code>: Error reading file.</li>\\n<li><code>dns.NOMEM</code>: Out of memory.</li>\\n<li><code>dns.DESTRUCTION</code>: Channel is being destroyed.</li>\\n<li><code>dns.BADSTR</code>: Misformatted string.</li>\\n<li><code>dns.BADFLAGS</code>: Illegal flags specified.</li>\\n<li><code>dns.NONAME</code>: Given hostname is not numeric.</li>\\n<li><code>dns.BADHINTS</code>: Illegal hints flags specified.</li>\\n<li><code>dns.NOTINITIALIZED</code>: c-ares library initialization not yet performed.</li>\\n<li><code>dns.LOADIPHLPAPI</code>: Error loading iphlpapi.dll.</li>\\n<li><code>dns.ADDRGETNETWORKPARAMS</code>: Could not find GetNetworkParams function.</li>\\n<li><code>dns.CANCELLED</code>: DNS query cancelled.</li>\\n</ul>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Error codes\"\n        },\n        {\n          \"textRaw\": \"Implementation considerations\",\n          \"name\": \"implementation_considerations\",\n          \"desc\": \"<p>Although [<code>dns.lookup()</code>][] and the various <code>dns.resolve*()/dns.reverse()</code>\\nfunctions have the same goal of associating a network name with a network\\naddress (or vice versa), their behavior is quite different. These differences\\ncan have subtle but significant consequences on the behavior of Node.js\\nprograms.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"`dns.lookup()`\",\n              \"name\": \"`dns.lookup()`\",\n              \"desc\": \"<p>Under the hood, [<code>dns.lookup()</code>][] uses the same operating system facilities\\nas most other programs. For instance, [<code>dns.lookup()</code>][] will almost always\\nresolve a given name the same way as the <code>ping</code> command. On most POSIX-like\\noperating systems, the behavior of the [<code>dns.lookup()</code>][] function can be\\nmodified by changing settings in <code>nsswitch.conf(5)</code> and/or <code>resolv.conf(5)</code>,\\nbut note that changing these files will change the behavior of <em>all other\\nprograms running on the same operating system</em>.</p>\\n<p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript&#39;s\\nperspective, it is implemented as a synchronous call to <code>getaddrinfo(3)</code> that\\nruns on libuv&#39;s threadpool. Because libuv&#39;s threadpool has a fixed size, it\\nmeans that if for whatever reason the call to <code>getaddrinfo(3)</code> takes a long\\ntime, other operations that could run on libuv&#39;s threadpool (such as filesystem\\noperations) will experience degraded performance. In order to mitigate this\\nissue, one potential solution is to increase the size of libuv&#39;s threadpool by\\nsetting the <code>&#39;UV_THREADPOOL_SIZE&#39;</code> environment variable to a value greater than\\n<code>4</code> (its current default value). For more information on libuv&#39;s threadpool, see\\n[the official libuv documentation][].</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`dns.lookup()`\"\n            },\n            {\n              \"textRaw\": \"`dns.resolve()`, `dns.resolve*()` and `dns.reverse()`\",\n              \"name\": \"`dns.resolve()`,_`dns.resolve*()`_and_`dns.reverse()`\",\n              \"desc\": \"<p>These functions are implemented quite differently than [<code>dns.lookup()</code>][]. They\\ndo not use <code>getaddrinfo(3)</code> and they <em>always</em> perform a DNS query on the\\nnetwork. This network communication is always done asynchronously, and does not\\nuse libuv&#39;s threadpool.</p>\\n<p>As a result, these functions cannot have the same negative impact on other\\nprocessing that happens on libuv&#39;s threadpool that [<code>dns.lookup()</code>][] can have.</p>\\n<p>They do not use the same set of configuration files than what [<code>dns.lookup()</code>][]\\nuses. For instance, <em>they do not use the configuration from <code>/etc/hosts</code></em>.</p>\\n<!-- [end-include:dns.md] -->\\n<!-- [start-include:domain.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"`dns.resolve()`, `dns.resolve*()` and `dns.reverse()`\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Implementation considerations\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"DNS\"\n    },\n    {\n      \"textRaw\": \"Domain\",\n      \"name\": \"domain\",\n      \"stability\": 0,\n      \"stabilityText\": \"Deprecated\",\n      \"desc\": \"<p><strong>This module is pending deprecation</strong>. Once a replacement API has been\\nfinalized, this module will be fully deprecated. Most end users should\\n<strong>not</strong> have cause to use this module. Users who absolutely must have\\nthe functionality that domains provide may rely on it for the time being\\nbut should expect to have to migrate to a different solution\\nin the future.</p>\\n<p>Domains provide a way to handle multiple different IO operations as a\\nsingle group.  If any of the event emitters or callbacks registered to a\\ndomain emit an <code>&#39;error&#39;</code> event, or throw an error, then the domain object\\nwill be notified, rather than losing the context of the error in the\\n<code>process.on(&#39;uncaughtException&#39;)</code> handler, or causing the program to\\nexit immediately with an error code.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Warning: Don't Ignore Errors!\",\n          \"name\": \"Warning: Don't Ignore Errors!\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Domain error handlers are not a substitute for closing down your\\nprocess when an error occurs.</p>\\n<p>By the very nature of how [<code>throw</code>][] works in JavaScript, there is almost\\nnever any way to safely &quot;pick up where you left off&quot;, without leaking\\nreferences, or creating some other sort of undefined brittle state.</p>\\n<p>The safest way to respond to a thrown error is to shut down the\\nprocess.  Of course, in a normal web server, you might have many\\nconnections open, and it is not reasonable to abruptly shut those down\\nbecause an error was triggered by someone else.</p>\\n<p>The better approach is to send an error response to the request that\\ntriggered the error, while letting the others finish in their normal\\ntime, and stop listening for new requests in that worker.</p>\\n<p>In this way, <code>domain</code> usage goes hand-in-hand with the cluster module,\\nsince the master process can fork a new worker when a worker\\nencounters an error.  For Node.js programs that scale to multiple\\nmachines, the terminating proxy or service registry can take note of\\nthe failure, and react accordingly.</p>\\n<p>For example, this is not a good idea:</p>\\n<pre><code class=\\\"lang-js\\\">// XXX WARNING!  BAD IDEA!\\n\\nvar d = require(&#39;domain&#39;).create();\\nd.on(&#39;error&#39;, (er) =&gt; {\\n  // The error won&#39;t crash the process, but what it does is worse!\\n  // Though we&#39;ve prevented abrupt process restarting, we are leaking\\n  // resources like crazy if this ever happens.\\n  // This is no better than process.on(&#39;uncaughtException&#39;)!\\n  console.log(&#39;error, but oh well&#39;, er.message);\\n});\\nd.run(() =&gt; {\\n  require(&#39;http&#39;).createServer((req, res) =&gt; {\\n    handleRequest(req, res);\\n  }).listen(PORT);\\n});\\n</code></pre>\\n<p>By using the context of a domain, and the resilience of separating our\\nprogram into multiple worker processes, we can react more\\nappropriately, and handle errors with much greater safety.</p>\\n<pre><code class=\\\"lang-js\\\">// Much better!\\n\\nconst cluster = require(&#39;cluster&#39;);\\nconst PORT = +process.env.PORT || 1337;\\n\\nif (cluster.isMaster) {\\n  // In real life, you&#39;d probably use more than just 2 workers,\\n  // and perhaps not put the master and worker in the same file.\\n  //\\n  // You can also of course get a bit fancier about logging, and\\n  // implement whatever custom logic you need to prevent DoS\\n  // attacks and other bad behavior.\\n  //\\n  // See the options in the cluster documentation.\\n  //\\n  // The important thing is that the master does very little,\\n  // increasing our resilience to unexpected errors.\\n\\n  cluster.fork();\\n  cluster.fork();\\n\\n  cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\\n    console.error(&#39;disconnect!&#39;);\\n    cluster.fork();\\n  });\\n\\n} else {\\n  // the worker\\n  //\\n  // This is where we put our bugs!\\n\\n  const domain = require(&#39;domain&#39;);\\n\\n  // See the cluster documentation for more details about using\\n  // worker processes to serve requests.  How it works, caveats, etc.\\n\\n  const server = require(&#39;http&#39;).createServer((req, res) =&gt; {\\n    var d = domain.create();\\n    d.on(&#39;error&#39;, (er) =&gt; {\\n      console.error(&#39;error&#39;, er.stack);\\n\\n      // Note: we&#39;re in dangerous territory!\\n      // By definition, something unexpected occurred,\\n      // which we probably didn&#39;t want.\\n      // Anything can happen now!  Be very careful!\\n\\n      try {\\n        // make sure we close down within 30 seconds\\n        var killtimer = setTimeout(() =&gt; {\\n          process.exit(1);\\n        }, 30000);\\n        // But don&#39;t keep the process open just for that!\\n        killtimer.unref();\\n\\n        // stop taking new requests.\\n        server.close();\\n\\n        // Let the master know we&#39;re dead.  This will trigger a\\n        // &#39;disconnect&#39; in the cluster master, and then it will fork\\n        // a new worker.\\n        cluster.worker.disconnect();\\n\\n        // try to send an error to the request that triggered the problem\\n        res.statusCode = 500;\\n        res.setHeader(&#39;content-type&#39;, &#39;text/plain&#39;);\\n        res.end(&#39;Oops, there was a problem!\\\\n&#39;);\\n      } catch (er2) {\\n        // oh well, not much we can do at this point.\\n        console.error(&#39;Error sending 500!&#39;, er2.stack);\\n      }\\n    });\\n\\n    // Because req and res were created before this domain existed,\\n    // we need to explicitly add them.\\n    // See the explanation of implicit vs explicit binding below.\\n    d.add(req);\\n    d.add(res);\\n\\n    // Now run the handler function in the domain.\\n    d.run(() =&gt; {\\n      handleRequest(req, res);\\n    });\\n  });\\n  server.listen(PORT);\\n}\\n\\n// This part isn&#39;t important.  Just an example routing thing.\\n// You&#39;d put your fancy application logic here.\\nfunction handleRequest(req, res) {\\n  switch(req.url) {\\n    case &#39;/error&#39;:\\n      // We do some async stuff, and then...\\n      setTimeout(() =&gt; {\\n        // Whoops!\\n        flerb.bark();\\n      });\\n      break;\\n    default:\\n      res.end(&#39;ok&#39;);\\n  }\\n}\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"Additions to Error objects\",\n          \"name\": \"Additions to Error objects\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Any time an <code>Error</code> object is routed through a domain, a few extra fields\\nare added to it.</p>\\n<ul>\\n<li><code>error.domain</code> The domain that first handled the error.</li>\\n<li><code>error.domainEmitter</code> The event emitter that emitted an <code>&#39;error&#39;</code> event\\nwith the error object.</li>\\n<li><code>error.domainBound</code> The callback function which was bound to the\\ndomain, and passed an error as its first argument.</li>\\n<li><code>error.domainThrown</code> A boolean indicating whether the error was\\nthrown, emitted, or passed to a bound callback function.</li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"Implicit Binding\",\n          \"name\": \"Implicit Binding\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If domains are in use, then all <strong>new</strong> EventEmitter objects (including\\nStream objects, requests, responses, etc.) will be implicitly bound to\\nthe active domain at the time of their creation.</p>\\n<p>Additionally, callbacks passed to lowlevel event loop requests (such as\\nto fs.open, or other callback-taking methods) will automatically be\\nbound to the active domain.  If they throw, then the domain will catch\\nthe error.</p>\\n<p>In order to prevent excessive memory usage, Domain objects themselves\\nare not implicitly added as children of the active domain.  If they\\nwere, then it would be too easy to prevent request and response objects\\nfrom being properly garbage collected.</p>\\n<p>If you <em>want</em> to nest Domain objects as children of a parent Domain,\\nthen you must explicitly add them.</p>\\n<p>Implicit binding routes thrown errors and <code>&#39;error&#39;</code> events to the\\nDomain&#39;s <code>&#39;error&#39;</code> event, but does not register the EventEmitter on the\\nDomain, so [<code>domain.dispose()</code>][] will not shut down the EventEmitter.\\nImplicit binding only takes care of thrown errors and <code>&#39;error&#39;</code> events.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Explicit Binding\",\n          \"name\": \"Explicit Binding\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Sometimes, the domain in use is not the one that ought to be used for a\\nspecific event emitter.  Or, the event emitter could have been created\\nin the context of one domain, but ought to instead be bound to some\\nother domain.</p>\\n<p>For example, there could be one domain in use for an HTTP server, but\\nperhaps we would like to have a separate domain to use for each request.</p>\\n<p>That is possible via explicit binding.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">// create a top-level domain for the server\\nconst domain = require(&#39;domain&#39;);\\nconst http = require(&#39;http&#39;);\\nconst serverDomain = domain.create();\\n\\nserverDomain.run(() =&gt; {\\n  // server is created in the scope of serverDomain\\n  http.createServer((req, res) =&gt; {\\n    // req and res are also created in the scope of serverDomain\\n    // however, we&#39;d prefer to have a separate domain for each request.\\n    // create it first thing, and add req and res to it.\\n    var reqd = domain.create();\\n    reqd.add(req);\\n    reqd.add(res);\\n    reqd.on(&#39;error&#39;, (er) =&gt; {\\n      console.error(&#39;Error&#39;, er, req.url);\\n      try {\\n        res.writeHead(500);\\n        res.end(&#39;Error occurred, sorry.&#39;);\\n      } catch (er) {\\n        console.error(&#39;Error sending 500&#39;, er, req.url);\\n      }\\n    });\\n  }).listen(1337);\\n});\\n</code></pre>\\n\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"domain.create()\",\n          \"type\": \"method\",\n          \"name\": \"create\",\n          \"signatures\": [\n            {\n              \"return\": {\n                \"textRaw\": \"return: {Domain} \",\n                \"name\": \"return\",\n                \"type\": \"Domain\"\n              },\n              \"params\": []\n            },\n            {\n              \"params\": []\n            }\n          ],\n          \"desc\": \"<p>Returns a new Domain object.</p>\\n\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Domain\",\n          \"type\": \"class\",\n          \"name\": \"Domain\",\n          \"desc\": \"<p>The Domain class encapsulates the functionality of routing errors and\\nuncaught exceptions to the active Domain object.</p>\\n<p>Domain is a child class of [<code>EventEmitter</code>][].  To handle the errors that it\\ncatches, listen to its <code>&#39;error&#39;</code> event.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"domain.run(fn[, arg][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"run\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`fn` {Function} \",\n                      \"name\": \"fn\",\n                      \"type\": \"Function\"\n                    },\n                    {\n                      \"name\": \"arg\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"fn\"\n                    },\n                    {\n                      \"name\": \"arg\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Run the supplied function in the context of the domain, implicitly\\nbinding all event emitters, timers, and lowlevel requests that are\\ncreated in that context. Optionally, arguments can be passed to\\nthe function.</p>\\n<p>This is the most basic way to use a domain.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const domain = require(&#39;domain&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst d = domain.create();\\nd.on(&#39;error&#39;, (er) =&gt; {\\n  console.error(&#39;Caught error!&#39;, er);\\n});\\nd.run(() =&gt; {\\n  process.nextTick(() =&gt; {\\n    setTimeout(() =&gt; { // simulating some various async stuff\\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\\n        if (er) throw er;\\n        // proceed...\\n      });\\n    }, 100);\\n  });\\n});\\n</code></pre>\\n<p>In this example, the <code>d.on(&#39;error&#39;)</code> handler will be triggered, rather\\nthan crashing the program.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"domain.add(emitter)\",\n              \"type\": \"method\",\n              \"name\": \"add\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`emitter` {EventEmitter|Timer} emitter or timer to be added to the domain \",\n                      \"name\": \"emitter\",\n                      \"type\": \"EventEmitter|Timer\",\n                      \"desc\": \"emitter or timer to be added to the domain\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"emitter\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Explicitly adds an emitter to the domain.  If any event handlers called by\\nthe emitter throw an error, or if the emitter emits an <code>&#39;error&#39;</code> event, it\\nwill be routed to the domain&#39;s <code>&#39;error&#39;</code> event, just like with implicit\\nbinding.</p>\\n<p>This also works with timers that are returned from [<code>setInterval()</code>][] and\\n[<code>setTimeout()</code>][].  If their callback function throws, it will be caught by\\nthe domain &#39;error&#39; handler.</p>\\n<p>If the Timer or EventEmitter was already bound to a domain, it is removed\\nfrom that one, and bound to this one instead.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"domain.remove(emitter)\",\n              \"type\": \"method\",\n              \"name\": \"remove\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`emitter` {EventEmitter|Timer} emitter or timer to be removed from the domain \",\n                      \"name\": \"emitter\",\n                      \"type\": \"EventEmitter|Timer\",\n                      \"desc\": \"emitter or timer to be removed from the domain\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"emitter\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The opposite of [<code>domain.add(emitter)</code>][].  Removes domain handling from the\\nspecified emitter.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"domain.bind(callback)\",\n              \"type\": \"method\",\n              \"name\": \"bind\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {Function} The bound function \",\n                    \"name\": \"return\",\n                    \"type\": \"Function\",\n                    \"desc\": \"The bound function\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`callback` {Function} The callback function \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The returned function will be a wrapper around the supplied callback\\nfunction.  When the returned function is called, any errors that are\\nthrown will be routed to the domain&#39;s <code>&#39;error&#39;</code> event.</p>\\n<h4>Example</h4>\\n<pre><code class=\\\"lang-js\\\">const d = domain.create();\\n\\nfunction readSomeFile(filename, cb) {\\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\\n    // if this throws, it will also be passed to the domain\\n    return cb(er, data ? JSON.parse(data) : null);\\n  }));\\n}\\n\\nd.on(&#39;error&#39;, (er) =&gt; {\\n  // an error occurred somewhere.\\n  // if we throw it now, it will crash the program\\n  // with the normal line number and stack message.\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"domain.intercept(callback)\",\n              \"type\": \"method\",\n              \"name\": \"intercept\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"return: {Function} The intercepted function \",\n                    \"name\": \"return\",\n                    \"type\": \"Function\",\n                    \"desc\": \"The intercepted function\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`callback` {Function} The callback function \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>This method is almost identical to [<code>domain.bind(callback)</code>][].  However, in\\naddition to catching thrown errors, it will also intercept [<code>Error</code>][]\\nobjects sent as the first argument to the function.</p>\\n<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced\\nwith a single error handler in a single place.</p>\\n<h4>Example</h4>\\n<pre><code class=\\\"lang-js\\\">const d = domain.create();\\n\\nfunction readSomeFile(filename, cb) {\\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\\n    // note, the first argument is never passed to the\\n    // callback since it is assumed to be the &#39;Error&#39; argument\\n    // and thus intercepted by the domain.\\n\\n    // if this throws, it will also be passed to the domain\\n    // so the error-handling logic can be moved to the &#39;error&#39;\\n    // event on the domain instead of being repeated throughout\\n    // the program.\\n    return cb(null, JSON.parse(data));\\n  }));\\n}\\n\\nd.on(&#39;error&#39;, (er) =&gt; {\\n  // an error occurred somewhere.\\n  // if we throw it now, it will crash the program\\n  // with the normal line number and stack message.\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"domain.enter()\",\n              \"type\": \"method\",\n              \"name\": \"enter\",\n              \"desc\": \"<p>The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code>\\nmethods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code>\\nto the domain, and implicitly pushes the domain onto the domain stack managed\\nby the domain module (see [<code>domain.exit()</code>][] for details on the domain stack). The\\ncall to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O\\noperations bound to a domain.</p>\\n<p>Calling <code>enter</code> changes only the active domain, and does not alter the domain\\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\\nsingle domain.</p>\\n<p>If the domain on which <code>enter</code> is called has been disposed, <code>enter</code> will return\\nwithout setting the domain.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"domain.exit()\",\n              \"type\": \"method\",\n              \"name\": \"exit\",\n              \"desc\": \"<p>The <code>exit</code> method exits the current domain, popping it off the domain stack.\\nAny time execution is going to switch to the context of a different chain of\\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\\nThe call to <code>exit</code> delimits either the end of or an interruption to the chain\\nof asynchronous calls and I/O operations bound to a domain.</p>\\n<p>If there are multiple, nested domains bound to the current execution context,\\n<code>exit</code> will exit any domains nested within this domain.</p>\\n<p>Calling <code>exit</code> changes only the active domain, and does not alter the domain\\nitself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a\\nsingle domain.</p>\\n<p>If the domain on which <code>exit</code> is called has been disposed, <code>exit</code> will return\\nwithout exiting the domain.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"domain.dispose()\",\n              \"type\": \"method\",\n              \"name\": \"dispose\",\n              \"desc\": \"<pre><code>Stability: 0 - Deprecated.  Please recover from failed IO actions\\nexplicitly via error event handlers set on the domain.\\n</code></pre><p>Once <code>dispose</code> has been called, the domain will no longer be used by callbacks\\nbound into the domain via <code>run</code>, <code>bind</code>, or <code>intercept</code>, and a <code>&#39;dispose&#39;</code> event\\nis emitted.</p>\\n<!-- [end-include:domain.md] -->\\n<!-- [start-include:errors.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"`members` {Array} \",\n              \"type\": \"Array\",\n              \"name\": \"members\",\n              \"desc\": \"<p>An array of timers and event emitters that have been explicitly added\\nto the domain.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Domain\"\n    },\n    {\n      \"textRaw\": \"Events\",\n      \"name\": \"Events\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"type\": \"module\",\n      \"desc\": \"<p>Much of the Node.js core API is built around an idiomatic asynchronous\\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\\nperiodically emit named events that cause Function objects (&quot;listeners&quot;) to be\\ncalled.</p>\\n<p>For instance: a [<code>net.Server</code>][] object emits an event each time a peer\\nconnects to it; a [<code>fs.ReadStream</code>][] emits an event when the file is opened;\\na [stream][] emits an event whenever data is available to be read.</p>\\n<p>All objects that emit events are instances of the <code>EventEmitter</code> class. These\\nobjects expose an <code>eventEmitter.on()</code> function that allows one or more\\nFunctions to be attached to named events emitted by the object. Typically,\\nevent names are camel-cased strings but any valid JavaScript property key\\ncan be used.</p>\\n<p>When the <code>EventEmitter</code> object emits an event, all of the Functions attached\\nto that specific event are called <em>synchronously</em>. Any values returned by the\\ncalled listeners are <em>ignored</em> and will be discarded.</p>\\n<p>The following example shows a simple <code>EventEmitter</code> instance with a single\\nlistener. The <code>eventEmitter.on()</code> method is used to register listeners, while\\nthe <code>eventEmitter.emit()</code> method is used to trigger the event.</p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\n\\nclass MyEmitter extends EventEmitter {}\\n\\nconst myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;event&#39;, () =&gt; {\\n  console.log(&#39;an event occurred!&#39;);\\n});\\nmyEmitter.emit(&#39;event&#39;);\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Passing arguments and `this` to listeners\",\n          \"name\": \"passing_arguments_and_`this`_to_listeners\",\n          \"desc\": \"<p>The <code>eventEmitter.emit()</code> method allows an arbitrary set of arguments to be\\npassed to the listener functions. It is important to keep in mind that when an\\nordinary listener function is called by the <code>EventEmitter</code>, the standard <code>this</code>\\nkeyword is intentionally set to reference the <code>EventEmitter</code> to which the\\nlistener is attached.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;event&#39;, function(a, b) {\\n  console.log(a, b, this);\\n    // Prints:\\n    //   a b MyEmitter {\\n    //     domain: null,\\n    //     _events: { event: [Function] },\\n    //     _eventsCount: 1,\\n    //     _maxListeners: undefined }\\n});\\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\\n</code></pre>\\n<p>It is possible to use ES6 Arrow Functions as listeners, however, when doing so,\\nthe <code>this</code> keyword will no longer reference the <code>EventEmitter</code> instance:</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\\n  console.log(a, b, this);\\n    // Prints: a b {}\\n});\\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Passing arguments and `this` to listeners\"\n        },\n        {\n          \"textRaw\": \"Asynchronous vs. Synchronous\",\n          \"name\": \"asynchronous_vs._synchronous\",\n          \"desc\": \"<p>The <code>EventListener</code> calls all listeners synchronously in the order in which\\nthey were registered. This is important to ensure the proper sequencing of\\nevents and to avoid race conditions or logic errors. When appropriate,\\nlistener functions can switch to an asynchronous mode of operation using\\nthe <code>setImmediate()</code> or <code>process.nextTick()</code> methods:</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\\n  setImmediate(() =&gt; {\\n    console.log(&#39;this happens asynchronously&#39;);\\n  });\\n});\\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Asynchronous vs. Synchronous\"\n        },\n        {\n          \"textRaw\": \"Handling events only once\",\n          \"name\": \"handling_events_only_once\",\n          \"desc\": \"<p>When a listener is registered using the <code>eventEmitter.on()</code> method, that\\nlistener will be invoked <em>every time</em> the named event is emitted.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nvar m = 0;\\nmyEmitter.on(&#39;event&#39;, () =&gt; {\\n  console.log(++m);\\n});\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints: 1\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints: 2\\n</code></pre>\\n<p>Using the <code>eventEmitter.once()</code> method, it is possible to register a listener\\nthat is unregistered before it is called.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nvar m = 0;\\nmyEmitter.once(&#39;event&#39;, () =&gt; {\\n  console.log(++m);\\n});\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints: 1\\nmyEmitter.emit(&#39;event&#39;);\\n  // Ignored\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Handling events only once\"\n        },\n        {\n          \"textRaw\": \"Error events\",\n          \"name\": \"error_events\",\n          \"desc\": \"<p>When an error occurs within an <code>EventEmitter</code> instance, the typical action is\\nfor an <code>&#39;error&#39;</code> event to be emitted. These are treated as a special case\\nwithin Node.js.</p>\\n<p>If an <code>EventEmitter</code> does <em>not</em> have at least one listener registered for the\\n<code>&#39;error&#39;</code> event, and an <code>&#39;error&#39;</code> event is emitted, the error is thrown, a\\nstack trace is printed, and the Node.js process exits.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\\n  // Throws and crashes Node.js\\n</code></pre>\\n<p>To guard against crashing the Node.js process, developers can either register\\na listener for the <code>process.on(&#39;uncaughtException&#39;)</code> event or use the\\n[<code>domain</code>][] module (<em>Note, however, that the <code>domain</code> module has been\\ndeprecated</em>).</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\n\\nprocess.on(&#39;uncaughtException&#39;, (err) =&gt; {\\n  console.log(&#39;whoops! there was an error&#39;);\\n});\\n\\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\\n  // Prints: whoops! there was an error\\n</code></pre>\\n<p>As a best practice, developers should always register listeners for the\\n<code>&#39;error&#39;</code> event:</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;error&#39;, (err) =&gt; {\\n  console.log(&#39;whoops! there was an error&#39;);\\n});\\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\\n  // Prints: whoops! there was an error\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Error events\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: EventEmitter\",\n          \"type\": \"class\",\n          \"name\": \"EventEmitter\",\n          \"desc\": \"<p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\n</code></pre>\\n<p>All EventEmitters emit the event <code>&#39;newListener&#39;</code> when new listeners are\\nadded and <code>&#39;removeListener&#39;</code> when a listener is removed.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'newListener'\",\n              \"type\": \"event\",\n              \"name\": \"newListener\",\n              \"params\": [],\n              \"desc\": \"<p>The <code>EventEmitter</code> instance will emit it&#39;s own <code>&#39;newListener&#39;</code> event <em>before</em>\\na listener is added to it&#39;s internal array of listeners.</p>\\n<p>Listeners registered for the <code>&#39;newListener&#39;</code> event will be passed the event\\nname and a reference to the listener being added.</p>\\n<p>The fact that the event is triggered before adding the listener has a subtle\\nbut important side effect: any <em>additional</em> listeners registered to the same\\n<code>name</code> <em>within</em> the <code>&#39;newListener&#39;</code> callback will be inserted <em>before</em> the\\nlistener that is in the process of being added.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\n// Only do this once so we don&#39;t loop forever\\nmyEmitter.once(&#39;newListener&#39;, (event, listener) =&gt; {\\n  if (event === &#39;event&#39;) {\\n    // Insert a new listener in front\\n    myEmitter.on(&#39;event&#39;, () =&gt; {\\n      console.log(&#39;B&#39;);\\n    });\\n  }\\n});\\nmyEmitter.on(&#39;event&#39;, () =&gt; {\\n  console.log(&#39;A&#39;);\\n});\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints:\\n  //   B\\n  //   A\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'removeListener'\",\n              \"type\": \"event\",\n              \"name\": \"removeListener\",\n              \"params\": [],\n              \"desc\": \"<p>The <code>&#39;removeListener&#39;</code> event is emitted <em>after</em> a listener is removed.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"EventEmitter.listenerCount(emitter, eventName)\",\n              \"type\": \"method\",\n              \"name\": \"listenerCount\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`emitter.listenerCount()`][] instead.\",\n              \"desc\": \"<p>A class method that returns the number of listeners for the given <code>eventName</code>\\nregistered on the given <code>emitter</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\\nconsole.log(EventEmitter.listenerCount(myEmitter, &#39;event&#39;));\\n  // Prints: 2\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"emitter\"\n                    },\n                    {\n                      \"name\": \"eventName\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.addListener(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"addListener\",\n              \"desc\": \"<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.emit(eventName[, arg1][, arg2][, ...])\",\n              \"type\": \"method\",\n              \"name\": \"emit\",\n              \"desc\": \"<p>Synchronously calls each of the listeners registered for the event named\\n<code>eventName</code>, in the order they were registered, passing the supplied arguments\\nto each.</p>\\n<p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"arg1\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"arg2\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.eventNames()\",\n              \"type\": \"method\",\n              \"name\": \"eventNames\",\n              \"desc\": \"<p>Returns an array listing the events for which the emitter has registered\\nlisteners. The values in the array will be strings or Symbols.</p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\nconst myEE = new EventEmitter();\\nmyEE.on(&#39;foo&#39;, () =&gt; {});\\nmyEE.on(&#39;bar&#39;, () =&gt; {});\\n\\nconst sym = Symbol(&#39;symbol&#39;);\\nmyEE.on(sym, () =&gt; {});\\n\\nconsole.log(myEE.eventNames());\\n  // Prints [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.getMaxListeners()\",\n              \"type\": \"method\",\n              \"name\": \"getMaxListeners\",\n              \"desc\": \"<p>Returns the current max listener value for the <code>EventEmitter</code> which is either\\nset by [<code>emitter.setMaxListeners(n)</code>][] or defaults to\\n[<code>EventEmitter.defaultMaxListeners</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.listenerCount(eventName)\",\n              \"type\": \"method\",\n              \"name\": \"listenerCount\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`eventName` {Value} The name of the event being listened for \",\n                      \"name\": \"eventName\",\n                      \"type\": \"Value\",\n                      \"desc\": \"The name of the event being listened for\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns the number of listeners listening to the event named <code>eventName</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"emitter.listeners(eventName)\",\n              \"type\": \"method\",\n              \"name\": \"listeners\",\n              \"desc\": \"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>\\n<pre><code class=\\\"lang-js\\\">server.on(&#39;connection&#39;, (stream) =&gt; {\\n  console.log(&#39;someone connected!&#39;);\\n});\\nconsole.log(util.inspect(server.listeners(&#39;connection&#39;)));\\n  // Prints: [ [Function] ]\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.on(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"on\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`eventName` {string|Symbol} The name of the event. \",\n                      \"name\": \"eventName\",\n                      \"type\": \"string|Symbol\",\n                      \"desc\": \"The name of the event.\"\n                    },\n                    {\n                      \"textRaw\": \"`listener` {Function} The callback function \",\n                      \"name\": \"listener\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Adds the <code>listener</code> function to the end of the listeners array for the\\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\\ntimes.</p>\\n<pre><code class=\\\"lang-js\\\">server.on(&#39;connection&#39;, (stream) =&gt; {\\n  console.log(&#39;someone connected!&#39;);\\n});\\n</code></pre>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n<p>By default, event listeners are invoked in the order they are added. The\\n<code>emitter.prependListener()</code> method can be used as an alternative to add the\\nevent listener to the beginning of the listeners array.</p>\\n<pre><code class=\\\"lang-js\\\">const myEE = new EventEmitter();\\nmyEE.on(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\\nmyEE.prependListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\\nmyEE.emit(&#39;foo&#39;);\\n  // Prints:\\n  //   b\\n  //   a\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"emitter.once(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"once\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`eventName` {string|Symbol} The name of the event. \",\n                      \"name\": \"eventName\",\n                      \"type\": \"string|Symbol\",\n                      \"desc\": \"The name of the event.\"\n                    },\n                    {\n                      \"textRaw\": \"`listener` {Function} The callback function \",\n                      \"name\": \"listener\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>\\n<pre><code class=\\\"lang-js\\\">server.once(&#39;connection&#39;, (stream) =&gt; {\\n  console.log(&#39;Ah, we have our first user!&#39;);\\n});\\n</code></pre>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n<p>By default, event listeners are invoked in the order they are added. The\\n<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\\nevent listener to the beginning of the listeners array.</p>\\n<pre><code class=\\\"lang-js\\\">const myEE = new EventEmitter();\\nmyEE.once(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\\nmyEE.prependOnceListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\\nmyEE.emit(&#39;foo&#39;);\\n  // Prints:\\n  //   b\\n  //   a\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"emitter.prependListener(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"prependListener\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`eventName` {string|Symbol} The name of the event. \",\n                      \"name\": \"eventName\",\n                      \"type\": \"string|Symbol\",\n                      \"desc\": \"The name of the event.\"\n                    },\n                    {\n                      \"textRaw\": \"`listener` {Function} The callback function \",\n                      \"name\": \"listener\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\\ntimes.</p>\\n<pre><code class=\\\"lang-js\\\">server.prependListener(&#39;connection&#39;, (stream) =&gt; {\\n  console.log(&#39;someone connected!&#39;);\\n});\\n</code></pre>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"emitter.prependOnceListener(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"prependOnceListener\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`eventName` {string|Symbol} The name of the event. \",\n                      \"name\": \"eventName\",\n                      \"type\": \"string|Symbol\",\n                      \"desc\": \"The name of the event.\"\n                    },\n                    {\n                      \"textRaw\": \"`listener` {Function} The callback function \",\n                      \"name\": \"listener\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The callback function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\\nlistener is removed, and then invoked.</p>\\n<pre><code class=\\\"lang-js\\\">server.prependOnceListener(&#39;connection&#39;, (stream) =&gt; {\\n  console.log(&#39;Ah, we have our first user!&#39;);\\n});\\n</code></pre>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"emitter.removeAllListeners([eventName])\",\n              \"type\": \"method\",\n              \"name\": \"removeAllListeners\",\n              \"desc\": \"<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>\\n<p>Note that it is bad practice to remove listeners added elsewhere in the code,\\nparticularly when the <code>EventEmitter</code> instance was created by some other\\ncomponent or module (e.g. sockets or file streams).</p>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.removeListener(eventName, listener)\",\n              \"type\": \"method\",\n              \"name\": \"removeListener\",\n              \"desc\": \"<p>Removes the specified <code>listener</code> from the listener array for the event named\\n<code>eventName</code>.</p>\\n<pre><code class=\\\"lang-js\\\">var callback = (stream) =&gt; {\\n  console.log(&#39;someone connected!&#39;);\\n};\\nserver.on(&#39;connection&#39;, callback);\\n// ...\\nserver.removeListener(&#39;connection&#39;, callback);\\n</code></pre>\\n<p><code>removeListener</code> will remove, at most, one instance of a listener from the\\nlistener array. If any single listener has been added multiple times to the\\nlistener array for the specified <code>eventName</code>, then <code>removeListener</code> must be\\ncalled multiple times to remove each instance.</p>\\n<p>Note that once an event has been emitted, all listeners attached to it at the\\ntime of emitting will be called in order. This implies that any <code>removeListener()</code>\\nor <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener\\nfinishes execution will not remove them from <code>emit()</code> in progress. Subsequent\\nevents will behave as expected.</p>\\n<pre><code class=\\\"lang-js\\\">const myEmitter = new MyEmitter();\\n\\nvar callbackA = () =&gt; {\\n  console.log(&#39;A&#39;);\\n  myEmitter.removeListener(&#39;event&#39;, callbackB);\\n};\\n\\nvar callbackB = () =&gt; {\\n  console.log(&#39;B&#39;);\\n};\\n\\nmyEmitter.on(&#39;event&#39;, callbackA);\\n\\nmyEmitter.on(&#39;event&#39;, callbackB);\\n\\n// callbackA removes listener callbackB but it will still be called.\\n// Internal listener array at time of emit [callbackA, callbackB]\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints:\\n  //   A\\n  //   B\\n\\n// callbackB is now removed.\\n// Internal listener array [callbackA]\\nmyEmitter.emit(&#39;event&#39;);\\n  // Prints:\\n  //   A\\n</code></pre>\\n<p>Because listeners are managed using an internal array, calling this will\\nchange the position indices of any listener registered <em>after</em> the listener\\nbeing removed. This will not impact the order in which listeners are called,\\nbut it will means that any copies of the listener array as returned by\\nthe <code>emitter.listeners()</code> method will need to be recreated.</p>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"eventName\"\n                    },\n                    {\n                      \"name\": \"listener\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"emitter.setMaxListeners(n)\",\n              \"type\": \"method\",\n              \"name\": \"setMaxListeners\",\n              \"desc\": \"<p>By default EventEmitters will print a warning if more than <code>10</code> listeners are\\nadded for a particular event. This is a useful default that helps finding\\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\\nThe <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this\\nspecific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)\\nfor to indicate an unlimited number of listeners.</p>\\n<p>Returns a reference to the <code>EventEmitter</code> so calls can be chained.</p>\\n<!-- [end-include:events.md] -->\\n<!-- [start-include:fs.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"n\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"EventEmitter.defaultMaxListeners\",\n              \"name\": \"defaultMaxListeners\",\n              \"desc\": \"<p>By default, a maximum of <code>10</code> listeners can be registered for any single\\nevent. This limit can be changed for individual <code>EventEmitter</code> instances\\nusing the [<code>emitter.setMaxListeners(n)</code>][] method. To change the default\\nfor <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>\\nproperty can be used.</p>\\n<p>Take caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the\\nchange effects <em>all</em> <code>EventEmitter</code> instances, including those created before\\nthe change is made. However, calling [<code>emitter.setMaxListeners(n)</code>][] still has\\nprecedence over <code>EventEmitter.defaultMaxListeners</code>.</p>\\n<p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow\\nmore listeners to be added but will output a trace warning to stderr indicating\\nthat a <code>possible EventEmitter memory leak</code> has been detected. For any single\\n<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>\\nmethods can be used to temporarily avoid this warning:</p>\\n<pre><code class=\\\"lang-js\\\">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\\nemitter.once(&#39;event&#39;, () =&gt; {\\n  // do stuff\\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\\n});\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"File System\",\n      \"name\": \"fs\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>File I/O is provided by simple wrappers around standard POSIX functions.  To\\nuse this module do <code>require(&#39;fs&#39;)</code>. All the methods have asynchronous and\\nsynchronous forms.</p>\\n<p>The asynchronous form always takes a completion callback as its last argument.\\nThe arguments passed to the completion callback depend on the method, but the\\nfirst argument is always reserved for an exception. If the operation was\\ncompleted successfully, then the first argument will be <code>null</code> or <code>undefined</code>.</p>\\n<p>When using the synchronous form any exceptions are immediately thrown.\\nYou can use try/catch to handle exceptions or allow them to bubble up.</p>\\n<p>Here is an example of the asynchronous version:</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\n\\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\\n  if (err) throw err;\\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\\n});\\n</code></pre>\\n<p>Here is the synchronous version:</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\n\\nfs.unlinkSync(&#39;/tmp/hello&#39;);\\nconsole.log(&#39;successfully deleted /tmp/hello&#39;);\\n</code></pre>\\n<p>With the asynchronous methods there is no guaranteed ordering. So the\\nfollowing is prone to error:</p>\\n<pre><code class=\\\"lang-js\\\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\\n  if (err) throw err;\\n  console.log(&#39;renamed complete&#39;);\\n});\\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\\n  if (err) throw err;\\n  console.log(`stats: ${JSON.stringify(stats)}`);\\n});\\n</code></pre>\\n<p>It could be that <code>fs.stat</code> is executed before <code>fs.rename</code>.\\nThe correct way to do this is to chain the callbacks.</p>\\n<pre><code class=\\\"lang-js\\\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\\n  if (err) throw err;\\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\\n    if (err) throw err;\\n    console.log(`stats: ${JSON.stringify(stats)}`);\\n  });\\n});\\n</code></pre>\\n<p>In busy processes, the programmer is <em>strongly encouraged</em> to use the\\nasynchronous versions of these calls. The synchronous versions will block\\nthe entire process until they complete--halting all connections.</p>\\n<p>The relative path to a filename can be used. Remember, however, that this path\\nwill be relative to <code>process.cwd()</code>.</p>\\n<p>Most fs functions let you omit the callback argument. If you do, a default\\ncallback is used that rethrows errors. To get a trace to the original call\\nsite, set the <code>NODE_DEBUG</code> environment variable:</p>\\n<pre><code>$ cat script.js\\nfunction bad() {\\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\\n}\\nbad();\\n\\n$ env NODE_DEBUG=fs node script.js\\nfs.js:88\\n        throw backtrace;\\n        ^\\nError: EISDIR: illegal operation on a directory, read\\n    &lt;stack trace.&gt;\\n</code></pre>\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Buffer API\",\n          \"name\": \"buffer_api\",\n          \"meta\": {\n            \"added\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"desc\": \"<p><code>fs</code> functions support passing and receiving paths as both strings\\nand Buffers. The latter is intended to make it possible to work with\\nfilesystems that allow for non-UTF-8 filenames. For most typical\\nuses, working with paths as Buffers will be unnecessary, as the string\\nAPI converts to and from UTF-8 automatically.</p>\\n<p><em>Note</em> that on certain file systems (such as NTFS and HFS+) filenames\\nwill always be encoded as UTF-8. On such file systems, passing\\nnon-UTF-8 encoded Buffers to <code>fs</code> functions will not work as expected.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Buffer API\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: fs.FSWatcher\",\n          \"type\": \"class\",\n          \"name\": \"fs.FSWatcher\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Objects returned from <code>fs.watch()</code> are of this type.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'change'\",\n              \"type\": \"event\",\n              \"name\": \"change\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.8\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when something changes in a watched directory or file.\\nSee more details in [<code>fs.watch()</code>][].</p>\\n<p>The <code>filename</code> argument may not be provided depending on operating system\\nsupport. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if\\n<code>fs.watch()</code> is called with it&#39;s <code>encoding</code> option set to <code>&#39;buffer&#39;</code>, otherwise\\n<code>filename</code> will be a string.</p>\\n<pre><code class=\\\"lang-js\\\">fs.watch(&#39;./tmp&#39;, {encoding: &#39;buffer&#39;}, (event, filename) =&gt; {\\n  if (filename)\\n    console.log(filename);\\n    // Prints: &lt;Buffer ...&gt;\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.8\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when an error occurs.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"watcher.close()\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.8\"\n                ]\n              },\n              \"desc\": \"<p>Stop watching for changes on the given <code>fs.FSWatcher</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: fs.ReadStream\",\n          \"type\": \"class\",\n          \"name\": \"fs.ReadStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.93\"\n            ]\n          },\n          \"desc\": \"<p><code>ReadStream</code> is a [Readable Stream][].</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'open'\",\n              \"type\": \"event\",\n              \"name\": \"open\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when the ReadStream&#39;s file is opened.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the <code>ReadStream</code>&#39;s underlying file descriptor has been closed\\nusing the <code>fs.close()</code> method.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"readStream.path\",\n              \"name\": \"path\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"desc\": \"<p>The path to the file the stream is reading from as specified in the first\\nargument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then\\n<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\\n<code>readStream.path</code> will be a <code>Buffer</code>.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: fs.Stats\",\n          \"type\": \"class\",\n          \"name\": \"fs.Stats\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"desc\": \"<p>Objects returned from [<code>fs.stat()</code>][], [<code>fs.lstat()</code>][] and [<code>fs.fstat()</code>][] and their\\nsynchronous counterparts are of this type.</p>\\n<ul>\\n<li><code>stats.isFile()</code></li>\\n<li><code>stats.isDirectory()</code></li>\\n<li><code>stats.isBlockDevice()</code></li>\\n<li><code>stats.isCharacterDevice()</code></li>\\n<li><code>stats.isSymbolicLink()</code> (only valid with [<code>fs.lstat()</code>][])</li>\\n<li><code>stats.isFIFO()</code></li>\\n<li><code>stats.isSocket()</code></li>\\n</ul>\\n<p>For a regular file [<code>util.inspect(stats)</code>][] would return a string very\\nsimilar to this:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  dev: 2114,\\n  ino: 48064969,\\n  mode: 33188,\\n  nlink: 1,\\n  uid: 85,\\n  gid: 100,\\n  rdev: 0,\\n  size: 527,\\n  blksize: 4096,\\n  blocks: 8,\\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\\n}\\n</code></pre>\\n<p>Please note that <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> are\\ninstances of [<code>Date</code>][MDN-Date] object and to compare the values of\\nthese objects you should use appropriate methods. For most general\\nuses [<code>getTime()</code>][MDN-Date-getTime] will return the number of\\nmilliseconds elapsed since <em>1 January 1970 00:00:00 UTC</em> and this\\ninteger should be sufficient for any comparison, however there are\\nadditional methods which can be used for displaying fuzzy information.\\nMore details can be found in the [MDN JavaScript Reference][MDN-Date]\\npage.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Stat Time Values\",\n              \"name\": \"stat_time_values\",\n              \"desc\": \"<p>The times in the stat object have the following semantics:</p>\\n<ul>\\n<li><code>atime</code> &quot;Access Time&quot; - Time when file data last accessed.  Changed\\nby the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>read(2)</code> system calls.</li>\\n<li><code>mtime</code> &quot;Modified Time&quot; - Time when file data last modified.\\nChanged by the <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>write(2)</code> system calls.</li>\\n<li><code>ctime</code> &quot;Change Time&quot; - Time when file status was last changed\\n(inode data modification).  Changed by the <code>chmod(2)</code>, <code>chown(2)</code>,\\n<code>link(2)</code>, <code>mknod(2)</code>, <code>rename(2)</code>, <code>unlink(2)</code>, <code>utimes(2)</code>,\\n<code>read(2)</code>, and <code>write(2)</code> system calls.</li>\\n<li><code>birthtime</code> &quot;Birth Time&quot; -  Time of file creation. Set once when the\\nfile is created.  On filesystems where birthtime is not available,\\nthis field may instead hold either the <code>ctime</code> or\\n<code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>). Note that this\\nvalue may be greater than <code>atime</code> or <code>mtime</code> in this case. On Darwin\\nand other FreeBSD variants, also set if the <code>atime</code> is explicitly\\nset to an earlier value than the current <code>birthtime</code> using the\\n<code>utimes(2)</code> system call.</li>\\n</ul>\\n<p>Prior to Node v0.12, the <code>ctime</code> held the <code>birthtime</code> on Windows\\nsystems.  Note that as of v0.12, <code>ctime</code> is not &quot;creation time&quot;, and\\non Unix systems, it never was.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Stat Time Values\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: fs.WriteStream\",\n          \"type\": \"class\",\n          \"name\": \"fs.WriteStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.93\"\n            ]\n          },\n          \"desc\": \"<p><code>WriteStream</code> is a [Writable Stream][].</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'open'\",\n              \"type\": \"event\",\n              \"name\": \"open\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when the WriteStream&#39;s file is opened.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the <code>WriteStream</code>&#39;s underlying file descriptor has been closed\\nusing the <code>fs.close()</code> method.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"writeStream.bytesWritten\",\n              \"name\": \"bytesWritten\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.4.7\"\n                ]\n              },\n              \"desc\": \"<p>The number of bytes written so far. Does not include data that is still queued\\nfor writing.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"writeStream.path\",\n              \"name\": \"path\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.93\"\n                ]\n              },\n              \"desc\": \"<p>The path to the file the stream is writing to as specified in the first\\nargument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then\\n<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\\n<code>writeStream.path</code> will be a <code>Buffer</code>.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"fs.access(path[, mode], callback)\",\n          \"type\": \"method\",\n          \"name\": \"access\",\n          \"meta\": {\n            \"added\": [\n              \"v1.0.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Tests a user&#39;s permissions for the file specified by <code>path</code>. <code>mode</code> is an\\noptional integer that specifies the accessibility checks to be performed. The\\nfollowing constants define the possible values of <code>mode</code>. It is possible to\\ncreate a mask consisting of the bitwise OR of two or more values.</p>\\n<ul>\\n<li><code>fs.F_OK</code> - File is visible to the calling process. This is useful for\\ndetermining if a file exists, but says nothing about <code>rwx</code> permissions.\\nDefault if no <code>mode</code> is specified.</li>\\n<li><code>fs.R_OK</code> - File can be read by the calling process.</li>\\n<li><code>fs.W_OK</code> - File can be written by the calling process.</li>\\n<li><code>fs.X_OK</code> - File can be executed by the calling process. This has no effect\\non Windows (will behave like <code>fs.F_OK</code>).</li>\\n</ul>\\n<p>The final argument, <code>callback</code>, is a callback function that is invoked with\\na possible error argument. If any of the accessibility checks fail, the error\\nargument will be populated. The following example checks if the file\\n<code>/etc/passwd</code> can be read and written by the current process.</p>\\n<pre><code class=\\\"lang-js\\\">fs.access(&#39;/etc/passwd&#39;, fs.R_OK | fs.W_OK, (err) =&gt; {\\n  console.log(err ? &#39;no access!&#39; : &#39;can read/write&#39;);\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.accessSync(path[, mode])\",\n          \"type\": \"method\",\n          \"name\": \"accessSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.93\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.access()</code>][]. This throws if any accessibility checks\\nfail, and does nothing otherwise.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.appendFile(file, data[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"appendFile\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Number} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Number\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `'utf8'`\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} default = `0o666` \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"default = `0o666`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'a'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'a'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronously append data to a file, creating the file if it does not yet exist.\\n<code>data</code> can be a string or a buffer.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\\n  if (err) throw err;\\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\\n});\\n</code></pre>\\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\\n</code></pre>\\n<p>Any specified file descriptor has to have been opened for appending.</p>\\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.appendFileSync(file, data[, options])\",\n          \"type\": \"method\",\n          \"name\": \"appendFileSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Number} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Number\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `'utf8'`\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} default = `0o666` \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"default = `0o666`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'a'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'a'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The synchronous version of [<code>fs.appendFile()</code>][]. Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.chmod(path, mode, callback)\",\n          \"type\": \"method\",\n          \"name\": \"chmod\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.30\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous chmod(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.chmodSync(path, mode)\",\n          \"type\": \"method\",\n          \"name\": \"chmodSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous chmod(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.chown(path, uid, gid, callback)\",\n          \"type\": \"method\",\n          \"name\": \"chown\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.97\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous chown(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.chownSync(path, uid, gid)\",\n          \"type\": \"method\",\n          \"name\": \"chownSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.97\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous chown(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.close(fd, callback)\",\n          \"type\": \"method\",\n          \"name\": \"close\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous close(2).  No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.closeSync(fd)\",\n          \"type\": \"method\",\n          \"name\": \"closeSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous close(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.createReadStream(path[, options])\",\n          \"type\": \"method\",\n          \"name\": \"createReadStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`flags` {String} \",\n                      \"name\": \"flags\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`fd` {Integer} \",\n                      \"name\": \"fd\",\n                      \"type\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`autoClose` {Boolean} \",\n                      \"name\": \"autoClose\",\n                      \"type\": \"Boolean\"\n                    },\n                    {\n                      \"textRaw\": \"`start` {Integer} \",\n                      \"name\": \"start\",\n                      \"type\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`end` {Integer} \",\n                      \"name\": \"end\",\n                      \"type\": \"Integer\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Returns a new [<code>ReadStream</code>][] object. (See [Readable Stream][]).</p>\\n<p>Be aware that, unlike the default value set for <code>highWaterMark</code> on a\\nreadable stream (16 kb), the stream returned by this method has a\\ndefault value of 64 kb for the same parameter.</p>\\n<p><code>options</code> is an object or string with the following defaults:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  flags: &#39;r&#39;,\\n  encoding: null,\\n  fd: null,\\n  mode: 0o666,\\n  autoClose: true\\n}\\n</code></pre>\\n<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\\nthe file instead of the entire file.  Both <code>start</code> and <code>end</code> are inclusive and\\nstart at 0. The <code>encoding</code> can be any one of those accepted by [<code>Buffer</code>][].</p>\\n<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be emitted.\\nNote that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to\\n[<code>net.Socket</code>][].</p>\\n<p>If <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\\nthere&#39;s an error.  It is your responsibility to close it and make sure\\nthere&#39;s no file descriptor leak.  If <code>autoClose</code> is set to true (default\\nbehavior), on <code>error</code> or <code>end</code> the file descriptor will be closed\\nautomatically.</p>\\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the\\nfile was created.</p>\\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>\\n<pre><code class=\\\"lang-js\\\">fs.createReadStream(&#39;sample.txt&#39;, {start: 90, end: 99});\\n</code></pre>\\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.createWriteStream(path[, options])\",\n          \"type\": \"method\",\n          \"name\": \"createWriteStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`flags` {String} \",\n                      \"name\": \"flags\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`defaultEncoding` {String} \",\n                      \"name\": \"defaultEncoding\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`fd` {Integer} \",\n                      \"name\": \"fd\",\n                      \"type\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\"\n                    },\n                    {\n                      \"textRaw\": \"`autoClose` {Boolean} \",\n                      \"name\": \"autoClose\",\n                      \"type\": \"Boolean\"\n                    },\n                    {\n                      \"textRaw\": \"`start` {Integer} \",\n                      \"name\": \"start\",\n                      \"type\": \"Integer\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Returns a new [<code>WriteStream</code>][] object. (See [Writable Stream][]).</p>\\n<p><code>options</code> is an object or string with the following defaults:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  flags: &#39;w&#39;,\\n  defaultEncoding: &#39;utf8&#39;,\\n  fd: null,\\n  mode: 0o666,\\n  autoClose: true\\n}\\n</code></pre>\\n<p><code>options</code> may also include a <code>start</code> option to allow writing data at\\nsome position past the beginning of the file.  Modifying a file rather\\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\\ndefault mode <code>w</code>. The <code>defaultEncoding</code> can be any one of those accepted by [<code>Buffer</code>][].</p>\\n<p>If <code>autoClose</code> is set to true (default behavior) on <code>error</code> or <code>end</code>\\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\\nIt is your responsibility to close it and make sure\\nthere&#39;s no file descriptor leak.</p>\\n<p>Like [<code>ReadStream</code>][], if <code>fd</code> is specified, <code>WriteStream</code> will ignore the\\n<code>path</code> argument and will use the specified file descriptor. This means that no\\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\\n<code>fd</code>s should be passed to [<code>net.Socket</code>][].</p>\\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.exists(path, callback)\",\n          \"type\": \"method\",\n          \"name\": \"exists\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ],\n            \"deprecated\": [\n              \"v1.0.0\"\n            ]\n          },\n          \"stability\": 0,\n          \"stabilityText\": \"Deprecated: Use [`fs.stat()`][] or [`fs.access()`][] instead.\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Test whether or not the given path exists by checking with the file system.\\nThen call the <code>callback</code> argument with either true or false.  Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\\n  console.log(exists ? &#39;it\\\\&#39;s there&#39; : &#39;no passwd!&#39;);\\n});\\n</code></pre>\\n<p><code>fs.exists()</code> should not be used to check if a file exists before calling\\n<code>fs.open()</code>. Doing so introduces a race condition since other processes may\\nchange the file&#39;s state between the two calls. Instead, user code should\\ncall <code>fs.open()</code> directly and handle the error raised if the file is\\nnon-existent.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.existsSync(path)\",\n          \"type\": \"method\",\n          \"name\": \"existsSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ],\n            \"deprecated\": [\n              \"v1.0.0\"\n            ]\n          },\n          \"stability\": 0,\n          \"stabilityText\": \"Deprecated: Use [`fs.statSync()`][] or [`fs.accessSync()`][] instead.\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.exists()</code>][].\\nReturns <code>true</code> if the file exists, <code>false</code> otherwise.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fchmod(fd, mode, callback)\",\n          \"type\": \"method\",\n          \"name\": \"fchmod\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"mode\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous fchmod(2). No arguments other than a possible exception\\nare given to the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fchmodSync(fd, mode)\",\n          \"type\": \"method\",\n          \"name\": \"fchmodSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"mode\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous fchmod(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fchown(fd, uid, gid, callback)\",\n          \"type\": \"method\",\n          \"name\": \"fchown\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous fchown(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fchownSync(fd, uid, gid)\",\n          \"type\": \"method\",\n          \"name\": \"fchownSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous fchown(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fdatasync(fd, callback)\",\n          \"type\": \"method\",\n          \"name\": \"fdatasync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.96\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous fdatasync(2). No arguments other than a possible exception are\\ngiven to the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fdatasyncSync(fd)\",\n          \"type\": \"method\",\n          \"name\": \"fdatasyncSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.96\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous fdatasync(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fstat(fd, callback)\",\n          \"type\": \"method\",\n          \"name\": \"fstat\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.95\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\\n<code>stats</code> is a [<code>fs.Stats</code>][] object. <code>fstat()</code> is identical to [<code>stat()</code>][],\\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fstatSync(fd)\",\n          \"type\": \"method\",\n          \"name\": \"fstatSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.95\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous fstat(2). Returns an instance of <code>fs.Stats</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fsync(fd, callback)\",\n          \"type\": \"method\",\n          \"name\": \"fsync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.96\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous fsync(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.fsyncSync(fd)\",\n          \"type\": \"method\",\n          \"name\": \"fsyncSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.96\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous fsync(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.ftruncate(fd, len, callback)\",\n          \"type\": \"method\",\n          \"name\": \"ftruncate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.8.6\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`len` {Integer} \",\n                  \"name\": \"len\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"len\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous ftruncate(2). No arguments other than a possible exception are\\ngiven to the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.ftruncateSync(fd, len)\",\n          \"type\": \"method\",\n          \"name\": \"ftruncateSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.8.6\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`len` {Integer} \",\n                  \"name\": \"len\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"len\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous ftruncate(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.futimes(fd, atime, mtime, callback)\",\n          \"type\": \"method\",\n          \"name\": \"futimes\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`atime` {Integer} \",\n                  \"name\": \"atime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mtime` {Integer} \",\n                  \"name\": \"mtime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"atime\"\n                },\n                {\n                  \"name\": \"mtime\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Change the file timestamps of a file referenced by the supplied file\\ndescriptor.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.futimesSync(fd, atime, mtime)\",\n          \"type\": \"method\",\n          \"name\": \"futimesSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`atime` {Integer} \",\n                  \"name\": \"atime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mtime` {Integer} \",\n                  \"name\": \"mtime\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"atime\"\n                },\n                {\n                  \"name\": \"mtime\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.futimes()</code>][]. Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lchmod(path, mode, callback)\",\n          \"type\": \"method\",\n          \"name\": \"lchmod\",\n          \"meta\": {\n            \"deprecated\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous lchmod(2). No arguments other than a possible exception\\nare given to the completion callback.</p>\\n<p>Only available on Mac OS X.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lchmodSync(path, mode)\",\n          \"type\": \"method\",\n          \"name\": \"lchmodSync\",\n          \"meta\": {\n            \"deprecated\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous lchmod(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lchown(path, uid, gid, callback)\",\n          \"type\": \"method\",\n          \"name\": \"lchown\",\n          \"meta\": {\n            \"deprecated\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous lchown(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lchownSync(path, uid, gid)\",\n          \"type\": \"method\",\n          \"name\": \"lchownSync\",\n          \"meta\": {\n            \"deprecated\": [\n              \"v0.4.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`uid` {Integer} \",\n                  \"name\": \"uid\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`gid` {Integer} \",\n                  \"name\": \"gid\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"uid\"\n                },\n                {\n                  \"name\": \"gid\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous lchown(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.link(srcpath, dstpath, callback)\",\n          \"type\": \"method\",\n          \"name\": \"link\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`srcpath` {String | Buffer} \",\n                  \"name\": \"srcpath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`dstpath` {String | Buffer} \",\n                  \"name\": \"dstpath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"srcpath\"\n                },\n                {\n                  \"name\": \"dstpath\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous link(2). No arguments other than a possible exception are given to\\nthe completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.linkSync(srcpath, dstpath)\",\n          \"type\": \"method\",\n          \"name\": \"linkSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`srcpath` {String | Buffer} \",\n                  \"name\": \"srcpath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`dstpath` {String | Buffer} \",\n                  \"name\": \"dstpath\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"srcpath\"\n                },\n                {\n                  \"name\": \"dstpath\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous link(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lstat(path, callback)\",\n          \"type\": \"method\",\n          \"name\": \"lstat\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.30\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\\n<code>stats</code> is a [<code>fs.Stats</code>][] object. <code>lstat()</code> is identical to <code>stat()</code>,\\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\\nnot the file that it refers to.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.lstatSync(path)\",\n          \"type\": \"method\",\n          \"name\": \"lstatSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.30\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous lstat(2). Returns an instance of <code>fs.Stats</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.mkdir(path[, mode], callback)\",\n          \"type\": \"method\",\n          \"name\": \"mkdir\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.8\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous mkdir(2). No arguments other than a possible exception are given\\nto the completion callback. <code>mode</code> defaults to <code>0o777</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.mkdirSync(path[, mode])\",\n          \"type\": \"method\",\n          \"name\": \"mkdirSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous mkdir(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.mkdtemp(prefix, callback)\",\n          \"type\": \"method\",\n          \"name\": \"mkdtemp\",\n          \"meta\": {\n            \"added\": [\n              \"v5.10.0\"\n            ]\n          },\n          \"desc\": \"<p>Creates a unique temporary directory.</p>\\n<p>Generates six random characters to be appended behind a required\\n<code>prefix</code> to create a unique temporary directory.</p>\\n<p>The created folder path is passed as a string to the callback&#39;s second\\nparameter.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.mkdtemp(&#39;/tmp/foo-&#39;, (err, folder) =&gt; {\\n  console.log(folder);\\n    // Prints: /tmp/foo-itXde2\\n});\\n</code></pre>\\n<p><em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected\\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>,\\nthe <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator\\n(<code>require(&#39;path&#39;).sep</code>).</p>\\n<pre><code class=\\\"lang-js\\\">// The parent directory for the new temporary directory\\nconst tmpDir = &#39;/tmp&#39;;\\n\\n// This method is *INCORRECT*:\\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\\n  if (err) throw err;\\n  console.log(folder);\\n    // Will print something similar to `/tmpabc123`.\\n    // Note that a new temporary directory is created\\n    // at the file system root rather than *within*\\n    // the /tmp directory.\\n});\\n\\n// This method is *CORRECT*:\\nconst path = require(&#39;path&#39;);\\nfs.mkdtemp(tmpDir + path.sep, (err, folder) =&gt; {\\n  if (err) throw err;\\n  console.log(folder);\\n    // Will print something similar to `/tmp/abc123`.\\n    // A new temporary directory is created within\\n    // the /tmp directory.\\n});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"prefix\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"fs.mkdtempSync(prefix)\",\n          \"type\": \"method\",\n          \"name\": \"mkdtempSync\",\n          \"meta\": {\n            \"added\": [\n              \"v5.10.0\"\n            ]\n          },\n          \"desc\": \"<p>The synchronous version of [<code>fs.mkdtemp()</code>][]. Returns the created\\nfolder path.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"prefix\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"fs.open(path, flags[, mode], callback)\",\n          \"type\": \"method\",\n          \"name\": \"open\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`flags` {String | Number} \",\n                  \"name\": \"flags\",\n                  \"type\": \"String | Number\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"flags\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous file open. See open(2). <code>flags</code> can be:</p>\\n<ul>\\n<li><p><code>&#39;r&#39;</code> - Open file for reading.\\nAn exception occurs if the file does not exist.</p>\\n</li>\\n<li><p><code>&#39;r+&#39;</code> - Open file for reading and writing.\\nAn exception occurs if the file does not exist.</p>\\n</li>\\n<li><p><code>&#39;rs+&#39;</code> - Open file for reading and writing in synchronous mode. Instructs\\nthe operating system to bypass the local file system cache.</p>\\n<p>This is primarily useful for opening files on NFS mounts as it allows you to\\nskip the potentially stale local cache. It has a very real impact on I/O\\nperformance so don&#39;t use this flag unless you need it.</p>\\n<p>Note that this doesn&#39;t turn <code>fs.open()</code> into a synchronous blocking call.\\nIf that&#39;s what you want then you should be using <code>fs.openSync()</code></p>\\n</li>\\n<li><p><code>&#39;w&#39;</code> - Open file for writing.\\nThe file is created (if it does not exist) or truncated (if it exists).</p>\\n</li>\\n<li><p><code>&#39;wx&#39;</code> - Like <code>&#39;w&#39;</code> but fails if <code>path</code> exists.</p>\\n</li>\\n<li><p><code>&#39;w+&#39;</code> - Open file for reading and writing.\\nThe file is created (if it does not exist) or truncated (if it exists).</p>\\n</li>\\n<li><p><code>&#39;wx+&#39;</code> - Like <code>&#39;w+&#39;</code> but fails if <code>path</code> exists.</p>\\n</li>\\n<li><p><code>&#39;a&#39;</code> - Open file for appending.\\nThe file is created if it does not exist.</p>\\n</li>\\n<li><p><code>&#39;ax&#39;</code> - Like <code>&#39;a&#39;</code> but fails if <code>path</code> exists.</p>\\n</li>\\n<li><p><code>&#39;a+&#39;</code> - Open file for reading and appending.\\nThe file is created if it does not exist.</p>\\n</li>\\n<li><p><code>&#39;ax+&#39;</code> - Like <code>&#39;a+&#39;</code> but fails if <code>path</code> exists.</p>\\n</li>\\n</ul>\\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\\ncreated. It defaults to <code>0666</code>, readable and writable.</p>\\n<p>The callback gets two arguments <code>(err, fd)</code>.</p>\\n<p>The exclusive flag <code>&#39;x&#39;</code> (<code>O_EXCL</code> flag in open(2)) ensures that <code>path</code> is newly\\ncreated. On POSIX systems, <code>path</code> is considered to exist even if it is a symlink\\nto a non-existent file. The exclusive flag may or may not work with network file\\nsystems.</p>\\n<p><code>flags</code> can also be a number as documented by open(2); commonly used constants\\nare available from <code>require(&#39;constants&#39;)</code>.  On Windows, flags are translated to\\ntheir equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>,\\nor <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by CreateFileW.</p>\\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\\nThe kernel ignores the position argument and always appends the data to\\nthe end of the file.</p>\\n<p><em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such,\\nopening a directory on OS X and Linux with the <code>&#39;a+&#39;</code> flag - see example below -\\nwill return an error. In contrast, on Windows and FreeBSD, a file descriptor\\nwill be returned.</em></p>\\n<pre><code class=\\\"lang-js\\\">// OS X and Linux\\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\\n})\\n\\n// Windows and FreeBSD\\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\\n  // =&gt; null, &lt;fd&gt;\\n})\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.openSync(path, flags[, mode])\",\n          \"type\": \"method\",\n          \"name\": \"openSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`flags` {String | Number} \",\n                  \"name\": \"flags\",\n                  \"type\": \"String | Number\"\n                },\n                {\n                  \"textRaw\": \"`mode` {Integer} \",\n                  \"name\": \"mode\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"flags\"\n                },\n                {\n                  \"name\": \"mode\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.open()</code>][]. Returns an integer representing the file\\ndescriptor.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.read(fd, buffer, offset, length, position, callback)\",\n          \"type\": \"method\",\n          \"name\": \"read\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`buffer` {String | Buffer} \",\n                  \"name\": \"buffer\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`offset` {Integer} \",\n                  \"name\": \"offset\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`length` {Integer} \",\n                  \"name\": \"length\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"buffer\"\n                },\n                {\n                  \"name\": \"offset\"\n                },\n                {\n                  \"name\": \"length\"\n                },\n                {\n                  \"name\": \"position\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Read data from the file specified by <code>fd</code>.</p>\\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\\n<p><code>position</code> is an integer specifying where to begin reading from in the file.\\nIf <code>position</code> is <code>null</code>, data will be read from the current file position.</p>\\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readdir(path[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"readdir\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.8\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous readdir(3).  Reads the contents of a directory.\\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readdirSync(path[, options])\",\n          \"type\": \"method\",\n          \"name\": \"readdirSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous readdir(3). Returns an array of filenames excluding <code>&#39;.&#39;</code> and\\n<code>&#39;..&#39;</code>.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readFile(file[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"readFile\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.29\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Integer} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Integer\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `null` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `null`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'r'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'r'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronously reads the entire contents of a file. Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\\n  if (err) throw err;\\n  console.log(data);\\n});\\n</code></pre>\\n<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\\ncontents of the file.</p>\\n<p>If no encoding is specified, then the raw buffer is returned.</p>\\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\\n</code></pre>\\n<p>Any specified file descriptor has to support reading.</p>\\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readFileSync(file[, options])\",\n          \"type\": \"method\",\n          \"name\": \"readFileSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.8\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Integer} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Integer\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `null` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `null`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'r'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'r'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.readFile</code>][]. Returns the contents of the <code>file</code>.</p>\\n<p>If the <code>encoding</code> option is specified then this function returns a\\nstring. Otherwise it returns a buffer.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readlink(path[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"readlink\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous readlink(2). The callback gets two arguments <code>(err,\\nlinkString)</code>.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readlinkSync(path[, options])\",\n          \"type\": \"method\",\n          \"name\": \"readlinkSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous readlink(2). Returns the symbolic link&#39;s string value.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.readSync(fd, buffer, offset, length, position)\",\n          \"type\": \"method\",\n          \"name\": \"readSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`buffer` {String | Buffer} \",\n                  \"name\": \"buffer\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`offset` {Integer} \",\n                  \"name\": \"offset\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`length` {Integer} \",\n                  \"name\": \"length\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"buffer\"\n                },\n                {\n                  \"name\": \"offset\"\n                },\n                {\n                  \"name\": \"length\"\n                },\n                {\n                  \"name\": \"position\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.read()</code>][]. Returns the number of <code>bytesRead</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.realpath(path[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"realpath\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous realpath(3). The <code>callback</code> gets two arguments <code>(err,\\nresolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe path returned will be passed as a <code>Buffer</code> object.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.realpathSync(path[, options])\",\n          \"type\": \"method\",\n          \"name\": \"realpathSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer}; \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\",\n                  \"desc\": \";\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous realpath(3). Returns the resolved path.</p>\\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\\nobject with an <code>encoding</code> property specifying the character encoding to use for\\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\\nthe path returned will be passed as a <code>Buffer</code> object.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.rename(oldPath, newPath, callback)\",\n          \"type\": \"method\",\n          \"name\": \"rename\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`oldPath` {String | Buffer} \",\n                  \"name\": \"oldPath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`newPath` {String | Buffer} \",\n                  \"name\": \"newPath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"oldPath\"\n                },\n                {\n                  \"name\": \"newPath\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous rename(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.renameSync(oldPath, newPath)\",\n          \"type\": \"method\",\n          \"name\": \"renameSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`oldPath` {String | Buffer} \",\n                  \"name\": \"oldPath\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`newPath` {String | Buffer} \",\n                  \"name\": \"newPath\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"oldPath\"\n                },\n                {\n                  \"name\": \"newPath\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous rename(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.rmdir(path, callback)\",\n          \"type\": \"method\",\n          \"name\": \"rmdir\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous rmdir(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.rmdirSync(path)\",\n          \"type\": \"method\",\n          \"name\": \"rmdirSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous rmdir(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.stat(path, callback)\",\n          \"type\": \"method\",\n          \"name\": \"stat\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\\n<code>stats</code> is a [<code>fs.Stats</code>][] object.  See the [<code>fs.Stats</code>][] section for more\\ninformation.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.statSync(path)\",\n          \"type\": \"method\",\n          \"name\": \"statSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous stat(2). Returns an instance of [<code>fs.Stats</code>][].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.symlink(target, path[, type], callback)\",\n          \"type\": \"method\",\n          \"name\": \"symlink\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`target` {String | Buffer} \",\n                  \"name\": \"target\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`type` {String} \",\n                  \"name\": \"type\",\n                  \"type\": \"String\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"target\"\n                },\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"type\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous symlink(2). No arguments other than a possible exception are given\\nto the completion callback.\\nThe <code>type</code> argument can be set to <code>&#39;dir&#39;</code>, <code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> (default\\nis <code>&#39;file&#39;</code>) and is only available on Windows (ignored on other platforms).\\nNote that Windows junction points require the destination path to be absolute.  When using\\n<code>&#39;junction&#39;</code>, the <code>target</code> argument will automatically be normalized to absolute path.</p>\\n<p>Here is an example below:</p>\\n<pre><code class=\\\"lang-js\\\">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;);\\n</code></pre>\\n<p>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.symlinkSync(target, path[, type])\",\n          \"type\": \"method\",\n          \"name\": \"symlinkSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`target` {String | Buffer} \",\n                  \"name\": \"target\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`type` {String} \",\n                  \"name\": \"type\",\n                  \"type\": \"String\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"target\"\n                },\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"type\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous symlink(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.truncate(path, len, callback)\",\n          \"type\": \"method\",\n          \"name\": \"truncate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.8.6\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`len` {Integer} \",\n                  \"name\": \"len\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"len\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous truncate(2). No arguments other than a possible exception are\\ngiven to the completion callback. A file descriptor can also be passed as the\\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.truncateSync(path, len)\",\n          \"type\": \"method\",\n          \"name\": \"truncateSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.8.6\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`len` {Integer} \",\n                  \"name\": \"len\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"len\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous truncate(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.unlink(path, callback)\",\n          \"type\": \"method\",\n          \"name\": \"unlink\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronous unlink(2). No arguments other than a possible exception are given\\nto the completion callback.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.unlinkSync(path)\",\n          \"type\": \"method\",\n          \"name\": \"unlinkSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous unlink(2). Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.unwatchFile(filename[, listener])\",\n          \"type\": \"method\",\n          \"name\": \"unwatchFile\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`filename` {String | Buffer} \",\n                  \"name\": \"filename\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`listener` {Function} \",\n                  \"name\": \"listener\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"filename\"\n                },\n                {\n                  \"name\": \"listener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed and you\\nhave effectively stopped watching <code>filename</code>.</p>\\n<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\\nno-op, not an error.</p>\\n<p><em>Note: [<code>fs.watch()</code>][] is more efficient than <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>.\\n<code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>\\nwhen possible.</em></p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.utimes(path, atime, mtime, callback)\",\n          \"type\": \"method\",\n          \"name\": \"utimes\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`atime` {Integer} \",\n                  \"name\": \"atime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mtime` {Integer} \",\n                  \"name\": \"mtime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"atime\"\n                },\n                {\n                  \"name\": \"mtime\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Change file timestamps of the file referenced by the supplied path.</p>\\n<p>Note: the arguments <code>atime</code> and <code>mtime</code> of the following related functions does\\nfollow the below rules:</p>\\n<ul>\\n<li>If the value is a numberable string like <code>&#39;123456789&#39;</code>, the value would get\\nconverted to corresponding number.</li>\\n<li>If the value is <code>NaN</code> or <code>Infinity</code>, the value would get converted to\\n<code>Date.now()</code>.</li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.utimesSync(path, atime, mtime)\",\n          \"type\": \"method\",\n          \"name\": \"utimesSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.4.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String | Buffer} \",\n                  \"name\": \"path\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`atime` {Integer} \",\n                  \"name\": \"atime\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`mtime` {Integer} \",\n                  \"name\": \"mtime\",\n                  \"type\": \"Integer\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"atime\"\n                },\n                {\n                  \"name\": \"mtime\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous version of [<code>fs.utimes()</code>][]. Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.watch(filename[, options][, listener])\",\n          \"type\": \"method\",\n          \"name\": \"watch\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.10\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`filename` {String | Buffer} \",\n                  \"name\": \"filename\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {String | Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`persistent` {Boolean} Indicates whether the process should continue to run as long as files are being watched. default = `true` \",\n                      \"name\": \"persistent\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Indicates whether the process should continue to run as long as files are being watched. default = `true`\"\n                    },\n                    {\n                      \"textRaw\": \"`recursive` {Boolean} Indicates whether all subdirectories should be watched, or only the current directory. The applies when a directory is specified, and only on supported platforms (See [Caveats][]). default = `false` \",\n                      \"name\": \"recursive\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Indicates whether all subdirectories should be watched, or only the current directory. The applies when a directory is specified, and only on supported platforms (See [Caveats][]). default = `false`\"\n                    },\n                    {\n                      \"textRaw\": \"`encoding` {String} Specifies the character encoding to be used for the  filename passed to the listener. default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String\",\n                      \"desc\": \"Specifies the character encoding to be used for the  filename passed to the listener. default = `'utf8'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"String | Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`listener` {Function} \",\n                  \"name\": \"listener\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"filename\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"listener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\\ndirectory.  The returned object is a [<code>fs.FSWatcher</code>][].</p>\\n<p>The second argument is optional. If <code>options</code> is provided as a string, it\\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>\\n<p>The listener callback gets two arguments <code>(event, filename)</code>.  <code>event</code> is either\\n<code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file which triggered\\nthe event.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Caveats\",\n              \"name\": \"Caveats\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>The <code>fs.watch</code> API is not 100% consistent across platforms, and is\\nunavailable in some situations.</p>\\n<p>The recursive option is only supported on OS X and Windows.</p>\\n\",\n              \"miscs\": [\n                {\n                  \"textRaw\": \"Availability\",\n                  \"name\": \"Availability\",\n                  \"type\": \"misc\",\n                  \"desc\": \"<p>This feature depends on the underlying operating system providing a way\\nto be notified of filesystem changes.</p>\\n<ul>\\n<li>On Linux systems, this uses [<code>inotify</code>]</li>\\n<li>On BSD systems, this uses [<code>kqueue</code>]</li>\\n<li>On OS X, this uses [<code>kqueue</code>] for files and [<code>FSEvents</code>] for directories.</li>\\n<li>On SunOS systems (including Solaris and SmartOS), this uses [<code>event ports</code>].</li>\\n<li>On Windows systems, this feature depends on [<code>ReadDirectoryChangesW</code>].</li>\\n<li>On Aix systems, this feature depends on [<code>AHAFS</code>], which must be enabled.</li>\\n</ul>\\n<p>If the underlying functionality is not available for some reason, then\\n<code>fs.watch</code> will not be able to function. For example, watching files or\\ndirectories can be unreliable, and in some cases impossible, on network file\\nsystems (NFS, SMB, etc), or host file systems when using virtualization software\\nsuch as Vagrant, Docker, etc.</p>\\n<p>You can still use <code>fs.watchFile</code>, which uses stat polling, but it is slower and\\nless reliable.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"Inodes\",\n                  \"name\": \"Inodes\",\n                  \"type\": \"misc\",\n                  \"desc\": \"<p>On Linux and OS X systems, <code>fs.watch()</code> resolves the path to an [inode][] and\\nwatches the inode. If the watched path is deleted and recreated, it is assigned\\na new inode. The watch will emit an event for the delete but will continue\\nwatching the <em>original</em> inode. Events for the new inode will not be emitted.\\nThis is expected behavior.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"Filename Argument\",\n                  \"name\": \"Filename Argument\",\n                  \"type\": \"misc\",\n                  \"desc\": \"<p>Providing <code>filename</code> argument in the callback is only supported on Linux and\\nWindows.  Even on supported platforms, <code>filename</code> is not always guaranteed to\\nbe provided. Therefore, don&#39;t assume that <code>filename</code> argument is always\\nprovided in the callback, and have some fallback logic if it is null.</p>\\n<pre><code class=\\\"lang-js\\\">fs.watch(&#39;somedir&#39;, (event, filename) =&gt; {\\n  console.log(`event is: ${event}`);\\n  if (filename) {\\n    console.log(`filename provided: ${filename}`);\\n  } else {\\n    console.log(&#39;filename not provided&#39;);\\n  }\\n});\\n</code></pre>\\n\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"fs.watchFile(filename[, options], listener)\",\n          \"type\": \"method\",\n          \"name\": \"watchFile\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`filename` {String | Buffer} \",\n                  \"name\": \"filename\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`persistent` {Boolean} \",\n                      \"name\": \"persistent\",\n                      \"type\": \"Boolean\"\n                    },\n                    {\n                      \"textRaw\": \"`interval` {Integer} \",\n                      \"name\": \"interval\",\n                      \"type\": \"Integer\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`listener` {Function} \",\n                  \"name\": \"listener\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"filename\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"listener\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\\ntime the file is accessed.</p>\\n<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The\\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\\nwhether the process should continue to run as long as files are being watched.\\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\\ntarget should be polled in milliseconds. The default is\\n<code>{ persistent: true, interval: 5007 }</code>.</p>\\n<p>The <code>listener</code> gets two arguments the current stat object and the previous\\nstat object:</p>\\n<pre><code class=\\\"lang-js\\\">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\\n  console.log(`the current mtime is: ${curr.mtime}`);\\n  console.log(`the previous mtime was: ${prev.mtime}`);\\n});\\n</code></pre>\\n<p>These stat objects are instances of <code>fs.Stat</code>.</p>\\n<p>If you want to be notified when the file was modified, not just accessed,\\nyou need to compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>\\n<p><em>Note: when an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it will\\n invoke the listener once, with all the fields zeroed (or, for dates, the Unix\\n Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>, instead\\n of zero. If the file is created later on, the listener will be called again,\\n with the latest stat objects. This is a change in functionality since v0.10.</em></p>\\n<p><em>Note: [<code>fs.watch()</code>][] is more efficient than <code>fs.watchFile</code> and <code>fs.unwatchFile</code>.\\n<code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and <code>fs.unwatchFile</code>\\nwhen possible.</em></p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.write(fd, buffer, offset, length[, position], callback)\",\n          \"type\": \"method\",\n          \"name\": \"write\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`buffer` {String | Buffer} \",\n                  \"name\": \"buffer\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`offset` {Integer} \",\n                  \"name\": \"offset\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`length` {Integer} \",\n                  \"name\": \"length\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"buffer\"\n                },\n                {\n                  \"name\": \"offset\"\n                },\n                {\n                  \"name\": \"length\"\n                },\n                {\n                  \"name\": \"position\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>\\n<p><code>offset</code> and <code>length</code> determine the part of the buffer to be written.</p>\\n<p><code>position</code> refers to the offset from the beginning of the file where this data\\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\\nat the current position. See pwrite(2).</p>\\n<p>The callback will be given three arguments <code>(err, written, buffer)</code> where\\n<code>written</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>\\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\\nwithout waiting for the callback. For this scenario,\\n<code>fs.createWriteStream</code> is strongly recommended.</p>\\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\\nThe kernel ignores the position argument and always appends the data to\\nthe end of the file.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.write(fd, data[, position[, encoding]], callback)\",\n          \"type\": \"method\",\n          \"name\": \"write\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.5\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`encoding` {String} \",\n                  \"name\": \"encoding\",\n                  \"type\": \"String\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"position\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"encoding\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Write <code>data</code> to the file specified by <code>fd</code>.  If <code>data</code> is not a Buffer instance\\nthen the value will be coerced to a string.</p>\\n<p><code>position</code> refers to the offset from the beginning of the file where this data\\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\\nthe current position. See pwrite(2).</p>\\n<p><code>encoding</code> is the expected string encoding.</p>\\n<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\\nbytes written is not the same as string characters. See [<code>Buffer.byteLength</code>][].</p>\\n<p>Unlike when writing <code>buffer</code>, the entire string must be written. No substring\\nmay be specified. This is because the byte offset of the resulting data may not\\nbe the same as the string offset.</p>\\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\\nwithout waiting for the callback. For this scenario,\\n<code>fs.createWriteStream</code> is strongly recommended.</p>\\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\\nThe kernel ignores the position argument and always appends the data to\\nthe end of the file.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.writeFile(file, data[, options], callback)\",\n          \"type\": \"method\",\n          \"name\": \"writeFile\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.29\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Integer} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Integer\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `'utf8'`\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} default = `0o666` \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"default = `0o666`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'w'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'w'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Asynchronously writes data to a file, replacing the file if it already exists.\\n<code>data</code> can be a string or a buffer.</p>\\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer. It defaults\\nto <code>&#39;utf8&#39;</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\\n  if (err) throw err;\\n  console.log(&#39;It\\\\&#39;s saved!&#39;);\\n});\\n</code></pre>\\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\\n<pre><code class=\\\"lang-js\\\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\\n</code></pre>\\n<p>Any specified file descriptor has to support writing.</p>\\n<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\\nwithout waiting for the callback. For this scenario,\\n<code>fs.createWriteStream</code> is strongly recommended.</p>\\n<p><em>Note: Specified file descriptors will not be closed automatically.</em></p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.writeFileSync(file, data[, options])\",\n          \"type\": \"method\",\n          \"name\": \"writeFileSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.29\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`file` {String | Buffer | Integer} filename or file descriptor \",\n                  \"name\": \"file\",\n                  \"type\": \"String | Buffer | Integer\",\n                  \"desc\": \"filename or file descriptor\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object | String} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String | Null} default = `'utf8'` \",\n                      \"name\": \"encoding\",\n                      \"type\": \"String | Null\",\n                      \"desc\": \"default = `'utf8'`\"\n                    },\n                    {\n                      \"textRaw\": \"`mode` {Integer} default = `0o666` \",\n                      \"name\": \"mode\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"default = `0o666`\"\n                    },\n                    {\n                      \"textRaw\": \"`flag` {String} default = `'w'` \",\n                      \"name\": \"flag\",\n                      \"type\": \"String\",\n                      \"desc\": \"default = `'w'`\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object | String\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"file\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The synchronous version of [<code>fs.writeFile()</code>][]. Returns <code>undefined</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"fs.writeSync(fd, buffer, offset, length[, position])\",\n          \"type\": \"method\",\n          \"name\": \"writeSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.21\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`buffer` {String | Buffer} \",\n                  \"name\": \"buffer\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`offset` {Integer} \",\n                  \"name\": \"offset\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`length` {Integer} \",\n                  \"name\": \"length\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"buffer\"\n                },\n                {\n                  \"name\": \"offset\"\n                },\n                {\n                  \"name\": \"length\"\n                },\n                {\n                  \"name\": \"position\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous versions of [<code>fs.write()</code>][]. Returns the number of bytes written.</p>\\n<!-- [end-include:fs.md] -->\\n<!-- [start-include:globals.md] -->\\n\"\n        },\n        {\n          \"textRaw\": \"fs.writeSync(fd, data[, position[, encoding]])\",\n          \"type\": \"method\",\n          \"name\": \"writeSync\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.5\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {Integer} \",\n                  \"name\": \"fd\",\n                  \"type\": \"Integer\"\n                },\n                {\n                  \"textRaw\": \"`data` {String | Buffer} \",\n                  \"name\": \"data\",\n                  \"type\": \"String | Buffer\"\n                },\n                {\n                  \"textRaw\": \"`position` {Integer} \",\n                  \"name\": \"position\",\n                  \"type\": \"Integer\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`encoding` {String} \",\n                  \"name\": \"encoding\",\n                  \"type\": \"String\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                },\n                {\n                  \"name\": \"data\"\n                },\n                {\n                  \"name\": \"position\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"encoding\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Synchronous versions of [<code>fs.write()</code>][]. Returns the number of bytes written.</p>\\n<!-- [end-include:fs.md] -->\\n<!-- [start-include:globals.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"fs\"\n    },\n    {\n      \"textRaw\": \"HTTP\",\n      \"name\": \"http\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>To use the HTTP server and client one must <code>require(&#39;http&#39;)</code>.</p>\\n<p>The HTTP interfaces in Node.js are designed to support many features\\nof the protocol which have been traditionally difficult to use.\\nIn particular, large, possibly chunk-encoded, messages. The interface is\\ncareful to never buffer entire requests or responses--the\\nuser is able to stream data.</p>\\n<p>HTTP message headers are represented by an object like this:</p>\\n<pre><code>{ &#39;content-length&#39;: &#39;123&#39;,\\n  &#39;content-type&#39;: &#39;text/plain&#39;,\\n  &#39;connection&#39;: &#39;keep-alive&#39;,\\n  &#39;host&#39;: &#39;mysite.com&#39;,\\n  &#39;accept&#39;: &#39;*/*&#39; }\\n</code></pre><p>Keys are lowercased. Values are not modified.</p>\\n<p>In order to support the full spectrum of possible HTTP applications, Node.js&#39;s\\nHTTP API is very low-level. It deals with stream handling and message\\nparsing only. It parses a message into headers and body but it does not\\nparse the actual headers or the body.</p>\\n<p>See [<code>message.headers</code>][] for details on how duplicate headers are handled.</p>\\n<p>The raw headers as they were received are retained in the <code>rawHeaders</code>\\nproperty, which is an array of <code>[key, value, key2, value2, ...]</code>.  For\\nexample, the previous message header object might have a <code>rawHeaders</code>\\nlist like the following:</p>\\n<pre><code>[ &#39;ConTent-Length&#39;, &#39;123456&#39;,\\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\\n  &#39;content-type&#39;, &#39;text/plain&#39;,\\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\\n  &#39;Host&#39;, &#39;mysite.com&#39;,\\n  &#39;accepT&#39;, &#39;*/*&#39; ]\\n</code></pre>\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: http.Agent\",\n          \"type\": \"class\",\n          \"name\": \"http.Agent\",\n          \"desc\": \"<p>The HTTP Agent is used for pooling sockets used in HTTP client\\nrequests.</p>\\n<p>The HTTP Agent also defaults client requests to using\\nConnection:keep-alive. If no pending HTTP requests are waiting on a\\nsocket to become free the socket is closed. This means that Node.js&#39;s\\npool has the benefit of keep-alive when under load but still does not\\nrequire developers to manually close the HTTP clients using\\nKeepAlive.</p>\\n<p>If you opt into using HTTP KeepAlive, you can create an Agent object\\nwith that flag set to <code>true</code>.  (See the [constructor options][].)\\nThen, the Agent will keep unused sockets in a pool for later use.  They\\nwill be explicitly marked so as to not keep the Node.js process running.\\nHowever, it is still a good idea to explicitly [<code>destroy()</code>][] KeepAlive\\nagents when they are no longer in use, so that the Sockets will be shut\\ndown.</p>\\n<p>Sockets are removed from the agent&#39;s pool when the socket emits either\\na <code>&#39;close&#39;</code> event or a special <code>&#39;agentRemove&#39;</code> event. This means that if\\nyou intend to keep one HTTP request open for a long time and don&#39;t\\nwant it to stay in the pool you can do something along the lines of:</p>\\n<pre><code class=\\\"lang-js\\\">http.get(options, (res) =&gt; {\\n  // Do stuff\\n}).on(&#39;socket&#39;, (socket) =&gt; {\\n  socket.emit(&#39;agentRemove&#39;);\\n});\\n</code></pre>\\n<p>Alternatively, you could just opt out of pooling entirely using\\n<code>agent:false</code>:</p>\\n<pre><code class=\\\"lang-js\\\">http.get({\\n  hostname: &#39;localhost&#39;,\\n  port: 80,\\n  path: &#39;/&#39;,\\n  agent: false  // create a new agent just for this one request\\n}, (res) =&gt; {\\n  // Do stuff with response\\n})\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"agent.createConnection(options[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"createConnection\",\n              \"desc\": \"<p>Produces a socket/stream to be used for HTTP requests.</p>\\n<p>By default, this function is the same as [<code>net.createConnection()</code>][]. However,\\ncustom Agents may override this method in case greater flexibility is desired.</p>\\n<p>A socket/stream can be supplied in one of two ways: by returning the\\nsocket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p>\\n<p><code>callback</code> has a signature of <code>(err, stream)</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"agent.destroy()\",\n              \"type\": \"method\",\n              \"name\": \"destroy\",\n              \"desc\": \"<p>Destroy any sockets that are currently in use by the agent.</p>\\n<p>It is usually not necessary to do this.  However, if you are using an\\nagent with KeepAlive enabled, then it is best to explicitly shut down\\nthe agent when you know that it will no longer be used.  Otherwise,\\nsockets may hang open for quite a long time before the server\\nterminates them.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"agent.getName(options)\",\n              \"type\": \"method\",\n              \"name\": \"getName\",\n              \"desc\": \"<p>Get a unique name for a set of request options, to determine whether a\\nconnection can be reused.  In the http agent, this returns\\n<code>host:port:localAddress</code>.  In the https agent, the name includes the\\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\\nsocket reusability.</p>\\n<p>Options:</p>\\n<ul>\\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.</li>\\n<li><code>port</code>: Port of remote server.</li>\\n<li><code>localAddress</code>: Local interface to bind for network connections when issuing\\nthe request.</li>\\n</ul>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"agent.freeSockets\",\n              \"name\": \"freeSockets\",\n              \"desc\": \"<p>An object which contains arrays of sockets currently awaiting use by\\nthe Agent when HTTP KeepAlive is used.  Do not modify.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"agent.maxFreeSockets\",\n              \"name\": \"maxFreeSockets\",\n              \"desc\": \"<p>By default set to 256.  For Agents supporting HTTP KeepAlive, this\\nsets the maximum number of sockets that will be left open in the free\\nstate.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"agent.maxSockets\",\n              \"name\": \"maxSockets\",\n              \"desc\": \"<p>By default set to Infinity. Determines how many concurrent sockets the agent\\ncan have open per origin. Origin is either a &#39;host:port&#39; or\\n&#39;host:port:localAddress&#39; combination.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"agent.requests\",\n              \"name\": \"requests\",\n              \"desc\": \"<p>An object which contains queues of requests that have not yet been assigned to\\nsockets. Do not modify.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"agent.sockets\",\n              \"name\": \"sockets\",\n              \"desc\": \"<p>An object which contains arrays of sockets currently in use by the\\nAgent.  Do not modify.</p>\\n\"\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} Set of configurable options to set on the agent. Can have the following fields: \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`keepAlive` {Boolean} Keep sockets around in a pool to be used by other requests in the future. Default = `false` \",\n                      \"name\": \"keepAlive\",\n                      \"type\": \"Boolean\",\n                      \"desc\": \"Keep sockets around in a pool to be used by other requests in the future. Default = `false`\"\n                    },\n                    {\n                      \"textRaw\": \"`keepAliveMsecs` {Integer} When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = `1000`.  Only relevant if `keepAlive` is set to `true`. \",\n                      \"name\": \"keepAliveMsecs\",\n                      \"type\": \"Integer\",\n                      \"desc\": \"When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = `1000`.  Only relevant if `keepAlive` is set to `true`.\"\n                    },\n                    {\n                      \"textRaw\": \"`maxSockets` {Number} Maximum number of sockets to allow per host.  Default = `Infinity`. \",\n                      \"name\": \"maxSockets\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Maximum number of sockets to allow per host.  Default = `Infinity`.\"\n                    },\n                    {\n                      \"textRaw\": \"`maxFreeSockets` {Number} Maximum number of sockets to leave open in a free state.  Only relevant if `keepAlive` is set to `true`. Default = `256`. \",\n                      \"name\": \"maxFreeSockets\",\n                      \"type\": \"Number\",\n                      \"desc\": \"Maximum number of sockets to leave open in a free state.  Only relevant if `keepAlive` is set to `true`. Default = `256`.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"desc\": \"Set of configurable options to set on the agent. Can have the following fields:\",\n                  \"optional\": true\n                }\n              ],\n              \"desc\": \"<p>The default [<code>http.globalAgent</code>][] that is used by [<code>http.request()</code>][] has all\\nof these values set to their respective defaults.</p>\\n<p>To configure any of them, you must create your own [<code>http.Agent</code>][] object.</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\nvar keepAliveAgent = new http.Agent({ keepAlive: true });\\noptions.agent = keepAliveAgent;\\nhttp.request(options, onResponseCallback);\\n</code></pre>\\n\"\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ],\n              \"desc\": \"<p>The default [<code>http.globalAgent</code>][] that is used by [<code>http.request()</code>][] has all\\nof these values set to their respective defaults.</p>\\n<p>To configure any of them, you must create your own [<code>http.Agent</code>][] object.</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\nvar keepAliveAgent = new http.Agent({ keepAlive: true });\\noptions.agent = keepAliveAgent;\\nhttp.request(options, onResponseCallback);\\n</code></pre>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: http.ClientRequest\",\n          \"type\": \"class\",\n          \"name\": \"http.ClientRequest\",\n          \"desc\": \"<p>This object is created internally and returned from [<code>http.request()</code>][].  It\\nrepresents an <em>in-progress</em> request whose header has already been queued.  The\\nheader is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,\\n<code>removeHeader(name)</code> API.  The actual header will be sent along with the first\\ndata chunk or when closing the connection.</p>\\n<p>To get the response, add a listener for <code>&#39;response&#39;</code> to the request object.\\n<code>&#39;response&#39;</code> will be emitted from the request object when the response\\nheaders have been received.  The <code>&#39;response&#39;</code> event is executed with one\\nargument which is an instance of [<code>http.IncomingMessage</code>][].</p>\\n<p>During the <code>&#39;response&#39;</code> event, one can add listeners to the\\nresponse object; particularly to listen for the <code>&#39;data&#39;</code> event.</p>\\n<p>If no <code>&#39;response&#39;</code> handler is added, then the response will be\\nentirely discarded.  However, if you add a <code>&#39;response&#39;</code> event handler,\\nthen you <strong>must</strong> consume the data from the response object, either by\\ncalling <code>response.read()</code> whenever there is a <code>&#39;readable&#39;</code> event, or\\nby adding a <code>&#39;data&#39;</code> handler, or by calling the <code>.resume()</code> method.\\nUntil the data is consumed, the <code>&#39;end&#39;</code> event will not fire.  Also, until\\nthe data is read it will consume memory that can eventually lead to a\\n&#39;process out of memory&#39; error.</p>\\n<p>Note: Node.js does not check whether Content-Length and the length of the body\\nwhich has been transmitted are equal or not.</p>\\n<p>The request implements the [Writable Stream][] interface. This is an\\n[<code>EventEmitter</code>][] with the following events:</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'abort'\",\n              \"type\": \"event\",\n              \"name\": \"abort\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Emitted when the request has been aborted by the client. This event is only\\nemitted on the first call to <code>abort()</code>.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'checkExpectation'\",\n              \"type\": \"event\",\n              \"name\": \"checkExpectation\",\n              \"desc\": \"<p><code>function (request, response) { }</code></p>\\n<p>Emitted each time a request with an http Expect header is received, where the\\nvalue is not 100-continue. If this event isn&#39;t listened for, the server will\\nautomatically respond with a 417 Expectation Failed as appropriate.</p>\\n<p>Note that when this event is emitted and handled, the <code>request</code> event will\\nnot be emitted.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'connect'\",\n              \"type\": \"event\",\n              \"name\": \"connect\",\n              \"desc\": \"<p><code>function (response, socket, head) { }</code></p>\\n<p>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this\\nevent isn&#39;t being listened for, clients receiving a <code>CONNECT</code> method will have\\ntheir connections closed.</p>\\n<p>A client server pair that show you how to listen for the <code>&#39;connect&#39;</code> event.</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\nconst net = require(&#39;net&#39;);\\nconst url = require(&#39;url&#39;);\\n\\n// Create an HTTP tunneling proxy\\nvar proxy = http.createServer( (req, res) =&gt; {\\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\\n  res.end(&#39;okay&#39;);\\n});\\nproxy.on(&#39;connect&#39;, (req, cltSocket, head) =&gt; {\\n  // connect to an origin server\\n  var srvUrl = url.parse(`http://${req.url}`);\\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\\\\r\\\\n&#39; +\\n                    &#39;Proxy-agent: Node.js-Proxy\\\\r\\\\n&#39; +\\n                    &#39;\\\\r\\\\n&#39;);\\n    srvSocket.write(head);\\n    srvSocket.pipe(cltSocket);\\n    cltSocket.pipe(srvSocket);\\n  });\\n});\\n\\n// now that proxy is running\\nproxy.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\\n\\n  // make a request to a tunneling proxy\\n  var options = {\\n    port: 1337,\\n    hostname: &#39;127.0.0.1&#39;,\\n    method: &#39;CONNECT&#39;,\\n    path: &#39;www.google.com:80&#39;\\n  };\\n\\n  var req = http.request(options);\\n  req.end();\\n\\n  req.on(&#39;connect&#39;, (res, socket, head) =&gt; {\\n    console.log(&#39;got connected!&#39;);\\n\\n    // make a request over an HTTP tunnel\\n    socket.write(&#39;GET / HTTP/1.1\\\\r\\\\n&#39; +\\n                 &#39;Host: www.google.com:80\\\\r\\\\n&#39; +\\n                 &#39;Connection: close\\\\r\\\\n&#39; +\\n                 &#39;\\\\r\\\\n&#39;);\\n    socket.on(&#39;data&#39;, (chunk) =&gt; {\\n      console.log(chunk.toString());\\n    });\\n    socket.on(&#39;end&#39;, () =&gt; {\\n      proxy.close();\\n    });\\n  });\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'continue'\",\n              \"type\": \"event\",\n              \"name\": \"continue\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Emitted when the server sends a &#39;100 Continue&#39; HTTP response, usually because\\nthe request contained &#39;Expect: 100-continue&#39;. This is an instruction that\\nthe client should send the request body.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'response'\",\n              \"type\": \"event\",\n              \"name\": \"response\",\n              \"desc\": \"<p><code>function (response) { }</code></p>\\n<p>Emitted when a response is received to this request. This event is emitted only\\nonce. The <code>response</code> argument will be an instance of [<code>http.IncomingMessage</code>][].</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'socket'\",\n              \"type\": \"event\",\n              \"name\": \"socket\",\n              \"desc\": \"<p><code>function (socket) { }</code></p>\\n<p>Emitted after a socket is assigned to this request.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'upgrade'\",\n              \"type\": \"event\",\n              \"name\": \"upgrade\",\n              \"desc\": \"<p><code>function (response, socket, head) { }</code></p>\\n<p>Emitted each time a server responds to a request with an upgrade. If this\\nevent isn&#39;t being listened for, clients receiving an upgrade header will have\\ntheir connections closed.</p>\\n<p>A client server pair that show you how to listen for the <code>&#39;upgrade&#39;</code> event.</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\n\\n// Create an HTTP server\\nvar srv = http.createServer( (req, res) =&gt; {\\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\\n  res.end(&#39;okay&#39;);\\n});\\nsrv.on(&#39;upgrade&#39;, (req, socket, head) =&gt; {\\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\\\\r\\\\n&#39; +\\n               &#39;Upgrade: WebSocket\\\\r\\\\n&#39; +\\n               &#39;Connection: Upgrade\\\\r\\\\n&#39; +\\n               &#39;\\\\r\\\\n&#39;);\\n\\n  socket.pipe(socket); // echo back\\n});\\n\\n// now that server is running\\nsrv.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\\n\\n  // make a request\\n  var options = {\\n    port: 1337,\\n    hostname: &#39;127.0.0.1&#39;,\\n    headers: {\\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\\n      &#39;Upgrade&#39;: &#39;websocket&#39;\\n    }\\n  };\\n\\n  var req = http.request(options);\\n  req.end();\\n\\n  req.on(&#39;upgrade&#39;, (res, socket, upgradeHead) =&gt; {\\n    console.log(&#39;got upgraded!&#39;);\\n    socket.end();\\n    process.exit(0);\\n  });\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"request.abort()\",\n              \"type\": \"method\",\n              \"name\": \"abort\",\n              \"desc\": \"<p>Marks the request as aborting. Calling this will cause remaining data\\nin the response to be dropped and the socket to be destroyed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.end([data][, encoding][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"end\",\n              \"desc\": \"<p>Finishes sending the request. If any parts of the body are\\nunsent, it will flush them to the stream. If the request is\\nchunked, this will send the terminating <code>&#39;0\\\\r\\\\n\\\\r\\\\n&#39;</code>.</p>\\n<p>If <code>data</code> is specified, it is equivalent to calling\\n[<code>response.write(data, encoding)</code>][] followed by <code>request.end(callback)</code>.</p>\\n<p>If <code>callback</code> is specified, it will be called when the request stream\\nis finished.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.flushHeaders()\",\n              \"type\": \"method\",\n              \"name\": \"flushHeaders\",\n              \"desc\": \"<p>Flush the request headers.</p>\\n<p>For efficiency reasons, Node.js normally buffers the request headers until you\\ncall <code>request.end()</code> or write the first chunk of request data.  It then tries\\nhard to pack the request headers and data into a single TCP packet.</p>\\n<p>That&#39;s usually what you want (it saves a TCP round-trip) but not when the first\\ndata isn&#39;t sent until possibly much later.  <code>request.flushHeaders()</code> lets you bypass\\nthe optimization and kickstart the request.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.setNoDelay([noDelay])\",\n              \"type\": \"method\",\n              \"name\": \"setNoDelay\",\n              \"desc\": \"<p>Once a socket is assigned to this request and is connected\\n[<code>socket.setNoDelay()</code>][] will be called.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"noDelay\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.setSocketKeepAlive([enable][, initialDelay])\",\n              \"type\": \"method\",\n              \"name\": \"setSocketKeepAlive\",\n              \"desc\": \"<p>Once a socket is assigned to this request and is connected\\n[<code>socket.setKeepAlive()</code>][] will be called.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"enable\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"initialDelay\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.setTimeout(timeout[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"desc\": \"<p>Once a socket is assigned to this request and is connected\\n[<code>socket.setTimeout()</code>][] will be called.</p>\\n<ul>\\n<li><code>timeout</code> {Number} Milliseconds before a request is considered to be timed out.</li>\\n<li><code>callback</code> {Function} Optional function to be called when a timeout occurs. Same as binding to the <code>timeout</code> event.</li>\\n</ul>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"timeout\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"request.write(chunk[, encoding][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"desc\": \"<p>Sends a chunk of the body.  By calling this method\\nmany times, the user can stream a request body to a\\nserver--in that case it is suggested to use the\\n<code>[&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]</code> header line when\\ncreating the request.</p>\\n<p>The <code>chunk</code> argument should be a [<code>Buffer</code>][] or a string.</p>\\n<p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.\\nDefaults to <code>&#39;utf8&#39;</code>.</p>\\n<p>The <code>callback</code> argument is optional and will be called when this chunk of data\\nis flushed.</p>\\n<p>Returns <code>request</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"chunk\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: http.Server\",\n          \"type\": \"class\",\n          \"name\": \"http.Server\",\n          \"desc\": \"<p>This class inherits from [<code>net.Server</code>][] and has the following additional events:</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'checkContinue'\",\n              \"type\": \"event\",\n              \"name\": \"checkContinue\",\n              \"desc\": \"<p><code>function (request, response) { }</code></p>\\n<p>Emitted each time a request with an http Expect: 100-continue is received.\\nIf this event isn&#39;t listened for, the server will automatically respond\\nwith a 100 Continue as appropriate.</p>\\n<p>Handling this event involves calling [<code>response.writeContinue()</code>][] if the client\\nshould continue to send the request body, or generating an appropriate HTTP\\nresponse (e.g., 400 Bad Request) if the client should not continue to send the\\nrequest body.</p>\\n<p>Note that when this event is emitted and handled, the <code>&#39;request&#39;</code> event will\\nnot be emitted.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'clientError'\",\n              \"type\": \"event\",\n              \"name\": \"clientError\",\n              \"desc\": \"<p><code>function (exception, socket) { }</code></p>\\n<p>If a client connection emits an <code>&#39;error&#39;</code> event, it will be forwarded here.\\nListener of this event is responsible for closing/destroying the underlying\\nsocket. For example, one may wish to more gracefully close the socket with an\\nHTTP &#39;400 Bad Request&#39; response instead of abruptly severing the connection.</p>\\n<p>Default behavior is to destroy the socket immediately on malformed request.</p>\\n<p><code>socket</code> is the [<code>net.Socket</code>][] object that the error originated from.</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\n\\nconst server = http.createServer((req, res) =&gt; {\\n  res.end();\\n});\\nserver.on(&#39;clientError&#39;, (err, socket) =&gt; {\\n  socket.end(&#39;HTTP/1.1 400 Bad Request\\\\r\\\\n\\\\r\\\\n&#39;);\\n});\\nserver.listen(8000);\\n</code></pre>\\n<p>When the <code>&#39;clientError&#39;</code> event occurs, there is no <code>request</code> or <code>response</code>\\nobject, so any HTTP response sent, including response headers and payload,\\n<em>must</em> be written directly to the <code>socket</code> object. Care must be taken to\\nensure the response is a properly formatted HTTP response message.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Emitted when the server closes.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'connect'\",\n              \"type\": \"event\",\n              \"name\": \"connect\",\n              \"desc\": \"<p><code>function (request, socket, head) { }</code></p>\\n<p>Emitted each time a client requests a http <code>CONNECT</code> method. If this event isn&#39;t\\nlistened for, then clients requesting a <code>CONNECT</code> method will have their\\nconnections closed.</p>\\n<ul>\\n<li><code>request</code> is the arguments for the http request, as it is in the request\\nevent.</li>\\n<li><code>socket</code> is the network socket between the server and client.</li>\\n<li><code>head</code> is an instance of Buffer, the first packet of the tunneling stream,\\nthis may be empty.</li>\\n</ul>\\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\\nevent listener, meaning you will need to bind to it in order to handle data\\nsent to the server on that socket.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'connection'\",\n              \"type\": \"event\",\n              \"name\": \"connection\",\n              \"desc\": \"<p><code>function (socket) { }</code></p>\\n<p>When a new TCP stream is established. <code>socket</code> is an object of type\\n[<code>net.Socket</code>][]. Usually users will not want to access this event. In\\nparticular, the socket will not emit <code>&#39;readable&#39;</code> events because of how\\nthe protocol parser attaches to the socket. The <code>socket</code> can also be\\naccessed at <code>request.connection</code>.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'request'\",\n              \"type\": \"event\",\n              \"name\": \"request\",\n              \"desc\": \"<p><code>function (request, response) { }</code></p>\\n<p>Emitted each time there is a request. Note that there may be multiple requests\\nper connection (in the case of keep-alive connections).\\n <code>request</code> is an instance of [<code>http.IncomingMessage</code>][] and <code>response</code> is\\nan instance of [<code>http.ServerResponse</code>][].</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'upgrade'\",\n              \"type\": \"event\",\n              \"name\": \"upgrade\",\n              \"desc\": \"<p><code>function (request, socket, head) { }</code></p>\\n<p>Emitted each time a client requests a http upgrade. If this event isn&#39;t\\nlistened for, then clients requesting an upgrade will have their connections\\nclosed.</p>\\n<ul>\\n<li><code>request</code> is the arguments for the http request, as it is in the request\\nevent.</li>\\n<li><code>socket</code> is the network socket between the server and client.</li>\\n<li><code>head</code> is an instance of Buffer, the first packet of the upgraded stream,\\nthis may be empty.</li>\\n</ul>\\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\\nevent listener, meaning you will need to bind to it in order to handle data\\nsent to the server on that socket.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"server.close([callback])\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"desc\": \"<p>Stops the server from accepting new connections.  See [<code>net.Server.close()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(handle[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`handle` {Object} \",\n                      \"name\": \"handle\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"handle\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>handle</code> object can be set to either a server or socket (anything\\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>\\n<p>This will cause the server to accept connections on the specified\\nhandle, but it is presumed that the file descriptor or handle has\\nalready been bound to a port or domain socket.</p>\\n<p>Listening on a file descriptor is not supported on Windows.</p>\\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\\na listener for the <code>&#39;listening&#39;</code> event. See also [<code>net.Server.listen()</code>][].</p>\\n<p>Returns <code>server</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.listen(path[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"desc\": \"<p>Start a UNIX socket server listening for connections on the given <code>path</code>.</p>\\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\\na listener for the <code>&#39;listening&#39;</code> event.  See also [<code>net.Server.listen(path)</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"path\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(port[, hostname][, backlog][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"desc\": \"<p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a\\nport value of zero to have the operating system assign an available port.</p>\\n<p>To listen to a unix socket, supply a filename instead of port and hostname.</p>\\n<p>Backlog is the maximum length of the queue of pending connections.\\nThe actual length will be determined by your OS through sysctl settings such as\\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on linux. The default value of this\\nparameter is 511 (not 512).</p>\\n<p>This function is asynchronous. The last parameter <code>callback</code> will be added as\\na listener for the <code>&#39;listening&#39;</code> event.  See also [<code>net.Server.listen(port)</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"hostname\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.setTimeout(msecs, callback)\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`msecs` {Number} \",\n                      \"name\": \"msecs\",\n                      \"type\": \"Number\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"msecs\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets the timeout value for sockets, and emits a <code>&#39;timeout&#39;</code> event on\\nthe Server object, passing the socket as an argument, if a timeout\\noccurs.</p>\\n<p>If there is a <code>&#39;timeout&#39;</code> event listener on the Server object, then it\\nwill be called with the timed-out socket as an argument.</p>\\n<p>By default, the Server&#39;s timeout value is 2 minutes, and sockets are\\ndestroyed automatically if they time out.  However, if you assign a\\ncallback to the Server&#39;s <code>&#39;timeout&#39;</code> event, then you are responsible\\nfor handling socket timeouts.</p>\\n<p>Returns <code>server</code>.</p>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"server.listening\",\n              \"name\": \"listening\",\n              \"desc\": \"<p>A Boolean indicating whether or not the server is listening for\\nconnections.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.maxHeadersCount\",\n              \"name\": \"maxHeadersCount\",\n              \"desc\": \"<p>Limits maximum incoming headers count, equal to 1000 by default. If set to 0 -\\nno limit will be applied.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`timeout` {Number} Default = 120000 (2 minutes) \",\n              \"type\": \"Number\",\n              \"name\": \"timeout\",\n              \"desc\": \"<p>The number of milliseconds of inactivity before a socket is presumed\\nto have timed out.</p>\\n<p>Note that the socket timeout logic is set up on connection, so\\nchanging this value only affects <em>new</em> connections to the server, not\\nany existing connections.</p>\\n<p>Set to 0 to disable any kind of automatic timeout behavior on incoming\\nconnections.</p>\\n\",\n              \"shortDesc\": \"Default = 120000 (2 minutes)\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: http.ServerResponse\",\n          \"type\": \"class\",\n          \"name\": \"http.ServerResponse\",\n          \"desc\": \"<p>This object is created internally by a HTTP server--not by the user. It is\\npassed as the second parameter to the <code>&#39;request&#39;</code> event.</p>\\n<p>The response implements, but does not inherit from, the [Writable Stream][]\\ninterface. This is an [<code>EventEmitter</code>][] with the following events:</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Indicates that the underlying connection was terminated before\\n[<code>response.end()</code>][] was called or able to flush.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'finish'\",\n              \"type\": \"event\",\n              \"name\": \"finish\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Emitted when the response has been sent. More specifically, this event is\\nemitted when the last segment of the response headers and body have been\\nhanded off to the operating system for transmission over the network. It\\ndoes not imply that the client has received anything yet.</p>\\n<p>After this event, no more events will be emitted on the response object.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"response.addTrailers(headers)\",\n              \"type\": \"method\",\n              \"name\": \"addTrailers\",\n              \"desc\": \"<p>This method adds HTTP trailing headers (a header but at the end of the\\nmessage) to the response.</p>\\n<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the\\nresponse; if it is not (e.g., if the request was HTTP/1.0), they will\\nbe silently discarded.</p>\\n<p>Note that HTTP requires the <code>Trailer</code> header to be sent if you intend to\\nemit trailers, with a list of the header fields in its value. E.g.,</p>\\n<pre><code class=\\\"lang-js\\\">response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\\nresponse.write(fileData);\\nresponse.addTrailers({&#39;Content-MD5&#39;: &#39;7895bf4b8828b55ceaf47747b4bca667&#39;});\\nresponse.end();\\n</code></pre>\\n<p>Attempting to set a header field name or value that contains invalid characters\\nwill result in a [<code>TypeError</code>][] being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"headers\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.end([data][, encoding][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"end\",\n              \"desc\": \"<p>This method signals to the server that all of the response headers and body\\nhave been sent; that server should consider this message complete.\\nThe method, <code>response.end()</code>, MUST be called on each response.</p>\\n<p>If <code>data</code> is specified, it is equivalent to calling\\n[<code>response.write(data, encoding)</code>][] followed by <code>response.end(callback)</code>.</p>\\n<p>If <code>callback</code> is specified, it will be called when the response stream\\nis finished.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.getHeader(name)\",\n              \"type\": \"method\",\n              \"name\": \"getHeader\",\n              \"desc\": \"<p>Reads out a header that&#39;s already been queued but not sent to the client.  Note\\nthat the name is case insensitive.  This can only be called before headers get\\nimplicitly flushed.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var contentType = response.getHeader(&#39;content-type&#39;);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"name\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.removeHeader(name)\",\n              \"type\": \"method\",\n              \"name\": \"removeHeader\",\n              \"desc\": \"<p>Removes a header that&#39;s queued for implicit sending.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">response.removeHeader(&#39;Content-Encoding&#39;);\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"name\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.setHeader(name, value)\",\n              \"type\": \"method\",\n              \"name\": \"setHeader\",\n              \"desc\": \"<p>Sets a single header value for implicit headers.  If this header already exists\\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\\nhere if you need to send multiple headers with the same name.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"lang-js\\\">response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\\n</code></pre>\\n<p>Attempting to set a header field name or value that contains invalid characters\\nwill result in a [<code>TypeError</code>][] being thrown.</p>\\n<p>When headers have been set with [<code>response.setHeader()</code>][], they will be merged with\\nany headers passed to [<code>response.writeHead()</code>][], with the headers passed to\\n[<code>response.writeHead()</code>][] given precedence.</p>\\n<pre><code class=\\\"lang-js\\\">// returns content-type = text/plain\\nconst server = http.createServer((req,res) =&gt; {\\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\\n  res.end(&#39;ok&#39;);\\n});\\n</code></pre>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"name\"\n                    },\n                    {\n                      \"name\": \"value\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.setTimeout(msecs, callback)\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`msecs` {Number} \",\n                      \"name\": \"msecs\",\n                      \"type\": \"Number\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"msecs\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Sets the Socket&#39;s timeout value to <code>msecs</code>.  If a callback is\\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\\nthe response object.</p>\\n<p>If no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\\nthe server, then sockets are destroyed when they time out.  If you\\nassign a handler on the request, the response, or the server&#39;s\\n<code>&#39;timeout&#39;</code> events, then it is your responsibility to handle timed out\\nsockets.</p>\\n<p>Returns <code>response</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"response.write(chunk[, encoding][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"desc\": \"<p>If this method is called and [<code>response.writeHead()</code>][] has not been called,\\nit will switch to implicit header mode and flush the implicit headers.</p>\\n<p>This sends a chunk of the response body. This method may\\nbe called multiple times to provide successive parts of the body.</p>\\n<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\\nthe second parameter specifies how to encode it into a byte stream.\\nBy default the <code>encoding</code> is <code>&#39;utf8&#39;</code>. The last parameter <code>callback</code>\\nwill be called when this chunk of data is flushed.</p>\\n<p><strong>Note</strong>: This is the raw HTTP body and has nothing to do with\\nhigher-level multi-part body encodings that may be used.</p>\\n<p>The first time [<code>response.write()</code>][] is called, it will send the buffered\\nheader information and the first body to the client. The second time\\n[<code>response.write()</code>][] is called, Node.js assumes you&#39;re going to be streaming\\ndata, and sends that separately. That is, the response is buffered up to the\\nfirst chunk of body.</p>\\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"chunk\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.writeContinue()\",\n              \"type\": \"method\",\n              \"name\": \"writeContinue\",\n              \"desc\": \"<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that\\nthe request body should be sent. See the [<code>&#39;checkContinue&#39;</code>][] event on <code>Server</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"response.writeHead(statusCode[, statusMessage][, headers])\",\n              \"type\": \"method\",\n              \"name\": \"writeHead\",\n              \"desc\": \"<p>Sends a response header to the request. The status code is a 3-digit HTTP\\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.\\nOptionally one can give a human-readable <code>statusMessage</code> as the second\\nargument.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var body = &#39;hello world&#39;;\\nresponse.writeHead(200, {\\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\\n</code></pre>\\n<p>This method must only be called once on a message and it must\\nbe called before [<code>response.end()</code>][] is called.</p>\\n<p>If you call [<code>response.write()</code>][] or [<code>response.end()</code>][] before calling this,\\nthe implicit/mutable headers will be calculated and call this function for you.</p>\\n<p>When headers have been set with [<code>response.setHeader()</code>][], they will be merged with\\nany headers passed to [<code>response.writeHead()</code>][], with the headers passed to\\n[<code>response.writeHead()</code>][] given precedence.</p>\\n<pre><code class=\\\"lang-js\\\">// returns content-type = text/plain\\nconst server = http.createServer((req,res) =&gt; {\\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\\n  res.end(&#39;ok&#39;);\\n});\\n</code></pre>\\n<p>Note that Content-Length is given in bytes not characters. The above example\\nworks because the string <code>&#39;hello world&#39;</code> contains only single byte characters.\\nIf the body contains higher coded characters then <code>Buffer.byteLength()</code>\\nshould be used to determine the number of bytes in a given encoding.\\nAnd Node.js does not check whether Content-Length and the length of the body\\nwhich has been transmitted are equal or not.</p>\\n<p>Attempting to set a header field name or value that contains invalid characters\\nwill result in a [<code>TypeError</code>][] being thrown.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"statusCode\"\n                    },\n                    {\n                      \"name\": \"statusMessage\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"headers\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"response.finished\",\n              \"name\": \"finished\",\n              \"desc\": \"<p>Boolean value that indicates whether the response has completed. Starts\\nas <code>false</code>. After [<code>response.end()</code>][] executes, the value will be <code>true</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"response.headersSent\",\n              \"name\": \"headersSent\",\n              \"desc\": \"<p>Boolean (read-only). True if headers were sent, false otherwise.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"response.sendDate\",\n              \"name\": \"sendDate\",\n              \"desc\": \"<p>When true, the Date header will be automatically generated and sent in\\nthe response if it is not already present in the headers. Defaults to true.</p>\\n<p>This should only be disabled for testing; HTTP requires the Date header\\nin responses.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"response.statusCode\",\n              \"name\": \"statusCode\",\n              \"desc\": \"<p>When using implicit headers (not calling [<code>response.writeHead()</code>][] explicitly),\\nthis property controls the status code that will be sent to the client when\\nthe headers get flushed.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">response.statusCode = 404;\\n</code></pre>\\n<p>After response header was sent to the client, this property indicates the\\nstatus code which was sent out.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"response.statusMessage\",\n              \"name\": \"statusMessage\",\n              \"desc\": \"<p>When using implicit headers (not calling [<code>response.writeHead()</code>][] explicitly), this property\\ncontrols the status message that will be sent to the client when the headers get\\nflushed. If this is left as <code>undefined</code> then the standard message for the status\\ncode will be used.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">response.statusMessage = &#39;Not found&#39;;\\n</code></pre>\\n<p>After response header was sent to the client, this property indicates the\\nstatus message which was sent out.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: http.IncomingMessage\",\n          \"type\": \"class\",\n          \"name\": \"http.IncomingMessage\",\n          \"desc\": \"<p>An <code>IncomingMessage</code> object is created by [<code>http.Server</code>][] or\\n[<code>http.ClientRequest</code>][] and passed as the first argument to the <code>&#39;request&#39;</code>\\nand <code>&#39;response&#39;</code> event respectively. It may be used to access response status,\\nheaders and data.</p>\\n<p>It implements the [Readable Stream][] interface, as well as the\\nfollowing additional events, methods, and properties.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"desc\": \"<p><code>function () { }</code></p>\\n<p>Indicates that the underlying connection was closed.\\nJust like <code>&#39;end&#39;</code>, this event occurs only once per response.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"message.destroy([error])\",\n              \"type\": \"method\",\n              \"name\": \"destroy\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`error` {Error} \",\n                      \"name\": \"error\",\n                      \"type\": \"Error\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"error\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>\\nis provided, an <code>&#39;error&#39;</code> event is emitted and <code>error</code> is passed as an argument\\nto any listeners on the event.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.setTimeout(msecs, callback)\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`msecs` {Number} \",\n                      \"name\": \"msecs\",\n                      \"type\": \"Number\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"msecs\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p>\\n<p>Returns <code>message</code>.</p>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"message.headers\",\n              \"name\": \"headers\",\n              \"desc\": \"<p>The request/response headers object.</p>\\n<p>Key-value pairs of header names and values. Header names are lower-cased.\\nExample:</p>\\n<pre><code class=\\\"lang-js\\\">// Prints something like:\\n//\\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\\n//   host: &#39;127.0.0.1:8000&#39;,\\n//   accept: &#39;*/*&#39; }\\nconsole.log(request.headers);\\n</code></pre>\\n<p>Duplicates in raw headers are handled in the following ways, depending on the\\nheader name:</p>\\n<ul>\\n<li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>,\\n<code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>,\\n<code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>,\\n<code>retry-after</code>, or <code>user-agent</code> are discarded.</li>\\n<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>\\n<li>For all other headers, the values are joined together with &#39;, &#39;.</li>\\n</ul>\\n\"\n            },\n            {\n              \"textRaw\": \"message.httpVersion\",\n              \"name\": \"httpVersion\",\n              \"desc\": \"<p>In case of server request, the HTTP version sent by the client. In the case of\\nclient response, the HTTP version of the connected-to server.\\nProbably either <code>&#39;1.1&#39;</code> or <code>&#39;1.0&#39;</code>.</p>\\n<p>Also <code>message.httpVersionMajor</code> is the first integer and\\n<code>message.httpVersionMinor</code> is the second.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.method\",\n              \"name\": \"method\",\n              \"desc\": \"<p><strong>Only valid for request obtained from [<code>http.Server</code>][].</strong></p>\\n<p>The request method as a string. Read only. Example:\\n<code>&#39;GET&#39;</code>, <code>&#39;DELETE&#39;</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.rawHeaders\",\n              \"name\": \"rawHeaders\",\n              \"desc\": \"<p>The raw request/response headers list exactly as they were received.</p>\\n<p>Note that the keys and values are in the same list.  It is <em>not</em> a\\nlist of tuples.  So, the even-numbered offsets are key values, and the\\nodd-numbered offsets are the associated values.</p>\\n<p>Header names are not lowercased, and duplicates are not merged.</p>\\n<pre><code class=\\\"lang-js\\\">// Prints something like:\\n//\\n// [ &#39;user-agent&#39;,\\n//   &#39;this is invalid because there can be only one&#39;,\\n//   &#39;User-Agent&#39;,\\n//   &#39;curl/7.22.0&#39;,\\n//   &#39;Host&#39;,\\n//   &#39;127.0.0.1:8000&#39;,\\n//   &#39;ACCEPT&#39;,\\n//   &#39;*/*&#39; ]\\nconsole.log(request.rawHeaders);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"message.rawTrailers\",\n              \"name\": \"rawTrailers\",\n              \"desc\": \"<p>The raw request/response trailer keys and values exactly as they were\\nreceived.  Only populated at the <code>&#39;end&#39;</code> event.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.statusCode\",\n              \"name\": \"statusCode\",\n              \"desc\": \"<p><strong>Only valid for response obtained from [<code>http.ClientRequest</code>][].</strong></p>\\n<p>The 3-digit HTTP response status code. E.G. <code>404</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.statusMessage\",\n              \"name\": \"statusMessage\",\n              \"desc\": \"<p><strong>Only valid for response obtained from [<code>http.ClientRequest</code>][].</strong></p>\\n<p>The HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server Error</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.socket\",\n              \"name\": \"socket\",\n              \"desc\": \"<p>The [<code>net.Socket</code>][] object associated with the connection.</p>\\n<p>With HTTPS support, use [<code>request.socket.getPeerCertificate()</code>][] to obtain the\\nclient&#39;s authentication details.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.trailers\",\n              \"name\": \"trailers\",\n              \"desc\": \"<p>The request/response trailers object. Only populated at the <code>&#39;end&#39;</code> event.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"message.url\",\n              \"name\": \"url\",\n              \"desc\": \"<p><strong>Only valid for request obtained from [<code>http.Server</code>][].</strong></p>\\n<p>Request URL string. This contains only the URL that is\\npresent in the actual HTTP request. If the request is:</p>\\n<pre><code>GET /status?name=ryan HTTP/1.1\\\\r\\\\n\\nAccept: text/plain\\\\r\\\\n\\n\\\\r\\\\n\\n</code></pre><p>Then <code>request.url</code> will be:</p>\\n<pre><code>&#39;/status?name=ryan&#39;\\n</code></pre><p>If you would like to parse the URL into its parts, you can use\\n<code>require(&#39;url&#39;).parse(request.url)</code>.  Example:</p>\\n<pre><code>$ node\\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\\n{\\n  href: &#39;/status?name=ryan&#39;,\\n  search: &#39;?name=ryan&#39;,\\n  query: &#39;name=ryan&#39;,\\n  pathname: &#39;/status&#39;\\n}\\n</code></pre><p>If you would like to extract the params from the query string,\\nyou can use the <code>require(&#39;querystring&#39;).parse</code> function, or pass\\n<code>true</code> as the second argument to <code>require(&#39;url&#39;).parse</code>.  Example:</p>\\n<pre><code>$ node\\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\\n{\\n  href: &#39;/status?name=ryan&#39;,\\n  search: &#39;?name=ryan&#39;,\\n  query: {name: &#39;ryan&#39;},\\n  pathname: &#39;/status&#39;\\n}\\n</code></pre>\"\n            }\n          ]\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"`METHODS` {Array} \",\n          \"type\": \"Array\",\n          \"name\": \"METHODS\",\n          \"desc\": \"<p>A list of the HTTP methods that are supported by the parser.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"`STATUS_CODES` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"STATUS_CODES\",\n          \"desc\": \"<p>A collection of all the standard HTTP response status codes, and the\\nshort description of each.  For example, <code>http.STATUS_CODES[404] === &#39;Not\\nFound&#39;</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"http.globalAgent\",\n          \"name\": \"globalAgent\",\n          \"desc\": \"<p>Global instance of Agent which is used as the default for all http client\\nrequests.</p>\\n\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"http.createClient([port][, host])\",\n          \"type\": \"method\",\n          \"name\": \"createClient\",\n          \"stability\": 0,\n          \"stabilityText\": \"Deprecated: Use [`http.request()`][] instead.\",\n          \"desc\": \"<p>Constructs a new HTTP client. <code>port</code> and <code>host</code> refer to the server to be\\nconnected to.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"port\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"host\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"http.createServer([requestListener])\",\n          \"type\": \"method\",\n          \"name\": \"createServer\",\n          \"desc\": \"<p>Returns a new instance of [<code>http.Server</code>][].</p>\\n<p>The <code>requestListener</code> is a function which is automatically\\nadded to the <code>&#39;request&#39;</code> event.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"requestListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"http.get(options[, callback])\",\n          \"type\": \"method\",\n          \"name\": \"get\",\n          \"desc\": \"<p>Since most requests are GET requests without bodies, Node.js provides this\\nconvenience method. The only difference between this method and [<code>http.request()</code>][]\\nis that it sets the method to GET and calls <code>req.end()</code> automatically.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">http.get(&#39;http://www.google.com/index.html&#39;, (res) =&gt; {\\n  console.log(`Got response: ${res.statusCode}`);\\n  // consume response body\\n  res.resume();\\n}).on(&#39;error&#39;, (e) =&gt; {\\n  console.log(`Got error: ${e.message}`);\\n});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"http.request(options[, callback])\",\n          \"type\": \"method\",\n          \"name\": \"request\",\n          \"desc\": \"<p>Node.js maintains several connections per server to make HTTP requests.\\nThis function allows one to transparently issue requests.</p>\\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\\nautomatically parsed with [<code>url.parse()</code>][].</p>\\n<p>Options:</p>\\n<ul>\\n<li><code>protocol</code>: Protocol to use. Defaults to <code>&#39;http:&#39;</code>.</li>\\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.\\nDefaults to <code>&#39;localhost&#39;</code>.</li>\\n<li><code>hostname</code>: Alias for <code>host</code>. To support [<code>url.parse()</code>][] <code>hostname</code> is\\npreferred over <code>host</code>.</li>\\n<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.\\nValid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be\\nused.</li>\\n<li><code>port</code>: Port of remote server. Defaults to 80.</li>\\n<li><code>localAddress</code>: Local interface to bind for network connections.</li>\\n<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>\\n<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;</code>.</li>\\n<li><code>path</code>: Request path. Defaults to <code>&#39;/&#39;</code>. Should include query string if any.\\nE.G. <code>&#39;/index.html?page=12&#39;</code>. An exception is thrown when the request path\\ncontains illegal characters. Currently, only spaces are rejected but that\\nmay change in the future.</li>\\n<li><code>headers</code>: An object containing request headers.</li>\\n<li><code>auth</code>: Basic authentication i.e. <code>&#39;user:password&#39;</code> to compute an\\nAuthorization header.</li>\\n<li><code>agent</code>: Controls [<code>Agent</code>][] behavior. When an Agent is used request will\\ndefault to <code>Connection: keep-alive</code>. Possible values:<ul>\\n<li><code>undefined</code> (default): use [<code>http.globalAgent</code>][] for this host and port.</li>\\n<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>\\n<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to\\n<code>Connection: close</code>.</li>\\n</ul>\\n</li>\\n<li><code>createConnection</code>: A function that produces a socket/stream to use for the\\nrequest when the <code>agent</code> option is not used. This can be used to avoid\\ncreating a custom Agent class just to override the default <code>createConnection</code>\\nfunction. See [<code>agent.createConnection()</code>][] for more details.</li>\\n</ul>\\n<p>The optional <code>callback</code> parameter will be added as a one time listener for\\nthe <code>&#39;response&#39;</code> event.</p>\\n<p><code>http.request()</code> returns an instance of the [<code>http.ClientRequest</code>][]\\nclass. The <code>ClientRequest</code> instance is a writable stream. If one needs to\\nupload a file with a POST request, then write to the <code>ClientRequest</code> object.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var postData = querystring.stringify({\\n  &#39;msg&#39; : &#39;Hello World!&#39;\\n});\\n\\nvar options = {\\n  hostname: &#39;www.google.com&#39;,\\n  port: 80,\\n  path: &#39;/upload&#39;,\\n  method: &#39;POST&#39;,\\n  headers: {\\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\\n    &#39;Content-Length&#39;: Buffer.byteLength(postData)\\n  }\\n};\\n\\nvar req = http.request(options, (res) =&gt; {\\n  console.log(`STATUS: ${res.statusCode}`);\\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\\n  res.setEncoding(&#39;utf8&#39;);\\n  res.on(&#39;data&#39;, (chunk) =&gt; {\\n    console.log(`BODY: ${chunk}`);\\n  });\\n  res.on(&#39;end&#39;, () =&gt; {\\n    console.log(&#39;No more data in response.&#39;)\\n  })\\n});\\n\\nreq.on(&#39;error&#39;, (e) =&gt; {\\n  console.log(`problem with request: ${e.message}`);\\n});\\n\\n// write data to request body\\nreq.write(postData);\\nreq.end();\\n</code></pre>\\n<p>Note that in the example <code>req.end()</code> was called. With <code>http.request()</code> one\\nmust always call <code>req.end()</code> to signify that you&#39;re done with the request -\\neven if there is no data being written to the request body.</p>\\n<p>If any error is encountered during the request (be that with DNS resolution,\\nTCP level errors, or actual HTTP parse errors) an <code>&#39;error&#39;</code> event is emitted\\non the returned request object. As with all <code>&#39;error&#39;</code> events, if no listeners\\nare registered the error will be thrown.</p>\\n<p>There are a few special headers that should be noted.</p>\\n<ul>\\n<li><p>Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to\\nthe server should be persisted until the next request.</p>\\n</li>\\n<li><p>Sending a &#39;Content-length&#39; header will disable the default chunked encoding.</p>\\n</li>\\n<li><p>Sending an &#39;Expect&#39; header will immediately send the request headers.\\nUsually, when sending &#39;Expect: 100-continue&#39;, you should both set a timeout\\nand listen for the <code>&#39;continue&#39;</code> event. See RFC2616 Section 8.2.3 for more\\ninformation.</p>\\n</li>\\n<li><p>Sending an Authorization header will override using the <code>auth</code> option\\nto compute basic authentication.</p>\\n</li>\\n</ul>\\n<!-- [end-include:http.md] -->\\n<!-- [start-include:https.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"HTTP\"\n    },\n    {\n      \"textRaw\": \"HTTPS\",\n      \"name\": \"https\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\\nseparate module.</p>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: https.Agent\",\n          \"type\": \"class\",\n          \"name\": \"https.Agent\",\n          \"desc\": \"<p>An Agent object for HTTPS similar to [<code>http.Agent</code>][].  See [<code>https.request()</code>][]\\nfor more information.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: https.Server\",\n          \"type\": \"class\",\n          \"name\": \"https.Server\",\n          \"desc\": \"<p>This class is a subclass of <code>tls.Server</code> and emits events same as\\n[<code>http.Server</code>][]. See [<code>http.Server</code>][] for more information.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"server.setTimeout(msecs, callback)\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"desc\": \"<p>See [<code>http.Server#setTimeout()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"msecs\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"server.timeout\",\n              \"name\": \"timeout\",\n              \"desc\": \"<p>See [<code>http.Server#timeout</code>][].</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"https.createServer(options[, requestListener])\",\n          \"type\": \"method\",\n          \"name\": \"createServer\",\n          \"desc\": \"<p>Returns a new HTTPS web server object. The <code>options</code> is similar to\\n[<code>tls.createServer()</code>][].  The <code>requestListener</code> is a function which is\\nautomatically added to the <code>&#39;request&#39;</code> event.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">// curl -k https://localhost:8000/\\nconst https = require(&#39;https&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\\n};\\n\\nhttps.createServer(options, (req, res) =&gt; {\\n  res.writeHead(200);\\n  res.end(&#39;hello world\\\\n&#39;);\\n}).listen(8000);\\n</code></pre>\\n<p>Or</p>\\n<pre><code class=\\\"lang-js\\\">const https = require(&#39;https&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  pfx: fs.readFileSync(&#39;server.pfx&#39;)\\n};\\n\\nhttps.createServer(options, (req, res) =&gt; {\\n  res.writeHead(200);\\n  res.end(&#39;hello world\\\\n&#39;);\\n}).listen(8000);\\n</code></pre>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"server.close([callback])\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"desc\": \"<p>See [<code>http.close()</code>][] for details.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(path[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"desc\": \"<p>See [<code>http.listen()</code>][] for details.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"host\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"path\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(port[, host][, backlog][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"desc\": \"<p>See [<code>http.listen()</code>][] for details.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"host\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"requestListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"https.get(options, callback)\",\n          \"type\": \"method\",\n          \"name\": \"get\",\n          \"desc\": \"<p>Like [<code>http.get()</code>][] but for HTTPS.</p>\\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\\nautomatically parsed with [<code>url.parse()</code>][].</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const https = require(&#39;https&#39;);\\n\\nhttps.get(&#39;https://encrypted.google.com/&#39;, (res) =&gt; {\\n  console.log(&#39;statusCode: &#39;, res.statusCode);\\n  console.log(&#39;headers: &#39;, res.headers);\\n\\n  res.on(&#39;data&#39;, (d) =&gt; {\\n    process.stdout.write(d);\\n  });\\n\\n}).on(&#39;error&#39;, (e) =&gt; {\\n  console.error(e);\\n});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"https.request(options, callback)\",\n          \"type\": \"method\",\n          \"name\": \"request\",\n          \"desc\": \"<p>Makes a request to a secure web server.</p>\\n<p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is\\nautomatically parsed with [<code>url.parse()</code>][].</p>\\n<p>All options from [<code>http.request()</code>][] are valid.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">const https = require(&#39;https&#39;);\\n\\nvar options = {\\n  hostname: &#39;encrypted.google.com&#39;,\\n  port: 443,\\n  path: &#39;/&#39;,\\n  method: &#39;GET&#39;\\n};\\n\\nvar req = https.request(options, (res) =&gt; {\\n  console.log(&#39;statusCode: &#39;, res.statusCode);\\n  console.log(&#39;headers: &#39;, res.headers);\\n\\n  res.on(&#39;data&#39;, (d) =&gt; {\\n    process.stdout.write(d);\\n  });\\n});\\nreq.end();\\n\\nreq.on(&#39;error&#39;, (e) =&gt; {\\n  console.error(e);\\n});\\n</code></pre>\\n<p>The options argument has the following options</p>\\n<ul>\\n<li><code>host</code>: A domain name or IP address of the server to issue the request to.\\nDefaults to <code>&#39;localhost&#39;</code>.</li>\\n<li><code>hostname</code>: Alias for <code>host</code>. To support <code>url.parse()</code> <code>hostname</code> is\\npreferred over <code>host</code>.</li>\\n<li><code>family</code>: IP address family to use when resolving <code>host</code> and <code>hostname</code>.\\nValid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be\\nused.</li>\\n<li><code>port</code>: Port of remote server. Defaults to 443.</li>\\n<li><code>localAddress</code>: Local interface to bind for network connections.</li>\\n<li><code>socketPath</code>: Unix Domain Socket (use one of host:port or socketPath).</li>\\n<li><code>method</code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;</code>.</li>\\n<li><code>path</code>: Request path. Defaults to <code>&#39;/&#39;</code>. Should include query string if any.\\nE.G. <code>&#39;/index.html?page=12&#39;</code>. An exception is thrown when the request path\\ncontains illegal characters. Currently, only spaces are rejected but that\\nmay change in the future.</li>\\n<li><code>headers</code>: An object containing request headers.</li>\\n<li><code>auth</code>: Basic authentication i.e. <code>&#39;user:password&#39;</code> to compute an\\nAuthorization header.</li>\\n<li><code>agent</code>: Controls [<code>Agent</code>][] behavior. When an Agent is used request will\\ndefault to <code>Connection: keep-alive</code>. Possible values:<ul>\\n<li><code>undefined</code> (default): use [<code>globalAgent</code>][] for this host and port.</li>\\n<li><code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li>\\n<li><code>false</code>: opts out of connection pooling with an Agent, defaults request to\\n<code>Connection: close</code>.</li>\\n</ul>\\n</li>\\n</ul>\\n<p>The following options from [<code>tls.connect()</code>][] can also be specified. However, a\\n[<code>globalAgent</code>][] silently ignores these.</p>\\n<ul>\\n<li><code>pfx</code>: Certificate, Private key and CA certificates to use for SSL. Default <code>null</code>.</li>\\n<li><code>key</code>: Private key to use for SSL. Default <code>null</code>.</li>\\n<li><code>passphrase</code>: A string of passphrase for the private key or pfx. Default <code>null</code>.</li>\\n<li><code>cert</code>: Public x509 certificate to use. Default <code>null</code>.</li>\\n<li><code>ca</code>: A string, [<code>Buffer</code>][] or array of strings or [<code>Buffer</code>][]s of trusted\\ncertificates in PEM format. If this is omitted several well known &quot;root&quot;\\nCAs will be used, like VeriSign. These are used to authorize connections.</li>\\n<li><code>ciphers</code>: A string describing the ciphers to use or exclude. Consult\\n<a href=\\\"https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT\\\">https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT</a> for\\ndetails on the format.</li>\\n<li><code>rejectUnauthorized</code>: If <code>true</code>, the server certificate is verified against\\nthe list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if verification\\nfails. Verification happens at the connection level, <em>before</em> the HTTP\\nrequest is sent. Default <code>true</code>.</li>\\n<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force\\nSSL version 3. The possible values depend on your installation of\\nOpenSSL and are defined in the constant [<code>SSL_METHODS</code>][].</li>\\n<li><code>servername</code>: Servername for SNI (Server Name Indication) TLS extension.</li>\\n</ul>\\n<p>In order to specify these options, use a custom [<code>Agent</code>][].</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var options = {\\n  hostname: &#39;encrypted.google.com&#39;,\\n  port: 443,\\n  path: &#39;/&#39;,\\n  method: &#39;GET&#39;,\\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\\n};\\noptions.agent = new https.Agent(options);\\n\\nvar req = https.request(options, (res) =&gt; {\\n  ...\\n}\\n</code></pre>\\n<p>Alternatively, opt out of connection pooling by not using an <code>Agent</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var options = {\\n  hostname: &#39;encrypted.google.com&#39;,\\n  port: 443,\\n  path: &#39;/&#39;,\\n  method: &#39;GET&#39;,\\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;),\\n  agent: false\\n};\\n\\nvar req = https.request(options, (res) =&gt; {\\n  ...\\n}\\n</code></pre>\\n<!-- [end-include:https.md] -->\\n<!-- [start-include:modules.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"callback\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"https.globalAgent\",\n          \"name\": \"globalAgent\",\n          \"desc\": \"<p>Global instance of [<code>https.Agent</code>][] for all HTTPS client requests.</p>\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"HTTPS\"\n    },\n    {\n      \"textRaw\": \"Modules\",\n      \"name\": \"module\",\n      \"stability\": 3,\n      \"stabilityText\": \"Locked\",\n      \"desc\": \"<p>Node.js has a simple module loading system.  In Node.js, files and modules are\\nin one-to-one correspondence.  As an example, <code>foo.js</code> loads the module\\n<code>circle.js</code> in the same directory.</p>\\n<p>The contents of <code>foo.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const circle = require(&#39;./circle.js&#39;);\\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\\n</code></pre>\\n<p>The contents of <code>circle.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const PI = Math.PI;\\n\\nexports.area = (r) =&gt; PI * r * r;\\n\\nexports.circumference = (r) =&gt; 2 * PI * r;\\n</code></pre>\\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and\\n<code>circumference()</code>.  To add functions and objects to the root of your module,\\nyou can add them to the special <code>exports</code> object.</p>\\n<p>Variables local to the module will be private, because the module is wrapped\\nin a function by Node.js (see <a href=\\\"#modules_the_module_wrapper\\\">module wrapper</a>).\\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\\n<p>If you want the root of your module&#39;s export to be a function (such as a\\nconstructor) or if you want to export a complete object in one assignment\\ninstead of building it one property at a time, assign it to <code>module.exports</code>\\ninstead of <code>exports</code>.</p>\\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p>\\n<pre><code class=\\\"lang-js\\\">const square = require(&#39;./square.js&#39;);\\nvar mySquare = square(2);\\nconsole.log(`The area of my square is ${mySquare.area()}`);\\n</code></pre>\\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">// assigning to exports will not modify module, must use module.exports\\nmodule.exports = (width) =&gt; {\\n  return {\\n    area: () =&gt; width * width\\n  };\\n}\\n</code></pre>\\n<p>The module system is implemented in the <code>require(&quot;module&quot;)</code> module.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Accessing the main module\",\n          \"name\": \"Accessing the main module\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>When a file is run directly from Node.js, <code>require.main</code> is set to its\\n<code>module</code>. That means that you can determine whether a file has been run\\ndirectly by testing</p>\\n<pre><code class=\\\"lang-js\\\">require.main === module\\n</code></pre>\\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but\\n<code>false</code> if run by <code>require(&#39;./foo&#39;)</code>.</p>\\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to\\n<code>__filename</code>), the entry point of the current application can be obtained\\nby checking <code>require.main.filename</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Addenda: Package Manager Tips\",\n          \"name\": \"Addenda: Package Manager Tips\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>The semantics of Node.js&#39;s <code>require()</code> function were designed to be general\\nenough to support a number of reasonable directory structures. Package manager\\nprograms such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to\\nbuild native packages from Node.js modules without modification.</p>\\n<p>Below we give a suggested directory structure that could work:</p>\\n<p>Let&#39;s say that we wanted to have the folder at\\n<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a\\nspecific version of a package.</p>\\n<p>Packages can depend on one another. In order to install package <code>foo</code>, you\\nmay have to install a specific version of package <code>bar</code>.  The <code>bar</code> package\\nmay itself have dependencies, and in some cases, these dependencies may even\\ncollide or form cycles.</p>\\n<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,\\nresolves symlinks), and then looks for their dependencies in the <code>node_modules</code>\\nfolders as described <a href=\\\"#modules_loading_from_node_modules_folders\\\">here</a>, this\\nsituation is very simple to resolve with the following architecture:</p>\\n<ul>\\n<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>\\n<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>\\ndepends on.</li>\\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to\\n<code>/usr/lib/node/bar/4.3.2/</code>.</li>\\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages\\nthat <code>bar</code> depends on.</li>\\n</ul>\\n<p>Thus, even if a cycle is encountered, or if there are dependency\\nconflicts, every module will be able to get a version of its dependency\\nthat it can use.</p>\\n<p>When the code in the <code>foo</code> package does <code>require(&#39;bar&#39;)</code>, it will get the\\nversion that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.\\nThen, when the code in the <code>bar</code> package calls <code>require(&#39;quux&#39;)</code>, it&#39;ll get\\nthe version that is symlinked into\\n<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\\n<p>Furthermore, to make the module lookup process even more optimal, rather\\nthan putting packages directly in <code>/usr/lib/node</code>, we could put them in\\n<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>.  Then Node.js will not bother\\nlooking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\\n<p>In order to make modules available to the Node.js REPL, it might be useful to\\nalso add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment\\nvariable.  Since the module lookups using <code>node_modules</code> folders are all\\nrelative, and based on the real path of the files making the calls to\\n<code>require()</code>, the packages themselves can be anywhere.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"All Together...\",\n          \"name\": \"All Together...\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>To get the exact filename that will be loaded when <code>require()</code> is called, use\\nthe <code>require.resolve()</code> function.</p>\\n<p>Putting together all of the above, here is the high-level algorithm\\nin pseudocode of what require.resolve does:</p>\\n<pre><code>require(X) from module at path Y\\n1. If X is a core module,\\n   a. return the core module\\n   b. STOP\\n2. If X begins with &#39;./&#39; or &#39;/&#39; or &#39;../&#39;\\n   a. LOAD_AS_FILE(Y + X)\\n   b. LOAD_AS_DIRECTORY(Y + X)\\n3. LOAD_NODE_MODULES(X, dirname(Y))\\n4. THROW &quot;not found&quot;\\n\\nLOAD_AS_FILE(X)\\n1. If X is a file, load X as JavaScript text.  STOP\\n2. If X.js is a file, load X.js as JavaScript text.  STOP\\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\\n4. If X.node is a file, load X.node as binary addon.  STOP\\n\\nLOAD_AS_DIRECTORY(X)\\n1. If X/package.json is a file,\\n   a. Parse X/package.json, and look for &quot;main&quot; field.\\n   b. let M = X + (json main field)\\n   c. LOAD_AS_FILE(M)\\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\\n3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\\n4. If X/index.node is a file, load X/index.node as binary addon.  STOP\\n\\nLOAD_NODE_MODULES(X, START)\\n1. let DIRS=NODE_MODULES_PATHS(START)\\n2. for each DIR in DIRS:\\n   a. LOAD_AS_FILE(DIR/X)\\n   b. LOAD_AS_DIRECTORY(DIR/X)\\n\\nNODE_MODULES_PATHS(START)\\n1. let PARTS = path split(START)\\n2. let I = count of PARTS - 1\\n3. let DIRS = []\\n4. while I &gt;= 0,\\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\\n   b. DIRS = DIRS + DIR\\n   c. let I = I - 1\\n5. return DIRS\\n</code></pre>\"\n        },\n        {\n          \"textRaw\": \"Caching\",\n          \"name\": \"Caching\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Modules are cached after the first time they are loaded.  This means\\n(among other things) that every call to <code>require(&#39;foo&#39;)</code> will get\\nexactly the same object returned, if it would resolve to the same file.</p>\\n<p>Multiple calls to <code>require(&#39;foo&#39;)</code> may not cause the module code to be\\nexecuted multiple times.  This is an important feature.  With it,\\n&quot;partially done&quot; objects can be returned, thus allowing transitive\\ndependencies to be loaded even when they would cause cycles.</p>\\n<p>If you want to have a module execute code multiple times, then export a\\nfunction, and call that function.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Module Caching Caveats\",\n              \"name\": \"Module Caching Caveats\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Modules are cached based on their resolved filename.  Since modules may\\nresolve to a different filename based on the location of the calling\\nmodule (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>\\nthat <code>require(&#39;foo&#39;)</code> will always return the exact same object, if it\\nwould resolve to different files.</p>\\n<p>Additionally, on case-insensitive file systems or operating systems, different\\nresolved filenames can point to the same file, but the cache will still treat\\nthem as different modules and will reload the file multiple times. For example,\\n<code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects,\\nirrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Core Modules\",\n          \"name\": \"Core Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Node.js has several modules compiled into the binary.  These modules are\\ndescribed in greater detail elsewhere in this documentation.</p>\\n<p>The core modules are defined within Node.js&#39;s source and are located in the\\n<code>lib/</code> folder.</p>\\n<p>Core modules are always preferentially loaded if their identifier is\\npassed to <code>require()</code>.  For instance, <code>require(&#39;http&#39;)</code> will always\\nreturn the built in HTTP module, even if there is a file by that name.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Cycles\",\n          \"name\": \"Cycles\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>When there are circular <code>require()</code> calls, a module might not have finished\\nexecuting when it is returned.</p>\\n<p>Consider this situation:</p>\\n<p><code>a.js</code>:</p>\\n<pre><code>console.log(&#39;a starting&#39;);\\nexports.done = false;\\nconst b = require(&#39;./b.js&#39;);\\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\\nexports.done = true;\\nconsole.log(&#39;a done&#39;);\\n</code></pre><p><code>b.js</code>:</p>\\n<pre><code>console.log(&#39;b starting&#39;);\\nexports.done = false;\\nconst a = require(&#39;./a.js&#39;);\\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\\nexports.done = true;\\nconsole.log(&#39;b done&#39;);\\n</code></pre><p><code>main.js</code>:</p>\\n<pre><code>console.log(&#39;main starting&#39;);\\nconst a = require(&#39;./a.js&#39;);\\nconst b = require(&#39;./b.js&#39;);\\nconsole.log(&#39;in main, a.done=%j, b.done=%j&#39;, a.done, b.done);\\n</code></pre><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>.  At that\\npoint, <code>b.js</code> tries to load <code>a.js</code>.  In order to prevent an infinite\\nloop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the\\n<code>b.js</code> module.  <code>b.js</code> then finishes loading, and its <code>exports</code> object is\\nprovided to the <code>a.js</code> module.</p>\\n<p>By the time <code>main.js</code> has loaded both modules, they&#39;re both finished.\\nThe output of this program would thus be:</p>\\n<pre><code>$ node main.js\\nmain starting\\na starting\\nb starting\\nin b, a.done = false\\nb done\\nin a, b.done = true\\na done\\nin main, a.done=true, b.done=true\\n</code></pre><p>If you have cyclic module dependencies in your program, make sure to\\nplan accordingly.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"File Modules\",\n          \"name\": \"File Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the exact filename is not found, then Node.js will attempt to load the\\nrequired filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally\\n<code>.node</code>.</p>\\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are\\nparsed as JSON text files. <code>.node</code> files are interpreted as compiled addon\\nmodules loaded with <code>dlopen</code>.</p>\\n<p>A required module prefixed with <code>&#39;/&#39;</code> is an absolute path to the file.  For\\nexample, <code>require(&#39;/home/marco/foo.js&#39;)</code> will load the file at\\n<code>/home/marco/foo.js</code>.</p>\\n<p>A required module prefixed with <code>&#39;./&#39;</code> is relative to the file calling\\n<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for\\n<code>require(&#39;./circle&#39;)</code> to find it.</p>\\n<p>Without a leading &#39;/&#39;, &#39;./&#39;, or &#39;../&#39; to indicate a file, the module must\\neither be a core module or is loaded from a <code>node_modules</code> folder.</p>\\n<p>If the given path does not exist, <code>require()</code> will throw an [<code>Error</code>][] with its\\n<code>code</code> property set to <code>&#39;MODULE_NOT_FOUND&#39;</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Folders as Modules\",\n          \"name\": \"Folders as Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>It is convenient to organize programs and libraries into self-contained\\ndirectories, and then provide a single entry point to that library.\\nThere are three ways in which a folder may be passed to <code>require()</code> as\\nan argument.</p>\\n<p>The first is to create a <code>package.json</code> file in the root of the folder,\\nwhich specifies a <code>main</code> module.  An example package.json file might\\nlook like this:</p>\\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\\n</code></pre><p>If this was in a folder at <code>./some-library</code>, then\\n<code>require(&#39;./some-library&#39;)</code> would attempt to load\\n<code>./some-library/lib/some-library.js</code>.</p>\\n<p>This is the extent of Node.js&#39;s awareness of package.json files.</p>\\n<p>Note: If the file specified by the <code>&quot;main&quot;</code> entry of <code>package.json</code> is missing\\nand can not be resolved, Node.js will report the entire module as missing with\\nthe default error:</p>\\n<pre><code>Error: Cannot find module &#39;some-library&#39;\\n</code></pre><p>If there is no package.json file present in the directory, then Node.js\\nwill attempt to load an <code>index.js</code> or <code>index.node</code> file out of that\\ndirectory.  For example, if there was no package.json file in the above\\nexample, then <code>require(&#39;./some-library&#39;)</code> would attempt to load:</p>\\n<ul>\\n<li><code>./some-library/index.js</code></li>\\n<li><code>./some-library/index.node</code></li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"Loading from `node_modules` Folders\",\n          \"name\": \"Loading from `node_modules` Folders\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the module identifier passed to <code>require()</code> is not a native module,\\nand does not begin with <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code>, or <code>&#39;./&#39;</code>, then Node.js starts at the\\nparent directory of the current module, and adds <code>/node_modules</code>, and\\nattempts to load the module from that location. Node will not append\\n<code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\\n<p>If it is not found there, then it moves to the parent directory, and so\\non, until the root of the file system is reached.</p>\\n<p>For example, if the file at <code>&#39;/home/ry/projects/foo.js&#39;</code> called\\n<code>require(&#39;bar.js&#39;)</code>, then Node.js would look in the following locations, in\\nthis order:</p>\\n<ul>\\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\\n<li><code>/home/ry/node_modules/bar.js</code></li>\\n<li><code>/home/node_modules/bar.js</code></li>\\n<li><code>/node_modules/bar.js</code></li>\\n</ul>\\n<p>This allows programs to localize their dependencies, so that they do not\\nclash.</p>\\n<p>You can require specific files or sub modules distributed with a module by\\nincluding a path suffix after the module name. For instance\\n<code>require(&#39;example-module/path/to/file&#39;)</code> would resolve <code>path/to/file</code>\\nrelative to where <code>example-module</code> is located. The suffixed path follows the\\nsame module resolution semantics.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Loading from the global folders\",\n          \"name\": \"Loading from the global folders\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list\\nof absolute paths, then Node.js will search those paths for modules if they\\nare not found elsewhere.  (Note: On Windows, <code>NODE_PATH</code> is delimited by\\nsemicolons instead of colons.)</p>\\n<p><code>NODE_PATH</code> was originally created to support loading modules from\\nvarying paths before the current [module resolution][] algorithm was frozen.</p>\\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js\\necosystem has settled on a convention for locating dependent modules.\\nSometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior\\nwhen people are unaware that <code>NODE_PATH</code> must be set.  Sometimes a\\nmodule&#39;s dependencies change, causing a different version (or even a\\ndifferent module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\\n<p>Additionally, Node.js will search in the following locations:</p>\\n<ul>\\n<li>1: <code>$HOME/.node_modules</code></li>\\n<li>2: <code>$HOME/.node_libraries</code></li>\\n<li>3: <code>$PREFIX/lib/node</code></li>\\n</ul>\\n<p>Where <code>$HOME</code> is the user&#39;s home directory, and <code>$PREFIX</code> is Node.js&#39;s\\nconfigured <code>node_prefix</code>.</p>\\n<p>These are mostly for historic reasons.  <strong>You are highly encouraged\\nto place your dependencies locally in <code>node_modules</code> folders.</strong>  They\\nwill be loaded faster, and more reliably.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"The module wrapper\",\n          \"name\": \"The module wrapper\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Before a module&#39;s code is executed, Node.js will wrap it with a function\\nwrapper that looks like the following:</p>\\n<pre><code class=\\\"lang-js\\\">(function (exports, require, module, __filename, __dirname) {\\n// Your module code actually lives in here\\n});\\n</code></pre>\\n<p>By doing this, Node.js achieves a few things:</p>\\n<ul>\\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to\\nthe module rather than the global object.</li>\\n<li>It helps to provide some global-looking variables that are actually specific\\nto the module, such as:<ul>\\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export\\nvalues from the module.</li>\\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the\\nmodule&#39;s absolute filename and directory path.</li>\\n</ul>\\n</li>\\n</ul>\\n\"\n        }\n      ],\n      \"vars\": [\n        {\n          \"textRaw\": \"The `module` Object\",\n          \"name\": \"module\",\n          \"type\": \"var\",\n          \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>In each module, the <code>module</code> free variable is a reference to the object\\nrepresenting the current module.  For convenience, <code>module.exports</code> is\\nalso accessible via the <code>exports</code> module-global. <code>module</code> isn&#39;t actually\\na global but rather local to each module.</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"`children` {Array} \",\n              \"type\": \"Array\",\n              \"name\": \"children\",\n              \"desc\": \"<p>The module objects required by this one.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`exports` {Object} \",\n              \"type\": \"Object\",\n              \"name\": \"exports\",\n              \"desc\": \"<p>The <code>module.exports</code> object is created by the Module system. Sometimes this is\\nnot acceptable; many want their module to be an instance of some class. To do\\nthis, assign the desired export object to <code>module.exports</code>. Note that assigning\\nthe desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,\\nwhich is probably not what you want to do.</p>\\n<p>For example suppose we were making a module called <code>a.js</code></p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\n\\nmodule.exports = new EventEmitter();\\n\\n// Do some work, and after some time emit\\n// the &#39;ready&#39; event from the module itself.\\nsetTimeout(() =&gt; {\\n  module.exports.emit(&#39;ready&#39;);\\n}, 1000);\\n</code></pre>\\n<p>Then in another file we could do</p>\\n<pre><code class=\\\"lang-js\\\">const a = require(&#39;./a&#39;);\\na.on(&#39;ready&#39;, () =&gt; {\\n  console.log(&#39;module a is ready&#39;);\\n});\\n</code></pre>\\n<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be\\ndone in any callbacks.  This does not work:</p>\\n<p>x.js:</p>\\n<pre><code class=\\\"lang-js\\\">setTimeout(() =&gt; {\\n  module.exports = { a: &#39;hello&#39; };\\n}, 0);\\n</code></pre>\\n<p>y.js:</p>\\n<pre><code class=\\\"lang-js\\\">const x = require(&#39;./x&#39;);\\nconsole.log(x.a);\\n</code></pre>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"exports alias\",\n                  \"name\": \"exports_alias\",\n                  \"desc\": \"<p>The <code>exports</code> variable that is available within a module starts as a reference\\nto <code>module.exports</code>. As with any variable, if you assign a new value to it, it\\nis no longer bound to the previous value.</p>\\n<p>To illustrate the behavior, imagine this hypothetical implementation of\\n<code>require()</code>:</p>\\n<pre><code class=\\\"lang-js\\\">function require(...) {\\n  // ...\\n  ((module, exports) =&gt; {\\n    // Your module code here\\n    exports = some_func;        // re-assigns exports, exports is no longer\\n                                // a shortcut, and nothing is exported.\\n    module.exports = some_func; // makes your module export 0\\n  })(module, module.exports);\\n  return module;\\n}\\n</code></pre>\\n<p>As a guideline, if the relationship between <code>exports</code> and <code>module.exports</code>\\nseems like magic to you, ignore <code>exports</code> and only use <code>module.exports</code>.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"exports alias\"\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"`filename` {String} \",\n              \"type\": \"String\",\n              \"name\": \"filename\",\n              \"desc\": \"<p>The fully resolved filename to the module.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`id` {String} \",\n              \"type\": \"String\",\n              \"name\": \"id\",\n              \"desc\": \"<p>The identifier for the module.  Typically this is the fully resolved\\nfilename.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`loaded` {Boolean} \",\n              \"type\": \"Boolean\",\n              \"name\": \"loaded\",\n              \"desc\": \"<p>Whether or not the module is done loading, or is in the process of\\nloading.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`parent` {Object} Module object \",\n              \"type\": \"Object\",\n              \"name\": \"parent\",\n              \"desc\": \"<p>The module that first required this one.</p>\\n\",\n              \"shortDesc\": \"Module object\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"module.require(id)\",\n              \"type\": \"method\",\n              \"name\": \"require\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Object} `module.exports` from the resolved module \",\n                    \"name\": \"return\",\n                    \"type\": \"Object\",\n                    \"desc\": \"`module.exports` from the resolved module\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`id` {String} \",\n                      \"name\": \"id\",\n                      \"type\": \"String\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>module.require</code> method provides a way to load a module as if\\n<code>require()</code> was called from the original module.</p>\\n<p>Note that in order to do this, you must get a reference to the <code>module</code>\\nobject.  Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is\\ntypically <em>only</em> available within a specific module&#39;s code, it must be\\nexplicitly exported in order to be used.</p>\\n<!-- [end-include:modules.md] -->\\n<!-- [start-include:net.md] -->\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"module\"\n    },\n    {\n      \"textRaw\": \"net\",\n      \"name\": \"net\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>net</code> module provides you with an asynchronous network wrapper. It contains\\nfunctions for creating both servers and clients (called streams). You can include\\nthis module with <code>require(&#39;net&#39;);</code>.</p>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: net.Server\",\n          \"type\": \"class\",\n          \"name\": \"net.Server\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>This class is used to create a TCP or local server.</p>\\n<p><code>net.Server</code> is an [<code>EventEmitter</code>][] with the following events:</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.0\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the server closes. Note that if connections exist, this\\nevent is not emitted until all connections are ended.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'connection'\",\n              \"type\": \"event\",\n              \"name\": \"connection\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when a new connection is made. <code>socket</code> is an instance of\\n<code>net.Socket</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when an error occurs.  The [<code>&#39;close&#39;</code>][] event will be called directly\\nfollowing this event.  See example in discussion of <code>server.listen</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'listening'\",\n              \"type\": \"event\",\n              \"name\": \"listening\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the server has been bound after calling <code>server.listen</code>.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"server.address()\",\n              \"type\": \"method\",\n              \"name\": \"address\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Returns the bound address, the address family name, and port of the server\\nas reported by the operating system.\\nUseful to find which port was assigned when getting an OS-assigned address.\\nReturns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties:\\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">var server = net.createServer((socket) =&gt; {\\n  socket.end(&#39;goodbye\\\\n&#39;);\\n}).on(&#39;error&#39;, (err) =&gt; {\\n  // handle errors here\\n  throw err;\\n});\\n\\n// grab a random port.\\nserver.listen(() =&gt; {\\n  address = server.address();\\n  console.log(&#39;opened server on %j&#39;, address);\\n});\\n</code></pre>\\n<p>Don&#39;t call <code>server.address()</code> until the <code>&#39;listening&#39;</code> event has been emitted.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.close([callback])\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Stops the server from accepting new connections and keeps existing\\nconnections. This function is asynchronous, the server is finally\\nclosed when all connections are ended and the server emits a [<code>&#39;close&#39;</code>][] event.\\nThe optional <code>callback</code> will be called once the <code>&#39;close&#39;</code> event occurs. Unlike\\nthat event, it will be called with an Error as its only argument if the server\\nwas not open when it was closed.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.getConnections(callback)\",\n              \"type\": \"method\",\n              \"name\": \"getConnections\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.7\"\n                ]\n              },\n              \"desc\": \"<p>Asynchronously get the number of concurrent connections on the server. Works\\nwhen sockets were sent to forks.</p>\\n<p>Callback should take two arguments <code>err</code> and <code>count</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(handle[, backlog][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.10\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`handle` {Object} \",\n                      \"name\": \"handle\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`backlog` {Number} \",\n                      \"name\": \"backlog\",\n                      \"type\": \"Number\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"handle\"\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>handle</code> object can be set to either a server or socket (anything\\nwith an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p>\\n<p>This will cause the server to accept connections on the specified\\nhandle, but it is presumed that the file descriptor or handle has\\nalready been bound to a port or domain socket.</p>\\n<p>Listening on a file descriptor is not supported on Windows.</p>\\n<p>This function is asynchronous.  When the server has been bound,\\n[<code>&#39;listening&#39;</code>][] event will be emitted.\\nThe last parameter <code>callback</code> will be added as a listener for the\\n[<code>&#39;listening&#39;</code>][] event.</p>\\n<p>The parameter <code>backlog</code> behaves the same as in\\n[<code>server.listen(port[, hostname][, backlog][, callback])</code>][<code>server.listen(port, host, backlog, callback)</code>].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.listen(options[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.14\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`options` {Object} - Required. Supports the following properties: \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`port` {Number} - Optional. \",\n                          \"name\": \"port\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Optional.\"\n                        },\n                        {\n                          \"textRaw\": \"`host` {String} - Optional. \",\n                          \"name\": \"host\",\n                          \"type\": \"String\",\n                          \"desc\": \"Optional.\"\n                        },\n                        {\n                          \"textRaw\": \"`backlog` {Number} - Optional. \",\n                          \"name\": \"backlog\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Optional.\"\n                        },\n                        {\n                          \"textRaw\": \"`path` {String} - Optional. \",\n                          \"name\": \"path\",\n                          \"type\": \"String\",\n                          \"desc\": \"Optional.\"\n                        },\n                        {\n                          \"textRaw\": \"`exclusive` {Boolean} - Optional. \",\n                          \"name\": \"exclusive\",\n                          \"type\": \"Boolean\",\n                          \"desc\": \"Optional.\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"desc\": \"Required. Supports the following properties:\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} - Optional. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"Optional.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the\\noptional callback function, behave as they do on a call to\\n[<code>server.listen(port[, hostname][, backlog][, callback])</code>][<code>server.listen(port, host, backlog, callback)</code>].\\nAlternatively, the <code>path</code> option can be used to specify a UNIX socket.</p>\\n<p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same\\nunderlying handle, allowing connection handling duties to be shared. When\\n<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing\\nresults in an error. An example which listens on an exclusive port is\\nshown below.</p>\\n<pre><code class=\\\"lang-js\\\">server.listen({\\n  host: &#39;localhost&#39;,\\n  port: 80,\\n  exclusive: true\\n});\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"server.listen(path[, backlog][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`path` {String} \",\n                      \"name\": \"path\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`backlog` {Number} \",\n                      \"name\": \"backlog\",\n                      \"type\": \"Number\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"path\"\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Start a local socket server listening for connections on the given <code>path</code>.</p>\\n<p>This function is asynchronous.  When the server has been bound,\\n[<code>&#39;listening&#39;</code>][] event will be emitted.  The last parameter <code>callback</code>\\nwill be added as a listener for the [<code>&#39;listening&#39;</code>][] event.</p>\\n<p>On UNIX, the local domain is usually known as the UNIX domain. The path is a\\nfilesystem path name. It gets truncated to <code>sizeof(sockaddr_un.sun_path)</code>\\nbytes, decreased by 1. It varies on different operating system between 91 and\\n107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is\\nsubject to the same naming conventions and permissions checks as would be done\\non file creation, will be visible in the filesystem, and will <em>persist until\\nunlinked</em>.</p>\\n<p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em>\\nrefer to an entry in <code>\\\\\\\\?\\\\pipe\\\\</code> or <code>\\\\\\\\.\\\\pipe\\\\</code>. Any characters are permitted,\\nbut the latter may do some processing of pipe names, such as resolving <code>..</code>\\nsequences. Despite appearances, the pipe name space is flat.  Pipes will <em>not\\npersist</em>, they are removed when the last reference to them is closed. Do not\\nforget JavaScript string escaping requires paths to be specified with\\ndouble-backslashes, such as:</p>\\n<pre><code>net.createServer().listen(\\n    path.join(&#39;\\\\\\\\\\\\\\\\?\\\\\\\\pipe&#39;, process.cwd(), &#39;myctl&#39;))\\n</code></pre><p>The parameter <code>backlog</code> behaves the same as in\\n[<code>server.listen(port[, hostname][, backlog][, callback])</code>][<code>server.listen(port, host, backlog, callback)</code>].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.listen(port[, hostname][, backlog][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the\\n<code>hostname</code> is omitted, the server will accept connections on any IPv6 address\\n(<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise. Use a\\nport value of <code>0</code> to have the operating system assign an available port.</p>\\n<p>Backlog is the maximum length of the queue of pending connections.\\nThe actual length will be determined by the OS through sysctl settings such as\\n<code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on Linux. The default value of this\\nparameter is 511 (not 512).</p>\\n<p>This function is asynchronous.  When the server has been bound,\\n[<code>&#39;listening&#39;</code>][] event will be emitted.  The last parameter <code>callback</code>\\nwill be added as a listener for the [<code>&#39;listening&#39;</code>][] event.</p>\\n<p>One issue some users run into is getting <code>EADDRINUSE</code> errors. This means that\\nanother server is already running on the requested port. One way of handling this\\nwould be to wait a second and then try again:</p>\\n<pre><code class=\\\"lang-js\\\">server.on(&#39;error&#39;, (e) =&gt; {\\n  if (e.code == &#39;EADDRINUSE&#39;) {\\n    console.log(&#39;Address in use, retrying...&#39;);\\n    setTimeout(() =&gt; {\\n      server.close();\\n      server.listen(PORT, HOST);\\n    }, 1000);\\n  }\\n});\\n</code></pre>\\n<p>(Note: All sockets in Node.js are set <code>SO_REUSEADDR</code>.)</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"hostname\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"backlog\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.ref()\",\n              \"type\": \"method\",\n              \"name\": \"ref\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.1\"\n                ]\n              },\n              \"desc\": \"<p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em>\\nlet the program exit if it&#39;s the only server left (the default behavior). If\\nthe server is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>\\n<p>Returns <code>server</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.unref()\",\n              \"type\": \"method\",\n              \"name\": \"unref\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.1\"\n                ]\n              },\n              \"desc\": \"<p>Calling <code>unref</code> on a server will allow the program to exit if this is the only\\nactive server in the event system. If the server is already <code>unref</code>d calling\\n<code>unref</code> again will have no effect.</p>\\n<p>Returns <code>server</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"server.connections\",\n              \"name\": \"connections\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.2.0\"\n                ],\n                \"deprecated\": [\n                  \"v0.9.7\"\n                ]\n              },\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`server.getConnections()`][] instead.\",\n              \"desc\": \"<p>The number of concurrent connections on the server.</p>\\n<p>This becomes <code>null</code> when sending a socket to a child with\\n[<code>child_process.fork()</code>][]. To poll forks and get current number of active\\nconnections use asynchronous <code>server.getConnections</code> instead.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.listening\",\n              \"name\": \"listening\",\n              \"meta\": {\n                \"added\": [\n                  \"v5.7.0\"\n                ]\n              },\n              \"desc\": \"<p>A Boolean indicating whether or not the server is listening for\\nconnections.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.maxConnections\",\n              \"name\": \"maxConnections\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.2.0\"\n                ]\n              },\n              \"desc\": \"<p>Set this property to reject connections when the server&#39;s connection count gets\\nhigh.</p>\\n<p>It is not recommended to use this option once a socket has been sent to a child\\nwith [<code>child_process.fork()</code>][].</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: net.Socket\",\n          \"type\": \"class\",\n          \"name\": \"net.Socket\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.4\"\n            ]\n          },\n          \"desc\": \"<p>This object is an abstraction of a TCP or local socket.  <code>net.Socket</code>\\ninstances implement a duplex Stream interface.  They can be created by the\\nuser and used as a client (with [<code>connect()</code>][]) or they can be created by Node.js\\nand passed to the user through the <code>&#39;connection&#39;</code> event of a server.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"new net.Socket([options])\",\n              \"type\": \"method\",\n              \"name\": \"Socket\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.4\"\n                ]\n              },\n              \"desc\": \"<p>Construct a new socket object.</p>\\n<p><code>options</code> is an object with the following defaults:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  fd: null,\\n  allowHalfOpen: false,\\n  readable: false,\\n  writable: false\\n}\\n</code></pre>\\n<p><code>fd</code> allows you to specify the existing file descriptor of socket.\\nSet <code>readable</code> and/or <code>writable</code> to <code>true</code> to allow reads and/or writes on this\\nsocket (NOTE: Works only when <code>fd</code> is passed).\\nAbout <code>allowHalfOpen</code>, refer to <code>createServer()</code> and <code>&#39;end&#39;</code> event.</p>\\n<p><code>net.Socket</code> instances are [<code>EventEmitter</code>][] with the following events:</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.address()\",\n              \"type\": \"method\",\n              \"name\": \"address\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Returns the bound address, the address family name and port of the\\nsocket as reported by the operating system. Returns an object with\\nthree properties, e.g.\\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.connect(options[, connectListener])\",\n              \"type\": \"method\",\n              \"name\": \"connect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Opens the connection for a given socket.</p>\\n<p>For TCP sockets, <code>options</code> argument should be an object which specifies:</p>\\n<ul>\\n<li><p><code>port</code>: Port the client should connect to (Required).</p>\\n</li>\\n<li><p><code>host</code>: Host the client should connect to. Defaults to <code>&#39;localhost&#39;</code>.</p>\\n</li>\\n<li><p><code>localAddress</code>: Local interface to bind to for network connections.</p>\\n</li>\\n<li><p><code>localPort</code>: Local port to bind to for network connections.</p>\\n</li>\\n<li><p><code>family</code> : Version of IP stack. Defaults to <code>4</code>.</p>\\n</li>\\n<li><p><code>hints</code>: [<code>dns.lookup()</code> hints][]. Defaults to <code>0</code>.</p>\\n</li>\\n<li><p><code>lookup</code> : Custom lookup function. Defaults to <code>dns.lookup</code>.</p>\\n</li>\\n</ul>\\n<p>For local domain sockets, <code>options</code> argument should be an object which\\nspecifies:</p>\\n<ul>\\n<li><code>path</code>: Path the client should connect to (Required).</li>\\n</ul>\\n<p>Normally this method is not needed, as <code>net.createConnection</code> opens the\\nsocket. Use this only if you are implementing a custom Socket.</p>\\n<p>This function is asynchronous. When the [<code>&#39;connect&#39;</code>][] event is emitted the\\nsocket is established. If there is a problem connecting, the <code>&#39;connect&#39;</code> event\\nwill not be emitted, the [<code>&#39;error&#39;</code>][] event will be emitted with the exception.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"connectListener\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.connect(path[, connectListener])\",\n              \"type\": \"method\",\n              \"name\": \"connect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>As [<code>socket.connect(options[, connectListener])</code>][<code>socket.connect(options, connectListener)</code>],\\nwith options either as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"host\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"connectListener\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"path\"\n                    },\n                    {\n                      \"name\": \"connectListener\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.connect(port[, host][, connectListener])\",\n              \"type\": \"method\",\n              \"name\": \"connect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>As [<code>socket.connect(options[, connectListener])</code>][<code>socket.connect(options, connectListener)</code>],\\nwith options either as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"host\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"connectListener\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.destroy()\",\n              \"type\": \"method\",\n              \"name\": \"destroy\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Ensures that no more I/O activity happens on this socket. Only necessary in\\ncase of errors (parse error or so).</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.end([data][, encoding])\",\n              \"type\": \"method\",\n              \"name\": \"end\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the\\nserver will still send some data.</p>\\n<p>If <code>data</code> is specified, it is equivalent to calling\\n<code>socket.write(data, encoding)</code> followed by <code>socket.end()</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.pause()\",\n              \"type\": \"method\",\n              \"name\": \"pause\",\n              \"desc\": \"<p>Pauses the reading of data. That is, [<code>&#39;data&#39;</code>][] events will not be emitted.\\nUseful to throttle back an upload.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.ref()\",\n              \"type\": \"method\",\n              \"name\": \"ref\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.1\"\n                ]\n              },\n              \"desc\": \"<p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em>\\nlet the program exit if it&#39;s the only socket left (the default behavior). If\\nthe socket is <code>ref</code>d calling <code>ref</code> again will have no effect.</p>\\n<p>Returns <code>socket</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.resume()\",\n              \"type\": \"method\",\n              \"name\": \"resume\",\n              \"desc\": \"<p>Resumes reading after a call to [<code>pause()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.setEncoding([encoding])\",\n              \"type\": \"method\",\n              \"name\": \"setEncoding\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Set the encoding for the socket as a [Readable Stream][]. See\\n[<code>stream.setEncoding()</code>][] for more information.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.setKeepAlive([enable][, initialDelay])\",\n              \"type\": \"method\",\n              \"name\": \"setKeepAlive\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.92\"\n                ]\n              },\n              \"desc\": \"<p>Enable/disable keep-alive functionality, and optionally set the initial\\ndelay before the first keepalive probe is sent on an idle socket.\\n<code>enable</code> defaults to <code>false</code>.</p>\\n<p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last\\ndata packet received and the first keepalive probe. Setting 0 for\\ninitialDelay will leave the value unchanged from the default\\n(or previous) setting. Defaults to <code>0</code>.</p>\\n<p>Returns <code>socket</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"enable\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"initialDelay\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.setNoDelay([noDelay])\",\n              \"type\": \"method\",\n              \"name\": \"setNoDelay\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Disables the Nagle algorithm. By default TCP connections use the Nagle\\nalgorithm, they buffer data before sending it off. Setting <code>true</code> for\\n<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.\\n<code>noDelay</code> defaults to <code>true</code>.</p>\\n<p>Returns <code>socket</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"noDelay\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.setTimeout(timeout[, callback])\",\n              \"type\": \"method\",\n              \"name\": \"setTimeout\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on\\nthe socket. By default <code>net.Socket</code> do not have a timeout.</p>\\n<p>When an idle timeout is triggered the socket will receive a [<code>&#39;timeout&#39;</code>][]\\nevent but the connection will not be severed. The user must manually [<code>end()</code>][]\\nor [<code>destroy()</code>][] the socket.</p>\\n<p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p>\\n<p>The optional <code>callback</code> parameter will be added as a one time listener for the\\n[<code>&#39;timeout&#39;</code>][] event.</p>\\n<p>Returns <code>socket</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"timeout\"\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.unref()\",\n              \"type\": \"method\",\n              \"name\": \"unref\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.1\"\n                ]\n              },\n              \"desc\": \"<p>Calling <code>unref</code> on a socket will allow the program to exit if this is the only\\nactive socket in the event system. If the socket is already <code>unref</code>d calling\\n<code>unref</code> again will have no effect.</p>\\n<p>Returns <code>socket</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"socket.write(data[, encoding][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Sends data on the socket. The second parameter specifies the encoding in the\\ncase of a string--it defaults to UTF8 encoding.</p>\\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\\n[<code>&#39;drain&#39;</code>][] will be emitted when the buffer is again free.</p>\\n<p>The optional <code>callback</code> parameter will be executed when the data is finally\\nwritten out - this may not be immediately.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"encoding\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean\\nwhich says if the socket was closed due to a transmission error.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'connect'\",\n              \"type\": \"event\",\n              \"name\": \"connect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when a socket connection is successfully established.\\nSee [<code>connect()</code>][].</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'data'\",\n              \"type\": \"event\",\n              \"name\": \"data\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when data is received.  The argument <code>data</code> will be a <code>Buffer</code> or\\n<code>String</code>.  Encoding of data is set by <code>socket.setEncoding()</code>.\\n(See the [Readable Stream][] section for more information.)</p>\\n<p>Note that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code>\\nemits a <code>&#39;data&#39;</code> event.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'drain'\",\n              \"type\": \"event\",\n              \"name\": \"drain\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p>\\n<p>See also: the return values of <code>socket.write()</code></p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'end'\",\n              \"type\": \"event\",\n              \"name\": \"end\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Emitted when the other end of the socket sends a FIN packet.</p>\\n<p>By default (<code>allowHalfOpen == false</code>) the socket will destroy its file\\ndescriptor  once it has written out its pending write queue.  However, by\\nsetting <code>allowHalfOpen == true</code> the socket will not automatically <code>end()</code>\\nits side allowing the user to write arbitrary amounts of data, with the\\ncaveat that the user is required to <code>end()</code> their side now.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'error'\",\n              \"type\": \"event\",\n              \"name\": \"error\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"params\": [],\n              \"desc\": \"<p>Emitted when an error occurs.  The <code>&#39;close&#39;</code> event will be called directly\\nfollowing this event.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Event: 'lookup'\",\n              \"type\": \"event\",\n              \"name\": \"lookup\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.3\"\n                ]\n              },\n              \"desc\": \"<p>Emitted after resolving the hostname but before connecting.\\nNot applicable to UNIX sockets.</p>\\n<ul>\\n<li><code>err</code> {Error|Null} The error object.  See [<code>dns.lookup()</code>][].</li>\\n<li><code>address</code> {String} The IP address.</li>\\n<li><code>family</code> {String|Null} The address type.  See [<code>dns.lookup()</code>][].</li>\\n<li><code>host</code> {String} The hostname.</li>\\n</ul>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'timeout'\",\n              \"type\": \"event\",\n              \"name\": \"timeout\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.90\"\n                ]\n              },\n              \"desc\": \"<p>Emitted if the socket times out from inactivity. This is only to notify that\\nthe socket has been idle. The user must manually close the connection.</p>\\n<p>See also: [<code>socket.setTimeout()</code>][]</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"socket.bufferSize\",\n              \"name\": \"bufferSize\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.8\"\n                ]\n              },\n              \"desc\": \"<p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to\\nhelp users get up and running quickly. The computer cannot always keep up\\nwith the amount of data that is written to a socket - the network connection\\nsimply might be too slow. Node.js will internally queue up the data written to a\\nsocket and send it out over the wire when it is possible. (Internally it is\\npolling on the socket&#39;s file descriptor for being writable).</p>\\n<p>The consequence of this internal buffering is that memory may grow. This\\nproperty shows the number of characters currently buffered to be written.\\n(Number of characters is approximately equal to the number of bytes to be\\nwritten, but the buffer may contain strings, and the strings are lazily\\nencoded, so the exact number of bytes is not known.)</p>\\n<p>Users who experience large or growing <code>bufferSize</code> should attempt to\\n&quot;throttle&quot; the data flows in their program with [<code>pause()</code>][] and [<code>resume()</code>][].</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.bytesRead\",\n              \"name\": \"bytesRead\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.3\"\n                ]\n              },\n              \"desc\": \"<p>The amount of received bytes.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.bytesWritten\",\n              \"name\": \"bytesWritten\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.3\"\n                ]\n              },\n              \"desc\": \"<p>The amount of bytes sent.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.connecting\",\n              \"name\": \"connecting\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.1.0\"\n                ]\n              },\n              \"desc\": \"<p>If <code>true</code> - [<code>socket.connect(options[, connectListener])</code>][<code>socket.connect(options, connectListener)</code>] was called and\\nhaven&#39;t yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event\\nand/or calling [<code>socket.connect(options[, connectListener])</code>][<code>socket.connect(options, connectListener)</code>]&#39;s callback.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.localAddress\",\n              \"name\": \"localAddress\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.6\"\n                ]\n              },\n              \"desc\": \"<p>The string representation of the local IP address the remote client is\\nconnecting on. For example, if you are listening on <code>&#39;0.0.0.0&#39;</code> and the\\nclient connects on <code>&#39;192.168.1.1&#39;</code>, the value would be <code>&#39;192.168.1.1&#39;</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.localPort\",\n              \"name\": \"localPort\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.6\"\n                ]\n              },\n              \"desc\": \"<p>The numeric representation of the local port. For example,\\n<code>80</code> or <code>21</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.remoteAddress\",\n              \"name\": \"remoteAddress\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.10\"\n                ]\n              },\n              \"desc\": \"<p>The string representation of the remote IP address. For example,\\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>. Value may be <code>undefined</code> if\\nthe socket is destroyed (for example, if the client disconnected).</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.remoteFamily\",\n              \"name\": \"remoteFamily\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.14\"\n                ]\n              },\n              \"desc\": \"<p>The string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"socket.remotePort\",\n              \"name\": \"remotePort\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.10\"\n                ]\n              },\n              \"desc\": \"<p>The numeric representation of the remote port. For example,\\n<code>80</code> or <code>21</code>.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"net.connect(options[, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"connect\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.0\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new [<code>net.Socket</code>][] and automatically\\nconnects with the supplied <code>options</code>.</p>\\n<p>The options are passed to both the [<code>net.Socket</code>][] constructor and the\\n[<code>socket.connect</code>][] method.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n<p>Here is an example of a client of the previously described echo server:</p>\\n<pre><code class=\\\"lang-js\\\">const net = require(&#39;net&#39;);\\nconst client = net.connect({port: 8124}, () =&gt; {\\n  // &#39;connect&#39; listener\\n  console.log(&#39;connected to server!&#39;);\\n  client.write(&#39;world!\\\\r\\\\n&#39;);\\n});\\nclient.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data.toString());\\n  client.end();\\n});\\nclient.on(&#39;end&#39;, () =&gt; {\\n  console.log(&#39;disconnected from server&#39;);\\n});\\n</code></pre>\\n<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\\nchanged to</p>\\n<pre><code class=\\\"lang-js\\\">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.connect(path[, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"connect\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new unix [<code>net.Socket</code>][] and automatically\\nconnects to the supplied <code>path</code>.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.connect(port[, host][, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"connect\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new [<code>net.Socket</code>][] and automatically\\nconnects to the supplied <code>port</code> and <code>host</code>.</p>\\n<p>If <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"port\"\n                },\n                {\n                  \"name\": \"host\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.createConnection(options[, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"createConnection\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new [<code>net.Socket</code>][] and automatically\\nconnects with the supplied <code>options</code>.</p>\\n<p>The options are passed to both the [<code>net.Socket</code>][] constructor and the\\n[<code>socket.connect</code>][] method.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n<p>Here is an example of a client of the previously described echo server:</p>\\n<pre><code class=\\\"lang-js\\\">const net = require(&#39;net&#39;);\\nconst client = net.createConnection({port: 8124}, () =&gt; {\\n  //&#39;connect&#39; listener\\n  console.log(&#39;connected to server!&#39;);\\n  client.write(&#39;world!\\\\r\\\\n&#39;);\\n});\\nclient.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data.toString());\\n  client.end();\\n});\\nclient.on(&#39;end&#39;, () =&gt; {\\n  console.log(&#39;disconnected from server&#39;);\\n});\\n</code></pre>\\n<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\\nchanged to</p>\\n<pre><code class=\\\"lang-js\\\">const client = net.connect({path: &#39;/tmp/echo.sock&#39;});\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.createConnection(path[, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"createConnection\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new unix [<code>net.Socket</code>][] and automatically\\nconnects to the supplied <code>path</code>.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.createConnection(port[, host][, connectListener])\",\n          \"type\": \"method\",\n          \"name\": \"createConnection\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.90\"\n            ]\n          },\n          \"desc\": \"<p>A factory function, which returns a new [<code>net.Socket</code>][] and automatically\\nconnects to the supplied <code>port</code> and <code>host</code>.</p>\\n<p>If <code>host</code> is omitted, <code>&#39;localhost&#39;</code> will be assumed.</p>\\n<p>The <code>connectListener</code> parameter will be added as a listener for the\\n[<code>&#39;connect&#39;</code>][] event once.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"port\"\n                },\n                {\n                  \"name\": \"host\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"connectListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.createServer([options][, connectionListener])\",\n          \"type\": \"method\",\n          \"name\": \"createServer\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"desc\": \"<p>Creates a new server. The <code>connectionListener</code> argument is\\nautomatically set as a listener for the [<code>&#39;connection&#39;</code>][] event.</p>\\n<p><code>options</code> is an object with the following defaults:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  allowHalfOpen: false,\\n  pauseOnConnect: false\\n}\\n</code></pre>\\n<p>If <code>allowHalfOpen</code> is <code>true</code>, then the socket won&#39;t automatically send a FIN\\npacket when the other end of the socket sends a FIN packet. The socket becomes\\nnon-readable, but still writable. You should call the [<code>end()</code>][] method explicitly.\\nSee [<code>&#39;end&#39;</code>][] event for more information.</p>\\n<p>If <code>pauseOnConnect</code> is <code>true</code>, then the socket associated with each incoming\\nconnection will be paused, and no data will be read from its handle. This allows\\nconnections to be passed between processes without any data being read by the\\noriginal process. To begin reading data from a paused socket, call [<code>resume()</code>][].</p>\\n<p>Here is an example of an echo server which listens for connections\\non port 8124:</p>\\n<pre><code class=\\\"lang-js\\\">const net = require(&#39;net&#39;);\\nconst server = net.createServer((c) =&gt; {\\n  // &#39;connection&#39; listener\\n  console.log(&#39;client connected&#39;);\\n  c.on(&#39;end&#39;, () =&gt; {\\n    console.log(&#39;client disconnected&#39;);\\n  });\\n  c.write(&#39;hello\\\\r\\\\n&#39;);\\n  c.pipe(c);\\n});\\nserver.on(&#39;error&#39;, (err) =&gt; {\\n  throw err;\\n});\\nserver.listen(8124, () =&gt; {\\n  console.log(&#39;server bound&#39;);\\n});\\n</code></pre>\\n<p>Test this by using <code>telnet</code>:</p>\\n<pre><code>telnet localhost 8124\\n</code></pre><p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would\\njust be changed to</p>\\n<pre><code class=\\\"lang-js\\\">server.listen(&#39;/tmp/echo.sock&#39;, () =&gt; {\\n  console.log(&#39;server bound&#39;);\\n});\\n</code></pre>\\n<p>Use <code>nc</code> to connect to a UNIX domain socket server:</p>\\n<pre><code class=\\\"lang-js\\\">nc -U /tmp/echo.sock\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"connectionListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.isIP(input)\",\n          \"type\": \"method\",\n          \"name\": \"isIP\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.0\"\n            ]\n          },\n          \"desc\": \"<p>Tests if input is an IP address. Returns 0 for invalid strings,\\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"input\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.isIPv4(input)\",\n          \"type\": \"method\",\n          \"name\": \"isIPv4\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns true if input is a version 4 IP address, otherwise returns false.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"input\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"net.isIPv6(input)\",\n          \"type\": \"method\",\n          \"name\": \"isIPv6\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns true if input is a version 6 IP address, otherwise returns false.</p>\\n<!-- [end-include:net.md] -->\\n<!-- [start-include:os.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"input\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"net\"\n    },\n    {\n      \"textRaw\": \"OS\",\n      \"name\": \"os\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>Provides a few basic operating-system related utility functions.</p>\\n<p>Use <code>require(&#39;os&#39;)</code> to access this module.</p>\\n\",\n      \"properties\": [\n        {\n          \"textRaw\": \"os.EOL\",\n          \"name\": \"EOL\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.8\"\n            ]\n          },\n          \"desc\": \"<p>A constant defining the appropriate End-of-line marker for the operating\\nsystem.</p>\\n\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"os.arch()\",\n          \"type\": \"method\",\n          \"name\": \"arch\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns the operating system CPU architecture. Possible values are <code>&#39;x64&#39;</code>,\\n<code>&#39;arm&#39;</code> and <code>&#39;ia32&#39;</code>. Returns the value of [<code>process.arch</code>][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.cpus()\",\n          \"type\": \"method\",\n          \"name\": \"cpus\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns an array of objects containing information about each CPU/core\\ninstalled: model, speed (in MHz), and times (an object containing the number of\\nmilliseconds the CPU/core spent in: user, nice, sys, idle, and irq).</p>\\n<p>Example inspection of os.cpus:</p>\\n<pre><code class=\\\"lang-js\\\">[ { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 252020,\\n       nice: 0,\\n       sys: 30340,\\n       idle: 1070356870,\\n       irq: 0 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 306960,\\n       nice: 0,\\n       sys: 26980,\\n       idle: 1071569080,\\n       irq: 0 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 248450,\\n       nice: 0,\\n       sys: 21750,\\n       idle: 1070919370,\\n       irq: 0 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 256880,\\n       nice: 0,\\n       sys: 19430,\\n       idle: 1070905480,\\n       irq: 20 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 511580,\\n       nice: 20,\\n       sys: 40900,\\n       idle: 1070842510,\\n       irq: 0 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 291660,\\n       nice: 0,\\n       sys: 34360,\\n       idle: 1070888000,\\n       irq: 10 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 308260,\\n       nice: 0,\\n       sys: 55410,\\n       idle: 1071129970,\\n       irq: 880 } },\\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\\n    speed: 2926,\\n    times:\\n     { user: 266450,\\n       nice: 1480,\\n       sys: 34920,\\n       idle: 1072572010,\\n       irq: 30 } } ]\\n</code></pre>\\n<p>Note that since <code>nice</code> values are UNIX centric in Windows the <code>nice</code> values of\\nall processors are always 0.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.endianness()\",\n          \"type\": \"method\",\n          \"name\": \"endianness\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.4\"\n            ]\n          },\n          \"desc\": \"<p>Returns the endianness of the CPU. Possible values are <code>&#39;BE&#39;</code> for big endian\\nor <code>&#39;LE&#39;</code> for little endian.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.freemem()\",\n          \"type\": \"method\",\n          \"name\": \"freemem\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the amount of free system memory in bytes.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.homedir()\",\n          \"type\": \"method\",\n          \"name\": \"homedir\",\n          \"meta\": {\n            \"added\": [\n              \"v2.3.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns the home directory of the current user.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.hostname()\",\n          \"type\": \"method\",\n          \"name\": \"hostname\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the hostname of the operating system.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.loadavg()\",\n          \"type\": \"method\",\n          \"name\": \"loadavg\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns an array containing the 1, 5, and 15 minute load averages.</p>\\n<p>The load average is a measure of system activity, calculated by the operating\\nsystem and expressed as a fractional number.  As a rule of thumb, the load\\naverage should ideally be less than the number of logical CPUs in the system.</p>\\n<p>The load average is a very UNIX-y concept; there is no real equivalent on\\nWindows platforms.  That is why this function always returns <code>[0, 0, 0]</code> on\\nWindows.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.networkInterfaces()\",\n          \"type\": \"method\",\n          \"name\": \"networkInterfaces\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.0\"\n            ]\n          },\n          \"desc\": \"<p>Get a list of network interfaces:</p>\\n<pre><code class=\\\"lang-js\\\">{ lo:\\n   [ { address: &#39;127.0.0.1&#39;,\\n       netmask: &#39;255.0.0.0&#39;,\\n       family: &#39;IPv4&#39;,\\n       mac: &#39;00:00:00:00:00:00&#39;,\\n       internal: true },\\n     { address: &#39;::1&#39;,\\n       netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,\\n       family: &#39;IPv6&#39;,\\n       mac: &#39;00:00:00:00:00:00&#39;,\\n       internal: true } ],\\n  eth0:\\n   [ { address: &#39;192.168.1.108&#39;,\\n       netmask: &#39;255.255.255.0&#39;,\\n       family: &#39;IPv4&#39;,\\n       mac: &#39;01:02:03:0a:0b:0c&#39;,\\n       internal: false },\\n     { address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,\\n       netmask: &#39;ffff:ffff:ffff:ffff::&#39;,\\n       family: &#39;IPv6&#39;,\\n       mac: &#39;01:02:03:0a:0b:0c&#39;,\\n       internal: false } ] }\\n</code></pre>\\n<p>Note that due to the underlying implementation this will only return network\\ninterfaces that have been assigned an address.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.platform()\",\n          \"type\": \"method\",\n          \"name\": \"platform\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns the operating system platform. Possible values are <code>&#39;darwin&#39;</code>,\\n<code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code>. Returns the value of\\n[<code>process.platform</code>][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.release()\",\n          \"type\": \"method\",\n          \"name\": \"release\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the operating system release.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.tmpdir()\",\n          \"type\": \"method\",\n          \"name\": \"tmpdir\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.9\"\n            ]\n          },\n          \"desc\": \"<p>Returns the operating system&#39;s default directory for temporary files.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.totalmem()\",\n          \"type\": \"method\",\n          \"name\": \"totalmem\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the total amount of system memory in bytes.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.type()\",\n          \"type\": \"method\",\n          \"name\": \"type\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the operating system name. For example <code>&#39;Linux&#39;</code> on Linux, <code>&#39;Darwin&#39;</code>\\non OS X and <code>&#39;Windows_NT&#39;</code> on Windows.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.uptime()\",\n          \"type\": \"method\",\n          \"name\": \"uptime\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.3\"\n            ]\n          },\n          \"desc\": \"<p>Returns the system uptime in seconds.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"os.userInfo([options])\",\n          \"type\": \"method\",\n          \"name\": \"userInfo\",\n          \"meta\": {\n            \"added\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encoding` {String} Character encoding used to interpret resulting strings. If `encoding` is set to `'buffer'`, the `username`, `shell`, and `homedir` values will be `Buffer` instances. (Default: 'utf8') \",\n                      \"name\": \"encoding\",\n                      \"default\": \"utf8\",\n                      \"type\": \"String\",\n                      \"desc\": \"Character encoding used to interpret resulting strings. If `encoding` is set to `'buffer'`, the `username`, `shell`, and `homedir` values will be `Buffer` instances.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Returns a subset of the password file entry for the current effective user. The\\nreturned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.\\nOn Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p>\\n<p>The value of <code>homedir</code> returned by <code>userInfo()</code> comes directly from the\\noperating system. This differs from the result of <code>os.homedir()</code>, which queries\\nseveral environment variables for the home directory before falling back to the\\noperating system response.</p>\\n<!-- [end-include:os.md] -->\\n<!-- [start-include:path.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"OS\"\n    },\n    {\n      \"textRaw\": \"Path\",\n      \"name\": \"path\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>path</code> module provides utilities for working with file and directory paths.\\nIt can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const path = require(&#39;path&#39;);\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Windows vs. POSIX\",\n          \"name\": \"windows_vs._posix\",\n          \"desc\": \"<p>The default operation of the <code>path</code> module varies based on the operating system\\non which a Node.js application is running. Specifically, when running on a\\nWindows operating system, the <code>path</code> module will assume that Windows-style\\npaths are being used.</p>\\n<p>For example, using the <code>path.basename()</code> function with the Windows file path\\n<code>C:\\\\temp\\\\myfile.html</code>, will yield different results when running on POSIX than\\nwhen run on Windows:</p>\\n<p>On POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">path.basename(&#39;C:\\\\\\\\temp\\\\\\\\myfile.html&#39;);\\n  // returns &#39;C:\\\\temp\\\\myfile.html&#39;\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.basename(&#39;C:\\\\\\\\temp\\\\\\\\myfile.html&#39;);\\n  // returns &#39;myfile.html&#39;\\n</code></pre>\\n<p>To achieve consistent results when working with Windows file paths on any\\noperating system, use [<code>path.win32</code>][]:</p>\\n<p>On POSIX and Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.win32.basename(&#39;C:\\\\\\\\temp\\\\\\\\myfile.html&#39;);\\n  // returns &#39;myfile.html&#39;\\n</code></pre>\\n<p>To achieve consistent results when working with POSIX file paths on any\\noperating system, use [<code>path.posix</code>][]:</p>\\n<p>On POSIX and Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.posix.basename(&#39;/tmp/myfile.html&#39;);\\n  // returns &#39;myfile.html&#39;\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Windows vs. POSIX\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"path.basename(path[, ext])\",\n          \"type\": \"method\",\n          \"name\": \"basename\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                },\n                {\n                  \"textRaw\": \"`ext` {String} An optional file extension \",\n                  \"name\": \"ext\",\n                  \"type\": \"String\",\n                  \"desc\": \"An optional file extension\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                },\n                {\n                  \"name\": \"ext\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to\\nthe Unix <code>basename</code> command.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;)\\n  // returns &#39;quux.html&#39;\\n\\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;)\\n  // returns &#39;quux&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string or if <code>ext</code> is given\\nand is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.dirname(path)\",\n          \"type\": \"method\",\n          \"name\": \"dirname\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to\\nthe Unix <code>dirname</code> command.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;)\\n// returns &#39;/foo/bar/baz/asdf&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.extname(path)\",\n          \"type\": \"method\",\n          \"name\": \"extname\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last\\noccurance of the <code>.</code> (period) character to end of string in the last portion of\\nthe <code>path</code>.  If there is no <code>.</code> in the last portion of the <code>path</code>, or if the\\nfirst character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then\\nan empty string is returned.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">path.extname(&#39;index.html&#39;)\\n// returns &#39;.html&#39;\\n\\npath.extname(&#39;index.coffee.md&#39;)\\n// returns &#39;.md&#39;\\n\\npath.extname(&#39;index.&#39;)\\n// returns &#39;.&#39;\\n\\npath.extname(&#39;index&#39;)\\n// returns &#39;&#39;\\n\\npath.extname(&#39;.index&#39;)\\n// returns &#39;&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.format(pathObject)\",\n          \"type\": \"method\",\n          \"name\": \"format\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.15\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`pathObject` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`dir` {String} \",\n                      \"name\": \"dir\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`root` {String}  \",\n                      \"name\": \"root\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`base` {String} \",\n                      \"name\": \"base\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`name` {String} \",\n                      \"name\": \"name\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`ext` {String} \",\n                      \"name\": \"ext\",\n                      \"type\": \"String\"\n                    }\n                  ],\n                  \"name\": \"pathObject\",\n                  \"type\": \"Object\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"pathObject\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.format()</code> method returns a path string from an object. This is the\\nopposite of [<code>path.parse()</code>][].</p>\\n<p>The following process is used when constructing the path string:</p>\\n<ul>\\n<li><code>output</code> is set to an empty string.</li>\\n<li>If <code>pathObject.dir</code> is specified, <code>pathObject.dir</code> is appended to <code>output</code>\\nfollowed by the value of <code>path.sep</code>;</li>\\n<li>Otherwise, if <code>pathObject.root</code> is specified, <code>pathObject.root</code> is appended\\nto <code>output</code>.</li>\\n<li>If <code>pathObject.base</code> is specified, <code>pathObject.base</code> is appended to <code>output</code>;</li>\\n<li>Otherwise:<ul>\\n<li>If <code>pathObject.name</code> is specified, <code>pathObject.name</code> is appended to <code>output</code></li>\\n<li>If <code>pathObject.ext</code> is specified, <code>pathObject.ext</code> is appended to <code>output</code>.</li>\\n</ul>\\n</li>\\n<li>Return <code>output</code></li>\\n</ul>\\n<p>For example, on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">// If `dir` and `base` are provided,\\n// `${dir}${path.sep}${base}`\\n// will be returned.\\npath.format({\\n  dir: &#39;/home/user/dir&#39;,\\n  base: &#39;file.txt&#39;\\n});\\n// returns &#39;/home/user/dir/file.txt&#39;\\n\\n// `root` will be used if `dir` is not specified.\\n// If only `root` is provided or `dir` is equal to `root` then the\\n// platform separator will not be included.\\npath.format({\\n  root: &#39;/&#39;,\\n  base: &#39;file.txt&#39;\\n});\\n// returns &#39;/file.txt&#39;\\n\\n// `name` + `ext` will be used if `base` is not specified.\\npath.format({\\n  root: &#39;/&#39;,\\n  name: &#39;file&#39;,\\n  ext: &#39;.txt&#39;\\n});\\n// returns &#39;/file.txt&#39;\\n\\n// `base` will be returned if `dir` or `root` are not provided.\\npath.format({\\n  base: &#39;file.txt&#39;\\n});\\n// returns &#39;file.txt&#39;\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.format({\\n    root : &quot;C:\\\\\\\\&quot;,\\n    dir : &quot;C:\\\\\\\\path\\\\\\\\dir&quot;,\\n    base : &quot;file.txt&quot;,\\n    ext : &quot;.txt&quot;,\\n    name : &quot;file&quot;\\n})\\n// returns &#39;C:\\\\\\\\path\\\\\\\\dir\\\\\\\\file.txt&#39;\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"path.isAbsolute(path)\",\n          \"type\": \"method\",\n          \"name\": \"isAbsolute\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.2\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>\\n<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>\\n<p>For example on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">path.isAbsolute(&#39;/foo/bar&#39;) // true\\npath.isAbsolute(&#39;/baz/..&#39;)  // true\\npath.isAbsolute(&#39;qux/&#39;)     // false\\npath.isAbsolute(&#39;.&#39;)        // false\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.isAbsolute(&#39;//server&#39;)  // true\\npath.isAbsolute(&#39;C:/foo/..&#39;) // true\\npath.isAbsolute(&#39;bar\\\\\\\\baz&#39;)  // false\\npath.isAbsolute(&#39;.&#39;)         // false\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.join([path[, ...]])\",\n          \"type\": \"method\",\n          \"name\": \"join\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`[path[, ...]]` {String} A sequence of path segments \",\n                  \"name\": \"[path[,\",\n                  \"desc\": \"...]]` {String} A sequence of path segments\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.join()</code> method join all given <code>path</code> segments together using the\\nplatform specific separator as a delimiter, then normalizes the resulting path.</p>\\n<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a\\nzero-length string then <code>&#39;.&#39;</code> will be returned, representing the current\\nworking directory.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;)\\n// returns &#39;/foo/bar/baz/asdf&#39;\\n\\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\\n// throws TypeError: Arguments to path.join must be strings\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if any of the path segments is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.normalize(path)\",\n          \"type\": \"method\",\n          \"name\": \"normalize\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.23\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>&#39;..&#39;</code> and\\n<code>&#39;.&#39;</code> segments.</p>\\n<p>When multiple, sequential path segment separation characters are found (e.g.\\n<code>/</code> on POSIX and <code>\\\\</code> on Windows), they are replaced by a single instance of the\\nplatform specific path segment separator. Trailing separators are preserved.</p>\\n<p>If the <code>path</code> is a zero-length string, <code>&#39;.&#39;</code> is returned, representing the\\ncurrent working directory.</p>\\n<p>For example on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;)\\n// returns &#39;/foo/bar/baz/asdf&#39;\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.normalize(&#39;C:\\\\\\\\temp\\\\\\\\\\\\\\\\foo\\\\\\\\bar\\\\\\\\..\\\\\\\\&#39;);\\n// returns &#39;C:\\\\\\\\temp\\\\\\\\foo\\\\\\\\&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.parse(path)\",\n          \"type\": \"method\",\n          \"name\": \"parse\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.15\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`path` {String} \",\n                  \"name\": \"path\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.parse()</code> method returns an object whose properties represent\\nsignificant elements of the <code>path</code>.</p>\\n<p>The returned object will have the following properties:</p>\\n<ul>\\n<li><code>root</code> {String}</li>\\n<li><code>dir</code> {String}</li>\\n<li><code>base</code> {String}</li>\\n<li><code>ext</code> {String}</li>\\n<li><code>name</code> {String}</li>\\n</ul>\\n<p>For example on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">path.parse(&#39;/home/user/dir/file.txt&#39;)\\n// returns\\n// {\\n//    root : &quot;/&quot;,\\n//    dir : &quot;/home/user/dir&quot;,\\n//    base : &quot;file.txt&quot;,\\n//    ext : &quot;.txt&quot;,\\n//    name : &quot;file&quot;\\n// }\\n</code></pre>\\n<pre><code class=\\\"lang-text\\\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502          dir        \u2502    base    \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\\n&quot;  /    home/user/dir / file  .txt &quot;\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.parse(&#39;C:\\\\\\\\path\\\\\\\\dir\\\\\\\\file.txt&#39;)\\n// returns\\n// {\\n//    root : &quot;C:\\\\\\\\&quot;,\\n//    dir : &quot;C:\\\\\\\\path\\\\\\\\dir&quot;,\\n//    base : &quot;file.txt&quot;,\\n//    ext : &quot;.txt&quot;,\\n//    name : &quot;file&quot;\\n// }\\n</code></pre>\\n<pre><code class=\\\"lang-text\\\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502          dir        \u2502    base    \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\\n&quot; C:\\\\      path\\\\dir   \\\\ file  .txt &quot;\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if <code>path</code> is not a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.relative(from, to)\",\n          \"type\": \"method\",\n          \"name\": \"relative\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`from` {String} \",\n                  \"name\": \"from\",\n                  \"type\": \"String\"\n                },\n                {\n                  \"textRaw\": \"`to` {String} \",\n                  \"name\": \"to\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"from\"\n                },\n                {\n                  \"name\": \"to\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>.\\nIf <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code>\\non each), a zero-length string is returned.</p>\\n<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working\\ndirectory will be used instead of the zero-length strings.</p>\\n<p>For example on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;)\\n// returns &#39;../../impl/bbb&#39;\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">path.relative(&#39;C:\\\\\\\\orandea\\\\\\\\test\\\\\\\\aaa&#39;, &#39;C:\\\\\\\\orandea\\\\\\\\impl\\\\\\\\bbb&#39;)\\n// returns &#39;..\\\\\\\\..\\\\\\\\impl\\\\\\\\bbb&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if neither <code>from</code> nor <code>to</code> is a string.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.resolve([path[, ...]])\",\n          \"type\": \"method\",\n          \"name\": \"resolve\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.4\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`[path[, ...]]` {String} A sequence of paths or path segments \",\n                  \"name\": \"[path[,\",\n                  \"desc\": \"...]]` {String} A sequence of paths or path segments\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"path\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into\\nan absolute path.</p>\\n<p>The given sequence of paths is processed from right to left, with each\\nsubsequent <code>path</code> prepended until an absolute path is constructed.\\nFor instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,\\ncalling <code>path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;)</code> would return <code>/bar/baz</code>.</p>\\n<p>If after processing all given <code>path</code> segments an absolute path has not yet\\nbeen generated, the current working directory is used.</p>\\n<p>The resulting path is normalized and trailing slashes are removed unless the\\npath is resolved to the root directory.</p>\\n<p>Zero-length <code>path</code> segments are ignored.</p>\\n<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path\\nof the current working directory.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)\\n// returns &#39;/foo/bar/baz&#39;\\n\\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;)\\n// returns &#39;/tmp/file&#39;\\n\\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;)\\n// if the current working directory is /home/myself/node,\\n// this returns &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\\n</code></pre>\\n<p>A [<code>TypeError</code>][] is thrown if any of the arguments is not a string.</p>\\n\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"path.delimiter\",\n          \"name\": \"delimiter\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.3\"\n            ]\n          },\n          \"desc\": \"<p>Provides the platform-specific path delimiter:</p>\\n<ul>\\n<li><code>;</code> for Windows</li>\\n<li><code>:</code> for POSIX</li>\\n</ul>\\n<p>For example, on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.env.PATH)\\n// &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;\\n\\nprocess.env.PATH.split(path.delimiter)\\n// returns [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.env.PATH)\\n// &#39;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\&#39;\\n\\nprocess.env.PATH.split(path.delimiter)\\n// returns [&#39;C:\\\\\\\\Windows\\\\\\\\system32&#39;, &#39;C:\\\\\\\\Windows&#39;, &#39;C:\\\\\\\\Program Files\\\\\\\\node\\\\\\\\&#39;]\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"path.posix\",\n          \"name\": \"posix\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.15\"\n            ]\n          },\n          \"desc\": \"<p>The <code>path.posix</code> property provides access to POSIX specific implementations\\nof the <code>path</code> methods.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"path.sep\",\n          \"name\": \"sep\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.9\"\n            ]\n          },\n          \"desc\": \"<p>Provides the platform-specific path segment separator:</p>\\n<ul>\\n<li><code>\\\\</code> on Windows</li>\\n<li><code>/</code> on POSIX</li>\\n</ul>\\n<p>For example on POSIX:</p>\\n<pre><code class=\\\"lang-js\\\">&#39;foo/bar/baz&#39;.split(path.sep)\\n// returns [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\\n</code></pre>\\n<p>On Windows:</p>\\n<pre><code class=\\\"lang-js\\\">&#39;foo\\\\\\\\bar\\\\\\\\baz&#39;.split(path.sep)\\n// returns [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"path.win32\",\n          \"name\": \"win32\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.15\"\n            ]\n          },\n          \"desc\": \"<p>The <code>path.win32</code> property provides access to Windows-specific implementations\\nof the <code>path</code> methods.</p>\\n<!-- [end-include:path.md] -->\\n<!-- [start-include:process.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Path\"\n    },\n    {\n      \"textRaw\": \"punycode\",\n      \"name\": \"punycode\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>punycode</code> module is a bundled version of the [Punycode.js][] module. It\\ncan be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const punycode = require(&#39;punycode&#39;);\\n</code></pre>\\n<p>[Punycode][] is a character encoding scheme defined by RFC 3492 that is\\nprimarily intended for use in Internationalized Domain Names. Because host\\nnames in URLs are limited to ASCII characters only, Domain Names that contain\\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\\nFor instance, the Japanese character that translates into the English word,\\n<code>&#39;example&#39;</code> is <code>&#39;\u4f8b&#39;</code>. The Internationalized Domain Name, <code>&#39;\u4f8b.com&#39;</code> (equivalent\\nto <code>&#39;example.com&#39;</code>) is represented by Punycode as the ASCII string\\n<code>&#39;xn--fsq.com&#39;</code>.</p>\\n<p>The <code>punycode</code> module provides a simple implementation of the Punycode standard.</p>\\n<p><em>Note</em>: The <code>punycode</code> module is a third-party dependency used by Node.js and\\nmade available to developers as a convenience. Fixes or other modifications to\\nthe module must be directed to the [Punycode.js][] project.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"punycode.decode(string)\",\n          \"type\": \"method\",\n          \"name\": \"decode\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`string` {String} \",\n                  \"name\": \"string\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"string\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>punycode.decode()</code> method converts a [Punycode][] string of ASCII-only\\ncharacters to the equivalent string of Unicode codepoints.</p>\\n<pre><code class=\\\"lang-js\\\">punycode.decode(&#39;maana-pta&#39;); // &#39;ma\u00f1ana&#39;\\npunycode.decode(&#39;--dqo34k&#39;); // &#39;\u2603-\u2318&#39;\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"punycode.encode(string)\",\n          \"type\": \"method\",\n          \"name\": \"encode\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`string` {String} \",\n                  \"name\": \"string\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"string\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\\n[Punycode][] string of ASCII-only characters.</p>\\n<pre><code class=\\\"lang-js\\\">punycode.encode(&#39;ma\u00f1ana&#39;); // &#39;maana-pta&#39;\\npunycode.encode(&#39;\u2603-\u2318&#39;); // &#39;--dqo34k&#39;\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"punycode.toASCII(domain)\",\n          \"type\": \"method\",\n          \"name\": \"toASCII\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`domain` {String} \",\n                  \"name\": \"domain\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"domain\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an\\nInternationalized Domain Name to [Punycode][]. Only the non-ASCII parts of the\\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\\nalready only contains ASCII characters will have no effect.</p>\\n<pre><code class=\\\"lang-js\\\">// encode domain names\\npunycode.toASCII(&#39;ma\u00f1ana.com&#39;);  // &#39;xn--maana-pta.com&#39;\\npunycode.toASCII(&#39;\u2603-\u2318.com&#39;);   // &#39;xn----dqo34k.com&#39;\\npunycode.toASCII(&#39;example.com&#39;); // &#39;example.com&#39;\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"punycode.toUnicode(domain)\",\n          \"type\": \"method\",\n          \"name\": \"toUnicode\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`domain` {String} \",\n                  \"name\": \"domain\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"domain\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name\\ncontaining [Punycode][] encoded characters into Unicode. Only the [Punycode][]\\nencoded parts of the domain name are be converted.</p>\\n<pre><code class=\\\"lang-js\\\">// decode domain names\\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); // &#39;ma\u00f1ana.com&#39;\\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;);  // &#39;\u2603-\u2318.com&#39;\\npunycode.toUnicode(&#39;example.com&#39;);       // &#39;example.com&#39;\\n</code></pre>\\n\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"punycode.ucs2\",\n          \"name\": \"ucs2\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.0\"\n            ]\n          },\n          \"modules\": [\n            {\n              \"textRaw\": \"punycode.ucs2.decode(string)\",\n              \"name\": \"punycode.ucs2.decode(string)\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.0\"\n                ]\n              },\n              \"desc\": \"<ul>\\n<li><code>string</code> {String}</li>\\n</ul>\\n<p>The <code>punycode.ucs2.decode()</code> method returns an array containing the numeric\\ncodepoint values of each Unicode symbol in the string.</p>\\n<pre><code class=\\\"lang-js\\\">punycode.ucs2.decode(&#39;abc&#39;); // [0x61, 0x62, 0x63]\\n// surrogate pair for U+1D306 tetragram for centre:\\npunycode.ucs2.decode(&#39;\\\\uD834\\\\uDF06&#39;); // [0x1D306]\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"punycode.ucs2.decode(string)\"\n            },\n            {\n              \"textRaw\": \"punycode.ucs2.encode(codePoints)\",\n              \"name\": \"punycode.ucs2.encode(codepoints)\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.0\"\n                ]\n              },\n              \"desc\": \"<ul>\\n<li><code>codePoints</code> {Array}</li>\\n</ul>\\n<p>The <code>punycode.ucs2.encode()</code> method returns a string based on an array of\\nnumeric code point values.</p>\\n<pre><code class=\\\"lang-js\\\">punycode.ucs2.encode([0x61, 0x62, 0x63]); // &#39;abc&#39;\\npunycode.ucs2.encode([0x1D306]); // &#39;\\\\uD834\\\\uDF06&#39;\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"punycode.ucs2.encode(codePoints)\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"punycode.version\",\n          \"name\": \"version\",\n          \"meta\": {\n            \"added\": [\n              \"v0.6.1\"\n            ]\n          },\n          \"desc\": \"<p>Returns a string identifying the current [Punycode.js][] version number.</p>\\n<!-- [end-include:punycode.md] -->\\n<!-- [start-include:querystring.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"punycode\"\n    },\n    {\n      \"textRaw\": \"Query String\",\n      \"name\": \"querystring\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>querystring</code> module provides utilities for parsing and formatting URL\\nquery strings. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const querystring = require(&#39;querystring&#39;);\\n</code></pre>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"querystring.escape(str)\",\n          \"type\": \"method\",\n          \"name\": \"escape\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`str` {String} \",\n                  \"name\": \"str\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"str\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given\\n<code>str</code> in a manner that is optimized for the specific requirements of URL\\nquery strings.</p>\\n<p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is\\ngenerally not expected to be used directly. It is exported primarily to allow\\napplication code to provide a replacement percent-encoding implementation if\\nnecessary by assigning <code>querystring.escape</code> to an alternative function.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"querystring.parse(str[, sep[, eq[, options]]])\",\n          \"type\": \"method\",\n          \"name\": \"parse\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`str` {String} The URL query string to parse \",\n                  \"name\": \"str\",\n                  \"type\": \"String\",\n                  \"desc\": \"The URL query string to parse\"\n                },\n                {\n                  \"textRaw\": \"`sep` {String} The substring used to delimit key and value pairs in the query string. Defaults to `'&'`. \",\n                  \"name\": \"sep\",\n                  \"type\": \"String\",\n                  \"desc\": \"The substring used to delimit key and value pairs in the query string. Defaults to `'&'`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`eq` {String}. The substring used to delimit keys and values in the query string. Defaults to `'='`. \",\n                  \"name\": \"eq\",\n                  \"type\": \"String\",\n                  \"desc\": \". The substring used to delimit keys and values in the query string. Defaults to `'='`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`decodeURIComponent` {Function} The function to use when decoding percent-encoded characters in the query string. Defaults to `querystring.unescape()`. \",\n                      \"name\": \"decodeURIComponent\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The function to use when decoding percent-encoded characters in the query string. Defaults to `querystring.unescape()`.\"\n                    },\n                    {\n                      \"textRaw\": \"`maxKeys` {number} Specifies the maximum number of keys to parse. Defaults to `1000`. Specify `0` to remove key counting limitations. \",\n                      \"name\": \"maxKeys\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the maximum number of keys to parse. Defaults to `1000`. Specify `0` to remove key counting limitations.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"str\"\n                },\n                {\n                  \"name\": \"sep\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"eq\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a\\ncollection of key and value pairs.</p>\\n<p>For example, the query string <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> is parsed into:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  foo: &#39;bar&#39;,\\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\\n}\\n</code></pre>\\n<p><em>Note</em>: The object returned by the <code>querystring.parse()</code> method <em>does not</em>\\nprototypically extend from the JavaScript <code>Object</code>. This means that the\\ntypical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hashOwnProperty()</code>,\\nand others are not defined and <em>will not work</em>.</p>\\n<p>By default, percent-encoded characters within the query string will be assumed\\nto use UTF-8 encoding. If an alternative character encoding is used, then an\\nalternative <code>decodeURIComponent</code> option will need to be specified as illustrated\\nin the following example:</p>\\n<pre><code class=\\\"lang-js\\\">// Assuming gbkDecodeURIComponent function already exists...\\n\\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,\\n  { decodeURIComponent: gbkDecodeURIComponent })\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"querystring.stringify(obj[, sep[, eq[, options]]])\",\n          \"type\": \"method\",\n          \"name\": \"stringify\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`obj` {Object} The object to serialize into a URL query string \",\n                  \"name\": \"obj\",\n                  \"type\": \"Object\",\n                  \"desc\": \"The object to serialize into a URL query string\"\n                },\n                {\n                  \"textRaw\": \"`sep` {String} The substring used to delimit key and value pairs in the query string. Defaults to `'&'`. \",\n                  \"name\": \"sep\",\n                  \"type\": \"String\",\n                  \"desc\": \"The substring used to delimit key and value pairs in the query string. Defaults to `'&'`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`eq` {String}. The substring used to delimit keys and values in the query string. Defaults to `'='`. \",\n                  \"name\": \"eq\",\n                  \"type\": \"String\",\n                  \"desc\": \". The substring used to delimit keys and values in the query string. Defaults to `'='`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`encodeURIComponent` {Function} The function to use when converting URL-unsafe characters to percent-encoding in the query string. Defaults to `querystring.escape()`. \",\n                      \"name\": \"encodeURIComponent\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The function to use when converting URL-unsafe characters to percent-encoding in the query string. Defaults to `querystring.escape()`.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"obj\"\n                },\n                {\n                  \"name\": \"sep\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"eq\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>querystring.stringify()</code> method produces a URL query string from a\\ngiven <code>obj</code> by iterating through the object&#39;s &quot;own properties&quot;.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\\n// returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\\n\\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\\n// returns &#39;foo:bar;baz:qux&#39;\\n</code></pre>\\n<p>By default, characters requiring percent-encoding within the query string will\\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\\n<code>encodeURIComponent</code> option will need to be specified as illustrated in the\\nfollowing example:</p>\\n<pre><code class=\\\"lang-js\\\">// Assuming gbkEncodeURIComponent function already exists,\\n\\nquerystring.stringify({ w: &#39;\u4e2d\u6587&#39;, foo: &#39;bar&#39; }, null, null,\\n  { encodeURIComponent: gbkEncodeURIComponent })\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"querystring.unescape(str)\",\n          \"type\": \"method\",\n          \"name\": \"unescape\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`str` {String} \",\n                  \"name\": \"str\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"str\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded\\ncharacters on the given <code>str</code>.</p>\\n<p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is\\ngenerally not expected to be used directly. It is exported primarily to allow\\napplication code to provide a replacement decoding implementation if\\nnecessary by assigning <code>querystring.unescape</code> to an alternative function.</p>\\n<p>By default, the <code>querystring.unescape()</code> method will attempt to use the\\nJavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,\\na safer equivalent that does not throw on malformed URLs will be used.</p>\\n<!-- [end-include:querystring.md] -->\\n<!-- [start-include:readline.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"querystring\"\n    },\n    {\n      \"textRaw\": \"Readline\",\n      \"name\": \"readline\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>readline</code> module provides an interface for reading data from a [Readable][]\\nstream (such as [<code>process.stdin</code>]) one line at a time. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const readline = require(&#39;readline&#39;);\\n</code></pre>\\n<p>The following simple example illustrates the basic use of the <code>readline</code> module.</p>\\n<pre><code class=\\\"lang-js\\\">const readline = require(&#39;readline&#39;);\\n\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\\n  // TODO: Log the answer in a database\\n  console.log(&#39;Thank you for your valuable feedback:&#39;, answer);\\n\\n  rl.close();\\n});\\n</code></pre>\\n<p><em>Note</em> Once this code is invoked, the Node.js application will not\\nterminate until the <code>readline.Interface</code> is closed because the interface\\nwaits for data to be received on the <code>input</code> stream.</p>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: Interface\",\n          \"type\": \"class\",\n          \"name\": \"Interface\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.104\"\n            ]\n          },\n          \"desc\": \"<p>Instances of the <code>readline.Interface</code> class are constructed using the\\n<code>readline.createInterface()</code> method. Every instance is associated with a\\nsingle <code>input</code> [Readable][] stream and a single <code>output</code> [Writable][] stream.\\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\\nand is read from, the <code>input</code> stream.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'close'\",\n              \"type\": \"event\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;close&#39;</code> event is emitted when one of the following occur:</p>\\n<ul>\\n<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has\\nrelinquished control over the <code>input</code> and <code>output</code> streams;</li>\\n<li>The <code>input</code> stream receives its <code>&#39;end&#39;</code> event;</li>\\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li>\\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no\\n<code>SIGINT</code> event listener registered on the <code>readline.Interface</code> instance.</li>\\n</ul>\\n<p>The listener function is called without passing any arguments.</p>\\n<p>The <code>readline.Interface</code> instance should be considered to be &quot;finished&quot; once\\nthe <code>&#39;close&#39;</code> event is emitted.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'line'\",\n              \"type\": \"event\",\n              \"name\": \"line\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;line&#39;</code> event is emitted whenever the <code>input</code> stream receives an\\nend-of-line input (<code>\\\\n</code>, <code>\\\\r</code>, or <code>\\\\r\\\\n</code>). This usually occurs when the user\\npresses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p>\\n<p>The listener function is called with a string containing the single line of\\nreceived input.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;line&#39;, (input) =&gt; {\\n  console.log(`Received: ${input}`);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'pause'\",\n              \"type\": \"event\",\n              \"name\": \"pause\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.5\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;pause&#39;</code> event is emitted when one of the following occur:</p>\\n<ul>\\n<li>The <code>input</code> stream is paused.</li>\\n<li>The <code>input</code> stream is not paused and receives the <code>SIGCONT</code> event. (See\\nevents <code>SIGTSTP</code> and <code>SIGCONT</code>)</li>\\n</ul>\\n<p>The listener function is called without passing any arguments.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;pause&#39;, () =&gt; {\\n  console.log(&#39;Readline paused.&#39;);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'resume'\",\n              \"type\": \"event\",\n              \"name\": \"resume\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.5\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;resume&#39;</code> event is emitted whenever the <code>input</code> stream is resumed.</p>\\n<p>The listener function is called without passing any arguments.</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;resume&#39;, () =&gt; {\\n  console.log(&#39;Readline resumed.&#39;);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'SIGCONT'\",\n              \"type\": \"event\",\n              \"name\": \"SIGCONT\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.5\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;SIGCONT&#39;</code> event is emitted when a Node.js process previously moved into\\nthe background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\\nforeground using <code>fg(1)</code>.</p>\\n<p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGSTP</code> request, this event will\\nnot be emitted.</p>\\n<p>The listener function is invoked without passing any arguments.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;SIGCONT&#39;, () =&gt; {\\n  // `prompt` will automatically resume the stream\\n  rl.prompt();\\n});\\n</code></pre>\\n<p><em>Note</em>: The <code>&#39;SIGCONT&#39;</code> event is <em>not</em> supported on Windows.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'SIGINT'\",\n              \"type\": \"event\",\n              \"name\": \"SIGINT\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;SIGINT&#39;</code> event is emitted whenever the <code>input</code> stream receives a\\n<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>&#39;SIGINT&#39;</code> event\\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>&#39;pause&#39;</code>\\nevent will be emitted.</p>\\n<p>The listener function is invoked without passing any arguments.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;SIGINT&#39;, () =&gt; {\\n  rl.question(&#39;Are you sure you want to exit?&#39;, (answer) =&gt; {\\n    if (answer.match(/^y(es)?$/i)) rl.pause();\\n  });\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'SIGTSTP'\",\n              \"type\": \"event\",\n              \"name\": \"SIGTSTP\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.5\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;SIGTSPT&#39;</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>\\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners\\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\\nwill be sent to the background.</p>\\n<p>When the program is resumed using <code>fg(1)</code>, the <code>&#39;pause&#39;</code> and <code>SIGCONT</code> events\\nwill be emitted. These can be used to resume the <code>input</code> stream.</p>\\n<p>The <code>&#39;pause&#39;</code> and <code>&#39;SIGCONT&#39;</code> events will not be emitted if the <code>input</code> was\\npaused before the process was sent to the background.</p>\\n<p>The listener function is invoked without passing any arguments.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;SIGTSTP&#39;, () =&gt; {\\n  // This will override SIGTSTP and prevent the program from going to the\\n  // background.\\n  console.log(&#39;Caught SIGTSTP.&#39;);\\n});\\n</code></pre>\\n<p><em>Note</em>: The <code>&#39;SIGTSTP&#39;</code> event is <em>not</em> supported on Windows.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"rl.close()\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"desc\": \"<p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\\nthe <code>&#39;close&#39;</code> event will be emitted.\\nCloses the <code>Interface</code> instance, relinquishing control on the <code>input</code> and\\n<code>output</code> streams. The <code>&#39;close&#39;</code> event will also be emitted.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"rl.pause()\",\n              \"type\": \"method\",\n              \"name\": \"pause\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.4\"\n                ]\n              },\n              \"desc\": \"<p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\\nlater if necessary.</p>\\n<p>Calling <code>rl.pause()</code> does not immediately pause other events (including\\n<code>&#39;line&#39;</code>) from being emitted by the <code>readline.Interface</code> instance.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"rl.prompt([preserveCursor])\",\n              \"type\": \"method\",\n              \"name\": \"prompt\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`preserveCursor` {boolean} If `true`, prevents the cursor placement from being reset to `0`. \",\n                      \"name\": \"preserveCursor\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, prevents the cursor placement from being reset to `0`.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"preserveCursor\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\\nlocation at which to provide input.</p>\\n<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been\\npaused.</p>\\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\\n<code>undefined</code> the prompt is not written.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"rl.question(query, callback)\",\n              \"type\": \"method\",\n              \"name\": \"question\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.3\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`query` {String} A statement or query to write to `output`, prepended to the prompt. \",\n                      \"name\": \"query\",\n                      \"type\": \"String\",\n                      \"desc\": \"A statement or query to write to `output`, prepended to the prompt.\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} A callback function that is invoked with the user's input in response to the `query`. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"A callback function that is invoked with the user's input in response to the `query`.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"query\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\\nfunction passing the provided input as the first argument.</p>\\n<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been\\npaused.</p>\\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\\n<code>undefined</code> the <code>query</code> is not written.</p>\\n<p>Example usage:</p>\\n<pre><code class=\\\"lang-js\\\">rl.question(&#39;What is your favorite food?&#39;, (answer) =&gt; {\\n  console.log(`Oh, so your favorite food is ${answer}`);\\n});\\n</code></pre>\\n<p><em>Note</em>: The <code>callback</code> function passed to <code>rl.question()</code> does not follow the\\ntypical pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.\\nThe <code>callback</code> is called with the provided answer as the only argument.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"rl.resume()\",\n              \"type\": \"method\",\n              \"name\": \"resume\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.4\"\n                ]\n              },\n              \"desc\": \"<p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"rl.setPrompt(prompt)\",\n              \"type\": \"method\",\n              \"name\": \"setPrompt\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`prompt` {String} \",\n                      \"name\": \"prompt\",\n                      \"type\": \"String\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"prompt\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\\nwhenever <code>rl.prompt()</code> is called.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"rl.write(data[, key])\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.98\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`data` {String} \",\n                      \"name\": \"data\",\n                      \"type\": \"String\"\n                    },\n                    {\n                      \"textRaw\": \"`key` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`ctrl` {boolean} `true` to indicate the `<ctrl>` key. \",\n                          \"name\": \"ctrl\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"`true` to indicate the `<ctrl>` key.\"\n                        },\n                        {\n                          \"textRaw\": \"`meta` {boolean} `true` to indicate the `<Meta>` key. \",\n                          \"name\": \"meta\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"`true` to indicate the `<Meta>` key.\"\n                        },\n                        {\n                          \"textRaw\": \"`shift` {boolean} `true` to indicate the `<Shift>` key. \",\n                          \"name\": \"shift\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"`true` to indicate the `<Shift>` key.\"\n                        },\n                        {\n                          \"textRaw\": \"`name` {String} The name of the a key. \",\n                          \"name\": \"name\",\n                          \"type\": \"String\",\n                          \"desc\": \"The name of the a key.\"\n                        }\n                      ],\n                      \"name\": \"key\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"data\"\n                    },\n                    {\n                      \"name\": \"key\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence  identified\\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\\na [TTY][] text terminal.</p>\\n<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>\\n<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been\\npaused.</p>\\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\\n<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">rl.write(&#39;Delete this!&#39;);\\n// Simulate Ctrl+u to delete the line written previously\\nrl.write(null, {ctrl: true, name: &#39;u&#39;});\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"readline.clearLine(stream, dir)\",\n          \"type\": \"method\",\n          \"name\": \"clearLine\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`stream` {Writable} \",\n                  \"name\": \"stream\",\n                  \"type\": \"Writable\"\n                },\n                {\n                  \"textRaw\": \"`dir` {number} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`-1` - to the left from cursor \",\n                      \"name\": \"-1\",\n                      \"desc\": \"to the left from cursor\"\n                    },\n                    {\n                      \"textRaw\": \"`1` - to the right from cursor \",\n                      \"name\": \"1\",\n                      \"desc\": \"to the right from cursor\"\n                    },\n                    {\n                      \"textRaw\": \"`0` - the entire line \",\n                      \"name\": \"0\",\n                      \"desc\": \"the entire line\"\n                    }\n                  ],\n                  \"name\": \"dir\",\n                  \"type\": \"number\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"stream\"\n                },\n                {\n                  \"name\": \"dir\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.clearLine()</code> method clears current line of given [TTY][] stream\\nin a specified direction identified by <code>dir</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"readline.clearScreenDown(stream)\",\n          \"type\": \"method\",\n          \"name\": \"clearScreenDown\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`stream` {Writable} \",\n                  \"name\": \"stream\",\n                  \"type\": \"Writable\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"stream\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.clearScreenDown()</code> method clears the given [TTY][] stream from\\nthe current position of the cursor down.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"readline.createInterface(options)\",\n          \"type\": \"method\",\n          \"name\": \"createInterface\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.98\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`input` {Readable} The [Readable][] stream to listen to. This option is *required*. \",\n                      \"name\": \"input\",\n                      \"type\": \"Readable\",\n                      \"desc\": \"The [Readable][] stream to listen to. This option is *required*.\"\n                    },\n                    {\n                      \"textRaw\": \"`output` {Writable} The [Writable][] stream to write readline data to. \",\n                      \"name\": \"output\",\n                      \"type\": \"Writable\",\n                      \"desc\": \"The [Writable][] stream to write readline data to.\"\n                    },\n                    {\n                      \"textRaw\": \"`completer` {Function} An optional function used for Tab autocompletion. \",\n                      \"name\": \"completer\",\n                      \"type\": \"Function\",\n                      \"desc\": \"An optional function used for Tab autocompletion.\"\n                    },\n                    {\n                      \"textRaw\": \"`terminal` {boolean} `true` if the `input` and `output` streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY` on the `output` stream upon instantiation. \",\n                      \"name\": \"terminal\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"`true` if the `input` and `output` streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY` on the `output` stream upon instantiation.\"\n                    },\n                    {\n                      \"textRaw\": \"`historySize` {number} maximum number of history lines retained. To disable the history set this value to `0`. Defaults to `30`. This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check, otherwise the history caching mechanism is not initialized at all. \",\n                      \"name\": \"historySize\",\n                      \"type\": \"number\",\n                      \"desc\": \"maximum number of history lines retained. To disable the history set this value to `0`. Defaults to `30`. This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check, otherwise the history caching mechanism is not initialized at all.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\\ninstance.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const readline = require(&#39;readline&#39;);\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n</code></pre>\\n<p>Once the <code>readline.Interface</code> instance is created, the most common case is to\\nlisten for the <code>&#39;line&#39;</code> event:</p>\\n<pre><code class=\\\"lang-js\\\">rl.on(&#39;line&#39;, (line) =&gt; {\\n  console.log(`Received: ${line}`);\\n});\\n</code></pre>\\n<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get\\nthe best compatibility if it defines an <code>output.columns</code> property and emits\\na <code>&#39;resize&#39;</code> event on the <code>output</code> if or when the columns ever change\\n([<code>process.stdout</code>][] does this automatically when it is a TTY).</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Use of the `completer` Function\",\n              \"name\": \"use_of_the_`completer`_function\",\n              \"desc\": \"<p>When called, the <code>completer</code> function is provided the current line entered by\\nthe user, and is expected to return an Array with 2 entries:</p>\\n<ul>\\n<li>An Array with matching entries for the completion.</li>\\n<li>The substring that was used for the matching.</li>\\n</ul>\\n<p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p>\\n<pre><code class=\\\"lang-js\\\">function completer(line) {\\n  var completions = &#39;.help .error .exit .quit .q&#39;.split(&#39; &#39;)\\n  var hits = completions.filter((c) =&gt; { return c.indexOf(line) == 0 })\\n  // show all completions if none found\\n  return [hits.length ? hits : completions, line]\\n}\\n</code></pre>\\n<p>The <code>completer</code> function can be called asynchronously if it accepts two\\narguments:</p>\\n<pre><code class=\\\"lang-js\\\">function completer(linePartial, callback) {\\n  callback(null, [[&#39;123&#39;], linePartial]);\\n}\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Use of the `completer` Function\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"readline.cursorTo(stream, x, y)\",\n          \"type\": \"method\",\n          \"name\": \"cursorTo\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`stream` {Writable} \",\n                  \"name\": \"stream\",\n                  \"type\": \"Writable\"\n                },\n                {\n                  \"textRaw\": \"`x` {number} \",\n                  \"name\": \"x\",\n                  \"type\": \"number\"\n                },\n                {\n                  \"textRaw\": \"`y` {number} \",\n                  \"name\": \"y\",\n                  \"type\": \"number\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"stream\"\n                },\n                {\n                  \"name\": \"x\"\n                },\n                {\n                  \"name\": \"y\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\\ngiven [TTY][] <code>stream</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"readline.emitKeypressEvents(stream[, interface])\",\n          \"type\": \"method\",\n          \"name\": \"emitKeypressEvents\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`stream` {Readable} \",\n                  \"name\": \"stream\",\n                  \"type\": \"Readable\"\n                },\n                {\n                  \"textRaw\": \"`interface` {readline.Interface} \",\n                  \"name\": \"interface\",\n                  \"type\": \"readline.Interface\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"stream\"\n                },\n                {\n                  \"name\": \"interface\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.emitKeypressEvents()</code> method causes the given [Writable][]\\n<code>stream</code> to begin emitting <code>&#39;keypress&#39;</code> events corresponding to received input.</p>\\n<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which\\nautocompletion is disabled when copy-pasted input is detected.</p>\\n<p>If the <code>stream</code> is a [TTY][], then it must be in raw mode.</p>\\n<pre><code class=\\\"lang-js\\\">readline.emitKeypressEvents(process.stdin);\\nif (process.stdin.isTTY)\\n  process.stdin.setRawMode(true);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"readline.moveCursor(stream, dx, dy)\",\n          \"type\": \"method\",\n          \"name\": \"moveCursor\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`stream` {Writable} \",\n                  \"name\": \"stream\",\n                  \"type\": \"Writable\"\n                },\n                {\n                  \"textRaw\": \"`dx` {number} \",\n                  \"name\": \"dx\",\n                  \"type\": \"number\"\n                },\n                {\n                  \"textRaw\": \"`dy` {Number} \",\n                  \"name\": \"dy\",\n                  \"type\": \"Number\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"stream\"\n                },\n                {\n                  \"name\": \"dx\"\n                },\n                {\n                  \"name\": \"dy\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\\nposition in a given [TTY][] <code>stream</code>.</p>\\n<h2>Example: Tiny CLI</h2>\\n<p>The following example illustrates the use of <code>readline.Interface</code> class to\\nimplement a small command-line interface:</p>\\n<pre><code class=\\\"lang-js\\\">const readline = require(&#39;readline&#39;);\\nconst rl = readline.createInterface(process.stdin, process.stdout);\\n\\nrl.setPrompt(&#39;OHAI&gt; &#39;);\\nrl.prompt();\\n\\nrl.on(&#39;line&#39;, (line) =&gt; {\\n  switch(line.trim()) {\\n    case &#39;hello&#39;:\\n      console.log(&#39;world!&#39;);\\n      break;\\n    default:\\n      console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);\\n      break;\\n  }\\n  rl.prompt();\\n}).on(&#39;close&#39;, () =&gt; {\\n  console.log(&#39;Have a great day!&#39;);\\n  process.exit(0);\\n});\\n</code></pre>\\n<h2>Example: Read File Stream Line-by-Line</h2>\\n<p>A common use case for <code>readline</code> is to consume input from a filesystem\\n[Readable][] stream one line at a time, as illustrated in the following\\nexample:</p>\\n<pre><code class=\\\"lang-js\\\">const readline = require(&#39;readline&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst rl = readline.createInterface({\\n  input: fs.createReadStream(&#39;sample.txt&#39;)\\n});\\n\\nrl.on(&#39;line&#39;, (line) =&gt; {\\n  console.log(&#39;Line from file:&#39;, line);\\n});\\n</code></pre>\\n<!-- [end-include:readline.md] -->\\n<!-- [start-include:repl.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Readline\"\n    },\n    {\n      \"textRaw\": \"REPL\",\n      \"name\": \"repl\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\\nis available both as a standalone program or includable in other applications.\\nIt can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Design and Features\",\n          \"name\": \"design_and_features\",\n          \"desc\": \"<p>The <code>repl</code> module exports the <code>repl.REPLServer</code> class. While running, instances\\nof <code>repl.REPLServer</code> will accept individual lines of user input, evaluate those\\naccording to a user-defined evaluation function, then output the result. Input\\nand output may be from <code>stdin</code> and <code>stdout</code>, respectively, or may be connected\\nto any Node.js [stream][].</p>\\n<p>Instances of <code>repl.REPLServer</code> support automatic completion of inputs,\\nsimplistic Emacs-style line editing, multi-line inputs, ANSI-styled output,\\nsaving and restoring current REPL session state, error recovery, and\\ncustomizable evaluation functions.</p>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Commands and Special Keys\",\n              \"name\": \"commands_and_special_keys\",\n              \"desc\": \"<p>The following special commands are supported by all REPL instances:</p>\\n<ul>\\n<li><code>.break</code> - When in the process of inputting a multi-line expression, entering\\nthe <code>.break</code> command (or pressing the <code>&lt;ctrl&gt;-C</code> key combination) will abort\\nfurther input or processing of that expression.</li>\\n<li><code>.clear</code> - Resets the REPL <code>context</code> to an empty object and clears any\\nmulti-line expression currently being input.</li>\\n<li><code>.exit</code> - Close the I/O stream, causing the REPL to exit.</li>\\n<li><code>.help</code> - Show this list of special commands.</li>\\n<li><code>.save</code> - Save the current REPL session to a file:\\n<code>&gt; .save ./file/to/save.js</code></li>\\n<li><code>.load</code> - Load a file into the current REPL session.\\n<code>&gt; .load ./file/to/load.js</code></li>\\n</ul>\\n<p>The following key combinations in the REPL have these special effects:</p>\\n<ul>\\n<li><code>&lt;ctrl&gt;-C</code> - When pressed once, has the same effect as the <code>.break</code> command.\\nWhen pressed twice on a blank line, has the same effect as the <code>.exit</code>\\ncommand.</li>\\n<li><code>&lt;ctrl&gt;-D</code> - Has the same effect as the <code>.exit</code> command.</li>\\n<li><code>&lt;tab&gt;</code> - When pressed on a blank line, displays global and local(scope)\\nvariables. When pressed while entering other input, displays relevant\\nautocompletion options.</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Commands and Special Keys\"\n            },\n            {\n              \"textRaw\": \"Default Evaluation\",\n              \"name\": \"default_evaluation\",\n              \"desc\": \"<p>By default, all instances of <code>repl.REPLServer</code> use an evaluation function that\\nevaluates JavaScript expressions and provides access to Node.js&#39; built-in\\nmodules. This default behavior can be overridden by passing in an alternative\\nevaluation function when the <code>repl.REPLServer</code> instance is created.</p>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"JavaScript Expressions\",\n                  \"name\": \"javascript_expressions\",\n                  \"desc\": \"<p>The default evaluator supports direct evaluation of JavaScript expressions:</p>\\n<pre><code class=\\\"lang-js\\\">&gt; 1 + 1\\n2\\n&gt; var m = 2\\nundefined\\n&gt; m + 1\\n3\\n</code></pre>\\n<p>Unless otherwise scoped within blocks (e.g. <code>{ ... }</code>) or functions, variables\\ndeclared either implicitly or using the <code>var</code> keyword are declared at the\\n<code>global</code> scope.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"JavaScript Expressions\"\n                },\n                {\n                  \"textRaw\": \"Global and Local Scope\",\n                  \"name\": \"global_and_local_scope\",\n                  \"desc\": \"<p>The default evaluator provides access to any variables that exist in the global\\nscope. It is possible to expose a variable to the REPL explicitly by assigning\\nit to the <code>context</code> object associated with each <code>REPLServer</code>.  For example:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\nvar msg = &#39;message&#39;;\\n\\nrepl.start(&#39;&gt; &#39;).context.m = msg;\\n</code></pre>\\n<p>Properties in the <code>context</code> object appear as local within the REPL:</p>\\n<pre><code class=\\\"lang-js\\\">$ node repl_test.js\\n&gt; m\\n&#39;message&#39;\\n</code></pre>\\n<p>It is important to note that context properties are <em>not</em> read-only by default.\\nTo specify read-only globals, context properties must be defined using\\n<code>Object.defineProperty()</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\nvar msg = &#39;message&#39;;\\n\\nconst r = repl.start(&#39;&gt; &#39;);\\nObject.defineProperty(r, &#39;m&#39;, {\\n  configurable: false,\\n  enumerable: true,\\n  value: msg\\n});\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Global and Local Scope\"\n                },\n                {\n                  \"textRaw\": \"Accessing Core Node.js Modules\",\n                  \"name\": \"accessing_core_node.js_modules\",\n                  \"desc\": \"<p>The default evaluator will automatically load Node.js core modules into the\\nREPL environment when used. For instance, unless otherwise declared as a\\nglobal or scoped variable, the input <code>fs</code> will be evaluated on-demand as\\n<code>global.fs = require(&#39;fs&#39;)</code>.</p>\\n<pre><code class=\\\"lang-js\\\">&gt; fs.createReadStream(&#39;./some/file&#39;);\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Accessing Core Node.js Modules\"\n                },\n                {\n                  \"textRaw\": \"Assignment of the `_` (underscore) variable\",\n                  \"name\": \"assignment_of_the_`_`_(underscore)_variable\",\n                  \"desc\": \"<p>The default evaluator will, by default, assign the result of the most recently\\nevaluated expression to the special variable <code>_</code> (underscore).</p>\\n<pre><code class=\\\"lang-js\\\">&gt; [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\\n[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\\n&gt; _.length\\n3\\n&gt; _ += 1\\n4\\n</code></pre>\\n<p>Explicitly setting <code>_</code> to a value will disable this behavior.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Assignment of the `_` (underscore) variable\"\n                }\n              ],\n              \"type\": \"module\",\n              \"displayName\": \"Default Evaluation\"\n            },\n            {\n              \"textRaw\": \"Custom Evaluation Functions\",\n              \"name\": \"custom_evaluation_functions\",\n              \"desc\": \"<p>When a new <code>repl.REPLServer</code> is created, a custom evaluation function may be\\nprovided. This can be used, for instance, to implement fully customized REPL\\napplications.</p>\\n<p>The following illustrates a hypothetical example of a REPL that performs\\ntranslation of text from one language to another:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\nconst Translator = require(&#39;translator&#39;).Translator;\\n\\nconst myTranslator = new Translator(&#39;en&#39;, &#39;fr&#39;);\\n\\nfunction myEval(cmd, context, filename, callback) {\\n  callback(null, myTranslator.translate(cmd));\\n}\\n\\nrepl.start({prompt: &#39;&gt; &#39;, eval: myEval});\\n</code></pre>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"Recoverable Errors\",\n                  \"name\": \"recoverable_errors\",\n                  \"desc\": \"<p>As a user is typing input into the REPL prompt, pressing the <code>&lt;enter&gt;</code> key will\\nsend the current line of input to the <code>eval</code> function. In order to support\\nmulti-line input, the eval function can return an instance of <code>repl.Recoverable</code>\\nto the provided callback function:</p>\\n<pre><code class=\\\"lang-js\\\">function eval(cmd, context, filename, callback) {\\n  var result;\\n  try {\\n    result = vm.runInThisContext(cmd);\\n  } catch (e) {\\n    if (isRecoverableError(e)) {\\n      return callback(new repl.Recoverable(e));\\n    }\\n  }\\n  callback(null, result);\\n}\\n\\nfunction isRecoverableError(error) {\\n  if (error.name === &#39;SyntaxError&#39;) {\\n    return /^(Unexpected end of input|Unexpected token)/.test(error.message);\\n  }\\n  return false;\\n}\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Recoverable Errors\"\n                }\n              ],\n              \"type\": \"module\",\n              \"displayName\": \"Custom Evaluation Functions\"\n            },\n            {\n              \"textRaw\": \"Customizing REPL Output\",\n              \"name\": \"customizing_repl_output\",\n              \"desc\": \"<p>By default, <code>repl.REPLServer</code> instances format output using the\\n[<code>util.inspect()</code>][] method before writing the output to the provided Writable\\nstream (<code>process.stdout</code> by default). The <code>useColors</code> boolean option can be\\nspecified at construction to instruct the default writer to use ANSI style\\ncodes to colorize the output from the <code>util.inspect()</code> method.</p>\\n<p>It is possible to fully customize the output of a <code>repl.REPLServer</code> instance\\nby passing a new function in using the <code>writer</code> option on construction. The\\nfollowing example, for instance, simply converts any input text to upper case:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\n\\nconst r = repl.start({prompt: &#39;&gt;&#39;, eval: myEval, writer: myWriter});\\n\\nfunction myEval(cmd, context, filename, callback) {\\n  callback(null,cmd);\\n}\\n\\nfunction myWriter(output) {\\n  return output.toUpperCase();\\n}\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Customizing REPL Output\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Design and Features\"\n        },\n        {\n          \"textRaw\": \"The Node.js REPL\",\n          \"name\": \"the_node.js_repl\",\n          \"desc\": \"<p>Node.js itself uses the <code>repl</code> module to provide its own interactive interface\\nfor executing JavaScript. This can used by executing the Node.js binary without\\npassing any arguments (or by passing the <code>-i</code> argument):</p>\\n<pre><code class=\\\"lang-js\\\">$ node\\n&gt; a = [1, 2, 3];\\n[ 1, 2, 3 ]\\n&gt; a.forEach((v) =&gt; {\\n...   console.log(v);\\n...   });\\n1\\n2\\n3\\n</code></pre>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Environment Variable Options\",\n              \"name\": \"environment_variable_options\",\n              \"desc\": \"<p>Various behaviors of the Node.js REPL can be customized using the following\\nenvironment variables:</p>\\n<ul>\\n<li><code>NODE_REPL_HISTORY</code> - When a valid path is given, persistent REPL history\\nwill be saved to the specified file rather than <code>.node_repl_history</code> in the\\nuser&#39;s home directory. Setting this value to <code>&quot;&quot;</code> will disable persistent\\nREPL history. Whitespace will be trimmed from the value.</li>\\n<li><code>NODE_REPL_HISTORY_SIZE</code> - Defaults to <code>1000</code>. Controls how many lines of\\nhistory will be persisted if history is available. Must be a positive number.</li>\\n<li><code>NODE_REPL_MODE</code> - May be any of <code>sloppy</code>, <code>strict</code>, or <code>magic</code>. Defaults\\nto <code>magic</code>, which will automatically run &quot;strict mode only&quot; statements in\\nstrict mode.</li>\\n</ul>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Environment Variable Options\"\n            },\n            {\n              \"textRaw\": \"Persistent History\",\n              \"name\": \"persistent_history\",\n              \"desc\": \"<p>By default, the Node.js REPL will persist history between <code>node</code> REPL sessions\\nby saving inputs to a <code>.node_repl_history</code> file located in the user&#39;s home\\ndirectory. This can be disabled by setting the environment variable\\n<code>NODE_REPL_HISTORY=&quot;&quot;</code>.</p>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"NODE_REPL_HISTORY_FILE\",\n                  \"name\": \"node_repl_history_file\",\n                  \"desc\": \"<p>   Stability: 0 - Deprecated: Use <code>NODE_REPL_HISTORY</code> instead.</p>\\n<p>Previously in Node.js/io.js v2.x, REPL history was controlled by using a\\n<code>NODE_REPL_HISTORY_FILE</code> environment variable, and the history was saved in JSON\\nformat. This variable has now been deprecated, and the old JSON REPL history\\nfile will be automatically converted to a simplified plain text format. This new\\nfile will be saved to either the user&#39;s home directory, or a directory defined\\nby the <code>NODE_REPL_HISTORY</code> variable, as documented in the\\n<a href=\\\"#repl_environment_variable_options\\\">Environment Variable Options</a>.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"NODE_REPL_HISTORY_FILE\"\n                }\n              ],\n              \"type\": \"module\",\n              \"displayName\": \"Persistent History\"\n            },\n            {\n              \"textRaw\": \"Using the Node.js REPL with advanced line-editors\",\n              \"name\": \"using_the_node.js_repl_with_advanced_line-editors\",\n              \"desc\": \"<p>For advanced line-editors, start Node.js with the environmental variable\\n<code>NODE_NO_READLINE=1</code>. This will start the main and debugger REPL in canonical\\nterminal settings which will allow you to use with <code>rlwrap</code>.</p>\\n<p>For example, you could add this to your bashrc file:</p>\\n<pre><code class=\\\"lang-text\\\">alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;\\n</code></pre>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Using the Node.js REPL with advanced line-editors\"\n            },\n            {\n              \"textRaw\": \"Starting multiple REPL instances against a single running instance\",\n              \"name\": \"starting_multiple_repl_instances_against_a_single_running_instance\",\n              \"desc\": \"<p>It is possible to create and run multiple REPL instances against a single\\nrunning instance of Node.js that share a single <code>global</code> object but have\\nseparate I/O interfaces.</p>\\n<p>The following example, for instance, provides separate REPLs on <code>stdin</code>, a Unix\\nsocket, and a TCP socket:</p>\\n<pre><code class=\\\"lang-js\\\">const net = require(&#39;net&#39;);\\nconst repl = require(&#39;repl&#39;);\\nvar connections = 0;\\n\\nrepl.start({\\n  prompt: &#39;Node.js via stdin&gt; &#39;,\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nnet.createServer((socket) =&gt; {\\n  connections += 1;\\n  repl.start({\\n    prompt: &#39;Node.js via Unix socket&gt; &#39;,\\n    input: socket,\\n    output: socket\\n  }).on(&#39;exit&#39;, () =&gt; {\\n    socket.end();\\n  })\\n}).listen(&#39;/tmp/node-repl-sock&#39;);\\n\\nnet.createServer((socket) =&gt; {\\n  connections += 1;\\n  repl.start({\\n    prompt: &#39;Node.js via TCP socket&gt; &#39;,\\n    input: socket,\\n    output: socket\\n  }).on(&#39;exit&#39;, () =&gt; {\\n    socket.end();\\n  });\\n}).listen(5001);\\n</code></pre>\\n<p>Running this application from the command line will start a REPL on stdin.\\nOther REPL clients may connect through the Unix socket or TCP socket. <code>telnet</code>,\\nfor instance, is useful for connecting to TCP sockets, while <code>socat</code> can be used\\nto connect to both Unix and TCP sockets.</p>\\n<p>By starting a REPL from a Unix socket-based server instead of stdin, it is\\npossible to connect to a long-running Node.js process without restarting it.</p>\\n<p>For an example of running a &quot;full-featured&quot; (<code>terminal</code>) REPL over\\na <code>net.Server</code> and <code>net.Socket</code> instance, see: <a href=\\\"https://gist.github.com/2209310\\\">https://gist.github.com/2209310</a></p>\\n<p>For an example of running a REPL instance over <code>curl(1)</code>,\\nsee: <a href=\\\"https://gist.github.com/2053342\\\">https://gist.github.com/2053342</a></p>\\n<!-- [end-include:repl.md] -->\\n<!-- [start-include:stream.md] -->\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Starting multiple REPL instances against a single running instance\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"The Node.js REPL\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: REPLServer\",\n          \"type\": \"class\",\n          \"name\": \"REPLServer\",\n          \"desc\": \"<p>The <code>repl.REPLServer</code> class inherits from the [<code>readline.Interface</code>][] class.\\nInstances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and\\n<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'exit'\",\n              \"type\": \"event\",\n              \"name\": \"exit\",\n              \"desc\": \"<p>The <code>&#39;exit&#39;</code> event is emitted when the REPL is exited either by receiving the\\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&#39;end&#39;</code> on the input stream. The listener\\ncallback is invoked without any arguments.</p>\\n<pre><code class=\\\"lang-js\\\">replServer.on(&#39;exit&#39;, () =&gt; {\\n  console.log(&#39;Received &quot;exit&quot; event from repl!&#39;);\\n  process.exit();\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'reset'\",\n              \"type\": \"event\",\n              \"name\": \"reset\",\n              \"desc\": \"<p>The <code>&#39;reset&#39;</code> event is emitted when the REPL&#39;s context is reset. This occurs\\nwhenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using\\nthe default evaluator and the <code>repl.REPLServer</code> instance was created with the\\n<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a\\nreference to the <code>context</code> object as the only argument.</p>\\n<p>This can be used primarily to re-initialize REPL context to some pre-defined\\nstate as illustrated in the following simple example:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\n\\nfunction initializeContext(context) {\\n  context.m = &#39;test&#39;;\\n}\\n\\nvar r = repl.start({prompt: &#39;&gt;&#39;});\\ninitializeContext(r.context);\\n\\nr.on(&#39;reset&#39;, initializeContext);\\n</code></pre>\\n<p>When this code is executed, the global <code>&#39;m&#39;</code> variable can be modified but then\\nreset to its initial value using the <code>.clear</code> command:</p>\\n<pre><code class=\\\"lang-js\\\">$ ./node example.js\\n&gt;m\\n&#39;test&#39;\\n&gt;m = 1\\n1\\n&gt;m\\n1\\n&gt;.clear\\nClearing context...\\n&gt;m\\n&#39;test&#39;\\n&gt;\\n</code></pre>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"replServer.defineCommand(keyword, cmd)\",\n              \"type\": \"method\",\n              \"name\": \"defineCommand\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`keyword` {String} The command keyword (*without* a leading `.` character). \",\n                      \"name\": \"keyword\",\n                      \"type\": \"String\",\n                      \"desc\": \"The command keyword (*without* a leading `.` character).\"\n                    },\n                    {\n                      \"textRaw\": \"`cmd` {Object|Function} The function to invoke when the command is processed. \",\n                      \"name\": \"cmd\",\n                      \"type\": \"Object|Function\",\n                      \"desc\": \"The function to invoke when the command is processed.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"keyword\"\n                    },\n                    {\n                      \"name\": \"cmd\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands\\nto the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the\\n<code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following\\nproperties:</p>\\n<ul>\\n<li><code>help</code> {String} Help text to be displayed when <code>.help</code> is entered (Optional).</li>\\n<li><code>action</code> {Function} The function to execute, optionally accepting a single\\nstring argument.</li>\\n</ul>\\n<p>The following example shows two new commands added to the REPL instance:</p>\\n<pre><code class=\\\"lang-js\\\">const repl = require(&#39;repl&#39;);\\n\\nvar replServer = repl.start({prompt: &#39;&gt; &#39;});\\nreplServer.defineCommand(&#39;sayhello&#39;, {\\n  help: &#39;Say hello&#39;,\\n  action: function(name) {\\n    this.lineParser.reset();\\n    this.bufferedCommand = &#39;&#39;;\\n    this.write(`Hello, ${name}!\\\\n`);\\n    this.displayPrompt();\\n  }\\n});\\nreplServer.defineCommand(&#39;saybye&#39;, function() {\\n  this.write(&#39;Goodbye!\\\\n&#39;);\\n  this.close();\\n});\\n</code></pre>\\n<p>The new commands can then be used from within the REPL instance:</p>\\n<pre><code>&gt; .sayhello Node.js User\\nHello, Node.js User!\\n&gt; .saybye\\nGoodbye!\\n</code></pre>\"\n            },\n            {\n              \"textRaw\": \"replServer.displayPrompt([preserveCursor])\",\n              \"type\": \"method\",\n              \"name\": \"displayPrompt\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`preserveCursor` {Boolean} \",\n                      \"name\": \"preserveCursor\",\n                      \"type\": \"Boolean\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"preserveCursor\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input\\nfrom the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>\\nand resuming the <code>input</code> to accept new input.</p>\\n<p>When multi-line input is being entered, an ellipsis is printed rather than the\\n&#39;prompt&#39;.</p>\\n<p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p>\\n<p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from\\nwithin the action function for commands registered using the\\n<code>replServer.defineCommand()</code> method.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"repl.start([options])\",\n          \"type\": \"method\",\n          \"name\": \"start\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`prompt` {String} The input prompt to display. Defaults to `> `. \",\n                      \"name\": \"prompt\",\n                      \"type\": \"String\",\n                      \"desc\": \"The input prompt to display. Defaults to `> `.\"\n                    },\n                    {\n                      \"textRaw\": \"`input` {Readable} The Readable stream from which REPL input will be read. Defaults to `process.stdin`. \",\n                      \"name\": \"input\",\n                      \"type\": \"Readable\",\n                      \"desc\": \"The Readable stream from which REPL input will be read. Defaults to `process.stdin`.\"\n                    },\n                    {\n                      \"textRaw\": \"`output` {Writable} The Writable stream to which REPL output will be written. Defaults to `process.stdout`. \",\n                      \"name\": \"output\",\n                      \"type\": \"Writable\",\n                      \"desc\": \"The Writable stream to which REPL output will be written. Defaults to `process.stdout`.\"\n                    },\n                    {\n                      \"textRaw\": \"`terminal` {boolean} If `true`, specifies that the `output` should be treated as a a TTY terminal, and have ANSI/VT100 escape codes written to it. Defaults to checking the value of the `isTTY` property on the `output` stream upon instantiation. \",\n                      \"name\": \"terminal\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, specifies that the `output` should be treated as a a TTY terminal, and have ANSI/VT100 escape codes written to it. Defaults to checking the value of the `isTTY` property on the `output` stream upon instantiation.\"\n                    },\n                    {\n                      \"textRaw\": \"`eval` {Function} The function to be used when evaluating each given line of input. Defaults to an async wrapper for the JavaScript `eval()` function.  An `eval` function can error with `repl.Recoverable` to indicate the input was incomplete and prompt for additional lines. \",\n                      \"name\": \"eval\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The function to be used when evaluating each given line of input. Defaults to an async wrapper for the JavaScript `eval()` function.  An `eval` function can error with `repl.Recoverable` to indicate the input was incomplete and prompt for additional lines.\"\n                    },\n                    {\n                      \"textRaw\": \"`useColors` {boolean} If `true`, specifies that the default `writer` function should include ANSI color styling to REPL output. If a custom `writer` function is provided then this has no effect. Defaults to the  REPL instances `terminal` value. \",\n                      \"name\": \"useColors\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, specifies that the default `writer` function should include ANSI color styling to REPL output. If a custom `writer` function is provided then this has no effect. Defaults to the  REPL instances `terminal` value.\"\n                    },\n                    {\n                      \"textRaw\": \"`useGlobal` {boolean} If `true`, specifies that the default evaluation  function will use the JavaScript `global` as the context as opposed to  creating a new separate context for the REPL instance. Defaults to `false`. \",\n                      \"name\": \"useGlobal\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, specifies that the default evaluation  function will use the JavaScript `global` as the context as opposed to  creating a new separate context for the REPL instance. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`ignoreUndefined` {boolean} If `true`, specifies that the default writer  will not output the return value of a command if it evaluates to  `undefined`. Defaults to `false`. \",\n                      \"name\": \"ignoreUndefined\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, specifies that the default writer  will not output the return value of a command if it evaluates to  `undefined`. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`writer` {Function} The function to invoke to format the output of each  command before writing to `output`. Defaults to [`util.inspect()`][]. \",\n                      \"name\": \"writer\",\n                      \"type\": \"Function\",\n                      \"desc\": \"The function to invoke to format the output of each  command before writing to `output`. Defaults to [`util.inspect()`][].\"\n                    },\n                    {\n                      \"textRaw\": \"`replMode` - A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode, default mode, or a hybrid mode (\\\"magic\\\" mode.) Acceptable values are: \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode. \",\n                          \"name\": \"repl.REPL_MODE_SLOPPY\",\n                          \"desc\": \"evaluates expressions in sloppy mode.\"\n                        },\n                        {\n                          \"textRaw\": \"`repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to prefacing every repl statement with `'use strict'`. \",\n                          \"name\": \"repl.REPL_MODE_STRICT\",\n                          \"desc\": \"evaluates expressions in strict mode. This is equivalent to prefacing every repl statement with `'use strict'`.\"\n                        },\n                        {\n                          \"textRaw\": \"`repl.REPL_MODE_MAGIC` - attempt to evaluates expressions in default mode.  If expressions fail to parse, re-try in strict mode. \",\n                          \"name\": \"repl.REPL_MODE_MAGIC\",\n                          \"desc\": \"attempt to evaluates expressions in default mode.  If expressions fail to parse, re-try in strict mode.\"\n                        }\n                      ],\n                      \"name\": \"replMode\",\n                      \"desc\": \"A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode, default mode, or a hybrid mode (\\\"magic\\\" mode.) Acceptable values are:\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p>\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"REPL\"\n    },\n    {\n      \"textRaw\": \"Stream\",\n      \"name\": \"stream\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>A stream is an abstract interface for working with streaming data in Node.js.\\nThe <code>stream</code> module provides a base API that makes it easy to build objects\\nthat implement the stream interface.</p>\\n<p>There are many stream objects provided by Node.js. For instance, a\\n[request to an HTTP server][http-incoming-message] and [<code>process.stdout</code>][]\\nare both stream instances.</p>\\n<p>Streams can be readable, writable, or both. All streams are instances of\\n[<code>EventEmitter</code>][].</p>\\n<p>The <code>stream</code> module can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const stream = require(&#39;stream&#39;);\\n</code></pre>\\n<p>While it is important for all Node.js users to understand how streams works,\\nthe <code>stream</code> module itself is most useful for developer&#39;s that are creating new\\ntypes of stream instances. Developer&#39;s who are primarily <em>consuming</em> stream\\nobjects will rarely (if ever) have need to use the <code>stream</code> module directly.</p>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Organization of this document\",\n          \"name\": \"organization_of_this_document\",\n          \"desc\": \"<p>This document is divided into two primary sections and third section for\\nadditional notes. The first section explains the elements of the stream API that\\nare required to <em>use</em> streams within an application. The second section explains\\nthe elements of the API that are required to <em>implement</em> new types of streams.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Organization of this document\"\n        },\n        {\n          \"textRaw\": \"Types of Streams\",\n          \"name\": \"types_of_streams\",\n          \"desc\": \"<p>There are four fundamental stream types within Node.js:</p>\\n<ul>\\n<li>[Readable][] - streams from which data can be read (for example\\n[<code>fs.createReadStream()</code>][]).</li>\\n<li>[Writable][] - streams to which data can be written (for example\\n[<code>fs.createWriteStream</code>][]).</li>\\n<li>[Duplex][] - streams that are both Readable and Writable (for example\\n[<code>net.Socket</code>][]).</li>\\n<li>[Transform][] - Duplex streams that can modify or transform the data as it\\nis written and read (for example [<code>zlib.createDeflate()</code>][]).</li>\\n</ul>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Object Mode\",\n              \"name\": \"object_mode\",\n              \"desc\": \"<p>All streams created by Node.js APIs operate exclusively on strings and <code>Buffer</code>\\nobjects. It is possible, however, for stream implementations to work with other\\ntypes of JavaScript values (with the exception of <code>null</code> which serves a special\\npurpose within streams). Such streams are considered to operate in &quot;object\\nmode&quot;.</p>\\n<p>Stream instances are switched into object mode using the <code>objectMode</code> option\\nwhen the stream is created. Attempting to switch an existing stream into\\nobject mode is not safe.</p>\\n\",\n              \"type\": \"module\",\n              \"displayName\": \"Object Mode\"\n            }\n          ],\n          \"miscs\": [\n            {\n              \"textRaw\": \"Buffering\",\n              \"name\": \"Buffering\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Both [Writable][] and [Readable][] streams will store data in an internal\\nbuffer that can be retrieved using <code>writable._writableState.getBuffer()</code> or\\n<code>readable._readableState.buffer</code>, respectively.</p>\\n<p>The amount of data potentially buffered depends on the <code>highWaterMark</code> option\\npassed into the streams constructor. For normal streams, the <code>highWaterMark</code>\\noption specifies a total number of bytes. For streams operating in object mode,\\nthe <code>highWaterMark</code> specifies a total number of objects.</p>\\n<p>Data is buffered in Readable streams when the implementation calls\\n[<code>stream.push(chunk)</code>][stream-push]. If the consumer of the Stream does not\\ncall [<code>stream.read()</code>][stream-read], the data will sit in the internal\\nqueue until it is consumed.</p>\\n<p>Once the total size of the internal read buffer reaches the threshold specified\\nby <code>highWaterMark</code>, the stream will temporarily stop reading data from the\\nunderlying resource until the data currently buffered can be consumed (that is,\\nthe stream will stop calling the internal <code>readable.\\\\_read()</code> method that is\\nused to fill the read buffer).</p>\\n<p>Data is buffered in Writable streams when the\\n[<code>writable.write(chunk)</code>][stream-write] method is called repeatedly. While the\\ntotal size of the internal write buffer is below the threshold set by\\n<code>highWaterMark</code>, calls to <code>writable.write()</code> will return <code>true</code>. Once the\\nthe size of the internal buffer reaches or exceeds the <code>highWaterMark</code>, <code>false</code>\\nwill be returned.</p>\\n<p>A key goal of the <code>stream</code> API, an in particular the [<code>stream.pipe()</code>] method,\\nis to limit the buffering of data to acceptable levels such that sources and\\ndestinations of differing speeds will not overwhelm the available memory.</p>\\n<p>Because [Duplex][] and [Transform][] streams are both Readable and Writable,\\neach maintain <em>two</em> separate internal buffers used for reading and writing,\\nallowing each side to operate independently of the other while maintaining an\\nappropriate and efficient flow of data. For example, [<code>net.Socket</code>][] instances\\nare [Duplex][] streams whose Readable side allows consumption of data received\\n<em>from</em> the socket and whose Writable side allows writing data <em>to</em> the socket.\\nBecause data may be written to the socket at a faster or slower rate than data\\nis received, it is important each side operate (and buffer) independently of\\nthe other.</p>\\n\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Types of Streams\"\n        }\n      ],\n      \"miscs\": [\n        {\n          \"textRaw\": \"API for Stream Consumers\",\n          \"name\": \"API for Stream Consumers\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Almost all Node.js applications, no matter how simple, use streams in some\\nmanner. The following is an example of using streams in a Node.js application\\nthat implements an HTTP server:</p>\\n<pre><code class=\\\"lang-js\\\">const http = require(&#39;http&#39;);\\n\\nconst server = http.createServer( (req, res) =&gt; {\\n  // req is an http.IncomingMessage, which is a Readable Stream\\n  // res is an http.ServerResponse, which is a Writable Stream\\n\\n  var body = &#39;&#39;;\\n  // Get the data as utf8 strings.\\n  // If an encoding is not set, Buffer objects will be received.\\n  req.setEncoding(&#39;utf8&#39;);\\n\\n  // Readable streams emit &#39;data&#39; events once a listener is added\\n  req.on(&#39;data&#39;, (chunk) =&gt; {\\n    body += chunk;\\n  });\\n\\n  // the end event indicates that the entire body has been received\\n  req.on(&#39;end&#39;, () =&gt; {\\n    try {\\n      const data = JSON.parse(body);\\n    } catch (er) {\\n      // uh oh!  bad json!\\n      res.statusCode = 400;\\n      return res.end(`error: ${er.message}`);\\n    }\\n\\n    // write back something interesting to the user:\\n    res.write(typeof data);\\n    res.end();\\n  });\\n});\\n\\nserver.listen(1337);\\n\\n// $ curl localhost:1337 -d &#39;{}&#39;\\n// object\\n// $ curl localhost:1337 -d &#39;&quot;foo&quot;&#39;\\n// string\\n// $ curl localhost:1337 -d &#39;not json&#39;\\n// error: Unexpected token o\\n</code></pre>\\n<p>[Writable][] streams (such as <code>res</code> in the example) expose methods such as\\n<code>write()</code> and <code>end()</code> that are used to write data onto the stream.</p>\\n<p>[Readable][] streams use the [<code>EventEmitter</code>][] API for notifying application\\ncode when data is available to be read off the stream. That available data can\\nbe read from the stream in multiple ways.</p>\\n<p>Both [Writable][] and [Readable][] streams use the [<code>EventEmitter</code>][] API in\\nvarious ways to communicate the current state of the stream.</p>\\n<p>[Duplex][] and [Transform][] streams are both [Writable][] and [Readable][].</p>\\n<p>Applications that are either writing data to or consuming data from a stream\\nare not required to implement the stream interfaces directly and will generally\\nhave no reason to call <code>require(&#39;stream&#39;)</code>.</p>\\n<p>Developers wishing to implement new types of streams should refer to the\\nsection [API for Stream Implemeters][].</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Writable Streams\",\n              \"name\": \"writable_streams\",\n              \"desc\": \"<p>Writable streams are an abstraction for a <em>destination</em> to which data is\\nwritten.</p>\\n<p>Examples of [Writable][] streams include:</p>\\n<ul>\\n<li>[HTTP requests, on the client][]</li>\\n<li>[HTTP responses, on the server][]</li>\\n<li>[fs write streams][]</li>\\n<li>[zlib streams][zlib]</li>\\n<li>[crypto streams][crypto]</li>\\n<li>[TCP sockets][]</li>\\n<li>[child process stdin][]</li>\\n<li>[<code>process.stdout</code>][], [<code>process.stderr</code>][]</li>\\n</ul>\\n<p><em>Note</em>: Some of these examples are actually [Duplex][] streams that implement\\nthe [Writable][] interface.</p>\\n<p>All [Writable][] streams implement the interface defined by the\\n<code>stream.Writable</code> class.</p>\\n<p>While specific instances of [Writable][] streams may differ in various ways,\\nall Writable streams follow the same fundamental usage pattern as illustrated\\nin the example below:</p>\\n<pre><code class=\\\"lang-js\\\">const myStream = getWritableStreamSomehow();\\nmyStream.write(&#39;some data&#39;);\\nmyStream.write(&#39;some more data&#39;);\\nmyStream.end(&#39;done writing data&#39;);\\n</code></pre>\\n\",\n              \"classes\": [\n                {\n                  \"textRaw\": \"Class: stream.Writable\",\n                  \"type\": \"class\",\n                  \"name\": \"stream.Writable\",\n                  \"events\": [\n                    {\n                      \"textRaw\": \"Event: 'close'\",\n                      \"type\": \"event\",\n                      \"name\": \"close\",\n                      \"desc\": \"<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\\nresources (a file descriptor, for example) have been closed. The event indicates\\nthat no more events will be emitted, and no further computation will occur.</p>\\n<p>Not all Writable streams will emit the <code>&#39;close&#39;</code> event.</p>\\n\",\n                      \"params\": []\n                    },\n                    {\n                      \"textRaw\": \"Event: 'drain'\",\n                      \"type\": \"event\",\n                      \"name\": \"drain\",\n                      \"desc\": \"<p>If a call to [<code>stream.write(chunk)</code>][stream-write] returns <code>false</code>, the\\n<code>&#39;drain&#39;</code> event will be emitted when it is appropriate to resume writing data\\nto the stream.</p>\\n<pre><code class=\\\"lang-js\\\">// Write the data to the supplied writable stream one million times.\\n// Be attentive to back-pressure.\\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\\n  var i = 1000000;\\n  write();\\n  function write() {\\n    var ok = true;\\n    do {\\n      i--;\\n      if (i === 0) {\\n        // last time!\\n        writer.write(data, encoding, callback);\\n      } else {\\n        // see if we should continue, or wait\\n        // don&#39;t pass the callback, because we&#39;re not done yet.\\n        ok = writer.write(data, encoding);\\n      }\\n    } while (i &gt; 0 &amp;&amp; ok);\\n    if (i &gt; 0) {\\n      // had to stop early!\\n      // write some more once it drains\\n      writer.once(&#39;drain&#39;, write);\\n    }\\n  }\\n}\\n</code></pre>\\n\",\n                      \"params\": []\n                    },\n                    {\n                      \"textRaw\": \"Event: 'error'\",\n                      \"type\": \"event\",\n                      \"name\": \"error\",\n                      \"params\": [],\n                      \"desc\": \"<p>The <code>&#39;error&#39;</code> event is emitted if an error occurred while writing or piping\\ndata. The listener callback is passed a single <code>Error</code> argument when called.</p>\\n<p><em>Note</em>: The stream is not closed when the <code>&#39;error&#39;</code> event is emitted.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"Event: 'finish'\",\n                      \"type\": \"event\",\n                      \"name\": \"finish\",\n                      \"desc\": \"<p>The <code>&#39;finish&#39;</code> event is emitted after the [<code>stream.end()</code>][stream-end] method\\nhas been called, and all data has been flushed to the underlying system.</p>\\n<pre><code class=\\\"lang-js\\\">const writer = getWritableStreamSomehow();\\nfor (var i = 0; i &lt; 100; i ++) {\\n  writer.write(&#39;hello, #${i}!\\\\n&#39;);\\n}\\nwriter.end(&#39;This is the end\\\\n&#39;);\\nwriter.on(&#39;finish&#39;, () =&gt; {\\n  console.error(&#39;All writes are now complete.&#39;);\\n});\\n</code></pre>\\n\",\n                      \"params\": []\n                    },\n                    {\n                      \"textRaw\": \"Event: 'pipe'\",\n                      \"type\": \"event\",\n                      \"name\": \"pipe\",\n                      \"params\": [],\n                      \"desc\": \"<p>The <code>&#39;pipe&#39;</code> event is emitted when the [<code>stream.pipe()</code>][] method is called on\\na readable stream, adding this writable to its set of destinations.</p>\\n<pre><code class=\\\"lang-js\\\">const writer = getWritableStreamSomehow();\\nconst reader = getReadableStreamSomehow();\\nwriter.on(&#39;pipe&#39;, (src) =&gt; {\\n  console.error(&#39;something is piping into the writer&#39;);\\n  assert.equal(src, reader);\\n});\\nreader.pipe(writer);\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"Event: 'unpipe'\",\n                      \"type\": \"event\",\n                      \"name\": \"unpipe\",\n                      \"params\": [],\n                      \"desc\": \"<p>The <code>&#39;unpipe&#39;</code> event is emitted when the [<code>stream.unpipe()</code>][] method is called\\non a [Readable][] stream, removing this [Writable][] from its set of\\ndestinations.</p>\\n<pre><code class=\\\"lang-js\\\">const writer = getWritableStreamSomehow();\\nconst reader = getReadableStreamSomehow();\\nwriter.on(&#39;unpipe&#39;, (src) =&gt; {\\n  console.error(&#39;Something has stopped piping into the writer.&#39;);\\n  assert.equal(src, reader);\\n});\\nreader.pipe(writer);\\nreader.unpipe(writer);\\n</code></pre>\\n\"\n                    }\n                  ],\n                  \"methods\": [\n                    {\n                      \"textRaw\": \"writable.cork()\",\n                      \"type\": \"method\",\n                      \"name\": \"cork\",\n                      \"desc\": \"<p>The <code>writable.cork()</code> method forces all written data to be buffered in memory.\\nThe buffered data will be flushed when either the [<code>stream.uncork()</code>][] or\\n[<code>stream.end()</code>][stream-end] methods are called.</p>\\n<p>The primary intent of <code>writable.cork()</code> is to avoid a situation where writing\\nmany small chunks of data to a stream do not cause an backup in the internal\\nbuffer that would have an adverse impact on performance. In such situations,\\nimplementations that implement the <code>writable.\\\\_writev()</code> method can perform\\nbuffered writes in a more optimized manner.</p>\\n\",\n                      \"signatures\": [\n                        {\n                          \"params\": []\n                        }\n                      ]\n                    },\n                    {\n                      \"textRaw\": \"writable.end([chunk][, encoding][, callback])\",\n                      \"type\": \"method\",\n                      \"name\": \"end\",\n                      \"signatures\": [\n                        {\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`chunk` {String|Buffer|any} Optional data to write. For streams not operating in object mode, `chunk` must be a string or a `Buffer`. For object mode streams, `chunk` may be any JavaScript value other than `null`. \",\n                              \"name\": \"chunk\",\n                              \"type\": \"String|Buffer|any\",\n                              \"desc\": \"Optional data to write. For streams not operating in object mode, `chunk` must be a string or a `Buffer`. For object mode streams, `chunk` may be any JavaScript value other than `null`.\",\n                              \"optional\": true\n                            },\n                            {\n                              \"textRaw\": \"`encoding` {String} The encoding, if `chunk` is a String \",\n                              \"name\": \"encoding\",\n                              \"type\": \"String\",\n                              \"desc\": \"The encoding, if `chunk` is a String\",\n                              \"optional\": true\n                            },\n                            {\n                              \"textRaw\": \"`callback` {Function} Optional callback for when the stream is finished \",\n                              \"name\": \"callback\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Optional callback for when the stream is finished\",\n                              \"optional\": true\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"chunk\",\n                              \"optional\": true\n                            },\n                            {\n                              \"name\": \"encoding\",\n                              \"optional\": true\n                            },\n                            {\n                              \"name\": \"callback\",\n                              \"optional\": true\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>Calling the <code>writable.end()</code> method signals that no more data will be written\\nto the [Writable][]. The optional <code>chunk</code> and <code>encoding</code> arguments allow one\\nfinal additional chunk of data to be written immediately before closing the\\nstream. If provided, the optional <code>callback</code> function is attached as a listener\\nfor the [<code>&#39;finish&#39;</code>][] event.</p>\\n<p>Calling the [<code>stream.write()</code>][stream-write] method after calling\\n[<code>stream.end()</code>][stream-end] will raise an error.</p>\\n<pre><code class=\\\"lang-js\\\">// write &#39;hello, &#39; and then end with &#39;world!&#39;\\nconst file = fs.createWriteStream(&#39;example.txt&#39;);\\nfile.write(&#39;hello, &#39;);\\nfile.end(&#39;world!&#39;);\\n// writing more now is not allowed!\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"writable.setDefaultEncoding(encoding)\",\n                      \"type\": \"method\",\n                      \"name\": \"setDefaultEncoding\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return: `this` \",\n                            \"name\": \"return\",\n                            \"desc\": \"`this`\"\n                          },\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`encoding` {String} The new default encoding \",\n                              \"name\": \"encoding\",\n                              \"type\": \"String\",\n                              \"desc\": \"The new default encoding\"\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"encoding\"\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>writable.setDefaultEncoding()</code> method sets the default <code>encoding</code> for a\\n[Writable][] stream.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"writable.uncork()\",\n                      \"type\": \"method\",\n                      \"name\": \"uncork\",\n                      \"desc\": \"<p>The <code>writable.uncork()</code> method flushes all data buffered since\\n[<code>stream.cork()</code>][] was called.</p>\\n<p>When using <code>writable.cork()</code> and <code>writable.uncork()</code> to manage the buffering\\nof writes to a stream, it is recommended that calls to <code>writable.uncork()</code> be\\ndeferred using <code>process.nextTick()</code>. Doing so allows batching of all\\n<code>writable.write()</code> calls that occur within a given Node.js event loop phase.</p>\\n<pre><code class=\\\"lang-js\\\">stream.cork();\\nstream.write(&#39;some &#39;);\\nstream.write(&#39;data &#39;);\\nprocess.nextTick(() =&gt; stream.uncork());\\n</code></pre>\\n<p>If the <code>writable.cork()</code> method is called multiple times on a stream, the same\\nnumber of calls to <code>writable.uncork()</code> must be called to flush the buffered\\ndata.</p>\\n<pre><code>stream.cork();\\nstream.write(&#39;some &#39;);\\nstream.cork();\\nstream.write(&#39;data &#39;);\\nprocess.nextTick(() =&gt; {\\n  stream.uncork();\\n  // The data will not be flushed until uncork() is called a second time.\\n  stream.uncork();\\n});\\n</code></pre>\",\n                      \"signatures\": [\n                        {\n                          \"params\": []\n                        }\n                      ]\n                    },\n                    {\n                      \"textRaw\": \"writable.write(chunk[, encoding][, callback])\",\n                      \"type\": \"method\",\n                      \"name\": \"write\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Returns: {Boolean} `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`. \",\n                            \"name\": \"return\",\n                            \"type\": \"Boolean\",\n                            \"desc\": \"`false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\"\n                          },\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`chunk` {String|Buffer} The data to write \",\n                              \"name\": \"chunk\",\n                              \"type\": \"String|Buffer\",\n                              \"desc\": \"The data to write\"\n                            },\n                            {\n                              \"textRaw\": \"`encoding` {String} The encoding, if `chunk` is a String \",\n                              \"name\": \"encoding\",\n                              \"type\": \"String\",\n                              \"desc\": \"The encoding, if `chunk` is a String\",\n                              \"optional\": true\n                            },\n                            {\n                              \"textRaw\": \"`callback` {Function} Callback for when this chunk of data is flushed \",\n                              \"name\": \"callback\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Callback for when this chunk of data is flushed\",\n                              \"optional\": true\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"chunk\"\n                            },\n                            {\n                              \"name\": \"encoding\",\n                              \"optional\": true\n                            },\n                            {\n                              \"name\": \"callback\",\n                              \"optional\": true\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>writable.write()</code> method writes some data to the stream, and calls the\\nsupplied <code>callback</code> once the data has been fully handled. If an error\\noccurs, the <code>callback</code> <em>may or may not</em> be called with the error as its\\nfirst argument. To reliably detect write errors, add a listener for the\\n<code>&#39;error&#39;</code> event.</p>\\n<p>The return value indicates whether the written <code>chunk</code> was buffered internally\\nand the buffer has exceeded the <code>highWaterMark</code> configured when the stream was\\ncreated. If <code>false</code> is returned, further attempts to write data to the stream\\nshould be paused until the <code>&#39;drain&#39;</code> event is emitted.</p>\\n<p>A Writable stream in object mode will always ignore the <code>encoding</code> argument.</p>\\n\"\n                    }\n                  ]\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Writable Streams\"\n            },\n            {\n              \"textRaw\": \"Readable Streams\",\n              \"name\": \"readable_streams\",\n              \"desc\": \"<p>Readable streams are an abstraction for a <em>source</em> from which data is\\nconsumed.</p>\\n<p>Examples of Readable streams include:</p>\\n<ul>\\n<li>[HTTP responses, on the client][http-incoming-message]</li>\\n<li>[HTTP requests, on the server][http-incoming-message]</li>\\n<li>[fs read streams][]</li>\\n<li>[zlib streams][zlib]</li>\\n<li>[crypto streams][crypto]</li>\\n<li>[TCP sockets][]</li>\\n<li>[child process stdout and stderr][]</li>\\n<li>[<code>process.stdin</code>][]</li>\\n</ul>\\n<p>All [Readable][] streams implement the interface defined by the\\n<code>stream.Readable</code> class.</p>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"Two Modes\",\n                  \"name\": \"two_modes\",\n                  \"desc\": \"<p>Readable streams effectively operate in one of two modes: flowing and paused.</p>\\n<p>When in flowing mode, data is read from the underlying system automatically\\nand provided to an application as quickly as possible using events via the\\n[<code>EventEmitter</code>][] interface.</p>\\n<p>In paused mode, the [<code>stream.read()</code>][stream-read] method must be called\\nexplicitly to read chunks of data from the stream.</p>\\n<p>All [Readable][] streams begin in paused mode but can be switched to flowing\\nmode in one of the following ways:</p>\\n<ul>\\n<li>Adding a [<code>&#39;data&#39;</code>][] event handler.</li>\\n<li>Calling the [<code>stream.resume()</code>][stream-resume] method.</li>\\n<li>Calling the [<code>stream.pipe()</code>][] method to send the data to a [Writable][].</li>\\n</ul>\\n<p>The Readable can switch back to paused mode using one of the following:</p>\\n<ul>\\n<li>If there are no pipe destinations, by calling the\\n[<code>stream.pause()</code>][stream-pause] method.</li>\\n<li>If there are pipe destinations, by removing any [<code>&#39;data&#39;</code>][] event\\nhandlers, and removing all pipe destinations by calling the\\n[<code>stream.unpipe()</code>][] method.</li>\\n</ul>\\n<p>The important concept to remember is that a Readable will not generate data\\nuntil a mechanism for either consuming or ignoring that data is provided. If\\nthe consuming mechanism is disabled or taken away, the Readable will <em>attempt</em>\\nto stop generating the data.</p>\\n<p><em>Note</em>: For backwards compatibility reasons, removing [<code>&#39;data&#39;</code>][] event\\nhandlers will <strong>not</strong> automatically pause the stream. Also, if there are piped\\ndestinations, then calling [<code>stream.pause()</code>][stream-pause] will not guarantee\\nthat the stream will <em>remain</em> paused once those destinations drain and ask for\\nmore data.</p>\\n<p><em>Note</em>: If a [Readable][] is switched into flowing mode and there are no\\nconsumers available handle the data, that data will be lost. This can occur,\\nfor instance, when the <code>readable.resume()</code> method is called without a listener\\nattached to the <code>&#39;data&#39;</code> event, or when a <code>&#39;data&#39;</code> event handler is removed\\nfrom the stream.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Two Modes\"\n                },\n                {\n                  \"textRaw\": \"Three States\",\n                  \"name\": \"three_states\",\n                  \"desc\": \"<p>The &quot;two modes&quot; of operation for a Readable stream are a simplified abstraction\\nfor the more complicated internal state management that is happening within the\\nReadable stream implementation.</p>\\n<p>Specifically, at any given point in time, every Readable is in one of three\\npossible states:</p>\\n<ul>\\n<li><code>readable._readableState.flowing = null</code></li>\\n<li><code>readable._readableState.flowing = false</code></li>\\n<li><code>readable._readableState.flowing = true</code></li>\\n</ul>\\n<p>When <code>readable._readableState.flowing</code> is <code>null</code>, no mechanism for consuming the\\nstreams data is provided so the stream will not generate its data.</p>\\n<p>Attaching a listener for the <code>&#39;data&#39;</code> event, calling the <code>readable.pipe()</code>\\nmethod, or calling the <code>readable.resume()</code> method will switch\\n<code>readable._readableState.flowing</code> to <code>true</code>, causing the Readable to begin\\nactively emitting events as data is generated.</p>\\n<p>Calling <code>readable.pause()</code>, <code>readable.unpipe()</code>, or receiving &quot;back pressure&quot;\\nwill cause the <code>readable._readableState.flowing</code> to be set as <code>false</code>,\\ntemporarily halting the flowing of events but <em>not</em> halting the generation of\\ndata.</p>\\n<p>While <code>readable._readableState.flowing</code> is <code>false</code>, data may be accumulating\\nwithin the streams internal buffer.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Three States\"\n                },\n                {\n                  \"textRaw\": \"Choose One\",\n                  \"name\": \"choose_one\",\n                  \"desc\": \"<p>The Readable stream API evolved across multiple Node.js versions and provides\\nmultiple methods of consuming stream data. In general, developers should choose\\n<em>one</em> of the methods of consuming data and <em>should never</em> use multiple methods\\nto consume data from a single stream.</p>\\n<p>Use of the <code>readable.pipe()</code> method is recommended for most users as it has been\\nimplemented to provide the easiest way of consuming stream data. Developers that\\nrequire more fine-grained control over the transfer and generation of data can\\nuse the [<code>EventEmitter</code>][] and <code>readable.pause()</code>/<code>readable.resume()</code> APIs.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Choose One\"\n                }\n              ],\n              \"classes\": [\n                {\n                  \"textRaw\": \"Class: stream.Readable\",\n                  \"type\": \"class\",\n                  \"name\": \"stream.Readable\",\n                  \"events\": [\n                    {\n                      \"textRaw\": \"Event: 'close'\",\n                      \"type\": \"event\",\n                      \"name\": \"close\",\n                      \"desc\": \"<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\\nresources (a file descriptor, for example) have been closed. The event indicates\\nthat no more events will be emitted, and no further computation will occur.</p>\\n<p>Not all [Readable][] streams will emit the <code>&#39;close&#39;</code> event.</p>\\n\",\n                      \"params\": []\n                    },\n                    {\n                      \"textRaw\": \"Event: 'data'\",\n                      \"type\": \"event\",\n                      \"name\": \"data\",\n                      \"params\": [],\n                      \"desc\": \"<p>The <code>&#39;data&#39;</code> event is emitted whenever the stream is relinquishing ownership of\\na chunk of data to a consumer. This may occur whenever the stream is switched\\nin flowing mode by calling <code>readable.pipe()</code>, <code>readable.resume()</code>, or by\\nattaching a listener callback to the <code>&#39;data&#39;</code> event. The <code>&#39;data&#39;</code> event will\\nalso be emitted whenever the <code>readable.read()</code> method is called and a chunk of\\ndata is available to be returned.</p>\\n<p>Attaching a <code>&#39;data&#39;</code> event listener to a stream that has not been explicitly\\npaused will switch the stream into flowing mode. Data will then be passed as\\nsoon as it is available.</p>\\n<p>The listener callback will be passed the chunk of data as a string if a default\\nencoding has been specified for the stream using the\\n<code>readable.setEncoding()</code> method; otherwise the data will be passed as a\\n<code>Buffer</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\\n  console.log(`Received ${chunk.length} bytes of data.`);\\n});\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"Event: 'end'\",\n                      \"type\": \"event\",\n                      \"name\": \"end\",\n                      \"desc\": \"<p>The <code>&#39;end&#39;</code> event is emitted when there is no more data to be consumed from\\nthe stream.</p>\\n<p><em>Note</em>: The <code>&#39;end&#39;</code> event <strong>will not be emitted</strong> unless the data is\\ncompletely consumed. This can be accomplished by switching the stream into\\nflowing mode, or by calling [<code>stream.read()</code>][stream-read] repeatedly until\\nall data has been consumed.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\\n  console.log(`Received ${chunk.length} bytes of data.`);\\n});\\nreadable.on(&#39;end&#39;, () =&gt; {\\n  console.log(&#39;There will be no more data.&#39;);\\n});\\n</code></pre>\\n\",\n                      \"params\": []\n                    },\n                    {\n                      \"textRaw\": \"Event: 'error'\",\n                      \"type\": \"event\",\n                      \"name\": \"error\",\n                      \"params\": [],\n                      \"desc\": \"<p>The <code>&#39;error&#39;</code> event may be emitted by a Readable implementation at any time.\\nTypically, this may occur if the underlying stream in unable to generate data\\ndue to an underlying internal failure, or when a stream implementation attempts\\nto push an invalid chunk of data.</p>\\n<p>The listener callback will be passed a single <code>Error</code> object.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"Event: 'readable'\",\n                      \"type\": \"event\",\n                      \"name\": \"readable\",\n                      \"desc\": \"<p>The <code>&#39;readable&#39;</code> event is emitted when there is data available to be read from\\nthe stream. In some cases, attaching a listener for the <code>&#39;readable&#39;</code> event will\\ncause some amount of data to be read into an internal buffer.</p>\\n<pre><code class=\\\"lang-javascript\\\">const readable = getReadableStreamSomehow();\\nreadable.on(&#39;readable&#39;, () =&gt; {\\n  // there is some data to read now\\n});\\n</code></pre>\\n<p>The <code>&#39;readable&#39;</code> event will also be emitted once the end of the stream data\\nhas been reached but before the <code>&#39;end&#39;</code> event is emitted.</p>\\n<p>Effectively, the <code>&#39;readable&#39;</code> event indicates that the stream has new\\ninformation: either new data is available or the end of the stream has been\\nreached. In the former case, [<code>stream.read()</code>][stream-read] will return the\\navailable data. In the latter case, [<code>stream.read()</code>][stream-read] will return\\n<code>null</code>. For instance, in the following example, <code>foo.txt</code> is an empty file:</p>\\n<pre><code class=\\\"lang-js\\\">const fs = require(&#39;fs&#39;);\\nconst rr = fs.createReadStream(&#39;foo.txt&#39;);\\nrr.on(&#39;readable&#39;, () =&gt; {\\n  console.log(&#39;readable:&#39;, rr.read());\\n});\\nrr.on(&#39;end&#39;, () =&gt; {\\n  console.log(&#39;end&#39;);\\n});\\n</code></pre>\\n<p>The output of running this script is:</p>\\n<pre><code>$ node test.js\\nreadable: null\\nend\\n</code></pre><p><em>Note</em>: In general, the <code>readable.pipe()</code> and <code>&#39;data&#39;</code> event mechanisms are\\npreferred over the use of the <code>&#39;readable&#39;</code> event.</p>\\n\",\n                      \"params\": []\n                    }\n                  ],\n                  \"methods\": [\n                    {\n                      \"textRaw\": \"readable.isPaused()\",\n                      \"type\": \"method\",\n                      \"name\": \"isPaused\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return: {Boolean} \",\n                            \"name\": \"return\",\n                            \"type\": \"Boolean\"\n                          },\n                          \"params\": []\n                        },\n                        {\n                          \"params\": []\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.isPaused()</code> method returns the current operating state of the\\nReadable. This is used primarily by the mechanism that underlies the\\n<code>readable.pipe()</code> method. In most typical cases, there will be no reason to\\nuse this method directly.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = new stream.Readable\\n\\nreadable.isPaused() // === false\\nreadable.pause()\\nreadable.isPaused() // === true\\nreadable.resume()\\nreadable.isPaused() // === false\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.pause()\",\n                      \"type\": \"method\",\n                      \"name\": \"pause\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return: `this` \",\n                            \"name\": \"return\",\n                            \"desc\": \"`this`\"\n                          },\n                          \"params\": []\n                        },\n                        {\n                          \"params\": []\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.pause()</code> method will cause a stream in flowing mode to stop\\nemitting [<code>&#39;data&#39;</code>][] events, switching out of flowing mode. Any data that\\nbecomes available will remain in the internal buffer.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\\n  console.log(`Received ${chunk.length} bytes of data.`);\\n  readable.pause();\\n  console.log(&#39;There will be no additional data for 1 second.&#39;);\\n  setTimeout(() =&gt; {\\n    console.log(&#39;Now data will start flowing again.&#39;);\\n    readable.resume();\\n  }, 1000);\\n});\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.pipe(destination[, options])\",\n                      \"type\": \"method\",\n                      \"name\": \"pipe\",\n                      \"signatures\": [\n                        {\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`destination` {stream.Writable} The destination for writing data \",\n                              \"name\": \"destination\",\n                              \"type\": \"stream.Writable\",\n                              \"desc\": \"The destination for writing data\"\n                            },\n                            {\n                              \"textRaw\": \"`options` {Object} Pipe options \",\n                              \"options\": [\n                                {\n                                  \"textRaw\": \"`end` {Boolean} End the writer when the reader ends. Defaults to `true`. \",\n                                  \"name\": \"end\",\n                                  \"type\": \"Boolean\",\n                                  \"desc\": \"End the writer when the reader ends. Defaults to `true`.\"\n                                }\n                              ],\n                              \"name\": \"options\",\n                              \"type\": \"Object\",\n                              \"desc\": \"Pipe options\",\n                              \"optional\": true\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"destination\"\n                            },\n                            {\n                              \"name\": \"options\",\n                              \"optional\": true\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.pipe()</code> method attaches a [Writable][] stream to the <code>readable</code>,\\ncausing it to switch automatically into flowing mode and push all of its data\\nto the attached [Writable][]. The flow of data will be automatically managed so\\nthat the destination Writable stream is not overwhelmed by a faster Readable\\nstream.</p>\\n<p>The following example pipes all of the data from the <code>readable</code> into a file\\nnamed <code>file.txt</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\\n// All the data from readable goes into &#39;file.txt&#39;\\nreadable.pipe(writable);\\n</code></pre>\\n<p>It is possible to attach multiple Writable streams to a single Readable stream.</p>\\n<p>The <code>readable.pipe()</code> method returns a reference to the <em>destination</em> stream\\nmaking it possible to set up chains of piped streams:</p>\\n<pre><code class=\\\"lang-js\\\">const r = fs.createReadStream(&#39;file.txt&#39;);\\nconst z = zlib.createGzip();\\nconst w = fs.createWriteStream(&#39;file.txt.gz&#39;);\\nr.pipe(z).pipe(w);\\n</code></pre>\\n<p>By default, [<code>stream.end()</code>][stream-end] is called on the destination Writable\\nstream when the source Readable stream emits [<code>&#39;end&#39;</code>][], so that the\\ndestination is no longer writable. To disable this default behavior, the <code>end</code>\\noption can be passed as <code>false</code>, causing the destination stream to remain open,\\nas illustrated in the following example:</p>\\n<pre><code class=\\\"lang-js\\\">reader.pipe(writer, { end: false });\\nreader.on(&#39;end&#39;, () =&gt; {\\n  writer.end(&#39;Goodbye\\\\n&#39;);\\n});\\n</code></pre>\\n<p>One important caveat is that if the Readable stream emits an error during\\nprocessing, the Writable destination <em>is not closed</em> automatically. If an\\nerror occurs, it will be necessary to <em>manually</em> close each stream in order\\nto prevent memory leaks.</p>\\n<p><em>Note</em>: The [<code>process.stderr</code>][] and [<code>process.stdout</code>][] Writable streams are\\nnever closed until the Node.js process exits, regardless of the specified\\noptions.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.read([size])\",\n                      \"type\": \"method\",\n                      \"name\": \"read\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return {String|Buffer|Null} \",\n                            \"name\": \"return\",\n                            \"type\": \"String|Buffer|Null\"\n                          },\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`size` {Number} Optional argument to specify how much data to read. \",\n                              \"name\": \"size\",\n                              \"type\": \"Number\",\n                              \"desc\": \"Optional argument to specify how much data to read.\",\n                              \"optional\": true\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"size\",\n                              \"optional\": true\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.read()</code> method pulls some data out of the internal buffer and\\nreturns it. If no data available to be read, <code>null</code> is returned. By default,\\nthe data will be returned as a <code>Buffer</code> object unless an encoding has been\\nspecified using the <code>readable.setEncoding()</code> method or the stream is operating\\nin object mode.</p>\\n<p>The optional <code>size</code> argument specifies a specific number of bytes to read. If\\n<code>size</code> bytes are not available to be read, <code>null</code> will be returned <em>unless</em>\\nthe stream has ended, in which case all of the data remaining in the internal\\nbuffer will be returned (<em>even if it exceeds <code>size</code> bytes</em>).</p>\\n<p>If the <code>size</code> argument is not specified, all of the data contained in the\\ninternal buffer will be returned.</p>\\n<p>The <code>readable.read()</code> method should only be called on Readable streams operating\\nin paused mode. In flowing mode, <code>readable.read()</code> is called automatically until\\nthe internal buffer is fully drained.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nreadable.on(&#39;readable&#39;, () =&gt; {\\n  var chunk;\\n  while (null !== (chunk = readable.read())) {\\n    console.log(`Received ${chunk.length} bytes of data.`);\\n  }\\n});\\n</code></pre>\\n<p>In general, it is recommended that developers avoid the use of the <code>&#39;readable&#39;</code>\\nevent and the <code>readable.read()</code> method in favor of using either\\n<code>readable.pipe()</code> or the <code>&#39;data&#39;</code> event.</p>\\n<p>A Readable stream in object mode will always return a single item from\\na call to [<code>readable.read(size)</code>][stream-read], regardless of the value of the\\n<code>size</code> argument.</p>\\n<p><em>Note:</em> If the <code>readable.read()</code> method returns a chunk of data, a <code>&#39;data&#39;</code>\\nevent will also be emitted.</p>\\n<p><em>Note</em>: Calling [<code>stream.read([size])</code>][stream-read] after the [<code>&#39;end&#39;</code>][]\\nevent has been emitted will return <code>null</code>. No runtime error will be raised.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.resume()\",\n                      \"type\": \"method\",\n                      \"name\": \"resume\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return: `this` \",\n                            \"name\": \"return\",\n                            \"desc\": \"`this`\"\n                          },\n                          \"params\": []\n                        },\n                        {\n                          \"params\": []\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.resume()</code> method causes an explicitly paused Readable stream to\\nresume emitting [<code>&#39;data&#39;</code>][] events, switching the stream into flowing mode.</p>\\n<p>The <code>readable.resume()</code> method can be used to fully consume the data from a\\nstream without actually processing any of that data as illustrated in the\\nfollowing example:</p>\\n<pre><code class=\\\"lang-js\\\">getReadableStreamSomehow()\\n  .resume();\\n  .on(&#39;end&#39;, () =&gt; {\\n    console.log(&#39;Reached the end, but did not read anything.&#39;);\\n  });\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.setEncoding(encoding)\",\n                      \"type\": \"method\",\n                      \"name\": \"setEncoding\",\n                      \"signatures\": [\n                        {\n                          \"return\": {\n                            \"textRaw\": \"Return: `this` \",\n                            \"name\": \"return\",\n                            \"desc\": \"`this`\"\n                          },\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`encoding` {String} The encoding to use. \",\n                              \"name\": \"encoding\",\n                              \"type\": \"String\",\n                              \"desc\": \"The encoding to use.\"\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"encoding\"\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.setEncoding()</code> method sets the default character encoding for\\ndata read from the Readable stream.</p>\\n<p>Setting an encoding causes the stream data\\nto be returned as string of the specified encoding rather than as <code>Buffer</code>\\nobjects. For instance, calling <code>readable.setEncoding(&#39;utf8&#39;)</code> will cause the\\noutput data will be interpreted as UTF-8 data, and passed as strings. Calling\\n<code>readable.setEncoding(&#39;hex&#39;)</code> will cause the data to be encoded in hexadecimal\\nstring format.</p>\\n<p>The Readable stream will properly handle multi-byte characters delivered through\\nthe stream that would otherwise become improperly decoded if simply pulled from\\nthe stream as <code>Buffer</code> objects.</p>\\n<p>Encoding can be disabled by calling <code>readable.setEncoding(null)</code>. This approach\\nis useful when working with binary data or with large multi-byte strings spread\\nout over multiple chunks.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nreadable.setEncoding(&#39;utf8&#39;);\\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\\n  assert.equal(typeof chunk, &#39;string&#39;);\\n  console.log(&#39;got %d characters of string data&#39;, chunk.length);\\n});\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.unpipe([destination])\",\n                      \"type\": \"method\",\n                      \"name\": \"unpipe\",\n                      \"signatures\": [\n                        {\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`destination` {stream.Writable} Optional specific stream to unpipe \",\n                              \"name\": \"destination\",\n                              \"type\": \"stream.Writable\",\n                              \"desc\": \"Optional specific stream to unpipe\",\n                              \"optional\": true\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"destination\",\n                              \"optional\": true\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.unpipe()</code> method detaches a Writable stream previously attached\\nusing the [<code>stream.pipe()</code>][] method.</p>\\n<p>If the <code>destination</code> is not specified, then <em>all</em> pipes are detached.</p>\\n<p>If the <code>destination</code> is specified, but no pipe is set up for it, then\\nthe method does nothing.</p>\\n<pre><code class=\\\"lang-js\\\">const readable = getReadableStreamSomehow();\\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\\n// All the data from readable goes into &#39;file.txt&#39;,\\n// but only for the first second\\nreadable.pipe(writable);\\nsetTimeout(() =&gt; {\\n  console.log(&#39;Stop writing to file.txt&#39;);\\n  readable.unpipe(writable);\\n  console.log(&#39;Manually close the file stream&#39;);\\n  writable.end();\\n}, 1000);\\n</code></pre>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.unshift(chunk)\",\n                      \"type\": \"method\",\n                      \"name\": \"unshift\",\n                      \"signatures\": [\n                        {\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`chunk` {Buffer|String} Chunk of data to unshift onto the read queue \",\n                              \"name\": \"chunk\",\n                              \"type\": \"Buffer|String\",\n                              \"desc\": \"Chunk of data to unshift onto the read queue\"\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"chunk\"\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal\\nbuffer. This is useful in certain situations where a stream is being consumed by\\ncode that needs to &quot;un-consume&quot; some amount of data that it has optimistically\\npulled out of the source, so that the data can be passed on to some other party.</p>\\n<p><em>Note</em>: The <code>stream.unshift(chunk)</code> method cannot be called after the\\n[<code>&#39;end&#39;</code>][] event has been emitted or a runtime error will be thrown.</p>\\n<p>Developers using <code>stream.unshift()</code> often should consider switching to\\nuse of a [Transform][] stream instead. See the [API for Stream Implemeters][]\\nsection for more information.</p>\\n<pre><code class=\\\"lang-js\\\">// Pull off a header delimited by \\\\n\\\\n\\n// use unshift() if we get too much\\n// Call the callback with (error, header, stream)\\nconst StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\\nfunction parseHeader(stream, callback) {\\n  stream.on(&#39;error&#39;, callback);\\n  stream.on(&#39;readable&#39;, onReadable);\\n  const decoder = new StringDecoder(&#39;utf8&#39;);\\n  var header = &#39;&#39;;\\n  function onReadable() {\\n    var chunk;\\n    while (null !== (chunk = stream.read())) {\\n      var str = decoder.write(chunk);\\n      if (str.match(/\\\\n\\\\n/)) {\\n        // found the header boundary\\n        var split = str.split(/\\\\n\\\\n/);\\n        header += split.shift();\\n        const remaining = split.join(&#39;\\\\n\\\\n&#39;);\\n        const buf = Buffer.from(remaining, &#39;utf8&#39;);\\n        if (buf.length)\\n          stream.unshift(buf);\\n        stream.removeListener(&#39;error&#39;, callback);\\n        stream.removeListener(&#39;readable&#39;, onReadable);\\n        // now the body of the message can be read from the stream.\\n        callback(null, header, stream);\\n      } else {\\n        // still reading the header.\\n        header += str;\\n      }\\n    }\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: Unlike [<code>stream.push(chunk)</code>][stream-push], <code>stream.unshift(chunk)</code>\\nwill not end the reading process by resetting the internal reading state of the\\nstream. This can cause unexpected results if <code>readable.unshift()</code> is called\\nduring a read (i.e. from within a [<code>stream._read()</code>][stream-_read]\\nimplementation on a custom stream). Following the call to <code>readable.unshift()</code>\\nwith an immediate [<code>stream.push(&#39;&#39;)</code>][stream-push] will reset the reading state\\nappropriately, however it is best to simply avoid calling <code>readable.unshift()</code>\\nwhile in the process of performing a read.</p>\\n\"\n                    },\n                    {\n                      \"textRaw\": \"readable.wrap(stream)\",\n                      \"type\": \"method\",\n                      \"name\": \"wrap\",\n                      \"signatures\": [\n                        {\n                          \"params\": [\n                            {\n                              \"textRaw\": \"`stream` {Stream} An \\\"old style\\\" readable stream \",\n                              \"name\": \"stream\",\n                              \"type\": \"Stream\",\n                              \"desc\": \"An \\\"old style\\\" readable stream\"\n                            }\n                          ]\n                        },\n                        {\n                          \"params\": [\n                            {\n                              \"name\": \"stream\"\n                            }\n                          ]\n                        }\n                      ],\n                      \"desc\": \"<p>Versions of Node.js prior to v0.10 had streams that did not implement the\\nentire <code>stream</code> module API as it is currently defined. (See [Compatibility][]\\nfor more information.)</p>\\n<p>When using an older Node.js library that emits [<code>&#39;data&#39;</code>][] events and has a\\n[<code>stream.pause()</code>][stream-pause] method that is advisory only, the\\n<code>readable.wrap()</code> method can be used to create a [Readable][] stream that uses\\nthe old stream as its data source.</p>\\n<p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been\\nprovided as a convenience for interacting with older Node.js applications and\\nlibraries.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const OldReader = require(&#39;./old-api-module.js&#39;).OldReader;\\nconst Readable = require(&#39;stream&#39;).Readable;\\nconst oreader = new OldReader;\\nconst myReader = new Readable().wrap(oreader);\\n\\nmyReader.on(&#39;readable&#39;, () =&gt; {\\n  myReader.read(); // etc.\\n});\\n</code></pre>\\n\"\n                    }\n                  ]\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Readable Streams\"\n            },\n            {\n              \"textRaw\": \"Duplex and Transform Streams\",\n              \"name\": \"duplex_and_transform_streams\",\n              \"classes\": [\n                {\n                  \"textRaw\": \"Class: stream.Duplex\",\n                  \"type\": \"class\",\n                  \"name\": \"stream.Duplex\",\n                  \"desc\": \"<p>Duplex streams are streams that implement both the [Readable][] and\\n[Writable][] interfaces.</p>\\n<p>Examples of Duplex streams include:</p>\\n<ul>\\n<li>[TCP sockets][]</li>\\n<li>[zlib streams][zlib]</li>\\n<li>[crypto streams][crypto]</li>\\n</ul>\\n\"\n                },\n                {\n                  \"textRaw\": \"Class: stream.Transform\",\n                  \"type\": \"class\",\n                  \"name\": \"stream.Transform\",\n                  \"desc\": \"<p>Transform streams are [Duplex][] streams where the output is in some way\\nrelated to the input. Like all [Duplex][] streams, Transform streams\\nimplement both the [Readable][] and [Writable][] interfaces.</p>\\n<p>Examples of Transform streams include:</p>\\n<ul>\\n<li>[zlib streams][zlib]</li>\\n<li>[crypto streams][crypto]</li>\\n</ul>\\n\"\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Duplex and Transform Streams\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"API for Stream Implemeters\",\n          \"name\": \"API for Stream Implemeters\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>The <code>stream</code> module API has been designed to make it possible to easily\\nimplement streams using JavaScript&#39;s prototypical inheritance model.</p>\\n<p>First, a stream developer would declare a new JavaScript class that extends one\\nof the four basic stream classes (<code>stream.Writable</code>, <code>stream.Readable</code>,\\n<code>stream.Duplex</code>, or <code>stream.Transform</code>), making sure the call the appropriate\\nparent class constructor:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nclass MyWritable extends Writable {\\n  constructor(options) {\\n    super(options);\\n  }\\n}\\n</code></pre>\\n<p>The new stream class must then implement one or more specific methods, depending\\non the type of stream being created, as detailed in the chart below:</p>\\n<table>\\n  <thead>\\n    <tr>\\n      <th>\\n        <p>Use-case</p>\\n      </th>\\n      <th>\\n        <p>Class</p>\\n      </th>\\n      <th>\\n        <p>Method(s) to implement</p>\\n      </th>\\n    </tr>\\n  </thead>\\n  <tr>\\n    <td>\\n      <p>Reading only</p>\\n    </td>\\n    <td>\\n      <p><a href=\\\"#stream_class_stream_readable_1\\\">Readable</a></p>\\n    </td>\\n    <td>\\n      <p><code>[_read][stream-_read]</code></p>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <p>Writing only</p>\\n    </td>\\n    <td>\\n      <p><a href=\\\"#stream_class_stream_writable_1\\\">Writable</a></p>\\n    </td>\\n    <td>\\n      <p><code>[_write][stream-_write]</code>, <code>[_writev][stream-_writev]</code></p>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <p>Reading and writing</p>\\n    </td>\\n    <td>\\n      <p><a href=\\\"#stream_class_stream_duplex_1\\\">Duplex</a></p>\\n    </td>\\n    <td>\\n      <p><code>[_read][stream-_read]</code>, <code>[_write][stream-_write]</code>, <code>[_writev][stream-_writev]</code></p>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <p>Operate on written data, then read the result</p>\\n    </td>\\n    <td>\\n      <p><a href=\\\"#stream_class_stream_transform_1\\\">Transform</a></p>\\n    </td>\\n    <td>\\n      <p><code>[_transform][stream-_transform]</code>, <code>[_flush][stream-_flush]</code></p>\\n    </td>\\n  </tr>\\n</table>\\n\\n<p><em>Note</em>: The implementation code for a stream should <em>never</em> call the &quot;public&quot;\\nmethods of a stream that are intended for use by consumers (as described in\\nthe [API for Stream Consumers][] section). Doing so may lead to adverse\\nside effects in application code consuming the stream.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Simplified Construction\",\n              \"name\": \"simplified_construction\",\n              \"desc\": \"<p>For many simple cases, it is possible to construct a stream without relying on\\ninheritance. This can be accomplished by directly creating instances of the\\n<code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code> or <code>stream.Transform</code>\\nobjects and passing appropriate methods as constructor options.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nconst myWritable = new Writable({\\n  write(chunk, encoding, callback) {\\n    // ...\\n  }\\n});\\n</code></pre>\\n\",\n              \"type\": \"misc\",\n              \"displayName\": \"Simplified Construction\"\n            },\n            {\n              \"textRaw\": \"Implementing a Writable Stream\",\n              \"name\": \"implementing_a_writable_stream\",\n              \"desc\": \"<p>The <code>stream.Writable</code> class is extended to implement a [Writable][] stream.</p>\\n<p>Custom Writable streams <em>must</em> call the <code>new stream.Writable([options])</code>\\nconstructor and implement the <code>writable.\\\\_write()</code> method. The\\n<code>writable.\\\\_writev()</code> method <em>may</em> also be implemented.</p>\\n\",\n              \"methods\": [\n                {\n                  \"textRaw\": \"Constructor: new stream.Writable([options])\",\n                  \"type\": \"method\",\n                  \"name\": \"Writable\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`options` {Object} \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`highWaterMark` {Number} Buffer level when [`stream.write()`][stream-write] starts returning `false`. Defaults to `16384` (16kb), or `16` for `objectMode` streams. \",\n                              \"name\": \"highWaterMark\",\n                              \"type\": \"Number\",\n                              \"desc\": \"Buffer level when [`stream.write()`][stream-write] starts returning `false`. Defaults to `16384` (16kb), or `16` for `objectMode` streams.\"\n                            },\n                            {\n                              \"textRaw\": \"`decodeStrings` {Boolean} Whether or not to decode strings into Buffers before passing them to [`stream._write()`][stream-_write]. Defaults to `true` \",\n                              \"name\": \"decodeStrings\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Whether or not to decode strings into Buffers before passing them to [`stream._write()`][stream-_write]. Defaults to `true`\"\n                            },\n                            {\n                              \"textRaw\": \"`objectMode` {Boolean} Whether or not the [`stream.write(anyObj)`][stream-write] is a valid operation. When set, it becomes possible to write JavaScript values other than string or `Buffer` if supported by the stream implementation. Defaults to `false` \",\n                              \"name\": \"objectMode\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Whether or not the [`stream.write(anyObj)`][stream-write] is a valid operation. When set, it becomes possible to write JavaScript values other than string or `Buffer` if supported by the stream implementation. Defaults to `false`\"\n                            },\n                            {\n                              \"textRaw\": \"`write` {Function} Implementation for the [`stream._write()`][stream-_write] method. \",\n                              \"name\": \"write\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Implementation for the [`stream._write()`][stream-_write] method.\"\n                            },\n                            {\n                              \"textRaw\": \"`writev` {Function} Implementation for the [`stream._writev()`][stream-_writev] method. \",\n                              \"name\": \"writev\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Implementation for the [`stream._writev()`][stream-_writev] method.\"\n                            }\n                          ],\n                          \"name\": \"options\",\n                          \"type\": \"Object\",\n                          \"optional\": true\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"options\",\n                          \"optional\": true\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nclass MyWritable extends Writable {\\n  constructor(options) {\\n    // Calls the stream.Writable() constructor\\n    super(options);\\n  }\\n}\\n</code></pre>\\n<p>Or, when using pre-ES6 style constructors:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\nconst util = require(&#39;util&#39;);\\n\\nfunction MyWritable(options) {\\n  if (!(this instanceof MyWritable))\\n    return new MyWritable(options);\\n  Writable.call(this, options);\\n}\\nutil.inherits(MyWritable, Writable);\\n</code></pre>\\n<p>Or, using the Simplified Constructor approach:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nconst myWritable = new Writable({\\n  write(chunk, encoding, callback) {\\n    // ...\\n  },\\n  writev(chunks, callback) {\\n    // ...\\n  }\\n});\\n</code></pre>\\n\"\n                },\n                {\n                  \"textRaw\": \"writable.\\\\_write(chunk, encoding, callback)\",\n                  \"type\": \"method\",\n                  \"name\": \"\\\\_write\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`chunk` {Buffer|String} The chunk to be written. Will **always** be a buffer unless the `decodeStrings` option was set to `false`. \",\n                          \"name\": \"chunk\",\n                          \"type\": \"Buffer|String\",\n                          \"desc\": \"The chunk to be written. Will **always** be a buffer unless the `decodeStrings` option was set to `false`.\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} If the chunk is a string, then `encoding` is the character encoding of that string. If chunk is a `Buffer`, or if the stream is operating in object mode, `encoding` may be ignored. \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"If the chunk is a string, then `encoding` is the character encoding of that string. If chunk is a `Buffer`, or if the stream is operating in object mode, `encoding` may be ignored.\"\n                        },\n                        {\n                          \"textRaw\": \"`callback` {Function} Call this function (optionally with an error argument) when processing is complete for the supplied chunk. \",\n                          \"name\": \"callback\",\n                          \"type\": \"Function\",\n                          \"desc\": \"Call this function (optionally with an error argument) when processing is complete for the supplied chunk.\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"chunk\"\n                        },\n                        {\n                          \"name\": \"encoding\"\n                        },\n                        {\n                          \"name\": \"callback\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>All Writable stream implementations must provide a\\n[<code>writable._write()</code>][stream-_write] method to send data to the underlying\\nresource.</p>\\n<p><em>Note</em>: [Transform][] streams provide their own implementation of the\\n[<code>writable._write()</code>].</p>\\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\\nshould be implemented by child classes, and called only by the internal Writable\\nclass methods only.</p>\\n<p>The <code>callback</code> method must be called to signal either that the write completed\\nsuccessfully or failed with an error. The first argument passed to the\\n<code>callback</code> must be the <code>Error</code> object if the call failed or <code>null</code> if the\\nwrite succeeded.</p>\\n<p>It is important to note that all calls to <code>writable.write()</code> that occur between\\nthe time <code>writable.\\\\_write()</code> is called and the <code>callback</code> is called will cause\\nthe written data to be buffered. Once the <code>callback</code> is invoked, the stream will\\nemit a <code>&#39;drain&#39;</code> event. If a stream implementation is capable of processing\\nmultiple chunks of data at once, the <code>writable.\\\\_writev()</code> method should be\\nimplemented.</p>\\n<p>If the <code>decodeStrings</code> property is set in the constructor options, then\\n<code>chunk</code> may be a string rather than a Buffer, and <code>encoding</code> will\\nindicate the character encoding of the string. This is to support\\nimplementations that have an optimized handling for certain string\\ndata encodings. If the <code>decodeStrings</code> property is explicitly set to <code>false</code>,\\nthe <code>encoding</code> argument can be safely ignored, and <code>chunk</code> will always be a\\n<code>Buffer</code>.</p>\\n<p>The <code>writable.\\\\_write()</code> method is prefixed with an underscore because it is\\ninternal to the class that defines it, and should never be called directly by\\nuser programs.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"writable.\\\\_writev(chunks, callback)\",\n                  \"type\": \"method\",\n                  \"name\": \"\\\\_writev\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`chunks` {Array} The chunks to be written. Each chunk has following format: `{ chunk: ..., encoding: ... }`. \",\n                          \"name\": \"chunks\",\n                          \"type\": \"Array\",\n                          \"desc\": \"The chunks to be written. Each chunk has following format: `{ chunk: ..., encoding: ... }`.\"\n                        },\n                        {\n                          \"textRaw\": \"`callback` {Function} A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks. \",\n                          \"name\": \"callback\",\n                          \"type\": \"Function\",\n                          \"desc\": \"A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks.\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"chunks\"\n                        },\n                        {\n                          \"name\": \"callback\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\\nshould be implemented by child classes, and called only by the internal Writable\\nclass methods only.</p>\\n<p>The <code>writable.\\\\_writev()</code> method may be implemented in addition to\\n<code>writable.\\\\_write()</code> in stream implementations that are capable of processing\\nmultiple chunks of data at once. If implemented, the method will be called with\\nall chunks of data currently buffered in the write queue.</p>\\n<p>The <code>writable.\\\\_writev()</code> method is prefixed with an underscore because it is\\ninternal to the class that defines it, and should never be called directly by\\nuser programs.</p>\\n\"\n                }\n              ],\n              \"modules\": [\n                {\n                  \"textRaw\": \"Errors While Writing\",\n                  \"name\": \"errors_while_writing\",\n                  \"desc\": \"<p>It is recommended that errors occurring during the processing of the\\n<code>writable.\\\\_write()</code> and <code>writable.\\\\_writev()</code> methods are reported by invoking\\nthe callback and passing the error as the first argument. This will cause an\\n<code>&#39;error&#39;</code> event to be emitted by the Writable. Throwing an Error from within\\n<code>writable.\\\\_write()</code> can result in expected and inconsistent behavior depending\\non how the stream is being used.  Using the callback ensures consistent and\\npredictable handling of errors.</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nconst myWritable = new Writable({\\n  write(chunk, encoding, callback) {\\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\\n      callback(new Error(&#39;chunk is invalid&#39;))\\n    } else {\\n       callback()\\n    }\\n  }\\n});\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Errors While Writing\"\n                },\n                {\n                  \"textRaw\": \"An Example Writable Stream\",\n                  \"name\": \"an_example_writable_stream\",\n                  \"desc\": \"<p>The following illustrates a rather simplistic (and somewhat pointless) custom\\nWritable stream implementation. While this specific Writable stream instance\\nis not of any real particular usefulness, the example illustrates each of the\\nrequired elements of a custom [Writable][] stream instance:</p>\\n<pre><code class=\\\"lang-js\\\">const Writable = require(&#39;stream&#39;).Writable;\\n\\nclass MyWritable extends Writable {\\n  constructor(options) {\\n    super(options);\\n  }\\n\\n  _write(chunk, encoding, callback) {\\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\\n      callback(new Error(&#39;chunk is invalid&#39;))\\n    } else {\\n       callback()\\n    }\\n  }\\n}\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"An Example Writable Stream\"\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Implementing a Writable Stream\"\n            },\n            {\n              \"textRaw\": \"Implementing a Readable Stream\",\n              \"name\": \"implementing_a_readable_stream\",\n              \"desc\": \"<p>The <code>stream.Readable</code> class is extended to implement a [Readable][] stream.</p>\\n<p>Custom Readable streams <em>must</em> call the <code>new stream.Readable([options])</code>\\nconstructor and implement the <code>readable.\\\\_read()</code> method.</p>\\n\",\n              \"methods\": [\n                {\n                  \"textRaw\": \"new stream.Readable([options])\",\n                  \"type\": \"method\",\n                  \"name\": \"Readable\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`options` {Object} \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Defaults to `16384` (16kb), or `16` for `objectMode` streams \",\n                              \"name\": \"highWaterMark\",\n                              \"type\": \"Number\",\n                              \"desc\": \"The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Defaults to `16384` (16kb), or `16` for `objectMode` streams\"\n                            },\n                            {\n                              \"textRaw\": \"`encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding. Defaults to `null` \",\n                              \"name\": \"encoding\",\n                              \"type\": \"String\",\n                              \"desc\": \"If specified, then buffers will be decoded to strings using the specified encoding. Defaults to `null`\"\n                            },\n                            {\n                              \"textRaw\": \"`objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Defaults to `false` \",\n                              \"name\": \"objectMode\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a Buffer of size n. Defaults to `false`\"\n                            },\n                            {\n                              \"textRaw\": \"`read` {Function} Implementation for the [`stream._read()`][stream-_read] method. \",\n                              \"name\": \"read\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Implementation for the [`stream._read()`][stream-_read] method.\"\n                            }\n                          ],\n                          \"name\": \"options\",\n                          \"type\": \"Object\",\n                          \"optional\": true\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"options\",\n                          \"optional\": true\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const Readable = require(&#39;stream&#39;).Readable;\\n\\nclass MyReadable extends Readable {\\n  constructor(options) {\\n    // Calls the stream.Readable(options) constructor\\n    super(options);\\n  }\\n}\\n</code></pre>\\n<p>Or, when using pre-ES6 style constructors:</p>\\n<pre><code class=\\\"lang-js\\\">const Readable = require(&#39;stream&#39;).Readable;\\nconst util = require(&#39;util&#39;);\\n\\nfunction MyReadable(options) {\\n  if (!(this instanceof MyReadable))\\n    return new MyReadable(options);\\n  Readable.call(this, options);\\n}\\nutil.inherits(MyReadable, Readable);\\n</code></pre>\\n<p>Or, using the Simplified Constructor approach:</p>\\n<pre><code class=\\\"lang-js\\\">const Readable = require(&#39;stream&#39;).Readable;\\n\\nconst myReadable = new Readable({\\n  read(size) {\\n    // ...\\n  }\\n});\\n</code></pre>\\n\"\n                },\n                {\n                  \"textRaw\": \"readable.\\\\_read(size)\",\n                  \"type\": \"method\",\n                  \"name\": \"\\\\_read\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`size` {Number} Number of bytes to read asynchronously \",\n                          \"name\": \"size\",\n                          \"type\": \"Number\",\n                          \"desc\": \"Number of bytes to read asynchronously\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"size\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\\nshould be implemented by child classes, and called only by the internal Readable\\nclass methods only.</p>\\n<p>All Readable stream implementations must provide an implementation of the\\n<code>readable.\\\\_read()</code> method to fetch data from the underlying resource.</p>\\n<p>When <code>readable._read()</code> is called, if data is available from the resource, the\\nimplementation should begin pushing that data into the read queue using the\\n[<code>this.push(dataChunk)</code>][stream-push] method. <code>_read()</code> should continue reading\\nfrom the resource and pushing data until <code>readable.push()</code> returns <code>false</code>. Only\\nwhen <code>_read()</code> is called again after it has stopped should it resume pushing\\nadditional data onto the queue.</p>\\n<p><em>Note</em>: Once the <code>readable._read()</code> method has been called, it will not be\\ncalled again until the [<code>readable.push()</code>][stream-push] method is called.</p>\\n<p>The <code>size</code> argument is advisory. For implementations where a &quot;read&quot; is a\\nsingle operation that returns data can use the <code>size</code> argument to determine how\\nmuch data to fetch. Other implementations may ignore this argument and simply\\nprovide data whenever it becomes available. There is no need to &quot;wait&quot; until\\n<code>size</code> bytes are available before calling [<code>stream.push(chunk)</code>][stream-push].</p>\\n<p>The <code>readable.\\\\_read()</code> method is prefixed with an underscore because it is\\ninternal to the class that defines it, and should never be called directly by\\nuser programs.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"readable.push(chunk[, encoding])\",\n                  \"type\": \"method\",\n                  \"name\": \"push\",\n                  \"signatures\": [\n                    {\n                      \"return\": {\n                        \"textRaw\": \"Returns {Boolean} `true` if additional chunks of data may continued to be pushed; `false` otherwise. \",\n                        \"name\": \"return\",\n                        \"type\": \"Boolean\",\n                        \"desc\": \"`true` if additional chunks of data may continued to be pushed; `false` otherwise.\"\n                      },\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`chunk` {Buffer|Null|String} Chunk of data to push into the read queue \",\n                          \"name\": \"chunk\",\n                          \"type\": \"Buffer|Null|String\",\n                          \"desc\": \"Chunk of data to push into the read queue\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} Encoding of String chunks.  Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"Encoding of String chunks.  Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'`\",\n                          \"optional\": true\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"chunk\"\n                        },\n                        {\n                          \"name\": \"encoding\",\n                          \"optional\": true\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>When <code>chunk</code> is a <code>Buffer</code> or <code>string</code>, the <code>chunk</code> of data will be added to the\\ninternal queue for users of the stream to consume. Passing <code>chunk</code> as <code>null</code>\\nsignals the end of the stream (EOF), after which no more data can be written.</p>\\n<p>When the Readable is operating in paused mode, the data added with\\n<code>readable.push()</code> can be read out by calling the\\n[<code>readable.read()</code>][stream-read] method when the [<code>&#39;readable&#39;</code>][] event is\\nemitted.</p>\\n<p>When the Readable is operating in flowing mode, the data added with\\n<code>readable.push()</code> will be delivered by emitting a <code>&#39;data&#39;</code> event.</p>\\n<p>The <code>readable.push()</code> method is designed to be as flexible as possible. For\\nexample, when wrapping a lower-level source that provides some form of\\npause/resume mechanism, and a data callback, the low-level source can be wrapped\\nby the custom Readable instance as illustrated in the following example:</p>\\n<pre><code class=\\\"lang-js\\\">// source is an object with readStop() and readStart() methods,\\n// and an `ondata` member that gets called when it has data, and\\n// an `onend` member that gets called when the data is over.\\n\\nclass SourceWrapper extends Readable {\\n  constructor(options) {\\n    super(options);\\n\\n    this._source = getLowlevelSourceObject();\\n\\n    // Every time there&#39;s data, push it into the internal buffer.\\n    this._source.ondata = (chunk) =&gt; {\\n      // if push() returns false, then stop reading from source\\n      if (!this.push(chunk))\\n        this._source.readStop();\\n    };\\n\\n    // When the source ends, push the EOF-signaling `null` chunk\\n    this._source.onend = () =&gt; {\\n      this.push(null);\\n    };\\n  }\\n  // _read will be called when the stream wants to pull more data in\\n  // the advisory size argument is ignored in this case.\\n  _read(size) {\\n    this._source.readStart();\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: The <code>readable.push()</code> method is intended be called only by Readable\\nImplemeters, and only from within the <code>readable.\\\\_read()</code> method.</p>\\n\"\n                }\n              ],\n              \"modules\": [\n                {\n                  \"textRaw\": \"Errors While Reading\",\n                  \"name\": \"errors_while_reading\",\n                  \"desc\": \"<p>It is recommended that errors occurring during the processing of the\\n<code>readable.\\\\_read()</code> method are emitted using the <code>&#39;error&#39;</code> event rather than\\nbeing thrown. Throwing an Error from within <code>readable.\\\\_read()</code> can result in\\nexpected and inconsistent behavior depending on whether the stream is operating\\nin flowing or paused mode. Using the <code>&#39;error&#39;</code> event ensures consistent and\\npredictable handling of errors.</p>\\n<pre><code class=\\\"lang-js\\\">const Readable = require(&#39;stream&#39;).Readable;\\n\\nconst myReadable = new Readable({\\n  read(size) {\\n    if (checkSomeErrorCondition()) {\\n      process.nextTick(() =&gt; this.emit(&#39;error&#39;, err));\\n      return;\\n    }\\n    // do some work\\n  }\\n});\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Errors While Reading\"\n                }\n              ],\n              \"examples\": [\n                {\n                  \"textRaw\": \"An Example Counting Stream\",\n                  \"name\": \"An Example Counting Stream\",\n                  \"type\": \"example\",\n                  \"desc\": \"<p>The following is a basic example of a Readable stream that emits the numerals\\nfrom 1 to 1,000,000 in ascending order, and then ends.</p>\\n<pre><code class=\\\"lang-js\\\">const Readable = require(&#39;stream&#39;).Readable;\\n\\nclass Counter extends Readable {\\n  constructor(opt) {\\n    super(opt);\\n    this._max = 1000000;\\n    this._index = 1;\\n  }\\n\\n  _read() {\\n    var i = this._index++;\\n    if (i &gt; this._max)\\n      this.push(null);\\n    else {\\n      var str = &#39;&#39; + i;\\n      var buf = Buffer.from(str, &#39;ascii&#39;);\\n      this.push(buf);\\n    }\\n  }\\n}\\n</code></pre>\\n\"\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Implementing a Readable Stream\"\n            },\n            {\n              \"textRaw\": \"Implementing a Duplex Stream\",\n              \"name\": \"implementing_a_duplex_stream\",\n              \"desc\": \"<p>A [Duplex][] stream is one that implements both [Readable][] and [Writable][],\\nsuch as a TCP socket connection.</p>\\n<p>Because Javascript does not have support for multiple inheritance, the\\n<code>stream.Duplex</code> class is extended to implement a [Duplex][] stream (as opposed\\nto extending the <code>stream.Readable</code> <em>and</em> <code>stream.Writable</code> classes).</p>\\n<p><em>Note</em>: The <code>stream.Duplex</code> class prototypically inherits from <code>stream.Readable</code>\\nand parasitically from <code>stream.Writable</code>.</p>\\n<p>Custom Duplex streams <em>must</em> call the <code>new stream.Duplex([options])</code>\\nconstructor and implement <em>both</em> the <code>readable.\\\\_read()</code> and\\n<code>writable.\\\\_write()</code> methods.</p>\\n\",\n              \"methods\": [\n                {\n                  \"textRaw\": \"new stream.Duplex(options)\",\n                  \"type\": \"method\",\n                  \"name\": \"Duplex\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`allowHalfOpen` {Boolean} Defaults to `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. \",\n                              \"name\": \"allowHalfOpen\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Defaults to `true`. If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa.\"\n                            },\n                            {\n                              \"textRaw\": \"`readableObjectMode` {Boolean} Defaults to `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. \",\n                              \"name\": \"readableObjectMode\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Defaults to `false`. Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`.\"\n                            },\n                            {\n                              \"textRaw\": \"`writableObjectMode` {Boolean} Defaults to `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. \",\n                              \"name\": \"writableObjectMode\",\n                              \"type\": \"Boolean\",\n                              \"desc\": \"Defaults to `false`. Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`.\"\n                            }\n                          ],\n                          \"name\": \"options\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Passed to both Writable and Readable constructors. Also has the following fields:\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"options\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const Duplex = require(&#39;stream&#39;).Duplex;\\n\\nclass MyDuplex extends Duplex {\\n  constructor(options) {\\n    super(options);\\n  }\\n}\\n</code></pre>\\n<p>Or, when using pre-ES6 style constructors:</p>\\n<pre><code class=\\\"lang-js\\\">const Duplex = require(&#39;stream&#39;).Duplex;\\nconst util = require(&#39;util&#39;);\\n\\nfunction MyDuplex(options) {\\n  if (!(this instanceof MyDuplex))\\n    return new MyDuplex(options);\\n  Duplex.call(this, options);\\n}\\nutil.inherits(MyDuplex, Duplex);\\n</code></pre>\\n<p>Or, using the Simplified Constructor approach:</p>\\n<pre><code class=\\\"lang-js\\\">const Duplex = require(&#39;stream&#39;).Duplex;\\n\\nconst myDuplex = new Duplex({\\n  read(size) {\\n    // ...\\n  },\\n  write(chunk, encoding, callback) {\\n    // ...\\n  }\\n});\\n</code></pre>\\n\"\n                }\n              ],\n              \"modules\": [\n                {\n                  \"textRaw\": \"An Example Duplex Stream\",\n                  \"name\": \"an_example_duplex_stream\",\n                  \"desc\": \"<p>The following illustrates a simple example of a Duplex stream that wraps a\\nhypothetical lower-level source object to which data can be written, and\\nfrom which data can be read, albeit using an API that is not compatible with\\nNode.js streams.\\nThe following illustrates a simple example of a Duplex stream that buffers\\nincoming written data via the [Writable][] interface that is read back out\\nvia the [Readable][] interface.</p>\\n<pre><code class=\\\"lang-js\\\">const Duplex = require(&#39;stream&#39;).Duplex;\\nconst kSource = Symbol(&#39;source&#39;);\\n\\nclass MyDuplex extends Duplex {\\n  constructor(source, options) {\\n    super(options);\\n    this[kSource] = source;\\n  }\\n\\n  _write(chunk, encoding, callback) {\\n    // The underlying source only deals with strings\\n    if (Buffer.isBuffer(chunk))\\n      chunk = chunk.toString(encoding);\\n    this[kSource].writeSomeData(chunk, encoding);\\n    callback();\\n  }\\n\\n  _read(size) {\\n    this[kSource].fetchSomeData(size, (data, encoding) =&gt; {\\n      this.push(Buffer.from(data, encoding));\\n    });\\n  }\\n}\\n</code></pre>\\n<p>The most important aspect of a Duplex stream is that the Readable and Writable\\nsides operate independently of one another despite co-existing within a single\\nobject instance.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"An Example Duplex Stream\"\n                },\n                {\n                  \"textRaw\": \"Object Mode Duplex Streams\",\n                  \"name\": \"object_mode_duplex_streams\",\n                  \"desc\": \"<p>For Duplex streams, <code>objectMode</code> can be set exclusively for either the Readable\\nor Writable side using the <code>readableObjectMode</code> and <code>writableObjectMode</code> options\\nrespectively.</p>\\n<p>In the following example, for instance, a new Transform stream (which is a \\ntype of [Duplex][] stream) is created that has an object mode Writable side\\nthat accepts JavaScript numbers that are converted to hexidecimal strings on\\nthe Readable side.</p>\\n<pre><code class=\\\"lang-js\\\">const Transform = require(&#39;stream&#39;).Transform;\\n\\n// All Transform streams are also Duplex Streams\\nconst myTransform = new Transform({\\n  writableObjectMode: true,\\n\\n  transform(chunk, encoding, callback) {\\n    // Coerce the chunk to a number if necessary\\n    chunk |= 0;\\n\\n    // Transform the chunk into something else.\\n    const data = chunk.toString(16);\\n\\n    // Push the data onto the readable queue.\\n    callback(null, &#39;0&#39;.repeat(data.length % 2) + data);\\n  }\\n});\\n\\nmyTransform.setEncoding(&#39;ascii&#39;);\\nmyTransform.on(&#39;data&#39;, (chunk) =&gt; console.log(chunk));\\n\\nmyTransform.write(1);\\n  // Prints: 01\\nmyTransform.write(10);\\n  // Prints: 0a\\nmyTransform.write(100);\\n  // Prints: 64\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Object Mode Duplex Streams\"\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Implementing a Duplex Stream\"\n            },\n            {\n              \"textRaw\": \"Implementing a Transform Stream\",\n              \"name\": \"implementing_a_transform_stream\",\n              \"desc\": \"<p>A [Transform][] stream is a [Duplex][] stream where the output is computed\\nin some way from the input. Examples include [zlib][] streams or [crypto][]\\nstreams that compress, encrypt, or decrypt data.</p>\\n<p><em>Note</em>: There is no requirement that the output be the same size as the input,\\nthe same number of chunks, or arrive at the same time. For example, a\\nHash stream will only ever have a single chunk of output which is\\nprovided when the input is ended. A <code>zlib</code> stream will produce output\\nthat is either much smaller or much larger than its input.</p>\\n<p>The <code>stream.Transform</code> class is extended to implement a [Transform][] stream.</p>\\n<p>The <code>stream.Transform</code> class prototypically inherits from <code>stream.Duplex</code> and\\nimplements its own versions of the <code>writable.\\\\_write()</code> and <code>readable.\\\\_read()</code>\\nmethods. Custom Transform implementations <em>must</em> implement the\\n[<code>transform.\\\\_transform()</code>][stream-_transform] method and <em>may</em> also implement\\nthe [<code>transform.\\\\_flush()</code>][stream-._flush] method.</p>\\n<p><em>Note</em>: Care must be taken when using Transform streams in that data written\\nto the stream can cause the Writable side of the stream to become paused if\\nthe output on the Readable side is not consumed.</p>\\n\",\n              \"methods\": [\n                {\n                  \"textRaw\": \"new stream.Transform([options])\",\n                  \"type\": \"method\",\n                  \"name\": \"Transform\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: \",\n                          \"options\": [\n                            {\n                              \"textRaw\": \"`transform` {Function} Implementation for the [`stream._transform()`][stream-_transform] method. \",\n                              \"name\": \"transform\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Implementation for the [`stream._transform()`][stream-_transform] method.\"\n                            },\n                            {\n                              \"textRaw\": \"`flush` {Function} Implementation for the [`stream._flush()`][stream-_flush] method. \",\n                              \"name\": \"flush\",\n                              \"type\": \"Function\",\n                              \"desc\": \"Implementation for the [`stream._flush()`][stream-_flush] method.\"\n                            }\n                          ],\n                          \"name\": \"options\",\n                          \"type\": \"Object\",\n                          \"desc\": \"Passed to both Writable and Readable constructors. Also has the following fields:\",\n                          \"optional\": true\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"options\",\n                          \"optional\": true\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const Transform = require(&#39;stream&#39;).Transform;\\n\\nclass MyTransform extends Transform {\\n  constructor(options) {\\n    super(options);\\n  }\\n}\\n</code></pre>\\n<p>Or, when using pre-ES6 style constructors:</p>\\n<pre><code class=\\\"lang-js\\\">const Transform = require(&#39;stream&#39;).Transform;\\nconst util = require(&#39;util&#39;);\\n\\nfunction MyTransform(options) {\\n  if (!(this instanceof MyTransform))\\n    return new MyTransform(options);\\n  Transform.call(this, options);\\n}\\nutil.inherits(MyTransform, Transform);\\n</code></pre>\\n<p>Or, using the Simplified Constructor approach:</p>\\n<pre><code class=\\\"lang-js\\\">const Transform = require(&#39;stream&#39;).Transform;\\n\\nconst myTransform = new Transform({\\n  transform(chunk, encoding, callback) {\\n    // ...\\n  }\\n});\\n</code></pre>\\n\"\n                },\n                {\n                  \"textRaw\": \"transform.\\\\_flush(callback)\",\n                  \"type\": \"method\",\n                  \"name\": \"\\\\_flush\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`callback` {Function} A callback function (optionally with an error argument) to be called when remaining data has been flushed. \",\n                          \"name\": \"callback\",\n                          \"type\": \"Function\",\n                          \"desc\": \"A callback function (optionally with an error argument) to be called when remaining data has been flushed.\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"callback\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\\nshould be implemented by child classes, and called only by the internal Readable\\nclass methods only.</p>\\n<p>In some cases, a transform operation may need to emit an additional bit of\\ndata at the end of the stream. For example, a <code>zlib</code> compression stream will\\nstore an amount of internal state used to optimally compress the output. When\\nthe stream ends, however, that additional data needs to be flushed so that the\\ncompressed data will be complete.</p>\\n<p>Custom [Transform][] implementations <em>may</em> implement the <code>transform.\\\\_flush()</code>\\nmethod. This will be called when there is no more written data to be consumed,\\nbut before the [<code>&#39;end&#39;</code>][] event is emitted signaling the end of the\\n[Readable][] stream.</p>\\n<p>Within the <code>transform.\\\\_flush()</code> implementation, the <code>readable.push()</code> method\\nmay be called zero or more times, as appropriate. The <code>callback</code> function must\\nbe called when the flush operation is complete.</p>\\n<p>The <code>transform.\\\\_flush()</code> method is prefixed with an underscore because it is\\ninternal to the class that defines it, and should never be called directly by\\nuser programs.</p>\\n\"\n                },\n                {\n                  \"textRaw\": \"transform.\\\\_transform(chunk, encoding, callback)\",\n                  \"type\": \"method\",\n                  \"name\": \"\\\\_transform\",\n                  \"signatures\": [\n                    {\n                      \"params\": [\n                        {\n                          \"textRaw\": \"`chunk` {Buffer|String} The chunk to be transformed. Will **always** be a buffer unless the `decodeStrings` option was set to `false`. \",\n                          \"name\": \"chunk\",\n                          \"type\": \"Buffer|String\",\n                          \"desc\": \"The chunk to be transformed. Will **always** be a buffer unless the `decodeStrings` option was set to `false`.\"\n                        },\n                        {\n                          \"textRaw\": \"`encoding` {String} If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value - 'buffer', ignore it in this case. \",\n                          \"name\": \"encoding\",\n                          \"type\": \"String\",\n                          \"desc\": \"If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value - 'buffer', ignore it in this case.\"\n                        },\n                        {\n                          \"textRaw\": \"`callback` {Function} A callback function (optionally with an error argument and data) to be called after the supplied `chunk` has been processed. \",\n                          \"name\": \"callback\",\n                          \"type\": \"Function\",\n                          \"desc\": \"A callback function (optionally with an error argument and data) to be called after the supplied `chunk` has been processed.\"\n                        }\n                      ]\n                    },\n                    {\n                      \"params\": [\n                        {\n                          \"name\": \"chunk\"\n                        },\n                        {\n                          \"name\": \"encoding\"\n                        },\n                        {\n                          \"name\": \"callback\"\n                        }\n                      ]\n                    }\n                  ],\n                  \"desc\": \"<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It\\nshould be implemented by child classes, and called only by the internal Readable\\nclass methods only.</p>\\n<p>All Transform stream implementations must provide a <code>_transform()</code>\\nmethod to accept input and produce output. The <code>transform.\\\\_transform()</code>\\nimplementation handles the bytes being written, computes an output, then passes\\nthat output off to the readable portion using the <code>readable.push()</code> method.</p>\\n<p>The <code>transform.push()</code> method may be called zero or more times to generate\\noutput from a single input chunk, depending on how much is to be output\\nas a result of the chunk.</p>\\n<p>It is possible that no output is generated from any given chunk of input data.</p>\\n<p>The <code>callback</code> function must be called only when the current chunk is completely\\nconsumed. The first argument passed to the <code>callback</code> must be an <code>Error</code> object\\nif an error occurred while processing the input or <code>null</code> otherwise. If a second\\nargument is passed to the <code>callback</code>, it will be forwarded on to the\\n<code>readable.push()</code> method. In other words the following are equivalent:</p>\\n<pre><code class=\\\"lang-js\\\">transform.prototype._transform = function (data, encoding, callback) {\\n  this.push(data);\\n  callback();\\n};\\n\\ntransform.prototype._transform = function (data, encoding, callback) {\\n  callback(null, data);\\n};\\n</code></pre>\\n<p>The <code>transform.\\\\_transform()</code> method is prefixed with an underscore because it\\nis internal to the class that defines it, and should never be called directly by\\nuser programs.</p>\\n\"\n                }\n              ],\n              \"modules\": [\n                {\n                  \"textRaw\": \"Events: 'finish' and 'end'\",\n                  \"name\": \"events:_'finish'_and_'end'\",\n                  \"desc\": \"<p>The [<code>&#39;finish&#39;</code>][] and [<code>&#39;end&#39;</code>][] events are from the <code>stream.Writable</code>\\nand <code>stream.Readable</code> classes, respectively. The <code>&#39;finish&#39;</code> event is emitted\\nafter [<code>stream.end()</code>][stream-end] is called and all chunks have been processed\\nby [<code>stream._transform()</code>][stream-_transform]. The <code>&#39;end&#39;</code> event is emitted\\nafter all data has been output, which occurs after the callback in\\n[<code>transform._flush()</code>][stream-_flush] has been called.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Events: 'finish' and 'end'\"\n                }\n              ],\n              \"classes\": [\n                {\n                  \"textRaw\": \"Class: stream.PassThrough\",\n                  \"type\": \"class\",\n                  \"name\": \"stream.PassThrough\",\n                  \"desc\": \"<p>The <code>stream.PassThrough</code> class is a trivial implementation of a [Transform][]\\nstream that simply passes the input bytes across to the output. Its purpose is\\nprimarily for examples and testing, but there are some use cases where\\n<code>stream.PassThrough</code> is useful as a building block for novel sorts of streams.</p>\\n\"\n                }\n              ],\n              \"type\": \"misc\",\n              \"displayName\": \"Implementing a Transform Stream\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Additional Notes\",\n          \"name\": \"Additional Notes\",\n          \"type\": \"misc\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Compatibility with Older Node.js Versions\",\n              \"name\": \"Compatibility with Older Node.js Versions\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>In versions of Node.js prior to v0.10, the Readable stream interface was\\nsimpler, but also less powerful and less useful.</p>\\n<ul>\\n<li>Rather than waiting for calls the [<code>stream.read()</code>][stream-read] method,\\n[<code>&#39;data&#39;</code>][] events would begin emitting immediately. Applications that\\nwould need to perform some amount of work to decide how to handle data\\nwere required to store read data into buffers so the data would not be lost.</li>\\n<li>The [<code>stream.pause()</code>][stream-pause] method was advisory, rather than\\nguaranteed. This meant that it was still necessary to be prepared to receive\\n[<code>&#39;data&#39;</code>][] events <em>even when the stream was in a paused state</em>.</li>\\n</ul>\\n<p>In Node.js v0.10, the [Readable][] class was added. For backwards compatibility\\nwith older Node.js programs, Readable streams switch into &quot;flowing mode&quot; when a\\n[<code>&#39;data&#39;</code>][] event handler is added, or when the\\n[<code>stream.resume()</code>][stream-resume] method is called. The effect is that, even\\nwhen not using the new [<code>stream.read()</code>][stream-read] method and\\n[<code>&#39;readable&#39;</code>][] event, it is no longer necessary to worry about losing\\n[<code>&#39;data&#39;</code>][] chunks.</p>\\n<p>While most applications will continue to function normally, this introduces an\\nedge case in the following conditions:</p>\\n<ul>\\n<li>No [<code>&#39;data&#39;</code>][] event listener is added.</li>\\n<li>The [<code>stream.resume()</code>][stream-resume] method is never called.</li>\\n<li>The stream is not piped to any writable destination.</li>\\n</ul>\\n<p>For example, consider the following code:</p>\\n<pre><code class=\\\"lang-js\\\">// WARNING!  BROKEN!\\nnet.createServer((socket) =&gt; {\\n\\n  // we add an &#39;end&#39; method, but never consume the data\\n  socket.on(&#39;end&#39;, () =&gt; {\\n    // It will never get here.\\n    socket.end(&#39;The message was received but was not processed.\\\\n&#39;);\\n  });\\n\\n}).listen(1337);\\n</code></pre>\\n<p>In versions of Node.js prior to v0.10, the incoming message data would be\\nsimply discarded. However, in Node.js v0.10 and beyond, the socket remains\\npaused forever.</p>\\n<p>The workaround in this situation is to call the\\n[<code>stream.resume()</code>][stream-resume] method to begin the flow of data:</p>\\n<pre><code class=\\\"lang-js\\\">// Workaround\\nnet.createServer((socket) =&gt; {\\n\\n  socket.on(&#39;end&#39;, () =&gt; {\\n    socket.end(&#39;The message was received but was not processed.\\\\n&#39;);\\n  });\\n\\n  // start the flow of data, discarding it.\\n  socket.resume();\\n\\n}).listen(1337);\\n</code></pre>\\n<p>In addition to new Readable streams switching into flowing mode,\\npre-v0.10 style streams can be wrapped in a Readable class using the\\n[<code>readable.wrap()</code>][] method.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`readable.read(0)`\",\n              \"name\": \"`readable.read(0)`\",\n              \"desc\": \"<p>There are some cases where it is necessary to trigger a refresh of the\\nunderlying readable stream mechanisms, without actually consuming any\\ndata. In such cases, it is possible to call <code>readable.read(0)</code>, which will\\nalways return <code>null</code>.</p>\\n<p>If the internal read buffer is below the <code>highWaterMark</code>, and the\\nstream is not currently reading, then calling <code>stream.read(0)</code> will trigger\\na low-level [<code>stream._read()</code>][stream-_read] call.</p>\\n<p>While most applications will almost never need to do this, there are\\nsituations within Node.js where this is done, particularly in the\\nReadable stream class internals.</p>\\n\",\n              \"type\": \"misc\",\n              \"displayName\": \"`readable.read(0)`\"\n            },\n            {\n              \"textRaw\": \"`readable.push('')`\",\n              \"name\": \"`readable.push('')`\",\n              \"desc\": \"<p>Use of <code>readable.push(&#39;&#39;)</code> is not recommended.</p>\\n<p>Pushing a zero-byte string or <code>Buffer</code> to a stream that is not in object mode\\nhas an interesting side effect. Because it <em>is</em> a call to\\n[<code>readable.push()</code>][stream-push], the call will end the reading process.\\nHowever, because the argument is an empty string, no data is added to the\\nreadable buffer so there is nothing for a user to consume.</p>\\n<!-- [end-include:stream.md] -->\\n<!-- [start-include:string_decoder.md] -->\\n\",\n              \"type\": \"misc\",\n              \"displayName\": \"`readable.push('')`\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Stream\"\n    },\n    {\n      \"textRaw\": \"StringDecoder\",\n      \"name\": \"stringdecoder\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\\ncharacters. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\\n</code></pre>\\n<p>The following example shows the basic use of the <code>StringDecoder</code> class.</p>\\n<pre><code class=\\\"lang-js\\\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\\nconst decoder = new StringDecoder(&#39;utf8&#39;);\\n\\nconst cent = Buffer.from([0xC2, 0xA2]);\\nconsole.log(decoder.write(cent));\\n\\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\\nconsole.log(decoder.write(euro));\\n</code></pre>\\n<p>When a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an\\ninternal buffer is used to ensure that the decoded string does not contain\\nany incomplete multibyte characters. These are held in the buffer until the\\nnext call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.</p>\\n<p>In the following example, the three UTF-8 encoded bytes of the European Euro\\nsymbol (<code>\u20ac</code>) are written over three separate operations:</p>\\n<pre><code class=\\\"lang-js\\\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\\nconst decoder = new StringDecoder(&#39;utf8&#39;);\\n\\ndecoder.write(Buffer.from([0xE2]));\\ndecoder.write(Buffer.from([0x82]));\\nconsole.log(decoder.end(Buffer.from([0xAC])));\\n</code></pre>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: new StringDecoder([encoding])\",\n          \"type\": \"class\",\n          \"name\": \"new\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.99\"\n            ]\n          },\n          \"desc\": \"<ul>\\n<li><code>encoding</code> {string} The character encoding the <code>StringDecoder</code> will use.\\nDefaults to <code>&#39;utf8&#39;</code>.</li>\\n</ul>\\n<p>Creates a new <code>StringDecoder</code> instance.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"stringDecoder.end([buffer])\",\n              \"type\": \"method\",\n              \"name\": \"end\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.9.3\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`buffer` {Buffer} A `Buffer` containing the bytes to decode. \",\n                      \"name\": \"buffer\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"A `Buffer` containing the bytes to decode.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns any remaining input stored in the internal buffer as a string. Bytes\\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\\nsubstitution characters appropriate for the character encoding.</p>\\n<p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>\\nis performed before returning the remaining input.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"stringDecoder.write(buffer)\",\n              \"type\": \"method\",\n              \"name\": \"write\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.99\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`buffer` {Buffer} A `Buffer` containing the bytes to decode. \",\n                      \"name\": \"buffer\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"A `Buffer` containing the bytes to decode.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buffer\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns a decoded string, ensuring that any incomplete multibyte characters at\\nthe end of the <code>Buffer</code> are omitted from the returned string and stored in an\\ninternal buffer for the next call to <code>stringDecoder.write()</code> or\\n<code>stringDecoder.end()</code>.</p>\\n<!-- [end-include:string_decoder.md] -->\\n<!-- [start-include:timers.md] -->\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"StringDecoder\"\n    },\n    {\n      \"textRaw\": \"Timers\",\n      \"name\": \"timers\",\n      \"stability\": 3,\n      \"stabilityText\": \"Locked\",\n      \"desc\": \"<p>All of the timer functions are globals.  You do not need to <code>require()</code>\\nthis module in order to use them.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"clearImmediate(immediateObject)\",\n          \"type\": \"method\",\n          \"name\": \"clearImmediate\",\n          \"desc\": \"<p>Stops an <code>immediateObject</code>, as created by [<code>setImmediate</code>][], from triggering.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"immediateObject\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"clearInterval(intervalObject)\",\n          \"type\": \"method\",\n          \"name\": \"clearInterval\",\n          \"desc\": \"<p>Stops an <code>intervalObject</code>, as created by [<code>setInterval</code>][], from triggering.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"intervalObject\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"clearTimeout(timeoutObject)\",\n          \"type\": \"method\",\n          \"name\": \"clearTimeout\",\n          \"desc\": \"<p>Prevents a <code>timeoutObject</code>, as created by [<code>setTimeout</code>][], from triggering.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"timeoutObject\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"ref()\",\n          \"type\": \"method\",\n          \"name\": \"ref\",\n          \"desc\": \"<p>If a timer was previously <code>unref()</code>d, then <code>ref()</code> can be called to explicitly\\nrequest the timer hold the program open. If the timer is already <code>ref</code>d calling\\n<code>ref</code> again will have no effect.</p>\\n<p>Returns the timer.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"setImmediate(callback[, arg][, ...])\",\n          \"type\": \"method\",\n          \"name\": \"setImmediate\",\n          \"desc\": \"<p>Schedules &quot;immediate&quot; execution of <code>callback</code> after I/O events&#39;\\ncallbacks and before timers set by [<code>setTimeout</code>][] and [<code>setInterval</code>][] are\\ntriggered. Returns an <code>immediateObject</code> for possible use with\\n[<code>clearImmediate</code>][]. Additional optional arguments may be passed to the\\ncallback.</p>\\n<p>Callbacks for immediates are queued in the order in which they were created.\\nThe entire callback queue is processed every event loop iteration. If an\\nimmediate is queued from inside an executing callback, that immediate won&#39;t fire\\nuntil the next event loop iteration.</p>\\n<p>If <code>callback</code> is not a function <code>setImmediate()</code> will throw immediately.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"callback\"\n                },\n                {\n                  \"name\": \"arg\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"setInterval(callback, delay[, arg][, ...])\",\n          \"type\": \"method\",\n          \"name\": \"setInterval\",\n          \"desc\": \"<p>Schedules repeated execution of <code>callback</code> every <code>delay</code> milliseconds.\\nReturns a <code>intervalObject</code> for possible use with [<code>clearInterval</code>][]. Additional\\noptional arguments may be passed to the callback.</p>\\n<p>To follow browser behavior, when using delays larger than 2147483647\\nmilliseconds (approximately 25 days) or less than 1, Node.js will use 1 as the\\n<code>delay</code>.</p>\\n<p>If <code>callback</code> is not a function <code>setInterval()</code> will throw immediately.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"callback\"\n                },\n                {\n                  \"name\": \"delay\"\n                },\n                {\n                  \"name\": \"arg\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"setTimeout(callback, delay[, arg][, ...])\",\n          \"type\": \"method\",\n          \"name\": \"setTimeout\",\n          \"desc\": \"<p>Schedules execution of a one-time <code>callback</code> after <code>delay</code> milliseconds.\\nReturns a <code>timeoutObject</code> for possible use with [<code>clearTimeout</code>][]. Additional\\noptional arguments may be passed to the callback.</p>\\n<p>The callback will likely not be invoked in precisely <code>delay</code> milliseconds.\\nNode.js makes no guarantees about the exact timing of when callbacks will fire,\\nnor of their ordering. The callback will be called as close as possible to the\\ntime specified.</p>\\n<p>To follow browser behavior, when using delays larger than 2147483647\\nmilliseconds (approximately 25 days) or less than 1, the timeout is executed\\nimmediately, as if the <code>delay</code> was set to 1.</p>\\n<p>If <code>callback</code> is not a function <code>setTimeout()</code> will throw immediately.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"callback\"\n                },\n                {\n                  \"name\": \"delay\"\n                },\n                {\n                  \"name\": \"arg\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"unref()\",\n          \"type\": \"method\",\n          \"name\": \"unref\",\n          \"desc\": \"<p>The opaque value returned by [<code>setTimeout</code>][] and [<code>setInterval</code>][] also has the\\nmethod <code>timer.unref()</code> which allows the creation of a timer that is active but\\nif it is the only item left in the event loop, it won&#39;t keep the program\\nrunning. If the timer is already <code>unref</code>d calling <code>unref</code> again will have no\\neffect.</p>\\n<p>In the case of [<code>setTimeout</code>][], <code>unref</code> creates a separate timer that will\\nwakeup the event loop, creating too many of these may adversely effect event\\nloop performance -- use wisely.</p>\\n<p>Returns the timer.</p>\\n<!-- [end-include:timers.md] -->\\n<!-- [start-include:tls.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Timers\"\n    },\n    {\n      \"textRaw\": \"TLS (SSL)\",\n      \"name\": \"tls_(ssl)\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>tls</code> module provides an implementation of the Transport Layer Security\\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\\nThe module can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const tls = require(&#39;tls&#39;);\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"TLS/SSL Concepts\",\n          \"name\": \"tls/ssl_concepts\",\n          \"desc\": \"<p>The TLS/SSL is a public/private key infrastructure (PKI). For most common\\ncases, each client and server must have a <em>private key</em>.</p>\\n<p>Private keys can be generated in multiple ways. The example below illustrates\\nuse of the OpenSSL command-line interface to generate a 2048-bit RSA private\\nkey:</p>\\n<pre><code>openssl genrsa -out ryans-key.pem 2048\\n</code></pre><p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>.\\nCertificates are <em>public keys</em> that correspond to a private key, and that are\\ndigitally signed either by a Certificate Authority or by the owner of the\\nprivate key (such certificates are referred to as &quot;self-signed&quot;). The first\\nstep to obtaining a certificate is to create a <em>Certificate Signing Request</em>\\n(CSR) file.</p>\\n<p>The OpenSSL command-line interface can be used to generate a CSR for a private\\nkey:</p>\\n<pre><code>openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\\n</code></pre><p>Once the CSR file is generated, it can either be sent to a Certificate\\nAuthority for signing or used to generate a self-signed certificate.</p>\\n<p>Creating a self-signed certificate using the OpenSSL command-line interface\\nis illustrated in the example below:</p>\\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\\n</code></pre><p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or\\n<code>.p12</code> file:</p>\\n<pre><code>openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\\\\n      -certfile ca-cert.pem -out ryans.pfx\\n</code></pre><p>Where:</p>\\n<ul>\\n<li><code>in</code>: is the signed certificate</li>\\n<li><code>inkey</code>: is the associated private key</li>\\n<li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into\\n a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\\n</ul>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Perfect Forward Secrecy\",\n              \"name\": \"Perfect Forward Secrecy\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>The term &quot;[Forward Secrecy]&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of\\nkey-agreement (i.e., key-exchange) methods. That is, the server and client keys\\nare used to negotiate new temporary keys that are used specifically and only for\\nthe current communication session. Practically, this means that even if the\\nserver&#39;s private key is compromised, communication can only be decrypted by\\neavesdroppers if the attacker manages to obtain the key-pair specifically\\ngenerated for the session.</p>\\n<p>Perfect Forward Secrecy is achieved by randomly generating a key pair for\\nkey-agreement on every TLS/SSL handshake (in contrast to using the same key for\\nall sessions). Methods implementing this technique are called &quot;ephemeral&quot;.</p>\\n<p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note\\nthe character &quot;E&quot; appended to the traditional abbreviations):</p>\\n<ul>\\n<li>[DHE] - An ephemeral version of the Diffie Hellman key-agreement protocol.</li>\\n<li>[ECDHE] - An ephemeral version of the Elliptic Curve Diffie Hellman\\nkey-agreement protocol.</li>\\n</ul>\\n<p>Ephemeral methods may have some performance drawbacks, because key generation\\nis expensive.</p>\\n<p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required\\nto generate Diffie-Hellman parameters. The following illustrates the use of the\\nOpenSSL command-line interface to generate such parameters:</p>\\n<pre><code>openssl dhparam -outform PEM -out dhparam.pem 2048\\n</code></pre><p>If using Perfect Foward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are\\nnot required and a default ECDHE curve will be used. The <code>ecdheCurve</code> property\\ncan be used when creating a TLS Server to specify the name of an\\nalternative curve to use.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"ALPN, NPN and SNI\",\n              \"name\": \"ALPN, NPN and SNI\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>ALPN (Application-Layer Protocol Negotiation Extension), NPN (Next\\nProtocol Negotiation) and, SNI (Server Name Indication) are TLS\\nhandshake extensions:</p>\\n<ul>\\n<li>ALPN/NPN - Allows the use of one TLS server for multiple protocols (HTTP,\\nSPDY, HTTP/2)</li>\\n<li>SNI - Allows the use of one TLS server for multiple hostnames with different\\nSSL certificates.</li>\\n</ul>\\n<p><em>Note</em>: Use of ALPN is recommended over NPN. The NPN extension has never been\\nformally defined or documented and generally not recommended for use.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Client-initiated renegotiation attack mitigation\",\n              \"name\": \"Client-initiated renegotiation attack mitigation\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>The TLS protocol allows clients to renegotiate certain aspects of the TLS\\nsession. Unfortunately, session renegotiation requires a disproportionate amount\\nof server-side resources, making it a potential vector for denial-of-service\\nattacks.</p>\\n<p>To mitigate the risk, renegotiation is limited to three times every ten minutes.\\nAn <code>&#39;error&#39;</code> event is emitted on the [<code>tls.TLSSocket</code>][] instance when this\\nthreshold is exceeded. The limits are configurable:</p>\\n<ul>\\n<li><code>tls.CLIENT_RENEG_LIMIT</code> {number} Specifies the number of renegotiation\\nrequests. Defaults to <code>3</code>.</li>\\n<li><code>tls.CLIENT_RENEG_WINDOW</code> {number} Specifies the time renegotiation window\\nin seconds. Defaults to <code>600</code> (10 minutes).</li>\\n</ul>\\n<p><em>Note</em>: The default renegotiation limits should not be modified without a full\\nunderstanding of the implications and risks.</p>\\n<p>To test the renegotiation limits on a server, connect to it using the OpenSSL\\ncommand-line client (<code>openssl s_client -connect address:port</code>) then input\\n<code>R&lt;CR&gt;</code> (i.e., the letter <code>R</code> followed by a carriage return) multiple times.</p>\\n\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"TLS/SSL Concepts\"\n        },\n        {\n          \"textRaw\": \"Modifying the Default TLS Cipher suite\",\n          \"name\": \"modifying_the_default_tls_cipher_suite\",\n          \"desc\": \"<p>Node.js is built with a default suite of enabled and disabled TLS ciphers.\\nCurrently, the default cipher suite is:</p>\\n<pre><code>ECDHE-RSA-AES128-GCM-SHA256:\\nECDHE-ECDSA-AES128-GCM-SHA256:\\nECDHE-RSA-AES256-GCM-SHA384:\\nECDHE-ECDSA-AES256-GCM-SHA384:\\nDHE-RSA-AES128-GCM-SHA256:\\nECDHE-RSA-AES128-SHA256:\\nDHE-RSA-AES128-SHA256:\\nECDHE-RSA-AES256-SHA384:\\nDHE-RSA-AES256-SHA384:\\nECDHE-RSA-AES256-SHA256:\\nDHE-RSA-AES256-SHA256:\\nHIGH:\\n!aNULL:\\n!eNULL:\\n!EXPORT:\\n!DES:\\n!RC4:\\n!MD5:\\n!PSK:\\n!SRP:\\n!CAMELLIA\\n</code></pre><p>This default can be replaced entirely using the <code>--tls-cipher-list</code> command\\nline switch. For instance, the following makes\\n<code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p>\\n<pre><code>node --tls-cipher-list=&quot;ECDHE-RSA-AES128-GCM-SHA256:!RC4&quot;\\n</code></pre><p><em>Note</em>: The default cipher suite included within Node.js has been carefully\\nselected to reflect current security best practices and risk mitigation.\\nChanging the default cipher suite can have a significant impact on the security\\nof an application. The <code>--tls-cipher-list</code> switch should by used only if\\nabsolutely necessary.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Modifying the Default TLS Cipher suite\"\n        },\n        {\n          \"textRaw\": \"Deprecated APIs\",\n          \"name\": \"deprecated_apis\",\n          \"classes\": [\n            {\n              \"textRaw\": \"Class: CryptoStream\",\n              \"type\": \"class\",\n              \"name\": \"CryptoStream\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`tls.TLSSocket`][] instead.\",\n              \"desc\": \"<p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class\\nhas been deprecated and should no longer be used.</p>\\n\",\n              \"properties\": [\n                {\n                  \"textRaw\": \"cryptoStream.bytesWritten\",\n                  \"name\": \"bytesWritten\",\n                  \"desc\": \"<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes\\nwritten to the underlying socket <em>including</em> the bytes required for the\\nimplementation of the TLS protocol.</p>\\n\"\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"Class: SecurePair\",\n              \"type\": \"class\",\n              \"name\": \"SecurePair\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`tls.TLSSocket`][] instead.\",\n              \"desc\": \"<p>Returned by <code>tls.createSecurePair()</code>.</p>\\n\",\n              \"events\": [\n                {\n                  \"textRaw\": \"Event: 'secure'\",\n                  \"type\": \"event\",\n                  \"name\": \"secure\",\n                  \"desc\": \"<p>The <code>&#39;secure&#39;</code> event is emitted by the <code>SecurePair</code> object once a secure\\nconnection has been established.</p>\\n<p>As with checking for the server <a href=\\\"#tls_event_secureconnection\\\"><code>secureConnection</code></a>\\nevent, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the\\ncertificate used is properly authorized.</p>\\n\",\n                  \"params\": []\n                }\n              ]\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Deprecated APIs\"\n        }\n      ],\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: tls.Server\",\n          \"type\": \"class\",\n          \"name\": \"tls.Server\",\n          \"desc\": \"<p>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted\\nconnections using TLS or SSL.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'tlsClientError'\",\n              \"type\": \"event\",\n              \"name\": \"tlsClientError\",\n              \"desc\": \"<p>The <code>&#39;tlsClientError&#39;</code> event is emitted when an error occurs before a secure\\nconnection is established. The listener callback is passed two arguments when\\ncalled:</p>\\n<ul>\\n<li><code>exception</code> {Error} The <code>Error</code> object describing the error</li>\\n<li><code>tlsSocket</code> {tls.TLSSocket} The <code>tls.TLSSocket</code> instance from which the\\nerror originated.</li>\\n</ul>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'newSession'\",\n              \"type\": \"event\",\n              \"name\": \"newSession\",\n              \"desc\": \"<p>The <code>&#39;newSession&#39;</code> event is emitted upon creation of a new TLS session. This may\\nbe used to store sessions in external storage. The listener callback is passed\\nthree arguments when called:</p>\\n<ul>\\n<li><code>sessionId</code> - The TLS session identifier</li>\\n<li><code>sessionData</code> - The TLS session data</li>\\n<li><code>callback</code> {Function} A callback function taking no arguments that must be\\ninvoked in order for data to be sent or received over the secure connection.</li>\\n</ul>\\n<p><em>Note</em>: Listening for this event will have an effect only on connections\\nestablished after the addition of the event listener.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'OCSPRequest'\",\n              \"type\": \"event\",\n              \"name\": \"OCSPRequest\",\n              \"desc\": \"<p>The <code>&#39;OCSPRequest&#39;</code> event is emitted when the client sends a certificate status\\nrequest. The listener callback is passed three arguments when called:</p>\\n<ul>\\n<li><code>certificate</code> {Buffer} The server certificate</li>\\n<li><code>issuer</code> {Buffer} The issuer&#39;s certificate</li>\\n<li><code>callback</code> {Function} A callback function that must be invoked to provide\\nthe results of the OCSP request.</li>\\n</ul>\\n<p>The server&#39;s current certificate can be parsed to obtain the OCSP URL\\nand certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is\\nthen invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.\\nBoth <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the\\nprimary and issuer&#39;s certificates. These can be used to obtain the OCSP\\ncertificate ID and OCSP endpoint URL.</p>\\n<p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was\\nno OCSP response.</p>\\n<p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p>\\n<p>The typical flow of an OCSP Request is as follows:</p>\\n<ol>\\n<li>Client connects to the server and sends an <code>&#39;OCSPRequest&#39;</code> (via the status\\ninfo extension in ClientHello).</li>\\n<li>Server receives the request and emits the <code>&#39;OCSPRequest&#39;</code> event, calling the\\nlistener if registered.</li>\\n<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and\\nperforms an [OCSP request] to the CA.</li>\\n<li>Server receives <code>OCSPResponse</code> from the CA and sends it back to the client\\nvia the <code>callback</code> argument</li>\\n<li>Client validates the response and either destroys the socket or performs a\\nhandshake.</li>\\n</ol>\\n<p><em>Note</em>: The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or\\nthe issuer is not in the root certificates list. (An issuer may be provided\\nvia the <code>ca</code> option when establishing the TLS connection.)</p>\\n<p><em>Note</em>: Listening for this event will have an effect only on connections\\nestablished after the addition of the event listener.</p>\\n<p><em>Note</em>: An npm module like [asn1.js] may be used to parse the certificates.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'resumeSession'\",\n              \"type\": \"event\",\n              \"name\": \"resumeSession\",\n              \"desc\": \"<p>The <code>&#39;resumeSession&#39;</code> event is emitted when the client requests to resume a\\nprevious TLS session. The listener callback is passed two arguments when\\ncalled:</p>\\n<ul>\\n<li><code>sessionId</code> - The TLS/SSL session identifier</li>\\n<li><code>callback</code> {Function} A callback function to be called when the prior session\\nhas been recovered.</li>\\n</ul>\\n<p>When called, the event listener may perform a lookup in external storage using\\nthe given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If\\nthe session cannot be resumed (i.e., doesn&#39;t exist in storage) the callback may\\nbe invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the\\nincoming connection and destroy the socket.</p>\\n<p><em>Note</em>: Listening for this event will have an effect only on connections\\nestablished after the addition of the event listener.</p>\\n<p>The following illustrates resuming a TLS session:</p>\\n<pre><code class=\\\"lang-js\\\">const tlsSessionStore = {};\\nserver.on(&#39;newSession&#39;, (id, data, cb) =&gt; {\\n  tlsSessionStore[id.toString(&#39;hex&#39;)] = data;\\n  cb();\\n});\\nserver.on(&#39;resumeSession&#39;, (id, cb) =&gt; {\\n  cb(null, tlsSessionStore[id.toString(&#39;hex&#39;)] || null);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'secureConnection'\",\n              \"type\": \"event\",\n              \"name\": \"secureConnection\",\n              \"desc\": \"<p>The <code>&#39;secureConnection&#39;</code> event is emitted after the handshaking process for a\\nnew connection has successfully completed. The listener callback is passed a\\nsingle argument when called:</p>\\n<ul>\\n<li><code>tlsSocket</code> {tls.TLSSocket} The established TLS socket.</li>\\n</ul>\\n<p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the\\nclient has been verified by one of the supplied Certificate Authorities for the\\nserver. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>\\nis set to describe how authorization failed. Note that depending on the settings\\nof the TLS server, unauthorized connections may still be accepted.</p>\\n<p>The <code>tlsSocket.npnProtocol</code> and <code>tlsSocket.alpnProtocol</code> properties are strings\\nthat contain the selected NPN and ALPN protocols, respectively. When both NPN\\nand ALPN extensions are received, ALPN takes precedence over NPN and the next\\nprotocol is selected by ALPN.</p>\\n<p>When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code> returns <code>false</code>.</p>\\n<p>The <code>tlsSocket.servername</code> property is a string containing the server name\\nrequested via SNI.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"server.addContext(hostname, context)\",\n              \"type\": \"method\",\n              \"name\": \"addContext\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`hostname` {string} A SNI hostname or wildcard (e.g. `'*'`) \",\n                      \"name\": \"hostname\",\n                      \"type\": \"string\",\n                      \"desc\": \"A SNI hostname or wildcard (e.g. `'*'`)\"\n                    },\n                    {\n                      \"textRaw\": \"`context` {Object} An object containing any of the possible properties from the [`tls.createSecureContext()`][] `options` arguments (e.g. `key`, `cert`, `ca`, etc). \",\n                      \"name\": \"context\",\n                      \"type\": \"Object\",\n                      \"desc\": \"An object containing any of the possible properties from the [`tls.createSecureContext()`][] `options` arguments (e.g. `key`, `cert`, `ca`, etc).\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"hostname\"\n                    },\n                    {\n                      \"name\": \"context\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>server.addContext()</code> method adds a secure context that will be used if\\nthe client request&#39;s SNS hostname matches the supplied <code>hostname</code> (or wildcard).</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.address()\",\n              \"type\": \"method\",\n              \"name\": \"address\",\n              \"desc\": \"<p>Returns the bound address, the address family name, and port of the\\nserver as reported by the operating system.  See [<code>net.Server.address()</code>][] for\\nmore information.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.close([callback])\",\n              \"type\": \"method\",\n              \"name\": \"close\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`callback` {Function} An optional listener callback that will be registered to listen for the server instance's `'close'` event. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"An optional listener callback that will be registered to listen for the server instance's `'close'` event.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>server.close()</code> method stops the server from accepting new connections.</p>\\n<p>This function operates asynchronously. The <code>&#39;close&#39;</code> event will be emitted\\nwhen the the server is finally closed.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.getTicketKeys()\",\n              \"type\": \"method\",\n              \"name\": \"getTicketKeys\",\n              \"desc\": \"<p>Returns a <code>Buffer</code> instance holding the keys currently used for\\nencryption/decryption of the [TLS Session Tickets][]</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"server.listen(port[, hostname][, callback])\",\n              \"type\": \"method\",\n              \"name\": \"listen\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`port` {number} The TCP/IP port on which to begin listening for connections. A value of `0` (zero) will assign a random port. \",\n                      \"name\": \"port\",\n                      \"type\": \"number\",\n                      \"desc\": \"The TCP/IP port on which to begin listening for connections. A value of `0` (zero) will assign a random port.\"\n                    },\n                    {\n                      \"textRaw\": \"`hostname` {string} The hostname, IPv4, or IPv6 address on which to begin listening for connections. If `undefined`, the server will accept connections on any IPv6 address (`::`) when IPv6 is available, or any IPv4 address (`0.0.0.0`) otherwise. \",\n                      \"name\": \"hostname\",\n                      \"type\": \"string\",\n                      \"desc\": \"The hostname, IPv4, or IPv6 address on which to begin listening for connections. If `undefined`, the server will accept connections on any IPv6 address (`::`) when IPv6 is available, or any IPv4 address (`0.0.0.0`) otherwise.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} A callback function to be invoked when the server has begun listening the the `port` and `hostname`. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"A callback function to be invoked when the server has begun listening the the `port` and `hostname`.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"port\"\n                    },\n                    {\n                      \"name\": \"hostname\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>server.listen()</code> methods instructs the server to begin accepting\\nconnections on the specified <code>port</code> and <code>hostname</code>.</p>\\n<p>This function operates asynchronously. If the <code>callback</code> is given, it will be\\ncalled when the server has started listening.</p>\\n<p>See <code>net.Server</code> for more information.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"server.setTicketKeys(keys)\",\n              \"type\": \"method\",\n              \"name\": \"setTicketKeys\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`keys` {Buffer} The keys used for encryption/decryption of the [TLS Session Tickets][]. \",\n                      \"name\": \"keys\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"The keys used for encryption/decryption of the [TLS Session Tickets][].\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"keys\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Updates the keys for encryption/decryption of the [TLS Session Tickets][].</p>\\n<p><em>Note</em>: The key&#39;s <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in\\n<a href=\\\"#tls_tls_createserver_options_secureconnectionlistener\\\">tls.createServer</a> for\\nmore information on how it is used.</p>\\n<p><em>Note</em>: Changes to the ticket keys are effective only for future server\\nconnections. Existing or currently pending server connections will use the\\nprevious keys.</p>\\n\"\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"server.connections\",\n              \"name\": \"connections\",\n              \"desc\": \"<p>Returns the current number of concurrent connections on the server.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: tls.TLSSocket\",\n          \"type\": \"class\",\n          \"name\": \"tls.TLSSocket\",\n          \"desc\": \"<p>The <code>tls.TLSSocket</code> is a subclass of [<code>net.Socket</code>][] that performs transparent\\nencryption of written data and all required TLS negotiation.</p>\\n<p>Instances of <code>tls.TLSSocket</code> implement the duplex [Stream][] interface.</p>\\n<p><em>Note</em>: Methods that return TLS connection metadata (e.g.\\n[<code>tls.TLSSocket.getPeerCertificate()</code>][] will only return data while the\\nconnection is open.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"new tls.TLSSocket(socket[, options])\",\n              \"type\": \"method\",\n              \"name\": \"TLSSocket\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`socket` {net.Socket} An instance of [`net.Socket`][] \",\n                      \"name\": \"socket\",\n                      \"type\": \"net.Socket\",\n                      \"desc\": \"An instance of [`net.Socket`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`secureContext`: An optional TLS context object from  [`tls.createSecureContext()`][] \",\n                          \"name\": \"secureContext\",\n                          \"desc\": \"An optional TLS context object from  [`tls.createSecureContext()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`isServer`: If `true` the TLS socket will be instantiated in server-mode. Defaults to `false`. \",\n                          \"name\": \"isServer\",\n                          \"desc\": \"If `true` the TLS socket will be instantiated in server-mode. Defaults to `false`.\"\n                        },\n                        {\n                          \"textRaw\": \"`server` {net.Server} An optional [`net.Server`][] instance. \",\n                          \"name\": \"server\",\n                          \"type\": \"net.Server\",\n                          \"desc\": \"An optional [`net.Server`][] instance.\"\n                        },\n                        {\n                          \"textRaw\": \"`requestCert`: Optional, see [`tls.createServer()`][] \",\n                          \"name\": \"requestCert\",\n                          \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`rejectUnauthorized`: Optional, see [`tls.createServer()`][] \",\n                          \"name\": \"rejectUnauthorized\",\n                          \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`NPNProtocols`: Optional, see [`tls.createServer()`][] \",\n                          \"name\": \"NPNProtocols\",\n                          \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`ALPNProtocols`: Optional, see [`tls.createServer()`][] \",\n                          \"name\": \"ALPNProtocols\",\n                          \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`SNICallback`: Optional, see [`tls.createServer()`][] \",\n                          \"name\": \"SNICallback\",\n                          \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                        },\n                        {\n                          \"textRaw\": \"`session` {Buffer} An optional `Buffer` instance containing a TLS session. \",\n                          \"name\": \"session\",\n                          \"type\": \"Buffer\",\n                          \"desc\": \"An optional `Buffer` instance containing a TLS session.\"\n                        },\n                        {\n                          \"textRaw\": \"`requestOCSP` {boolean} If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication \",\n                          \"name\": \"requestOCSP\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"socket\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.address()\",\n              \"type\": \"method\",\n              \"name\": \"address\",\n              \"desc\": \"<p>Returns the bound address, the address family name, and port of the\\nunderlying socket as reported by the operating system. Returns an\\nobject with three properties, e.g.,\\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.getCipher()\",\n              \"type\": \"method\",\n              \"name\": \"getCipher\",\n              \"desc\": \"<p>Returns an object representing the cipher name and the SSL/TLS protocol version\\nthat first defined the cipher.</p>\\n<p>For example: <code>{ name: &#39;AES256-SHA&#39;, version: &#39;TLSv1/SSLv3&#39; }</code></p>\\n<p>See <code>SSL_CIPHER_get_name()</code> and <code>SSL_CIPHER_get_version()</code> in\\n<a href=\\\"https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html\\\">https://www.openssl.org/docs/manmaster/ssl/SSL_CIPHER_get_name.html</a> for more\\ninformation.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.getEphemeralKeyInfo()\",\n              \"type\": \"method\",\n              \"name\": \"getEphemeralKeyInfo\",\n              \"desc\": \"<p>Returns an object representing the type, name, and size of parameter of\\nan ephemeral key exchange in [Perfect Forward Secrecy][] on a client\\nconnection. It returns an empty object when the key exchange is not\\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\\nif called on a server socket. The supported types are <code>&#39;DH&#39;</code> and <code>&#39;ECDH&#39;</code>. The\\n<code>name</code> property is available only when type is &#39;ECDH&#39;.</p>\\n<p>For Example: <code>{ type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }</code></p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.getPeerCertificate([ detailed ])\",\n              \"type\": \"method\",\n              \"name\": \"getPeerCertificate\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`detailed` {boolean} Specify `true` to request that the full certificate chain with the `issuer` property be returned; `false` to return only the top certificate without the `issuer` property. \",\n                      \"name\": \"detailed\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"Specify `true` to request that the full certificate chain with the `issuer` property be returned; `false` to return only the top certificate without the `issuer` property.\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"detailed\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns an object representing the peer&#39;s certificate. The returned object has\\nsome properties corresponding to the fields of the certificate.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-text\\\">{ subject:\\n   { C: &#39;UK&#39;,\\n     ST: &#39;Acknack Ltd&#39;,\\n     L: &#39;Rhys Jones&#39;,\\n     O: &#39;node.js&#39;,\\n     OU: &#39;Test TLS Certificate&#39;,\\n     CN: &#39;localhost&#39; },\\n  issuerInfo:\\n   { C: &#39;UK&#39;,\\n     ST: &#39;Acknack Ltd&#39;,\\n     L: &#39;Rhys Jones&#39;,\\n     O: &#39;node.js&#39;,\\n     OU: &#39;Test TLS Certificate&#39;,\\n     CN: &#39;localhost&#39; },\\n  issuer:\\n   { ... another certificate ... },\\n  raw: &lt; RAW DER buffer &gt;,\\n  valid_from: &#39;Nov 11 09:52:22 2009 GMT&#39;,\\n  valid_to: &#39;Nov  6 09:52:22 2029 GMT&#39;,\\n  fingerprint: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&#39;,\\n  serialNumber: &#39;B9B0D332A1AA5635&#39; }\\n</code></pre>\\n<p>If the peer does not provide a certificate, <code>null</code> or an empty object will be\\nreturned.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.getProtocol()\",\n              \"type\": \"method\",\n              \"name\": \"getProtocol\",\n              \"desc\": \"<p>Returns a string containing the negotiated SSL/TLS protocol version of the\\ncurrent connection. The value <code>&#39;unknown&#39;</code> will be returned for connected\\nsockets that have not completed the handshaking process. The value <code>null</code> will\\nbe returned for server sockets or disconnected client sockets.</p>\\n<p>Example responses include:</p>\\n<ul>\\n<li><code>SSLv3</code></li>\\n<li><code>TLSv1</code></li>\\n<li><code>TLSv1.1</code></li>\\n<li><code>TLSv1.2</code></li>\\n<li><code>unknown</code></li>\\n</ul>\\n<p>See <a href=\\\"https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html\\\">https://www.openssl.org/docs/manmaster/ssl/SSL_get_version.html</a> for more\\ninformation.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.getSession()\",\n              \"type\": \"method\",\n              \"name\": \"getSession\",\n              \"desc\": \"<p>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was\\nnegotiated. Can be used to speed up handshake establishment when reconnecting\\nto the server.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.getTLSTicket()\",\n              \"type\": \"method\",\n              \"name\": \"getTLSTicket\",\n              \"desc\": \"<p>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p>\\n<p><em>Note</em>: This only works with client TLS sockets. Useful only for debugging, for\\nsession reuse provide <code>session</code> option to [<code>tls.connect()</code>][].</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"tlsSocket.renegotiate(options, callback)\",\n              \"type\": \"method\",\n              \"name\": \"renegotiate\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`rejectUnauthorized` {boolean} \",\n                          \"name\": \"rejectUnauthorized\",\n                          \"type\": \"boolean\"\n                        },\n                        {\n                          \"textRaw\": \"`requestCert` \",\n                          \"name\": \"requestCert\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\"\n                    },\n                    {\n                      \"textRaw\": \"`callback` {Function} A function that will be called when the renegotiation request has been completed. \",\n                      \"name\": \"callback\",\n                      \"type\": \"Function\",\n                      \"desc\": \"A function that will be called when the renegotiation request has been completed.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\\nUpon completion, the <code>callback</code> function will be passed a single argument\\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>\\n<p><em>Note</em>: This method can be used to request a peer&#39;s certificate after the\\nsecure connection has been established.</p>\\n<p><em>Note</em>: When running as the server, the socket will be destroyed with an error\\nafter <code>handshakeTimeout</code> timeout.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.setMaxSendFragment(size)\",\n              \"type\": \"method\",\n              \"name\": \"setMaxSendFragment\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`size` {number} The maximum TLS fragment size. Defaults to `16384`. The maximum value is `16384`. \",\n                      \"name\": \"size\",\n                      \"type\": \"number\",\n                      \"desc\": \"The maximum TLS fragment size. Defaults to `16384`. The maximum value is `16384`.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"size\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>\\n<p>Smaller fragment sizes decrease the buffering latency on the client: larger\\nfragments are buffered by the TLS layer until the entire fragment is received\\nand its integrity is verified; large fragments can span multiple roundtrips\\nand their processing can be delayed due to packet loss or reordering. However,\\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\\ndecrease overall server throughput.</p>\\n\"\n            }\n          ],\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'OCSPResponse'\",\n              \"type\": \"event\",\n              \"name\": \"OCSPResponse\",\n              \"desc\": \"<p>The <code>&#39;OCSPResponse&#39;</code> event is emitted if the <code>requestOCSP</code> option was set\\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\\nThe listener callback is passed a single argument when called:</p>\\n<ul>\\n<li><code>response</code> {Buffer} The server&#39;s OCSP response</li>\\n</ul>\\n<p>Typically, the <code>response</code> is a digitally signed object from the server&#39;s CA that\\ncontains information about server&#39;s certificate revocation status.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'secureConnect'\",\n              \"type\": \"event\",\n              \"name\": \"secureConnect\",\n              \"desc\": \"<p>The <code>&#39;secureConnect&#39;</code> event is emitted after the handshaking process for a new\\nconnection has successfully completed. The listener callback will be called\\nregardless of whether or not the server&#39;s certificate has been authorized. It\\nis the client&#39;s responsibility to check the <code>tlsSocket.authorized</code> property to\\ndetermine if the server certificate was signed by one of the specified CAs. If\\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\\n<code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used,\\nthe <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be\\nchecked to determine the negotiated protocol.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"tlsSocket.authorized\",\n              \"name\": \"authorized\",\n              \"desc\": \"<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.authorizationError\",\n              \"name\": \"authorizationError\",\n              \"desc\": \"<p>Returns the reason why the peer&#39;s certificate was not been verified. This\\nproperty is set only when <code>tlsSocket.authorized === false</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.encrypted\",\n              \"name\": \"encrypted\",\n              \"desc\": \"<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\\n<code>net.Socket</code> instances.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.localAddress\",\n              \"name\": \"localAddress\",\n              \"desc\": \"<p>Returns the string representation of the local IP address.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.localPort\",\n              \"name\": \"localPort\",\n              \"desc\": \"<p>Returns the numeric representation of the local port.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.remoteAddress\",\n              \"name\": \"remoteAddress\",\n              \"desc\": \"<p>Returns the string representation of the remote IP address. For example,\\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.remoteFamily\",\n              \"name\": \"remoteFamily\",\n              \"desc\": \"<p>Returns the string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"tlsSocket.remotePort\",\n              \"name\": \"remotePort\",\n              \"desc\": \"<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"tls.connect(options[, callback])\",\n          \"type\": \"method\",\n          \"name\": \"connect\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`host` {string} Host the client should connect to. \",\n                      \"name\": \"host\",\n                      \"type\": \"string\",\n                      \"desc\": \"Host the client should connect to.\"\n                    },\n                    {\n                      \"textRaw\": \"`port` {number} Port the client should connect to. \",\n                      \"name\": \"port\",\n                      \"type\": \"number\",\n                      \"desc\": \"Port the client should connect to.\"\n                    },\n                    {\n                      \"textRaw\": \"`socket` {net.Socket} Establish secure connection on a given socket rather than creating a new socket. If this option is specified, `host` and `port` are ignored. \",\n                      \"name\": \"socket\",\n                      \"type\": \"net.Socket\",\n                      \"desc\": \"Establish secure connection on a given socket rather than creating a new socket. If this option is specified, `host` and `port` are ignored.\"\n                    },\n                    {\n                      \"textRaw\": \"`path` {string} Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored. \",\n                      \"name\": \"path\",\n                      \"type\": \"string\",\n                      \"desc\": \"Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\"\n                    },\n                    {\n                      \"textRaw\": \"`pfx` {string|Buffer} A string or `Buffer` containing the private key, certificate, and CA certs of the client in PFX or PKCS12 format. \",\n                      \"name\": \"pfx\",\n                      \"type\": \"string|Buffer\",\n                      \"desc\": \"A string or `Buffer` containing the private key, certificate, and CA certs of the client in PFX or PKCS12 format.\"\n                    },\n                    {\n                      \"textRaw\": \"`key` {string|stringp[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s containing the private key of the client in PEM format. \",\n                      \"name\": \"key\",\n                      \"type\": \"string|stringp[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s containing the private key of the client in PEM format.\"\n                    },\n                    {\n                      \"textRaw\": \"`passphrase` {string} A string containing the passphrase for the private key or pfx. \",\n                      \"name\": \"passphrase\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing the passphrase for the private key or pfx.\"\n                    },\n                    {\n                      \"textRaw\": \"`cert` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the client in PEM format. \",\n                      \"name\": \"cert\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the client in PEM format.\"\n                    },\n                    {\n                      \"textRaw\": \"`ca` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections. \",\n                      \"name\": \"ca\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections.\"\n                    },\n                    {\n                      \"textRaw\": \"`ciphers` {string} A string describing the ciphers to use or exclude, separated by `:`. Uses the same default cipher suite as [`tls.createServer()`][]. \",\n                      \"name\": \"ciphers\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string describing the ciphers to use or exclude, separated by `:`. Uses the same default cipher suite as [`tls.createServer()`][].\"\n                    },\n                    {\n                      \"textRaw\": \"`rejectUnauthorized` {boolean} If `true`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. Defaults to `true`. \",\n                      \"name\": \"rejectUnauthorized\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. Defaults to `true`.\"\n                    },\n                    {\n                      \"textRaw\": \"`NPNProtocols` {string[]|Buffer[]} An array of strings or `Buffer`s containing supported NPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`. \",\n                      \"name\": \"NPNProtocols\",\n                      \"type\": \"string[]|Buffer[]\",\n                      \"desc\": \"An array of strings or `Buffer`s containing supported NPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`.\"\n                    },\n                    {\n                      \"textRaw\": \"`ALPNProtocols`: {string[]|Buffer[]} An array of strings or `Buffer`s containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler: `['hello', 'world']`.) \",\n                      \"name\": \"ALPNProtocols\",\n                      \"type\": \"string[]|Buffer[]\",\n                      \"desc\": \"An array of strings or `Buffer`s containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler: `['hello', 'world']`.)\"\n                    },\n                    {\n                      \"textRaw\": \"`servername`: {string} Server name for the SNI (Server Name Indication) TLS extension. \",\n                      \"name\": \"servername\",\n                      \"type\": \"string\",\n                      \"desc\": \"Server name for the SNI (Server Name Indication) TLS extension.\"\n                    },\n                    {\n                      \"textRaw\": \"`checkServerIdentity(servername, cert)` {Function} A callback function to be used when checking the server's hostname against the certificate. This should throw an error if verification fails. The method should return `undefined` if the `servername` and `cert` are verified. \",\n                      \"name\": \"checkServerIdentity(servername,\",\n                      \"desc\": \"cert)` {Function} A callback function to be used when checking the server's hostname against the certificate. This should throw an error if verification fails. The method should return `undefined` if the `servername` and `cert` are verified.\"\n                    },\n                    {\n                      \"textRaw\": \"`secureProtocol` {string} The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][]. \",\n                      \"name\": \"secureProtocol\",\n                      \"type\": \"string\",\n                      \"desc\": \"The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][].\"\n                    },\n                    {\n                      \"textRaw\": \"`secureContext` {object} An optional TLS context object as returned by from `tls.createSecureContext( ... )`. It can be used for caching client certificates, keys, and CA certificates. \",\n                      \"name\": \"secureContext\",\n                      \"type\": \"object\",\n                      \"desc\": \"An optional TLS context object as returned by from `tls.createSecureContext( ... )`. It can be used for caching client certificates, keys, and CA certificates.\"\n                    },\n                    {\n                      \"textRaw\": \"`session` {Buffer} A `Buffer` instance, containing TLS session. \",\n                      \"name\": \"session\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"A `Buffer` instance, containing TLS session.\"\n                    },\n                    {\n                      \"textRaw\": \"`minDHSize` {number} Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown. Defaults to `1024`. \",\n                      \"name\": \"minDHSize\",\n                      \"type\": \"number\",\n                      \"desc\": \"Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown. Defaults to `1024`.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\"\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Creates a new client connection to the given <code>options.port</code> and <code>options.host</code>\\nIf <code>options.host</code> is omitted, it defaults to <code>localhost</code>.</p>\\n<p>The <code>callback</code> function, if specified, will be added as a listener for the\\n[<code>&#39;secureConnect&#39;</code>][] event.</p>\\n<p><code>tls.connect()</code> returns a [<code>tls.TLSSocket</code>][] object.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"tls.connect(port[, host][, options][, callback])\",\n          \"type\": \"method\",\n          \"name\": \"connect\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`port` {number} \",\n                  \"name\": \"port\",\n                  \"type\": \"number\"\n                },\n                {\n                  \"textRaw\": \"`host` {string} \",\n                  \"name\": \"host\",\n                  \"type\": \"string\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`host` {string} Host the client should connect to. \",\n                      \"name\": \"host\",\n                      \"type\": \"string\",\n                      \"desc\": \"Host the client should connect to.\"\n                    },\n                    {\n                      \"textRaw\": \"`port` {number} Port the client should connect to. \",\n                      \"name\": \"port\",\n                      \"type\": \"number\",\n                      \"desc\": \"Port the client should connect to.\"\n                    },\n                    {\n                      \"textRaw\": \"`socket` {net.Socket} Establish secure connection on a given socket rather than creating a new socket. If this option is specified, `host` and `port` are ignored. \",\n                      \"name\": \"socket\",\n                      \"type\": \"net.Socket\",\n                      \"desc\": \"Establish secure connection on a given socket rather than creating a new socket. If this option is specified, `host` and `port` are ignored.\"\n                    },\n                    {\n                      \"textRaw\": \"`path` {string} Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored. \",\n                      \"name\": \"path\",\n                      \"type\": \"string\",\n                      \"desc\": \"Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\"\n                    },\n                    {\n                      \"textRaw\": \"`pfx` {string|Buffer} A string or `Buffer` containing the private key, certificate, and CA certs of the client in PFX or PKCS12 format. \",\n                      \"name\": \"pfx\",\n                      \"type\": \"string|Buffer\",\n                      \"desc\": \"A string or `Buffer` containing the private key, certificate, and CA certs of the client in PFX or PKCS12 format.\"\n                    },\n                    {\n                      \"textRaw\": \"`key` {string|stringp[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s containing the private key of the client in PEM format. \",\n                      \"name\": \"key\",\n                      \"type\": \"string|stringp[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s containing the private key of the client in PEM format.\"\n                    },\n                    {\n                      \"textRaw\": \"`passphrase` {string} A string containing the passphrase for the private key or pfx. \",\n                      \"name\": \"passphrase\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing the passphrase for the private key or pfx.\"\n                    },\n                    {\n                      \"textRaw\": \"`cert` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the client in PEM format. \",\n                      \"name\": \"cert\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the client in PEM format.\"\n                    },\n                    {\n                      \"textRaw\": \"`ca` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections. \",\n                      \"name\": \"ca\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections.\"\n                    },\n                    {\n                      \"textRaw\": \"`ciphers` {string} A string describing the ciphers to use or exclude, separated by `:`. Uses the same default cipher suite as [`tls.createServer()`][]. \",\n                      \"name\": \"ciphers\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string describing the ciphers to use or exclude, separated by `:`. Uses the same default cipher suite as [`tls.createServer()`][].\"\n                    },\n                    {\n                      \"textRaw\": \"`rejectUnauthorized` {boolean} If `true`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. Defaults to `true`. \",\n                      \"name\": \"rejectUnauthorized\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. Defaults to `true`.\"\n                    },\n                    {\n                      \"textRaw\": \"`NPNProtocols` {string[]|Buffer[]} An array of strings or `Buffer`s containing supported NPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`. \",\n                      \"name\": \"NPNProtocols\",\n                      \"type\": \"string[]|Buffer[]\",\n                      \"desc\": \"An array of strings or `Buffer`s containing supported NPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`.\"\n                    },\n                    {\n                      \"textRaw\": \"`ALPNProtocols`: {string[]|Buffer[]} An array of strings or `Buffer`s containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler: `['hello', 'world']`.) \",\n                      \"name\": \"ALPNProtocols\",\n                      \"type\": \"string[]|Buffer[]\",\n                      \"desc\": \"An array of strings or `Buffer`s containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler: `['hello', 'world']`.)\"\n                    },\n                    {\n                      \"textRaw\": \"`servername`: {string} Server name for the SNI (Server Name Indication) TLS extension. \",\n                      \"name\": \"servername\",\n                      \"type\": \"string\",\n                      \"desc\": \"Server name for the SNI (Server Name Indication) TLS extension.\"\n                    },\n                    {\n                      \"textRaw\": \"`checkServerIdentity(servername, cert)` {Function} A callback function to be used when checking the server's hostname against the certificate. This should throw an error if verification fails. The method should return `undefined` if the `servername` and `cert` are verified. \",\n                      \"name\": \"checkServerIdentity(servername,\",\n                      \"desc\": \"cert)` {Function} A callback function to be used when checking the server's hostname against the certificate. This should throw an error if verification fails. The method should return `undefined` if the `servername` and `cert` are verified.\"\n                    },\n                    {\n                      \"textRaw\": \"`secureProtocol` {string} The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][]. \",\n                      \"name\": \"secureProtocol\",\n                      \"type\": \"string\",\n                      \"desc\": \"The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][].\"\n                    },\n                    {\n                      \"textRaw\": \"`secureContext` {object} An optional TLS context object as returned by from `tls.createSecureContext( ... )`. It can be used for caching client certificates, keys, and CA certificates. \",\n                      \"name\": \"secureContext\",\n                      \"type\": \"object\",\n                      \"desc\": \"An optional TLS context object as returned by from `tls.createSecureContext( ... )`. It can be used for caching client certificates, keys, and CA certificates.\"\n                    },\n                    {\n                      \"textRaw\": \"`session` {Buffer} A `Buffer` instance, containing TLS session. \",\n                      \"name\": \"session\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"A `Buffer` instance, containing TLS session.\"\n                    },\n                    {\n                      \"textRaw\": \"`minDHSize` {number} Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown. Defaults to `1024`. \",\n                      \"name\": \"minDHSize\",\n                      \"type\": \"number\",\n                      \"desc\": \"Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown. Defaults to `1024`.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"port\"\n                },\n                {\n                  \"name\": \"host\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Creates a new client connection to the given <code>port</code> and <code>host</code> or\\n<code>options.port</code> and <code>options.host</code>. (If <code>host</code> is omitted, it defaults to\\n<code>localhost</code>.)</p>\\n<p>The <code>callback</code> function, if specified, will be added as a listener for the\\n[<code>&#39;secureConnect&#39;</code>][] event.</p>\\n<p><code>tls.connect()</code> returns a [<code>tls.TLSSocket</code>][] object.</p>\\n<p>The following implements a simple &quot;echo server&quot; example:</p>\\n<pre><code class=\\\"lang-js\\\">const tls = require(&#39;tls&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  // Necessary only if using the client certificate authentication\\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\\n\\n  // Necessary only if the server uses the self-signed certificate\\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\\n};\\n\\nconst socket = tls.connect(8000, options, () =&gt; {\\n  console.log(&#39;client connected&#39;,\\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\\n  process.stdin.pipe(socket);\\n  process.stdin.resume();\\n});\\nsocket.setEncoding(&#39;utf8&#39;);\\nsocket.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data);\\n});\\nsocket.on(&#39;end&#39;, () =&gt; {\\n  server.close();\\n});\\n</code></pre>\\n<p>Or</p>\\n<pre><code class=\\\"lang-js\\\">const tls = require(&#39;tls&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\\n};\\n\\nconst socket = tls.connect(8000, options, () =&gt; {\\n  console.log(&#39;client connected&#39;,\\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\\n  process.stdin.pipe(socket);\\n  process.stdin.resume();\\n});\\nsocket.setEncoding(&#39;utf8&#39;);\\nsocket.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(data);\\n});\\nsocket.on(&#39;end&#39;, () =&gt; {\\n  server.close();\\n});\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"tls.createSecureContext(options)\",\n          \"type\": \"method\",\n          \"name\": \"createSecureContext\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`pfx` {string|Buffer} A string or `Buffer` holding the PFX or PKCS12 encoded private key, certificate, and CA certificates. \",\n                      \"name\": \"pfx\",\n                      \"type\": \"string|Buffer\",\n                      \"desc\": \"A string or `Buffer` holding the PFX or PKCS12 encoded private key, certificate, and CA certificates.\"\n                    },\n                    {\n                      \"textRaw\": \"`key` {string|string[]|Buffer|Object[]} The private key of the server in PEM format. To support multiple keys using different algorithms, an array can be provided either as an array of key strings or as an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is *required* for ciphers that make use of private keys. \",\n                      \"name\": \"key\",\n                      \"type\": \"string|string[]|Buffer|Object[]\",\n                      \"desc\": \"The private key of the server in PEM format. To support multiple keys using different algorithms, an array can be provided either as an array of key strings or as an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is *required* for ciphers that make use of private keys.\"\n                    },\n                    {\n                      \"textRaw\": \"`passphrase` {string} A string containing the passphrase for the private key or pfx. \",\n                      \"name\": \"passphrase\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing the passphrase for the private key or pfx.\"\n                    },\n                    {\n                      \"textRaw\": \"`cert` {string} A string containing the PEM encoded certificate \",\n                      \"name\": \"cert\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing the PEM encoded certificate\"\n                    },\n                    {\n                      \"textRaw\": \"`ca`{string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If omitted, several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections. \",\n                      \"name\": \"ca\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If omitted, several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections.\"\n                    },\n                    {\n                      \"textRaw\": \"`crl` {string|string[]} Either a string or array of strings of PEM encoded CRLs (Certificate Revocation List). \",\n                      \"name\": \"crl\",\n                      \"type\": \"string|string[]\",\n                      \"desc\": \"Either a string or array of strings of PEM encoded CRLs (Certificate Revocation List).\"\n                    },\n                    {\n                      \"textRaw\": \"`ciphers` {string} A string describing the ciphers to use or exclude. Consult <https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT> for details on the format. \",\n                      \"name\": \"ciphers\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string describing the ciphers to use or exclude. Consult <https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT> for details on the format.\"\n                    },\n                    {\n                      \"textRaw\": \"`honorCipherOrder` {boolean} If `true`, when a cipher is being selected, the server's preferences will be used instead of the client preferences. \",\n                      \"name\": \"honorCipherOrder\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, when a cipher is being selected, the server's preferences will be used instead of the client preferences.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>tls.createSecureContext()</code> method creates a credentials object.</p>\\n<p>If the &#39;ca&#39; option is not given, then Node.js will use the default\\npublicly trusted list of CAs as given in\\n<a href=\\\"http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\\\">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"tls.createServer(options[, secureConnectionListener])\",\n          \"type\": \"method\",\n          \"name\": \"createServer\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`pfx` {string|Buffer} A string or `Buffer` containing the private key, certificate and CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with the `key`, `cert`, and `ca` options.) \",\n                      \"name\": \"pfx\",\n                      \"type\": \"string|Buffer\",\n                      \"desc\": \"A string or `Buffer` containing the private key, certificate and CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with the `key`, `cert`, and `ca` options.)\"\n                    },\n                    {\n                      \"textRaw\": \"`key` {string|string[]|Buffer|Object[]} The private key of the server in PEM format. To support multiple keys using different algorithms an array can be provided either as a plain array of key strings or an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is *required* for ciphers that make use of private keys. \",\n                      \"name\": \"key\",\n                      \"type\": \"string|string[]|Buffer|Object[]\",\n                      \"desc\": \"The private key of the server in PEM format. To support multiple keys using different algorithms an array can be provided either as a plain array of key strings or an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is *required* for ciphers that make use of private keys.\"\n                    },\n                    {\n                      \"textRaw\": \"`passphrase` {string} A string containing the passphrase for the private key or pfx. \",\n                      \"name\": \"passphrase\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing the passphrase for the private key or pfx.\"\n                    },\n                    {\n                      \"textRaw\": \"`cert` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the server in PEM format. (Required) \",\n                      \"name\": \"cert\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s containing the certificate key of the server in PEM format. (Required)\"\n                    },\n                    {\n                      \"textRaw\": \"`ca` {string|string[]|Buffer|Buffer[]} A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections. \",\n                      \"name\": \"ca\",\n                      \"type\": \"string|string[]|Buffer|Buffer[]\",\n                      \"desc\": \"A string, `Buffer`, array of strings, or array of `Buffer`s of trusted certificates in PEM format. If this is omitted several well known \\\"root\\\" CAs (like VeriSign) will be used. These are used to authorize connections.\"\n                    },\n                    {\n                      \"textRaw\": \"`crl` {string|string[]} Either a string or array of strings of PEM encoded CRLs (Certificate Revocation List). \",\n                      \"name\": \"crl\",\n                      \"type\": \"string|string[]\",\n                      \"desc\": \"Either a string or array of strings of PEM encoded CRLs (Certificate Revocation List).\"\n                    },\n                    {\n                      \"textRaw\": \"`ciphers` {string} A string describing the ciphers to use or exclude, separated by `:`. \",\n                      \"name\": \"ciphers\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string describing the ciphers to use or exclude, separated by `:`.\"\n                    },\n                    {\n                      \"textRaw\": \"`ecdhCurve` {string} A string describing a named curve to use for ECDH key agreement or `false` to disable ECDH. Defaults to `prime256v1` (NIST P-256). Use [`crypto.getCurves()`][] to obtain a list of available curve names. On recent releases, `openssl ecparam -list_curves` will also display the name and description of each available elliptic curve. \",\n                      \"name\": \"ecdhCurve\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string describing a named curve to use for ECDH key agreement or `false` to disable ECDH. Defaults to `prime256v1` (NIST P-256). Use [`crypto.getCurves()`][] to obtain a list of available curve names. On recent releases, `openssl ecparam -list_curves` will also display the name and description of each available elliptic curve.\"\n                    },\n                    {\n                      \"textRaw\": \"`dhparam` {string|Buffer} A string or `Buffer` containing Diffie Hellman parameters, required for [Perfect Forward Secrecy][]. Use `openssl dhparam` to create the parameters. The key length must be greater than or equal to 1024 bits, otherwise an error will be thrown. It is strongly recommended to use 2048 bits or larger for stronger security. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available. \",\n                      \"name\": \"dhparam\",\n                      \"type\": \"string|Buffer\",\n                      \"desc\": \"A string or `Buffer` containing Diffie Hellman parameters, required for [Perfect Forward Secrecy][]. Use `openssl dhparam` to create the parameters. The key length must be greater than or equal to 1024 bits, otherwise an error will be thrown. It is strongly recommended to use 2048 bits or larger for stronger security. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available.\"\n                    },\n                    {\n                      \"textRaw\": \"`handshakeTimeout` {number} Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. Defaults to `120` seconds. A `'clientError'` is emitted on the `tls.Server` object whenever a handshake times out. \",\n                      \"name\": \"handshakeTimeout\",\n                      \"type\": \"number\",\n                      \"desc\": \"Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. Defaults to `120` seconds. A `'clientError'` is emitted on the `tls.Server` object whenever a handshake times out.\"\n                    },\n                    {\n                      \"textRaw\": \"`honorCipherOrder` {boolean} When choosing a cipher, use the server's preferences instead of the client preferences. Defaults to `true`. \",\n                      \"name\": \"honorCipherOrder\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"When choosing a cipher, use the server's preferences instead of the client preferences. Defaults to `true`.\"\n                    },\n                    {\n                      \"textRaw\": \"`requestCert` {boolean} If `true` the server will request a certificate from clients that connect and attempt to verify that certificate. Defaults to `false`. \",\n                      \"name\": \"requestCert\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true` the server will request a certificate from clients that connect and attempt to verify that certificate. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`rejectUnauthorized` {boolean} If `true` the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if `requestCert` is `true`. Defaults to `false`. \",\n                      \"name\": \"rejectUnauthorized\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true` the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if `requestCert` is `true`. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`NPNProtocols` {string[]|Buffer} An array of strings or a `Buffer` naming possible NPN protocols. (Protocols should be ordered by their priority.) \",\n                      \"name\": \"NPNProtocols\",\n                      \"type\": \"string[]|Buffer\",\n                      \"desc\": \"An array of strings or a `Buffer` naming possible NPN protocols. (Protocols should be ordered by their priority.)\"\n                    },\n                    {\n                      \"textRaw\": \"`ALPNProtocols` {string[]|Buffer} An array of strings or a `Buffer` naming possible ALPN protocols. (Protocols should be ordered by their priority.) When the server receives both NPN and ALPN extensions from the client, ALPN takes precedence over NPN and the server does not send an NPN extension to the client. \",\n                      \"name\": \"ALPNProtocols\",\n                      \"type\": \"string[]|Buffer\",\n                      \"desc\": \"An array of strings or a `Buffer` naming possible ALPN protocols. (Protocols should be ordered by their priority.) When the server receives both NPN and ALPN extensions from the client, ALPN takes precedence over NPN and the server does not send an NPN extension to the client.\"\n                    },\n                    {\n                      \"textRaw\": \"`SNICallback(servername, cb)` {Function} A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: `servername` and `cb`. `SNICallback` should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance. (`tls.createSecureContext(...)` can be used to get a proper SecureContext.) If `SNICallback` wasn't provided the default callback with high-level API will be used (see below). \",\n                      \"name\": \"SNICallback(servername,\",\n                      \"desc\": \"cb)` {Function} A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: `servername` and `cb`. `SNICallback` should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance. (`tls.createSecureContext(...)` can be used to get a proper SecureContext.) If `SNICallback` wasn't provided the default callback with high-level API will be used (see below).\"\n                    },\n                    {\n                      \"textRaw\": \"`sessionTimeout` {number} An integer specifying the number of seconds after which the TLS session identifiers and TLS session tickets created by the server will time out. See [SSL_CTX_set_timeout] for more details. \",\n                      \"name\": \"sessionTimeout\",\n                      \"type\": \"number\",\n                      \"desc\": \"An integer specifying the number of seconds after which the TLS session identifiers and TLS session tickets created by the server will time out. See [SSL_CTX_set_timeout] for more details.\"\n                    },\n                    {\n                      \"textRaw\": \"`ticketKeys`: A 48-byte `Buffer` instance consisting of a 16-byte prefix, a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS session tickets on multiple instances of the TLS server. *Note* that this is automatically shared between `cluster` module workers. \",\n                      \"name\": \"ticketKeys\",\n                      \"desc\": \"A 48-byte `Buffer` instance consisting of a 16-byte prefix, a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS session tickets on multiple instances of the TLS server. *Note* that this is automatically shared between `cluster` module workers.\"\n                    },\n                    {\n                      \"textRaw\": \"`sessionIdContext` {string} A string containing an opaque identifier for session resumption. If `requestCert` is `true`, the default is a 128 bit truncated SHA1 hash value generated from the command-line. Otherwise, a default is not provided. \",\n                      \"name\": \"sessionIdContext\",\n                      \"type\": \"string\",\n                      \"desc\": \"A string containing an opaque identifier for session resumption. If `requestCert` is `true`, the default is a 128 bit truncated SHA1 hash value generated from the command-line. Otherwise, a default is not provided.\"\n                    },\n                    {\n                      \"textRaw\": \"`secureProtocol` {string} The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][]. \",\n                      \"name\": \"secureProtocol\",\n                      \"type\": \"string\",\n                      \"desc\": \"The SSL method to use, e.g., `SSLv3_method` to force SSL version 3. The possible values depend on the version of OpenSSL installed in the environment and are defined in the constant [SSL_METHODS][].\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\"\n                },\n                {\n                  \"textRaw\": \"`secureConnectionListener` {Function} \",\n                  \"name\": \"secureConnectionListener\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\"\n                },\n                {\n                  \"name\": \"secureConnectionListener\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Creates a new [tls.Server][].  The <code>secureConnectionListener</code>, if provided, is\\nautomatically set as a listener for the [<code>&#39;secureConnection&#39;</code>][] event.</p>\\n<p>For the <code>ciphers</code> option, the default cipher suite is:</p>\\n<pre><code class=\\\"lang-text\\\">ECDHE-RSA-AES128-GCM-SHA256:\\nECDHE-ECDSA-AES128-GCM-SHA256:\\nECDHE-RSA-AES256-GCM-SHA384:\\nECDHE-ECDSA-AES256-GCM-SHA384:\\nDHE-RSA-AES128-GCM-SHA256:\\nECDHE-RSA-AES128-SHA256:\\nDHE-RSA-AES128-SHA256:\\nECDHE-RSA-AES256-SHA384:\\nDHE-RSA-AES256-SHA384:\\nECDHE-RSA-AES256-SHA256:\\nDHE-RSA-AES256-SHA256:\\nHIGH:\\n!aNULL:\\n!eNULL:\\n!EXPORT:\\n!DES:\\n!RC4:\\n!MD5:\\n!PSK:\\n!SRP:\\n!CAMELLIA\\n</code></pre>\\n<p>The default cipher suite prefers GCM ciphers for [Chrome&#39;s &#39;modern\\ncryptography&#39; setting] and also prefers ECDHE and DHE ciphers for Perfect\\nForward Secrecy, while offering <em>some</em> backward compatibility.</p>\\n<p>128 bit AES is preferred over 192 and 256 bit AES in light of [specific\\nattacks affecting larger AES key sizes].</p>\\n<p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers\\n(like Internet Explorer 6) cannot complete the handshaking process with\\nthe default configuration. If these clients <em>must</em> be supported, the\\n[TLS recommendations] may offer a compatible cipher suite. For more details\\non the format, see the [OpenSSL cipher list format documentation].</p>\\n<p>The following illustrates a simple echo server:</p>\\n<pre><code class=\\\"lang-js\\\">const tls = require(&#39;tls&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\\n\\n  // This is necessary only if using the client certificate authentication.\\n  requestCert: true,\\n\\n  // This is necessary only if the client uses the self-signed certificate.\\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\\n};\\n\\nconst server = tls.createServer(options, (socket) =&gt; {\\n  console.log(&#39;server connected&#39;,\\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\\n  socket.write(&#39;welcome!\\\\n&#39;);\\n  socket.setEncoding(&#39;utf8&#39;);\\n  socket.pipe(socket);\\n});\\nserver.listen(8000, () =&gt; {\\n  console.log(&#39;server bound&#39;);\\n});\\n</code></pre>\\n<p>Or</p>\\n<pre><code class=\\\"lang-js\\\">const tls = require(&#39;tls&#39;);\\nconst fs = require(&#39;fs&#39;);\\n\\nconst options = {\\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\\n\\n  // This is necessary only if using the client certificate authentication.\\n  requestCert: true,\\n\\n};\\n\\nconst server = tls.createServer(options, (socket) =&gt; {\\n  console.log(&#39;server connected&#39;,\\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\\n  socket.write(&#39;welcome!\\\\n&#39;);\\n  socket.setEncoding(&#39;utf8&#39;);\\n  socket.pipe(socket);\\n});\\nserver.listen(8000, () =&gt; {\\n  console.log(&#39;server bound&#39;);\\n});\\n</code></pre>\\n<p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p>\\n<pre><code>openssl s_client -connect 127.0.0.1:8000\\n</code></pre>\"\n        },\n        {\n          \"textRaw\": \"tls.getCiphers()\",\n          \"type\": \"method\",\n          \"name\": \"getCiphers\",\n          \"desc\": \"<p>Returns an array with the names of the supported SSL ciphers.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(tls.getCiphers()); // [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])\",\n          \"type\": \"method\",\n          \"name\": \"createSecurePair\",\n          \"stability\": 0,\n          \"stabilityText\": \"Deprecated: Use [`tls.TLSSocket`][] instead.\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`context` {Object} A secure context object as returned by `tls.createSecureContext()` \",\n                  \"name\": \"context\",\n                  \"type\": \"Object\",\n                  \"desc\": \"A secure context object as returned by `tls.createSecureContext()`\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`isServer` {boolean} `true` to specify that this TLS connection should be opened as a server. \",\n                  \"name\": \"isServer\",\n                  \"type\": \"boolean\",\n                  \"desc\": \"`true` to specify that this TLS connection should be opened as a server.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`requestCert` {boolean} `true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`. \",\n                  \"name\": \"requestCert\",\n                  \"type\": \"boolean\",\n                  \"desc\": \"`true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`rejectUnauthorized` {boolean} `true` to specify whether a server should automatically reject clients with invalid certificates. Only applies when `isServer` is `true`. \",\n                  \"name\": \"rejectUnauthorized\",\n                  \"type\": \"boolean\",\n                  \"desc\": \"`true` to specify whether a server should automatically reject clients with invalid certificates. Only applies when `isServer` is `true`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`secureContext`: An optional TLS context object from  [`tls.createSecureContext()`][] \",\n                      \"name\": \"secureContext\",\n                      \"desc\": \"An optional TLS context object from  [`tls.createSecureContext()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`isServer`: If `true` the TLS socket will be instantiated in server-mode. Defaults to `false`. \",\n                      \"name\": \"isServer\",\n                      \"desc\": \"If `true` the TLS socket will be instantiated in server-mode. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`server` {net.Server} An optional [`net.Server`][] instance \",\n                      \"name\": \"server\",\n                      \"type\": \"net.Server\",\n                      \"desc\": \"An optional [`net.Server`][] instance\"\n                    },\n                    {\n                      \"textRaw\": \"`requestCert`: Optional, see [`tls.createServer()`][] \",\n                      \"name\": \"requestCert\",\n                      \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`rejectUnauthorized`: Optional, see [`tls.createServer()`][] \",\n                      \"name\": \"rejectUnauthorized\",\n                      \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`NPNProtocols`: Optional, see [`tls.createServer()`][] \",\n                      \"name\": \"NPNProtocols\",\n                      \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`ALPNProtocols`: Optional, see [`tls.createServer()`][] \",\n                      \"name\": \"ALPNProtocols\",\n                      \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`SNICallback`: Optional, see [`tls.createServer()`][] \",\n                      \"name\": \"SNICallback\",\n                      \"desc\": \"Optional, see [`tls.createServer()`][]\"\n                    },\n                    {\n                      \"textRaw\": \"`session` {Buffer} An optional `Buffer` instance containing a TLS session. \",\n                      \"name\": \"session\",\n                      \"type\": \"Buffer\",\n                      \"desc\": \"An optional `Buffer` instance containing a TLS session.\"\n                    },\n                    {\n                      \"textRaw\": \"`requestOCSP` {boolean} If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication \",\n                      \"name\": \"requestOCSP\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"context\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"isServer\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"requestCert\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"rejectUnauthorized\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Creates a new secure pair object with two streams, one of which reads and writes\\nthe encrypted data and the other of which reads and writes the cleartext data.\\nGenerally, the encrypted stream is piped to/from an incoming encrypted data\\nstream and the cleartext one is used as a replacement for the initial encrypted\\nstream.</p>\\n<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and\\n<code>encrypted</code> stream properties.</p>\\n<p><em>Note</em>: <code>cleartext</code> has the same API as [<code>tls.TLSSocket</code>][].</p>\\n<p><em>Note</em>: The <code>tls.createSecurePair()</code> method is now deprecated in favor of\\n<code>tls.TLSSocket()</code>. For example, the code:</p>\\n<pre><code class=\\\"lang-js\\\">pair = tls.createSecurePair( ... );\\npair.encrypted.pipe(socket);\\nsocket.pipe(pair.encrypted);\\n</code></pre>\\n<p>can be replaced by:</p>\\n<pre><code class=\\\"lang-js\\\">secure_socket = tls.TLSSocket(socket, options);\\n</code></pre>\\n<p>where <code>secure_socket</code> has the same API as <code>pair.cleartext</code>.</p>\\n<!-- [end-include:tls.md] -->\\n<!-- [start-include:tty.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"TLS (SSL)\"\n    },\n    {\n      \"textRaw\": \"TTY\",\n      \"name\": \"tty\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\\nIn most cases, it will not be necessary or possible to use this module directly.\\nHowever, it can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const tty = require(&#39;tty&#39;);\\n</code></pre>\\n<p>When Node.js detects that it is being run inside a text terminal (&quot;TTY&quot;)\\ncontext, the <code>process.stdin</code> will, by default, be initialized as an instance of\\n<code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by\\ndefault be instances of <code>tty.WriteStream</code>. The preferred method of determining\\nwhether Node.js is being run within a TTY context is to check that the value of\\nthe <code>process.stdout.isTTY</code> property is <code>true</code>:</p>\\n<pre><code>$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\\ntrue\\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\\nfalse\\n</code></pre><p>In most cases, there should be little to no reason for an application to\\ncreate instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.</p>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: tty.ReadStream\",\n          \"type\": \"class\",\n          \"name\": \"tty.ReadStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the\\nreadable side of a TTY. In normal circumstances <code>process.stdin</code> will be the\\nonly <code>tty.ReadStream</code> instance in a Node.js process and there should be no\\nreason to create additional instances.</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"readStream.isRaw\",\n              \"name\": \"isRaw\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a\\nraw device. Defaults to <code>false</code>.</p>\\n\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"readStream.setRawMode(mode)\",\n              \"type\": \"method\",\n              \"name\": \"setRawMode\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`mode` {boolean} If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw` property will be set to the resulting mode. \",\n                      \"name\": \"mode\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw` property will be set to the resulting mode.\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"mode\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Class: tty.WriteStream\",\n          \"type\": \"class\",\n          \"name\": \"tty.WriteStream\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the\\nwritable side of a TTY. In normal circumstances, <code>process.stdout</code> and\\n<code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a\\nNode.js process and there should be no reason to create additional instances.</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'resize'\",\n              \"type\": \"event\",\n              \"name\": \"resize\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;resize&#39;</code> event is emitted whenever either of the <code>writeStream.columns</code>\\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\\nlistener callback when called.</p>\\n<pre><code class=\\\"lang-js\\\">process.stdout.on(&#39;resize&#39;, () =&gt; {\\n  console.log(&#39;screen size has changed!&#39;);\\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            }\n          ],\n          \"properties\": [\n            {\n              \"textRaw\": \"writeStream.columns\",\n              \"name\": \"columns\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>A <code>number</code> specifying the number of columns the TTY currently has. This property\\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"writeStream.rows\",\n              \"name\": \"rows\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>A <code>number</code> specifying the number of rows the TTY currently has. This property\\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"tty.isatty(fd)\",\n          \"type\": \"method\",\n          \"name\": \"isatty\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`fd` {number} A numeric file descriptor \",\n                  \"name\": \"fd\",\n                  \"type\": \"number\",\n                  \"desc\": \"A numeric file descriptor\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"fd\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with\\na TTY and <code>false</code> if is not.</p>\\n<!-- [end-include:tty.md] -->\\n<!-- [start-include:url.md] -->\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"TTY\"\n    },\n    {\n      \"textRaw\": \"URL\",\n      \"name\": \"url\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be\\naccessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const url = require(&#39;url&#39;);\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"URL Strings and URL Objects\",\n          \"name\": \"url_strings_and_url_objects\",\n          \"desc\": \"<p>A URL string is a structured string containing multiple meaningful components.\\nWhen parsed, a URL object is returned containing properties for each of these\\ncomponents.</p>\\n<p>The following details each of the components of a parsed URL. The example\\n<code>&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</code> is used to\\nillustrate each.</p>\\n<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                                    href                                     \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 protocol \u2502\u2502   auth    \u2502      host       \u2502           path            \u2502 hash  \u2502\\n\u2502          \u2502\u2502           \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\\n\u2502          \u2502\u2502           \u2502 hostname \u2502 port \u2502 pathname \u2502     search     \u2502       \u2502\\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u251c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u2502 \u2502    query     \u2502       \u2502\\n&quot;  http:   // user:pass @ host.com : 8080   /p/a/t/h  ?  query=string   #hash &quot;\\n\u2502          \u2502\u2502           \u2502          \u2502      \u2502          \u2502 \u2502              \u2502       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n(all spaces in the &quot;&quot; line should be ignored -- they&#39;re purely for formatting)\\n</code></pre>\",\n          \"properties\": [\n            {\n              \"textRaw\": \"urlObject.href\",\n              \"name\": \"href\",\n              \"desc\": \"<p>The <code>href</code> property is the full URL string that was parsed with both the\\n<code>protocol</code> and <code>host</code> components converted to lower-case.</p>\\n<p>For example: <code>&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.protocol\",\n              \"name\": \"protocol\",\n              \"desc\": \"<p>The <code>protocol</code> property identifies the URL&#39;s lower-cased protocol scheme.</p>\\n<p>For example: <code>&#39;http:&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.slashes\",\n              \"name\": \"slashes\",\n              \"desc\": \"<p>The <code>slashes</code> property is a <code>boolean</code> with a value of <code>true</code> if two ASCII\\nforward-slash characters (<code>/</code>) are required following the colon in the\\n<code>protocol</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.host\",\n              \"name\": \"host\",\n              \"desc\": \"<p>The <code>host</code> property is the full lower-cased host portion of the URL, including\\nthe <code>port</code> if specified.</p>\\n<p>For example: <code>&#39;host.com:8080&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.auth\",\n              \"name\": \"auth\",\n              \"desc\": \"<p>The <code>auth</code> property is the username and password portion of the URL, also\\nreferred to as &quot;userinfo&quot;. This string subset follows the <code>protocol</code> and\\ndouble slashes (if present) and preceeds the <code>host</code> component, delimited by an\\nASCII &quot;at sign&quot; (<code>@</code>). The format of the string is <code>{username}[:{password}]</code>,\\nwith the <code>[:{password}]</code> portion being optional.</p>\\n<p>For example: <code>&#39;user:pass&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.hostname\",\n              \"name\": \"hostname\",\n              \"desc\": \"<p>The <code>hostname</code> property is the lower-cased host name portion of the <code>host</code>\\ncomponent <em>without</em> the <code>port</code> included.</p>\\n<p>For example: <code>&#39;host.com&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.port\",\n              \"name\": \"port\",\n              \"desc\": \"<p>The <code>port</code> property is the numeric port portion of the <code>host</code> component.</p>\\n<p>For example: <code>&#39;8080&#39;</code></p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.pathname\",\n              \"name\": \"pathname\",\n              \"desc\": \"<p>The <code>pathname</code> property consists of the entire path section of the URL. This\\nis everything following the <code>host</code> (including the <code>port</code>) and before the start\\nof the <code>query</code> or <code>hash</code> components, delimited by either the ASCII question\\nmark (<code>?</code>) or hash (<code>#</code>) characters.</p>\\n<p>For example <code>&#39;/p/a/t/h&#39;</code></p>\\n<p>No decoding of the path string is performed.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.search\",\n              \"name\": \"search\",\n              \"desc\": \"<p>The <code>search</code> property consists of the entire &quot;query string&quot; portion of the\\nURL, including the leading ASCII question mark (<code>?</code>) character.</p>\\n<p>For example: <code>&#39;?query=string&#39;</code></p>\\n<p>No decoding of the query string is performed.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.path\",\n              \"name\": \"path\",\n              \"desc\": \"<p>The <code>path</code> property is a concatenation of the <code>pathname</code> and <code>search</code>\\ncomponents.</p>\\n<p>For example: <code>&#39;/p/a/t/h?query=string&#39;</code></p>\\n<p>No decoding of the <code>path</code> is performed.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.query\",\n              \"name\": \"query\",\n              \"desc\": \"<p>The <code>query</code> property is either the &quot;params&quot; portion of the query string (\\neverything <em>except</em> the leading ASCII question mark (<code>?</code>), or an object\\nreturned by the [<code>querystring</code>][] module&#39;s <code>parse()</code> method:</p>\\n<p>For example: <code>&#39;query=string&#39;</code> or <code>{&#39;query&#39;: &#39;string&#39;}</code></p>\\n<p>If returned as a string, no decoding of the query string is performed. If\\nreturned as an object, both keys and values are decoded.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"urlObject.hash\",\n              \"name\": \"hash\",\n              \"desc\": \"<p>The <code>hash</code> property consists of the &quot;fragment&quot; portion of the URL including\\nthe leading ASCII hash (<code>#</code>) character.</p>\\n<p>For example: <code>&#39;#hash&#39;</code></p>\\n\"\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"URL Strings and URL Objects\"\n        },\n        {\n          \"textRaw\": \"Escaped Characters\",\n          \"name\": \"escaped_characters\",\n          \"desc\": \"<p>URLs are only permitted to contain a certain range of characters. Spaces (<code>&#39; &#39;</code>)\\nand the following characters will be automatically escaped in the\\nproperties of URL objects:</p>\\n<pre><code>&lt; &gt; &quot; ` \\\\r \\\\n \\\\t { } | \\\\ ^ &#39;\\n</code></pre><p>For example, the ASCII space character (<code>&#39; &#39;</code>) is encoded as <code>%20</code>. The ASCII\\nforward slash (<code>/</code>) character is encoded as <code>%3C</code>.</p>\\n<!-- [end-include:url.md] -->\\n<!-- [start-include:util.md] -->\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Escaped Characters\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"url.format(urlObject)\",\n          \"type\": \"method\",\n          \"name\": \"format\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`urlObject` {Object | String} A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`. \",\n                  \"name\": \"urlObject\",\n                  \"type\": \"Object | String\",\n                  \"desc\": \"A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"urlObject\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>url.format()</code> method returns a formatted URL string derived from\\n<code>urlObject</code>.</p>\\n<p>If <code>urlObject</code> is not an object or a string, <code>url.parse()</code> will throw a\\n[<code>TypeError</code>][].</p>\\n<p>The formatting process operates as follows:</p>\\n<ul>\\n<li>A new empty string <code>result</code> is created.</li>\\n<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>\\n<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an\\n[<code>Error</code>][] is thrown.</li>\\n<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII\\ncolon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>\\n<li>If either the <code>urlObject.slashes</code> property is true, <code>urlObject.protocol</code>\\nbegins with one of <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or <code>file</code>, or\\n<code>urlObject.protocol</code> is <code>undefined</code>, the literal string <code>//</code> will be appended\\nto <code>result</code>.</li>\\n<li>If the value of the <code>urlObject.auth</code> property is truthy, and either\\n<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of\\n<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>\\n followed by the literal string <code>@</code>.</li>\\n<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul>\\n<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>\\n<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,\\nan [<code>Error</code>][] is thrown.</li>\\n<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>\\nis not <code>undefined</code>:<ul>\\n<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>\\n<li>The value of <code>urlObject.port</code> is coerced to a string and appended to\\n<code>result</code>.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of\\n<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>\\n<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul>\\n<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash\\n(<code>/</code>), then the literal string &#39;/&#39; is appended to <code>result</code>.</li>\\n<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>\\n</ul>\\n</li>\\n<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an\\n[<code>Error</code>][] is thrown.</li>\\n<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>\\nproperty is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>\\nfollowed by the output of calling the [<code>querystring</code>][] module&#39;s <code>stringify()</code>\\nmethod passing the value of <code>urlObject.query</code>.</li>\\n<li>Otherwise, if <code>urlObject.search</code> is a string:<ul>\\n<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question\\nmark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>\\n<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>\\n</ul>\\n</li>\\n<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an\\n[<code>Error</code>][] is thrown.</li>\\n<li>If the <code>urlObject.hash</code> property is a string:<ul>\\n<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)\\ncharacter, the literal string <code>#</code> is appended to <code>result</code>.</li>\\n<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>\\n</ul>\\n</li>\\n<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a\\nstring, an [<code>Error</code>][] is thrown.</li>\\n<li><code>result</code> is returned.</li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"url.parse(urlString[, parseQueryString[, slashesDenoteHost]])\",\n          \"type\": \"method\",\n          \"name\": \"parse\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`urlString` {string} The URL string to parse. \",\n                  \"name\": \"urlString\",\n                  \"type\": \"string\",\n                  \"desc\": \"The URL string to parse.\"\n                },\n                {\n                  \"textRaw\": \"`parseQueryString` {boolean} If `true`, the `query` property will always be set to an object returned by the [`querystring`][] module's `parse()` method. If `false`, the `query` property on the returned URL object will be an unparsed, undecoded string. Defaults to `false`. \",\n                  \"name\": \"parseQueryString\",\n                  \"type\": \"boolean\",\n                  \"desc\": \"If `true`, the `query` property will always be set to an object returned by the [`querystring`][] module's `parse()` method. If `false`, the `query` property on the returned URL object will be an unparsed, undecoded string. Defaults to `false`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`slashesDenoteHost` {boolean} If `true`, the first token after the literal string `//` and preceeding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`. Defaults to `false`. \",\n                  \"name\": \"slashesDenoteHost\",\n                  \"type\": \"boolean\",\n                  \"desc\": \"If `true`, the first token after the literal string `//` and preceeding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`. Defaults to `false`.\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"urlString\"\n                },\n                {\n                  \"name\": \"parseQueryString\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"slashesDenoteHost\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL\\nobject.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"url.resolve(from, to)\",\n          \"type\": \"method\",\n          \"name\": \"resolve\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.25\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`from` {string} The Base URL being resolved against. \",\n                  \"name\": \"from\",\n                  \"type\": \"string\",\n                  \"desc\": \"The Base URL being resolved against.\"\n                },\n                {\n                  \"textRaw\": \"`to` {string} The HREF URL being resolved. \",\n                  \"name\": \"to\",\n                  \"type\": \"string\",\n                  \"desc\": \"The HREF URL being resolved.\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"from\"\n                },\n                {\n                  \"name\": \"to\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a\\nmanner similar to that of a Web browser resolving an anchor tag HREF.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">url.resolve(&#39;/one/two/three&#39;, &#39;four&#39;)         // &#39;/one/two/four&#39;\\nurl.resolve(&#39;http://example.com/&#39;, &#39;/one&#39;)    // &#39;http://example.com/one&#39;\\nurl.resolve(&#39;http://example.com/one&#39;, &#39;/two&#39;) // &#39;http://example.com/two&#39;\\n</code></pre>\\n\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"URL\"\n    },\n    {\n      \"textRaw\": \"util\",\n      \"name\": \"util\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>util</code> module is primarily designed to support the needs of Node.js&#39; own\\ninternal APIs. However, many of the utilities are useful for application and\\nmodule developers as well. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n</code></pre>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"util.debuglog(section)\",\n          \"type\": \"method\",\n          \"name\": \"debuglog\",\n          \"signatures\": [\n            {\n              \"return\": {\n                \"textRaw\": \"Returns: {Function} The logging function \",\n                \"name\": \"return\",\n                \"type\": \"Function\",\n                \"desc\": \"The logging function\"\n              },\n              \"params\": [\n                {\n                  \"textRaw\": \"`section` {String} A string identifying the portion of the application for which the `debuglog` function is being created. \",\n                  \"name\": \"section\",\n                  \"type\": \"String\",\n                  \"desc\": \"A string identifying the portion of the application for which the `debuglog` function is being created.\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"section\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>util.debuglog()</code> method is used to create a function that conditionally\\nwrites debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>\\nenvironment variable.  If the <code>section</code> name appears within the value of that\\nenvironment variable, then the returned function operates similar to\\n<code>console.error()</code>.  If not, then the returned function is a no-op.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst debuglog = util.debuglog(&#39;foo&#39;);\\n\\ndebuglog(&#39;hello from foo [%d]&#39;, 123);\\n</code></pre>\\n<p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then\\nit will output something like:</p>\\n<pre><code>FOO 3245: hello from foo [123]\\n</code></pre><p>where <code>3245</code> is the process id.  If it is not run with that\\nenvironment variable set, then it will not print anything.</p>\\n<p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>\\nenvironment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"util.deprecate(function, string)\",\n          \"type\": \"method\",\n          \"name\": \"deprecate\",\n          \"desc\": \"<p>The <code>util.deprecate()</code> method wraps the given <code>function</code> in such a way that\\nit is marked as deprecated.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nexports.puts = util.deprecate(() =&gt; {\\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\\n    process.stdout.write(arguments[i] + &#39;\\\\n&#39;);\\n  }\\n}, &#39;util.puts: Use console.log instead&#39;);\\n</code></pre>\\n<p>When called, <code>util.deprecate()</code> will return a function that will emit a\\n<code>DeprecationWarning</code> using the <code>process.on(&#39;warning&#39;)</code> event. By default,\\nthis warning will be emitted and printed to <code>stderr</code> exactly once, the first\\ntime it is called. After the warning is emitted, the wrapped <code>function</code>\\nis called.</p>\\n<p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are\\nused, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to\\nthe first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p>\\n<p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set,\\nor the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a\\nstack trace are printed to <code>stderr</code> the first time the deprecated function is\\ncalled.</p>\\n<p>If the <code>--throw-deprecation</code> command line flag is set, or the\\n<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be\\nthrown when the deprecated function is called.</p>\\n<p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code>\\nproperty take precedence over <code>--trace-deprecation</code> and\\n<code>process.traceDeprecation</code>.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"function\"\n                },\n                {\n                  \"name\": \"string\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"util.format(format[, ...])\",\n          \"type\": \"method\",\n          \"name\": \"format\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`format` {string} A `printf`-like format string. \",\n                  \"name\": \"format\",\n                  \"type\": \"string\",\n                  \"desc\": \"A `printf`-like format string.\"\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"format\"\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>util.format()</code> method returns a formatted string using the first argument\\nas a <code>printf</code>-like format.</p>\\n<p>The first argument is a string containing zero or more <em>placeholder</em> tokens.\\nEach placeholder token is replaced with the converted value from the\\ncorresponding argument. Supported placeholders are:</p>\\n<ul>\\n<li><code>%s</code> - String.</li>\\n<li><code>%d</code> - Number (both integer and float).</li>\\n<li><code>%j</code> - JSON.  Replaced with the string <code>&#39;[Circular]&#39;</code> if the argument\\ncontains circular references.</li>\\n<li><code>%%</code> - single percent sign (<code>&#39;%&#39;</code>). This does not consume an argument.</li>\\n</ul>\\n<p>If the placeholder does not have a corresponding argument, the placeholder is\\nnot replaced.</p>\\n<pre><code class=\\\"lang-js\\\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;);\\n  // Returns &#39;foo:%s&#39;\\n</code></pre>\\n<p>If there are more arguments passed to the <code>util.format()</code> method than the\\nnumber of placeholders, the extra arguments are coerced into strings (for\\nobjects and symbols, <code>util.inspect()</code> is used) then concatenated to the\\nreturned string, each delimited by a space.</p>\\n<pre><code class=\\\"lang-js\\\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); // &#39;foo:bar baz&#39;\\n</code></pre>\\n<p>If the first argument is not a format string then <code>util.format()</code> returns\\na string that is the concatenation of all arguments separated by spaces.\\nEach argument is converted to a string using <code>util.inspect()</code>.</p>\\n<pre><code class=\\\"lang-js\\\">util.format(1, 2, 3); // &#39;1 2 3&#39;\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"util.inherits(constructor, superConstructor)\",\n          \"type\": \"method\",\n          \"name\": \"inherits\",\n          \"desc\": \"<p><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and\\n<code>extends</code> keywords to get language level inheritance support. Also note that\\nthe two styles are [semantically incompatible][].</em></p>\\n<ul>\\n<li><code>constructor</code> {Function}</li>\\n<li><code>superConstructor</code> {Function}</li>\\n</ul>\\n<p>Inherit the prototype methods from one [constructor][] into another.  The\\nprototype of <code>constructor</code> will be set to a new object created from\\n<code>superConstructor</code>.</p>\\n<p>As an additional convenience, <code>superConstructor</code> will be accessible\\nthrough the <code>constructor.super_</code> property.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst EventEmitter = require(&#39;events&#39;);\\n\\nfunction MyStream() {\\n    EventEmitter.call(this);\\n}\\n\\nutil.inherits(MyStream, EventEmitter);\\n\\nMyStream.prototype.write = function(data) {\\n    this.emit(&#39;data&#39;, data);\\n}\\n\\nconst stream = new MyStream();\\n\\nconsole.log(stream instanceof EventEmitter); // true\\nconsole.log(MyStream.super_ === EventEmitter); // true\\n\\nstream.on(&#39;data&#39;, (data) =&gt; {\\n  console.log(`Received data: &quot;${data}&quot;`);\\n})\\nstream.write(&#39;It works!&#39;); // Received data: &quot;It works!&quot;\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"constructor\"\n                },\n                {\n                  \"name\": \"superConstructor\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"util.inspect(object[, options])\",\n          \"type\": \"method\",\n          \"name\": \"inspect\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`object` {any} Any JavaScript primitive or Object. \",\n                  \"name\": \"object\",\n                  \"type\": \"any\",\n                  \"desc\": \"Any JavaScript primitive or Object.\"\n                },\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`showHidden` {boolean} If `true`, the `object`'s non-enumerable symbols and properties will be included in the formatted result. Defaults to `false`. \",\n                      \"name\": \"showHidden\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, the `object`'s non-enumerable symbols and properties will be included in the formatted result. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`depth` {number} Specifies the number of times to recurse while formatting the `object`. This is useful for inspecting large complicated objects. Defaults to `2`. To make it recurse indefinitely pass `null`. \",\n                      \"name\": \"depth\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the number of times to recurse while formatting the `object`. This is useful for inspecting large complicated objects. Defaults to `2`. To make it recurse indefinitely pass `null`.\"\n                    },\n                    {\n                      \"textRaw\": \"`colors` {boolean} If `true`, the output will be styled with ANSI color codes. Defaults to `false`. Colors are customizable, see [Customizing `util.inspect` colors][]. \",\n                      \"name\": \"colors\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, the output will be styled with ANSI color codes. Defaults to `false`. Colors are customizable, see [Customizing `util.inspect` colors][].\"\n                    },\n                    {\n                      \"textRaw\": \"`customInspect` {boolean} If `false`, then custom `inspect(depth, opts)` functions exported on the `object` being inspected will not be called. Defaults to `true`. \",\n                      \"name\": \"customInspect\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `false`, then custom `inspect(depth, opts)` functions exported on the `object` being inspected will not be called. Defaults to `true`.\"\n                    },\n                    {\n                      \"textRaw\": \"`showProxy` {boolean} If `true`, then objects and functions that are `Proxy` objects will be introspected to show their `target` and `handler` objects. Defaults to `false`. \",\n                      \"name\": \"showProxy\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"If `true`, then objects and functions that are `Proxy` objects will be introspected to show their `target` and `handler` objects. Defaults to `false`.\"\n                    },\n                    {\n                      \"textRaw\": \"`maxArrayLength` {number} Specifies the maximum number of array and `TypedArray` elements to include when formatting. Defaults to `100`. Set to `null` to show all array elements. Set to `0` or negative to show no array elements. \",\n                      \"name\": \"maxArrayLength\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the maximum number of array and `TypedArray` elements to include when formatting. Defaults to `100`. Set to `null` to show all array elements. Set to `0` or negative to show no array elements.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"object\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is\\nprimarily useful for debugging. Additional <code>options</code> may be passed that alter\\ncertain aspects of the formatted string.</p>\\n<p>The following example inspects all properties of the <code>util</code> object:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\\n</code></pre>\\n<p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when\\ncalled these receive the current <code>depth</code> in the recursive inspection, as well as\\nthe options object passed to <code>util.inspect()</code>.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Customizing `util.inspect` colors\",\n              \"name\": \"Customizing `util.inspect` colors\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Color output (if enabled) of <code>util.inspect</code> is customizable globally\\nvia the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p>\\n<p><code>util.inspect.styles</code> is a map associating a style name to a color from\\n<code>util.inspect.colors</code>.</p>\\n<p>The default styles and associated colors are:</p>\\n<ul>\\n<li><code>number</code> - <code>yellow</code></li>\\n<li><code>boolean</code> - <code>yellow</code></li>\\n<li><code>string</code> - <code>green</code></li>\\n<li><code>date</code> - <code>magenta</code></li>\\n<li><code>regexp</code> - <code>red</code></li>\\n<li><code>null</code> - <code>bold</code></li>\\n<li><code>undefined</code> - <code>grey</code></li>\\n<li><code>special</code> - <code>cyan</code> (only applied to functions at this time)</li>\\n<li><code>name</code> - (no styling)</li>\\n</ul>\\n<p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>,\\n<code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>,\\n<code>underline</code> and <code>inverse</code> codes.</p>\\n<p>Color styling uses ANSI control codes that may not be supported on all\\nterminals.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"Custom `inspect()` function on Objects\",\n              \"name\": \"Custom `inspect()` function on Objects\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Objects may also define their own <code>inspect(depth, opts)</code> function that\\n<code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconst obj = { name: &#39;nate&#39; };\\nobj.inspect = function(depth) {\\n  return `{${this.name}}`;\\n};\\n\\nutil.inspect(obj);\\n  // &quot;{nate}&quot;\\n</code></pre>\\n<p>Custom <code>inspect(depth, opts)</code> functions typically return a string but may\\nreturn a value of any type that will be formatted accordingly by\\n<code>util.inspect()</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconst obj = { foo: &#39;this will not show up in the inspect() output&#39; };\\nobj.inspect = function(depth) {\\n  return { bar: &#39;baz&#39; };\\n};\\n\\nutil.inspect(obj);\\n  // &quot;{ bar: &#39;baz&#39; }&quot;\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ],\n      \"modules\": [\n        {\n          \"textRaw\": \"Deprecated APIs\",\n          \"name\": \"deprecated_apis\",\n          \"desc\": \"<p>The following APIs have been deprecated and should no longer be used. Existing\\napplications and modules should be updated to find alternative approaches.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"util.debug(string)\",\n              \"type\": \"method\",\n              \"name\": \"debug\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`console.error()`][] instead.\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`string` {string} The message to print to `stderr` \",\n                      \"name\": \"string\",\n                      \"type\": \"string\",\n                      \"desc\": \"The message to print to `stderr`\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"string\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Deprecated predecessor of <code>console.error</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"util.error([...])\",\n              \"type\": \"method\",\n              \"name\": \"error\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`console.error()`][] instead.\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`string` {string} The message to print to `stderr` \",\n                      \"name\": \"string\",\n                      \"type\": \"string\",\n                      \"desc\": \"The message to print to `stderr`\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Deprecated predecessor of <code>console.error</code>.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isArray(object)\",\n              \"type\": \"method\",\n              \"name\": \"isArray\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Internal alias for [<code>Array.isArray</code>][].</p>\\n<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isArray([]);\\n  // true\\nutil.isArray(new Array);\\n  // true\\nutil.isArray({});\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isBoolean(object)\",\n              \"type\": \"method\",\n              \"name\": \"isBoolean\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isBoolean(1);\\n  // false\\nutil.isBoolean(0);\\n  // false\\nutil.isBoolean(false);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isBuffer(object)\",\n              \"type\": \"method\",\n              \"name\": \"isBuffer\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`Buffer.isBuffer()`][] instead.\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isBuffer({ length: 0 });\\n  // false\\nutil.isBuffer([]);\\n  // false\\nutil.isBuffer(Buffer.from(&#39;hello world&#39;));\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isDate(object)\",\n              \"type\": \"method\",\n              \"name\": \"isDate\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isDate(new Date());\\n  // true\\nutil.isDate(Date());\\n  // false (without &#39;new&#39; returns a String)\\nutil.isDate({});\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isError(object)\",\n              \"type\": \"method\",\n              \"name\": \"isError\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is an [<code>Error</code>][]. Otherwise, returns\\n<code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isError(new Error());\\n  // true\\nutil.isError(new TypeError());\\n  // true\\nutil.isError({ name: &#39;Error&#39;, message: &#39;an error occurred&#39; });\\n  // false\\n</code></pre>\\n<p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is\\npossible to obtain an incorrect result when the <code>object</code> argument manipulates\\n<code>@@toStringTag</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst obj = { name: &#39;Error&#39;, message: &#39;an error occurred&#39; };\\n\\nutil.isError(obj);\\n  // false\\nobj[Symbol.toStringTag] = &#39;Error&#39;;\\nutil.isError(obj);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isFunction(object)\",\n              \"type\": \"method\",\n              \"name\": \"isFunction\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns\\n<code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nfunction Foo() {}\\nconst Bar = function() {};\\n\\nutil.isFunction({});\\n  // false\\nutil.isFunction(Foo);\\n  // true\\nutil.isFunction(Bar);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isNull(object)\",\n              \"type\": \"method\",\n              \"name\": \"isNull\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns\\n<code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isNull(0);\\n  // false\\nutil.isNull(undefined);\\n  // false\\nutil.isNull(null);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isNullOrUndefined(object)\",\n              \"type\": \"method\",\n              \"name\": \"isNullOrUndefined\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise,\\nreturns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isNullOrUndefined(0);\\n  // false\\nutil.isNullOrUndefined(undefined);\\n  // true\\nutil.isNullOrUndefined(null);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isNumber(object)\",\n              \"type\": \"method\",\n              \"name\": \"isNumber\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isNumber(false);\\n  // false\\nutil.isNumber(Infinity);\\n  // true\\nutil.isNumber(0);\\n  // true\\nutil.isNumber(NaN);\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isObject(object)\",\n              \"type\": \"method\",\n              \"name\": \"isObject\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a\\n<code>Function</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isObject(5);\\n  // false\\nutil.isObject(null);\\n  // false\\nutil.isObject({});\\n  // true\\nutil.isObject(function(){});\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isPrimitive(object)\",\n              \"type\": \"method\",\n              \"name\": \"isPrimitive\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns\\n<code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isPrimitive(5);\\n  // true\\nutil.isPrimitive(&#39;foo&#39;);\\n  // true\\nutil.isPrimitive(false);\\n  // true\\nutil.isPrimitive(null);\\n  // true\\nutil.isPrimitive(undefined);\\n  // true\\nutil.isPrimitive({});\\n  // false\\nutil.isPrimitive(function() {});\\n  // false\\nutil.isPrimitive(/^$/);\\n  // false\\nutil.isPrimitive(new Date());\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isRegExp(object)\",\n              \"type\": \"method\",\n              \"name\": \"isRegExp\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isRegExp(/some regexp/);\\n  // true\\nutil.isRegExp(new RegExp(&#39;another regexp&#39;));\\n  // true\\nutil.isRegExp({});\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isString(object)\",\n              \"type\": \"method\",\n              \"name\": \"isString\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isString(&#39;&#39;);\\n  // true\\nutil.isString(&#39;foo&#39;);\\n  // true\\nutil.isString(String(&#39;foo&#39;));\\n  // true\\nutil.isString(5);\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isSymbol(object)\",\n              \"type\": \"method\",\n              \"name\": \"isSymbol\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.isSymbol(5);\\n  // false\\nutil.isSymbol(&#39;foo&#39;);\\n  // false\\nutil.isSymbol(Symbol(&#39;foo&#39;));\\n  // true\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.isUndefined(object)\",\n              \"type\": \"method\",\n              \"name\": \"isUndefined\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`object` {any} \",\n                      \"name\": \"object\",\n                      \"type\": \"any\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"object\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconst foo = undefined;\\nutil.isUndefined(5);\\n  // false\\nutil.isUndefined(foo);\\n  // true\\nutil.isUndefined(null);\\n  // false\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.log(string)\",\n              \"type\": \"method\",\n              \"name\": \"log\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use a third party module instead.\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`string` {string} \",\n                      \"name\": \"string\",\n                      \"type\": \"string\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"string\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included\\ntimestamp.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nutil.log(&#39;Timestamped message.&#39;);\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"util.print([...])\",\n              \"type\": \"method\",\n              \"name\": \"print\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`console.log()`][] instead.\",\n              \"desc\": \"<p>Deprecated predecessor of <code>console.log</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"util.puts([...])\",\n              \"type\": \"method\",\n              \"name\": \"puts\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use [`console.log()`][] instead.\",\n              \"desc\": \"<p>Deprecated predecessor of <code>console.log</code>.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"...\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"util._extend(obj)\",\n              \"type\": \"method\",\n              \"name\": \"_extend\",\n              \"stability\": 0,\n              \"stabilityText\": \"Deprecated: Use Object.assign() instead.\",\n              \"desc\": \"<p>The <code>util._extend()</code> method was never intended to be used outside of internal\\nNode.js modules. The community found and used it anyway.</p>\\n<p>It is deprecated and should not be used in new code. JavaScript comes with very\\nsimilar built-in functionality through <code>Object.assign()</code>.</p>\\n<!-- [end-include:util.md] -->\\n<!-- [start-include:v8.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"obj\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Deprecated APIs\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"util\"\n    },\n    {\n      \"textRaw\": \"V8\",\n      \"name\": \"v8\",\n      \"desc\": \"<p>The <code>v8</code> module exposes APIs that are specific to the version of [V8][]\\nbuilt into the Node.js binary. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const v8 = require(&#39;v8&#39;);\\n</code></pre>\\n<p><em>Note</em>: The APIs and implementation are subject to change at any time.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"v8.getHeapStatistics()\",\n          \"type\": \"method\",\n          \"name\": \"getHeapStatistics\",\n          \"meta\": {\n            \"added\": [\n              \"v1.0.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns an object with the following properties:</p>\\n<ul>\\n<li><code>total_heap_size</code> {number}</li>\\n<li><code>total_heap_size_executable</code> {number}</li>\\n<li><code>total_physical_size</code> {number}</li>\\n<li><code>total_available_size</code> {number}</li>\\n<li><code>used_heap_size</code> {number}</li>\\n<li><code>heap_size_limit</code> {number}</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  total_heap_size: 7326976,\\n  total_heap_size_executable: 4194304,\\n  total_physical_size: 7326976,\\n  total_available_size: 1152656,\\n  used_heap_size: 3476208,\\n  heap_size_limit: 1535115264\\n}\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"v8.getHeapSpaceStatistics()\",\n          \"type\": \"method\",\n          \"name\": \"getHeapSpaceStatistics\",\n          \"meta\": {\n            \"added\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"desc\": \"<p>Returns statistics about the V8 heap spaces, i.e. the segments which make up\\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\\nheap space can be guaranteed as the statistics are provided via the V8\\n[<code>GetHeapSpaceStatistics</code>][] function and may change from one V8 version to the\\nnext.</p>\\n<p>The value returned is an array of objects containing the following properties:</p>\\n<ul>\\n<li><code>space_name</code> {string}</li>\\n<li><code>space_size</code> {number}</li>\\n<li><code>space_used_size</code> {number}</li>\\n<li><code>space_available_size</code> {number}</li>\\n<li><code>physical_space_size</code> {number}</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code>[\\n  {\\n    &quot;space_name&quot;: &quot;new_space&quot;,\\n    &quot;space_size&quot;: 2063872,\\n    &quot;space_used_size&quot;: 951112,\\n    &quot;space_available_size&quot;: 80824,\\n    &quot;physical_space_size&quot;: 2063872\\n  },\\n  {\\n    &quot;space_name&quot;: &quot;old_space&quot;,\\n    &quot;space_size&quot;: 3090560,\\n    &quot;space_used_size&quot;: 2493792,\\n    &quot;space_available_size&quot;: 0,\\n    &quot;physical_space_size&quot;: 3090560\\n  },\\n  {\\n    &quot;space_name&quot;: &quot;code_space&quot;,\\n    &quot;space_size&quot;: 1260160,\\n    &quot;space_used_size&quot;: 644256,\\n    &quot;space_available_size&quot;: 960,\\n    &quot;physical_space_size&quot;: 1260160\\n  },\\n  {\\n    &quot;space_name&quot;: &quot;map_space&quot;,\\n    &quot;space_size&quot;: 1094160,\\n    &quot;space_used_size&quot;: 201608,\\n    &quot;space_available_size&quot;: 0,\\n    &quot;physical_space_size&quot;: 1094160\\n  },\\n  {\\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\\n    &quot;space_size&quot;: 0,\\n    &quot;space_used_size&quot;: 0,\\n    &quot;space_available_size&quot;: 1490980608,\\n    &quot;physical_space_size&quot;: 0\\n  }\\n]\\n</code></pre>\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"v8.setFlagsFromString(string)\",\n          \"type\": \"method\",\n          \"name\": \"setFlagsFromString\",\n          \"meta\": {\n            \"added\": [\n              \"v1.0.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set \\nV8 command line flags. This method should be used with care. Changing settings\\nafter the VM has started may result in unpredictable behavior, including\\ncrashes and data loss; or it may simply do nothing.</p>\\n<p>The V8 options available for a version of Node.js may be determined by running\\n<code>node --v8-options</code>.  An unofficial, community-maintained list of options\\nand their effects is available [here][].</p>\\n<p>Usage:</p>\\n<pre><code class=\\\"lang-js\\\">// Print GC events to stdout for one minute.\\nconst v8 = require(&#39;v8&#39;);\\nv8.setFlagsFromString(&#39;--trace_gc&#39;);\\nsetTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);\\n</code></pre>\\n<!-- [end-include:v8.md] -->\\n<!-- [start-include:vm.md] -->\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"string\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"V8\"\n    },\n    {\n      \"textRaw\": \"Executing JavaScript\",\n      \"name\": \"vm\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\\nMachine contexts. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const vm = require(&#39;vm&#39;);\\n</code></pre>\\n<p>JavaScript code can be compiled and run immediately or compiled, saved, and run\\nlater.</p>\\n\",\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: vm.Script\",\n          \"type\": \"class\",\n          \"name\": \"vm.Script\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.1\"\n            ]\n          },\n          \"desc\": \"<p>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be\\nexecuted in specific sandboxes (or &quot;contexts&quot;).</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"new vm.Script(code, options)\",\n              \"type\": \"method\",\n              \"name\": \"Script\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.1\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`code` {string} The JavaScript code to compile. \",\n                      \"name\": \"code\",\n                      \"type\": \"string\",\n                      \"desc\": \"The JavaScript code to compile.\"\n                    },\n                    {\n                      \"textRaw\": \"`options` \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                          \"name\": \"filename\",\n                          \"type\": \"string\",\n                          \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"lineOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"columnOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                          \"name\": \"displayErrors\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                          \"name\": \"timeout\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                        },\n                        {\n                          \"textRaw\": \"`cachedData` {Buffer} Provides an optional `Buffer` with V8's code cache data for the supplied source. When supplied, the `cachedDataRejected` value will be set to either `true` or `false` depending on acceptance of the data by V8. \",\n                          \"name\": \"cachedData\",\n                          \"type\": \"Buffer\",\n                          \"desc\": \"Provides an optional `Buffer` with V8's code cache data for the supplied source. When supplied, the `cachedDataRejected` value will be set to either `true` or `false` depending on acceptance of the data by V8.\"\n                        },\n                        {\n                          \"textRaw\": \"`produceCachedData` {boolean} When `true` and no `cachedData` is present, V8 will attempt to produce code cache data for `code`. Upon success, a `Buffer` with V8's code cache data will be produced and stored in the `cachedData` property of the returned `vm.Script` instance. The `cachedDataProduced` value will be set to either `true` or `false` depending on whether code cache data is produced successfully. \",\n                          \"name\": \"produceCachedData\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"When `true` and no `cachedData` is present, V8 will attempt to produce code cache data for `code`. Upon success, a `Buffer` with V8's code cache data will be produced and stored in the `cachedData` property of the returned `vm.Script` instance. The `cachedDataProduced` value will be set to either `true` or `false` depending on whether code cache data is produced successfully.\"\n                        }\n                      ],\n                      \"name\": \"options\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"code\"\n                    },\n                    {\n                      \"name\": \"options\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\\ncompiled <code>vm.Script</code> can be run later multiple times. It is important to note\\nthat the <code>code</code> is not bound to any global object; rather, it is bound before\\neach run, just for that run.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"script.runInContext(contextifiedSandbox[, options])\",\n              \"type\": \"method\",\n              \"name\": \"runInContext\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.1\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`contextifiedSandbox` {Object} A [contextified][] object as returned by the `vm.createContext()` method. \",\n                      \"name\": \"contextifiedSandbox\",\n                      \"type\": \"Object\",\n                      \"desc\": \"A [contextified][] object as returned by the `vm.createContext()` method.\"\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                          \"name\": \"filename\",\n                          \"type\": \"string\",\n                          \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"lineOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"columnOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                          \"name\": \"displayErrors\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                          \"name\": \"timeout\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"contextifiedSandbox\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Runs the compiled code contained by the <code>vm.Script</code> object within the given\\n<code>contextifiedSandbox</code> and returns the result. Running code does not have access\\nto local scope.</p>\\n<p>The following example compiles code that increments a global variable, sets\\nthe value of another global variable, then execute the code multiple times.\\nThe globals are contained in the <code>sandbox</code> object.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst vm = require(&#39;vm&#39;);\\n\\nconst sandbox = {\\n  animal: &#39;cat&#39;,\\n  count: 2\\n};\\n\\nconst script = new vm.Script(&#39;count += 1; name = &quot;kitty&quot;;&#39;);\\n\\nconst context = new vm.createContext(sandbox);\\nfor (var i = 0; i &lt; 10; ++i) {\\n  script.runInContext(context);\\n}\\n\\nconsole.log(util.inspect(sandbox));\\n\\n// { animal: &#39;cat&#39;, count: 12, name: &#39;kitty&#39; }\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"script.runInNewContext([sandbox][, options])\",\n              \"type\": \"method\",\n              \"name\": \"runInNewContext\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.1\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`sandbox` {Object} An object that will be [contextified][]. If `undefined`, a new object will be created. \",\n                      \"name\": \"sandbox\",\n                      \"type\": \"Object\",\n                      \"desc\": \"An object that will be [contextified][]. If `undefined`, a new object will be created.\",\n                      \"optional\": true\n                    },\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                          \"name\": \"filename\",\n                          \"type\": \"string\",\n                          \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"lineOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"columnOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                          \"name\": \"displayErrors\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                          \"name\": \"timeout\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"sandbox\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>First contextifies the given <code>sandbox</code>, runs the compiled code contained by\\nthe <code>vm.Script</code> object within the created sandbox, and returns the result.\\nRunning code does not have access to local scope.</p>\\n<p>The following example compiles code that sets a global variable, then executes\\nthe code multiple times in different contexts. The globals are set on and\\ncontained within each individual <code>sandbox</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst vm = require(&#39;vm&#39;);\\n\\nconst script = new vm.Script(&#39;globalVar = &quot;set&quot;&#39;);\\n\\nconst sandboxes = [{}, {}, {}];\\nsandboxes.forEach((sandbox) =&gt; {\\n  script.runInNewContext(sandbox);\\n});\\n\\nconsole.log(util.inspect(sandboxes));\\n\\n// [{ globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }]\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"script.runInThisContext([options])\",\n              \"type\": \"method\",\n              \"name\": \"runInThisContext\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.3.1\"\n                ]\n              },\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`options` {Object} \",\n                      \"options\": [\n                        {\n                          \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                          \"name\": \"filename\",\n                          \"type\": \"string\",\n                          \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"lineOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                          \"name\": \"columnOffset\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                        },\n                        {\n                          \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                          \"name\": \"displayErrors\",\n                          \"type\": \"boolean\",\n                          \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                        },\n                        {\n                          \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                          \"name\": \"timeout\",\n                          \"type\": \"number\",\n                          \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                        }\n                      ],\n                      \"name\": \"options\",\n                      \"type\": \"Object\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the\\ncurrent <code>global</code> object. Running code does not have access to local scope, but\\n<em>does</em> have access to the current <code>global</code> object.</p>\\n<p>The following example compiles code that increments a <code>global</code> variable then\\nexecutes that code multiple times:</p>\\n<pre><code class=\\\"lang-js\\\">const vm = require(&#39;vm&#39;);\\n\\nglobal.globalVar = 0;\\n\\nconst script = new vm.Script(&#39;globalVar += 1&#39;, { filename: &#39;myfile.vm&#39; });\\n\\nfor (var i = 0; i &lt; 1000; ++i) {\\n  script.runInThisContext();\\n}\\n\\nconsole.log(globalVar);\\n\\n// 1000\\n</code></pre>\\n\"\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"vm.createContext([sandbox])\",\n          \"type\": \"method\",\n          \"name\": \"createContext\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`sandbox` {Object} \",\n                  \"name\": \"sandbox\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"sandbox\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will [prepare\\nthat sandbox][#vm_what_does_it_mean_to_contextify_an_object] so that it can be\\nused in calls to [<code>vm.runInContext()</code>][] or [<code>script.runInContext()</code>][]. Inside\\nsuch scripts, the <code>sandbox</code> object will be the global object, retaining all of\\nits existing properties but also having the built-in objects and functions any\\nstandard [global object][] has. Outside of scripts run by the vm module,\\n<code>sandbox</code> will remain unchanged.</p>\\n<p>If <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty\\n[contextified][] sandbox object will be returned.</p>\\n<p>The <code>vm.createContext()</code> method is primarily useful for creating a single\\nsandbox that can be used to run multiple scripts. For instance, if emulating a\\nweb browser, the method can be used to create a single sandbox representing a\\nwindow&#39;s global object, then run all <code>&lt;script&gt;</code> tags together within the context\\nof that sandbox.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"vm.isContext(sandbox)\",\n          \"type\": \"method\",\n          \"name\": \"isContext\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.7\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`sandbox` {Object} \",\n                  \"name\": \"sandbox\",\n                  \"type\": \"Object\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"sandbox\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>Returns <code>true</code> if the given <code>sandbox</code> object has been [contextified][] using\\n[<code>vm.createContext()</code>][].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"vm.runInContext(code, contextifiedSandbox[, options])\",\n          \"type\": \"method\",\n          \"name\": \"runInContext\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`code` {string} The JavaScript code to compile and run. \",\n                  \"name\": \"code\",\n                  \"type\": \"string\",\n                  \"desc\": \"The JavaScript code to compile and run.\"\n                },\n                {\n                  \"textRaw\": \"`contextifiedSandbox` {Object} The [contextified][] object that will be used as the `global` when the `code` is compiled and run. \",\n                  \"name\": \"contextifiedSandbox\",\n                  \"type\": \"Object\",\n                  \"desc\": \"The [contextified][] object that will be used as the `global` when the `code` is compiled and run.\"\n                },\n                {\n                  \"textRaw\": \"`options` \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                      \"name\": \"filename\",\n                      \"type\": \"string\",\n                      \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"lineOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"columnOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                      \"name\": \"displayErrors\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                    },\n                    {\n                      \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                      \"name\": \"timeout\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"code\"\n                },\n                {\n                  \"name\": \"contextifiedSandbox\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of\\nthe <code>contextifiedSandbox</code>, then returns the result. Running code does not have\\naccess to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been\\npreviously [contextified][] using the [<code>vm.createContext()</code>][] method.</p>\\n<p>The following example compiles and executes different scripts using a single\\n[contextified][] object:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst vm = require(&#39;vm&#39;);\\n\\nconst sandbox = { globalVar: 1 };\\nvm.createContext(sandbox);\\n\\nfor (var i = 0; i &lt; 10; ++i) {\\n  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\\n}\\nconsole.log(util.inspect(sandbox));\\n\\n// { globalVar: 1024 }\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"vm.runInDebugContext(code)\",\n          \"type\": \"method\",\n          \"name\": \"runInDebugContext\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.14\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`code` {string} The JavaScript code to compile and run. \",\n                  \"name\": \"code\",\n                  \"type\": \"string\",\n                  \"desc\": \"The JavaScript code to compile and run.\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"code\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8\\ndebug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p>\\n<pre><code class=\\\"lang-js\\\">const vm = require(&#39;vm&#39;);\\nconst Debug = vm.runInDebugContext(&#39;Debug&#39;);\\nconsole.log(Debug.findScript(process.emit).name);  // &#39;events.js&#39;\\nconsole.log(Debug.findScript(process.exit).name);  // &#39;internal/process.js&#39;\\n</code></pre>\\n<p><em>Note</em>: The debug context and object are intrinsically tied to V8&#39;s debugger\\nimplementation and may change (or even be removed) without prior warning.</p>\\n<p>The <code>Debug</code> object can also be made available using the V8-specific\\n<code>--expose_debug_as=</code> [command line option][cli.md].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"vm.runInNewContext(code[, sandbox][, options])\",\n          \"type\": \"method\",\n          \"name\": \"runInNewContext\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`code` {string} The JavaScript code to compile and run. \",\n                  \"name\": \"code\",\n                  \"type\": \"string\",\n                  \"desc\": \"The JavaScript code to compile and run.\"\n                },\n                {\n                  \"textRaw\": \"`sandbox` {Object} An object that will be [contextified][]. If `undefined`, a new object will be created. \",\n                  \"name\": \"sandbox\",\n                  \"type\": \"Object\",\n                  \"desc\": \"An object that will be [contextified][]. If `undefined`, a new object will be created.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                      \"name\": \"filename\",\n                      \"type\": \"string\",\n                      \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"lineOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"columnOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                      \"name\": \"displayErrors\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                    },\n                    {\n                      \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                      \"name\": \"timeout\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"code\"\n                },\n                {\n                  \"name\": \"sandbox\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>vm.runInContext()</code> first contextifies the given <code>sandbox</code> object (or\\ncreates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it\\nwithin the context of the created context, then returns the result. Running code\\ndoes not have access to the local scope.</p>\\n<p>The following example compiles and executes code that increments a global\\nvariable and sets a new one. These globals are contained in the <code>sandbox</code>.</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\nconst vm = require(&#39;vm&#39;);\\n\\nconst sandbox = {\\n  animal: &#39;cat&#39;,\\n  count: 2\\n};\\n\\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox);\\nconsole.log(util.inspect(sandbox));\\n\\n// { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"vm.runInThisContext(code[, options])\",\n          \"type\": \"method\",\n          \"name\": \"runInThisContext\",\n          \"meta\": {\n            \"added\": [\n              \"v0.3.1\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`code` {string} The JavaScript code to compile and run. \",\n                  \"name\": \"code\",\n                  \"type\": \"string\",\n                  \"desc\": \"The JavaScript code to compile and run.\"\n                },\n                {\n                  \"textRaw\": \"`options` \",\n                  \"options\": [\n                    {\n                      \"textRaw\": \"`filename` {string} Specifies the filename used in stack traces produced by this script. \",\n                      \"name\": \"filename\",\n                      \"type\": \"string\",\n                      \"desc\": \"Specifies the filename used in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"lineOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the line number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. \",\n                      \"name\": \"columnOffset\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the column number offset that is displayed in stack traces produced by this script.\"\n                    },\n                    {\n                      \"textRaw\": \"`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. \",\n                      \"name\": \"displayErrors\",\n                      \"type\": \"boolean\",\n                      \"desc\": \"When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\"\n                    },\n                    {\n                      \"textRaw\": \"`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. \",\n                      \"name\": \"timeout\",\n                      \"type\": \"number\",\n                      \"desc\": \"Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown.\"\n                    }\n                  ],\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"code\"\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the\\ncurrent <code>global</code> and returns the result. Running code does not have access to\\nlocal scope, but does have access to the current <code>global</code> object.</p>\\n<p>The following example illustrates using both <code>vm.runInThisContext()</code> and\\nthe JavaScript [<code>eval()</code>][] function to run the same code:</p>\\n<pre><code class=\\\"lang-js\\\">const vm = require(&#39;vm&#39;);\\nvar localVar = &#39;initial value&#39;;\\n\\nconst vmResult = vm.runInThisContext(&#39;localVar = &quot;vm&quot;;&#39;);\\nconsole.log(&#39;vmResult: &#39;, vmResult);\\nconsole.log(&#39;localVar: &#39;, localVar);\\n\\nconst evalResult = eval(&#39;localVar = &quot;eval&quot;;&#39;);\\nconsole.log(&#39;evalResult: &#39;, evalResult);\\nconsole.log(&#39;localVar: &#39;, localVar);\\n\\n// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;\\n// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;\\n</code></pre>\\n<p>Because <code>vm.runInThisContext()</code> does not have access to the local scope,\\n<code>localVar</code> is unchanged. In contrast, [<code>eval()</code>][] <em>does</em> have access to the\\nlocal scope, so the value <code>localVar</code> is changed. In this way\\n<code>vm.runInThisContext()</code> is much like an [indirect <code>eval()</code> call][], e.g. \\n<code>(0,eval)(&#39;code&#39;)</code>.</p>\\n<h2>Example: Running an HTTP Server within a VM</h2>\\n<p>When using either <code>script.runInThisContext()</code> or <code>vm.runInThisContext()</code>, the\\ncode is executed within the current V8 global context. The code passed\\nto this VM context will have its own isolated scope.</p>\\n<p>In order to run a simple web server using the <code>http</code> module the code passed to\\nthe context must either call <code>require(&#39;http&#39;)</code> on its own, or have a reference\\nto the <code>http</code> module passed to it. For instance:</p>\\n<pre><code class=\\\"lang-js\\\">&#39;use strict&#39;;\\nconst vm = require(&#39;vm&#39;);\\n\\nlet code =\\n`(function(require) {\\n\\n   const http = require(&#39;http&#39;);\\n\\n   http.createServer( (request, response) =&gt; {\\n     response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\\n     response.end(&#39;Hello World\\\\\\\\n&#39;);\\n   }).listen(8124);\\n\\n   console.log(&#39;Server running at http://127.0.0.1:8124/&#39;);\\n })`;\\n\\n vm.runInThisContext(code)(require);\\n</code></pre>\\n<p><em>Note</em>: The <code>require()</code> in the above case shares the state with context it is\\npassed from. This may introduce risks when untrusted code is executed, e.g.\\naltering objects from the calling thread&#39;s context in unwanted ways.</p>\\n\"\n        }\n      ],\n      \"modules\": [\n        {\n          \"textRaw\": \"What does it mean to \\\"contextify\\\" an object?\",\n          \"name\": \"what_does_it_mean_to_\\\"contextify\\\"_an_object?\",\n          \"desc\": \"<p>All JavaScript executed within Node.js runs within the scope of a &quot;context&quot;.\\nAccording to the [V8 Embedder&#39;s Guide][]:</p>\\n<blockquote>\\n<p>In V8, a context is an execution environment that allows separate, unrelated,\\nJavaScript applications to run in a single instance of V8. You must explicitly\\nspecify the context in which you want any JavaScript code to be run.</p>\\n</blockquote>\\n<p>When the method <code>vm.createContext()</code> is called, the <code>sandbox</code> object that is\\npassed in (or a newly created object if <code>sandbox</code> is <code>undefined</code>) is associated\\ninternally with a new instance of a V8 Context. This V8 Context provides the\\n<code>code</code> run using the <code>vm</code> modules methods with an isolated global environment\\nwithin which it can operate. The process of creating the V8 Context and\\nassociating it with the <code>sandbox</code> object is what this document refers to as\\n&quot;contextifying&quot; the <code>sandbox</code>.</p>\\n<!-- [end-include:vm.md] -->\\n<!-- [start-include:zlib.md] -->\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"What does it mean to \\\"contextify\\\" an object?\"\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"vm\"\n    },\n    {\n      \"textRaw\": \"Zlib\",\n      \"name\": \"zlib\",\n      \"stability\": 2,\n      \"stabilityText\": \"Stable\",\n      \"desc\": \"<p>The <code>zlib</code> module provides compression functionality implemented using Gzip and\\nDeflate/Inflate. It can be accessed using:</p>\\n<pre><code class=\\\"lang-js\\\">const zlib = require(&#39;zlib&#39;);\\n</code></pre>\\n<p>Compressing or decompressing a stream (such as a file) can be accomplished by \\npiping the source stream data through a <code>zlib</code> stream into a destination stream:</p>\\n<pre><code class=\\\"lang-js\\\">const gzip = zlib.createGzip();\\nconst fs = require(&#39;fs&#39;);\\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\\n\\ninp.pipe(gzip).pipe(out);\\n</code></pre>\\n<p>It is also possible to compress or decompress data in a single step:</p>\\n<pre><code class=\\\"lang-js\\\">const input = &#39;.................................&#39;;\\nzlib.deflate(input, (err, buffer) =&gt; {\\n  if (!err) {\\n    console.log(buffer.toString(&#39;base64&#39;));\\n  } else {\\n    // handle error\\n  }\\n});\\n\\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\\nzlib.unzip(buffer, (err, buffer) =&gt; {\\n  if (!err) {\\n    console.log(buffer.toString());\\n  } else {\\n    // handle error\\n  }\\n});\\n</code></pre>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Compressing HTTP requests and responses\",\n          \"name\": \"compressing_http_requests_and_responses\",\n          \"desc\": \"<p>The <code>zlib</code> module can be used to implement support for the <code>gzip</code> and <code>deflate</code>\\ncontent-encoding mechanisms defined by \\n<a href=\\\"https://tools.ietf.org/html/rfc7230#section-4.2\\\">HTTP</a>.</p>\\n<p>The HTTP [<code>Accept-Encoding</code>][] header is used within an http request to identify\\nthe compression encodings accepted by the client. The [<code>Content-Encoding</code>][] \\nheader is used to identify the compression encodings actually applied to a \\nmessage.</p>\\n<p><strong>Note: the examples given below are drastically simplified to show\\nthe basic concept.</strong>  Using <code>zlib</code> encoding can be expensive, and the results\\nought to be cached.  See [Memory Usage Tuning][] for more information\\non the speed/memory/compression tradeoffs involved in <code>zlib</code> usage.</p>\\n<pre><code class=\\\"lang-js\\\">// client request example\\nconst zlib = require(&#39;zlib&#39;);\\nconst http = require(&#39;http&#39;);\\nconst fs = require(&#39;fs&#39;);\\nconst request = http.get({ host: &#39;example.com&#39;,\\n                         path: &#39;/&#39;,\\n                         port: 80,\\n                         headers: { &#39;Accept-Encoding&#39;: &#39;gzip,deflate&#39; } });\\nrequest.on(&#39;response&#39;, (response) =&gt; {\\n  var output = fs.createWriteStream(&#39;example.com_index.html&#39;);\\n\\n  switch (response.headers[&#39;content-encoding&#39;]) {\\n    // or, just use zlib.createUnzip() to handle both cases\\n    case &#39;gzip&#39;:\\n      response.pipe(zlib.createGunzip()).pipe(output);\\n      break;\\n    case &#39;deflate&#39;:\\n      response.pipe(zlib.createInflate()).pipe(output);\\n      break;\\n    default:\\n      response.pipe(output);\\n      break;\\n  }\\n});\\n\\n// server example\\n// Running a gzip operation on every request is quite expensive.\\n// It would be much more efficient to cache the compressed buffer.\\nconst zlib = require(&#39;zlib&#39;);\\nconst http = require(&#39;http&#39;);\\nconst fs = require(&#39;fs&#39;);\\nhttp.createServer((request, response) =&gt; {\\n  var raw = fs.createReadStream(&#39;index.html&#39;);\\n  var acceptEncoding = request.headers[&#39;accept-encoding&#39;];\\n  if (!acceptEncoding) {\\n    acceptEncoding = &#39;&#39;;\\n  }\\n\\n  // Note: this is not a conformant accept-encoding parser.\\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\\n  if (acceptEncoding.match(/\\\\bdeflate\\\\b/)) {\\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;deflate&#39; });\\n    raw.pipe(zlib.createDeflate()).pipe(response);\\n  } else if (acceptEncoding.match(/\\\\bgzip\\\\b/)) {\\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;gzip&#39; });\\n    raw.pipe(zlib.createGzip()).pipe(response);\\n  } else {\\n    response.writeHead(200, {});\\n    raw.pipe(response);\\n  }\\n}).listen(1337);\\n</code></pre>\\n<p>By default, the <code>zlib</code> methods with throw an error when decompressing\\ntruncated data. However, if it is known that the data is incomplete, or\\nthe desire is to inspect only the beginning of a compressed file, it is\\npossible to suppress the default error handling by changing the flushing\\nmethod that is used to compressed the last chunk of input data:</p>\\n<pre><code class=\\\"lang-js\\\">// This is a truncated version of the buffer from the above examples\\nconst buffer = Buffer.from(&#39;eJzT0yMA&#39;, &#39;base64&#39;);\\n\\nzlib.unzip(buffer, { finishFlush: zlib.Z_SYNC_FLUSH }, (err, buffer) =&gt; {\\n  if (!err) {\\n    console.log(buffer.toString());\\n  } else {\\n    // handle error\\n  }\\n});\\n</code></pre>\\n<p>This will not change the behavior in other error-throwing situations, e.g.\\nwhen the input data has an invalid format. Using this method, it will not be\\npossible to determine whether the input ended prematurely or lacks the\\nintegrity checks, making it necessary to manually check that the\\ndecompressed result is valid.</p>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Compressing HTTP requests and responses\"\n        },\n        {\n          \"textRaw\": \"Flushing\",\n          \"name\": \"flushing\",\n          \"desc\": \"<p>Calling [<code>.flush()</code>][] on a compression stream will make <code>zlib</code> return as much\\noutput as currently possible. This may come at the cost of degraded compression\\nquality, but can be useful when data needs to be available as soon as possible.</p>\\n<p>In the following example, <code>flush()</code> is used to write a compressed partial\\nHTTP response to the client:</p>\\n<pre><code class=\\\"lang-js\\\">const zlib = require(&#39;zlib&#39;);\\nconst http = require(&#39;http&#39;);\\n\\nhttp.createServer((request, response) =&gt; {\\n  // For the sake of simplicity, the Accept-Encoding checks are omitted.\\n  response.writeHead(200, { &#39;content-encoding&#39;: &#39;gzip&#39; });\\n  const output = zlib.createGzip();\\n  output.pipe(response);\\n\\n  setInterval(() =&gt; {\\n    output.write(`The current time is ${Date()}\\\\n`, () =&gt; {\\n      // The data has been passed to zlib, but the compression algorithm may\\n      // have decided to buffer the data for more efficient compression.\\n      // Calling .flush() will make the data available as soon as the client\\n      // is ready to receive it.\\n      output.flush();\\n    });\\n  }, 1000);\\n}).listen(1337);\\n</code></pre>\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Flushing\"\n        }\n      ],\n      \"miscs\": [\n        {\n          \"textRaw\": \"Memory Usage Tuning\",\n          \"name\": \"Memory Usage Tuning\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>From <code>zlib/zconf.h</code>, modified to node.js&#39;s usage:</p>\\n<p>The memory requirements for deflate are (in bytes):</p>\\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))\\n</code></pre><p>That is: 128K for windowBits=15  +  128K for memLevel = 8\\n(default values) plus a few kilobytes for small objects.</p>\\n<p>For example, to reduce the default memory requirements from 256K to 128K, the\\noptions shoud be set to:</p>\\n<pre><code>{ windowBits: 14, memLevel: 7 }\\n</code></pre><p>This will, however, generally degrade compression.</p>\\n<p>The memory requirements for inflate are (in bytes)</p>\\n<pre><code>1 &lt;&lt; windowBits\\n</code></pre><p>That is, 32K for windowBits=15 (default value) plus a few kilobytes\\nfor small objects.</p>\\n<p>This is in addition to a single internal output slab buffer of size\\n<code>chunkSize</code>, which defaults to 16K.</p>\\n<p>The speed of <code>zlib</code> compression is affected most dramatically by the\\n<code>level</code> setting.  A higher level will result in better compression, but\\nwill take longer to complete.  A lower level will result in less\\ncompression, but will be much faster.</p>\\n<p>In general, greater memory usage options will mean that Node.js has to make\\nfewer calls to <code>zlib</code> because it will be able to process more data on\\neach <code>write</code> operation.  So, this is another factor that affects the\\nspeed, at the cost of memory usage.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Constants\",\n          \"name\": \"Constants\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"type\": \"misc\",\n          \"desc\": \"<p>All of the constants defined in <code>zlib.h</code> are also defined on <code>require(&#39;zlib&#39;)</code>.\\nIn the normal course of operations, it will not be necessary to use these \\nconstants. They are documented so that their presence is not surprising. This \\nsection is taken almost directly from the [zlib documentation][].  See\\n<a href=\\\"http://zlib.net/manual.html#Constants\\\">http://zlib.net/manual.html#Constants</a> for more details.</p>\\n<p>Allowed flush values.</p>\\n<ul>\\n<li><code>zlib.Z_NO_FLUSH</code></li>\\n<li><code>zlib.Z_PARTIAL_FLUSH</code></li>\\n<li><code>zlib.Z_SYNC_FLUSH</code></li>\\n<li><code>zlib.Z_FULL_FLUSH</code></li>\\n<li><code>zlib.Z_FINISH</code></li>\\n<li><code>zlib.Z_BLOCK</code></li>\\n<li><code>zlib.Z_TREES</code></li>\\n</ul>\\n<p>Return codes for the compression/decompression functions. Negative\\nvalues are errors, positive values are used for special but normal\\nevents.</p>\\n<ul>\\n<li><code>zlib.Z_OK</code></li>\\n<li><code>zlib.Z_STREAM_END</code></li>\\n<li><code>zlib.Z_NEED_DICT</code></li>\\n<li><code>zlib.Z_ERRNO</code></li>\\n<li><code>zlib.Z_STREAM_ERROR</code></li>\\n<li><code>zlib.Z_DATA_ERROR</code></li>\\n<li><code>zlib.Z_MEM_ERROR</code></li>\\n<li><code>zlib.Z_BUF_ERROR</code></li>\\n<li><code>zlib.Z_VERSION_ERROR</code></li>\\n</ul>\\n<p>Compression levels.</p>\\n<ul>\\n<li><code>zlib.Z_NO_COMPRESSION</code></li>\\n<li><code>zlib.Z_BEST_SPEED</code></li>\\n<li><code>zlib.Z_BEST_COMPRESSION</code></li>\\n<li><code>zlib.Z_DEFAULT_COMPRESSION</code></li>\\n</ul>\\n<p>Compression strategy.</p>\\n<ul>\\n<li><code>zlib.Z_FILTERED</code></li>\\n<li><code>zlib.Z_HUFFMAN_ONLY</code></li>\\n<li><code>zlib.Z_RLE</code></li>\\n<li><code>zlib.Z_FIXED</code></li>\\n<li><code>zlib.Z_DEFAULT_STRATEGY</code></li>\\n</ul>\\n<p>Possible values of the data_type field.</p>\\n<ul>\\n<li><code>zlib.Z_BINARY</code></li>\\n<li><code>zlib.Z_TEXT</code></li>\\n<li><code>zlib.Z_ASCII</code></li>\\n<li><code>zlib.Z_UNKNOWN</code></li>\\n</ul>\\n<p>The deflate compression method (the only one supported in this version).</p>\\n<ul>\\n<li><code>zlib.Z_DEFLATED</code></li>\\n</ul>\\n<p>For initializing zalloc, zfree, opaque.</p>\\n<ul>\\n<li><code>zlib.Z_NULL</code></li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"Class Options\",\n          \"name\": \"Class Options\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.1\"\n            ]\n          },\n          \"type\": \"misc\",\n          \"desc\": \"<p>Each class takes an <code>options</code> object.  All options are optional.</p>\\n<p>Note that some options are only relevant when compressing, and are\\nignored by the decompression classes.</p>\\n<ul>\\n<li><code>flush</code> (default: <code>zlib.Z_NO_FLUSH</code>)</li>\\n<li><code>finishFlush</code> (default: <code>zlib.Z_FINISH</code>)</li>\\n<li><code>chunkSize</code> (default: 16*1024)</li>\\n<li><code>windowBits</code></li>\\n<li><code>level</code> (compression only)</li>\\n<li><code>memLevel</code> (compression only)</li>\\n<li><code>strategy</code> (compression only)</li>\\n<li><code>dictionary</code> (deflate/inflate only, empty dictionary by default)</li>\\n</ul>\\n<p>See the description of <code>deflateInit2</code> and <code>inflateInit2</code> at\\n<a href=\\\"http://zlib.net/manual.html#Advanced\\\">http://zlib.net/manual.html#Advanced</a> for more information on these.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Convenience Methods\",\n          \"name\": \"Convenience Methods\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>All of these take a [Buffer][] or string as the first argument, an optional \\nsecond argument to supply options to the <code>zlib</code> classes and will call the \\nsupplied callback with <code>callback(error, result)</code>.</p>\\n<p>Every method has a <code>*Sync</code> counterpart, which accept the same arguments, but\\nwithout a callback.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"zlib.deflate(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"deflate\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with Deflate.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.deflateSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"deflateSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with Deflate.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.deflateRaw(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"deflateRaw\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with DeflateRaw.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.deflateRawSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"deflateRawSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with DeflateRaw.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.gunzip(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"gunzip\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Gunzip.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.gunzipSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"gunzipSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Gunzip.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.gzip(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"gzip\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with Gzip.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.gzipSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"gzipSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Compress a Buffer or string with Gzip.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.inflate(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"inflate\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Inflate.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.inflateSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"inflateSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Inflate.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.inflateRaw(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"inflateRaw\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with InflateRaw.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.inflateRawSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"inflateRawSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with InflateRaw.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.unzip(buf[, options], callback)\",\n              \"type\": \"method\",\n              \"name\": \"unzip\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.6.0\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Unzip.</p>\\n<!-- [end-include:zlib.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.unzipSync(buf[, options])\",\n              \"type\": \"method\",\n              \"name\": \"unzipSync\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>Decompress a Buffer or string with Unzip.</p>\\n<!-- [end-include:zlib.md] -->\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"buf\"\n                    },\n                    {\n                      \"name\": \"options\",\n                      \"optional\": true\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"meta\": {\n        \"added\": [\n          \"v0.5.8\"\n        ]\n      },\n      \"classes\": [\n        {\n          \"textRaw\": \"Class: zlib.Deflate\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Deflate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Compress data using deflate.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.DeflateRaw\",\n          \"type\": \"class\",\n          \"name\": \"zlib.DeflateRaw\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Compress data using deflate, and do not append a <code>zlib</code> header.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.Gunzip\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Gunzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Decompress a gzip stream.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.Gzip\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Gzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Compress data using gzip.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.Inflate\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Inflate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Decompress a deflate stream.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.InflateRaw\",\n          \"type\": \"class\",\n          \"name\": \"zlib.InflateRaw\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Decompress a raw deflate stream.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.Unzip\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Unzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\\nthe header.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Class: zlib.Zlib\",\n          \"type\": \"class\",\n          \"name\": \"zlib.Zlib\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Not exported by the <code>zlib</code> module. It is documented here because it is the base\\nclass of the compressor/decompressor classes.</p>\\n\",\n          \"methods\": [\n            {\n              \"textRaw\": \"zlib.flush([kind], callback)\",\n              \"type\": \"method\",\n              \"name\": \"flush\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.8\"\n                ]\n              },\n              \"desc\": \"<p><code>kind</code> defaults to <code>zlib.Z_FULL_FLUSH</code>.</p>\\n<p>Flush pending data. Don&#39;t call this frivolously, premature flushes negatively\\nimpact the effectiveness of the compression algorithm.</p>\\n<p>Calling this only flushes data from the internal <code>zlib</code> state, and does not\\nperform flushing of any kind on the streams level. Rather, it behaves like a\\nnormal call to <code>.write()</code>, i.e. it will be queued up behind other pending\\nwrites and will only produce output when data is being read from the stream.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"kind\",\n                      \"optional\": true\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.params(level, strategy, callback)\",\n              \"type\": \"method\",\n              \"name\": \"params\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.4\"\n                ]\n              },\n              \"desc\": \"<p>Dynamically update the compression level and compression strategy.\\nOnly applicable to deflate algorithm.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"level\"\n                    },\n                    {\n                      \"name\": \"strategy\"\n                    },\n                    {\n                      \"name\": \"callback\"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"zlib.reset()\",\n              \"type\": \"method\",\n              \"name\": \"reset\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.0\"\n                ]\n              },\n              \"desc\": \"<p>Reset the compressor/decompressor to factory defaults. Only applicable to\\nthe inflate and deflate algorithms.</p>\\n\",\n              \"signatures\": [\n                {\n                  \"params\": []\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"zlib.createDeflate([options])\",\n          \"type\": \"method\",\n          \"name\": \"createDeflate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [Deflate][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createDeflateRaw([options])\",\n          \"type\": \"method\",\n          \"name\": \"createDeflateRaw\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [DeflateRaw][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createGunzip([options])\",\n          \"type\": \"method\",\n          \"name\": \"createGunzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [Gunzip][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createGzip([options])\",\n          \"type\": \"method\",\n          \"name\": \"createGzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [Gzip][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createInflate([options])\",\n          \"type\": \"method\",\n          \"name\": \"createInflate\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [Inflate][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createInflateRaw([options])\",\n          \"type\": \"method\",\n          \"name\": \"createInflateRaw\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [InflateRaw][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"zlib.createUnzip([options])\",\n          \"type\": \"method\",\n          \"name\": \"createUnzip\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.8\"\n            ]\n          },\n          \"desc\": \"<p>Returns a new [Unzip][] object with an [options][].</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"Zlib\"\n    }\n  ],\n  \"stability\": 2,\n  \"stabilityText\": \"Stable\",\n  \"classes\": [\n    {\n      \"textRaw\": \"Class: Error\",\n      \"type\": \"class\",\n      \"name\": \"Error\",\n      \"desc\": \"<p>A generic JavaScript <code>Error</code> object that does not denote any specific\\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\\nprovide a text description of the error.</p>\\n<p>All errors generated by Node.js, including all System and JavaScript errors,\\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\\n\",\n      \"methods\": [\n        {\n          \"textRaw\": \"Error.captureStackTrace(targetObject[, constructorOpt])\",\n          \"type\": \"method\",\n          \"name\": \"captureStackTrace\",\n          \"desc\": \"<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\\na string representing the location in the code at which\\n<code>Error.captureStackTrace()</code> was called.</p>\\n<pre><code class=\\\"lang-js\\\">const myObject = {};\\nError.captureStackTrace(myObject);\\nmyObject.stack  // similar to `new Error().stack`\\n</code></pre>\\n<p>The first line of the trace, instead of being prefixed with <code>ErrorType:\\nmessage</code>, will be the result of calling <code>targetObject.toString()</code>.</p>\\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\\ngenerated stack trace.</p>\\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\\ndetails of error generation from an end user. For instance:</p>\\n<pre><code class=\\\"lang-js\\\">function MyError() {\\n  Error.captureStackTrace(this, MyError);\\n}\\n\\n// Without passing MyError to captureStackTrace, the MyError\\n// frame would show up in the .stack property. By passing\\n// the constructor, we omit that frame and all frames above it.\\nnew MyError().stack\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"targetObject\"\n                },\n                {\n                  \"name\": \"constructorOpt\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"Error.stackTraceLimit\",\n          \"name\": \"stackTraceLimit\",\n          \"desc\": \"<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\\n<code>Error.captureStackTrace(obj)</code>).</p>\\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\\n<p>If set to a non-number value, or set to a negative number, stack traces will\\nnot capture any frames.</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"error.message\",\n              \"name\": \"message\",\n              \"desc\": \"<p>Returns the string description of error as set by calling <code>new Error(message)</code>.\\nThe <code>message</code> passed to the constructor will also appear in the first line of\\nthe stack trace of the <code>Error</code>, however changing this property after the\\n<code>Error</code> object is created <em>may not</em> change the first line of the stack trace.</p>\\n<pre><code class=\\\"lang-js\\\">const err = new Error(&#39;The message&#39;);\\nconsole.log(err.message);\\n  // Prints: The message\\n</code></pre>\\n\"\n            },\n            {\n              \"textRaw\": \"error.stack\",\n              \"name\": \"stack\",\n              \"desc\": \"<p>Returns a string describing the point in the code at which the <code>Error</code> was\\ninstantiated.</p>\\n<p>For example:</p>\\n<pre><code>Error: Things keep happening!\\n   at /home/gbusey/file.js:525:2\\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\\n</code></pre><p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\\nEach frame describes a call site within the code that lead to the error being\\ngenerated. V8 attempts to display a name for each function (by variable name,\\nfunction name, or object method name), but occasionally it will not be able to\\nfind a suitable name. If V8 cannot determine a name for the function, only\\nlocation information will be displayed for that frame. Otherwise, the\\ndetermined function name will be displayed with location information appended\\nin parentheses.</p>\\n<p>It is important to note that frames are <strong>only</strong> generated for JavaScript\\nfunctions. If, for example, execution synchronously passes through a C++ addon\\nfunction called <code>cheetahify</code>, which itself calls a JavaScript function, the\\nframe representing the <code>cheetahify</code> call will <strong>not</strong> be present in the stack\\ntraces:</p>\\n<pre><code class=\\\"lang-js\\\">const cheetahify = require(&#39;./native-binding.node&#39;);\\n\\nfunction makeFaster() {\\n  // cheetahify *synchronously* calls speedy.\\n  cheetahify(function speedy() {\\n    throw new Error(&#39;oh no!&#39;);\\n  });\\n}\\n\\nmakeFaster(); // will throw:\\n  // /home/gbusey/file.js:6\\n  //     throw new Error(&#39;oh no!&#39;);\\n  //           ^\\n  // Error: oh no!\\n  //     at speedy (/home/gbusey/file.js:6:11)\\n  //     at makeFaster (/home/gbusey/file.js:5:3)\\n  //     at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\\n  //     at Module._compile (module.js:456:26)\\n  //     at Object.Module._extensions..js (module.js:474:10)\\n  //     at Module.load (module.js:356:32)\\n  //     at Function.Module._load (module.js:312:12)\\n  //     at Function.Module.runMain (module.js:497:10)\\n  //     at startup (node.js:119:16)\\n  //     at node.js:906:3\\n</code></pre>\\n<p>The location information will be one of:</p>\\n<ul>\\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\\n to Node.js.</li>\\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\\na user program, or its dependencies.</li>\\n</ul>\\n<p>The string representing the stack trace is lazily generated when the\\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\\n<p>The number of frames captured by the stack trace is bounded by the smaller of\\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\\nloop tick.</p>\\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\\ndetailed <a href=\\\"#errors_system_errors\\\">here</a>.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"signatures\": [\n        {\n          \"params\": [\n            {\n              \"name\": \"message\"\n            }\n          ],\n          \"desc\": \"<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\\nprovided text message. If an object is passed as <code>message</code>, the text message\\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\\nare dependent on [V8&#39;s stack trace API][]. Stack traces extend only to either\\n(a) the beginning of  <em>synchronous code execution</em>, or (b) the number of frames\\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\\n\"\n        }\n      ]\n    },\n    {\n      \"textRaw\": \"Class: RangeError\",\n      \"type\": \"class\",\n      \"name\": \"RangeError\",\n      \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\\nset or range of acceptable values for a function; whether that is a numeric\\nrange, or outside the set of options for a given function parameter.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">require(&#39;net&#39;).connect(-1);\\n  // throws RangeError, port should be &gt; 0 &amp;&amp; &lt; 65536\\n</code></pre>\\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\\nof argument validation.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"Class: ReferenceError\",\n      \"type\": \"class\",\n      \"name\": \"ReferenceError\",\n      \"desc\": \"<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\\nvariable that is not defined. Such errors commonly indicate typos in code, or\\nan otherwise broken program.</p>\\n<p>While client code may generate and propagate these errors, in practice, only V8\\nwill do so.</p>\\n<pre><code class=\\\"lang-js\\\">doesNotExist;\\n  // throws ReferenceError, doesNotExist is not a variable in this program.\\n</code></pre>\\n<p><code>ReferenceError</code> instances will have an <code>error.arguments</code> property whose value\\nis an array containing a single element: a string representing the variable\\nthat was not defined.</p>\\n<pre><code class=\\\"lang-js\\\">const assert = require(&#39;assert&#39;);\\ntry {\\n  doesNotExist;\\n} catch(err) {\\n  assert(err.arguments[0], &#39;doesNotExist&#39;);\\n}\\n</code></pre>\\n<p>Unless an application is dynamically generating and running code,\\n<code>ReferenceError</code> instances should always be considered a bug in the code\\nor its dependencies.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"Class: SyntaxError\",\n      \"type\": \"class\",\n      \"name\": \"SyntaxError\",\n      \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\\nThese errors may only be generated and propagated as a result of code\\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\\n<code>require</code>, or [vm][]. These errors are almost always indicative of a broken\\nprogram.</p>\\n<pre><code class=\\\"lang-js\\\">try {\\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\\n} catch(err) {\\n  // err will be a SyntaxError\\n}\\n</code></pre>\\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them \u2013\\nthey may only be caught by other contexts.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"Class: TypeError\",\n      \"type\": \"class\",\n      \"name\": \"TypeError\",\n      \"desc\": \"<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\\nallowable type. For example, passing a function to a parameter which expects a\\nstring would be considered a TypeError.</p>\\n<pre><code class=\\\"lang-js\\\">require(&#39;url&#39;).parse(() =&gt; { });\\n  // throws TypeError, since it expected a string\\n</code></pre>\\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\\nof argument validation.</p>\\n\"\n    }\n  ],\n  \"globals\": [\n    {\n      \"textRaw\": \"Class: Buffer\",\n      \"type\": \"global\",\n      \"name\": \"Buffer\",\n      \"desc\": \"<ul>\\n<li>{Function}</li>\\n</ul>\\n<p>Used to handle binary data. See the [buffer section][].</p>\\n\"\n    },\n    {\n      \"textRaw\": \"clearImmediate(immediateObject)\",\n      \"type\": \"global\",\n      \"name\": \"clearImmediate\",\n      \"desc\": \"<p>[<code>clearImmediate</code>] is described in the [timers][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"clearInterval(intervalObject)\",\n      \"type\": \"global\",\n      \"name\": \"clearInterval\",\n      \"desc\": \"<p>[<code>clearInterval</code>] is described in the [timers][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"clearTimeout(timeoutObject)\",\n      \"type\": \"global\",\n      \"name\": \"clearTimeout\",\n      \"desc\": \"<p>[<code>clearTimeout</code>] is described in the [timers][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"console\",\n      \"name\": \"console\",\n      \"type\": \"global\",\n      \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>Used to print to stdout and stderr. See the [<code>console</code>][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"global\",\n      \"name\": \"global\",\n      \"type\": \"global\",\n      \"desc\": \"<ul>\\n<li>{Object} The global namespace object.</li>\\n</ul>\\n<p>In browsers, the top-level scope is the global scope. That means that in\\nbrowsers if you&#39;re in the global scope <code>var something</code> will define a global\\nvariable. In Node.js this is different. The top-level scope is not the global\\nscope; <code>var something</code> inside an Node.js module will be local to that module.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"process\",\n      \"name\": \"process\",\n      \"type\": \"global\",\n      \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>The process object. See the [<code>process</code> object][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"setImmediate(callback[, arg][, ...])\",\n      \"type\": \"global\",\n      \"name\": \"setImmediate\",\n      \"desc\": \"<p>[<code>setImmediate</code>] is described in the [timers][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"setInterval(callback, delay[, arg][, ...])\",\n      \"type\": \"global\",\n      \"name\": \"setInterval\",\n      \"desc\": \"<p>[<code>setInterval</code>] is described in the [timers][] section.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"setTimeout(callback, delay[, arg][, ...])\",\n      \"type\": \"global\",\n      \"name\": \"setTimeout\",\n      \"desc\": \"<p>[<code>setTimeout</code>] is described in the [timers][] section.</p>\\n<!-- [end-include:globals.md] -->\\n<!-- [start-include:http.md] -->\\n\"\n    },\n    {\n      \"textRaw\": \"process\",\n      \"name\": \"process\",\n      \"type\": \"global\",\n      \"desc\": \"<p>The <code>process</code> object is a <code>global</code> that provides information about, and control\\nover, the current Node.js process. As a global, it is always available to\\nNode.js applications without using <code>require()</code>.</p>\\n\",\n      \"modules\": [\n        {\n          \"textRaw\": \"Process Events\",\n          \"name\": \"process_events\",\n          \"desc\": \"<p>The <code>process</code> object is an instance of [<code>EventEmitter</code>][].</p>\\n\",\n          \"events\": [\n            {\n              \"textRaw\": \"Event: 'beforeExit'\",\n              \"type\": \"event\",\n              \"name\": \"beforeExit\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.11.12\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;beforeExit&#39;</code> event is emitted when Node.js empties its event loop and has\\nno additional work to schedule. Normally, the Node.js process will exit when\\nthere is no work scheduled, but a listener registered on the <code>&#39;beforeExit&#39;</code>\\nevent can make asynchronous calls, and thereby cause the Node.js process to\\ncontinue.</p>\\n<p>The listener callback function is invoked with the value of\\n[<code>process.exitCode</code>][] passed as the only argument.</p>\\n<p>The <code>&#39;beforeExit&#39;</code> event is <em>not</em> emitted for conditions causing explicit\\ntermination, such as calling [<code>process.exit()</code>][] or uncaught exceptions.</p>\\n<p>The <code>&#39;beforeExit&#39;</code> should <em>not</em> be used as an alternative to the <code>&#39;exit&#39;</code> event\\nunless the intention is to schedule additional work.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'disconnect'\",\n              \"type\": \"event\",\n              \"name\": \"disconnect\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.7.7\"\n                ]\n              },\n              \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>&#39;disconnect&#39;</code> event will be emitted when\\nthe IPC channel is closed.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'exit'\",\n              \"type\": \"event\",\n              \"name\": \"exit\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.7\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;exit&#39;</code> event is emitted when the Node.js process is about to exit as a\\nresult of either:</p>\\n<ul>\\n<li>The <code>process.exit()</code> method being called explicitly;</li>\\n<li>The Node.js event loop no longer having any additional work to perform.</li>\\n</ul>\\n<p>There is no way to prevent the exiting of the event loop at this point, and once\\nall <code>&#39;exit&#39;</code> listeners have finished running the Node.js process will terminate.</p>\\n<p>The listener callback function is invoked with the exit code specified either\\nby the [<code>process.exitCode</code>][] property, or the <code>exitCode</code> argument passed to the\\n[<code>process.exit()</code>] method, as the only argument.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;exit&#39;, (code) =&gt; {\\n  console.log(`About to exit with code: ${code}`);\\n});\\n</code></pre>\\n<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js\\nprocess will exit immediately after calling the <code>&#39;exit&#39;</code> event listeners\\ncausing any additional work still queued in the event loop to be abandoned.\\nIn the following example, for instance, the timeout will never occur:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;exit&#39;, (code) =&gt; {\\n  setTimeout(() =&gt; {\\n    console.log(&#39;This will not run&#39;);\\n  }, 0);\\n});\\n</code></pre>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'message'\",\n              \"type\": \"event\",\n              \"name\": \"message\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.5.10\"\n                ]\n              },\n              \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>&#39;message&#39;</code> event is emitted whenever a\\nmessage sent by a parent process using [<code>childprocess.send()</code>][] is received by\\nthe child process.</p>\\n<p>The listener callback is invoked with the following arguments:</p>\\n<ul>\\n<li><code>message</code> {Object} a parsed JSON object or primitive value</li>\\n<li><code>sendHandle</code> {Handle object} a [<code>net.Socket</code>][] or [<code>net.Server</code>][] object, or\\nundefined.</li>\\n</ul>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'rejectionHandled'\",\n              \"type\": \"event\",\n              \"name\": \"rejectionHandled\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.4.1\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;rejectionHandled&#39;</code> event is emitted whenever a <code>Promise</code> has been rejected\\nand an error handler was attached to it (using [<code>promise.catch()</code>][], for\\nexample) later than one turn of the Node.js event loop.</p>\\n<p>The listener callback is invoked with a reference to the rejected <code>Promise</code> as\\nthe only argument.</p>\\n<p>The <code>Promise</code> object would have previously been emitted in an\\n<code>&#39;unhandledRejection&#39;</code> event, but during the course of processing gained a\\nrejection handler.</p>\\n<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can\\nalways be handled. Being inherently asynchronous in nature, a <code>Promise</code>\\nrejection can be handled at a future point in time \u2014 possibly much later than\\nthe event loop turn it takes for the <code>&#39;unhandledRejection&#39;</code> event to be emitted.</p>\\n<p>Another way of stating this is that, unlike in synchronous code where there is\\nan ever-growing list of unhandled exceptions, with Promises there can be a\\ngrowing-and-shrinking list of unhandled rejections.</p>\\n<p>In synchronous code, the <code>&#39;uncaughtException&#39;</code> event is emitted when the list of\\nunhandled exceptions grows.</p>\\n<p>In asynchronous code, the <code>&#39;unhandledRejection&#39;</code> event is emitted when the list\\nof unhandled rejections grows, and the <code>&#39;rejectionHandled&#39;</code> event is emitted\\nwhen the list of unhandled rejections shrinks.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">const unhandledRejections = new Map();\\nprocess.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\\n  unhandledRejections.set(p, reason);\\n});\\nprocess.on(&#39;rejectionHandled&#39;, (p) =&gt; {\\n  unhandledRejections.delete(p);\\n});\\n</code></pre>\\n<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,\\nreflecting rejections that start unhandled and then become handled. It is\\npossible to record such errors in an error log, either periodically (which is\\nlikely best for long-running application) or upon process exit (which is likely\\nmost convenient for scripts).</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'uncaughtException'\",\n              \"type\": \"event\",\n              \"name\": \"uncaughtException\",\n              \"meta\": {\n                \"added\": [\n                  \"v0.1.18\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;uncaughtException&#39;</code> event is emitted when an exception bubbles all the\\nway back to the event loop. By default, Node.js handles such exceptions by\\nprinting the stack trace to <code>stderr</code> and exiting. Adding a handler for the\\n<code>&#39;uncaughtException&#39;</code> event overrides this default behavior.</p>\\n<p>The listener function is called with the <code>Error</code> object passed as the only\\nargument.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;uncaughtException&#39;, (err) =&gt; {\\n  console.log(`Caught exception: ${err}`);\\n});\\n\\nsetTimeout(() =&gt; {\\n  console.log(&#39;This will still run.&#39;);\\n}, 500);\\n\\n// Intentionally cause an exception, but don&#39;t catch it.\\nnonexistentFunc();\\nconsole.log(&#39;This will not run.&#39;);\\n</code></pre>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"Warning: Using `'uncaughtException'` correctly\",\n                  \"name\": \"warning:_using_`'uncaughtexception'`_correctly\",\n                  \"desc\": \"<p>Note that <code>&#39;uncaughtException&#39;</code> is a crude mechanism for exception handling\\nintended to be used only as a last resort. The event <em>should not</em> be used as\\nan equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean\\nthat an application is in an undefined state. Attempting to resume application\\ncode without properly recovering from the exception can cause additional\\nunforeseen and unpredictable issues.</p>\\n<p>Exceptions thrown from within the event handler will not be caught. Instead the\\nprocess will exit with a non zero exit code and the stack trace will be printed.\\nThis is to avoid infinite recursion.</p>\\n<p>Attempting to resume normally after an uncaught exception can be similar to\\npulling out of the power cord when upgrading a computer -- nine out of ten\\ntimes nothing happens - but the 10th time, the system becomes corrupted.</p>\\n<p>The correct use of <code>&#39;uncaughtException&#39;</code> is to perform synchronous cleanup\\nof allocated resources (e.g. file descriptors, handles, etc) before shutting\\ndown the process. It is not safe to resume normal operation after\\n<code>&#39;uncaughtException&#39;</code>.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Warning: Using `'uncaughtException'` correctly\"\n                }\n              ],\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'unhandledRejection'\",\n              \"type\": \"event\",\n              \"name\": \"unhandledRejection\",\n              \"meta\": {\n                \"added\": [\n                  \"v1.4.1\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;unhandledRejection</code>&#39; event is emitted whenever a <code>Promise</code> is rejected and\\nno error handler is attached to the promise within a turn of the event loop. \\nWhen programming with Promises, exceptions are encapsulated as &quot;rejected\\npromises&quot;. Rejections can be caught and handled using [<code>promise.catch()</code>][] and\\nare propagated through a <code>Promise</code> chain. The <code>&#39;unhandledRejection&#39;</code> event is\\nuseful for detecting and keeping track of promises that were rejected whose \\nrejections have not yet been handled.</p>\\n<p>The listener function is called with the following arguments:</p>\\n<ul>\\n<li><code>reason</code> {Error|any} The object with which the promise was rejected\\n(typically an [<code>Error</code>][] objet).</li>\\n<li><code>p</code> the <code>Promise</code> that was rejected.</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\\n    console.log(&quot;Unhandled Rejection at: Promise &quot;, p, &quot; reason: &quot;, reason);\\n    // application specific logging, throwing an error, or other logic here\\n});\\n\\nsomePromise.then((res) =&gt; {\\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\\n}); // no `.catch` or `.then`\\n</code></pre>\\n<p>The following will also trigger the <code>&#39;unhandledRejection&#39;</code> event to be\\nemitted:</p>\\n<pre><code class=\\\"lang-js\\\">function SomeResource() {\\n  // Initially set the loaded status to a rejected promise\\n  this.loaded = Promise.reject(new Error(&#39;Resource not yet loaded!&#39;));\\n}\\n\\nvar resource = new SomeResource();\\n// no .catch or .then on resource.loaded for at least a turn\\n</code></pre>\\n<p>In this example case, it is possible to track the rejection as a developer error\\nas would typically be the case for other <code>&#39;unhandledRejection&#39;</code> events. To\\naddress such failures, a non-operational\\n[<code>.catch(() =&gt; { })</code>][<code>promise.catch()</code>] handler may be attached to\\n<code>resource.loaded</code>, which would prevent the <code>&#39;unhandledRejection&#39;</code> event from\\nbeing emitted. Alternatively, the [<code>&#39;rejectionHandled&#39;</code>][] event may be used.</p>\\n\",\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Event: 'warning'\",\n              \"type\": \"event\",\n              \"name\": \"warning\",\n              \"meta\": {\n                \"added\": [\n                  \"v6.0.0\"\n                ]\n              },\n              \"desc\": \"<p>The <code>&#39;warning&#39;</code> event is emitted whenever Node.js emits a process warning.</p>\\n<p>A process warning is similar to an error in that it describes exceptional\\nconditions that are being brought to the user&#39;s attention. However, warnings\\nare not part of the normal Node.js and JavaScript error handling flow.\\nNode.js can emit warnings whenever it detects bad coding practices that could\\nlead to sub-optimal application performance, bugs or security vulnerabilities.</p>\\n<p>The listener function is called with a single <code>warning</code> argument whose value is\\nan <code>Error</code> object. There are three key properties that describe the warning:</p>\\n<ul>\\n<li><code>name</code> {String} The name of the warning (currently <code>Warning</code> by default).</li>\\n<li><code>message</code> {String} A system-provided description of the warning.</li>\\n<li><code>stack</code> {String} A stack trace to the location in the code where the warning\\nwas issued.</li>\\n</ul>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;warning&#39;, (warning) =&gt; {\\n  console.warn(warning.name);    // Print the warning name\\n  console.warn(warning.message); // Print the warning message\\n  console.warn(warning.stack);   // Print the stack trace\\n});\\n</code></pre>\\n<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>\\ncommand-line option can be used to suppress the default console output but the\\n<code>&#39;warning&#39;</code> event will still be emitted by the <code>process</code> object.</p>\\n<p>The following example illustrates the warning that is printed to <code>stderr</code> when\\ntoo many listeners have been added to an event</p>\\n<pre><code>$ node\\n&gt; event.defaultMaxListeners = 1;\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; (node:38638) Warning: Possible EventEmitter memory leak detected. 2 foo\\n... listeners added. Use emitter.setMaxListeners() to increase limit\\n</code></pre><p>In contrast, the following example turns off the default warning output and\\nadds a custom handler to the <code>&#39;warning&#39;</code> event:</p>\\n<pre><code>$ node --no-warnings\\n&gt; var p = process.on(&#39;warning&#39;, (warning) =&gt; console.warn(&#39;Do not do that!&#39;));\\n&gt; event.defaultMaxListeners = 1;\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\\n&gt; Do not do that!\\n</code></pre><p>The <code>--trace-warnings</code> command-line option can be used to have the default\\nconsole output for warnings include the full stack trace of the warning.</p>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"Emitting custom warnings\",\n                  \"name\": \"emitting_custom_warnings\",\n                  \"desc\": \"<p>The [<code>process.emitWarning()</code>][process_emit_warning] method can be used to issue\\ncustom or application specific warnings.</p>\\n<pre><code class=\\\"lang-js\\\">// Emit a warning using a string...\\nprocess.emitWarning(&#39;Something happened!&#39;);\\n  // Prints: (node 12345) Warning: Something happened!\\n\\n// Emit a warning using an object...\\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\\n  // Prints: (node 12345) CustomWarning: Something happened!\\n\\n// Emit a warning using a custom Error object...\\nclass CustomWarning extends Error {\\n  constructor(message) {\\n    super(message);\\n    this.name = &#39;CustomWarning&#39;;\\n    Error.captureStackTrace(this, CustomWarning);\\n  }\\n}\\nconst myWarning = new CustomWarning(&#39;Something happened!&#39;);\\nprocess.emitWarning(myWarning);\\n  // Prints: (node 12345) CustomWarning: Something happened!\\n</code></pre>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Emitting custom warnings\"\n                },\n                {\n                  \"textRaw\": \"Emitting custom deprecation warnings\",\n                  \"name\": \"emitting_custom_deprecation_warnings\",\n                  \"desc\": \"<p>Custom deprecation warnings can be emitted by setting the <code>name</code> of a custom\\nwarning to <code>DeprecationWarning</code>. For instance:</p>\\n<pre><code class=\\\"lang-js\\\">process.emitWarning(&#39;This API is deprecated&#39;, &#39;DeprecationWarning&#39;);\\n</code></pre>\\n<p>Or,</p>\\n<pre><code class=\\\"lang-js\\\">const err = new Error(&#39;This API is deprecated&#39;);\\nerr.name = &#39;DeprecationWarning&#39;;\\nprocess.emitWarning(err);\\n</code></pre>\\n<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will\\ncause custom deprecation warnings to be thrown as exceptions.</p>\\n<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom\\ndeprecation to be printed to <code>stderr</code> along with the stack trace.</p>\\n<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting\\nof the custom deprecation.</p>\\n<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name\\n<code>DeprecationWarning</code>.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"Emitting custom deprecation warnings\"\n                }\n              ],\n              \"params\": []\n            },\n            {\n              \"textRaw\": \"Signal Events\",\n              \"name\": \"SIGINT, SIGHUP, etc.\",\n              \"type\": \"event\",\n              \"desc\": \"<p>Signal events will be emitted when the Node.js process receives a signal. Please\\nrefer to sigaction(2) for a listing of standard POSIX signal names such as\\n<code>SIGINT</code>, <code>SIGHUP</code>, etc.</p>\\n<p>The name of each event will be the uppercase common name for the signal (e.g.\\n<code>&#39;SIGINT&#39;</code> for <code>SIGINT</code> signals).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">// Begin reading from stdin so the process does not exit.\\nprocess.stdin.resume();\\n\\nprocess.on(&#39;SIGINT&#39;, () =&gt; {\\n  console.log(&#39;Received SIGINT.  Press Control-D to exit.&#39;);\\n});\\n</code></pre>\\n<p><em>Note</em>: An easy way to send the <code>SIGINT</code> signal is with <code>&lt;Ctrl&gt;-C</code> in most\\nterminal programs.</p>\\n<p>It is important to take note of the following:</p>\\n<ul>\\n<li><code>SIGUSR1</code> is reserved by Node.js to start the debugger.  It&#39;s possible to\\ninstall a listener but doing so will <em>not</em> stop the debugger from starting.</li>\\n<li><code>SIGTERM</code> and <code>SIGINT</code> have default handlers on non-Windows platforms that\\nresets the terminal mode before exiting with code <code>128 + signal number</code>. If\\none of these signals has a listener installed, its default behavior will be\\nremoved (Node.js will no longer exit).</li>\\n<li><code>SIGPIPE</code> is ignored by default. It can have a listener installed.</li>\\n<li><code>SIGHUP</code> is generated on Windows when the console window is closed, and on\\nother platforms under various similar conditions, see signal(7). It can have a\\nlistener installed, however Node.js will be unconditionally terminated by\\nWindows about 10 seconds later. On non-Windows platforms, the default\\nbehavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been\\ninstalled its default behavior will be removed.</li>\\n<li><code>SIGTERM</code> is not supported on Windows, it can be listened on.</li>\\n<li><code>SIGINT</code> from the terminal is supported on all platforms, and can usually be\\ngenerated with <code>CTRL+C</code> (though this may be configurable). It is not generated\\nwhen terminal raw mode is enabled.</li>\\n<li><code>SIGBREAK</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on\\nnon-Windows platforms it can be listened on, but there is no way to send or\\ngenerate it.</li>\\n<li><code>SIGWINCH</code> is delivered when the console has been resized. On Windows, this\\nwill only happen on write to the console when the cursor is being moved, or\\nwhen a readable tty is used in raw mode.</li>\\n<li><code>SIGKILL</code> cannot have a listener installed, it will unconditionally terminate\\nNode.js on all platforms.</li>\\n<li><code>SIGSTOP</code> cannot have a listener installed.</li>\\n</ul>\\n<p><em>Note</em>: Windows does not support sending signals, but Node.js offers some\\nemulation with [<code>process.kill()</code>][], and [<code>ChildProcess.kill()</code>][]. Sending\\nsignal <code>0</code> can be used to test for the existence of a process. Sending <code>SIGINT</code>,\\n<code>SIGTERM</code>, and <code>SIGKILL</code> cause the unconditional termination of the target\\nprocess.</p>\\n\",\n              \"params\": []\n            }\n          ],\n          \"type\": \"module\",\n          \"displayName\": \"Process Events\"\n        },\n        {\n          \"textRaw\": \"Exit Codes\",\n          \"name\": \"exit_codes\",\n          \"desc\": \"<p>Node.js will normally exit with a <code>0</code> status code when no more async\\noperations are pending.  The following status codes are used in other\\ncases:</p>\\n<ul>\\n<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,\\nand it was not handled by a domain or an [<code>&#39;uncaughtException&#39;</code>][] event\\nhandler.</li>\\n<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>\\n<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code\\ninternal in Node.js&#39;s bootstrapping process caused a parse error.  This\\nis extremely rare, and generally can only happen during development\\nof Node.js itself.</li>\\n<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript\\nsource code internal in Node.js&#39;s bootstrapping process failed to\\nreturn a function value when evaluated.  This is extremely rare, and\\ngenerally can only happen during development of Node.js itself.</li>\\n<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.\\nTypically a message will be printed to stderr with the prefix <code>FATAL\\nERROR</code>.</li>\\n<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an\\nuncaught exception, but the internal fatal exception handler\\nfunction was somehow set to a non-function, and could not be called.</li>\\n<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an\\nuncaught exception, and the internal fatal exception handler\\nfunction itself threw an error while attempting to handle it.  This\\ncan happen, for example, if a [<code>&#39;uncaughtException&#39;</code>][] or\\n<code>domain.on(&#39;error&#39;)</code> handler throws an error.</li>\\n<li><code>8</code> - Unused.  In previous versions of Node.js, exit code 8 sometimes\\nindicated an uncaught exception.</li>\\n<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,\\nor an option requiring a value was provided without a value.</li>\\n<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript\\nsource code internal in Node.js&#39;s bootstrapping process threw an error\\nwhen the bootstrapping function was called.  This is extremely rare,\\nand generally can only happen during development of Node.js itself.</li>\\n<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--debug</code> and/or <code>--debug-brk</code>\\noptions were set, but an invalid port number was chosen.</li>\\n<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as\\n<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the\\nvalue of the signal code.  This is a standard Unix practice, since\\nexit codes are defined to be 7-bit integers, and signal exits set\\nthe high-order bit, and then contain the value of the signal code.</li>\\n</ul>\\n<!-- [end-include:process.md] -->\\n<!-- [start-include:punycode.md] -->\\n\",\n          \"type\": \"module\",\n          \"displayName\": \"Exit Codes\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"process.abort()\",\n          \"type\": \"method\",\n          \"name\": \"abort\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\\ngenerate a core file.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.chdir(directory)\",\n          \"type\": \"method\",\n          \"name\": \"chdir\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.17\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`directory` {String} \",\n                  \"name\": \"directory\",\n                  \"type\": \"String\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"directory\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.chdir()</code> method changes the current working directory of the\\nNode.js process or throws an exception if doing so fails (for instance, if\\nthe specified <code>directory</code> does not exist).</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Starting directory: ${process.cwd()}`);\\ntry {\\n  process.chdir(&#39;/tmp&#39;);\\n  console.log(`New directory: ${process.cwd()}`);\\n}\\ncatch (err) {\\n  console.log(`chdir: ${err}`);\\n}\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.cpuUsage([previousValue])\",\n          \"type\": \"method\",\n          \"name\": \"cpuUsage\",\n          \"meta\": {\n            \"added\": [\n              \"v6.1.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`previousValue` {Array} A previous return value from calling `process.cpuUsage()` \",\n                  \"name\": \"previousValue\",\n                  \"type\": \"Array\",\n                  \"desc\": \"A previous return value from calling `process.cpuUsage()`\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"previousValue\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\\nvalues are microsecond values (millionth of a second). These values measure time\\nspent in user and system code respectively, and may end up being greater than\\nactual elapsed time if multiple CPU cores are performing work for this process.</p>\\n<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\\nargument to the function, to get a diff reading.</p>\\n<pre><code class=\\\"lang-js\\\">const startUsage = process.cpuUsage();\\n// { user: 38579, system: 6986 }\\n\\n// spin the CPU for 500 milliseconds\\nconst now = Date.now();\\nwhile (Date.now() - now &lt; 500);\\n\\nconsole.log(process.cpuUsage(startUsage));\\n// { user: 514883, system: 11226 }\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.cwd()\",\n          \"type\": \"method\",\n          \"name\": \"cwd\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.8\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\\nprocess.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Current directory: ${process.cwd()}`);\\n</code></pre>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.disconnect()\",\n          \"type\": \"method\",\n          \"name\": \"disconnect\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.2\"\n            ]\n          },\n          \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>process.disconnect()</code> method will close the\\nIPC channel to the parent process, allowing the child process to exit gracefully\\nonce there are no other connections keeping it alive.</p>\\n<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent\\nprocess&#39;s [<code>ChildProcess.disconnect()</code>][].</p>\\n<p>If the Node.js process was not spawned with an IPC channel,\\n<code>process.disconnect()</code> will be <code>undefined</code>.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.emitWarning(warning[, name][, ctor])\",\n          \"type\": \"method\",\n          \"name\": \"emitWarning\",\n          \"meta\": {\n            \"added\": [\n              \"v6.0.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`warning` {String | Error} The warning to emit. \",\n                  \"name\": \"warning\",\n                  \"type\": \"String | Error\",\n                  \"desc\": \"The warning to emit.\"\n                },\n                {\n                  \"textRaw\": \"`name` {String} When `warning` is a String, `name` is the name to use for the warning. Default: `Warning`. \",\n                  \"name\": \"name\",\n                  \"type\": \"String\",\n                  \"desc\": \"When `warning` is a String, `name` is the name to use for the warning. Default: `Warning`.\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`ctor` {Function} When `warning` is a String, `ctor` is an optional function used to limit the generated stack trace. Default `process.emitWarning` \",\n                  \"name\": \"ctor\",\n                  \"type\": \"Function\",\n                  \"desc\": \"When `warning` is a String, `ctor` is an optional function used to limit the generated stack trace. Default `process.emitWarning`\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"warning\"\n                },\n                {\n                  \"name\": \"name\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"ctor\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\\nspecific process warnings. These can be listened for by adding a handler to the\\n[<code>process.on(&#39;warning&#39;)</code>][process_warning] event.</p>\\n<pre><code class=\\\"lang-js\\\">// Emit a warning using a string...\\nprocess.emitWarning(&#39;Something happened!&#39;);\\n  // Emits: (node: 56338) Warning: Something happened!\\n</code></pre>\\n<pre><code>// Emit a warning using a string and a name...\\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\\n  // Emits: (node:56338) CustomWarning: Something Happened!\\n</code></pre><p>In each of the previous examples, an <code>Error</code> object is generated internally by\\n<code>process.emitWarning()</code> and passed through to the\\n[<code>process.on(&#39;warning&#39;)</code>][process_warning] event.</p>\\n<pre><code>process.on(&#39;warning&#39;, (warning) =&gt; {\\n  console.warn(warning.name);\\n  console.warn(warning.message);\\n  console.warn(warning.stack);\\n});\\n</code></pre><p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\\n<code>process.on(&#39;warning&#39;)</code> event handler unmodified (and the optional <code>name</code>\\nand <code>ctor</code> arguments will be ignored):</p>\\n<pre><code>// Emit a warning using an Error object...\\nconst myWarning = new Error(&#39;Warning! Something happened!&#39;);\\nmyWarning.name = &#39;CustomWarning&#39;;\\n\\nprocess.emitWarning(myWarning);\\n  // Emits: (node:56338) CustomWarning: Warning! Something Happened!\\n</code></pre><p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\\nobject.</p>\\n<p>Note that while process warnings use <code>Error</code> objects, the process warning\\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>\\n<p>The following additional handling is implemented if the warning <code>name</code> is\\n<code>DeprecationWarning</code>:</p>\\n<ul>\\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\\nwarning is thrown as an exception rather than being emitted as an event.</li>\\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\\nwarning is suppressed.</li>\\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\\n</ul>\\n\",\n          \"modules\": [\n            {\n              \"textRaw\": \"Avoiding duplicate warnings\",\n              \"name\": \"avoiding_duplicate_warnings\",\n              \"desc\": \"<p>As a best practice, warnings should be emitted only once per process. To do\\nso, it is recommended to place the <code>emitWarning()</code> behind a simple boolean\\nflag as illustrated in the example below:</p>\\n<pre><code>var warned = false;\\nfunction emitMyWarning() {\\n  if (!warned) {\\n    process.emitWarning(&#39;Only warn once!&#39;);\\n    warned = true;\\n  }\\n}\\nemitMyWarning();\\n  // Emits: (node: 56339) Warning: Only warn once!\\nemitMyWarning();\\n  // Emits nothing\\n</code></pre>\",\n              \"type\": \"module\",\n              \"displayName\": \"Avoiding duplicate warnings\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.exit([code])\",\n          \"type\": \"method\",\n          \"name\": \"exit\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.13\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`code` {Integer} The exit code. Defaults to `0`. \",\n                  \"name\": \"code\",\n                  \"type\": \"Integer\",\n                  \"desc\": \"The exit code. Defaults to `0`.\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"code\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.exit()</code> method instructs Node.js to terminate the process as\\nquickly as possible with the specified exit <code>code</code>. If the <code>code</code> is omitted,\\nexit uses either the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if\\nspecified.</p>\\n<p>To exit with a &#39;failure&#39; code:</p>\\n<pre><code class=\\\"lang-js\\\">process.exit(1);\\n</code></pre>\\n<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>\\n<p>It is important to note that calling <code>process.exit()</code> will force the process to\\nexit as quickly as possible <em>even if there are still asynchronous operations\\npending</em> that have not yet completed fully, <em>including</em> I/O operations to\\n<code>process.stdout</code> and <code>process.stderr</code>.</p>\\n<p>In most situations, it is not actually necessary to call <code>process.exit()</code>\\nexplicitly. The Node.js process will exit on it&#39;s own <em>if there is no additional\\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\\ntell the process which exit code to use when the process exits gracefully.</p>\\n<p>For instance, the following example illustrates a <em>misuse</em> of the\\n<code>process.exit()</code> method that could lead to data printed to stdout being\\ntruncated and lost:</p>\\n<pre><code class=\\\"lang-js\\\">// This is an example of what *not* to do:\\nif (someConditionNotMet()) {\\n  printUsageToStdout();\\n  process.exit(1);\\n}\\n</code></pre>\\n<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js\\nare usually <em>non-blocking</em> and may occur over multiple ticks of the Node.js\\nevent loop.\\nCalling <code>process.exit()</code>, however, forces the process to exit <em>before</em> those\\nadditional writes to <code>stdout</code> can be performed.</p>\\n<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\\nscheduling any additional work for the event loop:</p>\\n<pre><code class=\\\"lang-js\\\">// How to properly set the exit code while letting\\n// the process exit gracefully.\\nif (someConditionNotMet()) {\\n  printUsageToStdout();\\n  process.exitCode = 1;\\n}\\n</code></pre>\\n<p>If it is necessary to terminate the Node.js process due to an error condition,\\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\\nis safer than calling <code>process.exit()</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.getegid()\",\n          \"type\": \"method\",\n          \"name\": \"getegid\",\n          \"meta\": {\n            \"added\": [\n              \"v2.0.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.getegid()</code> method returns the numerical effective group identity\\nof the Node.js process. (See getegid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getegid) {\\n  console.log(`Current gid: ${process.getegid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows\\nor Android)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.geteuid()\",\n          \"type\": \"method\",\n          \"name\": \"geteuid\",\n          \"meta\": {\n            \"added\": [\n              \"v2.0.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\\nthe process. (See geteuid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.geteuid) {\\n  console.log(`Current uid: ${process.geteuid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.getgid()\",\n          \"type\": \"method\",\n          \"name\": \"getgid\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.getgid()</code> method returns the numerical group identity of the\\nprocess. (See getgid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getgid) {\\n  console.log(`Current gid: ${process.getgid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.getgroups()\",\n          \"type\": \"method\",\n          \"name\": \"getgroups\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.4\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.getgroups()</code> method returns an array with the supplementary group\\nIDs. POSIX leaves it unspecified if the effective group ID is included but\\nNode.js ensures it always is.</p>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.getuid()\",\n          \"type\": \"method\",\n          \"name\": \"getuid\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.28\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\\n(See getuid(2).)</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getuid) {\\n  console.log(`Current uid: ${process.getuid()}`);\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.hrtime([time])\",\n          \"type\": \"method\",\n          \"name\": \"hrtime\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.6\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.hrtime()</code> method returns the current high-resolution real time in a\\n<code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must\\nbe the result of a previous <code>process.hrtime()</code> call (and therefore, a real time\\nin a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff\\nwith the current time. These times are relative to an arbitrary time in the\\npast, and not related to the time of day and therefore not subject to clock\\ndrift. The primary use is for measuring performance between intervals.</p>\\n<p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for\\ncalculating an amount of time passed between calls:</p>\\n<pre><code class=\\\"lang-js\\\">var time = process.hrtime();\\n// [ 1800216, 25 ]\\n\\nsetTimeout(() =&gt; {\\n  var diff = process.hrtime(time);\\n  // [ 1, 552 ]\\n\\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\\n  // benchmark took 1000000527 nanoseconds\\n}, 1000);\\n</code></pre>\\n<p>Constructing an array by some method other than calling <code>process.hrtime()</code> and\\npassing the result to process.hrtime() will result in undefined behavior.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"time\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.initgroups(user, extra_group)\",\n          \"type\": \"method\",\n          \"name\": \"initgroups\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.4\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`user` {String|number} The user name or numeric identifier. \",\n                  \"name\": \"user\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"The user name or numeric identifier.\"\n                },\n                {\n                  \"textRaw\": \"`extra_group` {String|number} A group name or numeric identifier. \",\n                  \"name\": \"extra_group\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"A group name or numeric identifier.\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"user\"\n                },\n                {\n                  \"name\": \"extra_group\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\\nthe group access list, using all groups of which the user is a member. This is\\na privileged operation that requires that the Node.js process either have <code>root</code>\\naccess or the <code>CAP_SETGID</code> capability.</p>\\n<p>Note that care must be taken when dropping privileges. Example:</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.getgroups());         // [ 0 ]\\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\\nprocess.setgid(1000);                     // drop root gid\\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.kill(pid[, signal])\",\n          \"type\": \"method\",\n          \"name\": \"kill\",\n          \"meta\": {\n            \"added\": [\n              \"v0.0.6\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`pid` {number} A process ID \",\n                  \"name\": \"pid\",\n                  \"type\": \"number\",\n                  \"desc\": \"A process ID\"\n                },\n                {\n                  \"textRaw\": \"`signal` {String|number} The signal to send, either as a string or number. Defaults to `'SIGTERM'`. \",\n                  \"name\": \"signal\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"The signal to send, either as a string or number. Defaults to `'SIGTERM'`.\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"pid\"\n                },\n                {\n                  \"name\": \"signal\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\\n<code>pid</code>.</p>\\n<p>Signal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See [Signal Events][]\\nand kill(2) for more information.</p>\\n<p>This method will throw an error if the target <code>pid</code> does not exist. As a special\\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\\ngroup.</p>\\n<p><em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really\\njust a signal sender, like the <code>kill</code> system call.  The signal sent may do\\nsomething other than kill the target process.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.on(&#39;SIGHUP&#39;, () =&gt; {\\n  console.log(&#39;Got SIGHUP signal.&#39;);\\n});\\n\\nsetTimeout(() =&gt; {\\n  console.log(&#39;Exiting.&#39;);\\n  process.exit(0);\\n}, 100);\\n\\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\\n</code></pre>\\n<p><em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\\ndebugger, see [Signal Events][].</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.memoryUsage()\",\n          \"type\": \"method\",\n          \"name\": \"memoryUsage\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\\nof the Node.js process measured in bytes.</p>\\n<p>For example, the code:</p>\\n<pre><code class=\\\"lang-js\\\">const util = require(&#39;util&#39;);\\n\\nconsole.log(util.inspect(process.memoryUsage()));\\n</code></pre>\\n<p>Will generate:</p>\\n<pre><code class=\\\"lang-js\\\">{ \\n  rss: 4935680,\\n  heapTotal: 1826816,\\n  heapUsed: 650472 \\n}\\n</code></pre>\\n<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.nextTick(callback[, arg][, ...])\",\n          \"type\": \"method\",\n          \"name\": \"nextTick\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.26\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\"\n                },\n                {\n                  \"textRaw\": \"`[, arg][, ...]` {any} Additional arguments to pass when invoking the `callback` \",\n                  \"name\": \"[,\",\n                  \"desc\": \"arg][, ...]` {any} Additional arguments to pass when invoking the `callback`\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"callback\"\n                },\n                {\n                  \"name\": \"arg\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"...\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\\nOnce the current turn of the event loop turn runs to completion, all callbacks\\ncurrently in the next tick queue will be called.</p>\\n<p>This is <em>not</em> a simple alias to [<code>setTimeout(fn, 0)</code>][], it&#39;s much more\\nefficient.  It runs before any additional I/O events (including\\ntimers) fire in subsequent ticks of the event loop.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(&#39;start&#39;);\\nprocess.nextTick(() =&gt; {\\n  console.log(&#39;nextTick callback&#39;);\\n});\\nconsole.log(&#39;scheduled&#39;);\\n// Output:\\n// start\\n// scheduled\\n// nextTick callback\\n</code></pre>\\n<p>This is important when developing APIs in order to give users the opportunity\\nto assign event handlers <em>after</em> an object has been constructed but before any\\nI/O has occurred:</p>\\n<pre><code class=\\\"lang-js\\\">function MyThing(options) {\\n  this.setupOptions(options);\\n\\n  process.nextTick(() =&gt; {\\n    this.startDoingStuff();\\n  });\\n}\\n\\nvar thing = new MyThing();\\nthing.getReadyForStuff();\\n\\n// thing.startDoingStuff() gets called now, not before.\\n</code></pre>\\n<p>It is very important for APIs to be either 100% synchronous or 100%\\nasynchronous.  Consider this example:</p>\\n<pre><code class=\\\"lang-js\\\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\\nfunction maybeSync(arg, cb) {\\n  if (arg) {\\n    cb();\\n    return;\\n  }\\n\\n  fs.stat(&#39;file&#39;, cb);\\n}\\n</code></pre>\\n<p>This API is hazardous because in the following case:</p>\\n<pre><code class=\\\"lang-js\\\">maybeSync(true, () =&gt; {\\n  foo();\\n});\\nbar();\\n</code></pre>\\n<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>\\n<p>The following approach is much better:</p>\\n<pre><code class=\\\"lang-js\\\">function definitelyAsync(arg, cb) {\\n  if (arg) {\\n    process.nextTick(cb);\\n    return;\\n  }\\n\\n  fs.stat(&#39;file&#39;, cb);\\n}\\n</code></pre>\\n<p><em>Note</em>: the next tick queue is completely drained on each pass of the\\nevent loop <strong>before</strong> additional I/O is processed.  As a result,\\nrecursively setting nextTick callbacks will block any I/O from\\nhappening, just like a <code>while(true);</code> loop.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.send(message[, sendHandle[, options]][, callback])\",\n          \"type\": \"method\",\n          \"name\": \"send\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.9\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"return\": {\n                \"textRaw\": \"Return: {Boolean} \",\n                \"name\": \"return\",\n                \"type\": \"Boolean\"\n              },\n              \"params\": [\n                {\n                  \"textRaw\": \"`message` {Object} \",\n                  \"name\": \"message\",\n                  \"type\": \"Object\"\n                },\n                {\n                  \"textRaw\": \"`sendHandle` {Handle object} \",\n                  \"name\": \"sendHandle\",\n                  \"type\": \"Handle object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`options` {Object} \",\n                  \"name\": \"options\",\n                  \"type\": \"Object\",\n                  \"optional\": true\n                },\n                {\n                  \"textRaw\": \"`callback` {Function} \",\n                  \"name\": \"callback\",\n                  \"type\": \"Function\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"message\"\n                },\n                {\n                  \"name\": \"sendHandle\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"options\",\n                  \"optional\": true\n                },\n                {\n                  \"name\": \"callback\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\\nused to send messages to the parent process. Messages will be received as a\\n[<code>&#39;message&#39;</code>][] event on the parent&#39;s [<code>ChildProcess</code>][] object.</p>\\n<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\\n<code>undefined</code>.</p>\\n<p><em>Note</em>: This function uses [<code>JSON.stringify()</code>][] internally to serialize the\\n<code>message</code>.*</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.setegid(id)\",\n          \"type\": \"method\",\n          \"name\": \"setegid\",\n          \"meta\": {\n            \"added\": [\n              \"v2.0.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`id` {String|number} A group name or ID \",\n                  \"name\": \"id\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"A group name or ID\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.setegid()</code> method sets the effective group identity of the process.\\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\\nname string. If a group name is specified, this method blocks while resolving\\nthe associated a numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getegid &amp;&amp; process.setegid) {\\n  console.log(`Current gid: ${process.getegid()}`);\\n  try {\\n    process.setegid(501);\\n    console.log(`New gid: ${process.getegid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set gid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.seteuid(id)\",\n          \"type\": \"method\",\n          \"name\": \"seteuid\",\n          \"meta\": {\n            \"added\": [\n              \"v2.0.0\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`id` {String|number} A user name or ID \",\n                  \"name\": \"id\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"A user name or ID\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\\nstring.  If a username is specified, the method blocks while resolving the\\nassociated numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.geteuid &amp;&amp; process.seteuid) {\\n  console.log(`Current uid: ${process.geteuid()}`);\\n  try {\\n    process.seteuid(501);\\n    console.log(`New uid: ${process.geteuid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set uid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.setgid(id)\",\n          \"type\": \"method\",\n          \"name\": \"setgid\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.31\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`id` {String|number} The group name or ID \",\n                  \"name\": \"id\",\n                  \"type\": \"String|number\",\n                  \"desc\": \"The group name or ID\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.setgid()</code> method sets the group identity of the process. (See\\nsetgid(2).)  The <code>id</code> can be passed as either a numeric ID or a group name\\nstring. If a group name is specified, this method blocks while resolving the\\nassociated numeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getgid &amp;&amp; process.setgid) {\\n  console.log(`Current gid: ${process.getgid()}`);\\n  try {\\n    process.setgid(501);\\n    console.log(`New gid: ${process.getgid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set gid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.setgroups(groups)\",\n          \"type\": \"method\",\n          \"name\": \"setgroups\",\n          \"meta\": {\n            \"added\": [\n              \"v0.9.4\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`groups` {Array} \",\n                  \"name\": \"groups\",\n                  \"type\": \"Array\"\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"groups\"\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\\nNode.js proess. This is a privileged operation that requires the Node.js process\\nto have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>\\n<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.setuid(id)\",\n          \"type\": \"method\",\n          \"name\": \"setuid\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.28\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.setuid(id) method sets the user identity of the process. (See\\nsetuid(2).)  The</code>id` can be passed as either a numeric ID or a username string.\\nIf a username is specified, the method blocks while resolving the associated\\nnumeric ID.</p>\\n<pre><code class=\\\"lang-js\\\">if (process.getuid &amp;&amp; process.setuid) {\\n  console.log(`Current uid: ${process.getuid()}`);\\n  try {\\n    process.setuid(501);\\n    console.log(`New uid: ${process.getuid()}`);\\n  }\\n  catch (err) {\\n    console.log(`Failed to set uid: ${err}`);\\n  }\\n}\\n</code></pre>\\n<p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or\\nAndroid)</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"name\": \"id\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.umask([mask])\",\n          \"type\": \"method\",\n          \"name\": \"umask\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.19\"\n            ]\n          },\n          \"signatures\": [\n            {\n              \"params\": [\n                {\n                  \"textRaw\": \"`mask` {number} \",\n                  \"name\": \"mask\",\n                  \"type\": \"number\",\n                  \"optional\": true\n                }\n              ]\n            },\n            {\n              \"params\": [\n                {\n                  \"name\": \"mask\",\n                  \"optional\": true\n                }\n              ]\n            }\n          ],\n          \"desc\": \"<p>The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\\ncreation mask. Child processes inherit the mask from the parent process. The old\\nmask is return if the <code>mask</code> argument is given, otherwise returns the current\\nmask.</p>\\n<pre><code class=\\\"lang-js\\\">const newmask = 0o022;\\nconst oldmask = process.umask(newmask);\\nconsole.log(\\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\\n);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.uptime()\",\n          \"type\": \"method\",\n          \"name\": \"uptime\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\\nprocess has been running.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        }\n      ],\n      \"properties\": [\n        {\n          \"textRaw\": \"process.arch\",\n          \"name\": \"arch\",\n          \"meta\": {\n            \"added\": [\n              \"v0.5.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.arch</code> property returns a String identifying the processor\\narchitecture that the Node.js process is currently running on. For instance\\n<code>&#39;arm&#39;</code>, <code>&#39;ia32&#39;</code>, or <code>&#39;x64&#39;</code>.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This processor architecture is ${process.arch}`);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.argv\",\n          \"name\": \"argv\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.argv</code> property returns a array containing the command line\\narguments passed when the Node.js process was launched. The first element will\\nbe &#39;node&#39;, the second element will be the name of the JavaScript file. The\\nremaining elements will be any additional command line arguments.</p>\\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">// print process.argv\\nprocess.argv.forEach((val, index) =&gt; {\\n  console.log(`${index}: ${val}`);\\n});\\n</code></pre>\\n<p>Launching the Node.js process as:</p>\\n<pre><code>$ node process-2.js one two=three four\\n</code></pre><p>Would generate the output:</p>\\n<pre><code class=\\\"lang-text\\\">0: node\\n1: /Users/mjr/work/node/process-2.js\\n2: one\\n3: two=three\\n4: four\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.config\",\n          \"name\": \"config\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.config</code> property returns an Object containing the JavaScript\\nrepresentation of the configure options used to compile the current Node.js\\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\\nrunning the <code>./configure</code> script.</p>\\n<p>An example of the possible output looks like:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  target_defaults:\\n   { cflags: [],\\n     default_configuration: &#39;Release&#39;,\\n     defines: [],\\n     include_dirs: [],\\n     libraries: [] },\\n  variables:\\n   {\\n     host_arch: &#39;x64&#39;,\\n     node_install_npm: &#39;true&#39;,\\n     node_prefix: &#39;&#39;,\\n     node_shared_cares: &#39;false&#39;,\\n     node_shared_http_parser: &#39;false&#39;,\\n     node_shared_libuv: &#39;false&#39;,\\n     node_shared_zlib: &#39;false&#39;,\\n     node_use_dtrace: &#39;false&#39;,\\n     node_use_openssl: &#39;true&#39;,\\n     node_shared_openssl: &#39;false&#39;,\\n     strict_aliasing: &#39;true&#39;,\\n     target_arch: &#39;x64&#39;,\\n     v8_use_snapshot: &#39;true&#39;\\n   }\\n}\\n</code></pre>\\n<p><em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are\\nexisting modules in the ecosystem that are known to extend, modify, or entirely\\nreplace the value of <code>process.config</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.connected\",\n          \"name\": \"connected\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.2\"\n            ]\n          },\n          \"desc\": \"<p>If the Node.js process is spawned with an IPC channel (see the [Child Process][]\\nand [Cluster][] documentation), the <code>process.connected</code> property will return\\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\\n<code>process.disconnect()</code> is called.</p>\\n<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\\nover the IPC channel using <code>process.send()</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.env\",\n          \"name\": \"env\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.27\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.env</code> property returns an object containing the user environment.\\nSee environ(7).</p>\\n<p>An example of this object looks like:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  TERM: &#39;xterm-256color&#39;,\\n  SHELL: &#39;/usr/local/bin/bash&#39;,\\n  USER: &#39;maciej&#39;,\\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\\n  PWD: &#39;/Users/maciej&#39;,\\n  EDITOR: &#39;vim&#39;,\\n  SHLVL: &#39;1&#39;,\\n  HOME: &#39;/Users/maciej&#39;,\\n  LOGNAME: &#39;maciej&#39;,\\n  _: &#39;/usr/local/bin/node&#39; \\n}\\n</code></pre>\\n<p>It is possible to modify this object, but such modifications will not be\\nreflected outside the Node.js process. In other words, the following example\\nwould not work:</p>\\n<pre><code>$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\\n</code></pre><p>While the following will:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.foo = &#39;bar&#39;;\\nconsole.log(process.env.foo);\\n</code></pre>\\n<p>Assigning a property on <code>process.env</code> will implicitly convert the value\\nto a string.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.test = null;\\nconsole.log(process.env.test);\\n// =&gt; &#39;null&#39;\\nprocess.env.test = undefined;\\nconsole.log(process.env.test);\\n// =&gt; &#39;undefined&#39;\\n</code></pre>\\n<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"lang-js\\\">process.env.TEST = 1;\\ndelete process.env.TEST;\\nconsole.log(process.env.TEST);\\n// =&gt; undefined\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.execArgv\",\n          \"name\": \"execArgv\",\n          \"meta\": {\n            \"added\": [\n              \"v0.7.7\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.execArgv&#39; property returns the set of Node.js-specific command-line\\noptions passed when the Node.js process was launched. These options do not\\nappear in the array returned by the [</code>process.argv`][] property, and do not\\ninclude the Node.js executable, the name of the script, or any options following\\nthe script name. These options are useful in order to spawn child processes with\\nthe same execution environment as the parent.</p>\\n<p>For example:</p>\\n<pre><code>$ node --harmony script.js --version\\n</code></pre><p>Results in <code>process.execArgv</code>:</p>\\n<pre><code class=\\\"lang-js\\\">[&#39;--harmony&#39;]\\n</code></pre>\\n<p>And <code>process.argv</code>:</p>\\n<pre><code class=\\\"lang-js\\\">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.execPath\",\n          \"name\": \"execPath\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.100\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.execPath</code> property returns the absolute pathname of the executable\\nthat started the Node.js process.</p>\\n<p>For example:</p>\\n<pre><code>/usr/local/bin/node\\n</code></pre>\"\n        },\n        {\n          \"textRaw\": \"process.exitCode\",\n          \"name\": \"exitCode\",\n          \"meta\": {\n            \"added\": [\n              \"v0.11.8\"\n            ]\n          },\n          \"desc\": \"<p>A number which will be the process exit code, when the process either\\nexits gracefully, or is exited via [<code>process.exit()</code>][] without specifying\\na code.</p>\\n<p>Specifying a code to [<code>process.exit(code)</code>][<code>process.exit()</code>] will override any\\nprevious setting of <code>process.exitCode</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.mainModule\",\n          \"name\": \"mainModule\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.17\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.mainModule</code> property provides an alternative way of retrieving\\n[<code>require.main</code>][]. The difference is that if the main module changes at\\nruntime, [<code>require.main</code>][] may still refer to the original main module in\\nmodules that were required before the change occurred. Generally it&#39;s\\nsafe to assume that the two refer to the same module.</p>\\n<p>As with [<code>require.main</code>][], <code>process.mainModule</code> will be <code>undefined</code> if there\\nis no entry script.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.pid\",\n          \"name\": \"pid\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.15\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.pid</code> property returns the PID of the process.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This process is pid ${process.pid}`);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.platform\",\n          \"name\": \"platform\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.16\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.platform</code> property returns a string identifying the operating\\nsystem platform on which the Node.js process is running. For instance\\n<code>&#39;darwin&#39;</code>, <code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(`This platform is ${process.platform}`);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.release\",\n          \"name\": \"release\",\n          \"meta\": {\n            \"added\": [\n              \"v3.0.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.release</code> property returns an Object containing metadata related to\\nthe current release, including URLs for the source tarball and headers-only\\ntarball.</p>\\n<p><code>process.release</code> contains the following properties:</p>\\n<ul>\\n<li><code>name</code> {String} A value that will always be <code>&#39;node&#39;</code> for Node.js. For\\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\\n<li><code>sourceUrl</code> {String} an absolute URL pointing to a <code>_.tar.gz_</code> file containing\\nthe source code of the current release.</li>\\n<li><code>headersUrl</code>{String} an absolute URL pointing to a <code>_.tar.gz_</code> file containing\\nonly the source header files for the current release. This file is\\nsignificantly smaller than the full source file and can be used for compiling\\nNode.js native add-ons.</li>\\n<li><code>libUrl</code> {String} an absolute URL pointing to a <code>_node.lib_</code> file matching the\\narchitecture and version of the current release. This file is used for\\ncompiling Node.js native add-ons. <em>This property is only present on Windows\\nbuilds of Node.js and will be missing on all other platforms.</em></li>\\n<li><code>lts</code> {String} a string label identifying the [LTS][] label for this release.\\nIf the Node.js release is not an LTS release, this will be <code>undefined</code>.</li>\\n</ul>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  name: &#39;node&#39;,\\n  lts: &#39;Argon&#39;,\\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\\n}\\n</code></pre>\\n<p>In custom builds from non-release versions of the source tree, only the\\n<code>name</code> property may be present. The additional properties should not be\\nrelied upon to exist.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.stderr\",\n          \"name\": \"stderr\",\n          \"desc\": \"<p>The <code>process.stderr</code> property returns a [Writable][] stream equivalent to or\\nassociated with <code>stderr</code> (fd <code>2</code>).</p>\\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\\nthat they cannot be closed (calling [<code>end()</code>][] will throw an Error), they never\\nemit the [<code>&#39;finish&#39;</code>][] event, and writes can block when output is redirected to\\na file (although disks are fast and operating systems normally employ write-back\\ncaching so it should be a very rare occurrence indeed.)</p>\\n<p>Additionally, <code>process.stderr</code> and <code>process.stdout</code> are blocking when outputting\\nto TTYs (terminals) on OS X as a workaround for the OS&#39;s very small, 1kb\\nbuffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.stdin\",\n          \"name\": \"stdin\",\n          \"desc\": \"<p>The <code>process.stdin</code> property returns a [Readable][] stream equivalent to or\\nassociated with <code>stdin</code> (fd <code>0</code>).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">process.stdin.setEncoding(&#39;utf8&#39;);\\n\\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\\n  var chunk = process.stdin.read();\\n  if (chunk !== null) {\\n    process.stdout.write(`data: ${chunk}`);\\n  }\\n});\\n\\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\\n  process.stdout.write(&#39;end&#39;);\\n});\\n</code></pre>\\n<p>As a [Readable][] stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\\nis compatible with scripts written for Node.js prior to v0.10.\\nFor more information see [Stream compatibility][].</p>\\n<p><em>Note</em>: In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.stdout\",\n          \"name\": \"stdout\",\n          \"desc\": \"<p>The <code>process.stdout</code> propety returns a [Writable][] stream equivalent to or\\nassociated with <code>stdout</code> (fd <code>1</code>).</p>\\n<p>For example:</p>\\n<pre><code class=\\\"lang-js\\\">console.log = (msg) =&gt; {\\n  process.stdout.write(`${msg}\\\\n`);\\n};\\n</code></pre>\\n<p><code>process.stderr</code> and <code>process.stdout</code> are unlike other streams in Node.js in\\nthat they cannot be closed (calling [<code>end()</code>][] will throw an Error), they never\\nemit the [<code>&#39;finish&#39;</code>][] event and that writes can block when output is\\nredirected to a file (although disks are fast and operating systems normally\\nemploy write-back caching so it should be a very rare occurrence indeed.)</p>\\n<p>To check if Node.js is being run in a TTY context, read the <code>isTTY</code> property\\non <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>:</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"TTY Terminals and `process.stdout`\",\n              \"name\": \"stdout`\",\n              \"desc\": \"<p>The <code>process.stderr</code> and <code>process.stdout</code> streams are blocking when outputting\\nto TTYs (terminals) on OS X as a workaround for the operating system&#39;s small,\\n1kb buffer size. This is to prevent interleaving between <code>stdout</code> and <code>stderr</code>.</p>\\n<p>To check if Node.js is being run in a [TTY][] context, check the <code>isTTY</code>\\nproperty on <code>process.stderr</code>, <code>process.stdout</code>, or <code>process.stdin</code>.</p>\\n<p>For instance:</p>\\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\\ntrue\\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\\nfalse\\n\\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\\ntrue\\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\\nfalse\\n</code></pre><p>See the [TTY][] documentation for more information.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"process.title\",\n          \"name\": \"title\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.104\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.title</code> property returns the current process title (i.e. returns\\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\\nthe current value of <code>ps</code>.</p>\\n<p><em>Note</em>: When a new value is assigned, different platforms will impose different\\nmaximum length restrictions on the title. Usually such restrictions are quite\\nlimited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size\\nof the binary name plus the length of the command line arguments because setting\\nthe <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\\nallowed for longer process title strings by also overwriting the <code>environ</code>\\nmemory but that was potentially insecure and confusing in some (rather obscure)\\ncases.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"process.version\",\n          \"name\": \"version\",\n          \"meta\": {\n            \"added\": [\n              \"v0.1.3\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.version</code> property returns the Node.js version string.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(`Version: ${process.version}`);\\n</code></pre>\\n\"\n        },\n        {\n          \"textRaw\": \"process.versions\",\n          \"name\": \"versions\",\n          \"meta\": {\n            \"added\": [\n              \"v0.2.0\"\n            ]\n          },\n          \"desc\": \"<p>The <code>process.versions</code> property returns an object listing the version strings of\\nNode.js and its dependencies.</p>\\n<pre><code class=\\\"lang-js\\\">console.log(process.versions);\\n</code></pre>\\n<p>Will generate output similar to:</p>\\n<pre><code class=\\\"lang-js\\\">{\\n  http_parser: &#39;2.3.0&#39;,\\n  node: &#39;1.1.1&#39;,\\n  v8: &#39;4.1.0.14&#39;,\\n  uv: &#39;1.3.0&#39;,\\n  zlib: &#39;1.2.8&#39;,\\n  ares: &#39;1.10.0-DEV&#39;,\\n  modules: &#39;43&#39;,\\n  icu: &#39;55.1&#39;,\\n  openssl: &#39;1.0.1k&#39;\\n}\\n</code></pre>\\n\"\n        }\n      ]\n    }\n  ],\n  \"vars\": [\n    {\n      \"textRaw\": \"\\\\_\\\\_dirname\",\n      \"name\": \"\\\\_\\\\_dirname\",\n      \"type\": \"var\",\n      \"desc\": \"<ul>\\n<li>{String}</li>\\n</ul>\\n<p>The name of the directory that the currently executing script resides in.</p>\\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(__dirname);\\n// /Users/mjr\\n</code></pre>\\n<p><code>__dirname</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>For instance, given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of\\n<code>a</code> and there is a directory structure of:</p>\\n<ul>\\n<li><code>/Users/mjr/app/a.js</code></li>\\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\\n</ul>\\n<p>References to <code>__dirname</code> within <code>b.js</code> will return\\n<code>/Users/mjr/app/node_modules/b</code> while references to <code>__dirname</code> within <code>a.js</code>\\nwill return <code>/Users/mjr/app</code>.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"\\\\_\\\\_filename\",\n      \"name\": \"\\\\_\\\\_filename\",\n      \"type\": \"var\",\n      \"desc\": \"<ul>\\n<li>{String}</li>\\n</ul>\\n<p>The filename of the code being executed.  This is the resolved absolute path\\nof this code file.  For a main program this is not necessarily the same\\nfilename used in the command line.  The value inside a module is the path\\nto that module file.</p>\\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\\n<pre><code class=\\\"lang-js\\\">console.log(__filename);\\n// /Users/mjr/example.js\\n</code></pre>\\n<p><code>__filename</code> isn&#39;t actually a global but rather local to each module.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"exports\",\n      \"name\": \"exports\",\n      \"type\": \"var\",\n      \"desc\": \"<p>A reference to the <code>module.exports</code> that is shorter to type.\\nSee [module system documentation][] for details on when to use <code>exports</code> and\\nwhen to use <code>module.exports</code>.</p>\\n<p><code>exports</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>See the [module system documentation][] for more information.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"module\",\n      \"name\": \"module\",\n      \"type\": \"var\",\n      \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>A reference to the current module. In particular\\n<code>module.exports</code> is used for defining what a module exports and makes\\navailable through <code>require()</code>.</p>\\n<p><code>module</code> isn&#39;t actually a global but rather local to each module.</p>\\n<p>See the [module system documentation][] for more information.</p>\\n\"\n    },\n    {\n      \"textRaw\": \"require()\",\n      \"type\": \"var\",\n      \"name\": \"require\",\n      \"desc\": \"<ul>\\n<li>{Function}</li>\\n</ul>\\n<p>To require modules. See the [Modules][] section.  <code>require</code> isn&#39;t actually a\\nglobal but rather local to each module.</p>\\n\",\n      \"properties\": [\n        {\n          \"textRaw\": \"`cache` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"cache\",\n          \"desc\": \"<p>Modules are cached in this object when they are required. By deleting a key\\nvalue from this object, the next <code>require</code> will reload the module. Note that\\nthis does not apply to [native addons][], for which reloading will result in an\\nError.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"`extensions` {Object} \",\n          \"type\": \"Object\",\n          \"name\": \"extensions\",\n          \"stability\": 0,\n          \"stabilityText\": \"Deprecated\",\n          \"desc\": \"<p>Instruct <code>require</code> on how to handle certain file extensions.</p>\\n<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\\n</code></pre>\\n<p><strong>Deprecated</strong>  In the past, this list has been used to load\\nnon-JavaScript modules into Node.js by compiling them on-demand.\\nHowever, in practice, there are much better ways to do this, such as\\nloading modules via some other Node.js program, or compiling them to\\nJavaScript ahead of time.</p>\\n<p>Since the Module system is locked, this feature will probably never go\\naway.  However, it may have subtle bugs and complexities that are best\\nleft untouched.</p>\\n\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"textRaw\": \"require.resolve()\",\n          \"type\": \"method\",\n          \"name\": \"resolve\",\n          \"desc\": \"<p>Use the internal <code>require()</code> machinery to look up the location of a module,\\nbut rather than loading the module, just return the resolved filename.</p>\\n\",\n          \"signatures\": [\n            {\n              \"params\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/api/modules.json": "{\n  \"source\": \"doc/api/modules.md\",\n  \"modules\": [\n    {\n      \"textRaw\": \"Modules\",\n      \"name\": \"module\",\n      \"stability\": 3,\n      \"stabilityText\": \"Locked\",\n      \"desc\": \"<p>Node.js has a simple module loading system.  In Node.js, files and modules are\\nin one-to-one correspondence.  As an example, <code>foo.js</code> loads the module\\n<code>circle.js</code> in the same directory.</p>\\n<p>The contents of <code>foo.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const circle = require(&#39;./circle.js&#39;);\\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\\n</code></pre>\\n<p>The contents of <code>circle.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">const PI = Math.PI;\\n\\nexports.area = (r) =&gt; PI * r * r;\\n\\nexports.circumference = (r) =&gt; 2 * PI * r;\\n</code></pre>\\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and\\n<code>circumference()</code>.  To add functions and objects to the root of your module,\\nyou can add them to the special <code>exports</code> object.</p>\\n<p>Variables local to the module will be private, because the module is wrapped\\nin a function by Node.js (see <a href=\\\"#modules_the_module_wrapper\\\">module wrapper</a>).\\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\\n<p>If you want the root of your module&#39;s export to be a function (such as a\\nconstructor) or if you want to export a complete object in one assignment\\ninstead of building it one property at a time, assign it to <code>module.exports</code>\\ninstead of <code>exports</code>.</p>\\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p>\\n<pre><code class=\\\"lang-js\\\">const square = require(&#39;./square.js&#39;);\\nvar mySquare = square(2);\\nconsole.log(`The area of my square is ${mySquare.area()}`);\\n</code></pre>\\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\\n<pre><code class=\\\"lang-js\\\">// assigning to exports will not modify module, must use module.exports\\nmodule.exports = (width) =&gt; {\\n  return {\\n    area: () =&gt; width * width\\n  };\\n}\\n</code></pre>\\n<p>The module system is implemented in the <code>require(&quot;module&quot;)</code> module.</p>\\n\",\n      \"miscs\": [\n        {\n          \"textRaw\": \"Accessing the main module\",\n          \"name\": \"Accessing the main module\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>When a file is run directly from Node.js, <code>require.main</code> is set to its\\n<code>module</code>. That means that you can determine whether a file has been run\\ndirectly by testing</p>\\n<pre><code class=\\\"lang-js\\\">require.main === module\\n</code></pre>\\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but\\n<code>false</code> if run by <code>require(&#39;./foo&#39;)</code>.</p>\\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to\\n<code>__filename</code>), the entry point of the current application can be obtained\\nby checking <code>require.main.filename</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Addenda: Package Manager Tips\",\n          \"name\": \"Addenda: Package Manager Tips\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>The semantics of Node.js&#39;s <code>require()</code> function were designed to be general\\nenough to support a number of reasonable directory structures. Package manager\\nprograms such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to\\nbuild native packages from Node.js modules without modification.</p>\\n<p>Below we give a suggested directory structure that could work:</p>\\n<p>Let&#39;s say that we wanted to have the folder at\\n<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a\\nspecific version of a package.</p>\\n<p>Packages can depend on one another. In order to install package <code>foo</code>, you\\nmay have to install a specific version of package <code>bar</code>.  The <code>bar</code> package\\nmay itself have dependencies, and in some cases, these dependencies may even\\ncollide or form cycles.</p>\\n<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,\\nresolves symlinks), and then looks for their dependencies in the <code>node_modules</code>\\nfolders as described <a href=\\\"#modules_loading_from_node_modules_folders\\\">here</a>, this\\nsituation is very simple to resolve with the following architecture:</p>\\n<ul>\\n<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>\\n<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>\\ndepends on.</li>\\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to\\n<code>/usr/lib/node/bar/4.3.2/</code>.</li>\\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages\\nthat <code>bar</code> depends on.</li>\\n</ul>\\n<p>Thus, even if a cycle is encountered, or if there are dependency\\nconflicts, every module will be able to get a version of its dependency\\nthat it can use.</p>\\n<p>When the code in the <code>foo</code> package does <code>require(&#39;bar&#39;)</code>, it will get the\\nversion that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.\\nThen, when the code in the <code>bar</code> package calls <code>require(&#39;quux&#39;)</code>, it&#39;ll get\\nthe version that is symlinked into\\n<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\\n<p>Furthermore, to make the module lookup process even more optimal, rather\\nthan putting packages directly in <code>/usr/lib/node</code>, we could put them in\\n<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>.  Then Node.js will not bother\\nlooking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\\n<p>In order to make modules available to the Node.js REPL, it might be useful to\\nalso add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment\\nvariable.  Since the module lookups using <code>node_modules</code> folders are all\\nrelative, and based on the real path of the files making the calls to\\n<code>require()</code>, the packages themselves can be anywhere.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"All Together...\",\n          \"name\": \"All Together...\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>To get the exact filename that will be loaded when <code>require()</code> is called, use\\nthe <code>require.resolve()</code> function.</p>\\n<p>Putting together all of the above, here is the high-level algorithm\\nin pseudocode of what require.resolve does:</p>\\n<pre><code>require(X) from module at path Y\\n1. If X is a core module,\\n   a. return the core module\\n   b. STOP\\n2. If X begins with &#39;./&#39; or &#39;/&#39; or &#39;../&#39;\\n   a. LOAD_AS_FILE(Y + X)\\n   b. LOAD_AS_DIRECTORY(Y + X)\\n3. LOAD_NODE_MODULES(X, dirname(Y))\\n4. THROW &quot;not found&quot;\\n\\nLOAD_AS_FILE(X)\\n1. If X is a file, load X as JavaScript text.  STOP\\n2. If X.js is a file, load X.js as JavaScript text.  STOP\\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\\n4. If X.node is a file, load X.node as binary addon.  STOP\\n\\nLOAD_AS_DIRECTORY(X)\\n1. If X/package.json is a file,\\n   a. Parse X/package.json, and look for &quot;main&quot; field.\\n   b. let M = X + (json main field)\\n   c. LOAD_AS_FILE(M)\\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\\n3. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\\n4. If X/index.node is a file, load X/index.node as binary addon.  STOP\\n\\nLOAD_NODE_MODULES(X, START)\\n1. let DIRS=NODE_MODULES_PATHS(START)\\n2. for each DIR in DIRS:\\n   a. LOAD_AS_FILE(DIR/X)\\n   b. LOAD_AS_DIRECTORY(DIR/X)\\n\\nNODE_MODULES_PATHS(START)\\n1. let PARTS = path split(START)\\n2. let I = count of PARTS - 1\\n3. let DIRS = []\\n4. while I &gt;= 0,\\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\\n   b. DIRS = DIRS + DIR\\n   c. let I = I - 1\\n5. return DIRS\\n</code></pre>\"\n        },\n        {\n          \"textRaw\": \"Caching\",\n          \"name\": \"Caching\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Modules are cached after the first time they are loaded.  This means\\n(among other things) that every call to <code>require(&#39;foo&#39;)</code> will get\\nexactly the same object returned, if it would resolve to the same file.</p>\\n<p>Multiple calls to <code>require(&#39;foo&#39;)</code> may not cause the module code to be\\nexecuted multiple times.  This is an important feature.  With it,\\n&quot;partially done&quot; objects can be returned, thus allowing transitive\\ndependencies to be loaded even when they would cause cycles.</p>\\n<p>If you want to have a module execute code multiple times, then export a\\nfunction, and call that function.</p>\\n\",\n          \"miscs\": [\n            {\n              \"textRaw\": \"Module Caching Caveats\",\n              \"name\": \"Module Caching Caveats\",\n              \"type\": \"misc\",\n              \"desc\": \"<p>Modules are cached based on their resolved filename.  Since modules may\\nresolve to a different filename based on the location of the calling\\nmodule (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>\\nthat <code>require(&#39;foo&#39;)</code> will always return the exact same object, if it\\nwould resolve to different files.</p>\\n<p>Additionally, on case-insensitive file systems or operating systems, different\\nresolved filenames can point to the same file, but the cache will still treat\\nthem as different modules and will reload the file multiple times. For example,\\n<code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects,\\nirrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\\n\"\n            }\n          ]\n        },\n        {\n          \"textRaw\": \"Core Modules\",\n          \"name\": \"Core Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Node.js has several modules compiled into the binary.  These modules are\\ndescribed in greater detail elsewhere in this documentation.</p>\\n<p>The core modules are defined within Node.js&#39;s source and are located in the\\n<code>lib/</code> folder.</p>\\n<p>Core modules are always preferentially loaded if their identifier is\\npassed to <code>require()</code>.  For instance, <code>require(&#39;http&#39;)</code> will always\\nreturn the built in HTTP module, even if there is a file by that name.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Cycles\",\n          \"name\": \"Cycles\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>When there are circular <code>require()</code> calls, a module might not have finished\\nexecuting when it is returned.</p>\\n<p>Consider this situation:</p>\\n<p><code>a.js</code>:</p>\\n<pre><code>console.log(&#39;a starting&#39;);\\nexports.done = false;\\nconst b = require(&#39;./b.js&#39;);\\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\\nexports.done = true;\\nconsole.log(&#39;a done&#39;);\\n</code></pre><p><code>b.js</code>:</p>\\n<pre><code>console.log(&#39;b starting&#39;);\\nexports.done = false;\\nconst a = require(&#39;./a.js&#39;);\\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\\nexports.done = true;\\nconsole.log(&#39;b done&#39;);\\n</code></pre><p><code>main.js</code>:</p>\\n<pre><code>console.log(&#39;main starting&#39;);\\nconst a = require(&#39;./a.js&#39;);\\nconst b = require(&#39;./b.js&#39;);\\nconsole.log(&#39;in main, a.done=%j, b.done=%j&#39;, a.done, b.done);\\n</code></pre><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>.  At that\\npoint, <code>b.js</code> tries to load <code>a.js</code>.  In order to prevent an infinite\\nloop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the\\n<code>b.js</code> module.  <code>b.js</code> then finishes loading, and its <code>exports</code> object is\\nprovided to the <code>a.js</code> module.</p>\\n<p>By the time <code>main.js</code> has loaded both modules, they&#39;re both finished.\\nThe output of this program would thus be:</p>\\n<pre><code>$ node main.js\\nmain starting\\na starting\\nb starting\\nin b, a.done = false\\nb done\\nin a, b.done = true\\na done\\nin main, a.done=true, b.done=true\\n</code></pre><p>If you have cyclic module dependencies in your program, make sure to\\nplan accordingly.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"File Modules\",\n          \"name\": \"File Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the exact filename is not found, then Node.js will attempt to load the\\nrequired filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally\\n<code>.node</code>.</p>\\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are\\nparsed as JSON text files. <code>.node</code> files are interpreted as compiled addon\\nmodules loaded with <code>dlopen</code>.</p>\\n<p>A required module prefixed with <code>&#39;/&#39;</code> is an absolute path to the file.  For\\nexample, <code>require(&#39;/home/marco/foo.js&#39;)</code> will load the file at\\n<code>/home/marco/foo.js</code>.</p>\\n<p>A required module prefixed with <code>&#39;./&#39;</code> is relative to the file calling\\n<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for\\n<code>require(&#39;./circle&#39;)</code> to find it.</p>\\n<p>Without a leading &#39;/&#39;, &#39;./&#39;, or &#39;../&#39; to indicate a file, the module must\\neither be a core module or is loaded from a <code>node_modules</code> folder.</p>\\n<p>If the given path does not exist, <code>require()</code> will throw an [<code>Error</code>][] with its\\n<code>code</code> property set to <code>&#39;MODULE_NOT_FOUND&#39;</code>.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Folders as Modules\",\n          \"name\": \"Folders as Modules\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>It is convenient to organize programs and libraries into self-contained\\ndirectories, and then provide a single entry point to that library.\\nThere are three ways in which a folder may be passed to <code>require()</code> as\\nan argument.</p>\\n<p>The first is to create a <code>package.json</code> file in the root of the folder,\\nwhich specifies a <code>main</code> module.  An example package.json file might\\nlook like this:</p>\\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\\n</code></pre><p>If this was in a folder at <code>./some-library</code>, then\\n<code>require(&#39;./some-library&#39;)</code> would attempt to load\\n<code>./some-library/lib/some-library.js</code>.</p>\\n<p>This is the extent of Node.js&#39;s awareness of package.json files.</p>\\n<p>Note: If the file specified by the <code>&quot;main&quot;</code> entry of <code>package.json</code> is missing\\nand can not be resolved, Node.js will report the entire module as missing with\\nthe default error:</p>\\n<pre><code>Error: Cannot find module &#39;some-library&#39;\\n</code></pre><p>If there is no package.json file present in the directory, then Node.js\\nwill attempt to load an <code>index.js</code> or <code>index.node</code> file out of that\\ndirectory.  For example, if there was no package.json file in the above\\nexample, then <code>require(&#39;./some-library&#39;)</code> would attempt to load:</p>\\n<ul>\\n<li><code>./some-library/index.js</code></li>\\n<li><code>./some-library/index.node</code></li>\\n</ul>\\n\"\n        },\n        {\n          \"textRaw\": \"Loading from `node_modules` Folders\",\n          \"name\": \"Loading from `node_modules` Folders\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the module identifier passed to <code>require()</code> is not a native module,\\nand does not begin with <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code>, or <code>&#39;./&#39;</code>, then Node.js starts at the\\nparent directory of the current module, and adds <code>/node_modules</code>, and\\nattempts to load the module from that location. Node will not append\\n<code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\\n<p>If it is not found there, then it moves to the parent directory, and so\\non, until the root of the file system is reached.</p>\\n<p>For example, if the file at <code>&#39;/home/ry/projects/foo.js&#39;</code> called\\n<code>require(&#39;bar.js&#39;)</code>, then Node.js would look in the following locations, in\\nthis order:</p>\\n<ul>\\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\\n<li><code>/home/ry/node_modules/bar.js</code></li>\\n<li><code>/home/node_modules/bar.js</code></li>\\n<li><code>/node_modules/bar.js</code></li>\\n</ul>\\n<p>This allows programs to localize their dependencies, so that they do not\\nclash.</p>\\n<p>You can require specific files or sub modules distributed with a module by\\nincluding a path suffix after the module name. For instance\\n<code>require(&#39;example-module/path/to/file&#39;)</code> would resolve <code>path/to/file</code>\\nrelative to where <code>example-module</code> is located. The suffixed path follows the\\nsame module resolution semantics.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"Loading from the global folders\",\n          \"name\": \"Loading from the global folders\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list\\nof absolute paths, then Node.js will search those paths for modules if they\\nare not found elsewhere.  (Note: On Windows, <code>NODE_PATH</code> is delimited by\\nsemicolons instead of colons.)</p>\\n<p><code>NODE_PATH</code> was originally created to support loading modules from\\nvarying paths before the current [module resolution][] algorithm was frozen.</p>\\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js\\necosystem has settled on a convention for locating dependent modules.\\nSometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior\\nwhen people are unaware that <code>NODE_PATH</code> must be set.  Sometimes a\\nmodule&#39;s dependencies change, causing a different version (or even a\\ndifferent module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\\n<p>Additionally, Node.js will search in the following locations:</p>\\n<ul>\\n<li>1: <code>$HOME/.node_modules</code></li>\\n<li>2: <code>$HOME/.node_libraries</code></li>\\n<li>3: <code>$PREFIX/lib/node</code></li>\\n</ul>\\n<p>Where <code>$HOME</code> is the user&#39;s home directory, and <code>$PREFIX</code> is Node.js&#39;s\\nconfigured <code>node_prefix</code>.</p>\\n<p>These are mostly for historic reasons.  <strong>You are highly encouraged\\nto place your dependencies locally in <code>node_modules</code> folders.</strong>  They\\nwill be loaded faster, and more reliably.</p>\\n\"\n        },\n        {\n          \"textRaw\": \"The module wrapper\",\n          \"name\": \"The module wrapper\",\n          \"type\": \"misc\",\n          \"desc\": \"<p>Before a module&#39;s code is executed, Node.js will wrap it with a function\\nwrapper that looks like the following:</p>\\n<pre><code class=\\\"lang-js\\\">(function (exports, require, module, __filename, __dirname) {\\n// Your module code actually lives in here\\n});\\n</code></pre>\\n<p>By doing this, Node.js achieves a few things:</p>\\n<ul>\\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to\\nthe module rather than the global object.</li>\\n<li>It helps to provide some global-looking variables that are actually specific\\nto the module, such as:<ul>\\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export\\nvalues from the module.</li>\\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the\\nmodule&#39;s absolute filename and directory path.</li>\\n</ul>\\n</li>\\n</ul>\\n\"\n        }\n      ],\n      \"vars\": [\n        {\n          \"textRaw\": \"The `module` Object\",\n          \"name\": \"module\",\n          \"type\": \"var\",\n          \"desc\": \"<ul>\\n<li>{Object}</li>\\n</ul>\\n<p>In each module, the <code>module</code> free variable is a reference to the object\\nrepresenting the current module.  For convenience, <code>module.exports</code> is\\nalso accessible via the <code>exports</code> module-global. <code>module</code> isn&#39;t actually\\na global but rather local to each module.</p>\\n\",\n          \"properties\": [\n            {\n              \"textRaw\": \"`children` {Array} \",\n              \"type\": \"Array\",\n              \"name\": \"children\",\n              \"desc\": \"<p>The module objects required by this one.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`exports` {Object} \",\n              \"type\": \"Object\",\n              \"name\": \"exports\",\n              \"desc\": \"<p>The <code>module.exports</code> object is created by the Module system. Sometimes this is\\nnot acceptable; many want their module to be an instance of some class. To do\\nthis, assign the desired export object to <code>module.exports</code>. Note that assigning\\nthe desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,\\nwhich is probably not what you want to do.</p>\\n<p>For example suppose we were making a module called <code>a.js</code></p>\\n<pre><code class=\\\"lang-js\\\">const EventEmitter = require(&#39;events&#39;);\\n\\nmodule.exports = new EventEmitter();\\n\\n// Do some work, and after some time emit\\n// the &#39;ready&#39; event from the module itself.\\nsetTimeout(() =&gt; {\\n  module.exports.emit(&#39;ready&#39;);\\n}, 1000);\\n</code></pre>\\n<p>Then in another file we could do</p>\\n<pre><code class=\\\"lang-js\\\">const a = require(&#39;./a&#39;);\\na.on(&#39;ready&#39;, () =&gt; {\\n  console.log(&#39;module a is ready&#39;);\\n});\\n</code></pre>\\n<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be\\ndone in any callbacks.  This does not work:</p>\\n<p>x.js:</p>\\n<pre><code class=\\\"lang-js\\\">setTimeout(() =&gt; {\\n  module.exports = { a: &#39;hello&#39; };\\n}, 0);\\n</code></pre>\\n<p>y.js:</p>\\n<pre><code class=\\\"lang-js\\\">const x = require(&#39;./x&#39;);\\nconsole.log(x.a);\\n</code></pre>\\n\",\n              \"modules\": [\n                {\n                  \"textRaw\": \"exports alias\",\n                  \"name\": \"exports_alias\",\n                  \"desc\": \"<p>The <code>exports</code> variable that is available within a module starts as a reference\\nto <code>module.exports</code>. As with any variable, if you assign a new value to it, it\\nis no longer bound to the previous value.</p>\\n<p>To illustrate the behavior, imagine this hypothetical implementation of\\n<code>require()</code>:</p>\\n<pre><code class=\\\"lang-js\\\">function require(...) {\\n  // ...\\n  ((module, exports) =&gt; {\\n    // Your module code here\\n    exports = some_func;        // re-assigns exports, exports is no longer\\n                                // a shortcut, and nothing is exported.\\n    module.exports = some_func; // makes your module export 0\\n  })(module, module.exports);\\n  return module;\\n}\\n</code></pre>\\n<p>As a guideline, if the relationship between <code>exports</code> and <code>module.exports</code>\\nseems like magic to you, ignore <code>exports</code> and only use <code>module.exports</code>.</p>\\n\",\n                  \"type\": \"module\",\n                  \"displayName\": \"exports alias\"\n                }\n              ]\n            },\n            {\n              \"textRaw\": \"`filename` {String} \",\n              \"type\": \"String\",\n              \"name\": \"filename\",\n              \"desc\": \"<p>The fully resolved filename to the module.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`id` {String} \",\n              \"type\": \"String\",\n              \"name\": \"id\",\n              \"desc\": \"<p>The identifier for the module.  Typically this is the fully resolved\\nfilename.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`loaded` {Boolean} \",\n              \"type\": \"Boolean\",\n              \"name\": \"loaded\",\n              \"desc\": \"<p>Whether or not the module is done loading, or is in the process of\\nloading.</p>\\n\"\n            },\n            {\n              \"textRaw\": \"`parent` {Object} Module object \",\n              \"type\": \"Object\",\n              \"name\": \"parent\",\n              \"desc\": \"<p>The module that first required this one.</p>\\n\",\n              \"shortDesc\": \"Module object\"\n            }\n          ],\n          \"methods\": [\n            {\n              \"textRaw\": \"module.require(id)\",\n              \"type\": \"method\",\n              \"name\": \"require\",\n              \"signatures\": [\n                {\n                  \"return\": {\n                    \"textRaw\": \"Return: {Object} `module.exports` from the resolved module \",\n                    \"name\": \"return\",\n                    \"type\": \"Object\",\n                    \"desc\": \"`module.exports` from the resolved module\"\n                  },\n                  \"params\": [\n                    {\n                      \"textRaw\": \"`id` {String} \",\n                      \"name\": \"id\",\n                      \"type\": \"String\"\n                    }\n                  ]\n                },\n                {\n                  \"params\": [\n                    {\n                      \"name\": \"id\"\n                    }\n                  ]\n                }\n              ],\n              \"desc\": \"<p>The <code>module.require</code> method provides a way to load a module as if\\n<code>require()</code> was called from the original module.</p>\\n<p>Note that in order to do this, you must get a reference to the <code>module</code>\\nobject.  Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is\\ntypically <em>only</em> available within a specific module&#39;s code, it must be\\nexplicitly exported in order to be used.</p>\\n\"\n            }\n          ]\n        }\n      ],\n      \"type\": \"module\",\n      \"displayName\": \"module\"\n    }\n  ]\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/src/res/node.ico",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/sample.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/pseudo-multimember-gzip.z",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/google_ssl_hello.bin",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/pseudo-multimember-gzip.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/person.jpg.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/person.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/test_cert.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/test/fixtures/keys/agent1-pfx.pem",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/zlib/zlib.3.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/openssl/ms/.rnd",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/openssl/doc/openssl_define_list.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/v8/benchmarks/v8-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/uv/img/banner.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/icu-small/source/data/in/icudt57l.dat",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/html/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/github-com-BryanDonovan-dummy-npm-foo.git.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/github-com-BryanDonovan-dummy-npm-bar.git.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/github-com-BryanDonovan-dummy-npm-buzz.git.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/forked-underscore-1.5.1.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/scoped-underscore-1.3.1.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/npmignore.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/gitignore-and-npmignore.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/gitignore.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/test/fixtures/github-com-BryanDonovan-npm-git-test.git.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/retry/equation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/npmlog/node_modules/gauge/example.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/readable-stream/coverage/lcov-report/sort-arrow-sprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/request/node_modules/hawk/images/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/request/node_modules/hawk/images/hawk.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/request/node_modules/hawk/node_modules/boom/images/boom.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/request/node_modules/hawk/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/npm-registry-client/node_modules/retry/equation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/tar/test/cb-never-called-1.0.1.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/deps/npm/node_modules/tar/test/fixtures.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/osx_installer_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/thin-white-stripe.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-node-js-6.2.2-rhniyk4m3ptym6r5ndfyhyxa4v2tupqu/spack-src/doc/full-white-stripe.jpg"
    ],
    "total_files": 10164
}