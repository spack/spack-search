{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/doc_legacy/source/install.rst": ".. _installing:\n\nInstallation\n************\n\nInstallation with pip\n=====================\n\nThis is the recommended way to install PySCF::\n\n  $ pip install pyscf\n\nPypi provides a precompiled PySCF code (python wheel) which works on almost all\nLinux systems, and most of Mac OS X systems, and the ubuntu subsystems on Windows 10.\nIf you already have pyscf installed, you can upgrade it to the new version::\n\n  $ pip install --upgrade pyscf\n\nNote we observed that our precompiled python wheels sometimes does not work with\ncertain version of Python (python-3.4 and python-3.5).  If you're using mac OS X\nwith python-3.4 or python-3.5, pip may execute the setup.py file in the source\ncode and it may be terminated due to an error of library path of BLAS library.\nBLAS library is required to install PySCF library.  The installation script can\ndetect the installed BLAS libraries in the system and choose one for the\nprogram.  If BLAS library is existed but wasn't found by the installation\nscript, you can specify the BLAS library either through the environment\n``LDFLAGS``, e.g. ``LDFLAGS=\"-L/path/to/blas -lblas\" pip install pyscf`` or the\nenvironment variable ``PYSCF_INC_DIR``, e.g.\n``PYSCF_INC_DIR=/path/to/blas:/path/to/other/lib pip install`` to tell the\ninstallation script which BLAS libraries to link against.\nAnother issue of the installation script you may get is that pyscf.dft module is\nnot working.  pyscf.dft module requires the exchange-correlation functional\nlibrary ``libxc`` which was not yet available in the PyPI repository. To enable\npyscf.dft module, you can download and manually compile libxc library and set\nthe environment variable ``PYSCF_INC_DIR``, e.g. ``export PYSCF_INC_DIR=/path/to/libxc``\nbefore calling ``pip install`` command.  Libxc library can be found in\nhttp://octopus-code.org/wiki/Libxc:download.  When compiling the libxc library,\nyou need to add --enable-shared flag.\n\n\nInstallation with conda\n=======================\n\nIf you have `Conda <https://conda.io/docs/>`_ \n(or `Anaconda <https://www.continuum.io/downloads#linux>`_)\nenvironment, PySCF package can be installed with Conda cloud::\n\n  $ conda install -c pyscf pyscf\n\n\nPySCF docker image\n==================\n\nThe following command starts a container with the jupyter notebook server\nlistening for HTTP connections on port 8888::\n\n  $ docker run -it -p 8888:8888 pyscf/pyscf-1.5.0\n\nThen visit ``https://localhost:8888`` with your browser to use notebook and\npyscf.\n\nAnother way to use PySCF in docker container is to start an Ipython shell::\n\n  $ docker run -it pyscf/pyscf-1.5.0 start.sh ipython\n\n\n.. _compile_c_extensions:\nManual installation from github repo\n====================================\n\nManual installation requires `cmake <http://www.cmake.org>`_,\n`numpy <http://www.numpy.org/>`_, `scipy <http://www.scipy.org/>`_\nand `h5py <http://www.h5py.org/>`_ libraries.\nYou can download the latest PySCF (or the development branch) from github::\n\n  $ git clone https://github.com/sunqm/pyscf\n  $ cd pyscf\n  $ git checkout dev  # optional if you'd like to try out the development branch\n\nBuild the C extensions in :file:`pyscf/lib`::\n\n  $ cd pyscf/lib\n  $ mkdir build\n  $ cd build\n  $ cmake ..\n  $ make\n\nThis will automatically download the analytical GTO integral library `libcint\n<https://github.com/sunqm/libcint.git>`_ and the DFT exchange correlation\nfunctional libraries `libxc <http://www.tddft.org/programs/Libxc>`_ and `xcfun\n<https://github.com/dftlibs/xcfun.git>`_.  Finally, to make Python find\nthe :code:`pyscf` package, add the top-level :code:`pyscf` directory (not\nthe :code:`pyscf/pyscf` subdirectory) to :code:`PYTHONPATH`.  For example, if\n:code:`pyscf` is installed in ``/opt``, :code:`PYTHONPATH` should be like::\n\n  export PYTHONPATH=/opt/pyscf:$PYTHONPATH\n\nTo ensure the installation is successful, start a Python shell, and type::\n\n  >>> import pyscf\n\nFor Mac OS X/macOS, you may get an import error if your OS X/macOS version is\n10.11 or newer::\n\n    OSError: dlopen(xxx/pyscf/pyscf/lib/libcgto.dylib, 6): Library not loaded: libcint.3.0.dylib\n    Referenced from: xxx/pyscf/pyscf/lib/libcgto.dylib\n    Reason: unsafe use of relative rpath libcint.3.0.dylib in xxx/pyscf/pyscf/lib/libcgto.dylib with restricted binary\n\nThis is caused by the incorrect RPATH.  Script\n``pyscf/lib/_runme_to_fix_dylib_osx10.11.sh`` in ``pyscf/lib`` directory can be\nused to fix this problem::\n \n    cd pyscf/lib\n    sh _runme_to_fix_dylib_osx10.11.sh\n\n\n.. note::\n\n  RPATH has been built in the dynamic library.  This may cause library loading\n  error on some systems.  You can run ``pyscf/lib/_runme_to_remove_rpath.sh`` to\n  remove the rpath code from the library head.  Another workaround is to set\n  ``-DCMAKE_SKIP_RPATH=1`` and ``-DCMAKE_MACOSX_RPATH=0`` in cmake command line.\n  When the RPATH was removed, you need to add ``pyscf/lib`` and\n  ``pyscf/lib/deps/lib`` in ``LD_LIBRARY_PATH``.\n\nLast, it's recommended to set a scratch directory for PySCF.  The default scratch\ndirectory is controlled by environment variable :code:`PYSCF_TMPDIR`.  If it's\nnot specified, the system temporary directory :code:`TMPDIR` will be used as the\nscratch directory.\n\n\nInstallation without network\n============================\n\nIf you have problems to download the external libraries on your computer, you can\nmanually build the libraries, as shown in the following instructions.  First,\nyou need to install libcint, libxc or xcfun libraries.\n`libcint cint3 branch <https://github.com/sunqm/libcint/tree/cint3>`_\nand `xcfun stable-1.x branch <https://github.com/dftlibs/xcfun/tree/stable-1.x>`_\nare required by PySCF.  They can be downloaded from github::\n\n    $ git clone https://github.com/sunqm/libcint.git\n    $ cd libcint\n    $ git checkout origin/cint3\n    $ cd .. && tar czf libcint.tar.gz libcint\n\n    $ git clone https://github.com/dftlibs/xcfun.git\n    $ cd xcfun\n    $ git checkout 355f42497a9cd17d16ae91da1f1aaaf93756ae8b\n    $ cd .. && tar czf xcfun.tar.gz xcfun\n\nlibxc-3.* can be found in http://octopus-code.org/wiki/Main_Page or\n`here <http://sunqm.net/pyscf/files/src/libxc-3.0.0.tar.gz>`_.\nAssuming ``/opt`` is the place where these libraries will be installed, these\npackages should be compiled with the flags::\n\n    $ tar xvzf libcint.tar.gz\n    $ cd libcint\n    $ mkdir build && cd build\n    $ cmake -DWITH_F12=1 -DWITH_RANGE_COULOMB=1 -DWITH_COULOMB_ERF=1 \\\n        -DCMAKE_INSTALL_PREFIX:PATH=/opt -DCMAKE_INSTALL_LIBDIR:PATH=lib ..\n    $ make && make install\n\n    $ tar xvzf libxc-3.0.0.tar.gz\n    $ cd libxc-0.0.0\n    $ mkdir build && cd build\n    $ ../configure --prefix=/opt --libdir=/opt/lib --enable-shared --disable-fortran LIBS=-lm\n    $ make && make install\n\n    $ tar xvzf xcfun.tar.gz\n    $ cd xcfun\n    $ mkdir build && cd build\n    $ cmake -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_SHARED_LIBS=1 -DXC_MAX_ORDER=3 -DXCFUN_ENABLE_TESTS=0 \\\n        -DCMAKE_INSTALL_PREFIX:PATH=/opt -DCMAKE_INSTALL_LIBDIR:PATH=lib ..\n    $ make && make install\n\nNext, compile PySCF::\n\n    $ cd pyscf/pyscf/lib\n    $ mkdir build && cd build\n    $ cmake -DBUILD_LIBCINT=0 -DBUILD_LIBXC=0 -DBUILD_XCFUN=0 -DCMAKE_INSTALL_PREFIX:PATH=/opt ..\n    $ make\n\nFinally update the ``PYTHONPATH`` environment for Python interpreter.\n\n\n.. _installing_blas:\n\nUsing optimized BLAS\n====================\n\nThe default installation tries to find BLAS libraries automatically. This\nautomated setup script may link the code to slow BLAS libraries.  You can\ncompile the package with other BLAS vendors to improve performance, for example\nthe Intel Math Kernel Library (MKL), which can provide 10x speedup in many\nmodules::\n\n  $ cd pyscf/lib/build\n  $ cmake -DBLA_VENDOR=Intel10_64lp_seq ..\n  $ make\n\nWhen linking the program to MKL library, for some MKL versions, cmake may have\nproblems to find the correct MKL libraries.  Setting ``LD_LIBRARY_PATH`` to\ninclude the MKL dynamic libraries sometimes can help cmake to find the MKL\nlibraries, e.g.::\n\n  export LD_LIBRARY_PATH=/opt/intel/compilers_and_libraries_2018/linux/mkl/lib/intel64:$LD_LIBRARY_PATH\n\nIf you are using Anaconda as your Python-side platform, you can link PySCF\nto the MKL library coming with Anaconda package::\n\n  $ export MKLROOT=/path/to/anaconda2\n  $ export LD_LIBRARY_PATH=$MKLROOT/lib:$LD_LIBRARY_PATH\n  $ cd pyscf/lib/build\n  $ cmake -DBLA_VENDOR=Intel10_64lp_seq ..\n  $ make\n\nYou can link to other BLAS libraries by setting ``BLA_VENDOR``, eg\n``BLA_VENDOR=ATLAS``, ``BLA_VENDOR=IBMESSL``, ``BLA_VENDOR=OpenBLAS`` (requiring cmake-3.6).\nPlease refer to `cmake mannual <http://www.cmake.org/cmake/help/v3.6/module/FindBLAS.html>`_\nfor more details of the use of ``FindBLAS`` macro.\n\nIf the cmake ``BLA_VENDOR`` cannot find the right BLAS library as you expected,\nyou can assign the libraries to the variable ``BLAS_LIBRARIES`` in\n:file:`lib/CMakeLists.txt`::\n\n  set(BLAS_LIBRARIES \"${BLAS_LIBRARIES};/path/to/mkl/lib/intel64/libmkl_intel_lp64.so\")\n  set(BLAS_LIBRARIES \"${BLAS_LIBRARIES};/path/to/mkl/lib/intel64/libmkl_sequential.so\")\n  set(BLAS_LIBRARIES \"${BLAS_LIBRARIES};/path/to/mkl/lib/intel64/libmkl_core.so\")\n  set(BLAS_LIBRARIES \"${BLAS_LIBRARIES};/path/to/mkl/lib/intel64/libmkl_avx.so\")\n\n.. note::\n  MKL library may lead to an OSError at runtime:\n  ``OSError: ... mkl/lib/intel64/libmkl_avx.so: undefined symbol: ownLastTriangle_64fc``\n  or ``MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.``.\n  It can be solved by preloading MKL core library with:\n  ``export LD_PRELOAD=$MKLROOT/lib/intel64/libmkl_avx.so:$MKLROOT/lib/intel64/libmkl_core.so``\n\n\n.. _installing_qcint:\n\nUsing optimized integral library\n================================\n\nThe default integral library used by PySCF is\nlibcint (https://github.com/sunqm/libcint).  This integral library was\nimplemented in the model that ensures the compatibility on various high\nperformance computer systems.  For X86-64 platforms, libcint library has an\nefficient counterpart Qcint (https://github.com/sunqm/qcint)\nwhich is heavily optimized against X86 SIMD instructions (AVX-512/AVX2/AVX/SSE3).\nTo replace the default libcint library with qcint library, edit the URL\nof the integral library in lib/CMakeLists.txt file::\n\n  ExternalProject_Add(libcint\n     GIT_REPOSITORY\n     https://github.com/sunqm/qcint.git\n     ...\n\n\nCmake config file\n=================\nCmake options can be saved in a config file ``pyscf/lib/cmake.arch.inc``.\nSettings in this config file will be automatically loaded and overwritten the\ndefault cmake options during compilation.  For example, you can put\n``CMAKE_C_FLAGS`` in this config file to include advanced compiler optimization\nflags::\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffast-math -mtune=native -march=native\")\n\nOther settings and variables and flags can all be put in this config file::\n\n  set(ENABLE_XCFUN Off)\n  set(WITH_F12 Off)\n\nSome examples of platform specific configurations can be found in directory\n``pyscf/lib/cmake_arch_config``.\n\n\n.. _installing_plugin:\n\nPlugins\n=======\n\nnao\n---\n:mod:`pyscf/nao` module includes the basic functions of numerical atomic orbitals\n(NAO) and the (nao based) TDDFT methods.  This module was contributed by Marc\nBarbry and Peter Koval.  You can enable this module with a cmake flag::\n\n    $ cmake -DENABLE_NAO=1 ..\n\nMore information of the compilation can be found in :file:`pyscf/lib/nao/README.md`.\n\n\nDMRG solver\n-----------\nDensity matrix renormalization group (DMRG) implementations Block\n(https://sanshar.github.io/Block) and\nCheMPS2 (http://sebwouters.github.io/CheMPS2/index.html)\nare efficient DMRG solvers for ab initio quantum chemistry problem.\n`Installing Block <https://sanshar.github.io/Block/build.html>`_ requires\nC++11 compiler.  If C++11 is not supported by your compiler, you can\nregister and download the precompiled Block binary from\nhttps://sanshar.github.io/Block/build.html.\nBefore using the Block or CheMPS2, you need create a configuration file\n``pyscf/dmrgscf/settings.py``  (as shown by settings.py.example) to store\nthe path where the DMRG solver was installed.\n\n\nHeat-bath Selected CI\n---------------------\n`Dice <https://sanshar.github.io/Dice/>`_ is an efficient implementation for\nheat-bath selected CI (SHCI) algorithm.  It can be used with the CASCI and\nCASSCF module to solve large active space problems.  The method to use SHCI\nis very much like the use of DMRG program.  The path of Dice program and other\nconfigurations should be initialized in the configuration file\n``pyscf/shci/settings.py`` before using the SHCI method.\n\n\nFCIQMC\n------\nNECI (https://github.com/ghb24/NECI_STABLE) is FCIQMC code developed by\nGeorge Booth and Ali Alavi.  PySCF has an interface to call FCIQMC\nsolver NECI.  To use NECI, you need create a config file\nfuture/fciqmc/settings.py to store the path where NECI was installed.\n\n\nLibxc\n-----\nBy default, building PySCF will automatically download and install\n`Libxc 3.0.0 <http://www.tddft.org/programs/octopus/wiki/index.php/Libxc:download>`_.\n:mod:`pyscf.dft.libxc` module provided a general interface to access Libxc functionals.\n\n\nXcfun\n-----\nBy default, building PySCF will automatically download and install\nlatest xcfun code from https://github.com/dftlibs/xcfun.\n:mod:`pyscf.dft.xcfun` module provided a general interface to access Libxc\nfunctionals.\n\n\nTBLIS\n-----\n`TBLIS <https://github.com/devinamatthews/tblis>`_ provides a native algorithm\nto perform tensor contraction for arbitrary high dimensional tensors. The native\nalgorithm does not need to transform tensors into matrices then call the BLAS\nlibraries for the matrix contraction.  Tensor transposing and data moving are\nlargely avoided in TBLIS tensor library.  The interface to TBLIS offers an\nefficient implementation for :func:`numpy.einsum` style tensor contraction.\nTo enable the tlibs-einsum plugin, you can set the cmake flags\n``-DENABLE_TBLIS`` when compiling the C extensions::\n\n  $ cmake -DENABLE_TBLIS=ON ..\n\nNote TBLIS library was implemented with C++11 standard. You need at least GCC\n5.2 to compile this plugin.\n\n\nPyberny\n-------\nThe geometry optimizer `Pyberny <https://github.com/jhrmnn/pyberny>`_ provides an\nindependent implementation that supports various geometry optimization\ntechniques (comprising redundant internal coordinates, iterative Hessian\nestimate, trust region, line search, and coordinate weighing etc.).  It can take\nthe output of PySCF Gradients :ref:`scanner` and generate new geometry to feed\nback to PySCF program.  The geometry optimization :mod:`geomopt` exposes a\nwrapper function to simplify the geometry optimization setup::\n\n  from pyscf import gto, scf, geomopt\n  mf = gto.M(atom='H 0 0 0; H 0 0 1.').apply(scf.RHF)\n  mol_eq = geomopt.optimize(mf)\n\n\nXianCI\n------\nXianCI is a spin-adapted MRCI program.  \"Bingbing Suo\" <bsuo@nwu.edu.cn>\nis the main developer of XianCI program.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/lib/_runme_to_fix_dylib_osx10.11.sh": "#!/bin/bash\n#\n# This issue has been solved in PR #149.  Remove me in the future\n#\n\n\n# On Mac OSX 10.11 or newer, you may get error message if you use clang compiler\n#\n#  OSError: dlopen(xxx/pyscf/lib/libcgto.dylib, 6): Library not loaded: libcint.3.0.dylib\n#  Referenced from: xxx/pyscf/lib/libcgto.dylib\n#  Reason: unsafe use of relative rpath libcint.3.0.dylib in xxx/pyscf/lib/libao2mo.dylib with restricted binary\n#\n# It requires following fixing\n\ndirnow=$(pwd)/$(dirname $0)\n\ncd $dirnow\nfor i in *.dylib\ndo\n  echo install_name_tool -change libcint.3.0.dylib ${dirnow}/deps/lib/libcint.3.0.dylib ${dirnow}/$i\n  install_name_tool -change libcint.3.0.dylib ${dirnow}/deps/lib/libcint.3.0.dylib ${dirnow}/$i\n  echo install_name_tool -change libxcfun.dylib ${dirnow}/deps/lib/libxcfun.dylib ${dirnow}/$i\n  install_name_tool -change libxcfun.dylib ${dirnow}/deps/lib/libxcfun.dylib ${dirnow}/$i\ndone\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/.git/objects/pack/pack-820e9a0e8ccea620a2f5ad087cb08188e0a8c56f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/.git/objects/pack/pack-820e9a0e8ccea620a2f5ad087cb08188e0a8c56f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/doc_legacy/logo/logo-32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/doc_legacy/logo/logo-64x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/doc_legacy/logo/pyscf-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/examples/fci/spin_op_hamiltonian.h5",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/df/test/test_df_jk.pyc",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/pbc/tdscf/test/frozen_test_cderi.h5",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/pbc/gw/test/frozen_test_cderi.h5",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/fci/test/spin_op_hamiltonian.h5",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/n2.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water_sz.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/li.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/n2.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/oxygen.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/lih.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/oxygen.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water_sz.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/li.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/lih.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/water.scfout",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/lih.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/lih.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/tddft_iter_output_water_ref.hdf5",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/ice/siesta.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/ice/siesta.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/ice/siesta.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/ice/siesta.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/S2_triplet/S2.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/S2_triplet/S2.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_noghost/siesta.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_noghost/siesta.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_noghost/siesta.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_noghost/siesta.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_ghost/siesta.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_ghost/siesta.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_ghost/siesta.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/test_ag13_ghost/siesta.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/sodium_20/siesta.PLD",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/sodium_20/siesta.HSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/sodium_20/siesta.DIM",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/nao/test/sodium_20/siesta.fullBZ.WFSX",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyscf-1.7.3-mifl5yztocgpmsxjxy7qas6hog5iv7tt/spack-src/pyscf/dft/test/dm_h4.npy"
    ],
    "total_files": 2625
}