{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/shared_lib/Shared_Lib.hh": "//----------------------------------*-C++-*----------------------------------//\n/*!\n * \\file   shared_lib/Shared_Lib.hh\n * \\author Rob Lowrie\n * \\date   Thu Apr 15 20:44:39 2004\n * \\brief  Header file for Shared_Lib.\n * \\note   Copyright (C) 2016-2017 Los Alamos National Security, LLC.\n */\n//---------------------------------------------------------------------------//\n\n#ifndef rtt_shared_lib_Shared_Lib_hh\n#define rtt_shared_lib_Shared_Lib_hh\n\n#include <shared_lib/config.h>\n\n#include <ds++/Assert.hh>\n#include <string>\n\nnamespace rtt_shared_lib {\n\n//===========================================================================//\n/*!\n  \\class Shared_Lib\n  \\brief Controls access to a shared (dynamically linked) library.\n\n  Access to functions defined in the shared library is provided via the\n  get_function() member.\n\n  Under Draco, not all platforms support dynamic loading of shared libraries.\n  Consequently, in order to write cross-platform code, one must use the\n  static member function is_supported() to check whether the functionality of\n  Shared_Lib is supported.  As an example,\n  \\code\n  if ( Shared_Lib::is_supported() )\n  {\n     // OK, Shared_Lib is supported.\n     Shared_Lib s;\n     s.open(\"/usr/lib/libm.so\");\n     // ... other operations using s.\n  }\n  else\n  {\n     // Shared_Lib is unsupported!\n     Shared_Lib s;               // throws an error!!!\n     s.open(\"/usr/lib/libm.so\"); // won't get this far.\n  }\n  \\endcode\n  Note that the above code should compile on all platforms, but on\n  unsupported platforms, the \"else\" block will throw an error at run time.\n */\n/*!\n * \\example shared_lib/test/tstShared_Lib.cc\n *\n * This example shows how classes may be created through shared objects.\n*/\n//===========================================================================//\n\nclass Shared_Lib {\n  // DATA\n\n  // The handle to the shared library.\n  void *d_handle;\n\n  // The name of the shared library.\n  std::string d_file_name;\n\npublic:\n  // Default constructor.\n  explicit Shared_Lib(const std::string &file_name = \"\");\n\n  // Copy constructor.\n  explicit Shared_Lib(const Shared_Lib &from);\n\n  //! Destructor.  Automatically closes the shared library.\n  ~Shared_Lib() { close(); }\n\n  // Assignment.\n  Shared_Lib &operator=(const Shared_Lib &rhs);\n\n  // Closes the shared library.\n  void close();\n\n  //! Returns a handle to the shared library.\n  void *get_handle() const {\n    Require(is_open());\n    return d_handle;\n  }\n\n  //! Returns the shared file name.\n  std::string get_file_name() const { return d_file_name; }\n\n  // Returns a function pointer from the shared library.\n  template <class Fp_t> inline Fp_t get_function(const std::string &name);\n\n  //! Returns true if library is open.\n  bool is_open() const { return d_handle; }\n\n  //! Returns true if platform is supported.\n  static bool is_supported();\n\n  // Opens a shared library.\n  void open(const std::string &file_name);\n\nprivate:\n  // Does the dlsym() with error checking.\n  void *do_dlsym(const std::string &name);\n};\n\n//---------------------------------------------------------------------------//\n// INLINE FUNCTIONS\n//---------------------------------------------------------------------------//\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Returns a function pointer from the shared library.\n\n  The shared library must be opened before using this function.\n\n  \\param name The name of the function in the shared lib.\n  \\param Fp_t The function pointer type for the function \\a name.\n */\ntemplate <class Fp_t> Fp_t Shared_Lib::get_function(const std::string &name) {\n  Require(is_open());\n\n  // HACK WARNING: 5.2.10/6-7 implies that we cannot cast a\n  // pointer-to-object (in this case, the void* from dlsym) to a\n  // pointer-to-function.  If void* and Fp_t are different sizes, I suspect\n  // the hack below may not be portable. In the end, I suspect that platforms\n  // where this hack does not work don't support dlopen, anyway - lowrie\n\n  union {\n    void *vp;\n    Fp_t fp;\n  };\n  vp = do_dlsym(name);\n\n  return fp;\n}\n\n} // end namespace rtt_shared_lib\n\n#endif // rtt_shared_lib_Shared_Lib_hh\n\n//---------------------------------------------------------------------------//\n//              end of shared_lib/Shared_Lib.hh\n//---------------------------------------------------------------------------//\n",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/shared_lib/Shared_Lib.cc": "//----------------------------------*-C++-*----------------------------------//\n/*!\n * \\file   ds++/Shared_Lib.cc\n * \\author Rob Lowrie\n * \\date   Thu Apr 15 20:44:39 2004\n * \\brief  Implementation of Shared_Lib.\n * \\note   Copyright (C) 2016-2017 Los Alamos National Security, LLC.\n */\n//---------------------------------------------------------------------------//\n\n#include \"Shared_Lib.hh\"\n#include \"dlfcn_support.hh\"\n#include <sstream>\n\nnamespace rtt_shared_lib {\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Default constructor.\n\n  \\param file_name File name of the shared lib.  If empty, open() must be\n  called later in order to use a shared lib.\n*/\nShared_Lib::Shared_Lib(const std::string &file_name)\n    : d_handle(0), d_file_name(file_name) {\n  // is_supported must be checked for all constructors.\n  Insist(is_supported(), \"Shared_Lib unsupported on this platform!\");\n\n  if (!file_name.empty()) {\n    open(file_name);\n  }\n}\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Copy constructor.\n\n  This is implemented by opening a new handle to the shared file.\n*/\nShared_Lib::Shared_Lib(const Shared_Lib &from)\n    : d_handle(0), d_file_name(std::string()) {\n  open(from.d_file_name);\n}\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Assignment.\n\n  This is implemented by opening a new handle to the shared file.\n*/\nShared_Lib &Shared_Lib::operator=(const Shared_Lib &rhs) {\n  if (this == &rhs) {\n    return *this;\n  }\n\n  open(rhs.d_file_name);\n\n  return *this;\n}\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Closes the shared library, if it is open.\n*/\nvoid Shared_Lib::close() {\n  if (is_open()) {\n    dlclose(d_handle);\n    d_handle = 0;\n  }\n}\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Opens a shared library.\n\n  If a shared library is already open, that library is closed.\n\n  \\param file_name The name of the shared lib.\n*/\nvoid Shared_Lib::open(const std::string &file_name) {\n  Require(!file_name.empty());\n\n  close();\n\n  // RTLD_LAZY means symbols are resolved as they're needed.  We might want\n  // to make this an option, in the future.\n  d_handle = dlopen(file_name.c_str(), RTLD_LAZY);\n\n  d_file_name = file_name;\n\n  if (!is_open()) {\n    std::ostringstream m;\n    m << \"Shared_Lib::open(): Error opening shared file: \" << file_name;\n    m << \"\\ndlerror reports: \" << dlerror();\n    Insist(0, m.str());\n  }\n}\n\n//---------------------------------------------------------------------------//\n// PRIVATE FUNCTIONS\n//---------------------------------------------------------------------------//\n\n//---------------------------------------------------------------------------//\n/*!\n  \\brief Does the dlsym() with error checking.\n\n  The primary point of this function is to keep the dlfcn.h functions called\n  within this implementation file, while this function can be called from\n  within the header (i.e., within get_function()).\n\n  \\param name The name of function to load from the library.\n*/\nvoid *Shared_Lib::do_dlsym(const std::string &name) {\n  Require(is_open());\n  Require(!name.empty());\n\n  void *f = dlsym(d_handle, name.c_str());\n\n  const char *error_msg = dlerror();\n  if (error_msg) {\n    std::ostringstream m;\n    m << \"Shared_Lib::do_dlsym(): Error accessing symbol '\" << name;\n    m << \"' from file \" << d_file_name;\n    m << \"\\ndlerror reports: \" << error_msg;\n    Insist(0, error_msg);\n  }\n\n  return f;\n}\n\n} // end namespace rtt_shared_lib\n\n//---------------------------------------------------------------------------//\n//                 end of Shared_Lib.cc\n//---------------------------------------------------------------------------//\n",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/shared_lib/dlfcn_support.hh": "//----------------------------------*-C++-*----------------------------------//\n/*!\n * \\file   shared_lib/dlfcn_supported.hh\n * \\author Rob Lowrie\n * \\date   Thu Apr 15 20:44:39 2004\n * \\brief  Logic for dlfcn.h system header.\n * \\note   Copyright (C) 2016-2017 Los Alamos National Security, LLC.\n *         All rights reserved.\n */\n//---------------------------------------------------------------------------//\n// $Id$\n//---------------------------------------------------------------------------//\n\n#ifndef rtt_shared_lib_dlfcn_supported_hh\n#define rtt_shared_lib_dlfcn_supported_hh\n\n// This header isolates the use of the macro NO_DLOPEN for Shared_Lib.\n// It defines Shared_Lib::is_supported(), and whether the platform is\n// supported or not, defines the system functions.\n\n#ifdef USE_DLOPEN\n\n// ... then dynamic loading of shared libraries is supported.\n\n// Load the system header.\n\n#include <dlfcn.h>\n\nbool rtt_shared_lib::Shared_Lib::is_supported() { return true; }\n\n#else\n\n// ... then dynamic loading of shared libraries is unsupported.\n\nbool rtt_shared_lib::Shared_Lib::is_supported() { return false; }\n\n// Define dlfcn function stubs and constants so that Shared_Lib will compile.\n\nstatic const int RTLD_LAZY = 1; // or whatever.\n\nvoid *dlopen(const char * /*filename*/, int /*flag*/) {\n  Insist(0, \"Serious Shared_Lib error.\");\n  void *dummy(0);\n  return dummy;\n}\n\nconst char *dlerror(void) {\n  Insist(0, \"Serious Shared_Lib error.\");\n  return \"dummy\";\n}\n\nvoid *dlsym(void * /*handle*/, const char * /*symbol*/) {\n  Insist(0, \"Serious Shared_Lib error.\");\n  void *dummy(0);\n  return dummy;\n}\n\nint dlclose(void * /*handle*/) {\n  Insist(0, \"Serious Shared_Lib error.\");\n  return 1;\n}\n\n#endif // USE_DLOPEN\n\n#endif // rtt_shared_lib_dlfcn_supported_hh\n\n//---------------------------------------------------------------------------//\n// end of shared_lib/dlfcn_supported.hh\n//---------------------------------------------------------------------------//\n",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/shared_lib/test/Foo_Base.hh": "//----------------------------------*-C++-*----------------------------------//\n/*!\n * \\file   shared_lib/test/Foo_Base.hh\n * \\author Rob Lowrie\n * \\date   Wed Dec 29 11:24:17 2004\n * \\brief  Header for Foo_Base.\n * \\note   Copyright (C) 2016-2017 Los Alamos National Security, LLC.\n */\n//---------------------------------------------------------------------------//\n// $Id$\n//---------------------------------------------------------------------------//\n\n#ifndef shared_lib_test_Foo_Base_hh\n#define shared_lib_test_Foo_Base_hh\n\nnamespace rtt_shared_lib_test {\n\n//===========================================================================//\n/*!\n  \\class Foo_Base\n  \\brief An abstract base class.\n\n  This class may act as an abstract base class for derived classes that are\n  defined within a shared library.\n  \n  For more information, see the \"C++ dlopen mini HOWTO\" by Aaron Isotton.\n */\n//===========================================================================//\n\nclass Foo_Base {\npublic:\n  // Must define a virual destructor.  It's implementation should be linked\n  // in with the executable.\n  virtual ~Foo_Base() = 0;\n\n  // Compute something.\n  virtual double compute(const double x) const = 0;\n};\n\n} // end namespace rtt_shared_lib_test\n\n#endif // shared_lib_test_foo_hh\n\n//---------------------------------------------------------------------------//\n//              end of shared_lib/test/Foo_Base.hh\n//---------------------------------------------------------------------------//\n",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/shared_lib/test/Foo.hh": "//----------------------------------*-C++-*----------------------------------//\n/*!\n * \\file   shared_lib/test/Foo.hh\n * \\author Rob Lowrie\n * \\date   Wed Dec 29 11:24:17 2004\n * \\brief  Header for Foo.\n * \\note   Copyright (C) 2016-2017 Los Alamos National Security, LLC.\n */\n//---------------------------------------------------------------------------//\n// $Id$\n//---------------------------------------------------------------------------//\n\n#ifndef shared_lib_test_Foo_hh\n#define shared_lib_test_Foo_hh\n\n#include \"Foo_Base.hh\"\n\nnamespace rtt_shared_lib_test {\n\n//===========================================================================//\n/*!\n  \\class Foo\n  \\brief A simple class that may be defined in a shared library.\n\n  When loaded as a shared lib, objects of this class are created and\n  destroyed via the functions defined in creator_destroyer.cc.\n  \n  For more information, see the \"C++ dlopen mini HOWTO\" by Aaron Isotton.\n */\n//===========================================================================//\n\nclass Foo : public Foo_Base {\nprivate:\n  // DATA\n\n  // A base value.\n  double d_base;\n\npublic:\n  // CREATORS\n\n  // Constructor.\n  Foo(const double x);\n\n  // Compute something.\n  double compute(const double x) const;\n};\n\n} // end namespace rtt_shared_lib_test\n\n#endif // shared_lib_test_foo_hh\n\n//---------------------------------------------------------------------------//\n//              end of shared_lib/test/Foo.hh\n//---------------------------------------------------------------------------//\n",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/regression/valgrind_suppress.txt": "# -*-sh-*-\n#------------------------------------------------------------------------------#\n# File  : regression/valgrind_suppress.txt\n# Date  : Friday, May 19, 2017, 10:26 am\n# Author: Kelly Thompson <kgt@lanl.gov>\n# Breif : Valgrind Suppression Instructions\n# Note  : Copyright (C) 2016-2017, Los Alamos National Security, LLC.\n#         All rights are reserved.\n#------------------------------------------------------------------------------#\n#\n# Example valgrind use:\n#\n# valgrind -q --tool=memcheck --leak-check=full --show-reachable=yes\n#   --trace-children=yes --num-callers=50 --gen-suppressions=all\n#   --suppressions=\"$HOME/draco/regression/valgrind_suppress.txt\"\n#   mpirun -np 1 phw hello\n#\n# -------- OR --------\n#\n# ctest -D ExperimentalMemCheck -j 12 -R c4\n#\n#------------------------------------------------------------------------------#\n\n## -------------------------------------------------------------------------- ##\n## rhel7\n## -------------------------------------------------------------------------- ##\n{\n   rhel7/e001\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:gomp_realloc\n   ...\n}\n{\n   rhel7/e002\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:gomp_realloc\n   ...\n}\n{\n   rhel7/e003\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:gomp_malloc\n   ...\n}\n{\n   rhel7/e004\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   ...\n   fun:pthread_create@@GLIBC_2.2.5\n   ...\n}\n{\n   rhel7/e005\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:__fopen_internal\n   ...\n}\n\n## -------------------------------------------------------------------------- ##\n## CMake\n## -------------------------------------------------------------------------- ##\n\n{\n   ld/memcheck/leak\n   Memcheck:Leak\n   ...\n   obj:/*/ld\n   ...\n}\n{\n   cmake/memcheck/leak\n   Memcheck:Leak\n   ...\n   obj:/*/cmake\n   ...\n}\n{\n   as/memcheck/leak\n   Memcheck:Leak\n   ...\n   obj:/*/as\n   ...\n}\n{\n   cmake/handle_braces/memleak\n   Memcheck:Leak\n   ...\n   fun:handle_braces\n   fun:do_spec_1\n   ...\n}\n{\n   cmake/process_command/memleak\n   Memcheck:Leak\n   ...\n   fun:process_command\n   ...\n}\n{\n   cmake/find_a_file/memleak\n   Memcheck:Leak\n   ...\n   fun:find_a_file\n   ...\n}\n{\n   cmake/_obstack_begin/memleak\n   Memcheck:Leak\n   ...\n   fun:_obstack_begin\n   ...\n}\n{\n   cmake/xstrdup/memleak\n   Memcheck:Leak\n   ...\n   fun:xstrdup\n   ...\n}\n{\n   cmake/decode_options/memleak\n   Memcheck:Leak\n   ...\n   fun:decode_options\n   ...\n}\n{\n   cmake/concat/memleak\n   Memcheck:Leak\n   ...\n   fun:concat\n   ...\n}\n{\n   cmake/main/xcalloc/memleak\n   Memcheck:Leak\n   fun:calloc\n   fun:xcalloc\n   fun:main\n}\n{\n   cmake/main/malloc/cmake\n   Memcheck:Leak\n   ...\n   obj:*/cmake\n   ...\n}\n\n{\n\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Comm_dup\n   ...\n}\n\n## ---------------------------------------------------------------------- ##\n## Added with upgrade to valgrind 3.6.1\n## ---------------------------------------------------------------------- ##\n\n{\n   ld217/e001\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   obj:/usr/lib64/ld-2.17.so\n}\n{\n   tstSP/condjump/ld25so\n   Memcheck:Cond\n   fun:index\n   fun:expand_dynamic_string_token\n   ...\n   obj:/lib64/ld-2.5.so\n   ...\n}\n{\n   tstSP/condjump/ld25so\n   Memcheck:Cond\n   fun:_dl_relocate_object\n   ...\n   obj:/lib64/ld-2.5.so\n   ...\n}\n{\n   QueryEospac/condjump/ld25so1\n   Memcheck:Cond\n   fun:strlen\n   ...\n   obj:/lib/ld-2.5.so\n}\n{\n   QueryEospac/condjump/ld25so2\n   Memcheck:Cond\n   fun:_dl_relocate_object\n   ...\n   obj:/lib/ld-2.5.so\n}\n\n{\n   tstSP/condjump/ld212so\n   Memcheck:Cond\n   fun:index\n   fun:expand_dynamic_string_token\n   ...\n   obj:/lib64/ld-2.12.so\n   ...\n}\n{\n   tstSP/condjump/ld212so\n   Memcheck:Cond\n   fun:_dl_relocate_object\n   ...\n   obj:/lib64/ld-2.12.so\n   ...\n}\n{\n   QueryEospac/condjump/ld212so1\n   Memcheck:Cond\n   fun:strlen\n   ...\n   obj:/lib/ld-2.12.so\n}\n{\n   QueryEospac/condjump/ld212so2\n   Memcheck:Cond\n   fun:_dl_relocate_object\n   ...\n   obj:/lib/ld-2.12.so\n}\n\n\n## ---------------------------------------------------------------------- ##\n## EOSPAC 6\n## ---------------------------------------------------------------------- ##\n\n{\n   eospac/createtables/1\n   Memcheck:Cond\n   ...\n   fun:eos_CreateTables\n   ...\n}\n{\n   eospac/createtables/2\n   Memcheck:Value8\n   ...\n   fun:eos_CreateTables\n   ...\n}\n{\n   eospac/createtables/3\n   Memcheck:Addr8\n   ...\n   fun:eos_CreateTables\n   ...\n}\n{\n   eospac/createtableseosdatamap/1\n   Memcheck:Value8\n   ...\n   fun:eos_CreateTablesEosDataMap\n   ...\n}\n{\n   eospac/createtableseosdatamap/2\n   Memcheck:Cond\n   ...\n   fun:eos_CreateTablesEosDataMap\n   ...\n}\n{\n   eospac/createtableseosdatamap/3\n   Memcheck:Addr8\n   ...\n   fun:eos_CreateTablesEosDataMap\n   ...\n}\n\n## ---------------------------------------------------------------------- ##\n## Numdiff\n## ---------------------------------------------------------------------- ##\n\n# ==24572== Use of uninitialised value of size 8\n# ==24572==    at 0x38B5024F8B: __gmpn_mul_basecase (in /usr/lib64/libgmp.so.3.3.3)\n# ==24572==    by 0x38B501FB23: __gmpn_mul (in /usr/lib64/libgmp.so.3.3.3)\n# ==24572==    by 0x38B5008661: __gmpf_set_str (in /usr/lib64/libgmp.so.3.3.3)\n# ==24572==    by 0x4043D2: init_mpa (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==24572==    by 0x40ABB6: init_mpa_support (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==24572==    by 0x40BC6F: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n{\n   numdiff/uninit8/use\n   Memcheck:Value8\n   ...\n   fun:init_mpa\n   fun:init_mpa_support\n   fun:main\n}\n# ==18912== Conditional jump or move depends on uninitialised value(s)\n# ==18912==    at 0x38B501FB03: __gmpn_mul (in /usr/lib64/libgmp.so.3.3.3)\n# ==18912==    by 0x38B5008661: __gmpf_set_str (in /usr/lib64/libgmp.so.3.3.3)\n# ==18912==    by 0x4043D2: init_mpa (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18912==    by 0x40ABB6: init_mpa_support (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18912==    by 0x40BC6F: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Cond\n   ...\n   fun:__gmpf_set_str\n   fun:init_mpa\n   fun:init_mpa_support\n   fun:main\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Value8\n   fun:__gmpn_mul_basecase\n   ...\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Cond\n   fun:__gmpn_mul_basecase\n   ...\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Cond\n   ...\n   fun:init_mpa_support\n   ...\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Value8\n   fun:__gmpn_sqr_basecase\n   ...\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Value8\n   fun:__gmpn_sqr_n\n}\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Cond\n   ...\n   fun:__gmpn_divrem\n   ...\n}\n\n{\n   numdiff/lost/04\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:bc_new_num\n   fun:bc_a2num\n   fun:str2C\n   fun:field2cx\n   fun:cmp_fields\n   fun:cmp_lines\n   fun:cmp_files\n   fun:main\n}\n{\n   numdiff/lost/05\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:bc_new_num\n   fun:bc_sub\n   fun:Csub\n   fun:cmp_fields\n   fun:cmp_lines\n   fun:cmp_files\n   fun:main\n}\n{\n   numdiff/lost/06\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:bc_new_num\n   fun:bc_divide\n   fun:divide\n   fun:cmp_fields\n   fun:cmp_lines\n   fun:cmp_files\n   fun:main\n}\n\n\n\n#===================== text compare =============================================#\n\n# ==18889== Conditional jump or move depends on uninitialised value(s)\n# ==18889==    at 0x38B5007F48: __gmpf_set (in /usr/lib64/libgmp.so.3.3.3)\n# ==18889==    by 0x404740: Cabs (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18889==    by 0x4052C8: cmp_fields (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18889==    by 0x405CD2: cmp_lines (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18889==    by 0x40646B: cmp_files (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18889==    by 0x40BE6C: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n{\n   numdiff/text1\n   Memcheck:Cond\n   ...\n   fun:cmp_fields\n   fun:cmp_lines\n   fun:cmp_files\n   fun:main\n}\n# ==18881== Use of uninitialised value of size 8\n# ==18881==    at 0x38B500C9FD: __gmpf_cmp (in /usr/lib64/libgmp.so.3.3.3)\n# ==18881==    by 0x4048BB: cmp (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18881==    by 0x4052DB: cmp_fields (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18881==    by 0x405CD2: cmp_lines (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18881==    by 0x40646B: cmp_files (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n# ==18881==    by 0x40BE6C: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)\n{\n   numdiff/text/2\n   Memcheck:Value8\n   ...\n   fun:cmp_fields\n   fun:cmp_lines\n   fun:cmp_files\n   fun:main\n}\n# ==18871== Use of uninitialised value of size 8\n# ==18871==    at 0x38B501E9C0: __gmpn_divrem_1 (in /usr/lib64/libgmp.so.3.3.3)\n{\n   numdiff/text/3\n   Memcheck:Value8\n   ...\n   fun:__gmpn_divrem_1\n   ...\n}\n# ==25358== Use of uninitialised value of size 8\n# ==25358==    at 0x38B501E9C0: __gmpn_divrem_1 (in /usr/lib64/libgmp.so.3.3.3)\n{\n   numdiff/text/4\n   Memcheck:Value8\n   ...\n   fun:__gmpn_divrem\n   ...\n}\n{\n   numdiff/lost/03\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:bc_new_num\n   fun:bc_init_numbers\n   fun:init_mpa\n   fun:init_mpa_support\n   fun:main\n}\n{\n   numdiff/lost/04\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:calloc\n   fun:process_substring\n   fun:get_separating_string\n   ...\n}\n\n#==================== F90 open/read/write errors ====================#\n{\n   fortran/open\n   Memcheck:Addr8\n   fun:for__add_to_lf_table\n   fun:for__open_proc\n   fun:for_open\n   ...\n}\n{\n   fortran/read/1\n   Memcheck:Cond\n   fun:for__nml_lex\n   fun:for_read_seq_nml\n   ...\n}\n{\n   fortran/write/1\n   Memcheck:Cond\n   ...\n   fun:_gfortrani_write_i\n   ...\n}\n{\n   fortran/parse/1\n   Memcheck:Addr8\n   fun:__strncmp_sse42\n   fun:_gfortrani_parse_format\n   fun:data_transfer_init\n   ...\n}\n{\n   fortran/write_integer/1\n   Memcheck:Value8\n   ...\n   fun:write_integer\n   fun:_gfortrani_list_formatted_write\n   ...\n}\n{\n   fortran/write_integer/1\n   Memcheck:Cond\n   ...\n   fun:_gfortrani_list_formatted_write\n   ...\n}\n{\n   fortran/st_write_done/1\n   Memcheck:Cond\n   ...\n   fun:_gfortran_st_write_done\n   ...\n}\n{\n   fortran/st_write_done/2\n   Memcheck:Value8\n   fun:_gfortrani_next_record\n   fun:_gfortran_st_write_done\n   fun:MAIN__\n   fun:main\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Cond\n   fun:_gfortrani_fbuf_alloc\n   fun:_gfortrani_write_block\n   fun:_gfortrani_write_a\n   fun:formatted_transfer\n   ...\n}\n\n#================ libc problems =====================================#\n# See https://bugzilla.redhat.com/show_bug.cgi?id=629976\n# This only shows up for fortran main().\n{\n   libc/free/error/below/main/1\n   Memcheck:Free\n   fun:free\n   fun:free_mem\n   fun:__libc_freeres\n   fun:_vgnU_freeres\n   fun:exit\n   fun:(below main)\n}\n\n#=============== C++ string issues (gcc-4.8.1) ===============#\n\n{\n   # Memcheck:Cond\n   # fun:__strlen_sse42\n   # fun:std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)\n   gcc481/basic_string/strlen/1\n   Memcheck:Cond\n   fun:__strlen_sse42\n   fun:_ZNSsC1EPKcRKSaIcE\n   ...\n}\n{\n   gcc481/basic_string/strlen/2\n   Memcheck:Addr8\n   fun:__strlen_sse42\n   fun:_ZNSsC1EPKcRKSaIcE\n   ...\n}\n{\n   # Memcheck:Cond\n   # fun:char* std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)\n   # fun:std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)\n   gcc481/basic_string/S_construct/1\n   Memcheck:Cond\n   ...\n   fun:_ZNSsC1EPKcRKSaIcE\n   ...\n}\n\n{\n   gcc481/basic_string/S_construct/3\n   # Memcheck:Value8\n   # fun:memcpy\n   # fun:char* std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)\n   # fun:std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)\n   Memcheck:Value8\n   ...\n   fun:_ZNSsC1EPKcRKSaIcE\n   ...\n}\n{\n   gcc481/basic_string/notequal/1\n   # fun:bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n   Memcheck:Cond\n   ...\n   fun:_ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_\n   ...\n}\n{\n   gcc481/basic_string/notequal/2\n   # fun:bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n   Memcheck:Value8\n   ...\n   fun:_ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_\n   ...\n}\n{\n   gcc481/basic_string/operatorplus/1\n   # fun:std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n   Memcheck:Value8\n   ...\n   fun:_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_RKS6_\n   ...\n}\n{\n   gcc481/basic_string/operatorplus/2\n   # fun:std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n   Memcheck:Cond\n   ...\n   fun:_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_RKS6_\n   ...\n}\n{\n   gcc481/basic_string/operatorplus/3\n   Memcheck:Cond\n   ...\n   fun:_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_S3_\n   ...\n}\n{\n   gcc481/basic_string/operatorplus/4\n   Memcheck:Value8\n   ...\n   fun:_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EOS6_S3_\n   ...\n}\n{\n   gcc481/basic_ostream/insert/1\n   Memcheck:Cond\n   # fun:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)\n   fun:_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l\n   ...\n}\n{\n   gcc481/basic_ostream/insert/2\n   # fun:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)\n   Memcheck:Cond\n   ...\n   fun:_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l\n   ...\n}\n{\n   gcc481/basic_ostream/insert/3\n   # fun:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)\n   Memcheck:Value8\n   ...\n   fun:_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l\n   ...\n}\n{\n   gcc481/basic_ostream/endl/1\n   Memcheck:Cond\n   ...\n   fun:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_\n   ...\n}\n{\n   gcc481/basic_ostream/endl/1\n   Memcheck:Value8\n   ...\n   fun:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_\n   ...\n}\n{\n   gcc481/basic_ostream/operatorlessless/1\n   Memcheck:Addr8\n   ...\n   fun:_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n   ...\n}\n{\n   gcc481/basic_ostream/operatorlessless/2\n   Memcheck:Cond\n   ...\n   fun:_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n   ...\n}\n{\n   gcc481/basic_ostream/str/1\n   Memcheck:Cond\n   fun:_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv\n   ...\n}\n{\n   gcc481/basic_ostream/str/2\n   Memcheck:Value8\n   ...\n   fun:_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv\n   ...\n}\n{\n   gcc481/basic_ostringstream/str/3\n   Memcheck:Cond\n   ...\n   fun:_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv\n   ...\n}\n{\n   gcc481/strcmp/1\n   Memcheck:Addr8\n   fun:__strcmp_sse42\n   ...\n}\n{\n   gcc481/back_insert_operator/1\n   Memcheck:Value8\n   ...\n   fun:_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPSsSt6vectorISsSaISsEEEESt20back_insert_iteratorIS3_IPcSaIS8_EEEPFS8_RKSsEET0_T_SH_SG_T1_\n   ...\n}\n{\n   gcc481/back_insert_operator/2\n   Memcheck:Addr8\n   ...\n   fun:_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPSsSt6vectorISsSaISsEEEESt20back_insert_iteratorIS3_IPcSaIS8_EEEPFS8_RKSsEET0_T_SH_SG_T1_\n   ...\n}\n{\n   gcc481/back_insert_operator/3\n   Memcheck:Cond\n   ...\n   fun:_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPSsSt6vectorISsSaISsEEEESt20back_insert_iteratorIS3_IPcSaIS8_EEEPFS8_RKSsEET0_T_SH_SG_T1_\n   ...\n}\n\n\n#------------------------------------------------------------------------------#\n# Import OpenMPI's openmpi-valgrind.supp\n# Openmpi-2.1.0\n#\n# ccs-net: /scratch/vendors/spack.20170502/opt/spack/linux-rhel7-x86_64/gcc-6.3.0/openmpi-2.1.0-vrj55htfsolpnbtjv63xzh3jnl4kly3k/share/openmpi/openmpi-valgrind.supp\n#------------------------------------------------------------------------------#\n###############################################################\n#\n# OPAL suppressions\n#\n###############################################################\n\n# weirdness in init routines on Gentoo\n{\n  linux_pthread_init\n  Memcheck:Leak\n  fun:calloc\n  fun:allocate_dtv\n  fun:_dl_allocate_tls_storage\n  fun:_dl_allocate_tls\n}\n{\n  linux_pthread_init2\n  Memcheck:Leak\n  fun:calloc\n  fun:_dl_tls_setup\n  fun:__pthread_initialize_minimal\n}\n{\n  linux_pthread_init3\n  Memcheck:Leak\n  fun:memalign\n  fun:_dl_allocate_tls_storage\n  fun:_dl_allocate_tls\n  fun:__pthread_initialize_minimal\n}\n\n# The event library leaves some blocks in use that we should clean up,\n# but it would require much changing of the event library, so it\n# really isn't worth it...\n{\n  event_lib_poll\n  Memcheck:Leak\n  fun:malloc\n  fun:realloc\n  fun:opal_realloc\n  fun:poll_dispatch\n}\n\n\n###############################################################\n#\n# ORTE suppressions\n#\n###############################################################\n\n# inet_ntoa on linux mallocs a static buffer.  We can't free\n# it, so we have to live with it\n{\n  linux_inet_ntoa\n  Memcheck:Leak\n  fun:malloc\n  fun:inet_ntoa\n}\n{\n  linux_inet_ntoa_thread\n  Memcheck:Leak\n  fun:calloc\n  fun:pthread_setspecific\n  fun:inet_ntoa\n}\n\n\n###############################################################\n#\n# OMPI suppressions\n#\n###############################################################\n{\n  tcp_send\n  Memcheck:Param\n  writev(vector[...])\n  fun:writev\n  fun:mca_btl_tcp_frag_send\n  fun:mca_btl_tcp_endpoint_send\n}\n\n###############################################################\n#\n# Suppressions for various commonly-used packages\n#\n###############################################################\n\n# Portals reference implementation has a read from invalid issue\n{\n  portals_send\n  Memcheck:Param\n  socketcall.send(msg)\n  fun:send\n  fun:utcp_sendbytes\n  fun:utcp_sendto\n  fun:utcp_msg_wait\n}\n\n#------------------------------------------------------------------------------#\n# Openmpi-2.1.0 (added by KT)\n#------------------------------------------------------------------------------#\n\n{\n   openmpi210/e001\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001a\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001b\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001ba\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:malloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001c\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:calloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001d\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001d\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001d\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:realloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e001e\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:PMPI_Init_thread\n   ...\n}\n{\n   openmpi210/e002\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e003\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:strdup\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0004p\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0004\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0004a\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:malloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0004b\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:calloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0004c\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0004d\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0005\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0005a\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:realloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0005\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:realloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0005a\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:realloc\n   ...\n   fun:progress_engine\n   fun:start_thread\n   ...\n}\n{\n   openmpi210/e0006\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:calloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0007\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0007\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:calloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0008\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0009\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0009a\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:realloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0010\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:malloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0011\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0012\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:PMPI_Recv\n   ...\n}\n{\n   openmpi210/e0013\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:PMPI_Send\n   ...\n}\n{\n   openmpi210/e0014\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:PMPI_Irecv\n   ...\n}\n{\n   openmpi210/e0014\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:PMPI_Gather\n   ...\n}\n{\n   openmpi210/e0015\n   Memcheck:Cond\n   ...\n   fun:orterun\n   ...\n}\n{\n   openmpi210/e0016\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Init\n   ...\n}\n{\n   openmpi210/e0017\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Comm_create\n   ...\n}\n{\n   openmpi210/e0018\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Comm_split\n   ...\n}\n{\n   openmpi210/e0019\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Comm_dup\n   ...\n}\n{\n   openmpi210/e0019\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:PMPI_Win_create\n   ...\n}\n\n#------------------------------------------------------------------------------#\n# Python 2.7\n#------------------------------------------------------------------------------#\n{\n   python/e001\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:dictresize\n   ...\n}\n{\n   python/e002\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:_PyObject_GC_Malloc\n   ...\n}\n{\n   python/e002b\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   fun:_PyObject_GC_Malloc\n   ...\n}\n{\n   python/e003\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   ...\n   fun:dlopen@@GLIBC_2.2.5\n   ...\n}\n{\n   python/e004\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:Py_Main\n   ...\n}\n{\n   python/e004a\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:Py_Main\n   ...\n}\n{\n   python/e004b\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:Py_Main\n   ...\n}\n{\n   python/e005\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:import_submodule\n   ...\n}\n{\n   python/e006\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:PyObject_Call\n   ...\n}\n{\n   python/e007\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:realloc\n   ...\n   fun:PyObject_Call\n   ...\n}\n{\n   python/e008\n   Memcheck:Addr4\n   fun:PyObject_Free\n   ...\n}\n{\n   python/e009\n   Memcheck:Addr4\n   fun:PyObject_Realloc\n   ...\n}\n{\n   python/e010\n   Memcheck:Value8\n   fun:PyObject_Free\n   ...\n}\n{\n   python/e010a\n   Memcheck:Value8\n   fun:PyObject_Realloc\n   ...\n}\n{\n   python/e011\n   Memcheck:Cond\n   fun:PyObject_Free\n   ...\n}\n{\n   python/e011\n   Memcheck:Cond\n   fun:PyObject_Realloc\n   ...\n}\n\n#------------------------------------------------------------------------------#\n# End valgrind_suppress.txt\n#------------------------------------------------------------------------------#\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/special_functions/F1.cc",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/special_functions/autodoc/angular_coordinate_system.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/parser/Token.cc",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/parser/Constant_Expression.cc",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/c4/doc/TigsTrace_accumulatev.vsd",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/c4/doc/TigsTrace_accumulatev.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/viz/test/bench/Pressure.bin.0001",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/viz/test/bench/Densities.bin.0001",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/viz/test/bench/geo.bin.0001",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/viz/test/bench/Velocity.bin.0001",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/viz/test/bench/Temperatures.bin.0001",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi_ipcress/test/odfregression10.ipcress",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi_ipcress/test/analyticOpacities.ipcress",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi_ipcress/test/Al_BeCu.ipcress",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi_ipcress/doc/IPCRESS_File _Format.vsd",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi_ipcress/doc/IPCRESS_File_Format.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/quadrature/QIM__Parser.cc",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/RTT_Format_Reader/autodoc/stdcell.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/RTT_Format_Reader/doc/stdcell.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/src/cdi/doc/CDI Overview.ps.gz",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/autodoc/html/dragon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/autodoc/html/dragon-r.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/autodoc/html/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/ccs4logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRthomasd.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRrico.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRframes.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/nnsalogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRprettybox.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRgyom.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRcapsules.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRcorners.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRlignesbleues.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRgyom2.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/PPRnuancegris.sty",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/lanllogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/latex/836.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/templates/draco_art.tex",
        "/tmp/vanessa/spack-stage/spack-stage-draco-6.22.0-cjciwovyr37zvbhlylmye5lddv5kl32f/spack-src/environment/templates/CCS4seminar/example.pdf"
    ],
    "total_files": 1178
}