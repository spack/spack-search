{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/3rdparty/cpufeatures/cpu-features.c": "/*\n * Copyright (C) 2010 The Android Open Source Project\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n/* ChangeLog for this library:\n *\n * NDK r10e?: Add MIPS MSA feature.\n *\n * NDK r10: Support for 64-bit CPUs (Intel, ARM & MIPS).\n *\n * NDK r8d: Add android_setCpu().\n *\n * NDK r8c: Add new ARM CPU features: VFPv2, VFP_D32, VFP_FP16,\n *          VFP_FMA, NEON_FMA, IDIV_ARM, IDIV_THUMB2 and iWMMXt.\n *\n *          Rewrite the code to parse /proc/self/auxv instead of\n *          the \"Features\" field in /proc/cpuinfo.\n *\n *          Dynamically allocate the buffer that hold the content\n *          of /proc/cpuinfo to deal with newer hardware.\n *\n * NDK r7c: Fix CPU count computation. The old method only reported the\n *           number of _active_ CPUs when the library was initialized,\n *           which could be less than the real total.\n *\n * NDK r5: Handle buggy kernels which report a CPU Architecture number of 7\n *         for an ARMv6 CPU (see below).\n *\n *         Handle kernels that only report 'neon', and not 'vfpv3'\n *         (VFPv3 is mandated by the ARM architecture is Neon is implemented)\n *\n *         Handle kernels that only report 'vfpv3d16', and not 'vfpv3'\n *\n *         Fix x86 compilation. Report ANDROID_CPU_FAMILY_X86 in\n *         android_getCpuFamily().\n *\n * NDK r4: Initial release\n */\n\n#include \"cpu-features.h\"\n\n#include <dlfcn.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/system_properties.h>\n#include <unistd.h>\n\nstatic  pthread_once_t     g_once;\nstatic  int                g_inited;\nstatic  AndroidCpuFamily   g_cpuFamily;\nstatic  uint64_t           g_cpuFeatures;\nstatic  int                g_cpuCount;\n\n#ifdef __arm__\nstatic  uint32_t           g_cpuIdArm;\n#endif\n\nstatic const int android_cpufeatures_debug = 0;\n\n#define  D(...) \\\n    do { \\\n        if (android_cpufeatures_debug) { \\\n            printf(__VA_ARGS__); fflush(stdout); \\\n        } \\\n    } while (0)\n\n#ifdef __i386__\nstatic __inline__ void x86_cpuid(int func, int values[4])\n{\n    int a, b, c, d;\n    /* We need to preserve ebx since we're compiling PIC code */\n    /* this means we can't use \"=b\" for the second output register */\n    __asm__ __volatile__ ( \\\n      \"push %%ebx\\n\"\n      \"cpuid\\n\" \\\n      \"mov %%ebx, %1\\n\"\n      \"pop %%ebx\\n\"\n      : \"=a\" (a), \"=r\" (b), \"=c\" (c), \"=d\" (d) \\\n      : \"a\" (func) \\\n    );\n    values[0] = a;\n    values[1] = b;\n    values[2] = c;\n    values[3] = d;\n}\n#elif defined(__x86_64__)\nstatic __inline__ void x86_cpuid(int func, int values[4])\n{\n    int64_t a, b, c, d;\n    /* We need to preserve ebx since we're compiling PIC code */\n    /* this means we can't use \"=b\" for the second output register */\n    __asm__ __volatile__ ( \\\n      \"push %%rbx\\n\"\n      \"cpuid\\n\" \\\n      \"mov %%rbx, %1\\n\"\n      \"pop %%rbx\\n\"\n      : \"=a\" (a), \"=r\" (b), \"=c\" (c), \"=d\" (d) \\\n      : \"a\" (func) \\\n    );\n    values[0] = a;\n    values[1] = b;\n    values[2] = c;\n    values[3] = d;\n}\n#endif\n\n/* Get the size of a file by reading it until the end. This is needed\n * because files under /proc do not always return a valid size when\n * using fseek(0, SEEK_END) + ftell(). Nor can they be mmap()-ed.\n */\nstatic int\nget_file_size(const char* pathname)\n{\n\n   int fd, result = 0;\n    char buffer[256];\n\n    fd = open(pathname, O_RDONLY);\n    if (fd < 0) {\n        D(\"Can't open %s: %s\\n\", pathname, strerror(errno));\n        return -1;\n    }\n\n    for (;;) {\n        int ret = read(fd, buffer, sizeof buffer);\n        if (ret < 0) {\n            if (errno == EINTR)\n                continue;\n            D(\"Error while reading %s: %s\\n\", pathname, strerror(errno));\n            break;\n        }\n        if (ret == 0)\n            break;\n\n        result += ret;\n    }\n    close(fd);\n    return result;\n}\n\n/* Read the content of /proc/cpuinfo into a user-provided buffer.\n * Return the length of the data, or -1 on error. Does *not*\n * zero-terminate the content. Will not read more\n * than 'buffsize' bytes.\n */\nstatic int\nread_file(const char*  pathname, char*  buffer, size_t  buffsize)\n{\n    int  fd, count;\n\n    fd = open(pathname, O_RDONLY);\n    if (fd < 0) {\n        D(\"Could not open %s: %s\\n\", pathname, strerror(errno));\n        return -1;\n    }\n    count = 0;\n    while (count < (int)buffsize) {\n        int ret = read(fd, buffer + count, buffsize - count);\n        if (ret < 0) {\n            if (errno == EINTR)\n                continue;\n            D(\"Error while reading from %s: %s\\n\", pathname, strerror(errno));\n            if (count == 0)\n                count = -1;\n            break;\n        }\n        if (ret == 0)\n            break;\n        count += ret;\n    }\n    close(fd);\n    return count;\n}\n\n#ifdef __arm__\n/* Extract the content of a the first occurence of a given field in\n * the content of /proc/cpuinfo and return it as a heap-allocated\n * string that must be freed by the caller.\n *\n * Return NULL if not found\n */\nstatic char*\nextract_cpuinfo_field(const char* buffer, int buflen, const char* field)\n{\n    int  fieldlen = strlen(field);\n    const char* bufend = buffer + buflen;\n    char* result = NULL;\n    int len;\n    const char *p, *q;\n\n    /* Look for first field occurence, and ensures it starts the line. */\n    p = buffer;\n    for (;;) {\n        p = memmem(p, bufend-p, field, fieldlen);\n        if (p == NULL)\n            goto EXIT;\n\n        if (p == buffer || p[-1] == '\\n')\n            break;\n\n        p += fieldlen;\n    }\n\n    /* Skip to the first column followed by a space */\n    p += fieldlen;\n    p  = memchr(p, ':', bufend-p);\n    if (p == NULL || p[1] != ' ')\n        goto EXIT;\n\n    /* Find the end of the line */\n    p += 2;\n    q = memchr(p, '\\n', bufend-p);\n    if (q == NULL)\n        q = bufend;\n\n    /* Copy the line into a heap-allocated buffer */\n    len = q-p;\n    result = malloc(len+1);\n    if (result == NULL)\n        goto EXIT;\n\n    memcpy(result, p, len);\n    result[len] = '\\0';\n\nEXIT:\n    return result;\n}\n\n/* Checks that a space-separated list of items contains one given 'item'.\n * Returns 1 if found, 0 otherwise.\n */\nstatic int\nhas_list_item(const char* list, const char* item)\n{\n    const char*  p = list;\n    int itemlen = strlen(item);\n\n    if (list == NULL)\n        return 0;\n\n    while (*p) {\n        const char*  q;\n\n        /* skip spaces */\n        while (*p == ' ' || *p == '\\t')\n            p++;\n\n        /* find end of current list item */\n        q = p;\n        while (*q && *q != ' ' && *q != '\\t')\n            q++;\n\n        if (itemlen == q-p && !memcmp(p, item, itemlen))\n            return 1;\n\n        /* skip to next item */\n        p = q;\n    }\n    return 0;\n}\n#endif /* __arm__ */\n\n/* Parse a number starting from 'input', but not going further\n * than 'limit'. Return the value into '*result'.\n *\n * NOTE: Does not skip over leading spaces, or deal with sign characters.\n * NOTE: Ignores overflows.\n *\n * The function returns NULL in case of error (bad format), or the new\n * position after the decimal number in case of success (which will always\n * be <= 'limit').\n */\nstatic const char*\nparse_number(const char* input, const char* limit, int base, int* result)\n{\n    const char* p = input;\n    int val = 0;\n    while (p < limit) {\n        int d = (*p - '0');\n        if ((unsigned)d >= 10U) {\n            d = (*p - 'a');\n            if ((unsigned)d >= 6U)\n              d = (*p - 'A');\n            if ((unsigned)d >= 6U)\n              break;\n            d += 10;\n        }\n        if (d >= base)\n          break;\n        val = val*base + d;\n        p++;\n    }\n    if (p == input)\n        return NULL;\n\n    *result = val;\n    return p;\n}\n\nstatic const char*\nparse_decimal(const char* input, const char* limit, int* result)\n{\n    return parse_number(input, limit, 10, result);\n}\n\n#ifdef __arm__\nstatic const char*\nparse_hexadecimal(const char* input, const char* limit, int* result)\n{\n    return parse_number(input, limit, 16, result);\n}\n#endif /* __arm__ */\n\n/* This small data type is used to represent a CPU list / mask, as read\n * from sysfs on Linux. See http://www.kernel.org/doc/Documentation/cputopology.txt\n *\n * For now, we don't expect more than 32 cores on mobile devices, so keep\n * everything simple.\n */\ntypedef struct {\n    uint32_t mask;\n} CpuList;\n\nstatic __inline__ void\ncpulist_init(CpuList* list) {\n    list->mask = 0;\n}\n\nstatic __inline__ void\ncpulist_and(CpuList* list1, CpuList* list2) {\n    list1->mask &= list2->mask;\n}\n\nstatic __inline__ void\ncpulist_set(CpuList* list, int index) {\n    if ((unsigned)index < 32) {\n        list->mask |= (uint32_t)(1U << index);\n    }\n}\n\nstatic __inline__ int\ncpulist_count(CpuList* list) {\n    return __builtin_popcount(list->mask);\n}\n\n/* Parse a textual list of cpus and store the result inside a CpuList object.\n * Input format is the following:\n * - comma-separated list of items (no spaces)\n * - each item is either a single decimal number (cpu index), or a range made\n *   of two numbers separated by a single dash (-). Ranges are inclusive.\n *\n * Examples:   0\n *             2,4-127,128-143\n *             0-1\n */\nstatic void\ncpulist_parse(CpuList* list, const char* line, int line_len)\n{\n    const char* p = line;\n    const char* end = p + line_len;\n    const char* q;\n\n    /* NOTE: the input line coming from sysfs typically contains a\n     * trailing newline, so take care of it in the code below\n     */\n    while (p < end && *p != '\\n')\n    {\n        int val, start_value, end_value;\n\n        /* Find the end of current item, and put it into 'q' */\n        q = memchr(p, ',', end-p);\n        if (q == NULL) {\n            q = end;\n        }\n\n        /* Get first value */\n        p = parse_decimal(p, q, &start_value);\n        if (p == NULL)\n            goto BAD_FORMAT;\n\n        end_value = start_value;\n\n        /* If we're not at the end of the item, expect a dash and\n         * and integer; extract end value.\n         */\n        if (p < q && *p == '-') {\n            p = parse_decimal(p+1, q, &end_value);\n            if (p == NULL)\n                goto BAD_FORMAT;\n        }\n\n        /* Set bits CPU list bits */\n        for (val = start_value; val <= end_value; val++) {\n            cpulist_set(list, val);\n        }\n\n        /* Jump to next item */\n        p = q;\n        if (p < end)\n            p++;\n    }\n\nBAD_FORMAT:\n    ;\n}\n\n/* Read a CPU list from one sysfs file */\nstatic void\ncpulist_read_from(CpuList* list, const char* filename)\n{\n    char   file[64];\n    int    filelen;\n\n    cpulist_init(list);\n\n    filelen = read_file(filename, file, sizeof file);\n    if (filelen < 0) {\n        D(\"Could not read %s: %s\\n\", filename, strerror(errno));\n        return;\n    }\n\n    cpulist_parse(list, file, filelen);\n}\n#if defined(__aarch64__)\n// see <uapi/asm/hwcap.h> kernel header\n#define HWCAP_FP                (1 << 0)\n#define HWCAP_ASIMD             (1 << 1)\n#define HWCAP_AES               (1 << 3)\n#define HWCAP_PMULL             (1 << 4)\n#define HWCAP_SHA1              (1 << 5)\n#define HWCAP_SHA2              (1 << 6)\n#define HWCAP_CRC32             (1 << 7)\n#endif\n\n#if defined(__arm__)\n\n// See <asm/hwcap.h> kernel header.\n#define HWCAP_VFP       (1 << 6)\n#define HWCAP_IWMMXT    (1 << 9)\n#define HWCAP_NEON      (1 << 12)\n#define HWCAP_VFPv3     (1 << 13)\n#define HWCAP_VFPv3D16  (1 << 14)\n#define HWCAP_VFPv4     (1 << 16)\n#define HWCAP_IDIVA     (1 << 17)\n#define HWCAP_IDIVT     (1 << 18)\n\n// see <uapi/asm/hwcap.h> kernel header\n#define HWCAP2_AES     (1 << 0)\n#define HWCAP2_PMULL   (1 << 1)\n#define HWCAP2_SHA1    (1 << 2)\n#define HWCAP2_SHA2    (1 << 3)\n#define HWCAP2_CRC32   (1 << 4)\n\n// This is the list of 32-bit ARMv7 optional features that are _always_\n// supported by ARMv8 CPUs, as mandated by the ARM Architecture Reference\n// Manual.\n#define HWCAP_SET_FOR_ARMV8  \\\n  ( HWCAP_VFP | \\\n    HWCAP_NEON | \\\n    HWCAP_VFPv3 | \\\n    HWCAP_VFPv4 | \\\n    HWCAP_IDIVA | \\\n    HWCAP_IDIVT )\n#endif\n\n#if defined(__mips__)\n// see <uapi/asm/hwcap.h> kernel header\n#define HWCAP_MIPS_R6           (1 << 0)\n#define HWCAP_MIPS_MSA          (1 << 1)\n#endif\n\n#if defined(__arm__) || defined(__aarch64__) || defined(__mips__)\n\n#define AT_HWCAP 16\n#define AT_HWCAP2 26\n\n// Probe the system's C library for a 'getauxval' function and call it if\n// it exits, or return 0 for failure. This function is available since API\n// level 20.\n//\n// This code does *NOT* check for '__ANDROID_API__ >= 20' to support the\n// edge case where some NDK developers use headers for a platform that is\n// newer than the one really targetted by their application.\n// This is typically done to use newer native APIs only when running on more\n// recent Android versions, and requires careful symbol management.\n//\n// Note that getauxval() can't really be re-implemented here, because\n// its implementation does not parse /proc/self/auxv. Instead it depends\n// on values  that are passed by the kernel at process-init time to the\n// C runtime initialization layer.\n#if 1\n// OpenCV calls CPU features check during library initialization stage\n// (under other dlopen() call).\n// Unfortunatelly, calling dlopen() recursively is not supported on some old\n// Android versions. Android fix is here:\n// - https://android-review.googlesource.com/#/c/32951/\n// - GitHub mirror: https://github.com/android/platform_bionic/commit/e19d702b8e330cef87e0983733c427b5f7842144\n__attribute__((weak)) unsigned long getauxval(unsigned long); // Lets linker to handle this symbol\nstatic uint32_t\nget_elf_hwcap_from_getauxval(int hwcap_type) {\n    uint32_t ret = 0;\n    if(getauxval != 0) {\n        ret = (uint32_t)getauxval(hwcap_type);\n    } else {\n        D(\"getauxval() is not available\\n\");\n    }\n    return ret;\n}\n#else\nstatic uint32_t\nget_elf_hwcap_from_getauxval(int hwcap_type) {\n    typedef unsigned long getauxval_func_t(unsigned long);\n\n    dlerror();\n    void* libc_handle = dlopen(\"libc.so\", RTLD_NOW);\n    if (!libc_handle) {\n        D(\"Could not dlopen() C library: %s\\n\", dlerror());\n        return 0;\n    }\n\n    uint32_t ret = 0;\n    getauxval_func_t* func = (getauxval_func_t*)\n            dlsym(libc_handle, \"getauxval\");\n    if (!func) {\n        D(\"Could not find getauxval() in C library\\n\");\n    } else {\n        // Note: getauxval() returns 0 on failure. Doesn't touch errno.\n        ret = (uint32_t)(*func)(hwcap_type);\n    }\n    dlclose(libc_handle);\n    return ret;\n}\n#endif\n#endif\n\n#if defined(__arm__)\n// Parse /proc/self/auxv to extract the ELF HW capabilities bitmap for the\n// current CPU. Note that this file is not accessible from regular\n// application processes on some Android platform releases.\n// On success, return new ELF hwcaps, or 0 on failure.\nstatic uint32_t\nget_elf_hwcap_from_proc_self_auxv(void) {\n    const char filepath[] = \"/proc/self/auxv\";\n    int fd = TEMP_FAILURE_RETRY(open(filepath, O_RDONLY));\n    if (fd < 0) {\n        D(\"Could not open %s: %s\\n\", filepath, strerror(errno));\n        return 0;\n    }\n\n    struct { uint32_t tag; uint32_t value; } entry;\n\n    uint32_t result = 0;\n    for (;;) {\n        int ret = TEMP_FAILURE_RETRY(read(fd, (char*)&entry, sizeof entry));\n        if (ret < 0) {\n            D(\"Error while reading %s: %s\\n\", filepath, strerror(errno));\n            break;\n        }\n        // Detect end of list.\n        if (ret == 0 || (entry.tag == 0 && entry.value == 0))\n          break;\n        if (entry.tag == AT_HWCAP) {\n          result = entry.value;\n          break;\n        }\n    }\n    close(fd);\n    return result;\n}\n\n/* Compute the ELF HWCAP flags from the content of /proc/cpuinfo.\n * This works by parsing the 'Features' line, which lists which optional\n * features the device's CPU supports, on top of its reference\n * architecture.\n */\nstatic uint32_t\nget_elf_hwcap_from_proc_cpuinfo(const char* cpuinfo, int cpuinfo_len) {\n    uint32_t hwcaps = 0;\n    long architecture = 0;\n    char* cpuArch = extract_cpuinfo_field(cpuinfo, cpuinfo_len, \"CPU architecture\");\n    if (cpuArch) {\n        architecture = strtol(cpuArch, NULL, 10);\n        free(cpuArch);\n\n        if (architecture >= 8L) {\n            // This is a 32-bit ARM binary running on a 64-bit ARM64 kernel.\n            // The 'Features' line only lists the optional features that the\n            // device's CPU supports, compared to its reference architecture\n            // which are of no use for this process.\n            D(\"Faking 32-bit ARM HWCaps on ARMv%ld CPU\\n\", architecture);\n            return HWCAP_SET_FOR_ARMV8;\n        }\n    }\n\n    char* cpuFeatures = extract_cpuinfo_field(cpuinfo, cpuinfo_len, \"Features\");\n    if (cpuFeatures != NULL) {\n        D(\"Found cpuFeatures = '%s'\\n\", cpuFeatures);\n\n        if (has_list_item(cpuFeatures, \"vfp\"))\n            hwcaps |= HWCAP_VFP;\n        if (has_list_item(cpuFeatures, \"vfpv3\"))\n            hwcaps |= HWCAP_VFPv3;\n        if (has_list_item(cpuFeatures, \"vfpv3d16\"))\n            hwcaps |= HWCAP_VFPv3D16;\n        if (has_list_item(cpuFeatures, \"vfpv4\"))\n            hwcaps |= HWCAP_VFPv4;\n        if (has_list_item(cpuFeatures, \"neon\"))\n            hwcaps |= HWCAP_NEON;\n        if (has_list_item(cpuFeatures, \"idiva\"))\n            hwcaps |= HWCAP_IDIVA;\n        if (has_list_item(cpuFeatures, \"idivt\"))\n            hwcaps |= HWCAP_IDIVT;\n        if (has_list_item(cpuFeatures, \"idiv\"))\n            hwcaps |= HWCAP_IDIVA | HWCAP_IDIVT;\n        if (has_list_item(cpuFeatures, \"iwmmxt\"))\n            hwcaps |= HWCAP_IWMMXT;\n\n        free(cpuFeatures);\n    }\n    return hwcaps;\n}\n#endif  /* __arm__ */\n\n/* Return the number of cpus present on a given device.\n *\n * To handle all weird kernel configurations, we need to compute the\n * intersection of the 'present' and 'possible' CPU lists and count\n * the result.\n */\nstatic int\nget_cpu_count(void)\n{\n    CpuList cpus_present[1];\n    CpuList cpus_possible[1];\n\n    cpulist_read_from(cpus_present, \"/sys/devices/system/cpu/present\");\n    cpulist_read_from(cpus_possible, \"/sys/devices/system/cpu/possible\");\n\n    /* Compute the intersection of both sets to get the actual number of\n     * CPU cores that can be used on this device by the kernel.\n     */\n    cpulist_and(cpus_present, cpus_possible);\n\n    return cpulist_count(cpus_present);\n}\n\nstatic void\nandroid_cpuInitFamily(void)\n{\n#if defined(__arm__)\n    g_cpuFamily = ANDROID_CPU_FAMILY_ARM;\n#elif defined(__i386__)\n    g_cpuFamily = ANDROID_CPU_FAMILY_X86;\n#elif defined(__mips64)\n/* Needs to be before __mips__ since the compiler defines both */\n    g_cpuFamily = ANDROID_CPU_FAMILY_MIPS64;\n#elif defined(__mips__)\n    g_cpuFamily = ANDROID_CPU_FAMILY_MIPS;\n#elif defined(__aarch64__)\n    g_cpuFamily = ANDROID_CPU_FAMILY_ARM64;\n#elif defined(__x86_64__)\n    g_cpuFamily = ANDROID_CPU_FAMILY_X86_64;\n#else\n    g_cpuFamily = ANDROID_CPU_FAMILY_UNKNOWN;\n#endif\n}\n\nstatic void\nandroid_cpuInit(void)\n{\n    char* cpuinfo = NULL;\n    int   cpuinfo_len;\n\n    android_cpuInitFamily();\n\n    g_cpuFeatures = 0;\n    g_cpuCount    = 1;\n    g_inited      = 1;\n\n    cpuinfo_len = get_file_size(\"/proc/cpuinfo\");\n    if (cpuinfo_len < 0) {\n      D(\"cpuinfo_len cannot be computed!\");\n      return;\n    }\n    cpuinfo = malloc(cpuinfo_len);\n    if (cpuinfo == NULL) {\n      D(\"cpuinfo buffer could not be allocated\");\n      return;\n    }\n    cpuinfo_len = read_file(\"/proc/cpuinfo\", cpuinfo, cpuinfo_len);\n    D(\"cpuinfo_len is (%d):\\n%.*s\\n\", cpuinfo_len,\n      cpuinfo_len >= 0 ? cpuinfo_len : 0, cpuinfo);\n\n    if (cpuinfo_len < 0)  /* should not happen */ {\n        free(cpuinfo);\n        return;\n    }\n\n    /* Count the CPU cores, the value may be 0 for single-core CPUs */\n    g_cpuCount = get_cpu_count();\n    if (g_cpuCount == 0) {\n        g_cpuCount = 1;\n    }\n\n    D(\"found cpuCount = %d\\n\", g_cpuCount);\n\n#ifdef __arm__\n    {\n        /* Extract architecture from the \"CPU Architecture\" field.\n         * The list is well-known, unlike the the output of\n         * the 'Processor' field which can vary greatly.\n         *\n         * See the definition of the 'proc_arch' array in\n         * $KERNEL/arch/arm/kernel/setup.c and the 'c_show' function in\n         * same file.\n         */\n        char* cpuArch = extract_cpuinfo_field(cpuinfo, cpuinfo_len, \"CPU architecture\");\n\n        if (cpuArch != NULL) {\n            char*  end;\n            long   archNumber;\n            int    hasARMv7 = 0;\n\n            D(\"found cpuArch = '%s'\\n\", cpuArch);\n\n            /* read the initial decimal number, ignore the rest */\n            archNumber = strtol(cpuArch, &end, 10);\n\n            /* Note that ARMv8 is upwards compatible with ARMv7. */\n            if (end > cpuArch && archNumber >= 7) {\n                hasARMv7 = 1;\n            }\n\n            /* Unfortunately, it seems that certain ARMv6-based CPUs\n             * report an incorrect architecture number of 7!\n             *\n             * See http://code.google.com/p/android/issues/detail?id=10812\n             *\n             * We try to correct this by looking at the 'elf_format'\n             * field reported by the 'Processor' field, which is of the\n             * form of \"(v7l)\" for an ARMv7-based CPU, and \"(v6l)\" for\n             * an ARMv6-one.\n             */\n            if (hasARMv7) {\n                char* cpuProc = extract_cpuinfo_field(cpuinfo, cpuinfo_len,\n                                                      \"Processor\");\n                if (cpuProc != NULL) {\n                    D(\"found cpuProc = '%s'\\n\", cpuProc);\n                    if (has_list_item(cpuProc, \"(v6l)\")) {\n                        D(\"CPU processor and architecture mismatch!!\\n\");\n                        hasARMv7 = 0;\n                    }\n                    free(cpuProc);\n                }\n            }\n\n            if (hasARMv7) {\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_ARMv7;\n            }\n\n            /* The LDREX / STREX instructions are available from ARMv6 */\n            if (archNumber >= 6) {\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_LDREX_STREX;\n            }\n\n            free(cpuArch);\n        }\n\n        /* Extract the list of CPU features from ELF hwcaps */\n        uint32_t hwcaps = 0;\n        hwcaps = get_elf_hwcap_from_getauxval(AT_HWCAP);\n        if (!hwcaps) {\n            D(\"Parsing /proc/self/auxv to extract ELF hwcaps!\\n\");\n            hwcaps = get_elf_hwcap_from_proc_self_auxv();\n        }\n        if (!hwcaps) {\n            // Parsing /proc/self/auxv will fail from regular application\n            // processes on some Android platform versions, when this happens\n            // parse proc/cpuinfo instead.\n            D(\"Parsing /proc/cpuinfo to extract ELF hwcaps!\\n\");\n            hwcaps = get_elf_hwcap_from_proc_cpuinfo(cpuinfo, cpuinfo_len);\n        }\n\n        if (hwcaps != 0) {\n            int has_vfp = (hwcaps & HWCAP_VFP);\n            int has_vfpv3 = (hwcaps & HWCAP_VFPv3);\n            int has_vfpv3d16 = (hwcaps & HWCAP_VFPv3D16);\n            int has_vfpv4 = (hwcaps & HWCAP_VFPv4);\n            int has_neon = (hwcaps & HWCAP_NEON);\n            int has_idiva = (hwcaps & HWCAP_IDIVA);\n            int has_idivt = (hwcaps & HWCAP_IDIVT);\n            int has_iwmmxt = (hwcaps & HWCAP_IWMMXT);\n\n            // The kernel does a poor job at ensuring consistency when\n            // describing CPU features. So lots of guessing is needed.\n\n            // 'vfpv4' implies VFPv3|VFP_FMA|FP16\n            if (has_vfpv4)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv3    |\n                                 ANDROID_CPU_ARM_FEATURE_VFP_FP16 |\n                                 ANDROID_CPU_ARM_FEATURE_VFP_FMA;\n\n            // 'vfpv3' or 'vfpv3d16' imply VFPv3. Note that unlike GCC,\n            // a value of 'vfpv3' doesn't necessarily mean that the D32\n            // feature is present, so be conservative. All CPUs in the\n            // field that support D32 also support NEON, so this should\n            // not be a problem in practice.\n            if (has_vfpv3 || has_vfpv3d16)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv3;\n\n            // 'vfp' is super ambiguous. Depending on the kernel, it can\n            // either mean VFPv2 or VFPv3. Make it depend on ARMv7.\n            if (has_vfp) {\n              if (g_cpuFeatures & ANDROID_CPU_ARM_FEATURE_ARMv7)\n                  g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv3;\n              else\n                  g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv2;\n            }\n\n            // Neon implies VFPv3|D32, and if vfpv4 is detected, NEON_FMA\n            if (has_neon) {\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv3 |\n                                 ANDROID_CPU_ARM_FEATURE_NEON |\n                                 ANDROID_CPU_ARM_FEATURE_VFP_D32;\n              if (has_vfpv4)\n                  g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_NEON_FMA;\n            }\n\n            // VFPv3 implies VFPv2 and ARMv7\n            if (g_cpuFeatures & ANDROID_CPU_ARM_FEATURE_VFPv3)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_VFPv2 |\n                                 ANDROID_CPU_ARM_FEATURE_ARMv7;\n\n            if (has_idiva)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_IDIV_ARM;\n            if (has_idivt)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_IDIV_THUMB2;\n\n            if (has_iwmmxt)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_iWMMXt;\n        }\n\n        /* Extract the list of CPU features from ELF hwcaps2 */\n        uint32_t hwcaps2 = 0;\n        hwcaps2 = get_elf_hwcap_from_getauxval(AT_HWCAP2);\n        if (hwcaps2 != 0) {\n            int has_aes     = (hwcaps2 & HWCAP2_AES);\n            int has_pmull   = (hwcaps2 & HWCAP2_PMULL);\n            int has_sha1    = (hwcaps2 & HWCAP2_SHA1);\n            int has_sha2    = (hwcaps2 & HWCAP2_SHA2);\n            int has_crc32   = (hwcaps2 & HWCAP2_CRC32);\n\n            if (has_aes)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_AES;\n            if (has_pmull)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_PMULL;\n            if (has_sha1)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_SHA1;\n            if (has_sha2)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_SHA2;\n            if (has_crc32)\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_CRC32;\n        }\n        /* Extract the cpuid value from various fields */\n        // The CPUID value is broken up in several entries in /proc/cpuinfo.\n        // This table is used to rebuild it from the entries.\n        static const struct CpuIdEntry {\n            const char* field;\n            char        format;\n            char        bit_lshift;\n            char        bit_length;\n        } cpu_id_entries[] = {\n            { \"CPU implementer\", 'x', 24, 8 },\n            { \"CPU variant\", 'x', 20, 4 },\n            { \"CPU part\", 'x', 4, 12 },\n            { \"CPU revision\", 'd', 0, 4 },\n        };\n        size_t i;\n        D(\"Parsing /proc/cpuinfo to recover CPUID\\n\");\n        for (i = 0;\n             i < sizeof(cpu_id_entries)/sizeof(cpu_id_entries[0]);\n             ++i) {\n            const struct CpuIdEntry* entry = &cpu_id_entries[i];\n            char* value = extract_cpuinfo_field(cpuinfo,\n                                                cpuinfo_len,\n                                                entry->field);\n            if (value == NULL)\n                continue;\n\n            D(\"field=%s value='%s'\\n\", entry->field, value);\n            char* value_end = value + strlen(value);\n            int val = 0;\n            const char* start = value;\n            const char* p;\n            if (value[0] == '0' && (value[1] == 'x' || value[1] == 'X')) {\n              start += 2;\n              p = parse_hexadecimal(start, value_end, &val);\n            } else if (entry->format == 'x')\n              p = parse_hexadecimal(value, value_end, &val);\n            else\n              p = parse_decimal(value, value_end, &val);\n\n            if (p > (const char*)start) {\n              val &= ((1 << entry->bit_length)-1);\n              val <<= entry->bit_lshift;\n              g_cpuIdArm |= (uint32_t) val;\n            }\n\n            free(value);\n        }\n\n        // Handle kernel configuration bugs that prevent the correct\n        // reporting of CPU features.\n        static const struct CpuFix {\n            uint32_t  cpuid;\n            uint64_t  or_flags;\n        } cpu_fixes[] = {\n            /* The Nexus 4 (Qualcomm Krait) kernel configuration\n             * forgets to report IDIV support. */\n            { 0x510006f2, ANDROID_CPU_ARM_FEATURE_IDIV_ARM |\n                          ANDROID_CPU_ARM_FEATURE_IDIV_THUMB2 },\n            { 0x510006f3, ANDROID_CPU_ARM_FEATURE_IDIV_ARM |\n                          ANDROID_CPU_ARM_FEATURE_IDIV_THUMB2 },\n        };\n        size_t n;\n        for (n = 0; n < sizeof(cpu_fixes)/sizeof(cpu_fixes[0]); ++n) {\n            const struct CpuFix* entry = &cpu_fixes[n];\n\n            if (g_cpuIdArm == entry->cpuid)\n                g_cpuFeatures |= entry->or_flags;\n        }\n\n        // Special case: The emulator-specific Android 4.2 kernel fails\n        // to report support for the 32-bit ARM IDIV instruction.\n        // Technically, this is a feature of the virtual CPU implemented\n        // by the emulator. Note that it could also support Thumb IDIV\n        // in the future, and this will have to be slightly updated.\n        char* hardware = extract_cpuinfo_field(cpuinfo,\n                                               cpuinfo_len,\n                                               \"Hardware\");\n        if (hardware) {\n            if (!strcmp(hardware, \"Goldfish\") &&\n                g_cpuIdArm == 0x4100c080 &&\n                (g_cpuFamily & ANDROID_CPU_ARM_FEATURE_ARMv7) != 0) {\n                g_cpuFeatures |= ANDROID_CPU_ARM_FEATURE_IDIV_ARM;\n            }\n            free(hardware);\n        }\n    }\n#endif /* __arm__ */\n#ifdef __aarch64__\n    {\n        /* Extract the list of CPU features from ELF hwcaps */\n        uint32_t hwcaps = 0;\n        hwcaps = get_elf_hwcap_from_getauxval(AT_HWCAP);\n        if (hwcaps != 0) {\n            int has_fp      = (hwcaps & HWCAP_FP);\n            int has_asimd   = (hwcaps & HWCAP_ASIMD);\n            int has_aes     = (hwcaps & HWCAP_AES);\n            int has_pmull   = (hwcaps & HWCAP_PMULL);\n            int has_sha1    = (hwcaps & HWCAP_SHA1);\n            int has_sha2    = (hwcaps & HWCAP_SHA2);\n            int has_crc32   = (hwcaps & HWCAP_CRC32);\n\n            if(has_fp == 0) {\n                D(\"ERROR: Floating-point unit missing, but is required by Android on AArch64 CPUs\\n\");\n            }\n            if(has_asimd == 0) {\n                D(\"ERROR: ASIMD unit missing, but is required by Android on AArch64 CPUs\\n\");\n            }\n\n            if (has_fp)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_FP;\n            if (has_asimd)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_ASIMD;\n            if (has_aes)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_AES;\n            if (has_pmull)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_PMULL;\n            if (has_sha1)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_SHA1;\n            if (has_sha2)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_SHA2;\n            if (has_crc32)\n                g_cpuFeatures |= ANDROID_CPU_ARM64_FEATURE_CRC32;\n        }\n    }\n#endif /* __aarch64__ */\n\n#if defined(__i386__) || defined(__x86_64__)\n    int regs[4];\n\n/* According to http://en.wikipedia.org/wiki/CPUID */\n#define VENDOR_INTEL_b  0x756e6547\n#define VENDOR_INTEL_c  0x6c65746e\n#define VENDOR_INTEL_d  0x49656e69\n\n    x86_cpuid(0, regs);\n    int vendorIsIntel = (regs[1] == VENDOR_INTEL_b &&\n                         regs[2] == VENDOR_INTEL_c &&\n                         regs[3] == VENDOR_INTEL_d);\n\n    x86_cpuid(1, regs);\n    if ((regs[2] & (1 << 9)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_SSSE3;\n    }\n    if ((regs[2] & (1 << 23)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_POPCNT;\n    }\n    if ((regs[2] & (1 << 19)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_SSE4_1;\n    }\n    if ((regs[2] & (1 << 20)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_SSE4_2;\n    }\n    if (vendorIsIntel && (regs[2] & (1 << 22)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_MOVBE;\n    }\n    if ((regs[2] & (1 << 25)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_AES_NI;\n    }\n    if ((regs[2] & (1 << 28)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_AVX;\n    }\n    if ((regs[2] & (1 << 30)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_RDRAND;\n    }\n\n    x86_cpuid(7, regs);\n    if ((regs[1] & (1 << 5)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_AVX2;\n    }\n    if ((regs[1] & (1 << 29)) != 0) {\n        g_cpuFeatures |= ANDROID_CPU_X86_FEATURE_SHA_NI;\n    }\n\n\n#endif\n#if defined( __mips__)\n    {   /* MIPS and MIPS64 */\n        /* Extract the list of CPU features from ELF hwcaps */\n        uint32_t hwcaps = 0;\n        hwcaps = get_elf_hwcap_from_getauxval(AT_HWCAP);\n        if (hwcaps != 0) {\n            int has_r6      = (hwcaps & HWCAP_MIPS_R6);\n            int has_msa     = (hwcaps & HWCAP_MIPS_MSA);\n            if (has_r6)\n                g_cpuFeatures |= ANDROID_CPU_MIPS_FEATURE_R6;\n            if (has_msa)\n                g_cpuFeatures |= ANDROID_CPU_MIPS_FEATURE_MSA;\n        }\n    }\n#endif /* __mips__ */\n\n    free(cpuinfo);\n}\n\n\nAndroidCpuFamily\nandroid_getCpuFamily(void)\n{\n    pthread_once(&g_once, android_cpuInit);\n    return g_cpuFamily;\n}\n\n\nuint64_t\nandroid_getCpuFeatures(void)\n{\n    pthread_once(&g_once, android_cpuInit);\n    return g_cpuFeatures;\n}\n\n\nint\nandroid_getCpuCount(void)\n{\n    pthread_once(&g_once, android_cpuInit);\n    return g_cpuCount;\n}\n\nstatic void\nandroid_cpuInitDummy(void)\n{\n    g_inited = 1;\n}\n\nint\nandroid_setCpu(int cpu_count, uint64_t cpu_features)\n{\n    /* Fail if the library was already initialized. */\n    if (g_inited)\n        return 0;\n\n    android_cpuInitFamily();\n    g_cpuCount = (cpu_count <= 0 ? 1 : cpu_count);\n    g_cpuFeatures = cpu_features;\n    pthread_once(&g_once, android_cpuInitDummy);\n\n    return 1;\n}\n\n#ifdef __arm__\nuint32_t\nandroid_getCpuIdArm(void)\n{\n    pthread_once(&g_once, android_cpuInit);\n    return g_cpuIdArm;\n}\n\nint\nandroid_setCpuArm(int cpu_count, uint64_t cpu_features, uint32_t cpu_id)\n{\n    if (!android_setCpu(cpu_count, cpu_features))\n        return 0;\n\n    g_cpuIdArm = cpu_id;\n    return 1;\n}\n#endif  /* __arm__ */\n\n/*\n * Technical note: Making sense of ARM's FPU architecture versions.\n *\n * FPA was ARM's first attempt at an FPU architecture. There is no Android\n * device that actually uses it since this technology was already obsolete\n * when the project started. If you see references to FPA instructions\n * somewhere, you can be sure that this doesn't apply to Android at all.\n *\n * FPA was followed by \"VFP\", soon renamed \"VFPv1\" due to the emergence of\n * new versions / additions to it. ARM considers this obsolete right now,\n * and no known Android device implements it either.\n *\n * VFPv2 added a few instructions to VFPv1, and is an *optional* extension\n * supported by some ARMv5TE, ARMv6 and ARMv6T2 CPUs. Note that a device\n * supporting the 'armeabi' ABI doesn't necessarily support these.\n *\n * VFPv3-D16 adds a few instructions on top of VFPv2 and is typically used\n * on ARMv7-A CPUs which implement a FPU. Note that it is also mandated\n * by the Android 'armeabi-v7a' ABI. The -D16 suffix in its name means\n * that it provides 16 double-precision FPU registers (d0-d15) and 32\n * single-precision ones (s0-s31) which happen to be mapped to the same\n * register banks.\n *\n * VFPv3-D32 is the name of an extension to VFPv3-D16 that provides 16\n * additional double precision registers (d16-d31). Note that there are\n * still only 32 single precision registers.\n *\n * VFPv3xD is a *subset* of VFPv3-D16 that only provides single-precision\n * registers. It is only used on ARMv7-M (i.e. on micro-controllers) which\n * are not supported by Android. Note that it is not compatible with VFPv2.\n *\n * NOTE: The term 'VFPv3' usually designate either VFPv3-D16 or VFPv3-D32\n *       depending on context. For example GCC uses it for VFPv3-D32, but\n *       the Linux kernel code uses it for VFPv3-D16 (especially in\n *       /proc/cpuinfo). Always try to use the full designation when\n *       possible.\n *\n * NEON, a.k.a. \"ARM Advanced SIMD\" is an extension that provides\n * instructions to perform parallel computations on vectors of 8, 16,\n * 32, 64 and 128 bit quantities. NEON requires VFPv32-D32 since all\n * NEON registers are also mapped to the same register banks.\n *\n * VFPv4-D16, adds a few instructions on top of VFPv3-D16 in order to\n * perform fused multiply-accumulate on VFP registers, as well as\n * half-precision (16-bit) conversion operations.\n *\n * VFPv4-D32 is VFPv4-D16 with 32, instead of 16, FPU double precision\n * registers.\n *\n * VPFv4-NEON is VFPv4-D32 with NEON instructions. It also adds fused\n * multiply-accumulate instructions that work on the NEON registers.\n *\n * NOTE: Similarly, \"VFPv4\" might either reference VFPv4-D16 or VFPv4-D32\n *       depending on context.\n *\n * The following information was determined by scanning the binutils-2.22\n * sources:\n *\n * Basic VFP instruction subsets:\n *\n * #define FPU_VFP_EXT_V1xD 0x08000000     // Base VFP instruction set.\n * #define FPU_VFP_EXT_V1   0x04000000     // Double-precision insns.\n * #define FPU_VFP_EXT_V2   0x02000000     // ARM10E VFPr1.\n * #define FPU_VFP_EXT_V3xD 0x01000000     // VFPv3 single-precision.\n * #define FPU_VFP_EXT_V3   0x00800000     // VFPv3 double-precision.\n * #define FPU_NEON_EXT_V1  0x00400000     // Neon (SIMD) insns.\n * #define FPU_VFP_EXT_D32  0x00200000     // Registers D16-D31.\n * #define FPU_VFP_EXT_FP16 0x00100000     // Half-precision extensions.\n * #define FPU_NEON_EXT_FMA 0x00080000     // Neon fused multiply-add\n * #define FPU_VFP_EXT_FMA  0x00040000     // VFP fused multiply-add\n *\n * FPU types (excluding NEON)\n *\n * FPU_VFP_V1xD (EXT_V1xD)\n *    |\n *    +--------------------------+\n *    |                          |\n * FPU_VFP_V1 (+EXT_V1)       FPU_VFP_V3xD (+EXT_V2+EXT_V3xD)\n *    |                          |\n *    |                          |\n * FPU_VFP_V2 (+EXT_V2)       FPU_VFP_V4_SP_D16 (+EXT_FP16+EXT_FMA)\n *    |\n * FPU_VFP_V3D16 (+EXT_Vx3D+EXT_V3)\n *    |\n *    +--------------------------+\n *    |                          |\n * FPU_VFP_V3 (+EXT_D32)     FPU_VFP_V4D16 (+EXT_FP16+EXT_FMA)\n *    |                          |\n *    |                      FPU_VFP_V4 (+EXT_D32)\n *    |\n * FPU_VFP_HARD (+EXT_FMA+NEON_EXT_FMA)\n *\n * VFP architectures:\n *\n * ARCH_VFP_V1xD  (EXT_V1xD)\n *   |\n *   +------------------+\n *   |                  |\n *   |             ARCH_VFP_V3xD (+EXT_V2+EXT_V3xD)\n *   |                  |\n *   |             ARCH_VFP_V3xD_FP16 (+EXT_FP16)\n *   |                  |\n *   |             ARCH_VFP_V4_SP_D16 (+EXT_FMA)\n *   |\n * ARCH_VFP_V1 (+EXT_V1)\n *   |\n * ARCH_VFP_V2 (+EXT_V2)\n *   |\n * ARCH_VFP_V3D16 (+EXT_V3xD+EXT_V3)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V3D16_FP16  (+EXT_FP16)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V4_D16 (+EXT_FP16+EXT_FMA)\n *   |                   |\n *   |         ARCH_VFP_V4 (+EXT_D32)\n *   |                   |\n *   |         ARCH_NEON_VFP_V4 (+EXT_NEON+EXT_NEON_FMA)\n *   |\n * ARCH_VFP_V3 (+EXT_D32)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V3_FP16 (+EXT_FP16)\n *   |\n * ARCH_VFP_V3_PLUS_NEON_V1 (+EXT_NEON)\n *   |\n * ARCH_NEON_FP16 (+EXT_FP16)\n *\n * -fpu=<name> values and their correspondance with FPU architectures above:\n *\n *   {\"vfp\",               FPU_ARCH_VFP_V2},\n *   {\"vfp9\",              FPU_ARCH_VFP_V2},\n *   {\"vfp3\",              FPU_ARCH_VFP_V3}, // For backwards compatbility.\n *   {\"vfp10\",             FPU_ARCH_VFP_V2},\n *   {\"vfp10-r0\",          FPU_ARCH_VFP_V1},\n *   {\"vfpxd\",             FPU_ARCH_VFP_V1xD},\n *   {\"vfpv2\",             FPU_ARCH_VFP_V2},\n *   {\"vfpv3\",             FPU_ARCH_VFP_V3},\n *   {\"vfpv3-fp16\",        FPU_ARCH_VFP_V3_FP16},\n *   {\"vfpv3-d16\",         FPU_ARCH_VFP_V3D16},\n *   {\"vfpv3-d16-fp16\",    FPU_ARCH_VFP_V3D16_FP16},\n *   {\"vfpv3xd\",           FPU_ARCH_VFP_V3xD},\n *   {\"vfpv3xd-fp16\",      FPU_ARCH_VFP_V3xD_FP16},\n *   {\"neon\",              FPU_ARCH_VFP_V3_PLUS_NEON_V1},\n *   {\"neon-fp16\",         FPU_ARCH_NEON_FP16},\n *   {\"vfpv4\",             FPU_ARCH_VFP_V4},\n *   {\"vfpv4-d16\",         FPU_ARCH_VFP_V4D16},\n *   {\"fpv4-sp-d16\",       FPU_ARCH_VFP_V4_SP_D16},\n *   {\"neon-vfpv4\",        FPU_ARCH_NEON_VFP_V4},\n *\n *\n * Simplified diagram that only includes FPUs supported by Android:\n * Only ARCH_VFP_V3D16 is actually mandated by the armeabi-v7a ABI,\n * all others are optional and must be probed at runtime.\n *\n * ARCH_VFP_V3D16 (EXT_V1xD+EXT_V1+EXT_V2+EXT_V3xD+EXT_V3)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V3D16_FP16  (+EXT_FP16)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V4_D16 (+EXT_FP16+EXT_FMA)\n *   |                   |\n *   |         ARCH_VFP_V4 (+EXT_D32)\n *   |                   |\n *   |         ARCH_NEON_VFP_V4 (+EXT_NEON+EXT_NEON_FMA)\n *   |\n * ARCH_VFP_V3 (+EXT_D32)\n *   |\n *   +-------------------+\n *   |                   |\n *   |         ARCH_VFP_V3_FP16 (+EXT_FP16)\n *   |\n * ARCH_VFP_V3_PLUS_NEON_V1 (+EXT_NEON)\n *   |\n * ARCH_NEON_FP16 (+EXT_FP16)\n *\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/3rdparty/ittnotify/src/ittnotify/jitprofiling.c": "/* <copyright>\n  This file is provided under a dual BSD/GPLv2 license.  When using or\n  redistributing this file, you may do so under either license.\n\n  GPL LICENSE SUMMARY\n\n  Copyright (c) 2005-2014 Intel Corporation. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of version 2 of the GNU General Public License as\n  published by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.\n  The full GNU General Public License is included in this distribution\n  in the file called LICENSE.GPL.\n\n  Contact Information:\n  http://software.intel.com/en-us/articles/intel-vtune-amplifier-xe/\n\n  BSD LICENSE\n\n  Copyright (c) 2005-2014 Intel Corporation. All rights reserved.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n    * Neither the name of Intel Corporation nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</copyright> */\n\n#include \"ittnotify_config.h\"\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#if ITT_PLATFORM != ITT_PLATFORM_MAC && ITT_PLATFORM != ITT_PLATFORM_FREEBSD\n#include <malloc.h>\n#endif\n#include <stdlib.h>\n\n#include \"jitprofiling.h\"\n\nstatic const char rcsid[] = \"\\n@(#) $Revision: 471937 $\\n\";\n\n#define DLL_ENVIRONMENT_VAR             \"VS_PROFILER\"\n\n#ifndef NEW_DLL_ENVIRONMENT_VAR\n#if ITT_ARCH==ITT_ARCH_IA32\n#define NEW_DLL_ENVIRONMENT_VAR\t        \"INTEL_JIT_PROFILER32\"\n#else\n#define NEW_DLL_ENVIRONMENT_VAR\t        \"INTEL_JIT_PROFILER64\"\n#endif\n#endif /* NEW_DLL_ENVIRONMENT_VAR */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define DEFAULT_DLLNAME                 \"JitPI.dll\"\nHINSTANCE m_libHandle = NULL;\n#elif ITT_PLATFORM==ITT_PLATFORM_MAC\n#define DEFAULT_DLLNAME                 \"libJitPI.dylib\"\nvoid* m_libHandle = NULL;\n#else\n#define DEFAULT_DLLNAME                 \"libJitPI.so\"\nvoid* m_libHandle = NULL;\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n/* default location of JIT profiling agent on Android */\n#define ANDROID_JIT_AGENT_PATH  \"/data/intel/libittnotify.so\"\n\n/* the function pointers */\ntypedef unsigned int(JITAPI *TPInitialize)(void);\nstatic TPInitialize FUNC_Initialize=NULL;\n\ntypedef unsigned int(JITAPI *TPNotify)(unsigned int, void*);\nstatic TPNotify FUNC_NotifyEvent=NULL;\n\nstatic iJIT_IsProfilingActiveFlags executionMode = iJIT_NOTHING_RUNNING;\n\n/* end collector dll part. */\n\n/* loadiJIT_Funcs() : this function is called just in the beginning\n * and is responsible to load the functions from BistroJavaCollector.dll\n * result:\n *  on success: the functions loads, iJIT_DLL_is_missing=0, return value = 1\n *  on failure: the functions are NULL, iJIT_DLL_is_missing=1, return value = 0\n */\nstatic int loadiJIT_Funcs(void);\n\n/* global representing whether the collector can't be loaded */\nstatic int iJIT_DLL_is_missing = 0;\n\nITT_EXTERN_C int JITAPI\niJIT_NotifyEvent(iJIT_JVM_EVENT event_type, void *EventSpecificData)\n{\n    int ReturnValue = 0;\n\n    /* initialization part - the collector has not been loaded yet. */\n    if (!FUNC_NotifyEvent)\n    {\n        if (iJIT_DLL_is_missing)\n            return 0;\n\n        if (!loadiJIT_Funcs())\n            return 0;\n    }\n\n    if (event_type == iJVM_EVENT_TYPE_METHOD_LOAD_FINISHED ||\n        event_type == iJVM_EVENT_TYPE_METHOD_UPDATE)\n    {\n        if (((piJIT_Method_Load)EventSpecificData)->method_id == 0)\n            return 0;\n    }\n    else if (event_type == iJVM_EVENT_TYPE_METHOD_LOAD_FINISHED_V2)\n    {\n        if (((piJIT_Method_Load_V2)EventSpecificData)->method_id == 0)\n            return 0;\n    }\n    else if (event_type == iJVM_EVENT_TYPE_METHOD_LOAD_FINISHED_V3)\n    {\n        if (((piJIT_Method_Load_V3)EventSpecificData)->method_id == 0)\n            return 0;\n    }\n    else if (event_type == iJVM_EVENT_TYPE_METHOD_INLINE_LOAD_FINISHED)\n    {\n        if (((piJIT_Method_Inline_Load)EventSpecificData)->method_id == 0 ||\n            ((piJIT_Method_Inline_Load)EventSpecificData)->parent_method_id == 0)\n            return 0;\n    }\n\n    ReturnValue = (int)FUNC_NotifyEvent(event_type, EventSpecificData);\n\n    return ReturnValue;\n}\n\nITT_EXTERN_C iJIT_IsProfilingActiveFlags JITAPI iJIT_IsProfilingActive()\n{\n    if (!iJIT_DLL_is_missing)\n    {\n        loadiJIT_Funcs();\n    }\n\n    return executionMode;\n}\n\n/* This function loads the collector dll and the relevant functions.\n * on success: all functions load,     iJIT_DLL_is_missing = 0, return value = 1\n * on failure: all functions are NULL, iJIT_DLL_is_missing = 1, return value = 0\n */\nstatic int loadiJIT_Funcs()\n{\n    static int bDllWasLoaded = 0;\n    char *dllName = (char*)rcsid; /* !! Just to avoid unused code elimination */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    DWORD dNameLength = 0;\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n    if(bDllWasLoaded)\n    {\n        /* dll was already loaded, no need to do it for the second time */\n        return 1;\n    }\n\n    /* Assumes that the DLL will not be found */\n    iJIT_DLL_is_missing = 1;\n    FUNC_NotifyEvent = NULL;\n\n    if (m_libHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        FreeLibrary(m_libHandle);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        dlclose(m_libHandle);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        m_libHandle = NULL;\n    }\n\n    /* Try to get the dll name from the environment */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    dNameLength = GetEnvironmentVariableA(NEW_DLL_ENVIRONMENT_VAR, NULL, 0);\n    if (dNameLength)\n    {\n        DWORD envret = 0;\n        dllName = (char*)malloc(sizeof(char) * (dNameLength + 1));\n        if(dllName != NULL)\n        {\n            envret = GetEnvironmentVariableA(NEW_DLL_ENVIRONMENT_VAR, \n                                             dllName, dNameLength);\n            if (envret)\n            {\n                /* Try to load the dll from the PATH... */\n                m_libHandle = LoadLibraryExA(dllName, \n                                             NULL, LOAD_WITH_ALTERED_SEARCH_PATH);\n            }\n            free(dllName);\n        }\n    } else {\n        /* Try to use old VS_PROFILER variable */\n        dNameLength = GetEnvironmentVariableA(DLL_ENVIRONMENT_VAR, NULL, 0);\n        if (dNameLength)\n        {\n            DWORD envret = 0;\n            dllName = (char*)malloc(sizeof(char) * (dNameLength + 1));\n            if(dllName != NULL)\n            {\n                envret = GetEnvironmentVariableA(DLL_ENVIRONMENT_VAR, \n                                                 dllName, dNameLength);\n                if (envret)\n                {\n                    /* Try to load the dll from the PATH... */\n                    m_libHandle = LoadLibraryA(dllName);\n                }\n                free(dllName);\n            }\n        }\n    }\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    dllName = getenv(NEW_DLL_ENVIRONMENT_VAR);\n    if (!dllName)\n        dllName = getenv(DLL_ENVIRONMENT_VAR);\n#if defined(__ANDROID__) || defined(ANDROID)\n    if (!dllName)\n        dllName = ANDROID_JIT_AGENT_PATH;\n#endif\n    if (dllName)\n    {\n        /* Try to load the dll from the PATH... */\n        m_libHandle = dlopen(dllName, RTLD_LAZY);\n    }\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n    if (!m_libHandle)\n    {\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n        m_libHandle = LoadLibraryA(DEFAULT_DLLNAME);\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n        m_libHandle = dlopen(DEFAULT_DLLNAME, RTLD_LAZY);\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    }\n\n    /* if the dll wasn't loaded - exit. */\n    if (!m_libHandle)\n    {\n        iJIT_DLL_is_missing = 1; /* don't try to initialize\n                                  * JIT agent the second time\n                                  */\n        return 0;\n    }\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    FUNC_NotifyEvent = (TPNotify)GetProcAddress(m_libHandle, \"NotifyEvent\");\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    FUNC_NotifyEvent = (TPNotify)dlsym(m_libHandle, \"NotifyEvent\");\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    if (!FUNC_NotifyEvent) \n    {\n        FUNC_Initialize = NULL;\n        return 0;\n    }\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n    FUNC_Initialize = (TPInitialize)GetProcAddress(m_libHandle, \"Initialize\");\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    FUNC_Initialize = (TPInitialize)dlsym(m_libHandle, \"Initialize\");\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n    if (!FUNC_Initialize) \n    {\n        FUNC_NotifyEvent = NULL;\n        return 0;\n    }\n\n    executionMode = (iJIT_IsProfilingActiveFlags)FUNC_Initialize();\n\n    bDllWasLoaded = 1;\n    iJIT_DLL_is_missing = 0; /* DLL is ok. */\n\n    return 1;\n}\n\nITT_EXTERN_C unsigned int JITAPI iJIT_GetNewMethodID()\n{\n    static unsigned int methodID = 1;\n\n    if (methodID == 0)\n        return 0;  /* ERROR : this is not a valid value */\n\n    return methodID++;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/3rdparty/ittnotify/src/ittnotify/ittnotify_config.h": "/* <copyright>\n  This file is provided under a dual BSD/GPLv2 license.  When using or\n  redistributing this file, you may do so under either license.\n\n  GPL LICENSE SUMMARY\n\n  Copyright (c) 2005-2014 Intel Corporation. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of version 2 of the GNU General Public License as\n  published by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.\n  The full GNU General Public License is included in this distribution\n  in the file called LICENSE.GPL.\n\n  Contact Information:\n  http://software.intel.com/en-us/articles/intel-vtune-amplifier-xe/\n\n  BSD LICENSE\n\n  Copyright (c) 2005-2014 Intel Corporation. All rights reserved.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n    * Neither the name of Intel Corporation nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</copyright> */\n#ifndef _ITTNOTIFY_CONFIG_H_\n#define _ITTNOTIFY_CONFIG_H_\n\n/** @cond exclude_from_documentation */\n#ifndef ITT_OS_WIN\n#  define ITT_OS_WIN   1\n#endif /* ITT_OS_WIN */\n\n#ifndef ITT_OS_LINUX\n#  define ITT_OS_LINUX 2\n#endif /* ITT_OS_LINUX */\n\n#ifndef ITT_OS_MAC\n#  define ITT_OS_MAC   3\n#endif /* ITT_OS_MAC */\n\n#ifndef ITT_OS_FREEBSD\n#  define ITT_OS_FREEBSD   4\n#endif /* ITT_OS_FREEBSD */\n\n#ifndef ITT_OS\n#  if defined WIN32 || defined _WIN32\n#    define ITT_OS ITT_OS_WIN\n#  elif defined( __APPLE__ ) && defined( __MACH__ )\n#    define ITT_OS ITT_OS_MAC\n#  elif defined( __FreeBSD__ )\n#    define ITT_OS ITT_OS_FREEBSD\n#  else\n#    define ITT_OS ITT_OS_LINUX\n#  endif\n#endif /* ITT_OS */\n\n#ifndef ITT_PLATFORM_WIN\n#  define ITT_PLATFORM_WIN 1\n#endif /* ITT_PLATFORM_WIN */\n\n#ifndef ITT_PLATFORM_POSIX\n#  define ITT_PLATFORM_POSIX 2\n#endif /* ITT_PLATFORM_POSIX */\n\n#ifndef ITT_PLATFORM_MAC\n#  define ITT_PLATFORM_MAC 3\n#endif /* ITT_PLATFORM_MAC */\n\n#ifndef ITT_PLATFORM_FREEBSD\n#  define ITT_PLATFORM_FREEBSD 4\n#endif /* ITT_PLATFORM_FREEBSD */\n\n#ifndef ITT_PLATFORM\n#  if ITT_OS==ITT_OS_WIN\n#    define ITT_PLATFORM ITT_PLATFORM_WIN\n#  elif ITT_OS==ITT_OS_MAC\n#    define ITT_PLATFORM ITT_PLATFORM_MAC\n#  elif ITT_OS==ITT_OS_FREEBSD\n#    define ITT_PLATFORM ITT_PLATFORM_FREEBSD\n#  else\n#    define ITT_PLATFORM ITT_PLATFORM_POSIX\n#  endif\n#endif /* ITT_PLATFORM */\n\n#if defined(_UNICODE) && !defined(UNICODE)\n#define UNICODE\n#endif\n\n#include <stddef.h>\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <tchar.h>\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <stdint.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE || _UNICODE */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#ifndef ITTAPI_CDECL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define ITTAPI_CDECL __cdecl\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define ITTAPI_CDECL __attribute__ ((cdecl))\n#    else  /* _M_IX86 || __i386__ */\n#      define ITTAPI_CDECL /* actual only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* ITTAPI_CDECL */\n\n#ifndef STDCALL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define STDCALL __stdcall\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define STDCALL __attribute__ ((stdcall))\n#    else  /* _M_IX86 || __i386__ */\n#      define STDCALL /* supported only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* STDCALL */\n\n#define ITTAPI    ITTAPI_CDECL\n#define LIBITTAPI ITTAPI_CDECL\n\n/* TODO: Temporary for compatibility! */\n#define ITTAPI_CALL    ITTAPI_CDECL\n#define LIBITTAPI_CALL ITTAPI_CDECL\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n/* use __forceinline (VC++ specific) */\n#define ITT_INLINE           __forceinline\n#define ITT_INLINE_ATTRIBUTE /* nothing */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/*\n * Generally, functions are not inlined unless optimization is specified.\n * For functions declared inline, this attribute inlines the function even\n * if no optimization level was specified.\n */\n#ifdef __STRICT_ANSI__\n#define ITT_INLINE           static\n#define ITT_INLINE_ATTRIBUTE __attribute__((unused))\n#else  /* __STRICT_ANSI__ */\n#define ITT_INLINE           static inline\n#define ITT_INLINE_ATTRIBUTE __attribute__((always_inline, unused))\n#endif /* __STRICT_ANSI__ */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/** @endcond */\n\n#ifndef ITT_ARCH_IA32\n#  define ITT_ARCH_IA32  1\n#endif /* ITT_ARCH_IA32 */\n\n#ifndef ITT_ARCH_IA32E\n#  define ITT_ARCH_IA32E 2\n#endif /* ITT_ARCH_IA32E */\n\n#ifndef ITT_ARCH_ARM\n#  define ITT_ARCH_ARM  4\n#endif /* ITT_ARCH_ARM */\n\n#ifndef ITT_ARCH_PPC64\n#  define ITT_ARCH_PPC64  5\n#endif /* ITT_ARCH_PPC64 */\n\n#ifndef ITT_ARCH_AARCH64  /* 64-bit ARM */\n#  define ITT_ARCH_AARCH64  6\n#endif /* ITT_ARCH_AARCH64 */\n\n#ifndef ITT_ARCH\n#  if defined _M_IX86 || defined __i386__\n#    define ITT_ARCH ITT_ARCH_IA32\n#  elif defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#    define ITT_ARCH ITT_ARCH_IA32E\n#  elif defined _M_IA64 || defined __ia64__\n#    define ITT_ARCH ITT_ARCH_IA64\n#  elif defined _M_ARM || defined __arm__\n#    define ITT_ARCH ITT_ARCH_ARM\n#  elif defined __aarch64__\n#    define ITT_ARCH ITT_ARCH_AARCH64\n#  elif defined __powerpc64__\n#    define ITT_ARCH ITT_ARCH_PPC64\n#  endif\n#endif\n\n#ifdef __cplusplus\n#  define ITT_EXTERN_C extern \"C\"\n#  define ITT_EXTERN_C_BEGIN extern \"C\" {\n#  define ITT_EXTERN_C_END }\n#else\n#  define ITT_EXTERN_C /* nothing */\n#  define ITT_EXTERN_C_BEGIN /* nothing */\n#  define ITT_EXTERN_C_END /* nothing */\n#endif /* __cplusplus */\n\n#define ITT_TO_STR_AUX(x) #x\n#define ITT_TO_STR(x)     ITT_TO_STR_AUX(x)\n\n#define __ITT_BUILD_ASSERT(expr, suffix) do { \\\n    static char __itt_build_check_##suffix[(expr) ? 1 : -1]; \\\n    __itt_build_check_##suffix[0] = 0; \\\n} while(0)\n#define _ITT_BUILD_ASSERT(expr, suffix)  __ITT_BUILD_ASSERT((expr), suffix)\n#define ITT_BUILD_ASSERT(expr)           _ITT_BUILD_ASSERT((expr), __LINE__)\n\n#define ITT_MAGIC { 0xED, 0xAB, 0xAB, 0xEC, 0x0D, 0xEE, 0xDA, 0x30 }\n\n/* Replace with snapshot date YYYYMMDD for promotion build. */\n#define API_VERSION_BUILD    20151119\n\n#ifndef API_VERSION_NUM\n#define API_VERSION_NUM 0.0.0\n#endif /* API_VERSION_NUM */\n\n#define API_VERSION \"ITT-API-Version \" ITT_TO_STR(API_VERSION_NUM) \\\n                                \" (\" ITT_TO_STR(API_VERSION_BUILD) \")\"\n\n/* OS communication functions */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\ntypedef HMODULE           lib_t;\ntypedef DWORD             TIDT;\ntypedef CRITICAL_SECTION  mutex_t;\n#define MUTEX_INITIALIZER { 0 }\n#define strong_alias(name, aliasname) /* empty for Windows */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <dlfcn.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE 1 /* need for PTHREAD_MUTEX_RECURSIVE */\n#endif /* _GNU_SOURCE */\n#ifndef __USE_UNIX98\n#define __USE_UNIX98 1 /* need for PTHREAD_MUTEX_RECURSIVE, on SLES11.1 with gcc 4.3.4 wherein pthread.h missing dependency on __USE_XOPEN2K8 */\n#endif /*__USE_UNIX98*/\n#include <pthread.h>\ntypedef void*             lib_t;\ntypedef pthread_t         TIDT;\ntypedef pthread_mutex_t   mutex_t;\n#define MUTEX_INITIALIZER PTHREAD_MUTEX_INITIALIZER\n#define _strong_alias(name, aliasname) \\\n            extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n#define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define __itt_get_proc(lib, name) GetProcAddress(lib, name)\n#define __itt_mutex_init(mutex)   InitializeCriticalSection(mutex)\n#define __itt_mutex_lock(mutex)   EnterCriticalSection(mutex)\n#define __itt_mutex_unlock(mutex) LeaveCriticalSection(mutex)\n#define __itt_load_lib(name)      LoadLibraryA(name)\n#define __itt_unload_lib(handle)  FreeLibrary(handle)\n#define __itt_system_error()      (int)GetLastError()\n#define __itt_fstrcmp(s1, s2)     lstrcmpA(s1, s2)\n#define __itt_fstrnlen(s, l)      strnlen_s(s, l)\n#define __itt_fstrcpyn(s1, b, s2, l) strncpy_s(s1, b, s2, l)\n#define __itt_fstrdup(s)          _strdup(s)\n#define __itt_thread_id()         GetCurrentThreadId()\n#define __itt_thread_yield()      SwitchToThread()\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return InterlockedIncrement(ptr);\n}\n#endif /* ITT_SIMPLE_INIT */\n\n#define DL_SYMBOLS (1)\n#define PTHREAD_SYMBOLS (1)\n\n#else /* ITT_PLATFORM!=ITT_PLATFORM_WIN */\n#define __itt_get_proc(lib, name) dlsym(lib, name)\n#define __itt_mutex_init(mutex)   {\\\n    pthread_mutexattr_t mutex_attr;                                         \\\n    int error_code = pthread_mutexattr_init(&mutex_attr);                   \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_init\",    \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_settype(&mutex_attr,                     \\\n                                           PTHREAD_MUTEX_RECURSIVE);        \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_settype\", \\\n                           error_code);                                     \\\n    error_code = pthread_mutex_init(mutex, &mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutex_init\",        \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_destroy(&mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_destroy\", \\\n                           error_code);                                     \\\n}\n#define __itt_mutex_lock(mutex)   pthread_mutex_lock(mutex)\n#define __itt_mutex_unlock(mutex) pthread_mutex_unlock(mutex)\n#define __itt_load_lib(name)      dlopen(name, RTLD_LAZY)\n#define __itt_unload_lib(handle)  dlclose(handle)\n#define __itt_system_error()      errno\n#define __itt_fstrcmp(s1, s2)     strcmp(s1, s2)\n\n/* makes customer code define safe APIs for SDL_STRNLEN_S and SDL_STRNCPY_S */\n#ifdef SDL_STRNLEN_S\n#define __itt_fstrnlen(s, l)      SDL_STRNLEN_S(s, l)\n#else\n#define __itt_fstrnlen(s, l)      strlen(s)\n#endif /* SDL_STRNLEN_S */\n#ifdef SDL_STRNCPY_S\n#define __itt_fstrcpyn(s1, b, s2, l) SDL_STRNCPY_S(s1, b, s2, l)\n#else\n#define __itt_fstrcpyn(s1, b, s2, l) strncpy(s1, s2, b)\n#endif /* SDL_STRNCPY_S */\n\n#define __itt_fstrdup(s)          strdup(s)\n#define __itt_thread_id()         pthread_self()\n#define __itt_thread_yield()      sched_yield()\n#if ITT_ARCH==ITT_ARCH_IA64\n#ifdef __INTEL_COMPILER\n#define __TBB_machine_fetchadd4(addr, val) __fetchadd4_acq((void *)addr, val)\n#else  /* __INTEL_COMPILER */\n/* TODO: Add Support for not Intel compilers for IA-64 architecture */\n#endif /* __INTEL_COMPILER */\n#elif ITT_ARCH==ITT_ARCH_IA32 || ITT_ARCH==ITT_ARCH_IA32E /* ITT_ARCH!=ITT_ARCH_IA64 */\nITT_INLINE long\n__TBB_machine_fetchadd4(volatile void* ptr, long addend) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __TBB_machine_fetchadd4(volatile void* ptr, long addend)\n{\n    long result;\n    __asm__ __volatile__(\"lock\\nxadd %0,%1\"\n                          : \"=r\"(result),\"=m\"(*(int*)ptr)\n                          : \"0\"(addend), \"m\"(*(int*)ptr)\n                          : \"memory\");\n    return result;\n}\n#elif ITT_ARCH==ITT_ARCH_ARM || ITT_ARCH==ITT_ARCH_AARCH64 || ITT_ARCH==ITT_ARCH_PPC64\n#define __TBB_machine_fetchadd4(addr, val) __sync_fetch_and_add(addr, val)\n#endif /* ITT_ARCH==ITT_ARCH_IA64 */\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return __TBB_machine_fetchadd4(ptr, 1) + 1L;\n}\n#endif /* ITT_SIMPLE_INIT */\n\nvoid* dlopen(const char*, int) __attribute__((weak));\nvoid* dlsym(void*, const char*) __attribute__((weak));\nint dlclose(void*) __attribute__((weak));\n#define DL_SYMBOLS (dlopen && dlsym && dlclose)\n\nint pthread_mutex_init(pthread_mutex_t*, const pthread_mutexattr_t*) __attribute__((weak));\nint pthread_mutex_lock(pthread_mutex_t*) __attribute__((weak));\nint pthread_mutex_unlock(pthread_mutex_t*) __attribute__((weak));\nint pthread_mutex_destroy(pthread_mutex_t*) __attribute__((weak));\nint pthread_mutexattr_init(pthread_mutexattr_t*) __attribute__((weak));\nint pthread_mutexattr_settype(pthread_mutexattr_t*, int) __attribute__((weak));\nint pthread_mutexattr_destroy(pthread_mutexattr_t*) __attribute__((weak));\npthread_t pthread_self(void) __attribute__((weak));\n#define PTHREAD_SYMBOLS (pthread_mutex_init && pthread_mutex_lock && pthread_mutex_unlock && pthread_mutex_destroy && pthread_mutexattr_init && pthread_mutexattr_settype && pthread_mutexattr_destroy && pthread_self)\n\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\ntypedef enum {\n    __itt_collection_normal = 0,\n    __itt_collection_paused = 1\n} __itt_collection_state;\n\ntypedef enum {\n    __itt_thread_normal  = 0,\n    __itt_thread_ignored = 1\n} __itt_thread_state;\n\n#pragma pack(push, 8)\n\ntypedef struct ___itt_thread_info\n{\n    const char* nameA; /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* nameW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* nameW;\n#endif /* UNICODE || _UNICODE */\n    TIDT               tid;\n    __itt_thread_state state;   /*!< Thread state (paused or normal) */\n    int                extra1;  /*!< Reserved to the runtime */\n    void*              extra2;  /*!< Reserved to the runtime */\n    struct ___itt_thread_info* next;\n} __itt_thread_info;\n\n#include \"ittnotify_types.h\" /* For __itt_group_id definition */\n\ntypedef struct ___itt_api_info_20101001\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    __itt_group_id group;\n}  __itt_api_info_20101001;\n\ntypedef struct ___itt_api_info\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    void*          null_func;\n    __itt_group_id group;\n}  __itt_api_info;\n\ntypedef struct __itt_counter_info\n{\n    const char* nameA;  /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* nameW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* nameW;\n#endif /* UNICODE || _UNICODE */\n    const char* domainA;  /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* domainW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* domainW;\n#endif /* UNICODE || _UNICODE */\n    int type;\n    long index;\n    int   extra1; /*!< Reserved to the runtime */\n    void* extra2; /*!< Reserved to the runtime */\n    struct __itt_counter_info* next;\n}  __itt_counter_info_t;\n\nstruct ___itt_domain;\nstruct ___itt_string_handle;\n\ntypedef struct ___itt_global\n{\n    unsigned char          magic[8];\n    unsigned long          version_major;\n    unsigned long          version_minor;\n    unsigned long          version_build;\n    volatile long          api_initialized;\n    volatile long          mutex_initialized;\n    volatile long          atomic_counter;\n    mutex_t                mutex;\n    lib_t                  lib;\n    void*                  error_handler;\n    const char**           dll_path_ptr;\n    __itt_api_info*        api_list_ptr;\n    struct ___itt_global*  next;\n    /* Joinable structures below */\n    __itt_thread_info*     thread_list;\n    struct ___itt_domain*  domain_list;\n    struct ___itt_string_handle* string_list;\n    __itt_collection_state state;\n    __itt_counter_info_t* counter_list;\n} __itt_global;\n\n#pragma pack(pop)\n\n#define NEW_THREAD_INFO_W(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = NULL; \\\n        h->nameW  = n ? _wcsdup(n) : NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_THREAD_INFO_A(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = n ? __itt_fstrdup(n) : NULL; \\\n        h->nameW  = NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_W(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 1;    /* domain is enabled by default */ \\\n        h->nameA  = NULL; \\\n        h->nameW  = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_A(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 1;    /* domain is enabled by default */ \\\n        h->nameA  = name ? __itt_fstrdup(name) : NULL; \\\n        h->nameW  = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_W(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = NULL; \\\n        h->strW   = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_A(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = name ? __itt_fstrdup(name) : NULL; \\\n        h->strW   = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_COUNTER_W(gptr,h,h_tail,name,domain,type) { \\\n    h = (__itt_counter_info_t*)malloc(sizeof(__itt_counter_info_t)); \\\n    if (h != NULL) { \\\n        h->nameA   = NULL; \\\n        h->nameW   = name ? _wcsdup(name) : NULL; \\\n        h->domainA   = NULL; \\\n        h->domainW   = name ? _wcsdup(domain) : NULL; \\\n        h->type = type; \\\n        h->index = 0; \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->counter_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_COUNTER_A(gptr,h,h_tail,name,domain,type) { \\\n    h = (__itt_counter_info_t*)malloc(sizeof(__itt_counter_info_t)); \\\n    if (h != NULL) { \\\n        h->nameA   = name ? __itt_fstrdup(name) : NULL; \\\n        h->nameW   = NULL; \\\n        h->domainA   = domain ? __itt_fstrdup(domain) : NULL; \\\n        h->domainW   = NULL; \\\n        h->type = type; \\\n        h->index = 0; \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->counter_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#endif /* _ITTNOTIFY_CONFIG_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/dnn/src/vkcom/vulkan/vk_loader.cpp": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n//\n// Copyright (C) 2018, Intel Corporation, all rights reserved.\n// Third party copyrights are property of their respective owners.\n\n#include \"../../precomp.hpp\"\n#ifdef HAVE_VULKAN\n#include <vulkan/vulkan.h>\n#endif\n#include \"vk_functions.hpp\"\n\n#if defined(_WIN32)\n#include <windows.h>\ntypedef HMODULE VulkanHandle;\n#define DEFAULT_VK_LIBRARY_PATH \"vulkan-1.dll\"\n#define LOAD_VK_LIBRARY(path) LoadLibrary(path)\n#define FREE_VK_LIBRARY(handle) FreeLibrary(handle)\n#define GET_VK_ENTRY_POINT(handle) \\\n        (PFN_vkGetInstanceProcAddr)GetProcAddress(handle, \"vkGetInstanceProcAddr\");\n#endif // _WIN32\n\n#if defined(__linux__)\n#include <dlfcn.h>\n#include <stdio.h>\ntypedef void* VulkanHandle;\n#define DEFAULT_VK_LIBRARY_PATH \"libvulkan.so.1\"\n#define LOAD_VK_LIBRARY(path) dlopen(path, RTLD_LAZY | RTLD_GLOBAL)\n#define FREE_VK_LIBRARY(handle) dlclose(handle)\n#define GET_VK_ENTRY_POINT(handle) \\\n        (PFN_vkGetInstanceProcAddr)dlsym(handle, \"vkGetInstanceProcAddr\");\n#endif // __linux__\n\n#ifndef DEFAULT_VK_LIBRARY_PATH\n#define DEFAULT_VK_LIBRARY_PATH \"\"\n#define LOAD_VK_LIBRARY(path) nullptr\n#define FREE_VK_LIBRARY(handle)\n#define GET_VK_ENTRY_POINT(handle) nullptr\n#endif\n\nnamespace cv { namespace dnn { namespace vkcom {\n\n#ifdef HAVE_VULKAN\nstatic VulkanHandle handle = nullptr;\n\nbool loadVulkanFunctions(VkInstance& instance)\n{\n#define VK_FUNC(fun) \\\n    fun = (PFN_##fun)vkGetInstanceProcAddr(instance, #fun);\n\n#define VK_FUNC_MANDATORY(fun) \\\n    VK_FUNC(fun) \\\n    if(!fun) \\\n    { \\\n      fprintf(stderr, \"Could not load Vulkan function: %s !\\n\", #fun); \\\n      return false; \\\n    }\n\n#include \"function_list.inl.hpp\"\n    return true;\n}\n\nbool loadVulkanGlobalFunctions()\n{\n#define VK_GLOBAL_LEVEL_FUNC(fun) \\\n    fun = (PFN_##fun)vkGetInstanceProcAddr(nullptr, #fun);\n\n#define VK_GLOBAL_LEVEL_FUNC_MANDATORY(fun) \\\n    VK_GLOBAL_LEVEL_FUNC(fun) \\\n    if(!fun) \\\n    { \\\n      fprintf(stderr, \"Could not load global Vulkan function: %s !\\n\", #fun); \\\n      return false; \\\n    }\n\n#include \"function_list.inl.hpp\"\n    return true;\n}\n\nbool loadVulkanEntry()\n{\n    if (handle == nullptr)\n        return false;\n\n    vkGetInstanceProcAddr = GET_VK_ENTRY_POINT(handle);\n    if (!vkGetInstanceProcAddr)\n    {\n        fprintf(stderr, \"Could not load Vulkan entry function: vkGetInstanceProcAddr!\\n\");\n        return false;\n    }\n\n    return true;\n}\n\nbool loadVulkanLibrary()\n{\n    if (handle != nullptr)\n        return true;\n\n    const char* path;\n    const char* envPath = getenv(\"OPENCV_VULKAN_RUNTIME\");\n    if (envPath)\n    {\n        path = envPath;\n    }\n    else\n    {\n        path = DEFAULT_VK_LIBRARY_PATH;\n    }\n\n    handle = LOAD_VK_LIBRARY(path);\n    if( handle == nullptr )\n    {\n        fprintf(stderr, \"Could not load Vulkan library: %s!\\n\", path);\n        return false;\n    }\n\n    return true;\n}\n\n#endif // HAVE_VULKAN\n\n}}} // namespace cv::dnn::vkcom\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/videoio/src/backend_plugin.cpp": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n\n#include \"precomp.hpp\"\n\n#include \"backend.hpp\"\n#include \"plugin_api.hpp\"\n\n#include \"opencv2/core/utils/filesystem.hpp\"\n#include \"opencv2/core/utils/configuration.private.hpp\"\n#include \"opencv2/core/private.hpp\"\n#include \"videoio_registry.hpp\"\n\n//==================================================================================================\n// Dynamic backend implementation\n\n#include \"opencv2/core/utils/logger.hpp\"\n#include <sstream>\nusing namespace std;\n\n#if defined(_WIN32)\n#include <windows.h>\n#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__)\n#include <dlfcn.h>\n#endif\n\nnamespace cv { namespace impl {\n\n#if defined(_WIN32)\ntypedef HMODULE LibHandle_t;\ntypedef wchar_t FileSystemChar_t;\ntypedef std::wstring FileSystemPath_t;\n\nstatic\nFileSystemPath_t toFileSystemPath(const std::string& p)\n{\n    FileSystemPath_t result;\n    result.resize(p.size());\n    for (size_t i = 0; i < p.size(); i++)\n        result[i] = (wchar_t)p[i];\n    return result;\n}\nstatic\nstd::string toPrintablePath(const FileSystemPath_t& p)\n{\n    std::string result;\n    result.resize(p.size());\n    for (size_t i = 0; i < p.size(); i++)\n    {\n        wchar_t ch = p[i];\n        if ((int)ch >= ' ' && (int)ch < 128)\n            result[i] = (char)ch;\n        else\n            result[i] = '?';\n    }\n    return result;\n}\n#else  // !_WIN32\ntypedef void* LibHandle_t;\ntypedef char FileSystemChar_t;\ntypedef std::string FileSystemPath_t;\n\nstatic inline FileSystemPath_t toFileSystemPath(const std::string& p) { return p; }\nstatic inline std::string toPrintablePath(const FileSystemPath_t& p) { return p; }\n#endif\n\n\nstatic Mutex& getInitializationMutex()\n{\n    static Mutex initializationMutex;\n    return initializationMutex;\n}\n\nstatic inline\nvoid* getSymbol_(LibHandle_t h, const char* symbolName)\n{\n#if defined(_WIN32)\n    return (void*)GetProcAddress(h, symbolName);\n#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__)\n    return dlsym(h, symbolName);\n#endif\n}\n\nstatic inline\nLibHandle_t libraryLoad_(const FileSystemPath_t& filename)\n{\n#if defined(_WIN32)\n# ifdef WINRT\n    return LoadPackagedLibrary(filename.c_str(), 0);\n# else\n    return LoadLibraryW(filename.c_str());\n#endif\n#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__)\n    return dlopen(filename.c_str(), RTLD_LAZY);\n#endif\n}\n\nstatic inline\nvoid libraryRelease_(LibHandle_t h)\n{\n#if defined(_WIN32)\n    FreeLibrary(h);\n#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__)\n    dlclose(h);\n#endif\n}\n\nstatic inline\nstd::string libraryPrefix()\n{\n#if defined(_WIN32)\n    return \"\";\n#else\n    return \"lib\";\n#endif\n}\nstatic inline\nstd::string librarySuffix()\n{\n#if defined(_WIN32)\n    const char* suffix = \"\"\n        CVAUX_STR(CV_MAJOR_VERSION) CVAUX_STR(CV_MINOR_VERSION) CVAUX_STR(CV_SUBMINOR_VERSION)\n    #if (defined _MSC_VER && defined _M_X64) || (defined __GNUC__ && defined __x86_64__)\n        \"_64\"\n    #endif\n        \".dll\";\n    return suffix;\n#else\n    return \".so\";\n#endif\n}\n\n//============================\n\nclass DynamicLib\n{\nprivate:\n    LibHandle_t handle;\n    const FileSystemPath_t fname;\n\npublic:\n    DynamicLib(const FileSystemPath_t& filename)\n        : handle(0), fname(filename)\n    {\n        libraryLoad(filename);\n    }\n    ~DynamicLib()\n    {\n        libraryRelease();\n    }\n    bool isLoaded() const\n    {\n        return handle != NULL;\n    }\n    void* getSymbol(const char* symbolName) const\n    {\n        if (!handle)\n        {\n            return 0;\n        }\n        void * res = getSymbol_(handle, symbolName);\n        if (!res)\n            CV_LOG_ERROR(NULL, \"No symbol '\" << symbolName << \"' in \" << toPrintablePath(fname));\n        return res;\n    }\n    const std::string getName() const { return toPrintablePath(fname); }\nprivate:\n    void libraryLoad(const FileSystemPath_t& filename)\n    {\n        handle = libraryLoad_(filename);\n        CV_LOG_INFO(NULL, \"load \" << toPrintablePath(filename) << \" => \" << (handle ? \"OK\" : \"FAILED\"));\n    }\n    void libraryRelease()\n    {\n        if (handle)\n        {\n            CV_LOG_INFO(NULL, \"unload \"<< toPrintablePath(fname));\n            libraryRelease_(handle);\n            handle = 0;\n        }\n    }\n\nprivate:\n    DynamicLib(const DynamicLib &);\n    DynamicLib &operator=(const DynamicLib &);\n};\n\n\n//============================\n\nclass PluginBackend: public IBackend\n{\npublic:\n    Ptr<DynamicLib> lib_;\n    const OpenCV_VideoIO_Plugin_API_preview* plugin_api_;\n\n    PluginBackend(const Ptr<DynamicLib>& lib) :\n        lib_(lib), plugin_api_(NULL)\n    {\n        const char* init_name = \"opencv_videoio_plugin_init_v0\";\n        FN_opencv_videoio_plugin_init_t fn_init = reinterpret_cast<FN_opencv_videoio_plugin_init_t>(lib_->getSymbol(init_name));\n        if (fn_init)\n        {\n            plugin_api_ = fn_init(ABI_VERSION, API_VERSION, NULL);\n            if (!plugin_api_)\n            {\n                CV_LOG_INFO(NULL, \"Video I/O: plugin is incompatible: \" << lib->getName());\n                return;\n            }\n            if (plugin_api_->api_header.opencv_version_major != CV_VERSION_MAJOR)\n            {\n                CV_LOG_ERROR(NULL, \"Video I/O: wrong OpenCV major version used by plugin '\" << plugin_api_->api_header.api_description << \"': \" <<\n                    cv::format(\"%d.%d, OpenCV version is '\" CV_VERSION \"'\", plugin_api_->api_header.opencv_version_major, plugin_api_->api_header.opencv_version_minor))\n                plugin_api_ = NULL;\n                return;\n            }\n#ifdef HAVE_FFMPEG_WRAPPER\n            if (plugin_api_->captureAPI == CAP_FFMPEG)\n            {\n                // no checks for OpenCV minor version\n            }\n            else\n#endif\n            if (plugin_api_->api_header.opencv_version_minor != CV_VERSION_MINOR)\n            {\n                CV_LOG_ERROR(NULL, \"Video I/O: wrong OpenCV minor version used by plugin '\" << plugin_api_->api_header.api_description << \"': \" <<\n                    cv::format(\"%d.%d, OpenCV version is '\" CV_VERSION \"'\", plugin_api_->api_header.opencv_version_major, plugin_api_->api_header.opencv_version_minor))\n                plugin_api_ = NULL;\n                return;\n            }\n            // TODO Preview: add compatibility API/ABI checks\n            CV_LOG_INFO(NULL, \"Video I/O: loaded plugin '\" << plugin_api_->api_header.api_description << \"'\");\n        }\n        else\n        {\n            CV_LOG_INFO(NULL, \"Video I/O: plugin is incompatible, missing init function: '\" << init_name << \"', file: \" << lib->getName());\n        }\n    }\n\n    Ptr<IVideoCapture> createCapture(int camera) const CV_OVERRIDE;\n    Ptr<IVideoCapture> createCapture(const std::string &filename) const CV_OVERRIDE;\n    Ptr<IVideoWriter>  createWriter(const std::string &filename, int fourcc, double fps, const cv::Size &sz, bool isColor) const CV_OVERRIDE;\n};\n\nclass PluginBackendFactory : public IBackendFactory\n{\npublic:\n    VideoCaptureAPIs id_;\n    const char* baseName_;\n    Ptr<PluginBackend> backend;\n    bool initialized;\npublic:\n    PluginBackendFactory(VideoCaptureAPIs id, const char* baseName) :\n        id_(id), baseName_(baseName),\n        initialized(false)\n    {\n        // nothing, plugins are loaded on demand\n    }\n\n    Ptr<IBackend> getBackend() const CV_OVERRIDE\n    {\n        if (!initialized)\n        {\n            const_cast<PluginBackendFactory*>(this)->initBackend();\n        }\n        return backend.staticCast<IBackend>();\n    }\nprotected:\n    void initBackend()\n    {\n        AutoLock lock(getInitializationMutex());\n        try {\n            if (!initialized)\n                loadPlugin();\n        }\n        catch (...)\n        {\n            CV_LOG_INFO(NULL, \"Video I/O: exception during plugin loading: \" << baseName_ << \". SKIP\");\n        }\n        initialized = true;\n    }\n    void loadPlugin();\n};\n\nstatic\nstd::vector<FileSystemPath_t> getPluginCandidates(const std::string& baseName)\n{\n    using namespace cv::utils;\n    using namespace cv::utils::fs;\n    const string baseName_l = toLowerCase(baseName);\n    const string baseName_u = toUpperCase(baseName);\n    const FileSystemPath_t baseName_l_fs = toFileSystemPath(baseName_l);\n    vector<FileSystemPath_t> paths;\n    const vector<string> paths_ = getConfigurationParameterPaths(\"OPENCV_VIDEOIO_PLUGIN_PATH\", vector<string>());\n    if (paths_.size() != 0)\n    {\n        for (size_t i = 0; i < paths_.size(); i++)\n        {\n            paths.push_back(toFileSystemPath(paths_[i]));\n        }\n    }\n    else\n    {\n        FileSystemPath_t binaryLocation;\n        if (getBinLocation(binaryLocation))\n        {\n            binaryLocation = getParent(binaryLocation);\n#ifndef CV_VIDEOIO_PLUGIN_SUBDIRECTORY\n            paths.push_back(binaryLocation);\n#else\n            paths.push_back(binaryLocation + toFileSystemPath(\"/\") + toFileSystemPath(CV_VIDEOIO_PLUGIN_SUBDIRECTORY_STR));\n#endif\n        }\n    }\n    const string default_expr = libraryPrefix() + \"opencv_videoio_\" + baseName_l + \"*\" + librarySuffix();\n    const string plugin_expr = getConfigurationParameterString((std::string(\"OPENCV_VIDEOIO_PLUGIN_\") + baseName_u).c_str(), default_expr.c_str());\n    vector<FileSystemPath_t> results;\n#ifdef _WIN32\n    FileSystemPath_t moduleName = toFileSystemPath(libraryPrefix() + \"opencv_videoio_\" + baseName_l + librarySuffix());\n#ifndef WINRT\n    if (baseName_u == \"FFMPEG\")  // backward compatibility\n    {\n        const wchar_t* ffmpeg_env_path = _wgetenv(L\"OPENCV_FFMPEG_DLL_DIR\");\n        if (ffmpeg_env_path)\n        {\n            results.push_back(FileSystemPath_t(ffmpeg_env_path) + L\"\\\\\" + moduleName);\n        }\n    }\n#endif\n    if (plugin_expr != default_expr)\n    {\n        moduleName = toFileSystemPath(plugin_expr);\n        results.push_back(moduleName);\n    }\n    for (const FileSystemPath_t& path : paths)\n    {\n        results.push_back(path + L\"\\\\\" + moduleName);\n    }\n    results.push_back(moduleName);\n#else\n    CV_LOG_INFO(NULL, \"VideoIO pluigin (\" << baseName << \"): glob is '\" << plugin_expr << \"', \" << paths.size() << \" location(s)\");\n    for (const string & path : paths)\n    {\n        if (path.empty())\n            continue;\n        vector<string> candidates;\n        cv::glob(utils::fs::join(path, plugin_expr), candidates);\n        CV_LOG_INFO(NULL, \"    - \" << path << \": \" << candidates.size());\n        copy(candidates.begin(), candidates.end(), back_inserter(results));\n    }\n#endif\n    CV_LOG_INFO(NULL, \"Found \" << results.size() << \" plugin(s) for \" << baseName);\n    return results;\n}\n\nvoid PluginBackendFactory::loadPlugin()\n{\n    for (const FileSystemPath_t& plugin : getPluginCandidates(baseName_))\n    {\n        Ptr<DynamicLib> lib = makePtr<DynamicLib>(plugin);\n        if (!lib->isLoaded())\n            continue;\n        try\n        {\n            Ptr<PluginBackend> pluginBackend = makePtr<PluginBackend>(lib);\n            if (pluginBackend && pluginBackend->plugin_api_)\n            {\n                if (pluginBackend->plugin_api_->captureAPI != id_)\n                {\n                    CV_LOG_ERROR(NULL, \"Video I/O: plugin '\" << pluginBackend->plugin_api_->api_header.api_description <<\n                                       \"': unexpected backend ID: \" <<\n                                       pluginBackend->plugin_api_->captureAPI << \" vs \" << (int)id_ << \" (expected)\");\n                }\n                else\n                {\n                    backend = pluginBackend;\n                    return;\n                }\n            }\n        }\n        catch (...)\n        {\n            CV_LOG_WARNING(NULL, \"Video I/O: exception during plugin initialization: \" << toPrintablePath(plugin) << \". SKIP\");\n        }\n    }\n}\n\n\n//==================================================================================================\n\nclass PluginCapture : public cv::IVideoCapture\n{\n    const OpenCV_VideoIO_Plugin_API_preview* plugin_api_;\n    CvPluginCapture capture_;\n\npublic:\n    static\n    Ptr<PluginCapture> create(const OpenCV_VideoIO_Plugin_API_preview* plugin_api,\n            const std::string &filename, int camera)\n    {\n        CV_Assert(plugin_api);\n        CvPluginCapture capture = NULL;\n        if (plugin_api->Capture_open)\n        {\n            CV_Assert(plugin_api->Capture_release);\n            if (CV_ERROR_OK == plugin_api->Capture_open(filename.empty() ? 0 : filename.c_str(), camera, &capture))\n            {\n                CV_Assert(capture);\n                return makePtr<PluginCapture>(plugin_api, capture);\n            }\n        }\n        return Ptr<PluginCapture>();\n    }\n\n    PluginCapture(const OpenCV_VideoIO_Plugin_API_preview* plugin_api, CvPluginCapture capture)\n        : plugin_api_(plugin_api), capture_(capture)\n    {\n        CV_Assert(plugin_api_); CV_Assert(capture_);\n    }\n\n    ~PluginCapture()\n    {\n        CV_DbgAssert(plugin_api_->Capture_release);\n        if (CV_ERROR_OK != plugin_api_->Capture_release(capture_))\n            CV_LOG_ERROR(NULL, \"Video I/O: Can't release capture by plugin '\" << plugin_api_->api_header.api_description << \"'\");\n        capture_ = NULL;\n    }\n    double getProperty(int prop) const CV_OVERRIDE\n    {\n        double val = -1;\n        if (plugin_api_->Capture_getProperty)\n            if (CV_ERROR_OK != plugin_api_->Capture_getProperty(capture_, prop, &val))\n                val = -1;\n        return val;\n    }\n    bool setProperty(int prop, double val) CV_OVERRIDE\n    {\n        if (plugin_api_->Capture_setProperty)\n            if (CV_ERROR_OK == plugin_api_->Capture_setProperty(capture_, prop, val))\n                return true;\n        return false;\n    }\n    bool grabFrame() CV_OVERRIDE\n    {\n        if (plugin_api_->Capture_grab)\n            if (CV_ERROR_OK == plugin_api_->Capture_grab(capture_))\n                return true;\n        return false;\n    }\n    static CvResult CV_API_CALL retrieve_callback(int stream_idx, const unsigned char* data, int step, int width, int height, int cn, void* userdata)\n    {\n        CV_UNUSED(stream_idx);\n        cv::_OutputArray* dst = static_cast<cv::_OutputArray*>(userdata);\n        if (!dst)\n            return CV_ERROR_FAIL;\n        cv::Mat(cv::Size(width, height), CV_MAKETYPE(CV_8U, cn), (void*)data, step).copyTo(*dst);\n        return CV_ERROR_OK;\n    }\n    bool retrieveFrame(int idx, cv::OutputArray img) CV_OVERRIDE\n    {\n        bool res = false;\n        if (plugin_api_->Capture_retreive)\n            if (CV_ERROR_OK == plugin_api_->Capture_retreive(capture_, idx, retrieve_callback, (cv::_OutputArray*)&img))\n                res = true;\n        return res;\n    }\n    bool isOpened() const CV_OVERRIDE\n    {\n        return capture_ != NULL;  // TODO always true\n    }\n    int getCaptureDomain() CV_OVERRIDE\n    {\n        return plugin_api_->captureAPI;\n    }\n};\n\n\n//==================================================================================================\n\nclass PluginWriter : public cv::IVideoWriter\n{\n    const OpenCV_VideoIO_Plugin_API_preview* plugin_api_;\n    CvPluginWriter writer_;\n\npublic:\n    static\n    Ptr<PluginWriter> create(const OpenCV_VideoIO_Plugin_API_preview* plugin_api,\n            const std::string &filename, int fourcc, double fps, const cv::Size &sz, bool isColor)\n    {\n        CV_Assert(plugin_api);\n        CvPluginWriter writer = NULL;\n        if (plugin_api->Writer_open)\n        {\n            CV_Assert(plugin_api->Writer_release);\n            CV_Assert(!filename.empty());\n            if (CV_ERROR_OK == plugin_api->Writer_open(filename.c_str(), fourcc, fps, sz.width, sz.height, isColor, &writer))\n            {\n                CV_Assert(writer);\n                return makePtr<PluginWriter>(plugin_api, writer);\n            }\n        }\n        return Ptr<PluginWriter>();\n    }\n\n    PluginWriter(const OpenCV_VideoIO_Plugin_API_preview* plugin_api, CvPluginWriter writer)\n        : plugin_api_(plugin_api), writer_(writer)\n    {\n        CV_Assert(plugin_api_); CV_Assert(writer_);\n    }\n\n    ~PluginWriter()\n    {\n        CV_DbgAssert(plugin_api_->Writer_release);\n        if (CV_ERROR_OK != plugin_api_->Writer_release(writer_))\n            CV_LOG_ERROR(NULL, \"Video I/O: Can't release writer by plugin '\" << plugin_api_->api_header.api_description << \"'\");\n        writer_ = NULL;\n    }\n    double getProperty(int prop) const CV_OVERRIDE\n    {\n        double val = -1;\n        if (plugin_api_->Writer_getProperty)\n            if (CV_ERROR_OK != plugin_api_->Writer_getProperty(writer_, prop, &val))\n                val = -1;\n        return val;\n    }\n    bool setProperty(int prop, double val) CV_OVERRIDE\n    {\n        if (plugin_api_->Writer_setProperty)\n            if (CV_ERROR_OK == plugin_api_->Writer_setProperty(writer_, prop, val))\n                return true;\n        return false;\n    }\n    bool isOpened() const CV_OVERRIDE\n    {\n        return writer_ != NULL;  // TODO always true\n    }\n    void write(cv::InputArray arr) CV_OVERRIDE\n    {\n        cv::Mat img = arr.getMat();\n        CV_DbgAssert(writer_);\n        CV_Assert(plugin_api_->Writer_write);\n        if (CV_ERROR_OK != plugin_api_->Writer_write(writer_, img.data, (int)img.step[0], img.cols, img.rows, img.channels()))\n        {\n            CV_LOG_DEBUG(NULL, \"Video I/O: Can't write frame by plugin '\" << plugin_api_->api_header.api_description << \"'\");\n        }\n        // TODO return bool result?\n    }\n    int getCaptureDomain() const CV_OVERRIDE\n    {\n        return plugin_api_->captureAPI;\n    }\n};\n\n\nPtr<IVideoCapture> PluginBackend::createCapture(int camera) const\n{\n    try\n    {\n        if (plugin_api_)\n            return PluginCapture::create(plugin_api_, std::string(), camera); //.staticCast<IVideoCapture>();\n    }\n    catch (...)\n    {\n        CV_LOG_DEBUG(NULL, \"Video I/O: can't create camera capture: \" << camera);\n    }\n    return Ptr<IVideoCapture>();\n}\n\nPtr<IVideoCapture> PluginBackend::createCapture(const std::string &filename) const\n{\n    try\n    {\n        if (plugin_api_)\n            return PluginCapture::create(plugin_api_, filename, 0); //.staticCast<IVideoCapture>();\n    }\n    catch (...)\n    {\n        CV_LOG_DEBUG(NULL, \"Video I/O: can't open file capture: \" << filename);\n    }\n    return Ptr<IVideoCapture>();\n}\n\nPtr<IVideoWriter> PluginBackend::createWriter(const std::string &filename, int fourcc, double fps, const cv::Size &sz, bool isColor) const\n{\n    try\n    {\n        if (plugin_api_)\n            return PluginWriter::create(plugin_api_, filename, fourcc, fps, sz, isColor); //.staticCast<IVideoWriter>();\n    }\n    catch (...)\n    {\n        CV_LOG_DEBUG(NULL, \"Video I/O: can't open writer: \" << filename);\n    }\n    return Ptr<IVideoWriter>();\n}\n\n}  // namespace\n\nPtr<IBackendFactory> createPluginBackendFactory(VideoCaptureAPIs id, const char* baseName)\n{\n    return makePtr<impl::PluginBackendFactory>(id, baseName); //.staticCast<IBackendFactory>();\n}\n\n}  // namespace\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/src/gl_core_3_1.cpp": "/*M///////////////////////////////////////////////////////////////////////////////////////\n//\n//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n//\n//  By downloading, copying, installing or using the software you agree to this license.\n//  If you do not agree to this license, do not download, install,\n//  copy or use the software.\n//\n//\n//                           License Agreement\n//                For Open Source Computer Vision Library\n//\n// Copyright (C) 2000-2008, Intel Corporation, all rights reserved.\n// Copyright (C) 2009, Willow Garage Inc., all rights reserved.\n// Third party copyrights are property of their respective owners.\n//\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n//\n//   * Redistribution's of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//\n//   * Redistribution's in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n//   * The name of the copyright holders may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n//\n// This software is provided by the copyright holders and contributors \"as is\" and\n// any express or implied warranties, including, but not limited to, the implied\n// warranties of merchantability and fitness for a particular purpose are disclaimed.\n// In no event shall the Intel Corporation or contributors be liable for any direct,\n// indirect, incidental, special, exemplary, or consequential damages\n// (including, but not limited to, procurement of substitute goods or services;\n// loss of use, data, or profits; or business interruption) however caused\n// and on any theory of liability, whether in contract, strict liability,\n// or tort (including negligence or otherwise) arising in any way out of\n// the use of this software, even if advised of the possibility of such damage.\n//\n//M*/\n\n#include \"precomp.hpp\"\n#include \"gl_core_3_1.hpp\"\n\n#ifdef HAVE_OPENGL\n\n    #ifdef __APPLE__\n        #include <dlfcn.h>\n\n        static void* AppleGLGetProcAddress (const char* name)\n        {\n            static bool initialized = false;\n            static void * handle = NULL;\n            if (!handle)\n            {\n                if (!initialized)\n                {\n                    initialized = true;\n                    const char * const path = \"/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL\";\n\n                    handle = dlopen(path, RTLD_LAZY | RTLD_GLOBAL);\n                }\n                if (!handle)\n                    return NULL;\n            }\n            return dlsym(handle, name);\n        }\n    #endif // __APPLE__\n\n    #if defined(__sgi) || defined (__sun)\n        #include <dlfcn.h>\n        #include <stdio.h>\n\n        static void* SunGetProcAddress (const char* name)\n        {\n            typedef void* (func_t*)(const GLubyte*);\n\n            static void* h = 0;\n            static func_t gpa = 0;\n\n            if (!h)\n            {\n                h = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL);\n                if (!h)\n                    return 0;\n                gpa = (func_t) dlsym(h, \"glXGetProcAddress\");\n            }\n\n            return gpa ? gpa((const GLubyte*) name) : dlsym(h, name);\n        }\n    #endif // __sgi || __sun\n\n    #if defined(_WIN32)\n        #ifdef _MSC_VER\n            #pragma warning(disable: 4055)\n            #pragma warning(disable: 4054)\n        #endif\n\n        static int TestPointer(const PROC pTest)\n        {\n            if(!pTest)\n                return 0;\n\n            ptrdiff_t iTest = (ptrdiff_t) pTest;\n\n            if (iTest == 1 || iTest == 2 || iTest == 3 || iTest == -1)\n                return 0;\n\n            return 1;\n        }\n\n        static PROC WinGetProcAddress(const char* name)\n        {\n            PROC pFunc = wglGetProcAddress((LPCSTR) name);\n            if (TestPointer(pFunc))\n                return pFunc;\n\n            HMODULE glMod = GetModuleHandleA(\"OpenGL32.dll\");\n            return (PROC) GetProcAddress(glMod, (LPCSTR) name);\n        }\n    #endif // _WIN32\n\n    #if defined(_WIN32)\n        #define CV_GL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)\n    #elif defined(__APPLE__)\n        #define CV_GL_GET_PROC_ADDRESS(name) AppleGLGetProcAddress(name)\n    #elif defined(__sgi) || defined(__sun)\n        #define CV_GL_GET_PROC_ADDRESS(name) SunGetProcAddress(name)\n    #else // GLX\n        #include <GL/glx.h>\n\n        #define CV_GL_GET_PROC_ADDRESS(name) glXGetProcAddressARB((const GLubyte*) name)\n    #endif\n\n    static void* IntGetProcAddress(const char* name)\n    {\n        void* func =  (void*) CV_GL_GET_PROC_ADDRESS(name);\n        if (!func)\n        {\n            CV_Error(cv::Error::OpenGlApiCallError, cv::format(\"Can't load OpenGL extension [%s]\", name) );\n        }\n        return func;\n    }\n#else\n#if defined(_MSC_VER)\n    #pragma warning(disable : 4702)  // unreachable code\n#endif\n    static void* IntGetProcAddress(const char*)\n    {\n        CV_Error(cv::Error::OpenGlNotSupported, \"The library is compiled without OpenGL support\");\n    }\n#endif\n\nnamespace gl\n{\n    //////////////////////////////////////////////\n    // Function pointer types\n\n    // Extension: 1.1\n    typedef void (CODEGEN_FUNCPTR *PFNCULLFACEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNFRONTFACEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNHINTPROC)(GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNLINEWIDTHPROC)(GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNPOINTSIZEPROC)(GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNPOLYGONMODEPROC)(GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNSCISSORPROC)(GLint , GLint , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERFPROC)(GLenum , GLenum , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERFVPROC)(GLenum , GLenum , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERIPROC)(GLenum , GLenum , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERIVPROC)(GLenum , GLenum , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXIMAGE1DPROC)(GLenum , GLint , GLint , GLsizei , GLint , GLenum , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXIMAGE2DPROC)(GLenum , GLint , GLint , GLsizei , GLsizei , GLint , GLenum , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWBUFFERPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARPROC)(GLbitfield );\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARCOLORPROC)(GLfloat , GLfloat , GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARSTENCILPROC)(GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARDEPTHPROC)(GLdouble );\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILMASKPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNCOLORMASKPROC)(GLboolean , GLboolean , GLboolean , GLboolean );\n    typedef void (CODEGEN_FUNCPTR *PFNDEPTHMASKPROC)(GLboolean );\n    typedef void (CODEGEN_FUNCPTR *PFNDISABLEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNENABLEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNFINISHPROC)();\n    typedef void (CODEGEN_FUNCPTR *PFNFLUSHPROC)();\n    typedef void (CODEGEN_FUNCPTR *PFNBLENDFUNCPROC)(GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNLOGICOPPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILFUNCPROC)(GLenum , GLint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILOPPROC)(GLenum , GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDEPTHFUNCPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNPIXELSTOREFPROC)(GLenum , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNPIXELSTOREIPROC)(GLenum , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNREADBUFFERPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNREADPIXELSPROC)(GLint , GLint , GLsizei , GLsizei , GLenum , GLenum , GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETBOOLEANVPROC)(GLenum , GLboolean *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETDOUBLEVPROC)(GLenum , GLdouble *);\n    typedef GLenum (CODEGEN_FUNCPTR *PFNGETERRORPROC)();\n    typedef void (CODEGEN_FUNCPTR *PFNGETFLOATVPROC)(GLenum , GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETINTEGERVPROC)(GLenum , GLint *);\n    typedef const GLubyte * (CODEGEN_FUNCPTR *PFNGETSTRINGPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXIMAGEPROC)(GLenum , GLint , GLenum , GLenum , GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXPARAMETERFVPROC)(GLenum , GLenum , GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXPARAMETERIVPROC)(GLenum , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXLEVELPARAMETERFVPROC)(GLenum , GLint , GLenum , GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXLEVELPARAMETERIVPROC)(GLenum , GLint , GLenum , GLint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISENABLEDPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDEPTHRANGEPROC)(GLdouble , GLdouble );\n    typedef void (CODEGEN_FUNCPTR *PFNVIEWPORTPROC)(GLint , GLint , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWARRAYSPROC)(GLenum , GLint , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWELEMENTSPROC)(GLenum , GLsizei , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETPOINTERVPROC)(GLenum , GLvoid* *);\n    typedef void (CODEGEN_FUNCPTR *PFNPOLYGONOFFSETPROC)(GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYTEXIMAGE1DPROC)(GLenum , GLint , GLenum , GLint , GLint , GLsizei , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYTEXIMAGE2DPROC)(GLenum , GLint , GLenum , GLint , GLint , GLsizei , GLsizei , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYTEXSUBIMAGE1DPROC)(GLenum , GLint , GLint , GLint , GLint , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYTEXSUBIMAGE2DPROC)(GLenum , GLint , GLint , GLint , GLint , GLint , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNTEXSUBIMAGE1DPROC)(GLenum , GLint , GLint , GLsizei , GLenum , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXSUBIMAGE2DPROC)(GLenum , GLint , GLint , GLint , GLsizei , GLsizei , GLenum , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNBINDTEXTUREPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETETEXTURESPROC)(GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENTEXTURESPROC)(GLsizei , GLuint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISTEXTUREPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNINDEXUBPROC)(GLubyte );\n    typedef void (CODEGEN_FUNCPTR *PFNINDEXUBVPROC)(const GLubyte *);\n\n    // Extension: 1.2\n    typedef void (CODEGEN_FUNCPTR *PFNBLENDCOLORPROC)(GLfloat , GLfloat , GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNBLENDEQUATIONPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWRANGEELEMENTSPROC)(GLenum , GLuint , GLuint , GLsizei , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXSUBIMAGE3DPROC)(GLenum , GLint , GLint , GLint , GLint , GLsizei , GLsizei , GLsizei , GLenum , GLenum , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYTEXSUBIMAGE3DPROC)(GLenum , GLint , GLint , GLint , GLint , GLint , GLint , GLsizei , GLsizei );\n\n    // Extension: 1.3\n    typedef void (CODEGEN_FUNCPTR *PFNACTIVETEXTUREPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNSAMPLECOVERAGEPROC)(GLfloat , GLboolean );\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXIMAGE3DPROC)(GLenum , GLint , GLenum , GLsizei , GLsizei , GLsizei , GLint , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXIMAGE2DPROC)(GLenum , GLint , GLenum , GLsizei , GLsizei , GLint , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXIMAGE1DPROC)(GLenum , GLint , GLenum , GLsizei , GLint , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum , GLint , GLint , GLint , GLint , GLsizei , GLsizei , GLsizei , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum , GLint , GLint , GLint , GLsizei , GLsizei , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum , GLint , GLint , GLsizei , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETCOMPRESSEDTEXIMAGEPROC)(GLenum , GLint , GLvoid *);\n\n    // Extension: 1.4\n    typedef void (CODEGEN_FUNCPTR *PFNBLENDFUNCSEPARATEPROC)(GLenum , GLenum , GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNMULTIDRAWARRAYSPROC)(GLenum , const GLint *, const GLsizei *, GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNMULTIDRAWELEMENTSPROC)(GLenum , const GLsizei *, GLenum , const GLvoid* const *, GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNPOINTPARAMETERFPROC)(GLenum , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNPOINTPARAMETERFVPROC)(GLenum , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNPOINTPARAMETERIPROC)(GLenum , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNPOINTPARAMETERIVPROC)(GLenum , const GLint *);\n\n    // Extension: 1.5\n    typedef void (CODEGEN_FUNCPTR *PFNGENQUERIESPROC)(GLsizei , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNDELETEQUERIESPROC)(GLsizei , const GLuint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISQUERYPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBEGINQUERYPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNENDQUERYPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNGETQUERYIVPROC)(GLenum , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETQUERYOBJECTIVPROC)(GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETQUERYOBJECTUIVPROC)(GLuint , GLenum , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNBINDBUFFERPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETEBUFFERSPROC)(GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENBUFFERSPROC)(GLsizei , GLuint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISBUFFERPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBUFFERDATAPROC)(GLenum , GLsizeiptr , const GLvoid *, GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNBUFFERSUBDATAPROC)(GLenum , GLintptr , GLsizeiptr , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETBUFFERSUBDATAPROC)(GLenum , GLintptr , GLsizeiptr , GLvoid *);\n    typedef GLvoid* (CODEGEN_FUNCPTR *PFNMAPBUFFERPROC)(GLenum , GLenum );\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNUNMAPBUFFERPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNGETBUFFERPARAMETERIVPROC)(GLenum , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETBUFFERPOINTERVPROC)(GLenum , GLenum , GLvoid* *);\n\n    // Extension: 2.0\n    typedef void (CODEGEN_FUNCPTR *PFNBLENDEQUATIONSEPARATEPROC)(GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWBUFFERSPROC)(GLsizei , const GLenum *);\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILOPSEPARATEPROC)(GLenum , GLenum , GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILFUNCSEPARATEPROC)(GLenum , GLenum , GLint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNSTENCILMASKSEPARATEPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNATTACHSHADERPROC)(GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBINDATTRIBLOCATIONPROC)(GLuint , GLuint , const GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOMPILESHADERPROC)(GLuint );\n    typedef GLuint (CODEGEN_FUNCPTR *PFNCREATEPROGRAMPROC)();\n    typedef GLuint (CODEGEN_FUNCPTR *PFNCREATESHADERPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETEPROGRAMPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETESHADERPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDETACHSHADERPROC)(GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDISABLEVERTEXATTRIBARRAYPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNENABLEVERTEXATTRIBARRAYPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEATTRIBPROC)(GLuint , GLuint , GLsizei , GLsizei *, GLint *, GLenum *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEUNIFORMPROC)(GLuint , GLuint , GLsizei , GLsizei *, GLint *, GLenum *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETATTACHEDSHADERSPROC)(GLuint , GLsizei , GLsizei *, GLuint *);\n    typedef GLint (CODEGEN_FUNCPTR *PFNGETATTRIBLOCATIONPROC)(GLuint , const GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETPROGRAMIVPROC)(GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETPROGRAMINFOLOGPROC)(GLuint , GLsizei , GLsizei *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETSHADERIVPROC)(GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETSHADERINFOLOGPROC)(GLuint , GLsizei , GLsizei *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETSHADERSOURCEPROC)(GLuint , GLsizei , GLsizei *, GLchar *);\n    typedef GLint (CODEGEN_FUNCPTR *PFNGETUNIFORMLOCATIONPROC)(GLuint , const GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETUNIFORMFVPROC)(GLuint , GLint , GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETUNIFORMIVPROC)(GLuint , GLint , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBDVPROC)(GLuint , GLenum , GLdouble *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBFVPROC)(GLuint , GLenum , GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBIVPROC)(GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBPOINTERVPROC)(GLuint , GLenum , GLvoid* *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISPROGRAMPROC)(GLuint );\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISSHADERPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNLINKPROGRAMPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNSHADERSOURCEPROC)(GLuint , GLsizei , const GLchar* const *, const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUSEPROGRAMPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1FPROC)(GLint , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2FPROC)(GLint , GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3FPROC)(GLint , GLfloat , GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4FPROC)(GLint , GLfloat , GLfloat , GLfloat , GLfloat );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1IPROC)(GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2IPROC)(GLint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3IPROC)(GLint , GLint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4IPROC)(GLint , GLint , GLint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1FVPROC)(GLint , GLsizei , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2FVPROC)(GLint , GLsizei , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3FVPROC)(GLint , GLsizei , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4FVPROC)(GLint , GLsizei , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1IVPROC)(GLint , GLsizei , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2IVPROC)(GLint , GLsizei , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3IVPROC)(GLint , GLsizei , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4IVPROC)(GLint , GLsizei , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX2FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX3FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX4FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNVALIDATEPROGRAMPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBPOINTERPROC)(GLuint , GLint , GLenum , GLboolean , GLsizei , const GLvoid *);\n\n    // Extension: 2.1\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX2X3FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX3X2FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX2X4FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX4X2FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX3X4FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMMATRIX4X3FVPROC)(GLint , GLsizei , GLboolean , const GLfloat *);\n\n    // Extension: ARB_vertex_array_object\n    typedef void (CODEGEN_FUNCPTR *PFNBINDVERTEXARRAYPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETEVERTEXARRAYSPROC)(GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENVERTEXARRAYSPROC)(GLsizei , GLuint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISVERTEXARRAYPROC)(GLuint );\n\n    // Extension: ARB_map_buffer_range\n    typedef GLvoid* (CODEGEN_FUNCPTR *PFNMAPBUFFERRANGEPROC)(GLenum , GLintptr , GLsizeiptr , GLbitfield );\n    typedef void (CODEGEN_FUNCPTR *PFNFLUSHMAPPEDBUFFERRANGEPROC)(GLenum , GLintptr , GLsizeiptr );\n\n    // Extension: ARB_framebuffer_object\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISRENDERBUFFERPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBINDRENDERBUFFERPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETERENDERBUFFERSPROC)(GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENRENDERBUFFERSPROC)(GLsizei , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNRENDERBUFFERSTORAGEPROC)(GLenum , GLenum , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNGETRENDERBUFFERPARAMETERIVPROC)(GLenum , GLenum , GLint *);\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISFRAMEBUFFERPROC)(GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBINDFRAMEBUFFERPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDELETEFRAMEBUFFERSPROC)(GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENFRAMEBUFFERSPROC)(GLsizei , GLuint *);\n    typedef GLenum (CODEGEN_FUNCPTR *PFNCHECKFRAMEBUFFERSTATUSPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNFRAMEBUFFERTEXTURE1DPROC)(GLenum , GLenum , GLenum , GLuint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNFRAMEBUFFERTEXTURE2DPROC)(GLenum , GLenum , GLenum , GLuint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNFRAMEBUFFERTEXTURE3DPROC)(GLenum , GLenum , GLenum , GLuint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNFRAMEBUFFERRENDERBUFFERPROC)(GLenum , GLenum , GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum , GLenum , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGENERATEMIPMAPPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNBLITFRAMEBUFFERPROC)(GLint , GLint , GLint , GLint , GLint , GLint , GLint , GLint , GLbitfield , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum , GLsizei , GLenum , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNFRAMEBUFFERTEXTURELAYERPROC)(GLenum , GLenum , GLuint , GLint , GLint );\n\n    // Extension: 3.0\n    typedef void (CODEGEN_FUNCPTR *PFNCOLORMASKIPROC)(GLuint , GLboolean , GLboolean , GLboolean , GLboolean );\n    typedef void (CODEGEN_FUNCPTR *PFNGETBOOLEANI_VPROC)(GLenum , GLuint , GLboolean *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETINTEGERI_VPROC)(GLenum , GLuint , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNENABLEIPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNDISABLEIPROC)(GLenum , GLuint );\n    typedef GLboolean (CODEGEN_FUNCPTR *PFNISENABLEDIPROC)(GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNBEGINTRANSFORMFEEDBACKPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNENDTRANSFORMFEEDBACKPROC)();\n    typedef void (CODEGEN_FUNCPTR *PFNBINDBUFFERRANGEPROC)(GLenum , GLuint , GLuint , GLintptr , GLsizeiptr );\n    typedef void (CODEGEN_FUNCPTR *PFNBINDBUFFERBASEPROC)(GLenum , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNTRANSFORMFEEDBACKVARYINGSPROC)(GLuint , GLsizei , const GLchar* const *, GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint , GLuint , GLsizei , GLsizei *, GLsizei *, GLenum *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNCLAMPCOLORPROC)(GLenum , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNBEGINCONDITIONALRENDERPROC)(GLuint , GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNENDCONDITIONALRENDERPROC)();\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBIPOINTERPROC)(GLuint , GLint , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBIIVPROC)(GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETVERTEXATTRIBIUIVPROC)(GLuint , GLenum , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI1IPROC)(GLuint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI2IPROC)(GLuint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI3IPROC)(GLuint , GLint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4IPROC)(GLuint , GLint , GLint , GLint , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI1UIPROC)(GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI2UIPROC)(GLuint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI3UIPROC)(GLuint , GLuint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4UIPROC)(GLuint , GLuint , GLuint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI1IVPROC)(GLuint , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI2IVPROC)(GLuint , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI3IVPROC)(GLuint , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4IVPROC)(GLuint , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI1UIVPROC)(GLuint , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI2UIVPROC)(GLuint , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI3UIVPROC)(GLuint , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4UIVPROC)(GLuint , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4BVPROC)(GLuint , const GLbyte *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4SVPROC)(GLuint , const GLshort *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4UBVPROC)(GLuint , const GLubyte *);\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXATTRIBI4USVPROC)(GLuint , const GLushort *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETUNIFORMUIVPROC)(GLuint , GLint , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNBINDFRAGDATALOCATIONPROC)(GLuint , GLuint , const GLchar *);\n    typedef GLint (CODEGEN_FUNCPTR *PFNGETFRAGDATALOCATIONPROC)(GLuint , const GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1UIPROC)(GLint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2UIPROC)(GLint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3UIPROC)(GLint , GLuint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4UIPROC)(GLint , GLuint , GLuint , GLuint , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM1UIVPROC)(GLint , GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM2UIVPROC)(GLint , GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM3UIVPROC)(GLint , GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORM4UIVPROC)(GLint , GLsizei , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERIIVPROC)(GLenum , GLenum , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXPARAMETERIUIVPROC)(GLenum , GLenum , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXPARAMETERIIVPROC)(GLenum , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETTEXPARAMETERIUIVPROC)(GLenum , GLenum , GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARBUFFERIVPROC)(GLenum , GLint , const GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARBUFFERUIVPROC)(GLenum , GLint , const GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARBUFFERFVPROC)(GLenum , GLint , const GLfloat *);\n    typedef void (CODEGEN_FUNCPTR *PFNCLEARBUFFERFIPROC)(GLenum , GLint , GLfloat , GLint );\n    typedef const GLubyte * (CODEGEN_FUNCPTR *PFNGETSTRINGIPROC)(GLenum , GLuint );\n\n    // Extension: ARB_uniform_buffer_object\n    typedef void (CODEGEN_FUNCPTR *PFNGETUNIFORMINDICESPROC)(GLuint , GLsizei , const GLchar* const *, GLuint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEUNIFORMSIVPROC)(GLuint , GLsizei , const GLuint *, GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEUNIFORMNAMEPROC)(GLuint , GLuint , GLsizei , GLsizei *, GLchar *);\n    typedef GLuint (CODEGEN_FUNCPTR *PFNGETUNIFORMBLOCKINDEXPROC)(GLuint , const GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEUNIFORMBLOCKIVPROC)(GLuint , GLuint , GLenum , GLint *);\n    typedef void (CODEGEN_FUNCPTR *PFNGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint , GLuint , GLsizei , GLsizei *, GLchar *);\n    typedef void (CODEGEN_FUNCPTR *PFNUNIFORMBLOCKBINDINGPROC)(GLuint , GLuint , GLuint );\n\n    // Extension: ARB_copy_buffer\n    typedef void (CODEGEN_FUNCPTR *PFNCOPYBUFFERSUBDATAPROC)(GLenum , GLenum , GLintptr , GLintptr , GLsizeiptr );\n\n    // Extension: 3.1\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWARRAYSINSTANCEDPROC)(GLenum , GLint , GLsizei , GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNDRAWELEMENTSINSTANCEDPROC)(GLenum , GLsizei , GLenum , const GLvoid *, GLsizei );\n    typedef void (CODEGEN_FUNCPTR *PFNTEXBUFFERPROC)(GLenum , GLenum , GLuint );\n    typedef void (CODEGEN_FUNCPTR *PFNPRIMITIVERESTARTINDEXPROC)(GLuint );\n\n    // Legacy\n    typedef void (CODEGEN_FUNCPTR *PFNENABLECLIENTSTATEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNDISABLECLIENTSTATEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNVERTEXPOINTERPROC)(GLint , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNNORMALPOINTERPROC)(GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNCOLORPOINTERPROC)(GLint , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXCOORDPOINTERPROC)(GLint , GLenum , GLsizei , const GLvoid *);\n    typedef void (CODEGEN_FUNCPTR *PFNTEXENVIPROC)(GLenum , GLenum , GLint );\n    typedef void (CODEGEN_FUNCPTR *PFNMATRIXMODEPROC)(GLenum );\n    typedef void (CODEGEN_FUNCPTR *PFNLOADIDENTITYPROC)(void);\n    typedef void (CODEGEN_FUNCPTR *PFNORTHOPROC)(GLdouble , GLdouble , GLdouble , GLdouble , GLdouble , GLdouble );\n    typedef void (CODEGEN_FUNCPTR *PFNCOLOR3DPROC)(GLdouble , GLdouble , GLdouble );\n\n    //////////////////////////////////////////////\n    // Function pointers\n\n    // Extension: 1.1\n    PFNCULLFACEPROC CullFace;\n    PFNFRONTFACEPROC FrontFace;\n    PFNHINTPROC Hint;\n    PFNLINEWIDTHPROC LineWidth;\n    PFNPOINTSIZEPROC PointSize;\n    PFNPOLYGONMODEPROC PolygonMode;\n    PFNSCISSORPROC Scissor;\n    PFNTEXPARAMETERFPROC TexParameterf;\n    PFNTEXPARAMETERFVPROC TexParameterfv;\n    PFNTEXPARAMETERIPROC TexParameteri;\n    PFNTEXPARAMETERIVPROC TexParameteriv;\n    PFNTEXIMAGE1DPROC TexImage1D;\n    PFNTEXIMAGE2DPROC TexImage2D;\n    PFNDRAWBUFFERPROC DrawBuffer;\n    PFNCLEARPROC Clear;\n    PFNCLEARCOLORPROC ClearColor;\n    PFNCLEARSTENCILPROC ClearStencil;\n    PFNCLEARDEPTHPROC ClearDepth;\n    PFNSTENCILMASKPROC StencilMask;\n    PFNCOLORMASKPROC ColorMask;\n    PFNDEPTHMASKPROC DepthMask;\n    PFNDISABLEPROC Disable;\n    PFNENABLEPROC Enable;\n    PFNFINISHPROC Finish;\n    PFNFLUSHPROC Flush;\n    PFNBLENDFUNCPROC BlendFunc;\n    PFNLOGICOPPROC LogicOp;\n    PFNSTENCILFUNCPROC StencilFunc;\n    PFNSTENCILOPPROC StencilOp;\n    PFNDEPTHFUNCPROC DepthFunc;\n    PFNPIXELSTOREFPROC PixelStoref;\n    PFNPIXELSTOREIPROC PixelStorei;\n    PFNREADBUFFERPROC ReadBuffer;\n    PFNREADPIXELSPROC ReadPixels;\n    PFNGETBOOLEANVPROC GetBooleanv;\n    PFNGETDOUBLEVPROC GetDoublev;\n    PFNGETERRORPROC GetError;\n    PFNGETFLOATVPROC GetFloatv;\n    PFNGETINTEGERVPROC GetIntegerv;\n    PFNGETSTRINGPROC GetString;\n    PFNGETTEXIMAGEPROC GetTexImage;\n    PFNGETTEXPARAMETERFVPROC GetTexParameterfv;\n    PFNGETTEXPARAMETERIVPROC GetTexParameteriv;\n    PFNGETTEXLEVELPARAMETERFVPROC GetTexLevelParameterfv;\n    PFNGETTEXLEVELPARAMETERIVPROC GetTexLevelParameteriv;\n    PFNISENABLEDPROC IsEnabled;\n    PFNDEPTHRANGEPROC DepthRange;\n    PFNVIEWPORTPROC Viewport;\n    PFNDRAWARRAYSPROC DrawArrays;\n    PFNDRAWELEMENTSPROC DrawElements;\n    PFNGETPOINTERVPROC GetPointerv;\n    PFNPOLYGONOFFSETPROC PolygonOffset;\n    PFNCOPYTEXIMAGE1DPROC CopyTexImage1D;\n    PFNCOPYTEXIMAGE2DPROC CopyTexImage2D;\n    PFNCOPYTEXSUBIMAGE1DPROC CopyTexSubImage1D;\n    PFNCOPYTEXSUBIMAGE2DPROC CopyTexSubImage2D;\n    PFNTEXSUBIMAGE1DPROC TexSubImage1D;\n    PFNTEXSUBIMAGE2DPROC TexSubImage2D;\n    PFNBINDTEXTUREPROC BindTexture;\n    PFNDELETETEXTURESPROC DeleteTextures;\n    PFNGENTEXTURESPROC GenTextures;\n    PFNISTEXTUREPROC IsTexture;\n    PFNINDEXUBPROC Indexub;\n    PFNINDEXUBVPROC Indexubv;\n\n    // Extension: 1.2\n    PFNBLENDCOLORPROC BlendColor;\n    PFNBLENDEQUATIONPROC BlendEquation;\n    PFNDRAWRANGEELEMENTSPROC DrawRangeElements;\n    PFNTEXSUBIMAGE3DPROC TexSubImage3D;\n    PFNCOPYTEXSUBIMAGE3DPROC CopyTexSubImage3D;\n\n    // Extension: 1.3\n    PFNACTIVETEXTUREPROC ActiveTexture;\n    PFNSAMPLECOVERAGEPROC SampleCoverage;\n    PFNCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D;\n    PFNCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D;\n    PFNCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D;\n    PFNCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D;\n    PFNCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D;\n    PFNCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D;\n    PFNGETCOMPRESSEDTEXIMAGEPROC GetCompressedTexImage;\n\n    // Extension: 1.4\n    PFNBLENDFUNCSEPARATEPROC BlendFuncSeparate;\n    PFNMULTIDRAWARRAYSPROC MultiDrawArrays;\n    PFNMULTIDRAWELEMENTSPROC MultiDrawElements;\n    PFNPOINTPARAMETERFPROC PointParameterf;\n    PFNPOINTPARAMETERFVPROC PointParameterfv;\n    PFNPOINTPARAMETERIPROC PointParameteri;\n    PFNPOINTPARAMETERIVPROC PointParameteriv;\n\n    // Extension: 1.5\n    PFNGENQUERIESPROC GenQueries;\n    PFNDELETEQUERIESPROC DeleteQueries;\n    PFNISQUERYPROC IsQuery;\n    PFNBEGINQUERYPROC BeginQuery;\n    PFNENDQUERYPROC EndQuery;\n    PFNGETQUERYIVPROC GetQueryiv;\n    PFNGETQUERYOBJECTIVPROC GetQueryObjectiv;\n    PFNGETQUERYOBJECTUIVPROC GetQueryObjectuiv;\n    PFNBINDBUFFERPROC BindBuffer;\n    PFNDELETEBUFFERSPROC DeleteBuffers;\n    PFNGENBUFFERSPROC GenBuffers;\n    PFNISBUFFERPROC IsBuffer;\n    PFNBUFFERDATAPROC BufferData;\n    PFNBUFFERSUBDATAPROC BufferSubData;\n    PFNGETBUFFERSUBDATAPROC GetBufferSubData;\n    PFNMAPBUFFERPROC MapBuffer;\n    PFNUNMAPBUFFERPROC UnmapBuffer;\n    PFNGETBUFFERPARAMETERIVPROC GetBufferParameteriv;\n    PFNGETBUFFERPOINTERVPROC GetBufferPointerv;\n\n    // Extension: 2.0\n    PFNBLENDEQUATIONSEPARATEPROC BlendEquationSeparate;\n    PFNDRAWBUFFERSPROC DrawBuffers;\n    PFNSTENCILOPSEPARATEPROC StencilOpSeparate;\n    PFNSTENCILFUNCSEPARATEPROC StencilFuncSeparate;\n    PFNSTENCILMASKSEPARATEPROC StencilMaskSeparate;\n    PFNATTACHSHADERPROC AttachShader;\n    PFNBINDATTRIBLOCATIONPROC BindAttribLocation;\n    PFNCOMPILESHADERPROC CompileShader;\n    PFNCREATEPROGRAMPROC CreateProgram;\n    PFNCREATESHADERPROC CreateShader;\n    PFNDELETEPROGRAMPROC DeleteProgram;\n    PFNDELETESHADERPROC DeleteShader;\n    PFNDETACHSHADERPROC DetachShader;\n    PFNDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;\n    PFNENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;\n    PFNGETACTIVEATTRIBPROC GetActiveAttrib;\n    PFNGETACTIVEUNIFORMPROC GetActiveUniform;\n    PFNGETATTACHEDSHADERSPROC GetAttachedShaders;\n    PFNGETATTRIBLOCATIONPROC GetAttribLocation;\n    PFNGETPROGRAMIVPROC GetProgramiv;\n    PFNGETPROGRAMINFOLOGPROC GetProgramInfoLog;\n    PFNGETSHADERIVPROC GetShaderiv;\n    PFNGETSHADERINFOLOGPROC GetShaderInfoLog;\n    PFNGETSHADERSOURCEPROC GetShaderSource;\n    PFNGETUNIFORMLOCATIONPROC GetUniformLocation;\n    PFNGETUNIFORMFVPROC GetUniformfv;\n    PFNGETUNIFORMIVPROC GetUniformiv;\n    PFNGETVERTEXATTRIBDVPROC GetVertexAttribdv;\n    PFNGETVERTEXATTRIBFVPROC GetVertexAttribfv;\n    PFNGETVERTEXATTRIBIVPROC GetVertexAttribiv;\n    PFNGETVERTEXATTRIBPOINTERVPROC GetVertexAttribPointerv;\n    PFNISPROGRAMPROC IsProgram;\n    PFNISSHADERPROC IsShader;\n    PFNLINKPROGRAMPROC LinkProgram;\n    PFNSHADERSOURCEPROC ShaderSource;\n    PFNUSEPROGRAMPROC UseProgram;\n    PFNUNIFORM1FPROC Uniform1f;\n    PFNUNIFORM2FPROC Uniform2f;\n    PFNUNIFORM3FPROC Uniform3f;\n    PFNUNIFORM4FPROC Uniform4f;\n    PFNUNIFORM1IPROC Uniform1i;\n    PFNUNIFORM2IPROC Uniform2i;\n    PFNUNIFORM3IPROC Uniform3i;\n    PFNUNIFORM4IPROC Uniform4i;\n    PFNUNIFORM1FVPROC Uniform1fv;\n    PFNUNIFORM2FVPROC Uniform2fv;\n    PFNUNIFORM3FVPROC Uniform3fv;\n    PFNUNIFORM4FVPROC Uniform4fv;\n    PFNUNIFORM1IVPROC Uniform1iv;\n    PFNUNIFORM2IVPROC Uniform2iv;\n    PFNUNIFORM3IVPROC Uniform3iv;\n    PFNUNIFORM4IVPROC Uniform4iv;\n    PFNUNIFORMMATRIX2FVPROC UniformMatrix2fv;\n    PFNUNIFORMMATRIX3FVPROC UniformMatrix3fv;\n    PFNUNIFORMMATRIX4FVPROC UniformMatrix4fv;\n    PFNVALIDATEPROGRAMPROC ValidateProgram;\n    PFNVERTEXATTRIBPOINTERPROC VertexAttribPointer;\n\n    // Extension: 2.1\n    PFNUNIFORMMATRIX2X3FVPROC UniformMatrix2x3fv;\n    PFNUNIFORMMATRIX3X2FVPROC UniformMatrix3x2fv;\n    PFNUNIFORMMATRIX2X4FVPROC UniformMatrix2x4fv;\n    PFNUNIFORMMATRIX4X2FVPROC UniformMatrix4x2fv;\n    PFNUNIFORMMATRIX3X4FVPROC UniformMatrix3x4fv;\n    PFNUNIFORMMATRIX4X3FVPROC UniformMatrix4x3fv;\n\n    // Extension: ARB_vertex_array_object\n    PFNBINDVERTEXARRAYPROC BindVertexArray;\n    PFNDELETEVERTEXARRAYSPROC DeleteVertexArrays;\n    PFNGENVERTEXARRAYSPROC GenVertexArrays;\n    PFNISVERTEXARRAYPROC IsVertexArray;\n\n    // Extension: ARB_map_buffer_range\n    PFNMAPBUFFERRANGEPROC MapBufferRange;\n    PFNFLUSHMAPPEDBUFFERRANGEPROC FlushMappedBufferRange;\n\n    // Extension: ARB_framebuffer_object\n    PFNISRENDERBUFFERPROC IsRenderbuffer;\n    PFNBINDRENDERBUFFERPROC BindRenderbuffer;\n    PFNDELETERENDERBUFFERSPROC DeleteRenderbuffers;\n    PFNGENRENDERBUFFERSPROC GenRenderbuffers;\n    PFNRENDERBUFFERSTORAGEPROC RenderbufferStorage;\n    PFNGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv;\n    PFNISFRAMEBUFFERPROC IsFramebuffer;\n    PFNBINDFRAMEBUFFERPROC BindFramebuffer;\n    PFNDELETEFRAMEBUFFERSPROC DeleteFramebuffers;\n    PFNGENFRAMEBUFFERSPROC GenFramebuffers;\n    PFNCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus;\n    PFNFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D;\n    PFNFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D;\n    PFNFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D;\n    PFNFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer;\n    PFNGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GetFramebufferAttachmentParameteriv;\n    PFNGENERATEMIPMAPPROC GenerateMipmap;\n    PFNBLITFRAMEBUFFERPROC BlitFramebuffer;\n    PFNRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample;\n    PFNFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer;\n\n    // Extension: 3.0\n    PFNCOLORMASKIPROC ColorMaski;\n    PFNGETBOOLEANI_VPROC GetBooleani_v;\n    PFNGETINTEGERI_VPROC GetIntegeri_v;\n    PFNENABLEIPROC Enablei;\n    PFNDISABLEIPROC Disablei;\n    PFNISENABLEDIPROC IsEnabledi;\n    PFNBEGINTRANSFORMFEEDBACKPROC BeginTransformFeedback;\n    PFNENDTRANSFORMFEEDBACKPROC EndTransformFeedback;\n    PFNBINDBUFFERRANGEPROC BindBufferRange;\n    PFNBINDBUFFERBASEPROC BindBufferBase;\n    PFNTRANSFORMFEEDBACKVARYINGSPROC TransformFeedbackVaryings;\n    PFNGETTRANSFORMFEEDBACKVARYINGPROC GetTransformFeedbackVarying;\n    PFNCLAMPCOLORPROC ClampColor;\n    PFNBEGINCONDITIONALRENDERPROC BeginConditionalRender;\n    PFNENDCONDITIONALRENDERPROC EndConditionalRender;\n    PFNVERTEXATTRIBIPOINTERPROC VertexAttribIPointer;\n    PFNGETVERTEXATTRIBIIVPROC GetVertexAttribIiv;\n    PFNGETVERTEXATTRIBIUIVPROC GetVertexAttribIuiv;\n    PFNVERTEXATTRIBI1IPROC VertexAttribI1i;\n    PFNVERTEXATTRIBI2IPROC VertexAttribI2i;\n    PFNVERTEXATTRIBI3IPROC VertexAttribI3i;\n    PFNVERTEXATTRIBI4IPROC VertexAttribI4i;\n    PFNVERTEXATTRIBI1UIPROC VertexAttribI1ui;\n    PFNVERTEXATTRIBI2UIPROC VertexAttribI2ui;\n    PFNVERTEXATTRIBI3UIPROC VertexAttribI3ui;\n    PFNVERTEXATTRIBI4UIPROC VertexAttribI4ui;\n    PFNVERTEXATTRIBI1IVPROC VertexAttribI1iv;\n    PFNVERTEXATTRIBI2IVPROC VertexAttribI2iv;\n    PFNVERTEXATTRIBI3IVPROC VertexAttribI3iv;\n    PFNVERTEXATTRIBI4IVPROC VertexAttribI4iv;\n    PFNVERTEXATTRIBI1UIVPROC VertexAttribI1uiv;\n    PFNVERTEXATTRIBI2UIVPROC VertexAttribI2uiv;\n    PFNVERTEXATTRIBI3UIVPROC VertexAttribI3uiv;\n    PFNVERTEXATTRIBI4UIVPROC VertexAttribI4uiv;\n    PFNVERTEXATTRIBI4BVPROC VertexAttribI4bv;\n    PFNVERTEXATTRIBI4SVPROC VertexAttribI4sv;\n    PFNVERTEXATTRIBI4UBVPROC VertexAttribI4ubv;\n    PFNVERTEXATTRIBI4USVPROC VertexAttribI4usv;\n    PFNGETUNIFORMUIVPROC GetUniformuiv;\n    PFNBINDFRAGDATALOCATIONPROC BindFragDataLocation;\n    PFNGETFRAGDATALOCATIONPROC GetFragDataLocation;\n    PFNUNIFORM1UIPROC Uniform1ui;\n    PFNUNIFORM2UIPROC Uniform2ui;\n    PFNUNIFORM3UIPROC Uniform3ui;\n    PFNUNIFORM4UIPROC Uniform4ui;\n    PFNUNIFORM1UIVPROC Uniform1uiv;\n    PFNUNIFORM2UIVPROC Uniform2uiv;\n    PFNUNIFORM3UIVPROC Uniform3uiv;\n    PFNUNIFORM4UIVPROC Uniform4uiv;\n    PFNTEXPARAMETERIIVPROC TexParameterIiv;\n    PFNTEXPARAMETERIUIVPROC TexParameterIuiv;\n    PFNGETTEXPARAMETERIIVPROC GetTexParameterIiv;\n    PFNGETTEXPARAMETERIUIVPROC GetTexParameterIuiv;\n    PFNCLEARBUFFERIVPROC ClearBufferiv;\n    PFNCLEARBUFFERUIVPROC ClearBufferuiv;\n    PFNCLEARBUFFERFVPROC ClearBufferfv;\n    PFNCLEARBUFFERFIPROC ClearBufferfi;\n    PFNGETSTRINGIPROC GetStringi;\n\n    // Extension: ARB_uniform_buffer_object\n    PFNGETUNIFORMINDICESPROC GetUniformIndices;\n    PFNGETACTIVEUNIFORMSIVPROC GetActiveUniformsiv;\n    PFNGETACTIVEUNIFORMNAMEPROC GetActiveUniformName;\n    PFNGETUNIFORMBLOCKINDEXPROC GetUniformBlockIndex;\n    PFNGETACTIVEUNIFORMBLOCKIVPROC GetActiveUniformBlockiv;\n    PFNGETACTIVEUNIFORMBLOCKNAMEPROC GetActiveUniformBlockName;\n    PFNUNIFORMBLOCKBINDINGPROC UniformBlockBinding;\n\n    // Extension: ARB_copy_buffer\n    PFNCOPYBUFFERSUBDATAPROC CopyBufferSubData;\n\n    // Extension: 3.1\n    PFNDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;\n    PFNDRAWELEMENTSINSTANCEDPROC DrawElementsInstanced;\n    PFNTEXBUFFERPROC TexBuffer;\n    PFNPRIMITIVERESTARTINDEXPROC PrimitiveRestartIndex;\n\n    // Legacy\n    PFNENABLECLIENTSTATEPROC EnableClientState;\n    PFNDISABLECLIENTSTATEPROC DisableClientState;\n    PFNVERTEXPOINTERPROC VertexPointer;\n    PFNNORMALPOINTERPROC NormalPointer;\n    PFNCOLORPOINTERPROC ColorPointer;\n    PFNTEXCOORDPOINTERPROC TexCoordPointer;\n\n    PFNTEXENVIPROC TexEnvi;\n\n    PFNMATRIXMODEPROC MatrixMode;\n    PFNLOADIDENTITYPROC LoadIdentity;\n    PFNORTHOPROC Ortho;\n\n    PFNCOLOR3DPROC Color3d;\n\n    //////////////////////////////////////////////\n    // Switch functions\n\n    // Extension: 1.1\n\n    static void CODEGEN_FUNCPTR Switch_CullFace(GLenum mode)\n    {\n        CullFace = (PFNCULLFACEPROC)IntGetProcAddress(\"glCullFace\");\n        CullFace(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FrontFace(GLenum mode)\n    {\n        FrontFace = (PFNFRONTFACEPROC)IntGetProcAddress(\"glFrontFace\");\n        FrontFace(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Hint(GLenum target, GLenum mode)\n    {\n        Hint = (PFNHINTPROC)IntGetProcAddress(\"glHint\");\n        Hint(target, mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_LineWidth(GLfloat width)\n    {\n        LineWidth = (PFNLINEWIDTHPROC)IntGetProcAddress(\"glLineWidth\");\n        LineWidth(width);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PointSize(GLfloat size)\n    {\n        PointSize = (PFNPOINTSIZEPROC)IntGetProcAddress(\"glPointSize\");\n        PointSize(size);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PolygonMode(GLenum face, GLenum mode)\n    {\n        PolygonMode = (PFNPOLYGONMODEPROC)IntGetProcAddress(\"glPolygonMode\");\n        PolygonMode(face, mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Scissor(GLint x, GLint y, GLsizei width, GLsizei height)\n    {\n        Scissor = (PFNSCISSORPROC)IntGetProcAddress(\"glScissor\");\n        Scissor(x, y, width, height);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameterf(GLenum target, GLenum pname, GLfloat param)\n    {\n        TexParameterf = (PFNTEXPARAMETERFPROC)IntGetProcAddress(\"glTexParameterf\");\n        TexParameterf(target, pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameterfv(GLenum target, GLenum pname, const GLfloat *params)\n    {\n        TexParameterfv = (PFNTEXPARAMETERFVPROC)IntGetProcAddress(\"glTexParameterfv\");\n        TexParameterfv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameteri(GLenum target, GLenum pname, GLint param)\n    {\n        TexParameteri = (PFNTEXPARAMETERIPROC)IntGetProcAddress(\"glTexParameteri\");\n        TexParameteri(target, pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameteriv(GLenum target, GLenum pname, const GLint *params)\n    {\n        TexParameteriv = (PFNTEXPARAMETERIVPROC)IntGetProcAddress(\"glTexParameteriv\");\n        TexParameteriv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)\n    {\n        TexImage1D = (PFNTEXIMAGE1DPROC)IntGetProcAddress(\"glTexImage1D\");\n        TexImage1D(target, level, internalformat, width, border, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)\n    {\n        TexImage2D = (PFNTEXIMAGE2DPROC)IntGetProcAddress(\"glTexImage2D\");\n        TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawBuffer(GLenum mode)\n    {\n        DrawBuffer = (PFNDRAWBUFFERPROC)IntGetProcAddress(\"glDrawBuffer\");\n        DrawBuffer(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Clear(GLbitfield mask)\n    {\n        Clear = (PFNCLEARPROC)IntGetProcAddress(\"glClear\");\n        Clear(mask);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)\n    {\n        ClearColor = (PFNCLEARCOLORPROC)IntGetProcAddress(\"glClearColor\");\n        ClearColor(red, green, blue, alpha);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearStencil(GLint s)\n    {\n        ClearStencil = (PFNCLEARSTENCILPROC)IntGetProcAddress(\"glClearStencil\");\n        ClearStencil(s);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearDepth(GLdouble depth)\n    {\n        ClearDepth = (PFNCLEARDEPTHPROC)IntGetProcAddress(\"glClearDepth\");\n        ClearDepth(depth);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilMask(GLuint mask)\n    {\n        StencilMask = (PFNSTENCILMASKPROC)IntGetProcAddress(\"glStencilMask\");\n        StencilMask(mask);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)\n    {\n        ColorMask = (PFNCOLORMASKPROC)IntGetProcAddress(\"glColorMask\");\n        ColorMask(red, green, blue, alpha);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DepthMask(GLboolean flag)\n    {\n        DepthMask = (PFNDEPTHMASKPROC)IntGetProcAddress(\"glDepthMask\");\n        DepthMask(flag);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Disable(GLenum cap)\n    {\n        Disable = (PFNDISABLEPROC)IntGetProcAddress(\"glDisable\");\n        Disable(cap);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Enable(GLenum cap)\n    {\n        Enable = (PFNENABLEPROC)IntGetProcAddress(\"glEnable\");\n        Enable(cap);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Finish()\n    {\n        Finish = (PFNFINISHPROC)IntGetProcAddress(\"glFinish\");\n        Finish();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Flush()\n    {\n        Flush = (PFNFLUSHPROC)IntGetProcAddress(\"glFlush\");\n        Flush();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BlendFunc(GLenum sfactor, GLenum dfactor)\n    {\n        BlendFunc = (PFNBLENDFUNCPROC)IntGetProcAddress(\"glBlendFunc\");\n        BlendFunc(sfactor, dfactor);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_LogicOp(GLenum opcode)\n    {\n        LogicOp = (PFNLOGICOPPROC)IntGetProcAddress(\"glLogicOp\");\n        LogicOp(opcode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilFunc(GLenum func, GLint ref, GLuint mask)\n    {\n        StencilFunc = (PFNSTENCILFUNCPROC)IntGetProcAddress(\"glStencilFunc\");\n        StencilFunc(func, ref, mask);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilOp(GLenum fail, GLenum zfail, GLenum zpass)\n    {\n        StencilOp = (PFNSTENCILOPPROC)IntGetProcAddress(\"glStencilOp\");\n        StencilOp(fail, zfail, zpass);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DepthFunc(GLenum func)\n    {\n        DepthFunc = (PFNDEPTHFUNCPROC)IntGetProcAddress(\"glDepthFunc\");\n        DepthFunc(func);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PixelStoref(GLenum pname, GLfloat param)\n    {\n        PixelStoref = (PFNPIXELSTOREFPROC)IntGetProcAddress(\"glPixelStoref\");\n        PixelStoref(pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PixelStorei(GLenum pname, GLint param)\n    {\n        PixelStorei = (PFNPIXELSTOREIPROC)IntGetProcAddress(\"glPixelStorei\");\n        PixelStorei(pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ReadBuffer(GLenum mode)\n    {\n        ReadBuffer = (PFNREADBUFFERPROC)IntGetProcAddress(\"glReadBuffer\");\n        ReadBuffer(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)\n    {\n        ReadPixels = (PFNREADPIXELSPROC)IntGetProcAddress(\"glReadPixels\");\n        ReadPixels(x, y, width, height, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetBooleanv(GLenum pname, GLboolean *params)\n    {\n        GetBooleanv = (PFNGETBOOLEANVPROC)IntGetProcAddress(\"glGetBooleanv\");\n        GetBooleanv(pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetDoublev(GLenum pname, GLdouble *params)\n    {\n        GetDoublev = (PFNGETDOUBLEVPROC)IntGetProcAddress(\"glGetDoublev\");\n        GetDoublev(pname, params);\n    }\n\n    static GLenum CODEGEN_FUNCPTR Switch_GetError()\n    {\n        GetError = (PFNGETERRORPROC)IntGetProcAddress(\"glGetError\");\n        return GetError();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetFloatv(GLenum pname, GLfloat *params)\n    {\n        GetFloatv = (PFNGETFLOATVPROC)IntGetProcAddress(\"glGetFloatv\");\n        GetFloatv(pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetIntegerv(GLenum pname, GLint *params)\n    {\n        GetIntegerv = (PFNGETINTEGERVPROC)IntGetProcAddress(\"glGetIntegerv\");\n        GetIntegerv(pname, params);\n    }\n\n    static const GLubyte * CODEGEN_FUNCPTR Switch_GetString(GLenum name)\n    {\n        GetString = (PFNGETSTRINGPROC)IntGetProcAddress(\"glGetString\");\n        return GetString(name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)\n    {\n        GetTexImage = (PFNGETTEXIMAGEPROC)IntGetProcAddress(\"glGetTexImage\");\n        GetTexImage(target, level, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)\n    {\n        GetTexParameterfv = (PFNGETTEXPARAMETERFVPROC)IntGetProcAddress(\"glGetTexParameterfv\");\n        GetTexParameterfv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexParameteriv(GLenum target, GLenum pname, GLint *params)\n    {\n        GetTexParameteriv = (PFNGETTEXPARAMETERIVPROC)IntGetProcAddress(\"glGetTexParameteriv\");\n        GetTexParameteriv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)\n    {\n        GetTexLevelParameterfv = (PFNGETTEXLEVELPARAMETERFVPROC)IntGetProcAddress(\"glGetTexLevelParameterfv\");\n        GetTexLevelParameterfv(target, level, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)\n    {\n        GetTexLevelParameteriv = (PFNGETTEXLEVELPARAMETERIVPROC)IntGetProcAddress(\"glGetTexLevelParameteriv\");\n        GetTexLevelParameteriv(target, level, pname, params);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsEnabled(GLenum cap)\n    {\n        IsEnabled = (PFNISENABLEDPROC)IntGetProcAddress(\"glIsEnabled\");\n        return IsEnabled(cap);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DepthRange(GLdouble ren_near, GLdouble ren_far)\n    {\n        DepthRange = (PFNDEPTHRANGEPROC)IntGetProcAddress(\"glDepthRange\");\n        DepthRange(ren_near, ren_far);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Viewport(GLint x, GLint y, GLsizei width, GLsizei height)\n    {\n        Viewport = (PFNVIEWPORTPROC)IntGetProcAddress(\"glViewport\");\n        Viewport(x, y, width, height);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawArrays(GLenum mode, GLint first, GLsizei count)\n    {\n        DrawArrays = (PFNDRAWARRAYSPROC)IntGetProcAddress(\"glDrawArrays\");\n        DrawArrays(mode, first, count);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)\n    {\n        DrawElements = (PFNDRAWELEMENTSPROC)IntGetProcAddress(\"glDrawElements\");\n        DrawElements(mode, count, type, indices);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetPointerv(GLenum pname, GLvoid* *params)\n    {\n        GetPointerv = (PFNGETPOINTERVPROC)IntGetProcAddress(\"glGetPointerv\");\n        GetPointerv(pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PolygonOffset(GLfloat factor, GLfloat units)\n    {\n        PolygonOffset = (PFNPOLYGONOFFSETPROC)IntGetProcAddress(\"glPolygonOffset\");\n        PolygonOffset(factor, units);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)\n    {\n        CopyTexImage1D = (PFNCOPYTEXIMAGE1DPROC)IntGetProcAddress(\"glCopyTexImage1D\");\n        CopyTexImage1D(target, level, internalformat, x, y, width, border);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)\n    {\n        CopyTexImage2D = (PFNCOPYTEXIMAGE2DPROC)IntGetProcAddress(\"glCopyTexImage2D\");\n        CopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)\n    {\n        CopyTexSubImage1D = (PFNCOPYTEXSUBIMAGE1DPROC)IntGetProcAddress(\"glCopyTexSubImage1D\");\n        CopyTexSubImage1D(target, level, xoffset, x, y, width);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)\n    {\n        CopyTexSubImage2D = (PFNCOPYTEXSUBIMAGE2DPROC)IntGetProcAddress(\"glCopyTexSubImage2D\");\n        CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)\n    {\n        TexSubImage1D = (PFNTEXSUBIMAGE1DPROC)IntGetProcAddress(\"glTexSubImage1D\");\n        TexSubImage1D(target, level, xoffset, width, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)\n    {\n        TexSubImage2D = (PFNTEXSUBIMAGE2DPROC)IntGetProcAddress(\"glTexSubImage2D\");\n        TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindTexture(GLenum target, GLuint texture)\n    {\n        BindTexture = (PFNBINDTEXTUREPROC)IntGetProcAddress(\"glBindTexture\");\n        BindTexture(target, texture);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteTextures(GLsizei n, const GLuint *textures)\n    {\n        DeleteTextures = (PFNDELETETEXTURESPROC)IntGetProcAddress(\"glDeleteTextures\");\n        DeleteTextures(n, textures);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenTextures(GLsizei n, GLuint *textures)\n    {\n        GenTextures = (PFNGENTEXTURESPROC)IntGetProcAddress(\"glGenTextures\");\n        GenTextures(n, textures);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsTexture(GLuint texture)\n    {\n        IsTexture = (PFNISTEXTUREPROC)IntGetProcAddress(\"glIsTexture\");\n        return IsTexture(texture);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Indexub(GLubyte c)\n    {\n        Indexub = (PFNINDEXUBPROC)IntGetProcAddress(\"glIndexub\");\n        Indexub(c);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Indexubv(const GLubyte *c)\n    {\n        Indexubv = (PFNINDEXUBVPROC)IntGetProcAddress(\"glIndexubv\");\n        Indexubv(c);\n    }\n\n    // Extension: 1.2\n\n    static void CODEGEN_FUNCPTR Switch_BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)\n    {\n        BlendColor = (PFNBLENDCOLORPROC)IntGetProcAddress(\"glBlendColor\");\n        BlendColor(red, green, blue, alpha);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BlendEquation(GLenum mode)\n    {\n        BlendEquation = (PFNBLENDEQUATIONPROC)IntGetProcAddress(\"glBlendEquation\");\n        BlendEquation(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)\n    {\n        DrawRangeElements = (PFNDRAWRANGEELEMENTSPROC)IntGetProcAddress(\"glDrawRangeElements\");\n        DrawRangeElements(mode, start, end, count, type, indices);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)\n    {\n        TexSubImage3D = (PFNTEXSUBIMAGE3DPROC)IntGetProcAddress(\"glTexSubImage3D\");\n        TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)\n    {\n        CopyTexSubImage3D = (PFNCOPYTEXSUBIMAGE3DPROC)IntGetProcAddress(\"glCopyTexSubImage3D\");\n        CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);\n    }\n\n    // Extension: 1.3\n\n    static void CODEGEN_FUNCPTR Switch_ActiveTexture(GLenum texture)\n    {\n        ActiveTexture = (PFNACTIVETEXTUREPROC)IntGetProcAddress(\"glActiveTexture\");\n        ActiveTexture(texture);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_SampleCoverage(GLfloat value, GLboolean invert)\n    {\n        SampleCoverage = (PFNSAMPLECOVERAGEPROC)IntGetProcAddress(\"glSampleCoverage\");\n        SampleCoverage(value, invert);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexImage3D = (PFNCOMPRESSEDTEXIMAGE3DPROC)IntGetProcAddress(\"glCompressedTexImage3D\");\n        CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexImage2D = (PFNCOMPRESSEDTEXIMAGE2DPROC)IntGetProcAddress(\"glCompressedTexImage2D\");\n        CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexImage1D = (PFNCOMPRESSEDTEXIMAGE1DPROC)IntGetProcAddress(\"glCompressedTexImage1D\");\n        CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexSubImage3D = (PFNCOMPRESSEDTEXSUBIMAGE3DPROC)IntGetProcAddress(\"glCompressedTexSubImage3D\");\n        CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexSubImage2D = (PFNCOMPRESSEDTEXSUBIMAGE2DPROC)IntGetProcAddress(\"glCompressedTexSubImage2D\");\n        CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)\n    {\n        CompressedTexSubImage1D = (PFNCOMPRESSEDTEXSUBIMAGE1DPROC)IntGetProcAddress(\"glCompressedTexSubImage1D\");\n        CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetCompressedTexImage(GLenum target, GLint level, GLvoid *img)\n    {\n        GetCompressedTexImage = (PFNGETCOMPRESSEDTEXIMAGEPROC)IntGetProcAddress(\"glGetCompressedTexImage\");\n        GetCompressedTexImage(target, level, img);\n    }\n\n    // Extension: 1.4\n\n    static void CODEGEN_FUNCPTR Switch_BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)\n    {\n        BlendFuncSeparate = (PFNBLENDFUNCSEPARATEPROC)IntGetProcAddress(\"glBlendFuncSeparate\");\n        BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_MultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)\n    {\n        MultiDrawArrays = (PFNMULTIDRAWARRAYSPROC)IntGetProcAddress(\"glMultiDrawArrays\");\n        MultiDrawArrays(mode, first, count, drawcount);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_MultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount)\n    {\n        MultiDrawElements = (PFNMULTIDRAWELEMENTSPROC)IntGetProcAddress(\"glMultiDrawElements\");\n        MultiDrawElements(mode, count, type, indices, drawcount);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PointParameterf(GLenum pname, GLfloat param)\n    {\n        PointParameterf = (PFNPOINTPARAMETERFPROC)IntGetProcAddress(\"glPointParameterf\");\n        PointParameterf(pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PointParameterfv(GLenum pname, const GLfloat *params)\n    {\n        PointParameterfv = (PFNPOINTPARAMETERFVPROC)IntGetProcAddress(\"glPointParameterfv\");\n        PointParameterfv(pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PointParameteri(GLenum pname, GLint param)\n    {\n        PointParameteri = (PFNPOINTPARAMETERIPROC)IntGetProcAddress(\"glPointParameteri\");\n        PointParameteri(pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PointParameteriv(GLenum pname, const GLint *params)\n    {\n        PointParameteriv = (PFNPOINTPARAMETERIVPROC)IntGetProcAddress(\"glPointParameteriv\");\n        PointParameteriv(pname, params);\n    }\n\n    // Extension: 1.5\n\n    static void CODEGEN_FUNCPTR Switch_GenQueries(GLsizei n, GLuint *ids)\n    {\n        GenQueries = (PFNGENQUERIESPROC)IntGetProcAddress(\"glGenQueries\");\n        GenQueries(n, ids);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteQueries(GLsizei n, const GLuint *ids)\n    {\n        DeleteQueries = (PFNDELETEQUERIESPROC)IntGetProcAddress(\"glDeleteQueries\");\n        DeleteQueries(n, ids);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsQuery(GLuint id)\n    {\n        IsQuery = (PFNISQUERYPROC)IntGetProcAddress(\"glIsQuery\");\n        return IsQuery(id);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BeginQuery(GLenum target, GLuint id)\n    {\n        BeginQuery = (PFNBEGINQUERYPROC)IntGetProcAddress(\"glBeginQuery\");\n        BeginQuery(target, id);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_EndQuery(GLenum target)\n    {\n        EndQuery = (PFNENDQUERYPROC)IntGetProcAddress(\"glEndQuery\");\n        EndQuery(target);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetQueryiv(GLenum target, GLenum pname, GLint *params)\n    {\n        GetQueryiv = (PFNGETQUERYIVPROC)IntGetProcAddress(\"glGetQueryiv\");\n        GetQueryiv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetQueryObjectiv(GLuint id, GLenum pname, GLint *params)\n    {\n        GetQueryObjectiv = (PFNGETQUERYOBJECTIVPROC)IntGetProcAddress(\"glGetQueryObjectiv\");\n        GetQueryObjectiv(id, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)\n    {\n        GetQueryObjectuiv = (PFNGETQUERYOBJECTUIVPROC)IntGetProcAddress(\"glGetQueryObjectuiv\");\n        GetQueryObjectuiv(id, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindBuffer(GLenum target, GLuint buffer)\n    {\n        BindBuffer = (PFNBINDBUFFERPROC)IntGetProcAddress(\"glBindBuffer\");\n        BindBuffer(target, buffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteBuffers(GLsizei n, const GLuint *buffers)\n    {\n        DeleteBuffers = (PFNDELETEBUFFERSPROC)IntGetProcAddress(\"glDeleteBuffers\");\n        DeleteBuffers(n, buffers);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenBuffers(GLsizei n, GLuint *buffers)\n    {\n        GenBuffers = (PFNGENBUFFERSPROC)IntGetProcAddress(\"glGenBuffers\");\n        GenBuffers(n, buffers);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsBuffer(GLuint buffer)\n    {\n        IsBuffer = (PFNISBUFFERPROC)IntGetProcAddress(\"glIsBuffer\");\n        return IsBuffer(buffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)\n    {\n        BufferData = (PFNBUFFERDATAPROC)IntGetProcAddress(\"glBufferData\");\n        BufferData(target, size, data, usage);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)\n    {\n        BufferSubData = (PFNBUFFERSUBDATAPROC)IntGetProcAddress(\"glBufferSubData\");\n        BufferSubData(target, offset, size, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)\n    {\n        GetBufferSubData = (PFNGETBUFFERSUBDATAPROC)IntGetProcAddress(\"glGetBufferSubData\");\n        GetBufferSubData(target, offset, size, data);\n    }\n\n    static GLvoid* CODEGEN_FUNCPTR Switch_MapBuffer(GLenum target, GLenum access)\n    {\n        MapBuffer = (PFNMAPBUFFERPROC)IntGetProcAddress(\"glMapBuffer\");\n        return MapBuffer(target, access);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_UnmapBuffer(GLenum target)\n    {\n        UnmapBuffer = (PFNUNMAPBUFFERPROC)IntGetProcAddress(\"glUnmapBuffer\");\n        return UnmapBuffer(target);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetBufferParameteriv(GLenum target, GLenum pname, GLint *params)\n    {\n        GetBufferParameteriv = (PFNGETBUFFERPARAMETERIVPROC)IntGetProcAddress(\"glGetBufferParameteriv\");\n        GetBufferParameteriv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params)\n    {\n        GetBufferPointerv = (PFNGETBUFFERPOINTERVPROC)IntGetProcAddress(\"glGetBufferPointerv\");\n        GetBufferPointerv(target, pname, params);\n    }\n\n    // Extension: 2.0\n\n    static void CODEGEN_FUNCPTR Switch_BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)\n    {\n        BlendEquationSeparate = (PFNBLENDEQUATIONSEPARATEPROC)IntGetProcAddress(\"glBlendEquationSeparate\");\n        BlendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawBuffers(GLsizei n, const GLenum *bufs)\n    {\n        DrawBuffers = (PFNDRAWBUFFERSPROC)IntGetProcAddress(\"glDrawBuffers\");\n        DrawBuffers(n, bufs);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)\n    {\n        StencilOpSeparate = (PFNSTENCILOPSEPARATEPROC)IntGetProcAddress(\"glStencilOpSeparate\");\n        StencilOpSeparate(face, sfail, dpfail, dppass);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)\n    {\n        StencilFuncSeparate = (PFNSTENCILFUNCSEPARATEPROC)IntGetProcAddress(\"glStencilFuncSeparate\");\n        StencilFuncSeparate(face, func, ref, mask);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_StencilMaskSeparate(GLenum face, GLuint mask)\n    {\n        StencilMaskSeparate = (PFNSTENCILMASKSEPARATEPROC)IntGetProcAddress(\"glStencilMaskSeparate\");\n        StencilMaskSeparate(face, mask);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_AttachShader(GLuint program, GLuint shader)\n    {\n        AttachShader = (PFNATTACHSHADERPROC)IntGetProcAddress(\"glAttachShader\");\n        AttachShader(program, shader);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindAttribLocation(GLuint program, GLuint index, const GLchar *name)\n    {\n        BindAttribLocation = (PFNBINDATTRIBLOCATIONPROC)IntGetProcAddress(\"glBindAttribLocation\");\n        BindAttribLocation(program, index, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_CompileShader(GLuint shader)\n    {\n        CompileShader = (PFNCOMPILESHADERPROC)IntGetProcAddress(\"glCompileShader\");\n        CompileShader(shader);\n    }\n\n    static GLuint CODEGEN_FUNCPTR Switch_CreateProgram()\n    {\n        CreateProgram = (PFNCREATEPROGRAMPROC)IntGetProcAddress(\"glCreateProgram\");\n        return CreateProgram();\n    }\n\n    static GLuint CODEGEN_FUNCPTR Switch_CreateShader(GLenum type)\n    {\n        CreateShader = (PFNCREATESHADERPROC)IntGetProcAddress(\"glCreateShader\");\n        return CreateShader(type);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteProgram(GLuint program)\n    {\n        DeleteProgram = (PFNDELETEPROGRAMPROC)IntGetProcAddress(\"glDeleteProgram\");\n        DeleteProgram(program);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteShader(GLuint shader)\n    {\n        DeleteShader = (PFNDELETESHADERPROC)IntGetProcAddress(\"glDeleteShader\");\n        DeleteShader(shader);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DetachShader(GLuint program, GLuint shader)\n    {\n        DetachShader = (PFNDETACHSHADERPROC)IntGetProcAddress(\"glDetachShader\");\n        DetachShader(program, shader);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DisableVertexAttribArray(GLuint index)\n    {\n        DisableVertexAttribArray = (PFNDISABLEVERTEXATTRIBARRAYPROC)IntGetProcAddress(\"glDisableVertexAttribArray\");\n        DisableVertexAttribArray(index);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_EnableVertexAttribArray(GLuint index)\n    {\n        EnableVertexAttribArray = (PFNENABLEVERTEXATTRIBARRAYPROC)IntGetProcAddress(\"glEnableVertexAttribArray\");\n        EnableVertexAttribArray(index);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)\n    {\n        GetActiveAttrib = (PFNGETACTIVEATTRIBPROC)IntGetProcAddress(\"glGetActiveAttrib\");\n        GetActiveAttrib(program, index, bufSize, length, size, type, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)\n    {\n        GetActiveUniform = (PFNGETACTIVEUNIFORMPROC)IntGetProcAddress(\"glGetActiveUniform\");\n        GetActiveUniform(program, index, bufSize, length, size, type, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)\n    {\n        GetAttachedShaders = (PFNGETATTACHEDSHADERSPROC)IntGetProcAddress(\"glGetAttachedShaders\");\n        GetAttachedShaders(program, maxCount, count, obj);\n    }\n\n    static GLint CODEGEN_FUNCPTR Switch_GetAttribLocation(GLuint program, const GLchar *name)\n    {\n        GetAttribLocation = (PFNGETATTRIBLOCATIONPROC)IntGetProcAddress(\"glGetAttribLocation\");\n        return GetAttribLocation(program, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetProgramiv(GLuint program, GLenum pname, GLint *params)\n    {\n        GetProgramiv = (PFNGETPROGRAMIVPROC)IntGetProcAddress(\"glGetProgramiv\");\n        GetProgramiv(program, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)\n    {\n        GetProgramInfoLog = (PFNGETPROGRAMINFOLOGPROC)IntGetProcAddress(\"glGetProgramInfoLog\");\n        GetProgramInfoLog(program, bufSize, length, infoLog);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetShaderiv(GLuint shader, GLenum pname, GLint *params)\n    {\n        GetShaderiv = (PFNGETSHADERIVPROC)IntGetProcAddress(\"glGetShaderiv\");\n        GetShaderiv(shader, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)\n    {\n        GetShaderInfoLog = (PFNGETSHADERINFOLOGPROC)IntGetProcAddress(\"glGetShaderInfoLog\");\n        GetShaderInfoLog(shader, bufSize, length, infoLog);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)\n    {\n        GetShaderSource = (PFNGETSHADERSOURCEPROC)IntGetProcAddress(\"glGetShaderSource\");\n        GetShaderSource(shader, bufSize, length, source);\n    }\n\n    static GLint CODEGEN_FUNCPTR Switch_GetUniformLocation(GLuint program, const GLchar *name)\n    {\n        GetUniformLocation = (PFNGETUNIFORMLOCATIONPROC)IntGetProcAddress(\"glGetUniformLocation\");\n        return GetUniformLocation(program, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetUniformfv(GLuint program, GLint location, GLfloat *params)\n    {\n        GetUniformfv = (PFNGETUNIFORMFVPROC)IntGetProcAddress(\"glGetUniformfv\");\n        GetUniformfv(program, location, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetUniformiv(GLuint program, GLint location, GLint *params)\n    {\n        GetUniformiv = (PFNGETUNIFORMIVPROC)IntGetProcAddress(\"glGetUniformiv\");\n        GetUniformiv(program, location, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)\n    {\n        GetVertexAttribdv = (PFNGETVERTEXATTRIBDVPROC)IntGetProcAddress(\"glGetVertexAttribdv\");\n        GetVertexAttribdv(index, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)\n    {\n        GetVertexAttribfv = (PFNGETVERTEXATTRIBFVPROC)IntGetProcAddress(\"glGetVertexAttribfv\");\n        GetVertexAttribfv(index, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params)\n    {\n        GetVertexAttribiv = (PFNGETVERTEXATTRIBIVPROC)IntGetProcAddress(\"glGetVertexAttribiv\");\n        GetVertexAttribiv(index, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer)\n    {\n        GetVertexAttribPointerv = (PFNGETVERTEXATTRIBPOINTERVPROC)IntGetProcAddress(\"glGetVertexAttribPointerv\");\n        GetVertexAttribPointerv(index, pname, pointer);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsProgram(GLuint program)\n    {\n        IsProgram = (PFNISPROGRAMPROC)IntGetProcAddress(\"glIsProgram\");\n        return IsProgram(program);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsShader(GLuint shader)\n    {\n        IsShader = (PFNISSHADERPROC)IntGetProcAddress(\"glIsShader\");\n        return IsShader(shader);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_LinkProgram(GLuint program)\n    {\n        LinkProgram = (PFNLINKPROGRAMPROC)IntGetProcAddress(\"glLinkProgram\");\n        LinkProgram(program);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ShaderSource(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length)\n    {\n        ShaderSource = (PFNSHADERSOURCEPROC)IntGetProcAddress(\"glShaderSource\");\n        ShaderSource(shader, count, string, length);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UseProgram(GLuint program)\n    {\n        UseProgram = (PFNUSEPROGRAMPROC)IntGetProcAddress(\"glUseProgram\");\n        UseProgram(program);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1f(GLint location, GLfloat v0)\n    {\n        Uniform1f = (PFNUNIFORM1FPROC)IntGetProcAddress(\"glUniform1f\");\n        Uniform1f(location, v0);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2f(GLint location, GLfloat v0, GLfloat v1)\n    {\n        Uniform2f = (PFNUNIFORM2FPROC)IntGetProcAddress(\"glUniform2f\");\n        Uniform2f(location, v0, v1);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)\n    {\n        Uniform3f = (PFNUNIFORM3FPROC)IntGetProcAddress(\"glUniform3f\");\n        Uniform3f(location, v0, v1, v2);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)\n    {\n        Uniform4f = (PFNUNIFORM4FPROC)IntGetProcAddress(\"glUniform4f\");\n        Uniform4f(location, v0, v1, v2, v3);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1i(GLint location, GLint v0)\n    {\n        Uniform1i = (PFNUNIFORM1IPROC)IntGetProcAddress(\"glUniform1i\");\n        Uniform1i(location, v0);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2i(GLint location, GLint v0, GLint v1)\n    {\n        Uniform2i = (PFNUNIFORM2IPROC)IntGetProcAddress(\"glUniform2i\");\n        Uniform2i(location, v0, v1);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)\n    {\n        Uniform3i = (PFNUNIFORM3IPROC)IntGetProcAddress(\"glUniform3i\");\n        Uniform3i(location, v0, v1, v2);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)\n    {\n        Uniform4i = (PFNUNIFORM4IPROC)IntGetProcAddress(\"glUniform4i\");\n        Uniform4i(location, v0, v1, v2, v3);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1fv(GLint location, GLsizei count, const GLfloat *value)\n    {\n        Uniform1fv = (PFNUNIFORM1FVPROC)IntGetProcAddress(\"glUniform1fv\");\n        Uniform1fv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2fv(GLint location, GLsizei count, const GLfloat *value)\n    {\n        Uniform2fv = (PFNUNIFORM2FVPROC)IntGetProcAddress(\"glUniform2fv\");\n        Uniform2fv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3fv(GLint location, GLsizei count, const GLfloat *value)\n    {\n        Uniform3fv = (PFNUNIFORM3FVPROC)IntGetProcAddress(\"glUniform3fv\");\n        Uniform3fv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4fv(GLint location, GLsizei count, const GLfloat *value)\n    {\n        Uniform4fv = (PFNUNIFORM4FVPROC)IntGetProcAddress(\"glUniform4fv\");\n        Uniform4fv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1iv(GLint location, GLsizei count, const GLint *value)\n    {\n        Uniform1iv = (PFNUNIFORM1IVPROC)IntGetProcAddress(\"glUniform1iv\");\n        Uniform1iv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2iv(GLint location, GLsizei count, const GLint *value)\n    {\n        Uniform2iv = (PFNUNIFORM2IVPROC)IntGetProcAddress(\"glUniform2iv\");\n        Uniform2iv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3iv(GLint location, GLsizei count, const GLint *value)\n    {\n        Uniform3iv = (PFNUNIFORM3IVPROC)IntGetProcAddress(\"glUniform3iv\");\n        Uniform3iv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4iv(GLint location, GLsizei count, const GLint *value)\n    {\n        Uniform4iv = (PFNUNIFORM4IVPROC)IntGetProcAddress(\"glUniform4iv\");\n        Uniform4iv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix2fv = (PFNUNIFORMMATRIX2FVPROC)IntGetProcAddress(\"glUniformMatrix2fv\");\n        UniformMatrix2fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix3fv = (PFNUNIFORMMATRIX3FVPROC)IntGetProcAddress(\"glUniformMatrix3fv\");\n        UniformMatrix3fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix4fv = (PFNUNIFORMMATRIX4FVPROC)IntGetProcAddress(\"glUniformMatrix4fv\");\n        UniformMatrix4fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ValidateProgram(GLuint program)\n    {\n        ValidateProgram = (PFNVALIDATEPROGRAMPROC)IntGetProcAddress(\"glValidateProgram\");\n        ValidateProgram(program);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)\n    {\n        VertexAttribPointer = (PFNVERTEXATTRIBPOINTERPROC)IntGetProcAddress(\"glVertexAttribPointer\");\n        VertexAttribPointer(index, size, type, normalized, stride, pointer);\n    }\n\n    // Extension: 2.1\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix2x3fv = (PFNUNIFORMMATRIX2X3FVPROC)IntGetProcAddress(\"glUniformMatrix2x3fv\");\n        UniformMatrix2x3fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix3x2fv = (PFNUNIFORMMATRIX3X2FVPROC)IntGetProcAddress(\"glUniformMatrix3x2fv\");\n        UniformMatrix3x2fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix2x4fv = (PFNUNIFORMMATRIX2X4FVPROC)IntGetProcAddress(\"glUniformMatrix2x4fv\");\n        UniformMatrix2x4fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix4x2fv = (PFNUNIFORMMATRIX4X2FVPROC)IntGetProcAddress(\"glUniformMatrix4x2fv\");\n        UniformMatrix4x2fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix3x4fv = (PFNUNIFORMMATRIX3X4FVPROC)IntGetProcAddress(\"glUniformMatrix3x4fv\");\n        UniformMatrix3x4fv(location, count, transpose, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)\n    {\n        UniformMatrix4x3fv = (PFNUNIFORMMATRIX4X3FVPROC)IntGetProcAddress(\"glUniformMatrix4x3fv\");\n        UniformMatrix4x3fv(location, count, transpose, value);\n    }\n\n    // Extension: ARB_vertex_array_object\n\n    static void CODEGEN_FUNCPTR Switch_BindVertexArray(GLuint ren_array)\n    {\n        BindVertexArray = (PFNBINDVERTEXARRAYPROC)IntGetProcAddress(\"glBindVertexArray\");\n        BindVertexArray(ren_array);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteVertexArrays(GLsizei n, const GLuint *arrays)\n    {\n        DeleteVertexArrays = (PFNDELETEVERTEXARRAYSPROC)IntGetProcAddress(\"glDeleteVertexArrays\");\n        DeleteVertexArrays(n, arrays);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenVertexArrays(GLsizei n, GLuint *arrays)\n    {\n        GenVertexArrays = (PFNGENVERTEXARRAYSPROC)IntGetProcAddress(\"glGenVertexArrays\");\n        GenVertexArrays(n, arrays);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsVertexArray(GLuint ren_array)\n    {\n        IsVertexArray = (PFNISVERTEXARRAYPROC)IntGetProcAddress(\"glIsVertexArray\");\n        return IsVertexArray(ren_array);\n    }\n\n    // Extension: ARB_map_buffer_range\n\n    static GLvoid* CODEGEN_FUNCPTR Switch_MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)\n    {\n        MapBufferRange = (PFNMAPBUFFERRANGEPROC)IntGetProcAddress(\"glMapBufferRange\");\n        return MapBufferRange(target, offset, length, access);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)\n    {\n        FlushMappedBufferRange = (PFNFLUSHMAPPEDBUFFERRANGEPROC)IntGetProcAddress(\"glFlushMappedBufferRange\");\n        FlushMappedBufferRange(target, offset, length);\n    }\n\n    // Extension: ARB_framebuffer_object\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsRenderbuffer(GLuint renderbuffer)\n    {\n        IsRenderbuffer = (PFNISRENDERBUFFERPROC)IntGetProcAddress(\"glIsRenderbuffer\");\n        return IsRenderbuffer(renderbuffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindRenderbuffer(GLenum target, GLuint renderbuffer)\n    {\n        BindRenderbuffer = (PFNBINDRENDERBUFFERPROC)IntGetProcAddress(\"glBindRenderbuffer\");\n        BindRenderbuffer(target, renderbuffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)\n    {\n        DeleteRenderbuffers = (PFNDELETERENDERBUFFERSPROC)IntGetProcAddress(\"glDeleteRenderbuffers\");\n        DeleteRenderbuffers(n, renderbuffers);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenRenderbuffers(GLsizei n, GLuint *renderbuffers)\n    {\n        GenRenderbuffers = (PFNGENRENDERBUFFERSPROC)IntGetProcAddress(\"glGenRenderbuffers\");\n        GenRenderbuffers(n, renderbuffers);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)\n    {\n        RenderbufferStorage = (PFNRENDERBUFFERSTORAGEPROC)IntGetProcAddress(\"glRenderbufferStorage\");\n        RenderbufferStorage(target, internalformat, width, height);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)\n    {\n        GetRenderbufferParameteriv = (PFNGETRENDERBUFFERPARAMETERIVPROC)IntGetProcAddress(\"glGetRenderbufferParameteriv\");\n        GetRenderbufferParameteriv(target, pname, params);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsFramebuffer(GLuint framebuffer)\n    {\n        IsFramebuffer = (PFNISFRAMEBUFFERPROC)IntGetProcAddress(\"glIsFramebuffer\");\n        return IsFramebuffer(framebuffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindFramebuffer(GLenum target, GLuint framebuffer)\n    {\n        BindFramebuffer = (PFNBINDFRAMEBUFFERPROC)IntGetProcAddress(\"glBindFramebuffer\");\n        BindFramebuffer(target, framebuffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers)\n    {\n        DeleteFramebuffers = (PFNDELETEFRAMEBUFFERSPROC)IntGetProcAddress(\"glDeleteFramebuffers\");\n        DeleteFramebuffers(n, framebuffers);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenFramebuffers(GLsizei n, GLuint *framebuffers)\n    {\n        GenFramebuffers = (PFNGENFRAMEBUFFERSPROC)IntGetProcAddress(\"glGenFramebuffers\");\n        GenFramebuffers(n, framebuffers);\n    }\n\n    static GLenum CODEGEN_FUNCPTR Switch_CheckFramebufferStatus(GLenum target)\n    {\n        CheckFramebufferStatus = (PFNCHECKFRAMEBUFFERSTATUSPROC)IntGetProcAddress(\"glCheckFramebufferStatus\");\n        return CheckFramebufferStatus(target);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)\n    {\n        FramebufferTexture1D = (PFNFRAMEBUFFERTEXTURE1DPROC)IntGetProcAddress(\"glFramebufferTexture1D\");\n        FramebufferTexture1D(target, attachment, textarget, texture, level);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)\n    {\n        FramebufferTexture2D = (PFNFRAMEBUFFERTEXTURE2DPROC)IntGetProcAddress(\"glFramebufferTexture2D\");\n        FramebufferTexture2D(target, attachment, textarget, texture, level);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)\n    {\n        FramebufferTexture3D = (PFNFRAMEBUFFERTEXTURE3DPROC)IntGetProcAddress(\"glFramebufferTexture3D\");\n        FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)\n    {\n        FramebufferRenderbuffer = (PFNFRAMEBUFFERRENDERBUFFERPROC)IntGetProcAddress(\"glFramebufferRenderbuffer\");\n        FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)\n    {\n        GetFramebufferAttachmentParameteriv = (PFNGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)IntGetProcAddress(\"glGetFramebufferAttachmentParameteriv\");\n        GetFramebufferAttachmentParameteriv(target, attachment, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GenerateMipmap(GLenum target)\n    {\n        GenerateMipmap = (PFNGENERATEMIPMAPPROC)IntGetProcAddress(\"glGenerateMipmap\");\n        GenerateMipmap(target);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)\n    {\n        BlitFramebuffer = (PFNBLITFRAMEBUFFERPROC)IntGetProcAddress(\"glBlitFramebuffer\");\n        BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)\n    {\n        RenderbufferStorageMultisample = (PFNRENDERBUFFERSTORAGEMULTISAMPLEPROC)IntGetProcAddress(\"glRenderbufferStorageMultisample\");\n        RenderbufferStorageMultisample(target, samples, internalformat, width, height);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)\n    {\n        FramebufferTextureLayer = (PFNFRAMEBUFFERTEXTURELAYERPROC)IntGetProcAddress(\"glFramebufferTextureLayer\");\n        FramebufferTextureLayer(target, attachment, texture, level, layer);\n    }\n\n    // Extension: 3.0\n\n    static void CODEGEN_FUNCPTR Switch_ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)\n    {\n        ColorMaski = (PFNCOLORMASKIPROC)IntGetProcAddress(\"glColorMaski\");\n        ColorMaski(index, r, g, b, a);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetBooleani_v(GLenum target, GLuint index, GLboolean *data)\n    {\n        GetBooleani_v = (PFNGETBOOLEANI_VPROC)IntGetProcAddress(\"glGetBooleani_v\");\n        GetBooleani_v(target, index, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetIntegeri_v(GLenum target, GLuint index, GLint *data)\n    {\n        GetIntegeri_v = (PFNGETINTEGERI_VPROC)IntGetProcAddress(\"glGetIntegeri_v\");\n        GetIntegeri_v(target, index, data);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Enablei(GLenum target, GLuint index)\n    {\n        Enablei = (PFNENABLEIPROC)IntGetProcAddress(\"glEnablei\");\n        Enablei(target, index);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Disablei(GLenum target, GLuint index)\n    {\n        Disablei = (PFNDISABLEIPROC)IntGetProcAddress(\"glDisablei\");\n        Disablei(target, index);\n    }\n\n    static GLboolean CODEGEN_FUNCPTR Switch_IsEnabledi(GLenum target, GLuint index)\n    {\n        IsEnabledi = (PFNISENABLEDIPROC)IntGetProcAddress(\"glIsEnabledi\");\n        return IsEnabledi(target, index);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BeginTransformFeedback(GLenum primitiveMode)\n    {\n        BeginTransformFeedback = (PFNBEGINTRANSFORMFEEDBACKPROC)IntGetProcAddress(\"glBeginTransformFeedback\");\n        BeginTransformFeedback(primitiveMode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_EndTransformFeedback()\n    {\n        EndTransformFeedback = (PFNENDTRANSFORMFEEDBACKPROC)IntGetProcAddress(\"glEndTransformFeedback\");\n        EndTransformFeedback();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)\n    {\n        BindBufferRange = (PFNBINDBUFFERRANGEPROC)IntGetProcAddress(\"glBindBufferRange\");\n        BindBufferRange(target, index, buffer, offset, size);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindBufferBase(GLenum target, GLuint index, GLuint buffer)\n    {\n        BindBufferBase = (PFNBINDBUFFERBASEPROC)IntGetProcAddress(\"glBindBufferBase\");\n        BindBufferBase(target, index, buffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode)\n    {\n        TransformFeedbackVaryings = (PFNTRANSFORMFEEDBACKVARYINGSPROC)IntGetProcAddress(\"glTransformFeedbackVaryings\");\n        TransformFeedbackVaryings(program, count, varyings, bufferMode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)\n    {\n        GetTransformFeedbackVarying = (PFNGETTRANSFORMFEEDBACKVARYINGPROC)IntGetProcAddress(\"glGetTransformFeedbackVarying\");\n        GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClampColor(GLenum target, GLenum clamp)\n    {\n        ClampColor = (PFNCLAMPCOLORPROC)IntGetProcAddress(\"glClampColor\");\n        ClampColor(target, clamp);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BeginConditionalRender(GLuint id, GLenum mode)\n    {\n        BeginConditionalRender = (PFNBEGINCONDITIONALRENDERPROC)IntGetProcAddress(\"glBeginConditionalRender\");\n        BeginConditionalRender(id, mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_EndConditionalRender()\n    {\n        EndConditionalRender = (PFNENDCONDITIONALRENDERPROC)IntGetProcAddress(\"glEndConditionalRender\");\n        EndConditionalRender();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)\n    {\n        VertexAttribIPointer = (PFNVERTEXATTRIBIPOINTERPROC)IntGetProcAddress(\"glVertexAttribIPointer\");\n        VertexAttribIPointer(index, size, type, stride, pointer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)\n    {\n        GetVertexAttribIiv = (PFNGETVERTEXATTRIBIIVPROC)IntGetProcAddress(\"glGetVertexAttribIiv\");\n        GetVertexAttribIiv(index, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)\n    {\n        GetVertexAttribIuiv = (PFNGETVERTEXATTRIBIUIVPROC)IntGetProcAddress(\"glGetVertexAttribIuiv\");\n        GetVertexAttribIuiv(index, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI1i(GLuint index, GLint x)\n    {\n        VertexAttribI1i = (PFNVERTEXATTRIBI1IPROC)IntGetProcAddress(\"glVertexAttribI1i\");\n        VertexAttribI1i(index, x);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI2i(GLuint index, GLint x, GLint y)\n    {\n        VertexAttribI2i = (PFNVERTEXATTRIBI2IPROC)IntGetProcAddress(\"glVertexAttribI2i\");\n        VertexAttribI2i(index, x, y);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)\n    {\n        VertexAttribI3i = (PFNVERTEXATTRIBI3IPROC)IntGetProcAddress(\"glVertexAttribI3i\");\n        VertexAttribI3i(index, x, y, z);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)\n    {\n        VertexAttribI4i = (PFNVERTEXATTRIBI4IPROC)IntGetProcAddress(\"glVertexAttribI4i\");\n        VertexAttribI4i(index, x, y, z, w);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI1ui(GLuint index, GLuint x)\n    {\n        VertexAttribI1ui = (PFNVERTEXATTRIBI1UIPROC)IntGetProcAddress(\"glVertexAttribI1ui\");\n        VertexAttribI1ui(index, x);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI2ui(GLuint index, GLuint x, GLuint y)\n    {\n        VertexAttribI2ui = (PFNVERTEXATTRIBI2UIPROC)IntGetProcAddress(\"glVertexAttribI2ui\");\n        VertexAttribI2ui(index, x, y);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)\n    {\n        VertexAttribI3ui = (PFNVERTEXATTRIBI3UIPROC)IntGetProcAddress(\"glVertexAttribI3ui\");\n        VertexAttribI3ui(index, x, y, z);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)\n    {\n        VertexAttribI4ui = (PFNVERTEXATTRIBI4UIPROC)IntGetProcAddress(\"glVertexAttribI4ui\");\n        VertexAttribI4ui(index, x, y, z, w);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI1iv(GLuint index, const GLint *v)\n    {\n        VertexAttribI1iv = (PFNVERTEXATTRIBI1IVPROC)IntGetProcAddress(\"glVertexAttribI1iv\");\n        VertexAttribI1iv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI2iv(GLuint index, const GLint *v)\n    {\n        VertexAttribI2iv = (PFNVERTEXATTRIBI2IVPROC)IntGetProcAddress(\"glVertexAttribI2iv\");\n        VertexAttribI2iv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI3iv(GLuint index, const GLint *v)\n    {\n        VertexAttribI3iv = (PFNVERTEXATTRIBI3IVPROC)IntGetProcAddress(\"glVertexAttribI3iv\");\n        VertexAttribI3iv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4iv(GLuint index, const GLint *v)\n    {\n        VertexAttribI4iv = (PFNVERTEXATTRIBI4IVPROC)IntGetProcAddress(\"glVertexAttribI4iv\");\n        VertexAttribI4iv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI1uiv(GLuint index, const GLuint *v)\n    {\n        VertexAttribI1uiv = (PFNVERTEXATTRIBI1UIVPROC)IntGetProcAddress(\"glVertexAttribI1uiv\");\n        VertexAttribI1uiv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI2uiv(GLuint index, const GLuint *v)\n    {\n        VertexAttribI2uiv = (PFNVERTEXATTRIBI2UIVPROC)IntGetProcAddress(\"glVertexAttribI2uiv\");\n        VertexAttribI2uiv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI3uiv(GLuint index, const GLuint *v)\n    {\n        VertexAttribI3uiv = (PFNVERTEXATTRIBI3UIVPROC)IntGetProcAddress(\"glVertexAttribI3uiv\");\n        VertexAttribI3uiv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4uiv(GLuint index, const GLuint *v)\n    {\n        VertexAttribI4uiv = (PFNVERTEXATTRIBI4UIVPROC)IntGetProcAddress(\"glVertexAttribI4uiv\");\n        VertexAttribI4uiv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4bv(GLuint index, const GLbyte *v)\n    {\n        VertexAttribI4bv = (PFNVERTEXATTRIBI4BVPROC)IntGetProcAddress(\"glVertexAttribI4bv\");\n        VertexAttribI4bv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4sv(GLuint index, const GLshort *v)\n    {\n        VertexAttribI4sv = (PFNVERTEXATTRIBI4SVPROC)IntGetProcAddress(\"glVertexAttribI4sv\");\n        VertexAttribI4sv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4ubv(GLuint index, const GLubyte *v)\n    {\n        VertexAttribI4ubv = (PFNVERTEXATTRIBI4UBVPROC)IntGetProcAddress(\"glVertexAttribI4ubv\");\n        VertexAttribI4ubv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexAttribI4usv(GLuint index, const GLushort *v)\n    {\n        VertexAttribI4usv = (PFNVERTEXATTRIBI4USVPROC)IntGetProcAddress(\"glVertexAttribI4usv\");\n        VertexAttribI4usv(index, v);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetUniformuiv(GLuint program, GLint location, GLuint *params)\n    {\n        GetUniformuiv = (PFNGETUNIFORMUIVPROC)IntGetProcAddress(\"glGetUniformuiv\");\n        GetUniformuiv(program, location, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_BindFragDataLocation(GLuint program, GLuint color, const GLchar *name)\n    {\n        BindFragDataLocation = (PFNBINDFRAGDATALOCATIONPROC)IntGetProcAddress(\"glBindFragDataLocation\");\n        BindFragDataLocation(program, color, name);\n    }\n\n    static GLint CODEGEN_FUNCPTR Switch_GetFragDataLocation(GLuint program, const GLchar *name)\n    {\n        GetFragDataLocation = (PFNGETFRAGDATALOCATIONPROC)IntGetProcAddress(\"glGetFragDataLocation\");\n        return GetFragDataLocation(program, name);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1ui(GLint location, GLuint v0)\n    {\n        Uniform1ui = (PFNUNIFORM1UIPROC)IntGetProcAddress(\"glUniform1ui\");\n        Uniform1ui(location, v0);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2ui(GLint location, GLuint v0, GLuint v1)\n    {\n        Uniform2ui = (PFNUNIFORM2UIPROC)IntGetProcAddress(\"glUniform2ui\");\n        Uniform2ui(location, v0, v1);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)\n    {\n        Uniform3ui = (PFNUNIFORM3UIPROC)IntGetProcAddress(\"glUniform3ui\");\n        Uniform3ui(location, v0, v1, v2);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)\n    {\n        Uniform4ui = (PFNUNIFORM4UIPROC)IntGetProcAddress(\"glUniform4ui\");\n        Uniform4ui(location, v0, v1, v2, v3);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform1uiv(GLint location, GLsizei count, const GLuint *value)\n    {\n        Uniform1uiv = (PFNUNIFORM1UIVPROC)IntGetProcAddress(\"glUniform1uiv\");\n        Uniform1uiv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform2uiv(GLint location, GLsizei count, const GLuint *value)\n    {\n        Uniform2uiv = (PFNUNIFORM2UIVPROC)IntGetProcAddress(\"glUniform2uiv\");\n        Uniform2uiv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform3uiv(GLint location, GLsizei count, const GLuint *value)\n    {\n        Uniform3uiv = (PFNUNIFORM3UIVPROC)IntGetProcAddress(\"glUniform3uiv\");\n        Uniform3uiv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Uniform4uiv(GLint location, GLsizei count, const GLuint *value)\n    {\n        Uniform4uiv = (PFNUNIFORM4UIVPROC)IntGetProcAddress(\"glUniform4uiv\");\n        Uniform4uiv(location, count, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameterIiv(GLenum target, GLenum pname, const GLint *params)\n    {\n        TexParameterIiv = (PFNTEXPARAMETERIIVPROC)IntGetProcAddress(\"glTexParameterIiv\");\n        TexParameterIiv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)\n    {\n        TexParameterIuiv = (PFNTEXPARAMETERIUIVPROC)IntGetProcAddress(\"glTexParameterIuiv\");\n        TexParameterIuiv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params)\n    {\n        GetTexParameterIiv = (PFNGETTEXPARAMETERIIVPROC)IntGetProcAddress(\"glGetTexParameterIiv\");\n        GetTexParameterIiv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)\n    {\n        GetTexParameterIuiv = (PFNGETTEXPARAMETERIUIVPROC)IntGetProcAddress(\"glGetTexParameterIuiv\");\n        GetTexParameterIuiv(target, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)\n    {\n        ClearBufferiv = (PFNCLEARBUFFERIVPROC)IntGetProcAddress(\"glClearBufferiv\");\n        ClearBufferiv(buffer, drawbuffer, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)\n    {\n        ClearBufferuiv = (PFNCLEARBUFFERUIVPROC)IntGetProcAddress(\"glClearBufferuiv\");\n        ClearBufferuiv(buffer, drawbuffer, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)\n    {\n        ClearBufferfv = (PFNCLEARBUFFERFVPROC)IntGetProcAddress(\"glClearBufferfv\");\n        ClearBufferfv(buffer, drawbuffer, value);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)\n    {\n        ClearBufferfi = (PFNCLEARBUFFERFIPROC)IntGetProcAddress(\"glClearBufferfi\");\n        ClearBufferfi(buffer, drawbuffer, depth, stencil);\n    }\n\n    static const GLubyte * CODEGEN_FUNCPTR Switch_GetStringi(GLenum name, GLuint index)\n    {\n        GetStringi = (PFNGETSTRINGIPROC)IntGetProcAddress(\"glGetStringi\");\n        return GetStringi(name, index);\n    }\n\n    // Extension: ARB_uniform_buffer_object\n\n    static void CODEGEN_FUNCPTR Switch_GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices)\n    {\n        GetUniformIndices = (PFNGETUNIFORMINDICESPROC)IntGetProcAddress(\"glGetUniformIndices\");\n        GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)\n    {\n        GetActiveUniformsiv = (PFNGETACTIVEUNIFORMSIVPROC)IntGetProcAddress(\"glGetActiveUniformsiv\");\n        GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)\n    {\n        GetActiveUniformName = (PFNGETACTIVEUNIFORMNAMEPROC)IntGetProcAddress(\"glGetActiveUniformName\");\n        GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);\n    }\n\n    static GLuint CODEGEN_FUNCPTR Switch_GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)\n    {\n        GetUniformBlockIndex = (PFNGETUNIFORMBLOCKINDEXPROC)IntGetProcAddress(\"glGetUniformBlockIndex\");\n        return GetUniformBlockIndex(program, uniformBlockName);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)\n    {\n        GetActiveUniformBlockiv = (PFNGETACTIVEUNIFORMBLOCKIVPROC)IntGetProcAddress(\"glGetActiveUniformBlockiv\");\n        GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)\n    {\n        GetActiveUniformBlockName = (PFNGETACTIVEUNIFORMBLOCKNAMEPROC)IntGetProcAddress(\"glGetActiveUniformBlockName\");\n        GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)\n    {\n        UniformBlockBinding = (PFNUNIFORMBLOCKBINDINGPROC)IntGetProcAddress(\"glUniformBlockBinding\");\n        UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);\n    }\n\n    // Extension: ARB_copy_buffer\n\n    static void CODEGEN_FUNCPTR Switch_CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)\n    {\n        CopyBufferSubData = (PFNCOPYBUFFERSUBDATAPROC)IntGetProcAddress(\"glCopyBufferSubData\");\n        CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);\n    }\n\n    // Extension: 3.1\n\n    static void CODEGEN_FUNCPTR Switch_DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)\n    {\n        DrawArraysInstanced = (PFNDRAWARRAYSINSTANCEDPROC)IntGetProcAddress(\"glDrawArraysInstanced\");\n        DrawArraysInstanced(mode, first, count, instancecount);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount)\n    {\n        DrawElementsInstanced = (PFNDRAWELEMENTSINSTANCEDPROC)IntGetProcAddress(\"glDrawElementsInstanced\");\n        DrawElementsInstanced(mode, count, type, indices, instancecount);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexBuffer(GLenum target, GLenum internalformat, GLuint buffer)\n    {\n        TexBuffer = (PFNTEXBUFFERPROC)IntGetProcAddress(\"glTexBuffer\");\n        TexBuffer(target, internalformat, buffer);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_PrimitiveRestartIndex(GLuint index)\n    {\n        PrimitiveRestartIndex = (PFNPRIMITIVERESTARTINDEXPROC)IntGetProcAddress(\"glPrimitiveRestartIndex\");\n        PrimitiveRestartIndex(index);\n    }\n\n    // Legacy\n\n    static void CODEGEN_FUNCPTR Switch_EnableClientState(GLenum cap)\n    {\n        EnableClientState = (PFNENABLECLIENTSTATEPROC)IntGetProcAddress(\"glEnableClientState\");\n        EnableClientState(cap);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_DisableClientState(GLenum cap)\n    {\n        DisableClientState = (PFNDISABLECLIENTSTATEPROC)IntGetProcAddress(\"glDisableClientState\");\n        DisableClientState(cap);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)\n    {\n        VertexPointer = (PFNVERTEXPOINTERPROC)IntGetProcAddress(\"glVertexPointer\");\n        VertexPointer(size, type, stride, ptr);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_NormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr)\n    {\n        NormalPointer = (PFNNORMALPOINTERPROC)IntGetProcAddress(\"glNormalPointer\");\n        NormalPointer(type, stride, ptr);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)\n    {\n        ColorPointer = (PFNCOLORPOINTERPROC)IntGetProcAddress(\"glColorPointer\");\n        ColorPointer(size, type, stride, ptr);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)\n    {\n        TexCoordPointer = (PFNTEXCOORDPOINTERPROC)IntGetProcAddress(\"glTexCoordPointer\");\n        TexCoordPointer(size, type, stride, ptr);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_TexEnvi(GLenum target, GLenum pname, GLint param)\n    {\n        TexEnvi = (PFNTEXENVIPROC)IntGetProcAddress(\"glTexEnvi\");\n        TexEnvi(target, pname, param);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_MatrixMode(GLenum mode)\n    {\n        MatrixMode = (PFNMATRIXMODEPROC)IntGetProcAddress(\"glMatrixMode\");\n        MatrixMode(mode);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_LoadIdentity(void)\n    {\n        LoadIdentity = (PFNLOADIDENTITYPROC)IntGetProcAddress(\"glLoadIdentity\");\n        LoadIdentity();\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)\n    {\n        Ortho = (PFNORTHOPROC)IntGetProcAddress(\"glOrtho\");\n        Ortho(left, right, bottom, top, near_val, far_val);\n    }\n\n    static void CODEGEN_FUNCPTR Switch_Color3d(GLdouble red, GLdouble green, GLdouble blue)\n    {\n        Color3d = (PFNCOLOR3DPROC)IntGetProcAddress(\"glColor3d\");\n        Color3d(red, green, blue);\n    }\n\n    struct InitializeVariables\n    {\n        InitializeVariables()\n        {\n            // Extension: 1.1\n            CullFace = Switch_CullFace;\n            FrontFace = Switch_FrontFace;\n            Hint = Switch_Hint;\n            LineWidth = Switch_LineWidth;\n            PointSize = Switch_PointSize;\n            PolygonMode = Switch_PolygonMode;\n            Scissor = Switch_Scissor;\n            TexParameterf = Switch_TexParameterf;\n            TexParameterfv = Switch_TexParameterfv;\n            TexParameteri = Switch_TexParameteri;\n            TexParameteriv = Switch_TexParameteriv;\n            TexImage1D = Switch_TexImage1D;\n            TexImage2D = Switch_TexImage2D;\n            DrawBuffer = Switch_DrawBuffer;\n            Clear = Switch_Clear;\n            ClearColor = Switch_ClearColor;\n            ClearStencil = Switch_ClearStencil;\n            ClearDepth = Switch_ClearDepth;\n            StencilMask = Switch_StencilMask;\n            ColorMask = Switch_ColorMask;\n            DepthMask = Switch_DepthMask;\n            Disable = Switch_Disable;\n            Enable = Switch_Enable;\n            Finish = Switch_Finish;\n            Flush = Switch_Flush;\n            BlendFunc = Switch_BlendFunc;\n            LogicOp = Switch_LogicOp;\n            StencilFunc = Switch_StencilFunc;\n            StencilOp = Switch_StencilOp;\n            DepthFunc = Switch_DepthFunc;\n            PixelStoref = Switch_PixelStoref;\n            PixelStorei = Switch_PixelStorei;\n            ReadBuffer = Switch_ReadBuffer;\n            ReadPixels = Switch_ReadPixels;\n            GetBooleanv = Switch_GetBooleanv;\n            GetDoublev = Switch_GetDoublev;\n            GetError = Switch_GetError;\n            GetFloatv = Switch_GetFloatv;\n            GetIntegerv = Switch_GetIntegerv;\n            GetString = Switch_GetString;\n            GetTexImage = Switch_GetTexImage;\n            GetTexParameterfv = Switch_GetTexParameterfv;\n            GetTexParameteriv = Switch_GetTexParameteriv;\n            GetTexLevelParameterfv = Switch_GetTexLevelParameterfv;\n            GetTexLevelParameteriv = Switch_GetTexLevelParameteriv;\n            IsEnabled = Switch_IsEnabled;\n            DepthRange = Switch_DepthRange;\n            Viewport = Switch_Viewport;\n            DrawArrays = Switch_DrawArrays;\n            DrawElements = Switch_DrawElements;\n            GetPointerv = Switch_GetPointerv;\n            PolygonOffset = Switch_PolygonOffset;\n            CopyTexImage1D = Switch_CopyTexImage1D;\n            CopyTexImage2D = Switch_CopyTexImage2D;\n            CopyTexSubImage1D = Switch_CopyTexSubImage1D;\n            CopyTexSubImage2D = Switch_CopyTexSubImage2D;\n            TexSubImage1D = Switch_TexSubImage1D;\n            TexSubImage2D = Switch_TexSubImage2D;\n            BindTexture = Switch_BindTexture;\n            DeleteTextures = Switch_DeleteTextures;\n            GenTextures = Switch_GenTextures;\n            IsTexture = Switch_IsTexture;\n            Indexub = Switch_Indexub;\n            Indexubv = Switch_Indexubv;\n\n            // Extension: 1.2\n            BlendColor = Switch_BlendColor;\n            BlendEquation = Switch_BlendEquation;\n            DrawRangeElements = Switch_DrawRangeElements;\n            TexSubImage3D = Switch_TexSubImage3D;\n            CopyTexSubImage3D = Switch_CopyTexSubImage3D;\n\n            // Extension: 1.3\n            ActiveTexture = Switch_ActiveTexture;\n            SampleCoverage = Switch_SampleCoverage;\n            CompressedTexImage3D = Switch_CompressedTexImage3D;\n            CompressedTexImage2D = Switch_CompressedTexImage2D;\n            CompressedTexImage1D = Switch_CompressedTexImage1D;\n            CompressedTexSubImage3D = Switch_CompressedTexSubImage3D;\n            CompressedTexSubImage2D = Switch_CompressedTexSubImage2D;\n            CompressedTexSubImage1D = Switch_CompressedTexSubImage1D;\n            GetCompressedTexImage = Switch_GetCompressedTexImage;\n\n            // Extension: 1.4\n            BlendFuncSeparate = Switch_BlendFuncSeparate;\n            MultiDrawArrays = Switch_MultiDrawArrays;\n            MultiDrawElements = Switch_MultiDrawElements;\n            PointParameterf = Switch_PointParameterf;\n            PointParameterfv = Switch_PointParameterfv;\n            PointParameteri = Switch_PointParameteri;\n            PointParameteriv = Switch_PointParameteriv;\n\n            // Extension: 1.5\n            GenQueries = Switch_GenQueries;\n            DeleteQueries = Switch_DeleteQueries;\n            IsQuery = Switch_IsQuery;\n            BeginQuery = Switch_BeginQuery;\n            EndQuery = Switch_EndQuery;\n            GetQueryiv = Switch_GetQueryiv;\n            GetQueryObjectiv = Switch_GetQueryObjectiv;\n            GetQueryObjectuiv = Switch_GetQueryObjectuiv;\n            BindBuffer = Switch_BindBuffer;\n            DeleteBuffers = Switch_DeleteBuffers;\n            GenBuffers = Switch_GenBuffers;\n            IsBuffer = Switch_IsBuffer;\n            BufferData = Switch_BufferData;\n            BufferSubData = Switch_BufferSubData;\n            GetBufferSubData = Switch_GetBufferSubData;\n            MapBuffer = Switch_MapBuffer;\n            UnmapBuffer = Switch_UnmapBuffer;\n            GetBufferParameteriv = Switch_GetBufferParameteriv;\n            GetBufferPointerv = Switch_GetBufferPointerv;\n\n            // Extension: 2.0\n            BlendEquationSeparate = Switch_BlendEquationSeparate;\n            DrawBuffers = Switch_DrawBuffers;\n            StencilOpSeparate = Switch_StencilOpSeparate;\n            StencilFuncSeparate = Switch_StencilFuncSeparate;\n            StencilMaskSeparate = Switch_StencilMaskSeparate;\n            AttachShader = Switch_AttachShader;\n            BindAttribLocation = Switch_BindAttribLocation;\n            CompileShader = Switch_CompileShader;\n            CreateProgram = Switch_CreateProgram;\n            CreateShader = Switch_CreateShader;\n            DeleteProgram = Switch_DeleteProgram;\n            DeleteShader = Switch_DeleteShader;\n            DetachShader = Switch_DetachShader;\n            DisableVertexAttribArray = Switch_DisableVertexAttribArray;\n            EnableVertexAttribArray = Switch_EnableVertexAttribArray;\n            GetActiveAttrib = Switch_GetActiveAttrib;\n            GetActiveUniform = Switch_GetActiveUniform;\n            GetAttachedShaders = Switch_GetAttachedShaders;\n            GetAttribLocation = Switch_GetAttribLocation;\n            GetProgramiv = Switch_GetProgramiv;\n            GetProgramInfoLog = Switch_GetProgramInfoLog;\n            GetShaderiv = Switch_GetShaderiv;\n            GetShaderInfoLog = Switch_GetShaderInfoLog;\n            GetShaderSource = Switch_GetShaderSource;\n            GetUniformLocation = Switch_GetUniformLocation;\n            GetUniformfv = Switch_GetUniformfv;\n            GetUniformiv = Switch_GetUniformiv;\n            GetVertexAttribdv = Switch_GetVertexAttribdv;\n            GetVertexAttribfv = Switch_GetVertexAttribfv;\n            GetVertexAttribiv = Switch_GetVertexAttribiv;\n            GetVertexAttribPointerv = Switch_GetVertexAttribPointerv;\n            IsProgram = Switch_IsProgram;\n            IsShader = Switch_IsShader;\n            LinkProgram = Switch_LinkProgram;\n            ShaderSource = Switch_ShaderSource;\n            UseProgram = Switch_UseProgram;\n            Uniform1f = Switch_Uniform1f;\n            Uniform2f = Switch_Uniform2f;\n            Uniform3f = Switch_Uniform3f;\n            Uniform4f = Switch_Uniform4f;\n            Uniform1i = Switch_Uniform1i;\n            Uniform2i = Switch_Uniform2i;\n            Uniform3i = Switch_Uniform3i;\n            Uniform4i = Switch_Uniform4i;\n            Uniform1fv = Switch_Uniform1fv;\n            Uniform2fv = Switch_Uniform2fv;\n            Uniform3fv = Switch_Uniform3fv;\n            Uniform4fv = Switch_Uniform4fv;\n            Uniform1iv = Switch_Uniform1iv;\n            Uniform2iv = Switch_Uniform2iv;\n            Uniform3iv = Switch_Uniform3iv;\n            Uniform4iv = Switch_Uniform4iv;\n            UniformMatrix2fv = Switch_UniformMatrix2fv;\n            UniformMatrix3fv = Switch_UniformMatrix3fv;\n            UniformMatrix4fv = Switch_UniformMatrix4fv;\n            ValidateProgram = Switch_ValidateProgram;\n            VertexAttribPointer = Switch_VertexAttribPointer;\n\n            // Extension: 2.1\n            UniformMatrix2x3fv = Switch_UniformMatrix2x3fv;\n            UniformMatrix3x2fv = Switch_UniformMatrix3x2fv;\n            UniformMatrix2x4fv = Switch_UniformMatrix2x4fv;\n            UniformMatrix4x2fv = Switch_UniformMatrix4x2fv;\n            UniformMatrix3x4fv = Switch_UniformMatrix3x4fv;\n            UniformMatrix4x3fv = Switch_UniformMatrix4x3fv;\n\n            // Extension: ARB_vertex_array_object\n            BindVertexArray = Switch_BindVertexArray;\n            DeleteVertexArrays = Switch_DeleteVertexArrays;\n            GenVertexArrays = Switch_GenVertexArrays;\n            IsVertexArray = Switch_IsVertexArray;\n\n            // Extension: ARB_map_buffer_range\n            MapBufferRange = Switch_MapBufferRange;\n            FlushMappedBufferRange = Switch_FlushMappedBufferRange;\n\n            // Extension: ARB_framebuffer_object\n            IsRenderbuffer = Switch_IsRenderbuffer;\n            BindRenderbuffer = Switch_BindRenderbuffer;\n            DeleteRenderbuffers = Switch_DeleteRenderbuffers;\n            GenRenderbuffers = Switch_GenRenderbuffers;\n            RenderbufferStorage = Switch_RenderbufferStorage;\n            GetRenderbufferParameteriv = Switch_GetRenderbufferParameteriv;\n            IsFramebuffer = Switch_IsFramebuffer;\n            BindFramebuffer = Switch_BindFramebuffer;\n            DeleteFramebuffers = Switch_DeleteFramebuffers;\n            GenFramebuffers = Switch_GenFramebuffers;\n            CheckFramebufferStatus = Switch_CheckFramebufferStatus;\n            FramebufferTexture1D = Switch_FramebufferTexture1D;\n            FramebufferTexture2D = Switch_FramebufferTexture2D;\n            FramebufferTexture3D = Switch_FramebufferTexture3D;\n            FramebufferRenderbuffer = Switch_FramebufferRenderbuffer;\n            GetFramebufferAttachmentParameteriv = Switch_GetFramebufferAttachmentParameteriv;\n            GenerateMipmap = Switch_GenerateMipmap;\n            BlitFramebuffer = Switch_BlitFramebuffer;\n            RenderbufferStorageMultisample = Switch_RenderbufferStorageMultisample;\n            FramebufferTextureLayer = Switch_FramebufferTextureLayer;\n\n            // Extension: 3.0\n            ColorMaski = Switch_ColorMaski;\n            GetBooleani_v = Switch_GetBooleani_v;\n            GetIntegeri_v = Switch_GetIntegeri_v;\n            Enablei = Switch_Enablei;\n            Disablei = Switch_Disablei;\n            IsEnabledi = Switch_IsEnabledi;\n            BeginTransformFeedback = Switch_BeginTransformFeedback;\n            EndTransformFeedback = Switch_EndTransformFeedback;\n            BindBufferRange = Switch_BindBufferRange;\n            BindBufferBase = Switch_BindBufferBase;\n            TransformFeedbackVaryings = Switch_TransformFeedbackVaryings;\n            GetTransformFeedbackVarying = Switch_GetTransformFeedbackVarying;\n            ClampColor = Switch_ClampColor;\n            BeginConditionalRender = Switch_BeginConditionalRender;\n            EndConditionalRender = Switch_EndConditionalRender;\n            VertexAttribIPointer = Switch_VertexAttribIPointer;\n            GetVertexAttribIiv = Switch_GetVertexAttribIiv;\n            GetVertexAttribIuiv = Switch_GetVertexAttribIuiv;\n            VertexAttribI1i = Switch_VertexAttribI1i;\n            VertexAttribI2i = Switch_VertexAttribI2i;\n            VertexAttribI3i = Switch_VertexAttribI3i;\n            VertexAttribI4i = Switch_VertexAttribI4i;\n            VertexAttribI1ui = Switch_VertexAttribI1ui;\n            VertexAttribI2ui = Switch_VertexAttribI2ui;\n            VertexAttribI3ui = Switch_VertexAttribI3ui;\n            VertexAttribI4ui = Switch_VertexAttribI4ui;\n            VertexAttribI1iv = Switch_VertexAttribI1iv;\n            VertexAttribI2iv = Switch_VertexAttribI2iv;\n            VertexAttribI3iv = Switch_VertexAttribI3iv;\n            VertexAttribI4iv = Switch_VertexAttribI4iv;\n            VertexAttribI1uiv = Switch_VertexAttribI1uiv;\n            VertexAttribI2uiv = Switch_VertexAttribI2uiv;\n            VertexAttribI3uiv = Switch_VertexAttribI3uiv;\n            VertexAttribI4uiv = Switch_VertexAttribI4uiv;\n            VertexAttribI4bv = Switch_VertexAttribI4bv;\n            VertexAttribI4sv = Switch_VertexAttribI4sv;\n            VertexAttribI4ubv = Switch_VertexAttribI4ubv;\n            VertexAttribI4usv = Switch_VertexAttribI4usv;\n            GetUniformuiv = Switch_GetUniformuiv;\n            BindFragDataLocation = Switch_BindFragDataLocation;\n            GetFragDataLocation = Switch_GetFragDataLocation;\n            Uniform1ui = Switch_Uniform1ui;\n            Uniform2ui = Switch_Uniform2ui;\n            Uniform3ui = Switch_Uniform3ui;\n            Uniform4ui = Switch_Uniform4ui;\n            Uniform1uiv = Switch_Uniform1uiv;\n            Uniform2uiv = Switch_Uniform2uiv;\n            Uniform3uiv = Switch_Uniform3uiv;\n            Uniform4uiv = Switch_Uniform4uiv;\n            TexParameterIiv = Switch_TexParameterIiv;\n            TexParameterIuiv = Switch_TexParameterIuiv;\n            GetTexParameterIiv = Switch_GetTexParameterIiv;\n            GetTexParameterIuiv = Switch_GetTexParameterIuiv;\n            ClearBufferiv = Switch_ClearBufferiv;\n            ClearBufferuiv = Switch_ClearBufferuiv;\n            ClearBufferfv = Switch_ClearBufferfv;\n            ClearBufferfi = Switch_ClearBufferfi;\n            GetStringi = Switch_GetStringi;\n\n            // Extension: ARB_uniform_buffer_object\n            GetUniformIndices = Switch_GetUniformIndices;\n            GetActiveUniformsiv = Switch_GetActiveUniformsiv;\n            GetActiveUniformName = Switch_GetActiveUniformName;\n            GetUniformBlockIndex = Switch_GetUniformBlockIndex;\n            GetActiveUniformBlockiv = Switch_GetActiveUniformBlockiv;\n            GetActiveUniformBlockName = Switch_GetActiveUniformBlockName;\n            UniformBlockBinding = Switch_UniformBlockBinding;\n\n            // Extension: ARB_copy_buffer\n            CopyBufferSubData = Switch_CopyBufferSubData;\n\n            // Extension: 3.1\n            DrawArraysInstanced = Switch_DrawArraysInstanced;\n            DrawElementsInstanced = Switch_DrawElementsInstanced;\n            TexBuffer = Switch_TexBuffer;\n            PrimitiveRestartIndex = Switch_PrimitiveRestartIndex;\n\n            // Legacy\n            EnableClientState = Switch_EnableClientState;\n            DisableClientState = Switch_DisableClientState;\n            VertexPointer = Switch_VertexPointer;\n            NormalPointer = Switch_NormalPointer;\n            ColorPointer = Switch_ColorPointer;\n            TexCoordPointer = Switch_TexCoordPointer;\n            TexEnvi = Switch_TexEnvi;\n            MatrixMode = Switch_MatrixMode;\n            LoadIdentity = Switch_LoadIdentity;\n            Ortho = Switch_Ortho;\n            Color3d = Switch_Color3d;\n        }\n    };\n\n    InitializeVariables g_initVariables;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/src/ocl_deprecated.hpp": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n\n/*\n  Part of the file is an extract from the standard OpenCL headers from Khronos site.\n  Below is the original copyright.\n*/\n\n/*******************************************************************************\n * Copyright (c) 2008 - 2012 The Khronos Group Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and/or associated documentation files (the\n * \"Materials\"), to deal in the Materials without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Materials, and to\n * permit persons to whom the Materials are furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Materials.\n *\n * THE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n ******************************************************************************/\n\n#if 0 //defined __APPLE__\n#define HAVE_OPENCL 1\n#else\n#undef HAVE_OPENCL\n#endif\n\n#define OPENCV_CL_NOT_IMPLEMENTED -1000\n\n#ifdef HAVE_OPENCL\n\n#if defined __APPLE__\n#include <OpenCL/opencl.h>\n#else\n#include <CL/opencl.h>\n#endif\n\nstatic const bool g_haveOpenCL = true;\n\n#else\n\nextern \"C\" {\n\nstruct _cl_platform_id { int dummy; };\nstruct _cl_device_id { int dummy; };\nstruct _cl_context { int dummy; };\nstruct _cl_command_queue { int dummy; };\nstruct _cl_mem { int dummy; };\nstruct _cl_program { int dummy; };\nstruct _cl_kernel { int dummy; };\nstruct _cl_event { int dummy; };\nstruct _cl_sampler { int dummy; };\n\ntypedef struct _cl_platform_id *    cl_platform_id;\ntypedef struct _cl_device_id *      cl_device_id;\ntypedef struct _cl_context *        cl_context;\ntypedef struct _cl_command_queue *  cl_command_queue;\ntypedef struct _cl_mem *            cl_mem;\ntypedef struct _cl_program *        cl_program;\ntypedef struct _cl_kernel *         cl_kernel;\ntypedef struct _cl_event *          cl_event;\ntypedef struct _cl_sampler *        cl_sampler;\n\ntypedef int cl_int;\ntypedef unsigned cl_uint;\n#if defined (_WIN32) && defined(_MSC_VER)\n    typedef __int64 cl_long;\n    typedef unsigned __int64 cl_ulong;\n#else\n    typedef long cl_long;\n    typedef unsigned long cl_ulong;\n#endif\n\ntypedef cl_uint             cl_bool; /* WARNING!  Unlike cl_ types in cl_platform.h, cl_bool is not guaranteed to be the same size as the bool in kernels. */\ntypedef cl_ulong            cl_bitfield;\ntypedef cl_bitfield         cl_device_type;\ntypedef cl_uint             cl_platform_info;\ntypedef cl_uint             cl_device_info;\ntypedef cl_bitfield         cl_device_fp_config;\ntypedef cl_uint             cl_device_mem_cache_type;\ntypedef cl_uint             cl_device_local_mem_type;\ntypedef cl_bitfield         cl_device_exec_capabilities;\ntypedef cl_bitfield         cl_command_queue_properties;\ntypedef intptr_t            cl_device_partition_property;\ntypedef cl_bitfield         cl_device_affinity_domain;\n\ntypedef intptr_t            cl_context_properties;\ntypedef cl_uint             cl_context_info;\ntypedef cl_uint             cl_command_queue_info;\ntypedef cl_uint             cl_channel_order;\ntypedef cl_uint             cl_channel_type;\ntypedef cl_bitfield         cl_mem_flags;\ntypedef cl_uint             cl_mem_object_type;\ntypedef cl_uint             cl_mem_info;\ntypedef cl_bitfield         cl_mem_migration_flags;\ntypedef cl_uint             cl_image_info;\ntypedef cl_uint             cl_buffer_create_type;\ntypedef cl_uint             cl_addressing_mode;\ntypedef cl_uint             cl_filter_mode;\ntypedef cl_uint             cl_sampler_info;\ntypedef cl_bitfield         cl_map_flags;\ntypedef cl_uint             cl_program_info;\ntypedef cl_uint             cl_program_build_info;\ntypedef cl_uint             cl_program_binary_type;\ntypedef cl_int              cl_build_status;\ntypedef cl_uint             cl_kernel_info;\ntypedef cl_uint             cl_kernel_arg_info;\ntypedef cl_uint             cl_kernel_arg_address_qualifier;\ntypedef cl_uint             cl_kernel_arg_access_qualifier;\ntypedef cl_bitfield         cl_kernel_arg_type_qualifier;\ntypedef cl_uint             cl_kernel_work_group_info;\ntypedef cl_uint             cl_event_info;\ntypedef cl_uint             cl_command_type;\ntypedef cl_uint             cl_profiling_info;\n\n\ntypedef struct _cl_image_format {\n    cl_channel_order        image_channel_order;\n    cl_channel_type         image_channel_data_type;\n} cl_image_format;\n\ntypedef struct _cl_image_desc {\n    cl_mem_object_type      image_type;\n    size_t                  image_width;\n    size_t                  image_height;\n    size_t                  image_depth;\n    size_t                  image_array_size;\n    size_t                  image_row_pitch;\n    size_t                  image_slice_pitch;\n    cl_uint                 num_mip_levels;\n    cl_uint                 num_samples;\n    cl_mem                  buffer;\n} cl_image_desc;\n\ntypedef struct _cl_buffer_region {\n    size_t                  origin;\n    size_t                  size;\n} cl_buffer_region;\n\n\n//////////////////////////////////////////////////////////\n\n#define CL_SUCCESS                                  0\n#define CL_DEVICE_NOT_FOUND                         -1\n#define CL_DEVICE_NOT_AVAILABLE                     -2\n#define CL_COMPILER_NOT_AVAILABLE                   -3\n#define CL_MEM_OBJECT_ALLOCATION_FAILURE            -4\n#define CL_OUT_OF_RESOURCES                         -5\n#define CL_OUT_OF_HOST_MEMORY                       -6\n#define CL_PROFILING_INFO_NOT_AVAILABLE             -7\n#define CL_MEM_COPY_OVERLAP                         -8\n#define CL_IMAGE_FORMAT_MISMATCH                    -9\n#define CL_IMAGE_FORMAT_NOT_SUPPORTED               -10\n#define CL_BUILD_PROGRAM_FAILURE                    -11\n#define CL_MAP_FAILURE                              -12\n#define CL_MISALIGNED_SUB_BUFFER_OFFSET             -13\n#define CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST -14\n#define CL_COMPILE_PROGRAM_FAILURE                  -15\n#define CL_LINKER_NOT_AVAILABLE                     -16\n#define CL_LINK_PROGRAM_FAILURE                     -17\n#define CL_DEVICE_PARTITION_FAILED                  -18\n#define CL_KERNEL_ARG_INFO_NOT_AVAILABLE            -19\n\n#define CL_INVALID_VALUE                            -30\n#define CL_INVALID_DEVICE_TYPE                      -31\n#define CL_INVALID_PLATFORM                         -32\n#define CL_INVALID_DEVICE                           -33\n#define CL_INVALID_CONTEXT                          -34\n#define CL_INVALID_QUEUE_PROPERTIES                 -35\n#define CL_INVALID_COMMAND_QUEUE                    -36\n#define CL_INVALID_HOST_PTR                         -37\n#define CL_INVALID_MEM_OBJECT                       -38\n#define CL_INVALID_IMAGE_FORMAT_DESCRIPTOR          -39\n#define CL_INVALID_IMAGE_SIZE                       -40\n#define CL_INVALID_SAMPLER                          -41\n#define CL_INVALID_BINARY                           -42\n#define CL_INVALID_BUILD_OPTIONS                    -43\n#define CL_INVALID_PROGRAM                          -44\n#define CL_INVALID_PROGRAM_EXECUTABLE               -45\n#define CL_INVALID_KERNEL_NAME                      -46\n#define CL_INVALID_KERNEL_DEFINITION                -47\n#define CL_INVALID_KERNEL                           -48\n#define CL_INVALID_ARG_INDEX                        -49\n#define CL_INVALID_ARG_VALUE                        -50\n#define CL_INVALID_ARG_SIZE                         -51\n#define CL_INVALID_KERNEL_ARGS                      -52\n#define CL_INVALID_WORK_DIMENSION                   -53\n#define CL_INVALID_WORK_GROUP_SIZE                  -54\n#define CL_INVALID_WORK_ITEM_SIZE                   -55\n#define CL_INVALID_GLOBAL_OFFSET                    -56\n#define CL_INVALID_EVENT_WAIT_LIST                  -57\n#define CL_INVALID_EVENT                            -58\n#define CL_INVALID_OPERATION                        -59\n#define CL_INVALID_GL_OBJECT                        -60\n#define CL_INVALID_BUFFER_SIZE                      -61\n#define CL_INVALID_MIP_LEVEL                        -62\n#define CL_INVALID_GLOBAL_WORK_SIZE                 -63\n#define CL_INVALID_PROPERTY                         -64\n#define CL_INVALID_IMAGE_DESCRIPTOR                 -65\n#define CL_INVALID_COMPILER_OPTIONS                 -66\n#define CL_INVALID_LINKER_OPTIONS                   -67\n#define CL_INVALID_DEVICE_PARTITION_COUNT           -68\n\n/*#define CL_VERSION_1_0                              1\n#define CL_VERSION_1_1                              1\n#define CL_VERSION_1_2                              1*/\n\n#define CL_FALSE                                    0\n#define CL_TRUE                                     1\n#define CL_BLOCKING                                 CL_TRUE\n#define CL_NON_BLOCKING                             CL_FALSE\n\n#define CL_PLATFORM_PROFILE                         0x0900\n#define CL_PLATFORM_VERSION                         0x0901\n#define CL_PLATFORM_NAME                            0x0902\n#define CL_PLATFORM_VENDOR                          0x0903\n#define CL_PLATFORM_EXTENSIONS                      0x0904\n\n#define CL_DEVICE_TYPE_DEFAULT                      (1 << 0)\n#define CL_DEVICE_TYPE_CPU                          (1 << 1)\n#define CL_DEVICE_TYPE_GPU                          (1 << 2)\n#define CL_DEVICE_TYPE_ACCELERATOR                  (1 << 3)\n#define CL_DEVICE_TYPE_CUSTOM                       (1 << 4)\n#define CL_DEVICE_TYPE_ALL                          0xFFFFFFFF\n#define CL_DEVICE_TYPE                              0x1000\n#define CL_DEVICE_VENDOR_ID                         0x1001\n#define CL_DEVICE_MAX_COMPUTE_UNITS                 0x1002\n#define CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS          0x1003\n#define CL_DEVICE_MAX_WORK_GROUP_SIZE               0x1004\n#define CL_DEVICE_MAX_WORK_ITEM_SIZES               0x1005\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR       0x1006\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT      0x1007\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT        0x1008\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG       0x1009\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT      0x100A\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE     0x100B\n#define CL_DEVICE_MAX_CLOCK_FREQUENCY               0x100C\n#define CL_DEVICE_ADDRESS_BITS                      0x100D\n#define CL_DEVICE_MAX_READ_IMAGE_ARGS               0x100E\n#define CL_DEVICE_MAX_WRITE_IMAGE_ARGS              0x100F\n#define CL_DEVICE_MAX_MEM_ALLOC_SIZE                0x1010\n#define CL_DEVICE_IMAGE2D_MAX_WIDTH                 0x1011\n#define CL_DEVICE_IMAGE2D_MAX_HEIGHT                0x1012\n#define CL_DEVICE_IMAGE3D_MAX_WIDTH                 0x1013\n#define CL_DEVICE_IMAGE3D_MAX_HEIGHT                0x1014\n#define CL_DEVICE_IMAGE3D_MAX_DEPTH                 0x1015\n#define CL_DEVICE_IMAGE_SUPPORT                     0x1016\n#define CL_DEVICE_MAX_PARAMETER_SIZE                0x1017\n#define CL_DEVICE_MAX_SAMPLERS                      0x1018\n#define CL_DEVICE_MEM_BASE_ADDR_ALIGN               0x1019\n#define CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE          0x101A\n#define CL_DEVICE_SINGLE_FP_CONFIG                  0x101B\n#define CL_DEVICE_GLOBAL_MEM_CACHE_TYPE             0x101C\n#define CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE         0x101D\n#define CL_DEVICE_GLOBAL_MEM_CACHE_SIZE             0x101E\n#define CL_DEVICE_GLOBAL_MEM_SIZE                   0x101F\n#define CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE          0x1020\n#define CL_DEVICE_MAX_CONSTANT_ARGS                 0x1021\n#define CL_DEVICE_LOCAL_MEM_TYPE                    0x1022\n#define CL_DEVICE_LOCAL_MEM_SIZE                    0x1023\n#define CL_DEVICE_ERROR_CORRECTION_SUPPORT          0x1024\n#define CL_DEVICE_PROFILING_TIMER_RESOLUTION        0x1025\n#define CL_DEVICE_ENDIAN_LITTLE                     0x1026\n#define CL_DEVICE_AVAILABLE                         0x1027\n#define CL_DEVICE_COMPILER_AVAILABLE                0x1028\n#define CL_DEVICE_EXECUTION_CAPABILITIES            0x1029\n#define CL_DEVICE_QUEUE_PROPERTIES                  0x102A\n#define CL_DEVICE_NAME                              0x102B\n#define CL_DEVICE_VENDOR                            0x102C\n#define CL_DRIVER_VERSION                           0x102D\n#define CL_DEVICE_PROFILE                           0x102E\n#define CL_DEVICE_VERSION                           0x102F\n#define CL_DEVICE_EXTENSIONS                        0x1030\n#define CL_DEVICE_PLATFORM                          0x1031\n#define CL_DEVICE_DOUBLE_FP_CONFIG                  0x1032\n#define CL_DEVICE_HALF_FP_CONFIG                    0x1033\n#define CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF       0x1034\n#define CL_DEVICE_HOST_UNIFIED_MEMORY               0x1035\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR          0x1036\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT         0x1037\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_INT           0x1038\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG          0x1039\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT         0x103A\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE        0x103B\n#define CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF          0x103C\n#define CL_DEVICE_OPENCL_C_VERSION                  0x103D\n#define CL_DEVICE_LINKER_AVAILABLE                  0x103E\n#define CL_DEVICE_BUILT_IN_KERNELS                  0x103F\n#define CL_DEVICE_IMAGE_MAX_BUFFER_SIZE             0x1040\n#define CL_DEVICE_IMAGE_MAX_ARRAY_SIZE              0x1041\n#define CL_DEVICE_PARENT_DEVICE                     0x1042\n#define CL_DEVICE_PARTITION_MAX_SUB_DEVICES         0x1043\n#define CL_DEVICE_PARTITION_PROPERTIES              0x1044\n#define CL_DEVICE_PARTITION_AFFINITY_DOMAIN         0x1045\n#define CL_DEVICE_PARTITION_TYPE                    0x1046\n#define CL_DEVICE_REFERENCE_COUNT                   0x1047\n#define CL_DEVICE_PREFERRED_INTEROP_USER_SYNC       0x1048\n#define CL_DEVICE_PRINTF_BUFFER_SIZE                0x1049\n#define CL_DEVICE_IMAGE_PITCH_ALIGNMENT             0x104A\n#define CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT      0x104B\n\n#define CL_FP_DENORM                                (1 << 0)\n#define CL_FP_INF_NAN                               (1 << 1)\n#define CL_FP_ROUND_TO_NEAREST                      (1 << 2)\n#define CL_FP_ROUND_TO_ZERO                         (1 << 3)\n#define CL_FP_ROUND_TO_INF                          (1 << 4)\n#define CL_FP_FMA                                   (1 << 5)\n#define CL_FP_SOFT_FLOAT                            (1 << 6)\n#define CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT         (1 << 7)\n\n#define CL_NONE                                     0x0\n#define CL_READ_ONLY_CACHE                          0x1\n#define CL_READ_WRITE_CACHE                         0x2\n#define CL_LOCAL                                    0x1\n#define CL_GLOBAL                                   0x2\n#define CL_EXEC_KERNEL                              (1 << 0)\n#define CL_EXEC_NATIVE_KERNEL                       (1 << 1)\n#define CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE      (1 << 0)\n#define CL_QUEUE_PROFILING_ENABLE                   (1 << 1)\n\n#define CL_CONTEXT_REFERENCE_COUNT                  0x1080\n#define CL_CONTEXT_DEVICES                          0x1081\n#define CL_CONTEXT_PROPERTIES                       0x1082\n#define CL_CONTEXT_NUM_DEVICES                      0x1083\n#define CL_CONTEXT_PLATFORM                         0x1084\n#define CL_CONTEXT_INTEROP_USER_SYNC                0x1085\n\n#define CL_DEVICE_PARTITION_EQUALLY                 0x1086\n#define CL_DEVICE_PARTITION_BY_COUNTS               0x1087\n#define CL_DEVICE_PARTITION_BY_COUNTS_LIST_END      0x0\n#define CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN      0x1088\n#define CL_DEVICE_AFFINITY_DOMAIN_NUMA                     (1 << 0)\n#define CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE                 (1 << 1)\n#define CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE                 (1 << 2)\n#define CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE                 (1 << 3)\n#define CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE                 (1 << 4)\n#define CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE       (1 << 5)\n#define CL_QUEUE_CONTEXT                            0x1090\n#define CL_QUEUE_DEVICE                             0x1091\n#define CL_QUEUE_REFERENCE_COUNT                    0x1092\n#define CL_QUEUE_PROPERTIES                         0x1093\n#define CL_MEM_READ_WRITE                           (1 << 0)\n#define CL_MEM_WRITE_ONLY                           (1 << 1)\n#define CL_MEM_READ_ONLY                            (1 << 2)\n#define CL_MEM_USE_HOST_PTR                         (1 << 3)\n#define CL_MEM_ALLOC_HOST_PTR                       (1 << 4)\n#define CL_MEM_COPY_HOST_PTR                        (1 << 5)\n// reserved                                         (1 << 6)\n#define CL_MEM_HOST_WRITE_ONLY                      (1 << 7)\n#define CL_MEM_HOST_READ_ONLY                       (1 << 8)\n#define CL_MEM_HOST_NO_ACCESS                       (1 << 9)\n#define CL_MIGRATE_MEM_OBJECT_HOST                  (1 << 0)\n#define CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED     (1 << 1)\n\n#define CL_R                                        0x10B0\n#define CL_A                                        0x10B1\n#define CL_RG                                       0x10B2\n#define CL_RA                                       0x10B3\n#define CL_RGB                                      0x10B4\n#define CL_RGBA                                     0x10B5\n#define CL_BGRA                                     0x10B6\n#define CL_ARGB                                     0x10B7\n#define CL_INTENSITY                                0x10B8\n#define CL_LUMINANCE                                0x10B9\n#define CL_Rx                                       0x10BA\n#define CL_RGx                                      0x10BB\n#define CL_RGBx                                     0x10BC\n#define CL_DEPTH                                    0x10BD\n#define CL_DEPTH_STENCIL                            0x10BE\n\n#define CL_SNORM_INT8                               0x10D0\n#define CL_SNORM_INT16                              0x10D1\n#define CL_UNORM_INT8                               0x10D2\n#define CL_UNORM_INT16                              0x10D3\n#define CL_UNORM_SHORT_565                          0x10D4\n#define CL_UNORM_SHORT_555                          0x10D5\n#define CL_UNORM_INT_101010                         0x10D6\n#define CL_SIGNED_INT8                              0x10D7\n#define CL_SIGNED_INT16                             0x10D8\n#define CL_SIGNED_INT32                             0x10D9\n#define CL_UNSIGNED_INT8                            0x10DA\n#define CL_UNSIGNED_INT16                           0x10DB\n#define CL_UNSIGNED_INT32                           0x10DC\n#define CL_HALF_FLOAT                               0x10DD\n#define CL_FLOAT                                    0x10DE\n#define CL_UNORM_INT24                              0x10DF\n\n#define CL_MEM_OBJECT_BUFFER                        0x10F0\n#define CL_MEM_OBJECT_IMAGE2D                       0x10F1\n#define CL_MEM_OBJECT_IMAGE3D                       0x10F2\n#define CL_MEM_OBJECT_IMAGE2D_ARRAY                 0x10F3\n#define CL_MEM_OBJECT_IMAGE1D                       0x10F4\n#define CL_MEM_OBJECT_IMAGE1D_ARRAY                 0x10F5\n#define CL_MEM_OBJECT_IMAGE1D_BUFFER                0x10F6\n\n#define CL_MEM_TYPE                                 0x1100\n#define CL_MEM_FLAGS                                0x1101\n#define CL_MEM_SIZE                                 0x1102\n#define CL_MEM_HOST_PTR                             0x1103\n#define CL_MEM_MAP_COUNT                            0x1104\n#define CL_MEM_REFERENCE_COUNT                      0x1105\n#define CL_MEM_CONTEXT                              0x1106\n#define CL_MEM_ASSOCIATED_MEMOBJECT                 0x1107\n#define CL_MEM_OFFSET                               0x1108\n\n#define CL_IMAGE_FORMAT                             0x1110\n#define CL_IMAGE_ELEMENT_SIZE                       0x1111\n#define CL_IMAGE_ROW_PITCH                          0x1112\n#define CL_IMAGE_SLICE_PITCH                        0x1113\n#define CL_IMAGE_WIDTH                              0x1114\n#define CL_IMAGE_HEIGHT                             0x1115\n#define CL_IMAGE_DEPTH                              0x1116\n#define CL_IMAGE_ARRAY_SIZE                         0x1117\n#define CL_IMAGE_BUFFER                             0x1118\n#define CL_IMAGE_NUM_MIP_LEVELS                     0x1119\n#define CL_IMAGE_NUM_SAMPLES                        0x111A\n\n#define CL_ADDRESS_NONE                             0x1130\n#define CL_ADDRESS_CLAMP_TO_EDGE                    0x1131\n#define CL_ADDRESS_CLAMP                            0x1132\n#define CL_ADDRESS_REPEAT                           0x1133\n#define CL_ADDRESS_MIRRORED_REPEAT                  0x1134\n\n#define CL_FILTER_NEAREST                           0x1140\n#define CL_FILTER_LINEAR                            0x1141\n\n#define CL_SAMPLER_REFERENCE_COUNT                  0x1150\n#define CL_SAMPLER_CONTEXT                          0x1151\n#define CL_SAMPLER_NORMALIZED_COORDS                0x1152\n#define CL_SAMPLER_ADDRESSING_MODE                  0x1153\n#define CL_SAMPLER_FILTER_MODE                      0x1154\n\n#define CL_MAP_READ                                 (1 << 0)\n#define CL_MAP_WRITE                                (1 << 1)\n#define CL_MAP_WRITE_INVALIDATE_REGION              (1 << 2)\n\n#define CL_PROGRAM_REFERENCE_COUNT                  0x1160\n#define CL_PROGRAM_CONTEXT                          0x1161\n#define CL_PROGRAM_NUM_DEVICES                      0x1162\n#define CL_PROGRAM_DEVICES                          0x1163\n#define CL_PROGRAM_SOURCE                           0x1164\n#define CL_PROGRAM_BINARY_SIZES                     0x1165\n#define CL_PROGRAM_BINARIES                         0x1166\n#define CL_PROGRAM_NUM_KERNELS                      0x1167\n#define CL_PROGRAM_KERNEL_NAMES                     0x1168\n#define CL_PROGRAM_BUILD_STATUS                     0x1181\n#define CL_PROGRAM_BUILD_OPTIONS                    0x1182\n#define CL_PROGRAM_BUILD_LOG                        0x1183\n#define CL_PROGRAM_BINARY_TYPE                      0x1184\n#define CL_PROGRAM_BINARY_TYPE_NONE                 0x0\n#define CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT      0x1\n#define CL_PROGRAM_BINARY_TYPE_LIBRARY              0x2\n#define CL_PROGRAM_BINARY_TYPE_EXECUTABLE           0x4\n\n#define CL_BUILD_SUCCESS                            0\n#define CL_BUILD_NONE                               -1\n#define CL_BUILD_ERROR                              -2\n#define CL_BUILD_IN_PROGRESS                        -3\n\n#define CL_KERNEL_FUNCTION_NAME                     0x1190\n#define CL_KERNEL_NUM_ARGS                          0x1191\n#define CL_KERNEL_REFERENCE_COUNT                   0x1192\n#define CL_KERNEL_CONTEXT                           0x1193\n#define CL_KERNEL_PROGRAM                           0x1194\n#define CL_KERNEL_ATTRIBUTES                        0x1195\n#define CL_KERNEL_ARG_ADDRESS_QUALIFIER             0x1196\n#define CL_KERNEL_ARG_ACCESS_QUALIFIER              0x1197\n#define CL_KERNEL_ARG_TYPE_NAME                     0x1198\n#define CL_KERNEL_ARG_TYPE_QUALIFIER                0x1199\n#define CL_KERNEL_ARG_NAME                          0x119A\n#define CL_KERNEL_ARG_ADDRESS_GLOBAL                0x119B\n#define CL_KERNEL_ARG_ADDRESS_LOCAL                 0x119C\n#define CL_KERNEL_ARG_ADDRESS_CONSTANT              0x119D\n#define CL_KERNEL_ARG_ADDRESS_PRIVATE               0x119E\n#define CL_KERNEL_ARG_ACCESS_READ_ONLY              0x11A0\n#define CL_KERNEL_ARG_ACCESS_WRITE_ONLY             0x11A1\n#define CL_KERNEL_ARG_ACCESS_READ_WRITE             0x11A2\n#define CL_KERNEL_ARG_ACCESS_NONE                   0x11A3\n#define CL_KERNEL_ARG_TYPE_NONE                     0\n#define CL_KERNEL_ARG_TYPE_CONST                    (1 << 0)\n#define CL_KERNEL_ARG_TYPE_RESTRICT                 (1 << 1)\n#define CL_KERNEL_ARG_TYPE_VOLATILE                 (1 << 2)\n#define CL_KERNEL_WORK_GROUP_SIZE                   0x11B0\n#define CL_KERNEL_COMPILE_WORK_GROUP_SIZE           0x11B1\n#define CL_KERNEL_LOCAL_MEM_SIZE                    0x11B2\n#define CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE 0x11B3\n#define CL_KERNEL_PRIVATE_MEM_SIZE                  0x11B4\n#define CL_KERNEL_GLOBAL_WORK_SIZE                  0x11B5\n\n#define CL_EVENT_COMMAND_QUEUE                      0x11D0\n#define CL_EVENT_COMMAND_TYPE                       0x11D1\n#define CL_EVENT_REFERENCE_COUNT                    0x11D2\n#define CL_EVENT_COMMAND_EXECUTION_STATUS           0x11D3\n#define CL_EVENT_CONTEXT                            0x11D4\n\n#define CL_COMMAND_NDRANGE_KERNEL                   0x11F0\n#define CL_COMMAND_TASK                             0x11F1\n#define CL_COMMAND_NATIVE_KERNEL                    0x11F2\n#define CL_COMMAND_READ_BUFFER                      0x11F3\n#define CL_COMMAND_WRITE_BUFFER                     0x11F4\n#define CL_COMMAND_COPY_BUFFER                      0x11F5\n#define CL_COMMAND_READ_IMAGE                       0x11F6\n#define CL_COMMAND_WRITE_IMAGE                      0x11F7\n#define CL_COMMAND_COPY_IMAGE                       0x11F8\n#define CL_COMMAND_COPY_IMAGE_TO_BUFFER             0x11F9\n#define CL_COMMAND_COPY_BUFFER_TO_IMAGE             0x11FA\n#define CL_COMMAND_MAP_BUFFER                       0x11FB\n#define CL_COMMAND_MAP_IMAGE                        0x11FC\n#define CL_COMMAND_UNMAP_MEM_OBJECT                 0x11FD\n#define CL_COMMAND_MARKER                           0x11FE\n#define CL_COMMAND_ACQUIRE_GL_OBJECTS               0x11FF\n#define CL_COMMAND_RELEASE_GL_OBJECTS               0x1200\n#define CL_COMMAND_READ_BUFFER_RECT                 0x1201\n#define CL_COMMAND_WRITE_BUFFER_RECT                0x1202\n#define CL_COMMAND_COPY_BUFFER_RECT                 0x1203\n#define CL_COMMAND_USER                             0x1204\n#define CL_COMMAND_BARRIER                          0x1205\n#define CL_COMMAND_MIGRATE_MEM_OBJECTS              0x1206\n#define CL_COMMAND_FILL_BUFFER                      0x1207\n#define CL_COMMAND_FILL_IMAGE                       0x1208\n\n#define CL_COMPLETE                                 0x0\n#define CL_RUNNING                                  0x1\n#define CL_SUBMITTED                                0x2\n#define CL_QUEUED                                   0x3\n#define CL_BUFFER_CREATE_TYPE_REGION                0x1220\n\n#define CL_PROFILING_COMMAND_QUEUED                 0x1280\n#define CL_PROFILING_COMMAND_SUBMIT                 0x1281\n#define CL_PROFILING_COMMAND_START                  0x1282\n#define CL_PROFILING_COMMAND_END                    0x1283\n\n#define CL_CALLBACK CV_STDCALL\n\n\n#ifdef HAVE_OPENCL\nstatic const char* oclFuncToCheck = \"clEnqueueReadBufferRect\";\nstatic volatile bool g_haveOpenCL = false;\n#endif\n\n#if defined(__APPLE__) && defined(HAVE_OPENCL)\n#include <dlfcn.h>\n\nstatic void* initOpenCLAndLoad(const char* funcname)\n{\n    static bool initialized = false;\n    static void* handle = 0;\n    if (!handle)\n    {\n        if(!initialized)\n        {\n            const char* oclpath = getenv(\"OPENCV_OPENCL_RUNTIME\");\n            oclpath = oclpath && strlen(oclpath) > 0 ? oclpath :\n                \"/System/Library/Frameworks/OpenCL.framework/Versions/Current/OpenCL\";\n            handle = dlopen(oclpath, RTLD_LAZY);\n            initialized = true;\n            g_haveOpenCL = handle != 0 && dlsym(handle, oclFuncToCheck) != 0;\n            if( g_haveOpenCL )\n                fprintf(stderr, \"Successfully loaded OpenCL v1.1+ runtime from %s\\n\", oclpath);\n            else\n                fprintf(stderr, \"Failed to load OpenCL runtime\\n\");\n        }\n        if(!handle)\n            return 0;\n    }\n\n    return funcname && handle ? dlsym(handle, funcname) : 0;\n}\n\n#elif defined _WIN32 && defined(HAVE_OPENCL)\n\n#ifndef _WIN32_WINNT           // This is needed for the declaration of TryEnterCriticalSection in winbase.h with Visual Studio 2005 (and older?)\n  #define _WIN32_WINNT 0x0400  // http://msdn.microsoft.com/en-us/library/ms686857(VS.85).aspx\n#endif\n#include <windows.h>\n#if (_WIN32_WINNT >= 0x0602)\n  #include <synchapi.h>\n#endif\n#undef small\n#undef min\n#undef max\n#undef abs\n\nstatic void* initOpenCLAndLoad(const char* funcname)\n{\n    static bool initialized = false;\n    static HMODULE handle = 0;\n    if (!handle)\n    {\n#ifndef WINRT\n        if(!initialized)\n        {\n            handle = LoadLibraryA(\"OpenCL.dll\");\n            initialized = true;\n            g_haveOpenCL = handle != 0 && GetProcAddress(handle, oclFuncToCheck) != 0;\n        }\n#endif\n        if(!handle)\n            return 0;\n    }\n\n    return funcname ? (void*)GetProcAddress(handle, funcname) : 0;\n}\n\n#elif defined(__linux) && defined(HAVE_OPENCL)\n\n#include <dlfcn.h>\n#include <stdio.h>\n\nstatic void* initOpenCLAndLoad(const char* funcname)\n{\n    static bool initialized = false;\n    static void* handle = 0;\n    if (!handle)\n    {\n        if(!initialized)\n        {\n            handle = dlopen(\"libOpenCL.so\", RTLD_LAZY);\n            if(!handle)\n                handle = dlopen(\"libCL.so\", RTLD_LAZY);\n            initialized = true;\n            g_haveOpenCL = handle != 0 && dlsym(handle, oclFuncToCheck) != 0;\n        }\n        if(!handle)\n            return 0;\n    }\n\n    return funcname ? (void*)dlsym(handle, funcname) : 0;\n}\n\n#else\n\nstatic void* initOpenCLAndLoad(const char*)\n{\n    return 0;\n}\n\n#endif\n\n\n#define OCL_FUNC(rettype, funcname, argsdecl, args) \\\n    typedef rettype (CV_STDCALL * funcname##_t) argsdecl; \\\n    static rettype funcname argsdecl \\\n    { \\\n        static funcname##_t funcname##_p = 0; \\\n        if( !funcname##_p ) \\\n        { \\\n            funcname##_p = (funcname##_t)initOpenCLAndLoad(#funcname); \\\n            if( !funcname##_p ) \\\n                return OPENCV_CL_NOT_IMPLEMENTED; \\\n        } \\\n        return funcname##_p args; \\\n    }\n\n\n#define OCL_FUNC_P(rettype, funcname, argsdecl, args) \\\n    typedef rettype (CV_STDCALL * funcname##_t) argsdecl; \\\n    static rettype funcname argsdecl \\\n    { \\\n        static funcname##_t funcname##_p = 0; \\\n        if( !funcname##_p ) \\\n        { \\\n            funcname##_p = (funcname##_t)initOpenCLAndLoad(#funcname); \\\n            if( !funcname##_p ) \\\n            { \\\n                if( errcode_ret ) \\\n                    *errcode_ret = OPENCV_CL_NOT_IMPLEMENTED; \\\n                return 0; \\\n            } \\\n        } \\\n        return funcname##_p args; \\\n    }\n\nOCL_FUNC(cl_int, clGetPlatformIDs,\n    (cl_uint num_entries, cl_platform_id* platforms, cl_uint* num_platforms),\n    (num_entries, platforms, num_platforms))\n\nOCL_FUNC(cl_int, clGetPlatformInfo,\n    (cl_platform_id platform, cl_platform_info param_name,\n    size_t param_value_size, void * param_value,\n    size_t * param_value_size_ret),\n    (platform, param_name, param_value_size, param_value, param_value_size_ret))\n\nOCL_FUNC(cl_int, clGetDeviceInfo,\n         (cl_device_id device,\n          cl_device_info param_name,\n          size_t param_value_size,\n          void * param_value,\n          size_t * param_value_size_ret),\n         (device, param_name, param_value_size, param_value, param_value_size_ret))\n\n\nOCL_FUNC(cl_int, clGetDeviceIDs,\n    (cl_platform_id platform,\n    cl_device_type device_type,\n    cl_uint num_entries,\n    cl_device_id * devices,\n    cl_uint * num_devices),\n    (platform, device_type, num_entries, devices, num_devices))\n\nOCL_FUNC_P(cl_context, clCreateContext,\n    (const cl_context_properties * properties,\n    cl_uint num_devices,\n    const cl_device_id * devices,\n    void (CL_CALLBACK * pfn_notify)(const char *, const void *, size_t, void *),\n    void * user_data,\n    cl_int * errcode_ret),\n    (properties, num_devices, devices, pfn_notify, user_data, errcode_ret))\n\nOCL_FUNC(cl_int, clReleaseContext, (cl_context context), (context))\n\n\nOCL_FUNC(cl_int, clRetainContext, (cl_context context), (context))\n/*\nOCL_FUNC_P(cl_context, clCreateContextFromType,\n    (const cl_context_properties * properties,\n    cl_device_type device_type,\n    void (CL_CALLBACK * pfn_notify)(const char *, const void *, size_t, void *),\n    void * user_data,\n    cl_int * errcode_ret),\n    (properties, device_type, pfn_notify, user_data, errcode_ret))\n\nOCL_FUNC(cl_int, clGetContextInfo,\n    (cl_context context,\n    cl_context_info param_name,\n    size_t param_value_size,\n    void * param_value,\n    size_t * param_value_size_ret),\n    (context, param_name, param_value_size,\n    param_value, param_value_size_ret))\n*/\nOCL_FUNC_P(cl_command_queue, clCreateCommandQueue,\n    (cl_context context,\n    cl_device_id device,\n    cl_command_queue_properties properties,\n    cl_int * errcode_ret),\n    (context, device, properties, errcode_ret))\n\nOCL_FUNC(cl_int, clReleaseCommandQueue, (cl_command_queue command_queue), (command_queue))\n\nOCL_FUNC_P(cl_mem, clCreateBuffer,\n    (cl_context context,\n    cl_mem_flags flags,\n    size_t size,\n    void * host_ptr,\n    cl_int * errcode_ret),\n    (context, flags, size, host_ptr, errcode_ret))\n\n/*\nOCL_FUNC(cl_int, clRetainCommandQueue, (cl_command_queue command_queue), (command_queue))\n*/\nOCL_FUNC(cl_int, clGetCommandQueueInfo,\n   (cl_command_queue command_queue,\n   cl_command_queue_info param_name,\n   size_t param_value_size,\n   void * param_value,\n   size_t * param_value_size_ret),\n   (command_queue, param_name, param_value_size, param_value, param_value_size_ret))\n/*\nOCL_FUNC_P(cl_mem, clCreateSubBuffer,\n    (cl_mem buffer,\n    cl_mem_flags flags,\n    cl_buffer_create_type buffer_create_type,\n    const void * buffer_create_info,\n    cl_int * errcode_ret),\n    (buffer, flags, buffer_create_type, buffer_create_info, errcode_ret))\n*/\n\nOCL_FUNC_P(cl_mem, clCreateImage,\n    (cl_context context,\n    cl_mem_flags flags,\n    const cl_image_format * image_format,\n    const cl_image_desc * image_desc,\n    void * host_ptr,\n    cl_int * errcode_ret),\n    (context, flags, image_format, image_desc, host_ptr, errcode_ret))\n\nOCL_FUNC_P(cl_mem, clCreateImage2D,\n    (cl_context context,\n    cl_mem_flags flags,\n    const cl_image_format * image_format,\n    size_t image_width,\n    size_t image_height,\n    size_t image_row_pitch,\n    void * host_ptr,\n    cl_int *errcode_ret),\n    (context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr, errcode_ret))\n\nOCL_FUNC(cl_int, clGetSupportedImageFormats,\n (cl_context context,\n cl_mem_flags flags,\n cl_mem_object_type image_type,\n cl_uint num_entries,\n cl_image_format * image_formats,\n cl_uint * num_image_formats),\n (context, flags, image_type, num_entries, image_formats, num_image_formats))\n\n\nOCL_FUNC(cl_int, clGetMemObjectInfo,\n (cl_mem memobj,\n cl_mem_info param_name,\n size_t param_value_size,\n void * param_value,\n size_t * param_value_size_ret),\n (memobj, param_name, param_value_size, param_value, param_value_size_ret))\n\nOCL_FUNC(cl_int, clGetImageInfo,\n (cl_mem image,\n cl_image_info param_name,\n size_t param_value_size,\n void * param_value,\n size_t * param_value_size_ret),\n (image, param_name, param_value_size, param_value, param_value_size_ret))\n\n/*\nOCL_FUNC(cl_int, clCreateKernelsInProgram,\n (cl_program program,\n cl_uint num_kernels,\n cl_kernel * kernels,\n cl_uint * num_kernels_ret),\n (program, num_kernels, kernels, num_kernels_ret))\n\nOCL_FUNC(cl_int, clRetainKernel, (cl_kernel kernel), (kernel))\n\nOCL_FUNC(cl_int, clGetKernelArgInfo,\n (cl_kernel kernel,\n cl_uint arg_indx,\n cl_kernel_arg_info param_name,\n size_t param_value_size,\n void * param_value,\n size_t * param_value_size_ret),\n (kernel, arg_indx, param_name, param_value_size, param_value, param_value_size_ret))\n\nOCL_FUNC(cl_int, clEnqueueReadImage,\n (cl_command_queue command_queue,\n cl_mem image,\n cl_bool blocking_read,\n const size_t * origin[3],\n const size_t * region[3],\n size_t row_pitch,\n size_t slice_pitch,\n void * ptr,\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, image, blocking_read, origin, region,\n row_pitch, slice_pitch,\n ptr,\n num_events_in_wait_list,\n event_wait_list,\n event))\n\nOCL_FUNC(cl_int, clEnqueueWriteImage,\n (cl_command_queue command_queue,\n cl_mem image,\n cl_bool blocking_write,\n const size_t * origin[3],\n const size_t * region[3],\n size_t input_row_pitch,\n size_t input_slice_pitch,\n const void * ptr,\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, image, blocking_write, origin, region, input_row_pitch,\n input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueFillImage,\n (cl_command_queue command_queue,\n cl_mem image,\n const void * fill_color,\n const size_t * origin[3],\n const size_t * region[3],\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, image, fill_color, origin, region,\n num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueCopyImage,\n (cl_command_queue command_queue,\n cl_mem src_image,\n cl_mem dst_image,\n const size_t * src_origin[3],\n const size_t * dst_origin[3],\n const size_t * region[3],\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, src_image, dst_image, src_origin, dst_origin,\n region, num_events_in_wait_list, event_wait_list, event))\n*/\n\nOCL_FUNC(cl_int, clEnqueueCopyImageToBuffer,\n (cl_command_queue command_queue,\n cl_mem src_image,\n cl_mem dst_buffer,\n const size_t * src_origin,\n const size_t * region,\n size_t dst_offset,\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, src_image, dst_buffer, src_origin, region, dst_offset,\n num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueCopyBufferToImage,\n (cl_command_queue command_queue,\n cl_mem src_buffer,\n cl_mem dst_image,\n size_t src_offset,\n const size_t dst_origin[3],\n const size_t region[3],\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event),\n (command_queue, src_buffer, dst_image, src_offset, dst_origin,\n region, num_events_in_wait_list, event_wait_list, event))\n\n OCL_FUNC(cl_int, clFlush,\n (cl_command_queue command_queue),\n (command_queue))\n\n/*\nOCL_FUNC_P(void*, clEnqueueMapImage,\n (cl_command_queue command_queue,\n cl_mem image,\n cl_bool blocking_map,\n cl_map_flags map_flags,\n const size_t * origin[3],\n const size_t * region[3],\n size_t * image_row_pitch,\n size_t * image_slice_pitch,\n cl_uint num_events_in_wait_list,\n const cl_event * event_wait_list,\n cl_event * event,\n cl_int * errcode_ret),\n (command_queue, image, blocking_map, map_flags, origin, region,\n image_row_pitch, image_slice_pitch, num_events_in_wait_list,\n event_wait_list, event, errcode_ret))\n*/\n\n/*\nOCL_FUNC(cl_int, clRetainProgram, (cl_program program), (program))\n\nOCL_FUNC(cl_int, clGetKernelInfo,\n (cl_kernel kernel,\n cl_kernel_info param_name,\n size_t param_value_size,\n void * param_value,\n size_t * param_value_size_ret),\n (kernel, param_name, param_value_size, param_value, param_value_size_ret))\n\n*/\n\nOCL_FUNC(cl_int, clRetainMemObject, (cl_mem memobj), (memobj))\n\nOCL_FUNC(cl_int, clReleaseMemObject, (cl_mem memobj), (memobj))\n\n/*\nOCL_FUNC_P(cl_program, clCreateProgramWithSource,\n    (cl_context context,\n    cl_uint count,\n    const char ** strings,\n    const size_t * lengths,\n    cl_int * errcode_ret),\n    (context, count, strings, lengths, errcode_ret))\n\nOCL_FUNC_P(cl_program, clCreateProgramWithBinary,\n    (cl_context context,\n    cl_uint num_devices,\n    const cl_device_id * device_list,\n    const size_t * lengths,\n    const unsigned char ** binaries,\n    cl_int * binary_status,\n    cl_int * errcode_ret),\n    (context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret))\n\nOCL_FUNC(cl_int, clReleaseProgram, (cl_program program), (program))\n\nOCL_FUNC(cl_int, clBuildProgram,\n    (cl_program program,\n    cl_uint num_devices,\n    const cl_device_id * device_list,\n    const char * options,\n    void (CL_CALLBACK * pfn_notify)(cl_program, void *),\n    void * user_data),\n    (program, num_devices, device_list, options, pfn_notify, user_data))\n\nOCL_FUNC(cl_int, clGetProgramInfo,\n    (cl_program program,\n    cl_program_info param_name,\n    size_t param_value_size,\n    void * param_value,\n    size_t * param_value_size_ret),\n    (program, param_name, param_value_size, param_value, param_value_size_ret))\n\nOCL_FUNC(cl_int, clGetProgramBuildInfo,\n    (cl_program program,\n    cl_device_id device,\n    cl_program_build_info param_name,\n    size_t param_value_size,\n    void * param_value,\n    size_t * param_value_size_ret),\n    (program, device, param_name, param_value_size, param_value, param_value_size_ret))\n*/\nOCL_FUNC_P(cl_kernel, clCreateKernel,\n    (cl_program program,\n    const char * kernel_name,\n    cl_int * errcode_ret),\n    (program, kernel_name, errcode_ret))\n\nOCL_FUNC(cl_int, clReleaseKernel, (cl_kernel kernel), (kernel))\n\nOCL_FUNC(cl_int, clSetKernelArg,\n    (cl_kernel kernel,\n    cl_uint arg_index,\n    size_t arg_size,\n    const void * arg_value),\n    (kernel, arg_index, arg_size, arg_value))\n\nOCL_FUNC(cl_int, clGetKernelWorkGroupInfo,\n    (cl_kernel kernel,\n    cl_device_id device,\n    cl_kernel_work_group_info param_name,\n    size_t param_value_size,\n    void * param_value,\n    size_t * param_value_size_ret),\n    (kernel, device, param_name, param_value_size, param_value, param_value_size_ret))\n\nOCL_FUNC(cl_int, clFinish, (cl_command_queue command_queue), (command_queue))\n\nOCL_FUNC(cl_int, clEnqueueReadBuffer,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    cl_bool blocking_read,\n    size_t offset,\n    size_t size,\n    void * ptr,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, buffer, blocking_read, offset, size, ptr,\n    num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueReadBufferRect,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    cl_bool blocking_read,\n    const size_t * buffer_offset,\n    const size_t * host_offset,\n    const size_t * region,\n    size_t buffer_row_pitch,\n    size_t buffer_slice_pitch,\n    size_t host_row_pitch,\n    size_t host_slice_pitch,\n    void * ptr,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, buffer, blocking_read, buffer_offset, host_offset, region, buffer_row_pitch,\n    buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list,\n    event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueWriteBuffer,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    cl_bool blocking_write,\n    size_t offset,\n    size_t size,\n    const void * ptr,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, buffer, blocking_write, offset, size, ptr,\n    num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueWriteBufferRect,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    cl_bool blocking_write,\n    const size_t * buffer_offset,\n    const size_t * host_offset,\n    const size_t * region,\n    size_t buffer_row_pitch,\n    size_t buffer_slice_pitch,\n    size_t host_row_pitch,\n    size_t host_slice_pitch,\n    const void * ptr,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, buffer, blocking_write, buffer_offset, host_offset,\n    region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch,\n    host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event))\n\n/*OCL_FUNC(cl_int, clEnqueueFillBuffer,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    const void * pattern,\n    size_t pattern_size,\n    size_t offset,\n    size_t size,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, buffer, pattern, pattern_size, offset, size,\n    num_events_in_wait_list, event_wait_list, event))*/\n\nOCL_FUNC(cl_int, clEnqueueCopyBuffer,\n    (cl_command_queue command_queue,\n    cl_mem src_buffer,\n    cl_mem dst_buffer,\n    size_t src_offset,\n    size_t dst_offset,\n    size_t size,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, src_buffer, dst_buffer, src_offset, dst_offset,\n    size, num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueCopyBufferRect,\n    (cl_command_queue command_queue,\n    cl_mem src_buffer,\n    cl_mem dst_buffer,\n    const size_t * src_origin,\n    const size_t * dst_origin,\n    const size_t * region,\n    size_t src_row_pitch,\n    size_t src_slice_pitch,\n    size_t dst_row_pitch,\n    size_t dst_slice_pitch,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, src_buffer, dst_buffer, src_origin, dst_origin,\n    region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch,\n    num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC_P(void*, clEnqueueMapBuffer,\n    (cl_command_queue command_queue,\n    cl_mem buffer,\n    cl_bool blocking_map,\n    cl_map_flags map_flags,\n    size_t offset,\n    size_t size,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event,\n    cl_int * errcode_ret),\n    (command_queue, buffer, blocking_map, map_flags, offset, size,\n    num_events_in_wait_list, event_wait_list, event, errcode_ret))\n\nOCL_FUNC(cl_int, clEnqueueUnmapMemObject,\n    (cl_command_queue command_queue,\n    cl_mem memobj,\n    void * mapped_ptr,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueNDRangeKernel,\n    (cl_command_queue command_queue,\n    cl_kernel kernel,\n    cl_uint work_dim,\n    const size_t * global_work_offset,\n    const size_t * global_work_size,\n    const size_t * local_work_size,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, kernel, work_dim, global_work_offset, global_work_size,\n    local_work_size, num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clEnqueueTask,\n    (cl_command_queue command_queue,\n    cl_kernel kernel,\n    cl_uint num_events_in_wait_list,\n    const cl_event * event_wait_list,\n    cl_event * event),\n    (command_queue, kernel, num_events_in_wait_list, event_wait_list, event))\n\nOCL_FUNC(cl_int, clSetEventCallback,\n    (cl_event event,\n    cl_int command_exec_callback_type ,\n    void (CL_CALLBACK  *pfn_event_notify) (cl_event event, cl_int event_command_exec_status, void *user_data),\n    void *user_data),\n    (event, command_exec_callback_type, pfn_event_notify, user_data))\n\nOCL_FUNC(cl_int, clReleaseEvent, (cl_event event), (event))\n\nOCL_FUNC(cl_int, clWaitForEvents,\n    (cl_uint num_events, const cl_event *event_list),\n    (num_events, event_list))\n\n\nOCL_FUNC(cl_int, clGetEventProfilingInfo, (\n    cl_event event,\n    cl_profiling_info param_name,\n    size_t param_value_size,\n    void *param_value,\n    size_t *param_value_size_ret),\n    (event, param_name, param_value_size, param_value, param_value_size_ret))\n\n}\n\n#endif\n\n#ifndef CL_VERSION_1_2\n#define CL_VERSION_1_2\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/src/opencl/runtime/opencl_core.cpp": "/*M///////////////////////////////////////////////////////////////////////////////////////\n//\n//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n//\n//  By downloading, copying, installing or using the software you agree to this license.\n//  If you do not agree to this license, do not download, install,\n//  copy or use the software.\n//\n//\n//                           License Agreement\n//                For Open Source Computer Vision Library\n//\n// Copyright (C) 2010-2013, Advanced Micro Devices, Inc., all rights reserved.\n// Third party copyrights are property of their respective owners.\n//\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n//\n//   * Redistribution's of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//\n//   * Redistribution's in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n//   * The name of the copyright holders may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n//\n// This software is provided by the copyright holders and contributors \"as is\" and\n// any express or implied warranties, including, but not limited to, the implied\n// warranties of merchantability and fitness for a particular purpose are disclaimed.\n// In no event shall the OpenCV Foundation or contributors be liable for any direct,\n// indirect, incidental, special, exemplary, or consequential damages\n// (including, but not limited to, procurement of substitute goods or services;\n// loss of use, data, or profits; or business interruption) however caused\n// and on any theory of liability, whether in contract, strict liability,\n// or tort (including negligence or otherwise) arising in any way out of\n// the use of this software, even if advised of the possibility of such damage.\n//\n//M*/\n\n#include \"../../precomp.hpp\"\n\n#if defined(HAVE_OPENCL)\n\n#include \"opencv2/core.hpp\" // CV_Error\n\n#if defined(HAVE_OPENCL_STATIC)\n#if defined __APPLE__\n#define CL_SILENCE_DEPRECATION\n#include <OpenCL/cl.h>\n#else\n#include <CL/cl.h>\n#endif\nCV_SUPPRESS_DEPRECATED_START\n#include \"autogenerated/opencl_core_static_impl.hpp\"\nCV_SUPPRESS_DEPRECATED_END\n#include \"opencv2/core/opencl/runtime/opencl_core.hpp\"\n#else\n\n#include \"opencv2/core/opencl/runtime/opencl_core.hpp\"\n\n#define OPENCL_FUNC_TO_CHECK_1_1 \"clEnqueueReadBufferRect\"\n#define ERROR_MSG_CANT_LOAD \"Failed to load OpenCL runtime\\n\"\n#define ERROR_MSG_INVALID_VERSION \"Failed to load OpenCL runtime (expected version 1.1+)\\n\"\n\nstatic const char* getRuntimePath(const char* defaultPath)\n{\n    const char* envPath = getenv(\"OPENCV_OPENCL_RUNTIME\");\n    if (envPath)\n    {\n        static const char disabled_str[] = \"disabled\";\n        if ((strlen(envPath) == sizeof(disabled_str) - 1) &&\n                (memcmp(envPath, disabled_str, sizeof(disabled_str) - 1) == 0))\n            return NULL;\n        return envPath;\n    }\n    return defaultPath;\n}\n\n#if defined(__APPLE__)\n#include <dlfcn.h>\n\nstatic void* AppleCLGetProcAddress(const char* name)\n{\n    static bool initialized = false;\n    static void* handle = NULL;\n    if (!handle && !initialized)\n    {\n        cv::AutoLock lock(cv::getInitializationMutex());\n        if (!initialized)\n        {\n            const char* defaultPath = \"/System/Library/Frameworks/OpenCL.framework/Versions/Current/OpenCL\";\n            const char* path = getRuntimePath(defaultPath);\n            if (path)\n                handle = dlopen(path, RTLD_LAZY | RTLD_GLOBAL);\n            if (handle == NULL)\n            {\n                if (path != NULL && path != defaultPath)\n                    fprintf(stderr, ERROR_MSG_CANT_LOAD);\n            }\n            else if (dlsym(handle, OPENCL_FUNC_TO_CHECK_1_1) == NULL)\n            {\n                fprintf(stderr, ERROR_MSG_INVALID_VERSION);\n                handle = NULL;\n            }\n            initialized = true;\n        }\n    }\n    if (!handle)\n        return NULL;\n    return dlsym(handle, name);\n}\n#define CV_CL_GET_PROC_ADDRESS(name) AppleCLGetProcAddress(name)\n#endif // __APPLE__\n\n#if defined(_WIN32)\n#include <windows.h>\n\nstatic void* WinGetProcAddress(const char* name)\n{\n    static bool initialized = false;\n    static HMODULE handle = NULL;\n    if (!handle && !initialized)\n    {\n        cv::AutoLock lock(cv::getInitializationMutex());\n        if (!initialized)\n        {\n            handle = GetModuleHandleA(\"OpenCL.dll\");\n            if (!handle)\n            {\n                const char* defaultPath = \"OpenCL.dll\";\n                const char* path = getRuntimePath(defaultPath);\n                if (path)\n                    handle = LoadLibraryA(path);\n                if (!handle)\n                {\n                    if (path != NULL && path != defaultPath)\n                        fprintf(stderr, ERROR_MSG_CANT_LOAD);\n                }\n                else if (GetProcAddress(handle, OPENCL_FUNC_TO_CHECK_1_1) == NULL)\n                {\n                    fprintf(stderr, ERROR_MSG_INVALID_VERSION);\n                    FreeLibrary(handle);\n                    handle = NULL;\n                }\n            }\n            initialized = true;\n        }\n    }\n    if (!handle)\n        return NULL;\n    return (void*)GetProcAddress(handle, name);\n}\n#define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)\n#endif // _WIN32\n\n#if defined(__linux__) || defined(__FreeBSD__)\n#include <dlfcn.h>\n#include <stdio.h>\n\nstatic void *GetHandle(const char *file)\n{\n    void *handle;\n\n    handle = dlopen(file, RTLD_LAZY | RTLD_GLOBAL);\n    if (!handle)\n        return NULL;\n\n    if (dlsym(handle, OPENCL_FUNC_TO_CHECK_1_1) == NULL)\n    {\n        fprintf(stderr, ERROR_MSG_INVALID_VERSION);\n        dlclose(handle);\n        return NULL;\n    }\n\n    return handle;\n}\n\nstatic void* GetProcAddress(const char* name)\n{\n    static bool initialized = false;\n    static void* handle = NULL;\n    if (!handle && !initialized)\n    {\n        cv::AutoLock lock(cv::getInitializationMutex());\n        if (!initialized)\n        {\n            const char* defaultPath = \"libOpenCL.so\";\n            const char* path = getRuntimePath(defaultPath);\n            if (path)\n            {\n                handle = GetHandle(path);\n                if (!handle)\n                {\n                    if (path == defaultPath)\n                        handle = GetHandle(\"libOpenCL.so.1\");\n                    else\n                        fprintf(stderr, ERROR_MSG_CANT_LOAD);\n                }\n            }\n            initialized = true;\n        }\n    }\n    if (!handle)\n        return NULL;\n    return dlsym(handle, name);\n}\n#define CV_CL_GET_PROC_ADDRESS(name) GetProcAddress(name)\n#endif\n\n#ifndef CV_CL_GET_PROC_ADDRESS\n#ifdef __GNUC__\n#warning(\"OPENCV: OpenCL dynamic library loader: check configuration\")\n#else\n#pragma message(\"WARNING: OPENCV: OpenCL dynamic library loader: check configuration\")\n#endif\n#define CV_CL_GET_PROC_ADDRESS(name) NULL\n#endif\n\nstatic void* opencl_check_fn(int ID);\n\n#include \"runtime_common.hpp\"\n\n#include \"autogenerated/opencl_core_impl.hpp\"\n\n//\n// BEGIN OF CUSTOM FUNCTIONS\n//\n\n#define CUSTOM_FUNCTION_ID 1000\n\n#endif // HAVE_OPENCL_STATIC\n\n\n#if defined HAVE_OPENCL_SVM && !defined(HAVE_OPENCL_STATIC)\n\n#include \"opencv2/core/opencl/runtime/opencl_svm_20.hpp\"\n#define SVM_FUNCTION_ID_START CUSTOM_FUNCTION_ID\n#define SVM_FUNCTION_ID_END CUSTOM_FUNCTION_ID + 100\n\nenum OPENCL_FN_SVM_ID\n{\n    OPENCL_FN_clSVMAlloc = SVM_FUNCTION_ID_START,\n    OPENCL_FN_clSVMFree,\n    OPENCL_FN_clSetKernelArgSVMPointer,\n    OPENCL_FN_clSetKernelExecInfo,\n    OPENCL_FN_clEnqueueSVMFree,\n    OPENCL_FN_clEnqueueSVMMemcpy,\n    OPENCL_FN_clEnqueueSVMMemFill,\n    OPENCL_FN_clEnqueueSVMMap,\n    OPENCL_FN_clEnqueueSVMUnmap,\n};\n\nopencl_fn4(OPENCL_FN_clSVMAlloc, void*, (cl_context p1, cl_svm_mem_flags p2, size_t p3, unsigned int p4))\nvoid* (CL_API_CALL *clSVMAlloc)(cl_context context, cl_svm_mem_flags flags, size_t size, unsigned int alignment) =\n        OPENCL_FN_clSVMAlloc_switch_fn;\nstatic const struct DynamicFnEntry _clSVMAlloc_definition = { \"clSVMAlloc\", (void**)&clSVMAlloc};\nopencl_fn2(OPENCL_FN_clSVMFree, void, (cl_context p1, void* p2))\nvoid (CL_API_CALL *clSVMFree)(cl_context context, void* svm_pointer) =\n        OPENCL_FN_clSVMFree_switch_fn;\nstatic const struct DynamicFnEntry _clSVMFree_definition = { \"clSVMFree\", (void**)&clSVMFree};\nopencl_fn3(OPENCL_FN_clSetKernelArgSVMPointer, cl_int, (cl_kernel p1, cl_uint p2, const void* p3))\ncl_int (CL_API_CALL *clSetKernelArgSVMPointer)(cl_kernel kernel, cl_uint arg_index, const void* arg_value) =\n        OPENCL_FN_clSetKernelArgSVMPointer_switch_fn;\nstatic const struct DynamicFnEntry _clSetKernelArgSVMPointer_definition = { \"clSetKernelArgSVMPointer\", (void**)&clSetKernelArgSVMPointer};\nopencl_fn8(OPENCL_FN_clEnqueueSVMMemcpy, cl_int, (cl_command_queue p1, cl_bool p2, void* p3, const void* p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8))\ncl_int (CL_API_CALL *clEnqueueSVMMemcpy)(cl_command_queue command_queue, cl_bool blocking_copy, void* dst_ptr, const void* src_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event) =\n        OPENCL_FN_clEnqueueSVMMemcpy_switch_fn;\nstatic const struct DynamicFnEntry _clEnqueueSVMMemcpy_definition = { \"clEnqueueSVMMemcpy\", (void**)&clEnqueueSVMMemcpy};\nopencl_fn8(OPENCL_FN_clEnqueueSVMMemFill, cl_int, (cl_command_queue p1, void* p2, const void* p3, size_t p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8))\ncl_int (CL_API_CALL *clEnqueueSVMMemFill)(cl_command_queue command_queue, void* svm_ptr, const void* pattern, size_t pattern_size, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event) =\n        OPENCL_FN_clEnqueueSVMMemFill_switch_fn;\nstatic const struct DynamicFnEntry _clEnqueueSVMMemFill_definition = { \"clEnqueueSVMMemFill\", (void**)&clEnqueueSVMMemFill};\nopencl_fn8(OPENCL_FN_clEnqueueSVMMap, cl_int, (cl_command_queue p1, cl_bool p2, cl_map_flags p3, void* p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8))\ncl_int (CL_API_CALL *clEnqueueSVMMap)(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags map_flags, void* svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event) =\n        OPENCL_FN_clEnqueueSVMMap_switch_fn;\nstatic const struct DynamicFnEntry _clEnqueueSVMMap_definition = { \"clEnqueueSVMMap\", (void**)&clEnqueueSVMMap};\nopencl_fn5(OPENCL_FN_clEnqueueSVMUnmap, cl_int, (cl_command_queue p1, void* p2, cl_uint p3, const cl_event* p4, cl_event* p5))\ncl_int (CL_API_CALL *clEnqueueSVMUnmap)(cl_command_queue command_queue, void* svm_ptr, cl_uint num_events_in_wait_list, const cl_event* event_wait_list, cl_event* event) =\n        OPENCL_FN_clEnqueueSVMUnmap_switch_fn;\nstatic const struct DynamicFnEntry _clEnqueueSVMUnmap_definition = { \"clEnqueueSVMUnmap\", (void**)&clEnqueueSVMUnmap};\n\nstatic const struct DynamicFnEntry* opencl_svm_fn_list[] = {\n    &_clSVMAlloc_definition,\n    &_clSVMFree_definition,\n    &_clSetKernelArgSVMPointer_definition,\n    NULL/*&_clSetKernelExecInfo_definition*/,\n    NULL/*&_clEnqueueSVMFree_definition*/,\n    &_clEnqueueSVMMemcpy_definition,\n    &_clEnqueueSVMMemFill_definition,\n    &_clEnqueueSVMMap_definition,\n    &_clEnqueueSVMUnmap_definition,\n};\n#endif // HAVE_OPENCL_SVM\n\n//\n// END OF CUSTOM FUNCTIONS HERE\n//\n\n#if !defined(HAVE_OPENCL_STATIC)\nstatic void* opencl_check_fn(int ID)\n{\n    const struct DynamicFnEntry* e = NULL;\n    if (ID < CUSTOM_FUNCTION_ID)\n    {\n        CV_Assert(ID >= 0 && ID < (int)(sizeof(opencl_fn_list)/sizeof(opencl_fn_list[0])));\n        e = opencl_fn_list[ID];\n    }\n#ifdef HAVE_OPENCL_SVM\n    else if (ID >= SVM_FUNCTION_ID_START && ID < SVM_FUNCTION_ID_END)\n    {\n        ID = ID - SVM_FUNCTION_ID_START;\n        CV_Assert(ID >= 0 && ID < (int)(sizeof(opencl_svm_fn_list)/sizeof(opencl_svm_fn_list[0])));\n        e = opencl_svm_fn_list[ID];\n    }\n#endif\n    else\n    {\n        CV_Error(cv::Error::StsBadArg, \"Invalid function ID\");\n    }\n    void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);\n    if (!func)\n    {\n        throw cv::Exception(cv::Error::OpenCLApiCallError,\n                cv::format(\"OpenCL function is not available: [%s]\", e->fnName),\n                CV_Func, __FILE__, __LINE__);\n    }\n    *(e->ppFn) = func;\n    return func;\n}\n#endif // HAVE_OPENCL_STATIC\n\n#ifdef HAVE_OPENGL\n\n#if defined(HAVE_OPENCL_STATIC)\n\n#if defined __APPLE__\n#include <OpenCL/cl_gl.h>\n#else\n#include <CL/cl_gl.h>\n#endif\n#ifdef cl_khr_gl_sharing\nCV_SUPPRESS_DEPRECATED_START\n#include \"autogenerated/opencl_gl_static_impl.hpp\"\nCV_SUPPRESS_DEPRECATED_END\n#include \"opencv2/core/opencl/runtime/opencl_gl.hpp\"\n#endif\n\n#else // HAVE_OPENCL_STATIC\n\n#include \"opencv2/core/opencl/runtime/opencl_gl.hpp\"\n\n#ifdef cl_khr_gl_sharing\n\nstatic void* opencl_gl_check_fn(int ID);\n\n#include \"autogenerated/opencl_gl_impl.hpp\"\n\nstatic void* opencl_gl_check_fn(int ID)\n{\n    const struct DynamicFnEntry* e = NULL;\n    assert(ID >= 0 && ID < (int)(sizeof(opencl_gl_fn_list)/sizeof(opencl_gl_fn_list[0])));\n    e = opencl_gl_fn_list[ID];\n    void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);\n    if (!func)\n    {\n        throw cv::Exception(cv::Error::OpenCLApiCallError,\n                cv::format(\"OpenCL function is not available: [%s]\", e->fnName),\n                CV_Func, __FILE__, __LINE__);\n    }\n    *(e->ppFn) = func;\n    return func;\n}\n\n#endif // cl_khr_gl_sharing\n\n#endif // HAVE_OPENCL_STATIC\n\n#endif // HAVE_OPENGL\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/src/opencl/runtime/opencl_clamdblas.cpp": "/*M///////////////////////////////////////////////////////////////////////////////////////\n//\n//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n//\n//  By downloading, copying, installing or using the software you agree to this license.\n//  If you do not agree to this license, do not download, install,\n//  copy or use the software.\n//\n//\n//                           License Agreement\n//                For Open Source Computer Vision Library\n//\n// Copyright (C) 2010-2013, Advanced Micro Devices, Inc., all rights reserved.\n// Third party copyrights are property of their respective owners.\n//\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n//\n//   * Redistribution's of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//\n//   * Redistribution's in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n//   * The name of the copyright holders may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n//\n// This software is provided by the copyright holders and contributors \"as is\" and\n// any express or implied warranties, including, but not limited to, the implied\n// warranties of merchantability and fitness for a particular purpose are disclaimed.\n// In no event shall the OpenCV Foundation or contributors be liable for any direct,\n// indirect, incidental, special, exemplary, or consequential damages\n// (including, but not limited to, procurement of substitute goods or services;\n// loss of use, data, or profits; or business interruption) however caused\n// and on any theory of liability, whether in contract, strict liability,\n// or tort (including negligence or otherwise) arising in any way out of\n// the use of this software, even if advised of the possibility of such damage.\n//\n//M*/\n\n#include \"../../precomp.hpp\"\n\n#ifdef HAVE_CLAMDBLAS\n\n#include \"opencv2/core/opencl/runtime/opencl_core.hpp\"\n#include \"opencv2/core/opencl/runtime/opencl_clamdblas.hpp\"\n\n#if defined(_WIN32)\n#include <windows.h>\n\n    static void* WinGetProcAddress(const char* name)\n    {\n        static HMODULE opencl_module = NULL;\n        if (!opencl_module)\n        {\n            opencl_module = GetModuleHandleA(\"clAmdBlas.dll\");\n            if (!opencl_module)\n            {\n                opencl_module = LoadLibraryA(\"clAmdBlas.dll\");\n                if (!opencl_module)\n                    return NULL;\n            }\n        }\n        return (void*)GetProcAddress(opencl_module, name);\n    }\n    #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)\n#endif // _WIN32\n\n#if defined(__linux__)\n    #include <dlfcn.h>\n    #include <stdio.h>\n\n    static void* GetProcAddress (const char* name)\n    {\n        static void* h = NULL;\n        if (!h)\n        {\n            h = dlopen(\"libclAmdBlas.so\", RTLD_LAZY | RTLD_GLOBAL);\n            if (!h)\n                return NULL;\n        }\n\n        return dlsym(h, name);\n    }\n    #define CV_CL_GET_PROC_ADDRESS(name) GetProcAddress(name)\n#endif\n\n#ifndef CV_CL_GET_PROC_ADDRESS\n#ifdef __GNUC__\n#warning(\"OPENCV: OpenCL BLAS dynamic library loader: check configuration\")\n#else\n#pragma message(\"WARNING: OPENCV: OpenCL BLAS dynamic library loader: check configuration\")\n#endif\n#define CV_CL_GET_PROC_ADDRESS(name) NULL\n#endif\n\nstatic void* openclamdblas_check_fn(int ID);\n\n#include \"runtime_common.hpp\"\n\n//\n// BEGIN OF CUSTOM FUNCTIONS\n//\n\n#define CUSTOM_FUNCTION_ID 1000\n\n//\n// END OF CUSTOM FUNCTIONS HERE\n//\n\n#include \"autogenerated/opencl_clamdblas_impl.hpp\"\n\nstatic void* openclamdblas_check_fn(int ID)\n{\n    assert(ID >= 0 && ID < (int)(sizeof(openclamdblas_fn)/sizeof(openclamdblas_fn[0])));\n    const struct DynamicFnEntry* e = openclamdblas_fn[ID];\n    void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);\n    if (!func)\n    {\n        throw cv::Exception(cv::Error::OpenCLApiCallError,\n                cv::format(\"OpenCL AMD BLAS function is not available: [%s]\", e->fnName),\n                CV_Func, __FILE__, __LINE__);\n    }\n    *(e->ppFn) = func;\n    return func;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/src/opencl/runtime/opencl_clamdfft.cpp": "/*M///////////////////////////////////////////////////////////////////////////////////////\n//\n//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n//\n//  By downloading, copying, installing or using the software you agree to this license.\n//  If you do not agree to this license, do not download, install,\n//  copy or use the software.\n//\n//\n//                           License Agreement\n//                For Open Source Computer Vision Library\n//\n// Copyright (C) 2010-2013, Advanced Micro Devices, Inc., all rights reserved.\n// Third party copyrights are property of their respective owners.\n//\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n//\n//   * Redistribution's of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//\n//   * Redistribution's in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n//   * The name of the copyright holders may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n//\n// This software is provided by the copyright holders and contributors \"as is\" and\n// any express or implied warranties, including, but not limited to, the implied\n// warranties of merchantability and fitness for a particular purpose are disclaimed.\n// In no event shall the OpenCV Foundation or contributors be liable for any direct,\n// indirect, incidental, special, exemplary, or consequential damages\n// (including, but not limited to, procurement of substitute goods or services;\n// loss of use, data, or profits; or business interruption) however caused\n// and on any theory of liability, whether in contract, strict liability,\n// or tort (including negligence or otherwise) arising in any way out of\n// the use of this software, even if advised of the possibility of such damage.\n//\n//M*/\n\n#include \"../../precomp.hpp\"\n\n#ifdef HAVE_CLAMDFFT\n\n#include \"opencv2/core/opencl/runtime/opencl_core.hpp\"\n#include \"opencv2/core/opencl/runtime/opencl_clamdfft.hpp\"\n\n#if defined(_WIN32)\n#include <windows.h>\n\n    static void* WinGetProcAddress(const char* name)\n    {\n        static HMODULE opencl_module = NULL;\n        if (!opencl_module)\n        {\n            opencl_module = GetModuleHandleA(\"clAmdFft.Runtime.dll\");\n            if (!opencl_module)\n            {\n                opencl_module = LoadLibraryA(\"clAmdFft.Runtime.dll\");\n                if (!opencl_module)\n                    return NULL;\n            }\n        }\n        return (void*)GetProcAddress(opencl_module, name);\n    }\n    #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)\n#endif // _WIN32\n\n#if defined(__linux__)\n    #include <dlfcn.h>\n    #include <stdio.h>\n\n    static void* GetProcAddress (const char* name)\n    {\n        static void* h = NULL;\n        if (!h)\n        {\n            h = dlopen(\"libclAmdFft.Runtime.so\", RTLD_LAZY | RTLD_GLOBAL);\n            if (!h)\n                return NULL;\n        }\n\n        return dlsym(h, name);\n    }\n    #define CV_CL_GET_PROC_ADDRESS(name) GetProcAddress(name)\n#endif\n\n#ifndef CV_CL_GET_PROC_ADDRESS\n#ifdef __GNUC__\n#warning(\"OPENCV: OpenCL FFT dynamic library loader: check configuration\")\n#else\n#pragma message(\"WARNING: OPENCV: OpenCL FFT dynamic library loader: check configuration\")\n#endif\n#define CV_CL_GET_PROC_ADDRESS(name) NULL\n#endif\n\nstatic void* openclamdfft_check_fn(int ID);\n\n#include \"runtime_common.hpp\"\n\n//\n// BEGIN OF CUSTOM FUNCTIONS\n//\n\n#define CUSTOM_FUNCTION_ID 1000\n\n//\n// END OF CUSTOM FUNCTIONS HERE\n//\n\n#include \"autogenerated/opencl_clamdfft_impl.hpp\"\n\nstatic void* openclamdfft_check_fn(int ID)\n{\n    assert(ID >= 0 && ID < (int)(sizeof(openclamdfft_fn)/sizeof(openclamdfft_fn[0])));\n    const struct DynamicFnEntry* e = openclamdfft_fn[ID];\n    void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);\n    if (!func)\n    {\n        throw cv::Exception(cv::Error::OpenCLApiCallError,\n                cv::format(\"OpenCL AMD FFT function is not available: [%s]\", e->fnName),\n                CV_Func, __FILE__, __LINE__);\n    }\n    *(e->ppFn) = func;\n    return func;\n}\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/data/vec_files/trainingfaces_24-24.vec",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/platforms/android/gradle-wrapper/gradle/wrapper/gradle-wrapper.jar",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/platforms/android/service/engine/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/3rdparty/ittnotify/src/ittnotify/LICENSE.BSD",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/3rdparty/openexr/Half/half.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/FaceDetection_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/SmallLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/Logo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/StoreLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/group2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/SplashScreen.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/group3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/FaceDetection/FaceDetection/Assets/group1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/MediaCapture_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/splash-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/windows-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/windows-sdk.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/opencv-logo-150.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/ImageManipulations/assets/opencv-logo-30.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/MediaCaptureJavaScript_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/splash-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/windows-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/smalllogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/storeLogo-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/squareTile-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/logo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/tile-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/storelogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/splashscreen.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/microsoft-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/JavaScript/images/smallTile-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/OcvImageProcessing_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/Assets/Lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt/OcvImageProcessing/OcvImageProcessing/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/tutorial-3-cameracontrol/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/color-blob-detection/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/face-detection/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/camera-calibration/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/tutorial-4-opencl/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/15-puzzle/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/tutorial-1-camerapreview/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/tutorial-2-mixedprocessing/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/android/image-manipulations/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/SplashScreenImage.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/ApplicationIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/AlignmentGrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileMedium.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/IconicTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/IconicTileMediumLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvImageManipulation/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/ApplicationIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/AlignmentGrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Tiles/FlipCycleTileMedium.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Tiles/IconicTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Tiles/IconicTileMediumLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Tiles/FlipCycleTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OpenCVXaml/OpenCVXaml/Assets/Tiles/FlipCycleTileLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/SplashScreenImage.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/ApplicationIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/AlignmentGrid.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileMedium.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/IconicTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/IconicTileMediumLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/wp8/OcvRotatingCube/PhoneXamlDirect3DApp1/PhoneXamlDirect3DApp1/Assets/Tiles/FlipCycleTileLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/tmpl.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/chessboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right02.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right12.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/baboon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/opencv-logo-white.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/tree.avi",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/ml.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/vtest.avi",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/detect_blob.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/HappyFish.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left12.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right09.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/box.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/apple.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left09.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/rubberwhale2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/box_in_scene.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/WindowsLogo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/messi5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right07.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left13.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left01.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/Blender_Suzanne1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right06.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/chicky_512.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/notes.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/Blender_Suzanne2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right08.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left03.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/imageTextR.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/lena_tmpl.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/LinuxLogo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/smarties.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/templ.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left02.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left06.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right13.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/butterfly.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/aloeR.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/basketball1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right04.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/lena.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right03.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left14.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/aloeGT.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left07.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right11.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left04.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/mask.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/sudoku.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/imageTextN.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right05.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic5.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/ellipses.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left11.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/opencv-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/board.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/starry_night.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/cards.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/aero1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/building.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left05.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/Megamind.avi",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/aloeL.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/graf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/digits.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/left08.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/text_defocus.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/graf3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/home.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/stuff.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/licenseplate_motion.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/blox.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/orange.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/ela_original.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right14.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/fruits.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pic3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/right01.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/rubberwhale1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/ela_modified.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/text_motion.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/basketball2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/aero3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/Megamind_bugy.avi",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/data/pca_test1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/video_capture_xaml.WindowsPhone_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/Logo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/SmallLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/SplashScreen.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/WideLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/Square71x71Logo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.WindowsPhone/Assets/StoreLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.Windows/video_capture_xaml.Windows_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.Windows/Assets/SmallLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.Windows/Assets/Logo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.Windows/Assets/StoreLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/VideoCaptureXAML/video_capture_xaml/video_capture_xaml.Windows/Assets/SplashScreen.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/Logo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/SmallLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/SplashScreen.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/WideLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/Square71x71Logo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/winrt_universal/PhoneTutorial/Assets/StoreLogo.scale-240.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/Data/box.mp4",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/Data/resized_IMG_3875.JPG",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/java/clojure/simple-sample/resources/images/lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/java/sbt/src/main/resources/img1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/java/sbt/src/main/resources/AverageMaleFace.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/java/sbt/src/main/resources/img2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/samples/java/sbt/sbt/sbt-launch.jar",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv-logo-white.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/pattern.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv-logo-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/bodybg.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/acircles_pattern.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv-logo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/opencv.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_gui/js_trackbar/images/Trackbar_Tutorial_Range.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_gui/js_trackbar/images/Trackbar_Tutorial_Result.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_gui/js_image_display/images/Imread_Imshow_Tutorial_Result.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/apple.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/coins.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/opencv_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/shape.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/handSrc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/lena.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/handDst.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/lenaFace.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/orange.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/js_tutorials/js_assets/cup.mp4",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/opticalflow_lk.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/meanshift_basics.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/meanshift_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/camshift_face.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/optical_flow_basic1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/opticalfb.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/meanshift_face.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/images/camshift_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/photoicon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/MachineLearnings.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/imgproc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/videoicon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/featureicon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/obj_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/core.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/intro.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/gui.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/images/calib3d_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/images/video_display.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/images/mouse_drawing.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/images/trackbar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/images/image_display.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/images/drawing.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/py_trackbar/images/trackbar_screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/py_drawing_functions/images/drawing_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/py_image_display/images/opencv_screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_gui/py_image_display/images/matplotlib_screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_bindings/images/nlm_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture8.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture80.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/py_setup_in_windows/images/Capture5.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/images/windows_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/images/opencv_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_setup/images/fedora_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_feature_homography/images/homography_findobj.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/fast_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/features_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/brief.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/surf_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/orb.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/shi_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/harris_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/matching.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/homography_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/images/sift_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_sift_intro/images/sift_scale_invariant.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_sift_intro/images/sift_dog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_sift_intro/images/sift_keypoints.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_sift_intro/images/sift_local_extrema.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_fast/images/fast_kp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_fast/images/fast_eqns.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_fast/images/fast_speedtest.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_surf_intro/images/surf_orientation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_surf_intro/images/surf_kp2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_surf_intro/images/surf_kp1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_surf_intro/images/surf_matching.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_surf_intro/images/surf_boxfilter.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_features_harris/images/subpixel3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_features_harris/images/harris_region.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_features_harris/images/harris_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_matcher/images/matcher_result1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_matcher/images/matcher_result2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_matcher/images/matcher_flann.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_shi_tomasi/images/shitomasi_space.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_shi_tomasi/images/shitomasi_block1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_features_meaning/images/feature_simple.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_features_meaning/images/feature_building.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_feature2d/py_orb/images/orb_kp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/images/svmicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/images/knnicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/images/kmeansicon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/images/kmeans_demo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/images/kmeans_begin.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/images/oc_feature_representation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/images/oc_color_quantization.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/images/oc_1d_testdata.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/images/oc_2d_clustered.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_opencv/images/oc_1d_clustered.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/initial_labelling.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/tshirt_grouped.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/final_clusters.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/tshirt.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/update_centroid.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_kmeans/py_kmeans_understanding/images/testdata.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_knn/images/knn_icon1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_knn/images/knn_icon2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_knn/py_knn_understanding/images/knn_simple.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_knn/py_knn_understanding/images/knn_theory.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/images/svm_icon2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/images/svm_icon1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/py_svm_opencv/images/deskew.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/py_svm_basics/images/svm_basics1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/py_svm_basics/images/svm_basics3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_ml/py_svm/py_svm_basics/images/svm_basics2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/images/maths_tools.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/images/image_arithmetic.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/images/pixel_ops.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/images/speed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/py_image_arithmetics/images/blending.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/py_image_arithmetics/images/overlay.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/py_basic_ops/images/border.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_core/py_basic_ops/images/roi.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_grabcut/images/grabcut_output1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_grabcut/images/grabcut_rect.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_grabcut/images/grabcut_scheme.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_grabcut/images/grabcut_mask.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_sqdiffn_6.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_ccoeff_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/messi_face.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/res_mario.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_sqdiff_5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_ccorr_3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_ccorrn_4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_template_matching/images/template_ccoeffn_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/pyramid.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/gradient.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/houghcircles.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/blurring.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/canny.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/houghlines.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/colorspace.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/grabcut.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/contours.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/histogram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/morphology.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/transforms.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/thresh.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/template.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/geometric.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/images/watershed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_transforms/images/transform_fourier.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_transforms/py_fourier_transform/images/fft1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_transforms/py_fourier_transform/images/fft2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_transforms/py_fourier_transform/images/fft5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_transforms/py_fourier_transform/images/fft4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_filtering/images/gaussian.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_filtering/images/blur.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_filtering/images/median.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_filtering/images/bilateral.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_filtering/images/filter.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_thresholding/images/ada_threshold.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_thresholding/images/threshold.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_thresholding/images/otsu.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_colorspaces/images/frame.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_gradients/images/gradients.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_gradients/images/double_edge.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghlines/images/houghlines5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghlines/images/houghlines3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghlines/images/houghlines2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghlines/images/houghlines4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghlines/images/houghlinesdemo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_geometric_transformations/images/affine.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_geometric_transformations/images/perspective.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_geometric_transformations/images/translation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_geometric_transformations/images/rotation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_canny/images/canny1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_canny/images/nms.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_canny/images/hysteresis.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/images/histograms_equ.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/images/histograms_2d.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/images/histograms_bp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/images/histograms_1d.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/images/histogram_rgb_plot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/images/histogram_matplotlib.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/images/histogram_sample.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/images/histogram_masking.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_2d_histogram/images/2dhist_matplotlib.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_2d_histogram/images/2dhist_opencv.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/histogram_equalization.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/histeq_numpy1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/clahe_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/equalization_opencv.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/histeq_numpy2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_equalization/images/clahe_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_backprojection/images/backproject_opencv.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_marker.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_coins.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_dt.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_thresh.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_watershed/images/water_fgbg.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_pyramids/images/lap.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_pyramids/images/messipyr.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_pyramids/images/orapple.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_pyramids/images/messiup.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_houghcircles/images/houghcircles2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/images/contour_hierarchy.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/images/contour_features.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/images/contour_properties.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/images/contour_defects.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/images/contour_starting.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/circumcircle.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/fitellipse.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/approx.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/fitline.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/convexitydefects.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/images/boundingrect.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_hierarchy/images/hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_hierarchy/images/tree_hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_hierarchy/images/ccomp_hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contour_properties/images/extremepoints.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_begin/images/none.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_more_functions/images/matchshapes.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_contours/py_contours_more_functions/images/defects.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/j.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/tophat.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/closing.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/erosion.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/blackhat.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/dilation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_imgproc/py_morphological_ops/images/opening.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/images/depthmap_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/images/epipolar_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/images/calibration_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/images/pose_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_pose/images/pose_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_pose/images/pose_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_calibration/images/calib_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_calibration/images/calib_pattern.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_calibration/images/calib_radial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_depthmap/images/disparity_map.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_depthmap/images/stereo_depth.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_epipolar_geometry/images/essential_matrix.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_epipolar_geometry/images/epiresult.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_calib3d/py_epipolar_geometry/images/epipolar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/images/nlm_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/images/inpainticon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/images/hdr_icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_non_local_means/images/nlm_multi.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_non_local_means/images/nlm_patch.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_non_local_means/images/nlm_result1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_hdr/images/fusion_mertens.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_hdr/images/exposures.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_hdr/images/crf.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_hdr/images/ldr_debevec.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_hdr/images/ldr_robertson.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_inpainting/images/inpaint_basics.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/py_tutorials/py_photo/py_inpainting/images/inpaint_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/9_opencv_dependency.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/4_start_new_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/6_run_empty_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/10_opencv_dependency.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/8_import_module.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/2_start_new_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/11_demo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/5_setup.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/1_start_new_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/3_start_new_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_android/7_import_module.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/images/space_shuttle.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/images/lena_hed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/dnn/dnn_yolo/images/yolo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/opencv_ios.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/gpu.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/feature2D.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/imgproc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/introduction.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/retina.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/objdetect.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/calib3d.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/ml.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/core.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/photo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/highgui.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/video.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/general.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/images/viz.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/images/camera_calibration_square_chess.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/images/camera_calibration.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/images/real_time_pose_estimation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/camera_calibration/images/fileListImage.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/camera_calibration/images/fileListImageUnDist.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/camera_calibration/images/asymetricalPattern.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/interactive_calibration/images/dualCircles.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/interactive_calibration/images/charuco_board.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/interactive_calibration/images/screen_charuco.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/interactive_calibration/images/screen_finish.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/real_time_pose/images/registration.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/calib3d/real_time_pose/images/pnp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/video/images/Background_Subtraction_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/video/background_subtraction/images/Background_Subtraction_Tutorial_result_KNN.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/video/background_subtraction/images/Background_Subtraction_Tutorial_result_MOG2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/video/background_subtraction/images/Background_Subtraction_Tutorial_frame.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/video/background_subtraction/images/Background_Subtraction_Tutorial_Scheme.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/moments/images/Moments_Result1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/moments/images/Moments_Source_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/moments/images/Moments_Result2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/point_polygon_test/images/Point_Polygon_Test_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/point_polygon_test/images/Point_Polygon_Test_Source_Image.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/bounding_rects_circles/images/Bounding_Rects_Circles_Source_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/bounding_rects_circles/images/Bounding_Rects_Circles_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/hull/images/Hull_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/hull/images/Hull_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/find_contours/images/Find_Contours_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/find_contours/images/Find_Contours_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/bounding_rotated_ellipses/images/Bounding_Rotated_Ellipses_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/shapedescriptors/bounding_rotated_ellipses/images/Bounding_Rotated_Ellipses_Source_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Pyramids_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Morphology_3_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Morphology_2_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Smoothing_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Morphology_1_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/Threshold_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Hull_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Find_Contours_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Bounding_Rotated_Ellipses_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Point_Polygon_Test_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Moments_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/shapedescriptors/Bounding_Rects_Circles_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Distance_Transformation_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Hough_Circle_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Remap_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Hough_Lines_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Warp_Affine_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/CopyMakeBorder_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Sobel_Derivatives_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Filter_2D_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Canny_Detector_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/imgtrans/Laplace_Operator_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/histograms/Histogram_Calculation_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/histograms/Histogram_Comparison_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/histograms/Histogram_Equalization_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/histograms/Template_Matching_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/images/histograms/Back_Projection_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/hitOrMiss/images/hitmiss_kernels.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/hitOrMiss/images/hitmiss_example3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/hitOrMiss/images/hitmiss_input.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/hitOrMiss/images/hitmiss_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/hitOrMiss/images/hitmiss_example2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/gausian_median_blur_bilateral_filter/images/Smoothing_Tutorial_Result_Median_Filter.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/gausian_median_blur_bilateral_filter/images/Smoothing_Tutorial_theory_gaussian_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Erosion_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Theory_Original_Image.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Dilation_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Theory_Erosion.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/erosion_dilatation/images/Morphology_1_Tutorial_Theory_Dilation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/pyramids/images/Pyramids_Tutorial_PyrUp_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/pyramids/images/Pyramids_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/pyramids/images/Pyramids_Tutorial_PyrDown_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/pyramids/images/Pyramids_Tutorial_Pyramid_Theory.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/motion_deblur_filter/images/motion_original.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/motion_deblur_filter/images/motion_psf.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/motion_deblur_filter/images/white_car.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/motion_deblur_filter/images/black_car.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold_inRange/images/Threshold_inRange_Tutorial_Result_output.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold_inRange/images/Threshold_inRange_RGB_colorspace.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold_inRange/images/Threshold_inRange_HSV_colorspace.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold_inRange/images/Threshold_inRange_Tutorial_Result_input.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Binary.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Zero_Inverted.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Base_Figure.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Result_Zero.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Binary_Inverted.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Zero.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Example.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Theory_Truncate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/threshold/images/Threshold_Tutorial_Result_Binary_Inverted.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/basic_geometric_drawing/images/Drawing_1_Tutorial_Result_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Theory_Opening.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Theory_BlackHat.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Theory_Closing.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Theory_TopHat.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/opening_closing_hats/images/Morphology_2_Tutorial_Theory_Gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/sobel_derivatives/images/Sobel_Derivatives_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/sobel_derivatives/images/Sobel_Derivatives_Tutorial_Theory_dIntensity_Function.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/sobel_derivatives/images/Sobel_Derivatives_Tutorial_Theory_Intensity_Function.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/sobel_derivatives/images/Sobel_Derivatives_Tutorial_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/sobel_derivatives/images/Sobel_Derivatives_Tutorial_Theory_ddIntensity_Function.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/filter_2d/images/filter_2d_tutorial_kernel_theory.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/filter_2d/images/filter_2d_tutorial_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/final.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/sharp.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/black_bg.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/source.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/peaks.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/bin.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/markers.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/dist_transf.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/distance_transformation/images/laplace.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/warp_affine/images/Warp_Affine_Tutorial_Result_Warp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/warp_affine/images/Warp_Affine_Tutorial_Result_Warp_Rotate.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/warp_affine/images/Warp_Affine_Tutorial_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/warp_affine/images/Warp_Affine_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/copyMakeBorder/images/CopyMakeBorder_Tutorial_Results.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/Hough_Lines_Tutorial_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/Hough_Lines_Tutorial_Theory_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/hough_lines_result1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/Hough_Lines_Tutorial_Theory_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/hough_lines_result2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/Hough_Lines_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_lines/images/Hough_Lines_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/laplace_operator/images/Laplace_Operator_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/laplace_operator/images/Laplace_Operator_Tutorial_Theory_ddIntensity.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/laplace_operator/images/Laplace_Operator_Tutorial_Theory_Previous.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/laplace_operator/images/Laplace_Operator_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_circle/images/Hough_Circle_Tutorial_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_circle/images/Hough_Circle_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/hough_circle/images/Hough_Circle_Tutorial_Result.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Result_3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Theory_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Result_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/remap/images/Remap_Tutorial_Result_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/canny_detector/images/Canny_Detector_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/imgtrans/canny_detector/images/Canny_Detector_Tutorial_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_comparison/images/Histogram_Comparison_Source_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_comparison/images/Histogram_Comparison_Source_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_comparison/images/Histogram_Comparison_Source_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection_Theory3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection_Theory1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection2_Source_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection1_Histogram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection2_BackProj.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection_Theory4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection2_Mask.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection_Theory0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection1_Source_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection1_BackProj.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/back_projection/images/Back_Projection_Theory2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_calculation/images/Histogram_Calculation_Theory_Hist0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_calculation/images/Histogram_Calculation_Theory_Hist1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_calculation/images/Histogram_Calculation_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_calculation/images/Histogram_Calculation_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Theory_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Original_Histogram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Theory_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Equalized_Histogram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Theory_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/histogram_equalization/images/Histogram_Equalization_Equalized_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Template_Theory_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Template_Theory_Summary.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Image_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Template_Theory_Sliding.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Template_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Mask_Example.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/histograms/template_matching/images/Template_Matching_Correl_Result_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/periodic_noise_removing_filter/images/period_output.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/periodic_noise_removing_filter/images/period_input.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/periodic_noise_removing_filter/images/period_psd.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/periodic_noise_removing_filter/images/period_filter.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/random_generator_and_text/images/Drawing_2_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/random_generator_and_text/images/Drawing_2_Tutorial_Result_5.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/random_generator_and_text/images/Drawing_2_Tutorial_Result_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/random_generator_and_text/images/Drawing_2_Tutorial_Result_big.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/random_generator_and_text/images/Drawing_2_Tutorial_Result_3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/morph12.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/smooth.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/binary.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/morph61.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/linear_horiz.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/morph211.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/morph21.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/vert.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/morph6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/gray.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/horiz.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/src.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/morph_lines_detection/images/linear_vert.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/anisotropic_image_segmentation/images/gst_input.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/anisotropic_image_segmentation/images/gst_result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/anisotropic_image_segmentation/images/gst_orientation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/anisotropic_image_segmentation/images/gst_coherency.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/out_of_focus_deblur_filter/images/psf.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/out_of_focus_deblur_filter/images/recovered.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgproc/out_of_focus_deblur_filter/images/original.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/Load_Save_Image_Result_2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/eclipse_cpp_logo.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/how_to_write_a_tutorial.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/visual_studio_image_watch.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/opencv_ios.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/windows_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/ubuntu-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/clojure-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/android_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/visual-studio-2010-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/gccegg-65.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/Java_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/eclipse-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/Display_Image_Tutorial_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/images/Load_Save_Image_Result_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_gcc_cmake/images/GCC_CMake_Example_Tutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/sbt_run.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/sbt_run_face.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/ant_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/cmake_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/sbt_eclipse.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/Java_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/desktop_java/images/faceDetection.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetOpenCVLibrariesRelease.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/OpenCV_Install_Directory.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertyPageExample.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/VCDirectories2010.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertyPageAddExisting.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetOpenCVLibrariesDebugSmple.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetInsideFolder.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetOpenCVLibrariesDebug.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetVS2010.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetOpenCVLib.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/AddNewPropertySheet.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/VCDirectories2008.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/NewProjectVisualStudio.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/VisualStudioCommandLineArguments.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/OpenCVEditEnviromentVisual.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/SuccessVisualStudioWindows.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_opencv/images/PropertySheetOpenCVInclude.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/10-new-project-created.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/8-add-library.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/7_5-new-java-project.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/4-add-external-jars.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/7-user-library-final.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/5-native-library.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/3-library-name.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/1-window-preferences.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/2-user-library-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/9-select-user-lib.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/6-external-folder.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/java_eclipse/images/11-the-code.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/clojure_dev_intro/images/blurred.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMake_Configure_Windows.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/OpenCV_Install_Directory.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/TortoiseSVNCheckout.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/IntelTBB.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/WindowsBuildInstall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMakePackageNotFoundWindows.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMakeSelectBin.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMakeOutputPackageNotFound.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/OpenCVBuildResultWindows.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/visualstudiocommandprompt.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/WindowsOpenCVDirPath.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/SVNCheckOutProgress.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/TortoiseSVNCheckoutWindow.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/WindowsQtContoursOutput.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMakeBuildOptionsOpenCV.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/CMakeBuildWithWindowsGUI.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/qtDownloadThisPackage.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/WindowsOpenCVInstaller.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/PathEditorOpenCVSetPath.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/PathEditorOpenCVInsertNew.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_install/images/ChangeBuildVisualStudio.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/documenting_opencv/scholarship_cite_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/documenting_opencv/doxygen-1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/documenting_opencv/doxygen-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/documenting_opencv/doxygen-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/visual_studio_image_watch.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/viewer_context_menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/toolwindow.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/edges_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/input_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/help_button.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/vs_locals.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/breakpoint.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/windows_visual_studio_image_watch/images/viewer.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a14.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a15.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a9.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a12.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a0.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/linux_eclipse/images/a10.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_06.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_builders.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_edit_configuration_refresh.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_edit_configuration_main.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_10_crystal_clean.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_11_run_as.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_1a_locate_sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_08.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/emulator_canny.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/android_package_7zip.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_07.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_04.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_inst_adt.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_6_import_existing_projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_edit_configuration_build_resources.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_01.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_03.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_ndk_build.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_opencv_dependency0.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_8a_target.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_edit_configuration_specify_resources.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/device_details.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/AVD_empty.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_9_errors_dissapearing.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_7_select_projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_edit_configuration_build_options.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg5.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_1_choose_workspace.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_4_locate_sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/ndk_build.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_02.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/android_emulator_opencv_manager_fail.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_8_false_alarm.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_builder_types.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_09.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_opencv_dependency1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_windows_environment.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_2_window_preferences.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_cdt_cfg8.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_NDK_build_success.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_3_preferences_android.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_inst_cdt_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_12.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_inst_cdt.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/android_sdk_and_avd_manager.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/dev_OCV_new_class.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/AVD_create.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_5_import_command.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/cmd_adb_devices.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/dev_OCV_reference.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_05.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_ubuntu.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/eclipse_8b_fix_props.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/introduction/android_binary_package/images/usb_device_connect_13.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/face_beautification/pics/example.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/segm_fluid.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/segm.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/massif_export_ocv.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/massif_export_gapi_fluid.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gapi/anisotropic_segmentation/pics/massif_export_gapi.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/highgui/images/Adding_Trackbars_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/highgui/trackbar/images/Adding_Trackbars_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/highgui/trackbar/images/Adding_Trackbars_Tutorial_Trackbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/highgui/trackbar/images/Adding_Trackbars_Tutorial_Result_1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/gpu/images/gpu-basics-similarity.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/photo/images/hdr.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/photo/hdr_imaging/images/fusion.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/photo/hdr_imaging/images/memorial.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/photo/hdr_imaging/images/ldr.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/images/video-input-psnr-ssim.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/images/video-write.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/video-input-psnr-ssim/images/outputVideoInput.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/video-write/images/videoCompressSelect.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/video-write/images/videoFileStructure.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/videoio/video-write/images/resultOutputWideoWrite.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgcodecs/images/gdal-io.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgcodecs/raster-gdal/images/gdal_flood-zone.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgcodecs/raster-gdal/images/gdal_heat-map.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/imgcodecs/raster-gdal/images/gdal_output.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Drawing_2_Tutorial_Result_7.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/howToScanImages.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Basic_Linear_Transform_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Drawing_1_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/interopOpenCV1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Adding_Images_Tutorial_Result_0.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Smoothing_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/discrete_fourier_transform.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/matTheBasicImageStructure.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/matMaskFilter2DOp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/file_input_output_with_xml_yml.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/images/Morphology_1_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut11.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut12.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut15.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut8.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut10.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicImageForComputer.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut14.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut13.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut9.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut16.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat_the_basic_image_container/images/MatBasicContainerOut7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/mat-mask-operations/images/resultMatMaskFilter2D.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_hist_alpha.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_histogram_compare.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_Result_big.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_gamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_gamma_correction.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_hist_beta.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/basic_linear_transform/images/Basic_Linear_Transform_Tutorial_linear_transform_correction.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/adding_images/images/Adding_Images_Tutorial_Result_Big.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/how_to_scan_images/tutorial_how_matrix_stored_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/how_to_scan_images/tutorial_how_matrix_stored_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/discrete_fourier_transform/images/result_normal.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/discrete_fourier_transform/images/result_rotated.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/how_to_use_OpenCV_parallel_for_/images/how_to_use_OpenCV_parallel_for_sqrt_scale_transformation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/how_to_use_OpenCV_parallel_for_/images/how_to_use_OpenCV_parallel_for_640px-Mandelset_hires.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/core/how_to_use_OpenCV_parallel_for_/images/how_to_use_OpenCV_parallel_for_Mandelbrot.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/images/image_effects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/images/facedetect.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/images/intro.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/hello/images/view_did_load.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/hello/images/ios_hello_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/hello/images/header_directive.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/hello/images/linking_opencv_ios.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/video_processing/images/xcode_hello_ios_framework_drag_and_drop.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/video_processing/images/xcode_hello_ios_viewcontroller_layout.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/video_processing/images/xcode_hello_ios_frameworks_add_dependencies.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ios/image_manipulation/images/output.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/images/Cascade_Classifier_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/images/visualisation_video.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/images/visualisation_single_stage.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/cascade_classifier/images/Cascade_Classifier_Tutorial_Result_Haar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/cascade_classifier/images/haar_features.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/cascade_classifier/images/haar.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/objdetect/cascade_classifier/images/Cascade_Classifier_Tutorial_Result_LBP.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/images/introduction_to_svm.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/images/non_linear_svms.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/images/introduction_to_pca_cover.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_svm/images/optimal-hyperplane.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_svm/images/separating-lines.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_svm/images/svm_intro_result.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/non_linear_svms/images/sample-errors-dist.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/non_linear_svms/images/svm_non_linear_result.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_pca/images/pca_eigen.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_pca/images/pca_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_pca/images/pca_line.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/ml/introduction_to_pca/images/pca_test1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/gvedit.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/budapest.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/boat.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/compressedPlaneA2B1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/affinepano.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/newspaper.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/stitching/stitcher/images/fisheye.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/AKAZE_Tracking_Tutorial_Cover.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/Feature_Description_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/AKAZE_Match_Tutorial_Cover.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/Feature_Detection_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/Feature_Flann_Matcher_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/Feature_Homography_Tutorial_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/detection_of_planar_objects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/trackingmotion/Generic_Corner_Detector_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/trackingmotion/Shi_Tomasi_Detector_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/trackingmotion/Corner_Subpixeles_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/images/trackingmotion/Harris_Detector_Cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_detection/images/Feature_Detection_Result_b.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_detection/images/Feature_Detection_Result_a.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_description/images/Feature_Description_BruteForce_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/akaze_tracking/images/frame.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_flann_matcher/images/Featur_FlannMatcher_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_flann_matcher/images/Feature_FlannMatcher_Keypoints_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_flann_matcher/images/Feature_FlannMatcher_Result_ratio_test.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_flann_matcher/images/Feature_FlannMatcher_Lowe_ratio_test.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/good_features_to_track/images/good_features_to_track_Shi_Tomasi.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/corner_subpixels/images/Corner_Subpixels_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/corner_subpixels/images/Corner_Subpixels_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/generic_corner_detector/images/My_Shi_Tomasi_corner_detector_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/generic_corner_detector/images/My_Harris_corner_detector_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/harris_detector/images/Harris_Detector_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/trackingmotion/harris_detector/images/Harris_Detector_Original_Image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/feature_homography/images/Feature_Homography_Result.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_pose_chessboard_corners.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_transformation_example1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_transformation_example3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_pose_estimation.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_perspective_correction.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_camera_displacement_compare.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_stitch_compare.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_camera_displacement.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_pose.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_perspective_correction_chessboard_warp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_transformation_example2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_perspective_correction_chessboard_matches.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_camera_displacement_poses.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_stitch_Suzanne.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_source_desired_images.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/homography/images/homography_panorama_stitching.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/akaze_matching/images/res.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/doc/tutorials/features2d/akaze_matching/images/graf.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/stereo_undistort.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/fisheye_undistorted.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/distortion_examples2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/distortion_examples.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/checkerboard_radon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/hand-eye_figure.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/calib3d/doc/pics/pinhole_camera_model.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/minenclosingtriangle.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/quadedge.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/logpolar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/backprojectpatch.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/defects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/cornersubpix.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/inv_logpolar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/threshold.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/subdiv.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/bayer.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/houghp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/polar_remap_doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/building_lsd.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/minareabox.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/contoursecarea.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/pointpolygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/building.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/delaunay_voronoi.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/intersection.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/integral.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/boundingrect.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_plasma.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_ocean.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_bone.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_winter.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_mkpj1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_twilight.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_cividis.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_summer.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_pink.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_hsv.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_viridis.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_twilight_shifted.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_rainbow.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_jet.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_autumn.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_cool.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_mkpj2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_inferno.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_spring.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_turbo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_parula.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_hot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/imgproc/doc/pics/colormaps/colorscale_magma.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/gapi/doc/pics/gapi_scheme.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/gapi/doc/pics/render_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/gapi/doc/pics/demo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/74.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/122.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/85.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/81.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/89.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/125.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/82.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/48.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/83.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/37.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/112.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/17.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/49.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/54.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/43.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/121.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/55.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/53.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/30.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/79.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/71.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/57.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/123.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/92.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/20.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/50.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/103.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/73.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/68.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/22.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/23.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/117.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/41.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/47.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/59.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/19.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/35.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/18.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/67.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/31.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/51.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/29.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/66.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/126.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/25.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/131.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/101.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/45.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/80.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/118.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/21.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/70.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/107.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/76.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/111.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/114.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/116.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/106.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/58.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/75.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/38.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/39.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/104.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/119.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/110.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/44.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/94.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/109.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/46.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/86.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/26.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/93.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/32.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/90.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/77.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/84.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/56.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/63.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/98.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/113.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/102.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/87.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/115.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/130.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/120.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/105.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/33.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/78.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/60.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/42.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/64.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/72.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/28.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/69.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/128.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/91.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/88.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/16.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/108.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/96.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/27.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/65.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/34.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/36.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/52.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/62.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/99.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/61.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/129.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/24.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/97.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/95.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/124.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/48/127.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/74.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/122.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/85.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/81.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/89.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/125.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/82.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/48.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/83.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/37.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/112.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/17.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/49.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/54.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/43.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/121.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/55.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/53.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/30.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/79.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/71.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/57.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/123.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/92.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/20.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/50.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/103.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/73.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/68.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/22.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/23.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/117.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/41.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/47.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/59.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/19.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/35.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/18.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/67.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/31.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/51.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/29.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/66.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/126.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/25.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/131.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/101.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/45.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/80.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/118.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/21.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/70.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/107.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/76.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/111.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/114.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/116.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/106.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/58.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/75.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/38.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/39.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/104.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/119.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/110.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/44.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/94.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/109.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/46.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/86.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/26.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/93.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/32.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/90.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/77.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/84.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/56.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/63.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/98.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/113.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/102.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/87.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/115.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/130.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/120.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/105.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/33.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/78.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/60.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/42.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/64.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/72.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/28.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/69.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/128.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/91.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/88.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/16.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/108.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/96.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/27.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/65.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/34.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/36.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/52.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/62.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/99.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/61.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/129.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/24.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/97.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/95.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/124.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/src/files_Qt/Milky/64/127.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/highgui/doc/pics/qtgui.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/doc/pics/memstorage1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/doc/pics/NormTypes_OneArray_1-2-INF.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/doc/pics/memstorage2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/core/doc/pics/rotatedrect.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/objdetect/doc/pics/haarfeatures.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/java/test/common_test/res/drawable/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/java/test/common_test/res/drawable/lena.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/java/test/common_test/res/drawable/chessboard.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/java/test/pure_test/lib/junit-4.11.jar",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/ml/doc/pics/SVM_Comparison.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/ml/doc/pics/neuron_model.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/ml/doc/pics/mlp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/ml/doc/pics/sigmoid_bipolar.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencv-4.2.0-chpxxghkj4pd3scmd3lk7dxsbx34rmns/spack-src/modules/stitching/doc/StitchingPipeline.jpg"
    ],
    "total_files": 6091
}