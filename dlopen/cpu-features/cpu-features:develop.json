{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cpu-features-develop-76j5pofadxjeplbq426smx7cdtentbz6/spack-src/src/hwcaps.c": "// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include \"internal/hwcaps.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#include \"cpu_features_macros.h\"\n#include \"internal/filesystem.h\"\n#include \"internal/string_view.h\"\n\nstatic bool IsSet(const uint32_t mask, const uint32_t value) {\n  if (mask == 0) return false;\n  return (value & mask) == mask;\n}\n\nbool CpuFeatures_IsHwCapsSet(const HardwareCapabilities hwcaps_mask,\n                             const HardwareCapabilities hwcaps) {\n  return IsSet(hwcaps_mask.hwcaps, hwcaps.hwcaps) ||\n         IsSet(hwcaps_mask.hwcaps2, hwcaps.hwcaps2);\n}\n\n#ifdef CPU_FEATURES_TEST\n// In test mode, hwcaps_for_testing will define the following functions.\nHardwareCapabilities CpuFeatures_GetHardwareCapabilities(void);\nPlatformType CpuFeatures_GetPlatformType(void);\n#else\n\n// Debug facilities\n#if defined(NDEBUG)\n#define D(...)\n#else\n#include <stdio.h>\n#define D(...)           \\\n  do {                   \\\n    printf(__VA_ARGS__); \\\n    fflush(stdout);      \\\n  } while (0)\n#endif\n\n////////////////////////////////////////////////////////////////////////////////\n// Implementation of GetElfHwcapFromGetauxval\n////////////////////////////////////////////////////////////////////////////////\n\n#define AT_HWCAP 16\n#define AT_HWCAP2 26\n#define AT_PLATFORM 15\n#define AT_BASE_PLATFORM 24\n\n#if defined(HAVE_STRONG_GETAUXVAL)\n#include <sys/auxv.h>\nstatic unsigned long GetElfHwcapFromGetauxval(uint32_t hwcap_type) {\n  return getauxval(hwcap_type);\n}\n#elif defined(HAVE_DLFCN_H)\n// On Android we probe the system's C library for a 'getauxval' function and\n// call it if it exits, or return 0 for failure. This function is available\n// since API level 20.\n//\n// This code does *NOT* check for '__ANDROID_API__ >= 20' to support the edge\n// case where some NDK developers use headers for a platform that is newer than\n// the one really targetted by their application. This is typically done to use\n// newer native APIs only when running on more recent Android versions, and\n// requires careful symbol management.\n//\n// Note that getauxval() can't really be re-implemented here, because its\n// implementation does not parse /proc/self/auxv. Instead it depends on values\n// that are passed by the kernel at process-init time to the C runtime\n// initialization layer.\n\n#include <dlfcn.h>\n\ntypedef unsigned long getauxval_func_t(unsigned long);\n\nstatic uint32_t GetElfHwcapFromGetauxval(uint32_t hwcap_type) {\n  uint32_t ret = 0;\n  void *libc_handle = NULL;\n  getauxval_func_t *func = NULL;\n\n  dlerror();  // Cleaning error state before calling dlopen.\n  libc_handle = dlopen(\"libc.so\", RTLD_NOW);\n  if (!libc_handle) {\n    D(\"Could not dlopen() C library: %s\\n\", dlerror());\n    return 0;\n  }\n  func = (getauxval_func_t *)dlsym(libc_handle, \"getauxval\");\n  if (!func) {\n    D(\"Could not find getauxval() in C library\\n\");\n  } else {\n    // Note: getauxval() returns 0 on failure. Doesn't touch errno.\n    ret = (uint32_t)(*func)(hwcap_type);\n  }\n  dlclose(libc_handle);\n  return ret;\n}\n#else\n#error \"This platform does not provide hardware capabilities.\"\n#endif\n\n// Implementation of GetHardwareCapabilities for OS that provide\n// GetElfHwcapFromGetauxval().\n\n// Fallback when getauxval is not available, retrieves hwcaps from\n// \"/proc/self/auxv\".\nstatic uint32_t GetElfHwcapFromProcSelfAuxv(uint32_t hwcap_type) {\n  struct {\n    uint32_t tag;\n    uint32_t value;\n  } entry;\n  uint32_t result = 0;\n  const char filepath[] = \"/proc/self/auxv\";\n  const int fd = CpuFeatures_OpenFile(filepath);\n  if (fd < 0) {\n    D(\"Could not open %s\\n\", filepath);\n    return 0;\n  }\n  for (;;) {\n    const int ret = CpuFeatures_ReadFile(fd, (char *)&entry, sizeof entry);\n    if (ret < 0) {\n      D(\"Error while reading %s\\n\", filepath);\n      break;\n    }\n    // Detect end of list.\n    if (ret == 0 || (entry.tag == 0 && entry.value == 0)) {\n      break;\n    }\n    if (entry.tag == hwcap_type) {\n      result = entry.value;\n      break;\n    }\n  }\n  CpuFeatures_CloseFile(fd);\n  return result;\n}\n\n// Retrieves hardware capabilities by first trying to call getauxval, if not\n// available falls back to reading \"/proc/self/auxv\".\nstatic unsigned long GetHardwareCapabilitiesFor(uint32_t type) {\n  unsigned long hwcaps = GetElfHwcapFromGetauxval(type);\n  if (!hwcaps) {\n    D(\"Parsing /proc/self/auxv to extract ELF hwcaps!\\n\");\n    hwcaps = GetElfHwcapFromProcSelfAuxv(type);\n  }\n  return hwcaps;\n}\n\nHardwareCapabilities CpuFeatures_GetHardwareCapabilities(void) {\n  HardwareCapabilities capabilities;\n  capabilities.hwcaps = GetHardwareCapabilitiesFor(AT_HWCAP);\n  capabilities.hwcaps2 = GetHardwareCapabilitiesFor(AT_HWCAP2);\n  return capabilities;\n}\n\nPlatformType kEmptyPlatformType;\n\nPlatformType CpuFeatures_GetPlatformType(void) {\n  PlatformType type = kEmptyPlatformType;\n  char *platform = (char *)GetHardwareCapabilitiesFor(AT_PLATFORM);\n  char *base_platform = (char *)GetHardwareCapabilitiesFor(AT_BASE_PLATFORM);\n\n  if (platform != NULL)\n    CpuFeatures_StringView_CopyString(str(platform), type.platform,\n                                      sizeof(type.platform));\n  if (base_platform != NULL)\n    CpuFeatures_StringView_CopyString(str(base_platform), type.base_platform,\n                                      sizeof(type.base_platform));\n  return type;\n}\n\n#endif  // CPU_FEATURES_TEST\n"
    },
    "skipped": [],
    "total_files": 69
}