{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 56 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"X$cc_temp\" | $Xsed -e 's%.*/%%' -e \"s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n_LT_PROG_ECHO_BACKSLASH\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"X$][$1\" | $Xsed -e \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"X$<var>\" | $Xsed -e \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Fix-up fallback echo if it was mangled by the above quoting rules.\ncase \\$lt_ECHO in\n*'\\\\\\[$]0 --fallback-echo\"')dnl \"\n  lt_ECHO=\\`\\$ECHO \"X\\$lt_ECHO\" | \\$Xsed -e 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\[$]0 --fallback-echo\"\\[$]/\\[$]0 --fallback-echo\"/'\\`\n  ;;\nesac\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\ncat >\"$CONFIG_LT\" <<_LTEOF\n#! $SHELL\n# Generated by $as_me.\n# Run this file to recreate a libtool stub with the current configuration.\n\nlt_cl_silent=false\nSHELL=\\${CONFIG_SHELL-$SHELL}\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAS_SHELL_SANITIZE\n_AS_PREPARE\n\nexec AS_MESSAGE_FD>&1\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2008 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nif test \"$no_create\" != yes; then\n  lt_cl_success=:\n  test \"$silent\" = yes &&\n    lt_config_lt_args=\"$lt_config_lt_args --quiet\"\n  exec AS_MESSAGE_LOG_FD>/dev/null\n  $SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\n  exec AS_MESSAGE_LOG_FD>>config.log\n  $lt_cl_success || AS_EXIT(1)\nfi\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '/^# Generated shell functions inserted here/q' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_XSI_SHELLFNS\n\n  sed -n '/^# Generated shell functions inserted here/,$p' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\tif test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES\n# --------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=echo\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX\n# -----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nAC_LINK_IFELSE(AC_LANG_PROGRAM,[\nlt_aix_libpath_sed='\n    /Import File Strings/,/^$/ {\n\t/^0/ {\n\t    s/^0  *\\(.*\\)$/\\1/\n\t    p\n\t}\n    }'\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then\n  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\nfi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[ifdef([AC_DIVERSION_NOTICE],\n\t     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],\n\t [AC_DIVERT_PUSH(NOTICE)])\n$1\nAC_DIVERT_POP\n])# _LT_SHELL_INIT\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Add some code to the start of the generated configure script which\n# will find an echo command which doesn't interpret backslashes.\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[_LT_SHELL_INIT([\n# Check that we are running under the correct shell.\nSHELL=${CONFIG_SHELL-/bin/sh}\n\ncase X$lt_ECHO in\nX*--fallback-echo)\n  # Remove one level of quotation (which was required for Make).\n  ECHO=`echo \"$lt_ECHO\" | sed 's,\\\\\\\\\\[$]\\\\[$]0,'[$]0','`\n  ;;\nesac\n\nECHO=${lt_ECHO-echo}\nif test \"X[$]1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X[$]1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' ; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell.\n  exec $SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\nfi\n\nif test \"X[$]1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<_LT_EOF\n[$]*\n_LT_EOF\n  exit 0\nfi\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nif test -z \"$lt_ECHO\"; then\n  if test \"X${echo_test_string+set}\" != Xset; then\n    # find a string as large as possible, as long as the shell can cope with it\n    for cmd in 'sed 50q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 2q \"[$]0\"' 'echo test'; do\n      # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...\n      if { echo_test_string=`eval $cmd`; } 2>/dev/null &&\n\t { test \"X$echo_test_string\" = \"X$echo_test_string\"; } 2>/dev/null\n      then\n        break\n      fi\n    done\n  fi\n\n  if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n     echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n    :\n  else\n    # The Solaris, AIX, and Digital Unix default echo programs unquote\n    # backslashes.  This makes it impossible to quote backslashes using\n    #   echo \"$something\" | sed 's/\\\\/\\\\\\\\/g'\n    #\n    # So, first we look for a working echo in the user's PATH.\n\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for dir in $PATH /usr/ucb; do\n      IFS=\"$lt_save_ifs\"\n      if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&\n         test \"X`($dir/echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`($dir/echo \"$echo_test_string\") 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        ECHO=\"$dir/echo\"\n        break\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n\n    if test \"X$ECHO\" = Xecho; then\n      # We didn't find a better echo, so look for alternatives.\n      if test \"X`{ print -r '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`{ print -r \"$echo_test_string\"; } 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        # This shell has a builtin print -r that does the trick.\n        ECHO='print -r'\n      elif { test -f /bin/ksh || test -f /bin/ksh$ac_exeext; } &&\n\t   test \"X$CONFIG_SHELL\" != X/bin/ksh; then\n        # If we have ksh, try running configure again with it.\n        ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n        export ORIGINAL_CONFIG_SHELL\n        CONFIG_SHELL=/bin/ksh\n        export CONFIG_SHELL\n        exec $CONFIG_SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\n      else\n        # Try using printf.\n        ECHO='printf %s\\n'\n        if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n\t   echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  # Cool, printf works\n\t  :\n        elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  CONFIG_SHELL=$ORIGINAL_CONFIG_SHELL\n\t  export CONFIG_SHELL\n\t  SHELL=\"$CONFIG_SHELL\"\n\t  export SHELL\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        elif echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        else\n\t  # maybe with a smaller string...\n\t  prev=:\n\n\t  for cmd in 'echo test' 'sed 2q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 50q \"[$]0\"'; do\n\t    if { test \"X$echo_test_string\" = \"X`eval $cmd`\"; } 2>/dev/null\n\t    then\n\t      break\n\t    fi\n\t    prev=\"$cmd\"\n\t  done\n\n\t  if test \"$prev\" != 'sed 50q \"[$]0\"'; then\n\t    echo_test_string=`eval $prev`\n\t    export echo_test_string\n\t    exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} \"[$]0\" ${1+\"[$]@\"}\n\t  else\n\t    # Oops.  We lost completely, so just stick with echo.\n\t    ECHO=echo\n\t  fi\n        fi\n      fi\n    fi\n  fi\nfi\n\n# Copy echo and quote the copy suitably for passing to libtool from\n# the Makefile, instead of quoting the original, which is used later.\nlt_ECHO=$ECHO\nif test \"X$lt_ECHO\" = \"X$CONFIG_SHELL [$]0 --fallback-echo\"; then\n   lt_ECHO=\"$CONFIG_SHELL \\\\\\$\\[$]0 --fallback-echo\"\nfi\n\nAC_SUBST(lt_ECHO)\n])\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1],\n    [An echo program that does not interpret backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[AC_CHECK_TOOL(AR, ar, false)\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1])\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"X$_lt_linker_boilerplate\" | $Xsed -e '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring$teststring\" 2>/dev/null` \\\n\t         = \"XX$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\nvoid fnord() { int i=42;}\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else if (dlsym( self,\"_fnord\")) status = $lt_dlneed_uscore;\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n  if $ECHO \"$lt_search_path_spec\" | $GREP ';' >/dev/null ; then\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED -e 's/;/ /g'`\n  else\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n  fi\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO $lt_tmp_lt_search_path_spec | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  sys_lib_search_path_spec=`$ECHO $lt_search_path_spec`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO \"X$lib\" | $Xsed -e '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=\"/usr/lib /lib/w32api /lib /usr/local/lib\"\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH printed by\n        # mingw gcc, but we are running on Cygwin. Gcc prints its search\n        # path with ; separators, and with drive letters. We can handle the\n        # drive letters (cygwin fileutils understands them), so leave them,\n        # especially as we might pass files found there to a mingw objdump,\n        # which wouldn't understand a cygwinified path. Ahh.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd1*)\n  dynamic_linker=no\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[123]]*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555.\n  postinstall_cmds='chmod 555 $lib'\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_DECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_DECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method == \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  AC_CHECK_TOOLS(DUMPBIN, [\"dumpbin -symbols\" \"link -dump -symbols\"], :)\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:__oline__: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nconst struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC*)\n\t    # IBM XL 8.0 on PPC\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl*)\n\t# IBM XL C 8.0/Fortran 10.1 on PPC\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n\t*Sun\\ F*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\nAC_MSG_RESULT([$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw* | cegcc*)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n  if test \"$with_gnu_ld\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.9.1, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to modify your PATH\n*** so that a non-GNU linker is found, and then restart.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95*)\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]*)\t\t\t# IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  # Exported symbols can be pulled into shared objects from archives\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `$ECHO \"X$deplibs\" | $Xsed -e '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    freebsd1*)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n        save_LDFLAGS=\"$LDFLAGS\"\n        LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n        AC_LINK_IFELSE(int foo(void) {},\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n        )\n        LDFLAGS=\"$save_LDFLAGS\"\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~$ECHO DATA >> $output_objdir/$libname.def~$ECHO \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~$ECHO EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec_ld], [1],\n    [[If ld is used when linking, flag to hardcode $libdir into a binary\n    during linking.  This must work even if $libdir does not exist]])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [fix_srcfile_path], [1],\n    [Fix the shell variable $srcfile for the compiler])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_PROG_CXX\n# ------------\n# Since AC_PROG_CXX is broken, in that it returns g++ if there is no c++\n# compiler, we have our own version here.\nm4_defun([_LT_PROG_CXX],\n[\npushdef([AC_MSG_ERROR], [_lt_caught_CXX_error=yes])\nAC_PROG_CXX\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_CXX\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_CXX], [])\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[AC_REQUIRE([_LT_PROG_CXX])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n        # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n        # as there is no search path for DLLs.\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n        _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n        _LT_TAGVAR(always_export_symbols, $1)=no\n        _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n          # If the export-symbols file already is a .def file (1st line\n          # is EXPORTS), use it as is; otherwise, prepend...\n          _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    cp $export_symbols $output_objdir/$soname.def;\n          else\n\t    echo EXPORTS > $output_objdir/$soname.def;\n\t    cat $export_symbols >> $output_objdir/$soname.def;\n          fi~\n          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n        else\n          _LT_TAGVAR(ld_shlibs, $1)=no\n        fi\n        ;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd[[12]]*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]]* | *pgcpp\\ [[1-5]]*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 will use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  xl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='echo'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=echo\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='echo'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_PROG_F77\n# ------------\n# Since AC_PROG_F77 is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_F77],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_F77=yes])\nAC_PROG_F77\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_F77\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_F77], [])\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_REQUIRE([_LT_PROG_F77])dnl\nAC_LANG_PUSH(Fortran 77)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${F77-\"f77\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_PROG_FC\n# -----------\n# Since AC_PROG_FC is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_FC],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_FC=yes])\nAC_PROG_FC\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_FC\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_FC], [])\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_REQUIRE([_LT_PROG_FC])dnl\nAC_LANG_PUSH(Fortran)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${FC-\"f95\"}\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=\"$lt_save_CC\"\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_XSI_SHELLFNS\n# ---------------------\n# Bourne and XSI compatible variants of some useful shell functions.\nm4_defun([_LT_PROG_XSI_SHELLFNS],\n[case $xsi_shell in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nfunc_stripname ()\n{\n  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n  # positional parameters, so assign one to ordinary parameter first.\n  func_stripname_result=${3}\n  func_stripname_result=${func_stripname_result#\"${1}\"}\n  func_stripname_result=${func_stripname_result%\"${2}\"}\n}\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=${1%%=*}\n  func_opt_split_arg=${1#*=}\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  case ${1} in\n    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n    *)    func_lo2o_result=${1} ;;\n  esac\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=${1%.*}.lo\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=$(( $[*] ))\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=${#1}\n}\n\n_LT_EOF\n    ;;\n  *) # Bourne compatible functions.\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\ndnl func_dirname_and_basename\ndnl A portable version of this function is already defined in general.m4sh\ndnl so there is no need for it here.\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n  case ${2} in\n    .*) func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%\\\\\\\\${2}\\$%%\"`;;\n    *)  func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%${2}\\$%%\"`;;\n  esac\n}\n\n# sed scripts:\nmy_sed_long_opt='1s/^\\(-[[^=]]*\\)=.*/\\1/;q'\nmy_sed_long_arg='1s/^-[[^=]]*=//'\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_opt\"`\n  func_opt_split_arg=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_arg\"`\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  func_lo2o_result=`$ECHO \"X${1}\" | $Xsed -e \"$lo2o\"`\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=`$ECHO \"X${1}\" | $Xsed -e 's/\\.[[^.]]*$/.lo/'`\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=`expr \"$[@]\"`\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=`expr \"$[1]\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n}\n\n_LT_EOF\nesac\n\ncase $lt_shell_append in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]+=\\$[2]\"\n}\n_LT_EOF\n    ;;\n  *)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]=\\$$[1]\\$[2]\"\n}\n\n_LT_EOF\n    ;;\n  esac\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 6 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [0], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [0], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [0], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [pic_mode=\"$withval\"],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ltmain.sh": "# Generated from ltmain.m4sh.\n\n# ltmain.sh (GNU libtool) 2.2.6\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007 2008 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#     --config             show all configuration variables\n#     --debug              enable verbose shell tracing\n# -n, --dry-run            display commands without modifying any files\n#     --features           display basic configuration information and exit\n#     --mode=MODE          use operation mode MODE\n#     --preserve-dup-deps  don't remove duplicate dependency libraries\n#     --quiet, --silent    don't print informational messages\n#     --tag=TAG            use configuration variables from tag TAG\n# -v, --verbose            print informational messages (default)\n#     --version            print version information\n# -h, --help               print short or long help message\n#\n# MODE must be one of the following:\n#\n#       clean              remove files from the build directory\n#       compile            compile a source file into a libtool object\n#       execute            automatically set library path, then run a program\n#       finish             complete the installation of libtool libraries\n#       install            install libraries or executables\n#       link               create a library or an executable\n#       uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#       host-triplet:\t$host\n#       shell:\t\t$SHELL\n#       compiler:\t\t$LTCC\n#       compiler flags:\t\t$LTCFLAGS\n#       linker:\t\t$LD (gnu? $with_gnu_ld)\n#       $progname:\t\t(GNU libtool) 2.2.6\n#       automake:\t\t$automake_version\n#       autoconf:\t\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n\nPROGRAM=ltmain.sh\nPACKAGE=libtool\nVERSION=2.2.6\nTIMESTAMP=\"\"\npackage_revision=1.3012\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# NLS nuisances: We save the old values to restore during execute mode.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\n\n$lt_unset CDPATH\n\n\n\n\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"echo\"}\n: ${EGREP=\"/usr/bin/grep -E\"}\n: ${FGREP=\"/usr/bin/grep -F\"}\n: ${GREP=\"/usr/bin/grep\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SED=\"/opt/local/bin/gsed\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\n# Generated shell functions inserted here.\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar=\"s,^/\\([^/]*\\).*$,\\1,\"\npathcdr=\"s,^/[^/]*,,\"\nremovedotparts=\"s@/\\(\\./\\)\\{1,\\}@/@g;s,/\\.$,/,\"\ncollapseslashes=\"s@/\\{1,\\}@/@g\"\nfinalslash=\"s,/*$,/,\"\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n# The name of this program:\n# In the unlikely event $progname began with a '-', it would play havoc with\n# func_echo (imagine progname=-n), so we prepend ./ in that case:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\ncase $progname in\n  -*) progname=./$progname ;;\nesac\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=:\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname${mode+: }$mode: $*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname${mode+: }$mode: \"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname${mode+: }$mode: warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"X$my_directory_path\" | $Xsed -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"X$my_dir_list\" | $Xsed -e 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"X$my_tmpdir\" | $Xsed\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"X$1\" | $Xsed -e \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"X$1\" | $Xsed \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $SED -n '/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $SED -n '/^# Usage:/,/# -h/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    $ECHO\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(automake --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(autoconf --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n     }' < \"$progpath\"\n    exit $?\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    func_error \"missing argument for $1\"\n    exit_cmd=exit\n}\n\nexit_cmd=:\n\n\n\n\n\n# Check that we have a working $ECHO.\nif test \"X$1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X$1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t'; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell, and then maybe $ECHO will work.\n  exec $SHELL \"$progpath\" --no-reexec ${1+\"$@\"}\nfi\n\nif test \"X$1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n$*\nEOF\n  exit $EXIT_SUCCESS\nfi\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\n# $mode is unset\nnonopt=\nexecute_dlfiles=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\nopt_dry_run=false\nopt_duplicate_deps=false\nopt_silent=false\nopt_debug=:\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    $ECHO \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      $ECHO \"enable shared libraries\"\n    else\n      $ECHO \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      $ECHO \"enable static libraries\"\n    else\n      $ECHO \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# Parse options once, thoroughly.  This comes as soon as possible in\n# the script to make things like `libtool --version' happen quickly.\n{\n\n  # Shorthand for --mode=foo, only valid as the first argument\n  case $1 in\n  clean|clea|cle|cl)\n    shift; set dummy --mode clean ${1+\"$@\"}; shift\n    ;;\n  compile|compil|compi|comp|com|co|c)\n    shift; set dummy --mode compile ${1+\"$@\"}; shift\n    ;;\n  execute|execut|execu|exec|exe|ex|e)\n    shift; set dummy --mode execute ${1+\"$@\"}; shift\n    ;;\n  finish|finis|fini|fin|fi|f)\n    shift; set dummy --mode finish ${1+\"$@\"}; shift\n    ;;\n  install|instal|insta|inst|ins|in|i)\n    shift; set dummy --mode install ${1+\"$@\"}; shift\n    ;;\n  link|lin|li|l)\n    shift; set dummy --mode link ${1+\"$@\"}; shift\n    ;;\n  uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n    shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n    ;;\n  esac\n\n  # Parse non-mode specific arguments:\n  while test \"$#\" -gt 0; do\n    opt=\"$1\"\n    shift\n\n    case $opt in\n      --config)\t\tfunc_config\t\t\t\t\t;;\n\n      --debug)\t\tpreserve_args=\"$preserve_args $opt\"\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\topt_debug='set -x'\n\t\t\t$opt_debug\n\t\t\t;;\n\n      -dlopen)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\texecute_dlfiles=\"$execute_dlfiles $1\"\n\t\t\tshift\n\t\t\t;;\n\n      --dry-run | -n)\topt_dry_run=:\t\t\t\t\t;;\n      --features)       func_features\t\t\t\t\t;;\n      --finish)\t\tmode=\"finish\"\t\t\t\t\t;;\n\n      --mode)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tcase $1 in\n\t\t\t  # Valid mode arguments:\n\t\t\t  clean)\t;;\n\t\t\t  compile)\t;;\n\t\t\t  execute)\t;;\n\t\t\t  finish)\t;;\n\t\t\t  install)\t;;\n\t\t\t  link)\t\t;;\n\t\t\t  relink)\t;;\n\t\t\t  uninstall)\t;;\n\n\t\t\t  # Catch anything else as an error\n\t\t\t  *) func_error \"invalid argument for $opt\"\n\t\t\t     exit_cmd=exit\n\t\t\t     break\n\t\t\t     ;;\n\t\t        esac\n\n\t\t\tmode=\"$1\"\n\t\t\tshift\n\t\t\t;;\n\n      --preserve-dup-deps)\n\t\t\topt_duplicate_deps=:\t\t\t\t;;\n\n      --quiet|--silent)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=:\n\t\t\t;;\n\n      --verbose| -v)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=false\n\t\t\t;;\n\n      --tag)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tpreserve_args=\"$preserve_args $opt $1\"\n\t\t\tfunc_enable_tag \"$1\"\t# tagname is set here\n\t\t\tshift\n\t\t\t;;\n\n      # Separate optargs to long options:\n      -dlopen=*|--mode=*|--tag=*)\n\t\t\tfunc_opt_split \"$opt\"\n\t\t\tset dummy \"$func_opt_split_opt\" \"$func_opt_split_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t\t;;\n      --help)\t\topt_help=:\t\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t\t;;\n\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\"\t;;\n\n      *)\t\tnonopt=\"$opt\"\n\t\t\tbreak\n\t\t\t;;\n    esac\n  done\n\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_duplicate_deps\n      ;;\n  esac\n\n  # Having warned about all mis-specified options, bail out if\n  # anything was wrong.\n  $exit_cmd $EXIT_FAILURE\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n$opt_help || {\n  # Sanity checks first:\n  func_check_version_match\n\n  if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n    func_fatal_configuration \"not configured to build any kind of library\"\n  fi\n\n  test -z \"$mode\" && func_fatal_error \"error: you must specify a MODE.\"\n\n\n  # Darwin sucks\n  eval std_shrext=\\\"$shrext_cmds\\\"\n\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    func_error \"unrecognized option \\`-dlopen'\"\n    $ECHO \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$progname --help --mode=$mode' for more information.\"\n}\n\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_ltwrapper_scriptname_result=\"\"\n    if func_ltwrapper_executable_p \"$1\"; then\n\tfunc_dirname_and_basename \"$1\" \"\" \".\"\n\tfunc_stripname '' '.exe' \"$func_basename_result\"\n\tfunc_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n    fi\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n        func_quote_for_eval \"$arg\"\n\tCC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n      done\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_quote_for_eval \"$arg\"\n\t      CC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n\t    done\n\t    case \"$@ \" in\n\t      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          pie_flag=\"$pie_flag $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_quote_for_eval \"$arg\"\n\t    lastarg=\"$lastarg $func_quote_for_eval_result\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_quote_for_eval \"$lastarg\"\n      base_compile=\"$base_compile $func_quote_for_eval_result\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.obj | *.sx)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"X$srcfile\" | $Xsed -e 's%^.*/%%' -e 's%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      removelist=\"$removelist $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    removelist=\"$removelist $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval srcfile=\\\"$fix_srcfile_path\\\"\n    fi\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\ntest \"$mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to building PIC objects only\n  -prefer-non-pic   try to building non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$mode'\"\n        ;;\n    esac\n\n    $ECHO\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n\n    exit $?\n}\n\n  # Now that we've collected a possible --mode arg, show help if necessary\n  $opt_help && func_mode_help\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $execute_dlfiles; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  dir=\"$dir/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -*) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_quote_for_eval \"$file\"\n      args=\"$args $func_quote_for_eval_result\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\t$ECHO \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libdirs=\"$nonopt\"\n    admincmds=\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for dir\n      do\n\tlibdirs=\"$libdirs $dir\"\n      done\n\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || admincmds=\"$admincmds\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    $ECHO \"Libraries have been installed in:\"\n    for libdir in $libdirs; do\n      $ECHO \"   $libdir\"\n    done\n    $ECHO\n    $ECHO \"If you ever happen to want to link against installed libraries\"\n    $ECHO \"in a given directory, LIBDIR, you must either use libtool, and\"\n    $ECHO \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n    $ECHO \"flag during linking and do at least one of the following:\"\n    if test -n \"$shlibpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n      $ECHO \"     during execution\"\n    fi\n    if test -n \"$runpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n      $ECHO \"     during linking\"\n    fi\n    if test -n \"$hardcode_libdir_flag_spec\"; then\n      libdir=LIBDIR\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n      $ECHO \"   - use the \\`$flag' linker flag\"\n    fi\n    if test -n \"$admincmds\"; then\n      $ECHO \"   - have your system administrator run these commands:$admincmds\"\n    fi\n    if test -f /etc/ld.so.conf; then\n      $ECHO \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n    fi\n    $ECHO\n\n    $ECHO \"See any operating system documentation about shared libraries for\"\n    case $host in\n      solaris2.[6789]|solaris2.1[0-9])\n        $ECHO \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t$ECHO \"pages.\"\n\t;;\n      *)\n        $ECHO \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n        ;;\n    esac\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    exit $EXIT_SUCCESS\n}\n\ntest \"$mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       $ECHO \"X$nonopt\" | $GREP shtool >/dev/null; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    install_prog=\"$install_prog$func_quote_for_eval_result\"\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    for arg\n    do\n      if test -n \"$dest\"; then\n\tfiles=\"$files $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tcase \" $install_prog \" in\n\t*[\\\\\\ /]cp\\ *) ;;\n\t*) prev=$arg ;;\n\tesac\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      install_prog=\"$install_prog $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tstaticlibs=\"$staticlibs $file\"\n\t;;\n\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) current_libdirs=\"$current_libdirs $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) future_libdirs=\"$future_libdirs $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tdir=\"$dir$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"X$destdir\" | $Xsed -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && staticlibs=\"$staticlibs $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"X$lib\" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"X$relink_command\" | $Xsed -e 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"X$file$stripped_ext\" | $Xsed -e \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"X$objs$old_deplibs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_verbose \"extracting global C symbols from \\`$progfile'\"\n\t    $opt_dry_run || eval \"$NM $progfile | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n\t  $opt_dry_run || {\n\t    eval '$ECHO \": $name \" >> \"$nlist\"'\n\t    eval \"$NM $dlprefile 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t  }\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    $ECHO '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\n\"\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* )\n\t    $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n/* DATA imports from DLLs on WIN32 con't be const, because\n   runtime relocations are performed -- see ld's documentation\n   on pseudo-relocs.  */\"\n\t    lt_dlsym_const= ;;\n\t  *osf5*)\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n/* This system does not cope well with relocations in const data */\"\n\t    lt_dlsym_const= ;;\n\t  *)\n\t    lt_dlsym_const=const ;;\n\t  esac\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\nextern $lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\n$lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) symtab_cflags=\"$symtab_cflags $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then\n      win32_nmres=`eval $NM -f posix -A $1 |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" 'exit $?'\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n\n# func_emit_wrapper_part1 [arg=no]\n#\n# Emit the first part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part1 ()\n{\n\tfunc_emit_wrapper_part1_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part1_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='${SED} -e 1s/^X//'\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    ECHO=\\\"$qecho\\\"\n    file=\\\"\\$0\\\"\n    # Make sure echo works.\n    if test \\\"X\\$1\\\" = X--no-reexec; then\n      # Discard the --no-reexec flag, and continue.\n      shift\n    elif test \\\"X\\`{ \\$ECHO '\\t'; } 2>/dev/null\\`\\\" = 'X\\t'; then\n      # Yippee, \\$ECHO works!\n      :\n    else\n      # Restart under the correct shell, and then maybe \\$ECHO will work.\n      exec $SHELL \\\"\\$0\\\" --no-reexec \\${1+\\\"\\$@\\\"}\n    fi\n  fi\\\n\"\n\t$ECHO \"\\\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  done\n\"\n}\n# end: func_emit_wrapper_part1\n\n# func_emit_wrapper_part2 [arg=no]\n#\n# Emit the second part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part2 ()\n{\n\tfunc_emit_wrapper_part2_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part2_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_part2_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"X\\$thisdir\\\" | \\$Xsed -e 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"X\\$$shlibpath_var\\\" | \\$Xsed -e 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t# fixup the dll searchpath if we need to.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n\"\n\tcase $host in\n\t# Backslashes separate directories on plain windows\n\t*-*-mingw | *-*-os2* | *-cegcc*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\n\t*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\tesac\n\t$ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    $ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n# end: func_emit_wrapper_part2\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_arg1=$1\n\tfi\n\n\t# split this up so that func_emit_cwrapperexe_src\n\t# can call each part independently.\n\tfunc_emit_wrapper_part1 \"${func_emit_wrapper_arg1}\"\n\tfunc_emit_wrapper_part2 \"${func_emit_wrapper_arg1}\"\n}\n\n\n# func_to_host_path arg\n#\n# Convert paths to host format when used with build tools.\n# Intended for use with \"native\" mingw (where libtool itself\n# is running under the msys shell), or in the following cross-\n# build environments:\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n# where wine is equipped with the `winepath' executable.\n# In the native mingw case, the (msys) shell automatically\n# converts paths for any non-msys applications it launches,\n# but that facility isn't available from inside the cwrapper.\n# Similar accommodations are necessary for $host mingw and\n# $build cygwin.  Calling this function does no harm for other\n# $host/$build combinations not listed above.\n#\n# ARG is the path (on $build) that should be converted to\n# the proper representation for $host. The result is stored\n# in $func_to_host_path_result.\nfunc_to_host_path ()\n{\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        case $build in\n          *mingw* ) # actually, msys\n            # awkward: cmd appends spaces to result\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_path_tmp1=`( cmd //c echo \"$1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_path_tmp1=`cygpath -w \"$1\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # Unfortunately, winepath does not exit with a non-zero\n            # error code, so we are forced to check the contents of\n            # stdout. On the other hand, if the command is not\n            # found, the shell will set an exit code of 127 and print\n            # *an error message* to stdout. So we must check for both\n            # error code of zero AND non-empty stdout, which explains\n            # the odd construction:\n            func_to_host_path_tmp1=`winepath -w \"$1\" 2>/dev/null`\n            if test \"$?\" -eq 0 && test -n \"${func_to_host_path_tmp1}\"; then\n              func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n                $SED -e \"$lt_sed_naive_backslashify\"`\n            else\n              # Allow warning below.\n              func_to_host_path_result=\"\"\n            fi\n            ;;\n        esac\n        if test -z \"$func_to_host_path_result\" ; then\n          func_error \"Could not determine host path corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback:\n          func_to_host_path_result=\"$1\"\n        fi\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_path\n\n# func_to_host_pathlist arg\n#\n# Convert pathlists to host format when used with build tools.\n# See func_to_host_path(), above. This function supports the\n# following $build/$host combinations (but does no harm for\n# combinations not listed here):\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n#\n# Path separators are also converted from $build format to\n# $host format. If ARG begins or ends with a path separator\n# character, it is preserved (but converted to $host format)\n# on output.\n#\n# ARG is a pathlist (on $build) that should be converted to\n# the proper representation on $host. The result is stored\n# in $func_to_host_pathlist_result.\nfunc_to_host_pathlist ()\n{\n  func_to_host_pathlist_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        # Remove leading and trailing path separator characters from\n        # ARG. msys behavior is inconsistent here, cygpath turns them\n        # into '.;' and ';.', and winepath ignores them completely.\n        func_to_host_pathlist_tmp2=\"$1\"\n        # Once set for this call, this variable should not be\n        # reassigned. It is used in tha fallback case.\n        func_to_host_pathlist_tmp1=`echo \"$func_to_host_pathlist_tmp2\" |\\\n          $SED -e 's|^:*||' -e 's|:*$||'`\n        case $build in\n          *mingw* ) # Actually, msys.\n            # Awkward: cmd appends spaces to result.\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_pathlist_tmp2=`( cmd //c echo \"$func_to_host_pathlist_tmp1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_pathlist_tmp2=`cygpath -w -p \"$func_to_host_pathlist_tmp1\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # unfortunately, winepath doesn't convert pathlists\n            func_to_host_pathlist_result=\"\"\n            func_to_host_pathlist_oldIFS=$IFS\n            IFS=:\n            for func_to_host_pathlist_f in $func_to_host_pathlist_tmp1 ; do\n              IFS=$func_to_host_pathlist_oldIFS\n              if test -n \"$func_to_host_pathlist_f\" ; then\n                func_to_host_path \"$func_to_host_pathlist_f\"\n                if test -n \"$func_to_host_path_result\" ; then\n                  if test -z \"$func_to_host_pathlist_result\" ; then\n                    func_to_host_pathlist_result=\"$func_to_host_path_result\"\n                  else\n                    func_to_host_pathlist_result=\"$func_to_host_pathlist_result;$func_to_host_path_result\"\n                  fi\n                fi\n              fi\n              IFS=:\n            done\n            IFS=$func_to_host_pathlist_oldIFS\n            ;;\n        esac\n        if test -z \"$func_to_host_pathlist_result\" ; then\n          func_error \"Could not determine the host path(s) corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback. This may break if $1 contains DOS-style drive\n          # specifications. The fix is not to complicate the expression\n          # below, but for the user to provide a working wine installation\n          # with winepath so that path translation in the cross-to-mingw\n          # case works properly.\n          lt_replace_pathsep_nix_to_dos=\"s|:|;|g\"\n          func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp1\" |\\\n            $SED -e \"$lt_replace_pathsep_nix_to_dos\"`\n        fi\n        # Now, add the leading and trailing path separators back\n        case \"$1\" in\n          :* ) func_to_host_pathlist_result=\";$func_to_host_pathlist_result\"\n            ;;\n        esac\n        case \"$1\" in\n          *: ) func_to_host_pathlist_result=\"$func_to_host_pathlist_result;\"\n            ;;\n        esac\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_pathlist\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n\n   Currently, it simply execs the wrapper *script* \"$SHELL $output\",\n   but could eventually absorb all of the scripts functionality and\n   exec $objdir/$outputname directly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n# define setmode _setmode\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n#  define HAVE_SETENV\n#  ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n#  endif\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n#ifdef _MSC_VER\n# define S_IXUSR _S_IEXEC\n# define stat _stat\n# ifndef _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifdef __CYGWIN__\n# define FOPEN_WB \"wb\"\n#endif\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#undef LTWRAPPER_DEBUGPRINTF\n#if defined DEBUGWRAPPER\n# define LTWRAPPER_DEBUGPRINTF(args) ltwrapper_debugprintf args\nstatic void\nltwrapper_debugprintf (const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    (void) vfprintf (stderr, fmt, args);\n    va_end (args);\n}\n#else\n# define LTWRAPPER_DEBUGPRINTF(args)\n#endif\n\nconst char *program_name = NULL;\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_fatal (const char *message, ...);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_opt_process_env_set (const char *arg);\nvoid lt_opt_process_env_prepend (const char *arg);\nvoid lt_opt_process_env_append (const char *arg);\nint lt_split_name_value (const char *arg, char** name, char** value);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\n\nstatic const char *script_text_part1 =\nEOF\n\n\t    func_emit_wrapper_part1 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\t    cat <<EOF\n\nstatic const char *script_text_part2 =\nEOF\n\t    func_emit_wrapper_part2 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\n\t    cat <<EOF\nconst char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_pathlist \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_pathlist \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n#define LTWRAPPER_OPTION_PREFIX_LENGTH  5\n\nstatic const size_t opt_prefix_len         = LTWRAPPER_OPTION_PREFIX_LENGTH;\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\n\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\n\nstatic const size_t env_set_opt_len     = LTWRAPPER_OPTION_PREFIX_LENGTH + 7;\nstatic const char *env_set_opt          = LTWRAPPER_OPTION_PREFIX \"env-set\";\n  /* argument is putenv-style \"foo=bar\", value of foo is set to bar */\n\nstatic const size_t env_prepend_opt_len = LTWRAPPER_OPTION_PREFIX_LENGTH + 11;\nstatic const char *env_prepend_opt      = LTWRAPPER_OPTION_PREFIX \"env-prepend\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is bar${foo} */\n\nstatic const size_t env_append_opt_len  = LTWRAPPER_OPTION_PREFIX_LENGTH + 10;\nstatic const char *env_append_opt       = LTWRAPPER_OPTION_PREFIX \"env-append\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is ${foo}bar */\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) argv[0]      : %s\\n\", argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) program_name : %s\\n\", program_name));\n\n  /* very simple arg parsing; don't want to rely on getopt */\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  printf (\"%s\", script_text_part1);\n\t  printf (\"%s\", script_text_part2);\n\t  return 0;\n\t}\n    }\n\n  newargz = XMALLOC (char *, argc + 1);\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (\"Couldn't find %s\", argv[0]);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (before symlink chase) at : %s\\n\",\n\t\t\t  tmp_pathspec));\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (after symlink chase) at : %s\\n\",\n\t\t\t  actual_cwrapper_path));\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup( base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(main) libtool target name: %s\\n\",\n\t\t\t  target_name));\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strncmp (argv[i], env_set_opt, env_set_opt_len) == 0)\n        {\n          if (argv[i][env_set_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_set_opt_len + 1;\n              lt_opt_process_env_set (p);\n            }\n          else if (argv[i][env_set_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_set (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_set_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_prepend_opt, env_prepend_opt_len) == 0)\n        {\n          if (argv[i][env_prepend_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_prepend_opt_len + 1;\n              lt_opt_process_env_prepend (p);\n            }\n          else if (argv[i][env_prepend_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_prepend (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_prepend_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_append_opt, env_append_opt_len) == 0)\n        {\n          if (argv[i][env_append_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_append_opt_len + 1;\n              lt_opt_process_env_append (p);\n            }\n          else if (argv[i][env_append_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_append (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_append_opt);\n          continue;\n        }\n      if (strncmp (argv[i], ltwrapper_option_prefix, opt_prefix_len) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (\"Unrecognized option in %s namespace: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\n  LTWRAPPER_DEBUGPRINTF     ((\"(main) lt_argv_zero : %s\\n\", (lt_argv_zero ? lt_argv_zero : \"<NULL>\")));\n  for (i = 0; i < newargc; i++)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"(main) newargz[%d]   : %s\\n\", i, (newargz[i] ? newargz[i] : \"<NULL>\")));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      LTWRAPPER_DEBUGPRINTF ((\"(main) failed to launch target \\\"%s\\\": errno = %d\\n\", lt_argv_zero, errno));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (\"Memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(check_executable)  : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(make_executable)   : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(find_executable)   : %s\\n\",\n\t\t\t  wrapper ? (*wrapper ? wrapper : \"EMPTY!\") : \"NULL!\"));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (\"getcwd failed\");\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (\"getcwd failed\");\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"checking path component for symlinks: %s\\n\",\n\t\t\t      tmp_pathspec));\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  char *errstr = strerror (errno);\n\t  lt_fatal (\"Error accessing file %s (%s)\", tmp_pathspec, errstr);\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (\"Could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nstatic void\nlt_error_core (int exit_status, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s: %s: \", program_name, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_setenv) setting '%s' to '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nint\nlt_split_name_value (const char *arg, char** name, char** value)\n{\n  const char *p;\n  int len;\n  if (!arg || !*arg)\n    return 1;\n\n  p = strchr (arg, (int)'=');\n\n  if (!p)\n    return 1;\n\n  *value = xstrdup (++p);\n\n  len = strlen (arg) - strlen (*value);\n  *name = XMALLOC (char, len);\n  strncpy (*name, arg, len-1);\n  (*name)[len - 1] = '\\0';\n\n  return 0;\n}\n\nvoid\nlt_opt_process_env_set (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_set_opt, arg);\n    }\n\n  lt_setenv (name, value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_prepend (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_prepend_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 0);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_append (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_append_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 1);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\n\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) deplibs=\"$deplibs $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  weak_libs=\"$weak_libs $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname '-L' '' \"$arg\"\n\tdir=$func_stripname_result\n\tif test -z \"$dir\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"X$dir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $wl$func_quote_for_eval_result\"\n\t  linker_flags=\"$linker_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -F/path gives path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-* pass through profiling flag for GCC\n      # @file GCC response files\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"X\\${$shlibpath_var}\\\" \\| \\$Xsed -e \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_duplicate_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  case $lib in\n\t  *.la)\tfunc_source \"$lib\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n            deplib_base=`$ECHO \"X$deplib\" | $Xsed -e \"$basename\"`\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) deplibs=\"$deplibs $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    dir=$func_stripname_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"X$deplib\\\"\" 2>/dev/null | $Xsed -e 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\t$ECHO \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"X$inherited_linker_flags\" | $Xsed -e 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) new_inherited_linker_flags=\"$new_inherited_linker_flags $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \"X $dependency_libs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t    # Keep a list of preopened convenience libraries to check\n\t    # that they are being used correctly in the link pass.\n\t    test -z \"$libdir\" && \\\n\t\tdlpreconveniencelibs=\"$dlpreconveniencelibs $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) temp_rpath=\"$temp_rpath$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    $ECHO\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  $ECHO\n\t\t\t  $ECHO \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  $ECHO \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$dir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    $ECHO\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t    $ECHO \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      $ECHO \"*** But as you try to build a module library, libtool will still create \"\n\t      $ECHO \"*** a static module, that should work as long as the dlopening application\"\n\t      $ECHO \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\t$ECHO\n\t\t$ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t\t$ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\t$ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t\t$ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) xrpath=\"$xrpath $temp_xrpath\";;\n\t\t   esac;;\n\t      *) temp_deplibs=\"$temp_deplibs $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  newlib_search_path=\"$newlib_search_path $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=\"$func_dirname_result\"\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      compiler_flags=\"$compiler_flags ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      linker_flags=\"$linker_flags -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) lib_search_path=\"$lib_search_path $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  tmp_libs=\"$tmp_libs $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      objs=\"$objs$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  $ECHO\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  libobjs=\"$libobjs $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  verstring=\"$verstring:${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      libobjs=\"$libobjs $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       removelist=\"$removelist $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\toldlibs=\"$oldlibs $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}'$/d' -e \"$lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"X$lib_search_path \" | $Xsed -e \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"X$deplibs \" | $Xsed -e \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"X$dependency_libs \" | $Xsed -e \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  temp_xrpath=\"$temp_xrpath -R$libdir\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlfiles=\"$dlfiles $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlprefiles=\"$dlprefiles $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      deplibs=\"$deplibs -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    $ECHO\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    $ECHO \"*** shared version of the library, which I believe you do not have\"\n\t\t    $ECHO \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    $ECHO \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      $ECHO\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t      $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      $ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t      $ECHO \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      $ECHO \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  $ECHO\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  $ECHO \"*** make it link in!  You will probably need to install it or some\"\n\t\t  $ECHO \"*** library that it depends on before this library will be fully\"\n\t\t  $ECHO \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"X$potlib\" | $Xsed -e 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tnewdeplibs=\"$newdeplibs $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"X$potent_lib\\\"\" 2>/dev/null | $Xsed -e 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \"X $deplibs\" | $Xsed \\\n\t      -e 's/ -lc$//' -e 's/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \"X $tmp_deplibs\" | $Xsed -e \"s,$i,,\"`\n\t    done\n\t  fi\n\t  if $ECHO \"X $tmp_deplibs\" | $Xsed -e 's/[\t ]//g' |\n\t     $GREP . >/dev/null; then\n\t    $ECHO\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      $ECHO \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      $ECHO \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    $ECHO \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t  fi\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    $ECHO\n\t    $ECHO \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    $ECHO \"*** a static module, that should work as long as the dlopening\"\n\t    $ECHO \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      $ECHO\n\t      $ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t      $ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      $ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t      $ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    $ECHO \"*** The inter-library dependencies that have been dropped here will be\"\n\t    $ECHO \"*** automatically added whenever a program is linked with this library\"\n\t    $ECHO \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      $ECHO\n\t      $ECHO \"*** Since this library must not contain undefined symbols,\"\n\t      $ECHO \"*** because either the platform does not support them or\"\n\t      $ECHO \"*** it was explicitly requested with -no-undefined,\"\n\t      $ECHO \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \"X $deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    hardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tdep_rpath=\"$dep_rpath $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    if test -n \"$hardcode_libdir_flag_spec_ld\"; then\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec_ld\\\"\n\t    else\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\n\t    fi\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      rpath=\"$rpath$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  linknames=\"$linknames $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  delfiles=\"$delfiles $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      eval cmd=\\\"$cmd\\\"\n\t      func_len \" $cmd\"\n\t      len=$func_len_result\n\t      if test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    tmp_deplibs=\"$tmp_deplibs $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    libobjs=\"$libobjs $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  output_la=`$ECHO \"X$output\" | $Xsed -e \"$basename\"`\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    $ECHO 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    $ECHO ')' >> $output\n\t    delfiles=\"$delfiles $output\"\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    delfiles=\"$delfiles $output\"\n\t    output=$firstobj\\\"$file_list_spec$output\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    eval concat_cmds=\\\"$reload_cmds $objlist $last_robj\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds $objlist $last_robj~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=$obj\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds $objlist $last_robj\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      delfiles=\"$delfiles $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  libobjs=\"$libobjs $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"X$tmp_whole_archive_flags\" | $Xsed -e 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}$'/d' -e '/\\.lib$/d' -e \"$lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      compile_command=\"$compile_command ${wl}-bind_at_load\"\n\t      finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      compile_command=\"$compile_command $compile_deplibs\"\n      finalize_command=\"$finalize_command $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_perm_rpath=\"$finalize_perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"X$compile_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"X$finalize_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *cegcc)\n        # Disable wrappers for cegcc, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"X$compile_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"X$compile_var$compile_command$compile_rpath\" | $Xsed -e 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Quote $ECHO for shipping.\n      if test \"X$ECHO\" = \"X$SHELL $progpath --fallback-echo\"; then\n\tcase $progpath in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) qecho=\"$SHELL $progpath --fallback-echo\";;\n\t*) qecho=\"$SHELL `pwd`/$progpath --fallback-echo\";;\n\tesac\n\tqecho=`$ECHO \"X$qecho\" | $Xsed -e \"$sed_quote_subst\"`\n      else\n\tqecho=`$ECHO \"X$ECHO\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    oldobjs=\"$oldobjs $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tgenerated=\"$generated $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\toldobjs=\"$oldobjs $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  oldobjs=\"$oldobjs $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  $ECHO \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      oldobjs=\"$oldobjs $gentop/$newobj\"\n\t      ;;\n\t    *) oldobjs=\"$oldobjs $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tnewdependency_libs=\"$newdependency_libs $libdir/$name\"\n\t\t;;\n\t      *) newdependency_libs=\"$newdependency_libs $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlfiles=\"$newdlfiles $libdir/$name\"\n\t\t;;\n\t      *) newdlfiles=\"$newdlfiles $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlprefiles=\"$newdlprefiles $libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlfiles=\"$newdlfiles $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlprefiles=\"$newdlprefiles $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$mode\" = link || test \"$mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) RM=\"$RM $arg\"; rmforce=yes ;;\n      -*) RM=\"$RM $arg\" ;;\n      *) files=\"$files $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    origobjdir=\"$objdir\"\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\tobjdir=\"$origobjdir\"\n      else\n\tobjdir=\"$dir/$origobjdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$mode\" = uninstall && objdir=\"$dir\"\n\n      # Remember objdir for removal later, being careful to avoid duplicates\n      if test \"$mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $objdir \"*) ;;\n\t  *) rmdirs=\"$rmdirs $objdir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    rmfiles=\"$rmfiles $objdir/$n\"\n\t  done\n\t  test -n \"$old_library\" && rmfiles=\"$rmfiles $objdir/$old_library\"\n\n\t  case \"$mode\" in\n\t  clean)\n\t    case \"  $library_names \" in\n\t    # \"  \" in the beginning catches empty $dlname\n\t    *\" $dlname \"*) ;;\n\t    *) rmfiles=\"$rmfiles $objdir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && rmfiles=\"$rmfiles $objdir/$name $objdir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    rmfiles=\"$rmfiles $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      rmfiles=\"$rmfiles $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    rmfiles=\"$rmfiles $objdir/$name $objdir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      rmfiles=\"$rmfiles $objdir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      rmfiles=\"$rmfiles $objdir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n    objdir=\"$origobjdir\"\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$mode\" = uninstall || test \"$mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/config/tcl.m4": "#------------------------------------------------------------------------\n# SC_PATH_TCLCONFIG --\n#\n#\tLocate the tclConfig.sh file and perform a sanity check on\n#\tthe Tcl compile flags\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tcl=...\n#\n#\tDefines the following vars:\n#\t\tTCL_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tclConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_TCLCONFIG], [\n    #\n    # Ok, lets find the tcl configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tcl\n    #\n\n    if test x\"${no_tcl}\" = x ; then\n\t# we reset no_tcl in case something fails here\n\tno_tcl=true\n\tAC_ARG_WITH(tcl, [  --with-tcl              directory containing tcl configuration (tclConfig.sh)], with_tclconfig=${withval})\n\tAC_MSG_CHECKING([for Tcl configuration])\n\tAC_CACHE_VAL(ac_cv_c_tclconfig,[\n\n\t    # First check to see if --with-tcl was specified.\n\t    case \"${host}\" in\n\t\t*-*-cygwin*) platDir=\"win\" ;;\n\t\t*) platDir=\"unix\" ;;\n\t    esac\n\t    if test x\"${with_tclconfig}\" != x ; then\n\t\tif test -f \"${with_tclconfig}/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=`(cd ${with_tclconfig}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tclconfig} directory doesn't contain tclConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tcl installation\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tcl \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tcl \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tcl \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/$platDir/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i/$platDir; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tcl.framework/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i/Tcl.framework; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tcl \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/$platDir/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=`(cd $i/$platDir; pwd)`\n\t\t    break\n\t\tfi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t    TCL_BIN_DIR=\"# no Tcl configs found\"\n\t    AC_MSG_WARN([Can't find Tcl configuration definitions])\n\telse\n\t    no_tcl=\n\t    TCL_BIN_DIR=${ac_cv_c_tclconfig}\n\t    AC_MSG_RESULT([found ${TCL_BIN_DIR}/tclConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_PATH_TKCONFIG --\n#\n#\tLocate the tkConfig.sh file\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tk=...\n#\n#\tDefines the following vars:\n#\t\tTK_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tkConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_TKCONFIG], [\n    #\n    # Ok, lets find the tk configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tk\n    #\n\n    if test x\"${no_tk}\" = x ; then\n\t# we reset no_tk in case something fails here\n\tno_tk=true\n\tAC_ARG_WITH(tk, [  --with-tk               directory containing tk configuration (tkConfig.sh)], with_tkconfig=${withval})\n\tAC_MSG_CHECKING([for Tk configuration])\n\tAC_CACHE_VAL(ac_cv_c_tkconfig,[\n\n\t    # First check to see if --with-tkconfig was specified.\n\t    if test x\"${with_tkconfig}\" != x ; then\n\t\tif test -f \"${with_tkconfig}/tkConfig.sh\" ; then\n\t\t    ac_cv_c_tkconfig=`(cd ${with_tkconfig}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tkconfig} directory doesn't contain tkConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tk library\n\t    case \"${host}\" in\n\t\t*-*-cygwin*) platDir=\"win\" ;;\n\t\t*) platDir=\"unix\" ;;\n\t    esac\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tk \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tk \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tk \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/$platDir/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/$platDir; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tk.framework/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/Tk.framework; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tk \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/$platDir/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/$platDir; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t    TK_BIN_DIR=\"# no Tk configs found\"\n\t    AC_MSG_WARN([Can't find Tk configuration definitions])\n\telse\n\t    no_tk=\n\t    TK_BIN_DIR=${ac_cv_c_tkconfig}\n\t    AC_MSG_RESULT([found ${TK_BIN_DIR}/tkConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_LOAD_TCLCONFIG --\n#\n#\tLoad the tclConfig.sh file\n#\n# Arguments:\n#\t\n#\tRequires the following vars to be set:\n#\t\tTCL_BIN_DIR\n#\n# Results:\n#\n#\tSubst the following vars:\n#\t\tTCL_BIN_DIR\n#\t\tTCL_SRC_DIR\n#\t\tTCL_LIB_FILE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_LOAD_TCLCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TCL_BIN_DIR}/tclConfig.sh])\n\n    if test -f \"${TCL_BIN_DIR}/tclConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. ${TCL_BIN_DIR}/tclConfig.sh\n    else\n        AC_MSG_RESULT([could not find ${TCL_BIN_DIR}/tclConfig.sh])\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FILE=\\\"${TCL_LIB_FILE}\\\"\"\n    eval \"TCL_STUB_LIB_FILE=\\\"${TCL_STUB_LIB_FILE}\\\"\"\n\n    # If the TCL_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TCL_LIB_SPEC will be set to the value\n    # of TCL_BUILD_LIB_SPEC. An extension should make use of TCL_LIB_SPEC\n    # instead of TCL_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f \"${TCL_BIN_DIR}/Makefile\" ; then\n        TCL_LIB_SPEC=${TCL_BUILD_LIB_SPEC}\n        TCL_STUB_LIB_SPEC=${TCL_BUILD_STUB_LIB_SPEC}\n        TCL_STUB_LIB_PATH=${TCL_BUILD_STUB_LIB_PATH}\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tcl was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tcl.framework installed in an arbitary location.\n\tcase ${TCL_DEFS} in\n\t    *TCL_FRAMEWORK*)\n\t\tif test -f \"${TCL_BIN_DIR}/${TCL_LIB_FILE}\"; then\n\t\t    for i in \"`cd ${TCL_BIN_DIR}; pwd`\" \\\n\t\t\t     \"`cd ${TCL_BIN_DIR}/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TCL_LIB_FILE}.framework\"; then\n\t\t\t    TCL_LIB_SPEC=\"-F`dirname \"$i\"` -framework ${TCL_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f \"${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}\"; then\n\t\t    TCL_STUB_LIB_SPEC=\"-L${TCL_BIN_DIR} ${TCL_STUB_LIB_FLAG}\"\n\t\t    TCL_STUB_LIB_PATH=\"${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FLAG=\\\"${TCL_LIB_FLAG}\\\"\"\n    eval \"TCL_LIB_SPEC=\\\"${TCL_LIB_SPEC}\\\"\"\n    eval \"TCL_STUB_LIB_FLAG=\\\"${TCL_STUB_LIB_FLAG}\\\"\"\n    eval \"TCL_STUB_LIB_SPEC=\\\"${TCL_STUB_LIB_SPEC}\\\"\"\n\n    AC_SUBST(TCL_VERSION)\n    AC_SUBST(TCL_PATCH_LEVEL)\n    AC_SUBST(TCL_BIN_DIR)\n    AC_SUBST(TCL_SRC_DIR)\n\n    AC_SUBST(TCL_LIB_FILE)\n    AC_SUBST(TCL_LIB_FLAG)\n    AC_SUBST(TCL_LIB_SPEC)\n\n    AC_SUBST(TCL_STUB_LIB_FILE)\n    AC_SUBST(TCL_STUB_LIB_FLAG)\n    AC_SUBST(TCL_STUB_LIB_SPEC)\n])\n\n#------------------------------------------------------------------------\n# SC_LOAD_TKCONFIG --\n#\n#\tLoad the tkConfig.sh file\n#\n# Arguments:\n#\t\n#\tRequires the following vars to be set:\n#\t\tTK_BIN_DIR\n#\n# Results:\n#\n#\tSets the following vars that should be in tkConfig.sh:\n#\t\tTK_BIN_DIR\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_LOAD_TKCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TK_BIN_DIR}/tkConfig.sh])\n\n    if test -f \"${TK_BIN_DIR}/tkConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. ${TK_BIN_DIR}/tkConfig.sh\n    else\n        AC_MSG_RESULT([could not find ${TK_BIN_DIR}/tkConfig.sh])\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FILE=\\\"${TK_LIB_FILE}\\\"\"\n    eval \"TK_STUB_LIB_FILE=\\\"${TK_STUB_LIB_FILE}\\\"\"\n\n    # If the TK_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TK_LIB_SPEC will be set to the value\n    # of TK_BUILD_LIB_SPEC. An extension should make use of TK_LIB_SPEC\n    # instead of TK_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f \"${TK_BIN_DIR}/Makefile\" ; then\n        TK_LIB_SPEC=${TK_BUILD_LIB_SPEC}\n        TK_STUB_LIB_SPEC=${TK_BUILD_STUB_LIB_SPEC}\n        TK_STUB_LIB_PATH=${TK_BUILD_STUB_LIB_PATH}\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tk was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tk.framework installed in an arbitary location.\n\tcase ${TK_DEFS} in\n\t    *TK_FRAMEWORK*)\n\t\tif test -f \"${TK_BIN_DIR}/${TK_LIB_FILE}\"; then\n\t\t    for i in \"`cd ${TK_BIN_DIR}; pwd`\" \\\n\t\t\t     \"`cd ${TK_BIN_DIR}/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TK_LIB_FILE}.framework\"; then\n\t\t\t    TK_LIB_SPEC=\"-F`dirname \"$i\"` -framework ${TK_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f \"${TK_BIN_DIR}/${TK_STUB_LIB_FILE}\"; then\n\t\t    TK_STUB_LIB_SPEC=\"-L${TK_BIN_DIR} ${TK_STUB_LIB_FLAG}\"\n\t\t    TK_STUB_LIB_PATH=\"${TK_BIN_DIR}/${TK_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FLAG=\\\"${TK_LIB_FLAG}\\\"\"\n    eval \"TK_LIB_SPEC=\\\"${TK_LIB_SPEC}\\\"\"\n    eval \"TK_STUB_LIB_FLAG=\\\"${TK_STUB_LIB_FLAG}\\\"\"\n    eval \"TK_STUB_LIB_SPEC=\\\"${TK_STUB_LIB_SPEC}\\\"\"\n\n    AC_SUBST(TK_VERSION)\n    AC_SUBST(TK_BIN_DIR)\n    AC_SUBST(TK_SRC_DIR)\n\n    AC_SUBST(TK_LIB_FILE)\n    AC_SUBST(TK_LIB_FLAG)\n    AC_SUBST(TK_LIB_SPEC)\n\n    AC_SUBST(TK_STUB_LIB_FILE)\n    AC_SUBST(TK_STUB_LIB_FLAG)\n    AC_SUBST(TK_STUB_LIB_SPEC)\n])\n\n#------------------------------------------------------------------------\n# SC_PROG_TCLSH\n#\tLocate a tclsh shell installed on the system path. This macro\n#\twill only find a Tcl shell that already exists on the system.\n#\tIt will not find a Tcl shell in the Tcl build directory or\n#\ta Tcl shell that has been installed from the Tcl build directory.\n#\tIf a Tcl shell can't be located on the PATH, then TCLSH_PROG will\n#\tbe set to \"\". Extensions should take care not to create Makefile\n#\trules that are run by default and depend on TCLSH_PROG. An\n#\textension can't assume that an executable Tcl shell exists at\n#\tbuild time.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tTCLSH_PROG\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_PROG_TCLSH], [\n    AC_MSG_CHECKING([for tclsh])\n    AC_CACHE_VAL(ac_cv_path_tclsh, [\n\tsearch_path=`echo ${PATH} | sed -e 's/:/ /g'`\n\tfor dir in $search_path ; do\n\t    for j in `ls -r $dir/tclsh[[8-9]]* 2> /dev/null` \\\n\t\t    `ls -r $dir/tclsh* 2> /dev/null` ; do\n\t\tif test x\"$ac_cv_path_tclsh\" = x ; then\n\t\t    if test -f \"$j\" ; then\n\t\t\tac_cv_path_tclsh=$j\n\t\t\tbreak\n\t\t    fi\n\t\tfi\n\t    done\n\tdone\n    ])\n\n    if test -f \"$ac_cv_path_tclsh\" ; then\n\tTCLSH_PROG=\"$ac_cv_path_tclsh\"\n\tAC_MSG_RESULT([$TCLSH_PROG])\n    else\n\t# It is not an error if an installed version of Tcl can't be located.\n\tTCLSH_PROG=\"\"\n\tAC_MSG_RESULT([No tclsh found on PATH])\n    fi\n    AC_SUBST(TCLSH_PROG)\n])\n\n#------------------------------------------------------------------------\n# SC_BUILD_TCLSH\n#\tDetermine the fully qualified path name of the tclsh executable\n#\tin the Tcl build directory. This macro will correctly determine\n#\tthe name of the tclsh executable even if tclsh has not yet\n#\tbeen built in the build directory. The build tclsh must be used\n#\twhen running tests from an extension build directory. It is not\n#\tcorrect to use the TCLSH_PROG in cases like this.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tBUILD_TCLSH\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_BUILD_TCLSH], [\n    AC_MSG_CHECKING([for tclsh in Tcl build directory])\n    BUILD_TCLSH=${TCL_BIN_DIR}/tclsh\n    AC_MSG_RESULT([$BUILD_TCLSH])\n    AC_SUBST(BUILD_TCLSH)\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_SHARED --\n#\n#\tAllows the building of shared libraries\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-shared=yes|no\n#\n#\tDefines the following vars:\n#\t\tSTATIC_BUILD\tUsed for building import/export libraries\n#\t\t\t\ton Windows.\n#\n#\tSets the following vars:\n#\t\tSHARED_BUILD\tValue of 1 or 0\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_SHARED], [\n    AC_MSG_CHECKING([how to build libraries])\n    AC_ARG_ENABLE(shared,\n\t[  --enable-shared         build and link with shared libraries [--enable-shared]],\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n\n    if test \"${enable_shared+set}\" = set; then\n\tenableval=\"$enable_shared\"\n\ttcl_ok=$enableval\n    else\n\ttcl_ok=yes\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" ; then\n\tAC_MSG_RESULT([shared])\n\tSHARED_BUILD=1\n    else\n\tAC_MSG_RESULT([static])\n\tSHARED_BUILD=0\n\tAC_DEFINE(STATIC_BUILD)\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_FRAMEWORK --\n#\n#\tAllows the building of shared libraries into frameworks\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-framework=yes|no\n#\n#\tSets the following vars:\n#\t\tFRAMEWORK_BUILD\tValue of 1 or 0\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_FRAMEWORK], [\n    if test \"`uname -s`\" = \"Darwin\" ; then\n\tAC_MSG_CHECKING([how to package libraries])\n\tAC_ARG_ENABLE(framework,\n\t    [  --enable-framework      package shared libraries in MacOSX frameworks [--disable-framework]],\n\t    [enable_framework=$enableval], [enable_framework=no])\n\tif test $enable_framework = yes; then\n\t    if test $SHARED_BUILD = 0; then\n\t\tAC_MSG_WARN([Frameworks can only be built if --enable-shared is yes])\n\t\tenable_framework=no\n\t    fi\n\t    if test $tcl_corefoundation = no; then\n\t\tAC_MSG_WARN([Frameworks can only be used when CoreFoundation is available])\n\t\tenable_framework=no\n\t    fi\n\tfi\n\tif test $enable_framework = yes; then\n\t    AC_MSG_RESULT([framework])\n\t    FRAMEWORK_BUILD=1\n\telse\n\t    if test $SHARED_BUILD = 1; then\n\t\tAC_MSG_RESULT([shared library])\n\t    else\n\t\tAC_MSG_RESULT([static library])\n\t    fi\n\t    FRAMEWORK_BUILD=0\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_THREADS --\n#\n#\tSpecify if thread support should be enabled.  TCL_THREADS is\n#\tchecked so that if you are compiling an extension against a\n#\tthreaded core, your extension must be compiled threaded as well.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-threads\n#\n#\tSets the following vars:\n#\t\tTHREADS_LIBS\tThread library(s)\n#\n#\tDefines the following vars:\n#\t\tTCL_THREADS\n#\t\t_REENTRANT\n#\t\t_THREAD_SAFE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_THREADS], [\n    AC_ARG_ENABLE(threads, [  --enable-threads        build with threads],\n\t[tcl_ok=$enableval], [tcl_ok=no])\n\n    if test \"${TCL_THREADS}\" = 1; then\n\ttcl_threaded_core=1;\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" -o \"${TCL_THREADS}\" = 1; then\n\tTCL_THREADS=1\n\t# USE_THREAD_ALLOC tells us to try the special thread-based\n\t# allocator that significantly reduces lock contention\n\tAC_DEFINE(USE_THREAD_ALLOC)\n\tAC_DEFINE(_REENTRANT)\n\tif test \"`uname -s`\" = \"SunOS\" ; then\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)\n\tfi\n\tAC_DEFINE(_THREAD_SAFE)\n\tAC_CHECK_LIB(pthread,pthread_mutex_init,tcl_ok=yes,tcl_ok=no)\n\tif test \"$tcl_ok\" = \"no\"; then\n\t    # Check a little harder for __pthread_mutex_init in the same\n\t    # library, as some systems hide it there until pthread.h is\n\t    # defined.  We could alternatively do an AC_TRY_COMPILE with\n\t    # pthread.h, but that will work with libpthread really doesn't\n\t    # exist, like AIX 4.2.  [Bug: 4359]\n\t    AC_CHECK_LIB(pthread, __pthread_mutex_init,\n\t\ttcl_ok=yes, tcl_ok=no)\n\tfi\n\n\tif test \"$tcl_ok\" = \"yes\"; then\n\t    # The space is needed\n\t    THREADS_LIBS=\" -lpthread\"\n\telse\n\t    AC_CHECK_LIB(pthreads, pthread_mutex_init,\n\t\ttcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = \"yes\"; then\n\t\t# The space is needed\n\t\tTHREADS_LIBS=\" -lpthreads\"\n\t    else\n\t\tAC_CHECK_LIB(c, pthread_mutex_init,\n\t\t    tcl_ok=yes, tcl_ok=no)\n\t\tif test \"$tcl_ok\" = \"no\"; then\n\t\t    AC_CHECK_LIB(c_r, pthread_mutex_init,\n\t\t\ttcl_ok=yes, tcl_ok=no)\n\t\t    if test \"$tcl_ok\" = \"yes\"; then\n\t\t\t# The space is needed\n\t\t\tTHREADS_LIBS=\" -pthread\"\n\t\t    else\n\t\t\tTCL_THREADS=0\n\t\t\tAC_MSG_WARN([Don't know how to find pthread lib on your system - you must disable thread support or edit the LIBS in the Makefile...])\n\t\t    fi\n\t\tfi\n\t    fi\n\tfi\n\n\t# Does the pthread-implementation provide\n\t# 'pthread_attr_setstacksize' ?\n\n\tac_saved_libs=$LIBS\n\tLIBS=\"$LIBS $THREADS_LIBS\"\n\tAC_CHECK_FUNCS(pthread_attr_setstacksize)\n\tAC_CHECK_FUNCS(pthread_atfork)\n\tLIBS=$ac_saved_libs\n    else\n\tTCL_THREADS=0\n    fi\n    # Do checking message here to not mess up interleaved configure output\n    AC_MSG_CHECKING([for building with threads])\n    if test \"${TCL_THREADS}\" = 1; then\n\tAC_DEFINE(TCL_THREADS, 1, [Are we building with threads enabled?])\n\tif test \"${tcl_threaded_core}\" = 1; then\n\t    AC_MSG_RESULT([yes (threaded core)])\n\telse\n\t    AC_MSG_RESULT([yes])\n\tfi\n    else\n\tAC_MSG_RESULT([no (default)])\n    fi\n\n    AC_SUBST(TCL_THREADS)\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_SYMBOLS --\n#\n#\tSpecify if debugging symbols should be used.\n#\tMemory (TCL_MEM_DEBUG) and compile (TCL_COMPILE_DEBUG) debugging\n#\tcan also be enabled.\n#\n# Arguments:\n#\tnone\n#\t\n#\tRequires the following vars to be set in the Makefile:\n#\t\tCFLAGS_DEBUG\n#\t\tCFLAGS_OPTIMIZE\n#\t\tLDFLAGS_DEBUG\n#\t\tLDFLAGS_OPTIMIZE\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-symbols\n#\n#\tDefines the following vars:\n#\t\tCFLAGS_DEFAULT\tSets to $(CFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(CFLAGS_OPTIMIZE) if false\n#\t\tLDFLAGS_DEFAULT\tSets to $(LDFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(LDFLAGS_OPTIMIZE) if false\n#\t\tDBGX\t\tDebug library extension\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_SYMBOLS], [\n    AC_MSG_CHECKING([for build with symbols])\n    AC_ARG_ENABLE(symbols, [  --enable-symbols        build with debugging symbols [--disable-symbols]],    [tcl_ok=$enableval], [tcl_ok=no])\n# FIXME: Currently, LDFLAGS_DEFAULT is not used, it should work like CFLAGS_DEFAULT.\n    if test \"$tcl_ok\" = \"no\"; then\n\tCFLAGS_DEFAULT='$(CFLAGS_OPTIMIZE)'\n\tLDFLAGS_DEFAULT='$(LDFLAGS_OPTIMIZE)'\n\tDBGX=\"\"\n\tAC_MSG_RESULT([no])\n    else\n\tCFLAGS_DEFAULT='$(CFLAGS_DEBUG)'\n\tLDFLAGS_DEFAULT='$(LDFLAGS_DEBUG)'\n\tDBGX=g\n\tif test \"$tcl_ok\" = \"yes\"; then\n\t    AC_MSG_RESULT([yes (standard debugging)])\n\tfi\n    fi\n    AC_SUBST(CFLAGS_DEFAULT)\n    AC_SUBST(LDFLAGS_DEFAULT)\n\n    if test \"$tcl_ok\" = \"mem\" -o \"$tcl_ok\" = \"all\"; then\n\tAC_DEFINE(TCL_MEM_DEBUG)\n    fi\n\n    if test \"$tcl_ok\" = \"compile\" -o \"$tcl_ok\" = \"all\"; then\n\tAC_DEFINE(TCL_COMPILE_DEBUG)\n\tAC_DEFINE(TCL_COMPILE_STATS)\n    fi\n\n    if test \"$tcl_ok\" != \"yes\" -a \"$tcl_ok\" != \"no\"; then\n\tif test \"$tcl_ok\" = \"all\"; then\n\t    AC_MSG_RESULT([enabled symbols mem compile debugging])\n\telse\n\t    AC_MSG_RESULT([enabled $tcl_ok debugging])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# SC_ENABLE_LANGINFO --\n#\n#\tAllows use of modern nl_langinfo check for better l10n.\n#\tThis is only relevant for Unix.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-langinfo=yes|no (default is yes)\n#\n#\tDefines the following vars:\n#\t\tHAVE_LANGINFO\tTriggers use of nl_langinfo if defined.\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([SC_ENABLE_LANGINFO], [\n    AC_ARG_ENABLE(langinfo,\n\t[  --enable-langinfo\t  use nl_langinfo if possible to determine\n\t\t\t  encoding at startup, otherwise use old heuristic],\n\t[langinfo_ok=$enableval], [langinfo_ok=yes])\n\n    HAVE_LANGINFO=0\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CHECK_HEADER(langinfo.h,[langinfo_ok=yes],[langinfo_ok=no])\n    fi\n    AC_MSG_CHECKING([whether to use nl_langinfo])\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CACHE_VAL(tcl_cv_langinfo_h, [\n\t    AC_TRY_COMPILE([#include <langinfo.h>], [nl_langinfo(CODESET);],\n\t\t    [tcl_cv_langinfo_h=yes],[tcl_cv_langinfo_h=no])])\n\tAC_MSG_RESULT([$tcl_cv_langinfo_h])\n\tif test $tcl_cv_langinfo_h = yes; then\n\t    AC_DEFINE(HAVE_LANGINFO)\n\tfi\n    else \n\tAC_MSG_RESULT([$langinfo_ok])\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_MANPAGES\n#\t\n#\tDecide whether to use symlinks for linking the manpages,\n#\twhether to compress the manpages after installation, and\n#\twhether to add a package name suffix to the installed\n#\tmanpages to avoidfile name clashes.\n#\tIf compression is enabled also find out what file name suffix\n#\tthe given compression program is using.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-man-symlinks\n#\t\t--enable-man-compression=PROG\n#\t\t--enable-man-suffix[=STRING]\n#\n#\tDefines the following variable:\n#\n#\tMAN_FLAGS -\tThe apropriate flags for installManPage\n#\t\t\taccording to the user's selection.\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_MANPAGES], [\n    AC_MSG_CHECKING([whether to use symlinks for manpages])\n    AC_ARG_ENABLE(man-symlinks,\n\t    [  --enable-man-symlinks   use symlinks for the manpages],\n\ttest \"$enableval\" != \"no\" && MAN_FLAGS=\"$MAN_FLAGS --symlinks\",\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n\n    AC_MSG_CHECKING([whether to compress the manpages])\n    AC_ARG_ENABLE(man-compression,\n\t    [  --enable-man-compression=PROG\n\t\t      compress the manpages with PROG],\n\t[case $enableval in\n\t    yes) AC_MSG_ERROR([missing argument to --enable-man-compression]);;\n\t    no)  ;;\n\t    *)   MAN_FLAGS=\"$MAN_FLAGS --compress $enableval\";;\n\tesac],\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n    if test \"$enableval\" != \"no\"; then\n\tAC_MSG_CHECKING([for compressed file suffix])\n\ttouch TeST\n\t$enableval TeST\n\tZ=`ls TeST* | sed 's/^....//'`\n\trm -f TeST*\n\tMAN_FLAGS=\"$MAN_FLAGS --extension $Z\"\n\tAC_MSG_RESULT([$Z])\n    fi\n\n    AC_MSG_CHECKING([whether to add a package name suffix for the manpages])\n    AC_ARG_ENABLE(man-suffix,\n\t    [  --enable-man-suffix=STRING\n\t\t      use STRING as a suffix to manpage file names\n\t\t      (default: $1)],\n\t[case $enableval in\n\t    yes) enableval=\"$1\" MAN_FLAGS=\"$MAN_FLAGS --suffix $enableval\";;\n\t    no)  ;;\n\t    *)   MAN_FLAGS=\"$MAN_FLAGS --suffix $enableval\";;\n\tesac],\n\tenableval=\"no\")\n    AC_MSG_RESULT([$enableval])\n\n    AC_SUBST(MAN_FLAGS)\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_SYSTEM\n#\n#\tDetermine what the system is (some things cannot be easily checked\n#\ton a feature-driven basis, alas). This can usually be done via the\n#\t\"uname\" command, but there are a few systems, like Next, where\n#\tthis doesn't work.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\tDefines the following var:\n#\n#\tsystem -\tSystem/platform/version identification code.\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_SYSTEM], [\n    AC_CACHE_CHECK([system version], tcl_cv_sys_version, [\n\tif test -f /usr/lib/NextStep/software_version; then\n\t    tcl_cv_sys_version=NEXTSTEP-`awk '/3/,/3/' /usr/lib/NextStep/software_version`\n\telse\n\t    tcl_cv_sys_version=`uname -s`-`uname -r`\n\t    if test \"$?\" -ne 0 ; then\n\t\tAC_MSG_WARN([can't find uname command])\n\t\ttcl_cv_sys_version=unknown\n\t    else\n\t\t# Special check for weird MP-RAS system (uname returns weird\n\t\t# results, and the version is kept in special file).\n\n\t\tif test -r /etc/.relid -a \"X`uname -n`\" = \"X`uname -s`\" ; then\n\t\t    tcl_cv_sys_version=MP-RAS-`awk '{print $[3]}' /etc/.relid`\n\t\tfi\n\t\tif test \"`uname -s`\" = \"AIX\" ; then\n\t\t    tcl_cv_sys_version=AIX-`uname -v`.`uname -r`\n\t\tfi\n\t    fi\n\tfi\n    ])\n    system=$tcl_cv_sys_version\n])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_CFLAGS\n#\n#\tTry to determine the proper flags to pass to the compiler\n#\tfor building shared libraries and other such nonsense.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines and substitutes the following vars:\n#\n#       DL_OBJS -       Name of the object file that implements dynamic\n#                       loading for Tcl on this system.\n#       DL_LIBS -       Library file(s) to include in tclsh and other base\n#                       applications in order for the \"load\" command to work.\n#       LDFLAGS -      Flags to pass to the compiler when linking object\n#                       files into an executable application binary such\n#                       as tclsh.\n#       LD_SEARCH_FLAGS-Flags to pass to ld, such as \"-R /usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile. Could\n#                       be the same as CC_SEARCH_FLAGS if ${CC} is used to link.\n#       CC_SEARCH_FLAGS-Flags to pass to ${CC}, such as \"-Wl,-rpath,/usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile.\n#       MAKE_LIB -      Command to execute to build the a library;\n#                       differs when building shared or static.\n#       MAKE_STUB_LIB -\n#                       Command to execute to build a stub library.\n#       INSTALL_LIB -   Command to execute to install a library;\n#                       differs when building shared or static.\n#       INSTALL_STUB_LIB -\n#                       Command to execute to install a stub library.\n#       STLIB_LD -      Base command to use for combining object files\n#                       into a static library.\n#       SHLIB_CFLAGS -  Flags to pass to cc when compiling the components\n#                       of a shared library (may request position-independent\n#                       code, among other things).\n#       SHLIB_LD -      Base command to use for combining object files\n#                       into a shared library.\n#       SHLIB_LD_LIBS - Dependent libraries for the linker to scan when\n#                       creating shared libraries.  This symbol typically\n#                       goes at the end of the \"ld\" commands that build\n#                       shared libraries. The value of the symbol is\n#                       \"${LIBS}\" if all of the dependent libraries should\n#                       be specified when creating a shared library.  If\n#                       dependent libraries should not be specified (as on\n#                       SunOS 4.x, where they cause the link to fail, or in\n#                       general if Tcl and Tk aren't themselves shared\n#                       libraries), then this symbol has an empty string\n#                       as its value.\n#       SHLIB_SUFFIX -  Suffix to use for the names of dynamically loadable\n#                       extensions.  An empty string means we don't know how\n#                       to use shared libraries on this platform.\n# TCL_SHLIB_LD_EXTRAS - Additional element which are added to SHLIB_LD_LIBS\n#  TK_SHLIB_LD_EXTRAS   for the build of Tcl and Tk, but not recorded in the\n#                       tclConfig.sh, since they are only used for the build\n#                       of Tcl and Tk. \n#                       Examples: MacOS X records the library version and\n#                       compatibility version in the shared library.  But\n#                       of course the Tcl version of this is only used for Tcl.\n#       LIB_SUFFIX -    Specifies everything that comes after the \"libfoo\"\n#                       in a static or shared library name, using the $VERSION variable\n#                       to put the version in the right place.  This is used\n#                       by platforms that need non-standard library names.\n#                       Examples:  ${VERSION}.so.1.1 on NetBSD, since it needs\n#                       to have a version after the .so, and ${VERSION}.a\n#                       on AIX, since a shared library needs to have\n#                       a .a extension whereas shared objects for loadable\n#                       extensions have a .so extension.  Defaults to\n#                       ${VERSION}${SHLIB_SUFFIX}.\n#       TCL_NEEDS_EXP_FILE -\n#                       1 means that an export file is needed to link to a\n#                       shared library.\n#       TCL_EXP_FILE -  The name of the installed export / import file which\n#                       should be used to link to the Tcl shared library.\n#                       Empty if Tcl is unshared.\n#       TCL_BUILD_EXP_FILE -\n#                       The name of the built export / import file which\n#                       should be used to link to the Tcl shared library.\n#                       Empty if Tcl is unshared.\n#\tCFLAGS_DEBUG -\n#\t\t\tFlags used when running the compiler in debug mode\n#\tCFLAGS_OPTIMIZE -\n#\t\t\tFlags used when running the compiler in optimize mode\n#\tCFLAGS -\tAdditional CFLAGS added as necessary (usually 64-bit)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_CFLAGS], [\n\n    # Step 0.a: Enable 64 bit support?\n\n    AC_MSG_CHECKING([if 64bit support is requested])\n    AC_ARG_ENABLE(64bit,[  --enable-64bit          enable 64bit support (where applicable)],\n\t[do64bit=$enableval], [do64bit=no])\n    AC_MSG_RESULT([$do64bit])\n\n    # Step 0.b: Enable Solaris 64 bit VIS support?\n\n    AC_MSG_CHECKING([if 64bit Sparc VIS support is requested])\n    AC_ARG_ENABLE(64bit-vis,[  --enable-64bit-vis      enable 64bit Sparc VIS support],\n\t[do64bitVIS=$enableval], [do64bitVIS=no])\n    AC_MSG_RESULT([$do64bitVIS])\n\n    if test \"$do64bitVIS\" = \"yes\"; then\n\t# Force 64bit on with VIS\n\tdo64bit=yes\n    fi\n\n    # Step 1: set the variable \"system\" to hold the name and version number\n    # for the system.\n\n    SC_CONFIG_SYSTEM\n\n    # Step 2: check for existence of -ldl library.  This is needed because\n    # Linux can use either -ldl or -ldld for dynamic loading.\n\n    AC_CHECK_LIB(dl, dlopen, have_dl=yes, have_dl=no)\n\n    # Require ranlib early so we can override it in special cases below.\n\n    AC_REQUIRE([AC_PROG_RANLIB])\n\n    # Step 3: set configuration options based on system name and version.\n\n    do64bit_ok=no\n    LDFLAGS_ORIG=\"$LDFLAGS\"\n    TCL_EXPORT_FILE_SUFFIX=\"\"\n    UNSHARED_LIB_SUFFIX=\"\"\n    TCL_TRIM_DOTS='`echo ${VERSION} | tr -d .`'\n    ECHO_VERSION='`echo ${VERSION}`'\n    TCL_LIB_VERSIONS_OK=ok\n    CFLAGS_DEBUG=-g\n    CFLAGS_OPTIMIZE=-O\n    if test \"$GCC\" = \"yes\" ; then\n\tCFLAGS_WARNING=\"-Wall -Wno-implicit-int -fno-strict-aliasing\"\n    else\n\tCFLAGS_WARNING=\"\"\n    fi\n    TCL_NEEDS_EXP_FILE=0\n    TCL_BUILD_EXP_FILE=\"\"\n    TCL_EXP_FILE=\"\"\ndnl FIXME: Replace AC_CHECK_PROG with AC_CHECK_TOOL once cross compiling is fixed.\ndnl AC_CHECK_TOOL(AR, ar)\n    AC_CHECK_PROG(AR, ar, ar)\n    if test \"${AR}\" = \"\" ; then\n\tAC_MSG_ERROR([Required archive tool 'ar' not found on PATH.])\n    fi\n    STLIB_LD='${AR} cr'\n    LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH\"\n    PLAT_OBJS=\"\"\n    PLAT_SRCS=\"\"\n    case $system in\n\tAIX-*)\n\t    if test \"${TCL_THREADS}\" = \"1\" -a \"$GCC\" != \"yes\" ; then\n\t\t# AIX requires the _r compiler when gcc isn't being used\n\t\tcase \"${CC}\" in\n\t\t    *_r)\n\t\t\t# ok ...\n\t\t\t;;\n\t\t    *)\n\t\t\tCC=${CC}_r\n\t\t\t;;\n\t\tesac\n\t\tAC_MSG_RESULT([Using $CC for compiling with threads])\n\t    fi\n\t    LIBS=\"$LIBS -lc\"\n\t    SHLIB_CFLAGS=\"\"\n\t    # Note: need the LIBS below, otherwise Tk won't find Tcl's\n\t    # symbols when dynamically loaded into tclsh.\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    LD_LIBRARY_PATH_VAR=\"LIBPATH\"\n\n\t    # Check to enable 64-bit flags for compiler/linker on AIX 4+\n\t    if test \"$do64bit\" = \"yes\" -a \"`uname -v`\" -gt \"3\" ; then\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\telse \n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS -q64\"\n\t\t    LDFLAGS=\"$LDFLAGS -q64\"\n\t\t    RANLIB=\"${RANLIB} -X64\"\n\t\t    AR=\"${AR} -X64\"\n\t\t    SHLIB_LD_FLAGS=\"-b64\"\n\t\tfi\n\t    fi\n\n\t    if test \"`uname -m`\" = \"ia64\" ; then\n\t\t# AIX-5 uses ELF style dynamic libraries on IA-64, but not PPC\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\t# AIX-5 has dl* in libc.so\n\t\tDL_LIBS=\"\"\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    CC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\telse\n\t\t    CC_SEARCH_FLAGS='-R${LIB_RUNTIME_DIR}'\n\t\tfi\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    else\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    SHLIB_LD=\"gcc -shared\"\n\t\telse\n\t\t    SHLIB_LD=\"/bin/ld -bhalt:4 -bM:SRE -bE:lib.exp -H512 -T512 -bnoentry\"\n\t\tfi\n\t\tSHLIB_LD=\"${TCL_SRC_DIR}/unix/ldAix ${SHLIB_LD} ${SHLIB_LD_FLAGS}\"\n\t\tDL_LIBS=\"-ldl\"\n\t\tCC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tTCL_NEEDS_EXP_FILE=1\n\t\tTCL_EXPORT_FILE_SUFFIX='${VERSION}\\$\\{DBGX\\}.exp'\n\t    fi\n\n\t    # AIX v<=4.1 has some different flags than 4.2+\n\t    if test \"$system\" = \"AIX-4.1\" -o \"`uname -v`\" -lt \"4\" ; then\n\t\tLIBOBJS=\"$LIBOBJS tclLoadAix.o\"\n\t\tDL_LIBS=\"-lld\"\n\t    fi\n\n\t    # On AIX <=v4 systems, libbsd.a has to be linked in to support\n\t    # non-blocking file IO.  This library has to be linked in after\n\t    # the MATH_LIBS or it breaks the pow() function.  The way to\n\t    # insure proper sequencing, is to add it to the tail of MATH_LIBS.\n\t    # This library also supplies gettimeofday.\n\t    #\n\t    # AIX does not have a timezone field in struct tm. When the AIX\n\t    # bsd library is used, the timezone global and the gettimeofday\n\t    # methods are to be avoided for timezone deduction instead, we\n\t    # deduce the timezone by comparing the localtime result on a\n\t    # known GMT value.\n\n\t    AC_CHECK_LIB(bsd, gettimeofday, libbsd=yes, libbsd=no)\n\t    if test $libbsd = yes; then\n\t    \tMATH_LIBS=\"$MATH_LIBS -lbsd\"\n\t    \tAC_DEFINE(USE_DELTA_FOR_TZ)\n\t    fi\n\t    ;;\n\tBeOS*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"${CC} -nostart\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\n\t    #-----------------------------------------------------------\n\t    # Check for inet_ntoa in -lbind, for BeOS (which also needs\n\t    # -lsocket, even if the network functions are in -lnet which\n\t    # is always linked to, for compatibility.\n\t    #-----------------------------------------------------------\n\t    AC_CHECK_LIB(bind, inet_ntoa, [LIBS=\"$LIBS -lbind -lsocket\"])\n\t    ;;\n\tBSD/OS-2.1*|BSD/OS-3*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"shlicc -r\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tBSD/OS-4.*)\n\t    SHLIB_CFLAGS=\"-export-dynamic -fPIC\"\n\t    SHLIB_LD=\"cc -shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tdgux*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tHP-UX-*.11.*)\n\t    # Use updated header definitions where possible\n\t    AC_DEFINE(_XOPEN_SOURCE)          # Use the XOPEN network library\n\t    AC_DEFINE(_XOPEN_SOURCE_EXTENDED) # Use the XOPEN network library\n\t    LIBS=\"$LIBS -lxnet\"               # Use the XOPEN network library\n\n\t    if test \"`uname -m`\" = \"ia64\" ; then\n\t\tSHLIB_SUFFIX=\".so\"\n\t    else\n\t\tSHLIB_SUFFIX=\".sl\"\n\t    fi\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = yes; then\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    fi\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"gcc -shared\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    fi\n\n\t    # Users may want PA-RISC 1.1/2.0 portable code - needs HP cc\n\t    #CFLAGS=\"$CFLAGS +DAportable\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    hpux_arch=`${CC} -dumpmachine`\n\t\t    case $hpux_arch in\n\t\t\thppa64*)\n\t\t\t    # 64-bit gcc in use.  Fix flags for GNU ld.\n\t\t\t    do64bit_ok=yes\n\t\t\t    SHLIB_LD=\"${CC} -shared\"\n\t\t\t    SHLIB_LD_LIBS='${LIBS}'\n\t\t\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\t\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\t\t    ;;\n\t\t\t*)\n\t\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t\t    ;;\n\t\t    esac\n\t\telse\n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS +DD64\"\n\t\t    LDFLAGS=\"$LDFLAGS +DD64\"\n\t\tfi\n\t    fi\n\t    ;;\n\tHP-UX-*.08.*|HP-UX-*.09.*|HP-UX-*.10.*)\n\t    SHLIB_SUFFIX=\".sl\"\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = yes; then\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tSHLIB_LD_LIBS=\"\"\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    fi\n\t    ;;\n\tIRIX-4.*)\n\t    SHLIB_CFLAGS=\"-G 0\"\n\t    SHLIB_SUFFIX=\".a\"\n\t    SHLIB_LD=\"echo tclLdAout $CC \\{$SHLIB_CFLAGS\\} | `pwd`/tclsh -r -G 0\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    DL_OBJS=\"tclLoadAout.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-D,08000000\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    SHARED_LIB_SUFFIX='${VERSION}\\$\\{DBGX\\}.a'\n\t    ;;\n\tIRIX-5.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    ;;\n\tIRIX-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tCFLAGS=\"$CFLAGS -mabi=n32\"\n\t\tLDFLAGS=\"$LDFLAGS -mabi=n32\"\n\t    else\n\t\tcase $system in\n\t\t    IRIX-6.3)\n\t\t\t# Use to build 6.2 compatible binaries on 6.3.\n\t\t\tCFLAGS=\"$CFLAGS -n32 -D_OLD_TERMIOS\"\n\t\t\t;;\n\t\t    *)\n\t\t\tCFLAGS=\"$CFLAGS -n32\"\n\t\t\t;;\n\t\tesac\n\t\tLDFLAGS=\"$LDFLAGS -n32\"\n\t    fi\n\t    ;;\n\tIRIX64-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t        if test \"$GCC\" = \"yes\" ; then\n\t            AC_MSG_WARN([64bit mode not supported by gcc])\n\t        else\n\t            do64bit_ok=yes\n\t            SHLIB_LD=\"ld -64 -shared -rdata_shared\"\n\t            CFLAGS=\"$CFLAGS -64\"\n\t            LDFLAGS=\"$LDFLAGS -64\"\n\t        fi\n\t    fi\n\t    ;;\n\tLinux*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    CFLAGS_OPTIMIZE=-O2\n\t    # egcs-2.91.66 on Redhat Linux 6.0 generates lots of warnings \n\t    # when you inline the string and math operations.  Turn this off to\n\t    # get rid of the warnings.\n\t    #CFLAGS_OPTIMIZE=\"${CFLAGS_OPTIMIZE} -D__NO_STRING_INLINES -D__NO_MATH_INLINES\"\n\n\t    if test \"$have_dl\" = yes; then\n\t\tSHLIB_LD='${CC} -shared ${CFLAGS} ${LDFLAGS}'\n\t\tDL_OBJS=\"tclLoadDl.o\"\n\t\tDL_LIBS=\"-ldl\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    else\n\t\tAC_CHECK_HEADER(dld.h, [\n\t\t    SHLIB_LD=\"ld -shared\"\n\t\t    DL_OBJS=\"tclLoadDld.o\"\n\t\t    DL_LIBS=\"-ldld\"\n\t\t    CC_SEARCH_FLAGS=\"\"\n\t\t    LD_SEARCH_FLAGS=\"\"])\n\t    fi\n\t    if test \"`uname -m`\" = \"alpha\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n\t    fi\n\t    if test $do64bit = yes; then\n\t\tAC_CACHE_CHECK([if compiler accepts -m64 flag], tcl_cv_cc_m64, [\n\t\t    hold_cflags=$CFLAGS\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    AC_TRY_LINK(,, tcl_cv_cc_m64=yes, tcl_cv_cc_m64=no)\n\t\t    CFLAGS=$hold_cflags])\n\t\tif test $tcl_cv_cc_m64 = yes; then\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    do64bit_ok=yes\n\t\tfi\n\t    fi\n\n\t    # The combo of gcc + glibc has a bug related\n\t    # to inlining of functions like strtod(). The\n\t    # -fno-builtin flag should address this problem\n\t    # but it does not work. The -fno-inline flag\n\t    # is kind of overkill but it works.\n\t    # Disable inlining only when one of the\n\t    # files in compat/*.c is being linked in.\n\t    if test x\"${LIBOBJS}\" != x ; then\n\t        CFLAGS=\"$CFLAGS -fno-inline\"\n\t    fi\n\n\t    # XIM peeking works under XFree86.\n\t    AC_DEFINE(PEEK_XCLOSEIM)\n\n\t    ;;\n\tGNU*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    if test \"$have_dl\" = yes; then\n\t\tSHLIB_LD=\"${CC} -shared\"\n\t\tDL_OBJS=\"\"\n\t\tDL_LIBS=\"-ldl\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t\tCC_SEARCH_FLAGS=\"\"\n\t\tLD_SEARCH_FLAGS=\"\"\n\t    else\n\t\tAC_CHECK_HEADER(dld.h, [\n\t\t    SHLIB_LD=\"ld -shared\"\n\t\t    DL_OBJS=\"\"\n\t\t    DL_LIBS=\"-ldld\"\n\t\t    CC_SEARCH_FLAGS=\"\"\n\t\t    LD_SEARCH_FLAGS=\"\"])\n\t    fi\n\t    if test \"`uname -m`\" = \"alpha\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n\t    fi\n\t    ;;\n\tLynx*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    CFLAGS_OPTIMIZE=-02\n\t    SHLIB_LD=\"${CC} -shared \"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-mshared -ldl\"\n\t    LD_FLAGS=\"-Wl,--export-dynamic\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    ;;\n\tMP-RAS-02*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tMP-RAS-*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tNetBSD-*|FreeBSD-[[1-2]].*)\n\t    # Not available on all versions:  check for include file.\n\t    AC_CHECK_HEADER(dlfcn.h, [\n\t\t# NetBSD/SPARC needs -fPIC, -fpic will not do.\n\t\tSHLIB_CFLAGS=\"-fPIC\"\n\t\tSHLIB_LD=\"ld -Bshareable -x\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tSHLIB_SUFFIX=\".so\"\n\t\tDL_OBJS=\"tclLoadDl.o\"\n\t\tDL_LIBS=\"\"\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t\tAC_CACHE_CHECK([for ELF], tcl_cv_ld_elf, [\n\t\t    AC_EGREP_CPP(yes, [\n#ifdef __ELF__\n\tyes\n#endif\n\t\t    ], tcl_cv_ld_elf=yes, tcl_cv_ld_elf=no)])\n\t\tif test $tcl_cv_ld_elf = yes; then\n\t\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.so'\n\t\telse\n\t\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.so.1.0'\n\t\tfi\n\t    ], [\n\t\tSHLIB_CFLAGS=\"\"\n\t\tSHLIB_LD=\"echo tclLdAout $CC \\{$SHLIB_CFLAGS\\} | `pwd`/tclsh -r\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tSHLIB_SUFFIX=\".a\"\n\t\tDL_OBJS=\"tclLoadAout.o\"\n\t\tDL_LIBS=\"\"\n\t\tCC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t    ])\n\n\t    # FreeBSD doesn't handle version numbers with dots.\n\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tOpenBSD-*)\n\t    case `arch -s` in\n\t    m88k|vax)\n\t\tSHLIB_CFLAGS=\"\"\n\t\tSHLIB_LD=\"echo tclLdAout $CC \\{$SHLIB_CFLAGS\\} | `pwd`/tclsh -r\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tSHLIB_SUFFIX=\".a\"\n\t\tDL_OBJS=\"tclLoadAout.o\"\n\t\tDL_LIBS=\"\"\n\t\tLDFLAGS=\"\"\n\t\tCC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t\t;;\n\t    *)\n\t\t# OpenBSD/SPARC[64] needs -fPIC, -fpic will not do.\n\t\tcase `machine` in\n\t\tsparc|sparc64)\n\t\t    SHLIB_CFLAGS=\"-fPIC\";;\n\t        *)\n\t\t    SHLIB_CFLAGS=\"-fpic\";;\n\t        esac\n\t\tSHLIB_LD=\"${CC} -shared ${SHLIB_CFLAGS}\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tSHLIB_SUFFIX=\".so\"\n\t\tDL_OBJS=\"tclLoadDl.o\"\n\t\tDL_LIBS=\"\"\n\t\tCC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.so.1.0'\n\t\tAC_CACHE_CHECK([for ELF], tcl_cv_ld_elf, [\n\t\t    AC_EGREP_CPP(yes, [\n#ifdef __ELF__\n\tyes\n#endif\n\t\t    ], tcl_cv_ld_elf=yes, tcl_cv_ld_elf=no)])\n\t\tif test $tcl_cv_ld_elf = yes; then\n\t\t    LDFLAGS=-Wl,-export-dynamic\n\t\telse\n\t\t    LDFLAGS=\"\"\n\t        fi\n\t\t;;\n\t    esac\n\n\t    # OpenBSD doesn't do version numbers with dots.\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tFreeBSD-*)\n\t    # FreeBSD 3.* and greater have ELF.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"${TCL_THREADS}\" = \"1\" ; then\n\t\t# The -pthread needs to go in the CFLAGS, not LIBS\n\t\tLIBS=`echo $LIBS | sed s/-pthread//`\n\t\tCFLAGS=\"$CFLAGS -pthread\"\n\t    \tLDFLAGS=\"$LDFLAGS -pthread\"\n\t    fi\n\t    case $system in\n\t    FreeBSD-3.*)\n\t    \t# FreeBSD-3 doesn't handle version numbers with dots.\n\t    \tUNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t    \tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.so'\n\t    \tTCL_LIB_VERSIONS_OK=nodots\n\t\t;;\n\t    esac\n\t    ;;\n\tDarwin-*)\n\t    CFLAGS_OPTIMIZE=\"-Os\"\n\t    SHLIB_CFLAGS=\"-fno-common\"\n\t    # To avoid discrepancies between what headers configure sees during\n\t    # preprocessing tests and compiling tests, move any -isysroot and\n\t    # -mmacosx-version-min flags from CFLAGS to CPPFLAGS:\n\t    CPPFLAGS=\"${CPPFLAGS} `echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif ([$]i~/^(isysroot|mmacosx-version-min)/) print \"-\"[$]i}'`\"\n\t    CFLAGS=\"`echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif (!([$]i~/^(isysroot|mmacosx-version-min)/)) print \"-\"[$]i}'`\"\n\t    if test $do64bit = yes; then\n\t\tcase `arch` in\n\t\t    ppc)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch ppc64 flag],\n\t\t\t\ttcl_cv_cc_arch_ppc64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_ppc64=yes,\n\t\t\t\t    tcl_cv_cc_arch_ppc64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tif test $tcl_cv_cc_arch_ppc64 = yes; then\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    do64bit_ok=yes\n\t\t\tfi;;\n\t\t    i386)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch x86_64 flag],\n\t\t\t\ttcl_cv_cc_arch_x86_64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_x86_64=yes,\n\t\t\t\t    tcl_cv_cc_arch_x86_64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tif test $tcl_cv_cc_arch_x86_64 = yes; then\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    do64bit_ok=yes\n\t\t\tfi;;\n\t\t    *)\n\t\t\tAC_MSG_WARN([Don't know how enable 64-bit on architecture `arch`]);;\n\t\tesac\n\t    else\n\t\t# Check for combined 32-bit and 64-bit fat build\n\t\techo \"$CFLAGS \" | grep -E -q -- '-arch (ppc64|x86_64) ' && \\\n\t\t    echo \"$CFLAGS \" | grep -E -q -- '-arch (ppc|i386) ' && \\\n\t\t    fat_32_64=yes\n\t    fi\n\t    SHLIB_LD='${CC} -dynamiclib ${CFLAGS} ${LDFLAGS}'\n\t    AC_CACHE_CHECK([if ld accepts -single_module flag], tcl_cv_ld_single_module, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -dynamiclib -Wl,-single_module\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_single_module=yes, tcl_cv_ld_single_module=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_single_module = yes; then\n\t\tSHLIB_LD=\"${SHLIB_LD} -Wl,-single_module\"\n\t    fi\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".dylib\"\n\t    DL_OBJS=\"tclLoadDyld.o\"\n\t    DL_LIBS=\"\"\n\t    # Don't use -prebind when building for Mac OS X 10.4 or later only:\n\t    test \"`echo \"${MACOSX_DEPLOYMENT_TARGET}\" | awk -F '10\\\\.' '{print int([$]2)}'`\" -lt 4 -a \\\n\t\t\"`echo \"${CPPFLAGS}\" | awk -F '-mmacosx-version-min=10\\\\.' '{print int([$]2)}'`\" -lt 4 && \\\n\t\tLDFLAGS=\"$LDFLAGS -prebind\"\n\t    LDFLAGS=\"$LDFLAGS -headerpad_max_install_names\"\n\t    AC_CACHE_CHECK([if ld accepts -search_paths_first flag], tcl_cv_ld_search_paths_first, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_search_paths_first=yes, tcl_cv_ld_search_paths_first=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_search_paths_first = yes; then\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t    fi\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    LD_LIBRARY_PATH_VAR=\"DYLD_LIBRARY_PATH\"\n\t    PLAT_OBJS=\\$\\(MAC\\_OSX_OBJS\\)\n\t    PLAT_SRCS=\\$\\(MAC\\_OSX_SRCS\\)\n\t    AC_MSG_CHECKING([whether to use CoreFoundation])\n\t    AC_ARG_ENABLE(corefoundation, [  --enable-corefoundation use CoreFoundation API [--enable-corefoundation]],\n\t\t[tcl_corefoundation=$enableval], [tcl_corefoundation=yes])\n\t    AC_MSG_RESULT([$tcl_corefoundation])\n\t    if test $tcl_corefoundation = yes; then\n\t\tAC_CACHE_CHECK([for CoreFoundation.framework], tcl_cv_lib_corefoundation, [\n\t\t    hold_libs=$LIBS\n\t\t    if test \"$fat_32_64\" = yes; then for v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t# On Tiger there is no 64-bit CF, so remove 64-bit archs\n\t\t\t# from CFLAGS et al. while testing for presence of CF.\n\t\t\t# 64-bit CF is disabled in tclUnixPort.h if necessary.\n\t\t\teval 'hold_'$v'=\"$'$v'\";'$v'=\"`echo \"$'$v' \"|sed -e \"s/-arch ppc64 / /g\" -e \"s/-arch x86_64 / /g\"`\"'\n\t\t    done; fi\n\t\t    LIBS=\"$LIBS -framework CoreFoundation\"\n\t\t    AC_TRY_LINK([#include <CoreFoundation/CoreFoundation.h>], \n\t\t\t[CFBundleRef b = CFBundleGetMainBundle();], \n\t\t\ttcl_cv_lib_corefoundation=yes, tcl_cv_lib_corefoundation=no)\n\t\t    if test \"$fat_32_64\" = yes; then for v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\teval $v'=\"$hold_'$v'\"'\n\t\t    done; fi; LIBS=$hold_libs])\n\t\tif test $tcl_cv_lib_corefoundation = yes; then\n\t\t    LIBS=\"$LIBS -framework CoreFoundation\"\n\t\t    AC_DEFINE(HAVE_COREFOUNDATION)\n\t\telse\n\t\t    tcl_corefoundation=no\n\t\tfi\n\t\tif test \"$fat_32_64\" = yes -a $tcl_corefoundation = yes; then\n\t\t    AC_CACHE_CHECK([for 64-bit CoreFoundation], tcl_cv_lib_corefoundation_64, [\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    eval 'hold_'$v'=\"$'$v'\";'$v'=\"`echo \"$'$v' \"|sed -e \"s/-arch ppc / /g\" -e \"s/-arch i386 / /g\"`\"'\n\t\t\tdone\n\t\t\tAC_TRY_LINK([#include <CoreFoundation/CoreFoundation.h>], \n\t\t\t    [CFBundleRef b = CFBundleGetMainBundle();], \n\t\t\t    tcl_cv_lib_corefoundation_64=yes, tcl_cv_lib_corefoundation_64=no)\n\t\t\tfor v in CFLAGS CPPFLAGS LDFLAGS; do\n\t\t\t    eval $v'=\"$hold_'$v'\"'\n\t\t\tdone])\n\t\t    if test $tcl_cv_lib_corefoundation_64 = no; then\n\t\t\tAC_DEFINE(NO_COREFOUNDATION_64)\n\t\t    fi\n\t\tfi\n\t    fi\n\t    AC_DEFINE(MAC_OSX_TCL)\n\t    ;;\n\tNEXTSTEP-*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"cc -nostdlib -r\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadNext.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOS/390-*)\n\t    CFLAGS_OPTIMIZE=\"\"\t\t# Optimizer is buggy\n\t    AC_DEFINE(_OE_SOCKETS)\t# needed in sys/socket.h\n\t    ;;      \n\tOSF1-1.0|OSF1-1.1|OSF1-1.2)\n\t    # OSF/1 1.[012] from OSF, and derivatives, including Paragon OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    # Hack: make package name same as library name\n\t    SHLIB_LD='ld -R -export $@:'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadOSF.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-1.*)\n\t    # OSF/1 1.3 from OSF using ELF, and derivatives, including AD2\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    if test \"$SHARED_BUILD\" = \"1\" ; then\n\t        SHLIB_LD=\"ld -shared\"\n\t    else\n\t        SHLIB_LD=\"ld -non_shared\"\n\t    fi\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-V*)\n\t    # Digital OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    if test \"$SHARED_BUILD\" = \"1\" ; then\n\t        SHLIB_LD='ld -shared -expect_unresolved \"*\"'\n\t    else\n\t        SHLIB_LD='ld -non_shared -expect_unresolved \"*\"'\n\t    fi\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n            else\n\t\tCFLAGS=\"$CFLAGS -DHAVE_TZSET -std1 -ieee\"\n\t    fi\n\t    # see pthread_intro(3) for pthread support on osf1, k.furukawa\n\t    if test \"${TCL_THREADS}\" = \"1\" ; then\n\t\tCFLAGS=\"$CFLAGS -DHAVE_PTHREAD_ATTR_SETSTACKSIZE\"\n\t\tCFLAGS=\"$CFLAGS -DTCL_THREAD_STACK_MIN=PTHREAD_STACK_MIN*64\"\n\t\tLIBS=`echo $LIBS | sed s/-lpthreads//`\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    LIBS=\"$LIBS -lpthread -lmach -lexc\"\n\t\telse\n\t\t    CFLAGS=\"$CFLAGS -pthread\"\n\t\t    LDFLAGS=\"$LDFLAGS -pthread\"\n\t\tfi\n\t    fi\n\n\t    ;;\n\tQNX-6*)\n\t    # QNX RTP\n\t    # This may work for all QNX, but it was only reported for v6.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    # dlopen is in -lc on QNX\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tRISCos-*)\n\t    SHLIB_CFLAGS=\"-G 0\"\n\t    SHLIB_LD=\"echo tclLdAout $CC \\{$SHLIB_CFLAGS\\} | `pwd`/tclsh -r -G 0\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".a\"\n\t    DL_OBJS=\"tclLoadAout.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-D,08000000\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    ;;\n\tSCO_SV-3.2*)\n\t    # Note, dlopen is available only on SCO 3.2.5 and greater. However,\n\t    # this test works, since \"uname -s\" was non-standard in 3.2.4 and\n\t    # below.\n\t    if test \"$GCC\" = \"yes\" ; then\n\t    \tSHLIB_CFLAGS=\"-fPIC -melf\"\n\t    \tLDFLAGS=\"$LDFLAGS -melf -Wl,-Bexport\"\n\t    else\n\t    \tSHLIB_CFLAGS=\"-Kpic -belf\"\n\t    \tLDFLAGS=\"$LDFLAGS -belf -Wl,-Bexport\"\n\t    fi\n\t    SHLIB_LD=\"ld -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSINIX*5.4*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSunOS-4*)\n\t    SHLIB_CFLAGS=\"-PIC\"\n\t    SHLIB_LD=\"ld\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\n\t    # SunOS can't handle version numbers with dots in them in library\n\t    # specs, like -ltcl7.5, so use -ltcl75 instead.  Also, it\n\t    # requires an extra version number at the end of .so file names.\n\t    # So, the library has to have a name like libtcl75.so.1.0\n\n\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.so.1.0'\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}\\$\\{DBGX\\}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tSunOS-5.[[0-6]])\n\t    # Careful to not let 5.10+ fall into this case\n\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT)\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\n\t    # Note: need the LIBS below, otherwise Tk won't find Tcl's\n\t    # symbols when dynamically loaded into tclsh.\n\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"$CC -shared\"\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    else\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\tCC_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    fi\n\t    ;;\n\tSunOS-5*)\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT)\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t\tarch=`isainfo`\n\t\tif test \"$arch\" = \"sparcv9 sparc\" ; then\n\t\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t\t    if test \"`gcc -dumpversion | awk -F. '{print [$]1}'`\" -lt \"3\" ; then\n\t\t\t\tAC_MSG_WARN([64bit mode not supported with GCC < 3.2 on $system])\n\t\t\t    else\n\t\t\t\tdo64bit_ok=yes\n\t\t\t\tCFLAGS=\"$CFLAGS -m64 -mcpu=v9\"\n\t\t\t\tLDFLAGS=\"$LDFLAGS -m64 -mcpu=v9\"\n\t\t\t\tSHLIB_CFLAGS=\"-fPIC\"\n\t\t\t    fi\n\t\t\telse\n\t\t\t    do64bit_ok=yes\n\t\t\t    if test \"$do64bitVIS\" = \"yes\" ; then\n\t\t\t\tCFLAGS=\"$CFLAGS -xarch=v9a\"\n\t\t\t    \tLDFLAGS=\"$LDFLAGS -xarch=v9a\"\n\t\t\t    else\n\t\t\t\tCFLAGS=\"$CFLAGS -xarch=v9\"\n\t\t\t    \tLDFLAGS=\"$LDFLAGS -xarch=v9\"\n\t\t\t    fi\n\t\t\t    # Solaris 64 uses this as well\n\t\t\t    #LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH_64\"\n\t\t\tfi\n\t\telif test \"$arch\" = \"amd64 i386\" ; then\n\t\t    if test \"$GCC\" = \"yes\" ; then\n\t\t\tAC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t    else\n\t\t\tdo64bit_ok=yes\n\t\t\tCFLAGS=\"$CFLAGS -xarch=amd64\"\n\t\t\tLDFLAGS=\"$LDFLAGS -xarch=amd64\"\n\t\t    fi\n\t\telse\n\t\t    AC_MSG_WARN([64bit mode not supported for $arch])\n\t\tfi\n\t    fi\n\t    \n\t    # Note: need the LIBS below, otherwise Tk won't find Tcl's\n\t    # symbols when dynamically loaded into tclsh.\n\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"$CC -shared\"\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tif test \"$do64bit_ok\" = \"yes\" ; then\n\t\t    # We need to specify -static-libgcc or we need to\n\t\t    # add the path to the sparv9 libgcc.\n\t\t    SHLIB_LD=\"$SHLIB_LD -m64 -mcpu=v9 -static-libgcc\"\n\t\t    # for finding sparcv9 libgcc, get the regular libgcc\n\t\t    # path, remove so name and append 'sparcv9'\n\t\t    #v9gcclibdir=\"`gcc -print-file-name=libgcc_s.so` | ...\"\n\t\t    #CC_SEARCH_FLAGS=\"${CC_SEARCH_FLAGS},-R,$v9gcclibdir\"\n\t\tfi\n\t    else\n\t\tcase $system in\n\t\t    SunOS-5.[[1-9]][[0-9]]*)\n\t\t\tSHLIB_LD='${CC} -G -z text';;\n\t\t    *)\n\t\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\";;\n\t\tesac\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    fi\n\t    ;;\n\tULTRIX-4.*)\n\t    SHLIB_CFLAGS=\"-G 0\"\n\t    SHLIB_SUFFIX=\".a\"\n\t    SHLIB_LD=\"echo tclLdAout $CC \\{$SHLIB_CFLAGS\\} | `pwd`/tclsh -r -G 0\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    DL_OBJS=\"tclLoadAout.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-D,08000000\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    if test \"$GCC\" != \"yes\" ; then\n\t\tCFLAGS=\"$CFLAGS -DHAVE_TZSET -std1\"\n\t    fi\n\t    ;;\n\tUNIX_SV* | UnixWare-5*)\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    # Some UNIX_SV* systems (unixware 1.1.2 for example) have linkers\n\t    # that don't grok the -Bexport option.  Test that it does.\n\t    AC_CACHE_CHECK([for ld accepts -Bexport flag], tcl_cv_ld_Bexport, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_Bexport=yes, tcl_cv_ld_Bexport=no)\n\t        LDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_Bexport = yes; then\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    fi\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n    esac\n\n    if test \"$do64bit\" = \"yes\" -a \"$do64bit_ok\" = \"no\" ; then\n\tAC_MSG_WARN([64bit support being disabled -- don't know magic for this platform])\n    fi\n\ndnl # Add any CPPFLAGS set in the environment to our CFLAGS, but delay doing so\ndnl # until the end of configure, as configure's compile and link tests use\ndnl # both CPPFLAGS and CFLAGS (unlike our compile and link) but configure's\ndnl # preprocessing tests use only CPPFLAGS.\n    SC_CONFIG_COMMANDS_PRE([CFLAGS=\"${CFLAGS} ${CPPFLAGS}\"; CPPFLAGS=\"\"])\n\n    # Step 4: If pseudo-static linking is in use (see K. B. Kenny, \"Dynamic\n    # Loading for Tcl -- What Became of It?\".  Proc. 2nd Tcl/Tk Workshop,\n    # New Orleans, LA, Computerized Processes Unlimited, 1994), then we need\n    # to determine which of several header files defines the a.out file\n    # format (a.out.h, sys/exec.h, or sys/exec_aout.h).  At present, we\n    # support only a file format that is more or less version-7-compatible. \n    # In particular,\n    #\t- a.out files must begin with `struct exec'.\n    #\t- the N_TXTOFF on the `struct exec' must compute the seek address\n    #\t  of the text segment\n    #\t- The `struct exec' must contain a_magic, a_text, a_data, a_bss\n    #\t  and a_entry fields.\n    # The following compilation should succeed if and only if either sys/exec.h\n    # or a.out.h is usable for the purpose.\n    #\n    # Note that the modified COFF format used on MIPS Ultrix 4.x is usable; the\n    # `struct exec' includes a second header that contains information that\n    # duplicates the v7 fields that are needed.\n\n    if test \"x$DL_OBJS\" = \"xtclLoadAout.o\" ; then\n\tAC_CACHE_CHECK([sys/exec.h], tcl_cv_sysexec_h, [\n\tAC_TRY_COMPILE([#include <sys/exec.h>],[\n\t    struct exec foo;\n\t    unsigned long seek;\n\t    int flag;\n#if defined(__mips) || defined(mips)\n\t    seek = N_TXTOFF (foo.ex_f, foo.ex_o);\n#else\n\t    seek = N_TXTOFF (foo);\n#endif\n\t    flag = (foo.a_magic == OMAGIC);\n\t    return foo.a_text + foo.a_data + foo.a_bss + foo.a_entry;\n    ], tcl_cv_sysexec_h=usable, tcl_cv_sysexec_h=unusable)])\n\tif test $tcl_cv_sysexec_h = usable; then\n\t    AC_DEFINE(USE_SYS_EXEC_H)\n\telse\n\t    AC_CACHE_CHECK([a.out.h], tcl_cv_aout_h, [\n\t    AC_TRY_COMPILE([#include <a.out.h>],[\n\t\tstruct exec foo;\n\t\tunsigned long seek;\n\t\tint flag;\n#if defined(__mips) || defined(mips)\n\t\tseek = N_TXTOFF (foo.ex_f, foo.ex_o);\n#else\n\t\tseek = N_TXTOFF (foo);\n#endif\n\t\tflag = (foo.a_magic == OMAGIC);\n\t\treturn foo.a_text + foo.a_data + foo.a_bss + foo.a_entry;\n\t    ], tcl_cv_aout_h=usable, tcl_cv_aout_h=unusable)])\n\t    if test $tcl_cv_aout_h = usable; then\n\t\tAC_DEFINE(USE_A_OUT_H)\n\t    else\n\t\tAC_CACHE_CHECK([sys/exec_aout.h], tcl_cv_sysexecaout_h, [\n\t\tAC_TRY_COMPILE([#include <sys/exec_aout.h>],[\n\t\t    struct exec foo;\n\t\t    unsigned long seek;\n\t\t    int flag;\n#if defined(__mips) || defined(mips)\n\t\t    seek = N_TXTOFF (foo.ex_f, foo.ex_o);\n#else\n\t\t    seek = N_TXTOFF (foo);\n#endif\n\t\t    flag = (foo.a_midmag == OMAGIC);\n\t\t    return foo.a_text + foo.a_data + foo.a_bss + foo.a_entry;\n\t\t], tcl_cv_sysexecaout_h=usable, tcl_cv_sysexecaout_h=unusable)])\n\t\tif test $tcl_cv_sysexecaout_h = usable; then\n\t\t    AC_DEFINE(USE_SYS_EXEC_AOUT_H)\n\t\telse\n\t\t    DL_OBJS=\"\"\n\t\tfi\n\t    fi\n\tfi\n    fi\n\n    # Step 5: disable dynamic loading if requested via a command-line switch.\n\n    AC_ARG_ENABLE(load, [  --disable-load          disallow dynamic loading and \"load\" command],\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n    if test \"$tcl_ok\" = \"no\"; then\n\tDL_OBJS=\"\"\n    fi\n\n    if test \"x$DL_OBJS\" != \"x\" ; then\n\tBUILD_DLTEST=\"\\$(DLTEST_TARGETS)\"\n    else\n\techo \"Can't figure out how to do dynamic loading or shared libraries\"\n\techo \"on this system.\"\n\tSHLIB_CFLAGS=\"\"\n\tSHLIB_LD=\"\"\n\tSHLIB_SUFFIX=\"\"\n\tDL_OBJS=\"tclLoadNone.o\"\n\tDL_LIBS=\"\"\n\tLDFLAGS=\"$LDFLAGS_ORIG\"\n\tCC_SEARCH_FLAGS=\"\"\n\tLD_SEARCH_FLAGS=\"\"\n\tBUILD_DLTEST=\"\"\n    fi\n\n    # If we're running gcc, then change the C flags for compiling shared\n    # libraries to the right flags for gcc, instead of those for the\n    # standard manufacturer compiler.\n\n    if test \"$DL_OBJS\" != \"tclLoadNone.o\" ; then\n\tif test \"$GCC\" = \"yes\" ; then\n\t    case $system in\n\t\tAIX-*)\n\t\t    ;;\n\t\tBSD/OS*)\n\t\t    ;;\n\t\tIRIX*)\n\t\t    ;;\n\t\tNetBSD-*|FreeBSD-*|OpenBSD-*)\n\t\t    ;;\n\t\tDarwin-*)\n\t\t    ;;\n\t\tRISCos-*)\n\t\t    ;;\n\t\tSCO_SV-3.2*)\n\t\t    ;;\n\t\tULTRIX-4.*)\n\t\t    ;;\n\t\t*)\n\t\t    SHLIB_CFLAGS=\"-fPIC\"\n\t\t    ;;\n\t    esac\n\tfi\n    fi\n\n    if test \"$SHARED_LIB_SUFFIX\" = \"\" ; then\n\tSHARED_LIB_SUFFIX='${VERSION}\\$\\{DBGX\\}${SHLIB_SUFFIX}'\n    fi\n    if test \"$UNSHARED_LIB_SUFFIX\" = \"\" ; then\n\tUNSHARED_LIB_SUFFIX='${VERSION}\\$\\{DBGX\\}.a'\n    fi\n\n    if test \"${SHARED_BUILD}\" = \"1\" && test \"${SHLIB_SUFFIX}\" != \"\" ; then\n        LIB_SUFFIX=${SHARED_LIB_SUFFIX}\n        MAKE_LIB='${SHLIB_LD} -o [$]@ ${OBJS} ${SHLIB_LD_LIBS} ${TCL_SHLIB_LD_EXTRAS} ${TK_SHLIB_LD_EXTRAS} ${LD_SEARCH_FLAGS}'\n        INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) $(LIB_INSTALL_DIR)/$(LIB_FILE)'\n    else\n        LIB_SUFFIX=${UNSHARED_LIB_SUFFIX}\n\n        if test \"$RANLIB\" = \"\" ; then\n            MAKE_LIB='$(STLIB_LD) [$]@ ${OBJS}'\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) $(LIB_INSTALL_DIR)/$(LIB_FILE)'\n        else\n            MAKE_LIB='${STLIB_LD} [$]@ ${OBJS} ; ${RANLIB} [$]@'\n            INSTALL_LIB='$(INSTALL_LIBRARY) $(LIB_FILE) $(LIB_INSTALL_DIR)/$(LIB_FILE) ; (cd $(LIB_INSTALL_DIR) ; $(RANLIB) $(LIB_FILE))'\n        fi\n\ndnl        Not at all clear what this was doing in Tcl's configure.in\ndnl        or why it was needed was needed. In any event, this sort of\ndnl        things needs to be done in the big loop above.\ndnl        REMOVE THIS BLOCK LATER! (mdejong)\ndnl        case $system in\ndnl            BSD/OS*)\ndnl                ;;\ndnl            AIX-[[1-4]].*)\ndnl                ;;\ndnl            *)\ndnl                SHLIB_LD_LIBS=\"\"\ndnl                ;;\ndnl        esac\n    fi\n\n\n    # Stub lib does not depend on shared/static configuration\n    if test \"$RANLIB\" = \"\" ; then\n        MAKE_STUB_LIB='${STLIB_LD} [$]@ ${STUB_LIB_OBJS}'\n        INSTALL_STUB_LIB='$(INSTALL_LIBRARY) $(STUB_LIB_FILE) $(LIB_INSTALL_DIR)/$(STUB_LIB_FILE)'\n    else\n        MAKE_STUB_LIB='${STLIB_LD} [$]@ ${STUB_LIB_OBJS} ; ${RANLIB} [$]@'\n        INSTALL_STUB_LIB='$(INSTALL_LIBRARY) $(STUB_LIB_FILE) $(LIB_INSTALL_DIR)/$(STUB_LIB_FILE) ; (cd $(LIB_INSTALL_DIR) ; $(RANLIB) $(STUB_LIB_FILE))'\n    fi\n\n\n    AC_SUBST(DL_LIBS)\n\n    AC_SUBST(DL_OBJS)\n    AC_SUBST(PLAT_OBJS)\n    AC_SUBST(PLAT_SRCS)\n    AC_SUBST(CFLAGS)\n    AC_SUBST(CFLAGS_DEBUG)\n    AC_SUBST(CFLAGS_OPTIMIZE)\n    AC_SUBST(CFLAGS_WARNING)\n\n    AC_SUBST(LDFLAGS)\n    AC_SUBST(LDFLAGS_DEBUG)\n    AC_SUBST(LDFLAGS_OPTIMIZE)\n    AC_SUBST(CC_SEARCH_FLAGS)\n    AC_SUBST(LD_SEARCH_FLAGS)\n\n    AC_SUBST(STLIB_LD)\n    AC_SUBST(SHLIB_LD)\n    AC_SUBST(TCL_SHLIB_LD_EXTRAS)\n    AC_SUBST(TK_SHLIB_LD_EXTRAS)\n    AC_SUBST(SHLIB_LD_LIBS)\n    AC_SUBST(SHLIB_CFLAGS)\n    AC_SUBST(SHLIB_SUFFIX)\n\n    AC_SUBST(MAKE_LIB)\n    AC_SUBST(MAKE_STUB_LIB)\n    AC_SUBST(INSTALL_LIB)\n    AC_SUBST(INSTALL_STUB_LIB)\n    AC_SUBST(RANLIB)\n])\n\n#--------------------------------------------------------------------\n# SC_SERIAL_PORT\n#\n#\tDetermine which interface to use to talk to the serial port.\n#\tNote that #include lines must begin in leftmost column for\n#\tsome compilers to recognize them as preprocessor directives,\n#\tand some build environments have stdin not pointing at a\n#\tpseudo-terminal (usually /dev/null instead.)\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines only one of the following vars:\n#\t\tHAVE_SYS_MODEM_H\n#\t\tUSE_TERMIOS\n#\t\tUSE_TERMIO\n#\t\tUSE_SGTTY\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_SERIAL_PORT], [\n    AC_CHECK_HEADERS(sys/modem.h)\n    AC_CACHE_CHECK([termios vs. termio vs. sgtty], tcl_cv_api_serial, [\n    AC_TRY_RUN([\n#include <termios.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termio.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termios.h>\n#include <errno.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <termio.h>\n#include <errno.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n    }], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n#include <errno.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=none, tcl_cv_api_serial=none)\n    fi])\n    case $tcl_cv_api_serial in\n\ttermios) AC_DEFINE(USE_TERMIOS);;\n\ttermio)  AC_DEFINE(USE_TERMIO);;\n\tsgtty)   AC_DEFINE(USE_SGTTY);;\n    esac\n])\n\n#--------------------------------------------------------------------\n# SC_MISSING_POSIX_HEADERS\n#\n#\tSupply substitutes for missing POSIX header files.  Special\n#\tnotes:\n#\t    - stdlib.h doesn't define strtol, strtoul, or\n#\t      strtod insome versions of SunOS\n#\t    - some versions of string.h don't declare procedures such\n#\t      as strstr\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tNO_DIRENT_H\n#\t\tNO_ERRNO_H\n#\t\tNO_VALUES_H\n#\t\tHAVE_LIMITS_H or NO_LIMITS_H\n#\t\tNO_STDLIB_H\n#\t\tNO_STRING_H\n#\t\tNO_SYS_WAIT_H\n#\t\tNO_DLFCN_H\n#\t\tHAVE_UNISTD_H\n#\t\tHAVE_SYS_PARAM_H\n#\n#\t\tHAVE_STRING_H ?\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_MISSING_POSIX_HEADERS], [\n    AC_CACHE_CHECK([dirent.h], tcl_cv_dirent_h, [\n    AC_TRY_LINK([#include <sys/types.h>\n#include <dirent.h>], [\n#ifndef _POSIX_SOURCE\n#   ifdef __Lynx__\n\t/*\n\t * Generate compilation error to make the test fail:  Lynx headers\n\t * are only valid if really in the POSIX environment.\n\t */\n\n\tmissing_procedure();\n#   endif\n#endif\nDIR *d;\nstruct dirent *entryPtr;\nchar *p;\nd = opendir(\"foobar\");\nentryPtr = readdir(d);\np = entryPtr->d_name;\nclosedir(d);\n], tcl_cv_dirent_h=yes, tcl_cv_dirent_h=no)])\n\n    if test $tcl_cv_dirent_h = no; then\n\tAC_DEFINE(NO_DIRENT_H)\n    fi\n\n    AC_CHECK_HEADER(errno.h, , [AC_DEFINE(NO_ERRNO_H)])\n    AC_CHECK_HEADER(float.h, , [AC_DEFINE(NO_FLOAT_H)])\n    AC_CHECK_HEADER(values.h, , [AC_DEFINE(NO_VALUES_H)])\n    AC_CHECK_HEADER(limits.h,\n\t[AC_DEFINE(HAVE_LIMITS_H)], [AC_DEFINE(NO_LIMITS_H)])\n    AC_CHECK_HEADER(stdlib.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strtol, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtoul, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtod, stdlib.h, , tcl_ok=0)\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STDLIB_H)\n    fi\n    AC_CHECK_HEADER(string.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strstr, string.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strerror, string.h, , tcl_ok=0)\n\n    # See also memmove check below for a place where NO_STRING_H can be\n    # set and why.\n\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STRING_H)\n    fi\n\n    AC_CHECK_HEADER(sys/wait.h, , [AC_DEFINE(NO_SYS_WAIT_H)])\n    AC_CHECK_HEADER(dlfcn.h, , [AC_DEFINE(NO_DLFCN_H)])\n\n    # OS/390 lacks sys/param.h (and doesn't need it, by chance).\n    AC_HAVE_HEADERS(unistd.h sys/param.h)\n])\n\n#--------------------------------------------------------------------\n# SC_PATH_X\n#\n#\tLocate the X11 header files and the X11 library archive.  Try\n#\tthe ac_path_x macro first, but if it doesn't find the X stuff\n#\t(e.g. because there's no xmkmf program) then check through\n#\ta list of possible directories.  Under some conditions the\n#\tautoconf macro will return an include directory that contains\n#\tno include files, so double-check its result just to be safe.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tSets the the following vars:\n#\t\tXINCLUDES\n#\t\tXLIBSW\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_PATH_X], [\n    AC_PATH_X\n    not_really_there=\"\"\n    if test \"$no_x\" = \"\"; then\n\tif test \"$x_includes\" = \"\"; then\n\t    AC_TRY_CPP([#include <X11/XIntrinsic.h>], , not_really_there=\"yes\")\n\telse\n\t    if test ! -r $x_includes/X11/Intrinsic.h; then\n\t\tnot_really_there=\"yes\"\n\t    fi\n\tfi\n    fi\n    if test \"$no_x\" = \"yes\" -o \"$not_really_there\" = \"yes\"; then\n\tAC_MSG_CHECKING([for X11 header files])\n\tfound_xincludes=\"no\"\n\tAC_TRY_CPP([#include <X11/Intrinsic.h>], found_xincludes=\"yes\", found_xincludes=\"no\")\n\tif test \"$found_xincludes\" = \"no\"; then\n\t    dirs=\"/usr/unsupported/include /usr/local/include /usr/X386/include /usr/X11R6/include /usr/X11R5/include /usr/include/X11R5 /usr/include/X11R4 /usr/openwin/include /usr/X11/include /usr/sww/include\"\n\t    for i in $dirs ; do\n\t\tif test -r $i/X11/Intrinsic.h; then\n\t\t    AC_MSG_RESULT([$i])\n\t\t    XINCLUDES=\" -I$i\"\n\t\t    found_xincludes=\"yes\"\n\t\t    break\n\t\tfi\n\t    done\n\tfi\n    else\n\tif test \"$x_includes\" != \"\"; then\n\t    XINCLUDES=\"-I$x_includes\"\n\t    found_xincludes=\"yes\"\n\tfi\n    fi\n    if test found_xincludes = \"no\"; then\n\tAC_MSG_RESULT([couldn't find any!])\n    fi\n\n    if test \"$no_x\" = yes; then\n\tAC_MSG_CHECKING([for X11 libraries])\n\tXLIBSW=nope\n\tdirs=\"/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/X11R6/lib /usr/X11R5/lib /usr/lib/X11R5 /usr/lib/X11R4 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib\"\n\tfor i in $dirs ; do\n\t    if test -r $i/libX11.a -o -r $i/libX11.so -o -r $i/libX11.sl; then\n\t\tAC_MSG_RESULT([$i])\n\t\tXLIBSW=\"-L$i -lX11\"\n\t\tx_libraries=\"$i\"\n\t\tbreak\n\t    fi\n\tdone\n    else\n\tif test \"$x_libraries\" = \"\"; then\n\t    XLIBSW=-lX11\n\telse\n\t    XLIBSW=\"-L$x_libraries -lX11\"\n\tfi\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_MSG_RESULT([could not find any!  Using -lX11.])\n\tXLIBSW=-lX11\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_BLOCKING_STYLE\n#\n#\tThe statements below check for systems where POSIX-style\n#\tnon-blocking I/O (O_NONBLOCK) doesn't work or is unimplemented. \n#\tOn these systems (mostly older ones), use the old BSD-style\n#\tFIONBIO approach instead.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tHAVE_SYS_IOCTL_H\n#\t\tHAVE_SYS_FILIO_H\n#\t\tUSE_FIONBIO\n#\t\tO_NONBLOCK\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_BLOCKING_STYLE], [\n    AC_CHECK_HEADERS(sys/ioctl.h)\n    AC_CHECK_HEADERS(sys/filio.h)\n    SC_CONFIG_SYSTEM\n    AC_MSG_CHECKING([FIONBIO vs. O_NONBLOCK for nonblocking I/O])\n    case $system in\n\t# There used to be code here to use FIONBIO under AIX.  However, it\n\t# was reported that FIONBIO doesn't work under AIX 3.2.5.  Since\n\t# using O_NONBLOCK seems fine under AIX 4.*, I removed the FIONBIO\n\t# code (JO, 5/31/97).\n\n\tOSF*)\n\t    AC_DEFINE(USE_FIONBIO)\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\tSunOS-4*)\n\t    AC_DEFINE(USE_FIONBIO)\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\tULTRIX-4.*)\n\t    AC_DEFINE(USE_FIONBIO)\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\t*)\n\t    AC_MSG_RESULT([O_NONBLOCK])\n\t    ;;\n    esac\n])\n\n#--------------------------------------------------------------------\n# SC_TIME_HANLDER\n#\n#\tChecks how the system deals with time.h, what time structures\n#\tare used on the system, and what fields the structures have.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tUSE_DELTA_FOR_TZ\n#\t\tHAVE_TM_GMTOFF\n#\t\tHAVE_TM_TZADJ\n#\t\tHAVE_TIMEZONE_VAR\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TIME_HANDLER], [\n    AC_CHECK_HEADERS(sys/time.h)\n    AC_HEADER_TIME\n    AC_STRUCT_TIMEZONE\n\n    AC_CHECK_FUNCS(gmtime_r localtime_r)\n\n    AC_CACHE_CHECK([tm_tzadj in struct tm], tcl_cv_member_tm_tzadj, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_tzadj;],\n\t    tcl_cv_member_tm_tzadj=yes, tcl_cv_member_tm_tzadj=no)])\n    if test $tcl_cv_member_tm_tzadj = yes ; then\n\tAC_DEFINE(HAVE_TM_TZADJ)\n    fi\n\n    AC_CACHE_CHECK([tm_gmtoff in struct tm], tcl_cv_member_tm_gmtoff, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_gmtoff;],\n\t    tcl_cv_member_tm_gmtoff=yes, tcl_cv_member_tm_gmtoff=no)])\n    if test $tcl_cv_member_tm_gmtoff = yes ; then\n\tAC_DEFINE(HAVE_TM_GMTOFF)\n    fi\n\n    #\n    # Its important to include time.h in this check, as some systems\n    # (like convex) have timezone functions, etc.\n    #\n    AC_CACHE_CHECK([long timezone variable], tcl_cv_timezone_long, [\n\tAC_TRY_COMPILE([#include <time.h>],\n\t    [extern long timezone;\n\t    timezone += 1;\n\t    exit (0);],\n\t    tcl_cv_timezone_long=yes, tcl_cv_timezone_long=no)])\n    if test $tcl_cv_timezone_long = yes ; then\n\tAC_DEFINE(HAVE_TIMEZONE_VAR)\n    else\n\t#\n\t# On some systems (eg IRIX 6.2), timezone is a time_t and not a long.\n\t#\n\tAC_CACHE_CHECK([time_t timezone variable], tcl_cv_timezone_time, [\n\t    AC_TRY_COMPILE([#include <time.h>],\n\t\t[extern time_t timezone;\n\t\ttimezone += 1;\n\t\texit (0);],\n\t\ttcl_cv_timezone_time=yes, tcl_cv_timezone_time=no)])\n\tif test $tcl_cv_timezone_time = yes ; then\n\t    AC_DEFINE(HAVE_TIMEZONE_VAR)\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_BUGGY_STRTOD\n#\n#\tUnder Solaris 2.4, strtod returns the wrong value for the\n#\tterminating character under some conditions.  Check for this\n#\tand if the problem exists use a substitute procedure\n#\t\"fixstrtod\" (provided by Tcl) that corrects the error.\n#\tAlso, on Compaq's Tru64 Unix 5.0,\n#\tstrtod(\" \") returns 0.0 instead of a failure to convert.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tMight defines some of the following vars:\n#\t\tstrtod (=fixstrtod)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_BUGGY_STRTOD], [\n    AC_CHECK_FUNC(strtod, tcl_strtod=1, tcl_strtod=0)\n    if test \"$tcl_strtod\" = 1; then\n\tAC_CACHE_CHECK([for Solaris2.4/Tru64 strtod bugs], tcl_cv_strtod_buggy,[\n\t    AC_TRY_RUN([\n\t\textern double strtod();\n\t\tint main() {\n\t\t    char *infString=\"Inf\", *nanString=\"NaN\", *spaceString=\" \";\n\t\t    char *term;\n\t\t    double value;\n\t\t    value = strtod(infString, &term);\n\t\t    if ((term != infString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(nanString, &term);\n\t\t    if ((term != nanString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(spaceString, &term);\n\t\t    if (term == (spaceString+1)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    exit(0);\n\t\t}], tcl_cv_strtod_buggy=ok, tcl_cv_strtod_buggy=buggy,\n\t\t    tcl_cv_strtod_buggy=buggy)])\n\tif test \"$tcl_cv_strtod_buggy\" = buggy; then\n\t    LIBOBJS=\"$LIBOBJS fixstrtod.o\"\n\t    AC_DEFINE(strtod, fixstrtod)\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_LINK_LIBS\n#\n#\tSearch for the libraries needed to link the Tcl shell.\n#\tThings like the math library (-lm) and socket stuff (-lsocket vs.\n#\t-lnsl) are dealt with here.\n#\n# Arguments:\n#\tRequires the following vars to be set in the Makefile:\n#\t\tDL_LIBS\n#\t\tLIBS\n#\t\tMATH_LIBS\n#\t\n# Results:\n#\n#\tSubst's the following var:\n#\t\tTCL_LIBS\n#\t\tMATH_LIBS\n#\n#\tMight append to the following vars:\n#\t\tLIBS\n#\n#\tMight define the following vars:\n#\t\tHAVE_NET_ERRNO_H\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_LINK_LIBS], [\n    #--------------------------------------------------------------------\n    # On a few very rare systems, all of the libm.a stuff is\n    # already in libc.a.  Set compiler flags accordingly.\n    # Also, Linux requires the \"ieee\" library for math to work\n    # right (and it must appear before \"-lm\").\n    #--------------------------------------------------------------------\n\n    AC_CHECK_FUNC(sin, MATH_LIBS=\"\", MATH_LIBS=\"-lm\")\n    AC_CHECK_LIB(ieee, main, [MATH_LIBS=\"-lieee $MATH_LIBS\"])\n\n    #--------------------------------------------------------------------\n    # Interactive UNIX requires -linet instead of -lsocket, plus it\n    # needs net/errno.h to define the socket-related error codes.\n    #--------------------------------------------------------------------\n\n    AC_CHECK_LIB(inet, main, [LIBS=\"$LIBS -linet\"])\n    AC_CHECK_HEADER(net/errno.h, [AC_DEFINE(HAVE_NET_ERRNO_H)])\n\n    #--------------------------------------------------------------------\n    #\tCheck for the existence of the -lsocket and -lnsl libraries.\n    #\tThe order here is important, so that they end up in the right\n    #\torder in the command line generated by make.  Here are some\n    #\tspecial considerations:\n    #\t1. Use \"connect\" and \"accept\" to check for -lsocket, and\n    #\t   \"gethostbyname\" to check for -lnsl.\n    #\t2. Use each function name only once:  can't redo a check because\n    #\t   autoconf caches the results of the last check and won't redo it.\n    #\t3. Use -lnsl and -lsocket only if they supply procedures that\n    #\t   aren't already present in the normal libraries.  This is because\n    #\t   IRIX 5.2 has libraries, but they aren't needed and they're\n    #\t   bogus:  they goof up name resolution if used.\n    #\t4. On some SVR4 systems, can't use -lsocket without -lnsl too.\n    #\t   To get around this problem, check for both libraries together\n    #\t   if -lsocket doesn't work by itself.\n    #--------------------------------------------------------------------\n\n    tcl_checkBoth=0\n    AC_CHECK_FUNC(connect, tcl_checkSocket=0, tcl_checkSocket=1)\n    if test \"$tcl_checkSocket\" = 1; then\n\tAC_CHECK_FUNC(setsockopt, , [AC_CHECK_LIB(socket, setsockopt,\n\t    LIBS=\"$LIBS -lsocket\", tcl_checkBoth=1)])\n    fi\n    if test \"$tcl_checkBoth\" = 1; then\n\ttk_oldLibs=$LIBS\n\tLIBS=\"$LIBS -lsocket -lnsl\"\n\tAC_CHECK_FUNC(accept, tcl_checkNsl=0, [LIBS=$tk_oldLibs])\n    fi\n    AC_CHECK_FUNC(gethostbyname, , [AC_CHECK_LIB(nsl, gethostbyname,\n\t    [LIBS=\"$LIBS -lnsl\"])])\n    \n    # Don't perform the eval of the libraries here because DL_LIBS\n    # won't be set until we call SC_CONFIG_CFLAGS\n\n    TCL_LIBS='${DL_LIBS} ${LIBS} ${MATH_LIBS}'\n    AC_SUBST(TCL_LIBS)\n    AC_SUBST(MATH_LIBS)\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_EARLY_FLAGS\n#\n#\tCheck for what flags are needed to be passed so the correct OS\n#\tfeatures are available.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\t_ISOC99_SOURCE\n#\t\t_LARGEFILE64_SOURCE\n#\t\t_LARGEFILE_SOURCE64\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_EARLY_FLAG],[\n    AC_CACHE_VAL([tcl_cv_flag_]translit($1,[A-Z],[a-z]),\n\tAC_TRY_COMPILE([$2], $3, [tcl_cv_flag_]translit($1,[A-Z],[a-z])=no,\n\t    AC_TRY_COMPILE([[#define ]$1[ 1\n]$2], $3,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=yes,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=no)))\n    if test [\"x${tcl_cv_flag_]translit($1,[A-Z],[a-z])[}\" = \"xyes\"] ; then\n\tAC_DEFINE($1)\n\ttcl_flags=\"$tcl_flags $1\"\n    fi\n])\n\nAC_DEFUN([SC_TCL_EARLY_FLAGS],[\n    AC_MSG_CHECKING([for required early compiler flags])\n    tcl_flags=\"\"\n    SC_TCL_EARLY_FLAG(_ISOC99_SOURCE,[#include <stdlib.h>],\n\t[char *p = (char *)strtoll; char *q = (char *)strtoull;])\n    SC_TCL_EARLY_FLAG(_LARGEFILE64_SOURCE,[#include <sys/stat.h>],\n\t[struct stat64 buf; int i = stat64(\"/\", &buf);])\n    SC_TCL_EARLY_FLAG(_LARGEFILE_SOURCE64,[#include <sys/stat.h>],\n\t[char *p = (char *)open64;])\n    if test \"x${tcl_flags}\" = \"x\" ; then\n\tAC_MSG_RESULT([none])\n    else\n\tAC_MSG_RESULT([${tcl_flags}])\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_64BIT_FLAGS\n#\n#\tCheck for what is defined in the way of 64-bit features.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tTCL_WIDE_INT_IS_LONG\n#\t\tTCL_WIDE_INT_TYPE\n#\t\tHAVE_STRUCT_DIRENT64\n#\t\tHAVE_STRUCT_STAT64\n#\t\tHAVE_TYPE_OFF64_T\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_64BIT_FLAGS], [\n    AC_MSG_CHECKING([for 64-bit integer type])\n    AC_CACHE_VAL(tcl_cv_type_64bit,[\n\ttcl_cv_type_64bit=none\n\t# See if the compiler knows natively about __int64\n\tAC_TRY_COMPILE(,[__int64 value = (__int64) 0;],\n\t    tcl_type_64bit=__int64, tcl_type_64bit=\"long long\")\n\t# See if we should use long anyway  Note that we substitute in the\n\t# type that is our current guess for a 64-bit type inside this check\n\t# program, so it should be modified only carefully...\n        AC_TRY_COMPILE(,[switch (0) { \n            case 1: case (sizeof(]${tcl_type_64bit}[)==sizeof(long)): ; \n        }],tcl_cv_type_64bit=${tcl_type_64bit})])\n    if test \"${tcl_cv_type_64bit}\" = none ; then\n\tAC_DEFINE(TCL_WIDE_INT_IS_LONG)\n\tAC_MSG_RESULT([using long])\n    else\n\tAC_DEFINE_UNQUOTED(TCL_WIDE_INT_TYPE,${tcl_cv_type_64bit})\n\tAC_MSG_RESULT([${tcl_cv_type_64bit}])\n\n\t# Now check for auxiliary declarations\n\tAC_CACHE_CHECK([for struct dirent64], tcl_cv_struct_dirent64,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>\n#include <sys/dirent.h>],[struct dirent64 p;],\n\t\ttcl_cv_struct_dirent64=yes,tcl_cv_struct_dirent64=no)])\n\tif test \"x${tcl_cv_struct_dirent64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_DIRENT64)\n\tfi\n\n\tAC_CACHE_CHECK([for struct stat64], tcl_cv_struct_stat64,[\n\t    AC_TRY_COMPILE([#include <sys/stat.h>],[struct stat64 p;\n],\n\t\ttcl_cv_struct_stat64=yes,tcl_cv_struct_stat64=no)])\n\tif test \"x${tcl_cv_struct_stat64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_STAT64)\n\tfi\n\n\tAC_CHECK_FUNCS(open64 lseek64)\n\tAC_MSG_CHECKING([for off64_t])\n\tAC_CACHE_VAL(tcl_cv_type_off64_t,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>],[off64_t offset;\n],\n\t\ttcl_cv_type_off64_t=yes,tcl_cv_type_off64_t=no)])\n\tdnl Define HAVE_TYPE_OFF64_T only when the off64_t type and the\n\tdnl functions lseek64 and open64 are defined.\n\tif test \"x${tcl_cv_type_off64_t}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_lseek64}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_open64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_TYPE_OFF64_T)\n\t    AC_MSG_RESULT([yes])\n\telse\n\t    AC_MSG_RESULT([no])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETHOSTBYADDR_R\n#\n#\tCheck if we have MT-safe variant of gethostbyaddr().\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETHOSTBYADDR_R\n#\t\tHAVE_GETHOSTBYADDR_R_7\n#\t\tHAVE_GETHOSTBYADDR_R_8\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETHOSTBYADDR_R], [AC_CHECK_FUNC(gethostbyaddr_r, [\n    AC_CACHE_CHECK([for gethostbyaddr_r with 7 args], tcl_cv_api_gethostbyaddr_r_7, [\n    AC_TRY_COMPILE([\n\t#include <netdb.h>\n    ], [\n\tchar *addr;\n\tint length;\n\tint type;\n\tstruct hostent *result;\n\tchar buffer[2048];\n\tint buflen = 2048;\n\tint h_errnop;\n\n\t(void) gethostbyaddr_r(addr, length, type, result, buffer, buflen,\n\t\t\t       &h_errnop);\n    ], tcl_cv_api_gethostbyaddr_r_7=yes, tcl_cv_api_gethostbyaddr_r_7=no)])\n    tcl_ok=$tcl_cv_api_gethostbyaddr_r_7\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYADDR_R_7)\n    else\n\tAC_CACHE_CHECK([for gethostbyaddr_r with 8 args], tcl_cv_api_gethostbyaddr_r_8, [\n\tAC_TRY_COMPILE([\n\t    #include <netdb.h>\n\t], [\n\t    char *addr;\n\t    int length;\n\t    int type;\n\t    struct hostent *result, *resultp;\n\t    char buffer[2048];\n\t    int buflen = 2048;\n\t    int h_errnop;\n\n\t    (void) gethostbyaddr_r(addr, length, type, result, buffer, buflen,\n\t\t\t\t   &resultp, &h_errnop);\n\t], tcl_cv_api_gethostbyaddr_r_8=yes, tcl_cv_api_gethostbyaddr_r_8=no)])\n\ttcl_ok=$tcl_cv_api_gethostbyaddr_r_8\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETHOSTBYADDR_R_8)\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYADDR_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETHOSTBYNAME_R\n#\n#\tCheck to see what variant of gethostbyname_r() we have.\n#\tBased on David Arnold's example from the comp.programming.threads\n#\tFAQ Q213\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETHOSTBYADDR_R\n#\t\tHAVE_GETHOSTBYADDR_R_3\n#\t\tHAVE_GETHOSTBYADDR_R_5\n#\t\tHAVE_GETHOSTBYADDR_R_6\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETHOSTBYNAME_R], [AC_CHECK_FUNC(gethostbyname_r, [\n    AC_CACHE_CHECK([for gethostbyname_r with 6 args], tcl_cv_api_gethostbyname_r_6, [\n    AC_TRY_COMPILE([\n\t#include <netdb.h>\n    ], [\n\tchar *name;\n\tstruct hostent *he, *res;\n\tchar buffer[2048];\n\tint buflen = 2048;\n\tint h_errnop;\n\n\t(void) gethostbyname_r(name, he, buffer, buflen, &res, &h_errnop);\n    ], tcl_cv_api_gethostbyname_r_6=yes, tcl_cv_api_gethostbyname_r_6=no)])\n    tcl_ok=$tcl_cv_api_gethostbyname_r_6\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYNAME_R_6)\n    else\n\tAC_CACHE_CHECK([for gethostbyname_r with 5 args], tcl_cv_api_gethostbyname_r_5, [\n\tAC_TRY_COMPILE([\n\t    #include <netdb.h>\n\t], [\n\t    char *name;\n\t    struct hostent *he;\n\t    char buffer[2048];\n\t    int buflen = 2048;\n\t    int h_errnop;\n\n\t    (void) gethostbyname_r(name, he, buffer, buflen, &h_errnop);\n\t], tcl_cv_api_gethostbyname_r_5=yes, tcl_cv_api_gethostbyname_r_5=no)])\n\ttcl_ok=$tcl_cv_api_gethostbyname_r_5\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETHOSTBYNAME_R_5)\n\telse\n\t    AC_CACHE_CHECK([for gethostbyname_r with 3 args], tcl_cv_api_gethostbyname_r_3, [\n\t    AC_TRY_COMPILE([\n\t\t#include <netdb.h>\n\t    ], [\n\t\tchar *name;\n\t\tstruct hostent *he;\n\t\tstruct hostent_data data;\n\n\t\t(void) gethostbyname_r(name, he, &data);\n\t    ], tcl_cv_api_gethostbyname_r_3=yes, tcl_cv_api_gethostbyname_r_3=no)])\n\t    tcl_ok=$tcl_cv_api_gethostbyname_r_3\n\t    if test \"$tcl_ok\" = yes; then\n\t\tAC_DEFINE(HAVE_GETHOSTBYNAME_R_3)\n\t    fi\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETHOSTBYNAME_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETPWUID_R\n#\n#\tCheck if we have MT-safe variant of getpwuid() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETPWUID_R\n#\t\tHAVE_GETPWUID_R_4\n#\t\tHAVE_GETPWUID_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETPWUID_R], [AC_CHECK_FUNC(getpwuid_r, [\n    AC_CACHE_CHECK([for getpwuid_r with 5 args], tcl_cv_api_getpwuid_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <pwd.h>\n    ], [\n\tuid_t uid;\n\tstruct passwd pw, *pwp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getpwuid_r(uid, &pw, buf, buflen, &pwp);\n    ], tcl_cv_api_getpwuid_r_5=yes, tcl_cv_api_getpwuid_r_5=no)])\n    tcl_ok=$tcl_cv_api_getpwuid_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWUID_R_5)\n    else\n\tAC_CACHE_CHECK([for getpwuid_r with 4 args], tcl_cv_api_getpwuid_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <pwd.h>\n\t], [\n\t    uid_t uid;\n\t    struct passwd pw;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getpwnam_r(uid, &pw, buf, buflen);\n\t], tcl_cv_api_getpwuid_r_4=yes, tcl_cv_api_getpwuid_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getpwuid_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETPWUID_R_4)\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWUID_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETPWNAM_R\n#\n#\tCheck if we have MT-safe variant of getpwnam() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETPWNAM_R\n#\t\tHAVE_GETPWNAM_R_4\n#\t\tHAVE_GETPWNAM_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETPWNAM_R], [AC_CHECK_FUNC(getpwnam_r, [\n    AC_CACHE_CHECK([for getpwnam_r with 5 args], tcl_cv_api_getpwnam_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <pwd.h>\n    ], [\n\tchar *name;\n\tstruct passwd pw, *pwp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getpwnam_r(name, &pw, buf, buflen, &pwp);\n    ], tcl_cv_api_getpwnam_r_5=yes, tcl_cv_api_getpwnam_r_5=no)])\n    tcl_ok=$tcl_cv_api_getpwnam_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWNAM_R_5)\n    else\n\tAC_CACHE_CHECK([for getpwnam_r with 4 args], tcl_cv_api_getpwnam_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <pwd.h>\n\t], [\n\t    char *name;\n\t    struct passwd pw;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getpwnam_r(name, &pw, buf, buflen);\n\t], tcl_cv_api_getpwnam_r_4=yes, tcl_cv_api_getpwnam_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getpwnam_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETPWNAM_R_4)\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETPWNAM_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETGRGID_R\n#\n#\tCheck if we have MT-safe variant of getgrgid() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETGRGID_R\n#\t\tHAVE_GETGRGID_R_4\n#\t\tHAVE_GETGRGID_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETGRGID_R], [AC_CHECK_FUNC(getgrgid_r, [\n    AC_CACHE_CHECK([for getgrgid_r with 5 args], tcl_cv_api_getgrgid_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <grp.h>\n    ], [\n\tgid_t gid;\n\tstruct group gr, *grp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getgrgid_r(gid, &gr, buf, buflen, &grp);\n    ], tcl_cv_api_getgrgid_r_5=yes, tcl_cv_api_getgrgid_r_5=no)])\n    tcl_ok=$tcl_cv_api_getgrgid_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRGID_R_5)\n    else\n\tAC_CACHE_CHECK([for getgrgid_r with 4 args], tcl_cv_api_getgrgid_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <grp.h>\n\t], [\n\t    gid_t gid;\n\t    struct group gr;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getgrgid_r(gid, &gr, buf, buflen);\n\t], tcl_cv_api_getgrgid_r_4=yes, tcl_cv_api_getgrgid_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getgrgid_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETGRGID_R_4)\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRGID_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_TCL_GETGRNAM_R\n#\n#\tCheck if we have MT-safe variant of getgrnam() and if yes,\n#\twhich one exactly.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tHAVE_GETGRNAM_R\n#\t\tHAVE_GETGRNAM_R_4\n#\t\tHAVE_GETGRNAM_R_5\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_TCL_GETGRNAM_R], [AC_CHECK_FUNC(getgrnam_r, [\n    AC_CACHE_CHECK([for getgrnam_r with 5 args], tcl_cv_api_getgrnam_r_5, [\n    AC_TRY_COMPILE([\n\t#include <sys/types.h>\n\t#include <grp.h>\n    ], [\n\tchar *name;\n\tstruct group gr, *grp;\n\tchar buf[512];\n\tint buflen = 512;\n\n\t(void) getgrnam_r(name, &gr, buf, buflen, &grp);\n    ], tcl_cv_api_getgrnam_r_5=yes, tcl_cv_api_getgrnam_r_5=no)])\n    tcl_ok=$tcl_cv_api_getgrnam_r_5\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRNAM_R_5)\n    else\n\tAC_CACHE_CHECK([for getgrnam_r with 4 args], tcl_cv_api_getgrnam_r_4, [\n\tAC_TRY_COMPILE([\n\t    #include <sys/types.h>\n\t    #include <grp.h>\n\t], [\n\t    char *name;\n\t    struct group gr;\n\t    char buf[512];\n\t    int buflen = 512;\n\n\t    (void)getgrnam_r(name, &gr, buf, buflen);\n\t], tcl_cv_api_getgrnam_r_4=yes, tcl_cv_api_getgrnam_r_4=no)])\n\ttcl_ok=$tcl_cv_api_getgrnam_r_4\n\tif test \"$tcl_ok\" = yes; then\n\t    AC_DEFINE(HAVE_GETGRNAM_R_4)\n\tfi\n    fi\n    if test \"$tcl_ok\" = yes; then\n\tAC_DEFINE(HAVE_GETGRNAM_R)\n    fi\n])])\n\n#--------------------------------------------------------------------\n# SC_CONFIG_COMMANDS_PRE(CMDS)\n#\n#\tReplacement for autoconf 2.5x AC_COMMANDS_PRE:\n#\t\tCommands to run right before config.status is\n#\t\tcreated. Accumulates.\n#\n#\tRequires presence of SC_OUTPUT_COMMANDS_PRE at the end\n#\tof configure.in (right before AC_OUTPUT).\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([SC_CONFIG_COMMANDS_PRE], [\n    define([SC_OUTPUT_COMMANDS_PRE], defn([SC_OUTPUT_COMMANDS_PRE])[$1\n])])\nAC_DEFUN([SC_OUTPUT_COMMANDS_PRE])\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/config/lib-link.m4": "# lib-link.m4 serial 4 (gettext-0.12)\ndnl Copyright (C) 2001-2003 Free Software Foundation, Inc.\ndnl This file is free software, distributed under the terms of the GNU\ndnl General Public License.  As a special exception to the GNU General\ndnl Public License, this file may be distributed as part of a program\ndnl that contains a configuration script generated by Autoconf, under\ndnl the same distribution terms as the rest of that program.\n\ndnl From Bruno Haible.\n\ndnl AC_LIB_LINKFLAGS(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets and AC_SUBSTs the LIB${NAME} and LTLIB${NAME} variables and\ndnl augments the CPPFLAGS variable.\nAC_DEFUN([AC_LIB_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [\n    AC_LIB_LINKFLAGS_BODY([$1], [$2])\n    ac_cv_lib[]Name[]_libs=\"$LIB[]NAME\"\n    ac_cv_lib[]Name[]_ltlibs=\"$LTLIB[]NAME\"\n    ac_cv_lib[]Name[]_cppflags=\"$INC[]NAME\"\n  ])\n  LIB[]NAME=\"$ac_cv_lib[]Name[]_libs\"\n  LTLIB[]NAME=\"$ac_cv_lib[]Name[]_ltlibs\"\n  INC[]NAME=\"$ac_cv_lib[]Name[]_cppflags\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the\n  dnl results of this search when this library appears as a dependency.\n  HAVE_LIB[]NAME=yes\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl AC_LIB_HAVE_LINKFLAGS(name, dependencies, includes, testcode)\ndnl searches for libname and the libraries corresponding to explicit and\ndnl implicit dependencies, together with the specified include files and\ndnl the ability to compile and link the specified testcode. If found, it\ndnl sets and AC_SUBSTs HAVE_LIB${NAME}=yes and the LIB${NAME} and\ndnl LTLIB${NAME} variables and augments the CPPFLAGS variable, and\ndnl #defines HAVE_LIB${NAME} to 1. Otherwise, it sets and AC_SUBSTs\ndnl HAVE_LIB${NAME}=no and LIB${NAME} and LTLIB${NAME} to empty.\nAC_DEFUN([AC_LIB_HAVE_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n\n  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME\n  dnl accordingly.\n  AC_LIB_LINKFLAGS_BODY([$1], [$2])\n\n  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,\n  dnl because if the user has installed lib[]Name and not disabled its use\n  dnl via --without-lib[]Name-prefix, he wants to use it.\n  ac_save_CPPFLAGS=\"$CPPFLAGS\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n\n  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [\n    ac_save_LIBS=\"$LIBS\"\n    LIBS=\"$LIBS $LIB[]NAME\"\n    AC_TRY_LINK([$3], [$4], [ac_cv_lib[]Name=yes], [ac_cv_lib[]Name=no])\n    LIBS=\"$ac_save_LIBS\"\n  ])\n  if test \"$ac_cv_lib[]Name\" = yes; then\n    HAVE_LIB[]NAME=yes\n    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the $1 library.])\n    AC_MSG_CHECKING([how to link with lib[]$1])\n    AC_MSG_RESULT([$LIB[]NAME])\n  else\n    HAVE_LIB[]NAME=no\n    dnl If $LIB[]NAME didn't lead to a usable library, we don't need\n    dnl $INC[]NAME either.\n    CPPFLAGS=\"$ac_save_CPPFLAGS\"\n    LIB[]NAME=\n    LTLIB[]NAME=\n  fi\n  AC_SUBST([HAVE_LIB]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl Determine the platform dependent parameters needed to use rpath:\ndnl libext, shlibext, hardcode_libdir_flag_spec, hardcode_libdir_separator,\ndnl hardcode_direct, hardcode_minus_L.\nAC_DEFUN([AC_LIB_RPATH],\n[\n  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS\n  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld\n  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host\n  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir\n  AC_CACHE_CHECK([for shared library run path origin], acl_cv_rpath, [\n    CC=\"$CC\" GCC=\"$GCC\" LDFLAGS=\"$LDFLAGS\" LD=\"$LD\" with_gnu_ld=\"$with_gnu_ld\" \\\n    ${CONFIG_SHELL-/bin/sh} \"$ac_aux_dir/config.rpath\" \"$host\" > conftest.sh\n    . ./conftest.sh\n    rm -f ./conftest.sh\n    acl_cv_rpath=done\n  ])\n  wl=\"$acl_cv_wl\"\n  libext=\"$acl_cv_libext\"\n  shlibext=\"$acl_cv_shlibext\"\n  hardcode_libdir_flag_spec=\"$acl_cv_hardcode_libdir_flag_spec\"\n  hardcode_libdir_separator=\"$acl_cv_hardcode_libdir_separator\"\n  hardcode_direct=\"$acl_cv_hardcode_direct\"\n  hardcode_minus_L=\"$acl_cv_hardcode_minus_L\"\n  dnl Determine whether the user wants rpath handling at all.\n  AC_ARG_ENABLE(rpath,\n    [  --disable-rpath         do not hardcode runtime library paths],\n    :, enable_rpath=yes)\n])\n\ndnl AC_LIB_LINKFLAGS_BODY(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets the LIB${NAME}, LTLIB${NAME} and INC${NAME} variables.\nAC_DEFUN([AC_LIB_LINKFLAGS_BODY],\n[\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_LIB_ARG_WITH([lib$1-prefix],\n[  --with-lib$1-prefix[=DIR]  search for lib$1 in DIR/include and DIR/lib\n  --without-lib$1-prefix     don't search for lib$1 in includedir and libdir],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/lib\"\n      fi\n    fi\n])\n  dnl Search the library and its dependencies in $additional_libdir and\n  dnl $LDFLAGS. Using breadth-first-seach.\n  LIB[]NAME=\n  LTLIB[]NAME=\n  INC[]NAME=\n  rpathdirs=\n  ltrpathdirs=\n  names_already_handled=\n  names_next_round='$1 $2'\n  while test -n \"$names_next_round\"; do\n    names_this_round=\"$names_next_round\"\n    names_next_round=\n    for name in $names_this_round; do\n      already_handled=\n      for n in $names_already_handled; do\n        if test \"$n\" = \"$name\"; then\n          already_handled=yes\n          break\n        fi\n      done\n      if test -z \"$already_handled\"; then\n        names_already_handled=\"$names_already_handled $name\"\n        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS\n        dnl or AC_LIB_HAVE_LINKFLAGS call.\n        uppername=`echo \"$name\" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./-|ABCDEFGHIJKLMNOPQRSTUVWXYZ___|'`\n        eval value=\\\"\\$HAVE_LIB$uppername\\\"\n        if test -n \"$value\"; then\n          if test \"$value\" = yes; then\n            eval value=\\\"\\$LIB$uppername\\\"\n            test -z \"$value\" || LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$value\"\n            eval value=\\\"\\$LTLIB$uppername\\\"\n            test -z \"$value\" || LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$value\"\n          else\n            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined\n            dnl that this library doesn't exist. So just drop it.\n            :\n          fi\n        else\n          dnl Search the library lib$name in $additional_libdir and $LDFLAGS\n          dnl and the already constructed $LIBNAME/$LTLIBNAME.\n          found_dir=\n          found_la=\n          found_so=\n          found_a=\n          if test $use_additional = yes; then\n            if test -n \"$shlibext\" && test -f \"$additional_libdir/lib$name.$shlibext\"; then\n              found_dir=\"$additional_libdir\"\n              found_so=\"$additional_libdir/lib$name.$shlibext\"\n              if test -f \"$additional_libdir/lib$name.la\"; then\n                found_la=\"$additional_libdir/lib$name.la\"\n              fi\n            else\n              if test -f \"$additional_libdir/lib$name.$libext\"; then\n                found_dir=\"$additional_libdir\"\n                found_a=\"$additional_libdir/lib$name.$libext\"\n                if test -f \"$additional_libdir/lib$name.la\"; then\n                  found_la=\"$additional_libdir/lib$name.la\"\n                fi\n              fi\n            fi\n          fi\n          if test \"X$found_dir\" = \"X\"; then\n            for x in $LDFLAGS $LTLIB[]NAME; do\n              AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n              case \"$x\" in\n                -L*)\n                  dir=`echo \"X$x\" | sed -e 's/^X-L//'`\n                  if test -n \"$shlibext\" && test -f \"$dir/lib$name.$shlibext\"; then\n                    found_dir=\"$dir\"\n                    found_so=\"$dir/lib$name.$shlibext\"\n                    if test -f \"$dir/lib$name.la\"; then\n                      found_la=\"$dir/lib$name.la\"\n                    fi\n                  else\n                    if test -f \"$dir/lib$name.$libext\"; then\n                      found_dir=\"$dir\"\n                      found_a=\"$dir/lib$name.$libext\"\n                      if test -f \"$dir/lib$name.la\"; then\n                        found_la=\"$dir/lib$name.la\"\n                      fi\n                    fi\n                  fi\n                  ;;\n              esac\n              if test \"X$found_dir\" != \"X\"; then\n                break\n              fi\n            done\n          fi\n          if test \"X$found_dir\" != \"X\"; then\n            dnl Found the library.\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name\"\n            if test \"X$found_so\" != \"X\"; then\n              dnl Linking with a shared library. We attempt to hardcode its\n              dnl directory into the executable's runpath, unless it's the\n              dnl standard /usr/lib.\n              if test \"$enable_rpath\" = no || test \"X$found_dir\" = \"X/usr/lib\"; then\n                dnl No hardcoding is needed.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n              else\n                dnl Use an explicit option to hardcode DIR into the resulting\n                dnl binary.\n                dnl Potentially add DIR to ltrpathdirs.\n                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                haveit=\n                for x in $ltrpathdirs; do\n                  if test \"X$x\" = \"X$found_dir\"; then\n                    haveit=yes\n                    break\n                  fi\n                done\n                if test -z \"$haveit\"; then\n                  ltrpathdirs=\"$ltrpathdirs $found_dir\"\n                fi\n                dnl The hardcoding into $LIBNAME is system dependent.\n                if test \"$hardcode_direct\" = yes; then\n                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the\n                  dnl resulting binary.\n                  LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                else\n                  if test -n \"$hardcode_libdir_flag_spec\" && test \"$hardcode_minus_L\" = no; then\n                    dnl Use an explicit option to hardcode DIR into the resulting\n                    dnl binary.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    dnl Potentially add DIR to rpathdirs.\n                    dnl The rpathdirs will be appended to $LIBNAME at the end.\n                    haveit=\n                    for x in $rpathdirs; do\n                      if test \"X$x\" = \"X$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      rpathdirs=\"$rpathdirs $found_dir\"\n                    fi\n                  else\n                    dnl Rely on \"-L$found_dir\".\n                    dnl But don't add it if it's already contained in the LDFLAGS\n                    dnl or the already constructed $LIBNAME\n                    haveit=\n                    for x in $LDFLAGS $LIB[]NAME; do\n                      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                      if test \"X$x\" = \"X-L$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir\"\n                    fi\n                    if test \"$hardcode_minus_L\" != no; then\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    else\n                      dnl We cannot use $hardcode_runpath_var and LD_RUN_PATH\n                      dnl here, because this doesn't fit in flags passed to the\n                      dnl compiler. So give up. No hardcoding. This affects only\n                      dnl very old systems.\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n                    fi\n                  fi\n                fi\n              fi\n            else\n              if test \"X$found_a\" != \"X\"; then\n                dnl Linking with a static library.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_a\"\n              else\n                dnl We shouldn't come here, but anyway it's good to have a\n                dnl fallback.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name\"\n              fi\n            fi\n            dnl Assume the include files are nearby.\n            additional_includedir=\n            case \"$found_dir\" in\n              */lib | */lib/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e 's,/lib/*$,,'`\n                additional_includedir=\"$basedir/include\"\n                ;;\n            esac\n            if test \"X$additional_includedir\" != \"X\"; then\n              dnl Potentially add $additional_includedir to $INCNAME.\n              dnl But don't add it\n              dnl   1. if it's the standard /usr/include,\n              dnl   2. if it's /usr/local/include and we are using GCC on Linux,\n              dnl   3. if it's already present in $CPPFLAGS or the already\n              dnl      constructed $INCNAME,\n              dnl   4. if it doesn't exist as a directory.\n              if test \"X$additional_includedir\" != \"X/usr/include\"; then\n                haveit=\n                if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n                  if test -n \"$GCC\"; then\n                    case $host_os in\n                      linux*) haveit=yes;;\n                    esac\n                  fi\n                fi\n                if test -z \"$haveit\"; then\n                  for x in $CPPFLAGS $INC[]NAME; do\n                    AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                    if test \"X$x\" = \"X-I$additional_includedir\"; then\n                      haveit=yes\n                      break\n                    fi\n                  done\n                  if test -z \"$haveit\"; then\n                    if test -d \"$additional_includedir\"; then\n                      dnl Really add $additional_includedir to $INCNAME.\n                      INC[]NAME=\"${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir\"\n                    fi\n                  fi\n                fi\n              fi\n            fi\n            dnl Look for dependencies.\n            if test -n \"$found_la\"; then\n              dnl Read the .la file. It defines the variables\n              dnl dlname, library_names, old_library, dependency_libs, current,\n              dnl age, revision, installed, dlopen, dlpreopen, libdir.\n              save_libdir=\"$libdir\"\n              case \"$found_la\" in\n                */* | *\\\\*) . \"$found_la\" ;;\n                *) . \"./$found_la\" ;;\n              esac\n              libdir=\"$save_libdir\"\n              dnl We use only dependency_libs.\n              for dep in $dependency_libs; do\n                case \"$dep\" in\n                  -L*)\n                    additional_libdir=`echo \"X$dep\" | sed -e 's/^X-L//'`\n                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.\n                    dnl But don't add it\n                    dnl   1. if it's the standard /usr/lib,\n                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,\n                    dnl   3. if it's already present in $LDFLAGS or the already\n                    dnl      constructed $LIBNAME,\n                    dnl   4. if it doesn't exist as a directory.\n                    if test \"X$additional_libdir\" != \"X/usr/lib\"; then\n                      haveit=\n                      if test \"X$additional_libdir\" = \"X/usr/local/lib\"; then\n                        if test -n \"$GCC\"; then\n                          case $host_os in\n                            linux*) haveit=yes;;\n                          esac\n                        fi\n                      fi\n                      if test -z \"$haveit\"; then\n                        haveit=\n                        for x in $LDFLAGS $LIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LIBNAME.\n                            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                        haveit=\n                        for x in $LDFLAGS $LTLIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LTLIBNAME.\n                            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                      fi\n                    fi\n                    ;;\n                  -R*)\n                    dir=`echo \"X$dep\" | sed -e 's/^X-R//'`\n                    if test \"$enable_rpath\" != no; then\n                      dnl Potentially add DIR to rpathdirs.\n                      dnl The rpathdirs will be appended to $LIBNAME at the end.\n                      haveit=\n                      for x in $rpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        rpathdirs=\"$rpathdirs $dir\"\n                      fi\n                      dnl Potentially add DIR to ltrpathdirs.\n                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                      haveit=\n                      for x in $ltrpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        ltrpathdirs=\"$ltrpathdirs $dir\"\n                      fi\n                    fi\n                    ;;\n                  -l*)\n                    dnl Handle this in the next round.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's/^X-l//'`\n                    ;;\n                  *.la)\n                    dnl Handle this in the next round. Throw away the .la's\n                    dnl directory; it is already contained in a preceding -L\n                    dnl option.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\\.la$,,'`\n                    ;;\n                  *)\n                    dnl Most likely an immediate library name.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$dep\"\n                    LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep\"\n                    ;;\n                esac\n              done\n            fi\n          else\n            dnl Didn't find the library; assume it is in the system directories\n            dnl known to the linker and runtime loader. (All the system\n            dnl directories known to the linker should also be known to the\n            dnl runtime loader, otherwise the system is severely misconfigured.)\n            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name\"\n          fi\n        fi\n      fi\n    done\n  done\n  if test \"X$rpathdirs\" != \"X\"; then\n    if test -n \"$hardcode_libdir_separator\"; then\n      dnl Weird platform: only the last -rpath option counts, the user must\n      dnl pass all path elements in one option. We can arrange that for a\n      dnl single library, but not when more than one $LIBNAMEs are used.\n      alldirs=\n      for found_dir in $rpathdirs; do\n        alldirs=\"${alldirs}${alldirs:+$hardcode_libdir_separator}$found_dir\"\n      done\n      dnl Note: hardcode_libdir_flag_spec uses $libdir and $wl.\n      acl_save_libdir=\"$libdir\"\n      libdir=\"$alldirs\"\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n      libdir=\"$acl_save_libdir\"\n      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n    else\n      dnl The -rpath options are cumulative.\n      for found_dir in $rpathdirs; do\n        acl_save_libdir=\"$libdir\"\n        libdir=\"$found_dir\"\n        eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n        libdir=\"$acl_save_libdir\"\n        LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n      done\n    fi\n  fi\n  if test \"X$ltrpathdirs\" != \"X\"; then\n    dnl When using libtool, the option that works for both libraries and\n    dnl executables is -R. The -R options are cumulative.\n    for found_dir in $ltrpathdirs; do\n      LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir\"\n    done\n  fi\n])\n\ndnl AC_LIB_APPENDTOVAR(VAR, CONTENTS) appends the elements of CONTENTS to VAR,\ndnl unless already present in VAR.\ndnl Works only for CPPFLAGS, not for LIB* variables because that sometimes\ndnl contains two or three consecutive elements that belong together.\nAC_DEFUN([AC_LIB_APPENDTOVAR],\n[\n  for element in [$2]; do\n    haveit=\n    for x in $[$1]; do\n      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n      if test \"X$x\" = \"X$element\"; then\n        haveit=yes\n        break\n      fi\n    done\n    if test -z \"$haveit\"; then\n      [$1]=\"${[$1]}${[$1]:+ }$element\"\n    fi\n  done\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/include/elf/mips.h": "/* MIPS ELF support for BFD.\n   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n   2003, 2004, 2005, 2008, 2009\n   Free Software Foundation, Inc.\n\n   By Ian Lance Taylor, Cygnus Support, <ian@cygnus.com>, from\n   information in the System V Application Binary Interface, MIPS\n   Processor Supplement.\n\nThis file is part of BFD, the Binary File Descriptor library.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n\n/* This file holds definitions specific to the MIPS ELF ABI.  Note\n   that most of this is not actually implemented by BFD.  */\n\n#ifndef _ELF_MIPS_H\n#define _ELF_MIPS_H\n\n#include \"elf/reloc-macros.h\"\n\n/* Relocation types.  */\nSTART_RELOC_NUMBERS (elf_mips_reloc_type)\n  RELOC_NUMBER (R_MIPS_NONE, 0)\n  RELOC_NUMBER (R_MIPS_16, 1)\n  RELOC_NUMBER (R_MIPS_32, 2)\t\t/* In Elf 64: alias R_MIPS_ADD */\n  RELOC_NUMBER (R_MIPS_REL32, 3)\t/* In Elf 64: alias R_MIPS_REL */\n  RELOC_NUMBER (R_MIPS_26, 4)\n  RELOC_NUMBER (R_MIPS_HI16, 5)\n  RELOC_NUMBER (R_MIPS_LO16, 6)\n  RELOC_NUMBER (R_MIPS_GPREL16, 7)\t/* In Elf 64: alias R_MIPS_GPREL */\n  RELOC_NUMBER (R_MIPS_LITERAL, 8)\n  RELOC_NUMBER (R_MIPS_GOT16, 9)\t/* In Elf 64: alias R_MIPS_GOT */\n  RELOC_NUMBER (R_MIPS_PC16, 10)\n  RELOC_NUMBER (R_MIPS_CALL16, 11)\t/* In Elf 64: alias R_MIPS_CALL */\n  RELOC_NUMBER (R_MIPS_GPREL32, 12)\n  /* The remaining relocs are defined on Irix, although they are not\n     in the MIPS ELF ABI.  */\n  RELOC_NUMBER (R_MIPS_UNUSED1, 13)\n  RELOC_NUMBER (R_MIPS_UNUSED2, 14)\n  RELOC_NUMBER (R_MIPS_UNUSED3, 15)\n  RELOC_NUMBER (R_MIPS_SHIFT5, 16)\n  RELOC_NUMBER (R_MIPS_SHIFT6, 17)\n  RELOC_NUMBER (R_MIPS_64, 18)\n  RELOC_NUMBER (R_MIPS_GOT_DISP, 19)\n  RELOC_NUMBER (R_MIPS_GOT_PAGE, 20)\n  RELOC_NUMBER (R_MIPS_GOT_OFST, 21)\n  RELOC_NUMBER (R_MIPS_GOT_HI16, 22)\n  RELOC_NUMBER (R_MIPS_GOT_LO16, 23)\n  RELOC_NUMBER (R_MIPS_SUB, 24)\n  RELOC_NUMBER (R_MIPS_INSERT_A, 25)\n  RELOC_NUMBER (R_MIPS_INSERT_B, 26)\n  RELOC_NUMBER (R_MIPS_DELETE, 27)\n  RELOC_NUMBER (R_MIPS_HIGHER, 28)\n  RELOC_NUMBER (R_MIPS_HIGHEST, 29)\n  RELOC_NUMBER (R_MIPS_CALL_HI16, 30)\n  RELOC_NUMBER (R_MIPS_CALL_LO16, 31)\n  RELOC_NUMBER (R_MIPS_SCN_DISP, 32)\n  RELOC_NUMBER (R_MIPS_REL16, 33)\n  RELOC_NUMBER (R_MIPS_ADD_IMMEDIATE, 34)\n  RELOC_NUMBER (R_MIPS_PJUMP, 35)\n  RELOC_NUMBER (R_MIPS_RELGOT, 36)\n  RELOC_NUMBER (R_MIPS_JALR, 37)\n  /* TLS relocations.  */\n  RELOC_NUMBER (R_MIPS_TLS_DTPMOD32, 38)\n  RELOC_NUMBER (R_MIPS_TLS_DTPREL32, 39)\n  RELOC_NUMBER (R_MIPS_TLS_DTPMOD64, 40)\n  RELOC_NUMBER (R_MIPS_TLS_DTPREL64, 41)\n  RELOC_NUMBER (R_MIPS_TLS_GD, 42)\n  RELOC_NUMBER (R_MIPS_TLS_LDM, 43)\n  RELOC_NUMBER (R_MIPS_TLS_DTPREL_HI16, 44)\n  RELOC_NUMBER (R_MIPS_TLS_DTPREL_LO16, 45)\n  RELOC_NUMBER (R_MIPS_TLS_GOTTPREL, 46)\n  RELOC_NUMBER (R_MIPS_TLS_TPREL32, 47)\n  RELOC_NUMBER (R_MIPS_TLS_TPREL64, 48)\n  RELOC_NUMBER (R_MIPS_TLS_TPREL_HI16, 49)\n  RELOC_NUMBER (R_MIPS_TLS_TPREL_LO16, 50)\n  RELOC_NUMBER (R_MIPS_GLOB_DAT, 51)\n  FAKE_RELOC (R_MIPS_max, 52)\n  /* These relocs are used for the mips16.  */\n  FAKE_RELOC (R_MIPS16_min, 100)\n  RELOC_NUMBER (R_MIPS16_26, 100)\n  RELOC_NUMBER (R_MIPS16_GPREL, 101)\n  RELOC_NUMBER (R_MIPS16_GOT16, 102)\n  RELOC_NUMBER (R_MIPS16_CALL16, 103)\n  RELOC_NUMBER (R_MIPS16_HI16, 104)\n  RELOC_NUMBER (R_MIPS16_LO16, 105)\n  FAKE_RELOC (R_MIPS16_max, 106)\n  /* These relocations are specific to VxWorks.  */\n  RELOC_NUMBER (R_MIPS_COPY, 126)\n  RELOC_NUMBER (R_MIPS_JUMP_SLOT, 127)\n  /* This was a GNU extension used by embedded-PIC.  It was co-opted by\n     mips-linux for exception-handling data.  It is no longer used, but\n     should continue to be supported by the linker for backward\n     compatibility.  (GCC stopped using it in May, 2004.)  */\n  RELOC_NUMBER (R_MIPS_PC32, 248)\n  /* FIXME: this relocation is used internally by gas.  */\n  RELOC_NUMBER (R_MIPS_GNU_REL16_S2, 250)\n  /* These are GNU extensions to enable C++ vtable garbage collection.  */\n  RELOC_NUMBER (R_MIPS_GNU_VTINHERIT, 253)\n  RELOC_NUMBER (R_MIPS_GNU_VTENTRY, 254)\nEND_RELOC_NUMBERS (R_MIPS_maxext)\n\n/* Processor specific flags for the ELF header e_flags field.  */\n\n/* At least one .noreorder directive appears in the source.  */\n#define EF_MIPS_NOREORDER\t0x00000001\n\n/* File contains position independent code.  */\n#define EF_MIPS_PIC\t\t0x00000002\n\n/* Code in file uses the standard calling sequence for calling\n   position independent code.  */\n#define EF_MIPS_CPIC\t\t0x00000004\n\n/* ???  Unknown flag, set in IRIX 6's BSDdup2.o in libbsd.a.  */\n#define EF_MIPS_XGOT\t\t0x00000008\n\n/* Code in file uses UCODE (obsolete) */\n#define EF_MIPS_UCODE\t\t0x00000010\n\n/* Code in file uses new ABI (-n32 on Irix 6).  */\n#define EF_MIPS_ABI2\t\t0x00000020\n\n/* Process the .MIPS.options section first by ld */\n#define EF_MIPS_OPTIONS_FIRST\t0x00000080\n\n/* Architectural Extensions used by this file */\n#define EF_MIPS_ARCH_ASE\t0x0f000000\n\n/* Use MDMX multimedia extensions */\n#define EF_MIPS_ARCH_ASE_MDMX\t0x08000000\n\n/* Use MIPS-16 ISA extensions */\n#define EF_MIPS_ARCH_ASE_M16\t0x04000000\n\n/* Indicates code compiled for a 64-bit machine in 32-bit mode.\n   (regs are 32-bits wide.) */\n#define EF_MIPS_32BITMODE       0x00000100\n\n/* Four bit MIPS architecture field.  */\n#define EF_MIPS_ARCH\t\t0xf0000000\n\n/* -mips1 code.  */\n#define E_MIPS_ARCH_1\t\t0x00000000\n\n/* -mips2 code.  */\n#define E_MIPS_ARCH_2\t\t0x10000000\n\n/* -mips3 code.  */\n#define E_MIPS_ARCH_3\t\t0x20000000\n\n/* -mips4 code.  */\n#define E_MIPS_ARCH_4\t\t0x30000000\n\n/* -mips5 code.  */\n#define E_MIPS_ARCH_5           0x40000000\n\n/* -mips32 code.  */\n#define E_MIPS_ARCH_32          0x50000000\n\n/* -mips64 code.  */\n#define E_MIPS_ARCH_64          0x60000000\n\n/* -mips32r2 code.  */\n#define E_MIPS_ARCH_32R2        0x70000000\n\n/* -mips64r2 code.  */\n#define E_MIPS_ARCH_64R2        0x80000000\n\n/* The ABI of the file.  Also see EF_MIPS_ABI2 above. */\n#define EF_MIPS_ABI\t\t0x0000F000\n\n/* The original o32 abi. */\n#define E_MIPS_ABI_O32          0x00001000\n\n/* O32 extended to work on 64 bit architectures */\n#define E_MIPS_ABI_O64          0x00002000\n\n/* EABI in 32 bit mode */\n#define E_MIPS_ABI_EABI32       0x00003000\n\n/* EABI in 64 bit mode */\n#define E_MIPS_ABI_EABI64       0x00004000\n\n\n/* Machine variant if we know it.  This field was invented at Cygnus,\n   but it is hoped that other vendors will adopt it.  If some standard\n   is developed, this code should be changed to follow it. */\n\n#define EF_MIPS_MACH\t\t0x00FF0000\n\n/* Cygnus is choosing values between 80 and 9F;\n   00 - 7F should be left for a future standard;\n   the rest are open. */\n\n#define E_MIPS_MACH_3900\t0x00810000\n#define E_MIPS_MACH_4010\t0x00820000\n#define E_MIPS_MACH_4100\t0x00830000\n#define E_MIPS_MACH_4650\t0x00850000\n#define E_MIPS_MACH_4120\t0x00870000\n#define E_MIPS_MACH_4111\t0x00880000\n#define E_MIPS_MACH_SB1         0x008a0000\n#define E_MIPS_MACH_OCTEON\t0x008b0000\n#define E_MIPS_MACH_XLR     \t0x008c0000\n#define E_MIPS_MACH_5400\t0x00910000\n#define E_MIPS_MACH_5500\t0x00980000\n#define E_MIPS_MACH_9000\t0x00990000\n#define E_MIPS_MACH_LS2E        0x00A00000\n#define E_MIPS_MACH_LS2F        0x00A10000\n\f\n/* Processor specific section indices.  These sections do not actually\n   exist.  Symbols with a st_shndx field corresponding to one of these\n   values have a special meaning.  */\n\n/* Defined and allocated common symbol.  Value is virtual address.  If\n   relocated, alignment must be preserved.  */\n#define SHN_MIPS_ACOMMON\tSHN_LORESERVE\n\n/* Defined and allocated text symbol.  Value is virtual address.\n   Occur in the dynamic symbol table of Alpha OSF/1 and Irix 5 executables.  */\n#define SHN_MIPS_TEXT\t\t(SHN_LORESERVE + 1)\n\n/* Defined and allocated data symbol.  Value is virtual address.\n   Occur in the dynamic symbol table of Alpha OSF/1 and Irix 5 executables.  */\n#define SHN_MIPS_DATA\t\t(SHN_LORESERVE + 2)\n\n/* Small common symbol.  */\n#define SHN_MIPS_SCOMMON\t(SHN_LORESERVE + 3)\n\n/* Small undefined symbol.  */\n#define SHN_MIPS_SUNDEFINED\t(SHN_LORESERVE + 4)\n\f\n/* Processor specific section types.  */\n\n/* Section contains the set of dynamic shared objects used when\n   statically linking.  */\n#define SHT_MIPS_LIBLIST\t0x70000000\n\n/* I'm not sure what this is, but it's used on Irix 5.  */\n#define SHT_MIPS_MSYM\t\t0x70000001\n\n/* Section contains list of symbols whose definitions conflict with\n   symbols defined in shared objects.  */\n#define SHT_MIPS_CONFLICT\t0x70000002\n\n/* Section contains the global pointer table.  */\n#define SHT_MIPS_GPTAB\t\t0x70000003\n\n/* Section contains microcode information.  The exact format is\n   unspecified.  */\n#define SHT_MIPS_UCODE\t\t0x70000004\n\n/* Section contains some sort of debugging information.  The exact\n   format is unspecified.  It's probably ECOFF symbols.  */\n#define SHT_MIPS_DEBUG\t\t0x70000005\n\n/* Section contains register usage information.  */\n#define SHT_MIPS_REGINFO\t0x70000006\n\n/* ??? */\n#define SHT_MIPS_PACKAGE\t0x70000007\n\n/* ??? */\n#define SHT_MIPS_PACKSYM\t0x70000008\n\n/* ??? */\n#define SHT_MIPS_RELD\t\t0x70000009\n\n/* Section contains interface information.  */\n#define SHT_MIPS_IFACE\t\t0x7000000b\n\n/* Section contains description of contents of another section.  */\n#define SHT_MIPS_CONTENT\t0x7000000c\n\n/* Section contains miscellaneous options.  */\n#define SHT_MIPS_OPTIONS\t0x7000000d\n\n/* ??? */\n#define SHT_MIPS_SHDR\t\t0x70000010\n\n/* ??? */\n#define SHT_MIPS_FDESC\t\t0x70000011\n\n/* ??? */\n#define SHT_MIPS_EXTSYM\t\t0x70000012\n\n/* ??? */\n#define SHT_MIPS_DENSE\t\t0x70000013\n\n/* ??? */\n#define SHT_MIPS_PDESC\t\t0x70000014\n\n/* ??? */\n#define SHT_MIPS_LOCSYM\t\t0x70000015\n\n/* ??? */\n#define SHT_MIPS_AUXSYM\t\t0x70000016\n\n/* ??? */\n#define SHT_MIPS_OPTSYM\t\t0x70000017\n\n/* ??? */\n#define SHT_MIPS_LOCSTR\t\t0x70000018\n\n/* ??? */\n#define SHT_MIPS_LINE\t\t0x70000019\n\n/* ??? */\n#define SHT_MIPS_RFDESC\t\t0x7000001a\n\n/* Delta C++: symbol table */\n#define SHT_MIPS_DELTASYM\t0x7000001b\n\n/* Delta C++: instance table */\n#define SHT_MIPS_DELTAINST\t0x7000001c\n\n/* Delta C++: class table */\n#define SHT_MIPS_DELTACLASS\t0x7000001d\n\n/* DWARF debugging section.  */\n#define SHT_MIPS_DWARF\t\t0x7000001e\n\n/* Delta C++: declarations */\n#define SHT_MIPS_DELTADECL\t0x7000001f\n\n/* List of libraries the binary depends on.  Includes a time stamp, version\n   number.  */\n#define SHT_MIPS_SYMBOL_LIB\t0x70000020\n\n/* Events section.  */\n#define SHT_MIPS_EVENTS\t\t0x70000021\n\n/* ??? */\n#define SHT_MIPS_TRANSLATE\t0x70000022\n\n/* Special pixie sections */\n#define SHT_MIPS_PIXIE\t\t0x70000023\n\n/* Address translation table (for debug info) */\n#define SHT_MIPS_XLATE\t\t0x70000024\n\n/* SGI internal address translation table (for debug info) */\n#define SHT_MIPS_XLATE_DEBUG\t0x70000025\n\n/* Intermediate code */\n#define SHT_MIPS_WHIRL\t\t0x70000026\n\n/* C++ exception handling region info */\n#define SHT_MIPS_EH_REGION\t0x70000027\n\n/* Obsolete address translation table (for debug info) */\n#define SHT_MIPS_XLATE_OLD\t0x70000028\n\n/* Runtime procedure descriptor table exception information (ucode) ??? */\n#define SHT_MIPS_PDR_EXCEPTION\t0x70000029\n\n\n/* A section of type SHT_MIPS_LIBLIST contains an array of the\n   following structure.  The sh_link field is the section index of the\n   string table.  The sh_info field is the number of entries in the\n   section.  */\ntypedef struct\n{\n  /* String table index for name of shared object.  */\n  unsigned long l_name;\n  /* Time stamp.  */\n  unsigned long l_time_stamp;\n  /* Checksum of symbol names and common sizes.  */\n  unsigned long l_checksum;\n  /* String table index for version.  */\n  unsigned long l_version;\n  /* Flags.  */\n  unsigned long l_flags;\n} Elf32_Lib;\n\n/* The external version of Elf32_Lib.  */\ntypedef struct\n{\n  unsigned char l_name[4];\n  unsigned char l_time_stamp[4];\n  unsigned char l_checksum[4];\n  unsigned char l_version[4];\n  unsigned char l_flags[4];\n} Elf32_External_Lib;\n\n/* The l_flags field of an Elf32_Lib structure may contain the\n   following flags.  */\n\n/* Require an exact match at runtime.  */\n#define LL_EXACT_MATCH\t\t0x00000001\n\n/* Ignore version incompatibilities at runtime.  */\n#define LL_IGNORE_INT_VER\t0x00000002\n\n/* Require matching minor version number.  */\n#define LL_REQUIRE_MINOR\t0x00000004\n\n/* ??? */\n#define LL_EXPORTS\t\t0x00000008\n\n/* Delay loading of this library until really needed.  */\n#define LL_DELAY_LOAD\t\t0x00000010\n\n/* ??? Delta C++ stuff ??? */\n#define LL_DELTA\t\t0x00000020\n\n\n/* A section of type SHT_MIPS_CONFLICT is an array of indices into the\n   .dynsym section.  Each element has the following type.  */\ntypedef unsigned long Elf32_Conflict;\ntypedef unsigned char Elf32_External_Conflict[4];\n\ntypedef unsigned long Elf64_Conflict;\ntypedef unsigned char Elf64_External_Conflict[8];\n\n/* A section of type SHT_MIPS_GPTAB contains information about how\n   much GP space would be required for different -G arguments.  This\n   information is only used so that the linker can provide informative\n   suggestions as to the best -G value to use.  The sh_info field is\n   the index of the section for which this information applies.  The\n   contents of the section are an array of the following union.  The\n   first element uses the gt_header field.  The remaining elements use\n   the gt_entry field.  */\ntypedef union\n{\n  struct\n    {\n      /* -G value actually used for this object file.  */\n      unsigned long gt_current_g_value;\n      /* Unused.  */\n      unsigned long gt_unused;\n    } gt_header;\n  struct\n    {\n      /* If this -G argument has been used...  */\n      unsigned long gt_g_value;\n      /* ...this many GP section bytes would be required.  */\n      unsigned long gt_bytes;\n    } gt_entry;\n} Elf32_gptab;\n\n/* The external version of Elf32_gptab.  */\n\ntypedef union\n{\n  struct\n    {\n      unsigned char gt_current_g_value[4];\n      unsigned char gt_unused[4];\n    } gt_header;\n  struct\n    {\n      unsigned char gt_g_value[4];\n      unsigned char gt_bytes[4];\n    } gt_entry;\n} Elf32_External_gptab;\n\n/* A section of type SHT_MIPS_REGINFO contains the following\n   structure.  */\ntypedef struct\n{\n  /* Mask of general purpose registers used.  */\n  unsigned long ri_gprmask;\n  /* Mask of co-processor registers used.  */\n  unsigned long ri_cprmask[4];\n  /* GP register value for this object file.  */\n  long ri_gp_value;\n} Elf32_RegInfo;\n\n/* The external version of the Elf_RegInfo structure.  */\ntypedef struct\n{\n  unsigned char ri_gprmask[4];\n  unsigned char ri_cprmask[4][4];\n  unsigned char ri_gp_value[4];\n} Elf32_External_RegInfo;\n\n/* MIPS ELF .reginfo swapping routines.  */\nextern void bfd_mips_elf32_swap_reginfo_in\n  (bfd *, const Elf32_External_RegInfo *, Elf32_RegInfo *);\nextern void bfd_mips_elf32_swap_reginfo_out\n  (bfd *, const Elf32_RegInfo *, Elf32_External_RegInfo *);\n\f\n/* Processor specific section flags.  */\n\n/* This section must be in the global data area.  */\n#define SHF_MIPS_GPREL\t\t0x10000000\n\n/* This section should be merged.  */\n#define SHF_MIPS_MERGE\t\t0x20000000\n\n/* This section contains address data of size implied by section\n   element size.  */\n#define SHF_MIPS_ADDR\t\t0x40000000\n\n/* This section contains string data.  */\n#define SHF_MIPS_STRING\t\t0x80000000\n\n/* This section may not be stripped.  */\n#define SHF_MIPS_NOSTRIP\t0x08000000\n\n/* This section is local to threads.  */\n#define SHF_MIPS_LOCAL\t\t0x04000000\n\n/* Linker should generate implicit weak names for this section.  */\n#define SHF_MIPS_NAMES\t\t0x02000000\n\n/* Section contais text/data which may be replicated in other sections.\n   Linker should retain only one copy.  */\n#define SHF_MIPS_NODUPES\t0x01000000\n\f\n/* Processor specific program header types.  */\n\n/* Register usage information.  Identifies one .reginfo section.  */\n#define PT_MIPS_REGINFO\t\t0x70000000\n\n/* Runtime procedure table.  */\n#define PT_MIPS_RTPROC\t\t0x70000001\n\n/* .MIPS.options section.  */\n#define PT_MIPS_OPTIONS\t\t0x70000002\n\f\n/* Processor specific dynamic array tags.  */\n\n/* 32 bit version number for runtime linker interface.  */\n#define DT_MIPS_RLD_VERSION\t0x70000001\n\n/* Time stamp.  */\n#define DT_MIPS_TIME_STAMP\t0x70000002\n\n/* Checksum of external strings and common sizes.  */\n#define DT_MIPS_ICHECKSUM\t0x70000003\n\n/* Index of version string in string table.  */\n#define DT_MIPS_IVERSION\t0x70000004\n\n/* 32 bits of flags.  */\n#define DT_MIPS_FLAGS\t\t0x70000005\n\n/* Base address of the segment.  */\n#define DT_MIPS_BASE_ADDRESS\t0x70000006\n\n/* ??? */\n#define DT_MIPS_MSYM\t\t0x70000007\n\n/* Address of .conflict section.  */\n#define DT_MIPS_CONFLICT\t0x70000008\n\n/* Address of .liblist section.  */\n#define DT_MIPS_LIBLIST\t\t0x70000009\n\n/* Number of local global offset table entries.  */\n#define DT_MIPS_LOCAL_GOTNO\t0x7000000a\n\n/* Number of entries in the .conflict section.  */\n#define DT_MIPS_CONFLICTNO\t0x7000000b\n\n/* Number of entries in the .liblist section.  */\n#define DT_MIPS_LIBLISTNO\t0x70000010\n\n/* Number of entries in the .dynsym section.  */\n#define DT_MIPS_SYMTABNO\t0x70000011\n\n/* Index of first external dynamic symbol not referenced locally.  */\n#define DT_MIPS_UNREFEXTNO\t0x70000012\n\n/* Index of first dynamic symbol in global offset table.  */\n#define DT_MIPS_GOTSYM\t\t0x70000013\n\n/* Number of page table entries in global offset table.  */\n#define DT_MIPS_HIPAGENO\t0x70000014\n\n/* Address of run time loader map, used for debugging.  */\n#define DT_MIPS_RLD_MAP\t\t0x70000016\n\n/* Delta C++ class definition.  */\n#define DT_MIPS_DELTA_CLASS\t0x70000017\n\n/* Number of entries in DT_MIPS_DELTA_CLASS.  */\n#define DT_MIPS_DELTA_CLASS_NO\t0x70000018\n\n/* Delta C++ class instances.  */\n#define DT_MIPS_DELTA_INSTANCE\t0x70000019\n\n/* Number of entries in DT_MIPS_DELTA_INSTANCE.  */\n#define DT_MIPS_DELTA_INSTANCE_NO\t0x7000001a\n\n/* Delta relocations.  */\n#define DT_MIPS_DELTA_RELOC\t0x7000001b\n\n/* Number of entries in DT_MIPS_DELTA_RELOC.  */\n#define DT_MIPS_DELTA_RELOC_NO\t0x7000001c\n\n/* Delta symbols that Delta relocations refer to.  */\n#define DT_MIPS_DELTA_SYM\t0x7000001d\n\n/* Number of entries in DT_MIPS_DELTA_SYM.  */\n#define DT_MIPS_DELTA_SYM_NO\t0x7000001e\n\n/* Delta symbols that hold class declarations.  */\n#define DT_MIPS_DELTA_CLASSSYM\t0x70000020\n\n/* Number of entries in DT_MIPS_DELTA_CLASSSYM.  */\n#define DT_MIPS_DELTA_CLASSSYM_NO\t0x70000021\n\n/* Flags indicating information about C++ flavor.  */\n#define DT_MIPS_CXX_FLAGS\t0x70000022\n\n/* Pixie information (???).  */\n#define DT_MIPS_PIXIE_INIT\t0x70000023\n\n/* Address of .MIPS.symlib */\n#define DT_MIPS_SYMBOL_LIB\t0x70000024\n\n/* The GOT index of the first PTE for a segment */\n#define DT_MIPS_LOCALPAGE_GOTIDX\t0x70000025\n\n/* The GOT index of the first PTE for a local symbol */\n#define DT_MIPS_LOCAL_GOTIDX\t0x70000026\n\n/* The GOT index of the first PTE for a hidden symbol */\n#define DT_MIPS_HIDDEN_GOTIDX\t0x70000027\n\n/* The GOT index of the first PTE for a protected symbol */\n#define DT_MIPS_PROTECTED_GOTIDX\t0x70000028\n\n/* Address of `.MIPS.options'.  */\n#define DT_MIPS_OPTIONS\t\t0x70000029\n\n/* Address of `.interface'.  */\n#define DT_MIPS_INTERFACE\t0x7000002a\n\n/* ??? */\n#define DT_MIPS_DYNSTR_ALIGN\t0x7000002b\n\n/* Size of the .interface section.  */\n#define DT_MIPS_INTERFACE_SIZE\t0x7000002c\n\n/* Size of rld_text_resolve function stored in the GOT.  */\n#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR\t0x7000002d\n\n/* Default suffix of DSO to be added by rld on dlopen() calls.  */\n#define DT_MIPS_PERF_SUFFIX\t0x7000002e\n\n/* Size of compact relocation section (O32).  */\n#define DT_MIPS_COMPACT_SIZE\t0x7000002f\n\n/* GP value for auxiliary GOTs.  */\n#define DT_MIPS_GP_VALUE\t0x70000030\n\n/* Address of auxiliary .dynamic.  */\n#define DT_MIPS_AUX_DYNAMIC\t0x70000031\n\n/* Address of the base of the PLTGOT.  */\n#define DT_MIPS_PLTGOT         0x70000032\n\n/* Points to the base of a writable PLT.  */\n#define DT_MIPS_RWPLT          0x70000034\n\f\n/* Flags which may appear in a DT_MIPS_FLAGS entry.  */\n\n/* No flags.  */\n#define RHF_NONE\t\t0x00000000\n\n/* Uses shortcut pointers.  */\n#define RHF_QUICKSTART\t\t0x00000001\n\n/* Hash size is not a power of two.  */\n#define RHF_NOTPOT\t\t0x00000002\n\n/* Ignore LD_LIBRARY_PATH.  */\n#define RHS_NO_LIBRARY_REPLACEMENT 0x00000004\n\n/* DSO address may not be relocated. */\n#define RHF_NO_MOVE\t\t0x00000008\n\n/* SGI specific features. */\n#define RHF_SGI_ONLY\t\t0x00000010\n\n/* Guarantee that .init will finish executing before any non-init\n   code in DSO is called. */\n#define RHF_GUARANTEE_INIT\t   0x00000020\n\n/* Contains Delta C++ code. */\n#define RHF_DELTA_C_PLUS_PLUS\t   0x00000040\n\n/* Guarantee that .init will start executing before any non-init\n   code in DSO is called. */\n#define RHF_GUARANTEE_START_INIT   0x00000080\n\n/* Generated by pixie. */\n#define RHF_PIXIE\t\t   0x00000100\n\n/* Delay-load DSO by default. */\n#define RHF_DEFAULT_DELAY_LOAD\t   0x00000200\n\n/* Object may be requickstarted */\n#define RHF_REQUICKSTART\t   0x00000400\n\n/* Object has been requickstarted */\n#define RHF_REQUICKSTARTED\t   0x00000800\n\n/* Generated by cord. */\n#define RHF_CORD\t\t   0x00001000\n\n/* Object contains no unresolved undef symbols. */\n#define RHF_NO_UNRES_UNDEF\t   0x00002000\n\n/* Symbol table is in a safe order. */\n#define RHF_RLD_ORDER_SAFE\t   0x00004000\n\f\n/* Special values for the st_other field in the symbol table.  These\n   are used in an Irix 5 dynamic symbol table.  */\n\n#define STO_DEFAULT\t\tSTV_DEFAULT\n#define STO_INTERNAL\t\tSTV_INTERNAL\n#define STO_HIDDEN\t\tSTV_HIDDEN\n#define STO_PROTECTED\t\tSTV_PROTECTED\n\n/* The MIPS psABI was updated in 2008 with support for PLTs and copy\n   relocs.  There are therefore two types of nonzero SHN_UNDEF functions:\n   PLT entries and traditional MIPS lazy binding stubs.  We mark the former\n   with STO_MIPS_PLT to distinguish them from the latter.  */\n#define STO_MIPS_PLT\t\t0x8\n\n/* This value is used to mark PIC functions in an object that mixes\n   PIC and non-PIC.  */\n#define STO_MIPS_PIC\t\t0x20\n#define ELF_ST_IS_MIPS_PIC(OTHER) \\\n  (((OTHER) & ~ELF_ST_VISIBILITY (-1)) == STO_MIPS_PIC)\n#define ELF_ST_SET_MIPS_PIC(OTHER) \\\n  (STO_MIPS_PIC | ELF_ST_VISIBILITY (OTHER))\n\n/* This value is used for a mips16 .text symbol.  */\n#define STO_MIPS16\t\t0xf0\n#define ELF_ST_IS_MIPS16(OTHER) (((OTHER) & 0xf0) == STO_MIPS16)\n#define ELF_ST_SET_MIPS16(OTHER) (((OTHER) & ~0xf0) | STO_MIPS16)\n\n/* This bit is used on Irix to indicate a symbol whose definition\n   is optional - if, at final link time, it cannot be found, no\n   error message should be produced.  */\n#define STO_OPTIONAL\t\t(1 << 2)\n/* A macro to examine the STO_OPTIONAL bit.  */\n#define ELF_MIPS_IS_OPTIONAL(other)\t((other) & STO_OPTIONAL)\n\f\n/* The 64-bit MIPS ELF ABI uses an unusual reloc format.  Each\n   relocation entry specifies up to three actual relocations, all at\n   the same address.  The first relocation which required a symbol\n   uses the symbol in the r_sym field.  The second relocation which\n   requires a symbol uses the symbol in the r_ssym field.  If all\n   three relocations require a symbol, the third one uses a zero\n   value.  */\n\n/* An entry in a 64 bit SHT_REL section.  */\n\ntypedef struct\n{\n  /* Address of relocation.  */\n  unsigned char r_offset[8];\n  /* Symbol index.  */\n  unsigned char r_sym[4];\n  /* Special symbol.  */\n  unsigned char r_ssym[1];\n  /* Third relocation.  */\n  unsigned char r_type3[1];\n  /* Second relocation.  */\n  unsigned char r_type2[1];\n  /* First relocation.  */\n  unsigned char r_type[1];\n} Elf64_Mips_External_Rel;\n\ntypedef struct\n{\n  /* Address of relocation.  */\n  bfd_vma r_offset;\n  /* Symbol index.  */\n  unsigned long r_sym;\n  /* Special symbol.  */\n  unsigned char r_ssym;\n  /* Third relocation.  */\n  unsigned char r_type3;\n  /* Second relocation.  */\n  unsigned char r_type2;\n  /* First relocation.  */\n  unsigned char r_type;\n} Elf64_Mips_Internal_Rel;\n\n/* An entry in a 64 bit SHT_RELA section.  */\n\ntypedef struct\n{\n  /* Address of relocation.  */\n  unsigned char r_offset[8];\n  /* Symbol index.  */\n  unsigned char r_sym[4];\n  /* Special symbol.  */\n  unsigned char r_ssym[1];\n  /* Third relocation.  */\n  unsigned char r_type3[1];\n  /* Second relocation.  */\n  unsigned char r_type2[1];\n  /* First relocation.  */\n  unsigned char r_type[1];\n  /* Addend.  */\n  unsigned char r_addend[8];\n} Elf64_Mips_External_Rela;\n\ntypedef struct\n{\n  /* Address of relocation.  */\n  bfd_vma r_offset;\n  /* Symbol index.  */\n  unsigned long r_sym;\n  /* Special symbol.  */\n  unsigned char r_ssym;\n  /* Third relocation.  */\n  unsigned char r_type3;\n  /* Second relocation.  */\n  unsigned char r_type2;\n  /* First relocation.  */\n  unsigned char r_type;\n  /* Addend.  */\n  bfd_signed_vma r_addend;\n} Elf64_Mips_Internal_Rela;\n\n/* MIPS ELF 64 relocation info access macros.  */\n#define ELF64_MIPS_R_SSYM(i) (((i) >> 24) & 0xff)\n#define ELF64_MIPS_R_TYPE3(i) (((i) >> 16) & 0xff)\n#define ELF64_MIPS_R_TYPE2(i) (((i) >> 8) & 0xff)\n#define ELF64_MIPS_R_TYPE(i) ((i) & 0xff)\n\n/* Values found in the r_ssym field of a relocation entry.  */\n\n/* No relocation.  */\n#define RSS_UNDEF\t0\n\n/* Value of GP.  */\n#define RSS_GP\t\t1\n\n/* Value of GP in object being relocated.  */\n#define RSS_GP0\t\t2\n\n/* Address of location being relocated.  */\n#define RSS_LOC\t\t3\n\f\n/* A SHT_MIPS_OPTIONS section contains a series of options, each of\n   which starts with this header.  */\n\ntypedef struct\n{\n  /* Type of option.  */\n  unsigned char kind[1];\n  /* Size of option descriptor, including header.  */\n  unsigned char size[1];\n  /* Section index of affected section, or 0 for global option.  */\n  unsigned char section[2];\n  /* Information specific to this kind of option.  */\n  unsigned char info[4];\n} Elf_External_Options;\n\ntypedef struct\n{\n  /* Type of option.  */\n  unsigned char kind;\n  /* Size of option descriptor, including header.  */\n  unsigned char size;\n  /* Section index of affected section, or 0 for global option.  */\n  unsigned short section;\n  /* Information specific to this kind of option.  */\n  unsigned long info;\n} Elf_Internal_Options;\n\n/* MIPS ELF option header swapping routines.  */\nextern void bfd_mips_elf_swap_options_in\n  (bfd *, const Elf_External_Options *, Elf_Internal_Options *);\nextern void bfd_mips_elf_swap_options_out\n  (bfd *, const Elf_Internal_Options *, Elf_External_Options *);\n\n/* Values which may appear in the kind field of an Elf_Options\n   structure.  */\n\n/* Undefined.  */\n#define ODK_NULL\t0\n\n/* Register usage and GP value.  */\n#define ODK_REGINFO\t1\n\n/* Exception processing information.  */\n#define ODK_EXCEPTIONS\t2\n\n/* Section padding information.  */\n#define ODK_PAD\t\t3\n\n/* Hardware workarounds performed.  */\n#define ODK_HWPATCH\t4\n\n/* Fill value used by the linker.  */\n#define ODK_FILL\t5\n\n/* Reserved space for desktop tools.  */\n#define ODK_TAGS\t6\n\n/* Hardware workarounds, AND bits when merging.  */\n#define ODK_HWAND\t7\n\n/* Hardware workarounds, OR bits when merging.  */\n#define ODK_HWOR\t8\n\n/* GP group to use for text/data sections.  */\n#define ODK_GP_GROUP\t9\n\n/* ID information.  */\n#define ODK_IDENT\t10\n\n/* In the 32 bit ABI, an ODK_REGINFO option is just a Elf32_RegInfo\n   structure.  In the 64 bit ABI, it is the following structure.  The\n   info field of the options header is not used.  */\n\ntypedef struct\n{\n  /* Mask of general purpose registers used.  */\n  unsigned char ri_gprmask[4];\n  /* Padding.  */\n  unsigned char ri_pad[4];\n  /* Mask of co-processor registers used.  */\n  unsigned char ri_cprmask[4][4];\n  /* GP register value for this object file.  */\n  unsigned char ri_gp_value[8];\n} Elf64_External_RegInfo;\n\ntypedef struct\n{\n  /* Mask of general purpose registers used.  */\n  unsigned long ri_gprmask;\n  /* Padding.  */\n  unsigned long ri_pad;\n  /* Mask of co-processor registers used.  */\n  unsigned long ri_cprmask[4];\n  /* GP register value for this object file.  */\n  bfd_vma ri_gp_value;\n} Elf64_Internal_RegInfo;\n\ntypedef struct\n{\n  /* The hash value computed from the name of the corresponding\n     dynamic symbol.  */\n  unsigned char ms_hash_value[4];\n  /* Contains both the dynamic relocation index and the symbol flags\n     field.  The macros ELF32_MS_REL_INDEX and ELF32_MS_FLAGS are used\n     to access the individual values.  The dynamic relocation index\n     identifies the first entry in the .rel.dyn section that\n     references the dynamic symbol corresponding to this msym entry.\n     If the index is 0, no dynamic relocations are associated with the\n     symbol.  The symbol flags field is reserved for future use.  */\n  unsigned char ms_info[4];\n} Elf32_External_Msym;\n\ntypedef struct\n{\n  /* The hash value computed from the name of the corresponding\n     dynamic symbol.  */\n  unsigned long ms_hash_value;\n  /* Contains both the dynamic relocation index and the symbol flags\n     field.  The macros ELF32_MS_REL_INDEX and ELF32_MS_FLAGS are used\n     to access the individual values.  The dynamic relocation index\n     identifies the first entry in the .rel.dyn section that\n     references the dynamic symbol corresponding to this msym entry.\n     If the index is 0, no dynamic relocations are associated with the\n     symbol.  The symbol flags field is reserved for future use.  */\n  unsigned long ms_info;\n} Elf32_Internal_Msym;\n\n#define ELF32_MS_REL_INDEX(i) ((i) >> 8)\n#define ELF32_MS_FLAGS(i)     (i) & 0xff)\n#define ELF32_MS_INFO(r, f)   (((r) << 8) + ((f) & 0xff))\n\n/* MIPS ELF reginfo swapping routines.  */\nextern void bfd_mips_elf64_swap_reginfo_in\n  (bfd *, const Elf64_External_RegInfo *, Elf64_Internal_RegInfo *);\nextern void bfd_mips_elf64_swap_reginfo_out\n  (bfd *, const Elf64_Internal_RegInfo *, Elf64_External_RegInfo *);\n\n/* Masks for the info work of an ODK_EXCEPTIONS descriptor.  */\n#define OEX_FPU_MIN\t0x1f\t/* FPEs which must be enabled.  */\n#define OEX_FPU_MAX\t0x1f00\t/* FPEs which may be enabled.  */\n#define OEX_PAGE0\t0x10000\t/* Page zero must be mapped.  */\n#define OEX_SMM\t\t0x20000\t/* Force sequential memory mode.  */\n#define OEX_FPDBUG\t0x40000\t/* Force precise floating-point\n\t\t\t\t   exceptions (debug mode).  */\n#define OEX_DISMISS\t0x80000\t/* Dismiss invalid address faults.  */\n\n/* Masks of the FP exceptions for OEX_FPU_MIN and OEX_FPU_MAX.  */\n#define OEX_FPU_INVAL\t0x10\t/* Invalid operation exception.  */\n#define OEX_FPU_DIV0\t0x08\t/* Division by zero exception.  */\n#define OEX_FPU_OFLO\t0x04\t/* Overflow exception.  */\n#define OEX_FPU_UFLO\t0x02\t/* Underflow exception.  */\n#define OEX_FPU_INEX\t0x01\t/* Inexact exception.  */\n\n/* Masks for the info word of an ODK_PAD descriptor.  */\n#define OPAD_PREFIX\t0x01\n#define OPAD_POSTFIX\t0x02\n#define OPAD_SYMBOL\t0x04\n\n/* Masks for the info word of an ODK_HWPATCH descriptor.  */\n#define OHW_R4KEOP\t0x00000001\t/* R4000 end-of-page patch.  */\n#define OHW_R8KPFETCH\t0x00000002\t/* May need R8000 prefetch patch.  */\n#define OHW_R5KEOP\t0x00000004\t/* R5000 end-of-page patch.  */\n#define OHW_R5KCVTL\t0x00000008\t/* R5000 cvt.[ds].l bug\n\t\t\t\t\t   (clean == 1).  */\n#define OHW_R10KLDL\t0x00000010\t/* Needs R10K misaligned\n\t\t\t\t\t   load patch. */\n\n/* Masks for the info word of an ODK_IDENT/ODK_GP_GROUP descriptor.  */\n#define OGP_GROUP\t0x0000ffff\t/* GP group number.  */\n#define OGP_SELF\t0xffff0000\t/* Self-contained GP groups.  */\n\n/* Masks for the info word of an ODK_HWAND/ODK_HWOR descriptor.  */\n#define OHWA0_R4KEOP_CHECKED\t0x00000001\n#define OHWA0_R4KEOP_CLEAN\t0x00000002\n\f\n\n/* Object attribute tags.  */\nenum\n{\n  /* 0-3 are generic.  */\n  Tag_GNU_MIPS_ABI_FP = 4, /* Value 1 for hard-float -mdouble-float, 2\n\t\t\t      for hard-float -msingle-float, 3 for\n\t\t\t      soft-float, 4 for -mips32r2 -mfp64; 0 for\n\t\t\t      not tagged or not using any ABIs affected\n\t\t\t      by the differences.  */\n};\n\n#endif /* _ELF_MIPS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/include/aout/sun4.h": "/* SPARC-specific values for a.out files \n\n   Copyright 2001 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 2 of the License, or\n   (at your option) any later version.\n   \n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n   \n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n\n/* Some systems, e.g., AIX, may have defined this in header files already\n   included.  */\n#undef  TARGET_PAGE_SIZE\n#define TARGET_PAGE_SIZE\t0x2000\t\t/* 8K.  aka NBPG in <sys/param.h> */\n/* Note that some SPARCs have 4K pages, some 8K, some others.  */\n\n#define SEG_SIZE_SPARC\tTARGET_PAGE_SIZE\n#define\tSEG_SIZE_SUN3\t0x20000\t\t/* Resolution of r/w protection hw */\n\n#define TEXT_START_ADDR\tTARGET_PAGE_SIZE\t/* Location 0 is not accessible */\n#define N_HEADER_IN_TEXT(x) 1\n\n/* Non-default definitions of the accessor macros... */\n\n/* Segment size varies on Sun-3 versus Sun-4.  */\n\n#define N_SEGSIZE(x)\t(N_MACHTYPE(x) == M_SPARC?\tSEG_SIZE_SPARC:\t\\\n\t\t\t N_MACHTYPE(x) == M_68020?\tSEG_SIZE_SUN3:\t\\\n\t\t\t/* Guess? */\t\t\tTARGET_PAGE_SIZE)\n\n/* Virtual Address of text segment from the a.out file.  For OMAGIC,\n   (almost always \"unlinked .o's\" these days), should be zero.\n   Sun added a kludge so that shared libraries linked ZMAGIC get\n   an address of zero if a_entry (!!!) is lower than the otherwise\n   expected text address.  These kludges have gotta go!\n   For linked files, should reflect reality if we know it.  */\n\n/* This differs from the version in aout64.h (which we override by defining\n   it here) only for NMAGIC (we return TEXT_START_ADDR+EXEC_BYTES_SIZE;\n   they return 0).  */\n\n#define N_TXTADDR(x) \\\n    (N_MAGIC(x)==OMAGIC? 0 \\\n     : (N_MAGIC(x) == ZMAGIC && (x).a_entry < TEXT_START_ADDR)? 0 \\\n     : TEXT_START_ADDR+EXEC_BYTES_SIZE)\n\n/* When a file is linked against a shared library on SunOS 4, the\n   dynamic bit in the exec header is set, and the first symbol in the\n   symbol table is __DYNAMIC.  Its value is the address of the\n   following structure.  */\n\nstruct external_sun4_dynamic\n{\n  /* The version number of the structure.  SunOS 4.1.x creates files\n     with version number 3, which is what this structure is based on.\n     According to gdb, version 2 is similar.  I believe that version 2\n     used a different type of procedure linkage table, and there may\n     have been other differences.  */\n  bfd_byte ld_version[4];\n  /* The virtual address of a 28 byte structure used in debugging.\n     The contents are filled in at run time by ld.so.  */\n  bfd_byte ldd[4];\n  /* The virtual address of another structure with information about\n     how to relocate the executable at run time.  */\n  bfd_byte ld[4];\n};\n\n/* The size of the debugging structure pointed to by the debugger\n   field of __DYNAMIC.  */\n#define EXTERNAL_SUN4_DYNAMIC_DEBUGGER_SIZE (24)\n\n/* The structure pointed to by the linker field of __DYNAMIC.  As far\n   as I can tell, most of the addresses in this structure are offsets\n   within the file, but some are actually virtual addresses.  */\n\nstruct internal_sun4_dynamic_link\n{\n  /* Linked list of loaded objects.  This is filled in at runtime by\n     ld.so and probably by dlopen.  */\n  unsigned long ld_loaded;\n\n  /* The address of the list of names of shared objects which must be\n     included at runtime.  Each entry in the list is 16 bytes: the 4\n     byte address of the string naming the object (e.g., for -lc this\n     is \"c\"); 4 bytes of flags--the high bit is whether to search for\n     the object using the library path; the 2 byte major version\n     number; the 2 byte minor version number; the 4 byte address of\n     the next entry in the list (zero if this is the last entry).  The\n     version numbers seem to only be non-zero when doing library\n     searching.  */\n  unsigned long ld_need;\n\n  /* The address of the path to search for the shared objects which\n     must be included.  This points to a string in PATH format which\n     is generated from the -L arguments to the linker.  According to\n     the man page, ld.so implicitly adds ${LD_LIBRARY_PATH} to the\n     beginning of this string and /lib:/usr/lib:/usr/local/lib to the\n     end.  The string is terminated by a null byte.  This field is\n     zero if there is no additional path.  */\n  unsigned long ld_rules;\n\n  /* The address of the global offset table.  This appears to be a\n     virtual address, not a file offset.  The first entry in the\n     global offset table seems to be the virtual address of the\n     sun4_dynamic structure (the same value as the __DYNAMIC symbol).\n     The global offset table is used for PIC code to hold the\n     addresses of variables.  A dynamically linked file which does not\n     itself contain PIC code has a four byte global offset table.  */\n  unsigned long ld_got;\n\n  /* The address of the procedure linkage table.  This appears to be a\n     virtual address, not a file offset.\n\n     On a SPARC, the table is composed of 12 byte entries, each of\n     which consists of three instructions.  The first entry is\n         sethi %hi(0),%g1\n\t jmp %g1\n\t nop\n     These instructions are changed by ld.so into a jump directly into\n     ld.so itself.  Each subsequent entry is\n         save %sp, -96, %sp\n\t call <address of first entry in procedure linkage table>\n\t <reloc_number | 0x01000000>\n     The reloc_number is the number of the reloc to use to resolve\n     this entry.  The reloc will be a JMP_SLOT reloc against some\n     symbol that is not defined in this object file but should be\n     defined in a shared object (if it is not, ld.so will report a\n     runtime error and exit).  The constant 0x010000000 turns the\n     reloc number into a sethi of %g0, which does nothing since %g0 is\n     hardwired to zero.\n\n     When one of these entries is executed, it winds up calling into\n     ld.so.  ld.so looks at the reloc number, available via the return\n     address, to determine which entry this is.  It then looks at the\n     reloc and patches up the entry in the table into a sethi and jmp\n     to the real address followed by a nop.  This means that the reloc\n     lookup only has to happen once, and it also means that the\n     relocation only needs to be done if the function is actually\n     called.  The relocation is expensive because ld.so must look up\n     the symbol by name.\n\n     The size of the procedure linkage table is given by the ld_plt_sz\n     field.  */\n  unsigned long ld_plt;\n\n  /* The address of the relocs.  These are in the same format as\n     ordinary relocs.  Symbol index numbers refer to the symbols\n     pointed to by ld_stab.  I think the only way to determine the\n     number of relocs is to assume that all the bytes from ld_rel to\n     ld_hash contain reloc entries.  */\n  unsigned long ld_rel;\n\n  /* The address of a hash table of symbols.  The hash table has\n     roughly the same number of entries as there are dynamic symbols;\n     I think the only way to get the exact size is to assume that\n     every byte from ld_hash to ld_stab is devoted to the hash table.\n\n     Each entry in the hash table is eight bytes.  The first four\n     bytes are a symbol index into the dynamic symbols.  The second\n     four bytes are the index of the next hash table entry in the\n     bucket.  The ld_buckets field gives the number of buckets, say B.\n     The first B entries in the hash table each start a bucket which\n     is chained through the second four bytes of each entry.  A value\n     of zero ends the chain.\n\n     The hash function is simply\n         h = 0;\n         while (*string != '\\0')\n\t   h = (h << 1) + *string++;\n\t h &= 0x7fffffff;\n\n     To look up a symbol, compute the hash value of the name.  Take\n     the modulos of hash value and the number of buckets.  Start at\n     that entry in the hash table.  See if the symbol (from the first\n     four bytes of the hash table entry) has the name you are looking\n     for.  If not, use the chain field (the second four bytes of the\n     hash table entry) to move on to the next entry in this bucket.\n     If the chain field is zero you have reached the end of the\n     bucket, and the symbol is not in the hash table.  */ \n  unsigned long ld_hash;\n\n  /* The address of the symbol table.  This is a list of\n     external_nlist structures.  The string indices are relative to\n     the ld_symbols field.  I think the only way to determine the\n     number of symbols is to assume that all the bytes between ld_stab\n     and ld_symbols are external_nlist structures.  */\n  unsigned long ld_stab;\n\n  /* I don't know what this is for.  It seems to always be zero.  */\n  unsigned long ld_stab_hash;\n\n  /* The number of buckets in the hash table.  */\n  unsigned long ld_buckets;\n\n  /* The address of the symbol string table.  The first string in this\n     string table need not be the empty string.  */\n  unsigned long ld_symbols;\n\n  /* The size in bytes of the symbol string table.  */\n  unsigned long ld_symb_size;\n\n  /* The size in bytes of the text segment.  */\n  unsigned long ld_text;\n\n  /* The size in bytes of the procedure linkage table.  */\n  unsigned long ld_plt_sz;\n};\n\n/* The external form of the structure.  */\n\nstruct external_sun4_dynamic_link\n{\n  bfd_byte ld_loaded[4];\n  bfd_byte ld_need[4];\n  bfd_byte ld_rules[4];\n  bfd_byte ld_got[4];\n  bfd_byte ld_plt[4];\n  bfd_byte ld_rel[4];\n  bfd_byte ld_hash[4];\n  bfd_byte ld_stab[4];\n  bfd_byte ld_stab_hash[4];\n  bfd_byte ld_buckets[4];\n  bfd_byte ld_symbols[4];\n  bfd_byte ld_symb_size[4];\n  bfd_byte ld_text[4];\n  bfd_byte ld_plt_sz[4];\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/elf32-frv.c": "/* FRV-specific support for 32-bit ELF.\n   Copyright 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n   Free Software Foundation, Inc.\n\n   This file is part of BFD, the Binary File Descriptor library.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n   MA 02110-1301, USA.  */\n\n#include \"sysdep.h\"\n#include \"bfd.h\"\n#include \"libbfd.h\"\n#include \"elf-bfd.h\"\n#include \"elf/frv.h\"\n#include \"dwarf2.h\"\n#include \"hashtab.h\"\n\n/* Forward declarations.  */\nstatic bfd_reloc_status_type elf32_frv_relocate_lo16\n  PARAMS ((bfd *,  Elf_Internal_Rela *, bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_hi16\n  PARAMS ((bfd *,  Elf_Internal_Rela *, bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_label24\n  PARAMS ((bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_gprel12\n  PARAMS ((struct bfd_link_info *, bfd *, asection *, Elf_Internal_Rela *,\n\t   bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_gprelu12\n  PARAMS ((struct bfd_link_info *, bfd *, asection *, Elf_Internal_Rela *,\n\t   bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_gprello\n  PARAMS ((struct bfd_link_info *, bfd *, asection *, Elf_Internal_Rela *,\n\t   bfd_byte *, bfd_vma));\nstatic bfd_reloc_status_type elf32_frv_relocate_gprelhi\n  PARAMS ((struct bfd_link_info *, bfd *, asection *, Elf_Internal_Rela *,\n\t   bfd_byte *, bfd_vma));\nstatic reloc_howto_type *frv_reloc_type_lookup\n  PARAMS ((bfd *, bfd_reloc_code_real_type));\nstatic void frv_info_to_howto_rela\n  PARAMS ((bfd *, arelent *, Elf_Internal_Rela *));\nstatic bfd_boolean elf32_frv_relocate_section\n  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,\n\t   Elf_Internal_Rela *, Elf_Internal_Sym *, asection **));\nstatic bfd_boolean elf32_frv_add_symbol_hook\n  PARAMS (( bfd *, struct bfd_link_info *, Elf_Internal_Sym *,\n\t    const char **, flagword *, asection **, bfd_vma *));\nstatic bfd_reloc_status_type frv_final_link_relocate\n  PARAMS ((reloc_howto_type *, bfd *, asection *, bfd_byte *,\n\t   Elf_Internal_Rela *, bfd_vma));\nstatic bfd_boolean elf32_frv_check_relocs\n  PARAMS ((bfd *, struct bfd_link_info *, asection *,\n\t   const Elf_Internal_Rela *));\nstatic int elf32_frv_machine\n  PARAMS ((bfd *));\nstatic bfd_boolean elf32_frv_object_p\n  PARAMS ((bfd *));\nstatic bfd_boolean frv_elf_set_private_flags\n  PARAMS ((bfd *, flagword));\nstatic bfd_boolean frv_elf_copy_private_bfd_data\n  PARAMS ((bfd *, bfd *));\nstatic bfd_boolean frv_elf_merge_private_bfd_data\n  PARAMS ((bfd *, bfd *));\nstatic bfd_boolean frv_elf_print_private_bfd_data\n  PARAMS ((bfd *, PTR));\nstatic bfd_boolean elf32_frv_grok_prstatus (bfd * abfd,\n\t\t\t\t\t    Elf_Internal_Note * note);\nstatic bfd_boolean elf32_frv_grok_psinfo (bfd * abfd,\n\t\t\t\t\t  Elf_Internal_Note * note);\n\nstatic reloc_howto_type elf32_frv_howto_table [] =\n{\n  /* This reloc does nothing.  */\n  HOWTO (R_FRV_NONE,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_NONE\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 32 bit absolute relocation.  */\n  HOWTO (R_FRV_32,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_32\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 16 bit pc-relative relocation.  */\n  HOWTO (R_FRV_LABEL16,\t\t/* type */\n\t 2,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t TRUE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_LABEL16\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t TRUE),\t\t\t/* pcrel_offset */\n\n  /* A 24-bit pc-relative relocation.  */\n  HOWTO (R_FRV_LABEL24,\t\t/* type */\n\t 2,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 26,\t\t\t/* bitsize */\n\t TRUE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_LABEL24\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0x7e03ffff,\t\t/* src_mask */\n\t 0x7e03ffff,\t\t/* dst_mask */\n\t TRUE),\t\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_LO16,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_LO16\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_HI16,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_HI16\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_GPREL12,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GPREL12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_GPRELU12,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GPRELU12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0x3f03f,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_GPREL32,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GPREL32\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_GPRELHI,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GPRELHI\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  HOWTO (R_FRV_GPRELLO,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GPRELLO\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the address of\n     the symbol.  */\n  HOWTO (R_FRV_GOT12,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOT12\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the address of the\n     symbol.  */\n  HOWTO (R_FRV_GOTHI,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTHI\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the address of the\n     symbol.  */\n  HOWTO (R_FRV_GOTLO,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTLO\",\t\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The 32-bit address of the canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the address of\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOT12,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOT12\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the address of the\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOTHI,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOTHI\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the address of the\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOTLO,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOTLO\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The 64-bit descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_VALUE,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 64,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_VALUE\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the address of\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOTOFF12, /* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOTOFF12\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the address of the\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOTOFFHI, /* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOTOFFHI\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the address of the\n     canonical descriptor of a function.  */\n  HOWTO (R_FRV_FUNCDESC_GOTOFFLO, /* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_GOTOFFLO\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the address of\n     the symbol.  */\n  HOWTO (R_FRV_GOTOFF12,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTOFF12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the address of the\n     symbol.  */\n  HOWTO (R_FRV_GOTOFFHI,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTOFFHI\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the address of the\n     symbol.  */\n  HOWTO (R_FRV_GOTOFFLO,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTOFFLO\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 24-bit pc-relative relocation referencing the TLS PLT entry for\n     a thread-local symbol.  If the symbol number is 0, it refers to\n     the module.  */\n  HOWTO (R_FRV_GETTLSOFF,\t/* type */\n\t 2,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 26,\t\t\t/* bitsize */\n\t TRUE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GETTLSOFF\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0x7e03ffff,\t\t/* src_mask */\n\t 0x7e03ffff,\t\t/* dst_mask */\n\t TRUE),\t\t\t/* pcrel_offset */\n\n  /* A 64-bit TLS descriptor for a symbol.  This relocation is only\n     valid as a REL, dynamic relocation.  */\n  HOWTO (R_FRV_TLSDESC_VALUE,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 64,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSDESC_VALUE\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the TLS\n     descriptor of the symbol.  */\n  HOWTO (R_FRV_GOTTLSDESC12,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSDESC12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the TLS descriptor of the\n     symbol.  */\n  HOWTO (R_FRV_GOTTLSDESCHI,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSDESCHI\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the TLS descriptor of the\n     symbol.  */\n  HOWTO (R_FRV_GOTTLSDESCLO,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSDESCLO\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the offset from the module base\n     address to the thread-local symbol address.  */\n  HOWTO (R_FRV_TLSMOFF12,\t /* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSMOFF12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the offset from the module base address to\n     the thread-local symbol address.  */\n  HOWTO (R_FRV_TLSMOFFHI,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSMOFFHI\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the offset from the module base address to\n     the thread-local symbol address.  */\n  HOWTO (R_FRV_TLSMOFFLO,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSMOFFLO\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 12-bit signed operand with the GOT offset for the TLSOFF entry\n     for a symbol.  */\n  HOWTO (R_FRV_GOTTLSOFF12,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 12,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_signed, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSOFF12\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xfff,\t\t\t/* src_mask */\n\t 0xfff,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The upper 16 bits of the GOT offset for the TLSOFF entry for a\n     symbol.  */\n  HOWTO (R_FRV_GOTTLSOFFHI,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSOFFHI\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The lower 16 bits of the GOT offset for the TLSOFF entry for a\n     symbol.  */\n  HOWTO (R_FRV_GOTTLSOFFLO,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 16,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GOTTLSOFFLO\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffff,\t\t/* src_mask */\n\t 0xffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* The 32-bit offset from the thread pointer (not the module base\n     address) to a thread-local symbol.  */\n  HOWTO (R_FRV_TLSOFF,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSOFF\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* An annotation for linker relaxation, that denotes the\n     symbol+addend whose TLS descriptor is referenced by the sum of\n     the two input registers of an ldd instruction.  */\n  HOWTO (R_FRV_TLSDESC_RELAX,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 0,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSDESC_RELAX\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* An annotation for linker relaxation, that denotes the\n     symbol+addend whose TLS resolver entry point is given by the sum\n     of the two register operands of an calll instruction.  */\n  HOWTO (R_FRV_GETTLSOFF_RELAX,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 0,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_GETTLSOFF_RELAX\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* An annotation for linker relaxation, that denotes the\n     symbol+addend whose TLS offset GOT entry is given by the sum of\n     the two input registers of an ld instruction.  */\n  HOWTO (R_FRV_TLSOFF_RELAX,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 0,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSOFF_RELAX\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n\n  /* A 32-bit offset from the module base address to\n     the thread-local symbol address.  */\n  HOWTO (R_FRV_TLSMOFF,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSMOFF\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE),\t\t/* pcrel_offset */\n};\n\n/* GNU extension to record C++ vtable hierarchy.  */\nstatic reloc_howto_type elf32_frv_vtinherit_howto =\n  HOWTO (R_FRV_GNU_VTINHERIT,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 0,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t NULL,\t\t\t/* special_function */\n\t \"R_FRV_GNU_VTINHERIT\", /* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\n  /* GNU extension to record C++ vtable member usage.  */\nstatic reloc_howto_type elf32_frv_vtentry_howto =\n  HOWTO (R_FRV_GNU_VTENTRY,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 0,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_dont, /* complain_on_overflow */\n\t _bfd_elf_rel_vtable_reloc_fn, /* special_function */\n\t \"R_FRV_GNU_VTENTRY\",\t/* name */\n\t FALSE,\t\t\t/* partial_inplace */\n\t 0,\t\t\t/* src_mask */\n\t 0,\t\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\n/* The following 3 relocations are REL.  The only difference to the\n   entries in the table above are that partial_inplace is TRUE.  */\nstatic reloc_howto_type elf32_frv_rel_32_howto =\n  HOWTO (R_FRV_32,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_32\",\t\t/* name */\n\t TRUE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\nstatic reloc_howto_type elf32_frv_rel_funcdesc_howto =\n  HOWTO (R_FRV_FUNCDESC,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC\",\t/* name */\n\t TRUE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\nstatic reloc_howto_type elf32_frv_rel_funcdesc_value_howto =\n  HOWTO (R_FRV_FUNCDESC_VALUE,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 64,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_FUNCDESC_VALUE\", /* name */\n\t TRUE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\nstatic reloc_howto_type elf32_frv_rel_tlsdesc_value_howto =\n  /* A 64-bit TLS descriptor for a symbol.  The first word resolves to\n     an entry point, and the second resolves to a special argument.\n     If the symbol turns out to be in static TLS, the entry point is a\n     return instruction, and the special argument is the TLS offset\n     for the symbol.  If it's in dynamic TLS, the entry point is a TLS\n     offset resolver, and the special argument is a pointer to a data\n     structure allocated by the dynamic loader, containing the GOT\n     address for the offset resolver, the module id, the offset within\n     the module, and anything else the TLS offset resolver might need\n     to determine the TLS offset for the symbol in the running\n     thread.  */\n  HOWTO (R_FRV_TLSDESC_VALUE,\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 64,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSDESC_VALUE\", /* name */\n\t TRUE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\nstatic reloc_howto_type elf32_frv_rel_tlsoff_howto =\n  /* The 32-bit offset from the thread pointer (not the module base\n     address) to a thread-local symbol.  */\n  HOWTO (R_FRV_TLSOFF,\t\t/* type */\n\t 0,\t\t\t/* rightshift */\n\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n\t 32,\t\t\t/* bitsize */\n\t FALSE,\t\t\t/* pc_relative */\n\t 0,\t\t\t/* bitpos */\n\t complain_overflow_bitfield, /* complain_on_overflow */\n\t bfd_elf_generic_reloc,\t/* special_function */\n\t \"R_FRV_TLSOFF\",\t/* name */\n\t TRUE,\t\t\t/* partial_inplace */\n\t 0xffffffff,\t\t/* src_mask */\n\t 0xffffffff,\t\t/* dst_mask */\n\t FALSE);\t\t/* pcrel_offset */\n\n\n\f\nextern const bfd_target bfd_elf32_frvfdpic_vec;\n#define IS_FDPIC(bfd) ((bfd)->xvec == &bfd_elf32_frvfdpic_vec)\n\n/* An extension of the elf hash table data structure, containing some\n   additional FRV-specific data.  */\nstruct frvfdpic_elf_link_hash_table\n{\n  struct elf_link_hash_table elf;\n\n  /* A pointer to the .got section.  */\n  asection *sgot;\n  /* A pointer to the .rel.got section.  */\n  asection *sgotrel;\n  /* A pointer to the .rofixup section.  */\n  asection *sgotfixup;\n  /* A pointer to the .plt section.  */\n  asection *splt;\n  /* A pointer to the .rel.plt section.  */\n  asection *spltrel;\n  /* GOT base offset.  */\n  bfd_vma got0;\n  /* Location of the first non-lazy PLT entry, i.e., the number of\n     bytes taken by lazy PLT entries.  If locally-bound TLS\n     descriptors require a ret instruction, it will be placed at this\n     offset.  */\n  bfd_vma plt0;\n  /* A hash table holding information about which symbols were\n     referenced with which PIC-related relocations.  */\n  struct htab *relocs_info;\n  /* Summary reloc information collected by\n     _frvfdpic_count_got_plt_entries.  */\n  struct _frvfdpic_dynamic_got_info *g;\n};\n\n/* Get the FRV ELF linker hash table from a link_info structure.  */\n\n#define frvfdpic_hash_table(info) \\\n  ((struct frvfdpic_elf_link_hash_table *) ((info)->hash))\n\n#define frvfdpic_got_section(info) \\\n  (frvfdpic_hash_table (info)->sgot)\n#define frvfdpic_gotrel_section(info) \\\n  (frvfdpic_hash_table (info)->sgotrel)\n#define frvfdpic_gotfixup_section(info) \\\n  (frvfdpic_hash_table (info)->sgotfixup)\n#define frvfdpic_plt_section(info) \\\n  (frvfdpic_hash_table (info)->splt)\n#define frvfdpic_pltrel_section(info) \\\n  (frvfdpic_hash_table (info)->spltrel)\n#define frvfdpic_relocs_info(info) \\\n  (frvfdpic_hash_table (info)->relocs_info)\n#define frvfdpic_got_initial_offset(info) \\\n  (frvfdpic_hash_table (info)->got0)\n#define frvfdpic_plt_initial_offset(info) \\\n  (frvfdpic_hash_table (info)->plt0)\n#define frvfdpic_dynamic_got_plt_info(info) \\\n  (frvfdpic_hash_table (info)->g)\n\n/* Currently it's the same, but if some day we have a reason to change\n   it, we'd better be using a different macro.\n\n   FIXME: if there's any TLS PLT entry that uses local-exec or\n   initial-exec models, we could use the ret at the end of any of them\n   instead of adding one more.  */\n#define frvfdpic_plt_tls_ret_offset(info) \\\n  (frvfdpic_plt_initial_offset (info))\n\n/* The name of the dynamic interpreter.  This is put in the .interp\n   section.  */\n\n#define ELF_DYNAMIC_INTERPRETER \"/lib/ld.so.1\"\n\n#define DEFAULT_STACK_SIZE 0x20000\n\n/* This structure is used to collect the number of entries present in\n   each addressable range of the got.  */\nstruct _frvfdpic_dynamic_got_info\n{\n  /* Several bits of information about the current link.  */\n  struct bfd_link_info *info;\n  /* Total GOT size needed for GOT entries within the 12-, 16- or 32-bit\n     ranges.  */\n  bfd_vma got12, gotlos, gothilo;\n  /* Total GOT size needed for function descriptor entries within the 12-,\n     16- or 32-bit ranges.  */\n  bfd_vma fd12, fdlos, fdhilo;\n  /* Total GOT size needed by function descriptor entries referenced\n     in PLT entries, that would be profitable to place in offsets\n     close to the PIC register.  */\n  bfd_vma fdplt;\n  /* Total PLT size needed by lazy PLT entries.  */\n  bfd_vma lzplt;\n  /* Total GOT size needed for TLS descriptor entries within the 12-,\n     16- or 32-bit ranges.  */\n  bfd_vma tlsd12, tlsdlos, tlsdhilo;\n  /* Total GOT size needed by TLS descriptors referenced in PLT\n     entries, that would be profitable to place in offers close to the\n     PIC register.  */\n  bfd_vma tlsdplt;\n  /* Total PLT size needed by TLS lazy PLT entries.  */\n  bfd_vma tlslzplt;\n  /* Number of relocations carried over from input object files.  */\n  unsigned long relocs;\n  /* Number of fixups introduced by relocations in input object files.  */\n  unsigned long fixups;\n  /* The number of fixups that reference the ret instruction added to\n     the PLT for locally-resolved TLS descriptors.  */\n  unsigned long tls_ret_refs;\n};\n\n/* This structure is used to assign offsets to got entries, function\n   descriptors, plt entries and lazy plt entries.  */\n\nstruct _frvfdpic_dynamic_got_plt_info\n{\n  /* Summary information collected with _frvfdpic_count_got_plt_entries.  */\n  struct _frvfdpic_dynamic_got_info g;\n\n  /* For each addressable range, we record a MAX (positive) and MIN\n     (negative) value.  CUR is used to assign got entries, and it's\n     incremented from an initial positive value to MAX, then from MIN\n     to FDCUR (unless FDCUR wraps around first).  FDCUR is used to\n     assign function descriptors, and it's decreased from an initial\n     non-positive value to MIN, then from MAX down to CUR (unless CUR\n     wraps around first).  All of MIN, MAX, CUR and FDCUR always point\n     to even words.  ODD, if non-zero, indicates an odd word to be\n     used for the next got entry, otherwise CUR is used and\n     incremented by a pair of words, wrapping around when it reaches\n     MAX.  FDCUR is decremented (and wrapped) before the next function\n     descriptor is chosen.  FDPLT indicates the number of remaining\n     slots that can be used for function descriptors used only by PLT\n     entries.\n\n     TMAX, TMIN and TCUR are used to assign TLS descriptors.  TCUR\n     starts as MAX, and grows up to TMAX, then wraps around to TMIN\n     and grows up to MIN.  TLSDPLT indicates the number of remaining\n     slots that can be used for TLS descriptors used only by TLS PLT\n     entries.  */\n  struct _frvfdpic_dynamic_got_alloc_data\n  {\n    bfd_signed_vma max, cur, odd, fdcur, min;\n    bfd_signed_vma tmax, tcur, tmin;\n    bfd_vma fdplt, tlsdplt;\n  } got12, gotlos, gothilo;\n};\n\n/* Create an FRV ELF linker hash table.  */\n\nstatic struct bfd_link_hash_table *\nfrvfdpic_elf_link_hash_table_create (bfd *abfd)\n{\n  struct frvfdpic_elf_link_hash_table *ret;\n  bfd_size_type amt = sizeof (struct frvfdpic_elf_link_hash_table);\n\n  ret = bfd_zalloc (abfd, amt);\n  if (ret == NULL)\n    return NULL;\n\n  if (!_bfd_elf_link_hash_table_init (&ret->elf, abfd,\n\t\t\t\t      _bfd_elf_link_hash_newfunc,\n\t\t\t\t      sizeof (struct elf_link_hash_entry)))\n    {\n      free (ret);\n      return NULL;\n    }\n\n  return &ret->elf.root;\n}\n\n/* Decide whether a reference to a symbol can be resolved locally or\n   not.  If the symbol is protected, we want the local address, but\n   its function descriptor must be assigned by the dynamic linker.  */\n#define FRVFDPIC_SYM_LOCAL(INFO, H) \\\n  (_bfd_elf_symbol_refs_local_p ((H), (INFO), 1) \\\n   || ! elf_hash_table (INFO)->dynamic_sections_created)\n#define FRVFDPIC_FUNCDESC_LOCAL(INFO, H) \\\n  ((H)->dynindx == -1 || ! elf_hash_table (INFO)->dynamic_sections_created)\n\n/* This structure collects information on what kind of GOT, PLT or\n   function descriptors are required by relocations that reference a\n   certain symbol.  */\nstruct frvfdpic_relocs_info\n{\n  /* The index of the symbol, as stored in the relocation r_info, if\n     we have a local symbol; -1 otherwise.  */\n  long symndx;\n  union\n  {\n    /* The input bfd in which the symbol is defined, if it's a local\n       symbol.  */\n    bfd *abfd;\n    /* If symndx == -1, the hash table entry corresponding to a global\n       symbol (even if it turns out to bind locally, in which case it\n       should ideally be replaced with section's symndx + addend).  */\n    struct elf_link_hash_entry *h;\n  } d;\n  /* The addend of the relocation that references the symbol.  */\n  bfd_vma addend;\n\n  /* The fields above are used to identify an entry.  The fields below\n     contain information on how an entry is used and, later on, which\n     locations it was assigned.  */\n  /* The following 3 fields record whether the symbol+addend above was\n     ever referenced with a GOT relocation.  The 12 suffix indicates a\n     GOT12 relocation; los is used for GOTLO relocations that are not\n     matched by a GOTHI relocation; hilo is used for GOTLO/GOTHI\n     pairs.  */\n  unsigned got12:1;\n  unsigned gotlos:1;\n  unsigned gothilo:1;\n  /* Whether a FUNCDESC relocation references symbol+addend.  */\n  unsigned fd:1;\n  /* Whether a FUNCDESC_GOT relocation references symbol+addend.  */\n  unsigned fdgot12:1;\n  unsigned fdgotlos:1;\n  unsigned fdgothilo:1;\n  /* Whether a FUNCDESC_GOTOFF relocation references symbol+addend.  */\n  unsigned fdgoff12:1;\n  unsigned fdgofflos:1;\n  unsigned fdgoffhilo:1;\n  /* Whether a GETTLSOFF relocation references symbol+addend.  */\n  unsigned tlsplt:1;\n  /* FIXME: we should probably add tlspltdesc, tlspltoff and\n     tlspltimm, to tell what kind of TLS PLT entry we're generating.\n     We might instead just pre-compute flags telling whether the\n     object is suitable for local exec, initial exec or general\n     dynamic addressing, and use that all over the place.  We could\n     also try to do a better job of merging TLSOFF and TLSDESC entries\n     in main executables, but perhaps we can get rid of TLSDESC\n     entirely in them instead.  */\n  /* Whether a GOTTLSDESC relocation references symbol+addend.  */\n  unsigned tlsdesc12:1;\n  unsigned tlsdesclos:1;\n  unsigned tlsdeschilo:1;\n  /* Whether a GOTTLSOFF relocation references symbol+addend.  */\n  unsigned tlsoff12:1;\n  unsigned tlsofflos:1;\n  unsigned tlsoffhilo:1;\n  /* Whether symbol+addend is referenced with GOTOFF12, GOTOFFLO or\n     GOTOFFHI relocations.  The addend doesn't really matter, since we\n     envision that this will only be used to check whether the symbol\n     is mapped to the same segment as the got.  */\n  unsigned gotoff:1;\n  /* Whether symbol+addend is referenced by a LABEL24 relocation.  */\n  unsigned call:1;\n  /* Whether symbol+addend is referenced by a 32 or FUNCDESC_VALUE\n     relocation.  */\n  unsigned sym:1;\n  /* Whether we need a PLT entry for a symbol.  Should be implied by\n     something like:\n     (call && symndx == -1 && ! FRVFDPIC_SYM_LOCAL (info, d.h))  */\n  unsigned plt:1;\n  /* Whether a function descriptor should be created in this link unit\n     for symbol+addend.  Should be implied by something like:\n     (plt || fdgotoff12 || fdgotofflos || fdgotofflohi\n      || ((fd || fdgot12 || fdgotlos || fdgothilo)\n          && (symndx != -1 || FRVFDPIC_FUNCDESC_LOCAL (info, d.h))))  */\n  unsigned privfd:1;\n  /* Whether a lazy PLT entry is needed for this symbol+addend.\n     Should be implied by something like:\n     (privfd && symndx == -1 && ! FRVFDPIC_SYM_LOCAL (info, d.h)\n      && ! (info->flags & DF_BIND_NOW))  */\n  unsigned lazyplt:1;\n  /* Whether we've already emitted GOT relocations and PLT entries as\n     needed for this symbol.  */\n  unsigned done:1;\n\n  /* The number of R_FRV_32, R_FRV_FUNCDESC, R_FRV_FUNCDESC_VALUE and\n     R_FRV_TLSDESC_VALUE, R_FRV_TLSOFF relocations referencing\n     symbol+addend.  */\n  unsigned relocs32, relocsfd, relocsfdv, relocstlsd, relocstlsoff;\n\n  /* The number of .rofixups entries and dynamic relocations allocated\n     for this symbol, minus any that might have already been used.  */\n  unsigned fixups, dynrelocs;\n\n  /* The offsets of the GOT entries assigned to symbol+addend, to the\n     function descriptor's address, and to a function descriptor,\n     respectively.  Should be zero if unassigned.  The offsets are\n     counted from the value that will be assigned to the PIC register,\n     not from the beginning of the .got section.  */\n  bfd_signed_vma got_entry, fdgot_entry, fd_entry;\n  /* The offsets of the PLT entries assigned to symbol+addend,\n     non-lazy and lazy, respectively.  If unassigned, should be\n     (bfd_vma)-1.  */\n  bfd_vma plt_entry, lzplt_entry;\n  /* The offsets of the GOT entries for TLS offset and TLS descriptor.  */\n  bfd_signed_vma tlsoff_entry, tlsdesc_entry;\n  /* The offset of the TLS offset PLT entry.  */\n  bfd_vma tlsplt_entry;\n};\n\n/* Compute a hash with the key fields of an frvfdpic_relocs_info entry.  */\nstatic hashval_t\nfrvfdpic_relocs_info_hash (const void *entry_)\n{\n  const struct frvfdpic_relocs_info *entry = entry_;\n\n  return (entry->symndx == -1\n\t  ? (long) entry->d.h->root.root.hash\n\t  : entry->symndx + (long) entry->d.abfd->id * 257) + entry->addend;\n}\n\n/* Test whether the key fields of two frvfdpic_relocs_info entries are\n   identical.  */\nstatic int\nfrvfdpic_relocs_info_eq (const void *entry1, const void *entry2)\n{\n  const struct frvfdpic_relocs_info *e1 = entry1;\n  const struct frvfdpic_relocs_info *e2 = entry2;\n\n  return e1->symndx == e2->symndx && e1->addend == e2->addend\n    && (e1->symndx == -1 ? e1->d.h == e2->d.h : e1->d.abfd == e2->d.abfd);\n}\n\n/* Find or create an entry in a hash table HT that matches the key\n   fields of the given ENTRY.  If it's not found, memory for a new\n   entry is allocated in ABFD's obstack.  */\nstatic struct frvfdpic_relocs_info *\nfrvfdpic_relocs_info_find (struct htab *ht,\n\t\t\t   bfd *abfd,\n\t\t\t   const struct frvfdpic_relocs_info *entry,\n\t\t\t   enum insert_option insert)\n{\n  struct frvfdpic_relocs_info **loc =\n    (struct frvfdpic_relocs_info **) htab_find_slot (ht, entry, insert);\n\n  if (! loc)\n    return NULL;\n\n  if (*loc)\n    return *loc;\n\n  *loc = bfd_zalloc (abfd, sizeof (**loc));\n\n  if (! *loc)\n    return *loc;\n\n  (*loc)->symndx = entry->symndx;\n  (*loc)->d = entry->d;\n  (*loc)->addend = entry->addend;\n  (*loc)->plt_entry = (bfd_vma)-1;\n  (*loc)->lzplt_entry = (bfd_vma)-1;\n  (*loc)->tlsplt_entry = (bfd_vma)-1;\n\n  return *loc;\n}\n\n/* Obtain the address of the entry in HT associated with H's symbol +\n   addend, creating a new entry if none existed.  ABFD is only used\n   for memory allocation purposes.  */\ninline static struct frvfdpic_relocs_info *\nfrvfdpic_relocs_info_for_global (struct htab *ht,\n\t\t\t\t bfd *abfd,\n\t\t\t\t struct elf_link_hash_entry *h,\n\t\t\t\t bfd_vma addend,\n\t\t\t\t enum insert_option insert)\n{\n  struct frvfdpic_relocs_info entry;\n\n  entry.symndx = -1;\n  entry.d.h = h;\n  entry.addend = addend;\n\n  return frvfdpic_relocs_info_find (ht, abfd, &entry, insert);\n}\n\n/* Obtain the address of the entry in HT associated with the SYMNDXth\n   local symbol of the input bfd ABFD, plus the addend, creating a new\n   entry if none existed.  */\ninline static struct frvfdpic_relocs_info *\nfrvfdpic_relocs_info_for_local (struct htab *ht,\n\t\t\t\tbfd *abfd,\n\t\t\t\tlong symndx,\n\t\t\t\tbfd_vma addend,\n\t\t\t\tenum insert_option insert)\n{\n  struct frvfdpic_relocs_info entry;\n\n  entry.symndx = symndx;\n  entry.d.abfd = abfd;\n  entry.addend = addend;\n\n  return frvfdpic_relocs_info_find (ht, abfd, &entry, insert);\n}\n\n/* Merge fields set by check_relocs() of two entries that end up being\n   mapped to the same (presumably global) symbol.  */\n\ninline static void\nfrvfdpic_pic_merge_early_relocs_info (struct frvfdpic_relocs_info *e2,\n\t\t\t\t      struct frvfdpic_relocs_info const *e1)\n{\n  e2->got12 |= e1->got12;\n  e2->gotlos |= e1->gotlos;\n  e2->gothilo |= e1->gothilo;\n  e2->fd |= e1->fd;\n  e2->fdgot12 |= e1->fdgot12;\n  e2->fdgotlos |= e1->fdgotlos;\n  e2->fdgothilo |= e1->fdgothilo;\n  e2->fdgoff12 |= e1->fdgoff12;\n  e2->fdgofflos |= e1->fdgofflos;\n  e2->fdgoffhilo |= e1->fdgoffhilo;\n  e2->tlsplt |= e1->tlsplt;\n  e2->tlsdesc12 |= e1->tlsdesc12;\n  e2->tlsdesclos |= e1->tlsdesclos;\n  e2->tlsdeschilo |= e1->tlsdeschilo;\n  e2->tlsoff12 |= e1->tlsoff12;\n  e2->tlsofflos |= e1->tlsofflos;\n  e2->tlsoffhilo |= e1->tlsoffhilo;\n  e2->gotoff |= e1->gotoff;\n  e2->call |= e1->call;\n  e2->sym |= e1->sym;\n}\n\n/* Every block of 65535 lazy PLT entries shares a single call to the\n   resolver, inserted in the 32768th lazy PLT entry (i.e., entry #\n   32767, counting from 0).  All other lazy PLT entries branch to it\n   in a single instruction.  */\n\n#define FRVFDPIC_LZPLT_BLOCK_SIZE ((bfd_vma) 8 * 65535 + 4)\n#define FRVFDPIC_LZPLT_RESOLV_LOC (8 * 32767)\n\n/* Add a dynamic relocation to the SRELOC section.  */\n\ninline static bfd_vma\n_frvfdpic_add_dyn_reloc (bfd *output_bfd, asection *sreloc, bfd_vma offset,\n\t\t\t int reloc_type, long dynindx, bfd_vma addend,\n\t\t\t struct frvfdpic_relocs_info *entry)\n{\n  Elf_Internal_Rela outrel;\n  bfd_vma reloc_offset;\n\n  outrel.r_offset = offset;\n  outrel.r_info = ELF32_R_INFO (dynindx, reloc_type);\n  outrel.r_addend = addend;\n\n  reloc_offset = sreloc->reloc_count * sizeof (Elf32_External_Rel);\n  BFD_ASSERT (reloc_offset < sreloc->size);\n  bfd_elf32_swap_reloc_out (output_bfd, &outrel,\n\t\t\t    sreloc->contents + reloc_offset);\n  sreloc->reloc_count++;\n\n  /* If the entry's index is zero, this relocation was probably to a\n     linkonce section that got discarded.  We reserved a dynamic\n     relocation, but it was for another entry than the one we got at\n     the time of emitting the relocation.  Unfortunately there's no\n     simple way for us to catch this situation, since the relocation\n     is cleared right before calling relocate_section, at which point\n     we no longer know what the relocation used to point to.  */\n  if (entry->symndx)\n    {\n      BFD_ASSERT (entry->dynrelocs > 0);\n      entry->dynrelocs--;\n    }\n\n  return reloc_offset;\n}\n\n/* Add a fixup to the ROFIXUP section.  */\n\nstatic bfd_vma\n_frvfdpic_add_rofixup (bfd *output_bfd, asection *rofixup, bfd_vma offset,\n\t\t       struct frvfdpic_relocs_info *entry)\n{\n  bfd_vma fixup_offset;\n\n  if (rofixup->flags & SEC_EXCLUDE)\n    return -1;\n\n  fixup_offset = rofixup->reloc_count * 4;\n  if (rofixup->contents)\n    {\n      BFD_ASSERT (fixup_offset < rofixup->size);\n      bfd_put_32 (output_bfd, offset, rofixup->contents + fixup_offset);\n    }\n  rofixup->reloc_count++;\n\n  if (entry && entry->symndx)\n    {\n      /* See discussion about symndx == 0 in _frvfdpic_add_dyn_reloc\n\t above.  */\n      BFD_ASSERT (entry->fixups > 0);\n      entry->fixups--;\n    }\n\n  return fixup_offset;\n}\n\n/* Find the segment number in which OSEC, and output section, is\n   located.  */\n\nstatic unsigned\n_frvfdpic_osec_to_segment (bfd *output_bfd, asection *osec)\n{\n  Elf_Internal_Phdr *p = _bfd_elf_find_segment_containing_section (output_bfd, osec);\n\n  return (p != NULL) ? p - elf_tdata (output_bfd)->phdr : -1;\n}\n\ninline static bfd_boolean\n_frvfdpic_osec_readonly_p (bfd *output_bfd, asection *osec)\n{\n  unsigned seg = _frvfdpic_osec_to_segment (output_bfd, osec);\n\n  return ! (elf_tdata (output_bfd)->phdr[seg].p_flags & PF_W);\n}\n\n#define FRVFDPIC_TLS_BIAS (2048 - 16)\n\n/* Return the base VMA address which should be subtracted from real addresses\n   when resolving TLSMOFF relocation.\n   This is PT_TLS segment p_vaddr, plus the 2048-16 bias.  */\n\nstatic bfd_vma\ntls_biased_base (struct bfd_link_info *info)\n{\n  /* If tls_sec is NULL, we should have signalled an error already.  */\n  if (elf_hash_table (info)->tls_sec == NULL)\n    return FRVFDPIC_TLS_BIAS;\n  return elf_hash_table (info)->tls_sec->vma + FRVFDPIC_TLS_BIAS;\n}\n\n/* Generate relocations for GOT entries, function descriptors, and\n   code for PLT and lazy PLT entries.  */\n\ninline static bfd_boolean\n_frvfdpic_emit_got_relocs_plt_entries (struct frvfdpic_relocs_info *entry,\n\t\t\t\t       bfd *output_bfd,\n\t\t\t\t       struct bfd_link_info *info,\n\t\t\t\t       asection *sec,\n\t\t\t\t       Elf_Internal_Sym *sym,\n\t\t\t\t       bfd_vma addend)\n\n{\n  bfd_vma fd_lazy_rel_offset = (bfd_vma)-1;\n  int dynindx = -1;\n\n  if (entry->done)\n    return TRUE;\n  entry->done = 1;\n\n  if (entry->got_entry || entry->fdgot_entry || entry->fd_entry\n      || entry->tlsoff_entry || entry->tlsdesc_entry)\n    {\n      /* If the symbol is dynamic, consider it for dynamic\n\t relocations, otherwise decay to section + offset.  */\n      if (entry->symndx == -1 && entry->d.h->dynindx != -1)\n\tdynindx = entry->d.h->dynindx;\n      else\n\t{\n\t  if (sec\n\t      && sec->output_section\n\t      && ! bfd_is_abs_section (sec->output_section)\n\t      && ! bfd_is_und_section (sec->output_section))\n\t    dynindx = elf_section_data (sec->output_section)->dynindx;\n\t  else\n\t    dynindx = 0;\n\t}\n    }\n\n  /* Generate relocation for GOT entry pointing to the symbol.  */\n  if (entry->got_entry)\n    {\n      int idx = dynindx;\n      bfd_vma ad = addend;\n\n      /* If the symbol is dynamic but binds locally, use\n\t section+offset.  */\n      if (sec && (entry->symndx != -1\n\t\t  || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (entry->symndx == -1)\n\t    ad += entry->d.h->root.u.def.value;\n\t  else\n\t    ad += sym->st_value;\n\t  ad += sec->output_offset;\n\t  if (sec->output_section && elf_section_data (sec->output_section))\n\t    idx = elf_section_data (sec->output_section)->dynindx;\n\t  else\n\t    idx = 0;\n\t}\n\n      /* If we're linking an executable at a fixed address, we can\n\t omit the dynamic relocation as long as the symbol is local to\n\t this module.  */\n      if (info->executable && !info->pie\n\t  && (entry->symndx != -1\n\t      || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (sec)\n\t    ad += sec->output_section->vma;\n\t  if (entry->symndx != -1\n\t      || entry->d.h->root.type != bfd_link_hash_undefweak)\n\t    _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t   frvfdpic_gotfixup_section (info),\n\t\t\t\t   frvfdpic_got_section (info)->output_section\n\t\t\t\t   ->vma\n\t\t\t\t   + frvfdpic_got_section (info)->output_offset\n\t\t\t\t   + frvfdpic_got_initial_offset (info)\n\t\t\t\t   + entry->got_entry, entry);\n\t}\n      else\n\t_frvfdpic_add_dyn_reloc (output_bfd, frvfdpic_gotrel_section (info),\n\t\t\t\t _bfd_elf_section_offset\n\t\t\t\t (output_bfd, info,\n\t\t\t\t  frvfdpic_got_section (info),\n\t\t\t\t  frvfdpic_got_initial_offset (info)\n\t\t\t\t  + entry->got_entry)\n\t\t\t\t + frvfdpic_got_section (info)\n\t\t\t\t ->output_section->vma\n\t\t\t\t + frvfdpic_got_section (info)->output_offset,\n\t\t\t\t R_FRV_32, idx, ad, entry);\n\n      bfd_put_32 (output_bfd, ad,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->got_entry);\n    }\n\n  /* Generate relocation for GOT entry pointing to a canonical\n     function descriptor.  */\n  if (entry->fdgot_entry)\n    {\n      int reloc, idx;\n      bfd_vma ad = 0;\n\n      if (! (entry->symndx == -1\n\t     && entry->d.h->root.type == bfd_link_hash_undefweak\n\t     && FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  /* If the symbol is dynamic and there may be dynamic symbol\n\t     resolution because we are, or are linked with, a shared\n\t     library, emit a FUNCDESC relocation such that the dynamic\n\t     linker will allocate the function descriptor.  If the\n\t     symbol needs a non-local function descriptor but binds\n\t     locally (e.g., its visibility is protected, emit a\n\t     dynamic relocation decayed to section+offset.  */\n\t  if (entry->symndx == -1\n\t      && ! FRVFDPIC_FUNCDESC_LOCAL (info, entry->d.h)\n\t      && FRVFDPIC_SYM_LOCAL (info, entry->d.h)\n\t      && !(info->executable && !info->pie))\n\t    {\n\t      reloc = R_FRV_FUNCDESC;\n\t      idx = elf_section_data (entry->d.h->root.u.def.section\n\t\t\t\t      ->output_section)->dynindx;\n\t      ad = entry->d.h->root.u.def.section->output_offset\n\t\t+ entry->d.h->root.u.def.value;\n\t    }\n\t  else if (entry->symndx == -1\n\t\t   && ! FRVFDPIC_FUNCDESC_LOCAL (info, entry->d.h))\n\t    {\n\t      reloc = R_FRV_FUNCDESC;\n\t      idx = dynindx;\n\t      ad = addend;\n\t      if (ad)\n\t\t{\n\t\t  (*info->callbacks->reloc_dangerous)\n\t\t    (info, _(\"relocation requires zero addend\"),\n\t\t     elf_hash_table (info)->dynobj,\n\t\t     frvfdpic_got_section (info),\n\t\t     entry->fdgot_entry);\n\t\t  return FALSE;\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      /* Otherwise, we know we have a private function descriptor,\n\t\t so reference it directly.  */\n\t      if (elf_hash_table (info)->dynamic_sections_created)\n\t\tBFD_ASSERT (entry->privfd);\n\t      reloc = R_FRV_32;\n\t      idx = elf_section_data (frvfdpic_got_section (info)\n\t\t\t\t      ->output_section)->dynindx;\n\t      ad = frvfdpic_got_section (info)->output_offset\n\t\t+ frvfdpic_got_initial_offset (info) + entry->fd_entry;\n\t    }\n\n\t  /* If there is room for dynamic symbol resolution, emit the\n\t     dynamic relocation.  However, if we're linking an\n\t     executable at a fixed location, we won't have emitted a\n\t     dynamic symbol entry for the got section, so idx will be\n\t     zero, which means we can and should compute the address\n\t     of the private descriptor ourselves.  */\n\t  if (info->executable && !info->pie\n\t      && (entry->symndx != -1\n\t\t  || FRVFDPIC_FUNCDESC_LOCAL (info, entry->d.h)))\n\t    {\n\t      ad += frvfdpic_got_section (info)->output_section->vma;\n\t      _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t     frvfdpic_gotfixup_section (info),\n\t\t\t\t     frvfdpic_got_section (info)\n\t\t\t\t     ->output_section->vma\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_offset\n\t\t\t\t     + frvfdpic_got_initial_offset (info)\n\t\t\t\t     + entry->fdgot_entry, entry);\n\t    }\n\t  else\n\t    _frvfdpic_add_dyn_reloc (output_bfd,\n\t\t\t\t     frvfdpic_gotrel_section (info),\n\t\t\t\t     _bfd_elf_section_offset\n\t\t\t\t     (output_bfd, info,\n\t\t\t\t      frvfdpic_got_section (info),\n\t\t\t\t      frvfdpic_got_initial_offset (info)\n\t\t\t\t      + entry->fdgot_entry)\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_section->vma\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_offset,\n\t\t\t\t     reloc, idx, ad, entry);\n\t}\n\n      bfd_put_32 (output_bfd, ad,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->fdgot_entry);\n    }\n\n  /* Generate relocation to fill in a private function descriptor in\n     the GOT.  */\n  if (entry->fd_entry)\n    {\n      int idx = dynindx;\n      bfd_vma ad = addend;\n      bfd_vma ofst;\n      long lowword, highword;\n\n      /* If the symbol is dynamic but binds locally, use\n\t section+offset.  */\n      if (sec && (entry->symndx != -1\n\t\t  || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (entry->symndx == -1)\n\t    ad += entry->d.h->root.u.def.value;\n\t  else\n\t    ad += sym->st_value;\n\t  ad += sec->output_offset;\n\t  if (sec->output_section && elf_section_data (sec->output_section))\n\t    idx = elf_section_data (sec->output_section)->dynindx;\n\t  else\n\t    idx = 0;\n\t}\n\n      /* If we're linking an executable at a fixed address, we can\n\t omit the dynamic relocation as long as the symbol is local to\n\t this module.  */\n      if (info->executable && !info->pie\n\t  && (entry->symndx != -1 || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (sec)\n\t    ad += sec->output_section->vma;\n\t  ofst = 0;\n\t  if (entry->symndx != -1\n\t      || entry->d.h->root.type != bfd_link_hash_undefweak)\n\t    {\n\t      _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t     frvfdpic_gotfixup_section (info),\n\t\t\t\t     frvfdpic_got_section (info)\n\t\t\t\t     ->output_section->vma\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_offset\n\t\t\t\t     + frvfdpic_got_initial_offset (info)\n\t\t\t\t     + entry->fd_entry, entry);\n\t      _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t     frvfdpic_gotfixup_section (info),\n\t\t\t\t     frvfdpic_got_section (info)\n\t\t\t\t     ->output_section->vma\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_offset\n\t\t\t\t     + frvfdpic_got_initial_offset (info)\n\t\t\t\t     + entry->fd_entry + 4, entry);\n\t    }\n\t}\n      else\n\t{\n\t  ofst =\n\t    _frvfdpic_add_dyn_reloc (output_bfd,\n\t\t\t\t     entry->lazyplt\n\t\t\t\t     ? frvfdpic_pltrel_section (info)\n\t\t\t\t     : frvfdpic_gotrel_section (info),\n\t\t\t\t     _bfd_elf_section_offset\n\t\t\t\t     (output_bfd, info,\n\t\t\t\t      frvfdpic_got_section (info),\n\t\t\t\t      frvfdpic_got_initial_offset (info)\n\t\t\t\t      + entry->fd_entry)\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_section->vma\n\t\t\t\t     + frvfdpic_got_section (info)\n\t\t\t\t     ->output_offset,\n\t\t\t\t     R_FRV_FUNCDESC_VALUE, idx, ad, entry);\n\t}\n\n      /* If we've omitted the dynamic relocation, just emit the fixed\n\t addresses of the symbol and of the local GOT base offset.  */\n      if (info->executable && !info->pie && sec && sec->output_section)\n\t{\n\t  lowword = ad;\n\t  highword = frvfdpic_got_section (info)->output_section->vma\n\t    + frvfdpic_got_section (info)->output_offset\n\t    + frvfdpic_got_initial_offset (info);\n\t}\n      else if (entry->lazyplt)\n\t{\n\t  if (ad)\n\t    {\n\t      (*info->callbacks->reloc_dangerous)\n\t\t(info, _(\"relocation requires zero addend\"),\n\t\t elf_hash_table (info)->dynobj,\n\t\t frvfdpic_got_section (info),\n\t\t entry->fd_entry);\n\t      return FALSE;\n\t    }\n\n\t  fd_lazy_rel_offset = ofst;\n\n\t  /* A function descriptor used for lazy or local resolving is\n\t     initialized such that its high word contains the output\n\t     section index in which the PLT entries are located, and\n\t     the low word contains the address of the lazy PLT entry\n\t     entry point, that must be within the memory region\n\t     assigned to that section.  */\n\t  lowword = entry->lzplt_entry + 4\n\t    + frvfdpic_plt_section (info)->output_offset\n\t    + frvfdpic_plt_section (info)->output_section->vma;\n\t  highword = _frvfdpic_osec_to_segment\n\t    (output_bfd, frvfdpic_plt_section (info)->output_section);\n\t}\n      else\n\t{\n\t  /* A function descriptor for a local function gets the index\n\t     of the section.  For a non-local function, it's\n\t     disregarded.  */\n\t  lowword = ad;\n\t  if (sec == NULL\n\t      || (entry->symndx == -1 && entry->d.h->dynindx != -1\n\t\t  && entry->d.h->dynindx == idx))\n\t    highword = 0;\n\t  else\n\t    highword = _frvfdpic_osec_to_segment\n\t      (output_bfd, sec->output_section);\n\t}\n\n      bfd_put_32 (output_bfd, lowword,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->fd_entry);\n      bfd_put_32 (output_bfd, highword,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->fd_entry + 4);\n    }\n\n  /* Generate code for the PLT entry.  */\n  if (entry->plt_entry != (bfd_vma) -1)\n    {\n      bfd_byte *plt_code = frvfdpic_plt_section (info)->contents\n\t+ entry->plt_entry;\n\n      BFD_ASSERT (entry->fd_entry);\n\n      /* Figure out what kind of PLT entry we need, depending on the\n\t location of the function descriptor within the GOT.  */\n      if (entry->fd_entry >= -(1 << (12 - 1))\n\t  && entry->fd_entry < (1 << (12 - 1)))\n\t{\n\t  /* lddi @(gr15, fd_entry), gr14 */\n\t  bfd_put_32 (output_bfd,\n\t\t      0x9cccf000 | (entry->fd_entry & ((1 << 12) - 1)),\n\t\t      plt_code);\n\t  plt_code += 4;\n\t}\n      else\n\t{\n\t  if (entry->fd_entry >= -(1 << (16 - 1))\n\t      && entry->fd_entry < (1 << (16 - 1)))\n\t    {\n\t      /* setlos lo(fd_entry), gr14 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x9cfc0000\n\t\t\t  | (entry->fd_entry & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  else\n\t    {\n\t      /* sethi.p hi(fd_entry), gr14\n\t\t setlo lo(fd_entry), gr14 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x1cf80000\n\t\t\t  | ((entry->fd_entry >> 16)\n\t\t\t     & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x9cf40000\n\t\t\t  | (entry->fd_entry & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  /* ldd @(gr14,gr15),gr14 */\n\t  bfd_put_32 (output_bfd, 0x9c08e14f, plt_code);\n\t  plt_code += 4;\n\t}\n      /* jmpl @(gr14,gr0) */\n      bfd_put_32 (output_bfd, 0x8030e000, plt_code);\n    }\n\n  /* Generate code for the lazy PLT entry.  */\n  if (entry->lzplt_entry != (bfd_vma) -1)\n    {\n      bfd_byte *lzplt_code = frvfdpic_plt_section (info)->contents\n\t+ entry->lzplt_entry;\n      bfd_vma resolverStub_addr;\n\n      bfd_put_32 (output_bfd, fd_lazy_rel_offset, lzplt_code);\n      lzplt_code += 4;\n\n      resolverStub_addr = entry->lzplt_entry / FRVFDPIC_LZPLT_BLOCK_SIZE\n\t* FRVFDPIC_LZPLT_BLOCK_SIZE + FRVFDPIC_LZPLT_RESOLV_LOC;\n      if (resolverStub_addr >= frvfdpic_plt_initial_offset (info))\n\tresolverStub_addr = frvfdpic_plt_initial_offset (info) - 12;\n\n      if (entry->lzplt_entry == resolverStub_addr)\n\t{\n\t  /* This is a lazy PLT entry that includes a resolver call.  */\n\t  /* ldd @(gr15,gr0), gr4\n\t     jmpl @(gr4,gr0)  */\n\t  bfd_put_32 (output_bfd, 0x8808f140, lzplt_code);\n\t  bfd_put_32 (output_bfd, 0x80304000, lzplt_code + 4);\n\t}\n      else\n\t{\n\t  /* bra  resolverStub */\n\t  bfd_put_32 (output_bfd,\n\t\t      0xc01a0000\n\t\t      | (((resolverStub_addr - entry->lzplt_entry)\n\t\t\t  / 4) & (((bfd_vma)1 << 16) - 1)),\n\t\t      lzplt_code);\n\t}\n    }\n\n  /* Generate relocation for GOT entry holding the TLS offset.  */\n  if (entry->tlsoff_entry)\n    {\n      int idx = dynindx;\n      bfd_vma ad = addend;\n\n      if (entry->symndx != -1\n\t  || FRVFDPIC_SYM_LOCAL (info, entry->d.h))\n\t{\n\t  /* If the symbol is dynamic but binds locally, use\n\t     section+offset.  */\n\t  if (sec)\n\t    {\n\t      if (entry->symndx == -1)\n\t\tad += entry->d.h->root.u.def.value;\n\t      else\n\t\tad += sym->st_value;\n\t      ad += sec->output_offset;\n\t      if (sec->output_section\n\t\t  && elf_section_data (sec->output_section))\n\t\tidx = elf_section_data (sec->output_section)->dynindx;\n\t      else\n\t\tidx = 0;\n\t    }\n\t}\n\n      /* *ABS*+addend is special for TLS relocations, use only the\n\t addend.  */\n      if (info->executable\n\t  && idx == 0\n\t  && (bfd_is_abs_section (sec)\n\t      || bfd_is_und_section (sec)))\n\t;\n      /* If we're linking an executable, we can entirely omit the\n\t dynamic relocation if the symbol is local to this module.  */\n      else if (info->executable\n\t       && (entry->symndx != -1\n\t\t   || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (sec)\n\t    ad += sec->output_section->vma - tls_biased_base (info);\n\t}\n      else\n\t{\n\t  if (idx == 0\n\t      && (bfd_is_abs_section (sec)\n\t\t  || bfd_is_und_section (sec)))\n\t    {\n\t      if (! elf_hash_table (info)->tls_sec)\n\t\t{\n\t\t  (*info->callbacks->undefined_symbol)\n\t\t    (info, \"TLS section\", elf_hash_table (info)->dynobj,\n\t\t     frvfdpic_got_section (info), entry->tlsoff_entry, TRUE);\n\t\t  return FALSE;\n\t\t}\n\t      idx = elf_section_data (elf_hash_table (info)->tls_sec)->dynindx;\n\t      ad += FRVFDPIC_TLS_BIAS;\n\t    }\n\t  _frvfdpic_add_dyn_reloc (output_bfd, frvfdpic_gotrel_section (info),\n\t\t\t\t   _bfd_elf_section_offset\n\t\t\t\t   (output_bfd, info,\n\t\t\t\t    frvfdpic_got_section (info),\n\t\t\t\t    frvfdpic_got_initial_offset (info)\n\t\t\t\t    + entry->tlsoff_entry)\n\t\t\t\t   + frvfdpic_got_section (info)\n\t\t\t\t   ->output_section->vma\n\t\t\t\t   + frvfdpic_got_section (info)\n\t\t\t\t   ->output_offset,\n\t\t\t\t   R_FRV_TLSOFF, idx, ad, entry);\n\t}\n\n      bfd_put_32 (output_bfd, ad,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->tlsoff_entry);\n    }\n\n  if (entry->tlsdesc_entry)\n    {\n      int idx = dynindx;\n      bfd_vma ad = addend;\n\n      /* If the symbol is dynamic but binds locally, use\n\t section+offset.  */\n      if (sec && (entry->symndx != -1\n\t\t  || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  if (entry->symndx == -1)\n\t    ad += entry->d.h->root.u.def.value;\n\t  else\n\t    ad += sym->st_value;\n\t  ad += sec->output_offset;\n\t  if (sec->output_section && elf_section_data (sec->output_section))\n\t    idx = elf_section_data (sec->output_section)->dynindx;\n\t  else\n\t    idx = 0;\n\t}\n\n      /* If we didn't set up a TLS offset entry, but we're linking an\n\t executable and the symbol binds locally, we can use the\n\t module offset in the TLS descriptor in relaxations.  */\n      if (info->executable && ! entry->tlsoff_entry)\n\tentry->tlsoff_entry = entry->tlsdesc_entry + 4;\n\n      if (info->executable && !info->pie\n\t  && ((idx == 0\n\t       && (bfd_is_abs_section (sec)\n\t\t   || bfd_is_und_section (sec)))\n\t      || entry->symndx != -1\n\t      || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  /* *ABS*+addend is special for TLS relocations, use only the\n\t     addend for the TLS offset, and take the module id as\n\t     0.  */\n\t  if (idx == 0\n\t      && (bfd_is_abs_section (sec)\n\t\t  || bfd_is_und_section (sec)))\n\t    ;\n\t  /* For other TLS symbols that bind locally, add the section\n\t     TLS offset to the addend.  */\n\t  else if (sec)\n\t    ad += sec->output_section->vma - tls_biased_base (info);\n\n\t  bfd_put_32 (output_bfd,\n\t\t      frvfdpic_plt_section (info)->output_section->vma\n\t\t      + frvfdpic_plt_section (info)->output_offset\n\t\t      + frvfdpic_plt_tls_ret_offset (info),\n\t\t      frvfdpic_got_section (info)->contents\n\t\t      + frvfdpic_got_initial_offset (info)\n\t\t      + entry->tlsdesc_entry);\n\n\t  _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t frvfdpic_gotfixup_section (info),\n\t\t\t\t frvfdpic_got_section (info)\n\t\t\t\t ->output_section->vma\n\t\t\t\t + frvfdpic_got_section (info)\n\t\t\t\t ->output_offset\n\t\t\t\t + frvfdpic_got_initial_offset (info)\n\t\t\t\t + entry->tlsdesc_entry, entry);\n\n\t  BFD_ASSERT (frvfdpic_dynamic_got_plt_info (info)->tls_ret_refs);\n\n\t  /* We've used one of the reserved fixups, so discount it so\n\t     that we can check at the end that we've used them\n\t     all.  */\n\t  frvfdpic_dynamic_got_plt_info (info)->tls_ret_refs--;\n\n\t  /* While at that, make sure the ret instruction makes to the\n\t     right location in the PLT.  We could do it only when we\n\t     got to 0, but since the check at the end will only print\n\t     a warning, make sure we have the ret in place in case the\n\t     warning is missed.  */\n\t  bfd_put_32 (output_bfd, 0xc03a4000,\n\t\t      frvfdpic_plt_section (info)->contents\n\t\t      + frvfdpic_plt_tls_ret_offset (info));\n\t}\n      else\n\t{\n\t  if (idx == 0\n\t      && (bfd_is_abs_section (sec)\n\t\t  || bfd_is_und_section (sec)))\n\t    {\n\t      if (! elf_hash_table (info)->tls_sec)\n\t\t{\n\t\t  (*info->callbacks->undefined_symbol)\n\t\t    (info, \"TLS section\", elf_hash_table (info)->dynobj,\n\t\t     frvfdpic_got_section (info), entry->tlsdesc_entry, TRUE);\n\t\t  return FALSE;\n\t\t}\n\t      idx = elf_section_data (elf_hash_table (info)->tls_sec)->dynindx;\n\t      ad += FRVFDPIC_TLS_BIAS;\n\t    }\n\n\t  _frvfdpic_add_dyn_reloc (output_bfd, frvfdpic_gotrel_section (info),\n\t\t\t\t   _bfd_elf_section_offset\n\t\t\t\t   (output_bfd, info,\n\t\t\t\t    frvfdpic_got_section (info),\n\t\t\t\t    frvfdpic_got_initial_offset (info)\n\t\t\t\t    + entry->tlsdesc_entry)\n\t\t\t\t   + frvfdpic_got_section (info)\n\t\t\t\t   ->output_section->vma\n\t\t\t\t   + frvfdpic_got_section (info)\n\t\t\t\t   ->output_offset,\n\t\t\t\t   R_FRV_TLSDESC_VALUE, idx, ad, entry);\n\n\t  bfd_put_32 (output_bfd, 0,\n\t\t      frvfdpic_got_section (info)->contents\n\t\t      + frvfdpic_got_initial_offset (info)\n\t\t      + entry->tlsdesc_entry);\n\t}\n\n      bfd_put_32 (output_bfd, ad,\n\t\t  frvfdpic_got_section (info)->contents\n\t\t  + frvfdpic_got_initial_offset (info)\n\t\t  + entry->tlsdesc_entry + 4);\n    }\n\n  /* Generate code for the get-TLS-offset PLT entry.  */\n  if (entry->tlsplt_entry != (bfd_vma) -1)\n    {\n      bfd_byte *plt_code = frvfdpic_plt_section (info)->contents\n\t+ entry->tlsplt_entry;\n\n      if (info->executable\n\t  && (entry->symndx != -1\n\t      || FRVFDPIC_SYM_LOCAL (info, entry->d.h)))\n\t{\n\t  int idx = dynindx;\n\t  bfd_vma ad = addend;\n\n\t  /* sec may be NULL when referencing an undefweak symbol\n\t     while linking a static executable.  */\n\t  if (!sec)\n\t    {\n\t      BFD_ASSERT (entry->symndx == -1\n\t\t\t  && entry->d.h->root.type == bfd_link_hash_undefweak);\n\t    }\n\t  else\n\t    {\n\t      if (entry->symndx == -1)\n\t\tad += entry->d.h->root.u.def.value;\n\t      else\n\t\tad += sym->st_value;\n\t      ad += sec->output_offset;\n\t      if (sec->output_section\n\t\t  && elf_section_data (sec->output_section))\n\t\tidx = elf_section_data (sec->output_section)->dynindx;\n\t      else\n\t\tidx = 0;\n\t    }\n\n\t  /* *ABS*+addend is special for TLS relocations, use only the\n\t     addend for the TLS offset, and take the module id as\n\t     0.  */\n\t  if (idx == 0\n\t      && (bfd_is_abs_section (sec)\n\t\t  || bfd_is_und_section (sec)))\n\t    ;\n\t  /* For other TLS symbols that bind locally, add the section\n\t     TLS offset to the addend.  */\n\t  else if (sec)\n\t    ad += sec->output_section->vma - tls_biased_base (info);\n\n\t  if ((bfd_signed_vma)ad >= -(1 << (16 - 1))\n\t      && (bfd_signed_vma)ad < (1 << (16 - 1)))\n\t    {\n\t      /* setlos lo(ad), gr9 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x92fc0000\n\t\t\t  | (ad\n\t\t\t     & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  else\n\t    {\n\t      /* sethi.p hi(ad), gr9\n\t\t setlo lo(ad), gr9 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x12f80000\n\t\t\t  | ((ad >> 16)\n\t\t\t     & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x92f40000\n\t\t\t  | (ad\n\t\t\t     & (((bfd_vma)1 << 16) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  /* ret */\n\t  bfd_put_32 (output_bfd, 0xc03a4000, plt_code);\n\t}\n      else if (entry->tlsoff_entry)\n\t{\n\t  /* Figure out what kind of PLT entry we need, depending on the\n\t     location of the TLS descriptor within the GOT.  */\n\t  if (entry->tlsoff_entry >= -(1 << (12 - 1))\n\t      && entry->tlsoff_entry < (1 << (12 - 1)))\n\t    {\n\t      /* ldi @(gr15, tlsoff_entry), gr9 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x92c8f000 | (entry->tlsoff_entry\n\t\t\t\t\t& ((1 << 12) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  else\n\t    {\n\t      if (entry->tlsoff_entry >= -(1 << (16 - 1))\n\t\t  && entry->tlsoff_entry < (1 << (16 - 1)))\n\t\t{\n\t\t  /* setlos lo(tlsoff_entry), gr8 */\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x90fc0000\n\t\t\t      | (entry->tlsoff_entry\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t}\n\t      else\n\t\t{\n\t\t  /* sethi.p hi(tlsoff_entry), gr8\n\t\t     setlo lo(tlsoff_entry), gr8 */\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x10f80000\n\t\t\t      | ((entry->tlsoff_entry >> 16)\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x90f40000\n\t\t\t      | (entry->tlsoff_entry\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t}\n\t      /* ld @(gr15,gr8),gr9 */\n\t      bfd_put_32 (output_bfd, 0x9008f108, plt_code);\n\t      plt_code += 4;\n\t    }\n\t  /* ret */\n\t  bfd_put_32 (output_bfd, 0xc03a4000, plt_code);\n\t}\n      else\n\t{\n\t  BFD_ASSERT (entry->tlsdesc_entry);\n\n\t  /* Figure out what kind of PLT entry we need, depending on the\n\t     location of the TLS descriptor within the GOT.  */\n\t  if (entry->tlsdesc_entry >= -(1 << (12 - 1))\n\t      && entry->tlsdesc_entry < (1 << (12 - 1)))\n\t    {\n\t      /* lddi @(gr15, tlsdesc_entry), gr8 */\n\t      bfd_put_32 (output_bfd,\n\t\t\t  0x90ccf000 | (entry->tlsdesc_entry\n\t\t\t\t\t& ((1 << 12) - 1)),\n\t\t\t  plt_code);\n\t      plt_code += 4;\n\t    }\n\t  else\n\t    {\n\t      if (entry->tlsdesc_entry >= -(1 << (16 - 1))\n\t\t  && entry->tlsdesc_entry < (1 << (16 - 1)))\n\t\t{\n\t\t  /* setlos lo(tlsdesc_entry), gr8 */\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x90fc0000\n\t\t\t      | (entry->tlsdesc_entry\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t}\n\t      else\n\t\t{\n\t\t  /* sethi.p hi(tlsdesc_entry), gr8\n\t\t     setlo lo(tlsdesc_entry), gr8 */\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x10f80000\n\t\t\t      | ((entry->tlsdesc_entry >> 16)\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      0x90f40000\n\t\t\t      | (entry->tlsdesc_entry\n\t\t\t\t & (((bfd_vma)1 << 16) - 1)),\n\t\t\t      plt_code);\n\t\t  plt_code += 4;\n\t\t}\n\t      /* ldd @(gr15,gr8),gr8 */\n\t      bfd_put_32 (output_bfd, 0x9008f148, plt_code);\n\t      plt_code += 4;\n\t    }\n\t  /* jmpl @(gr8,gr0) */\n\t  bfd_put_32 (output_bfd, 0x80308000, plt_code);\n\t}\n    }\n\n  return TRUE;\n}\n\n/* Handle an FRV small data reloc.  */\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_gprel12 (info, input_bfd, input_section, relocation,\n\t\t\t    contents, value)\n     struct bfd_link_info *info;\n     bfd *input_bfd;\n     asection *input_section;\n     Elf_Internal_Rela *relocation;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n  bfd_vma gp;\n  struct bfd_link_hash_entry *h;\n\n  h = bfd_link_hash_lookup (info->hash, \"_gp\", FALSE, FALSE, TRUE);\n\n  gp = (h->u.def.value\n\t+ h->u.def.section->output_section->vma\n\t+ h->u.def.section->output_offset);\n\n  value -= input_section->output_section->vma;\n  value -= (gp - input_section->output_section->vma);\n\n  insn = bfd_get_32 (input_bfd, contents + relocation->r_offset);\n\n  value += relocation->r_addend;\n\n  if ((long) value > 0x7ff || (long) value < -0x800)\n    return bfd_reloc_overflow;\n\n  bfd_put_32 (input_bfd,\n\t      (insn & 0xfffff000) | (value & 0xfff),\n\t      contents + relocation->r_offset);\n\n  return bfd_reloc_ok;\n}\n\n/* Handle an FRV small data reloc. for the u12 field.  */\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_gprelu12 (info, input_bfd, input_section, relocation,\n\t\t\t     contents, value)\n     struct bfd_link_info *info;\n     bfd *input_bfd;\n     asection *input_section;\n     Elf_Internal_Rela *relocation;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n  bfd_vma gp;\n  struct bfd_link_hash_entry *h;\n  bfd_vma mask;\n\n  h = bfd_link_hash_lookup (info->hash, \"_gp\", FALSE, FALSE, TRUE);\n\n  gp = (h->u.def.value\n\t+ h->u.def.section->output_section->vma\n\t+ h->u.def.section->output_offset);\n\n  value -= input_section->output_section->vma;\n  value -= (gp - input_section->output_section->vma);\n\n  insn = bfd_get_32 (input_bfd, contents + relocation->r_offset);\n\n  value += relocation->r_addend;\n\n  if ((long) value > 0x7ff || (long) value < -0x800)\n    return bfd_reloc_overflow;\n\n  /* The high 6 bits go into bits 17-12. The low 6 bits go into bits 5-0.  */\n  mask = 0x3f03f;\n  insn = (insn & ~mask) | ((value & 0xfc0) << 12) | (value & 0x3f);\n\n  bfd_put_32 (input_bfd, insn, contents + relocation->r_offset);\n\n  return bfd_reloc_ok;\n}\n\n/* Handle an FRV ELF HI16 reloc.  */\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_hi16 (input_bfd, relhi, contents, value)\n     bfd *input_bfd;\n     Elf_Internal_Rela *relhi;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n\n  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);\n\n  value += relhi->r_addend;\n  value = ((value >> 16) & 0xffff);\n\n  insn = (insn & 0xffff0000) | value;\n\n  if ((long) value > 0xffff || (long) value < -0x10000)\n    return bfd_reloc_overflow;\n\n  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);\n  return bfd_reloc_ok;\n\n}\nstatic bfd_reloc_status_type\nelf32_frv_relocate_lo16 (input_bfd, rello, contents, value)\n     bfd *input_bfd;\n     Elf_Internal_Rela *rello;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n\n  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);\n\n  value += rello->r_addend;\n  value = value & 0xffff;\n\n  insn = (insn & 0xffff0000) | value;\n\n  if ((long) value > 0xffff || (long) value < -0x10000)\n    return bfd_reloc_overflow;\n\n  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);\n  return bfd_reloc_ok;\n}\n\n/* Perform the relocation for the CALL label24 instruction.  */\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_label24 (input_bfd, input_section, rello, contents, value)\n     bfd *input_bfd;\n     asection *input_section;\n     Elf_Internal_Rela *rello;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n  bfd_vma label6;\n  bfd_vma label18;\n\n  /* The format for the call instruction is:\n\n    0 000000 0001111 000000000000000000\n      label6 opcode  label18\n\n    The branch calculation is: pc + (4*label24)\n    where label24 is the concatenation of label6 and label18.  */\n\n  /* Grab the instruction.  */\n  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);\n\n  value -= input_section->output_section->vma + input_section->output_offset;\n  value -= rello->r_offset;\n  value += rello->r_addend;\n\n  value = value >> 2;\n\n  label6  = value & 0xfc0000;\n  label6  = label6 << 7;\n\n  label18 = value & 0x3ffff;\n\n  insn = insn & 0x803c0000;\n  insn = insn | label6;\n  insn = insn | label18;\n\n  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);\n\n  return bfd_reloc_ok;\n}\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_gprelhi (info, input_bfd, input_section, relocation,\n\t\t\t    contents, value)\n     struct bfd_link_info *info;\n     bfd *input_bfd;\n     asection *input_section;\n     Elf_Internal_Rela *relocation;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n  bfd_vma gp;\n  struct bfd_link_hash_entry *h;\n\n  h = bfd_link_hash_lookup (info->hash, \"_gp\", FALSE, FALSE, TRUE);\n\n  gp = (h->u.def.value\n        + h->u.def.section->output_section->vma\n        + h->u.def.section->output_offset);\n\n  value -= input_section->output_section->vma;\n  value -= (gp - input_section->output_section->vma);\n  value += relocation->r_addend;\n  value = ((value >> 16) & 0xffff);\n\n  if ((long) value > 0xffff || (long) value < -0x10000)\n    return bfd_reloc_overflow;\n\n  insn = bfd_get_32 (input_bfd, contents + relocation->r_offset);\n  insn = (insn & 0xffff0000) | value;\n\n  bfd_put_32 (input_bfd, insn, contents + relocation->r_offset);\n  return bfd_reloc_ok;\n}\n\nstatic bfd_reloc_status_type\nelf32_frv_relocate_gprello (info, input_bfd, input_section, relocation,\n\t\t\t    contents, value)\n     struct bfd_link_info *info;\n     bfd *input_bfd;\n     asection *input_section;\n     Elf_Internal_Rela *relocation;\n     bfd_byte *contents;\n     bfd_vma value;\n{\n  bfd_vma insn;\n  bfd_vma gp;\n  struct bfd_link_hash_entry *h;\n\n  h = bfd_link_hash_lookup (info->hash, \"_gp\", FALSE, FALSE, TRUE);\n\n  gp = (h->u.def.value\n        + h->u.def.section->output_section->vma\n        + h->u.def.section->output_offset);\n\n  value -= input_section->output_section->vma;\n  value -= (gp - input_section->output_section->vma);\n  value += relocation->r_addend;\n  value = value & 0xffff;\n\n  if ((long) value > 0xffff || (long) value < -0x10000)\n    return bfd_reloc_overflow;\n\n  insn = bfd_get_32 (input_bfd, contents + relocation->r_offset);\n  insn = (insn & 0xffff0000) | value;\n\n  bfd_put_32 (input_bfd, insn, contents + relocation->r_offset);\n\n return bfd_reloc_ok;\n}\n\nstatic reloc_howto_type *\nfrv_reloc_type_lookup (abfd, code)\n     bfd *abfd ATTRIBUTE_UNUSED;\n     bfd_reloc_code_real_type code;\n{\n  switch (code)\n    {\n    default:\n      break;\n\n    case BFD_RELOC_NONE:\n      return &elf32_frv_howto_table[ (int) R_FRV_NONE];\n\n    case BFD_RELOC_32:\n      if (elf_elfheader (abfd)->e_type == ET_EXEC\n\t  || elf_elfheader (abfd)->e_type == ET_DYN)\n\treturn &elf32_frv_rel_32_howto;\n      /* Fall through.  */\n    case BFD_RELOC_CTOR:\n      return &elf32_frv_howto_table[ (int) R_FRV_32];\n\n    case BFD_RELOC_FRV_LABEL16:\n      return &elf32_frv_howto_table[ (int) R_FRV_LABEL16];\n\n    case BFD_RELOC_FRV_LABEL24:\n      return &elf32_frv_howto_table[ (int) R_FRV_LABEL24];\n\n    case BFD_RELOC_FRV_LO16:\n      return &elf32_frv_howto_table[ (int) R_FRV_LO16];\n\n    case BFD_RELOC_FRV_HI16:\n      return &elf32_frv_howto_table[ (int) R_FRV_HI16];\n\n    case BFD_RELOC_FRV_GPREL12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GPREL12];\n\n    case BFD_RELOC_FRV_GPRELU12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GPRELU12];\n\n    case BFD_RELOC_FRV_GPREL32:\n      return &elf32_frv_howto_table[ (int) R_FRV_GPREL32];\n\n    case BFD_RELOC_FRV_GPRELHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_GPRELHI];\n\n    case BFD_RELOC_FRV_GPRELLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_GPRELLO];\n\n    case BFD_RELOC_FRV_GOT12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOT12];\n\n    case BFD_RELOC_FRV_GOTHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTHI];\n\n    case BFD_RELOC_FRV_GOTLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTLO];\n\n    case BFD_RELOC_FRV_FUNCDESC:\n      if (elf_elfheader (abfd)->e_type == ET_EXEC\n\t  || elf_elfheader (abfd)->e_type == ET_DYN)\n\treturn &elf32_frv_rel_funcdesc_howto;\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOT12:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOT12];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOTHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOTHI];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOTLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOTLO];\n\n    case BFD_RELOC_FRV_FUNCDESC_VALUE:\n      if (elf_elfheader (abfd)->e_type == ET_EXEC\n\t  || elf_elfheader (abfd)->e_type == ET_DYN)\n\treturn &elf32_frv_rel_funcdesc_value_howto;\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_VALUE];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOTOFF12:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOTOFF12];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOTOFFHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOTOFFHI];\n\n    case BFD_RELOC_FRV_FUNCDESC_GOTOFFLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_FUNCDESC_GOTOFFLO];\n\n    case BFD_RELOC_FRV_GOTOFF12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTOFF12];\n\n    case BFD_RELOC_FRV_GOTOFFHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTOFFHI];\n\n    case BFD_RELOC_FRV_GOTOFFLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTOFFLO];\n\n    case BFD_RELOC_FRV_GETTLSOFF:\n      return &elf32_frv_howto_table[ (int) R_FRV_GETTLSOFF];\n\n    case BFD_RELOC_FRV_TLSDESC_VALUE:\n      if (elf_elfheader (abfd)->e_type == ET_EXEC\n\t  || elf_elfheader (abfd)->e_type == ET_DYN)\n\treturn &elf32_frv_rel_tlsdesc_value_howto;\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSDESC_VALUE];\n\n    case BFD_RELOC_FRV_GOTTLSDESC12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSDESC12];\n\n    case BFD_RELOC_FRV_GOTTLSDESCHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSDESCHI];\n\n    case BFD_RELOC_FRV_GOTTLSDESCLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSDESCLO];\n\n    case BFD_RELOC_FRV_TLSMOFF12:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSMOFF12];\n\n    case BFD_RELOC_FRV_TLSMOFFHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSMOFFHI];\n\n    case BFD_RELOC_FRV_TLSMOFFLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSMOFFLO];\n\n    case BFD_RELOC_FRV_GOTTLSOFF12:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSOFF12];\n\n    case BFD_RELOC_FRV_GOTTLSOFFHI:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSOFFHI];\n\n    case BFD_RELOC_FRV_GOTTLSOFFLO:\n      return &elf32_frv_howto_table[ (int) R_FRV_GOTTLSOFFLO];\n\n    case BFD_RELOC_FRV_TLSOFF:\n      if (elf_elfheader (abfd)->e_type == ET_EXEC\n\t  || elf_elfheader (abfd)->e_type == ET_DYN)\n\treturn &elf32_frv_rel_tlsoff_howto;\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSOFF];\n\n    case BFD_RELOC_FRV_TLSDESC_RELAX:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSDESC_RELAX];\n\n    case BFD_RELOC_FRV_GETTLSOFF_RELAX:\n      return &elf32_frv_howto_table[ (int) R_FRV_GETTLSOFF_RELAX];\n\n    case BFD_RELOC_FRV_TLSOFF_RELAX:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSOFF_RELAX];\n\n    case BFD_RELOC_FRV_TLSMOFF:\n      return &elf32_frv_howto_table[ (int) R_FRV_TLSMOFF];\n\n    case BFD_RELOC_VTABLE_INHERIT:\n      return &elf32_frv_vtinherit_howto;\n\n    case BFD_RELOC_VTABLE_ENTRY:\n      return &elf32_frv_vtentry_howto;\n    }\n\n  return NULL;\n}\n\nstatic reloc_howto_type *\nfrv_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name)\n{\n  unsigned int i;\n\n  for (i = 0;\n       i < sizeof (elf32_frv_howto_table) / sizeof (elf32_frv_howto_table[0]);\n       i++)\n    if (elf32_frv_howto_table[i].name != NULL\n\t&& strcasecmp (elf32_frv_howto_table[i].name, r_name) == 0)\n      return &elf32_frv_howto_table[i];\n\n  if (strcasecmp (elf32_frv_vtinherit_howto.name, r_name) == 0)\n    return &elf32_frv_vtinherit_howto;\n  if (strcasecmp (elf32_frv_vtentry_howto.name, r_name) == 0)\n    return &elf32_frv_vtentry_howto;\n\n  return NULL;\n}\n\n/* Set the howto pointer for an FRV ELF reloc.  */\n\nstatic void\nfrv_info_to_howto_rela (abfd, cache_ptr, dst)\n     bfd *abfd ATTRIBUTE_UNUSED;\n     arelent *cache_ptr;\n     Elf_Internal_Rela *dst;\n{\n  unsigned int r_type;\n\n  r_type = ELF32_R_TYPE (dst->r_info);\n  switch (r_type)\n    {\n    case R_FRV_GNU_VTINHERIT:\n      cache_ptr->howto = &elf32_frv_vtinherit_howto;\n      break;\n\n    case R_FRV_GNU_VTENTRY:\n      cache_ptr->howto = &elf32_frv_vtentry_howto;\n      break;\n\n    default:\n      cache_ptr->howto = & elf32_frv_howto_table [r_type];\n      break;\n    }\n}\n\n/* Set the howto pointer for an FRV ELF REL reloc.  */\nstatic void\nfrvfdpic_info_to_howto_rel (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t    arelent *cache_ptr, Elf_Internal_Rela *dst)\n{\n  unsigned int r_type;\n\n  r_type = ELF32_R_TYPE (dst->r_info);\n  switch (r_type)\n    {\n    case R_FRV_32:\n      cache_ptr->howto = &elf32_frv_rel_32_howto;\n      break;\n\n    case R_FRV_FUNCDESC:\n      cache_ptr->howto = &elf32_frv_rel_funcdesc_howto;\n      break;\n\n    case R_FRV_FUNCDESC_VALUE:\n      cache_ptr->howto = &elf32_frv_rel_funcdesc_value_howto;\n      break;\n\n    case R_FRV_TLSDESC_VALUE:\n      cache_ptr->howto = &elf32_frv_rel_tlsdesc_value_howto;\n      break;\n\n    case R_FRV_TLSOFF:\n      cache_ptr->howto = &elf32_frv_rel_tlsoff_howto;\n      break;\n\n    default:\n      cache_ptr->howto = NULL;\n      break;\n    }\n}\n\f\n/* Perform a single relocation.  By default we use the standard BFD\n   routines, but a few relocs, we have to do them ourselves.  */\n\nstatic bfd_reloc_status_type\nfrv_final_link_relocate (howto, input_bfd, input_section, contents, rel,\n\t\t\t relocation)\n     reloc_howto_type *howto;\n     bfd *input_bfd;\n     asection *input_section;\n     bfd_byte *contents;\n     Elf_Internal_Rela *rel;\n     bfd_vma relocation;\n{\n  return _bfd_final_link_relocate (howto, input_bfd, input_section,\n\t\t\t\t   contents, rel->r_offset, relocation,\n\t\t\t\t   rel->r_addend);\n}\n\n\f\n/* Relocate an FRV ELF section.\n\n   The RELOCATE_SECTION function is called by the new ELF backend linker\n   to handle the relocations for a section.\n\n   The relocs are always passed as Rela structures; if the section\n   actually uses Rel structures, the r_addend field will always be\n   zero.\n\n   This function is responsible for adjusting the section contents as\n   necessary, and (if using Rela relocs and generating a relocatable\n   output file) adjusting the reloc addend as necessary.\n\n   This function does not have to worry about setting the reloc\n   address or the reloc symbol index.\n\n   LOCAL_SYMS is a pointer to the swapped in local symbols.\n\n   LOCAL_SECTIONS is an array giving the section in the input file\n   corresponding to the st_shndx field of each local symbol.\n\n   The global hash table entry for the global symbols can be found\n   via elf_sym_hashes (input_bfd).\n\n   When generating relocatable output, this function must handle\n   STB_LOCAL/STT_SECTION symbols specially.  The output symbol is\n   going to be the section symbol corresponding to the output\n   section, which means that the addend must be adjusted\n   accordingly.  */\n\nstatic bfd_boolean\nelf32_frv_relocate_section (output_bfd, info, input_bfd, input_section,\n\t\t\t    contents, relocs, local_syms, local_sections)\n     bfd *output_bfd ATTRIBUTE_UNUSED;\n     struct bfd_link_info *info;\n     bfd *input_bfd;\n     asection *input_section;\n     bfd_byte *contents;\n     Elf_Internal_Rela *relocs;\n     Elf_Internal_Sym *local_syms;\n     asection **local_sections;\n{\n  Elf_Internal_Shdr *symtab_hdr;\n  struct elf_link_hash_entry **sym_hashes;\n  Elf_Internal_Rela *rel;\n  Elf_Internal_Rela *relend;\n  unsigned isec_segment, got_segment, plt_segment, gprel_segment, tls_segment,\n    check_segment[2];\n  int silence_segment_error = !(info->shared || info->pie);\n  unsigned long insn;\n\n  symtab_hdr = & elf_tdata (input_bfd)->symtab_hdr;\n  sym_hashes = elf_sym_hashes (input_bfd);\n  relend     = relocs + input_section->reloc_count;\n\n  isec_segment = _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t    input_section->output_section);\n  if (IS_FDPIC (output_bfd) && frvfdpic_got_section (info))\n    got_segment = _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t     frvfdpic_got_section (info)\n\t\t\t\t\t     ->output_section);\n  else\n    got_segment = -1;\n  if (IS_FDPIC (output_bfd) && frvfdpic_gotfixup_section (info))\n    gprel_segment = _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t       frvfdpic_gotfixup_section (info)\n\t\t\t\t\t       ->output_section);\n  else\n    gprel_segment = -1;\n  if (IS_FDPIC (output_bfd) && frvfdpic_plt_section (info))\n    plt_segment = _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t     frvfdpic_plt_section (info)\n\t\t\t\t\t     ->output_section);\n  else\n    plt_segment = -1;\n  if (elf_hash_table (info)->tls_sec)\n    tls_segment = _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t     elf_hash_table (info)->tls_sec);\n  else\n    tls_segment = -1;\n\n  for (rel = relocs; rel < relend; rel ++)\n    {\n      reloc_howto_type *howto;\n      unsigned long r_symndx;\n      Elf_Internal_Sym *sym;\n      asection *sec;\n      struct elf_link_hash_entry *h;\n      bfd_vma relocation;\n      bfd_reloc_status_type r;\n      const char * name = NULL;\n      int r_type;\n      asection *osec;\n      struct frvfdpic_relocs_info *picrel;\n      bfd_vma orig_addend = rel->r_addend;\n\n      r_type = ELF32_R_TYPE (rel->r_info);\n\n      if (   r_type == R_FRV_GNU_VTINHERIT\n\t  || r_type == R_FRV_GNU_VTENTRY)\n\tcontinue;\n\n      r_symndx = ELF32_R_SYM (rel->r_info);\n      howto  = elf32_frv_howto_table + ELF32_R_TYPE (rel->r_info);\n      h      = NULL;\n      sym    = NULL;\n      sec    = NULL;\n\n      if (r_symndx < symtab_hdr->sh_info)\n\t{\n\t  sym = local_syms + r_symndx;\n\t  osec = sec = local_sections [r_symndx];\n\t  relocation = _bfd_elf_rela_local_sym (output_bfd, sym, &sec, rel);\n\n\t  name = bfd_elf_string_from_elf_section\n\t    (input_bfd, symtab_hdr->sh_link, sym->st_name);\n\t  name = (name == NULL) ? bfd_section_name (input_bfd, sec) : name;\n\t}\n      else\n\t{\n\t  bfd_boolean warned;\n\t  bfd_boolean unresolved_reloc;\n\n\t  RELOC_FOR_GLOBAL_SYMBOL (info, input_bfd, input_section, rel,\n\t\t\t\t   r_symndx, symtab_hdr, sym_hashes,\n\t\t\t\t   h, sec, relocation,\n\t\t\t\t   unresolved_reloc, warned);\n\t  osec = sec;\n\t}\n\n      if (sec != NULL && elf_discarded_section (sec))\n\t{\n\t  /* For relocs against symbols from removed linkonce sections,\n\t     or sections discarded by a linker script, we just want the\n\t     section contents zeroed.  Avoid any special processing.  */\n\t  _bfd_clear_contents (howto, input_bfd, contents + rel->r_offset);\n\t  rel->r_info = 0;\n\t  rel->r_addend = 0;\n\t  continue;\n\t}\n\n      if (info->relocatable)\n\tcontinue;\n\n      if (r_type != R_FRV_TLSMOFF\n\t  && h != NULL\n\t  && (h->root.type == bfd_link_hash_defined\n\t      || h->root.type == bfd_link_hash_defweak)\n\t  && !FRVFDPIC_SYM_LOCAL (info, h))\n\t{\n\t  osec = sec = NULL;\n\t  relocation = 0;\n\t}\n\n      switch (r_type)\n\t{\n\tcase R_FRV_LABEL24:\n\tcase R_FRV_32:\n\t  if (! IS_FDPIC (output_bfd))\n\t    goto non_fdpic;\n\n\tcase R_FRV_GOT12:\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_GOTLO:\n\tcase R_FRV_FUNCDESC_GOT12:\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\tcase R_FRV_GOTOFF12:\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_GOTOFFLO:\n\tcase R_FRV_FUNCDESC_GOTOFF12:\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\tcase R_FRV_FUNCDESC:\n\tcase R_FRV_FUNCDESC_VALUE:\n\tcase R_FRV_GETTLSOFF:\n\tcase R_FRV_TLSDESC_VALUE:\n\tcase R_FRV_GOTTLSDESC12:\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\tcase R_FRV_TLSMOFF12:\n\tcase R_FRV_TLSMOFFHI:\n\tcase R_FRV_TLSMOFFLO:\n\tcase R_FRV_GOTTLSOFF12:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\tcase R_FRV_TLSOFF:\n\tcase R_FRV_TLSDESC_RELAX:\n\tcase R_FRV_GETTLSOFF_RELAX:\n\tcase R_FRV_TLSOFF_RELAX:\n\tcase R_FRV_TLSMOFF:\n\t  if (h != NULL)\n\t    picrel = frvfdpic_relocs_info_for_global (frvfdpic_relocs_info\n\t\t\t\t\t\t      (info), input_bfd, h,\n\t\t\t\t\t\t      orig_addend, INSERT);\n\t  else\n\t    /* In order to find the entry we created before, we must\n\t       use the original addend, not the one that may have been\n\t       modified by _bfd_elf_rela_local_sym().  */\n\t    picrel = frvfdpic_relocs_info_for_local (frvfdpic_relocs_info\n\t\t\t\t\t\t     (info), input_bfd, r_symndx,\n\t\t\t\t\t\t     orig_addend, INSERT);\n\t  if (! picrel)\n\t    return FALSE;\n\n\t  if (!_frvfdpic_emit_got_relocs_plt_entries (picrel, output_bfd, info,\n\t\t\t\t\t\t      osec, sym,\n\t\t\t\t\t\t      rel->r_addend))\n\t    {\n\t      (*_bfd_error_handler)\n\t\t(_(\"%B(%A+0x%x): relocation to `%s+%x' may have caused the error above\"),\n\t\t input_bfd, input_section, rel->r_offset, name, rel->r_addend);\n\t      return FALSE;\n\t    }\n\n\t  break;\n\n\tdefault:\n\tnon_fdpic:\n\t  picrel = NULL;\n\t  if (h && ! FRVFDPIC_SYM_LOCAL (info, h))\n\t    {\n\t      info->callbacks->warning\n\t\t(info, _(\"relocation references symbol not defined in the module\"),\n\t\t name, input_bfd, input_section, rel->r_offset);\n\t      return FALSE;\n\t    }\n\t  break;\n\t}\n\n      switch (r_type)\n\t{\n\tcase R_FRV_GETTLSOFF:\n\tcase R_FRV_TLSDESC_VALUE:\n\tcase R_FRV_GOTTLSDESC12:\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\tcase R_FRV_TLSMOFF12:\n\tcase R_FRV_TLSMOFFHI:\n\tcase R_FRV_TLSMOFFLO:\n\tcase R_FRV_GOTTLSOFF12:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\tcase R_FRV_TLSOFF:\n\tcase R_FRV_TLSDESC_RELAX:\n\tcase R_FRV_GETTLSOFF_RELAX:\n\tcase R_FRV_TLSOFF_RELAX:\n\tcase R_FRV_TLSMOFF:\n\t  if (sec && (bfd_is_abs_section (sec) || bfd_is_und_section (sec)))\n\t    relocation += tls_biased_base (info);\n\t  break;\n\n\tdefault:\n\t  break;\n\t}\n\n      /* Try to apply TLS relaxations.  */\n      if (1)\n\tswitch (r_type)\n\t  {\n\n#define LOCAL_EXEC_P(info, picrel) \\\n  ((info)->executable \\\n   && (picrel->symndx != -1 || FRVFDPIC_SYM_LOCAL ((info), (picrel)->d.h)))\n#define INITIAL_EXEC_P(info, picrel) \\\n  (((info)->executable || (info)->flags & DF_STATIC_TLS) \\\n   && (picrel)->tlsoff_entry)\n\n#define IN_RANGE_FOR_OFST12_P(value) \\\n  ((bfd_vma)((value) + 2048) < (bfd_vma)4096)\n#define IN_RANGE_FOR_SETLOS_P(value) \\\n  ((bfd_vma)((value) + 32768) < (bfd_vma)65536)\n#define TLSMOFF_IN_RANGE_FOR_SETLOS_P(value, info) \\\n  (IN_RANGE_FOR_SETLOS_P ((value) - tls_biased_base (info)))\n\n#define RELAX_GETTLSOFF_LOCAL_EXEC_P(info, picrel, value) \\\n  (LOCAL_EXEC_P ((info), (picrel)) \\\n   && TLSMOFF_IN_RANGE_FOR_SETLOS_P((value), (info)))\n#define RELAX_GETTLSOFF_INITIAL_EXEC_P(info, picrel) \\\n  (INITIAL_EXEC_P ((info), (picrel)) \\\n   && IN_RANGE_FOR_OFST12_P ((picrel)->tlsoff_entry))\n\n#define RELAX_TLSDESC_LOCAL_EXEC_P(info, picrel, value) \\\n  (LOCAL_EXEC_P ((info), (picrel)))\n#define RELAX_TLSDESC_INITIAL_EXEC_P(info, picrel) \\\n  (INITIAL_EXEC_P ((info), (picrel)))\n\n#define RELAX_GOTTLSOFF_LOCAL_EXEC_P(info, picrel, value) \\\n  (LOCAL_EXEC_P ((info), (picrel)) \\\n   && TLSMOFF_IN_RANGE_FOR_SETLOS_P((value), (info)))\n\n\t  case R_FRV_GETTLSOFF:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a call instruction?  */\n\t    if ((insn & (unsigned long)0x01fc0000) != 0x003c0000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GETTLSOFF not applied to a call instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_GETTLSOFF_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t      relocation + rel->r_addend))\n\t      {\n\t\t/* Replace the call instruction (except the packing bit)\n\t\t   with setlos #tlsmofflo(symbol+offset), gr9.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x12fc0000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_GETTLSOFF_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* Replace the call instruction (except the packing bit)\n\t\t   with ldi @(gr15, #gottlsoff12(symbol+addend)), gr9.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x12c8f000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_GOTTLSOFF12;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSDESC12:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this an lddi instruction?  */\n\t    if ((insn & (unsigned long)0x01fc0000) != 0x00cc0000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSDESC12 not applied to an lddi instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t    relocation + rel->r_addend)\n\t\t&& TLSMOFF_IN_RANGE_FOR_SETLOS_P (relocation + rel->r_addend,\n\t\t\t\t\t\t  info))\n\t      {\n\t\t/* Replace lddi @(grB, #gottlsdesc12(symbol+offset), grC\n\t\t   with setlos #tlsmofflo(symbol+offset), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x80000000)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tinsn |= (unsigned long)0x00fc0000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t\t relocation + rel->r_addend))\n\t      {\n\t\t/* Replace lddi @(grB, #gottlsdesc12(symbol+offset), grC\n\t\t   with sethi #tlsmoffhi(symbol+offset), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x80000000)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tinsn |= (unsigned long)0x00f80000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFHI;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* Replace lddi @(grB, #gottlsdesc12(symbol+offset), grC\n\t\t   with ldi @(grB, #gottlsoff12(symbol+offset),\n\t\t   gr<C+1>.  Preserve the packing bit.  If gottlsoff12\n\t\t   overflows, we'll error out, but that's sort-of ok,\n\t\t   since we'd started with gottlsdesc12, that's actually\n\t\t   more demanding.  Compiling with -fPIE instead of\n\t\t   -fpie would fix it; linking with --relax should fix\n\t\t   it as well.  */\n\t\tinsn = (insn & (unsigned long)0x80cbf000)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_GOTTLSOFF12;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSDESCHI:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a sethi instruction?  */\n\t    if ((insn & (unsigned long)0x01ff0000) != 0x00f80000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSDESCHI not applied to a sethi instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t    relocation + rel->r_addend)\n\t\t|| (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t    && IN_RANGE_FOR_SETLOS_P (picrel->tlsoff_entry)))\n\t      {\n\t\t/* Replace sethi with a nop.  Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* Simply decay GOTTLSDESC to GOTTLSOFF.  */\n\t\tr_type = R_FRV_GOTTLSOFFHI;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSDESCLO:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a setlo or setlos instruction?  */\n\t    if ((insn & (unsigned long)0x01f70000) != 0x00f40000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSDESCLO\"\n\t\t     \" not applied to a setlo or setlos instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t    relocation + rel->r_addend)\n\t\t|| (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t    && IN_RANGE_FOR_OFST12_P (picrel->tlsoff_entry)))\n\t      {\n\t\t/* Replace setlo/setlos with a nop.  Preserve the\n\t\t   packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* If the corresponding sethi (if it exists) decayed\n\t\t   to a nop, make sure this becomes (or already is) a\n\t\t   setlos, not setlo.  */\n\t\tif (IN_RANGE_FOR_SETLOS_P (picrel->tlsoff_entry))\n\t\t  {\n\t\t    insn |= (unsigned long)0x00080000;\n\t\t    bfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\t\t  }\n\n\t\t/* Simply decay GOTTLSDESC to GOTTLSOFF.  */\n\t\tr_type = R_FRV_GOTTLSOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_TLSDESC_RELAX:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this an ldd instruction?  */\n\t    if ((insn & (unsigned long)0x01fc0fc0) != 0x00080140)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_TLSDESC_RELAX not applied to an ldd instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t    relocation + rel->r_addend)\n\t\t&& TLSMOFF_IN_RANGE_FOR_SETLOS_P (relocation + rel->r_addend,\n\t\t\t\t\t\t  info))\n\t      {\n\t\t/* Replace ldd #tlsdesc(symbol+offset)@(grB, grA), grC\n\t\t   with setlos #tlsmofflo(symbol+offset), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x80000000)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tinsn |= (unsigned long)0x00fc0000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t\t relocation + rel->r_addend))\n\t      {\n\t\t/* Replace ldd #tlsdesc(symbol+offset)@(grB, grA), grC\n\t\t   with sethi #tlsmoffhi(symbol+offset), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x80000000)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tinsn |= (unsigned long)0x00f80000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFHI;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t     && IN_RANGE_FOR_OFST12_P (picrel->tlsoff_entry))\n\t      {\n\t\t/* Replace ldd #tlsdesc(symbol+offset)@(grB, grA), grC\n\t\t   with ldi @(grB, #gottlsoff12(symbol+offset), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x8003f000)\n\t\t  | (unsigned long)0x00c80000\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_GOTTLSOFF12;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* Replace ldd #tlsdesc(symbol+offset)@(grB, grA), grC\n\t\t   with ld #tlsoff(symbol+offset)@(grB, grA), gr<C+1>.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0x81ffffbf)\n\t\t  | ((insn + (unsigned long)0x02000000)\n\t\t     & (unsigned long)0x7e000000);\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* #tlsoff(symbol+offset) is just a relaxation\n                    annotation, so there's nothing left to\n                    relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GETTLSOFF_RELAX:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a calll or callil instruction?  */\n\t    if ((insn & (unsigned long)0x7ff80fc0) != 0x02300000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GETTLSOFF_RELAX\"\n\t\t     \" not applied to a calll instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t    relocation + rel->r_addend)\n\t\t&& TLSMOFF_IN_RANGE_FOR_SETLOS_P (relocation + rel->r_addend,\n\t\t\t\t\t\t  info))\n\t      {\n\t\t/* Replace calll with a nop.  Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    else if (RELAX_TLSDESC_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t\t relocation + rel->r_addend))\n\t      {\n\t\t/* Replace calll with setlo #tlsmofflo(symbol+offset), gr9.\n\t\t   Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x12f40000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel))\n\t      {\n\t\t/* Replace calll with a nop.  Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSOFF12:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this an ldi instruction?  */\n\t    if ((insn & (unsigned long)0x01fc0000) != 0x00c80000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSOFF12 not applied to an ldi instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_GOTTLSOFF_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t      relocation + rel->r_addend))\n\t      {\n\t\t/* Replace ldi @(grB, #gottlsoff12(symbol+offset), grC\n\t\t   with setlos #tlsmofflo(symbol+offset), grC.\n\t\t   Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0xfe000000;\n\t\tinsn |= (unsigned long)0x00fc0000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSOFFHI:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a sethi instruction?  */\n\t    if ((insn & (unsigned long)0x01ff0000) != 0x00f80000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSOFFHI not applied to a sethi instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_GOTTLSOFF_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t      relocation + rel->r_addend)\n\t\t|| (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t    && IN_RANGE_FOR_OFST12_P (picrel->tlsoff_entry)))\n\t      {\n\t\t/* Replace sethi with a nop.  Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    break;\n\n\t  case R_FRV_GOTTLSOFFLO:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a setlo or setlos instruction?  */\n\t    if ((insn & (unsigned long)0x01f70000) != 0x00f40000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_GOTTLSOFFLO\"\n\t\t     \" not applied to a setlo or setlos instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_GOTTLSOFF_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t      relocation + rel->r_addend)\n\t\t|| (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t    && IN_RANGE_FOR_OFST12_P (picrel->tlsoff_entry)))\n\t      {\n\t\t/* Replace setlo/setlos with a nop.  Preserve the\n\t\t   packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    break;\n\n\t  case R_FRV_TLSOFF_RELAX:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this an ld instruction?  */\n\t    if ((insn & (unsigned long)0x01fc0fc0) != 0x00080100)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_TLSOFF_RELAX not applied to an ld instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (RELAX_GOTTLSOFF_LOCAL_EXEC_P (info, picrel,\n\t\t\t\t\t      relocation + rel->r_addend))\n\t      {\n\t\t/* Replace ld #gottlsoff(symbol+offset)@(grB, grA), grC\n\t\t   with setlos #tlsmofflo(symbol+offset), grC.\n\t\t   Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0xfe000000;\n\t\tinsn |= (unsigned long)0x00fc0000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_TLSMOFFLO;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    else if (RELAX_TLSDESC_INITIAL_EXEC_P (info, picrel)\n\t\t     && IN_RANGE_FOR_OFST12_P (picrel->tlsoff_entry))\n\t      {\n\t\t/* Replace ld #tlsoff(symbol+offset)@(grB, grA), grC\n\t\t   with ldi @(grB, #gottlsoff12(symbol+offset), grC.\n\t\t   Preserve the packing bit.  */\n\t\tinsn = (insn & (unsigned long)0xfe03f000)\n\t\t  | (unsigned long)0x00c80000;;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\tr_type = R_FRV_GOTTLSOFF12;\n\t\thowto  = elf32_frv_howto_table + r_type;\n\t\trel->r_info = ELF32_R_INFO (r_symndx, r_type);\n\t      }\n\n\t    break;\n\n\t  case R_FRV_TLSMOFFHI:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a sethi instruction?  */\n\t    if ((insn & (unsigned long)0x01ff0000) != 0x00f80000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_TLSMOFFHI not applied to a sethi instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (TLSMOFF_IN_RANGE_FOR_SETLOS_P (relocation + rel->r_addend,\n\t\t\t\t\t       info))\n\t      {\n\t\t/* Replace sethi with a nop.  Preserve the packing bit.  */\n\t\tinsn &= (unsigned long)0x80000000;\n\t\tinsn |= (unsigned long)0x00880000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\n\t\t/* Nothing to relocate.  */\n\t\tcontinue;\n\t      }\n\n\t    break;\n\n\t  case R_FRV_TLSMOFFLO:\n\t    insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n\n\t    /* Is this a setlo or setlos instruction?  */\n\t    if ((insn & (unsigned long)0x01f70000) != 0x00f40000)\n\t      {\n\t\tr = info->callbacks->warning\n\t\t  (info,\n\t\t   _(\"R_FRV_TLSMOFFLO\"\n\t\t     \" not applied to a setlo or setlos instruction\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\treturn FALSE;\n\t      }\n\n\t    if (TLSMOFF_IN_RANGE_FOR_SETLOS_P (relocation + rel->r_addend,\n\t\t\t\t\t       info))\n\t      /* If the corresponding sethi (if it exists) decayed\n\t\t to a nop, make sure this becomes (or already is) a\n\t\t setlos, not setlo.  */\n\t      {\n\t\tinsn |= (unsigned long)0x00080000;\n\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n\t      }\n\n\t    break;\n\n\t    /*\n\t      There's nothing to relax in these:\n\t\tR_FRV_TLSDESC_VALUE\n\t\tR_FRV_TLSOFF\n\t\tR_FRV_TLSMOFF12\n\t\tR_FRV_TLSMOFFHI\n\t\tR_FRV_TLSMOFFLO\n\t\tR_FRV_TLSMOFF\n\t    */\n\n\t  default:\n\t    break;\n\t  }\n\n      switch (r_type)\n\t{\n\tcase R_FRV_LABEL24:\n\t  check_segment[0] = isec_segment;\n\t  if (! IS_FDPIC (output_bfd))\n\t    check_segment[1] = isec_segment;\n\t  else if (picrel->plt)\n\t    {\n\t      relocation = frvfdpic_plt_section (info)->output_section->vma\n\t\t+ frvfdpic_plt_section (info)->output_offset\n\t\t+ picrel->plt_entry;\n\t      check_segment[1] = plt_segment;\n\t    }\n\t  /* We don't want to warn on calls to undefined weak symbols,\n\t     as calls to them must be protected by non-NULL tests\n\t     anyway, and unprotected calls would invoke undefined\n\t     behavior.  */\n\t  else if (picrel->symndx == -1\n\t\t   && picrel->d.h->root.type == bfd_link_hash_undefweak)\n\t    check_segment[1] = check_segment[0];\n\t  else\n\t    check_segment[1] = sec\n\t      ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t      : (unsigned)-1;\n\t  break;\n\n\tcase R_FRV_GOT12:\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_GOTLO:\n\t  relocation = picrel->got_entry;\n\t  check_segment[0] = check_segment[1] = got_segment;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOT12:\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\t  relocation = picrel->fdgot_entry;\n\t  check_segment[0] = check_segment[1] = got_segment;\n\t  break;\n\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_GOTOFF12:\n\tcase R_FRV_GOTOFFLO:\n\t  relocation -= frvfdpic_got_section (info)->output_section->vma\n\t    + frvfdpic_got_section (info)->output_offset\n\t    + frvfdpic_got_initial_offset (info);\n\t  check_segment[0] = got_segment;\n\t  check_segment[1] = sec\n\t    ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t    : (unsigned)-1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOTOFF12:\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\t  relocation = picrel->fd_entry;\n\t  check_segment[0] = check_segment[1] = got_segment;\n\t  break;\n\n\tcase R_FRV_FUNCDESC:\n\t  {\n\t    int dynindx;\n\t    bfd_vma addend = rel->r_addend;\n\n\t    if (! (h && h->root.type == bfd_link_hash_undefweak\n\t\t   && FRVFDPIC_SYM_LOCAL (info, h)))\n\t      {\n\t\t/* If the symbol is dynamic and there may be dynamic\n\t\t   symbol resolution because we are or are linked with a\n\t\t   shared library, emit a FUNCDESC relocation such that\n\t\t   the dynamic linker will allocate the function\n\t\t   descriptor.  If the symbol needs a non-local function\n\t\t   descriptor but binds locally (e.g., its visibility is\n\t\t   protected, emit a dynamic relocation decayed to\n\t\t   section+offset.  */\n\t\tif (h && ! FRVFDPIC_FUNCDESC_LOCAL (info, h)\n\t\t    && FRVFDPIC_SYM_LOCAL (info, h)\n\t\t    && !(info->executable && !info->pie))\n\t\t  {\n\t\t    dynindx = elf_section_data (h->root.u.def.section\n\t\t\t\t\t\t->output_section)->dynindx;\n\t\t    addend += h->root.u.def.section->output_offset\n\t\t      + h->root.u.def.value;\n\t\t  }\n\t\telse if (h && ! FRVFDPIC_FUNCDESC_LOCAL (info, h))\n\t\t  {\n\t\t    if (addend)\n\t\t      {\n\t\t\tinfo->callbacks->warning\n\t\t\t  (info, _(\"R_FRV_FUNCDESC references dynamic symbol with nonzero addend\"),\n\t\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\t\treturn FALSE;\n\t\t      }\n\t\t    dynindx = h->dynindx;\n\t\t  }\n\t\telse\n\t\t  {\n\t\t    /* Otherwise, we know we have a private function\n\t\t       descriptor, so reference it directly.  */\n\t\t    BFD_ASSERT (picrel->privfd);\n\t\t    r_type = R_FRV_32;\n\t\t    dynindx = elf_section_data (frvfdpic_got_section (info)\n\t\t\t\t\t\t->output_section)->dynindx;\n\t\t    addend = frvfdpic_got_section (info)->output_offset\n\t\t      + frvfdpic_got_initial_offset (info)\n\t\t      + picrel->fd_entry;\n\t\t  }\n\n\t\t/* If there is room for dynamic symbol resolution, emit\n\t\t   the dynamic relocation.  However, if we're linking an\n\t\t   executable at a fixed location, we won't have emitted a\n\t\t   dynamic symbol entry for the got section, so idx will\n\t\t   be zero, which means we can and should compute the\n\t\t   address of the private descriptor ourselves.  */\n\t\tif (info->executable && !info->pie\n\t\t    && (!h || FRVFDPIC_FUNCDESC_LOCAL (info, h)))\n\t\t  {\n\t\t    addend += frvfdpic_got_section (info)->output_section->vma;\n\t\t    if ((bfd_get_section_flags (output_bfd,\n\t\t\t\t\t\tinput_section->output_section)\n\t\t\t & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))\n\t\t      {\n\t\t\tbfd_vma offset;\n\n\t\t\tif (_frvfdpic_osec_readonly_p (output_bfd,\n\t\t\t\t\t\t       input_section\n\t\t\t\t\t\t       ->output_section))\n\t\t\t  {\n\t\t\t    info->callbacks->warning\n\t\t\t      (info,\n\t\t\t       _(\"cannot emit fixups in read-only section\"),\n\t\t\t       name, input_bfd, input_section, rel->r_offset);\n\t\t\t    return FALSE;\n\t\t\t  }\n\n\t\t\toffset = _bfd_elf_section_offset\n\t\t\t  (output_bfd, info,\n\t\t\t   input_section, rel->r_offset);\n\n\t\t\tif (offset != (bfd_vma)-1)\n\t\t\t  _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t\t\t frvfdpic_gotfixup_section\n\t\t\t\t\t\t (info),\n\t\t\t\t\t\t offset + input_section\n\t\t\t\t\t\t ->output_section->vma\n\t\t\t\t\t\t + input_section->output_offset,\n\t\t\t\t\t\t picrel);\n\t\t      }\n\t\t  }\n\t\telse if ((bfd_get_section_flags (output_bfd,\n\t\t\t\t\t\t input_section->output_section)\n\t\t\t  & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))\n\t\t  {\n\t\t    bfd_vma offset;\n\n\t\t    if (_frvfdpic_osec_readonly_p (output_bfd,\n\t\t\t\t\t\t   input_section\n\t\t\t\t\t\t   ->output_section))\n\t\t      {\n\t\t\tinfo->callbacks->warning\n\t\t\t  (info,\n\t\t\t   _(\"cannot emit dynamic relocations in read-only section\"),\n\t\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\t\treturn FALSE;\n\t\t      }\n\n\t\t    offset = _bfd_elf_section_offset\n\t\t      (output_bfd, info,\n\t\t       input_section, rel->r_offset);\n\n\t\t    if (offset != (bfd_vma)-1)\n\t\t      _frvfdpic_add_dyn_reloc (output_bfd,\n\t\t\t\t\t       frvfdpic_gotrel_section (info),\n\t\t\t\t\t       offset + input_section\n\t\t\t\t\t       ->output_section->vma\n\t\t\t\t\t       + input_section->output_offset,\n\t\t\t\t\t       r_type, dynindx, addend, picrel);\n\t\t  }\n\t\telse\n\t\t  addend += frvfdpic_got_section (info)->output_section->vma;\n\t      }\n\n\t    /* We want the addend in-place because dynamic\n\t       relocations are REL.  Setting relocation to it should\n\t       arrange for it to be installed.  */\n\t    relocation = addend - rel->r_addend;\n\t  }\n\t  check_segment[0] = check_segment[1] = got_segment;\n\t  break;\n\n\tcase R_FRV_32:\n\t  if (! IS_FDPIC (output_bfd))\n\t    {\n\t      check_segment[0] = check_segment[1] = -1;\n\t      break;\n\t    }\n\t  /* Fall through.  */\n\tcase R_FRV_FUNCDESC_VALUE:\n\t  {\n\t    int dynindx;\n\t    bfd_vma addend = rel->r_addend;\n\n\t    /* If the symbol is dynamic but binds locally, use\n\t       section+offset.  */\n\t    if (h && ! FRVFDPIC_SYM_LOCAL (info, h))\n\t      {\n\t\tif (addend && r_type == R_FRV_FUNCDESC_VALUE)\n\t\t  {\n\t\t    info->callbacks->warning\n\t\t      (info, _(\"R_FRV_FUNCDESC_VALUE references dynamic symbol with nonzero addend\"),\n\t\t       name, input_bfd, input_section, rel->r_offset);\n\t\t    return FALSE;\n\t\t  }\n\t\tdynindx = h->dynindx;\n\t      }\n\t    else\n\t      {\n\t\tif (h)\n\t\t  addend += h->root.u.def.value;\n\t\telse\n\t\t  addend += sym->st_value;\n\t\tif (osec)\n\t\t  addend += osec->output_offset;\n\t\tif (osec && osec->output_section\n\t\t    && ! bfd_is_abs_section (osec->output_section)\n\t\t    && ! bfd_is_und_section (osec->output_section))\n\t\t  dynindx = elf_section_data (osec->output_section)->dynindx;\n\t\telse\n\t\t  dynindx = 0;\n\t      }\n\n\t    /* If we're linking an executable at a fixed address, we\n\t       can omit the dynamic relocation as long as the symbol\n\t       is defined in the current link unit (which is implied\n\t       by its output section not being NULL).  */\n\t    if (info->executable && !info->pie\n\t\t&& (!h || FRVFDPIC_SYM_LOCAL (info, h)))\n\t      {\n\t\tif (osec)\n\t\t  addend += osec->output_section->vma;\n\t\tif (IS_FDPIC (input_bfd)\n\t\t    && (bfd_get_section_flags (output_bfd,\n\t\t\t\t\t       input_section->output_section)\n\t\t\t& (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))\n\t\t  {\n\t\t    if (_frvfdpic_osec_readonly_p (output_bfd,\n\t\t\t\t\t\t   input_section\n\t\t\t\t\t\t   ->output_section))\n\t\t      {\n\t\t\tinfo->callbacks->warning\n\t\t\t  (info,\n\t\t\t   _(\"cannot emit fixups in read-only section\"),\n\t\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\t\treturn FALSE;\n\t\t      }\n\t\t    if (!h || h->root.type != bfd_link_hash_undefweak)\n\t\t      {\n\t\t\tbfd_vma offset = _bfd_elf_section_offset\n\t\t\t  (output_bfd, info,\n\t\t\t   input_section, rel->r_offset);\n\n\t\t\tif (offset != (bfd_vma)-1)\n\t\t\t  {\n\t\t\t    _frvfdpic_add_rofixup (output_bfd,\n\t\t\t\t\t\t   frvfdpic_gotfixup_section\n\t\t\t\t\t\t   (info),\n\t\t\t\t\t\t   offset + input_section\n\t\t\t\t\t\t   ->output_section->vma\n\t\t\t\t\t\t   + input_section->output_offset,\n\t\t\t\t\t\t   picrel);\n\t\t\t    if (r_type == R_FRV_FUNCDESC_VALUE)\n\t\t\t      _frvfdpic_add_rofixup\n\t\t\t\t(output_bfd,\n\t\t\t\t frvfdpic_gotfixup_section (info),\n\t\t\t\t offset\n\t\t\t\t + input_section->output_section->vma\n\t\t\t\t + input_section->output_offset + 4, picrel);\n\t\t\t  }\n\t\t      }\n\t\t  }\n\t      }\n\t    else\n\t      {\n\t\tif ((bfd_get_section_flags (output_bfd,\n\t\t\t\t\t    input_section->output_section)\n\t\t     & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))\n\t\t  {\n\t\t    bfd_vma offset;\n\n\t\t    if (_frvfdpic_osec_readonly_p (output_bfd,\n\t\t\t\t\t\t   input_section\n\t\t\t\t\t\t   ->output_section))\n\t\t      {\n\t\t\tinfo->callbacks->warning\n\t\t\t  (info,\n\t\t\t   _(\"cannot emit dynamic relocations in read-only section\"),\n\t\t\t   name, input_bfd, input_section, rel->r_offset);\n\t\t\treturn FALSE;\n\t\t      }\n\n\t\t    offset = _bfd_elf_section_offset\n\t\t      (output_bfd, info,\n\t\t       input_section, rel->r_offset);\n\n\t\t    if (offset != (bfd_vma)-1)\n\t\t      _frvfdpic_add_dyn_reloc (output_bfd,\n\t\t\t\t\t       frvfdpic_gotrel_section (info),\n\t\t\t\t\t       offset + input_section\n\t\t\t\t\t       ->output_section->vma\n\t\t\t\t\t       + input_section->output_offset,\n\t\t\t\t\t       r_type, dynindx, addend, picrel);\n\t\t  }\n\t\telse if (osec)\n\t\t  addend += osec->output_section->vma;\n\t\t/* We want the addend in-place because dynamic\n\t\t   relocations are REL.  Setting relocation to it\n\t\t   should arrange for it to be installed.  */\n\t\trelocation = addend - rel->r_addend;\n\t      }\n\n\t    if (r_type == R_FRV_FUNCDESC_VALUE)\n\t      {\n\t\t/* If we've omitted the dynamic relocation, just emit\n\t\t   the fixed addresses of the symbol and of the local\n\t\t   GOT base offset.  */\n\t\tif (info->executable && !info->pie\n\t\t    && (!h || FRVFDPIC_SYM_LOCAL (info, h)))\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      frvfdpic_got_section (info)->output_section->vma\n\t\t\t      + frvfdpic_got_section (info)->output_offset\n\t\t\t      + frvfdpic_got_initial_offset (info),\n\t\t\t      contents + rel->r_offset + 4);\n\t\telse\n\t\t  /* A function descriptor used for lazy or local\n\t\t     resolving is initialized such that its high word\n\t\t     contains the output section index in which the\n\t\t     PLT entries are located, and the low word\n\t\t     contains the offset of the lazy PLT entry entry\n\t\t     point into that section.  */\n\t\t  bfd_put_32 (output_bfd,\n\t\t\t      h && ! FRVFDPIC_SYM_LOCAL (info, h)\n\t\t\t      ? 0\n\t\t\t      : _frvfdpic_osec_to_segment (output_bfd,\n\t\t\t\t\t\t\t   sec\n\t\t\t\t\t\t\t   ->output_section),\n\t\t\t      contents + rel->r_offset + 4);\n\t      }\n\t  }\n\t  check_segment[0] = check_segment[1] = got_segment;\n\t  break;\n\n\tcase R_FRV_GPREL12:\n\tcase R_FRV_GPRELU12:\n\tcase R_FRV_GPREL32:\n\tcase R_FRV_GPRELHI:\n\tcase R_FRV_GPRELLO:\n\t  check_segment[0] = gprel_segment;\n\t  check_segment[1] = sec\n\t    ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t    : (unsigned)-1;\n\t  break;\n\n\tcase R_FRV_GETTLSOFF:\n\t  relocation = frvfdpic_plt_section (info)->output_section->vma\n\t    + frvfdpic_plt_section (info)->output_offset\n\t    + picrel->tlsplt_entry;\n\t  BFD_ASSERT (picrel->tlsplt_entry != (bfd_vma)-1\n\t\t      && picrel->tlsdesc_entry);\n\t  check_segment[0] = isec_segment;\n\t  check_segment[1] = plt_segment;\n\t  break;\n\n\tcase R_FRV_GOTTLSDESC12:\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\t  BFD_ASSERT (picrel->tlsdesc_entry);\n\t  relocation = picrel->tlsdesc_entry;\n\t  check_segment[0] = tls_segment;\n\t  check_segment[1] = sec\n\t    && ! bfd_is_abs_section (sec)\n\t    && ! bfd_is_und_section (sec)\n\t    ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t    : tls_segment;\n\t  break;\n\n\tcase R_FRV_TLSMOFF12:\n\tcase R_FRV_TLSMOFFHI:\n\tcase R_FRV_TLSMOFFLO:\n\tcase R_FRV_TLSMOFF:\n\t  check_segment[0] = tls_segment;\n\t  if (! sec)\n\t    check_segment[1] = -1;\n\t  else if (bfd_is_abs_section (sec)\n\t\t   || bfd_is_und_section (sec))\n\t    {\n\t      relocation = 0;\n\t      check_segment[1] = tls_segment;\n\t    }\n\t  else if (sec->output_section)\n\t    {\n\t      relocation -= tls_biased_base (info);\n\t      check_segment[1] =\n\t\t_frvfdpic_osec_to_segment (output_bfd, sec->output_section);\n\t    }\n\t  else\n\t    check_segment[1] = -1;\n\t  break;\n\n\tcase R_FRV_GOTTLSOFF12:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\t  BFD_ASSERT (picrel->tlsoff_entry);\n\t  relocation = picrel->tlsoff_entry;\n\t  check_segment[0] = tls_segment;\n\t  check_segment[1] = sec\n\t    && ! bfd_is_abs_section (sec)\n\t    && ! bfd_is_und_section (sec)\n\t    ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t    : tls_segment;\n\t  break;\n\n\tcase R_FRV_TLSDESC_VALUE:\n\tcase R_FRV_TLSOFF:\n\t  /* These shouldn't be present in input object files.  */\n\t  check_segment[0] = check_segment[1] = isec_segment;\n\t  break;\n\n\tcase R_FRV_TLSDESC_RELAX:\n\tcase R_FRV_GETTLSOFF_RELAX:\n\tcase R_FRV_TLSOFF_RELAX:\n\t  /* These are just annotations for relaxation, nothing to do\n\t     here.  */\n\t  continue;\n\n\tdefault:\n\t  check_segment[0] = isec_segment;\n\t  check_segment[1] = sec\n\t    ? _frvfdpic_osec_to_segment (output_bfd, sec->output_section)\n\t    : (unsigned)-1;\n\t  break;\n\t}\n\n      if (check_segment[0] != check_segment[1] && IS_FDPIC (output_bfd))\n\t{\n\t  /* If you take this out, remove the #error from fdpic-static-6.d\n\t     in the ld testsuite.  */\n\t  /* This helps catch problems in GCC while we can't do more\n\t     than static linking.  The idea is to test whether the\n\t     input file basename is crt0.o only once.  */\n\t  if (silence_segment_error == 1)\n\t    silence_segment_error =\n\t      (strlen (input_bfd->filename) == 6\n\t       && strcmp (input_bfd->filename, \"crt0.o\") == 0)\n\t      || (strlen (input_bfd->filename) > 6\n\t\t  && strcmp (input_bfd->filename\n\t\t\t     + strlen (input_bfd->filename) - 7,\n\t\t\t     \"/crt0.o\") == 0)\n\t      ? -1 : 0;\n\t  if (!silence_segment_error\n\t      /* We don't want duplicate errors for undefined\n\t\t symbols.  */\n\t      && !(picrel && picrel->symndx == -1\n\t\t   && picrel->d.h->root.type == bfd_link_hash_undefined))\n\t    {\n\t      if (info->shared || info->pie)\n\t\t(*_bfd_error_handler)\n\t\t  (_(\"%B(%A+0x%lx): reloc against `%s': %s\"),\n\t\t   input_bfd, input_section, (long)rel->r_offset, name,\n\t\t   _(\"relocation references a different segment\"));\n\t      else\n\t\tinfo->callbacks->warning\n\t\t  (info,\n\t\t   _(\"relocation references a different segment\"),\n\t\t   name, input_bfd, input_section, rel->r_offset);\n\t    }\n\t  if (!silence_segment_error && (info->shared || info->pie))\n\t    return FALSE;\n\t  elf_elfheader (output_bfd)->e_flags |= EF_FRV_PIC;\n\t}\n\n      switch (r_type)\n\t{\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_TLSMOFFHI:\n\t  /* We need the addend to be applied before we shift the\n\t     value right.  */\n\t  relocation += rel->r_addend;\n\t  /* Fall through.  */\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSDESCHI:\n\t  relocation >>= 16;\n\t  /* Fall through.  */\n\n\tcase R_FRV_GOTLO:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\tcase R_FRV_GOTOFFLO:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\tcase R_FRV_GOTTLSOFFLO:\n\tcase R_FRV_GOTTLSDESCLO:\n\tcase R_FRV_TLSMOFFLO:\n\t  relocation &= 0xffff;\n\t  break;\n\n\tdefault:\n\t  break;\n\t}\n\n      switch (r_type)\n\t{\n\tcase R_FRV_LABEL24:\n\t  if (! IS_FDPIC (output_bfd) || ! picrel->plt)\n\t    break;\n\t  /* Fall through.  */\n\n\t  /* When referencing a GOT entry, a function descriptor or a\n\t     PLT, we don't want the addend to apply to the reference,\n\t     but rather to the referenced symbol.  The actual entry\n\t     will have already been created taking the addend into\n\t     account, so cancel it out here.  */\n\tcase R_FRV_GOT12:\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_GOTLO:\n\tcase R_FRV_FUNCDESC_GOT12:\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\tcase R_FRV_FUNCDESC_GOTOFF12:\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\tcase R_FRV_GETTLSOFF:\n\tcase R_FRV_GOTTLSDESC12:\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\tcase R_FRV_GOTTLSOFF12:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\t  /* Note that we only want GOTOFFHI, not GOTOFFLO or GOTOFF12\n\t     here, since we do want to apply the addend to the others.\n\t     Note that we've applied the addend to GOTOFFHI before we\n\t     shifted it right.  */\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_TLSMOFFHI:\n\t  relocation -= rel->r_addend;\n\t  break;\n\n\tdefault:\n\t  break;\n\t}\n\n     if (r_type == R_FRV_HI16)\n       r = elf32_frv_relocate_hi16 (input_bfd, rel, contents, relocation);\n\n     else if (r_type == R_FRV_LO16)\n       r = elf32_frv_relocate_lo16 (input_bfd, rel, contents, relocation);\n\n     else if (r_type == R_FRV_LABEL24 || r_type == R_FRV_GETTLSOFF)\n       r = elf32_frv_relocate_label24 (input_bfd, input_section, rel,\n\t\t\t\t       contents, relocation);\n\n     else if (r_type == R_FRV_GPREL12)\n       r = elf32_frv_relocate_gprel12 (info, input_bfd, input_section, rel,\n\t\t\t\t       contents, relocation);\n\n     else if (r_type == R_FRV_GPRELU12)\n       r = elf32_frv_relocate_gprelu12 (info, input_bfd, input_section, rel,\n\t\t\t\t\tcontents, relocation);\n\n     else if (r_type == R_FRV_GPRELLO)\n       r = elf32_frv_relocate_gprello (info, input_bfd, input_section, rel,\n\t\t\t\t       contents, relocation);\n\n     else if (r_type == R_FRV_GPRELHI)\n       r = elf32_frv_relocate_gprelhi (info, input_bfd, input_section, rel,\n\t\t\t\t       contents, relocation);\n\n     else if (r_type == R_FRV_TLSOFF\n\t      || r_type == R_FRV_TLSDESC_VALUE)\n       r = bfd_reloc_notsupported;\n\n     else\n       r = frv_final_link_relocate (howto, input_bfd, input_section, contents,\n\t\t\t\t    rel, relocation);\n\n      if (r != bfd_reloc_ok)\n\t{\n\t  const char * msg = (const char *) NULL;\n\n\t  switch (r)\n\t    {\n\t    case bfd_reloc_overflow:\n\t      r = info->callbacks->reloc_overflow\n\t\t(info, (h ? &h->root : NULL), name, howto->name,\n\t\t (bfd_vma) 0, input_bfd, input_section, rel->r_offset);\n\t      break;\n\n\t    case bfd_reloc_undefined:\n\t      r = info->callbacks->undefined_symbol\n\t\t(info, name, input_bfd, input_section, rel->r_offset, TRUE);\n\t      break;\n\n\t    case bfd_reloc_outofrange:\n\t      msg = _(\"internal error: out of range error\");\n\t      break;\n\n\t    case bfd_reloc_notsupported:\n\t      msg = _(\"internal error: unsupported relocation error\");\n\t      break;\n\n\t    case bfd_reloc_dangerous:\n\t      msg = _(\"internal error: dangerous relocation\");\n\t      break;\n\n\t    default:\n\t      msg = _(\"internal error: unknown error\");\n\t      break;\n\t    }\n\n\t  if (msg)\n\t    {\n\t      (*_bfd_error_handler)\n\t\t(_(\"%B(%A+0x%lx): reloc against `%s': %s\"),\n\t\t input_bfd, input_section, (long)rel->r_offset, name, msg);\n\t      return FALSE;\n\t    }\n\n\t  if (! r)\n\t    return FALSE;\n\t}\n    }\n\n  return TRUE;\n}\n\f\n/* Return the section that should be marked against GC for a given\n   relocation.  */\n\nstatic asection *\nelf32_frv_gc_mark_hook (asection *sec,\n\t\t\tstruct bfd_link_info *info,\n\t\t\tElf_Internal_Rela *rel,\n\t\t\tstruct elf_link_hash_entry *h,\n\t\t\tElf_Internal_Sym *sym)\n{\n  if (h != NULL)\n    switch (ELF32_R_TYPE (rel->r_info))\n      {\n      case R_FRV_GNU_VTINHERIT:\n      case R_FRV_GNU_VTENTRY:\n\treturn NULL;\n      }\n\n  return _bfd_elf_gc_mark_hook (sec, info, rel, h, sym);\n}\n\f\n/* Hook called by the linker routine which adds symbols from an object\n   file.  We use it to put .comm items in .scomm, and not .comm.  */\n\nstatic bfd_boolean\nelf32_frv_add_symbol_hook (abfd, info, sym, namep, flagsp, secp, valp)\n     bfd *abfd;\n     struct bfd_link_info *info;\n     Elf_Internal_Sym *sym;\n     const char **namep ATTRIBUTE_UNUSED;\n     flagword *flagsp ATTRIBUTE_UNUSED;\n     asection **secp;\n     bfd_vma *valp;\n{\n  if (sym->st_shndx == SHN_COMMON\n      && !info->relocatable\n      && (int)sym->st_size <= (int)bfd_get_gp_size (abfd))\n    {\n      /* Common symbols less than or equal to -G nn bytes are\n\t automatically put into .sbss.  */\n\n      asection *scomm = bfd_get_section_by_name (abfd, \".scommon\");\n\n      if (scomm == NULL)\n\t{\n\t  scomm = bfd_make_section_with_flags (abfd, \".scommon\",\n\t\t\t\t\t       (SEC_ALLOC\n\t\t\t\t\t\t| SEC_IS_COMMON\n\t\t\t\t\t\t| SEC_LINKER_CREATED));\n\t  if (scomm == NULL)\n\t    return FALSE;\n\t}\n\n      *secp = scomm;\n      *valp = sym->st_size;\n    }\n\n  return TRUE;\n}\n\n/* We need dynamic symbols for every section, since segments can\n   relocate independently.  */\nstatic bfd_boolean\n_frvfdpic_link_omit_section_dynsym (bfd *output_bfd ATTRIBUTE_UNUSED,\n\t\t\t\t    struct bfd_link_info *info\n\t\t\t\t    ATTRIBUTE_UNUSED,\n\t\t\t\t    asection *p ATTRIBUTE_UNUSED)\n{\n  switch (elf_section_data (p)->this_hdr.sh_type)\n    {\n    case SHT_PROGBITS:\n    case SHT_NOBITS:\n      /* If sh_type is yet undecided, assume it could be\n\t SHT_PROGBITS/SHT_NOBITS.  */\n    case SHT_NULL:\n      return FALSE;\n\n      /* There shouldn't be section relative relocations\n\t against any other section.  */\n    default:\n      return TRUE;\n    }\n}\n\n/* Create  a .got section, as well as its additional info field.  This\n   is almost entirely copied from\n   elflink.c:_bfd_elf_create_got_section().  */\n\nstatic bfd_boolean\n_frv_create_got_section (bfd *abfd, struct bfd_link_info *info)\n{\n  flagword flags, pltflags;\n  asection *s;\n  struct elf_link_hash_entry *h;\n  struct bfd_link_hash_entry *bh;\n  const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n  int ptralign;\n  int offset;\n\n  /* This function may be called more than once.  */\n  s = bfd_get_section_by_name (abfd, \".got\");\n  if (s != NULL && (s->flags & SEC_LINKER_CREATED) != 0)\n    return TRUE;\n\n  /* Machine specific: although pointers are 32-bits wide, we want the\n     GOT to be aligned to a 64-bit boundary, such that function\n     descriptors in it can be accessed with 64-bit loads and\n     stores.  */\n  ptralign = 3;\n\n  flags = (SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS | SEC_IN_MEMORY\n\t   | SEC_LINKER_CREATED);\n  pltflags = flags;\n\n  s = bfd_make_section_with_flags (abfd, \".got\", flags);\n  if (s == NULL\n      || !bfd_set_section_alignment (abfd, s, ptralign))\n    return FALSE;\n\n  if (bed->want_got_plt)\n    {\n      s = bfd_make_section_with_flags (abfd, \".got.plt\", flags);\n      if (s == NULL\n\t  || !bfd_set_section_alignment (abfd, s, ptralign))\n\treturn FALSE;\n    }\n\n  if (bed->want_got_sym)\n    {\n      /* Define the symbol _GLOBAL_OFFSET_TABLE_ at the start of the .got\n\t (or .got.plt) section.  We don't do this in the linker script\n\t because we don't want to define the symbol if we are not creating\n\t a global offset table.  */\n      h = _bfd_elf_define_linkage_sym (abfd, info, s, \"_GLOBAL_OFFSET_TABLE_\");\n      elf_hash_table (info)->hgot = h;\n      if (h == NULL)\n\treturn FALSE;\n\n      /* Machine-specific: we want the symbol for executables as\n\t well.  */\n      if (! bfd_elf_link_record_dynamic_symbol (info, h))\n\treturn FALSE;\n    }\n\n  /* The first bit of the global offset table is the header.  */\n  s->size += bed->got_header_size;\n\n  /* This is the machine-specific part.  Create and initialize section\n     data for the got.  */\n  if (IS_FDPIC (abfd))\n    {\n      frvfdpic_got_section (info) = s;\n      frvfdpic_relocs_info (info) = htab_try_create (1,\n\t\t\t\t\t\t     frvfdpic_relocs_info_hash,\n\t\t\t\t\t\t     frvfdpic_relocs_info_eq,\n\t\t\t\t\t\t     (htab_del) NULL);\n      if (! frvfdpic_relocs_info (info))\n\treturn FALSE;\n\n      s = bfd_make_section_with_flags (abfd, \".rel.got\",\n\t\t\t\t       (flags | SEC_READONLY));\n      if (s == NULL\n\t  || ! bfd_set_section_alignment (abfd, s, 2))\n\treturn FALSE;\n\n      frvfdpic_gotrel_section (info) = s;\n\n      /* Machine-specific.  */\n      s = bfd_make_section_with_flags (abfd, \".rofixup\",\n\t\t\t\t       (flags | SEC_READONLY));\n      if (s == NULL\n\t  || ! bfd_set_section_alignment (abfd, s, 2))\n\treturn FALSE;\n\n      frvfdpic_gotfixup_section (info) = s;\n      offset = -2048;\n      flags = BSF_GLOBAL;\n    }\n  else\n    {\n      offset = 2048;\n      flags = BSF_GLOBAL | BSF_WEAK;\n    }\n\n  /* Define _gp in .rofixup, for FDPIC, or .got otherwise.  If it\n     turns out that we're linking with a different linker script, the\n     linker script will override it.  */\n  bh = NULL;\n  if (!(_bfd_generic_link_add_one_symbol\n\t(info, abfd, \"_gp\", flags, s, offset, (const char *) NULL, FALSE,\n\t bed->collect, &bh)))\n    return FALSE;\n  h = (struct elf_link_hash_entry *) bh;\n  h->def_regular = 1;\n  h->type = STT_OBJECT;\n  /* h->other = STV_HIDDEN; */ /* Should we?  */\n\n  /* Machine-specific: we want the symbol for executables as well.  */\n  if (IS_FDPIC (abfd) && ! bfd_elf_link_record_dynamic_symbol (info, h))\n    return FALSE;\n\n  if (!IS_FDPIC (abfd))\n    return TRUE;\n\n  /* FDPIC supports Thread Local Storage, and this may require a\n     procedure linkage table for TLS PLT entries.  */\n\n  /* This is mostly copied from\n     elflink.c:_bfd_elf_create_dynamic_sections().  */\n\n  flags = pltflags;\n  pltflags |= SEC_CODE;\n  if (bed->plt_not_loaded)\n    pltflags &= ~ (SEC_CODE | SEC_LOAD | SEC_HAS_CONTENTS);\n  if (bed->plt_readonly)\n    pltflags |= SEC_READONLY;\n\n  s = bfd_make_section_with_flags (abfd, \".plt\", pltflags);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->plt_alignment))\n    return FALSE;\n  /* FRV-specific: remember it.  */\n  frvfdpic_plt_section (info) = s;\n\n  /* Define the symbol _PROCEDURE_LINKAGE_TABLE_ at the start of the\n     .plt section.  */\n  if (bed->want_plt_sym)\n    {\n      h = _bfd_elf_define_linkage_sym (abfd, info, s,\n\t\t\t\t       \"_PROCEDURE_LINKAGE_TABLE_\");\n      elf_hash_table (info)->hplt = h;\n      if (h == NULL)\n\treturn FALSE;\n    }\n\n  /* FRV-specific: we want rel relocations for the plt.  */\n  s = bfd_make_section_with_flags (abfd, \".rel.plt\",\n\t\t\t\t   flags | SEC_READONLY);\n  if (s == NULL\n      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n    return FALSE;\n  /* FRV-specific: remember it.  */\n  frvfdpic_pltrel_section (info) = s;\n\n  return TRUE;\n}\n\n/* Make sure the got and plt sections exist, and that our pointers in\n   the link hash table point to them.  */\n\nstatic bfd_boolean\nelf32_frvfdpic_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)\n{\n  /* This is mostly copied from\n     elflink.c:_bfd_elf_create_dynamic_sections().  */\n  flagword flags;\n  asection *s;\n  const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n\n  flags = (SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS | SEC_IN_MEMORY\n\t   | SEC_LINKER_CREATED);\n\n  /* We need to create .plt, .rel[a].plt, .got, .got.plt, .dynbss, and\n     .rel[a].bss sections.  */\n\n  /* FRV-specific: we want to create the GOT and the PLT in the FRV\n     way.  */\n  if (! _frv_create_got_section (abfd, info))\n    return FALSE;\n\n  /* FRV-specific: make sure we created everything we wanted.  */\n  BFD_ASSERT (frvfdpic_got_section (info) && frvfdpic_gotrel_section (info)\n\t      && frvfdpic_gotfixup_section (info)\n\t      && frvfdpic_plt_section (info)\n\t      && frvfdpic_pltrel_section (info));\n\n  if (bed->want_dynbss)\n    {\n      /* The .dynbss section is a place to put symbols which are defined\n\t by dynamic objects, are referenced by regular objects, and are\n\t not functions.  We must allocate space for them in the process\n\t image and use a R_*_COPY reloc to tell the dynamic linker to\n\t initialize them at run time.  The linker script puts the .dynbss\n\t section into the .bss section of the final image.  */\n      s = bfd_make_section_with_flags (abfd, \".dynbss\",\n\t\t\t\t       SEC_ALLOC | SEC_LINKER_CREATED);\n      if (s == NULL)\n\treturn FALSE;\n\n      /* The .rel[a].bss section holds copy relocs.  This section is not\n     normally needed.  We need to create it here, though, so that the\n     linker will map it to an output section.  We can't just create it\n     only if we need it, because we will not know whether we need it\n     until we have seen all the input files, and the first time the\n     main linker code calls BFD after examining all the input files\n     (size_dynamic_sections) the input sections have already been\n     mapped to the output sections.  If the section turns out not to\n     be needed, we can discard it later.  We will never need this\n     section when generating a shared object, since they do not use\n     copy relocs.  */\n      if (! info->shared)\n\t{\n\t  s = bfd_make_section_with_flags (abfd,\n\t\t\t\t\t   (bed->default_use_rela_p\n\t\t\t\t\t    ? \".rela.bss\" : \".rel.bss\"),\n\t\t\t\t\t   flags | SEC_READONLY);\n\t  if (s == NULL\n\t      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))\n\t    return FALSE;\n\t}\n    }\n\n  return TRUE;\n}\n\n/* Compute the total GOT and PLT size required by each symbol in each\n   range.  Symbols may require up to 4 words in the GOT: an entry\n   pointing to the symbol, an entry pointing to its function\n   descriptor, and a private function descriptors taking two\n   words.  */\n\nstatic void\n_frvfdpic_count_nontls_entries (struct frvfdpic_relocs_info *entry,\n\t\t\t\tstruct _frvfdpic_dynamic_got_info *dinfo)\n{\n  /* Allocate space for a GOT entry pointing to the symbol.  */\n  if (entry->got12)\n    dinfo->got12 += 4;\n  else if (entry->gotlos)\n    dinfo->gotlos += 4;\n  else if (entry->gothilo)\n    dinfo->gothilo += 4;\n  else\n    entry->relocs32--;\n  entry->relocs32++;\n\n  /* Allocate space for a GOT entry pointing to the function\n     descriptor.  */\n  if (entry->fdgot12)\n    dinfo->got12 += 4;\n  else if (entry->fdgotlos)\n    dinfo->gotlos += 4;\n  else if (entry->fdgothilo)\n    dinfo->gothilo += 4;\n  else\n    entry->relocsfd--;\n  entry->relocsfd++;\n\n  /* Decide whether we need a PLT entry, a function descriptor in the\n     GOT, and a lazy PLT entry for this symbol.  */\n  entry->plt = entry->call\n    && entry->symndx == -1 && ! FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h)\n    && elf_hash_table (dinfo->info)->dynamic_sections_created;\n  entry->privfd = entry->plt\n    || entry->fdgoff12 || entry->fdgofflos || entry->fdgoffhilo\n    || ((entry->fd || entry->fdgot12 || entry->fdgotlos || entry->fdgothilo)\n\t&& (entry->symndx != -1\n\t    || FRVFDPIC_FUNCDESC_LOCAL (dinfo->info, entry->d.h)));\n  entry->lazyplt = entry->privfd\n    && entry->symndx == -1 && ! FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h)\n    && ! (dinfo->info->flags & DF_BIND_NOW)\n    && elf_hash_table (dinfo->info)->dynamic_sections_created;\n\n  /* Allocate space for a function descriptor.  */\n  if (entry->fdgoff12)\n    dinfo->fd12 += 8;\n  else if (entry->fdgofflos)\n    dinfo->fdlos += 8;\n  else if (entry->privfd && entry->plt)\n    dinfo->fdplt += 8;\n  else if (entry->privfd)\n    dinfo->fdhilo += 8;\n  else\n    entry->relocsfdv--;\n  entry->relocsfdv++;\n\n  if (entry->lazyplt)\n    dinfo->lzplt += 8;\n}\n\n/* Compute the total GOT size required by each TLS symbol in each\n   range.  Symbols may require up to 5 words in the GOT: an entry\n   holding the TLS offset for the symbol, and an entry with a full TLS\n   descriptor taking 4 words.  */\n\nstatic void\n_frvfdpic_count_tls_entries (struct frvfdpic_relocs_info *entry,\n\t\t\t     struct _frvfdpic_dynamic_got_info *dinfo,\n\t\t\t     bfd_boolean subtract)\n{\n  const int l = subtract ? -1 : 1;\n\n  /* Allocate space for a GOT entry with the TLS offset of the\n     symbol.  */\n  if (entry->tlsoff12)\n    dinfo->got12 += 4 * l;\n  else if (entry->tlsofflos)\n    dinfo->gotlos += 4 * l;\n  else if (entry->tlsoffhilo)\n    dinfo->gothilo += 4 * l;\n  else\n    entry->relocstlsoff -= l;\n  entry->relocstlsoff += l;\n\n  /* If there's any TLSOFF relocation, mark the output file as not\n     suitable for dlopening.  This mark will remain even if we relax\n     all such relocations, but this is not a problem, since we'll only\n     do so for executables, and we definitely don't want anyone\n     dlopening executables.  */\n  if (entry->relocstlsoff)\n    dinfo->info->flags |= DF_STATIC_TLS;\n\n  /* Allocate space for a TLS descriptor.  */\n  if (entry->tlsdesc12)\n    dinfo->tlsd12 += 8 * l;\n  else if (entry->tlsdesclos)\n    dinfo->tlsdlos += 8 * l;\n  else if (entry->tlsplt)\n    dinfo->tlsdplt += 8 * l;\n  else if (entry->tlsdeschilo)\n    dinfo->tlsdhilo += 8 * l;\n  else\n    entry->relocstlsd -= l;\n  entry->relocstlsd += l;\n}\n\n/* Compute the number of dynamic relocations and fixups that a symbol\n   requires, and add (or subtract) from the grand and per-symbol\n   totals.  */\n\nstatic void\n_frvfdpic_count_relocs_fixups (struct frvfdpic_relocs_info *entry,\n\t\t\t       struct _frvfdpic_dynamic_got_info *dinfo,\n\t\t\t       bfd_boolean subtract)\n{\n  bfd_vma relocs = 0, fixups = 0, tlsrets = 0;\n\n  if (!dinfo->info->executable || dinfo->info->pie)\n    {\n      relocs = entry->relocs32 + entry->relocsfd + entry->relocsfdv\n\t+ entry->relocstlsd;\n\n      /* In the executable, TLS relocations to symbols that bind\n\t locally (including those that resolve to global TLS offsets)\n\t are resolved immediately, without any need for fixups or\n\t dynamic relocations.  In shared libraries, however, we must\n\t emit dynamic relocations even for local symbols, because we\n\t don't know the module id the library is going to get at\n\t run-time, nor its TLS base offset.  */\n      if (!dinfo->info->executable\n\t  || (entry->symndx == -1\n\t      && ! FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h)))\n\trelocs += entry->relocstlsoff;\n    }\n  else\n    {\n      if (entry->symndx != -1 || FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h))\n\t{\n\t  if (entry->symndx != -1\n\t      || entry->d.h->root.type != bfd_link_hash_undefweak)\n\t    fixups += entry->relocs32 + 2 * entry->relocsfdv;\n\t  fixups += entry->relocstlsd;\n\t  tlsrets += entry->relocstlsd;\n\t}\n      else\n\t{\n\t  relocs += entry->relocs32 + entry->relocsfdv\n\t    + entry->relocstlsoff + entry->relocstlsd;\n\t}\n\n      if (entry->symndx != -1\n\t  || FRVFDPIC_FUNCDESC_LOCAL (dinfo->info, entry->d.h))\n\t{\n\t  if (entry->symndx != -1\n\t      || entry->d.h->root.type != bfd_link_hash_undefweak)\n\t    fixups += entry->relocsfd;\n\t}\n      else\n\trelocs += entry->relocsfd;\n    }\n\n  if (subtract)\n    {\n      relocs = - relocs;\n      fixups = - fixups;\n      tlsrets = - tlsrets;\n    }\n\n  entry->dynrelocs += relocs;\n  entry->fixups += fixups;\n  dinfo->relocs += relocs;\n  dinfo->fixups += fixups;\n  dinfo->tls_ret_refs += tlsrets;\n}\n\n/* Look for opportunities to relax TLS relocations.  We can assume\n   we're linking the main executable or a static-tls library, since\n   otherwise we wouldn't have got here.  When relaxing, we have to\n   first undo any previous accounting of TLS uses of fixups, dynamic\n   relocations, GOT and PLT entries.  */\n\nstatic void\n_frvfdpic_relax_tls_entries (struct frvfdpic_relocs_info *entry,\n\t\t\t     struct _frvfdpic_dynamic_got_info *dinfo,\n\t\t\t     bfd_boolean relaxing)\n{\n  bfd_boolean changed = ! relaxing;\n\n  BFD_ASSERT (dinfo->info->executable\n\t      || (dinfo->info->flags & DF_STATIC_TLS));\n\n  if (entry->tlsdesc12 || entry->tlsdesclos || entry->tlsdeschilo)\n    {\n      if (! changed)\n\t{\n\t  _frvfdpic_count_relocs_fixups (entry, dinfo, TRUE);\n\t  _frvfdpic_count_tls_entries (entry, dinfo, TRUE);\n\t  changed = TRUE;\n\t}\n\n      /* When linking an executable, we can always decay GOTTLSDESC to\n\t TLSMOFF, if the symbol is local, or GOTTLSOFF, otherwise.\n\t When linking a static-tls shared library, using TLSMOFF is\n\t not an option, but we can still use GOTTLSOFF.  When decaying\n\t to GOTTLSOFF, we must keep the GOT entry in range.  We know\n\t it has to fit because we'll be trading the 4 words of hte TLS\n\t descriptor for a single word in the same range.  */\n      if (! dinfo->info->executable\n\t  || (entry->symndx == -1\n\t      && ! FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h)))\n\t{\n\t  entry->tlsoff12 |= entry->tlsdesc12;\n\t  entry->tlsofflos |= entry->tlsdesclos;\n\t  entry->tlsoffhilo |= entry->tlsdeschilo;\n\t}\n\n      entry->tlsdesc12 = entry->tlsdesclos = entry->tlsdeschilo = 0;\n    }\n\n  /* We can only decay TLSOFFs or call #gettlsoff to TLSMOFF in the\n     main executable.  We have to check whether the symbol's TLSOFF is\n     in range for a setlos.  For symbols with a hash entry, we can\n     determine exactly what to do; for others locals, we don't have\n     addresses handy, so we use the size of the TLS section as an\n     approximation.  If we get it wrong, we'll retain a GOT entry\n     holding the TLS offset (without dynamic relocations or fixups),\n     but we'll still optimize away the loads from it.  Since TLS sizes\n     are generally very small, it's probably not worth attempting to\n     do better than this.  */\n  if ((entry->tlsplt\n       || entry->tlsoff12 || entry->tlsofflos || entry->tlsoffhilo)\n      && dinfo->info->executable && relaxing\n      && ((entry->symndx == -1\n\t   && FRVFDPIC_SYM_LOCAL (dinfo->info, entry->d.h)\n\t   /* The above may hold for an undefweak TLS symbol, so make\n\t      sure we don't have this case before accessing def.value\n\t      and def.section.  */\n\t   && (entry->d.h->root.type == bfd_link_hash_undefweak\n\t       || (bfd_vma)(entry->d.h->root.u.def.value\n\t\t\t    + (entry->d.h->root.u.def.section\n\t\t\t       ->output_section->vma)\n\t\t\t    + entry->d.h->root.u.def.section->output_offset\n\t\t\t    + entry->addend\n\t\t\t    - tls_biased_base (dinfo->info)\n\t\t\t    + 32768) < (bfd_vma)65536))\n\t  || (entry->symndx != -1\n\t      && (elf_hash_table (dinfo->info)->tls_sec->size\n\t\t  + abs (entry->addend) < 32768 + FRVFDPIC_TLS_BIAS))))\n    {\n      if (! changed)\n\t{\n\t  _frvfdpic_count_relocs_fixups (entry, dinfo, TRUE);\n\t  _frvfdpic_count_tls_entries (entry, dinfo, TRUE);\n\t  changed = TRUE;\n\t}\n\n      entry->tlsplt =\n\tentry->tlsoff12 = entry->tlsofflos = entry->tlsoffhilo = 0;\n    }\n\n  /* We can decay `call #gettlsoff' to a ldi #tlsoff if we already\n     have a #gottlsoff12 relocation for this entry, or if we can fit\n     one more in the 12-bit (and 16-bit) ranges.  */\n  if (entry->tlsplt\n      && (entry->tlsoff12\n\t  || (relaxing\n\t      && dinfo->got12 + dinfo->fd12 + dinfo->tlsd12 <= 4096 - 12 - 4\n\t      && (dinfo->got12 + dinfo->fd12 + dinfo->tlsd12\n\t\t  + dinfo->gotlos + dinfo->fdlos + dinfo->tlsdlos\n\t\t  <= 65536 - 12 - 4))))\n    {\n      if (! changed)\n\t{\n\t  _frvfdpic_count_relocs_fixups (entry, dinfo, TRUE);\n\t  _frvfdpic_count_tls_entries (entry, dinfo, TRUE);\n\t  changed = TRUE;\n\t}\n\n      entry->tlsoff12 = 1;\n      entry->tlsplt = 0;\n    }\n\n  if (changed)\n    {\n      _frvfdpic_count_tls_entries (entry, dinfo, FALSE);\n      _frvfdpic_count_relocs_fixups (entry, dinfo, FALSE);\n    }\n\n  return;\n}\n\n/* Compute the total GOT and PLT size required by each symbol in each range. *\n   Symbols may require up to 4 words in the GOT: an entry pointing to\n   the symbol, an entry pointing to its function descriptor, and a\n   private function descriptors taking two words.  */\n\nstatic int\n_frvfdpic_count_got_plt_entries (void **entryp, void *dinfo_)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n  struct _frvfdpic_dynamic_got_info *dinfo = dinfo_;\n\n  _frvfdpic_count_nontls_entries (entry, dinfo);\n\n  if (dinfo->info->executable || (dinfo->info->flags & DF_STATIC_TLS))\n    _frvfdpic_relax_tls_entries (entry, dinfo, FALSE);\n  else\n    {\n      _frvfdpic_count_tls_entries (entry, dinfo, FALSE);\n      _frvfdpic_count_relocs_fixups (entry, dinfo, FALSE);\n    }\n\n  return 1;\n}\n\n/* Determine the positive and negative ranges to be used by each\n   offset range in the GOT.  FDCUR and CUR, that must be aligned to a\n   double-word boundary, are the minimum (negative) and maximum\n   (positive) GOT offsets already used by previous ranges, except for\n   an ODD entry that may have been left behind.  GOT and FD indicate\n   the size of GOT entries and function descriptors that must be\n   placed within the range from -WRAP to WRAP.  If there's room left,\n   up to FDPLT bytes should be reserved for additional function\n   descriptors.  */\n\ninline static bfd_signed_vma\n_frvfdpic_compute_got_alloc_data (struct _frvfdpic_dynamic_got_alloc_data *gad,\n\t\t\t\t  bfd_signed_vma fdcur,\n\t\t\t\t  bfd_signed_vma odd,\n\t\t\t\t  bfd_signed_vma cur,\n\t\t\t\t  bfd_vma got,\n\t\t\t\t  bfd_vma fd,\n\t\t\t\t  bfd_vma fdplt,\n\t\t\t\t  bfd_vma tlsd,\n\t\t\t\t  bfd_vma tlsdplt,\n\t\t\t\t  bfd_vma wrap)\n{\n  bfd_signed_vma wrapmin = -wrap;\n  const bfd_vma tdescsz = 8;\n\n  /* Start at the given initial points.  */\n  gad->fdcur = fdcur;\n  gad->cur = cur;\n\n  /* If we had an incoming odd word and we have any got entries that\n     are going to use it, consume it, otherwise leave gad->odd at\n     zero.  We might force gad->odd to zero and return the incoming\n     odd such that it is used by the next range, but then GOT entries\n     might appear to be out of order and we wouldn't be able to\n     shorten the GOT by one word if it turns out to end with an\n     unpaired GOT entry.  */\n  if (odd && got)\n    {\n      gad->odd = odd;\n      got -= 4;\n      odd = 0;\n    }\n  else\n    gad->odd = 0;\n\n  /* If we're left with an unpaired GOT entry, compute its location\n     such that we can return it.  Otherwise, if got doesn't require an\n     odd number of words here, either odd was already zero in the\n     block above, or it was set to zero because got was non-zero, or\n     got was already zero.  In the latter case, we want the value of\n     odd to carry over to the return statement, so we don't want to\n     reset odd unless the condition below is true.  */\n  if (got & 4)\n    {\n      odd = cur + got;\n      got += 4;\n    }\n\n  /* Compute the tentative boundaries of this range.  */\n  gad->max = cur + got;\n  gad->min = fdcur - fd;\n  gad->fdplt = 0;\n\n  /* If function descriptors took too much space, wrap some of them\n     around.  */\n  if (gad->min < wrapmin)\n    {\n      gad->max += wrapmin - gad->min;\n      gad->tmin = gad->min = wrapmin;\n    }\n\n  /* If GOT entries took too much space, wrap some of them around.\n     This may well cause gad->min to become lower than wrapmin.  This\n     will cause a relocation overflow later on, so we don't have to\n     report it here . */\n  if ((bfd_vma) gad->max > wrap)\n    {\n      gad->min -= gad->max - wrap;\n      gad->max = wrap;\n    }\n\n  /* Add TLS descriptors.  */\n  gad->tmax = gad->max + tlsd;\n  gad->tmin = gad->min;\n  gad->tlsdplt = 0;\n\n  /* If TLS descriptors took too much space, wrap an integral number\n     of them around.  */\n  if ((bfd_vma) gad->tmax > wrap)\n    {\n      bfd_vma wrapsize = gad->tmax - wrap;\n\n      wrapsize += tdescsz / 2;\n      wrapsize &= ~ tdescsz / 2;\n\n      gad->tmin -= wrapsize;\n      gad->tmax -= wrapsize;\n    }\n\n  /* If there is space left and we have function descriptors\n     referenced in PLT entries that could take advantage of shorter\n     offsets, place them now.  */\n  if (fdplt && gad->tmin > wrapmin)\n    {\n      bfd_vma fds;\n\n      if ((bfd_vma) (gad->tmin - wrapmin) < fdplt)\n\tfds = gad->tmin - wrapmin;\n      else\n\tfds = fdplt;\n\n      fdplt -= fds;\n      gad->min -= fds;\n      gad->tmin -= fds;\n      gad->fdplt += fds;\n    }\n\n  /* If there is more space left, try to place some more function\n     descriptors for PLT entries.  */\n  if (fdplt && (bfd_vma) gad->tmax < wrap)\n    {\n      bfd_vma fds;\n\n      if ((bfd_vma) (wrap - gad->tmax) < fdplt)\n\tfds = wrap - gad->tmax;\n      else\n\tfds = fdplt;\n\n      fdplt -= fds;\n      gad->max += fds;\n      gad->tmax += fds;\n      gad->fdplt += fds;\n    }\n\n  /* If there is space left and we have TLS descriptors referenced in\n     PLT entries that could take advantage of shorter offsets, place\n     them now.  */\n  if (tlsdplt && gad->tmin > wrapmin)\n    {\n      bfd_vma tlsds;\n\n      if ((bfd_vma) (gad->tmin - wrapmin) < tlsdplt)\n\ttlsds = (gad->tmin - wrapmin) & ~ (tdescsz / 2);\n      else\n\ttlsds = tlsdplt;\n\n      tlsdplt -= tlsds;\n      gad->tmin -= tlsds;\n      gad->tlsdplt += tlsds;\n    }\n\n  /* If there is more space left, try to place some more TLS\n     descriptors for PLT entries.  Although we could try to fit an\n     additional TLS descriptor with half of it just before before the\n     wrap point and another right past the wrap point, this might\n     cause us to run out of space for the next region, so don't do\n     it.  */\n  if (tlsdplt && (bfd_vma) gad->tmax < wrap - tdescsz / 2)\n    {\n      bfd_vma tlsds;\n\n      if ((bfd_vma) (wrap - gad->tmax) < tlsdplt)\n\ttlsds = (wrap - gad->tmax) & ~ (tdescsz / 2);\n      else\n\ttlsds = tlsdplt;\n\n      tlsdplt -= tlsds;\n      gad->tmax += tlsds;\n      gad->tlsdplt += tlsds;\n    }\n\n  /* If odd was initially computed as an offset past the wrap point,\n     wrap it around.  */\n  if (odd > gad->max)\n    odd = gad->min + odd - gad->max;\n\n  /* _frvfdpic_get_got_entry() below will always wrap gad->cur if needed\n     before returning, so do it here too.  This guarantees that,\n     should cur and fdcur meet at the wrap point, they'll both be\n     equal to min.  */\n  if (gad->cur == gad->max)\n    gad->cur = gad->min;\n\n  /* Ditto for _frvfdpic_get_tlsdesc_entry().  */\n  gad->tcur = gad->max;\n  if (gad->tcur == gad->tmax)\n    gad->tcur = gad->tmin;\n\n  return odd;\n}\n\n/* Compute the location of the next GOT entry, given the allocation\n   data for a range.  */\n\ninline static bfd_signed_vma\n_frvfdpic_get_got_entry (struct _frvfdpic_dynamic_got_alloc_data *gad)\n{\n  bfd_signed_vma ret;\n\n  if (gad->odd)\n    {\n      /* If there was an odd word left behind, use it.  */\n      ret = gad->odd;\n      gad->odd = 0;\n    }\n  else\n    {\n      /* Otherwise, use the word pointed to by cur, reserve the next\n\t as an odd word, and skip to the next pair of words, possibly\n\t wrapping around.  */\n      ret = gad->cur;\n      gad->odd = gad->cur + 4;\n      gad->cur += 8;\n      if (gad->cur == gad->max)\n\tgad->cur = gad->min;\n    }\n\n  return ret;\n}\n\n/* Compute the location of the next function descriptor entry in the\n   GOT, given the allocation data for a range.  */\n\ninline static bfd_signed_vma\n_frvfdpic_get_fd_entry (struct _frvfdpic_dynamic_got_alloc_data *gad)\n{\n  /* If we're at the bottom, wrap around, and only then allocate the\n     next pair of words.  */\n  if (gad->fdcur == gad->min)\n    gad->fdcur = gad->max;\n  return gad->fdcur -= 8;\n}\n\n/* Compute the location of the next TLS descriptor entry in the GOT,\n   given the allocation data for a range.  */\ninline static bfd_signed_vma\n_frvfdpic_get_tlsdesc_entry (struct _frvfdpic_dynamic_got_alloc_data *gad)\n{\n  bfd_signed_vma ret;\n\n  ret = gad->tcur;\n\n  gad->tcur += 8;\n\n  /* If we're at the top of the region, wrap around to the bottom.  */\n  if (gad->tcur == gad->tmax)\n    gad->tcur = gad->tmin;\n\n  return ret;\n}\n\n/* Assign GOT offsets for every GOT entry and function descriptor.\n   Doing everything in a single pass is tricky.  */\n\nstatic int\n_frvfdpic_assign_got_entries (void **entryp, void *info_)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n  struct _frvfdpic_dynamic_got_plt_info *dinfo = info_;\n\n  if (entry->got12)\n    entry->got_entry = _frvfdpic_get_got_entry (&dinfo->got12);\n  else if (entry->gotlos)\n    entry->got_entry = _frvfdpic_get_got_entry (&dinfo->gotlos);\n  else if (entry->gothilo)\n    entry->got_entry = _frvfdpic_get_got_entry (&dinfo->gothilo);\n\n  if (entry->fdgot12)\n    entry->fdgot_entry = _frvfdpic_get_got_entry (&dinfo->got12);\n  else if (entry->fdgotlos)\n    entry->fdgot_entry = _frvfdpic_get_got_entry (&dinfo->gotlos);\n  else if (entry->fdgothilo)\n    entry->fdgot_entry = _frvfdpic_get_got_entry (&dinfo->gothilo);\n\n  if (entry->fdgoff12)\n    entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->got12);\n  else if (entry->plt && dinfo->got12.fdplt)\n    {\n      dinfo->got12.fdplt -= 8;\n      entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->got12);\n    }\n  else if (entry->fdgofflos)\n    entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->gotlos);\n  else if (entry->plt && dinfo->gotlos.fdplt)\n    {\n      dinfo->gotlos.fdplt -= 8;\n      entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->gotlos);\n    }\n  else if (entry->plt)\n    {\n      dinfo->gothilo.fdplt -= 8;\n      entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->gothilo);\n    }\n  else if (entry->privfd)\n    entry->fd_entry = _frvfdpic_get_fd_entry (&dinfo->gothilo);\n\n  if (entry->tlsoff12)\n    entry->tlsoff_entry = _frvfdpic_get_got_entry (&dinfo->got12);\n  else if (entry->tlsofflos)\n    entry->tlsoff_entry = _frvfdpic_get_got_entry (&dinfo->gotlos);\n  else if (entry->tlsoffhilo)\n    entry->tlsoff_entry = _frvfdpic_get_got_entry (&dinfo->gothilo);\n\n  if (entry->tlsdesc12)\n    entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->got12);\n  else if (entry->tlsplt && dinfo->got12.tlsdplt)\n    {\n      dinfo->got12.tlsdplt -= 8;\n      entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->got12);\n    }\n  else if (entry->tlsdesclos)\n    entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->gotlos);\n  else if (entry->tlsplt && dinfo->gotlos.tlsdplt)\n    {\n      dinfo->gotlos.tlsdplt -= 8;\n      entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->gotlos);\n    }\n  else if (entry->tlsplt)\n    {\n      dinfo->gothilo.tlsdplt -= 8;\n      entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->gothilo);\n    }\n  else if (entry->tlsdeschilo)\n    entry->tlsdesc_entry = _frvfdpic_get_tlsdesc_entry (&dinfo->gothilo);\n\n  return 1;\n}\n\n/* Assign GOT offsets to private function descriptors used by PLT\n   entries (or referenced by 32-bit offsets), as well as PLT entries\n   and lazy PLT entries.  */\n\nstatic int\n_frvfdpic_assign_plt_entries (void **entryp, void *info_)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n  struct _frvfdpic_dynamic_got_plt_info *dinfo = info_;\n\n  if (entry->privfd)\n    BFD_ASSERT (entry->fd_entry);\n\n  if (entry->plt)\n    {\n      int size;\n\n      /* We use the section's raw size to mark the location of the\n\t next PLT entry.  */\n      entry->plt_entry = frvfdpic_plt_section (dinfo->g.info)->size;\n\n      /* Figure out the length of this PLT entry based on the\n\t addressing mode we need to reach the function descriptor.  */\n      BFD_ASSERT (entry->fd_entry);\n      if (entry->fd_entry >= -(1 << (12 - 1))\n\t  && entry->fd_entry < (1 << (12 - 1)))\n\tsize = 8;\n      else if (entry->fd_entry >= -(1 << (16 - 1))\n\t       && entry->fd_entry < (1 << (16 - 1)))\n\tsize = 12;\n      else\n\tsize = 16;\n\n      frvfdpic_plt_section (dinfo->g.info)->size += size;\n    }\n\n  if (entry->lazyplt)\n    {\n      entry->lzplt_entry = dinfo->g.lzplt;\n      dinfo->g.lzplt += 8;\n      /* If this entry is the one that gets the resolver stub, account\n\t for the additional instruction.  */\n      if (entry->lzplt_entry % FRVFDPIC_LZPLT_BLOCK_SIZE\n\t  == FRVFDPIC_LZPLT_RESOLV_LOC)\n\tdinfo->g.lzplt += 4;\n    }\n\n  if (entry->tlsplt)\n    {\n      int size;\n\n      entry->tlsplt_entry\n\t= frvfdpic_plt_section (dinfo->g.info)->size;\n\n      if (dinfo->g.info->executable\n\t  && (entry->symndx != -1\n\t      || FRVFDPIC_SYM_LOCAL (dinfo->g.info, entry->d.h)))\n\t{\n\t  if ((bfd_signed_vma)entry->addend >= -(1 << (16 - 1))\n\t      /* FIXME: here we use the size of the TLS section\n\t\t as an upper bound for the value of the TLS\n\t\t symbol, because we may not know the exact value\n\t\t yet.  If we get it wrong, we'll just waste a\n\t\t word in the PLT, and we should never get even\n\t\t close to 32 KiB of TLS anyway.  */\n\t      && elf_hash_table (dinfo->g.info)->tls_sec\n\t      && (elf_hash_table (dinfo->g.info)->tls_sec->size\n\t\t  + (bfd_signed_vma)(entry->addend) <= (1 << (16 - 1))))\n\t    size = 8;\n\t  else\n\t    size = 12;\n\t}\n      else if (entry->tlsoff_entry)\n\t{\n\t  if (entry->tlsoff_entry >= -(1 << (12 - 1))\n\t      && entry->tlsoff_entry < (1 << (12 - 1)))\n\t    size = 8;\n\t  else if (entry->tlsoff_entry >= -(1 << (16 - 1))\n\t\t   && entry->tlsoff_entry < (1 << (16 - 1)))\n\t    size = 12;\n\t  else\n\t    size = 16;\n\t}\n      else\n\t{\n\t  BFD_ASSERT (entry->tlsdesc_entry);\n\n\t  if (entry->tlsdesc_entry >= -(1 << (12 - 1))\n\t      && entry->tlsdesc_entry < (1 << (12 - 1)))\n\t    size = 8;\n\t  else if (entry->tlsdesc_entry >= -(1 << (16 - 1))\n\t\t   && entry->tlsdesc_entry < (1 << (16 - 1)))\n\t    size = 12;\n\t  else\n\t    size = 16;\n\t}\n\n      frvfdpic_plt_section (dinfo->g.info)->size += size;\n    }\n\n  return 1;\n}\n\n/* Cancel out any effects of calling _frvfdpic_assign_got_entries and\n   _frvfdpic_assign_plt_entries.  */\n\nstatic int\n_frvfdpic_reset_got_plt_entries (void **entryp, void *ignore ATTRIBUTE_UNUSED)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n\n  entry->got_entry = 0;\n  entry->fdgot_entry = 0;\n  entry->fd_entry = 0;\n  entry->plt_entry = (bfd_vma)-1;\n  entry->lzplt_entry = (bfd_vma)-1;\n  entry->tlsoff_entry = 0;\n  entry->tlsdesc_entry = 0;\n  entry->tlsplt_entry = (bfd_vma)-1;\n\n  return 1;\n}\n\n/* Follow indirect and warning hash entries so that each got entry\n   points to the final symbol definition.  P must point to a pointer\n   to the hash table we're traversing.  Since this traversal may\n   modify the hash table, we set this pointer to NULL to indicate\n   we've made a potentially-destructive change to the hash table, so\n   the traversal must be restarted.  */\nstatic int\n_frvfdpic_resolve_final_relocs_info (void **entryp, void *p)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n  htab_t *htab = p;\n\n  if (entry->symndx == -1)\n    {\n      struct elf_link_hash_entry *h = entry->d.h;\n      struct frvfdpic_relocs_info *oentry;\n\n      while (h->root.type == bfd_link_hash_indirect\n\t     || h->root.type == bfd_link_hash_warning)\n\th = (struct elf_link_hash_entry *)h->root.u.i.link;\n\n      if (entry->d.h == h)\n\treturn 1;\n\n      oentry = frvfdpic_relocs_info_for_global (*htab, 0, h, entry->addend,\n\t\t\t\t\t\tNO_INSERT);\n\n      if (oentry)\n\t{\n\t  /* Merge the two entries.  */\n\t  frvfdpic_pic_merge_early_relocs_info (oentry, entry);\n\t  htab_clear_slot (*htab, entryp);\n\t  return 1;\n\t}\n\n      entry->d.h = h;\n\n      /* If we can't find this entry with the new bfd hash, re-insert\n\t it, and get the traversal restarted.  */\n      if (! htab_find (*htab, entry))\n\t{\n\t  htab_clear_slot (*htab, entryp);\n\t  entryp = htab_find_slot (*htab, entry, INSERT);\n\t  if (! *entryp)\n\t    *entryp = entry;\n\t  /* Abort the traversal, since the whole table may have\n\t     moved, and leave it up to the parent to restart the\n\t     process.  */\n\t  *(htab_t *)p = NULL;\n\t  return 0;\n\t}\n    }\n\n  return 1;\n}\n\n/* Compute the total size of the GOT, the PLT, the dynamic relocations\n   section and the rofixup section.  Assign locations for GOT and PLT\n   entries.  */\n\nstatic bfd_boolean\n_frvfdpic_size_got_plt (bfd *output_bfd,\n\t\t\tstruct _frvfdpic_dynamic_got_plt_info *gpinfop)\n{\n  bfd_signed_vma odd;\n  bfd_vma limit, tlslimit;\n  struct bfd_link_info *info = gpinfop->g.info;\n  bfd *dynobj = elf_hash_table (info)->dynobj;\n\n  memcpy (frvfdpic_dynamic_got_plt_info (info), &gpinfop->g,\n\t  sizeof (gpinfop->g));\n\n  odd = 12;\n  /* Compute the total size taken by entries in the 12-bit and 16-bit\n     ranges, to tell how many PLT function descriptors we can bring\n     into the 12-bit range without causing the 16-bit range to\n     overflow.  */\n  limit = odd + gpinfop->g.got12 + gpinfop->g.gotlos\n    + gpinfop->g.fd12 + gpinfop->g.fdlos\n    + gpinfop->g.tlsd12 + gpinfop->g.tlsdlos;\n  if (limit < (bfd_vma)1 << 16)\n    limit = ((bfd_vma)1 << 16) - limit;\n  else\n    limit = 0;\n  if (gpinfop->g.fdplt < limit)\n    {\n      tlslimit = (limit - gpinfop->g.fdplt) & ~ (bfd_vma) 8;\n      limit = gpinfop->g.fdplt;\n    }\n  else\n    tlslimit = 0;\n  if (gpinfop->g.tlsdplt < tlslimit)\n    tlslimit = gpinfop->g.tlsdplt;\n\n  /* Determine the ranges of GOT offsets that we can use for each\n     range of addressing modes.  */\n  odd = _frvfdpic_compute_got_alloc_data (&gpinfop->got12,\n\t\t\t\t\t  0,\n\t\t\t\t\t  odd,\n\t\t\t\t\t  16,\n\t\t\t\t\t  gpinfop->g.got12,\n\t\t\t\t\t  gpinfop->g.fd12,\n\t\t\t\t\t  limit,\n\t\t\t\t\t  gpinfop->g.tlsd12,\n\t\t\t\t\t  tlslimit,\n\t\t\t\t\t  (bfd_vma)1 << (12-1));\n  odd = _frvfdpic_compute_got_alloc_data (&gpinfop->gotlos,\n\t\t\t\t\t  gpinfop->got12.tmin,\n\t\t\t\t\t  odd,\n\t\t\t\t\t  gpinfop->got12.tmax,\n\t\t\t\t\t  gpinfop->g.gotlos,\n\t\t\t\t\t  gpinfop->g.fdlos,\n\t\t\t\t\t  gpinfop->g.fdplt\n\t\t\t\t\t  - gpinfop->got12.fdplt,\n\t\t\t\t\t  gpinfop->g.tlsdlos,\n\t\t\t\t\t  gpinfop->g.tlsdplt\n\t\t\t\t\t  - gpinfop->got12.tlsdplt,\n\t\t\t\t\t  (bfd_vma)1 << (16-1));\n  odd = _frvfdpic_compute_got_alloc_data (&gpinfop->gothilo,\n\t\t\t\t\t  gpinfop->gotlos.tmin,\n\t\t\t\t\t  odd,\n\t\t\t\t\t  gpinfop->gotlos.tmax,\n\t\t\t\t\t  gpinfop->g.gothilo,\n\t\t\t\t\t  gpinfop->g.fdhilo,\n\t\t\t\t\t  gpinfop->g.fdplt\n\t\t\t\t\t  - gpinfop->got12.fdplt\n\t\t\t\t\t  - gpinfop->gotlos.fdplt,\n\t\t\t\t\t  gpinfop->g.tlsdhilo,\n\t\t\t\t\t  gpinfop->g.tlsdplt\n\t\t\t\t\t  - gpinfop->got12.tlsdplt\n\t\t\t\t\t  - gpinfop->gotlos.tlsdplt,\n\t\t\t\t\t  (bfd_vma)1 << (32-1));\n\n  /* Now assign (most) GOT offsets.  */\n  htab_traverse (frvfdpic_relocs_info (info), _frvfdpic_assign_got_entries,\n\t\t gpinfop);\n\n  frvfdpic_got_section (info)->size = gpinfop->gothilo.tmax\n    - gpinfop->gothilo.tmin\n    /* If an odd word is the last word of the GOT, we don't need this\n       word to be part of the GOT.  */\n    - (odd + 4 == gpinfop->gothilo.tmax ? 4 : 0);\n  if (frvfdpic_got_section (info)->size == 0)\n    frvfdpic_got_section (info)->flags |= SEC_EXCLUDE;\n  else if (frvfdpic_got_section (info)->size == 12\n\t   && ! elf_hash_table (info)->dynamic_sections_created)\n    {\n      frvfdpic_got_section (info)->flags |= SEC_EXCLUDE;\n      frvfdpic_got_section (info)->size = 0;\n    }\n  /* This will be non-NULL during relaxation.  The assumption is that\n     the size of one of these sections will never grow, only shrink,\n     so we can use the larger buffer we allocated before.  */\n  else if (frvfdpic_got_section (info)->contents == NULL)\n    {\n      frvfdpic_got_section (info)->contents =\n\t(bfd_byte *) bfd_zalloc (dynobj,\n\t\t\t\t frvfdpic_got_section (info)->size);\n      if (frvfdpic_got_section (info)->contents == NULL)\n\treturn FALSE;\n    }\n\n  if (frvfdpic_gotrel_section (info))\n    /* Subtract the number of lzplt entries, since those will generate\n       relocations in the pltrel section.  */\n    frvfdpic_gotrel_section (info)->size =\n      (gpinfop->g.relocs - gpinfop->g.lzplt / 8)\n      * get_elf_backend_data (output_bfd)->s->sizeof_rel;\n  else\n    BFD_ASSERT (gpinfop->g.relocs == 0);\n  if (frvfdpic_gotrel_section (info)->size == 0)\n    frvfdpic_gotrel_section (info)->flags |= SEC_EXCLUDE;\n  else if (frvfdpic_gotrel_section (info)->contents == NULL)\n    {\n      frvfdpic_gotrel_section (info)->contents =\n\t(bfd_byte *) bfd_zalloc (dynobj,\n\t\t\t\t frvfdpic_gotrel_section (info)->size);\n      if (frvfdpic_gotrel_section (info)->contents == NULL)\n\treturn FALSE;\n    }\n\n  frvfdpic_gotfixup_section (info)->size = (gpinfop->g.fixups + 1) * 4;\n  if (frvfdpic_gotfixup_section (info)->size == 0)\n    frvfdpic_gotfixup_section (info)->flags |= SEC_EXCLUDE;\n  else if (frvfdpic_gotfixup_section (info)->contents == NULL)\n    {\n      frvfdpic_gotfixup_section (info)->contents =\n\t(bfd_byte *) bfd_zalloc (dynobj,\n\t\t\t\t frvfdpic_gotfixup_section (info)->size);\n      if (frvfdpic_gotfixup_section (info)->contents == NULL)\n\treturn FALSE;\n    }\n\n  if (frvfdpic_pltrel_section (info))\n    {\n      frvfdpic_pltrel_section (info)->size =\n\tgpinfop->g.lzplt / 8\n\t* get_elf_backend_data (output_bfd)->s->sizeof_rel;\n      if (frvfdpic_pltrel_section (info)->size == 0)\n\tfrvfdpic_pltrel_section (info)->flags |= SEC_EXCLUDE;\n      else if (frvfdpic_pltrel_section (info)->contents == NULL)\n\t{\n\t  frvfdpic_pltrel_section (info)->contents =\n\t    (bfd_byte *) bfd_zalloc (dynobj,\n\t\t\t\t     frvfdpic_pltrel_section (info)->size);\n\t  if (frvfdpic_pltrel_section (info)->contents == NULL)\n\t    return FALSE;\n\t}\n    }\n\n  /* Add 4 bytes for every block of at most 65535 lazy PLT entries,\n     such that there's room for the additional instruction needed to\n     call the resolver.  Since _frvfdpic_assign_got_entries didn't\n     account for them, our block size is 4 bytes smaller than the real\n     block size.  */\n  if (frvfdpic_plt_section (info))\n    {\n      frvfdpic_plt_section (info)->size = gpinfop->g.lzplt\n\t+ ((gpinfop->g.lzplt + (FRVFDPIC_LZPLT_BLOCK_SIZE - 4) - 8)\n\t   / (FRVFDPIC_LZPLT_BLOCK_SIZE - 4) * 4);\n    }\n\n  /* Reset it, such that _frvfdpic_assign_plt_entries() can use it to\n     actually assign lazy PLT entries addresses.  */\n  gpinfop->g.lzplt = 0;\n\n  /* Save information that we're going to need to generate GOT and PLT\n     entries.  */\n  frvfdpic_got_initial_offset (info) = -gpinfop->gothilo.tmin;\n\n  if (get_elf_backend_data (output_bfd)->want_got_sym)\n    elf_hash_table (info)->hgot->root.u.def.value\n      = frvfdpic_got_initial_offset (info);\n\n  if (frvfdpic_plt_section (info))\n    frvfdpic_plt_initial_offset (info) =\n      frvfdpic_plt_section (info)->size;\n\n  /* Allocate a ret statement at plt_initial_offset, to be used by\n     locally-resolved TLS descriptors.  */\n  if (gpinfop->g.tls_ret_refs)\n    frvfdpic_plt_section (info)->size += 4;\n\n  htab_traverse (frvfdpic_relocs_info (info), _frvfdpic_assign_plt_entries,\n\t\t gpinfop);\n\n  /* Allocate the PLT section contents only after\n     _frvfdpic_assign_plt_entries has a chance to add the size of the\n     non-lazy PLT entries.  */\n  if (frvfdpic_plt_section (info))\n    {\n      if (frvfdpic_plt_section (info)->size == 0)\n\tfrvfdpic_plt_section (info)->flags |= SEC_EXCLUDE;\n      else if (frvfdpic_plt_section (info)->contents == NULL)\n\t{\n\t  frvfdpic_plt_section (info)->contents =\n\t    (bfd_byte *) bfd_zalloc (dynobj,\n\t\t\t\t     frvfdpic_plt_section (info)->size);\n\t  if (frvfdpic_plt_section (info)->contents == NULL)\n\t    return FALSE;\n\t}\n    }\n\n  return TRUE;\n}\n\n/* Set the sizes of the dynamic sections.  */\n\nstatic bfd_boolean\nelf32_frvfdpic_size_dynamic_sections (bfd *output_bfd,\n\t\t\t\t      struct bfd_link_info *info)\n{\n  bfd *dynobj;\n  asection *s;\n  struct _frvfdpic_dynamic_got_plt_info gpinfo;\n\n  dynobj = elf_hash_table (info)->dynobj;\n  BFD_ASSERT (dynobj != NULL);\n\n  if (elf_hash_table (info)->dynamic_sections_created)\n    {\n      /* Set the contents of the .interp section to the interpreter.  */\n      if (info->executable)\n\t{\n\t  s = bfd_get_section_by_name (dynobj, \".interp\");\n\t  BFD_ASSERT (s != NULL);\n\t  s->size = sizeof ELF_DYNAMIC_INTERPRETER;\n\t  s->contents = (bfd_byte *) ELF_DYNAMIC_INTERPRETER;\n\t}\n    }\n\n  memset (&gpinfo, 0, sizeof (gpinfo));\n  gpinfo.g.info = info;\n\n  for (;;)\n    {\n      htab_t relocs = frvfdpic_relocs_info (info);\n\n      htab_traverse (relocs, _frvfdpic_resolve_final_relocs_info, &relocs);\n\n      if (relocs == frvfdpic_relocs_info (info))\n\tbreak;\n    }\n\n  htab_traverse (frvfdpic_relocs_info (info), _frvfdpic_count_got_plt_entries,\n\t\t &gpinfo.g);\n\n  /* Allocate space to save the summary information, we're going to\n     use it if we're doing relaxations.  */\n  frvfdpic_dynamic_got_plt_info (info) = bfd_alloc (dynobj, sizeof (gpinfo.g));\n\n  if (!_frvfdpic_size_got_plt (output_bfd, &gpinfo))\n    return FALSE;\n\n  if (elf_hash_table (info)->dynamic_sections_created)\n    {\n      if (frvfdpic_got_section (info)->size)\n\tif (!_bfd_elf_add_dynamic_entry (info, DT_PLTGOT, 0))\n\t  return FALSE;\n\n      if (frvfdpic_pltrel_section (info)->size)\n\tif (!_bfd_elf_add_dynamic_entry (info, DT_PLTRELSZ, 0)\n\t    || !_bfd_elf_add_dynamic_entry (info, DT_PLTREL, DT_REL)\n\t    || !_bfd_elf_add_dynamic_entry (info, DT_JMPREL, 0))\n\t  return FALSE;\n\n      if (frvfdpic_gotrel_section (info)->size)\n\tif (!_bfd_elf_add_dynamic_entry (info, DT_REL, 0)\n\t    || !_bfd_elf_add_dynamic_entry (info, DT_RELSZ, 0)\n\t    || !_bfd_elf_add_dynamic_entry (info, DT_RELENT,\n\t\t\t\t\t    sizeof (Elf32_External_Rel)))\n\t  return FALSE;\n    }\n\n  return TRUE;\n}\n\nstatic bfd_boolean\nelf32_frvfdpic_always_size_sections (bfd *output_bfd,\n\t\t\t\t     struct bfd_link_info *info)\n{\n  if (!info->relocatable)\n    {\n      struct elf_link_hash_entry *h;\n\n      /* Force a PT_GNU_STACK segment to be created.  */\n      if (! elf_tdata (output_bfd)->stack_flags)\n\telf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;\n\n      /* Define __stacksize if it's not defined yet.  */\n      h = elf_link_hash_lookup (elf_hash_table (info), \"__stacksize\",\n\t\t\t\tFALSE, FALSE, FALSE);\n      if (! h || h->root.type != bfd_link_hash_defined\n\t  || h->type != STT_OBJECT\n\t  || !h->def_regular)\n\t{\n\t  struct bfd_link_hash_entry *bh = NULL;\n\n\t  if (!(_bfd_generic_link_add_one_symbol\n\t\t(info, output_bfd, \"__stacksize\",\n\t\t BSF_GLOBAL, bfd_abs_section_ptr, DEFAULT_STACK_SIZE,\n\t\t (const char *) NULL, FALSE,\n\t\t get_elf_backend_data (output_bfd)->collect, &bh)))\n\t    return FALSE;\n\n\t  h = (struct elf_link_hash_entry *) bh;\n\t  h->def_regular = 1;\n\t  h->type = STT_OBJECT;\n\t  /* This one must NOT be hidden.  */\n\t}\n    }\n\n  return TRUE;\n}\n\n/* Check whether any of the relocations was optimized away, and\n   subtract it from the relocation or fixup count.  */\nstatic bfd_boolean\n_frvfdpic_check_discarded_relocs (bfd *abfd, asection *sec,\n\t\t\t\t  struct bfd_link_info *info,\n\t\t\t\t  \n\t\t\t\t  bfd_boolean *changed)\n{\n  Elf_Internal_Shdr *symtab_hdr;\n  struct elf_link_hash_entry **sym_hashes;\n  Elf_Internal_Rela *rel, *erel;\n\n  if ((sec->flags & SEC_RELOC) == 0\n      || sec->reloc_count == 0)\n    return TRUE;\n\n  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n  sym_hashes = elf_sym_hashes (abfd);\n\n  rel = elf_section_data (sec)->relocs;\n\n  /* Now examine each relocation.  */\n  for (erel = rel + sec->reloc_count; rel < erel; rel++)\n    {\n      struct elf_link_hash_entry *h;\n      unsigned long r_symndx;\n      struct frvfdpic_relocs_info *picrel;\n      struct _frvfdpic_dynamic_got_info *dinfo;\n\n      if (ELF32_R_TYPE (rel->r_info) != R_FRV_32\n\t  && ELF32_R_TYPE (rel->r_info) != R_FRV_FUNCDESC)\n\tcontinue;\n\n      if (_bfd_elf_section_offset (sec->output_section->owner,\n\t\t\t\t   info, sec, rel->r_offset)\n\t  != (bfd_vma)-1)\n\tcontinue;\n\n      r_symndx = ELF32_R_SYM (rel->r_info);\n      if (r_symndx < symtab_hdr->sh_info)\n\th = NULL;\n      else\n\t{\n\t  h = sym_hashes[r_symndx - symtab_hdr->sh_info];\n\t  while (h->root.type == bfd_link_hash_indirect\n\t\t || h->root.type == bfd_link_hash_warning)\n\t    h = (struct elf_link_hash_entry *)h->root.u.i.link;\n\t}\n\n      if (h != NULL)\n\tpicrel = frvfdpic_relocs_info_for_global (frvfdpic_relocs_info (info),\n\t\t\t\t\t\t  abfd, h,\n\t\t\t\t\t\t  rel->r_addend, NO_INSERT);\n      else\n\tpicrel = frvfdpic_relocs_info_for_local (frvfdpic_relocs_info (info),\n\t\t\t\t\t\t abfd, r_symndx,\n\t\t\t\t\t\t rel->r_addend, NO_INSERT);\n\n      if (! picrel)\n\treturn FALSE;\n\n      *changed = TRUE;\n      dinfo = frvfdpic_dynamic_got_plt_info (info);\n\n      _frvfdpic_count_relocs_fixups (picrel, dinfo, TRUE);\n      if (ELF32_R_TYPE (rel->r_info) == R_FRV_32)\n\tpicrel->relocs32--;\n      else /* we know (ELF32_R_TYPE (rel->r_info) == R_FRV_FUNCDESC) */\n\tpicrel->relocsfd--;\n      _frvfdpic_count_relocs_fixups (picrel, dinfo, FALSE);\n    }\n\n  return TRUE;\n}\n\nstatic bfd_boolean\nfrvfdpic_elf_discard_info (bfd *ibfd,\n\t\t\t   struct elf_reloc_cookie *cookie ATTRIBUTE_UNUSED,\n\t\t\t   struct bfd_link_info *info)\n{\n  bfd_boolean changed = FALSE;\n  asection *s;\n  bfd *obfd = NULL;\n\n  /* Account for relaxation of .eh_frame section.  */\n  for (s = ibfd->sections; s; s = s->next)\n    if (s->sec_info_type == ELF_INFO_TYPE_EH_FRAME)\n      {\n\tif (!_frvfdpic_check_discarded_relocs (ibfd, s, info, &changed))\n\t  return FALSE;\n\tobfd = s->output_section->owner;\n      }\n\n  if (changed)\n    {\n      struct _frvfdpic_dynamic_got_plt_info gpinfo;\n\n      memset (&gpinfo, 0, sizeof (gpinfo));\n      memcpy (&gpinfo.g, frvfdpic_dynamic_got_plt_info (info),\n\t      sizeof (gpinfo.g));\n\n      /* Clear GOT and PLT assignments.  */\n      htab_traverse (frvfdpic_relocs_info (info),\n\t\t     _frvfdpic_reset_got_plt_entries,\n\t\t     NULL);\n\n      if (!_frvfdpic_size_got_plt (obfd, &gpinfo))\n\treturn FALSE;\n    }\n\n  return TRUE;\n}\n\n/* Look for opportunities to relax TLS relocations.  We can assume\n   we're linking the main executable or a static-tls library, since\n   otherwise we wouldn't have got here.  */\n\nstatic int\n_frvfdpic_relax_got_plt_entries (void **entryp, void *dinfo_)\n{\n  struct frvfdpic_relocs_info *entry = *entryp;\n  struct _frvfdpic_dynamic_got_info *dinfo = dinfo_;\n\n  _frvfdpic_relax_tls_entries (entry, dinfo, TRUE);\n\n  return 1;\n}\n\nstatic bfd_boolean\nelf32_frvfdpic_relax_section (bfd *abfd ATTRIBUTE_UNUSED, asection *sec,\n\t\t\t      struct bfd_link_info *info, bfd_boolean *again)\n{\n  struct _frvfdpic_dynamic_got_plt_info gpinfo;\n\n  if (info->relocatable)\n    (*info->callbacks->einfo)\n      (_(\"%P%F: --relax and -r may not be used together\\n\"));\n\n  /* If we return early, we didn't change anything.  */\n  *again = FALSE;\n\n  /* We'll do our thing when requested to relax the GOT section.  */\n  if (sec != frvfdpic_got_section (info))\n    return TRUE;\n\n  /* We can only relax when linking the main executable or a library\n     that can't be dlopened.  */\n  if (! info->executable && ! (info->flags & DF_STATIC_TLS))\n    return TRUE;\n\n  /* If there isn't a TLS section for this binary, we can't do\n     anything about its TLS relocations (it probably doesn't have\n     any.  */\n  if (elf_hash_table (info)->tls_sec == NULL)\n    return TRUE;\n\n  memset (&gpinfo, 0, sizeof (gpinfo));\n  memcpy (&gpinfo.g, frvfdpic_dynamic_got_plt_info (info), sizeof (gpinfo.g));\n\n  /* Now look for opportunities to relax, adjusting the GOT usage\n     as needed.  */\n  htab_traverse (frvfdpic_relocs_info (info),\n\t\t _frvfdpic_relax_got_plt_entries,\n\t\t &gpinfo.g);\n\n  /* If we changed anything, reset and re-assign GOT and PLT entries.  */\n  if (memcmp (frvfdpic_dynamic_got_plt_info (info),\n\t      &gpinfo.g, sizeof (gpinfo.g)) != 0)\n    {\n      /* Clear GOT and PLT assignments.  */\n      htab_traverse (frvfdpic_relocs_info (info),\n\t\t     _frvfdpic_reset_got_plt_entries,\n\t\t     NULL);\n\n      /* The owner of the TLS section is the output bfd.  There should\n\t be a better way to get to it.  */\n      if (!_frvfdpic_size_got_plt (elf_hash_table (info)->tls_sec->owner,\n\t\t\t\t   &gpinfo))\n\treturn FALSE;\n\n      /* Repeat until we don't make any further changes.  We could fail to\n\t introduce changes in a round if, for example, the 12-bit range is\n\t full, but we later release some space by getting rid of TLS\n\t descriptors in it.  We have to repeat the whole process because\n\t we might have changed the size of a section processed before this\n\t one.  */\n      *again = TRUE;\n    }\n\n  return TRUE;\n}\n\nstatic bfd_boolean\nelf32_frvfdpic_modify_program_headers (bfd *output_bfd,\n\t\t\t\t       struct bfd_link_info *info)\n{\n  struct elf_obj_tdata *tdata = elf_tdata (output_bfd);\n  struct elf_segment_map *m;\n  Elf_Internal_Phdr *p;\n\n  /* objcopy and strip preserve what's already there using\n     elf32_frvfdpic_copy_private_bfd_data ().  */\n  if (! info)\n    return TRUE;\n\n  for (p = tdata->phdr, m = tdata->segment_map; m != NULL; m = m->next, p++)\n    if (m->p_type == PT_GNU_STACK)\n      break;\n\n  if (m)\n    {\n      struct elf_link_hash_entry *h;\n\n      /* Obtain the pointer to the __stacksize symbol.  */\n      h = elf_link_hash_lookup (elf_hash_table (info), \"__stacksize\",\n\t\t\t\tFALSE, FALSE, FALSE);\n      if (h)\n\t{\n\t  while (h->root.type == bfd_link_hash_indirect\n\t\t || h->root.type == bfd_link_hash_warning)\n\t    h = (struct elf_link_hash_entry *) h->root.u.i.link;\n\t  BFD_ASSERT (h->root.type == bfd_link_hash_defined);\n\t}\n\n      /* Set the header p_memsz from the symbol value.  We\n\t intentionally ignore the symbol section.  */\n      if (h && h->root.type == bfd_link_hash_defined)\n\tp->p_memsz = h->root.u.def.value;\n      else\n\tp->p_memsz = DEFAULT_STACK_SIZE;\n\n      p->p_align = 8;\n    }\n\n  return TRUE;\n}\n\n/* Fill in code and data in dynamic sections.  */\n\nstatic bfd_boolean\nelf32_frv_finish_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n\t\t\t\t   struct bfd_link_info *info ATTRIBUTE_UNUSED)\n{\n  /* Nothing to be done for non-FDPIC.  */\n  return TRUE;\n}\n\nstatic bfd_boolean\nelf32_frvfdpic_finish_dynamic_sections (bfd *output_bfd,\n\t\t\t\t\tstruct bfd_link_info *info)\n{\n  bfd *dynobj;\n  asection *sdyn;\n\n  dynobj = elf_hash_table (info)->dynobj;\n\n  if (frvfdpic_dynamic_got_plt_info (info))\n    {\n      BFD_ASSERT (frvfdpic_dynamic_got_plt_info (info)->tls_ret_refs == 0);\n    }\n  if (frvfdpic_got_section (info))\n    {\n      BFD_ASSERT (frvfdpic_gotrel_section (info)->size\n\t\t  == (frvfdpic_gotrel_section (info)->reloc_count\n\t\t      * sizeof (Elf32_External_Rel)));\n\n      if (frvfdpic_gotfixup_section (info))\n\t{\n\t  struct elf_link_hash_entry *hgot = elf_hash_table (info)->hgot;\n\t  bfd_vma got_value = hgot->root.u.def.value\n\t    + hgot->root.u.def.section->output_section->vma\n\t    + hgot->root.u.def.section->output_offset;\n\t  struct bfd_link_hash_entry *hend;\n\n\t  _frvfdpic_add_rofixup (output_bfd, frvfdpic_gotfixup_section (info),\n\t\t\t\t got_value, 0);\n\n\t  if (frvfdpic_gotfixup_section (info)->size\n\t      != (frvfdpic_gotfixup_section (info)->reloc_count * 4))\n\t    {\n\t    error:\n\t      (*_bfd_error_handler)\n\t\t(\"LINKER BUG: .rofixup section size mismatch\");\n\t      return FALSE;\n\t    }\n\n\t  hend = bfd_link_hash_lookup (info->hash, \"__ROFIXUP_END__\",\n\t\t\t\t       FALSE, FALSE, TRUE);\n\t  if (hend\n\t      && (hend->type == bfd_link_hash_defined\n\t\t  || hend->type == bfd_link_hash_defweak))\n\t    {\n\t      bfd_vma value =\n\t\tfrvfdpic_gotfixup_section (info)->output_section->vma\n\t\t+ frvfdpic_gotfixup_section (info)->output_offset\n\t\t+ frvfdpic_gotfixup_section (info)->size\n\t\t- hend->u.def.section->output_section->vma\n\t\t- hend->u.def.section->output_offset;\n\t      BFD_ASSERT (hend->u.def.value == value);\n\t      if (hend->u.def.value != value)\n\t\tgoto error;\n\t    }\n\t}\n    }\n  if (frvfdpic_pltrel_section (info))\n    {\n      BFD_ASSERT (frvfdpic_pltrel_section (info)->size\n\t\t  == (frvfdpic_pltrel_section (info)->reloc_count\n\t\t      * sizeof (Elf32_External_Rel)));\n    }\n\n\n  if (elf_hash_table (info)->dynamic_sections_created)\n    {\n      Elf32_External_Dyn * dyncon;\n      Elf32_External_Dyn * dynconend;\n\n      sdyn = bfd_get_section_by_name (dynobj, \".dynamic\");\n\n      BFD_ASSERT (sdyn != NULL);\n\n      dyncon = (Elf32_External_Dyn *) sdyn->contents;\n      dynconend = (Elf32_External_Dyn *) (sdyn->contents + sdyn->size);\n\n      for (; dyncon < dynconend; dyncon++)\n\t{\n\t  Elf_Internal_Dyn dyn;\n\n\t  bfd_elf32_swap_dyn_in (dynobj, dyncon, &dyn);\n\n\t  switch (dyn.d_tag)\n\t    {\n\t    default:\n\t      break;\n\n\t    case DT_PLTGOT:\n\t      dyn.d_un.d_ptr = frvfdpic_got_section (info)->output_section->vma\n\t\t+ frvfdpic_got_section (info)->output_offset\n\t\t+ frvfdpic_got_initial_offset (info);\n\t      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n\t      break;\n\n\t    case DT_JMPREL:\n\t      dyn.d_un.d_ptr = frvfdpic_pltrel_section (info)\n\t\t->output_section->vma\n\t\t+ frvfdpic_pltrel_section (info)->output_offset;\n\t      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n\t      break;\n\n\t    case DT_PLTRELSZ:\n\t      dyn.d_un.d_val = frvfdpic_pltrel_section (info)->size;\n\t      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n\t      break;\n\t    }\n\t}\n    }\n\n  return TRUE;\n}\n\n/* Adjust a symbol defined by a dynamic object and referenced by a\n   regular object.  */\n\nstatic bfd_boolean\nelf32_frvfdpic_adjust_dynamic_symbol\n(struct bfd_link_info *info ATTRIBUTE_UNUSED,\n struct elf_link_hash_entry *h ATTRIBUTE_UNUSED)\n{\n  bfd * dynobj;\n\n  dynobj = elf_hash_table (info)->dynobj;\n\n  /* Make sure we know what is going on here.  */\n  BFD_ASSERT (dynobj != NULL\n\t      && (h->u.weakdef != NULL\n\t\t  || (h->def_dynamic\n\t\t      && h->ref_regular\n\t\t      && !h->def_regular)));\n\n  /* If this is a weak symbol, and there is a real definition, the\n     processor independent code will have arranged for us to see the\n     real definition first, and we can just use the same value.  */\n  if (h->u.weakdef != NULL)\n    {\n      BFD_ASSERT (h->u.weakdef->root.type == bfd_link_hash_defined\n\t\t  || h->u.weakdef->root.type == bfd_link_hash_defweak);\n      h->root.u.def.section = h->u.weakdef->root.u.def.section;\n      h->root.u.def.value = h->u.weakdef->root.u.def.value;\n    }\n\n  return TRUE;\n}\n\n/* Perform any actions needed for dynamic symbols.  */\n\nstatic bfd_boolean\nelf32_frvfdpic_finish_dynamic_symbol\n(bfd *output_bfd ATTRIBUTE_UNUSED,\n struct bfd_link_info *info ATTRIBUTE_UNUSED,\n struct elf_link_hash_entry *h ATTRIBUTE_UNUSED,\n Elf_Internal_Sym *sym ATTRIBUTE_UNUSED)\n{\n  return TRUE;\n}\n\n/* Decide whether to attempt to turn absptr or lsda encodings in\n   shared libraries into pcrel within the given input section.  */\n\nstatic bfd_boolean\nfrvfdpic_elf_use_relative_eh_frame\n(bfd *input_bfd ATTRIBUTE_UNUSED,\n struct bfd_link_info *info ATTRIBUTE_UNUSED,\n asection *eh_frame_section ATTRIBUTE_UNUSED)\n{\n  /* We can't use PC-relative encodings in FDPIC binaries, in general.  */\n  return FALSE;\n}\n\n/* Adjust the contents of an eh_frame_hdr section before they're output.  */\n\nstatic bfd_byte\nfrvfdpic_elf_encode_eh_address (bfd *abfd,\n\t\t\t\tstruct bfd_link_info *info,\n\t\t\t\tasection *osec, bfd_vma offset,\n\t\t\t\tasection *loc_sec, bfd_vma loc_offset,\n\t\t\t\tbfd_vma *encoded)\n{\n  struct elf_link_hash_entry *h;\n\n  h = elf_hash_table (info)->hgot;\n  BFD_ASSERT (h && h->root.type == bfd_link_hash_defined);\n\n  if (! h || (_frvfdpic_osec_to_segment (abfd, osec)\n\t      == _frvfdpic_osec_to_segment (abfd, loc_sec->output_section)))\n    return _bfd_elf_encode_eh_address (abfd, info, osec, offset,\n\t\t\t\t       loc_sec, loc_offset, encoded);\n\n  BFD_ASSERT (_frvfdpic_osec_to_segment (abfd, osec)\n\t      == (_frvfdpic_osec_to_segment\n\t\t  (abfd, h->root.u.def.section->output_section)));\n\n  *encoded = osec->vma + offset\n    - (h->root.u.def.value\n       + h->root.u.def.section->output_section->vma\n       + h->root.u.def.section->output_offset);\n\n  return DW_EH_PE_datarel | DW_EH_PE_sdata4;\n}\n\n/* Look through the relocs for a section during the first phase.\n\n   Besides handling virtual table relocs for gc, we have to deal with\n   all sorts of PIC-related relocations.  We describe below the\n   general plan on how to handle such relocations, even though we only\n   collect information at this point, storing them in hash tables for\n   perusal of later passes.\n\n   32 relocations are propagated to the linker output when creating\n   position-independent output.  LO16 and HI16 relocations are not\n   supposed to be encountered in this case.\n\n   LABEL16 should always be resolvable by the linker, since it's only\n   used by branches.\n\n   LABEL24, on the other hand, is used by calls.  If it turns out that\n   the target of a call is a dynamic symbol, a PLT entry must be\n   created for it, which triggers the creation of a private function\n   descriptor and, unless lazy binding is disabled, a lazy PLT entry.\n\n   GPREL relocations require the referenced symbol to be in the same\n   segment as _gp, but this can only be checked later.\n\n   All GOT, GOTOFF and FUNCDESC relocations require a .got section to\n   exist.  LABEL24 might as well, since it may require a PLT entry,\n   that will require a got.\n\n   Non-FUNCDESC GOT relocations require a GOT entry to be created\n   regardless of whether the symbol is dynamic.  However, since a\n   global symbol that turns out to not be exported may have the same\n   address of a non-dynamic symbol, we don't assign GOT entries at\n   this point, such that we can share them in this case.  A relocation\n   for the GOT entry always has to be created, be it to offset a\n   private symbol by the section load address, be it to get the symbol\n   resolved dynamically.\n\n   FUNCDESC GOT relocations require a GOT entry to be created, and\n   handled as if a FUNCDESC relocation was applied to the GOT entry in\n   an object file.\n\n   FUNCDESC relocations referencing a symbol that turns out to NOT be\n   dynamic cause a private function descriptor to be created.  The\n   FUNCDESC relocation then decays to a 32 relocation that points at\n   the private descriptor.  If the symbol is dynamic, the FUNCDESC\n   relocation is propagated to the linker output, such that the\n   dynamic linker creates the canonical descriptor, pointing to the\n   dynamically-resolved definition of the function.\n\n   Non-FUNCDESC GOTOFF relocations must always refer to non-dynamic\n   symbols that are assigned to the same segment as the GOT, but we\n   can only check this later, after we know the complete set of\n   symbols defined and/or exported.\n\n   FUNCDESC GOTOFF relocations require a function descriptor to be\n   created and, unless lazy binding is disabled or the symbol is not\n   dynamic, a lazy PLT entry.  Since we can't tell at this point\n   whether a symbol is going to be dynamic, we have to decide later\n   whether to create a lazy PLT entry or bind the descriptor directly\n   to the private function.\n\n   FUNCDESC_VALUE relocations are not supposed to be present in object\n   files, but they may very well be simply propagated to the linker\n   output, since they have no side effect.\n\n\n   A function descriptor always requires a FUNCDESC_VALUE relocation.\n   Whether it's in .plt.rel or not depends on whether lazy binding is\n   enabled and on whether the referenced symbol is dynamic.\n\n   The existence of a lazy PLT requires the resolverStub lazy PLT\n   entry to be present.\n\n\n   As for assignment of GOT, PLT and lazy PLT entries, and private\n   descriptors, we might do them all sequentially, but we can do\n   better than that.  For example, we can place GOT entries and\n   private function descriptors referenced using 12-bit operands\n   closer to the PIC register value, such that these relocations don't\n   overflow.  Those that are only referenced with LO16 relocations\n   could come next, but we may as well place PLT-required function\n   descriptors in the 12-bit range to make them shorter.  Symbols\n   referenced with LO16/HI16 may come next, but we may place\n   additional function descriptors in the 16-bit range if we can\n   reliably tell that we've already placed entries that are ever\n   referenced with only LO16.  PLT entries are therefore generated as\n   small as possible, while not introducing relocation overflows in\n   GOT or FUNCDESC_GOTOFF relocations.  Lazy PLT entries could be\n   generated before or after PLT entries, but not intermingled with\n   them, such that we can have more lazy PLT entries in range for a\n   branch to the resolverStub.  The resolverStub should be emitted at\n   the most distant location from the first lazy PLT entry such that\n   it's still in range for a branch, or closer, if there isn't a need\n   for so many lazy PLT entries.  Additional lazy PLT entries may be\n   emitted after the resolverStub, as long as branches are still in\n   range.  If the branch goes out of range, longer lazy PLT entries\n   are emitted.\n\n   We could further optimize PLT and lazy PLT entries by giving them\n   priority in assignment to closer-to-gr17 locations depending on the\n   number of occurrences of references to them (assuming a function\n   that's called more often is more important for performance, so its\n   PLT entry should be faster), or taking hints from the compiler.\n   Given infinite time and money... :-)  */\n\nstatic bfd_boolean\nelf32_frv_check_relocs (abfd, info, sec, relocs)\n     bfd *abfd;\n     struct bfd_link_info *info;\n     asection *sec;\n     const Elf_Internal_Rela *relocs;\n{\n  Elf_Internal_Shdr *symtab_hdr;\n  struct elf_link_hash_entry **sym_hashes;\n  const Elf_Internal_Rela *rel;\n  const Elf_Internal_Rela *rel_end;\n  bfd *dynobj;\n  struct frvfdpic_relocs_info *picrel;\n\n  if (info->relocatable)\n    return TRUE;\n\n  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n  sym_hashes = elf_sym_hashes (abfd);\n\n  dynobj = elf_hash_table (info)->dynobj;\n  rel_end = relocs + sec->reloc_count;\n  for (rel = relocs; rel < rel_end; rel++)\n    {\n      struct elf_link_hash_entry *h;\n      unsigned long r_symndx;\n\n      r_symndx = ELF32_R_SYM (rel->r_info);\n      if (r_symndx < symtab_hdr->sh_info)\n        h = NULL;\n      else\n\t{\n\t  h = sym_hashes[r_symndx - symtab_hdr->sh_info];\n\t  while (h->root.type == bfd_link_hash_indirect\n\t\t || h->root.type == bfd_link_hash_warning)\n\t    h = (struct elf_link_hash_entry *) h->root.u.i.link;\n\t}\n\n      switch (ELF32_R_TYPE (rel->r_info))\n\t{\n\tcase R_FRV_GETTLSOFF:\n\tcase R_FRV_TLSDESC_VALUE:\n\tcase R_FRV_GOTTLSDESC12:\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\tcase R_FRV_GOTTLSOFF12:\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\tcase R_FRV_TLSOFF:\n\tcase R_FRV_GOT12:\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_GOTLO:\n\tcase R_FRV_FUNCDESC_GOT12:\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\tcase R_FRV_GOTOFF12:\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_GOTOFFLO:\n\tcase R_FRV_FUNCDESC_GOTOFF12:\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\tcase R_FRV_FUNCDESC:\n\tcase R_FRV_FUNCDESC_VALUE:\n\tcase R_FRV_TLSMOFF12:\n\tcase R_FRV_TLSMOFFHI:\n\tcase R_FRV_TLSMOFFLO:\n\tcase R_FRV_TLSMOFF:\n\t  if (! IS_FDPIC (abfd))\n\t    goto bad_reloc;\n\t  /* Fall through.  */\n\tcase R_FRV_GPREL12:\n\tcase R_FRV_GPRELU12:\n\tcase R_FRV_GPRELHI:\n\tcase R_FRV_GPRELLO:\n\tcase R_FRV_LABEL24:\n\tcase R_FRV_32:\n\t  if (! dynobj)\n\t    {\n\t      elf_hash_table (info)->dynobj = dynobj = abfd;\n\t      if (! _frv_create_got_section (abfd, info))\n\t\treturn FALSE;\n\t    }\n\t  if (! IS_FDPIC (abfd))\n\t    {\n\t      picrel = NULL;\n\t      break;\n\t    }\n\t  if (h != NULL)\n\t    {\n\t      if (h->dynindx == -1)\n\t\tswitch (ELF_ST_VISIBILITY (h->other))\n\t\t  {\n\t\t  case STV_INTERNAL:\n\t\t  case STV_HIDDEN:\n\t\t    break;\n\t\t  default:\n\t\t    bfd_elf_link_record_dynamic_symbol (info, h);\n\t\t    break;\n\t\t  }\n\t      picrel\n\t\t= frvfdpic_relocs_info_for_global (frvfdpic_relocs_info (info),\n\t\t\t\t\t\t   abfd, h,\n\t\t\t\t\t\t   rel->r_addend, INSERT);\n\t    }\n\t  else\n\t    picrel = frvfdpic_relocs_info_for_local (frvfdpic_relocs_info\n\t\t\t\t\t\t     (info), abfd, r_symndx,\n\t\t\t\t\t\t     rel->r_addend, INSERT);\n\t  if (! picrel)\n\t    return FALSE;\n\t  break;\n\n\tdefault:\n\t  picrel = NULL;\n\t  break;\n\t}\n\n      switch (ELF32_R_TYPE (rel->r_info))\n        {\n\tcase R_FRV_LABEL24:\n\t  if (IS_FDPIC (abfd))\n\t    picrel->call = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_VALUE:\n\t  picrel->relocsfdv++;\n\t  if (bfd_get_section_flags (abfd, sec) & SEC_ALLOC)\n\t    picrel->relocs32--;\n\t  /* Fall through.  */\n\n\tcase R_FRV_32:\n\t  if (! IS_FDPIC (abfd))\n\t    break;\n\n\t  picrel->sym = 1;\n\t  if (bfd_get_section_flags (abfd, sec) & SEC_ALLOC)\n\t    picrel->relocs32++;\n\t  break;\n\n\tcase R_FRV_GOT12:\n\t  picrel->got12 = 1;\n\t  break;\n\n\tcase R_FRV_GOTHI:\n\tcase R_FRV_GOTLO:\n\t  picrel->gothilo = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOT12:\n\t  picrel->fdgot12 = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOTHI:\n\tcase R_FRV_FUNCDESC_GOTLO:\n\t  picrel->fdgothilo = 1;\n\t  break;\n\n\tcase R_FRV_GOTOFF12:\n\tcase R_FRV_GOTOFFHI:\n\tcase R_FRV_GOTOFFLO:\n\t  picrel->gotoff = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOTOFF12:\n\t  picrel->fdgoff12 = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC_GOTOFFHI:\n\tcase R_FRV_FUNCDESC_GOTOFFLO:\n\t  picrel->fdgoffhilo = 1;\n\t  break;\n\n\tcase R_FRV_FUNCDESC:\n\t  picrel->fd = 1;\n\t  picrel->relocsfd++;\n\t  break;\n\n\tcase R_FRV_GETTLSOFF:\n\t  picrel->tlsplt = 1;\n\t  break;\n\n\tcase R_FRV_TLSDESC_VALUE:\n\t  picrel->relocstlsd++;\n\t  goto bad_reloc;\n\n\tcase R_FRV_GOTTLSDESC12:\n\t  picrel->tlsdesc12 = 1;\n\t  break;\n\n\tcase R_FRV_GOTTLSDESCHI:\n\tcase R_FRV_GOTTLSDESCLO:\n\t  picrel->tlsdeschilo = 1;\n\t  break;\n\n\tcase R_FRV_TLSMOFF12:\n\tcase R_FRV_TLSMOFFHI:\n\tcase R_FRV_TLSMOFFLO:\n\tcase R_FRV_TLSMOFF:\n\t  break;\n\n\tcase R_FRV_GOTTLSOFF12:\n\t  picrel->tlsoff12 = 1;\n\t  info->flags |= DF_STATIC_TLS;\n\t  break;\n\n\tcase R_FRV_GOTTLSOFFHI:\n\tcase R_FRV_GOTTLSOFFLO:\n\t  picrel->tlsoffhilo = 1;\n\t  info->flags |= DF_STATIC_TLS;\n\t  break;\n\n\tcase R_FRV_TLSOFF:\n\t  picrel->relocstlsoff++;\n\t  info->flags |= DF_STATIC_TLS;\n\t  goto bad_reloc;\n\n        /* This relocation describes the C++ object vtable hierarchy.\n           Reconstruct it for later use during GC.  */\n        case R_FRV_GNU_VTINHERIT:\n          if (!bfd_elf_gc_record_vtinherit (abfd, sec, h, rel->r_offset))\n            return FALSE;\n          break;\n\n        /* This relocation describes which C++ vtable entries are actually\n           used.  Record for later use during GC.  */\n        case R_FRV_GNU_VTENTRY:\n          BFD_ASSERT (h != NULL);\n          if (h != NULL\n              && !bfd_elf_gc_record_vtentry (abfd, sec, h, rel->r_addend))\n            return FALSE;\n          break;\n\n\tcase R_FRV_LABEL16:\n\tcase R_FRV_LO16:\n\tcase R_FRV_HI16:\n\tcase R_FRV_GPREL12:\n\tcase R_FRV_GPRELU12:\n\tcase R_FRV_GPREL32:\n\tcase R_FRV_GPRELHI:\n\tcase R_FRV_GPRELLO:\n\tcase R_FRV_TLSDESC_RELAX:\n\tcase R_FRV_GETTLSOFF_RELAX:\n\tcase R_FRV_TLSOFF_RELAX:\n\t  break;\n\n\tdefault:\n\tbad_reloc:\n\t  (*_bfd_error_handler)\n\t    (_(\"%B: unsupported relocation type %i\"),\n\t     abfd, ELF32_R_TYPE (rel->r_info));\n\t  return FALSE;\n        }\n    }\n\n  return TRUE;\n}\n\n\f\n/* Return the machine subcode from the ELF e_flags header.  */\n\nstatic int\nelf32_frv_machine (abfd)\n     bfd *abfd;\n{\n  switch (elf_elfheader (abfd)->e_flags & EF_FRV_CPU_MASK)\n    {\n    default:\t\t    break;\n    case EF_FRV_CPU_FR550:  return bfd_mach_fr550;\n    case EF_FRV_CPU_FR500:  return bfd_mach_fr500;\n    case EF_FRV_CPU_FR450:  return bfd_mach_fr450;\n    case EF_FRV_CPU_FR405:  return bfd_mach_fr400;\n    case EF_FRV_CPU_FR400:  return bfd_mach_fr400;\n    case EF_FRV_CPU_FR300:  return bfd_mach_fr300;\n    case EF_FRV_CPU_SIMPLE: return bfd_mach_frvsimple;\n    case EF_FRV_CPU_TOMCAT: return bfd_mach_frvtomcat;\n    }\n\n  return bfd_mach_frv;\n}\n\n/* Set the right machine number for a FRV ELF file.  */\n\nstatic bfd_boolean\nelf32_frv_object_p (abfd)\n     bfd *abfd;\n{\n  bfd_default_set_arch_mach (abfd, bfd_arch_frv, elf32_frv_machine (abfd));\n  return (((elf_elfheader (abfd)->e_flags & EF_FRV_FDPIC) != 0)\n\t  == (IS_FDPIC (abfd)));\n}\n\f\n/* Function to set the ELF flag bits.  */\n\nstatic bfd_boolean\nfrv_elf_set_private_flags (abfd, flags)\n     bfd *abfd;\n     flagword flags;\n{\n  elf_elfheader (abfd)->e_flags = flags;\n  elf_flags_init (abfd) = TRUE;\n  return TRUE;\n}\n\n/* Copy backend specific data from one object module to another.  */\n\nstatic bfd_boolean\nfrv_elf_copy_private_bfd_data (ibfd, obfd)\n     bfd *ibfd;\n     bfd *obfd;\n{\n  if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour\n      || bfd_get_flavour (obfd) != bfd_target_elf_flavour)\n    return TRUE;\n\n  BFD_ASSERT (!elf_flags_init (obfd)\n\t      || elf_elfheader (obfd)->e_flags == elf_elfheader (ibfd)->e_flags);\n\n  elf_elfheader (obfd)->e_flags = elf_elfheader (ibfd)->e_flags;\n  elf_flags_init (obfd) = TRUE;\n\n  /* Copy object attributes.  */\n  _bfd_elf_copy_obj_attributes (ibfd, obfd);\n\n  return TRUE;\n}\n\n/* Return true if the architecture described by elf header flag\n   EXTENSION is an extension of the architecture described by BASE.  */\n\nstatic bfd_boolean\nfrv_elf_arch_extension_p (flagword base, flagword extension)\n{\n  if (base == extension)\n    return TRUE;\n\n  /* CPU_GENERIC code can be merged with code for a specific\n     architecture, in which case the result is marked as being\n     for the specific architecture.  Everything is therefore\n     an extension of CPU_GENERIC.  */\n  if (base == EF_FRV_CPU_GENERIC)\n    return TRUE;\n\n  if (extension == EF_FRV_CPU_FR450)\n    if (base == EF_FRV_CPU_FR400 || base == EF_FRV_CPU_FR405)\n      return TRUE;\n\n  if (extension == EF_FRV_CPU_FR405)\n    if (base == EF_FRV_CPU_FR400)\n      return TRUE;\n\n  return FALSE;\n}\n\nstatic bfd_boolean\nelf32_frvfdpic_copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n{\n  unsigned i;\n\n  if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour\n      || bfd_get_flavour (obfd) != bfd_target_elf_flavour)\n    return TRUE;\n\n  if (! frv_elf_copy_private_bfd_data (ibfd, obfd))\n    return FALSE;\n\n  if (! elf_tdata (ibfd) || ! elf_tdata (ibfd)->phdr\n      || ! elf_tdata (obfd) || ! elf_tdata (obfd)->phdr)\n    return TRUE;\n\n  /* Copy the stack size.  */\n  for (i = 0; i < elf_elfheader (ibfd)->e_phnum; i++)\n    if (elf_tdata (ibfd)->phdr[i].p_type == PT_GNU_STACK)\n      {\n\tElf_Internal_Phdr *iphdr = &elf_tdata (ibfd)->phdr[i];\n\n\tfor (i = 0; i < elf_elfheader (obfd)->e_phnum; i++)\n\t  if (elf_tdata (obfd)->phdr[i].p_type == PT_GNU_STACK)\n\t    {\n\t      memcpy (&elf_tdata (obfd)->phdr[i], iphdr, sizeof (*iphdr));\n\n\t      /* Rewrite the phdrs, since we're only called after they\n\t\t were first written.  */\n\t      if (bfd_seek (obfd, (bfd_signed_vma) get_elf_backend_data (obfd)\n\t\t\t    ->s->sizeof_ehdr, SEEK_SET) != 0\n\t\t  || get_elf_backend_data (obfd)->s\n\t\t  ->write_out_phdrs (obfd, elf_tdata (obfd)->phdr,\n\t\t\t\t     elf_elfheader (obfd)->e_phnum) != 0)\n\t\treturn FALSE;\n\t      break;\n\t    }\n\n\tbreak;\n      }\n\n  return TRUE;\n}\n\n/* Merge backend specific data from an object file to the output\n   object file when linking.  */\n\nstatic bfd_boolean\nfrv_elf_merge_private_bfd_data (ibfd, obfd)\n     bfd *ibfd;\n     bfd *obfd;\n{\n  flagword old_flags, old_partial;\n  flagword new_flags, new_partial;\n  bfd_boolean error = FALSE;\n  char new_opt[80];\n  char old_opt[80];\n\n  new_opt[0] = old_opt[0] = '\\0';\n  new_flags = elf_elfheader (ibfd)->e_flags;\n  old_flags = elf_elfheader (obfd)->e_flags;\n\n  if (new_flags & EF_FRV_FDPIC)\n    new_flags &= ~EF_FRV_PIC;\n\n#ifdef DEBUG\n  (*_bfd_error_handler) (\"old_flags = 0x%.8lx, new_flags = 0x%.8lx, init = %s, filename = %s\",\n\t\t\t old_flags, new_flags, elf_flags_init (obfd) ? \"yes\" : \"no\",\n\t\t\t bfd_get_filename (ibfd));\n#endif\n\n  if (!elf_flags_init (obfd))\t\t\t/* First call, no flags set.  */\n    {\n      elf_flags_init (obfd) = TRUE;\n      old_flags = new_flags;\n    }\n\n  else if (new_flags == old_flags)\t\t/* Compatible flags are ok.  */\n    ;\n\n  else\t\t\t\t\t\t/* Possibly incompatible flags.  */\n    {\n      /* Warn if different # of gprs are used.  Note, 0 means nothing is\n         said about the size of gprs.  */\n      new_partial = (new_flags & EF_FRV_GPR_MASK);\n      old_partial = (old_flags & EF_FRV_GPR_MASK);\n      if (new_partial == old_partial)\n\t;\n\n      else if (new_partial == 0)\n\t;\n\n      else if (old_partial == 0)\n\told_flags |= new_partial;\n\n      else\n\t{\n\t  switch (new_partial)\n\t    {\n\t    default:\t\tstrcat (new_opt, \" -mgpr-??\"); break;\n\t    case EF_FRV_GPR_32: strcat (new_opt, \" -mgpr-32\"); break;\n\t    case EF_FRV_GPR_64: strcat (new_opt, \" -mgpr-64\"); break;\n\t    }\n\n\t  switch (old_partial)\n\t    {\n\t    default:\t\tstrcat (old_opt, \" -mgpr-??\"); break;\n\t    case EF_FRV_GPR_32: strcat (old_opt, \" -mgpr-32\"); break;\n\t    case EF_FRV_GPR_64: strcat (old_opt, \" -mgpr-64\"); break;\n\t    }\n\t}\n\n      /* Warn if different # of fprs are used.  Note, 0 means nothing is\n         said about the size of fprs.  */\n      new_partial = (new_flags & EF_FRV_FPR_MASK);\n      old_partial = (old_flags & EF_FRV_FPR_MASK);\n      if (new_partial == old_partial)\n\t;\n\n      else if (new_partial == 0)\n\t;\n\n      else if (old_partial == 0)\n\told_flags |= new_partial;\n\n      else\n\t{\n\t  switch (new_partial)\n\t    {\n\t    default:\t\t  strcat (new_opt, \" -mfpr-?\");      break;\n\t    case EF_FRV_FPR_32:   strcat (new_opt, \" -mfpr-32\");     break;\n\t    case EF_FRV_FPR_64:   strcat (new_opt, \" -mfpr-64\");     break;\n\t    case EF_FRV_FPR_NONE: strcat (new_opt, \" -msoft-float\"); break;\n\t    }\n\n\t  switch (old_partial)\n\t    {\n\t    default:\t\t  strcat (old_opt, \" -mfpr-?\");      break;\n\t    case EF_FRV_FPR_32:   strcat (old_opt, \" -mfpr-32\");     break;\n\t    case EF_FRV_FPR_64:   strcat (old_opt, \" -mfpr-64\");     break;\n\t    case EF_FRV_FPR_NONE: strcat (old_opt, \" -msoft-float\"); break;\n\t    }\n\t}\n\n      /* Warn if different dword support was used.  Note, 0 means nothing is\n         said about the dword support.  */\n      new_partial = (new_flags & EF_FRV_DWORD_MASK);\n      old_partial = (old_flags & EF_FRV_DWORD_MASK);\n      if (new_partial == old_partial)\n\t;\n\n      else if (new_partial == 0)\n\t;\n\n      else if (old_partial == 0)\n\told_flags |= new_partial;\n\n      else\n\t{\n\t  switch (new_partial)\n\t    {\n\t    default:\t\t   strcat (new_opt, \" -mdword-?\");  break;\n\t    case EF_FRV_DWORD_YES: strcat (new_opt, \" -mdword\");    break;\n\t    case EF_FRV_DWORD_NO:  strcat (new_opt, \" -mno-dword\"); break;\n\t    }\n\n\t  switch (old_partial)\n\t    {\n\t    default:\t\t   strcat (old_opt, \" -mdword-?\");  break;\n\t    case EF_FRV_DWORD_YES: strcat (old_opt, \" -mdword\");    break;\n\t    case EF_FRV_DWORD_NO:  strcat (old_opt, \" -mno-dword\"); break;\n\t    }\n\t}\n\n      /* Or in flags that accumulate (ie, if one module uses it, mark that the\n\t feature is used.  */\n      old_flags |= new_flags & (EF_FRV_DOUBLE\n\t\t\t\t| EF_FRV_MEDIA\n\t\t\t\t| EF_FRV_MULADD\n\t\t\t\t| EF_FRV_NON_PIC_RELOCS);\n\n      /* If any module was compiled without -G0, clear the G0 bit.  */\n      old_flags = ((old_flags & ~ EF_FRV_G0)\n\t\t   | (old_flags & new_flags & EF_FRV_G0));\n\n      /* If any module was compiled without -mnopack, clear the mnopack bit.  */\n      old_flags = ((old_flags & ~ EF_FRV_NOPACK)\n\t\t   | (old_flags & new_flags & EF_FRV_NOPACK));\n\n      /* We don't have to do anything if the pic flags are the same, or the new\n         module(s) were compiled with -mlibrary-pic.  */\n      new_partial = (new_flags & EF_FRV_PIC_FLAGS);\n      old_partial = (old_flags & EF_FRV_PIC_FLAGS);\n      if ((new_partial == old_partial) || ((new_partial & EF_FRV_LIBPIC) != 0))\n\t;\n\n      /* If the old module(s) were compiled with -mlibrary-pic, copy in the pic\n         flags if any from the new module.  */\n      else if ((old_partial & EF_FRV_LIBPIC) != 0)\n\told_flags = (old_flags & ~ EF_FRV_PIC_FLAGS) | new_partial;\n\n      /* If we have mixtures of -fpic and -fPIC, or in both bits.  */\n      else if (new_partial != 0 && old_partial != 0)\n\told_flags |= new_partial;\n\n      /* One module was compiled for pic and the other was not, see if we have\n         had any relocations that are not pic-safe.  */\n      else\n\t{\n\t  if ((old_flags & EF_FRV_NON_PIC_RELOCS) == 0)\n\t    old_flags |= new_partial;\n\t  else\n\t    {\n\t      old_flags &= ~ EF_FRV_PIC_FLAGS;\n#ifndef FRV_NO_PIC_ERROR\n\t      error = TRUE;\n\t      (*_bfd_error_handler)\n\t\t(_(\"%s: compiled with %s and linked with modules that use non-pic relocations\"),\n\t\t bfd_get_filename (ibfd),\n\t\t (new_flags & EF_FRV_BIGPIC) ? \"-fPIC\" : \"-fpic\");\n#endif\n\t    }\n\t}\n\n      /* Warn if different cpu is used (allow a specific cpu to override\n\t the generic cpu).  */\n      new_partial = (new_flags & EF_FRV_CPU_MASK);\n      old_partial = (old_flags & EF_FRV_CPU_MASK);\n      if (frv_elf_arch_extension_p (new_partial, old_partial))\n\t;\n\n      else if (frv_elf_arch_extension_p (old_partial, new_partial))\n\told_flags = (old_flags & ~EF_FRV_CPU_MASK) | new_partial;\n\n      else\n\t{\n\t  switch (new_partial)\n\t    {\n\t    default:\t\t     strcat (new_opt, \" -mcpu=?\");      break;\n\t    case EF_FRV_CPU_GENERIC: strcat (new_opt, \" -mcpu=frv\");    break;\n\t    case EF_FRV_CPU_SIMPLE:  strcat (new_opt, \" -mcpu=simple\"); break;\n\t    case EF_FRV_CPU_FR550:   strcat (new_opt, \" -mcpu=fr550\");  break;\n\t    case EF_FRV_CPU_FR500:   strcat (new_opt, \" -mcpu=fr500\");  break;\n\t    case EF_FRV_CPU_FR450:   strcat (new_opt, \" -mcpu=fr450\");  break;\n\t    case EF_FRV_CPU_FR405:   strcat (new_opt, \" -mcpu=fr405\");  break;\n\t    case EF_FRV_CPU_FR400:   strcat (new_opt, \" -mcpu=fr400\");  break;\n\t    case EF_FRV_CPU_FR300:   strcat (new_opt, \" -mcpu=fr300\");  break;\n\t    case EF_FRV_CPU_TOMCAT:  strcat (new_opt, \" -mcpu=tomcat\"); break;\n\t    }\n\n\t  switch (old_partial)\n\t    {\n\t    default:\t\t     strcat (old_opt, \" -mcpu=?\");      break;\n\t    case EF_FRV_CPU_GENERIC: strcat (old_opt, \" -mcpu=frv\");    break;\n\t    case EF_FRV_CPU_SIMPLE:  strcat (old_opt, \" -mcpu=simple\"); break;\n\t    case EF_FRV_CPU_FR550:   strcat (old_opt, \" -mcpu=fr550\");  break;\n\t    case EF_FRV_CPU_FR500:   strcat (old_opt, \" -mcpu=fr500\");  break;\n\t    case EF_FRV_CPU_FR450:   strcat (old_opt, \" -mcpu=fr450\");  break;\n\t    case EF_FRV_CPU_FR405:   strcat (old_opt, \" -mcpu=fr405\");  break;\n\t    case EF_FRV_CPU_FR400:   strcat (old_opt, \" -mcpu=fr400\");  break;\n\t    case EF_FRV_CPU_FR300:   strcat (old_opt, \" -mcpu=fr300\");  break;\n\t    case EF_FRV_CPU_TOMCAT:  strcat (old_opt, \" -mcpu=tomcat\"); break;\n\t    }\n\t}\n\n      /* Print out any mismatches from above.  */\n      if (new_opt[0])\n\t{\n\t  error = TRUE;\n\t  (*_bfd_error_handler)\n\t    (_(\"%s: compiled with %s and linked with modules compiled with %s\"),\n\t     bfd_get_filename (ibfd), new_opt, old_opt);\n\t}\n\n      /* Warn about any other mismatches */\n      new_partial = (new_flags & ~ EF_FRV_ALL_FLAGS);\n      old_partial = (old_flags & ~ EF_FRV_ALL_FLAGS);\n      if (new_partial != old_partial)\n\t{\n\t  old_flags |= new_partial;\n\t  error = TRUE;\n\t  (*_bfd_error_handler)\n\t    (_(\"%s: uses different unknown e_flags (0x%lx) fields than previous modules (0x%lx)\"),\n\t     bfd_get_filename (ibfd), (long)new_partial, (long)old_partial);\n\t}\n    }\n\n  /* If the cpu is -mcpu=simple, then set the -mnopack bit.  */\n  if ((old_flags & EF_FRV_CPU_MASK) == EF_FRV_CPU_SIMPLE)\n    old_flags |= EF_FRV_NOPACK;\n\n  /* Update the old flags now with changes made above.  */\n  old_partial = elf_elfheader (obfd)->e_flags & EF_FRV_CPU_MASK;\n  elf_elfheader (obfd)->e_flags = old_flags;\n  if (old_partial != (old_flags & EF_FRV_CPU_MASK))\n    bfd_default_set_arch_mach (obfd, bfd_arch_frv, elf32_frv_machine (obfd));\n\n  if (((new_flags & EF_FRV_FDPIC) == 0)\n      != (! IS_FDPIC (ibfd)))\n    {\n      error = TRUE;\n      if (IS_FDPIC (obfd))\n\t(*_bfd_error_handler)\n\t  (_(\"%s: cannot link non-fdpic object file into fdpic executable\"),\n\t   bfd_get_filename (ibfd));\n      else\n\t(*_bfd_error_handler)\n\t  (_(\"%s: cannot link fdpic object file into non-fdpic executable\"),\n\t   bfd_get_filename (ibfd));\n    }\n\n  if (error)\n    bfd_set_error (bfd_error_bad_value);\n\n  return !error;\n}\n\n\f\nbfd_boolean\nfrv_elf_print_private_bfd_data (abfd, ptr)\n     bfd *abfd;\n     PTR ptr;\n{\n  FILE *file = (FILE *) ptr;\n  flagword flags;\n\n  BFD_ASSERT (abfd != NULL && ptr != NULL);\n\n  /* Print normal ELF private data.  */\n  _bfd_elf_print_private_bfd_data (abfd, ptr);\n\n  flags = elf_elfheader (abfd)->e_flags;\n  fprintf (file, _(\"private flags = 0x%lx:\"), (unsigned long) flags);\n\n  switch (flags & EF_FRV_CPU_MASK)\n    {\n    default:\t\t\t\t\t\t\tbreak;\n    case EF_FRV_CPU_SIMPLE: fprintf (file, \" -mcpu=simple\");\tbreak;\n    case EF_FRV_CPU_FR550:  fprintf (file, \" -mcpu=fr550\");\tbreak;\n    case EF_FRV_CPU_FR500:  fprintf (file, \" -mcpu=fr500\");\tbreak;\n    case EF_FRV_CPU_FR450:  fprintf (file, \" -mcpu=fr450\");\tbreak;\n    case EF_FRV_CPU_FR405:  fprintf (file, \" -mcpu=fr405\");\tbreak;\n    case EF_FRV_CPU_FR400:  fprintf (file, \" -mcpu=fr400\");\tbreak;\n    case EF_FRV_CPU_FR300:  fprintf (file, \" -mcpu=fr300\");\tbreak;\n    case EF_FRV_CPU_TOMCAT: fprintf (file, \" -mcpu=tomcat\");\tbreak;\n    }\n\n  switch (flags & EF_FRV_GPR_MASK)\n    {\n    default:\t\t\t\t\t\t\tbreak;\n    case EF_FRV_GPR_32: fprintf (file, \" -mgpr-32\");\t\tbreak;\n    case EF_FRV_GPR_64: fprintf (file, \" -mgpr-64\");\t\tbreak;\n    }\n\n  switch (flags & EF_FRV_FPR_MASK)\n    {\n    default:\t\t\t\t\t\t\tbreak;\n    case EF_FRV_FPR_32:   fprintf (file, \" -mfpr-32\");\t\tbreak;\n    case EF_FRV_FPR_64:   fprintf (file, \" -mfpr-64\");\t\tbreak;\n    case EF_FRV_FPR_NONE: fprintf (file, \" -msoft-float\");\tbreak;\n    }\n\n  switch (flags & EF_FRV_DWORD_MASK)\n    {\n    default:\t\t\t\t\t\t\tbreak;\n    case EF_FRV_DWORD_YES: fprintf (file, \" -mdword\");\t\tbreak;\n    case EF_FRV_DWORD_NO:  fprintf (file, \" -mno-dword\");\tbreak;\n    }\n\n  if (flags & EF_FRV_DOUBLE)\n    fprintf (file, \" -mdouble\");\n\n  if (flags & EF_FRV_MEDIA)\n    fprintf (file, \" -mmedia\");\n\n  if (flags & EF_FRV_MULADD)\n    fprintf (file, \" -mmuladd\");\n\n  if (flags & EF_FRV_PIC)\n    fprintf (file, \" -fpic\");\n\n  if (flags & EF_FRV_BIGPIC)\n    fprintf (file, \" -fPIC\");\n\n  if (flags & EF_FRV_LIBPIC)\n    fprintf (file, \" -mlibrary-pic\");\n\n  if (flags & EF_FRV_FDPIC)\n    fprintf (file, \" -mfdpic\");\n\n  if (flags & EF_FRV_NON_PIC_RELOCS)\n    fprintf (file, \" non-pic relocations\");\n\n  if (flags & EF_FRV_G0)\n    fprintf (file, \" -G0\");\n\n  fputc ('\\n', file);\n  return TRUE;\n}\n\n\f\n/* Support for core dump NOTE sections.  */\n\nstatic bfd_boolean\nelf32_frv_grok_prstatus (bfd *abfd, Elf_Internal_Note *note)\n{\n  int offset;\n  unsigned int raw_size;\n\n  switch (note->descsz)\n    {\n      default:\n\treturn FALSE;\n\n      /* The Linux/FRV elf_prstatus struct is 268 bytes long.  The other\n         hardcoded offsets and sizes listed below (and contained within\n\t this lexical block) refer to fields in the target's elf_prstatus\n\t struct.  */\n      case 268:\t\n\t/* `pr_cursig' is at offset 12.  */\n\telf_tdata (abfd)->core_signal = bfd_get_16 (abfd, note->descdata + 12);\n\n\t/* `pr_pid' is at offset 24.  */\n\telf_tdata (abfd)->core_pid = bfd_get_32 (abfd, note->descdata + 24);\n\n\t/* `pr_reg' is at offset 72.  */\n\toffset = 72;\n\n\t/* Most grok_prstatus implementations set `raw_size' to the size\n\t   of the pr_reg field.  For Linux/FRV, we set `raw_size' to be\n\t   the size of `pr_reg' plus the size of `pr_exec_fdpic_loadmap'\n\t   and `pr_interp_fdpic_loadmap', both of which (by design)\n\t   immediately follow `pr_reg'.  This will allow these fields to\n\t   be viewed by GDB as registers.\n\t   \n\t   `pr_reg' is 184 bytes long.  `pr_exec_fdpic_loadmap' and\n\t   `pr_interp_fdpic_loadmap' are 4 bytes each.  */\n\traw_size = 184 + 4 + 4;\n\n\tbreak;\n    }\n\n  /* Make a \".reg/999\" section.  */\n  return _bfd_elfcore_make_pseudosection (abfd, \".reg\", raw_size,\n\t\t\t\t\t  note->descpos + offset);\n}\n\nstatic bfd_boolean\nelf32_frv_grok_psinfo (bfd *abfd, Elf_Internal_Note *note)\n{\n  switch (note->descsz)\n    {\n      default:\n\treturn FALSE;\n\n      /* The Linux/FRV elf_prpsinfo struct is 124 bytes long.  */\n      case 124:\n\n\t/* `pr_fname' is found at offset 28 and is 16 bytes long.  */\n\telf_tdata (abfd)->core_program\n\t  = _bfd_elfcore_strndup (abfd, note->descdata + 28, 16);\n\n\t/* `pr_psargs' is found at offset 44 and is 80 bytes long.  */\n\telf_tdata (abfd)->core_command\n\t  = _bfd_elfcore_strndup (abfd, note->descdata + 44, 80);\n    }\n\n  /* Note that for some reason, a spurious space is tacked\n     onto the end of the args in some (at least one anyway)\n     implementations, so strip it off if it exists.  */\n\n  {\n    char *command = elf_tdata (abfd)->core_command;\n    int n = strlen (command);\n\n    if (0 < n && command[n - 1] == ' ')\n      command[n - 1] = '\\0';\n  }\n\n  return TRUE;\n}\n#define ELF_ARCH\t\tbfd_arch_frv\n#define ELF_MACHINE_CODE\tEM_CYGNUS_FRV\n#define ELF_MAXPAGESIZE\t\t0x1000\n\n#define TARGET_BIG_SYM          bfd_elf32_frv_vec\n#define TARGET_BIG_NAME\t\t\"elf32-frv\"\n\n#define elf_info_to_howto\t\t\tfrv_info_to_howto_rela\n#define elf_backend_relocate_section\t\telf32_frv_relocate_section\n#define elf_backend_gc_mark_hook\t\telf32_frv_gc_mark_hook\n#define elf_backend_check_relocs                elf32_frv_check_relocs\n#define elf_backend_object_p\t\t\telf32_frv_object_p\n#define elf_backend_add_symbol_hook             elf32_frv_add_symbol_hook\n\n#define elf_backend_can_gc_sections\t\t1\n#define elf_backend_rela_normal\t\t\t1\n\n#define bfd_elf32_bfd_reloc_type_lookup\t\tfrv_reloc_type_lookup\n#define bfd_elf32_bfd_reloc_name_lookup\tfrv_reloc_name_lookup\n#define bfd_elf32_bfd_set_private_flags\t\tfrv_elf_set_private_flags\n#define bfd_elf32_bfd_copy_private_bfd_data\tfrv_elf_copy_private_bfd_data\n#define bfd_elf32_bfd_merge_private_bfd_data\tfrv_elf_merge_private_bfd_data\n#define bfd_elf32_bfd_print_private_bfd_data\tfrv_elf_print_private_bfd_data\n\n#define elf_backend_want_got_sym\t1\n#define elf_backend_got_header_size\t0\n#define elf_backend_want_got_plt\t0\n#define elf_backend_plt_readonly\t1\n#define elf_backend_want_plt_sym\t0\n#define elf_backend_plt_header_size\t0\n\n#define elf_backend_finish_dynamic_sections \\\n\t\telf32_frv_finish_dynamic_sections\n\n#define elf_backend_grok_prstatus\telf32_frv_grok_prstatus\n#define elf_backend_grok_psinfo\t\telf32_frv_grok_psinfo\n\n#include \"elf32-target.h\"\n\n#undef ELF_MAXPAGESIZE\n#define ELF_MAXPAGESIZE\t\t0x4000\n\n#undef TARGET_BIG_SYM\n#define TARGET_BIG_SYM          bfd_elf32_frvfdpic_vec\n#undef TARGET_BIG_NAME\n#define TARGET_BIG_NAME\t\t\"elf32-frvfdpic\"\n#undef\telf32_bed\n#define\telf32_bed\t\telf32_frvfdpic_bed\n\n#undef elf_info_to_howto_rel\n#define elf_info_to_howto_rel\tfrvfdpic_info_to_howto_rel\n\n#undef bfd_elf32_bfd_link_hash_table_create\n#define bfd_elf32_bfd_link_hash_table_create \\\n\t\tfrvfdpic_elf_link_hash_table_create\n#undef elf_backend_always_size_sections\n#define elf_backend_always_size_sections \\\n\t\telf32_frvfdpic_always_size_sections\n#undef elf_backend_modify_program_headers\n#define elf_backend_modify_program_headers \\\n\t\telf32_frvfdpic_modify_program_headers\n#undef bfd_elf32_bfd_copy_private_bfd_data\n#define bfd_elf32_bfd_copy_private_bfd_data \\\n\t\telf32_frvfdpic_copy_private_bfd_data\n\n#undef elf_backend_create_dynamic_sections\n#define elf_backend_create_dynamic_sections \\\n\t\telf32_frvfdpic_create_dynamic_sections\n#undef elf_backend_adjust_dynamic_symbol\n#define elf_backend_adjust_dynamic_symbol \\\n\t\telf32_frvfdpic_adjust_dynamic_symbol\n#undef elf_backend_size_dynamic_sections\n#define elf_backend_size_dynamic_sections \\\n\t\telf32_frvfdpic_size_dynamic_sections\n#undef bfd_elf32_bfd_relax_section\n#define bfd_elf32_bfd_relax_section \\\n  elf32_frvfdpic_relax_section\n#undef elf_backend_finish_dynamic_symbol\n#define elf_backend_finish_dynamic_symbol \\\n\t\telf32_frvfdpic_finish_dynamic_symbol\n#undef elf_backend_finish_dynamic_sections\n#define elf_backend_finish_dynamic_sections \\\n\t\telf32_frvfdpic_finish_dynamic_sections\n\n#undef elf_backend_discard_info\n#define elf_backend_discard_info \\\n\t\tfrvfdpic_elf_discard_info\n#undef elf_backend_can_make_relative_eh_frame\n#define elf_backend_can_make_relative_eh_frame \\\n\t\tfrvfdpic_elf_use_relative_eh_frame\n#undef elf_backend_can_make_lsda_relative_eh_frame\n#define elf_backend_can_make_lsda_relative_eh_frame \\\n\t\tfrvfdpic_elf_use_relative_eh_frame\n#undef elf_backend_encode_eh_address\n#define elf_backend_encode_eh_address \\\n\t\tfrvfdpic_elf_encode_eh_address\n\n#undef elf_backend_may_use_rel_p\n#define elf_backend_may_use_rel_p       1\n#undef elf_backend_may_use_rela_p\n#define elf_backend_may_use_rela_p      1\n/* We use REL for dynamic relocations only.  */\n#undef elf_backend_default_use_rela_p\n#define elf_backend_default_use_rela_p  1\n\n#undef elf_backend_omit_section_dynsym\n#define elf_backend_omit_section_dynsym _frvfdpic_link_omit_section_dynsym\n\n#include \"elf32-target.h\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/plugin.c": "/* Plugin support for BFD.\n   Copyright 2009\n   Free Software Foundation, Inc.\n\n   This file is part of BFD, the Binary File Descriptor library.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n   MA 02110-1301, USA.  */\n\n#include \"config.h\"\n#include <assert.h>\n#include <dlfcn.h>\n#include <stdarg.h>\n#include \"plugin-api.h\"\n#include \"sysdep.h\"\n#include \"plugin.h\"\n#include \"libbfd.h\"\n#include \"libiberty.h\"\n#include <dirent.h>\n\n#define bfd_plugin_close_and_cleanup                  _bfd_generic_close_and_cleanup\n#define bfd_plugin_bfd_free_cached_info               _bfd_generic_bfd_free_cached_info\n#define bfd_plugin_new_section_hook                   _bfd_generic_new_section_hook\n#define bfd_plugin_get_section_contents               _bfd_generic_get_section_contents\n#define bfd_plugin_get_section_contents_in_window     _bfd_generic_get_section_contents_in_window\n#define bfd_plugin_bfd_copy_private_header_data       _bfd_generic_bfd_copy_private_header_data\n#define bfd_plugin_bfd_merge_private_bfd_data         _bfd_generic_bfd_merge_private_bfd_data\n#define bfd_plugin_bfd_copy_private_header_data       _bfd_generic_bfd_copy_private_header_data\n#define bfd_plugin_bfd_set_private_flags              _bfd_generic_bfd_set_private_flags\n#define bfd_plugin_core_file_matches_executable_p     generic_core_file_matches_executable_p\n#define bfd_plugin_bfd_is_local_label_name            _bfd_nosymbols_bfd_is_local_label_name\n#define bfd_plugin_bfd_is_target_special_symbol       ((bfd_boolean (*) (bfd *, asymbol *)) bfd_false)\n#define bfd_plugin_get_lineno                         _bfd_nosymbols_get_lineno\n#define bfd_plugin_find_nearest_line                  _bfd_nosymbols_find_nearest_line\n#define bfd_plugin_find_inliner_info                  _bfd_nosymbols_find_inliner_info\n#define bfd_plugin_bfd_make_debug_symbol              _bfd_nosymbols_bfd_make_debug_symbol\n#define bfd_plugin_read_minisymbols                   _bfd_generic_read_minisymbols\n#define bfd_plugin_minisymbol_to_symbol               _bfd_generic_minisymbol_to_symbol\n#define bfd_plugin_set_arch_mach                      bfd_default_set_arch_mach\n#define bfd_plugin_set_section_contents               _bfd_generic_set_section_contents\n#define bfd_plugin_bfd_get_relocated_section_contents bfd_generic_get_relocated_section_contents\n#define bfd_plugin_bfd_relax_section                  bfd_generic_relax_section\n#define bfd_plugin_bfd_link_hash_table_create         _bfd_generic_link_hash_table_create\n#define bfd_plugin_bfd_link_hash_table_free           _bfd_generic_link_hash_table_free\n#define bfd_plugin_bfd_link_add_symbols               _bfd_generic_link_add_symbols\n#define bfd_plugin_bfd_link_just_syms                 _bfd_generic_link_just_syms\n#define bfd_plugin_bfd_final_link                     _bfd_generic_final_link\n#define bfd_plugin_bfd_link_split_section             _bfd_generic_link_split_section\n#define bfd_plugin_bfd_gc_sections                    bfd_generic_gc_sections\n#define bfd_plugin_bfd_merge_sections                 bfd_generic_merge_sections\n#define bfd_plugin_bfd_is_group_section               bfd_generic_is_group_section\n#define bfd_plugin_bfd_discard_group                  bfd_generic_discard_group\n#define bfd_plugin_section_already_linked             _bfd_generic_section_already_linked\n#define bfd_plugin_bfd_define_common_symbol           bfd_generic_define_common_symbol\n\nstatic enum ld_plugin_status\nmessage (int level ATTRIBUTE_UNUSED,\n\t const char * format, ...)\n{\n  va_list args;\n  va_start (args, format);\n  printf (\"bfd plugin: \");\n  vprintf (format, args);\n  va_end (args);\n  return LDPS_OK;\n}\n\n/* Register a claim-file handler. */\nstatic ld_plugin_claim_file_handler claim_file;\n\nstatic enum ld_plugin_status\nregister_claim_file (ld_plugin_claim_file_handler handler)\n{\n  claim_file = handler;\n  return LDPS_OK;\n}\n\nstatic enum ld_plugin_status\nadd_symbols (void * handle,\n\t     int nsyms,\n\t     const struct ld_plugin_symbol * syms)\n{\n  bfd *abfd = handle;\n  struct plugin_data_struct *plugin_data =\n    bfd_alloc (abfd, sizeof (plugin_data_struct));;\n\n  plugin_data->nsyms = nsyms;\n  plugin_data->syms = syms;\n\n  if (nsyms != 0)\n    abfd->flags |= HAS_SYMS;\n\n  abfd->tdata.plugin_data = plugin_data;\n  return LDPS_OK;\n}\n\nstatic const char *plugin_program_name;\n\nvoid\nbfd_plugin_set_program_name (const char *program_name)\n{\n  plugin_program_name = program_name;\n}\n\nstatic int\ntry_load_plugin (const char *pname)\n{\n  static void *plugin_handle;\n  int tv_size = 4;\n  struct ld_plugin_tv tv[tv_size];\n  int i;\n  ld_plugin_onload onload;\n  enum ld_plugin_status status;\n\n  plugin_handle = dlopen (pname, RTLD_NOW);\n  if (!plugin_handle)\n    {\n      (*_bfd_error_handler)(\"%s\\n\", dlerror ());\n      return 0;\n    }\n\n  onload = dlsym (plugin_handle, \"onload\");\n  if (!onload)\n    goto err;\n\n  i = 0;\n  tv[i].tv_tag = LDPT_MESSAGE;\n  tv[i].tv_u.tv_message = message;\n\n  ++i;\n  tv[i].tv_tag = LDPT_REGISTER_CLAIM_FILE_HOOK;\n  tv[i].tv_u.tv_register_claim_file = register_claim_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_ADD_SYMBOLS;\n  tv[i].tv_u.tv_add_symbols = add_symbols;\n\n  ++i;\n  tv[i].tv_tag = LDPT_NULL;\n  tv[i].tv_u.tv_val = 0;\n\n  status = (*onload)(tv);\n\n  if (status != LDPS_OK)\n    goto err;\n\n  if (!claim_file)\n    goto err;\n\n  return 1;\n\n err:\n  plugin_handle = NULL;\n  return 0;\n}\n\nstatic const char *plugin_name;\n\nvoid\nbfd_plugin_set_plugin (const char *p)\n{\n  plugin_name = p;\n}\n\nstatic int\nload_plugin (void)\n{\n  char *plugin_dir;\n  char *p;\n  DIR *d;\n  struct dirent *ent;\n  int found = 0;\n\n  if (plugin_name)\n    return try_load_plugin (plugin_name);\n\n  if (plugin_program_name == NULL)\n    return 0;\n\n  plugin_dir = concat (BINDIR, \"/../lib/bfd-plugins\", NULL);\n  p = make_relative_prefix (plugin_program_name,\n\t\t\t    BINDIR,\n\t\t\t    plugin_dir);\n  free (plugin_dir);\n  plugin_dir = NULL;\n\n  d = opendir (p);\n  if (!d)\n    goto out;\n\n  while ((ent = readdir (d)))\n    {\n      char *full_name;\n      struct stat s;\n\n      full_name = concat (p, \"/\", ent->d_name, NULL);\n      if (stat(full_name, &s) == 0 && S_ISREG (s.st_mode))\n\tfound = try_load_plugin (full_name);\n      free (full_name);\n      if (found)\n\tbreak;\n    }\n\n out:\n  free (p);\n  if (d)\n    closedir (d);\n\n  return found;\n}\n\n\nstatic const bfd_target *\nbfd_plugin_object_p (bfd *abfd)\n{\n  int claimed = 0;\n  int t = load_plugin ();\n  struct ld_plugin_input_file file;\n  if (!t)\n    return NULL;\n\n  file.name = abfd->filename;\n\n  if (abfd->iostream)\n    {\n      file.fd = fileno (abfd->iostream);\n      file.offset = 0;\n      file.filesize = 0; /*FIXME*/\n    }\n  else\n    {\n      bfd *archive = abfd->my_archive;\n      BFD_ASSERT (archive);\n      file.fd = fileno (archive->iostream);\n      file.offset = abfd->origin;\n      file.filesize = arelt_size (abfd);\n\n    }\n  file.handle = abfd;\n  claim_file (&file, &claimed);\n  if (!claimed)\n    return NULL;\n\n  return abfd->xvec;\n}\n\n/* Copy any private info we understand from the input bfd\n   to the output bfd.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_bfd_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t      bfd *obfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\n/* Copy any private info we understand from the input section\n   to the output section.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_section_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t  asection *isection ATTRIBUTE_UNUSED,\n\t\t\t\t\t  bfd *obfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t  asection *osection ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\n/* Copy any private info we understand from the input symbol\n   to the output symbol.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_symbol_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t asymbol *isymbol ATTRIBUTE_UNUSED,\n\t\t\t\t\t bfd *obfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t asymbol *osymbol ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\nstatic bfd_boolean\nbfd_plugin_bfd_print_private_bfd_data (bfd *abfd ATTRIBUTE_UNUSED, PTR ptr ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\nstatic char *\nbfd_plugin_core_file_failing_command (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return NULL;\n}\n\nstatic int\nbfd_plugin_core_file_failing_signal (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nstatic long\nbfd_plugin_get_symtab_upper_bound (bfd *abfd)\n{\n  struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;\n  long nsyms = plugin_data->nsyms;\n\n  BFD_ASSERT (nsyms >= 0);\n\n  return ((nsyms + 1) * sizeof (asymbol *));\n}\n\nstatic flagword\nconvert_flags (const struct ld_plugin_symbol *sym)\n{\n switch (sym->def)\n   { \n   case LDPK_DEF:\n   case LDPK_COMMON:\n   case LDPK_UNDEF:\n     return BSF_GLOBAL;\n\n   case LDPK_WEAKUNDEF:\n   case LDPK_WEAKDEF:\n     return BSF_GLOBAL | BSF_WEAK;\n\n   default:\n     BFD_ASSERT (0);\n     return 0;\n   }\n}\n\nstatic long\nbfd_plugin_canonicalize_symtab (bfd *abfd,\n\t\t\t\tasymbol **alocation)\n{\n  struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;\n  long nsyms = plugin_data->nsyms;\n  const struct ld_plugin_symbol *syms = plugin_data->syms;\n  static asection fake_section;\n  static asection fake_common_section;\n  int i;\n\n  fake_section.name = \".text\";\n  fake_common_section.flags = SEC_IS_COMMON;\n\n  for (i = 0; i < nsyms; i++)\n    {\n      asymbol *s = bfd_alloc (abfd, sizeof (asymbol)); \n\n      BFD_ASSERT (s);\n      alocation[i] = s;\n\n      s->the_bfd = abfd;\n      s->name = syms[i].name;\n      s->value = 0;\n      s->flags = convert_flags (&syms[i]);\n      switch (syms[i].def)\n\t{\n\tcase LDPK_COMMON:\n\t  s->section = &fake_common_section;\n\t  break;\n\tcase LDPK_UNDEF:\n\tcase LDPK_WEAKUNDEF:\n\t  s->section = bfd_und_section_ptr;\n\t  break;\n\tcase LDPK_DEF:\n\tcase LDPK_WEAKDEF:\n\t  s->section = &fake_section;\n\t  break;\n\tdefault:\n\t  BFD_ASSERT (0);\n\t}\n\n      s->udata.p = (void *) &syms[i];\n    }\n\n  return nsyms;\n}\n\nstatic void\nbfd_plugin_print_symbol (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t PTR afile ATTRIBUTE_UNUSED,\n\t\t\t asymbol *symbol ATTRIBUTE_UNUSED,\n\t\t\t bfd_print_symbol_type how ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n}\n\nstatic void\nbfd_plugin_get_symbol_info (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t    asymbol *symbol,\n\t\t\t    symbol_info *ret)\n{\n  bfd_symbol_info (symbol, ret);\n}\n\n/* Make an empty symbol. */\n\nstatic asymbol *\nbfd_plugin_make_empty_symbol (bfd *abfd)\n{\n  asymbol *new_symbol = bfd_zalloc (abfd, sizeof (asymbol));\n  if (new_symbol == NULL)\n    return new_symbol;\n  new_symbol->the_bfd = abfd;\n  return new_symbol;\n}\n\nstatic int\nbfd_plugin_sizeof_headers (bfd *a ATTRIBUTE_UNUSED,\n\t\t\t   struct bfd_link_info *info ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nstatic bfd_boolean\nbfd_plugin_mkobject (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nconst bfd_target plugin_vec =\n{\n  \"plugin\",\t\t\t/* Name.  */\n  bfd_target_unknown_flavour,\n  BFD_ENDIAN_LITTLE,\t\t/* Target byte order.  */\n  BFD_ENDIAN_LITTLE,\t\t/* Target headers byte order.  */\n  (HAS_RELOC | EXEC_P |\t\t/* Object flags.  */\n   HAS_LINENO | HAS_DEBUG |\n   HAS_SYMS | HAS_LOCALS | DYNAMIC | WP_TEXT | D_PAGED),\n  (SEC_CODE | SEC_DATA | SEC_ROM | SEC_HAS_CONTENTS\n   | SEC_ALLOC | SEC_LOAD | SEC_RELOC),\t/* Section flags.  */\n  0,\t\t\t\t/* symbol_leading_char.  */\n  '/',\t\t\t\t/* ar_pad_char.  */\n  15,\t\t\t\t/* ar_max_namelen.  */\n\n  bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n  bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n  bfd_getl16, bfd_getl_signed_16, bfd_putl16,\t/* data */\n  bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n  bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n  bfd_getl16, bfd_getl_signed_16, bfd_putl16,\t/* hdrs */\n\n  {\t\t\t\t/* bfd_check_format.  */\n    _bfd_dummy_target,\n    bfd_plugin_object_p,\n    bfd_generic_archive_p,\n    _bfd_dummy_target\n  },\n  {\t\t\t\t/* bfd_set_format.  */\n    bfd_false,\n    bfd_plugin_mkobject,\n    _bfd_generic_mkarchive,\n    bfd_false,\n  },\n  {\t\t\t\t/* bfd_write_contents.  */\n    bfd_false,\n    bfd_false,\n    _bfd_write_archive_contents,\n    bfd_false,\n  },\n\n  BFD_JUMP_TABLE_GENERIC (bfd_plugin),\n  BFD_JUMP_TABLE_COPY (bfd_plugin),\n  BFD_JUMP_TABLE_CORE (bfd_plugin),\n  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),\n  BFD_JUMP_TABLE_SYMBOLS (bfd_plugin),\n  BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),\n  BFD_JUMP_TABLE_WRITE (bfd_plugin),\n  BFD_JUMP_TABLE_LINK (bfd_plugin),\n  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),\n\n  NULL,\n\n  NULL  \t\t\t/* backend_data.  */\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/configure.in": "dnl Process this file with autoconf to produce a configure script.\ndnl\n\nAC_PREREQ(2.59)\nAC_INIT\nAC_CONFIG_SRCDIR([libbfd.c])\n\nAC_CANONICAL_TARGET\nAC_ISC_POSIX\n\nAM_INIT_AUTOMAKE(bfd, 2.20.1)\n\ndnl These must be called before LT_INIT, because it may want\ndnl to call AC_CHECK_PROG.\nAC_CHECK_TOOL(AR, ar)\nAC_CHECK_TOOL(RANLIB, ranlib, :)\n\ndnl Default to a non shared library.  This may be overridden by the\ndnl configure option --enable-shared.\nAC_DISABLE_SHARED\n\nAC_PROG_CC\nAC_GNU_SOURCE\nAC_USE_SYSTEM_EXTENSIONS\n\nLT_INIT([dlopen])\n\nAC_PLUGINS\n\nAM_CONDITIONAL(PLUGINS, test \"$plugins\" = \"yes\")\n\nif test \"$plugins\" = \"yes\"; then\n  if test \"$enable_dlopen\" != \"yes\" ; then\n    AC_MSG_ERROR([\n      Building BFD with plugin support requires a host that supports -ldl.])\n  fi\n  enable_targets=\"$enable_targets plugin\"\nfi\n\ncase \"${target}\" in\nchangequote(,)dnl\n  sparc-*-solaris*|i[3-7]86-*-solaris*)\nchangequote([,])dnl\n    # On native 32bit sparc and ia32 solaris, large-file and procfs support\n    # are mutually exclusive; and without procfs support, the elf module\n    # cannot provide certain routines such as elfcore_write_prpsinfo\n    # or elfcore_write_prstatus.  So unless the user explicitly requested\n    # large-file support through the --enable-largefile switch, disable\n    # large-file support in favor of procfs support.\n    if test \"${target}\" = \"${host}\" -a \"$enable_largefile\" != 'yes'; then\n      if test \"$plugins\" = \"no\"; then\n        enable_largefile=\"no\"\n      fi\n    fi\n    ;;\nesac\n\nAC_SYS_LARGEFILE\n\nAC_ARG_ENABLE(64-bit-bfd,\n[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],\n[case \"${enableval}\" in\n  yes)  want64=true  ;;\n  no)   want64=false ;;\n  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;\nesac],[want64=false])dnl\n\nAC_ARG_ENABLE(targets,\n[  --enable-targets        alternative target configurations],\n[case \"${enableval}\" in\n  yes | \"\") AC_MSG_ERROR([enable-targets option must specify target names or 'all'])\n            ;;\n  no)       enable_targets= ;;\n  *)        enable_targets=$enableval ;;\nesac])dnl\n\nAC_ARG_WITH(mmap,\n[  --with-mmap             try using mmap for BFD input files if available],\n[case \"${withval}\" in\n  yes)  want_mmap=true ;;\n  no)   want_mmap=false ;;\n  *)    AC_MSG_ERROR(bad value ${withval} for BFD with-mmap option) ;;\nesac],[want_mmap=false])dnl\n\nAC_ARG_ENABLE(secureplt,\n[  --enable-secureplt      Default to creating read-only plt entries],\n[case \"${enableval}\" in\n  yes)  use_secureplt=true  ;;\n  no)   use_secureplt=false ;;\n  *)    AC_MSG_ERROR(bad value ${enableval} for secureplt option) ;;\nesac],[use_secureplt=false])dnl\nif test $use_secureplt = true; then\n  AC_DEFINE(USE_SECUREPLT, 1,\n    [Define if we should default to creating read-only plt entries])\nfi\n\nDEBUGDIR=${libdir}/debug\nAC_ARG_WITH(separate-debug-dir,\n  AS_HELP_STRING([--with-separate-debug-dir=DIR],\n                 [Look for global separate debug info in DIR [[default=LIBDIR/debug]]]),\n[DEBUGDIR=\"${withval}\"])\nAC_SUBST(DEBUGDIR)\n\n# Check to see if we should allow the generation of\n# symbols with the ELF standard's STT_COMMON type.\nAC_ARG_ENABLE(elf-stt-common,\n[  --enable-elf-stt-common Allow the generation of ELF symbols with the STT_COMMON type],\n[case \"${enableval}\" in\n  yes) want_elf_stt_common=true ;;\n  no)  want_elf_stt_common=false ;;\n  *)   AC_MSG_ERROR(bad value ${enableval} for ELF STT_COMMON option) ;;\n esac],\n# We have to choose a default behaviour.  For native builds we could\n# test whether the loader supports the STT_COMMON type, but that would\n# mean that built binaries could not be exported to older systems where\n# the loader does not support it. So by default we always choose to\n# disable this feature.\n  want_elf_stt_common=false)dnl\nif test $want_elf_stt_common = true; then\n  AC_DEFINE(USE_STT_COMMON, 1,\n    [Define if we may generate symbols with ELF's STT_COMMON type])\nfi\n\t \nACX_PKGVERSION([GNU Binutils])\nACX_BUGURL([http://www.sourceware.org/bugzilla/])\n\nAM_BINUTILS_WARNINGS\n\nAC_CONFIG_HEADERS(config.h:config.in)\n\nif test -z \"$target\" ; then\n    AC_MSG_ERROR(Unrecognized target system type; please check config.sub.)\nfi\n\nAM_MAINTAINER_MODE\nAM_CONDITIONAL(GENINSRC_NEVER, false)\nAM_INSTALL_LIBBFD\nAC_EXEEXT\n\nhost64=false\ntarget64=false\nbfd_default_target_size=32\n\n# host stuff:\n\nALL_LINGUAS=\"fr tr ja es sv da zh_CN ro rw vi fi id ru\"\nZW_GNU_GETTEXT_SISTER_DIR\nAM_PO_SUBDIRS\n\n# Permit host specific settings.\n. ${srcdir}/configure.host\n\nAC_SUBST(HDEFINES)\nAC_PROG_INSTALL\n\nBFD_HOST_64BIT_LONG=0\nBFD_HOST_64BIT_LONG_LONG=0\nBFD_HOST_64_BIT_DEFINED=0\nBFD_HOST_64_BIT=\nBFD_HOST_U_64_BIT=\nBFD_HOSTPTR_T=\"unsigned long\"\n\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(void *)\nAC_CHECK_SIZEOF(long)\n\nif test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n  host64=true\nfi\n\nif test \"x${ac_cv_sizeof_long}\" = \"x8\"; then\n  BFD_HOST_64BIT_LONG=1\n  test -n \"${HOST_64BIT_TYPE}\" || HOST_64BIT_TYPE=\"long\"\n  test -n \"${HOST_U_64BIT_TYPE}\" || HOST_U_64BIT_TYPE=\"unsigned long\"\nelif test \"x${ac_cv_sizeof_long_long}\" = \"x8\"; then\n  BFD_HOST_64BIT_LONG_LONG=1\n  test -n \"${HOST_64BIT_TYPE}\" || HOST_64BIT_TYPE=\"long long\"\n  test -n \"${HOST_U_64BIT_TYPE}\" || HOST_U_64BIT_TYPE=\"unsigned long long\"\n  if test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n    BFD_HOSTPTR_T=\"unsigned long long\"\n  fi\nfi\n\nif test -n \"${HOST_64BIT_TYPE}\" -a -n \"${HOST_U_64BIT_TYPE}\"; then\n  BFD_HOST_64_BIT_DEFINED=1\n  BFD_HOST_64_BIT=\"${HOST_64BIT_TYPE}\"\n  BFD_HOST_U_64_BIT=\"${HOST_U_64BIT_TYPE}\"\nfi\n\nAC_SUBST(BFD_HOST_64BIT_LONG)\nAC_SUBST(BFD_HOST_64BIT_LONG_LONG)\nAC_SUBST(BFD_HOST_64_BIT_DEFINED)\nAC_SUBST(BFD_HOST_64_BIT)\nAC_SUBST(BFD_HOST_U_64_BIT)\nAC_SUBST(BFD_HOSTPTR_T)\n\nBFD_CC_FOR_BUILD\n\nAC_CHECK_HEADERS(alloca.h stddef.h string.h strings.h stdlib.h time.h unistd.h)\nAC_CHECK_HEADERS(fcntl.h sys/file.h sys/time.h sys/stat.h)\nGCC_HEADER_STDINT(bfd_stdint.h)\nAC_HEADER_TIME\nAC_HEADER_DIRENT\nACX_HEADER_STRING\nAC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf fdopen getuid getgid fileno)\nAC_CHECK_FUNCS(strtoull)\n\nAC_CHECK_DECLS(basename)\nAC_CHECK_DECLS(ftello)\nAC_CHECK_DECLS(ftello64)\nAC_CHECK_DECLS(fseeko)\nAC_CHECK_DECLS(fseeko64)\n\nBFD_BINARY_FOPEN\n\nAC_CHECK_DECLS(ffs)\nAC_CHECK_DECLS(free)\nAC_CHECK_DECLS(getenv)\nAC_CHECK_DECLS(malloc)\nAC_CHECK_DECLS(realloc)\nAC_CHECK_DECLS(stpcpy)\nAC_CHECK_DECLS(strstr)\nAC_CHECK_DECLS(snprintf)\nAC_CHECK_DECLS(vsnprintf)\n\n# Link in zlib if we can.  This allows us to read compressed debug sections.\n# This is used only by compress.c.\nAC_SEARCH_LIBS(zlibVersion, z, [AC_CHECK_HEADERS(zlib.h)])\n\n# If we are configured native, pick a core file support file.\nCOREFILE=\nCOREFLAG=\nTRAD_HEADER=\nif test \"${target}\" = \"${host}\"; then\n  case \"${host}\" in\n  alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu)\n\tCOREFILE=''\n\t;;\n  alpha*-*-linux-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/alphalinux.h\"'\n\t;;\n  alpha*-*-netbsd* | alpha*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  alpha*-*-*)\t\tCOREFILE=osf-core.lo ;;\n  arm-*-freebsd* | arm-*-kfreebsd*-gnu)\n\t\t\tCOREFILE='' ;;\n  arm-*-netbsd* | arm-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  arm-*-riscix)\t\tCOREFILE=trad-core.lo ;;\n  hppa*-*-hpux*)\tCOREFILE=hpux-core.lo ;;\n  hppa*-*-hiux*)\tCOREFILE=hpux-core.lo ;;\n  hppa*-*-mpeix*)\tCOREFILE=hpux-core.lo ;;\n  hppa*-*-bsd*)\t\tCOREFILE=\"hpux-core.lo hppabsd-core.lo\"\n\t\t\tCOREFLAG=\"-DHPUX_CORE -DHPPABSD_CORE\" ;;\n  hppa*-*-netbsd* | hppa*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n\n  i370-*-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i370linux.h\"'\n\t;;\n\nchangequote(,)dnl\n  i[3-7]86-sequent-bsd*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/symmetry.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-sequent-sysv4*) ;;\n  i[3-7]86-sequent-sysv*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/symmetry.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-bsdi)\nchangequote([,])dnl\n\tCOREFILE=\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-bsd* | i[3-7]86-*-freebsd[123] | i[3-7]86-*-freebsd[123]\\.* | i[3-7]86-*-freebsd4\\.[01234] | i[3-7]86-*-freebsd4\\.[01234]\\.* | i[3-7]86-*-freebsd*aout*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i386bsd.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-freebsd* | i[3-7]86-*-kfreebsd*-gnu | i[3-7]86-*-dragonfly*)\nchangequote([,])dnl\n\tCOREFILE=''\n\tTRAD_HEADER='\"hosts/i386bsd.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-netbsd* | i[3-7]86-*-knetbsd*-gnu | i[3-7]86-*-openbsd*)\nchangequote([,])dnl\n\tCOREFILE=netbsd-core.lo\n\t;;\nchangequote(,)dnl\n  i[3-7]86-esix-sysv3*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/esix.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-sco3.2v5*)\nchangequote([,])dnl\n\tCOREFILE=sco5-core.lo\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-sco* | i[3-7]86-*-isc*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i386sco.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-mach3*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i386mach3.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-linux-*)\nchangequote([,])dnl\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i386linux.h\"'\n\t;;\nchangequote(,)dnl\n  i[3-7]86-*-isc*)\tCOREFILE=trad-core.lo ;;\n  i[3-7]86-*-aix*)\tCOREFILE=aix386-core.lo ;;\nchangequote([,])dnl\n  i860-*-mach3* | i860-*-osf1*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/i860mach3.h\"'\n\t;;\n  mips-*-netbsd* | mips*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  mips-dec-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/decstation.h\"'\n\t;;\n  mips-sgi-irix4*)\tCOREFILE=irix-core.lo ;;\n  mips-sgi-irix5*)\tCOREFILE=irix-core.lo ;;\n  mips-sgi-irix6*)\tCOREFILE=irix-core.lo ;;\n  mips-*-sysv4*)\t;;\n  mips-*-sysv* | mips-*-riscos*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/riscos.h\"'\n\t;;\n  mips-sony-bsd*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/news-mips.h\"'\n\t;;\n  m68*-bull*-sysv*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/dpx2.h\"'\n\t;;\n  m68*-hp-hpux*)\tCOREFILE=hpux-core.lo ;;\n  m68*-hp-bsd*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/hp300bsd.h\"'\n\t;;\n  m68*-*-linux-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/m68klinux.h\"'\n\t;;\n  m68*-motorola-sysv*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/delta68.h\"'\n\t;;\n  m68*-sony-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/news.h\"'\n\t;;\n  m68*-*-netbsd* | m68*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  m68*-apple-aux*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/m68kaux.h\"'\n\t;;\n  m88*-*-sysv4*)\n\t;;\n  m88*-motorola-sysv*)\n\tCOREFILE=ptrace-core.lo\n\t;;\n  m88*-*-mach3*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/m88kmach3.h\"'\n\t;;\n  m88*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  ns32k-pc532-mach)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/pc532mach.h\"'\n\t;;\n  ns32k-*-netbsd* | ns32k-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  rs6000-*-lynx*)\n  \tCOREFILE=lynx-core.lo\n\t;;\nchangequote(,)dnl\n  rs6000-*-aix[5-9].* | powerpc-*-aix[5-9].*)\nchangequote([,])dnl\n        COREFILE=rs6000-core.lo\n\tCOREFLAG=\"$COREFLAG -DAIX_5_CORE -DAIX_CORE_DUMPX_CORE\"\n\t;;\nchangequote(,)dnl\n  rs6000-*-aix4.[3-9]* | powerpc-*-aix4.[3-9]*)\nchangequote([,])dnl\n        COREFILE=rs6000-core.lo\n\tCOREFLAG=\"$COREFLAG -DAIX_CORE_DUMPX_CORE\"\n\t# Not all versions of AIX with -DAIX_CORE_DUMPX_CORE\n\t# have c_impl as a member of struct core_dumpx\n\tAC_MSG_CHECKING([for c_impl in struct core_dumpx])\n\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <core.h>]], [[struct core_dumpx c; c.c_impl = 0;]])],[AC_DEFINE(HAVE_ST_C_IMPL, 1,\n\t    [Define if struct core_dumpx has member c_impl])\n\t  AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)])\n\t;;\n  rs6000-*-aix4*)\tCOREFILE=rs6000-core.lo ;;\n  rs6000-*-*)\t\tCOREFILE=rs6000-core.lo ;;\n  powerpc-*-aix4*)\tCOREFILE=rs6000-core.lo ;;\n  powerpc-*-aix*)\tCOREFILE=rs6000-core.lo ;;\n  powerpc-*-beos*)\t;;\n  powerpc-*-freebsd* | powerpc-*-kfreebsd*-gnu)\n\t\t        COREFILE='' ;;\n  powerpc-*-netbsd*)\tCOREFILE=netbsd-core.lo ;;\n  powerpc-*-*bsd*)\tCOREFILE=netbsd-core.lo ;;\n  s390*-*-*)            COREFILE=trad-core.lo ;;\n  sh*-*-netbsd* | sh*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  sparc-*-netbsd* | sparc*-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  tahoe-*-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/tahoe.h\"'\n\t;;\n  vax-*-netbsd* | vax-*-openbsd*)\n  \tCOREFILE=netbsd-core.lo\n\t;;\n  vax-*-ultrix2*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/vaxult2.h\"'\n\t;;\n  vax-*-ultrix*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/vaxult2.h\"'\n\t;;\n  vax-*-linux-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/vaxlinux.h\"'\n\t;;\n  vax-*-*)\n\tCOREFILE=trad-core.lo\n\tTRAD_HEADER='\"hosts/vaxbsd.h\"'\n\t;;\n  x86_64-*-netbsd* | x86_64-*-openbsd*)\n\tCOREFILE=netbsd-core.lo\n\t;;\n  esac\n\n  case \"$COREFILE\" in\n  aix386-core.lo)\tCOREFLAG=-DAIX386_CORE ;;\n  hppabsd-core.lo)\tCOREFLAG=-DHPPABSD_CORE ;;\n  hpux-core.lo)\t\tCOREFLAG=-DHPUX_CORE ;;\n  irix-core.lo)\t\tCOREFLAG=-DIRIX_CORE ;;\n  lynx-core.lo)\t\tCOREFLAG=-DLYNX_CORE ;;\n  netbsd-core.lo)\tCOREFLAG=-DNETBSD_CORE ;;\n  osf-core.lo)\t\tCOREFLAG=-DOSF_CORE ;;\n  ptrace-core.lo)\tCOREFLAG=-DPTRACE_CORE ;;\n  rs6000-core.lo)\tCOREFLAG=\"$COREFLAG -DAIX_CORE\" ;;\n  sco5-core.lo)\t\tCOREFLAG=\"$COREFLAG -DSCO5_CORE\" ;;\n  trad-core.lo)\t\tCOREFLAG=\"$COREFLAG -DTRAD_CORE\" ;;\n  esac\n\n  # ELF corefile support has several flavors, but all of\n  # them use something called <sys/procfs.h>\n  AC_CHECK_HEADERS(sys/procfs.h)\n  if test \"$ac_cv_header_sys_procfs_h\" = yes; then\n    BFD_HAVE_SYS_PROCFS_TYPE(prstatus_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(prstatus32_t)\n    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus_t, pr_who)\n    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(prstatus32_t, pr_who)\n    BFD_HAVE_SYS_PROCFS_TYPE(pstatus_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(pxstatus_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(pstatus32_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(prpsinfo32_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(psinfo_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(psinfo32_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(lwpstatus_t)\n    BFD_HAVE_SYS_PROCFS_TYPE(lwpxstatus_t)\n    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_context)\n    BFD_HAVE_SYS_PROCFS_TYPE_MEMBER(lwpstatus_t, pr_reg)\n    BFD_HAVE_SYS_PROCFS_TYPE(win32_pstatus_t)\n  fi\nfi\nAC_SUBST(COREFILE)\nAC_SUBST(COREFLAG)\nif test -n \"$TRAD_HEADER\"; then\n  AC_DEFINE_UNQUOTED(TRAD_HEADER, $TRAD_HEADER,\n    [Name of host specific header file to include in trad-core.c.])\nfi\n\n# Check if linker supports --as-needed and --no-as-needed options\nAC_CACHE_CHECK(linker --as-needed support, bfd_cv_ld_as_needed,\n\t[bfd_cv_ld_as_needed=no\n\tif $LD --help 2>/dev/null | grep as-needed > /dev/null; then\n\t\tbfd_cv_ld_as_needed=yes\n\tfi\n\t])\n\nLT_LIB_M\n\n# When building a shared libbfd, link against the pic version of libiberty\n# so that apps that use libbfd won't need libiberty just to satisfy any\n# libbfd references.\n# We can't do that if a pic libiberty is unavailable since including non-pic\n# code would insert text relocations into libbfd.\nSHARED_LIBADD=\nSHARED_LDFLAGS=\nif test \"$enable_shared\" = \"yes\"; then\nchangequote(,)dnl\n  x=`sed -n -e 's/^[ \t]*PICFLAG[ \t]*=[ \t]*//p' < ../libiberty/Makefile | sed -n '$p'`\nchangequote([,])dnl\n  if test -n \"$x\"; then\n    SHARED_LIBADD=\"-L`pwd`/../libiberty/pic -liberty\"\n  fi\n\n# More hacks to build DLLs on Windows.\n  case \"${host}\" in\n  *-*-cygwin*)\n    SHARED_LDFLAGS=\"-no-undefined\"\n    SHARED_LIBADD=\"-L`pwd`/../libiberty -liberty -L`pwd`/../intl -lintl -lcygwin -lkernel32\"\n  ;;\n  esac\n\n  if test -n \"$SHARED_LIBADD\"; then\n    if test -n \"$LIBM\"; then\n      if test x\"$bfd_cv_ld_as_needed\" = xyes; then\n\t# Link against libm only when needed.  Put -lc, -lm inside -Wl\n\t# to stop libtool reordering these options.\n\tSHARED_LIBADD=\"$SHARED_LIBADD -Wl,-lc,--as-needed,`echo $LIBM | sed 's/ /,/g'`,--no-as-needed\"\n      else\n\tSHARED_LIBADD=\"$SHARED_LIBADD $LIBM\"\n      fi\n    fi\n  fi\nfi\nAC_SUBST(SHARED_LDFLAGS)\nAC_SUBST(SHARED_LIBADD)\n\n# target stuff:\n\n# Canonicalize the secondary target names.\nif test -n \"$enable_targets\" ; then\n    for targ in `echo $enable_targets | sed 's/,/ /g'`\n    do\n\tresult=`$ac_config_sub $targ 2>/dev/null`\n\tif test -n \"$result\" ; then\n\t    canon_targets=\"$canon_targets $result\"\n\telse\n\t    # Allow targets that config.sub doesn't recognize, like \"all\".\n\t    canon_targets=\"$canon_targets $targ\"\n\tfi\n    done\nfi\n\nall_targets=false\ndefvec=\nselvecs=\nassocvecs=\nselarchs=\nTDEFINES=\nfor targ in $target $canon_targets\ndo\n    if test \"x$targ\" = \"xall\"; then\n        all_targets=true\n\tassocvecs=\"$assocvecs $targ_defvec $targ_selvecs\"\n    else\n\t. $srcdir/config.bfd\n\tif test \"x$targ\" = \"x$target\"; then\n\t    defvec=$targ_defvec\n\tfi\n\tselvecs=\"$selvecs $targ_defvec $targ_selvecs\"\n\tselarchs=\"$selarchs $targ_archs\"\n\tTDEFINES=\"$TDEFINES $targ_cflags\"\n    fi\ndone\nAC_SUBST(TDEFINES)\n\n# This processing still needs to be done if we're to decide properly whether\n# 64-bit support needs to be compiled in.  Currently, it will be included if\n# the default or any other explicitly requested target requires it; it\n# will not be included on a 32-bit host if no 64-bit target is requested, and\n# no \"--with-64-bit-bfd\" option is given, even if \"--enable-targets=all\" is\n# used.\n\n# uniq the default and selected vectors in all the configured targets.\nf=\"\"\nfor i in $selvecs ; do\n    case \" $f \" in\n    *\" $i \"*) ;;\n    *) f=\"$f $i\" ;;\n    esac\ndone\nselvecs=\"$f\"\n\n\n# uniq the associated vectors in all the configured targets.\nf=\"\"\nfor i in $assocvecs ; do\n    case \" $f \" in\n    *\" $i \"*) ;;\n    *) f=\"$f $i\" ;;\n    esac\ndone\nassocvecs=\"$f\"\n\n\n# uniq the architectures in all the configured targets.\nf=\"\"\nfor i in $selarchs ; do\n    case \" $f \" in\n    *\" $i \"*) ;;\n    *) f=\"$f $i\" ;;\n    esac\ndone\nselarchs=\"$f\"\n\n# Target backend .o files.\ntb=\n\nelf=\"elf.lo elflink.lo elf-attrs.lo elf-strtab.lo\n     elf-eh-frame.lo dwarf1.lo\"\n\nfor vec in $selvecs\ndo\n    target_size=32\n    case \"$vec\" in\n    # This list is alphabetized to make it easy to compare\n    # with the two vector lists in targets.c.  For the same reason,\n    # use one entry per line, even though this leads to long lines.\n    a_out_adobe_vec)\t\ttb=\"$tb aout-adobe.lo aout32.lo\" ;;\n    aix5coff64_vec)\t\ttb=\"$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo\"; target_size=64 ;;\n    aout0_big_vec)\t\ttb=\"$tb aout0.lo aout32.lo\" ;;\n    aout_arm_big_vec)\t\ttb=\"$tb aout-arm.lo aout32.lo\" ;;\n    aout_arm_little_vec)\ttb=\"$tb aout-arm.lo aout32.lo\" ;;\n    apollocoff_vec)\t\ttb=\"$tb coff-apollo.lo\" ;;\n    arm_epoc_pe_big_vec)\ttb=\"$tb epoc-pe-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_epoc_pe_little_vec)\ttb=\"$tb epoc-pe-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_epoc_pei_big_vec)\ttb=\"$tb epoc-pei-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_epoc_pei_little_vec)\ttb=\"$tb epoc-pei-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_wince_pe_big_vec)\ttb=\"$tb pe-arm-wince.lo pe-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_wince_pe_little_vec)\ttb=\"$tb pe-arm-wince.lo pe-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_wince_pei_big_vec)\ttb=\"$tb pei-arm-wince.lo pei-arm.lo peigen.lo cofflink.lo \" ;;\n    arm_wince_pei_little_vec)\ttb=\"$tb pei-arm-wince.lo pei-arm.lo peigen.lo cofflink.lo \" ;;\n    armcoff_big_vec)\t\ttb=\"$tb coff-arm.lo cofflink.lo \" ;;\n    armcoff_little_vec)\t\ttb=\"$tb coff-arm.lo cofflink.lo \" ;;\n    armnetbsd_vec)\t\ttb=\"$tb armnetbsd.lo aout32.lo\" ;;\n    armpe_big_vec)\t\ttb=\"$tb pe-arm.lo peigen.lo cofflink.lo \" ;;\n    armpe_little_vec)\t\ttb=\"$tb pe-arm.lo peigen.lo cofflink.lo \" ;;\n    armpei_big_vec)\t\ttb=\"$tb pei-arm.lo peigen.lo cofflink.lo \" ;;\n    armpei_little_vec)\t\ttb=\"$tb pei-arm.lo peigen.lo cofflink.lo \" ;;\n    b_out_vec_big_host)\t\ttb=\"$tb bout.lo aout32.lo\" ;;\n    b_out_vec_little_host)\ttb=\"$tb bout.lo aout32.lo\" ;;\n    bfd_pei_ia64_vec)\t\ttb=\"$tb pei-ia64.lo pepigen.lo cofflink.lo\"; target_size=64 ;;\n    bfd_elf32_am33lin_vec)\ttb=\"$tb elf32-am33lin.lo elf32.lo $elf\" ;;\n    bfd_elf32_avr_vec)\t\ttb=\"$tb elf32-avr.lo elf32.lo $elf\" ;;\n    bfd_elf32_bfin_vec)\t\ttb=\"$tb elf32-bfin.lo elf32.lo $elf\" ;;\n    bfd_elf32_bfinfdpic_vec)\ttb=\"$tb elf32-bfin.lo elf32.lo $elf\" ;;\n    bfd_elf32_big_generic_vec) \ttb=\"$tb elf32-gen.lo elf32.lo $elf\" ;;\n    bfd_elf32_bigarc_vec)\ttb=\"$tb elf32-arc.lo elf32.lo $elf\" ;;\n    bfd_elf32_bigarm_vec)\ttb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_bigarm_symbian_vec)\t\n                                tb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_bigarm_vxworks_vec)\t\n                                tb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_bigmips_vec) \ttb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_bigmips_vxworks_vec)\n\t\t\t \ttb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_cr16_vec)\t\ttb=\"$tb elf32-cr16.lo elf32.lo $elf\" ;;\n    bfd_elf32_cr16c_vec)\ttb=\"$tb elf32-cr16c.lo elf32.lo $elf\" ;;\n    bfd_elf32_cris_vec)\t\ttb=\"$tb elf32-cris.lo elf32.lo $elf\" ;;\n    bfd_elf32_crx_vec)          tb=\"$tb elf32-crx.lo elf32.lo $elf\" ;;    \n    bfd_elf32_d10v_vec)\t\ttb=\"$tb elf32-d10v.lo elf32.lo $elf\" ;;\n    bfd_elf32_d30v_vec)\t\ttb=\"$tb elf32-d30v.lo elf32.lo $elf\" ;;\n    bfd_elf32_dlx_big_vec)\ttb=\"$tb elf32-dlx.lo elf32.lo $elf\" ;;\n    bfd_elf32_fr30_vec)\t\ttb=\"$tb elf32-fr30.lo elf32.lo $elf\" ;;\n    bfd_elf32_frv_vec)\t\ttb=\"$tb elf32-frv.lo elf32.lo $elf\" ;;\n    bfd_elf32_frvfdpic_vec)\ttb=\"$tb elf32-frv.lo elf32.lo $elf\" ;;\n    bfd_elf32_moxie_vec)\ttb=\"$tb elf32-moxie.lo elf32.lo $elf\" ;;\n    bfd_elf32_h8300_vec)\ttb=\"$tb elf32-h8300.lo elf32.lo $elf\" ;;\n    bfd_elf32_hppa_linux_vec)\ttb=\"$tb elf32-hppa.lo elf32.lo $elf\" ;;\n    bfd_elf32_hppa_nbsd_vec)\ttb=\"$tb elf32-hppa.lo elf32.lo $elf\" ;;\n    bfd_elf32_hppa_vec)\t\ttb=\"$tb elf32-hppa.lo elf32.lo $elf\" ;;\n    bfd_elf32_i370_vec)\t\ttb=\"$tb elf32-i370.lo elf32.lo $elf\" ;;\n    bfd_elf32_i386_dragonfly_vec)\n\t\t\t\ttb=\"$tb elf32-i386.lo elf-ifunc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_i386_freebsd_vec)\ttb=\"$tb elf32-i386.lo elf-ifunc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_i386_vxworks_vec)\ttb=\"$tb elf32-i386.lo elf-ifunc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_i386_vec)\t\ttb=\"$tb elf32-i386.lo elf-ifunc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_i860_little_vec)\ttb=\"$tb elf32-i860.lo elf32.lo $elf\" ;;\n    bfd_elf32_i860_vec)\t\ttb=\"$tb elf32-i860.lo elf32.lo $elf\" ;;\n    bfd_elf32_i960_vec)\t\ttb=\"$tb elf32-i960.lo elf32.lo $elf\" ;;\n    bfd_elf32_ia64_big_vec)\ttb=\"$tb elf32-ia64.lo elf32.lo $elf\" ;;\n    bfd_elf32_ia64_hpux_big_vec) tb=\"$tb elf32-ia64.lo elf32.lo $elf\";;\n    bfd_elf32_ip2k_vec)\t\ttb=\"$tb elf32-ip2k.lo elf32.lo $elf\" ;;\n    bfd_elf32_iq2000_vec)       tb=\"$tb elf32-iq2000.lo elf32.lo $elf\" ;;\n    bfd_elf32_lm32_vec)         tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n    bfd_elf32_lm32fdpic_vec)         tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n    bfd_elf32_little_generic_vec) tb=\"$tb elf32-gen.lo elf32.lo $elf\" ;;\n    bfd_elf32_littlearc_vec)\ttb=\"$tb elf32-arc.lo elf32.lo $elf\" ;;\n    bfd_elf32_littlearm_symbian_vec)\n                                tb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_littlearm_vxworks_vec)\n                                tb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_littlearm_vec)\ttb=\"$tb elf32-arm.lo elf32.lo elf-vxworks.lo $elf\" ;;\n    bfd_elf32_littlemips_vec) \ttb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_littlemips_vxworks_vec)\n\t\t\t \ttb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_m32c_vec)         tb=\"$tb elf32-m32c.lo elf32.lo $elf\" ;;\n    bfd_elf32_m32r_vec)\t\ttb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n    bfd_elf32_m32rle_vec)       tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n    bfd_elf32_m32rlin_vec)      tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n    bfd_elf32_m32rlelin_vec)    tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n    bfd_elf32_m68hc11_vec)\ttb=\"$tb elf32-m68hc11.lo elf32-m68hc1x.lo elf32.lo $elf\" ;;\n    bfd_elf32_m68hc12_vec)\ttb=\"$tb elf32-m68hc12.lo elf32-m68hc1x.lo elf32.lo $elf\" ;;\n    bfd_elf32_m68k_vec)\t\ttb=\"$tb elf32-m68k.lo elf32.lo $elf\" ;;\n    bfd_elf32_m88k_vec)\t\ttb=\"$tb elf32-m88k.lo elf32.lo $elf\" ;;\n    bfd_elf32_mcore_big_vec)\ttb=\"$tb elf32-mcore.lo elf32.lo $elf\" ;;\n    bfd_elf32_mcore_little_vec)\ttb=\"$tb elf32-mcore.lo elf32.lo $elf\" ;;\n    bfd_elf32_mep_vec)\t\ttb=\"$tb elf32-mep.lo elf32.lo $elf\" ;;\n    bfd_elf32_mep_little_vec)\ttb=\"$tb elf32-mep.lo elf32.lo $elf\" ;;\n    bfd_elf32_microblaze_vec)\ttb=\"$tb elf32-microblaze.lo elf32.lo $elf\" ;;\n    bfd_elf32_mn10200_vec)\ttb=\"$tb elf-m10200.lo elf32.lo $elf\" ;;\n    bfd_elf32_mn10300_vec)\ttb=\"$tb elf-m10300.lo elf32.lo $elf\" ;;\n    bfd_elf32_mt_vec)           tb=\"$tb elf32-mt.lo elf32.lo $elf\" ;;\n    bfd_elf32_msp430_vec)\ttb=\"$tb elf32-msp430.lo elf32.lo $elf\" ;;\n    bfd_elf32_nbigmips_vec)\ttb=\"$tb elfn32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf32_nlittlemips_vec)\ttb=\"$tb elfn32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf32_ntradbigmips_vec)\ttb=\"$tb elfn32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf32_ntradlittlemips_vec) tb=\"$tb elfn32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf32_openrisc_vec)\ttb=\"$tb elf32-openrisc.lo elf32.lo $elf\" ;;\n    bfd_elf32_or32_big_vec)\ttb=\"$tb elf32-or32.lo elf32.lo $elf\" ;;\n    bfd_elf32_pj_vec)           tb=\"$tb elf32-pj.lo elf32.lo $elf\";;\n    bfd_elf32_pjl_vec)          tb=\"$tb elf32-pj.lo elf32.lo $elf\";;\n    bfd_elf32_powerpc_vec)\ttb=\"$tb elf32-ppc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_powerpcle_vec)\ttb=\"$tb elf32-ppc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_powerpc_vxworks_vec) tb=\"$tb elf32-ppc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_s390_vec)\t\ttb=\"$tb elf32-s390.lo elf32.lo $elf\" ;;\n    bfd_elf32_bigscore_vec)     tb=\"$tb elf32-score.lo elf32-score7.lo elf32.lo $elf\"; want64=true; target_size=64;;\n    bfd_elf32_littlescore_vec)  tb=\"$tb elf32-score.lo elf32-score7.lo elf32.lo $elf\"; want64=true; target_size=64;;\n    # FIXME: We include cofflink.lo not because it's needed for\n    # bfd_elf32_sh64[l]_vec, but because we include bfd_elf32_sh[l]_vec\n    # which needs it but does not list it.  Should be fixed in right place.\n    bfd_elf32_sh64_vec)\t\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" target_size=64 ;;\n    bfd_elf32_sh64l_vec)\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" target_size=64 ;;\n    bfd_elf32_sh64lin_vec)\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" target_size=64 ;;\n    bfd_elf32_sh64blin_vec)\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" target_size=64 ;;\n    bfd_elf32_sh64lnbsd_vec)\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" ;;\n    bfd_elf32_sh64nbsd_vec)\ttb=\"$tb elf32-sh64.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf cofflink.lo\" ;;\n    bfd_elf32_sh_vec)\t\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo\" ;;\n    bfd_elf32_shblin_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo cofflink.lo\" ;;\n    bfd_elf32_shl_vec)\t\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo\" ;;\n    bfd_elf32_shl_symbian_vec)\ttb=\"$tb elf32-sh-symbian.lo elf32-sh64-com.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo\" ;;\n    bfd_elf32_shlin_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo cofflink.lo\" ;;\n    bfd_elf32_shlnbsd_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo cofflink.lo\" ;;\n    bfd_elf32_shlvxworks_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo\" ;;\n    bfd_elf32_shnbsd_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo cofflink.lo\" ;;\n    bfd_elf32_shvxworks_vec)\ttb=\"$tb elf32-sh.lo elf-vxworks.lo elf32.lo $elf coff-sh.lo\" ;;\n    bfd_elf32_sparc_vec)\ttb=\"$tb elf32-sparc.lo elfxx-sparc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_sparc_vxworks_vec) tb=\"$tb elf32-sparc.lo elfxx-sparc.lo elf-vxworks.lo elf32.lo $elf\" ;;\n    bfd_elf32_spu_vec)\t\ttb=\"$tb elf32-spu.lo elf32.lo $elf\" ;;\n    bfd_elf32_tradbigmips_vec)  tb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_tradlittlemips_vec) tb=\"$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\" ;;\n    bfd_elf32_us_cris_vec)\ttb=\"$tb elf32-cris.lo elf32.lo $elf\" ;;\n    bfd_elf32_v850_vec)\t\ttb=\"$tb elf32-v850.lo elf32.lo $elf\" ;;\n    bfd_elf32_vax_vec)\t\ttb=\"$tb elf32-vax.lo elf32.lo $elf\" ;;\n    bfd_elf32_xstormy16_vec)\ttb=\"$tb elf32-xstormy16.lo elf32.lo $elf\" ;;\n    bfd_elf32_xc16x_vec)\t\ttb=\"$tb elf32-xc16x.lo elf32.lo $elf\" ;;\n    bfd_elf32_xtensa_le_vec)\ttb=\"$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf\" ;;\n    bfd_elf32_xtensa_be_vec)\ttb=\"$tb xtensa-isa.lo xtensa-modules.lo elf32-xtensa.lo elf32.lo $elf\" ;;\n    bfd_elf64_alpha_freebsd_vec) tb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_alpha_vec)\ttb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_big_generic_vec) \ttb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_bigmips_vec) \ttb=\"$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf64_hppa_linux_vec)\ttb=\"$tb elf64-hppa.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_hppa_vec)\t\ttb=\"$tb elf64-hppa.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_ia64_big_vec)\ttb=\"$tb elf64-ia64.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_ia64_hpux_big_vec) tb=\"$tb elf64-ia64.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_ia64_little_vec)\ttb=\"$tb elf64-ia64.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_ia64_vms_vec)\ttb=\"$tb elf64-ia64.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_little_generic_vec) tb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_littlemips_vec) \ttb=\"$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf64_mmix_vec) \ttb=\"$tb elf64-mmix.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_powerpc_vec)\ttb=\"$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_powerpcle_vec)\ttb=\"$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_s390_vec)\t\ttb=\"$tb elf64-s390.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_sh64_vec)\t\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sh64l_vec)\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sh64lin_vec)\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sh64blin_vec)\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sh64lnbsd_vec)\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sh64nbsd_vec)\ttb=\"$tb elf64-sh64.lo elf64.lo $elf\" target_size=64 ;;\n    bfd_elf64_sparc_vec)\ttb=\"$tb elf64-sparc.lo elfxx-sparc.lo elf-vxworks.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_sparc_freebsd_vec) tb=\"$tb elf64-sparc.lo elfxx-sparc.lo elf-vxworks.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_tradbigmips_vec)\ttb=\"$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf64_tradlittlemips_vec) tb=\"$tb elf64-mips.lo elf64.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo\"; target_size=64 ;;\n    bfd_elf64_x86_64_freebsd_vec) tb=\"$tb elf64-x86-64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_x86_64_vec)\ttb=\"$tb elf64-x86-64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_l1om_vec)\t\ttb=\"$tb elf64-x86-64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_elf64_l1om_freebsd_vec) tb=\"$tb elf64-x86-64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n    bfd_mmo_vec)\t\ttb=\"$tb mmo.lo\" target_size=64 ;;\n    bfd_powerpc_pe_vec)         tb=\"$tb pe-ppc.lo peigen.lo cofflink.lo\" ;;\n    bfd_powerpc_pei_vec)        tb=\"$tb pei-ppc.lo peigen.lo cofflink.lo\" ;;\n    bfd_powerpcle_pe_vec)       tb=\"$tb pe-ppc.lo peigen.lo cofflink.lo\" ;;\n    bfd_powerpcle_pei_vec)      tb=\"$tb pei-ppc.lo peigen.lo cofflink.lo\" ;;\n    cris_aout_vec)\t\ttb=\"$tb aout-cris.lo\" ;;\n    demo_64_vec)\t\ttb=\"$tb demo64.lo aout64.lo\"; target_size=64 ;;\n    ecoff_big_vec)\t\ttb=\"$tb coff-mips.lo ecoff.lo ecofflink.lo\" ;;\n    ecoff_biglittle_vec)\ttb=\"$tb coff-mips.lo ecoff.lo ecofflink.lo\" ;;\n    ecoff_little_vec)\t\ttb=\"$tb coff-mips.lo ecoff.lo ecofflink.lo\" ;;\n    ecoffalpha_little_vec)\ttb=\"$tb coff-alpha.lo ecoff.lo ecofflink.lo\"; target_size=64 ;;\n    go32coff_vec)\t\ttb=\"$tb coff-go32.lo cofflink.lo\" ;;\n    go32stubbedcoff_vec)\ttb=\"$tb coff-stgo32.lo cofflink.lo\" ;;\n    h8300coff_vec)\t\ttb=\"$tb coff-h8300.lo reloc16.lo\" ;;\n    h8500coff_vec)\t\ttb=\"$tb coff-h8500.lo reloc16.lo\" ;;\n    host_aout_vec)\t\ttb=\"$tb host-aout.lo aout32.lo\" ;;\n    hp300bsd_vec)\t\ttb=\"$tb hp300bsd.lo aout32.lo\" ;;\n    hp300hpux_vec)\t\ttb=\"$tb hp300hpux.lo aout32.lo\" ;;\n    i386aout_vec)\t\ttb=\"$tb i386aout.lo aout32.lo\" ;;\n    i386bsd_vec)\t\ttb=\"$tb i386bsd.lo aout32.lo\" ;;\n    i386coff_vec)\t\ttb=\"$tb coff-i386.lo cofflink.lo\" ;;\n    x86_64coff_vec)\t\ttb=\"$tb coff-x86_64.lo cofflink.lo\"; target_size=64 ;;\n    i386dynix_vec)\t\ttb=\"$tb i386dynix.lo aout32.lo\" ;;\n    i386freebsd_vec)\t\ttb=\"$tb i386freebsd.lo aout32.lo\" ;;\n    i386linux_vec)\t\ttb=\"$tb i386linux.lo aout32.lo\" ;;\n    i386lynx_aout_vec)\t\ttb=\"$tb i386lynx.lo lynx-core.lo aout32.lo\" ;;\n    i386lynx_coff_vec)\t\ttb=\"$tb cf-i386lynx.lo cofflink.lo lynx-core.lo\" ;;\n    i386mach3_vec)\t\ttb=\"$tb i386mach3.lo aout32.lo\" ;;\n    i386msdos_vec)\t\ttb=\"$tb i386msdos.lo\" ;;\n    i386netbsd_vec)\t\ttb=\"$tb i386netbsd.lo aout32.lo\" ;;\n    i386os9k_vec)\t\ttb=\"$tb i386os9k.lo aout32.lo\" ;;\n    i386pe_vec)\t\t\ttb=\"$tb pe-i386.lo peigen.lo cofflink.lo\" ;;\n    i386pei_vec)\t\ttb=\"$tb pei-i386.lo peigen.lo cofflink.lo\" ;;\n    x86_64pe_vec)\t\ttb=\"$tb pe-x86_64.lo pex64igen.lo cofflink.lo\"; target_size=64 ;;\n    x86_64pei_vec)\t\ttb=\"$tb pei-x86_64.lo pex64igen.lo cofflink.lo\"; target_size=64 ;;\n    i860coff_vec)\t\ttb=\"$tb coff-i860.lo cofflink.lo\" ;;\n    icoff_big_vec)\t\ttb=\"$tb coff-i960.lo cofflink.lo\" ;;\n    icoff_little_vec)\t\ttb=\"$tb coff-i960.lo cofflink.lo\" ;;\n    ieee_vec)\t\t\ttb=\"$tb ieee.lo\" ;;\n    m68k4knetbsd_vec)\t\ttb=\"$tb m68k4knetbsd.lo aout32.lo\" ;;\n    m68kaux_coff_vec)\t\ttb=\"$tb coff-aux.lo coff-m68k.lo cofflink.lo\" ;;\n    m68kcoff_vec)\t\ttb=\"$tb coff-m68k.lo cofflink.lo\" ;;\n    m68kcoffun_vec)\t\ttb=\"$tb coff-u68k.lo coff-m68k.lo cofflink.lo\" ;;\n    m68klinux_vec)\t\ttb=\"$tb m68klinux.lo aout32.lo\" ;;\n    m68knetbsd_vec)\t\ttb=\"$tb m68knetbsd.lo aout32.lo\" ;;\n    m68ksysvcoff_vec)\t\ttb=\"$tb coff-svm68k.lo cofflink.lo\" ;;\n    m88kbcs_vec)\t\ttb=\"$tb coff-m88k.lo\" ;;\n    m88kmach3_vec)\t\ttb=\"$tb m88kmach3.lo aout32.lo\" ;;\n    m88kopenbsd_vec)\t\ttb=\"$tb m88kopenbsd.lo aout32.lo\" ;;\n    maxqcoff_vec)               tb=\"$tb coff-maxq.lo\" ;;\n    mach_o_be_vec)              tb=\"$tb mach-o.lo\" ;;\n    mach_o_le_vec)              tb=\"$tb mach-o.lo\" ;;\n    mach_o_fat_vec)             tb=\"$tb mach-o.lo\" ;;\n    mach_o_i386_vec)            tb=\"$tb mach-o-i386.lo\" ;;\n    mcore_pe_big_vec)\t\ttb=\"$tb pe-mcore.lo peigen.lo cofflink.lo\" ;;\n    mcore_pe_little_vec)\ttb=\"$tb pe-mcore.lo peigen.lo cofflink.lo\" ;;\n    mcore_pei_big_vec)\t\ttb=\"$tb pei-mcore.lo peigen.lo cofflink.lo\" ;;\n    mcore_pei_little_vec)\ttb=\"$tb pei-mcore.lo peigen.lo cofflink.lo\" ;;\n    mipslpe_vec)\t\ttb=\"$tb pe-mips.lo peigen.lo cofflink.lo\" ;;\n    mipslpei_vec)\t\ttb=\"$tb pei-mips.lo peigen.lo cofflink.lo\" ;;\n    newsos3_vec)\t\ttb=\"$tb newsos3.lo aout32.lo\" ;;\n    nlm32_alpha_vec)\t\ttb=\"$tb nlm32-alpha.lo nlm32.lo nlm.lo\"; target_size=64 ;;\n    nlm32_i386_vec)\t\ttb=\"$tb nlm32-i386.lo nlm32.lo nlm.lo\" ;;\n    nlm32_powerpc_vec)\t\ttb=\"$tb nlm32-ppc.lo nlm32.lo nlm.lo\" ;;\n    nlm32_sparc_vec)\t\ttb=\"$tb nlm32-sparc.lo nlm32.lo nlm.lo\" ;;\n    or32coff_big_vec)\t\ttb=\"$tb coff-or32.lo cofflink.lo\" ;;\n    pc532machaout_vec)\t\ttb=\"$tb pc532-mach.lo aout-ns32k.lo\" ;;\n    pc532netbsd_vec)\t\ttb=\"$tb ns32knetbsd.lo aout-ns32k.lo\" ;;\n    pef_vec)                    tb=\"$tb pef.lo\" ;;\n    pef_xlib_vec)               tb=\"$tb pef.lo\" ;;\n    pdp11_aout_vec)\t\ttb=\"$tb pdp11.lo\" ;;\n    plugin_vec)                 tb=\"$tb plugin.lo\" ;;\n    pmac_xcoff_vec)\t\ttb=\"$tb coff-rs6000.lo xcofflink.lo\" ;;\n    ppcboot_vec)\t\ttb=\"$tb ppcboot.lo\" ;;\n    riscix_vec)\t\t\ttb=\"$tb aout32.lo riscix.lo\" ;;\n    rs6000coff64_vec)\t\ttb=\"$tb coff64-rs6000.lo xcofflink.lo aix5ppc-core.lo\"; target_size=64 ;;\n    rs6000coff_vec)\t\ttb=\"$tb coff-rs6000.lo xcofflink.lo\" ;;\n    shcoff_small_vec)\t\ttb=\"$tb coff-sh.lo cofflink.lo\" ;;\n    shcoff_vec)\t\t\ttb=\"$tb coff-sh.lo cofflink.lo\" ;;\n    shlcoff_small_vec)\t\ttb=\"$tb coff-sh.lo cofflink.lo\" ;;\n    shlcoff_vec)\t\ttb=\"$tb coff-sh.lo cofflink.lo\" ;;\n    shlpe_vec)\t\t\ttb=\"$tb pe-sh.lo coff-sh.lo peigen.lo cofflink.lo\" ;;\n    shlpei_vec)\t\t\ttb=\"$tb pei-sh.lo coff-sh.lo peigen.lo cofflink.lo\" ;;\n    som_vec)\t\t\ttb=\"$tb som.lo\" ;;\n    sparccoff_vec)\t\ttb=\"$tb coff-sparc.lo\" ;;\n    sparcle_aout_vec)\t\ttb=\"$tb aout-sparcle.lo aout32.lo\" ;;\n    sparclinux_vec)\t\ttb=\"$tb sparclinux.lo aout32.lo\" ;;\n    sparclynx_aout_vec)\t\ttb=\"$tb sparclynx.lo lynx-core.lo aout32.lo\" ;;\n    sparclynx_coff_vec)\t\ttb=\"$tb cf-sparclynx.lo lynx-core.lo\" ;;\n    sparcnetbsd_vec)\t\ttb=\"$tb sparcnetbsd.lo aout32.lo\" ;;\n    sunos_big_vec)\t\ttb=\"$tb sunos.lo aout32.lo\" ;;\n    sym_vec)                    tb=\"$tb xsym.lo\" ;;\n    tic30_aout_vec)\t\ttb=\"$tb aout-tic30.lo\" ;;\n    tic30_coff_vec)\t\ttb=\"$tb coff-tic30.lo\" ;;\n    tic4x_coff0_vec)            tb=\"$tb coff-tic4x.lo\" ;;\n    tic4x_coff0_beh_vec)        tb=\"$tb coff-tic4x.lo\" ;;\n    tic4x_coff1_vec)            tb=\"$tb coff-tic4x.lo\" ;;\n    tic4x_coff1_beh_vec)        tb=\"$tb coff-tic4x.lo\" ;;\n    tic4x_coff2_vec)            tb=\"$tb coff-tic4x.lo\" ;;\n    tic4x_coff2_beh_vec)        tb=\"$tb coff-tic4x.lo\" ;;\n    tic54x_coff0_beh_vec)\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic54x_coff0_vec)\t\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic54x_coff1_beh_vec)\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic54x_coff1_vec)\t\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic54x_coff2_beh_vec)\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic54x_coff2_vec)\t\ttb=\"$tb coff-tic54x.lo\" ;;\n    tic80coff_vec)\t\ttb=\"$tb coff-tic80.lo cofflink.lo\" ;;\n    vaxnetbsd_vec)\t\ttb=\"$tb vaxnetbsd.lo aout32.lo\" ;;\n    vax1knetbsd_vec)\t\ttb=\"$tb vax1knetbsd.lo aout32.lo\" ;;\n    vaxbsd_vec)\t\t\ttb=\"$tb vaxbsd.lo aout32.lo\" ;;\n    versados_vec)\t\ttb=\"$tb versados.lo\" ;;\n    vms_alpha_vec)\t\ttb=\"$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo\"; target_size=64 ;;\n    vms_vax_vec)\t\ttb=\"$tb vms.lo vms-hdr.lo vms-gsd.lo vms-tir.lo vms-misc.lo\" ;;\n    w65_vec)\t\t\ttb=\"$tb coff-w65.lo reloc16.lo\" ;;\n    we32kcoff_vec)\t\ttb=\"$tb coff-we32k.lo\" ;;\n    z80coff_vec)\t\ttb=\"$tb coff-z80.lo reloc16.lo\" ;;\n    z8kcoff_vec)\t\ttb=\"$tb coff-z8k.lo reloc16.lo cofflink.lo\" ;;\n\n    # These appear out of order in targets.c\n    srec_vec)\t\t\ttb=\"$tb srec.lo\" ;;\n    symbolsrec_vec)\t\ttb=\"$tb srec.lo\" ;;\n    tekhex_vec)\t\t\ttb=\"$tb tekhex.lo\" ;;\n    cisco_core_big_vec)\t\ttb=\"$tb cisco-core.lo\" ;;\n    cisco_core_little_vec)\ttb=\"$tb cisco-core.lo\" ;;\n\n    \"\")\t\t\t;;\n    *) AC_MSG_ERROR(*** unknown target vector $vec) ;;\n    esac\n\n    if test ${target_size} = 64; then\n\ttarget64=true\n    fi\n    if test x\"${vec}\" = x\"${defvec}\"; then\n\tbfd_default_target_size=${target_size}\n    fi\ndone\n\n# Target architecture .o files.\n# A couple of CPUs use shorter file names to avoid problems on DOS\n# filesystems.\nta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.lo/g -e s/mn10200/m10200/ -e s/mn10300/m10300/`\n\n# Weed out duplicate .o files.\nf=\"\"\nfor i in $tb ; do\n    case \" $f \" in\n    *\" $i \"*) ;;\n    *) f=\"$f $i\" ;;\n    esac\ndone\ntb=\"$f\"\n\nf=\"\"\nfor i in $ta ; do\n    case \" $f \" in\n    *\" $i \"*) ;;\n    *) f=\"$f $i\" ;;\n    esac\ndone\nta=\"$f\"\n\nbfd_backends=\"$tb\"\nbfd_machines=\"$ta\"\n\nif test x${all_targets} = xtrue ; then\n  bfd_backends=\"${bfd_backends}\"' $(ALL_BACKENDS)'\n  bfd_machines=\"${bfd_machines}\"' $(ALL_MACHINES)'\n  selvecs=\n  havevecs=\n  selarchs=\n  test -n \"$assocvecs\" &&\n    assocvecs=`echo $assocvecs | sed -e 's/^/\\&/' -e 's/ \\(.\\)/,\\&\\1/g'`\nelse\t# all_targets is true\n  # Only set these if they will be nonempty, for the clever echo.\n  havevecs=\n  assocvecs=\n  test -n \"$selvecs\" &&\n    havevecs=`echo $selvecs | sed -e 's/^/-DHAVE_/' -e 's/ \\(.\\)/ -DHAVE_\\1/g'`\n  test -n \"$selvecs\" &&\n    selvecs=`echo $selvecs | sed -e 's/^/\\&/' -e 's/ \\(.\\)/,\\&\\1/g'`\n  test -n \"$selarchs\" &&\n    selarchs=`echo $selarchs | sed -e 's/^/\\&/' -e 's/ \\(.\\)/,\\&\\1/g'`\nfi\t# all_targets is true\n\ncase ${host64}-${target64}-${want64} in\n  *true*)\n    wordsize=64\n    bfd64_libs='$(BFD64_LIBS)'\n    all_backends='$(BFD64_BACKENDS) $(BFD32_BACKENDS)'\n    if test $BFD_HOST_64_BIT_DEFINED = 0; then\n      AC_MSG_WARN([You have requested a 64 bit BFD configuration, but])\n      AC_MSG_WARN([your compiler may not have a 64 bit integral type])\n    fi\n    if test -n \"$GCC\" ; then\n       bad_64bit_gcc=no;\n       AC_MSG_CHECKING([for gcc version with buggy 64-bit support])\n       # Add more tests for gcc versions with non-working 64-bit support here.\n       AC_EGREP_CPP([: 2 : 91 : 1 :],[:__GNUC__:__GNUC_MINOR__:__i386__:],\n\t\t    bad_64bit_gcc=yes;\n\t\t    AC_MSG_RESULT([yes: egcs-1.1.2 on ix86 spotted]),\n\t\t    AC_MSG_RESULT(no))\n       if test $bad_64bit_gcc = yes ; then\n\t AC_MSG_ERROR([A newer version of gcc is needed for the requested 64-bit BFD configuration])\n       fi\n    fi\n    ;;\n  false-false-false)\n    wordsize=32\n    all_backends='$(BFD32_BACKENDS)'\n    ;;\nesac\n\nAC_SUBST(wordsize)\nAC_SUBST(bfd64_libs)\nAC_SUBST(all_backends)\nAC_SUBST(bfd_backends)\nAC_SUBST(bfd_machines)\nAC_SUBST(bfd_default_target_size)\n\nif test \"$plugins\" = \"yes\"; then\n  supports_plugins=1\nelse\n  supports_plugins=0\nfi\nAC_SUBST(supports_plugins)\n\n# Determine the host dependant file_ptr a.k.a. off_t type.  In order\n# prefer: off64_t - if ftello64 and fseeko64, off_t - if ftello and\n# fseeko, long.  This assumes that sizeof off_t is .ge. sizeof long.\n# Hopefully a reasonable assumption since fseeko et.al. should be\n# upward compatible.\nAC_CHECK_FUNCS(ftello ftello64 fseeko fseeko64 fopen64)\nif test x\"$ac_cv_func_ftello\" = xyes -a x\"$ac_cv_func_fseeko\" = xyes; then\n    AC_CHECK_SIZEOF(off_t)\nfi\nAC_MSG_CHECKING([file_ptr type])\nbfd_file_ptr=\"long\"\nbfd_ufile_ptr=\"unsigned long\"\nif test x\"$ac_cv_func_ftello64\" = xyes -a x\"$ac_cv_func_fseeko64\" = xyes \\\n\t-o x\"${ac_cv_sizeof_off_t}\" = x8; then\n    bfd_file_ptr=BFD_HOST_64_BIT\n    bfd_ufile_ptr=BFD_HOST_U_64_BIT\nfi\nAC_MSG_RESULT($bfd_file_ptr)\nAC_SUBST(bfd_file_ptr)\nAC_SUBST(bfd_ufile_ptr)\n\n\ntdefaults=\"\"\ntest -n \"${defvec}\" && tdefaults=\"${tdefaults} -DDEFAULT_VECTOR=${defvec}\"\ntest -n \"${selvecs}\" && tdefaults=\"${tdefaults} -DSELECT_VECS='${selvecs}'\"\ntest -n \"${assocvecs}\" && tdefaults=\"${tdefaults} -DASSOCIATED_VECS='${assocvecs}'\"\ntest -n \"${selarchs}\" && tdefaults=\"${tdefaults} -DSELECT_ARCHITECTURES='${selarchs}'\"\ntest -n \"${havevecs}\" && tdefaults=\"${tdefaults} ${havevecs}\"\nAC_SUBST(tdefaults)\n\ndnl AC_CHECK_HEADERS(sys/mman.h)\nAC_FUNC_MMAP\nAC_CHECK_FUNCS(madvise mprotect)\ncase ${want_mmap}+${ac_cv_func_mmap_fixed_mapped} in\n  true+yes )  AC_DEFINE(USE_MMAP, 1, [Use mmap if it's available?]) ;;\nesac\n\nrm -f doc/config.status\nAC_CONFIG_FILES([Makefile doc/Makefile bfd-in3.h:bfd-in2.h po/Makefile.in:po/Make-in])\n\ndnl We need this duplication, even though we use AM_PO_SUBDIRS, because of\ndnl our two separate POTFILES.  Yuck.\nAC_CONFIG_COMMANDS([default],\n[[\ncase \"$srcdir\" in\n  .) srcdirpre= ;;\n  *) srcdirpre='$(srcdir)/' ;;\nesac\nPOFILES=\nGMOFILES=\nfor lang in dummy $OBSOLETE_ALL_LINGUAS; do\n  if test $lang != dummy; then\n    POFILES=\"$POFILES $srcdirpre$lang.po\"\n    GMOFILES=\"$GMOFILES $srcdirpre$lang.gmo\"\n  fi\ndone\nsed -e '/SRC-POTFILES =/r po/SRC-POTFILES' \\\n    -e '/BLD-POTFILES =/r po/BLD-POTFILES' \\\n    -e \"s,@POFILES@,$POFILES,\" \\\n    -e \"s,@GMOFILES@,$GMOFILES,\" \\\n    po/Makefile.in > po/Makefile]],[[]])\n\ndnl Required by html, pdf, install-pdf and install-html\nAC_SUBST(datarootdir)\nAC_SUBST(docdir)\nAC_SUBST(htmldir)\nAC_SUBST(pdfdir)\n\nAC_OUTPUT\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/intl/libgnuintl.h": "/* Message catalogs for internationalization.\n   Copyright (C) 1995-1997, 2000-2003 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify it\n   under the terms of the GNU Library General Public License as published\n   by the Free Software Foundation; either version 2, or (at your option)\n   any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Library General Public License for more details.\n\n   You should have received a copy of the GNU Library General Public\n   License along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301,\n   USA.  */\n\n#ifndef _LIBINTL_H\n#define _LIBINTL_H\t1\n\n#include <locale.h>\n\n/* The LC_MESSAGES locale category is the category used by the functions\n   gettext() and dgettext().  It is specified in POSIX, but not in ANSI C.\n   On systems that don't define it, use an arbitrary value instead.\n   On Solaris, <locale.h> defines __LOCALE_H (or _LOCALE_H in Solaris 2.5)\n   then includes <libintl.h> (i.e. this file!) and then only defines\n   LC_MESSAGES.  To avoid a redefinition warning, don't define LC_MESSAGES\n   in this case.  */\n#if !defined LC_MESSAGES && !(defined __LOCALE_H || (defined _LOCALE_H && defined __sun))\n# define LC_MESSAGES 1729\n#endif\n\n/* We define an additional symbol to signal that we use the GNU\n   implementation of gettext.  */\n#define __USE_GNU_GETTEXT 1\n\n/* Provide information about the supported file formats.  Returns the\n   maximum minor revision number supported for a given major revision.  */\n#define __GNU_GETTEXT_SUPPORTED_REVISION(major) \\\n  ((major) == 0 ? 1 : -1)\n\n/* Resolve a platform specific conflict on DJGPP.  GNU gettext takes\n   precedence over _conio_gettext.  */\n#ifdef __DJGPP__\n# undef gettext\n#endif\n\n/* Use _INTL_PARAMS, not PARAMS, in order to avoid clashes with identifiers\n   used by programs.  Similarly, test __PROTOTYPES, not PROTOTYPES.  */\n#ifndef _INTL_PARAMS\n# if __STDC__ || defined __GNUC__ || defined __SUNPRO_C || defined __cplusplus || __PROTOTYPES\n#  define _INTL_PARAMS(args) args\n# else\n#  define _INTL_PARAMS(args) ()\n# endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* We redirect the functions to those prefixed with \"libintl_\".  This is\n   necessary, because some systems define gettext/textdomain/... in the C\n   library (namely, Solaris 2.4 and newer, and GNU libc 2.0 and newer).\n   If we used the unprefixed names, there would be cases where the\n   definition in the C library would override the one in the libintl.so\n   shared library.  Recall that on ELF systems, the symbols are looked\n   up in the following order:\n     1. in the executable,\n     2. in the shared libraries specified on the link command line, in order,\n     3. in the dependencies of the shared libraries specified on the link\n        command line,\n     4. in the dlopen()ed shared libraries, in the order in which they were\n        dlopen()ed.\n   The definition in the C library would override the one in libintl.so if\n   either\n     * -lc is given on the link command line and -lintl isn't, or\n     * -lc is given on the link command line before -lintl, or\n     * libintl.so is a dependency of a dlopen()ed shared library but not\n       linked to the executable at link time.\n   Since Solaris gettext() behaves differently than GNU gettext(), this\n   would be unacceptable.\n\n   The redirection happens by default through macros in C, so that &gettext\n   is independent of the compilation unit, but through inline functions in\n   C++, in order not to interfere with the name mangling of class fields or\n   class methods called 'gettext'.  */\n\n/* The user can define _INTL_REDIRECT_INLINE or _INTL_REDIRECT_MACROS.\n   If he doesn't, we choose the method.  A third possible method is\n   _INTL_REDIRECT_ASM, supported only by GCC.  */\n#if !(defined _INTL_REDIRECT_INLINE || defined _INTL_REDIRECT_MACROS)\n# if __GNUC__ >= 2 && !defined __APPLE_CC__ && (defined __STDC__ || defined __cplusplus)\n#  define _INTL_REDIRECT_ASM\n# else\n#  ifdef __cplusplus\n#   define _INTL_REDIRECT_INLINE\n#  else\n#   define _INTL_REDIRECT_MACROS\n#  endif\n# endif\n#endif\n/* Auxiliary macros.  */\n#ifdef _INTL_REDIRECT_ASM\n# define _INTL_ASM(cname) __asm__ (_INTL_ASMNAME (__USER_LABEL_PREFIX__, #cname))\n# define _INTL_ASMNAME(prefix,cnamestring) _INTL_STRINGIFY (prefix) cnamestring\n# define _INTL_STRINGIFY(prefix) #prefix\n#else\n# define _INTL_ASM(cname)\n#endif\n\n/* Look up MSGID in the current default message catalog for the current\n   LC_MESSAGES locale.  If not found, returns MSGID itself (the default\n   text).  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_gettext (const char *__msgid);\nstatic inline char *gettext (const char *__msgid)\n{\n  return libintl_gettext (__msgid);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define gettext libintl_gettext\n#endif\nextern char *gettext _INTL_PARAMS ((const char *__msgid))\n       _INTL_ASM (libintl_gettext);\n#endif\n\n/* Look up MSGID in the DOMAINNAME message catalog for the current\n   LC_MESSAGES locale.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dgettext (const char *__domainname, const char *__msgid);\nstatic inline char *dgettext (const char *__domainname, const char *__msgid)\n{\n  return libintl_dgettext (__domainname, __msgid);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dgettext libintl_dgettext\n#endif\nextern char *dgettext _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t     const char *__msgid))\n       _INTL_ASM (libintl_dgettext);\n#endif\n\n/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY\n   locale.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dcgettext (const char *__domainname, const char *__msgid,\n\t\t\t\tint __category);\nstatic inline char *dcgettext (const char *__domainname, const char *__msgid,\n\t\t\t       int __category)\n{\n  return libintl_dcgettext (__domainname, __msgid, __category);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcgettext libintl_dcgettext\n#endif\nextern char *dcgettext _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t      const char *__msgid,\n\t\t\t\t      int __category))\n       _INTL_ASM (libintl_dcgettext);\n#endif\n\n\n/* Similar to `gettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_ngettext (const char *__msgid1, const char *__msgid2,\n\t\t\t       unsigned long int __n);\nstatic inline char *ngettext (const char *__msgid1, const char *__msgid2,\n\t\t\t      unsigned long int __n)\n{\n  return libintl_ngettext (__msgid1, __msgid2, __n);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define ngettext libintl_ngettext\n#endif\nextern char *ngettext _INTL_PARAMS ((const char *__msgid1,\n\t\t\t\t     const char *__msgid2,\n\t\t\t\t     unsigned long int __n))\n       _INTL_ASM (libintl_ngettext);\n#endif\n\n/* Similar to `dgettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dngettext (const char *__domainname, const char *__msgid1,\n\t\t\t\tconst char *__msgid2, unsigned long int __n);\nstatic inline char *dngettext (const char *__domainname, const char *__msgid1,\n\t\t\t       const char *__msgid2, unsigned long int __n)\n{\n  return libintl_dngettext (__domainname, __msgid1, __msgid2, __n);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dngettext libintl_dngettext\n#endif\nextern char *dngettext _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t      const char *__msgid1,\n\t\t\t\t      const char *__msgid2,\n\t\t\t\t      unsigned long int __n))\n       _INTL_ASM (libintl_dngettext);\n#endif\n\n/* Similar to `dcgettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dcngettext (const char *__domainname,\n\t\t\t\t const char *__msgid1, const char *__msgid2,\n\t\t\t\t unsigned long int __n, int __category);\nstatic inline char *dcngettext (const char *__domainname,\n\t\t\t\tconst char *__msgid1, const char *__msgid2,\n\t\t\t\tunsigned long int __n, int __category)\n{\n  return libintl_dcngettext (__domainname, __msgid1, __msgid2, __n, __category);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcngettext libintl_dcngettext\n#endif\nextern char *dcngettext _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t       const char *__msgid1,\n\t\t\t\t       const char *__msgid2,\n\t\t\t\t       unsigned long int __n,\n\t\t\t\t       int __category))\n       _INTL_ASM (libintl_dcngettext);\n#endif\n\n\n/* Set the current default message catalog to DOMAINNAME.\n   If DOMAINNAME is null, return the current default.\n   If DOMAINNAME is \"\", reset to the default of \"messages\".  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_textdomain (const char *__domainname);\nstatic inline char *textdomain (const char *__domainname)\n{\n  return libintl_textdomain (__domainname);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define textdomain libintl_textdomain\n#endif\nextern char *textdomain _INTL_PARAMS ((const char *__domainname))\n       _INTL_ASM (libintl_textdomain);\n#endif\n\n/* Specify that the DOMAINNAME message catalog will be found\n   in DIRNAME rather than in the system locale data base.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_bindtextdomain (const char *__domainname,\n\t\t\t\t     const char *__dirname);\nstatic inline char *bindtextdomain (const char *__domainname,\n\t\t\t\t    const char *__dirname)\n{\n  return libintl_bindtextdomain (__domainname, __dirname);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bindtextdomain libintl_bindtextdomain\n#endif\nextern char *bindtextdomain _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t\t   const char *__dirname))\n       _INTL_ASM (libintl_bindtextdomain);\n#endif\n\n/* Specify the character encoding in which the messages from the\n   DOMAINNAME message catalog will be returned.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_bind_textdomain_codeset (const char *__domainname,\n\t\t\t\t\t      const char *__codeset);\nstatic inline char *bind_textdomain_codeset (const char *__domainname,\n\t\t\t\t\t     const char *__codeset)\n{\n  return libintl_bind_textdomain_codeset (__domainname, __codeset);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bind_textdomain_codeset libintl_bind_textdomain_codeset\n#endif\nextern char *bind_textdomain_codeset _INTL_PARAMS ((const char *__domainname,\n\t\t\t\t\t\t    const char *__codeset))\n       _INTL_ASM (libintl_bind_textdomain_codeset);\n#endif\n\n\n/* Support for relocatable packages.  */\n\n/* Sets the original and the current installation prefix of the package.\n   Relocation simply replaces a pathname starting with the original prefix\n   by the corresponding pathname with the current prefix instead.  Both\n   prefixes should be directory names without trailing slash (i.e. use \"\"\n   instead of \"/\").  */\n#define libintl_set_relocation_prefix libintl_set_relocation_prefix\nextern void\n       libintl_set_relocation_prefix _INTL_PARAMS ((const char *orig_prefix,\n\t\t\t\t\t\t    const char *curr_prefix));\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* libintl.h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/plugin.h": "// plugin.h -- plugin manager for gold      -*- C++ -*-\n\n// Copyright 2008, 2009 Free Software Foundation, Inc.\n// Written by Cary Coutant <ccoutant@google.com>.\n\n// This file is part of gold.\n\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n// MA 02110-1301, USA.\n\n#ifndef GOLD_PLUGIN_H\n#define GOLD_PLUGIN_H\n\n#include <list>\n#include <string>\n\n#include \"object.h\"\n#include \"plugin-api.h\"\n#include \"workqueue.h\"\n\nnamespace gold\n{\n\nclass General_options;\nclass Input_file;\nclass Input_objects;\nclass Symbol_table;\nclass Layout;\nclass Dirsearch;\nclass Mapfile;\nclass Task_token;\nclass Pluginobj;\n\n// This class represents a single plugin library.\n\nclass Plugin\n{\n public:\n  Plugin(const char* filename)\n    : handle_(NULL),\n      filename_(filename),\n      args_(),\n      claim_file_handler_(NULL),\n      all_symbols_read_handler_(NULL),\n      cleanup_handler_(NULL)      \n  { }\n\n  ~Plugin()\n  { }\n\n  // Load the library and call its entry point.\n  void\n  load();\n\n  // Call the claim-file handler.\n  bool\n  claim_file(struct ld_plugin_input_file *plugin_input_file);\n\n  // Call the all-symbols-read handler.\n  void\n  all_symbols_read();\n\n  // Call the cleanup handler.\n  void\n  cleanup();\n\n  // Register a claim-file handler.\n  void\n  set_claim_file_handler(ld_plugin_claim_file_handler handler)\n  { this->claim_file_handler_ = handler; }\n\n  // Register an all-symbols-read handler.\n  void\n  set_all_symbols_read_handler(ld_plugin_all_symbols_read_handler handler)\n  { this->all_symbols_read_handler_ = handler; }\n\n  // Register a claim-file handler.\n  void\n  set_cleanup_handler(ld_plugin_cleanup_handler handler)\n  { this->cleanup_handler_ = handler; }\n\n  // Add an argument\n  void\n  add_option(const char *arg)\n  {\n    this->args_.push_back(arg);\n  }\n\n private:\n  Plugin(const Plugin&);\n  Plugin& operator=(const Plugin&);\n\n  // The shared library handle returned by dlopen.\n  void* handle_;\n  // The argument string given to --plugin.\n  std::string filename_;\n  // The list of argument string given to --plugin-opt.\n  std::vector<std::string> args_;\n  // The plugin's event handlers.\n  ld_plugin_claim_file_handler claim_file_handler_;\n  ld_plugin_all_symbols_read_handler all_symbols_read_handler_;\n  ld_plugin_cleanup_handler cleanup_handler_;\n};\n\n// A manager class for plugins.\n\nclass Plugin_manager\n{\n public:\n  Plugin_manager(const General_options& options)\n    : plugins_(), objects_(), deferred_layout_objects_(), input_file_(NULL),\n      plugin_input_file_(), in_replacement_phase_(false), cleanup_done_(false),\n      options_(options), workqueue_(NULL), task_(NULL), input_objects_(NULL),\n      symtab_(NULL), layout_(NULL), dirpath_(NULL), mapfile_(NULL),\n      this_blocker_(NULL)\n  { this->current_ = plugins_.end(); }\n\n  ~Plugin_manager();\n\n  // Add a plugin library.\n  void\n  add_plugin(const char* filename)\n  { this->plugins_.push_back(new Plugin(filename)); }\n\n  // Add an argument to the current plugin.\n  void\n  add_plugin_option(const char* opt)\n  {\n    Plugin* last = this->plugins_.back();\n    last->add_option(opt);\n  }\n\n  // Load all plugin libraries.\n  void\n  load_plugins();\n\n  // Call the plugin claim-file handlers in turn to see if any claim the file.\n  Pluginobj*\n  claim_file(Input_file *input_file, off_t offset, off_t filesize);\n\n  // Call the all-symbols-read handlers.\n  void\n  all_symbols_read(Workqueue* workqueue, Task* task,\n                   Input_objects* input_objects, Symbol_table* symtab,\n                   Layout* layout, Dirsearch* dirpath, Mapfile* mapfile,\n                   Task_token** last_blocker);\n\n  // Run deferred layout.\n  void\n  layout_deferred_objects();\n\n  // Call the cleanup handlers.\n  void\n  cleanup();\n\n  // Register a claim-file handler.\n  void\n  set_claim_file_handler(ld_plugin_claim_file_handler handler)\n  {\n    gold_assert(this->current_ != plugins_.end());\n    (*this->current_)->set_claim_file_handler(handler);\n  }\n\n  // Register an all-symbols-read handler.\n  void\n  set_all_symbols_read_handler(ld_plugin_all_symbols_read_handler handler)\n  {\n    gold_assert(this->current_ != plugins_.end());\n    (*this->current_)->set_all_symbols_read_handler(handler);\n  }\n\n  // Register a claim-file handler.\n  void\n  set_cleanup_handler(ld_plugin_cleanup_handler handler)\n  {\n    gold_assert(this->current_ != plugins_.end());\n    (*this->current_)->set_cleanup_handler(handler);\n  }\n\n  // Make a new Pluginobj object.  This is called when the plugin calls\n  // the add_symbols API.\n  Pluginobj*\n  make_plugin_object(unsigned int handle);\n\n  // Return the Pluginobj associated with the given HANDLE.\n  Pluginobj*\n  object(unsigned int handle) const\n  {\n    if (handle >= this->objects_.size())\n      return NULL;\n    return this->objects_[handle];\n  }\n\n  // Return TRUE if any input files have been claimed by a plugin\n  // and we are still in the initial input phase.\n  bool\n  should_defer_layout() const\n  { return !this->objects_.empty() && !this->in_replacement_phase_; }\n\n  // Add a regular object to the deferred layout list.  These are\n  // objects whose layout has been deferred until after the\n  // replacement files have arrived.\n  void\n  add_deferred_layout_object(Relobj* obj)\n  { this->deferred_layout_objects_.push_back(obj); }\n\n  // Get input file information with an open (possibly re-opened)\n  // file descriptor.\n  ld_plugin_status\n  get_input_file(unsigned int handle, struct ld_plugin_input_file *file);\n\n  // Release an input file.\n  ld_plugin_status\n  release_input_file(unsigned int handle);\n\n  // Add a new input file.\n  ld_plugin_status\n  add_input_file(char *pathname, bool is_lib);\n\n  // Return TRUE if we are in the replacement phase.\n  bool\n  in_replacement_phase() const\n  { return this->in_replacement_phase_; }\n\n private:\n  Plugin_manager(const Plugin_manager&);\n  Plugin_manager& operator=(const Plugin_manager&);\n\n  typedef std::list<Plugin*> Plugin_list;\n  typedef std::vector<Pluginobj*> Object_list;\n  typedef std::vector<Relobj*> Deferred_layout_list;\n\n  // The list of plugin libraries.\n  Plugin_list plugins_;\n  // A pointer to the current plugin.  Used while loading plugins.\n  Plugin_list::iterator current_;\n\n  // The list of plugin objects.  The index of an item in this list\n  // serves as the \"handle\" that we pass to the plugins.\n  Object_list objects_;\n\n  // The list of regular objects whose layout has been deferred.\n  Deferred_layout_list deferred_layout_objects_;\n\n  // The file currently up for claim by the plugins.\n  Input_file* input_file_;\n  struct ld_plugin_input_file plugin_input_file_;\n\n  // TRUE after the all symbols read event; indicates that we are\n  // processing replacement files whose symbols should replace the\n  // placeholder symbols from the Pluginobj objects.\n  bool in_replacement_phase_;\n\n  // TRUE if the cleanup handlers have been called.\n  bool cleanup_done_;\n\n  const General_options& options_;\n  Workqueue* workqueue_;\n  Task* task_;\n  Input_objects* input_objects_;\n  Symbol_table* symtab_;\n  Layout* layout_;\n  Dirsearch* dirpath_;\n  Mapfile* mapfile_;\n  Task_token* this_blocker_;\n};\n\n\n// An object file claimed by a plugin.  This is an abstract base class.\n// The implementation is the template class Sized_pluginobj.\n\nclass Pluginobj : public Object\n{\n public:\n\n  typedef std::vector<Symbol*> Symbols;\n\n  Pluginobj(const std::string& name, Input_file* input_file, off_t offset,\n            off_t filesize);\n\n  // Fill in the symbol resolution status for the given plugin symbols.\n  ld_plugin_status\n  get_symbol_resolution_info(int nsyms, ld_plugin_symbol* syms) const;\n\n  // Store the incoming symbols from the plugin for later processing.\n  void\n  store_incoming_symbols(int nsyms, const struct ld_plugin_symbol* syms)\n  {\n    this->nsyms_ = nsyms;\n    this->syms_ = syms;\n  }\n\n  // Return TRUE if the comdat group with key COMDAT_KEY from this object\n  // should be kept.\n  bool\n  include_comdat_group(std::string comdat_key, Layout* layout);\n\n  // Return the filename.\n  const std::string&\n  filename() const\n  { return this->input_file()->filename(); }\n\n  // Return the file descriptor.\n  int\n  descriptor()\n  { return this->input_file()->file().descriptor(); }\n\n  // Return the size of the file or archive member.\n  off_t\n  filesize()\n  { return this->filesize_; }\n\n protected:\n  // Return TRUE if this is an object claimed by a plugin.\n  virtual Pluginobj*\n  do_pluginobj()\n  { return this; }\n\n  // The number of symbols provided by the plugin.\n  int nsyms_;\n  \n  // The symbols provided by the plugin.\n  const struct ld_plugin_symbol* syms_;\n\n  // The entries in the symbol table for the external symbols.\n  Symbols symbols_;\n\n private:\n  // Size of the file (or archive member).\n  off_t filesize_;\n  // Map a comdat key symbol to a boolean indicating whether the comdat\n  // group in this object with that key should be kept.\n  typedef Unordered_map<std::string, bool> Comdat_map;\n  Comdat_map comdat_map_;\n};\n\n// A plugin object, size-specific version.\n\ntemplate<int size, bool big_endian>\nclass Sized_pluginobj : public Pluginobj\n{\n public:\n  Sized_pluginobj(const std::string& name, Input_file* input_file,\n                  off_t offset, off_t filesize);\n\n  // Read the symbols.\n  void\n  do_read_symbols(Read_symbols_data*);\n\n  // Lay out the input sections.\n  void\n  do_layout(Symbol_table*, Layout*, Read_symbols_data*);\n\n  // Add the symbols to the symbol table.\n  void\n  do_add_symbols(Symbol_table*, Read_symbols_data*, Layout*);\n\n  // Get the size of a section.\n  uint64_t\n  do_section_size(unsigned int shndx);\n\n  // Get the name of a section.\n  std::string\n  do_section_name(unsigned int shndx);\n\n  // Return a view of the contents of a section.\n  Object::Location\n  do_section_contents(unsigned int shndx);\n\n  // Return section flags.\n  uint64_t\n  do_section_flags(unsigned int shndx);\n\n  // Return section entsize.\n  uint64_t\n  do_section_entsize(unsigned int shndx);\n\n  // Return section address.\n  uint64_t\n  do_section_address(unsigned int shndx);\n\n  // Return section type.\n  unsigned int\n  do_section_type(unsigned int shndx);\n\n  // Return the section link field.\n  unsigned int\n  do_section_link(unsigned int shndx);\n\n  // Return the section link field.\n  unsigned int\n  do_section_info(unsigned int shndx);\n\n  // Return the section alignment.\n  uint64_t\n  do_section_addralign(unsigned int shndx);\n\n  // Return the Xindex structure to use.\n  Xindex*\n  do_initialize_xindex();\n\n  // Get symbol counts.\n  void\n  do_get_global_symbol_counts(const Symbol_table*, size_t*, size_t*) const;\n\n  // Add placeholder symbols from a claimed file.\n  ld_plugin_status\n  add_symbols_from_plugin(int nsyms, const ld_plugin_symbol* syms);\n\n protected:\n\n private:\n};\n\n// This Task handles handles the \"all symbols read\" event hook.\n// The plugin may add additional input files at this time, which must\n// be queued for reading.\n\nclass Plugin_hook : public Task\n{\n public:\n  Plugin_hook(const General_options& options, Input_objects* input_objects,\n\t      Symbol_table* symtab, Layout* layout, Dirsearch* dirpath,\n\t      Mapfile* mapfile, Task_token* this_blocker,\n\t      Task_token* next_blocker)\n    : options_(options), input_objects_(input_objects), symtab_(symtab),\n      layout_(layout), dirpath_(dirpath), mapfile_(mapfile),\n      this_blocker_(this_blocker), next_blocker_(next_blocker)\n  { }\n\n  ~Plugin_hook();\n\n  // The standard Task methods.\n\n  Task_token*\n  is_runnable();\n\n  void\n  locks(Task_locker*);\n\n  void\n  run(Workqueue*);\n\n  std::string\n  get_name() const\n  { return \"Plugin_hook\"; }\n\n private:\n  const General_options& options_;\n  Input_objects* input_objects_;\n  Symbol_table* symtab_;\n  Layout* layout_;\n  Dirsearch* dirpath_;\n  Mapfile* mapfile_;\n  Task_token* this_blocker_;\n  Task_token* next_blocker_;\n};\n\n} // End namespace gold.\n\n#endif // !defined(GOLD_PLUGIN_H)\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/layout.cc": "// layout.cc -- lay out output file sections for gold\n\n// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n// Written by Ian Lance Taylor <iant@google.com>.\n\n// This file is part of gold.\n\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n// MA 02110-1301, USA.\n\n#include \"gold.h\"\n\n#include <cerrno>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <utility>\n#include <fcntl.h>\n#include <unistd.h>\n#include \"libiberty.h\"\n#include \"md5.h\"\n#include \"sha1.h\"\n\n#include \"parameters.h\"\n#include \"options.h\"\n#include \"mapfile.h\"\n#include \"script.h\"\n#include \"script-sections.h\"\n#include \"output.h\"\n#include \"symtab.h\"\n#include \"dynobj.h\"\n#include \"ehframe.h\"\n#include \"compressed_output.h\"\n#include \"reduced_debug_output.h\"\n#include \"reloc.h\"\n#include \"descriptors.h\"\n#include \"plugin.h\"\n#include \"incremental.h\"\n#include \"layout.h\"\n\nnamespace gold\n{\n\n// Layout::Relaxation_debug_check methods.\n\n// Check that sections and special data are in reset states.\n// We do not save states for Output_sections and special Output_data.\n// So we check that they have not assigned any addresses or offsets.\n// clean_up_after_relaxation simply resets their addresses and offsets.\nvoid\nLayout::Relaxation_debug_check::check_output_data_for_reset_values(\n    const Layout::Section_list& sections,\n    const Layout::Data_list& special_outputs)\n{\n  for(Layout::Section_list::const_iterator p = sections.begin();\n      p != sections.end();\n      ++p)\n    gold_assert((*p)->address_and_file_offset_have_reset_values());\n\n  for(Layout::Data_list::const_iterator p = special_outputs.begin();\n      p != special_outputs.end();\n      ++p)\n    gold_assert((*p)->address_and_file_offset_have_reset_values());\n}\n  \n// Save information of SECTIONS for checking later.\n\nvoid\nLayout::Relaxation_debug_check::read_sections(\n    const Layout::Section_list& sections)\n{\n  for(Layout::Section_list::const_iterator p = sections.begin();\n      p != sections.end();\n      ++p)\n    {\n      Output_section* os = *p;\n      Section_info info;\n      info.output_section = os;\n      info.address = os->is_address_valid() ? os->address() : 0;\n      info.data_size = os->is_data_size_valid() ? os->data_size() : -1;\n      info.offset = os->is_offset_valid()? os->offset() : -1 ;\n      this->section_infos_.push_back(info);\n    }\n}\n\n// Verify SECTIONS using previously recorded information.\n\nvoid\nLayout::Relaxation_debug_check::verify_sections(\n    const Layout::Section_list& sections)\n{\n  size_t i = 0;\n  for(Layout::Section_list::const_iterator p = sections.begin();\n      p != sections.end();\n      ++p, ++i)\n    {\n      Output_section* os = *p;\n      uint64_t address = os->is_address_valid() ? os->address() : 0;\n      off_t data_size = os->is_data_size_valid() ? os->data_size() : -1;\n      off_t offset = os->is_offset_valid()? os->offset() : -1 ;\n\n      if (i >= this->section_infos_.size())\n\t{\n\t  gold_fatal(\"Section_info of %s missing.\\n\", os->name());\n\t}\n      const Section_info& info = this->section_infos_[i];\n      if (os != info.output_section)\n\tgold_fatal(\"Section order changed.  Expecting %s but see %s\\n\",\n\t\t   info.output_section->name(), os->name());\n      if (address != info.address\n\t  || data_size != info.data_size\n\t  || offset != info.offset)\n\tgold_fatal(\"Section %s changed.\\n\", os->name());\n    }\n}\n\n// Layout_task_runner methods.\n\n// Lay out the sections.  This is called after all the input objects\n// have been read.\n\nvoid\nLayout_task_runner::run(Workqueue* workqueue, const Task* task)\n{\n  off_t file_size = this->layout_->finalize(this->input_objects_,\n\t\t\t\t\t    this->symtab_,\n                                            this->target_,\n\t\t\t\t\t    task);\n\n  // Now we know the final size of the output file and we know where\n  // each piece of information goes.\n\n  if (this->mapfile_ != NULL)\n    {\n      this->mapfile_->print_discarded_sections(this->input_objects_);\n      this->layout_->print_to_mapfile(this->mapfile_);\n    }\n\n  Output_file* of = new Output_file(parameters->options().output_file_name());\n  if (this->options_.oformat_enum() != General_options::OBJECT_FORMAT_ELF)\n    of->set_is_temporary();\n  of->open(file_size);\n\n  // Queue up the final set of tasks.\n  gold::queue_final_tasks(this->options_, this->input_objects_,\n\t\t\t  this->symtab_, this->layout_, workqueue, of);\n}\n\n// Layout methods.\n\nLayout::Layout(int number_of_input_files, Script_options* script_options)\n  : number_of_input_files_(number_of_input_files),\n    script_options_(script_options),\n    namepool_(),\n    sympool_(),\n    dynpool_(),\n    signatures_(),\n    section_name_map_(),\n    segment_list_(),\n    section_list_(),\n    unattached_section_list_(),\n    special_output_list_(),\n    section_headers_(NULL),\n    tls_segment_(NULL),\n    relro_segment_(NULL),\n    symtab_section_(NULL),\n    symtab_xindex_(NULL),\n    dynsym_section_(NULL),\n    dynsym_xindex_(NULL),\n    dynamic_section_(NULL),\n    dynamic_data_(NULL),\n    eh_frame_section_(NULL),\n    eh_frame_data_(NULL),\n    added_eh_frame_data_(false),\n    eh_frame_hdr_section_(NULL),\n    build_id_note_(NULL),\n    debug_abbrev_(NULL),\n    debug_info_(NULL),\n    group_signatures_(),\n    output_file_size_(-1),\n    sections_are_attached_(false),\n    input_requires_executable_stack_(false),\n    input_with_gnu_stack_note_(false),\n    input_without_gnu_stack_note_(false),\n    has_static_tls_(false),\n    any_postprocessing_sections_(false),\n    resized_signatures_(false),\n    have_stabstr_section_(false),\n    incremental_inputs_(NULL),\n    record_output_section_data_from_script_(false),\n    script_output_section_data_list_(),\n    segment_states_(NULL),\n    relaxation_debug_check_(NULL)\n{\n  // Make space for more than enough segments for a typical file.\n  // This is just for efficiency--it's OK if we wind up needing more.\n  this->segment_list_.reserve(12);\n\n  // We expect two unattached Output_data objects: the file header and\n  // the segment headers.\n  this->special_output_list_.reserve(2);\n\n  // Initialize structure needed for an incremental build.\n  if (parameters->options().incremental())\n    this->incremental_inputs_ = new Incremental_inputs;\n\n  // The section name pool is worth optimizing in all cases, because\n  // it is small, but there are often overlaps due to .rel sections.\n  this->namepool_.set_optimize();\n}\n\n// Hash a key we use to look up an output section mapping.\n\nsize_t\nLayout::Hash_key::operator()(const Layout::Key& k) const\n{\n return k.first + k.second.first + k.second.second;\n}\n\n// Returns whether the given section is in the list of\n// debug-sections-used-by-some-version-of-gdb.  Currently,\n// we've checked versions of gdb up to and including 6.7.1.\n\nstatic const char* gdb_sections[] =\n{ \".debug_abbrev\",\n  // \".debug_aranges\",   // not used by gdb as of 6.7.1\n  \".debug_frame\",\n  \".debug_info\",\n  \".debug_line\",\n  \".debug_loc\",\n  \".debug_macinfo\",\n  // \".debug_pubnames\",  // not used by gdb as of 6.7.1\n  \".debug_ranges\",\n  \".debug_str\",\n};\n\nstatic const char* lines_only_debug_sections[] =\n{ \".debug_abbrev\",\n  // \".debug_aranges\",   // not used by gdb as of 6.7.1\n  // \".debug_frame\",\n  \".debug_info\",\n  \".debug_line\",\n  // \".debug_loc\",\n  // \".debug_macinfo\",\n  // \".debug_pubnames\",  // not used by gdb as of 6.7.1\n  // \".debug_ranges\",\n  \".debug_str\",\n};\n\nstatic inline bool\nis_gdb_debug_section(const char* str)\n{\n  // We can do this faster: binary search or a hashtable.  But why bother?\n  for (size_t i = 0; i < sizeof(gdb_sections)/sizeof(*gdb_sections); ++i)\n    if (strcmp(str, gdb_sections[i]) == 0)\n      return true;\n  return false;\n}\n\nstatic inline bool\nis_lines_only_debug_section(const char* str)\n{\n  // We can do this faster: binary search or a hashtable.  But why bother?\n  for (size_t i = 0;\n       i < sizeof(lines_only_debug_sections)/sizeof(*lines_only_debug_sections);\n       ++i)\n    if (strcmp(str, lines_only_debug_sections[i]) == 0)\n      return true;\n  return false;\n}\n\n// Whether to include this section in the link.\n\ntemplate<int size, bool big_endian>\nbool\nLayout::include_section(Sized_relobj<size, big_endian>*, const char* name,\n\t\t\tconst elfcpp::Shdr<size, big_endian>& shdr)\n{\n  if (shdr.get_sh_flags() & elfcpp::SHF_EXCLUDE)\n    return false;\n\n  switch (shdr.get_sh_type())\n    {\n    case elfcpp::SHT_NULL:\n    case elfcpp::SHT_SYMTAB:\n    case elfcpp::SHT_DYNSYM:\n    case elfcpp::SHT_HASH:\n    case elfcpp::SHT_DYNAMIC:\n    case elfcpp::SHT_SYMTAB_SHNDX:\n      return false;\n\n    case elfcpp::SHT_STRTAB:\n      // Discard the sections which have special meanings in the ELF\n      // ABI.  Keep others (e.g., .stabstr).  We could also do this by\n      // checking the sh_link fields of the appropriate sections.\n      return (strcmp(name, \".dynstr\") != 0\n\t      && strcmp(name, \".strtab\") != 0\n\t      && strcmp(name, \".shstrtab\") != 0);\n\n    case elfcpp::SHT_RELA:\n    case elfcpp::SHT_REL:\n    case elfcpp::SHT_GROUP:\n      // If we are emitting relocations these should be handled\n      // elsewhere.\n      gold_assert(!parameters->options().relocatable()\n\t\t  && !parameters->options().emit_relocs());\n      return false;\n\n    case elfcpp::SHT_PROGBITS:\n      if (parameters->options().strip_debug()\n\t  && (shdr.get_sh_flags() & elfcpp::SHF_ALLOC) == 0)\n\t{\n\t  if (is_debug_info_section(name))\n\t    return false;\n\t}\n      if (parameters->options().strip_debug_non_line()\n\t  && (shdr.get_sh_flags() & elfcpp::SHF_ALLOC) == 0)\n\t{\n\t  // Debugging sections can only be recognized by name.\n\t  if (is_prefix_of(\".debug\", name)\n              && !is_lines_only_debug_section(name))\n\t    return false;\n\t}\n      if (parameters->options().strip_debug_gdb()\n\t  && (shdr.get_sh_flags() & elfcpp::SHF_ALLOC) == 0)\n\t{\n\t  // Debugging sections can only be recognized by name.\n\t  if (is_prefix_of(\".debug\", name)\n              && !is_gdb_debug_section(name))\n\t    return false;\n\t}\n      if (parameters->options().strip_lto_sections()\n          && !parameters->options().relocatable()\n          && (shdr.get_sh_flags() & elfcpp::SHF_ALLOC) == 0)\n        {\n          // Ignore LTO sections containing intermediate code.\n          if (is_prefix_of(\".gnu.lto_\", name))\n            return false;\n        }\n      // The GNU linker strips .gnu_debuglink sections, so we do too.\n      // This is a feature used to keep debugging information in\n      // separate files.\n      if (strcmp(name, \".gnu_debuglink\") == 0)\n\treturn false;\n      return true;\n\n    default:\n      return true;\n    }\n}\n\n// Return an output section named NAME, or NULL if there is none.\n\nOutput_section*\nLayout::find_output_section(const char* name) const\n{\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    if (strcmp((*p)->name(), name) == 0)\n      return *p;\n  return NULL;\n}\n\n// Return an output segment of type TYPE, with segment flags SET set\n// and segment flags CLEAR clear.  Return NULL if there is none.\n\nOutput_segment*\nLayout::find_output_segment(elfcpp::PT type, elfcpp::Elf_Word set,\n\t\t\t    elfcpp::Elf_Word clear) const\n{\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    if (static_cast<elfcpp::PT>((*p)->type()) == type\n\t&& ((*p)->flags() & set) == set\n\t&& ((*p)->flags() & clear) == 0)\n      return *p;\n  return NULL;\n}\n\n// Return the output section to use for section NAME with type TYPE\n// and section flags FLAGS.  NAME must be canonicalized in the string\n// pool, and NAME_KEY is the key.  IS_INTERP is true if this is the\n// .interp section.  IS_DYNAMIC_LINKER_SECTION is true if this section\n// is used by the dynamic linker.\n\nOutput_section*\nLayout::get_output_section(const char* name, Stringpool::Key name_key,\n\t\t\t   elfcpp::Elf_Word type, elfcpp::Elf_Xword flags,\n\t\t\t   bool is_interp, bool is_dynamic_linker_section)\n{\n  elfcpp::Elf_Xword lookup_flags = flags;\n\n  // Ignoring SHF_WRITE and SHF_EXECINSTR here means that we combine\n  // read-write with read-only sections.  Some other ELF linkers do\n  // not do this.  FIXME: Perhaps there should be an option\n  // controlling this.\n  lookup_flags &= ~(elfcpp::SHF_WRITE | elfcpp::SHF_EXECINSTR);\n\n  const Key key(name_key, std::make_pair(type, lookup_flags));\n  const std::pair<Key, Output_section*> v(key, NULL);\n  std::pair<Section_name_map::iterator, bool> ins(\n    this->section_name_map_.insert(v));\n\n  if (!ins.second)\n    return ins.first->second;\n  else\n    {\n      // This is the first time we've seen this name/type/flags\n      // combination.  For compatibility with the GNU linker, we\n      // combine sections with contents and zero flags with sections\n      // with non-zero flags.  This is a workaround for cases where\n      // assembler code forgets to set section flags.  FIXME: Perhaps\n      // there should be an option to control this.\n      Output_section* os = NULL;\n\n      if (type == elfcpp::SHT_PROGBITS)\n\t{\n          if (flags == 0)\n            {\n              Output_section* same_name = this->find_output_section(name);\n              if (same_name != NULL\n                  && same_name->type() == elfcpp::SHT_PROGBITS\n                  && (same_name->flags() & elfcpp::SHF_TLS) == 0)\n                os = same_name;\n            }\n          else if ((flags & elfcpp::SHF_TLS) == 0)\n            {\n              elfcpp::Elf_Xword zero_flags = 0;\n              const Key zero_key(name_key, std::make_pair(type, zero_flags));\n              Section_name_map::iterator p =\n                  this->section_name_map_.find(zero_key);\n              if (p != this->section_name_map_.end())\n\t\tos = p->second;\n            }\n\t}\n\n      if (os == NULL)\n\tos = this->make_output_section(name, type, flags, is_interp,\n\t\t\t\t       is_dynamic_linker_section);\n      ins.first->second = os;\n      return os;\n    }\n}\n\n// Pick the output section to use for section NAME, in input file\n// RELOBJ, with type TYPE and flags FLAGS.  RELOBJ may be NULL for a\n// linker created section.  IS_INPUT_SECTION is true if we are\n// choosing an output section for an input section found in a input\n// file.  IS_INTERP is true if this is the .interp section.\n// IS_DYNAMIC_LINKER_SECTION is true if this section is used by the\n// dynamic linker.  This will return NULL if the input section should\n// be discarded.\n\nOutput_section*\nLayout::choose_output_section(const Relobj* relobj, const char* name,\n\t\t\t      elfcpp::Elf_Word type, elfcpp::Elf_Xword flags,\n\t\t\t      bool is_input_section, bool is_interp,\n\t\t\t      bool is_dynamic_linker_section)\n{\n  // We should not see any input sections after we have attached\n  // sections to segments.\n  gold_assert(!is_input_section || !this->sections_are_attached_);\n\n  // Some flags in the input section should not be automatically\n  // copied to the output section.\n  flags &= ~ (elfcpp::SHF_INFO_LINK\n\t      | elfcpp::SHF_LINK_ORDER\n\t      | elfcpp::SHF_GROUP\n\t      | elfcpp::SHF_MERGE\n\t      | elfcpp::SHF_STRINGS);\n\n  if (this->script_options_->saw_sections_clause())\n    {\n      // We are using a SECTIONS clause, so the output section is\n      // chosen based only on the name.\n\n      Script_sections* ss = this->script_options_->script_sections();\n      const char* file_name = relobj == NULL ? NULL : relobj->name().c_str();\n      Output_section** output_section_slot;\n      name = ss->output_section_name(file_name, name, &output_section_slot);\n      if (name == NULL)\n\t{\n\t  // The SECTIONS clause says to discard this input section.\n\t  return NULL;\n\t}\n\n      // If this is an orphan section--one not mentioned in the linker\n      // script--then OUTPUT_SECTION_SLOT will be NULL, and we do the\n      // default processing below.\n\n      if (output_section_slot != NULL)\n\t{\n\t  if (*output_section_slot != NULL)\n\t    {\n\t      (*output_section_slot)->update_flags_for_input_section(flags);\n\t      return *output_section_slot;\n\t    }\n\n\t  // We don't put sections found in the linker script into\n\t  // SECTION_NAME_MAP_.  That keeps us from getting confused\n\t  // if an orphan section is mapped to a section with the same\n\t  // name as one in the linker script.\n\n\t  name = this->namepool_.add(name, false, NULL);\n\n\t  Output_section* os =\n\t    this->make_output_section(name, type, flags, is_interp,\n\t\t\t\t      is_dynamic_linker_section);\n\t  os->set_found_in_sections_clause();\n\t  *output_section_slot = os;\n\t  return os;\n\t}\n    }\n\n  // FIXME: Handle SHF_OS_NONCONFORMING somewhere.\n\n  // Turn NAME from the name of the input section into the name of the\n  // output section.\n\n  size_t len = strlen(name);\n  if (is_input_section\n      && !this->script_options_->saw_sections_clause()\n      && !parameters->options().relocatable())\n    name = Layout::output_section_name(name, &len);\n\n  Stringpool::Key name_key;\n  name = this->namepool_.add_with_length(name, len, true, &name_key);\n\n  // Find or make the output section.  The output section is selected\n  // based on the section name, type, and flags.\n  return this->get_output_section(name, name_key, type, flags, is_interp,\n\t\t\t\t  is_dynamic_linker_section);\n}\n\n// Return the output section to use for input section SHNDX, with name\n// NAME, with header HEADER, from object OBJECT.  RELOC_SHNDX is the\n// index of a relocation section which applies to this section, or 0\n// if none, or -1U if more than one.  RELOC_TYPE is the type of the\n// relocation section if there is one.  Set *OFF to the offset of this\n// input section without the output section.  Return NULL if the\n// section should be discarded.  Set *OFF to -1 if the section\n// contents should not be written directly to the output file, but\n// will instead receive special handling.\n\ntemplate<int size, bool big_endian>\nOutput_section*\nLayout::layout(Sized_relobj<size, big_endian>* object, unsigned int shndx,\n\t       const char* name, const elfcpp::Shdr<size, big_endian>& shdr,\n\t       unsigned int reloc_shndx, unsigned int, off_t* off)\n{\n  *off = 0;\n\n  if (!this->include_section(object, name, shdr))\n    return NULL;\n\n  Output_section* os;\n\n  // In a relocatable link a grouped section must not be combined with\n  // any other sections.\n  if (parameters->options().relocatable()\n      && (shdr.get_sh_flags() & elfcpp::SHF_GROUP) != 0)\n    {\n      name = this->namepool_.add(name, true, NULL);\n      os = this->make_output_section(name, shdr.get_sh_type(),\n\t\t\t\t     shdr.get_sh_flags(), false, false);\n    }\n  else\n    {\n      os = this->choose_output_section(object, name, shdr.get_sh_type(),\n\t\t\t\t       shdr.get_sh_flags(), true, false,\n\t\t\t\t       false);\n      if (os == NULL)\n\treturn NULL;\n    }\n\n  // By default the GNU linker sorts input sections whose names match\n  // .ctor.*, .dtor.*, .init_array.*, or .fini_array.*.  The sections\n  // are sorted by name.  This is used to implement constructor\n  // priority ordering.  We are compatible.\n  if (!this->script_options_->saw_sections_clause()\n      && (is_prefix_of(\".ctors.\", name)\n\t  || is_prefix_of(\".dtors.\", name)\n\t  || is_prefix_of(\".init_array.\", name)\n\t  || is_prefix_of(\".fini_array.\", name)))\n    os->set_must_sort_attached_input_sections();\n\n  // FIXME: Handle SHF_LINK_ORDER somewhere.\n\n  *off = os->add_input_section(object, shndx, name, shdr, reloc_shndx,\n\t\t\t       this->script_options_->saw_sections_clause());\n\n  return os;\n}\n\n// Handle a relocation section when doing a relocatable link.\n\ntemplate<int size, bool big_endian>\nOutput_section*\nLayout::layout_reloc(Sized_relobj<size, big_endian>* object,\n\t\t     unsigned int,\n\t\t     const elfcpp::Shdr<size, big_endian>& shdr,\n\t\t     Output_section* data_section,\n\t\t     Relocatable_relocs* rr)\n{\n  gold_assert(parameters->options().relocatable()\n\t      || parameters->options().emit_relocs());\n\n  int sh_type = shdr.get_sh_type();\n\n  std::string name;\n  if (sh_type == elfcpp::SHT_REL)\n    name = \".rel\";\n  else if (sh_type == elfcpp::SHT_RELA)\n    name = \".rela\";\n  else\n    gold_unreachable();\n  name += data_section->name();\n\n  Output_section* os = this->choose_output_section(object, name.c_str(),\n\t\t\t\t\t\t   sh_type,\n\t\t\t\t\t\t   shdr.get_sh_flags(),\n\t\t\t\t\t\t   false, false, false);\n\n  os->set_should_link_to_symtab();\n  os->set_info_section(data_section);\n\n  Output_section_data* posd;\n  if (sh_type == elfcpp::SHT_REL)\n    {\n      os->set_entsize(elfcpp::Elf_sizes<size>::rel_size);\n      posd = new Output_relocatable_relocs<elfcpp::SHT_REL,\n\t\t\t\t\t   size,\n\t\t\t\t\t   big_endian>(rr);\n    }\n  else if (sh_type == elfcpp::SHT_RELA)\n    {\n      os->set_entsize(elfcpp::Elf_sizes<size>::rela_size);\n      posd = new Output_relocatable_relocs<elfcpp::SHT_RELA,\n\t\t\t\t\t   size,\n\t\t\t\t\t   big_endian>(rr);\n    }\n  else\n    gold_unreachable();\n\n  os->add_output_section_data(posd);\n  rr->set_output_data(posd);\n\n  return os;\n}\n\n// Handle a group section when doing a relocatable link.\n\ntemplate<int size, bool big_endian>\nvoid\nLayout::layout_group(Symbol_table* symtab,\n\t\t     Sized_relobj<size, big_endian>* object,\n\t\t     unsigned int,\n\t\t     const char* group_section_name,\n\t\t     const char* signature,\n\t\t     const elfcpp::Shdr<size, big_endian>& shdr,\n\t\t     elfcpp::Elf_Word flags,\n\t\t     std::vector<unsigned int>* shndxes)\n{\n  gold_assert(parameters->options().relocatable());\n  gold_assert(shdr.get_sh_type() == elfcpp::SHT_GROUP);\n  group_section_name = this->namepool_.add(group_section_name, true, NULL);\n  Output_section* os = this->make_output_section(group_section_name,\n\t\t\t\t\t\t elfcpp::SHT_GROUP,\n\t\t\t\t\t\t shdr.get_sh_flags(),\n\t\t\t\t\t\t false, false);\n\n  // We need to find a symbol with the signature in the symbol table.\n  // If we don't find one now, we need to look again later.\n  Symbol* sym = symtab->lookup(signature, NULL);\n  if (sym != NULL)\n    os->set_info_symndx(sym);\n  else\n    {\n      // Reserve some space to minimize reallocations.\n      if (this->group_signatures_.empty())\n\tthis->group_signatures_.reserve(this->number_of_input_files_ * 16);\n\n      // We will wind up using a symbol whose name is the signature.\n      // So just put the signature in the symbol name pool to save it.\n      signature = symtab->canonicalize_name(signature);\n      this->group_signatures_.push_back(Group_signature(os, signature));\n    }\n\n  os->set_should_link_to_symtab();\n  os->set_entsize(4);\n\n  section_size_type entry_count =\n    convert_to_section_size_type(shdr.get_sh_size() / 4);\n  Output_section_data* posd =\n    new Output_data_group<size, big_endian>(object, entry_count, flags,\n\t\t\t\t\t    shndxes);\n  os->add_output_section_data(posd);\n}\n\n// Special GNU handling of sections name .eh_frame.  They will\n// normally hold exception frame data as defined by the C++ ABI\n// (http://codesourcery.com/cxx-abi/).\n\ntemplate<int size, bool big_endian>\nOutput_section*\nLayout::layout_eh_frame(Sized_relobj<size, big_endian>* object,\n\t\t\tconst unsigned char* symbols,\n\t\t\toff_t symbols_size,\n\t\t\tconst unsigned char* symbol_names,\n\t\t\toff_t symbol_names_size,\n\t\t\tunsigned int shndx,\n\t\t\tconst elfcpp::Shdr<size, big_endian>& shdr,\n\t\t\tunsigned int reloc_shndx, unsigned int reloc_type,\n\t\t\toff_t* off)\n{\n  gold_assert(shdr.get_sh_type() == elfcpp::SHT_PROGBITS);\n  gold_assert((shdr.get_sh_flags() & elfcpp::SHF_ALLOC) != 0);\n\n  const char* const name = \".eh_frame\";\n  Output_section* os = this->choose_output_section(object,\n\t\t\t\t\t\t   name,\n\t\t\t\t\t\t   elfcpp::SHT_PROGBITS,\n\t\t\t\t\t\t   elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t   false, false, false);\n  if (os == NULL)\n    return NULL;\n\n  if (this->eh_frame_section_ == NULL)\n    {\n      this->eh_frame_section_ = os;\n      this->eh_frame_data_ = new Eh_frame();\n\n      if (parameters->options().eh_frame_hdr())\n\t{\n\t  Output_section* hdr_os =\n\t    this->choose_output_section(NULL,\n\t\t\t\t\t\".eh_frame_hdr\",\n\t\t\t\t\telfcpp::SHT_PROGBITS,\n\t\t\t\t\telfcpp::SHF_ALLOC,\n\t\t\t\t\tfalse, false, false);\n\n\t  if (hdr_os != NULL)\n\t    {\n\t      Eh_frame_hdr* hdr_posd = new Eh_frame_hdr(os,\n\t\t\t\t\t\t\tthis->eh_frame_data_);\n\t      hdr_os->add_output_section_data(hdr_posd);\n\n\t      hdr_os->set_after_input_sections();\n\n\t      if (!this->script_options_->saw_phdrs_clause())\n\t\t{\n\t\t  Output_segment* hdr_oseg;\n\t\t  hdr_oseg = this->make_output_segment(elfcpp::PT_GNU_EH_FRAME,\n\t\t\t\t\t\t       elfcpp::PF_R);\n\t\t  hdr_oseg->add_output_section(hdr_os, elfcpp::PF_R, false);\n\t\t}\n\n\t      this->eh_frame_data_->set_eh_frame_hdr(hdr_posd);\n\t    }\n\t}\n    }\n\n  gold_assert(this->eh_frame_section_ == os);\n\n  if (this->eh_frame_data_->add_ehframe_input_section(object,\n\t\t\t\t\t\t      symbols,\n\t\t\t\t\t\t      symbols_size,\n\t\t\t\t\t\t      symbol_names,\n\t\t\t\t\t\t      symbol_names_size,\n\t\t\t\t\t\t      shndx,\n\t\t\t\t\t\t      reloc_shndx,\n\t\t\t\t\t\t      reloc_type))\n    {\n      os->update_flags_for_input_section(shdr.get_sh_flags());\n\n      // We found a .eh_frame section we are going to optimize, so now\n      // we can add the set of optimized sections to the output\n      // section.  We need to postpone adding this until we've found a\n      // section we can optimize so that the .eh_frame section in\n      // crtbegin.o winds up at the start of the output section.\n      if (!this->added_eh_frame_data_)\n\t{\n\t  os->add_output_section_data(this->eh_frame_data_);\n\t  this->added_eh_frame_data_ = true;\n\t}\n      *off = -1;\n    }\n  else\n    {\n      // We couldn't handle this .eh_frame section for some reason.\n      // Add it as a normal section.\n      bool saw_sections_clause = this->script_options_->saw_sections_clause();\n      *off = os->add_input_section(object, shndx, name, shdr, reloc_shndx,\n\t\t\t\t   saw_sections_clause);\n    }\n\n  return os;\n}\n\n// Add POSD to an output section using NAME, TYPE, and FLAGS.  Return\n// the output section.\n\nOutput_section*\nLayout::add_output_section_data(const char* name, elfcpp::Elf_Word type,\n\t\t\t\telfcpp::Elf_Xword flags,\n\t\t\t\tOutput_section_data* posd,\n\t\t\t\tbool is_dynamic_linker_section)\n{\n  Output_section* os = this->choose_output_section(NULL, name, type, flags,\n\t\t\t\t\t\t   false, false,\n\t\t\t\t\t\t   is_dynamic_linker_section);\n  if (os != NULL)\n    os->add_output_section_data(posd);\n  return os;\n}\n\n// Map section flags to segment flags.\n\nelfcpp::Elf_Word\nLayout::section_flags_to_segment(elfcpp::Elf_Xword flags)\n{\n  elfcpp::Elf_Word ret = elfcpp::PF_R;\n  if ((flags & elfcpp::SHF_WRITE) != 0)\n    ret |= elfcpp::PF_W;\n  if ((flags & elfcpp::SHF_EXECINSTR) != 0)\n    ret |= elfcpp::PF_X;\n  return ret;\n}\n\n// Sometimes we compress sections.  This is typically done for\n// sections that are not part of normal program execution (such as\n// .debug_* sections), and where the readers of these sections know\n// how to deal with compressed sections.  This routine doesn't say for\n// certain whether we'll compress -- it depends on commandline options\n// as well -- just whether this section is a candidate for compression.\n// (The Output_compressed_section class decides whether to compress\n// a given section, and picks the name of the compressed section.)\n\nstatic bool\nis_compressible_debug_section(const char* secname)\n{\n  return (strncmp(secname, \".debug\", sizeof(\".debug\") - 1) == 0);\n}\n\n// Make a new Output_section, and attach it to segments as\n// appropriate.  IS_INTERP is true if this is the .interp section.\n// IS_DYNAMIC_LINKER_SECTION is true if this section is used by the\n// dynamic linker.\n\nOutput_section*\nLayout::make_output_section(const char* name, elfcpp::Elf_Word type,\n\t\t\t    elfcpp::Elf_Xword flags, bool is_interp,\n\t\t\t    bool is_dynamic_linker_section)\n{\n  Output_section* os;\n  if ((flags & elfcpp::SHF_ALLOC) == 0\n      && strcmp(parameters->options().compress_debug_sections(), \"none\") != 0\n      && is_compressible_debug_section(name))\n    os = new Output_compressed_section(&parameters->options(), name, type,\n\t\t\t\t       flags);\n  else if ((flags & elfcpp::SHF_ALLOC) == 0\n           && parameters->options().strip_debug_non_line()\n           && strcmp(\".debug_abbrev\", name) == 0)\n    {\n      os = this->debug_abbrev_ = new Output_reduced_debug_abbrev_section(\n          name, type, flags);\n      if (this->debug_info_)\n        this->debug_info_->set_abbreviations(this->debug_abbrev_);\n    }\n  else if ((flags & elfcpp::SHF_ALLOC) == 0\n           && parameters->options().strip_debug_non_line()\n           && strcmp(\".debug_info\", name) == 0)\n    {\n      os = this->debug_info_ = new Output_reduced_debug_info_section(\n          name, type, flags);\n      if (this->debug_abbrev_)\n        this->debug_info_->set_abbreviations(this->debug_abbrev_);\n    }\n else\n    {\n      // FIXME: const_cast is ugly.\n      Target* target = const_cast<Target*>(&parameters->target());\n      os = target->make_output_section(name, type, flags);\n    }\n\n  if (is_interp)\n    os->set_is_interp();\n  if (is_dynamic_linker_section)\n    os->set_is_dynamic_linker_section();\n\n  parameters->target().new_output_section(os);\n\n  this->section_list_.push_back(os);\n\n  // The GNU linker by default sorts some sections by priority, so we\n  // do the same.  We need to know that this might happen before we\n  // attach any input sections.\n  if (!this->script_options_->saw_sections_clause()\n      && (strcmp(name, \".ctors\") == 0\n\t  || strcmp(name, \".dtors\") == 0\n\t  || strcmp(name, \".init_array\") == 0\n\t  || strcmp(name, \".fini_array\") == 0))\n    os->set_may_sort_attached_input_sections();\n\n  // With -z relro, we have to recognize the special sections by name.\n  // There is no other way.\n  if (!this->script_options_->saw_sections_clause()\n      && parameters->options().relro()\n      && type == elfcpp::SHT_PROGBITS\n      && (flags & elfcpp::SHF_ALLOC) != 0\n      && (flags & elfcpp::SHF_WRITE) != 0)\n    {\n      if (strcmp(name, \".data.rel.ro\") == 0)\n\tos->set_is_relro();\n      else if (strcmp(name, \".data.rel.ro.local\") == 0)\n\t{\n\t  os->set_is_relro();\n\t  os->set_is_relro_local();\n\t}\n    }\n\n  // Check for .stab*str sections, as .stab* sections need to link to\n  // them.\n  if (type == elfcpp::SHT_STRTAB\n      && !this->have_stabstr_section_\n      && strncmp(name, \".stab\", 5) == 0\n      && strcmp(name + strlen(name) - 3, \"str\") == 0)\n    this->have_stabstr_section_ = true;\n\n  // If we have already attached the sections to segments, then we\n  // need to attach this one now.  This happens for sections created\n  // directly by the linker.\n  if (this->sections_are_attached_)\n    this->attach_section_to_segment(os);\n\n  return os;\n}\n\n// Attach output sections to segments.  This is called after we have\n// seen all the input sections.\n\nvoid\nLayout::attach_sections_to_segments()\n{\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    this->attach_section_to_segment(*p);\n\n  this->sections_are_attached_ = true;\n}\n\n// Attach an output section to a segment.\n\nvoid\nLayout::attach_section_to_segment(Output_section* os)\n{\n  if ((os->flags() & elfcpp::SHF_ALLOC) == 0)\n    this->unattached_section_list_.push_back(os);\n  else\n    this->attach_allocated_section_to_segment(os);\n}\n\n// Attach an allocated output section to a segment.\n\nvoid\nLayout::attach_allocated_section_to_segment(Output_section* os)\n{\n  elfcpp::Elf_Xword flags = os->flags();\n  gold_assert((flags & elfcpp::SHF_ALLOC) != 0);\n\n  if (parameters->options().relocatable())\n    return;\n\n  // If we have a SECTIONS clause, we can't handle the attachment to\n  // segments until after we've seen all the sections.\n  if (this->script_options_->saw_sections_clause())\n    return;\n\n  gold_assert(!this->script_options_->saw_phdrs_clause());\n\n  // This output section goes into a PT_LOAD segment.\n\n  elfcpp::Elf_Word seg_flags = Layout::section_flags_to_segment(flags);\n\n  bool sort_sections = !this->script_options_->saw_sections_clause();\n\n  // In general the only thing we really care about for PT_LOAD\n  // segments is whether or not they are writable, so that is how we\n  // search for them.  Large data sections also go into their own\n  // PT_LOAD segment.  People who need segments sorted on some other\n  // basis will have to use a linker script.\n\n  Segment_list::const_iterator p;\n  for (p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() != elfcpp::PT_LOAD)\n\tcontinue;\n      if (!parameters->options().omagic()\n\t  && ((*p)->flags() & elfcpp::PF_W) != (seg_flags & elfcpp::PF_W))\n\tcontinue;\n      // If -Tbss was specified, we need to separate the data and BSS\n      // segments.\n      if (parameters->options().user_set_Tbss())\n\t{\n\t  if ((os->type() == elfcpp::SHT_NOBITS)\n\t      == (*p)->has_any_data_sections())\n\t    continue;\n\t}\n      if (os->is_large_data_section() && !(*p)->is_large_data_segment())\n\tcontinue;\n\n      (*p)->add_output_section(os, seg_flags, sort_sections);\n      break;\n    }\n\n  if (p == this->segment_list_.end())\n    {\n      Output_segment* oseg = this->make_output_segment(elfcpp::PT_LOAD,\n                                                       seg_flags);\n      if (os->is_large_data_section())\n\toseg->set_is_large_data_segment();\n      oseg->add_output_section(os, seg_flags, sort_sections);\n    }\n\n  // If we see a loadable SHT_NOTE section, we create a PT_NOTE\n  // segment.\n  if (os->type() == elfcpp::SHT_NOTE)\n    {\n      // See if we already have an equivalent PT_NOTE segment.\n      for (p = this->segment_list_.begin();\n           p != segment_list_.end();\n           ++p)\n        {\n          if ((*p)->type() == elfcpp::PT_NOTE\n              && (((*p)->flags() & elfcpp::PF_W)\n                  == (seg_flags & elfcpp::PF_W)))\n            {\n              (*p)->add_output_section(os, seg_flags, false);\n              break;\n            }\n        }\n\n      if (p == this->segment_list_.end())\n        {\n          Output_segment* oseg = this->make_output_segment(elfcpp::PT_NOTE,\n                                                           seg_flags);\n          oseg->add_output_section(os, seg_flags, false);\n        }\n    }\n\n  // If we see a loadable SHF_TLS section, we create a PT_TLS\n  // segment.  There can only be one such segment.\n  if ((flags & elfcpp::SHF_TLS) != 0)\n    {\n      if (this->tls_segment_ == NULL)\n\tthis->make_output_segment(elfcpp::PT_TLS, seg_flags);\n      this->tls_segment_->add_output_section(os, seg_flags, false);\n    }\n\n  // If -z relro is in effect, and we see a relro section, we create a\n  // PT_GNU_RELRO segment.  There can only be one such segment.\n  if (os->is_relro() && parameters->options().relro())\n    {\n      gold_assert(seg_flags == (elfcpp::PF_R | elfcpp::PF_W));\n      if (this->relro_segment_ == NULL)\n\tthis->make_output_segment(elfcpp::PT_GNU_RELRO, seg_flags);\n      this->relro_segment_->add_output_section(os, seg_flags, false);\n    }\n}\n\n// Make an output section for a script.\n\nOutput_section*\nLayout::make_output_section_for_script(const char* name)\n{\n  name = this->namepool_.add(name, false, NULL);\n  Output_section* os = this->make_output_section(name, elfcpp::SHT_PROGBITS,\n\t\t\t\t\t\t elfcpp::SHF_ALLOC, false,\n\t\t\t\t\t\t false);\n  os->set_found_in_sections_clause();\n  return os;\n}\n\n// Return the number of segments we expect to see.\n\nsize_t\nLayout::expected_segment_count() const\n{\n  size_t ret = this->segment_list_.size();\n\n  // If we didn't see a SECTIONS clause in a linker script, we should\n  // already have the complete list of segments.  Otherwise we ask the\n  // SECTIONS clause how many segments it expects, and add in the ones\n  // we already have (PT_GNU_STACK, PT_GNU_EH_FRAME, etc.)\n\n  if (!this->script_options_->saw_sections_clause())\n    return ret;\n  else\n    {\n      const Script_sections* ss = this->script_options_->script_sections();\n      return ret + ss->expected_segment_count(this);\n    }\n}\n\n// Handle the .note.GNU-stack section at layout time.  SEEN_GNU_STACK\n// is whether we saw a .note.GNU-stack section in the object file.\n// GNU_STACK_FLAGS is the section flags.  The flags give the\n// protection required for stack memory.  We record this in an\n// executable as a PT_GNU_STACK segment.  If an object file does not\n// have a .note.GNU-stack segment, we must assume that it is an old\n// object.  On some targets that will force an executable stack.\n\nvoid\nLayout::layout_gnu_stack(bool seen_gnu_stack, uint64_t gnu_stack_flags)\n{\n  if (!seen_gnu_stack)\n    this->input_without_gnu_stack_note_ = true;\n  else\n    {\n      this->input_with_gnu_stack_note_ = true;\n      if ((gnu_stack_flags & elfcpp::SHF_EXECINSTR) != 0)\n\tthis->input_requires_executable_stack_ = true;\n    }\n}\n\n// Create automatic note sections.\n\nvoid\nLayout::create_notes()\n{\n  this->create_gold_note();\n  this->create_executable_stack_info();\n  this->create_build_id();\n}\n\n// Create the dynamic sections which are needed before we read the\n// relocs.\n\nvoid\nLayout::create_initial_dynamic_sections(Symbol_table* symtab)\n{\n  if (parameters->doing_static_link())\n    return;\n\n  this->dynamic_section_ = this->choose_output_section(NULL, \".dynamic\",\n\t\t\t\t\t\t       elfcpp::SHT_DYNAMIC,\n\t\t\t\t\t\t       (elfcpp::SHF_ALLOC\n\t\t\t\t\t\t\t| elfcpp::SHF_WRITE),\n\t\t\t\t\t\t       false, false, true);\n  this->dynamic_section_->set_is_relro();\n\n  symtab->define_in_output_data(\"_DYNAMIC\", NULL, this->dynamic_section_, 0, 0,\n\t\t\t\telfcpp::STT_OBJECT, elfcpp::STB_LOCAL,\n\t\t\t\telfcpp::STV_HIDDEN, 0, false, false);\n\n  this->dynamic_data_ =  new Output_data_dynamic(&this->dynpool_);\n\n  this->dynamic_section_->add_output_section_data(this->dynamic_data_);\n}\n\n// For each output section whose name can be represented as C symbol,\n// define __start and __stop symbols for the section.  This is a GNU\n// extension.\n\nvoid\nLayout::define_section_symbols(Symbol_table* symtab)\n{\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      const char* const name = (*p)->name();\n      if (name[strspn(name,\n\t\t      (\"0123456789\"\n\t\t       \"ABCDEFGHIJKLMNOPWRSTUVWXYZ\"\n\t\t       \"abcdefghijklmnopqrstuvwxyz\"\n\t\t       \"_\"))]\n\t  == '\\0')\n\t{\n\t  const std::string name_string(name);\n\t  const std::string start_name(\"__start_\" + name_string);\n\t  const std::string stop_name(\"__stop_\" + name_string);\n\n\t  symtab->define_in_output_data(start_name.c_str(),\n\t\t\t\t\tNULL, // version\n\t\t\t\t\t*p,\n\t\t\t\t\t0, // value\n\t\t\t\t\t0, // symsize\n\t\t\t\t\telfcpp::STT_NOTYPE,\n\t\t\t\t\telfcpp::STB_GLOBAL,\n\t\t\t\t\telfcpp::STV_DEFAULT,\n\t\t\t\t\t0, // nonvis\n\t\t\t\t\tfalse, // offset_is_from_end\n\t\t\t\t\ttrue); // only_if_ref\n\n\t  symtab->define_in_output_data(stop_name.c_str(),\n\t\t\t\t\tNULL, // version\n\t\t\t\t\t*p,\n\t\t\t\t\t0, // value\n\t\t\t\t\t0, // symsize\n\t\t\t\t\telfcpp::STT_NOTYPE,\n\t\t\t\t\telfcpp::STB_GLOBAL,\n\t\t\t\t\telfcpp::STV_DEFAULT,\n\t\t\t\t\t0, // nonvis\n\t\t\t\t\ttrue, // offset_is_from_end\n\t\t\t\t\ttrue); // only_if_ref\n\t}\n    }\n}\n\n// Define symbols for group signatures.\n\nvoid\nLayout::define_group_signatures(Symbol_table* symtab)\n{\n  for (Group_signatures::iterator p = this->group_signatures_.begin();\n       p != this->group_signatures_.end();\n       ++p)\n    {\n      Symbol* sym = symtab->lookup(p->signature, NULL);\n      if (sym != NULL)\n\tp->section->set_info_symndx(sym);\n      else\n\t{\n\t  // Force the name of the group section to the group\n\t  // signature, and use the group's section symbol as the\n\t  // signature symbol.\n\t  if (strcmp(p->section->name(), p->signature) != 0)\n\t    {\n\t      const char* name = this->namepool_.add(p->signature,\n\t\t\t\t\t\t     true, NULL);\n\t      p->section->set_name(name);\n\t    }\n\t  p->section->set_needs_symtab_index();\n\t  p->section->set_info_section_symndx(p->section);\n\t}\n    }\n\n  this->group_signatures_.clear();\n}\n\n// Find the first read-only PT_LOAD segment, creating one if\n// necessary.\n\nOutput_segment*\nLayout::find_first_load_seg()\n{\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() == elfcpp::PT_LOAD\n\t  && ((*p)->flags() & elfcpp::PF_R) != 0\n\t  && (parameters->options().omagic()\n\t      || ((*p)->flags() & elfcpp::PF_W) == 0))\n\treturn *p;\n    }\n\n  gold_assert(!this->script_options_->saw_phdrs_clause());\n\n  Output_segment* load_seg = this->make_output_segment(elfcpp::PT_LOAD,\n\t\t\t\t\t\t       elfcpp::PF_R);\n  return load_seg;\n}\n\n// Save states of all current output segments.  Store saved states\n// in SEGMENT_STATES.\n\nvoid\nLayout::save_segments(Segment_states* segment_states)\n{\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      Output_segment* segment = *p;\n      // Shallow copy.\n      Output_segment* copy = new Output_segment(*segment);\n      (*segment_states)[segment] = copy;\n    }\n}\n\n// Restore states of output segments and delete any segment not found in\n// SEGMENT_STATES.\n\nvoid\nLayout::restore_segments(const Segment_states* segment_states)\n{\n  // Go through the segment list and remove any segment added in the\n  // relaxation loop.\n  this->tls_segment_ = NULL;\n  this->relro_segment_ = NULL;\n  Segment_list::iterator list_iter = this->segment_list_.begin();\n  while (list_iter != this->segment_list_.end())\n    {\n      Output_segment* segment = *list_iter;\n      Segment_states::const_iterator states_iter =\n\t  segment_states->find(segment);\n      if (states_iter != segment_states->end())\n\t{\n\t  const Output_segment* copy = states_iter->second;\n\t  // Shallow copy to restore states.\n\t  *segment = *copy;\n\n\t  // Also fix up TLS and RELRO segment pointers as appropriate.\n\t  if (segment->type() == elfcpp::PT_TLS)\n\t    this->tls_segment_ = segment;\n\t  else if (segment->type() == elfcpp::PT_GNU_RELRO)\n\t    this->relro_segment_ = segment;\n\n\t  ++list_iter;\n\t} \n      else\n\t{\n\t  list_iter = this->segment_list_.erase(list_iter); \n\t  // This is a segment created during section layout.  It should be\n\t  // safe to remove it since we should have removed all pointers to it.\n\t  delete segment;\n\t}\n    }\n}\n\n// Clean up after relaxation so that sections can be laid out again.\n\nvoid\nLayout::clean_up_after_relaxation()\n{\n  // Restore the segments to point state just prior to the relaxation loop.\n  Script_sections* script_section = this->script_options_->script_sections();\n  script_section->release_segments();\n  this->restore_segments(this->segment_states_);\n\n  // Reset section addresses and file offsets\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      (*p)->reset_address_and_file_offset();\n      (*p)->restore_states();\n    }\n  \n  // Reset special output object address and file offsets.\n  for (Data_list::iterator p = this->special_output_list_.begin();\n       p != this->special_output_list_.end();\n       ++p)\n    (*p)->reset_address_and_file_offset();\n\n  // A linker script may have created some output section data objects.\n  // They are useless now.\n  for (Output_section_data_list::const_iterator p =\n\t this->script_output_section_data_list_.begin();\n       p != this->script_output_section_data_list_.end();\n       ++p)\n    delete *p;\n  this->script_output_section_data_list_.clear(); \n}\n\n// Prepare for relaxation.\n\nvoid\nLayout::prepare_for_relaxation()\n{\n  // Create an relaxation debug check if in debugging mode.\n  if (is_debugging_enabled(DEBUG_RELAXATION))\n    this->relaxation_debug_check_ = new Relaxation_debug_check();\n\n  // Save segment states.\n  this->segment_states_ = new Segment_states();\n  this->save_segments(this->segment_states_);\n\n  for(Section_list::const_iterator p = this->section_list_.begin();\n      p != this->section_list_.end();\n      ++p)\n    (*p)->save_states();\n\n  if (is_debugging_enabled(DEBUG_RELAXATION))\n    this->relaxation_debug_check_->check_output_data_for_reset_values(\n        this->section_list_, this->special_output_list_);\n\n  // Also enable recording of output section data from scripts.\n  this->record_output_section_data_from_script_ = true;\n}\n\n// Relaxation loop body:  If target has no relaxation, this runs only once\n// Otherwise, the target relaxation hook is called at the end of\n// each iteration.  If the hook returns true, it means re-layout of\n// section is required.  \n//\n// The number of segments created by a linking script without a PHDRS\n// clause may be affected by section sizes and alignments.  There is\n// a remote chance that relaxation causes different number of PT_LOAD\n// segments are created and sections are attached to different segments.\n// Therefore, we always throw away all segments created during section\n// layout.  In order to be able to restart the section layout, we keep\n// a copy of the segment list right before the relaxation loop and use\n// that to restore the segments.\n// \n// PASS is the current relaxation pass number. \n// SYMTAB is a symbol table.\n// PLOAD_SEG is the address of a pointer for the load segment.\n// PHDR_SEG is a pointer to the PHDR segment.\n// SEGMENT_HEADERS points to the output segment header.\n// FILE_HEADER points to the output file header.\n// PSHNDX is the address to store the output section index.\n\noff_t inline\nLayout::relaxation_loop_body(\n    int pass,\n    Target* target,\n    Symbol_table* symtab,\n    Output_segment** pload_seg,\n    Output_segment* phdr_seg,\n    Output_segment_headers* segment_headers,\n    Output_file_header* file_header,\n    unsigned int* pshndx)\n{\n  // If this is not the first iteration, we need to clean up after\n  // relaxation so that we can lay out the sections again.\n  if (pass != 0)\n    this->clean_up_after_relaxation();\n\n  // If there is a SECTIONS clause, put all the input sections into\n  // the required order.\n  Output_segment* load_seg;\n  if (this->script_options_->saw_sections_clause())\n    load_seg = this->set_section_addresses_from_script(symtab);\n  else if (parameters->options().relocatable())\n    load_seg = NULL;\n  else\n    load_seg = this->find_first_load_seg();\n\n  if (parameters->options().oformat_enum()\n      != General_options::OBJECT_FORMAT_ELF)\n    load_seg = NULL;\n\n  gold_assert(phdr_seg == NULL\n\t      || load_seg != NULL\n\t      || this->script_options_->saw_sections_clause());\n\n  // Lay out the segment headers.\n  if (!parameters->options().relocatable())\n    {\n      gold_assert(segment_headers != NULL);\n      if (load_seg != NULL)\n        load_seg->add_initial_output_data(segment_headers);\n      if (phdr_seg != NULL)\n        phdr_seg->add_initial_output_data(segment_headers);\n    }\n\n  // Lay out the file header.\n  if (load_seg != NULL)\n    load_seg->add_initial_output_data(file_header);\n\n  if (this->script_options_->saw_phdrs_clause()\n      && !parameters->options().relocatable())\n    {\n      // Support use of FILEHDRS and PHDRS attachments in a PHDRS\n      // clause in a linker script.\n      Script_sections* ss = this->script_options_->script_sections();\n      ss->put_headers_in_phdrs(file_header, segment_headers);\n    }\n\n  // We set the output section indexes in set_segment_offsets and\n  // set_section_indexes.\n  *pshndx = 1;\n\n  // Set the file offsets of all the segments, and all the sections\n  // they contain.\n  off_t off;\n  if (!parameters->options().relocatable())\n    off = this->set_segment_offsets(target, load_seg, pshndx);\n  else\n    off = this->set_relocatable_section_offsets(file_header, pshndx);\n\n   // Verify that the dummy relaxation does not change anything.\n  if (is_debugging_enabled(DEBUG_RELAXATION))\n    {\n      if (pass == 0)\n\tthis->relaxation_debug_check_->read_sections(this->section_list_);\n      else\n\tthis->relaxation_debug_check_->verify_sections(this->section_list_);\n    }\n\n  *pload_seg = load_seg;\n  return off;\n}\n\n// Finalize the layout.  When this is called, we have created all the\n// output sections and all the output segments which are based on\n// input sections.  We have several things to do, and we have to do\n// them in the right order, so that we get the right results correctly\n// and efficiently.\n\n// 1) Finalize the list of output segments and create the segment\n// table header.\n\n// 2) Finalize the dynamic symbol table and associated sections.\n\n// 3) Determine the final file offset of all the output segments.\n\n// 4) Determine the final file offset of all the SHF_ALLOC output\n// sections.\n\n// 5) Create the symbol table sections and the section name table\n// section.\n\n// 6) Finalize the symbol table: set symbol values to their final\n// value and make a final determination of which symbols are going\n// into the output symbol table.\n\n// 7) Create the section table header.\n\n// 8) Determine the final file offset of all the output sections which\n// are not SHF_ALLOC, including the section table header.\n\n// 9) Finalize the ELF file header.\n\n// This function returns the size of the output file.\n\noff_t\nLayout::finalize(const Input_objects* input_objects, Symbol_table* symtab,\n\t\t Target* target, const Task* task)\n{\n  target->finalize_sections(this);\n\n  this->count_local_symbols(task, input_objects);\n\n  this->link_stabs_sections();\n\n  Output_segment* phdr_seg = NULL;\n  if (!parameters->options().relocatable() && !parameters->doing_static_link())\n    {\n      // There was a dynamic object in the link.  We need to create\n      // some information for the dynamic linker.\n\n      // Create the PT_PHDR segment which will hold the program\n      // headers.\n      if (!this->script_options_->saw_phdrs_clause())\n\tphdr_seg = this->make_output_segment(elfcpp::PT_PHDR, elfcpp::PF_R);\n\n      // Create the dynamic symbol table, including the hash table.\n      Output_section* dynstr;\n      std::vector<Symbol*> dynamic_symbols;\n      unsigned int local_dynamic_count;\n      Versions versions(*this->script_options()->version_script_info(),\n                        &this->dynpool_);\n      this->create_dynamic_symtab(input_objects, symtab, &dynstr,\n\t\t\t\t  &local_dynamic_count, &dynamic_symbols,\n\t\t\t\t  &versions);\n\n      // Create the .interp section to hold the name of the\n      // interpreter, and put it in a PT_INTERP segment.\n      if (!parameters->options().shared())\n        this->create_interp(target);\n\n      // Finish the .dynamic section to hold the dynamic data, and put\n      // it in a PT_DYNAMIC segment.\n      this->finish_dynamic_section(input_objects, symtab);\n\n      // We should have added everything we need to the dynamic string\n      // table.\n      this->dynpool_.set_string_offsets();\n\n      // Create the version sections.  We can't do this until the\n      // dynamic string table is complete.\n      this->create_version_sections(&versions, symtab, local_dynamic_count,\n\t\t\t\t    dynamic_symbols, dynstr);\n    }\n  \n  if (this->incremental_inputs_)\n    {\n      this->incremental_inputs_->finalize();\n      this->create_incremental_info_sections();\n    }\n\n  // Create segment headers.\n  Output_segment_headers* segment_headers =\n    (parameters->options().relocatable()\n     ? NULL\n     : new Output_segment_headers(this->segment_list_));\n\n  // Lay out the file header.\n  Output_file_header* file_header\n    = new Output_file_header(target, symtab, segment_headers,\n\t\t\t     parameters->options().entry());\n\n  this->special_output_list_.push_back(file_header);\n  if (segment_headers != NULL)\n    this->special_output_list_.push_back(segment_headers);\n\n  // Find approriate places for orphan output sections if we are using\n  // a linker script.\n  if (this->script_options_->saw_sections_clause())\n    this->place_orphan_sections_in_script();\n  \n  Output_segment* load_seg;\n  off_t off;\n  unsigned int shndx;\n  int pass = 0;\n\n  // Take a snapshot of the section layout as needed.\n  if (target->may_relax())\n    this->prepare_for_relaxation();\n  \n  // Run the relaxation loop to lay out sections.\n  do\n    {\n      off = this->relaxation_loop_body(pass, target, symtab, &load_seg,\n\t\t\t\t       phdr_seg, segment_headers, file_header,\n\t\t\t\t       &shndx);\n      pass++;\n    }\n  while (target->may_relax()\n\t && target->relax(pass, input_objects, symtab, this));\n\n  // Set the file offsets of all the non-data sections we've seen so\n  // far which don't have to wait for the input sections.  We need\n  // this in order to finalize local symbols in non-allocated\n  // sections.\n  off = this->set_section_offsets(off, BEFORE_INPUT_SECTIONS_PASS);\n\n  // Set the section indexes of all unallocated sections seen so far,\n  // in case any of them are somehow referenced by a symbol.\n  shndx = this->set_section_indexes(shndx);\n\n  // Create the symbol table sections.\n  this->create_symtab_sections(input_objects, symtab, shndx, &off);\n  if (!parameters->doing_static_link())\n    this->assign_local_dynsym_offsets(input_objects);\n\n  // Process any symbol assignments from a linker script.  This must\n  // be called after the symbol table has been finalized.\n  this->script_options_->finalize_symbols(symtab, this);\n\n  // Create the .shstrtab section.\n  Output_section* shstrtab_section = this->create_shstrtab();\n\n  // Set the file offsets of the rest of the non-data sections which\n  // don't have to wait for the input sections.\n  off = this->set_section_offsets(off, BEFORE_INPUT_SECTIONS_PASS);\n\n  // Now that all sections have been created, set the section indexes\n  // for any sections which haven't been done yet.\n  shndx = this->set_section_indexes(shndx);\n\n  // Create the section table header.\n  this->create_shdrs(shstrtab_section, &off);\n\n  // If there are no sections which require postprocessing, we can\n  // handle the section names now, and avoid a resize later.\n  if (!this->any_postprocessing_sections_)\n    off = this->set_section_offsets(off,\n\t\t\t\t    STRTAB_AFTER_POSTPROCESSING_SECTIONS_PASS);\n\n  file_header->set_section_info(this->section_headers_, shstrtab_section);\n\n  // Now we know exactly where everything goes in the output file\n  // (except for non-allocated sections which require postprocessing).\n  Output_data::layout_complete();\n\n  this->output_file_size_ = off;\n\n  return off;\n}\n\n// Create a note header following the format defined in the ELF ABI.\n// NAME is the name, NOTE_TYPE is the type, SECTION_NAME is the name\n// of the section to create, DESCSZ is the size of the descriptor.\n// ALLOCATE is true if the section should be allocated in memory.\n// This returns the new note section.  It sets *TRAILING_PADDING to\n// the number of trailing zero bytes required.\n\nOutput_section*\nLayout::create_note(const char* name, int note_type,\n\t\t    const char* section_name, size_t descsz,\n\t\t    bool allocate, size_t* trailing_padding)\n{\n  // Authorities all agree that the values in a .note field should\n  // be aligned on 4-byte boundaries for 32-bit binaries.  However,\n  // they differ on what the alignment is for 64-bit binaries.\n  // The GABI says unambiguously they take 8-byte alignment:\n  //    http://sco.com/developers/gabi/latest/ch5.pheader.html#note_section\n  // Other documentation says alignment should always be 4 bytes:\n  //    http://www.netbsd.org/docs/kernel/elf-notes.html#note-format\n  // GNU ld and GNU readelf both support the latter (at least as of\n  // version 2.16.91), and glibc always generates the latter for\n  // .note.ABI-tag (as of version 1.6), so that's the one we go with\n  // here.\n#ifdef GABI_FORMAT_FOR_DOTNOTE_SECTION   // This is not defined by default.\n  const int size = parameters->target().get_size();\n#else\n  const int size = 32;\n#endif\n\n  // The contents of the .note section.\n  size_t namesz = strlen(name) + 1;\n  size_t aligned_namesz = align_address(namesz, size / 8);\n  size_t aligned_descsz = align_address(descsz, size / 8);\n\n  size_t notehdrsz = 3 * (size / 8) + aligned_namesz;\n\n  unsigned char* buffer = new unsigned char[notehdrsz];\n  memset(buffer, 0, notehdrsz);\n\n  bool is_big_endian = parameters->target().is_big_endian();\n\n  if (size == 32)\n    {\n      if (!is_big_endian)\n\t{\n\t  elfcpp::Swap<32, false>::writeval(buffer, namesz);\n\t  elfcpp::Swap<32, false>::writeval(buffer + 4, descsz);\n\t  elfcpp::Swap<32, false>::writeval(buffer + 8, note_type);\n\t}\n      else\n\t{\n\t  elfcpp::Swap<32, true>::writeval(buffer, namesz);\n\t  elfcpp::Swap<32, true>::writeval(buffer + 4, descsz);\n\t  elfcpp::Swap<32, true>::writeval(buffer + 8, note_type);\n\t}\n    }\n  else if (size == 64)\n    {\n      if (!is_big_endian)\n\t{\n\t  elfcpp::Swap<64, false>::writeval(buffer, namesz);\n\t  elfcpp::Swap<64, false>::writeval(buffer + 8, descsz);\n\t  elfcpp::Swap<64, false>::writeval(buffer + 16, note_type);\n\t}\n      else\n\t{\n\t  elfcpp::Swap<64, true>::writeval(buffer, namesz);\n\t  elfcpp::Swap<64, true>::writeval(buffer + 8, descsz);\n\t  elfcpp::Swap<64, true>::writeval(buffer + 16, note_type);\n\t}\n    }\n  else\n    gold_unreachable();\n\n  memcpy(buffer + 3 * (size / 8), name, namesz);\n\n  elfcpp::Elf_Xword flags = 0;\n  if (allocate)\n    flags = elfcpp::SHF_ALLOC;\n  Output_section* os = this->choose_output_section(NULL, section_name,\n\t\t\t\t\t\t   elfcpp::SHT_NOTE,\n\t\t\t\t\t\t   flags, false, false,\n\t\t\t\t\t\t   false);\n  if (os == NULL)\n    return NULL;\n\n  Output_section_data* posd = new Output_data_const_buffer(buffer, notehdrsz,\n\t\t\t\t\t\t\t   size / 8,\n\t\t\t\t\t\t\t   \"** note header\");\n  os->add_output_section_data(posd);\n\n  *trailing_padding = aligned_descsz - descsz;\n\n  return os;\n}\n\n// For an executable or shared library, create a note to record the\n// version of gold used to create the binary.\n\nvoid\nLayout::create_gold_note()\n{\n  if (parameters->options().relocatable())\n    return;\n\n  std::string desc = std::string(\"gold \") + gold::get_version_string();\n\n  size_t trailing_padding;\n  Output_section *os = this->create_note(\"GNU\", elfcpp::NT_GNU_GOLD_VERSION,\n\t\t\t\t\t \".note.gnu.gold-version\", desc.size(),\n\t\t\t\t\t false, &trailing_padding);\n  if (os == NULL)\n    return;\n\n  Output_section_data* posd = new Output_data_const(desc, 4);\n  os->add_output_section_data(posd);\n\n  if (trailing_padding > 0)\n    {\n      posd = new Output_data_zero_fill(trailing_padding, 0);\n      os->add_output_section_data(posd);\n    }\n}\n\n// Record whether the stack should be executable.  This can be set\n// from the command line using the -z execstack or -z noexecstack\n// options.  Otherwise, if any input file has a .note.GNU-stack\n// section with the SHF_EXECINSTR flag set, the stack should be\n// executable.  Otherwise, if at least one input file a\n// .note.GNU-stack section, and some input file has no .note.GNU-stack\n// section, we use the target default for whether the stack should be\n// executable.  Otherwise, we don't generate a stack note.  When\n// generating a object file, we create a .note.GNU-stack section with\n// the appropriate marking.  When generating an executable or shared\n// library, we create a PT_GNU_STACK segment.\n\nvoid\nLayout::create_executable_stack_info()\n{\n  bool is_stack_executable;\n  if (parameters->options().is_execstack_set())\n    is_stack_executable = parameters->options().is_stack_executable();\n  else if (!this->input_with_gnu_stack_note_)\n    return;\n  else\n    {\n      if (this->input_requires_executable_stack_)\n\tis_stack_executable = true;\n      else if (this->input_without_gnu_stack_note_)\n\tis_stack_executable =\n\t  parameters->target().is_default_stack_executable();\n      else\n\tis_stack_executable = false;\n    }\n\n  if (parameters->options().relocatable())\n    {\n      const char* name = this->namepool_.add(\".note.GNU-stack\", false, NULL);\n      elfcpp::Elf_Xword flags = 0;\n      if (is_stack_executable)\n\tflags |= elfcpp::SHF_EXECINSTR;\n      this->make_output_section(name, elfcpp::SHT_PROGBITS, flags, false,\n\t\t\t\tfalse);\n    }\n  else\n    {\n      if (this->script_options_->saw_phdrs_clause())\n\treturn;\n      int flags = elfcpp::PF_R | elfcpp::PF_W;\n      if (is_stack_executable)\n\tflags |= elfcpp::PF_X;\n      this->make_output_segment(elfcpp::PT_GNU_STACK, flags);\n    }\n}\n\n// If --build-id was used, set up the build ID note.\n\nvoid\nLayout::create_build_id()\n{\n  if (!parameters->options().user_set_build_id())\n    return;\n\n  const char* style = parameters->options().build_id();\n  if (strcmp(style, \"none\") == 0)\n    return;\n\n  // Set DESCSZ to the size of the note descriptor.  When possible,\n  // set DESC to the note descriptor contents.\n  size_t descsz;\n  std::string desc;\n  if (strcmp(style, \"md5\") == 0)\n    descsz = 128 / 8;\n  else if (strcmp(style, \"sha1\") == 0)\n    descsz = 160 / 8;\n  else if (strcmp(style, \"uuid\") == 0)\n    {\n      const size_t uuidsz = 128 / 8;\n\n      char buffer[uuidsz];\n      memset(buffer, 0, uuidsz);\n\n      int descriptor = open_descriptor(-1, \"/dev/urandom\", O_RDONLY);\n      if (descriptor < 0)\n\tgold_error(_(\"--build-id=uuid failed: could not open /dev/urandom: %s\"),\n\t\t   strerror(errno));\n      else\n\t{\n\t  ssize_t got = ::read(descriptor, buffer, uuidsz);\n\t  release_descriptor(descriptor, true);\n\t  if (got < 0)\n\t    gold_error(_(\"/dev/urandom: read failed: %s\"), strerror(errno));\n\t  else if (static_cast<size_t>(got) != uuidsz)\n\t    gold_error(_(\"/dev/urandom: expected %zu bytes, got %zd bytes\"),\n\t\t       uuidsz, got);\n\t}\n\n      desc.assign(buffer, uuidsz);\n      descsz = uuidsz;\n    }\n  else if (strncmp(style, \"0x\", 2) == 0)\n    {\n      hex_init();\n      const char* p = style + 2;\n      while (*p != '\\0')\n\t{\n\t  if (hex_p(p[0]) && hex_p(p[1]))\n\t    {\n\t      char c = (hex_value(p[0]) << 4) | hex_value(p[1]);\n\t      desc += c;\n\t      p += 2;\n\t    }\n\t  else if (*p == '-' || *p == ':')\n\t    ++p;\n\t  else\n\t    gold_fatal(_(\"--build-id argument '%s' not a valid hex number\"),\n\t\t       style);\n\t}\n      descsz = desc.size();\n    }\n  else\n    gold_fatal(_(\"unrecognized --build-id argument '%s'\"), style);\n\n  // Create the note.\n  size_t trailing_padding;\n  Output_section* os = this->create_note(\"GNU\", elfcpp::NT_GNU_BUILD_ID,\n\t\t\t\t\t \".note.gnu.build-id\", descsz, true,\n\t\t\t\t\t &trailing_padding);\n  if (os == NULL)\n    return;\n\n  if (!desc.empty())\n    {\n      // We know the value already, so we fill it in now.\n      gold_assert(desc.size() == descsz);\n\n      Output_section_data* posd = new Output_data_const(desc, 4);\n      os->add_output_section_data(posd);\n\n      if (trailing_padding != 0)\n\t{\n\t  posd = new Output_data_zero_fill(trailing_padding, 0);\n\t  os->add_output_section_data(posd);\n\t}\n    }\n  else\n    {\n      // We need to compute a checksum after we have completed the\n      // link.\n      gold_assert(trailing_padding == 0);\n      this->build_id_note_ = new Output_data_zero_fill(descsz, 4);\n      os->add_output_section_data(this->build_id_note_);\n    }\n}\n\n// If we have both .stabXX and .stabXXstr sections, then the sh_link\n// field of the former should point to the latter.  I'm not sure who\n// started this, but the GNU linker does it, and some tools depend\n// upon it.\n\nvoid\nLayout::link_stabs_sections()\n{\n  if (!this->have_stabstr_section_)\n    return;\n\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if ((*p)->type() != elfcpp::SHT_STRTAB)\n\tcontinue;\n\n      const char* name = (*p)->name();\n      if (strncmp(name, \".stab\", 5) != 0)\n\tcontinue;\n\n      size_t len = strlen(name);\n      if (strcmp(name + len - 3, \"str\") != 0)\n\tcontinue;\n\n      std::string stab_name(name, len - 3);\n      Output_section* stab_sec;\n      stab_sec = this->find_output_section(stab_name.c_str());\n      if (stab_sec != NULL)\n\tstab_sec->set_link_section(*p);\n    }\n}\n\n// Create .gnu_incremental_inputs and .gnu_incremental_strtab sections needed\n// for the next run of incremental linking to check what has changed.\n\nvoid\nLayout::create_incremental_info_sections()\n{\n  gold_assert(this->incremental_inputs_ != NULL);\n\n  // Add the .gnu_incremental_inputs section.\n  const char *incremental_inputs_name =\n    this->namepool_.add(\".gnu_incremental_inputs\", false, NULL);\n  Output_section* inputs_os =\n    this->make_output_section(incremental_inputs_name,\n\t\t\t      elfcpp::SHT_GNU_INCREMENTAL_INPUTS, 0,\n\t\t\t      false, false);\n  Output_section_data* posd =\n      this->incremental_inputs_->create_incremental_inputs_section_data();\n  inputs_os->add_output_section_data(posd);\n  \n  // Add the .gnu_incremental_strtab section.\n  const char *incremental_strtab_name =\n    this->namepool_.add(\".gnu_incremental_strtab\", false, NULL);\n  Output_section* strtab_os = this->make_output_section(incremental_strtab_name,\n                                                        elfcpp::SHT_STRTAB,\n                                                        0, false, false);\n  Output_data_strtab* strtab_data =\n    new Output_data_strtab(this->incremental_inputs_->get_stringpool());\n  strtab_os->add_output_section_data(strtab_data);\n  \n  inputs_os->set_link_section(strtab_data);\n}\n\n// Return whether SEG1 should be before SEG2 in the output file.  This\n// is based entirely on the segment type and flags.  When this is\n// called the segment addresses has normally not yet been set.\n\nbool\nLayout::segment_precedes(const Output_segment* seg1,\n\t\t\t const Output_segment* seg2)\n{\n  elfcpp::Elf_Word type1 = seg1->type();\n  elfcpp::Elf_Word type2 = seg2->type();\n\n  // The single PT_PHDR segment is required to precede any loadable\n  // segment.  We simply make it always first.\n  if (type1 == elfcpp::PT_PHDR)\n    {\n      gold_assert(type2 != elfcpp::PT_PHDR);\n      return true;\n    }\n  if (type2 == elfcpp::PT_PHDR)\n    return false;\n\n  // The single PT_INTERP segment is required to precede any loadable\n  // segment.  We simply make it always second.\n  if (type1 == elfcpp::PT_INTERP)\n    {\n      gold_assert(type2 != elfcpp::PT_INTERP);\n      return true;\n    }\n  if (type2 == elfcpp::PT_INTERP)\n    return false;\n\n  // We then put PT_LOAD segments before any other segments.\n  if (type1 == elfcpp::PT_LOAD && type2 != elfcpp::PT_LOAD)\n    return true;\n  if (type2 == elfcpp::PT_LOAD && type1 != elfcpp::PT_LOAD)\n    return false;\n\n  // We put the PT_TLS segment last except for the PT_GNU_RELRO\n  // segment, because that is where the dynamic linker expects to find\n  // it (this is just for efficiency; other positions would also work\n  // correctly).\n  if (type1 == elfcpp::PT_TLS\n      && type2 != elfcpp::PT_TLS\n      && type2 != elfcpp::PT_GNU_RELRO)\n    return false;\n  if (type2 == elfcpp::PT_TLS\n      && type1 != elfcpp::PT_TLS\n      && type1 != elfcpp::PT_GNU_RELRO)\n    return true;\n\n  // We put the PT_GNU_RELRO segment last, because that is where the\n  // dynamic linker expects to find it (as with PT_TLS, this is just\n  // for efficiency).\n  if (type1 == elfcpp::PT_GNU_RELRO && type2 != elfcpp::PT_GNU_RELRO)\n    return false;\n  if (type2 == elfcpp::PT_GNU_RELRO && type1 != elfcpp::PT_GNU_RELRO)\n    return true;\n\n  const elfcpp::Elf_Word flags1 = seg1->flags();\n  const elfcpp::Elf_Word flags2 = seg2->flags();\n\n  // The order of non-PT_LOAD segments is unimportant.  We simply sort\n  // by the numeric segment type and flags values.  There should not\n  // be more than one segment with the same type and flags.\n  if (type1 != elfcpp::PT_LOAD)\n    {\n      if (type1 != type2)\n\treturn type1 < type2;\n      gold_assert(flags1 != flags2);\n      return flags1 < flags2;\n    }\n\n  // If the addresses are set already, sort by load address.\n  if (seg1->are_addresses_set())\n    {\n      if (!seg2->are_addresses_set())\n\treturn true;\n\n      unsigned int section_count1 = seg1->output_section_count();\n      unsigned int section_count2 = seg2->output_section_count();\n      if (section_count1 == 0 && section_count2 > 0)\n\treturn true;\n      if (section_count1 > 0 && section_count2 == 0)\n\treturn false;\n\n      uint64_t paddr1 = seg1->first_section_load_address();\n      uint64_t paddr2 = seg2->first_section_load_address();\n      if (paddr1 != paddr2)\n\treturn paddr1 < paddr2;\n    }\n  else if (seg2->are_addresses_set())\n    return false;\n\n  // A segment which holds large data comes after a segment which does\n  // not hold large data.\n  if (seg1->is_large_data_segment())\n    {\n      if (!seg2->is_large_data_segment())\n\treturn false;\n    }\n  else if (seg2->is_large_data_segment())\n    return true;\n\n  // Otherwise, we sort PT_LOAD segments based on the flags.  Readonly\n  // segments come before writable segments.  Then writable segments\n  // with data come before writable segments without data.  Then\n  // executable segments come before non-executable segments.  Then\n  // the unlikely case of a non-readable segment comes before the\n  // normal case of a readable segment.  If there are multiple\n  // segments with the same type and flags, we require that the\n  // address be set, and we sort by virtual address and then physical\n  // address.\n  if ((flags1 & elfcpp::PF_W) != (flags2 & elfcpp::PF_W))\n    return (flags1 & elfcpp::PF_W) == 0;\n  if ((flags1 & elfcpp::PF_W) != 0\n      && seg1->has_any_data_sections() != seg2->has_any_data_sections())\n    return seg1->has_any_data_sections();\n  if ((flags1 & elfcpp::PF_X) != (flags2 & elfcpp::PF_X))\n    return (flags1 & elfcpp::PF_X) != 0;\n  if ((flags1 & elfcpp::PF_R) != (flags2 & elfcpp::PF_R))\n    return (flags1 & elfcpp::PF_R) == 0;\n\n  // We shouldn't get here--we shouldn't create segments which we\n  // can't distinguish.\n  gold_unreachable();\n}\n\n// Increase OFF so that it is congruent to ADDR modulo ABI_PAGESIZE.\n\nstatic off_t\nalign_file_offset(off_t off, uint64_t addr, uint64_t abi_pagesize)\n{\n  uint64_t unsigned_off = off;\n  uint64_t aligned_off = ((unsigned_off & ~(abi_pagesize - 1))\n\t\t\t  | (addr & (abi_pagesize - 1)));\n  if (aligned_off < unsigned_off)\n    aligned_off += abi_pagesize;\n  return aligned_off;\n}\n\n// Set the file offsets of all the segments, and all the sections they\n// contain.  They have all been created.  LOAD_SEG must be be laid out\n// first.  Return the offset of the data to follow.\n\noff_t\nLayout::set_segment_offsets(const Target* target, Output_segment* load_seg,\n\t\t\t    unsigned int *pshndx)\n{\n  // Sort them into the final order.\n  std::sort(this->segment_list_.begin(), this->segment_list_.end(),\n\t    Layout::Compare_segments());\n\n  // Find the PT_LOAD segments, and set their addresses and offsets\n  // and their section's addresses and offsets.\n  uint64_t addr;\n  if (parameters->options().user_set_Ttext())\n    addr = parameters->options().Ttext();\n  else if (parameters->options().output_is_position_independent())\n    addr = 0;\n  else\n    addr = target->default_text_segment_address();\n  off_t off = 0;\n\n  // If LOAD_SEG is NULL, then the file header and segment headers\n  // will not be loadable.  But they still need to be at offset 0 in\n  // the file.  Set their offsets now.\n  if (load_seg == NULL)\n    {\n      for (Data_list::iterator p = this->special_output_list_.begin();\n\t   p != this->special_output_list_.end();\n\t   ++p)\n\t{\n\t  off = align_address(off, (*p)->addralign());\n\t  (*p)->set_address_and_file_offset(0, off);\n\t  off += (*p)->data_size();\n\t}\n    }\n\n  const bool check_sections = parameters->options().check_sections();\n  Output_segment* last_load_segment = NULL;\n\n  bool was_readonly = false;\n  for (Segment_list::iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() == elfcpp::PT_LOAD)\n\t{\n\t  if (load_seg != NULL && load_seg != *p)\n\t    gold_unreachable();\n\t  load_seg = NULL;\n\n\t  bool are_addresses_set = (*p)->are_addresses_set();\n\t  if (are_addresses_set)\n\t    {\n\t      // When it comes to setting file offsets, we care about\n\t      // the physical address.\n\t      addr = (*p)->paddr();\n\t    }\n\t  else if (parameters->options().user_set_Tdata()\n\t\t   && ((*p)->flags() & elfcpp::PF_W) != 0\n\t\t   && (!parameters->options().user_set_Tbss()\n\t\t       || (*p)->has_any_data_sections()))\n\t    {\n\t      addr = parameters->options().Tdata();\n\t      are_addresses_set = true;\n\t    }\n\t  else if (parameters->options().user_set_Tbss()\n\t\t   && ((*p)->flags() & elfcpp::PF_W) != 0\n\t\t   && !(*p)->has_any_data_sections())\n\t    {\n\t      addr = parameters->options().Tbss();\n\t      are_addresses_set = true;\n\t    }\n\n\t  uint64_t orig_addr = addr;\n\t  uint64_t orig_off = off;\n\n\t  uint64_t aligned_addr = 0;\n\t  uint64_t abi_pagesize = target->abi_pagesize();\n\t  uint64_t common_pagesize = target->common_pagesize();\n\n\t  if (!parameters->options().nmagic()\n\t      && !parameters->options().omagic())\n\t    (*p)->set_minimum_p_align(common_pagesize);\n\n\t  if (!are_addresses_set)\n\t    {\n\t      // If the last segment was readonly, and this one is\n\t      // not, then skip the address forward one page,\n\t      // maintaining the same position within the page.  This\n\t      // lets us store both segments overlapping on a single\n\t      // page in the file, but the loader will put them on\n\t      // different pages in memory.\n\n\t      addr = align_address(addr, (*p)->maximum_alignment());\n\t      aligned_addr = addr;\n\n\t      if (was_readonly && ((*p)->flags() & elfcpp::PF_W) != 0)\n\t\t{\n\t\t  if ((addr & (abi_pagesize - 1)) != 0)\n\t\t    addr = addr + abi_pagesize;\n\t\t}\n\n\t      off = orig_off + ((addr - orig_addr) & (abi_pagesize - 1));\n\t    }\n\n\t  if (!parameters->options().nmagic()\n\t      && !parameters->options().omagic())\n\t    off = align_file_offset(off, addr, abi_pagesize);\n\t  else if (load_seg == NULL)\n\t    {\n\t      // This is -N or -n with a section script which prevents\n\t      // us from using a load segment.  We need to ensure that\n\t      // the file offset is aligned to the alignment of the\n\t      // segment.  This is because the linker script\n\t      // implicitly assumed a zero offset.  If we don't align\n\t      // here, then the alignment of the sections in the\n\t      // linker script may not match the alignment of the\n\t      // sections in the set_section_addresses call below,\n\t      // causing an error about dot moving backward.\n\t      off = align_address(off, (*p)->maximum_alignment());\n\t    }\n\n\t  unsigned int shndx_hold = *pshndx;\n\t  uint64_t new_addr = (*p)->set_section_addresses(this, false, addr,\n                                                          &off, pshndx);\n\n\t  // Now that we know the size of this segment, we may be able\n\t  // to save a page in memory, at the cost of wasting some\n\t  // file space, by instead aligning to the start of a new\n\t  // page.  Here we use the real machine page size rather than\n\t  // the ABI mandated page size.\n\n\t  if (!are_addresses_set && aligned_addr != addr)\n\t    {\n\t      uint64_t first_off = (common_pagesize\n\t\t\t\t    - (aligned_addr\n\t\t\t\t       & (common_pagesize - 1)));\n\t      uint64_t last_off = new_addr & (common_pagesize - 1);\n\t      if (first_off > 0\n\t\t  && last_off > 0\n\t\t  && ((aligned_addr & ~ (common_pagesize - 1))\n\t\t      != (new_addr & ~ (common_pagesize - 1)))\n\t\t  && first_off + last_off <= common_pagesize)\n\t\t{\n\t\t  *pshndx = shndx_hold;\n\t\t  addr = align_address(aligned_addr, common_pagesize);\n\t\t  addr = align_address(addr, (*p)->maximum_alignment());\n\t\t  off = orig_off + ((addr - orig_addr) & (abi_pagesize - 1));\n\t\t  off = align_file_offset(off, addr, abi_pagesize);\n\t\t  new_addr = (*p)->set_section_addresses(this, true, addr,\n                                                         &off, pshndx);\n\t\t}\n\t    }\n\n\t  addr = new_addr;\n\n\t  if (((*p)->flags() & elfcpp::PF_W) == 0)\n\t    was_readonly = true;\n\n\t  // Implement --check-sections.  We know that the segments\n\t  // are sorted by LMA.\n\t  if (check_sections && last_load_segment != NULL)\n\t    {\n\t      gold_assert(last_load_segment->paddr() <= (*p)->paddr());\n\t      if (last_load_segment->paddr() + last_load_segment->memsz()\n\t\t  > (*p)->paddr())\n\t\t{\n\t\t  unsigned long long lb1 = last_load_segment->paddr();\n\t\t  unsigned long long le1 = lb1 + last_load_segment->memsz();\n\t\t  unsigned long long lb2 = (*p)->paddr();\n\t\t  unsigned long long le2 = lb2 + (*p)->memsz();\n\t\t  gold_error(_(\"load segment overlap [0x%llx -> 0x%llx] and \"\n\t\t\t       \"[0x%llx -> 0x%llx]\"),\n\t\t\t     lb1, le1, lb2, le2);\n\t\t}\n\t    }\n\t  last_load_segment = *p;\n\t}\n    }\n\n  // Handle the non-PT_LOAD segments, setting their offsets from their\n  // section's offsets.\n  for (Segment_list::iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() != elfcpp::PT_LOAD)\n\t(*p)->set_offset();\n    }\n\n  // Set the TLS offsets for each section in the PT_TLS segment.\n  if (this->tls_segment_ != NULL)\n    this->tls_segment_->set_tls_offsets();\n\n  return off;\n}\n\n// Set the offsets of all the allocated sections when doing a\n// relocatable link.  This does the same jobs as set_segment_offsets,\n// only for a relocatable link.\n\noff_t\nLayout::set_relocatable_section_offsets(Output_data* file_header,\n\t\t\t\t\tunsigned int *pshndx)\n{\n  off_t off = 0;\n\n  file_header->set_address_and_file_offset(0, 0);\n  off += file_header->data_size();\n\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      // We skip unallocated sections here, except that group sections\n      // have to come first.\n      if (((*p)->flags() & elfcpp::SHF_ALLOC) == 0\n\t  && (*p)->type() != elfcpp::SHT_GROUP)\n\tcontinue;\n\n      off = align_address(off, (*p)->addralign());\n\n      // The linker script might have set the address.\n      if (!(*p)->is_address_valid())\n\t(*p)->set_address(0);\n      (*p)->set_file_offset(off);\n      (*p)->finalize_data_size();\n      off += (*p)->data_size();\n\n      (*p)->set_out_shndx(*pshndx);\n      ++*pshndx;\n    }\n\n  return off;\n}\n\n// Set the file offset of all the sections not associated with a\n// segment.\n\noff_t\nLayout::set_section_offsets(off_t off, Layout::Section_offset_pass pass)\n{\n  for (Section_list::iterator p = this->unattached_section_list_.begin();\n       p != this->unattached_section_list_.end();\n       ++p)\n    {\n      // The symtab section is handled in create_symtab_sections.\n      if (*p == this->symtab_section_)\n\tcontinue;\n\n      // If we've already set the data size, don't set it again.\n      if ((*p)->is_offset_valid() && (*p)->is_data_size_valid())\n\tcontinue;\n\n      if (pass == BEFORE_INPUT_SECTIONS_PASS\n\t  && (*p)->requires_postprocessing())\n\t{\n\t  (*p)->create_postprocessing_buffer();\n\t  this->any_postprocessing_sections_ = true;\n\t}\n\n      if (pass == BEFORE_INPUT_SECTIONS_PASS\n          && (*p)->after_input_sections())\n        continue;\n      else if (pass == POSTPROCESSING_SECTIONS_PASS\n               && (!(*p)->after_input_sections()\n                   || (*p)->type() == elfcpp::SHT_STRTAB))\n        continue;\n      else if (pass == STRTAB_AFTER_POSTPROCESSING_SECTIONS_PASS\n               && (!(*p)->after_input_sections()\n                   || (*p)->type() != elfcpp::SHT_STRTAB))\n        continue;\n\n      off = align_address(off, (*p)->addralign());\n      (*p)->set_file_offset(off);\n      (*p)->finalize_data_size();\n      off += (*p)->data_size();\n\n      // At this point the name must be set.\n      if (pass != STRTAB_AFTER_POSTPROCESSING_SECTIONS_PASS)\n\tthis->namepool_.add((*p)->name(), false, NULL);\n    }\n  return off;\n}\n\n// Set the section indexes of all the sections not associated with a\n// segment.\n\nunsigned int\nLayout::set_section_indexes(unsigned int shndx)\n{\n  for (Section_list::iterator p = this->unattached_section_list_.begin();\n       p != this->unattached_section_list_.end();\n       ++p)\n    {\n      if (!(*p)->has_out_shndx())\n\t{\n\t  (*p)->set_out_shndx(shndx);\n\t  ++shndx;\n\t}\n    }\n  return shndx;\n}\n\n// Set the section addresses according to the linker script.  This is\n// only called when we see a SECTIONS clause.  This returns the\n// program segment which should hold the file header and segment\n// headers, if any.  It will return NULL if they should not be in a\n// segment.\n\nOutput_segment*\nLayout::set_section_addresses_from_script(Symbol_table* symtab)\n{\n  Script_sections* ss = this->script_options_->script_sections();\n  gold_assert(ss->saw_sections_clause());\n  return this->script_options_->set_section_addresses(symtab, this);\n}\n\n// Place the orphan sections in the linker script.\n\nvoid\nLayout::place_orphan_sections_in_script()\n{\n  Script_sections* ss = this->script_options_->script_sections();\n  gold_assert(ss->saw_sections_clause());\n\n  // Place each orphaned output section in the script.\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if (!(*p)->found_in_sections_clause())\n\tss->place_orphan(*p);\n    }\n}\n\n// Count the local symbols in the regular symbol table and the dynamic\n// symbol table, and build the respective string pools.\n\nvoid\nLayout::count_local_symbols(const Task* task,\n\t\t\t    const Input_objects* input_objects)\n{\n  // First, figure out an upper bound on the number of symbols we'll\n  // be inserting into each pool.  This helps us create the pools with\n  // the right size, to avoid unnecessary hashtable resizing.\n  unsigned int symbol_count = 0;\n  for (Input_objects::Relobj_iterator p = input_objects->relobj_begin();\n       p != input_objects->relobj_end();\n       ++p)\n    symbol_count += (*p)->local_symbol_count();\n\n  // Go from \"upper bound\" to \"estimate.\"  We overcount for two\n  // reasons: we double-count symbols that occur in more than one\n  // object file, and we count symbols that are dropped from the\n  // output.  Add it all together and assume we overcount by 100%.\n  symbol_count /= 2;\n\n  // We assume all symbols will go into both the sympool and dynpool.\n  this->sympool_.reserve(symbol_count);\n  this->dynpool_.reserve(symbol_count);\n\n  for (Input_objects::Relobj_iterator p = input_objects->relobj_begin();\n       p != input_objects->relobj_end();\n       ++p)\n    {\n      Task_lock_obj<Object> tlo(task, *p);\n      (*p)->count_local_symbols(&this->sympool_, &this->dynpool_);\n    }\n}\n\n// Create the symbol table sections.  Here we also set the final\n// values of the symbols.  At this point all the loadable sections are\n// fully laid out.  SHNUM is the number of sections so far.\n\nvoid\nLayout::create_symtab_sections(const Input_objects* input_objects,\n\t\t\t       Symbol_table* symtab,\n\t\t\t       unsigned int shnum,\n\t\t\t       off_t* poff)\n{\n  int symsize;\n  unsigned int align;\n  if (parameters->target().get_size() == 32)\n    {\n      symsize = elfcpp::Elf_sizes<32>::sym_size;\n      align = 4;\n    }\n  else if (parameters->target().get_size() == 64)\n    {\n      symsize = elfcpp::Elf_sizes<64>::sym_size;\n      align = 8;\n    }\n  else\n    gold_unreachable();\n\n  off_t off = *poff;\n  off = align_address(off, align);\n  off_t startoff = off;\n\n  // Save space for the dummy symbol at the start of the section.  We\n  // never bother to write this out--it will just be left as zero.\n  off += symsize;\n  unsigned int local_symbol_index = 1;\n\n  // Add STT_SECTION symbols for each Output section which needs one.\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if (!(*p)->needs_symtab_index())\n\t(*p)->set_symtab_index(-1U);\n      else\n\t{\n\t  (*p)->set_symtab_index(local_symbol_index);\n\t  ++local_symbol_index;\n\t  off += symsize;\n\t}\n    }\n\n  for (Input_objects::Relobj_iterator p = input_objects->relobj_begin();\n       p != input_objects->relobj_end();\n       ++p)\n    {\n      unsigned int index = (*p)->finalize_local_symbols(local_symbol_index,\n                                                        off, symtab);\n      off += (index - local_symbol_index) * symsize;\n      local_symbol_index = index;\n    }\n\n  unsigned int local_symcount = local_symbol_index;\n  gold_assert(static_cast<off_t>(local_symcount * symsize) == off - startoff);\n\n  off_t dynoff;\n  size_t dyn_global_index;\n  size_t dyncount;\n  if (this->dynsym_section_ == NULL)\n    {\n      dynoff = 0;\n      dyn_global_index = 0;\n      dyncount = 0;\n    }\n  else\n    {\n      dyn_global_index = this->dynsym_section_->info();\n      off_t locsize = dyn_global_index * this->dynsym_section_->entsize();\n      dynoff = this->dynsym_section_->offset() + locsize;\n      dyncount = (this->dynsym_section_->data_size() - locsize) / symsize;\n      gold_assert(static_cast<off_t>(dyncount * symsize)\n\t\t  == this->dynsym_section_->data_size() - locsize);\n    }\n\n  off = symtab->finalize(off, dynoff, dyn_global_index, dyncount,\n\t\t\t &this->sympool_, &local_symcount);\n\n  if (!parameters->options().strip_all())\n    {\n      this->sympool_.set_string_offsets();\n\n      const char* symtab_name = this->namepool_.add(\".symtab\", false, NULL);\n      Output_section* osymtab = this->make_output_section(symtab_name,\n\t\t\t\t\t\t\t  elfcpp::SHT_SYMTAB,\n\t\t\t\t\t\t\t  0, false, false);\n      this->symtab_section_ = osymtab;\n\n      Output_section_data* pos = new Output_data_fixed_space(off - startoff,\n\t\t\t\t\t\t\t     align,\n\t\t\t\t\t\t\t     \"** symtab\");\n      osymtab->add_output_section_data(pos);\n\n      // We generate a .symtab_shndx section if we have more than\n      // SHN_LORESERVE sections.  Technically it is possible that we\n      // don't need one, because it is possible that there are no\n      // symbols in any of sections with indexes larger than\n      // SHN_LORESERVE.  That is probably unusual, though, and it is\n      // easier to always create one than to compute section indexes\n      // twice (once here, once when writing out the symbols).\n      if (shnum >= elfcpp::SHN_LORESERVE)\n\t{\n\t  const char* symtab_xindex_name = this->namepool_.add(\".symtab_shndx\",\n\t\t\t\t\t\t\t       false, NULL);\n\t  Output_section* osymtab_xindex =\n\t    this->make_output_section(symtab_xindex_name,\n\t\t\t\t      elfcpp::SHT_SYMTAB_SHNDX, 0, false,\n\t\t\t\t      false);\n\n\t  size_t symcount = (off - startoff) / symsize;\n\t  this->symtab_xindex_ = new Output_symtab_xindex(symcount);\n\n\t  osymtab_xindex->add_output_section_data(this->symtab_xindex_);\n\n\t  osymtab_xindex->set_link_section(osymtab);\n\t  osymtab_xindex->set_addralign(4);\n\t  osymtab_xindex->set_entsize(4);\n\n\t  osymtab_xindex->set_after_input_sections();\n\n\t  // This tells the driver code to wait until the symbol table\n\t  // has written out before writing out the postprocessing\n\t  // sections, including the .symtab_shndx section.\n\t  this->any_postprocessing_sections_ = true;\n\t}\n\n      const char* strtab_name = this->namepool_.add(\".strtab\", false, NULL);\n      Output_section* ostrtab = this->make_output_section(strtab_name,\n\t\t\t\t\t\t\t  elfcpp::SHT_STRTAB,\n\t\t\t\t\t\t\t  0, false, false);\n\n      Output_section_data* pstr = new Output_data_strtab(&this->sympool_);\n      ostrtab->add_output_section_data(pstr);\n\n      osymtab->set_file_offset(startoff);\n      osymtab->finalize_data_size();\n      osymtab->set_link_section(ostrtab);\n      osymtab->set_info(local_symcount);\n      osymtab->set_entsize(symsize);\n\n      *poff = off;\n    }\n}\n\n// Create the .shstrtab section, which holds the names of the\n// sections.  At the time this is called, we have created all the\n// output sections except .shstrtab itself.\n\nOutput_section*\nLayout::create_shstrtab()\n{\n  // FIXME: We don't need to create a .shstrtab section if we are\n  // stripping everything.\n\n  const char* name = this->namepool_.add(\".shstrtab\", false, NULL);\n\n  Output_section* os = this->make_output_section(name, elfcpp::SHT_STRTAB, 0,\n\t\t\t\t\t\t false, false);\n\n  // We can't write out this section until we've set all the section\n  // names, and we don't set the names of compressed output sections\n  // until relocations are complete.\n  os->set_after_input_sections();\n\n  Output_section_data* posd = new Output_data_strtab(&this->namepool_);\n  os->add_output_section_data(posd);\n\n  return os;\n}\n\n// Create the section headers.  SIZE is 32 or 64.  OFF is the file\n// offset.\n\nvoid\nLayout::create_shdrs(const Output_section* shstrtab_section, off_t* poff)\n{\n  Output_section_headers* oshdrs;\n  oshdrs = new Output_section_headers(this,\n\t\t\t\t      &this->segment_list_,\n\t\t\t\t      &this->section_list_,\n\t\t\t\t      &this->unattached_section_list_,\n\t\t\t\t      &this->namepool_,\n\t\t\t\t      shstrtab_section);\n  off_t off = align_address(*poff, oshdrs->addralign());\n  oshdrs->set_address_and_file_offset(0, off);\n  off += oshdrs->data_size();\n  *poff = off;\n  this->section_headers_ = oshdrs;\n}\n\n// Count the allocated sections.\n\nsize_t\nLayout::allocated_output_section_count() const\n{\n  size_t section_count = 0;\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    section_count += (*p)->output_section_count();\n  return section_count;\n}\n\n// Create the dynamic symbol table.\n\nvoid\nLayout::create_dynamic_symtab(const Input_objects* input_objects,\n                              Symbol_table* symtab,\n\t\t\t      Output_section **pdynstr,\n\t\t\t      unsigned int* plocal_dynamic_count,\n\t\t\t      std::vector<Symbol*>* pdynamic_symbols,\n\t\t\t      Versions* pversions)\n{\n  // Count all the symbols in the dynamic symbol table, and set the\n  // dynamic symbol indexes.\n\n  // Skip symbol 0, which is always all zeroes.\n  unsigned int index = 1;\n\n  // Add STT_SECTION symbols for each Output section which needs one.\n  for (Section_list::iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if (!(*p)->needs_dynsym_index())\n\t(*p)->set_dynsym_index(-1U);\n      else\n\t{\n\t  (*p)->set_dynsym_index(index);\n\t  ++index;\n\t}\n    }\n\n  // Count the local symbols that need to go in the dynamic symbol table,\n  // and set the dynamic symbol indexes.\n  for (Input_objects::Relobj_iterator p = input_objects->relobj_begin();\n       p != input_objects->relobj_end();\n       ++p)\n    {\n      unsigned int new_index = (*p)->set_local_dynsym_indexes(index);\n      index = new_index;\n    }\n\n  unsigned int local_symcount = index;\n  *plocal_dynamic_count = local_symcount;\n\n  index = symtab->set_dynsym_indexes(index, pdynamic_symbols,\n\t\t\t\t     &this->dynpool_, pversions);\n\n  int symsize;\n  unsigned int align;\n  const int size = parameters->target().get_size();\n  if (size == 32)\n    {\n      symsize = elfcpp::Elf_sizes<32>::sym_size;\n      align = 4;\n    }\n  else if (size == 64)\n    {\n      symsize = elfcpp::Elf_sizes<64>::sym_size;\n      align = 8;\n    }\n  else\n    gold_unreachable();\n\n  // Create the dynamic symbol table section.\n\n  Output_section* dynsym = this->choose_output_section(NULL, \".dynsym\",\n\t\t\t\t\t\t       elfcpp::SHT_DYNSYM,\n\t\t\t\t\t\t       elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t       false, false, true);\n\n  Output_section_data* odata = new Output_data_fixed_space(index * symsize,\n\t\t\t\t\t\t\t   align,\n\t\t\t\t\t\t\t   \"** dynsym\");\n  dynsym->add_output_section_data(odata);\n\n  dynsym->set_info(local_symcount);\n  dynsym->set_entsize(symsize);\n  dynsym->set_addralign(align);\n\n  this->dynsym_section_ = dynsym;\n\n  Output_data_dynamic* const odyn = this->dynamic_data_;\n  odyn->add_section_address(elfcpp::DT_SYMTAB, dynsym);\n  odyn->add_constant(elfcpp::DT_SYMENT, symsize);\n\n  // If there are more than SHN_LORESERVE allocated sections, we\n  // create a .dynsym_shndx section.  It is possible that we don't\n  // need one, because it is possible that there are no dynamic\n  // symbols in any of the sections with indexes larger than\n  // SHN_LORESERVE.  This is probably unusual, though, and at this\n  // time we don't know the actual section indexes so it is\n  // inconvenient to check.\n  if (this->allocated_output_section_count() >= elfcpp::SHN_LORESERVE)\n    {\n      Output_section* dynsym_xindex =\n\tthis->choose_output_section(NULL, \".dynsym_shndx\",\n\t\t\t\t    elfcpp::SHT_SYMTAB_SHNDX,\n\t\t\t\t    elfcpp::SHF_ALLOC,\n\t\t\t\t    false, false, true);\n\n      this->dynsym_xindex_ = new Output_symtab_xindex(index);\n\n      dynsym_xindex->add_output_section_data(this->dynsym_xindex_);\n\n      dynsym_xindex->set_link_section(dynsym);\n      dynsym_xindex->set_addralign(4);\n      dynsym_xindex->set_entsize(4);\n\n      dynsym_xindex->set_after_input_sections();\n\n      // This tells the driver code to wait until the symbol table has\n      // written out before writing out the postprocessing sections,\n      // including the .dynsym_shndx section.\n      this->any_postprocessing_sections_ = true;\n    }\n\n  // Create the dynamic string table section.\n\n  Output_section* dynstr = this->choose_output_section(NULL, \".dynstr\",\n\t\t\t\t\t\t       elfcpp::SHT_STRTAB,\n\t\t\t\t\t\t       elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t       false, false, true);\n\n  Output_section_data* strdata = new Output_data_strtab(&this->dynpool_);\n  dynstr->add_output_section_data(strdata);\n\n  dynsym->set_link_section(dynstr);\n  this->dynamic_section_->set_link_section(dynstr);\n\n  odyn->add_section_address(elfcpp::DT_STRTAB, dynstr);\n  odyn->add_section_size(elfcpp::DT_STRSZ, dynstr);\n\n  *pdynstr = dynstr;\n\n  // Create the hash tables.\n\n  if (strcmp(parameters->options().hash_style(), \"sysv\") == 0\n      || strcmp(parameters->options().hash_style(), \"both\") == 0)\n    {\n      unsigned char* phash;\n      unsigned int hashlen;\n      Dynobj::create_elf_hash_table(*pdynamic_symbols, local_symcount,\n\t\t\t\t    &phash, &hashlen);\n\n      Output_section* hashsec = this->choose_output_section(NULL, \".hash\",\n\t\t\t\t\t\t\t    elfcpp::SHT_HASH,\n\t\t\t\t\t\t\t    elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t\t    false, false, true);\n\n      Output_section_data* hashdata = new Output_data_const_buffer(phash,\n\t\t\t\t\t\t\t\t   hashlen,\n\t\t\t\t\t\t\t\t   align,\n\t\t\t\t\t\t\t\t   \"** hash\");\n      hashsec->add_output_section_data(hashdata);\n\n      hashsec->set_link_section(dynsym);\n      hashsec->set_entsize(4);\n\n      odyn->add_section_address(elfcpp::DT_HASH, hashsec);\n    }\n\n  if (strcmp(parameters->options().hash_style(), \"gnu\") == 0\n      || strcmp(parameters->options().hash_style(), \"both\") == 0)\n    {\n      unsigned char* phash;\n      unsigned int hashlen;\n      Dynobj::create_gnu_hash_table(*pdynamic_symbols, local_symcount,\n\t\t\t\t    &phash, &hashlen);\n\n      Output_section* hashsec = this->choose_output_section(NULL, \".gnu.hash\",\n\t\t\t\t\t\t\t    elfcpp::SHT_GNU_HASH,\n\t\t\t\t\t\t\t    elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t\t    false, false, true);\n\n      Output_section_data* hashdata = new Output_data_const_buffer(phash,\n\t\t\t\t\t\t\t\t   hashlen,\n\t\t\t\t\t\t\t\t   align,\n\t\t\t\t\t\t\t\t   \"** hash\");\n      hashsec->add_output_section_data(hashdata);\n\n      hashsec->set_link_section(dynsym);\n      hashsec->set_entsize(4);\n\n      odyn->add_section_address(elfcpp::DT_GNU_HASH, hashsec);\n    }\n}\n\n// Assign offsets to each local portion of the dynamic symbol table.\n\nvoid\nLayout::assign_local_dynsym_offsets(const Input_objects* input_objects)\n{\n  Output_section* dynsym = this->dynsym_section_;\n  gold_assert(dynsym != NULL);\n\n  off_t off = dynsym->offset();\n\n  // Skip the dummy symbol at the start of the section.\n  off += dynsym->entsize();\n\n  for (Input_objects::Relobj_iterator p = input_objects->relobj_begin();\n       p != input_objects->relobj_end();\n       ++p)\n    {\n      unsigned int count = (*p)->set_local_dynsym_offset(off);\n      off += count * dynsym->entsize();\n    }\n}\n\n// Create the version sections.\n\nvoid\nLayout::create_version_sections(const Versions* versions,\n\t\t\t\tconst Symbol_table* symtab,\n\t\t\t\tunsigned int local_symcount,\n\t\t\t\tconst std::vector<Symbol*>& dynamic_symbols,\n\t\t\t\tconst Output_section* dynstr)\n{\n  if (!versions->any_defs() && !versions->any_needs())\n    return;\n\n  switch (parameters->size_and_endianness())\n    {\n#ifdef HAVE_TARGET_32_LITTLE\n    case Parameters::TARGET_32_LITTLE:\n      this->sized_create_version_sections<32, false>(versions, symtab,\n\t\t\t\t\t\t     local_symcount,\n\t\t\t\t\t\t     dynamic_symbols, dynstr);\n      break;\n#endif\n#ifdef HAVE_TARGET_32_BIG\n    case Parameters::TARGET_32_BIG:\n      this->sized_create_version_sections<32, true>(versions, symtab,\n\t\t\t\t\t\t    local_symcount,\n\t\t\t\t\t\t    dynamic_symbols, dynstr);\n      break;\n#endif\n#ifdef HAVE_TARGET_64_LITTLE\n    case Parameters::TARGET_64_LITTLE:\n      this->sized_create_version_sections<64, false>(versions, symtab,\n\t\t\t\t\t\t     local_symcount,\n\t\t\t\t\t\t     dynamic_symbols, dynstr);\n      break;\n#endif\n#ifdef HAVE_TARGET_64_BIG\n    case Parameters::TARGET_64_BIG:\n      this->sized_create_version_sections<64, true>(versions, symtab,\n\t\t\t\t\t\t    local_symcount,\n\t\t\t\t\t\t    dynamic_symbols, dynstr);\n      break;\n#endif\n    default:\n      gold_unreachable();\n    }\n}\n\n// Create the version sections, sized version.\n\ntemplate<int size, bool big_endian>\nvoid\nLayout::sized_create_version_sections(\n    const Versions* versions,\n    const Symbol_table* symtab,\n    unsigned int local_symcount,\n    const std::vector<Symbol*>& dynamic_symbols,\n    const Output_section* dynstr)\n{\n  Output_section* vsec = this->choose_output_section(NULL, \".gnu.version\",\n\t\t\t\t\t\t     elfcpp::SHT_GNU_versym,\n\t\t\t\t\t\t     elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t     false, false, true);\n\n  unsigned char* vbuf;\n  unsigned int vsize;\n  versions->symbol_section_contents<size, big_endian>(symtab, &this->dynpool_,\n\t\t\t\t\t\t      local_symcount,\n\t\t\t\t\t\t      dynamic_symbols,\n\t\t\t\t\t\t      &vbuf, &vsize);\n\n  Output_section_data* vdata = new Output_data_const_buffer(vbuf, vsize, 2,\n\t\t\t\t\t\t\t    \"** versions\");\n\n  vsec->add_output_section_data(vdata);\n  vsec->set_entsize(2);\n  vsec->set_link_section(this->dynsym_section_);\n\n  Output_data_dynamic* const odyn = this->dynamic_data_;\n  odyn->add_section_address(elfcpp::DT_VERSYM, vsec);\n\n  if (versions->any_defs())\n    {\n      Output_section* vdsec;\n      vdsec= this->choose_output_section(NULL, \".gnu.version_d\",\n\t\t\t\t\t elfcpp::SHT_GNU_verdef,\n\t\t\t\t\t elfcpp::SHF_ALLOC,\n\t\t\t\t\t false, false, true);\n\n      unsigned char* vdbuf;\n      unsigned int vdsize;\n      unsigned int vdentries;\n      versions->def_section_contents<size, big_endian>(&this->dynpool_, &vdbuf,\n\t\t\t\t\t\t       &vdsize, &vdentries);\n\n      Output_section_data* vddata =\n\tnew Output_data_const_buffer(vdbuf, vdsize, 4, \"** version defs\");\n\n      vdsec->add_output_section_data(vddata);\n      vdsec->set_link_section(dynstr);\n      vdsec->set_info(vdentries);\n\n      odyn->add_section_address(elfcpp::DT_VERDEF, vdsec);\n      odyn->add_constant(elfcpp::DT_VERDEFNUM, vdentries);\n    }\n\n  if (versions->any_needs())\n    {\n      Output_section* vnsec;\n      vnsec = this->choose_output_section(NULL, \".gnu.version_r\",\n\t\t\t\t\t  elfcpp::SHT_GNU_verneed,\n\t\t\t\t\t  elfcpp::SHF_ALLOC,\n\t\t\t\t\t  false, false, true);\n\n      unsigned char* vnbuf;\n      unsigned int vnsize;\n      unsigned int vnentries;\n      versions->need_section_contents<size, big_endian>(&this->dynpool_,\n\t\t\t\t\t\t\t&vnbuf, &vnsize,\n\t\t\t\t\t\t\t&vnentries);\n\n      Output_section_data* vndata =\n\tnew Output_data_const_buffer(vnbuf, vnsize, 4, \"** version refs\");\n\n      vnsec->add_output_section_data(vndata);\n      vnsec->set_link_section(dynstr);\n      vnsec->set_info(vnentries);\n\n      odyn->add_section_address(elfcpp::DT_VERNEED, vnsec);\n      odyn->add_constant(elfcpp::DT_VERNEEDNUM, vnentries);\n    }\n}\n\n// Create the .interp section and PT_INTERP segment.\n\nvoid\nLayout::create_interp(const Target* target)\n{\n  const char* interp = parameters->options().dynamic_linker();\n  if (interp == NULL)\n    {\n      interp = target->dynamic_linker();\n      gold_assert(interp != NULL);\n    }\n\n  size_t len = strlen(interp) + 1;\n\n  Output_section_data* odata = new Output_data_const(interp, len, 1);\n\n  Output_section* osec = this->choose_output_section(NULL, \".interp\",\n\t\t\t\t\t\t     elfcpp::SHT_PROGBITS,\n\t\t\t\t\t\t     elfcpp::SHF_ALLOC,\n\t\t\t\t\t\t     false, true, true);\n  osec->add_output_section_data(odata);\n\n  if (!this->script_options_->saw_phdrs_clause())\n    {\n      Output_segment* oseg = this->make_output_segment(elfcpp::PT_INTERP,\n\t\t\t\t\t\t       elfcpp::PF_R);\n      oseg->add_output_section(osec, elfcpp::PF_R, false);\n    }\n}\n\n// Finish the .dynamic section and PT_DYNAMIC segment.\n\nvoid\nLayout::finish_dynamic_section(const Input_objects* input_objects,\n\t\t\t       const Symbol_table* symtab)\n{\n  if (!this->script_options_->saw_phdrs_clause())\n    {\n      Output_segment* oseg = this->make_output_segment(elfcpp::PT_DYNAMIC,\n\t\t\t\t\t\t       (elfcpp::PF_R\n\t\t\t\t\t\t\t| elfcpp::PF_W));\n      oseg->add_output_section(this->dynamic_section_,\n\t\t\t       elfcpp::PF_R | elfcpp::PF_W,\n\t\t\t       false);\n    }\n\n  Output_data_dynamic* const odyn = this->dynamic_data_;\n\n  for (Input_objects::Dynobj_iterator p = input_objects->dynobj_begin();\n       p != input_objects->dynobj_end();\n       ++p)\n    {\n      if (!(*p)->is_needed()\n\t  && (*p)->input_file()->options().as_needed())\n\t{\n\t  // This dynamic object was linked with --as-needed, but it\n\t  // is not needed.\n\t  continue;\n\t}\n\n      odyn->add_string(elfcpp::DT_NEEDED, (*p)->soname());\n    }\n\n  if (parameters->options().shared())\n    {\n      const char* soname = parameters->options().soname();\n      if (soname != NULL)\n\todyn->add_string(elfcpp::DT_SONAME, soname);\n    }\n\n  Symbol* sym = symtab->lookup(parameters->options().init());\n  if (sym != NULL && sym->is_defined() && !sym->is_from_dynobj())\n    odyn->add_symbol(elfcpp::DT_INIT, sym);\n\n  sym = symtab->lookup(parameters->options().fini());\n  if (sym != NULL && sym->is_defined() && !sym->is_from_dynobj())\n    odyn->add_symbol(elfcpp::DT_FINI, sym);\n\n  // Look for .init_array, .preinit_array and .fini_array by checking\n  // section types.\n  for(Layout::Section_list::const_iterator p = this->section_list_.begin();\n      p != this->section_list_.end();\n      ++p)\n    switch((*p)->type())\n      {\n      case elfcpp::SHT_FINI_ARRAY:\n\todyn->add_section_address(elfcpp::DT_FINI_ARRAY, *p);\n\todyn->add_section_size(elfcpp::DT_FINI_ARRAYSZ, *p); \n\tbreak;\n      case elfcpp::SHT_INIT_ARRAY:\n\todyn->add_section_address(elfcpp::DT_INIT_ARRAY, *p);\n\todyn->add_section_size(elfcpp::DT_INIT_ARRAYSZ, *p); \n\tbreak;\n      case elfcpp::SHT_PREINIT_ARRAY:\n\todyn->add_section_address(elfcpp::DT_PREINIT_ARRAY, *p);\n\todyn->add_section_size(elfcpp::DT_PREINIT_ARRAYSZ, *p); \n\tbreak;\n      default:\n\tbreak;\n      }\n  \n  // Add a DT_RPATH entry if needed.\n  const General_options::Dir_list& rpath(parameters->options().rpath());\n  if (!rpath.empty())\n    {\n      std::string rpath_val;\n      for (General_options::Dir_list::const_iterator p = rpath.begin();\n           p != rpath.end();\n           ++p)\n        {\n          if (rpath_val.empty())\n            rpath_val = p->name();\n          else\n            {\n              // Eliminate duplicates.\n              General_options::Dir_list::const_iterator q;\n              for (q = rpath.begin(); q != p; ++q)\n\t\tif (q->name() == p->name())\n                  break;\n              if (q == p)\n                {\n                  rpath_val += ':';\n                  rpath_val += p->name();\n                }\n            }\n        }\n\n      odyn->add_string(elfcpp::DT_RPATH, rpath_val);\n      if (parameters->options().enable_new_dtags())\n\todyn->add_string(elfcpp::DT_RUNPATH, rpath_val);\n    }\n\n  // Look for text segments that have dynamic relocations.\n  bool have_textrel = false;\n  if (!this->script_options_->saw_sections_clause())\n    {\n      for (Segment_list::const_iterator p = this->segment_list_.begin();\n           p != this->segment_list_.end();\n           ++p)\n        {\n          if (((*p)->flags() & elfcpp::PF_W) == 0\n              && (*p)->dynamic_reloc_count() > 0)\n            {\n              have_textrel = true;\n              break;\n            }\n        }\n    }\n  else\n    {\n      // We don't know the section -> segment mapping, so we are\n      // conservative and just look for readonly sections with\n      // relocations.  If those sections wind up in writable segments,\n      // then we have created an unnecessary DT_TEXTREL entry.\n      for (Section_list::const_iterator p = this->section_list_.begin();\n           p != this->section_list_.end();\n           ++p)\n        {\n          if (((*p)->flags() & elfcpp::SHF_ALLOC) != 0\n              && ((*p)->flags() & elfcpp::SHF_WRITE) == 0\n              && ((*p)->dynamic_reloc_count() > 0))\n            {\n              have_textrel = true;\n              break;\n            }\n        }\n    }\n\n  // Add a DT_FLAGS entry. We add it even if no flags are set so that\n  // post-link tools can easily modify these flags if desired.\n  unsigned int flags = 0;\n  if (have_textrel)\n    {\n      // Add a DT_TEXTREL for compatibility with older loaders.\n      odyn->add_constant(elfcpp::DT_TEXTREL, 0);\n      flags |= elfcpp::DF_TEXTREL;\n    }\n  if (parameters->options().shared() && this->has_static_tls())\n    flags |= elfcpp::DF_STATIC_TLS;\n  if (parameters->options().origin())\n    flags |= elfcpp::DF_ORIGIN;\n  if (parameters->options().Bsymbolic())\n    {\n      flags |= elfcpp::DF_SYMBOLIC;\n      // Add DT_SYMBOLIC for compatibility with older loaders.\n      odyn->add_constant(elfcpp::DT_SYMBOLIC, 0);\n    }\n  if (parameters->options().now())\n    flags |= elfcpp::DF_BIND_NOW;\n  odyn->add_constant(elfcpp::DT_FLAGS, flags);\n\n  flags = 0;\n  if (parameters->options().initfirst())\n    flags |= elfcpp::DF_1_INITFIRST;\n  if (parameters->options().interpose())\n    flags |= elfcpp::DF_1_INTERPOSE;\n  if (parameters->options().loadfltr())\n    flags |= elfcpp::DF_1_LOADFLTR;\n  if (parameters->options().nodefaultlib())\n    flags |= elfcpp::DF_1_NODEFLIB;\n  if (parameters->options().nodelete())\n    flags |= elfcpp::DF_1_NODELETE;\n  if (parameters->options().nodlopen())\n    flags |= elfcpp::DF_1_NOOPEN;\n  if (parameters->options().nodump())\n    flags |= elfcpp::DF_1_NODUMP;\n  if (!parameters->options().shared())\n    flags &= ~(elfcpp::DF_1_INITFIRST\n\t       | elfcpp::DF_1_NODELETE\n\t       | elfcpp::DF_1_NOOPEN);\n  if (parameters->options().origin())\n    flags |= elfcpp::DF_1_ORIGIN;\n  if (parameters->options().now())\n    flags |= elfcpp::DF_1_NOW;\n  if (flags)\n    odyn->add_constant(elfcpp::DT_FLAGS_1, flags);\n}\n\n// The mapping of input section name prefixes to output section names.\n// In some cases one prefix is itself a prefix of another prefix; in\n// such a case the longer prefix must come first.  These prefixes are\n// based on the GNU linker default ELF linker script.\n\n#define MAPPING_INIT(f, t) { f, sizeof(f) - 1, t, sizeof(t) - 1 }\nconst Layout::Section_name_mapping Layout::section_name_mapping[] =\n{\n  MAPPING_INIT(\".text.\", \".text\"),\n  MAPPING_INIT(\".ctors.\", \".ctors\"),\n  MAPPING_INIT(\".dtors.\", \".dtors\"),\n  MAPPING_INIT(\".rodata.\", \".rodata\"),\n  MAPPING_INIT(\".data.rel.ro.local\", \".data.rel.ro.local\"),\n  MAPPING_INIT(\".data.rel.ro\", \".data.rel.ro\"),\n  MAPPING_INIT(\".data.\", \".data\"),\n  MAPPING_INIT(\".bss.\", \".bss\"),\n  MAPPING_INIT(\".tdata.\", \".tdata\"),\n  MAPPING_INIT(\".tbss.\", \".tbss\"),\n  MAPPING_INIT(\".init_array.\", \".init_array\"),\n  MAPPING_INIT(\".fini_array.\", \".fini_array\"),\n  MAPPING_INIT(\".sdata.\", \".sdata\"),\n  MAPPING_INIT(\".sbss.\", \".sbss\"),\n  // FIXME: In the GNU linker, .sbss2 and .sdata2 are handled\n  // differently depending on whether it is creating a shared library.\n  MAPPING_INIT(\".sdata2.\", \".sdata\"),\n  MAPPING_INIT(\".sbss2.\", \".sbss\"),\n  MAPPING_INIT(\".lrodata.\", \".lrodata\"),\n  MAPPING_INIT(\".ldata.\", \".ldata\"),\n  MAPPING_INIT(\".lbss.\", \".lbss\"),\n  MAPPING_INIT(\".gcc_except_table.\", \".gcc_except_table\"),\n  MAPPING_INIT(\".gnu.linkonce.d.rel.ro.local.\", \".data.rel.ro.local\"),\n  MAPPING_INIT(\".gnu.linkonce.d.rel.ro.\", \".data.rel.ro\"),\n  MAPPING_INIT(\".gnu.linkonce.t.\", \".text\"),\n  MAPPING_INIT(\".gnu.linkonce.r.\", \".rodata\"),\n  MAPPING_INIT(\".gnu.linkonce.d.\", \".data\"),\n  MAPPING_INIT(\".gnu.linkonce.b.\", \".bss\"),\n  MAPPING_INIT(\".gnu.linkonce.s.\", \".sdata\"),\n  MAPPING_INIT(\".gnu.linkonce.sb.\", \".sbss\"),\n  MAPPING_INIT(\".gnu.linkonce.s2.\", \".sdata\"),\n  MAPPING_INIT(\".gnu.linkonce.sb2.\", \".sbss\"),\n  MAPPING_INIT(\".gnu.linkonce.wi.\", \".debug_info\"),\n  MAPPING_INIT(\".gnu.linkonce.td.\", \".tdata\"),\n  MAPPING_INIT(\".gnu.linkonce.tb.\", \".tbss\"),\n  MAPPING_INIT(\".gnu.linkonce.lr.\", \".lrodata\"),\n  MAPPING_INIT(\".gnu.linkonce.l.\", \".ldata\"),\n  MAPPING_INIT(\".gnu.linkonce.lb.\", \".lbss\"),\n  MAPPING_INIT(\".ARM.extab.\", \".ARM.extab\"),\n  MAPPING_INIT(\".gnu.linkonce.armextab.\", \".ARM.extab\"),\n  MAPPING_INIT(\".ARM.exidx.\", \".ARM.exidx\"),\n  MAPPING_INIT(\".gnu.linkonce.armexidx.\", \".ARM.exidx\"),\n};\n#undef MAPPING_INIT\n\nconst int Layout::section_name_mapping_count =\n  (sizeof(Layout::section_name_mapping)\n   / sizeof(Layout::section_name_mapping[0]));\n\n// Choose the output section name to use given an input section name.\n// Set *PLEN to the length of the name.  *PLEN is initialized to the\n// length of NAME.\n\nconst char*\nLayout::output_section_name(const char* name, size_t* plen)\n{\n  // gcc 4.3 generates the following sorts of section names when it\n  // needs a section name specific to a function:\n  //   .text.FN\n  //   .rodata.FN\n  //   .sdata2.FN\n  //   .data.FN\n  //   .data.rel.FN\n  //   .data.rel.local.FN\n  //   .data.rel.ro.FN\n  //   .data.rel.ro.local.FN\n  //   .sdata.FN\n  //   .bss.FN\n  //   .sbss.FN\n  //   .tdata.FN\n  //   .tbss.FN\n\n  // The GNU linker maps all of those to the part before the .FN,\n  // except that .data.rel.local.FN is mapped to .data, and\n  // .data.rel.ro.local.FN is mapped to .data.rel.ro.  The sections\n  // beginning with .data.rel.ro.local are grouped together.\n\n  // For an anonymous namespace, the string FN can contain a '.'.\n\n  // Also of interest: .rodata.strN.N, .rodata.cstN, both of which the\n  // GNU linker maps to .rodata.\n\n  // The .data.rel.ro sections are used with -z relro.  The sections\n  // are recognized by name.  We use the same names that the GNU\n  // linker does for these sections.\n\n  // It is hard to handle this in a principled way, so we don't even\n  // try.  We use a table of mappings.  If the input section name is\n  // not found in the table, we simply use it as the output section\n  // name.\n\n  const Section_name_mapping* psnm = section_name_mapping;\n  for (int i = 0; i < section_name_mapping_count; ++i, ++psnm)\n    {\n      if (strncmp(name, psnm->from, psnm->fromlen) == 0)\n\t{\n\t  *plen = psnm->tolen;\n\t  return psnm->to;\n\t}\n    }\n\n  return name;\n}\n\n// Check if a comdat group or .gnu.linkonce section with the given\n// NAME is selected for the link.  If there is already a section,\n// *KEPT_SECTION is set to point to the existing section and the\n// function returns false.  Otherwise, OBJECT, SHNDX, IS_COMDAT, and\n// IS_GROUP_NAME are recorded for this NAME in the layout object,\n// *KEPT_SECTION is set to the internal copy and the function returns\n// true.\n\nbool\nLayout::find_or_add_kept_section(const std::string& name,\n\t\t\t\t Relobj* object,\n\t\t\t\t unsigned int shndx,\n\t\t\t\t bool is_comdat,\n\t\t\t\t bool is_group_name,\n                                 Kept_section** kept_section)\n{\n  // It's normal to see a couple of entries here, for the x86 thunk\n  // sections.  If we see more than a few, we're linking a C++\n  // program, and we resize to get more space to minimize rehashing.\n  if (this->signatures_.size() > 4\n      && !this->resized_signatures_)\n    {\n      reserve_unordered_map(&this->signatures_,\n\t\t\t    this->number_of_input_files_ * 64);\n      this->resized_signatures_ = true;\n    }\n\n  Kept_section candidate;\n  std::pair<Signatures::iterator, bool> ins =\n    this->signatures_.insert(std::make_pair(name, candidate));\n\n  if (kept_section != NULL)\n    *kept_section = &ins.first->second;\n  if (ins.second)\n    {\n      // This is the first time we've seen this signature.\n      ins.first->second.set_object(object);\n      ins.first->second.set_shndx(shndx);\n      if (is_comdat)\n\tins.first->second.set_is_comdat();\n      if (is_group_name)\n\tins.first->second.set_is_group_name();\n      return true;\n    }\n\n  // We have already seen this signature.\n\n  if (ins.first->second.is_group_name())\n    {\n      // We've already seen a real section group with this signature.\n      // If the kept group is from a plugin object, and we're in the\n      // replacement phase, accept the new one as a replacement.\n      if (ins.first->second.object() == NULL\n          && parameters->options().plugins()->in_replacement_phase())\n        {\n\t  ins.first->second.set_object(object);\n\t  ins.first->second.set_shndx(shndx);\n          return true;\n        }\n      return false;\n    }\n  else if (is_group_name)\n    {\n      // This is a real section group, and we've already seen a\n      // linkonce section with this signature.  Record that we've seen\n      // a section group, and don't include this section group.\n      ins.first->second.set_is_group_name();\n      return false;\n    }\n  else\n    {\n      // We've already seen a linkonce section and this is a linkonce\n      // section.  These don't block each other--this may be the same\n      // symbol name with different section types.\n      return true;\n    }\n}\n\n// Store the allocated sections into the section list.\n\nvoid\nLayout::get_allocated_sections(Section_list* section_list) const\n{\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    if (((*p)->flags() & elfcpp::SHF_ALLOC) != 0)\n      section_list->push_back(*p);\n}\n\n// Create an output segment.\n\nOutput_segment*\nLayout::make_output_segment(elfcpp::Elf_Word type, elfcpp::Elf_Word flags)\n{\n  gold_assert(!parameters->options().relocatable());\n  Output_segment* oseg = new Output_segment(type, flags);\n  this->segment_list_.push_back(oseg);\n\n  if (type == elfcpp::PT_TLS)\n    this->tls_segment_ = oseg;\n  else if (type == elfcpp::PT_GNU_RELRO)\n    this->relro_segment_ = oseg;\n\n  return oseg;\n}\n\n// Write out the Output_sections.  Most won't have anything to write,\n// since most of the data will come from input sections which are\n// handled elsewhere.  But some Output_sections do have Output_data.\n\nvoid\nLayout::write_output_sections(Output_file* of) const\n{\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if (!(*p)->after_input_sections())\n\t(*p)->write(of);\n    }\n}\n\n// Write out data not associated with a section or the symbol table.\n\nvoid\nLayout::write_data(const Symbol_table* symtab, Output_file* of) const\n{\n  if (!parameters->options().strip_all())\n    {\n      const Output_section* symtab_section = this->symtab_section_;\n      for (Section_list::const_iterator p = this->section_list_.begin();\n\t   p != this->section_list_.end();\n\t   ++p)\n\t{\n\t  if ((*p)->needs_symtab_index())\n\t    {\n\t      gold_assert(symtab_section != NULL);\n\t      unsigned int index = (*p)->symtab_index();\n\t      gold_assert(index > 0 && index != -1U);\n\t      off_t off = (symtab_section->offset()\n\t\t\t   + index * symtab_section->entsize());\n\t      symtab->write_section_symbol(*p, this->symtab_xindex_, of, off);\n\t    }\n\t}\n    }\n\n  const Output_section* dynsym_section = this->dynsym_section_;\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if ((*p)->needs_dynsym_index())\n\t{\n\t  gold_assert(dynsym_section != NULL);\n\t  unsigned int index = (*p)->dynsym_index();\n\t  gold_assert(index > 0 && index != -1U);\n\t  off_t off = (dynsym_section->offset()\n\t\t       + index * dynsym_section->entsize());\n\t  symtab->write_section_symbol(*p, this->dynsym_xindex_, of, off);\n\t}\n    }\n\n  // Write out the Output_data which are not in an Output_section.\n  for (Data_list::const_iterator p = this->special_output_list_.begin();\n       p != this->special_output_list_.end();\n       ++p)\n    (*p)->write(of);\n}\n\n// Write out the Output_sections which can only be written after the\n// input sections are complete.\n\nvoid\nLayout::write_sections_after_input_sections(Output_file* of)\n{\n  // Determine the final section offsets, and thus the final output\n  // file size.  Note we finalize the .shstrab last, to allow the\n  // after_input_section sections to modify their section-names before\n  // writing.\n  if (this->any_postprocessing_sections_)\n    {\n      off_t off = this->output_file_size_;\n      off = this->set_section_offsets(off, POSTPROCESSING_SECTIONS_PASS);\n\n      // Now that we've finalized the names, we can finalize the shstrab.\n      off =\n\tthis->set_section_offsets(off,\n\t\t\t\t  STRTAB_AFTER_POSTPROCESSING_SECTIONS_PASS);\n\n      if (off > this->output_file_size_)\n\t{\n\t  of->resize(off);\n\t  this->output_file_size_ = off;\n\t}\n    }\n\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    {\n      if ((*p)->after_input_sections())\n\t(*p)->write(of);\n    }\n\n  this->section_headers_->write(of);\n}\n\n// If the build ID requires computing a checksum, do so here, and\n// write it out.  We compute a checksum over the entire file because\n// that is simplest.\n\nvoid\nLayout::write_build_id(Output_file* of) const\n{\n  if (this->build_id_note_ == NULL)\n    return;\n\n  const unsigned char* iv = of->get_input_view(0, this->output_file_size_);\n\n  unsigned char* ov = of->get_output_view(this->build_id_note_->offset(),\n\t\t\t\t\t  this->build_id_note_->data_size());\n\n  const char* style = parameters->options().build_id();\n  if (strcmp(style, \"sha1\") == 0)\n    {\n      sha1_ctx ctx;\n      sha1_init_ctx(&ctx);\n      sha1_process_bytes(iv, this->output_file_size_, &ctx);\n      sha1_finish_ctx(&ctx, ov);\n    }\n  else if (strcmp(style, \"md5\") == 0)\n    {\n      md5_ctx ctx;\n      md5_init_ctx(&ctx);\n      md5_process_bytes(iv, this->output_file_size_, &ctx);\n      md5_finish_ctx(&ctx, ov);\n    }\n  else\n    gold_unreachable();\n\n  of->write_output_view(this->build_id_note_->offset(),\n\t\t\tthis->build_id_note_->data_size(),\n\t\t\tov);\n\n  of->free_input_view(0, this->output_file_size_, iv);\n}\n\n// Write out a binary file.  This is called after the link is\n// complete.  IN is the temporary output file we used to generate the\n// ELF code.  We simply walk through the segments, read them from\n// their file offset in IN, and write them to their load address in\n// the output file.  FIXME: with a bit more work, we could support\n// S-records and/or Intel hex format here.\n\nvoid\nLayout::write_binary(Output_file* in) const\n{\n  gold_assert(parameters->options().oformat_enum()\n\t      == General_options::OBJECT_FORMAT_BINARY);\n\n  // Get the size of the binary file.\n  uint64_t max_load_address = 0;\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() == elfcpp::PT_LOAD && (*p)->filesz() > 0)\n\t{\n\t  uint64_t max_paddr = (*p)->paddr() + (*p)->filesz();\n\t  if (max_paddr > max_load_address)\n\t    max_load_address = max_paddr;\n\t}\n    }\n\n  Output_file out(parameters->options().output_file_name());\n  out.open(max_load_address);\n\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    {\n      if ((*p)->type() == elfcpp::PT_LOAD && (*p)->filesz() > 0)\n\t{\n\t  const unsigned char* vin = in->get_input_view((*p)->offset(),\n\t\t\t\t\t\t\t(*p)->filesz());\n\t  unsigned char* vout = out.get_output_view((*p)->paddr(),\n\t\t\t\t\t\t    (*p)->filesz());\n\t  memcpy(vout, vin, (*p)->filesz());\n\t  out.write_output_view((*p)->paddr(), (*p)->filesz(), vout);\n\t  in->free_input_view((*p)->offset(), (*p)->filesz(), vin);\n\t}\n    }\n\n  out.close();\n}\n\n// Print the output sections to the map file.\n\nvoid\nLayout::print_to_mapfile(Mapfile* mapfile) const\n{\n  for (Segment_list::const_iterator p = this->segment_list_.begin();\n       p != this->segment_list_.end();\n       ++p)\n    (*p)->print_sections_to_mapfile(mapfile);\n}\n\n// Print statistical information to stderr.  This is used for --stats.\n\nvoid\nLayout::print_stats() const\n{\n  this->namepool_.print_stats(\"section name pool\");\n  this->sympool_.print_stats(\"output symbol name pool\");\n  this->dynpool_.print_stats(\"dynamic name pool\");\n\n  for (Section_list::const_iterator p = this->section_list_.begin();\n       p != this->section_list_.end();\n       ++p)\n    (*p)->print_merge_stats();\n}\n\n// Write_sections_task methods.\n\n// We can always run this task.\n\nTask_token*\nWrite_sections_task::is_runnable()\n{\n  return NULL;\n}\n\n// We need to unlock both OUTPUT_SECTIONS_BLOCKER and FINAL_BLOCKER\n// when finished.\n\nvoid\nWrite_sections_task::locks(Task_locker* tl)\n{\n  tl->add(this, this->output_sections_blocker_);\n  tl->add(this, this->final_blocker_);\n}\n\n// Run the task--write out the data.\n\nvoid\nWrite_sections_task::run(Workqueue*)\n{\n  this->layout_->write_output_sections(this->of_);\n}\n\n// Write_data_task methods.\n\n// We can always run this task.\n\nTask_token*\nWrite_data_task::is_runnable()\n{\n  return NULL;\n}\n\n// We need to unlock FINAL_BLOCKER when finished.\n\nvoid\nWrite_data_task::locks(Task_locker* tl)\n{\n  tl->add(this, this->final_blocker_);\n}\n\n// Run the task--write out the data.\n\nvoid\nWrite_data_task::run(Workqueue*)\n{\n  this->layout_->write_data(this->symtab_, this->of_);\n}\n\n// Write_symbols_task methods.\n\n// We can always run this task.\n\nTask_token*\nWrite_symbols_task::is_runnable()\n{\n  return NULL;\n}\n\n// We need to unlock FINAL_BLOCKER when finished.\n\nvoid\nWrite_symbols_task::locks(Task_locker* tl)\n{\n  tl->add(this, this->final_blocker_);\n}\n\n// Run the task--write out the symbols.\n\nvoid\nWrite_symbols_task::run(Workqueue*)\n{\n  this->symtab_->write_globals(this->sympool_, this->dynpool_,\n\t\t\t       this->layout_->symtab_xindex(),\n\t\t\t       this->layout_->dynsym_xindex(), this->of_);\n}\n\n// Write_after_input_sections_task methods.\n\n// We can only run this task after the input sections have completed.\n\nTask_token*\nWrite_after_input_sections_task::is_runnable()\n{\n  if (this->input_sections_blocker_->is_blocked())\n    return this->input_sections_blocker_;\n  return NULL;\n}\n\n// We need to unlock FINAL_BLOCKER when finished.\n\nvoid\nWrite_after_input_sections_task::locks(Task_locker* tl)\n{\n  tl->add(this, this->final_blocker_);\n}\n\n// Run the task.\n\nvoid\nWrite_after_input_sections_task::run(Workqueue*)\n{\n  this->layout_->write_sections_after_input_sections(this->of_);\n}\n\n// Close_task_runner methods.\n\n// Run the task--close the file.\n\nvoid\nClose_task_runner::run(Workqueue*, const Task*)\n{\n  // If we need to compute a checksum for the BUILD if, we do so here.\n  this->layout_->write_build_id(this->of_);\n\n  // If we've been asked to create a binary file, we do so here.\n  if (this->options_->oformat_enum() != General_options::OBJECT_FORMAT_ELF)\n    this->layout_->write_binary(this->of_);\n\n  this->of_->close();\n}\n\n// Instantiate the templates we need.  We could use the configure\n// script to restrict this to only the ones for implemented targets.\n\n#ifdef HAVE_TARGET_32_LITTLE\ntemplate\nOutput_section*\nLayout::layout<32, false>(Sized_relobj<32, false>* object, unsigned int shndx,\n\t\t\t  const char* name,\n\t\t\t  const elfcpp::Shdr<32, false>& shdr,\n\t\t\t  unsigned int, unsigned int, off_t*);\n#endif\n\n#ifdef HAVE_TARGET_32_BIG\ntemplate\nOutput_section*\nLayout::layout<32, true>(Sized_relobj<32, true>* object, unsigned int shndx,\n\t\t\t const char* name,\n\t\t\t const elfcpp::Shdr<32, true>& shdr,\n\t\t\t unsigned int, unsigned int, off_t*);\n#endif\n\n#ifdef HAVE_TARGET_64_LITTLE\ntemplate\nOutput_section*\nLayout::layout<64, false>(Sized_relobj<64, false>* object, unsigned int shndx,\n\t\t\t  const char* name,\n\t\t\t  const elfcpp::Shdr<64, false>& shdr,\n\t\t\t  unsigned int, unsigned int, off_t*);\n#endif\n\n#ifdef HAVE_TARGET_64_BIG\ntemplate\nOutput_section*\nLayout::layout<64, true>(Sized_relobj<64, true>* object, unsigned int shndx,\n\t\t\t const char* name,\n\t\t\t const elfcpp::Shdr<64, true>& shdr,\n\t\t\t unsigned int, unsigned int, off_t*);\n#endif\n\n#ifdef HAVE_TARGET_32_LITTLE\ntemplate\nOutput_section*\nLayout::layout_reloc<32, false>(Sized_relobj<32, false>* object,\n\t\t\t\tunsigned int reloc_shndx,\n\t\t\t\tconst elfcpp::Shdr<32, false>& shdr,\n\t\t\t\tOutput_section* data_section,\n\t\t\t\tRelocatable_relocs* rr);\n#endif\n\n#ifdef HAVE_TARGET_32_BIG\ntemplate\nOutput_section*\nLayout::layout_reloc<32, true>(Sized_relobj<32, true>* object,\n\t\t\t       unsigned int reloc_shndx,\n\t\t\t       const elfcpp::Shdr<32, true>& shdr,\n\t\t\t       Output_section* data_section,\n\t\t\t       Relocatable_relocs* rr);\n#endif\n\n#ifdef HAVE_TARGET_64_LITTLE\ntemplate\nOutput_section*\nLayout::layout_reloc<64, false>(Sized_relobj<64, false>* object,\n\t\t\t\tunsigned int reloc_shndx,\n\t\t\t\tconst elfcpp::Shdr<64, false>& shdr,\n\t\t\t\tOutput_section* data_section,\n\t\t\t\tRelocatable_relocs* rr);\n#endif\n\n#ifdef HAVE_TARGET_64_BIG\ntemplate\nOutput_section*\nLayout::layout_reloc<64, true>(Sized_relobj<64, true>* object,\n\t\t\t       unsigned int reloc_shndx,\n\t\t\t       const elfcpp::Shdr<64, true>& shdr,\n\t\t\t       Output_section* data_section,\n\t\t\t       Relocatable_relocs* rr);\n#endif\n\n#ifdef HAVE_TARGET_32_LITTLE\ntemplate\nvoid\nLayout::layout_group<32, false>(Symbol_table* symtab,\n\t\t\t\tSized_relobj<32, false>* object,\n\t\t\t\tunsigned int,\n\t\t\t\tconst char* group_section_name,\n\t\t\t\tconst char* signature,\n\t\t\t\tconst elfcpp::Shdr<32, false>& shdr,\n\t\t\t\telfcpp::Elf_Word flags,\n\t\t\t\tstd::vector<unsigned int>* shndxes);\n#endif\n\n#ifdef HAVE_TARGET_32_BIG\ntemplate\nvoid\nLayout::layout_group<32, true>(Symbol_table* symtab,\n\t\t\t       Sized_relobj<32, true>* object,\n\t\t\t       unsigned int,\n\t\t\t       const char* group_section_name,\n\t\t\t       const char* signature,\n\t\t\t       const elfcpp::Shdr<32, true>& shdr,\n\t\t\t       elfcpp::Elf_Word flags,\n\t\t\t       std::vector<unsigned int>* shndxes);\n#endif\n\n#ifdef HAVE_TARGET_64_LITTLE\ntemplate\nvoid\nLayout::layout_group<64, false>(Symbol_table* symtab,\n\t\t\t\tSized_relobj<64, false>* object,\n\t\t\t\tunsigned int,\n\t\t\t\tconst char* group_section_name,\n\t\t\t\tconst char* signature,\n\t\t\t\tconst elfcpp::Shdr<64, false>& shdr,\n\t\t\t\telfcpp::Elf_Word flags,\n\t\t\t\tstd::vector<unsigned int>* shndxes);\n#endif\n\n#ifdef HAVE_TARGET_64_BIG\ntemplate\nvoid\nLayout::layout_group<64, true>(Symbol_table* symtab,\n\t\t\t       Sized_relobj<64, true>* object,\n\t\t\t       unsigned int,\n\t\t\t       const char* group_section_name,\n\t\t\t       const char* signature,\n\t\t\t       const elfcpp::Shdr<64, true>& shdr,\n\t\t\t       elfcpp::Elf_Word flags,\n\t\t\t       std::vector<unsigned int>* shndxes);\n#endif\n\n#ifdef HAVE_TARGET_32_LITTLE\ntemplate\nOutput_section*\nLayout::layout_eh_frame<32, false>(Sized_relobj<32, false>* object,\n\t\t\t\t   const unsigned char* symbols,\n\t\t\t\t   off_t symbols_size,\n\t\t\t\t   const unsigned char* symbol_names,\n\t\t\t\t   off_t symbol_names_size,\n\t\t\t\t   unsigned int shndx,\n\t\t\t\t   const elfcpp::Shdr<32, false>& shdr,\n\t\t\t\t   unsigned int reloc_shndx,\n\t\t\t\t   unsigned int reloc_type,\n\t\t\t\t   off_t* off);\n#endif\n\n#ifdef HAVE_TARGET_32_BIG\ntemplate\nOutput_section*\nLayout::layout_eh_frame<32, true>(Sized_relobj<32, true>* object,\n\t\t\t\t   const unsigned char* symbols,\n\t\t\t\t   off_t symbols_size,\n\t\t\t\t  const unsigned char* symbol_names,\n\t\t\t\t  off_t symbol_names_size,\n\t\t\t\t  unsigned int shndx,\n\t\t\t\t  const elfcpp::Shdr<32, true>& shdr,\n\t\t\t\t  unsigned int reloc_shndx,\n\t\t\t\t  unsigned int reloc_type,\n\t\t\t\t  off_t* off);\n#endif\n\n#ifdef HAVE_TARGET_64_LITTLE\ntemplate\nOutput_section*\nLayout::layout_eh_frame<64, false>(Sized_relobj<64, false>* object,\n\t\t\t\t   const unsigned char* symbols,\n\t\t\t\t   off_t symbols_size,\n\t\t\t\t   const unsigned char* symbol_names,\n\t\t\t\t   off_t symbol_names_size,\n\t\t\t\t   unsigned int shndx,\n\t\t\t\t   const elfcpp::Shdr<64, false>& shdr,\n\t\t\t\t   unsigned int reloc_shndx,\n\t\t\t\t   unsigned int reloc_type,\n\t\t\t\t   off_t* off);\n#endif\n\n#ifdef HAVE_TARGET_64_BIG\ntemplate\nOutput_section*\nLayout::layout_eh_frame<64, true>(Sized_relobj<64, true>* object,\n\t\t\t\t   const unsigned char* symbols,\n\t\t\t\t   off_t symbols_size,\n\t\t\t\t  const unsigned char* symbol_names,\n\t\t\t\t  off_t symbol_names_size,\n\t\t\t\t  unsigned int shndx,\n\t\t\t\t  const elfcpp::Shdr<64, true>& shdr,\n\t\t\t\t  unsigned int reloc_shndx,\n\t\t\t\t  unsigned int reloc_type,\n\t\t\t\t  off_t* off);\n#endif\n\n} // End namespace gold.\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/options.h": "// options.h -- handle command line options for gold  -*- C++ -*-\n\n// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n// Written by Ian Lance Taylor <iant@google.com>.\n\n// This file is part of gold.\n\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n// MA 02110-1301, USA.\n\n// General_options (from Command_line::options())\n//   All the options (a.k.a. command-line flags)\n// Input_argument (from Command_line::inputs())\n//   The list of input files, including -l options.\n// Command_line\n//   Everything we get from the command line -- the General_options\n//   plus the Input_arguments.\n//\n// There are also some smaller classes, such as\n// Position_dependent_options which hold a subset of General_options\n// that change as options are parsed (as opposed to the usual behavior\n// of the last instance of that option specified on the commandline wins).\n\n#ifndef GOLD_OPTIONS_H\n#define GOLD_OPTIONS_H\n\n#include <cstdlib>\n#include <cstring>\n#include <list>\n#include <string>\n#include <vector>\n\n#include \"elfcpp.h\"\n#include \"script.h\"\n\nnamespace gold\n{\n\nclass Command_line;\nclass General_options;\nclass Search_directory;\nclass Input_file_group;\nclass Position_dependent_options;\nclass Target;\nclass Plugin_manager;\n\n// Incremental build action for a specific file, as selected by the user.\n\nenum Incremental_disposition\n{\n  // Determine the status from the timestamp (default).\n  INCREMENTAL_CHECK,\n  // Assume the file changed from the previous build.\n  INCREMENTAL_CHANGED,\n  // Assume the file didn't change from the previous build.\n  INCREMENTAL_UNCHANGED\n};\n\n// The nested namespace is to contain all the global variables and\n// structs that need to be defined in the .h file, but do not need to\n// be used outside this class.\nnamespace options\n{\ntypedef std::vector<Search_directory> Dir_list;\ntypedef Unordered_set<std::string> String_set;\n\n// These routines convert from a string option to various types.\n// Each gives a fatal error if it cannot parse the argument.\n\nextern void\nparse_bool(const char* option_name, const char* arg, bool* retval);\n\nextern void\nparse_int(const char* option_name, const char* arg, int* retval);\n\nextern void\nparse_uint(const char* option_name, const char* arg, int* retval);\n\nextern void\nparse_uint64(const char* option_name, const char* arg, uint64_t* retval);\n\nextern void\nparse_double(const char* option_name, const char* arg, double* retval);\n\nextern void\nparse_string(const char* option_name, const char* arg, const char** retval);\n\nextern void\nparse_optional_string(const char* option_name, const char* arg,\n\t\t      const char** retval);\n\nextern void\nparse_dirlist(const char* option_name, const char* arg, Dir_list* retval);\n\nextern void\nparse_set(const char* option_name, const char* arg, String_set* retval);\n\nextern void\nparse_choices(const char* option_name, const char* arg, const char** retval,\n              const char* choices[], int num_choices);\n\nstruct Struct_var;\n\n// Most options have both a shortname (one letter) and a longname.\n// This enum controls how many dashes are expected for longname access\n// -- shortnames always use one dash.  Most longnames will accept\n// either one dash or two; the only difference between ONE_DASH and\n// TWO_DASHES is how we print the option in --help.  However, some\n// longnames require two dashes, and some require only one.  The\n// special value DASH_Z means that the option is preceded by \"-z\".\nenum Dashes\n{\n  ONE_DASH, TWO_DASHES, EXACTLY_ONE_DASH, EXACTLY_TWO_DASHES, DASH_Z\n};\n\n// LONGNAME is the long-name of the option with dashes converted to\n//    underscores, or else the short-name if the option has no long-name.\n//    It is never the empty string.\n// DASHES is an instance of the Dashes enum: ONE_DASH, TWO_DASHES, etc.\n// SHORTNAME is the short-name of the option, as a char, or '\\0' if the\n//    option has no short-name.  If the option has no long-name, you\n//    should specify the short-name in *both* VARNAME and here.\n// DEFAULT_VALUE is the value of the option if not specified on the\n//    commandline, as a string.\n// HELPSTRING is the descriptive text used with the option via --help\n// HELPARG is how you define the argument to the option.\n//    --help output is \"-shortname HELPARG, --longname HELPARG: HELPSTRING\"\n//    HELPARG should be NULL iff the option is a bool and takes no arg.\n// OPTIONAL_ARG is true if this option takes an optional argument.  An\n//    optional argument must be specifid as --OPTION=VALUE, not\n//    --OPTION VALUE.\n// READER provides parse_to_value, which is a function that will convert\n//    a char* argument into the proper type and store it in some variable.\n// A One_option struct initializes itself with the global list of options\n// at constructor time, so be careful making one of these.\nstruct One_option\n{\n  std::string longname;\n  Dashes dashes;\n  char shortname;\n  const char* default_value;\n  const char* helpstring;\n  const char* helparg;\n  bool optional_arg;\n  Struct_var* reader;\n\n  One_option(const char* ln, Dashes d, char sn, const char* dv,\n             const char* hs, const char* ha, bool oa, Struct_var* r)\n    : longname(ln), dashes(d), shortname(sn), default_value(dv ? dv : \"\"),\n      helpstring(hs), helparg(ha), optional_arg(oa), reader(r)\n  {\n    // In longname, we convert all underscores to dashes, since GNU\n    // style uses dashes in option names.  longname is likely to have\n    // underscores in it because it's also used to declare a C++\n    // function.\n    const char* pos = strchr(this->longname.c_str(), '_');\n    for (; pos; pos = strchr(pos, '_'))\n      this->longname[pos - this->longname.c_str()] = '-';\n\n    // We only register ourselves if our helpstring is not NULL.  This\n    // is to support the \"no-VAR\" boolean variables, which we\n    // conditionally turn on by defining \"no-VAR\" help text.\n    if (this->helpstring)\n      this->register_option();\n  }\n\n  // This option takes an argument iff helparg is not NULL.\n  bool\n  takes_argument() const\n  { return this->helparg != NULL; }\n\n  // Whether the argument is optional.\n  bool\n  takes_optional_argument() const\n  { return this->optional_arg; }\n\n  // Register this option with the global list of options.\n  void\n  register_option();\n\n  // Print this option to stdout (used with --help).\n  void\n  print() const;\n};\n\n// All options have a Struct_##varname that inherits from this and\n// actually implements parse_to_value for that option.\nstruct Struct_var\n{\n  // OPTION: the name of the option as specified on the commandline,\n  //    including leading dashes, and any text following the option:\n  //    \"-O\", \"--defsym=mysym=0x1000\", etc.\n  // ARG: the arg associated with this option, or NULL if the option\n  //    takes no argument: \"2\", \"mysym=0x1000\", etc.\n  // CMDLINE: the global Command_line object.  Used by DEFINE_special.\n  // OPTIONS: the global General_options object.  Used by DEFINE_special.\n  virtual void\n  parse_to_value(const char* option, const char* arg,\n                 Command_line* cmdline, General_options* options) = 0;\n  virtual\n  ~Struct_var()  // To make gcc happy.\n  { }\n};\n\n// This is for \"special\" options that aren't of any predefined type.\nstruct Struct_special : public Struct_var\n{\n  // If you change this, change the parse-fn in DEFINE_special as well.\n  typedef void (General_options::*Parse_function)(const char*, const char*,\n                                                  Command_line*);\n  Struct_special(const char* varname, Dashes dashes, char shortname,\n                 Parse_function parse_function,\n                 const char* helpstring, const char* helparg)\n    : option(varname, dashes, shortname, \"\", helpstring, helparg, false, this),\n      parse(parse_function)\n  { }\n\n  void parse_to_value(const char* option, const char* arg,\n                      Command_line* cmdline, General_options* options)\n  { (options->*(this->parse))(option, arg, cmdline); }\n\n  One_option option;\n  Parse_function parse;\n};\n\n}  // End namespace options.\n\n\n// These are helper macros use by DEFINE_uint64/etc below.\n// This macro is used inside the General_options_ class, so defines\n// var() and set_var() as General_options methods.  Arguments as are\n// for the constructor for One_option.  param_type__ is the same as\n// type__ for built-in types, and \"const type__ &\" otherwise.\n#define DEFINE_var(varname__, dashes__, shortname__, default_value__,        \\\n                   default_value_as_string__, helpstring__, helparg__,       \\\n                   optional_arg__, type__, param_type__, parse_fn__)\t     \\\n public:                                                                     \\\n  param_type__                                                               \\\n  varname__() const                                                          \\\n  { return this->varname__##_.value; }                                       \\\n                                                                             \\\n  bool                                                                       \\\n  user_set_##varname__() const                                               \\\n  { return this->varname__##_.user_set_via_option; }                         \\\n                                                                             \\\n  void\t\t\t\t\t\t\t\t\t     \\\n  set_user_set_##varname__()\t\t\t\t\t\t     \\\n  { this->varname__##_.user_set_via_option = true; }\t\t\t     \\\n\t\t\t\t\t\t\t\t\t     \\\n private:                                                                    \\\n  struct Struct_##varname__ : public options::Struct_var                     \\\n  {                                                                          \\\n    Struct_##varname__()                                                     \\\n      : option(#varname__, dashes__, shortname__, default_value_as_string__, \\\n               helpstring__, helparg__, optional_arg__, this),\t\t     \\\n        user_set_via_option(false), value(default_value__)                   \\\n    { }                                                                      \\\n                                                                             \\\n    void                                                                     \\\n    parse_to_value(const char* option_name, const char* arg,                 \\\n                   Command_line*, General_options*)                          \\\n    {                                                                        \\\n      parse_fn__(option_name, arg, &this->value);                            \\\n      this->user_set_via_option = true;                                      \\\n    }                                                                        \\\n                                                                             \\\n    options::One_option option;                                              \\\n    bool user_set_via_option;                                                \\\n    type__ value;                                                            \\\n  };                                                                         \\\n  Struct_##varname__ varname__##_;                                           \\\n  void                                                                       \\\n  set_##varname__(param_type__ value)                                        \\\n  { this->varname__##_.value = value; }\n\n// These macros allow for easy addition of a new commandline option.\n\n// If no_helpstring__ is not NULL, then in addition to creating\n// VARNAME, we also create an option called no-VARNAME (or, for a -z\n// option, noVARNAME).\n#define DEFINE_bool(varname__, dashes__, shortname__, default_value__,   \\\n                    helpstring__, no_helpstring__)                       \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \\\n             default_value__ ? \"true\" : \"false\", helpstring__, NULL,     \\\n             false, bool, bool, options::parse_bool)\t\t\t \\\n  struct Struct_no_##varname__ : public options::Struct_var              \\\n  {                                                                      \\\n    Struct_no_##varname__() : option((dashes__ == options::DASH_Z\t \\\n\t\t\t\t      ? \"no\" #varname__\t\t\t \\\n\t\t\t\t      : \"no-\" #varname__),\t\t \\\n\t\t\t\t     dashes__, '\\0',\t\t\t \\\n                                     default_value__ ? \"false\" : \"true\", \\\n                                     no_helpstring__, NULL, false, this) \\\n    { }                                                                  \\\n                                                                         \\\n    void                                                                 \\\n    parse_to_value(const char*, const char*,                             \\\n                   Command_line*, General_options* options)              \\\n    { options->set_##varname__(false); }                                 \\\n                                                                         \\\n    options::One_option option;                                          \\\n  };                                                                     \\\n  Struct_no_##varname__ no_##varname__##_initializer_\n\n#define DEFINE_enable(varname__, dashes__, shortname__, default_value__, \\\n                      helpstring__, no_helpstring__)                     \\\n  DEFINE_var(enable_##varname__, dashes__, shortname__, default_value__, \\\n             default_value__ ? \"true\" : \"false\", helpstring__, NULL,     \\\n             false, bool, bool, options::parse_bool)\t\t\t \\\n  struct Struct_disable_##varname__ : public options::Struct_var         \\\n  {                                                                      \\\n    Struct_disable_##varname__() : option(\"disable-\" #varname__,         \\\n                                     dashes__, '\\0',                     \\\n                                     default_value__ ? \"false\" : \"true\", \\\n                                     no_helpstring__, NULL, false, this) \\\n    { }                                                                  \\\n                                                                         \\\n    void                                                                 \\\n    parse_to_value(const char*, const char*,                             \\\n                   Command_line*, General_options* options)              \\\n    { options->set_enable_##varname__(false); }                          \\\n                                                                         \\\n    options::One_option option;                                          \\\n  };                                                                     \\\n  Struct_disable_##varname__ disable_##varname__##_initializer_\n\n#define DEFINE_int(varname__, dashes__, shortname__, default_value__,   \\\n                   helpstring__, helparg__)                             \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,         \\\n             #default_value__, helpstring__, helparg__, false,\t\t\\\n             int, int, options::parse_int)\n\n#define DEFINE_uint(varname__, dashes__, shortname__, default_value__,  \\\n                   helpstring__, helparg__)                             \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,         \\\n             #default_value__, helpstring__, helparg__, false,\t\t\\\n             int, int, options::parse_uint)\n\n#define DEFINE_uint64(varname__, dashes__, shortname__, default_value__, \\\n                      helpstring__, helparg__)                           \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \\\n             #default_value__, helpstring__, helparg__, false,\t\t \\\n             uint64_t, uint64_t, options::parse_uint64)\n\n#define DEFINE_double(varname__, dashes__, shortname__, default_value__, \\\n\t\t      helpstring__, helparg__)\t\t\t\t \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,\t\t \\\n\t     #default_value__, helpstring__, helparg__, false,\t\t \\\n\t     double, double, options::parse_double)\n\n#define DEFINE_string(varname__, dashes__, shortname__, default_value__, \\\n                      helpstring__, helparg__)                           \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \\\n             default_value__, helpstring__, helparg__, false,\t\t \\\n             const char*, const char*, options::parse_string)\n\n// This is like DEFINE_string, but we convert each occurrence to a\n// Search_directory and store it in a vector.  Thus we also have the\n// add_to_VARNAME() method, to append to the vector.\n#define DEFINE_dirlist(varname__, dashes__, shortname__,                  \\\n                           helpstring__, helparg__)                       \\\n  DEFINE_var(varname__, dashes__, shortname__, ,                          \\\n             \"\", helpstring__, helparg__, false, options::Dir_list,\t  \\\n             const options::Dir_list&, options::parse_dirlist)            \\\n  void                                                                    \\\n  add_to_##varname__(const char* new_value)                               \\\n  { options::parse_dirlist(NULL, new_value, &this->varname__##_.value); } \\\n  void                                                                    \\\n  add_search_directory_to_##varname__(const Search_directory& dir)        \\\n  { this->varname__##_.value.push_back(dir); }\n\n// This is like DEFINE_string, but we store a set of strings.\n#define DEFINE_set(varname__, dashes__, shortname__,                      \\\n                   helpstring__, helparg__)                               \\\n  DEFINE_var(varname__, dashes__, shortname__, ,                          \\\n             \"\", helpstring__, helparg__, false, options::String_set,     \\\n             const options::String_set&, options::parse_set)              \\\n public:                                                                  \\\n  bool                                                                    \\\n  any_##varname__() const                                                 \\\n  { return !this->varname__##_.value.empty(); }                           \\\n\t\t\t\t\t\t\t\t\t  \\\n  bool                                                                    \\\n  is_##varname__(const char* symbol) const                                \\\n  {                                                                       \\\n    return (!this->varname__##_.value.empty()                             \\\n            && (this->varname__##_.value.find(std::string(symbol))        \\\n                != this->varname__##_.value.end()));                      \\\n  }\t\t\t\t\t\t\t\t\t  \\\n\t\t\t\t\t\t\t\t\t  \\\n  options::String_set::const_iterator\t\t\t\t\t  \\\n  varname__##_begin() const\t\t\t\t\t\t  \\\n  { return this->varname__##_.value.begin(); }\t\t\t\t  \\\n\t\t\t\t\t\t\t\t\t  \\\n  options::String_set::const_iterator\t\t\t\t\t  \\\n  varname__##_end() const\t\t\t\t\t\t  \\\n  { return this->varname__##_.value.end(); }\n\n// When you have a list of possible values (expressed as string)\n// After helparg__ should come an initializer list, like\n//   {\"foo\", \"bar\", \"baz\"}\n#define DEFINE_enum(varname__, dashes__, shortname__, default_value__,   \\\n                    helpstring__, helparg__, ...)                        \\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \\\n             default_value__, helpstring__, helparg__, false,\t\t \\\n             const char*, const char*, parse_choices_##varname__)        \\\n private:                                                                \\\n  static void parse_choices_##varname__(const char* option_name,         \\\n                                        const char* arg,                 \\\n                                        const char** retval) {           \\\n    const char* choices[] = __VA_ARGS__;                                 \\\n    options::parse_choices(option_name, arg, retval,                     \\\n                           choices, sizeof(choices) / sizeof(*choices)); \\\n  }\n\n// This is like DEFINE_bool, but VARNAME is the name of a different\n// option.  This option becomes an alias for that one.  INVERT is true\n// if this option is an inversion of the other one.\n#define DEFINE_bool_alias(option__, varname__, dashes__, shortname__,\t\\\n\t\t\t  helpstring__, no_helpstring__, invert__)\t\\\n private:\t\t\t\t\t\t\t\t\\\n  struct Struct_##option__ : public options::Struct_var\t\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n    Struct_##option__()\t\t\t\t\t\t\t\\\n      : option(#option__, dashes__, shortname__, \"\", helpstring__,\t\\\n\t       NULL, false, this)\t\t\t\t\t\\\n    { }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n    void\t\t\t\t\t\t\t\t\\\n    parse_to_value(const char*, const char*,\t\t\t\t\\\n\t\t   Command_line*, General_options* options)\t\t\\\n    {\t\t\t\t\t\t\t\t\t\\\n      options->set_##varname__(!invert__);\t\t\t\t\\\n      options->set_user_set_##varname__();\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n    options::One_option option;\t\t\t\t\t\t\\\n  };\t\t\t\t\t\t\t\t\t\\\n  Struct_##option__ option__##_;\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  struct Struct_no_##option__ : public options::Struct_var\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n    Struct_no_##option__()\t\t\t\t\t\t\\\n      : option((dashes__ == options::DASH_Z\t\t\t\t\\\n\t\t? \"no\" #option__\t\t\t\t\t\\\n\t\t: \"no-\" #option__),\t\t\t\t\t\\\n\t       dashes__, '\\0', \"\", no_helpstring__,\t\t\t\\\n\t       NULL, false, this)\t\t\t\t\t\\\n    { }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n    void\t\t\t\t\t\t\t\t\\\n    parse_to_value(const char*, const char*,\t\t\t\t\\\n\t\t   Command_line*, General_options* options)\t\t\\\n    {\t\t\t\t\t\t\t\t\t\\\n      options->set_##varname__(invert__);\t\t\t\t\\\n      options->set_user_set_##varname__();\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n    options::One_option option;\t\t\t\t\t\t\\\n  };\t\t\t\t\t\t\t\t\t\\\n  Struct_no_##option__ no_##option__##_initializer_\n\n// This is used for non-standard flags.  It defines no functions; it\n// just calls General_options::parse_VARNAME whenever the flag is\n// seen.  We declare parse_VARNAME as a static member of\n// General_options; you are responsible for defining it there.\n// helparg__ should be NULL iff this special-option is a boolean.\n#define DEFINE_special(varname__, dashes__, shortname__,                \\\n                       helpstring__, helparg__)                         \\\n private:                                                               \\\n  void parse_##varname__(const char* option, const char* arg,           \\\n                         Command_line* inputs);                         \\\n  struct Struct_##varname__ : public options::Struct_special            \\\n  {                                                                     \\\n    Struct_##varname__()                                                \\\n      : options::Struct_special(#varname__, dashes__, shortname__,      \\\n                                &General_options::parse_##varname__,    \\\n                                helpstring__, helparg__)                \\\n    { }                                                                 \\\n  };                                                                    \\\n  Struct_##varname__ varname__##_initializer_\n\n// An option that takes an optional string argument.  If the option is\n// used with no argument, the value will be the default, and\n// user_set_via_option will be true.\n#define DEFINE_optional_string(varname__, dashes__, shortname__,\t\\\n\t\t\t       default_value__,\t\t\t\t\\\n\t\t\t       helpstring__, helparg__)\t\t\t\\\n  DEFINE_var(varname__, dashes__, shortname__, default_value__,\t\t\\\n             default_value__, helpstring__, helparg__, true,\t\t\\\n             const char*, const char*, options::parse_optional_string)\n\n// A directory to search.  For each directory we record whether it is\n// in the sysroot.  We need to know this so that, if a linker script\n// is found within the sysroot, we will apply the sysroot to any files\n// named by that script.\n\nclass Search_directory\n{\n public:\n  // We need a default constructor because we put this in a\n  // std::vector.\n  Search_directory()\n    : name_(NULL), put_in_sysroot_(false), is_in_sysroot_(false)\n  { }\n\n  // This is the usual constructor.\n  Search_directory(const char* name, bool put_in_sysroot)\n    : name_(name), put_in_sysroot_(put_in_sysroot), is_in_sysroot_(false)\n  {\n    if (this->name_.empty())\n      this->name_ = \".\";\n  }\n\n  // This is called if we have a sysroot.  The sysroot is prefixed to\n  // any entries for which put_in_sysroot_ is true.  is_in_sysroot_ is\n  // set to true for any enries which are in the sysroot (this will\n  // naturally include any entries for which put_in_sysroot_ is true).\n  // SYSROOT is the sysroot, CANONICAL_SYSROOT is the result of\n  // passing SYSROOT to lrealpath.\n  void\n  add_sysroot(const char* sysroot, const char* canonical_sysroot);\n\n  // Get the directory name.\n  const std::string&\n  name() const\n  { return this->name_; }\n\n  // Return whether this directory is in the sysroot.\n  bool\n  is_in_sysroot() const\n  { return this->is_in_sysroot_; }\n\n  // Return whether this is considered a system directory.\n  bool\n  is_system_directory() const\n  { return this->put_in_sysroot_ || this->is_in_sysroot_; }\n\n private:\n  // The directory name.\n  std::string name_;\n  // True if the sysroot should be added as a prefix for this\n  // directory (if there is a sysroot).  This is true for system\n  // directories that we search by default.\n  bool put_in_sysroot_;\n  // True if this directory is in the sysroot (if there is a sysroot).\n  // This is true if there is a sysroot and either 1) put_in_sysroot_\n  // is true, or 2) the directory happens to be in the sysroot based\n  // on a pathname comparison.\n  bool is_in_sysroot_;\n};\n\nclass General_options\n{\n private:\n  // NOTE: For every option that you add here, also consider if you\n  // should add it to Position_dependent_options.\n  DEFINE_special(help, options::TWO_DASHES, '\\0',\n                 N_(\"Report usage information\"), NULL);\n  DEFINE_special(version, options::TWO_DASHES, 'v',\n                 N_(\"Report version information\"), NULL);\n  DEFINE_special(V, options::EXACTLY_ONE_DASH, '\\0',\n                 N_(\"Report version and target information\"), NULL);\n\n  // These options are sorted approximately so that for each letter in\n  // the alphabet, we show the option whose shortname is that letter\n  // (if any) and then every longname that starts with that letter (in\n  // alphabetical order).  For both, lowercase sorts before uppercase.\n  // The -z options come last.\n\n  DEFINE_bool(add_needed, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Not supported\"),\n\t      N_(\"Do not copy DT_NEEDED tags from shared libraries\"));\n\n  DEFINE_bool(allow_shlib_undefined, options::TWO_DASHES, '\\0', false,\n              N_(\"Allow unresolved references in shared libraries\"),\n              N_(\"Do not allow unresolved references in shared libraries\"));\n\n  DEFINE_bool(as_needed, options::TWO_DASHES, '\\0', false,\n              N_(\"Only set DT_NEEDED for shared libraries if used\"),\n              N_(\"Always DT_NEEDED for shared libraries\"));\n\n  // This should really be an \"enum\", but it's too easy for folks to\n  // forget to update the list as they add new targets.  So we just\n  // accept any string.  We'll fail later (when the string is parsed),\n  // if the target isn't actually supported.\n  DEFINE_string(format, options::TWO_DASHES, 'b', \"elf\",\n                N_(\"Set input format\"), (\"[elf,binary]\"));\n\n  DEFINE_bool(Bdynamic, options::ONE_DASH, '\\0', true,\n              N_(\"-l searches for shared libraries\"), NULL);\n  DEFINE_bool_alias(Bstatic, Bdynamic, options::ONE_DASH, '\\0',\n\t\t    N_(\"-l does not search for shared libraries\"), NULL,\n\t\t    true);\n\n  DEFINE_bool(Bsymbolic, options::ONE_DASH, '\\0', false,\n              N_(\"Bind defined symbols locally\"), NULL);\n\n  DEFINE_bool(Bsymbolic_functions, options::ONE_DASH, '\\0', false,\n\t      N_(\"Bind defined function symbols locally\"), NULL);\n\n  DEFINE_optional_string(build_id, options::TWO_DASHES, '\\0', \"sha1\",\n\t\t\t N_(\"Generate build ID note\"),\n\t\t\t N_(\"[=STYLE]\"));\n\n  DEFINE_bool(check_sections, options::TWO_DASHES, '\\0', true,\n\t      N_(\"Check segment addresses for overlaps (default)\"),\n\t      N_(\"Do not check segment addresses for overlaps\"));\n\n#ifdef HAVE_ZLIB_H\n  DEFINE_enum(compress_debug_sections, options::TWO_DASHES, '\\0', \"none\",\n              N_(\"Compress .debug_* sections in the output file\"),\n              (\"[none,zlib]\"),\n              {\"none\", \"zlib\"});\n#else\n  DEFINE_enum(compress_debug_sections, options::TWO_DASHES, '\\0', \"none\",\n              N_(\"Compress .debug_* sections in the output file\"),\n              N_(\"[none]\"),\n              {\"none\"});\n#endif\n\n  DEFINE_bool(copy_dt_needed_entries, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Not supported\"),\n\t      N_(\"Do not copy DT_NEEDED tags from shared libraries\"));\n\n  DEFINE_bool(define_common, options::TWO_DASHES, 'd', false,\n              N_(\"Define common symbols\"),\n              N_(\"Do not define common symbols\"));\n  DEFINE_bool(dc, options::ONE_DASH, '\\0', false,\n              N_(\"Alias for -d\"), NULL);\n  DEFINE_bool(dp, options::ONE_DASH, '\\0', false,\n              N_(\"Alias for -d\"), NULL);\n\n  DEFINE_string(debug, options::TWO_DASHES, '\\0', \"\",\n                N_(\"Turn on debugging\"),\n                N_(\"[all,files,script,task][,...]\"));\n\n  DEFINE_special(defsym, options::TWO_DASHES, '\\0',\n                 N_(\"Define a symbol\"), N_(\"SYMBOL=EXPRESSION\"));\n\n  DEFINE_optional_string(demangle, options::TWO_DASHES, '\\0', NULL,\n\t\t\t N_(\"Demangle C++ symbols in log messages\"),\n\t\t\t N_(\"[=STYLE]\"));\n\n  DEFINE_bool(no_demangle, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Do not demangle C++ symbols in log messages\"),\n\t      NULL);\n\n  DEFINE_bool(detect_odr_violations, options::TWO_DASHES, '\\0', false,\n              N_(\"Try to detect violations of the One Definition Rule\"),\n              NULL);\n\n  DEFINE_bool(discard_locals, options::TWO_DASHES, 'X', false,\n              N_(\"Delete all temporary local symbols\"), NULL);\n\n  DEFINE_bool(dynamic_list_data, options::TWO_DASHES, '\\0', false,\n              N_(\"Add data symbols to dynamic symbols\"), NULL);\n\n  DEFINE_bool(dynamic_list_cpp_new, options::TWO_DASHES, '\\0', false,\n              N_(\"Add C++ operator new/delete to dynamic symbols\"), NULL);\n\n  DEFINE_bool(dynamic_list_cpp_typeinfo, options::TWO_DASHES, '\\0', false,\n              N_(\"Add C++ typeinfo to dynamic symbols\"), NULL);\n\n  DEFINE_special(dynamic_list, options::TWO_DASHES, '\\0',\n                 N_(\"Read a list of dynamic symbols\"), N_(\"FILE\"));\n\n  DEFINE_string(entry, options::TWO_DASHES, 'e', NULL,\n                N_(\"Set program start address\"), N_(\"ADDRESS\"));\n\n  DEFINE_special(exclude_libs, options::TWO_DASHES, '\\0',\n\t\t N_(\"Exclude libraries from automatic export\"),\n\t\t N_((\"lib,lib ...\")));\n\n  DEFINE_bool(export_dynamic, options::TWO_DASHES, 'E', false,\n              N_(\"Export all dynamic symbols\"),\n\t      N_(\"Do not export all dynamic symbols (default)\"));\n\n  DEFINE_bool(eh_frame_hdr, options::TWO_DASHES, '\\0', false,\n              N_(\"Create exception frame header\"), NULL);\n\n  DEFINE_bool(fatal_warnings, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Treat warnings as errors\"),\n\t      N_(\"Do not treat warnings as errors\"));\n\n  DEFINE_string(fini, options::ONE_DASH, '\\0', \"_fini\",\n                N_(\"Call SYMBOL at unload-time\"), N_(\"SYMBOL\"));\n\n  DEFINE_string(soname, options::ONE_DASH, 'h', NULL,\n                N_(\"Set shared library name\"), N_(\"FILENAME\"));\n\n  DEFINE_double(hash_bucket_empty_fraction, options::TWO_DASHES, '\\0', 0.0,\n\t\tN_(\"Min fraction of empty buckets in dynamic hash\"),\n\t\tN_(\"FRACTION\"));\n\n  DEFINE_enum(hash_style, options::TWO_DASHES, '\\0', \"sysv\",\n\t      N_(\"Dynamic hash style\"), N_(\"[sysv,gnu,both]\"),\n\t      {\"sysv\", \"gnu\", \"both\"});\n\n  DEFINE_string(dynamic_linker, options::TWO_DASHES, 'I', NULL,\n                N_(\"Set dynamic linker path\"), N_(\"PROGRAM\"));\n\n  DEFINE_bool(incremental, options::TWO_DASHES, '\\0', false,\n              N_(\"Work in progress; do not use\"),\n              N_(\"Do a full build\"));\n\n  DEFINE_special(incremental_changed, options::TWO_DASHES, '\\0',\n                 N_(\"Assume files changed\"), NULL);\n\n  DEFINE_special(incremental_unchanged, options::TWO_DASHES, '\\0',\n                 N_(\"Assume files didn't change\"), NULL);\n\n  DEFINE_special(incremental_unknown, options::TWO_DASHES, '\\0',\n                 N_(\"Use timestamps to check files (default)\"), NULL);\n\n  DEFINE_string(init, options::ONE_DASH, '\\0', \"_init\",\n                N_(\"Call SYMBOL at load-time\"), N_(\"SYMBOL\"));\n\n  DEFINE_special(just_symbols, options::TWO_DASHES, '\\0',\n                 N_(\"Read only symbol values from FILE\"), N_(\"FILE\"));\n\n  DEFINE_special(library, options::TWO_DASHES, 'l',\n                 N_(\"Search for library LIBNAME\"), N_(\"LIBNAME\"));\n\n  DEFINE_dirlist(library_path, options::TWO_DASHES, 'L',\n                 N_(\"Add directory to search path\"), N_(\"DIR\"));\n\n  DEFINE_string(m, options::EXACTLY_ONE_DASH, 'm', \"\",\n                N_(\"Ignored for compatibility\"), N_(\"EMULATION\"));\n\n  DEFINE_bool(print_map, options::TWO_DASHES, 'M', false,\n\t      N_(\"Write map file on standard output\"), NULL);\n  DEFINE_string(Map, options::ONE_DASH, '\\0', NULL, N_(\"Write map file\"),\n\t\tN_(\"MAPFILENAME\"));\n\n  DEFINE_bool(nmagic, options::TWO_DASHES, 'n', false,\n\t      N_(\"Do not page align data\"), NULL);\n  DEFINE_bool(omagic, options::EXACTLY_TWO_DASHES, 'N', false,\n\t      N_(\"Do not page align data, do not make text readonly\"),\n\t      N_(\"Page align data, make text readonly\"));\n\n  DEFINE_enable(new_dtags, options::EXACTLY_TWO_DASHES, '\\0', false,\n\t\tN_(\"Enable use of DT_RUNPATH and DT_FLAGS\"),\n\t\tN_(\"Disable use of DT_RUNPATH and DT_FLAGS\"));\n\n  DEFINE_bool(noinhibit_exec, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Create an output file even if errors occur\"), NULL);\n\n  DEFINE_bool_alias(no_undefined, defs, options::TWO_DASHES, '\\0',\n\t\t    N_(\"Report undefined symbols (even with --shared)\"),\n\t\t    NULL, false);\n\n  DEFINE_string(output, options::TWO_DASHES, 'o', \"a.out\",\n                N_(\"Set output file name\"), N_(\"FILE\"));\n\n  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 0,\n              N_(\"Optimize output file size\"), N_(\"LEVEL\"));\n\n  DEFINE_string(oformat, options::EXACTLY_TWO_DASHES, '\\0', \"elf\",\n\t\tN_(\"Set output format\"), N_(\"[binary]\"));\n\n  DEFINE_bool(pie, options::ONE_DASH, '\\0', false,\n\t      N_(\"Create a position independent executable\"), NULL);\n  DEFINE_bool_alias(pic_executable, pie, options::TWO_DASHES, '\\0',\n\t\t    N_(\"Create a position independent executable\"), NULL,\n\t\t    false);\n\n#ifdef ENABLE_PLUGINS\n  DEFINE_special(plugin, options::TWO_DASHES, '\\0',\n                 N_(\"Load a plugin library\"), N_(\"PLUGIN\"));\n  DEFINE_special(plugin_opt, options::TWO_DASHES, '\\0',\n                 N_(\"Pass an option to the plugin\"), N_(\"OPTION\"));\n#endif\n\n  DEFINE_bool(preread_archive_symbols, options::TWO_DASHES, '\\0', false,\n              N_(\"Preread archive symbols when multi-threaded\"), NULL);\n\n  DEFINE_string(print_symbol_counts, options::TWO_DASHES, '\\0', NULL,\n\t\tN_(\"Print symbols defined and used for each input\"),\n\t\tN_(\"FILENAME\"));\n\n  DEFINE_bool(Qy, options::EXACTLY_ONE_DASH, '\\0', false,\n\t      N_(\"Ignored for SVR4 compatibility\"), NULL);\n\n  DEFINE_bool(emit_relocs, options::TWO_DASHES, 'q', false,\n              N_(\"Generate relocations in output\"), NULL);\n\n  DEFINE_bool(relocatable, options::EXACTLY_ONE_DASH, 'r', false,\n              N_(\"Generate relocatable output\"), NULL);\n\n  DEFINE_bool(relax, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Relax branches on certain targets\"), NULL);\n\n  DEFINE_string(retain_symbols_file, options::EXACTLY_ONE_DASH, '\\0', NULL,\n                N_(\"keep only symbols listed in this file\"), N_(\"[file]\"));\n\n  // -R really means -rpath, but can mean --just-symbols for\n  // compatibility with GNU ld.  -rpath is always -rpath, so we list\n  // it separately.\n  DEFINE_special(R, options::EXACTLY_ONE_DASH, 'R',\n                 N_(\"Add DIR to runtime search path\"), N_(\"DIR\"));\n\n  DEFINE_dirlist(rpath, options::ONE_DASH, '\\0',\n                 N_(\"Add DIR to runtime search path\"), N_(\"DIR\"));\n\n  DEFINE_dirlist(rpath_link, options::TWO_DASHES, '\\0',\n                 N_(\"Add DIR to link time shared library search path\"),\n                 N_(\"DIR\"));\n\n  DEFINE_bool(strip_all, options::TWO_DASHES, 's', false,\n              N_(\"Strip all symbols\"), NULL);\n  DEFINE_bool(strip_debug, options::TWO_DASHES, 'S', false,\n              N_(\"Strip debugging information\"), NULL);\n  DEFINE_bool(strip_debug_non_line, options::TWO_DASHES, '\\0', false,\n              N_(\"Emit only debug line number information\"), NULL);\n  DEFINE_bool(strip_debug_gdb, options::TWO_DASHES, '\\0', false,\n              N_(\"Strip debug symbols that are unused by gdb \"\n                 \"(at least versions <= 6.7)\"), NULL);\n  DEFINE_bool(strip_lto_sections, options::TWO_DASHES, '\\0', true,\n              N_(\"Strip LTO intermediate code sections\"), NULL);\n\n  DEFINE_int(stub_group_size, options::TWO_DASHES , '\\0', 1,\n             N_(\"(ARM only) The maximum distance from instructions in a group \"\n\t\t\"of sections to their stubs.  Negative values mean stubs \"\n\t\t\"are always after the group. 1 means using default size.\\n\"),\n\t     N_(\"SIZE\"));\n\n  DEFINE_bool(no_keep_memory, options::TWO_DASHES, '\\0', false,\n              N_(\"Use less memory and more disk I/O \"\n                 \"(included only for compatibility with GNU ld)\"), NULL);\n\n  DEFINE_bool(shared, options::ONE_DASH, '\\0', false,\n              N_(\"Generate shared library\"), NULL);\n\n  DEFINE_bool(Bshareable, options::ONE_DASH, '\\0', false,\n              N_(\"Generate shared library\"), NULL);\n\n  DEFINE_uint(split_stack_adjust_size, options::TWO_DASHES, '\\0', 0x4000,\n\t      N_(\"Stack size when -fsplit-stack function calls non-split\"),\n\t      N_(\"SIZE\"));\n\n  // This is not actually special in any way, but I need to give it\n  // a non-standard accessor-function name because 'static' is a keyword.\n  DEFINE_special(static, options::ONE_DASH, '\\0',\n                 N_(\"Do not link against shared libraries\"), NULL);\n\n  DEFINE_enum(icf, options::TWO_DASHES, '\\0', \"none\",\n              N_(\"Identical Code Folding. \"\n                 \"\\'--icf=safe\\' folds only ctors and dtors.\"),\n\t      (\"[none,all,safe]\"),\t\n              {\"none\", \"all\", \"safe\"});\n\n  DEFINE_uint(icf_iterations, options::TWO_DASHES , '\\0', 0,\n              N_(\"Number of iterations of ICF (default 2)\"), N_(\"COUNT\"));\n\n  DEFINE_bool(print_icf_sections, options::TWO_DASHES, '\\0', false,\n              N_(\"List folded identical sections on stderr\"),\n              N_(\"Do not list folded identical sections\"));\n\n  DEFINE_set(keep_unique, options::TWO_DASHES, '\\0',\n\t     N_(\"Do not fold this symbol during ICF\"), N_(\"SYMBOL\"));\n\n  DEFINE_bool(gc_sections, options::TWO_DASHES, '\\0', false,\n              N_(\"Remove unused sections\"),\n              N_(\"Don't remove unused sections (default)\"));\n\n  DEFINE_bool(print_gc_sections, options::TWO_DASHES, '\\0', false,\n              N_(\"List removed unused sections on stderr\"),\n              N_(\"Do not list removed unused sections\"));\n\n  DEFINE_bool(stats, options::TWO_DASHES, '\\0', false,\n              N_(\"Print resource usage statistics\"), NULL);\n\n  DEFINE_string(sysroot, options::TWO_DASHES, '\\0', \"\",\n                N_(\"Set target system root directory\"), N_(\"DIR\"));\n\n  DEFINE_bool(trace, options::TWO_DASHES, 't', false,\n              N_(\"Print the name of each input file\"), NULL);\n\n  DEFINE_special(script, options::TWO_DASHES, 'T',\n                 N_(\"Read linker script\"), N_(\"FILE\"));\n\n  DEFINE_bool(threads, options::TWO_DASHES, '\\0', false,\n              N_(\"Run the linker multi-threaded\"),\n              N_(\"Do not run the linker multi-threaded\"));\n  DEFINE_uint(thread_count, options::TWO_DASHES, '\\0', 0,\n              N_(\"Number of threads to use\"), N_(\"COUNT\"));\n  DEFINE_uint(thread_count_initial, options::TWO_DASHES, '\\0', 0,\n              N_(\"Number of threads to use in initial pass\"), N_(\"COUNT\"));\n  DEFINE_uint(thread_count_middle, options::TWO_DASHES, '\\0', 0,\n              N_(\"Number of threads to use in middle pass\"), N_(\"COUNT\"));\n  DEFINE_uint(thread_count_final, options::TWO_DASHES, '\\0', 0,\n              N_(\"Number of threads to use in final pass\"), N_(\"COUNT\"));\n\n  DEFINE_uint64(Tbss, options::ONE_DASH, '\\0', -1U,\n                N_(\"Set the address of the bss segment\"), N_(\"ADDRESS\"));\n  DEFINE_uint64(Tdata, options::ONE_DASH, '\\0', -1U,\n                N_(\"Set the address of the data segment\"), N_(\"ADDRESS\"));\n  DEFINE_uint64(Ttext, options::ONE_DASH, '\\0', -1U,\n                N_(\"Set the address of the text segment\"), N_(\"ADDRESS\"));\n\n  DEFINE_set(undefined, options::TWO_DASHES, 'u',\n\t     N_(\"Create undefined reference to SYMBOL\"), N_(\"SYMBOL\"));\n\n  DEFINE_bool(verbose, options::TWO_DASHES, '\\0', false,\n              N_(\"Synonym for --debug=files\"), NULL);\n\n  DEFINE_special(version_script, options::TWO_DASHES, '\\0',\n                 N_(\"Read version script\"), N_(\"FILE\"));\n\n  DEFINE_bool(warn_common, options::TWO_DASHES, '\\0', false,\n\t      N_(\"Warn about duplicate common symbols\"),\n\t      N_(\"Do not warn about duplicate common symbols (default)\"));\n\n  DEFINE_bool(warn_search_mismatch, options::TWO_DASHES, '\\0', true,\n\t      N_(\"Warn when skipping an incompatible library\"),\n\t      N_(\"Don't warn when skipping an incompatible library\"));\n\n  DEFINE_bool(whole_archive, options::TWO_DASHES, '\\0', false,\n              N_(\"Include all archive contents\"),\n              N_(\"Include only needed archive contents\"));\n\n  DEFINE_set(wrap, options::TWO_DASHES, '\\0',\n\t     N_(\"Use wrapper functions for SYMBOL\"), N_(\"SYMBOL\"));\n\n  DEFINE_set(trace_symbol, options::TWO_DASHES, 'y',\n             N_(\"Trace references to symbol\"), N_(\"SYMBOL\"));\n\n  DEFINE_string(Y, options::EXACTLY_ONE_DASH, 'Y', \"\",\n\t\tN_(\"Default search path for Solaris compatibility\"),\n\t\tN_(\"PATH\"));\n\n  DEFINE_special(start_group, options::TWO_DASHES, '(',\n                 N_(\"Start a library search group\"), NULL);\n  DEFINE_special(end_group, options::TWO_DASHES, ')',\n                 N_(\"End a library search group\"), NULL);\n\n  // The -z options.\n\n  DEFINE_bool(combreloc, options::DASH_Z, '\\0', true,\n\t      N_(\"Sort dynamic relocs\"),\n\t      N_(\"Do not sort dynamic relocs\"));\n  DEFINE_uint64(common_page_size, options::DASH_Z, '\\0', 0,\n                N_(\"Set common page size to SIZE\"), N_(\"SIZE\"));\n  DEFINE_bool(defs, options::DASH_Z, '\\0', false,\n              N_(\"Report undefined symbols (even with --shared)\"),\n              NULL);\n  DEFINE_bool(execstack, options::DASH_Z, '\\0', false,\n              N_(\"Mark output as requiring executable stack\"), NULL);\n  DEFINE_bool(initfirst, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark DSO to be initialized first at runtime\"),\n\t      NULL);\n  DEFINE_bool(interpose, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark object to interpose all DSOs but executable\"),\n\t      NULL);\n  DEFINE_bool(lazy, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark object for lazy runtime binding (default)\"),\n\t      NULL);\n  DEFINE_bool(loadfltr, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark object requiring immediate process\"),\n\t      NULL);\n  DEFINE_uint64(max_page_size, options::DASH_Z, '\\0', 0,\n                N_(\"Set maximum page size to SIZE\"), N_(\"SIZE\"));\n  DEFINE_bool(copyreloc, options::DASH_Z, '\\0', true,\n\t      NULL,\n\t      N_(\"Do not create copy relocs\"));\n  DEFINE_bool(nodefaultlib, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark object not to use default search paths\"),\n\t      NULL);\n  DEFINE_bool(nodelete, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark DSO non-deletable at runtime\"),\n\t      NULL);\n  DEFINE_bool(nodlopen, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark DSO not available to dlopen\"),\n\t      NULL);\n  DEFINE_bool(nodump, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark DSO not available to dldump\"),\n\t      NULL);\n  DEFINE_bool(noexecstack, options::DASH_Z, '\\0', false,\n              N_(\"Mark output as not requiring executable stack\"), NULL);\n  DEFINE_bool(now, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark object for immediate function binding\"),\n\t      NULL);\n  DEFINE_bool(origin, options::DASH_Z, '\\0', false,\n\t      N_(\"Mark DSO to indicate that needs immediate $ORIGIN \"\n                 \"processing at runtime\"), NULL);\n  DEFINE_bool(relro, options::DASH_Z, '\\0', false,\n\t      N_(\"Where possible mark variables read-only after relocation\"),\n\t      N_(\"Don't mark variables read-only after relocation\"));\n\n public:\n  typedef options::Dir_list Dir_list;\n\n  General_options();\n\n  // Does post-processing on flags, making sure they all have\n  // non-conflicting values.  Also converts some flags from their\n  // \"standard\" types (string, etc), to another type (enum, DirList),\n  // which can be accessed via a separate method.  Dies if it notices\n  // any problems.\n  void finalize();\n\n  // True if we printed the version information.\n  bool\n  printed_version() const\n  { return this->printed_version_; }\n\n  // The macro defines output() (based on --output), but that's a\n  // generic name.  Provide this alternative name, which is clearer.\n  const char*\n  output_file_name() const\n  { return this->output(); }\n\n  // This is not defined via a flag, but combines flags to say whether\n  // the output is position-independent or not.\n  bool\n  output_is_position_independent() const\n  { return this->shared() || this->pie(); }\n\n  // Return true if the output is something that can be exec()ed, such\n  // as a static executable, or a position-dependent or\n  // position-independent executable, but not a dynamic library or an\n  // object file.\n  bool\n  output_is_executable() const\n  { return !this->shared() && !this->relocatable(); }\n\n  // This would normally be static(), and defined automatically, but\n  // since static is a keyword, we need to come up with our own name.\n  bool\n  is_static() const\n  { return static_; }\n\n  // In addition to getting the input and output formats as a string\n  // (via format() and oformat()), we also give access as an enum.\n  enum Object_format\n  {\n    // Ordinary ELF.\n    OBJECT_FORMAT_ELF,\n    // Straight binary format.\n    OBJECT_FORMAT_BINARY\n  };\n\n  // Convert a string to an Object_format.  Gives an error if the\n  // string is not recognized.\n  static Object_format\n  string_to_object_format(const char* arg);\n\n  // Note: these functions are not very fast.\n  Object_format format_enum() const;\n  Object_format oformat_enum() const;\n\n  // Return whether FILENAME is in a system directory.\n  bool\n  is_in_system_directory(const std::string& name) const;\n\n  // RETURN whether SYMBOL_NAME should be kept, according to symbols_to_retain_.\n  bool\n  should_retain_symbol(const char* symbol_name) const\n    {\n      if (symbols_to_retain_.empty())    // means flag wasn't specified\n        return true;\n      return symbols_to_retain_.find(symbol_name) != symbols_to_retain_.end();\n    }\n\n  // These are the best way to get access to the execstack state,\n  // not execstack() and noexecstack() which are hard to use properly.\n  bool\n  is_execstack_set() const\n  { return this->execstack_status_ != EXECSTACK_FROM_INPUT; }\n\n  bool\n  is_stack_executable() const\n  { return this->execstack_status_ == EXECSTACK_YES; }\n\n  bool\n  icf_enabled() const\n  { return this->icf_status_ != ICF_NONE; }\n\n  bool\n  icf_safe_folding() const\n  { return this->icf_status_ == ICF_SAFE; }\n\n  // The --demangle option takes an optional string, and there is also\n  // a --no-demangle option.  This is the best way to decide whether\n  // to demangle or not.\n  bool\n  do_demangle() const\n  { return this->do_demangle_; }\n\n  // Returns TRUE if any plugin libraries have been loaded.\n  bool\n  has_plugins() const\n  { return this->plugins_ != NULL; }\n\n  // Return a pointer to the plugin manager.\n  Plugin_manager*\n  plugins() const\n  { return this->plugins_; }\n\n  // True iff SYMBOL was found in the file specified by dynamic-list.\n  bool\n  in_dynamic_list(const char* symbol) const\n  { return this->dynamic_list_.version_script_info()->symbol_is_local(symbol); }\n\n  // The disposition given by the --incremental-changed,\n  // --incremental-unchanged or --incremental-unknown option.  The\n  // value may change as we proceed parsing the command line flags.\n  Incremental_disposition\n  incremental_disposition() const\n  { return this->incremental_disposition_; }\n\n  // Return true if S is the name of a library excluded from automatic\n  // symbol export.\n  bool\n  check_excluded_libs (const std::string &s) const;\n\n private:\n  // Don't copy this structure.\n  General_options(const General_options&);\n  General_options& operator=(const General_options&);\n\n  // Whether to mark the stack as executable.\n  enum Execstack\n  {\n    // Not set on command line.\n    EXECSTACK_FROM_INPUT,\n    // Mark the stack as executable (-z execstack).\n    EXECSTACK_YES,\n    // Mark the stack as not executable (-z noexecstack).\n    EXECSTACK_NO\n  };\n\n  enum Icf_status\n  {\n    // Do not fold any functions (Default or --icf=none).\n    ICF_NONE,\n    // All functions are candidates for folding. (--icf=all).\n    ICF_ALL,\t\n    // Only ctors and dtors are candidates for folding. (--icf=safe).\n    ICF_SAFE\n  };\n\n  void\n  set_icf_status(Icf_status value)\n  { this->icf_status_ = value; }\n\n  void\n  set_execstack_status(Execstack value)\n  { this->execstack_status_ = value; }\n\n  void\n  set_do_demangle(bool value)\n  { this->do_demangle_ = value; }\n\n  void\n  set_static(bool value)\n  { static_ = value; }\n\n  // These are called by finalize() to set up the search-path correctly.\n  void\n  add_to_library_path_with_sysroot(const char* arg)\n  { this->add_search_directory_to_library_path(Search_directory(arg, true)); }\n\n  // Apply any sysroot to the directory lists.\n  void\n  add_sysroot();\n\n  // Add a plugin and its arguments to the list of plugins.\n  void\n  add_plugin(const char *filename);\n\n  // Add a plugin option.\n  void\n  add_plugin_option(const char* opt);\n\n  // Whether we printed version information.\n  bool printed_version_;\n  // Whether to mark the stack as executable.\n  Execstack execstack_status_;\n  // Whether to do code folding.\n  Icf_status icf_status_;\n  // Whether to do a static link.\n  bool static_;\n  // Whether to do demangling.\n  bool do_demangle_;\n  // List of plugin libraries.\n  Plugin_manager* plugins_;\n  // The parsed output of --dynamic-list files.  For convenience in\n  // script.cc, we store this as a Script_options object, even though\n  // we only use a single Version_tree from it.\n  Script_options dynamic_list_;\n  // The disposition given by the --incremental-changed,\n  // --incremental-unchanged or --incremental-unknown option.  The\n  // value may change as we proceed parsing the command line flags.\n  Incremental_disposition incremental_disposition_;\n  // Whether we have seen one of the options that require incremental\n  // build (--incremental-changed, --incremental-unchanged or\n  // --incremental-unknown)\n  bool implicit_incremental_;\n  // Libraries excluded from automatic export, via --exclude-libs.\n  Unordered_set<std::string> excluded_libs_;\n  // List of symbol-names to keep, via -retain-symbol-info.\n  Unordered_set<std::string> symbols_to_retain_;\n};\n\n// The position-dependent options.  We use this to store the state of\n// the commandline at a particular point in parsing for later\n// reference.  For instance, if we see \"ld --whole-archive foo.a\n// --no-whole-archive,\" we want to store the whole-archive option with\n// foo.a, so when the time comes to parse foo.a we know we should do\n// it in whole-archive mode.  We could store all of General_options,\n// but that's big, so we just pick the subset of flags that actually\n// change in a position-dependent way.\n\n#define DEFINE_posdep(varname__, type__)        \\\n public:                                        \\\n  type__                                        \\\n  varname__() const                             \\\n  { return this->varname__##_; }                \\\n                                                \\\n  void                                          \\\n  set_##varname__(type__ value)                 \\\n  { this->varname__##_ = value; }               \\\n private:                                       \\\n  type__ varname__##_\n\nclass Position_dependent_options\n{\n public:\n  Position_dependent_options(const General_options& options\n                             = Position_dependent_options::default_options_)\n  { copy_from_options(options); }\n\n  void copy_from_options(const General_options& options)\n  {\n    this->set_as_needed(options.as_needed());\n    this->set_Bdynamic(options.Bdynamic());\n    this->set_format_enum(options.format_enum());\n    this->set_whole_archive(options.whole_archive());\n    this->set_incremental_disposition(options.incremental_disposition());\n  }\n\n  DEFINE_posdep(as_needed, bool);\n  DEFINE_posdep(Bdynamic, bool);\n  DEFINE_posdep(format_enum, General_options::Object_format);\n  DEFINE_posdep(whole_archive, bool);\n  DEFINE_posdep(incremental_disposition, Incremental_disposition);\n\n private:\n  // This is a General_options with everything set to its default\n  // value.  A Position_dependent_options created with no argument\n  // will take its values from here.\n  static General_options default_options_;\n};\n\n\n// A single file or library argument from the command line.\n\nclass Input_file_argument\n{\n public:\n  enum Input_file_type\n  {\n    // A regular file, name used as-is, not searched.\n    INPUT_FILE_TYPE_FILE,\n    // A library name.  When used, \"lib\" will be prepended and \".so\" or\n    // \".a\" appended to make a filename, and that filename will be searched\n    // for using the -L paths.\n    INPUT_FILE_TYPE_LIBRARY,\n    // A regular file, name used as-is, but searched using the -L paths.\n    INPUT_FILE_TYPE_SEARCHED_FILE\n  };\n\n  // name: file name or library name\n  // type: the type of this input file.\n  // extra_search_path: an extra directory to look for the file, prior\n  //         to checking the normal library search path.  If this is \"\",\n  //         then no extra directory is added.\n  // just_symbols: whether this file only defines symbols.\n  // options: The position dependent options at this point in the\n  //         command line, such as --whole-archive.\n  Input_file_argument()\n    : name_(), type_(INPUT_FILE_TYPE_FILE), extra_search_path_(\"\"),\n      just_symbols_(false), options_()\n  { }\n\n  Input_file_argument(const char* name, Input_file_type type,\n                      const char* extra_search_path,\n                      bool just_symbols,\n                      const Position_dependent_options& options)\n    : name_(name), type_(type), extra_search_path_(extra_search_path),\n      just_symbols_(just_symbols), options_(options)\n  { }\n\n  // You can also pass in a General_options instance instead of a\n  // Position_dependent_options.  In that case, we extract the\n  // position-independent vars from the General_options and only store\n  // those.\n  Input_file_argument(const char* name, Input_file_type type,\n                      const char* extra_search_path,\n                      bool just_symbols,\n                      const General_options& options)\n    : name_(name), type_(type), extra_search_path_(extra_search_path),\n      just_symbols_(just_symbols), options_(options)\n  { }\n\n  const char*\n  name() const\n  { return this->name_.c_str(); }\n\n  const Position_dependent_options&\n  options() const\n  { return this->options_; }\n\n  bool\n  is_lib() const\n  { return type_ == INPUT_FILE_TYPE_LIBRARY; }\n\n  bool\n  is_searched_file() const\n  { return type_ == INPUT_FILE_TYPE_SEARCHED_FILE; }\n\n  const char*\n  extra_search_path() const\n  {\n    return (this->extra_search_path_.empty()\n            ? NULL\n            : this->extra_search_path_.c_str());\n  }\n\n  // Return whether we should only read symbols from this file.\n  bool\n  just_symbols() const\n  { return this->just_symbols_; }\n\n  // Return whether this file may require a search using the -L\n  // options.\n  bool\n  may_need_search() const\n  {\n    return (this->is_lib()\n\t    || this->is_searched_file()\n\t    || !this->extra_search_path_.empty());\n  }\n\n private:\n  // We use std::string, not const char*, here for convenience when\n  // using script files, so that we do not have to preserve the string\n  // in that case.\n  std::string name_;\n  Input_file_type type_;\n  std::string extra_search_path_;\n  bool just_symbols_;\n  Position_dependent_options options_;\n};\n\n// A file or library, or a group, from the command line.\n\nclass Input_argument\n{\n public:\n  // Create a file or library argument.\n  explicit Input_argument(Input_file_argument file)\n    : is_file_(true), file_(file), group_(NULL)\n  { }\n\n  // Create a group argument.\n  explicit Input_argument(Input_file_group* group)\n    : is_file_(false), group_(group)\n  { }\n\n  // Return whether this is a file.\n  bool\n  is_file() const\n  { return this->is_file_; }\n\n  // Return whether this is a group.\n  bool\n  is_group() const\n  { return !this->is_file_; }\n\n  // Return the information about the file.\n  const Input_file_argument&\n  file() const\n  {\n    gold_assert(this->is_file_);\n    return this->file_;\n  }\n\n  // Return the information about the group.\n  const Input_file_group*\n  group() const\n  {\n    gold_assert(!this->is_file_);\n    return this->group_;\n  }\n\n  Input_file_group*\n  group()\n  {\n    gold_assert(!this->is_file_);\n    return this->group_;\n  }\n\n private:\n  bool is_file_;\n  Input_file_argument file_;\n  Input_file_group* group_;\n};\n\ntypedef std::vector<Input_argument> Input_argument_list;\n\n// A group from the command line.  This is a set of arguments within\n// --start-group ... --end-group.\n\nclass Input_file_group\n{\n public:\n  typedef Input_argument_list::const_iterator const_iterator;\n\n  Input_file_group()\n    : files_()\n  { }\n\n  // Add a file to the end of the group.\n  void\n  add_file(const Input_file_argument& arg)\n  { this->files_.push_back(Input_argument(arg)); }\n\n  // Iterators to iterate over the group contents.\n\n  const_iterator\n  begin() const\n  { return this->files_.begin(); }\n\n  const_iterator\n  end() const\n  { return this->files_.end(); }\n\n private:\n  Input_argument_list files_;\n};\n\n// A list of files from the command line or a script.\n\nclass Input_arguments\n{\n public:\n  typedef Input_argument_list::const_iterator const_iterator;\n\n  Input_arguments()\n    : input_argument_list_(), in_group_(false)\n  { }\n\n  // Add a file.\n  void\n  add_file(const Input_file_argument& arg);\n\n  // Start a group (the --start-group option).\n  void\n  start_group();\n\n  // End a group (the --end-group option).\n  void\n  end_group();\n\n  // Return whether we are currently in a group.\n  bool\n  in_group() const\n  { return this->in_group_; }\n\n  // The number of entries in the list.\n  int\n  size() const\n  { return this->input_argument_list_.size(); }\n\n  // Iterators to iterate over the list of input files.\n\n  const_iterator\n  begin() const\n  { return this->input_argument_list_.begin(); }\n\n  const_iterator\n  end() const\n  { return this->input_argument_list_.end(); }\n\n  // Return whether the list is empty.\n  bool\n  empty() const\n  { return this->input_argument_list_.empty(); }\n\n private:\n  Input_argument_list input_argument_list_;\n  bool in_group_;\n};\n\n\n// All the information read from the command line.  These are held in\n// three separate structs: one to hold the options (--foo), one to\n// hold the filenames listed on the commandline, and one to hold\n// linker script information.  This third is not a subset of the other\n// two because linker scripts can be specified either as options (via\n// -T) or as a file.\n\nclass Command_line\n{\n public:\n  typedef Input_arguments::const_iterator const_iterator;\n\n  Command_line();\n\n  // Process the command line options.  This will exit with an\n  // appropriate error message if an unrecognized option is seen.\n  void\n  process(int argc, const char** argv);\n\n  // Process one command-line option.  This takes the index of argv to\n  // process, and returns the index for the next option.  no_more_options\n  // is set to true if argv[i] is \"--\".\n  int\n  process_one_option(int argc, const char** argv, int i,\n                     bool* no_more_options);\n\n  // Get the general options.\n  const General_options&\n  options() const\n  { return this->options_; }\n\n  // Get the position dependent options.\n  const Position_dependent_options&\n  position_dependent_options() const\n  { return this->position_options_; }\n\n  // Get the linker-script options.\n  Script_options&\n  script_options()\n  { return this->script_options_; }\n\n  // Get the version-script options: a convenience routine.\n  const Version_script_info&\n  version_script() const\n  { return *this->script_options_.version_script_info(); }\n\n  // Get the input files.\n  Input_arguments&\n  inputs()\n  { return this->inputs_; }\n\n  // The number of input files.\n  int\n  number_of_input_files() const\n  { return this->inputs_.size(); }\n\n  // Iterators to iterate over the list of input files.\n\n  const_iterator\n  begin() const\n  { return this->inputs_.begin(); }\n\n  const_iterator\n  end() const\n  { return this->inputs_.end(); }\n\n private:\n  Command_line(const Command_line&);\n  Command_line& operator=(const Command_line&);\n\n  // This is a dummy class to provide a constructor that runs before\n  // the constructor for the General_options.  The Pre_options constructor\n  // is used as a hook to set the flag enabling the options to register\n  // themselves.\n  struct Pre_options {\n    Pre_options();\n  };\n\n  // This must come before options_!\n  Pre_options pre_options_;\n  General_options options_;\n  Position_dependent_options position_options_;\n  Script_options script_options_;\n  Input_arguments inputs_;\n};\n\n} // End namespace gold.\n\n#endif // !defined(GOLD_OPTIONS_H)\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/plugin.cc": "// plugin.cc -- plugin manager for gold      -*- C++ -*-\n\n// Copyright 2008, 2009 Free Software Foundation, Inc.\n// Written by Cary Coutant <ccoutant@google.com>.\n\n// This file is part of gold.\n\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n// MA 02110-1301, USA.\n\n#include \"gold.h\"\n\n#include <cstdio>\n#include <cstdarg>\n#include <cstring>\n#include <string>\n#include <vector>\n\n#ifdef ENABLE_PLUGINS\n#include <dlfcn.h>\n#endif\n\n#include \"parameters.h\"\n#include \"errors.h\"\n#include \"fileread.h\"\n#include \"layout.h\"\n#include \"options.h\"\n#include \"plugin.h\"\n#include \"target.h\"\n#include \"readsyms.h\"\n#include \"symtab.h\"\n#include \"elfcpp.h\"\n\nnamespace gold\n{\n\n#ifdef ENABLE_PLUGINS\n\n// The linker's exported interfaces.\n\nextern \"C\"\n{\n\nstatic enum ld_plugin_status\nregister_claim_file(ld_plugin_claim_file_handler handler);\n\nstatic enum ld_plugin_status\nregister_all_symbols_read(ld_plugin_all_symbols_read_handler handler);\n\nstatic enum ld_plugin_status\nregister_cleanup(ld_plugin_cleanup_handler handler);\n\nstatic enum ld_plugin_status\nadd_symbols(void *handle, int nsyms, const struct ld_plugin_symbol *syms);\n\nstatic enum ld_plugin_status\nget_input_file(const void *handle, struct ld_plugin_input_file *file);\n\nstatic enum ld_plugin_status\nrelease_input_file(const void *handle);\n\nstatic enum ld_plugin_status\nget_symbols(const void *handle, int nsyms, struct ld_plugin_symbol *syms);\n\nstatic enum ld_plugin_status\nadd_input_file(char *pathname);\n\nstatic enum ld_plugin_status\nadd_input_library(char *pathname);\n\nstatic enum ld_plugin_status\nmessage(int level, const char *format, ...);\n\n};\n\n#endif // ENABLE_PLUGINS\n\nstatic Pluginobj* make_sized_plugin_object(Input_file* input_file,\n                                           off_t offset, off_t filesize);\n\n// Plugin methods.\n\n// Load one plugin library.\n\nvoid\nPlugin::load()\n{\n#ifdef ENABLE_PLUGINS\n  // Load the plugin library.\n  // FIXME: Look for the library in standard locations.\n  this->handle_ = dlopen(this->filename_.c_str(), RTLD_NOW);\n  if (this->handle_ == NULL)\n    {\n      gold_error(_(\"%s: could not load plugin library\"),\n                 this->filename_.c_str());\n      return;\n    }\n\n  // Find the plugin's onload entry point.\n  ld_plugin_onload onload = reinterpret_cast<ld_plugin_onload>\n    (dlsym(this->handle_, \"onload\"));\n  if (onload == NULL)\n    {\n      gold_error(_(\"%s: could not find onload entry point\"),\n                 this->filename_.c_str());\n      return;\n    }\n\n  // Get the linker's version number.\n  const char* ver = get_version_string();\n  int major = 0;\n  int minor = 0;\n  sscanf(ver, \"%d.%d\", &major, &minor);\n\n  // Allocate and populate a transfer vector.\n  const int tv_fixed_size = 14;\n  int tv_size = this->args_.size() + tv_fixed_size;\n  ld_plugin_tv *tv = new ld_plugin_tv[tv_size];\n\n  // Put LDPT_MESSAGE at the front of the list so the plugin can use it\n  // while processing subsequent entries.\n  int i = 0;\n  tv[i].tv_tag = LDPT_MESSAGE;\n  tv[i].tv_u.tv_message = message;\n\n  ++i;\n  tv[i].tv_tag = LDPT_API_VERSION;\n  tv[i].tv_u.tv_val = LD_PLUGIN_API_VERSION;\n\n  ++i;\n  tv[i].tv_tag = LDPT_GOLD_VERSION;\n  tv[i].tv_u.tv_val = major * 100 + minor;\n\n  ++i;\n  tv[i].tv_tag = LDPT_LINKER_OUTPUT;\n  if (parameters->options().relocatable())\n    tv[i].tv_u.tv_val = LDPO_REL;\n  else if (parameters->options().shared())\n    tv[i].tv_u.tv_val = LDPO_DYN;\n  else\n    tv[i].tv_u.tv_val = LDPO_EXEC;\n\n  for (unsigned int j = 0; j < this->args_.size(); ++j)\n    {\n      ++i;\n      tv[i].tv_tag = LDPT_OPTION;\n      tv[i].tv_u.tv_string = this->args_[j].c_str();\n    }\n\n  ++i;\n  tv[i].tv_tag = LDPT_REGISTER_CLAIM_FILE_HOOK;\n  tv[i].tv_u.tv_register_claim_file = register_claim_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK;\n  tv[i].tv_u.tv_register_all_symbols_read = register_all_symbols_read;\n\n  ++i;\n  tv[i].tv_tag = LDPT_REGISTER_CLEANUP_HOOK;\n  tv[i].tv_u.tv_register_cleanup = register_cleanup;\n\n  ++i;\n  tv[i].tv_tag = LDPT_ADD_SYMBOLS;\n  tv[i].tv_u.tv_add_symbols = add_symbols;\n\n  ++i;\n  tv[i].tv_tag = LDPT_GET_INPUT_FILE;\n  tv[i].tv_u.tv_get_input_file = get_input_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_RELEASE_INPUT_FILE;\n  tv[i].tv_u.tv_release_input_file = release_input_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_GET_SYMBOLS;\n  tv[i].tv_u.tv_get_symbols = get_symbols;\n\n  ++i;\n  tv[i].tv_tag = LDPT_ADD_INPUT_FILE;\n  tv[i].tv_u.tv_add_input_file = add_input_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_ADD_INPUT_LIBRARY;\n  tv[i].tv_u.tv_add_input_library = add_input_library;\n\n  ++i;\n  tv[i].tv_tag = LDPT_NULL;\n  tv[i].tv_u.tv_val = 0;\n\n  gold_assert(i == tv_size - 1);\n\n  // Call the onload entry point.\n  (*onload)(tv);\n\n  delete[] tv;\n#endif // ENABLE_PLUGINS\n}\n\n// Call the plugin claim-file handler.\n\ninline bool\nPlugin::claim_file(struct ld_plugin_input_file *plugin_input_file)\n{\n  int claimed = 0;\n\n  if (this->claim_file_handler_ != NULL)\n    {\n      (*this->claim_file_handler_)(plugin_input_file, &claimed);\n      if (claimed)\n        return true;\n    }\n  return false;\n}\n\n// Call the all-symbols-read handler.\n\ninline void\nPlugin::all_symbols_read()\n{\n  if (this->all_symbols_read_handler_ != NULL)\n    (*this->all_symbols_read_handler_)();\n}\n\n// Call the cleanup handler.\n\ninline void\nPlugin::cleanup()\n{\n  if (this->cleanup_handler_ != NULL)\n    (*this->cleanup_handler_)();\n}\n\n// Plugin_manager methods.\n\nPlugin_manager::~Plugin_manager()\n{\n  for (Plugin_list::iterator p = this->plugins_.begin();\n       p != this->plugins_.end();\n       ++p)\n    delete *p;\n  this->plugins_.clear();\n  for (Object_list::iterator obj = this->objects_.begin();\n       obj != this->objects_.end();\n       ++obj)\n    delete *obj;\n  this->objects_.clear();\n}\n\n// Load all plugin libraries.\n\nvoid\nPlugin_manager::load_plugins()\n{\n  for (this->current_ = this->plugins_.begin();\n       this->current_ != this->plugins_.end();\n       ++this->current_)\n    (*this->current_)->load();\n}\n\n// Call the plugin claim-file handlers in turn to see if any claim the file.\n\nPluginobj*\nPlugin_manager::claim_file(Input_file* input_file, off_t offset,\n                           off_t filesize)\n{\n  if (this->in_replacement_phase_)\n    return NULL;\n\n  unsigned int handle = this->objects_.size();\n  this->input_file_ = input_file;\n  this->plugin_input_file_.name = input_file->filename().c_str();\n  this->plugin_input_file_.fd = input_file->file().descriptor();\n  this->plugin_input_file_.offset = offset;\n  this->plugin_input_file_.filesize = filesize;\n  this->plugin_input_file_.handle = reinterpret_cast<void*>(handle);\n\n  for (this->current_ = this->plugins_.begin();\n       this->current_ != this->plugins_.end();\n       ++this->current_)\n    {\n      if ((*this->current_)->claim_file(&this->plugin_input_file_))\n        {\n          if (this->objects_.size() > handle)\n            return this->objects_[handle];\n\n          // If the plugin claimed the file but did not call the\n          // add_symbols callback, we need to create the Pluginobj now.\n          Pluginobj* obj = this->make_plugin_object(handle);\n          return obj;\n        }\n    }\n\n  return NULL;\n}\n\n// Call the all-symbols-read handlers.\n\nvoid\nPlugin_manager::all_symbols_read(Workqueue* workqueue, Task* task,\n                                 Input_objects* input_objects,\n\t                         Symbol_table* symtab, Layout* layout,\n\t                         Dirsearch* dirpath, Mapfile* mapfile,\n\t                         Task_token** last_blocker)\n{\n  this->in_replacement_phase_ = true;\n  this->workqueue_ = workqueue;\n  this->task_ = task;\n  this->input_objects_ = input_objects;\n  this->symtab_ = symtab;\n  this->layout_ = layout;\n  this->dirpath_ = dirpath;\n  this->mapfile_ = mapfile;\n  this->this_blocker_ = NULL;\n\n  for (this->current_ = this->plugins_.begin();\n       this->current_ != this->plugins_.end();\n       ++this->current_)\n    (*this->current_)->all_symbols_read();\n\n  *last_blocker = this->this_blocker_;\n}\n\n// Layout deferred objects.\n\nvoid\nPlugin_manager::layout_deferred_objects()\n{\n  Deferred_layout_list::iterator obj;\n\n  for (obj = this->deferred_layout_objects_.begin();\n       obj != this->deferred_layout_objects_.end();\n       ++obj)\n    (*obj)->layout_deferred_sections(this->layout_);\n}\n\n// Call the cleanup handlers.\n\nvoid\nPlugin_manager::cleanup()\n{\n  if (this->cleanup_done_)\n    return;\n  for (this->current_ = this->plugins_.begin();\n       this->current_ != this->plugins_.end();\n       ++this->current_)\n    (*this->current_)->cleanup();\n  this->cleanup_done_ = true;\n}\n\n// Make a new Pluginobj object.  This is called when the plugin calls\n// the add_symbols API.\n\nPluginobj*\nPlugin_manager::make_plugin_object(unsigned int handle)\n{\n  // Make sure we aren't asked to make an object for the same handle twice.\n  if (this->objects_.size() != handle)\n    return NULL;\n\n  Pluginobj* obj = make_sized_plugin_object(this->input_file_,\n                                            this->plugin_input_file_.offset,\n                                            this->plugin_input_file_.filesize);\n  this->objects_.push_back(obj);\n  return obj;\n}\n\n// Get the input file information with an open (possibly re-opened)\n// file descriptor.\n\nld_plugin_status\nPlugin_manager::get_input_file(unsigned int handle,\n                               struct ld_plugin_input_file *file)\n{\n  Pluginobj* obj = this->object(handle);\n  if (obj == NULL)\n    return LDPS_BAD_HANDLE;\n\n  obj->lock(this->task_);\n  file->name = obj->filename().c_str();\n  file->fd = obj->descriptor();\n  file->offset = obj->offset();\n  file->filesize = obj->filesize();\n  file->handle = reinterpret_cast<void*>(handle);\n  return LDPS_OK;\n}\n\n// Release the input file.\n\nld_plugin_status\nPlugin_manager::release_input_file(unsigned int handle)\n{\n  Pluginobj* obj = this->object(handle);\n  if (obj == NULL)\n    return LDPS_BAD_HANDLE;\n\n  obj->unlock(this->task_);\n  return LDPS_OK;\n}\n\n// Add a new input file.\n\nld_plugin_status\nPlugin_manager::add_input_file(char *pathname, bool is_lib)\n{\n  Input_file_argument file(pathname,\n                           (is_lib\n                            ? Input_file_argument::INPUT_FILE_TYPE_LIBRARY\n                            : Input_file_argument::INPUT_FILE_TYPE_FILE),\n                           \"\", false, this->options_);\n  Input_argument* input_argument = new Input_argument(file);\n  Task_token* next_blocker = new Task_token(true);\n  next_blocker->add_blocker();\n  if (this->layout_->incremental_inputs())\n    gold_error(_(\"Input files added by plug-ins in --incremental mode not \"\n\t\t \"supported yet.\\n\"));\n  this->workqueue_->queue_soon(new Read_symbols(this->input_objects_,\n                                                this->symtab_,\n                                                this->layout_,\n                                                this->dirpath_,\n\t\t\t\t\t\t0,\n                                                this->mapfile_,\n                                                input_argument,\n                                                NULL,\n                                                this->this_blocker_,\n                                                next_blocker));\n  this->this_blocker_ = next_blocker;\n  return LDPS_OK;\n}\n\n// Class Pluginobj.\n\nPluginobj::Pluginobj(const std::string& name, Input_file* input_file,\n                     off_t offset, off_t filesize)\n  : Object(name, input_file, false, offset),\n    nsyms_(0), syms_(NULL), symbols_(), filesize_(filesize), comdat_map_()\n{\n}\n\n// Return TRUE if a defined symbol might be reachable from outside the\n// universe of claimed objects.\n\nstatic inline bool\nis_visible_from_outside(Symbol* lsym)\n{\n  if (lsym->in_real_elf())\n    return true;\n  if (parameters->options().relocatable())\n    return true;\n  if (parameters->options().export_dynamic() || parameters->options().shared())\n    return lsym->is_externally_visible();\n  return false;\n}\n\n// Get symbol resolution info.\n\nld_plugin_status\nPluginobj::get_symbol_resolution_info(int nsyms, ld_plugin_symbol* syms) const\n{\n  if (nsyms > this->nsyms_)\n    return LDPS_NO_SYMS;\n  for (int i = 0; i < nsyms; i++)\n    {\n      ld_plugin_symbol* isym = &syms[i];\n      Symbol* lsym = this->symbols_[i];\n      ld_plugin_symbol_resolution res = LDPR_UNKNOWN;\n\n      if (lsym->is_undefined())\n        // The symbol remains undefined.\n        res = LDPR_UNDEF;\n      else if (isym->def == LDPK_UNDEF\n               || isym->def == LDPK_WEAKUNDEF\n               || isym->def == LDPK_COMMON)\n        {\n          // The original symbol was undefined or common.\n          if (lsym->source() != Symbol::FROM_OBJECT)\n            res = LDPR_RESOLVED_EXEC;\n          else if (lsym->object()->pluginobj() != NULL)\n            res = LDPR_RESOLVED_IR;\n          else if (lsym->object()->is_dynamic())\n            res = LDPR_RESOLVED_DYN;\n          else\n            res = LDPR_RESOLVED_EXEC;\n        }\n      else\n        {\n          // The original symbol was a definition.\n          if (lsym->source() != Symbol::FROM_OBJECT)\n            res = LDPR_PREEMPTED_REG;\n          else if (lsym->object() == static_cast<const Object*>(this))\n            res = (is_visible_from_outside(lsym)\n                   ? LDPR_PREVAILING_DEF\n                   : LDPR_PREVAILING_DEF_IRONLY);\n          else\n            res = (lsym->object()->pluginobj() != NULL\n                   ? LDPR_PREEMPTED_IR\n                   : LDPR_PREEMPTED_REG);\n        }\n      isym->resolution = res;\n    }\n  return LDPS_OK;\n}\n\n// Return TRUE if the comdat group with key COMDAT_KEY from this object\n// should be kept.\n\nbool\nPluginobj::include_comdat_group(std::string comdat_key, Layout* layout)\n{\n  std::pair<Comdat_map::iterator, bool> ins =\n    this->comdat_map_.insert(std::make_pair(comdat_key, false));\n\n  // If this is the first time we've seen this comdat key, ask the\n  // layout object whether it should be included.\n  if (ins.second)\n    ins.first->second = layout->find_or_add_kept_section(comdat_key,\n\t\t\t\t\t\t\t NULL, 0, true,\n\t\t\t\t\t\t\t true, NULL);\n\n  return ins.first->second;\n}\n\n// Class Sized_pluginobj.\n\ntemplate<int size, bool big_endian>\nSized_pluginobj<size, big_endian>::Sized_pluginobj(\n    const std::string& name,\n    Input_file* input_file,\n    off_t offset,\n    off_t filesize)\n  : Pluginobj(name, input_file, offset, filesize)\n{\n}\n\n// Read the symbols.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nvoid\nSized_pluginobj<size, big_endian>::do_read_symbols(Read_symbols_data*)\n{\n  gold_unreachable();\n}\n\n// Lay out the input sections.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nvoid\nSized_pluginobj<size, big_endian>::do_layout(Symbol_table*, Layout*,\n                                             Read_symbols_data*)\n{\n  gold_unreachable();\n}\n\n// Add the symbols to the symbol table.\n\ntemplate<int size, bool big_endian>\nvoid\nSized_pluginobj<size, big_endian>::do_add_symbols(Symbol_table* symtab,\n                                                  Read_symbols_data*,\n                                                  Layout* layout)\n{\n  const int sym_size = elfcpp::Elf_sizes<size>::sym_size;\n  unsigned char symbuf[sym_size];\n  elfcpp::Sym<size, big_endian> sym(symbuf);\n  elfcpp::Sym_write<size, big_endian> osym(symbuf);\n\n  typedef typename elfcpp::Elf_types<size>::Elf_WXword Elf_size_type;\n\n  this->symbols_.resize(this->nsyms_);\n\n  for (int i = 0; i < this->nsyms_; ++i)\n    {\n      const struct ld_plugin_symbol *isym = &this->syms_[i];\n      const char* name = isym->name;\n      const char* ver = isym->version;\n      elfcpp::Elf_Half shndx;\n      elfcpp::STB bind;\n      elfcpp::STV vis;\n\n      if (name != NULL && name[0] == '\\0')\n        name = NULL;\n      if (ver != NULL && ver[0] == '\\0')\n        ver = NULL;\n\n      switch (isym->def)\n        {\n        case LDPK_WEAKDEF:\n        case LDPK_WEAKUNDEF:\n          bind = elfcpp::STB_WEAK;\n          break;\n        case LDPK_DEF:\n        case LDPK_UNDEF:\n        case LDPK_COMMON:\n        default:\n          bind = elfcpp::STB_GLOBAL;\n          break;\n        }\n\n      switch (isym->def)\n        {\n        case LDPK_DEF:\n        case LDPK_WEAKDEF:\n          shndx = elfcpp::SHN_ABS;\n          break;\n        case LDPK_COMMON:\n          shndx = elfcpp::SHN_COMMON;\n          break;\n        case LDPK_UNDEF:\n        case LDPK_WEAKUNDEF:\n        default:\n          shndx = elfcpp::SHN_UNDEF;\n          break;\n        }\n\n      switch (isym->visibility)\n        {\n        case LDPV_PROTECTED:\n          vis = elfcpp::STV_DEFAULT;\n          break;\n        case LDPV_INTERNAL:\n          vis = elfcpp::STV_DEFAULT;\n          break;\n        case LDPV_HIDDEN:\n          vis = elfcpp::STV_DEFAULT;\n          break;\n        case LDPV_DEFAULT:\n        default:\n          vis = elfcpp::STV_DEFAULT;\n          break;\n        }\n\n      if (isym->comdat_key != NULL\n          && isym->comdat_key[0] != '\\0'\n          && !this->include_comdat_group(isym->comdat_key, layout))\n        shndx = elfcpp::SHN_UNDEF;\n\n      osym.put_st_name(0);\n      osym.put_st_value(0);\n      osym.put_st_size(static_cast<Elf_size_type>(isym->size));\n      osym.put_st_info(bind, elfcpp::STT_NOTYPE);\n      osym.put_st_other(vis, 0);\n      osym.put_st_shndx(shndx);\n\n      this->symbols_[i] =\n        symtab->add_from_pluginobj<size, big_endian>(this, name, ver, &sym);\n    }\n}\n\n// Get the size of a section.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nuint64_t\nSized_pluginobj<size, big_endian>::do_section_size(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Get the name of a section.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nstd::string\nSized_pluginobj<size, big_endian>::do_section_name(unsigned int)\n{\n  gold_unreachable();\n  return std::string();\n}\n\n// Return a view of the contents of a section.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nObject::Location\nSized_pluginobj<size, big_endian>::do_section_contents(unsigned int)\n{\n  Location loc(0, 0);\n\n  gold_unreachable();\n  return loc;\n}\n\n// Return section flags.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nuint64_t\nSized_pluginobj<size, big_endian>::do_section_flags(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return section entsize.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nuint64_t\nSized_pluginobj<size, big_endian>::do_section_entsize(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return section address.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nuint64_t\nSized_pluginobj<size, big_endian>::do_section_address(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return section type.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nunsigned int\nSized_pluginobj<size, big_endian>::do_section_type(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return the section link field.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nunsigned int\nSized_pluginobj<size, big_endian>::do_section_link(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return the section link field.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nunsigned int\nSized_pluginobj<size, big_endian>::do_section_info(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return the section alignment.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nuint64_t\nSized_pluginobj<size, big_endian>::do_section_addralign(unsigned int)\n{\n  gold_unreachable();\n  return 0;\n}\n\n// Return the Xindex structure to use.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nXindex*\nSized_pluginobj<size, big_endian>::do_initialize_xindex()\n{\n  gold_unreachable();\n  return NULL;\n}\n\n// Get symbol counts.  Not used for plugin objects.\n\ntemplate<int size, bool big_endian>\nvoid\nSized_pluginobj<size, big_endian>::do_get_global_symbol_counts(const Symbol_table*,\n                                                   size_t*, size_t*) const\n{\n  gold_unreachable();\n}\n\n// Class Plugin_finish.  This task runs after all replacement files have\n// been added.  It calls each plugin's cleanup handler.\n\nclass Plugin_finish : public Task\n{\n public:\n  Plugin_finish(Task_token* this_blocker, Task_token* next_blocker)\n    : this_blocker_(this_blocker), next_blocker_(next_blocker)\n  { }\n\n  ~Plugin_finish()\n  {\n    if (this->this_blocker_ != NULL)\n      delete this->this_blocker_;\n  }\n\n  Task_token*\n  is_runnable()\n  {\n    if (this->this_blocker_ != NULL && this->this_blocker_->is_blocked())\n      return this->this_blocker_;\n    return NULL;\n  }\n\n  void\n  locks(Task_locker* tl)\n  { tl->add(this, this->next_blocker_); }\n\n  void\n  run(Workqueue*)\n  {\n    Plugin_manager* plugins = parameters->options().plugins();\n    gold_assert(plugins != NULL);\n    plugins->cleanup();\n  }\n\n  std::string\n  get_name() const\n  { return \"Plugin_finish\"; }\n\n private:\n  Task_token* this_blocker_;\n  Task_token* next_blocker_;\n};\n\n// Class Plugin_hook.\n\nPlugin_hook::~Plugin_hook()\n{\n}\n\n// Return whether a Plugin_hook task is runnable.\n\nTask_token*\nPlugin_hook::is_runnable()\n{\n  if (this->this_blocker_ != NULL && this->this_blocker_->is_blocked())\n    return this->this_blocker_;\n  return NULL;\n}\n\n// Return a Task_locker for a Plugin_hook task.  We don't need any\n// locks here.\n\nvoid\nPlugin_hook::locks(Task_locker*)\n{\n}\n\n// Run the \"all symbols read\" plugin hook.\n\nvoid\nPlugin_hook::run(Workqueue* workqueue)\n{\n  gold_assert(this->options_.has_plugins());\n  this->options_.plugins()->all_symbols_read(workqueue,\n                                             this,\n                                             this->input_objects_,\n                                             this->symtab_,\n                                             this->layout_,\n                                             this->dirpath_,\n                                             this->mapfile_,\n                                             &this->this_blocker_);\n  workqueue->queue_soon(new Plugin_finish(this->this_blocker_,\n\t\t\t\t\t  this->next_blocker_));\n}\n\n// The C interface routines called by the plugins.\n\n#ifdef ENABLE_PLUGINS\n\n// Register a claim-file handler.\n\nstatic enum ld_plugin_status\nregister_claim_file(ld_plugin_claim_file_handler handler)\n{\n  gold_assert(parameters->options().has_plugins());\n  parameters->options().plugins()->set_claim_file_handler(handler);\n  return LDPS_OK;\n}\n\n// Register an all-symbols-read handler.\n\nstatic enum ld_plugin_status\nregister_all_symbols_read(ld_plugin_all_symbols_read_handler handler)\n{\n  gold_assert(parameters->options().has_plugins());\n  parameters->options().plugins()->set_all_symbols_read_handler(handler);\n  return LDPS_OK;\n}\n\n// Register a cleanup handler.\n\nstatic enum ld_plugin_status\nregister_cleanup(ld_plugin_cleanup_handler handler)\n{\n  gold_assert(parameters->options().has_plugins());\n  parameters->options().plugins()->set_cleanup_handler(handler);\n  return LDPS_OK;\n}\n\n// Add symbols from a plugin-claimed input file.\n\nstatic enum ld_plugin_status\nadd_symbols(void* handle, int nsyms, const ld_plugin_symbol *syms)\n{\n  gold_assert(parameters->options().has_plugins());\n  Pluginobj* obj = parameters->options().plugins()->make_plugin_object(\n      static_cast<unsigned int>(reinterpret_cast<intptr_t>(handle)));\n  if (obj == NULL)\n    return LDPS_ERR;\n  obj->store_incoming_symbols(nsyms, syms);\n  return LDPS_OK;\n}\n\n// Get the input file information with an open (possibly re-opened)\n// file descriptor.\n\nstatic enum ld_plugin_status\nget_input_file(const void *handle, struct ld_plugin_input_file *file)\n{\n  gold_assert(parameters->options().has_plugins());\n  unsigned int obj_index =\n      static_cast<unsigned int>(reinterpret_cast<intptr_t>(handle));\n  return parameters->options().plugins()->get_input_file(obj_index, file);\n}\n\n// Release the input file.\n\nstatic enum ld_plugin_status\nrelease_input_file(const void *handle)\n{\n  gold_assert(parameters->options().has_plugins());\n  unsigned int obj_index =\n      static_cast<unsigned int>(reinterpret_cast<intptr_t>(handle));\n  return parameters->options().plugins()->release_input_file(obj_index);\n}\n\n// Get the symbol resolution info for a plugin-claimed input file.\n\nstatic enum ld_plugin_status\nget_symbols(const void * handle, int nsyms, ld_plugin_symbol* syms)\n{\n  gold_assert(parameters->options().has_plugins());\n  Pluginobj* obj = parameters->options().plugins()->object(\n      static_cast<unsigned int>(reinterpret_cast<intptr_t>(handle)));\n  if (obj == NULL)\n    return LDPS_ERR;\n  return obj->get_symbol_resolution_info(nsyms, syms);\n}\n\n// Add a new (real) input file generated by a plugin.\n\nstatic enum ld_plugin_status\nadd_input_file(char *pathname)\n{\n  gold_assert(parameters->options().has_plugins());\n  return parameters->options().plugins()->add_input_file(pathname, false);\n}\n\n// Add a new (real) library required by a plugin.\n\nstatic enum ld_plugin_status\nadd_input_library(char *pathname)\n{\n  gold_assert(parameters->options().has_plugins());\n  return parameters->options().plugins()->add_input_file(pathname, true);\n}\n\n// Issue a diagnostic message from a plugin.\n\nstatic enum ld_plugin_status\nmessage(int level, const char * format, ...)\n{\n  va_list args;\n  va_start(args, format);\n\n  switch (level)\n    {\n    case LDPL_INFO:\n      parameters->errors()->info(format, args);\n      break;\n    case LDPL_WARNING:\n      parameters->errors()->warning(format, args);\n      break;\n    case LDPL_ERROR:\n    default:\n      parameters->errors()->error(format, args);\n      break;\n    case LDPL_FATAL:\n      parameters->errors()->fatal(format, args);\n      break;\n    }\n\n  va_end(args);\n  return LDPS_OK;\n}\n\n#endif // ENABLE_PLUGINS\n\n// Allocate a Pluginobj object of the appropriate size and endianness.\n\nstatic Pluginobj*\nmake_sized_plugin_object(Input_file* input_file, off_t offset, off_t filesize)\n{\n  Pluginobj* obj = NULL;\n\n  parameters_force_valid_target();\n  const Target& target(parameters->target());\n\n  if (target.get_size() == 32)\n    {\n      if (target.is_big_endian())\n#ifdef HAVE_TARGET_32_BIG\n        obj = new Sized_pluginobj<32, true>(input_file->filename(),\n                                            input_file, offset, filesize);\n#else\n        gold_error(_(\"%s: not configured to support \"\n\t\t     \"32-bit big-endian object\"),\n\t\t   input_file->filename().c_str());\n#endif\n      else\n#ifdef HAVE_TARGET_32_LITTLE\n        obj = new Sized_pluginobj<32, false>(input_file->filename(),\n                                             input_file, offset, filesize);\n#else\n        gold_error(_(\"%s: not configured to support \"\n\t\t     \"32-bit little-endian object\"),\n\t\t   input_file->filename().c_str());\n#endif\n    }\n  else if (target.get_size() == 64)\n    {\n      if (target.is_big_endian())\n#ifdef HAVE_TARGET_64_BIG\n        obj = new Sized_pluginobj<64, true>(input_file->filename(),\n                                            input_file, offset, filesize);\n#else\n        gold_error(_(\"%s: not configured to support \"\n\t\t     \"64-bit big-endian object\"),\n\t\t   input_file->filename().c_str());\n#endif\n      else\n#ifdef HAVE_TARGET_64_LITTLE\n        obj = new Sized_pluginobj<64, false>(input_file->filename(),\n                                             input_file, offset, filesize);\n#else\n        gold_error(_(\"%s: not configured to support \"\n\t\t     \"64-bit little-endian object\"),\n\t\t   input_file->filename().c_str());\n#endif\n    }\n\n  gold_assert(obj != NULL);\n  return obj;\n}\n\n} // End namespace gold.\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/po/gold.pot": "# SOME DESCRIPTIVE TITLE.\n# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER\n# This file is distributed under the same license as the PACKAGE package.\n# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\n#\n#, fuzzy\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: bug-binutils@gnu.org\\n\"\n\"POT-Creation-Date: 2010-03-03 15:08+0100\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=CHARSET\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\n#: archive.cc:119\n#, c-format\nmsgid \"%s: no archive symbol table (run ranlib)\"\nmsgstr \"\"\n\n#: archive.cc:204\n#, c-format\nmsgid \"%s: bad archive symbol table names\"\nmsgstr \"\"\n\n#: archive.cc:236\n#, c-format\nmsgid \"%s: malformed archive header at %zu\"\nmsgstr \"\"\n\n#: archive.cc:256\n#, c-format\nmsgid \"%s: malformed archive header size at %zu\"\nmsgstr \"\"\n\n#: archive.cc:267\n#, c-format\nmsgid \"%s: malformed archive header name at %zu\"\nmsgstr \"\"\n\n#: archive.cc:297\n#, c-format\nmsgid \"%s: bad extended name index at %zu\"\nmsgstr \"\"\n\n#: archive.cc:307\n#, c-format\nmsgid \"%s: bad extended name entry at header %zu\"\nmsgstr \"\"\n\n#: archive.cc:404\n#, c-format\nmsgid \"%s: short archive header at %zu\"\nmsgstr \"\"\n\n#: archive.cc:560\n#, c-format\nmsgid \"%s: member at %zu is not an ELF object\"\nmsgstr \"\"\n\n#: archive.cc:879\n#, c-format\nmsgid \"%s: archive libraries: %u\\n\"\nmsgstr \"\"\n\n#: archive.cc:881\n#, c-format\nmsgid \"%s: total archive members: %u\\n\"\nmsgstr \"\"\n\n#: archive.cc:883\n#, c-format\nmsgid \"%s: loaded archive members: %u\\n\"\nmsgstr \"\"\n\n#: arm.cc:1149 i386.cc:536 sparc.cc:1087 x86_64.cc:565\nmsgid \"** PLT\"\nmsgstr \"\"\n\n#: arm.cc:1364 i386.cc:880 powerpc.cc:1014 sparc.cc:1502 x86_64.cc:955\n#: x86_64.cc:1265\n#, c-format\nmsgid \"%s: unsupported reloc %u against local symbol\"\nmsgstr \"\"\n\n#: arm.cc:1404 powerpc.cc:1105 sparc.cc:1592 x86_64.cc:992\nmsgid \"requires unsupported dynamic reloc; recompile with -fPIC\"\nmsgstr \"\"\n\n#. These are relocations which should only be seen by the\n#. dynamic linker, and should never be seen here.\n#: arm.cc:1519 arm.cc:1739 arm.cc:2354 i386.cc:1002 i386.cc:1334\n#: powerpc.cc:1223 powerpc.cc:1432 sparc.cc:1877 sparc.cc:2238 x86_64.cc:1145\n#: x86_64.cc:1453\n#, c-format\nmsgid \"%s: unexpected reloc %u in object file\"\nmsgstr \"\"\n\n#: arm.cc:1538 i386.cc:1171 powerpc.cc:1242 sparc.cc:1896 x86_64.cc:1279\n#: x86_64.cc:1571\n#, c-format\nmsgid \"%s: unsupported reloc %u against global symbol %s\"\nmsgstr \"\"\n\n#: arm.cc:1804 i386.cc:1542\n#, c-format\nmsgid \"%s: unsupported RELA reloc section\"\nmsgstr \"\"\n\n#: arm.cc:2047\nmsgid \"\"\n\"relocation R_ARM_MOVW_ABS_NC cannot be used when makinga shared object; \"\n\"recompile with -fPIC\"\nmsgstr \"\"\n\n#: arm.cc:2056\nmsgid \"\"\n\"relocation R_ARM_MOVT_ABS cannot be used when makinga shared object; \"\n\"recompile with -fPIC\"\nmsgstr \"\"\n\n#: arm.cc:2067\nmsgid \"\"\n\"relocation R_ARM_THM_MOVW_ABS_NC cannot be used whenmaking a shared object; \"\n\"recompile with -fPIC\"\nmsgstr \"\"\n\n#: arm.cc:2077\nmsgid \"\"\n\"relocation R_ARM_THM_MOVT_ABS cannot be used whenmaking a shared object; \"\n\"recompile with -fPIC\"\nmsgstr \"\"\n\n#: arm.cc:2141\nmsgid \"cannot find origin of R_ARM_BASE_PREL\"\nmsgstr \"\"\n\n#: arm.cc:2169\nmsgid \"cannot find origin of R_ARM_BASE_ABS\"\nmsgstr \"\"\n\n#: arm.cc:2230 i386.cc:1820 i386.cc:2521 powerpc.cc:1798 sparc.cc:2711\n#: x86_64.cc:1935 x86_64.cc:2518\n#, c-format\nmsgid \"unexpected reloc %u in object file\"\nmsgstr \"\"\n\n#: arm.cc:2236 i386.cc:1852 i386.cc:1931 i386.cc:1983 i386.cc:2014\n#: i386.cc:2076 powerpc.cc:1804 sparc.cc:2717 sparc.cc:2900 sparc.cc:2961\n#: sparc.cc:3068 x86_64.cc:1956 x86_64.cc:2039 x86_64.cc:2094 x86_64.cc:2119\n#, c-format\nmsgid \"unsupported reloc %u\"\nmsgstr \"\"\n\n#: arm.cc:2248\n#, c-format\nmsgid \"relocation overflow in relocation %u\"\nmsgstr \"\"\n\n#: arm.cc:2256\n#, c-format\nmsgid \"unexpected opcode while processing relocation %u\"\nmsgstr \"\"\n\n#: arm.cc:2359 i386.cc:2535\n#, c-format\nmsgid \"unsupported reloc %u in object file\"\nmsgstr \"\"\n\n#: binary.cc:129\n#, c-format\nmsgid \"cannot open %s: %s:\"\nmsgstr \"\"\n\n#: compressed_output.cc:128\nmsgid \"not compressing section data: zlib error\"\nmsgstr \"\"\n\n#: cref.cc:244\n#, c-format\nmsgid \"cannot open symbol count file %s: %s\"\nmsgstr \"\"\n\n#: descriptors.cc:116\n#, c-format\nmsgid \"file %s was removed during the link\"\nmsgstr \"\"\n\n#: descriptors.cc:169\nmsgid \"out of file descriptors and couldn't close any\"\nmsgstr \"\"\n\n#: descriptors.cc:190 descriptors.cc:226\n#, c-format\nmsgid \"while closing %s: %s\"\nmsgstr \"\"\n\n#: dirsearch.cc:71\n#, c-format\nmsgid \"%s: can not read directory: %s\"\nmsgstr \"\"\n\n#: dwarf_reader.cc:53 dwarf_reader.cc:84\nmsgid \"Unusually large LEB128 decoded, debug information may be corrupted\"\nmsgstr \"\"\n\n#: dynobj.cc:164\n#, c-format\nmsgid \"unexpected duplicate type %u section: %u, %u\"\nmsgstr \"\"\n\n#: dynobj.cc:200\n#, c-format\nmsgid \"unexpected link in section %u header: %u != %u\"\nmsgstr \"\"\n\n#: dynobj.cc:236\n#, c-format\nmsgid \"DYNAMIC section %u link out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:244\n#, c-format\nmsgid \"DYNAMIC section %u link %u is not a strtab\"\nmsgstr \"\"\n\n#: dynobj.cc:273\n#, c-format\nmsgid \"DT_SONAME value out of range: %lld >= %lld\"\nmsgstr \"\"\n\n#: dynobj.cc:285\n#, c-format\nmsgid \"DT_NEEDED value out of range: %lld >= %lld\"\nmsgstr \"\"\n\n#: dynobj.cc:298\nmsgid \"missing DT_NULL in dynamic segment\"\nmsgstr \"\"\n\n#: dynobj.cc:344\n#, c-format\nmsgid \"invalid dynamic symbol table name index: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:351\n#, c-format\nmsgid \"dynamic symbol table name section has wrong type: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:438 object.cc:463 object.cc:1106\n#, c-format\nmsgid \"bad section name offset for section %u: %lu\"\nmsgstr \"\"\n\n#: dynobj.cc:468\n#, c-format\nmsgid \"duplicate definition for version %u\"\nmsgstr \"\"\n\n#: dynobj.cc:497\n#, c-format\nmsgid \"unexpected verdef version %u\"\nmsgstr \"\"\n\n#: dynobj.cc:513\n#, c-format\nmsgid \"verdef vd_cnt field too small: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:521\n#, c-format\nmsgid \"verdef vd_aux field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:532\n#, c-format\nmsgid \"verdaux vda_name field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:542\n#, c-format\nmsgid \"verdef vd_next field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:576\n#, c-format\nmsgid \"unexpected verneed version %u\"\nmsgstr \"\"\n\n#: dynobj.cc:585\n#, c-format\nmsgid \"verneed vn_aux field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:599\n#, c-format\nmsgid \"vernaux vna_name field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:610\n#, c-format\nmsgid \"verneed vna_next field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:621\n#, c-format\nmsgid \"verneed vn_next field out of range: %u\"\nmsgstr \"\"\n\n#: dynobj.cc:670\nmsgid \"size of dynamic symbols is not multiple of symbol size\"\nmsgstr \"\"\n\n#: dynobj.cc:1435\n#, c-format\nmsgid \"symbol %s has undefined version %s\"\nmsgstr \"\"\n\n#: ehframe.h:82\nmsgid \"** eh_frame_hdr\"\nmsgstr \"\"\n\n#: ehframe.h:353\nmsgid \"** eh_frame\"\nmsgstr \"\"\n\n#: errors.cc:81\n#, c-format\nmsgid \"%s: fatal error: \"\nmsgstr \"\"\n\n#: errors.cc:92\n#, c-format\nmsgid \"%s: error: \"\nmsgstr \"\"\n\n#: errors.cc:104\n#, c-format\nmsgid \"%s: warning: \"\nmsgstr \"\"\n\n#: errors.cc:128\n#, c-format\nmsgid \"%s: %s: error: \"\nmsgstr \"\"\n\n#: errors.cc:144\n#, c-format\nmsgid \"%s: %s: warning: \"\nmsgstr \"\"\n\n#: errors.cc:167\n#, c-format\nmsgid \"%s: %s: error: undefined reference to '%s'\\n\"\nmsgstr \"\"\n\n#: errors.cc:172\n#, c-format\nmsgid \"%s: %s: error: undefined reference to '%s', version '%s'\\n\"\nmsgstr \"\"\n\n#: errors.cc:182\n#, c-format\nmsgid \"%s: \"\nmsgstr \"\"\n\n#: expression.cc:172\n#, c-format\nmsgid \"undefined symbol '%s' referenced in expression\"\nmsgstr \"\"\n\n#: expression.cc:209\nmsgid \"invalid reference to dot symbol outside of SECTIONS clause\"\nmsgstr \"\"\n\n#. Handle unary operators.  We use a preprocessor macro as a hack to\n#. capture the C operator.\n#: expression.cc:278\nmsgid \"unary \"\nmsgstr \"\"\n\n#. Handle binary operators.  We use a preprocessor macro as a hack to\n#. capture the C operator.  KEEP_LEFT means that if the left operand\n#. is section relative and the right operand is not, the result uses\n#. the same section as the left operand.  KEEP_RIGHT is the same with\n#. left and right swapped.  IS_DIV means that we need to give an error\n#. if the right operand is zero.  WARN means that we should warn if\n#. used on section relative values in a relocatable link.  We always\n#. warn if used on values in different sections in a relocatable link.\n#: expression.cc:400\nmsgid \"binary \"\nmsgstr \"\"\n\n#: expression.cc:404\nmsgid \" by zero\"\nmsgstr \"\"\n\n#: expression.cc:575\nmsgid \"max applied to section relative value\"\nmsgstr \"\"\n\n#: expression.cc:610\nmsgid \"min applied to section relative value\"\nmsgstr \"\"\n\n#: expression.cc:740\nmsgid \"aligning to section relative value\"\nmsgstr \"\"\n\n#: expression.cc:895\n#, c-format\nmsgid \"unknown constant %s\"\nmsgstr \"\"\n\n#: expression.cc:1126\nmsgid \"SEGMENT_START not implemented\"\nmsgstr \"\"\n\n#: expression.cc:1135\nmsgid \"ORIGIN not implemented\"\nmsgstr \"\"\n\n#: expression.cc:1141\nmsgid \"LENGTH not implemented\"\nmsgstr \"\"\n\n#: fileread.cc:65\n#, c-format\nmsgid \"munmap failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:129\n#, c-format\nmsgid \"%s: fstat failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:169\n#, c-format\nmsgid \"could not reopen file %s\"\nmsgstr \"\"\n\n#: fileread.cc:302\n#, c-format\nmsgid \"%s: pread failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:308\n#, c-format\nmsgid \"%s: file too short: read only %lld of %lld bytes at %lld\"\nmsgstr \"\"\n\n#: fileread.cc:372\n#, c-format\nmsgid \"\"\n\"%s: attempt to map %lld bytes at offset %lld exceeds size of file; the file \"\n\"may be corrupt\"\nmsgstr \"\"\n\n#: fileread.cc:402\n#, c-format\nmsgid \"%s: mmap offset %lld size %lld failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:548\n#, c-format\nmsgid \"%s: lseek failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:554\n#, c-format\nmsgid \"%s: readv failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:557\n#, c-format\nmsgid \"%s: file too short: read only %zd of %zd bytes at %lld\"\nmsgstr \"\"\n\n#: fileread.cc:706\n#, c-format\nmsgid \"%s: total bytes mapped for read: %llu\\n\"\nmsgstr \"\"\n\n#: fileread.cc:708\n#, c-format\nmsgid \"%s: maximum bytes mapped for read at one time: %llu\\n\"\nmsgstr \"\"\n\n#: fileread.cc:791\n#, c-format\nmsgid \"%s: stat failed: %s\"\nmsgstr \"\"\n\n#: fileread.cc:849\n#, c-format\nmsgid \"cannot find %s%s\"\nmsgstr \"\"\n\n#: fileread.cc:880\n#, c-format\nmsgid \"cannot find %s\"\nmsgstr \"\"\n\n#: fileread.cc:904\n#, c-format\nmsgid \"cannot open %s: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:103\n#, c-format\nmsgid \"pthead_mutextattr_init failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:107\n#, c-format\nmsgid \"pthread_mutextattr_settype failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:112\n#, c-format\nmsgid \"pthread_mutex_init failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:116\n#, c-format\nmsgid \"pthread_mutexattr_destroy failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:123\n#, c-format\nmsgid \"pthread_mutex_destroy failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:131 gold-threads.cc:382\n#, c-format\nmsgid \"pthread_mutex_lock failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:139 gold-threads.cc:394\n#, c-format\nmsgid \"pthread_mutex_unlock failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:220\n#, c-format\nmsgid \"pthread_cond_init failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:227\n#, c-format\nmsgid \"pthread_cond_destroy failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:236\n#, c-format\nmsgid \"pthread_cond_wait failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:244\n#, c-format\nmsgid \"pthread_cond_signal failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:252\n#, c-format\nmsgid \"pthread_cond_broadcast failed: %s\"\nmsgstr \"\"\n\n#: gold-threads.cc:388\n#, c-format\nmsgid \"pthread_once failed: %s\"\nmsgstr \"\"\n\n#: gold.cc:91\n#, c-format\nmsgid \"%s: internal error in %s, at %s:%d\\n\"\nmsgstr \"\"\n\n#: gold.cc:173\nmsgid \"no input files\"\nmsgstr \"\"\n\n#: gold.cc:226\nmsgid \"cannot mix -r with --gc-sections or --icf\"\nmsgstr \"\"\n\n#: gold.cc:407\n#, c-format\nmsgid \"cannot mix -static with dynamic object %s\"\nmsgstr \"\"\n\n#: gold.cc:411\n#, c-format\nmsgid \"cannot mix -r with dynamic object %s\"\nmsgstr \"\"\n\n#: gold.cc:415\n#, c-format\nmsgid \"cannot use non-ELF output format with dynamic object %s\"\nmsgstr \"\"\n\n#: gold.cc:427\n#, c-format\nmsgid \"cannot mix split-stack '%s' and non-split-stack '%s' when using -r\"\nmsgstr \"\"\n\n#. FIXME: This needs to specify the location somehow.\n#: i386.cc:232 i386.cc:1669 sparc.cc:234 sparc.cc:2395 x86_64.cc:237\n#: x86_64.cc:1732\nmsgid \"missing expected TLS relocation\"\nmsgstr \"\"\n\n#: i386.cc:944 x86_64.cc:1068\n#, c-format\nmsgid \"section symbol %u has bad shndx %u\"\nmsgstr \"\"\n\n#: i386.cc:1036 i386.cc:1060 sparc.cc:1777 x86_64.cc:1176 x86_64.cc:1204\n#, c-format\nmsgid \"local symbol %u has bad shndx %u\"\nmsgstr \"\"\n\n#: i386.cc:1991\nmsgid \"both SUN and GNU model TLS relocations\"\nmsgstr \"\"\n\n#: i386.cc:2730 x86_64.cc:2719\n#, c-format\nmsgid \"failed to match split-stack sequence at section %u offset %0zx\"\nmsgstr \"\"\n\n#: icf.cc:616\n#, c-format\nmsgid \"%s: ICF Converged after %u iteration(s)\"\nmsgstr \"\"\n\n#: icf.cc:619\n#, c-format\nmsgid \"%s: ICF stopped after %u iteration(s)\"\nmsgstr \"\"\n\n#: icf.cc:633\n#, c-format\nmsgid \"Could not find symbol %s to unfold\\n\"\nmsgstr \"\"\n\n#: incremental.cc:242\n#, c-format\nmsgid \"the link might take longer: cannot perform incremental link: %s\"\nmsgstr \"\"\n\n#: incremental.cc:302\nmsgid \"no incremental data from previous build\"\nmsgstr \"\"\n\n#: incremental.cc:309 incremental.cc:332\nmsgid \"invalid incremental build data\"\nmsgstr \"\"\n\n#: incremental.cc:321\nmsgid \"different version of incremental build data\"\nmsgstr \"\"\n\n#: incremental.cc:338\nmsgid \"command line changed\"\nmsgstr \"\"\n\n#: incremental.cc:362\n#, c-format\nmsgid \"unsupported ELF machine number %d\"\nmsgstr \"\"\n\n#: incremental.cc:387\nmsgid \"output is not an ELF file.\"\nmsgstr \"\"\n\n#: incremental.cc:410\nmsgid \"unsupported file: 32-bit, big-endian\"\nmsgstr \"\"\n\n#: incremental.cc:419\nmsgid \"unsupported file: 32-bit, little-endian\"\nmsgstr \"\"\n\n#: incremental.cc:431\nmsgid \"unsupported file: 64-bit, big-endian\"\nmsgstr \"\"\n\n#: incremental.cc:440\nmsgid \"unsupported file: 64-bit, little-endian\"\nmsgstr \"\"\n\n#: layout.cc:1887\n#, c-format\nmsgid \"--build-id=uuid failed: could not open /dev/urandom: %s\"\nmsgstr \"\"\n\n#: layout.cc:1894\n#, c-format\nmsgid \"/dev/urandom: read failed: %s\"\nmsgstr \"\"\n\n#: layout.cc:1896\n#, c-format\nmsgid \"/dev/urandom: expected %zu bytes, got %zd bytes\"\nmsgstr \"\"\n\n#: layout.cc:1918\n#, c-format\nmsgid \"--build-id argument '%s' not a valid hex number\"\nmsgstr \"\"\n\n#: layout.cc:1924\n#, c-format\nmsgid \"unrecognized --build-id argument '%s'\"\nmsgstr \"\"\n\n#: layout.cc:2337\n#, c-format\nmsgid \"load segment overlap [0x%llx -> 0x%llx] and [0x%llx -> 0x%llx]\"\nmsgstr \"\"\n\n#: mapfile.cc:70\n#, c-format\nmsgid \"cannot open map file %s: %s\"\nmsgstr \"\"\n\n#: mapfile.cc:84\n#, c-format\nmsgid \"cannot close map file: %s\"\nmsgstr \"\"\n\n#: mapfile.cc:116\n#, c-format\nmsgid \"\"\n\"Archive member included because of file (symbol)\\n\"\n\"\\n\"\nmsgstr \"\"\n\n#: mapfile.cc:159\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Allocating common symbols\\n\"\nmsgstr \"\"\n\n#: mapfile.cc:161\n#, c-format\nmsgid \"\"\n\"Common symbol       size              file\\n\"\n\"\\n\"\nmsgstr \"\"\n\n#: mapfile.cc:195\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Memory map\\n\"\n\"\\n\"\nmsgstr \"\"\n\n#: mapfile.cc:361\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Discarded input sections\\n\"\n\"\\n\"\nmsgstr \"\"\n\n#: merge.cc:455\n#, c-format\nmsgid \"%s: %s merged constants size: %lu; input: %zu; output: %zu\\n\"\nmsgstr \"\"\n\n#: merge.cc:478\nmsgid \"mergeable string section length not multiple of character size\"\nmsgstr \"\"\n\n#: merge.cc:494\n#, c-format\nmsgid \"%s: last entry in mergeable string section '%s' not null terminated\"\nmsgstr \"\"\n\n#: merge.cc:613\n#, c-format\nmsgid \"%s: %s input: %zu\\n\"\nmsgstr \"\"\n\n#: merge.h:300\nmsgid \"** merge constants\"\nmsgstr \"\"\n\n#: merge.h:422\nmsgid \"** merge strings\"\nmsgstr \"\"\n\n#: object.cc:75\nmsgid \"missing SHT_SYMTAB_SHNDX section\"\nmsgstr \"\"\n\n#: object.cc:119\n#, c-format\nmsgid \"symbol %u out of range for SHT_SYMTAB_SHNDX section\"\nmsgstr \"\"\n\n#: object.cc:126\n#, c-format\nmsgid \"extended index for symbol %u out of range: %u\"\nmsgstr \"\"\n\n#: object.cc:148 object.cc:2331 output.cc:4052\n#, c-format\nmsgid \"%s: %s\"\nmsgstr \"\"\n\n#: object.cc:190\n#, c-format\nmsgid \"section name section has wrong type: %u\"\nmsgstr \"\"\n\n#: object.cc:546\n#, c-format\nmsgid \"invalid symbol table name index: %u\"\nmsgstr \"\"\n\n#: object.cc:552\n#, c-format\nmsgid \"symbol table name section has wrong type: %u\"\nmsgstr \"\"\n\n#: object.cc:641\n#, c-format\nmsgid \"section group %u info %u out of range\"\nmsgstr \"\"\n\n#: object.cc:660\n#, c-format\nmsgid \"symbol %u name offset %u out of range\"\nmsgstr \"\"\n\n#: object.cc:678\n#, c-format\nmsgid \"symbol %u invalid section index %u\"\nmsgstr \"\"\n\n#: object.cc:723\n#, c-format\nmsgid \"section %u in section group %u out of range\"\nmsgstr \"\"\n\n#: object.cc:731\n#, c-format\nmsgid \"invalid section group %u refers to earlier section %u\"\nmsgstr \"\"\n\n#: object.cc:1037 reloc.cc:271 reloc.cc:838\n#, c-format\nmsgid \"relocation section %u has bad info %u\"\nmsgstr \"\"\n\n#: object.cc:1231\n#, c-format\nmsgid \"%s: removing unused section from '%s' in file '%s'\"\nmsgstr \"\"\n\n#: object.cc:1257\n#, c-format\nmsgid \"%s: ICF folding section '%s' in file '%s'into '%s' in file '%s'\"\nmsgstr \"\"\n\n#: object.cc:1454\nmsgid \"size of symbols is not multiple of symbol size\"\nmsgstr \"\"\n\n#: object.cc:1563\n#, c-format\nmsgid \"local symbol %u section name out of range: %u >= %u\"\nmsgstr \"\"\n\n#: object.cc:1652\n#, c-format\nmsgid \"unknown section index %u for local symbol %u\"\nmsgstr \"\"\n\n#: object.cc:1661\n#, c-format\nmsgid \"local symbol %u section index %u out of range\"\nmsgstr \"\"\n\n#: object.cc:2169\n#, c-format\nmsgid \"%s is not supported but is required for %s in %s\"\nmsgstr \"\"\n\n#: object.cc:2273\n#, c-format\nmsgid \"%s: unsupported ELF machine number %d\"\nmsgstr \"\"\n\n#: object.cc:2283\n#, c-format\nmsgid \"%s: incompatible target\"\nmsgstr \"\"\n\n#: object.cc:2347 plugin.cc:1019\n#, c-format\nmsgid \"%s: not configured to support 32-bit big-endian object\"\nmsgstr \"\"\n\n#: object.cc:2363 plugin.cc:1028\n#, c-format\nmsgid \"%s: not configured to support 32-bit little-endian object\"\nmsgstr \"\"\n\n#: object.cc:2382 plugin.cc:1040\n#, c-format\nmsgid \"%s: not configured to support 64-bit big-endian object\"\nmsgstr \"\"\n\n#: object.cc:2398 plugin.cc:1049\n#, c-format\nmsgid \"%s: not configured to support 64-bit little-endian object\"\nmsgstr \"\"\n\n#: options.cc:156\n#, c-format\nmsgid \"\"\n\"Usage: %s [options] file...\\n\"\n\"Options:\\n\"\nmsgstr \"\"\n\n#. config.guess and libtool.m4 look in ld --help output for the\n#. string \"supported targets\".\n#: options.cc:164\n#, c-format\nmsgid \"%s: supported targets:\"\nmsgstr \"\"\n\n#: options.cc:176\n#, c-format\nmsgid \"Report bugs to %s\\n\"\nmsgstr \"\"\n\n#: options.cc:193 options.cc:203 options.cc:213\n#, c-format\nmsgid \"%s: invalid option value (expected an integer): %s\"\nmsgstr \"\"\n\n#: options.cc:223\n#, c-format\nmsgid \"%s: invalid option value (expected a floating point number): %s\"\nmsgstr \"\"\n\n#: options.cc:232\n#, c-format\nmsgid \"%s: must take a non-empty argument\"\nmsgstr \"\"\n\n#: options.cc:273\n#, c-format\nmsgid \"%s: must take one of the following arguments: %s\"\nmsgstr \"\"\n\n#: options.cc:300\n#, c-format\nmsgid \"  Supported targets:\\n\"\nmsgstr \"\"\n\n#: options.cc:409\n#, c-format\nmsgid \"unable to parse script file %s\"\nmsgstr \"\"\n\n#: options.cc:417\n#, c-format\nmsgid \"unable to parse version script file %s\"\nmsgstr \"\"\n\n#: options.cc:425\n#, c-format\nmsgid \"unable to parse dynamic-list script file %s\"\nmsgstr \"\"\n\n#: options.cc:522\n#, c-format\nmsgid \"\"\n\"format '%s' not supported; treating as elf (supported formats: elf, binary)\"\nmsgstr \"\"\n\n#: options.cc:538\n#, c-format\nmsgid \"%s: use the --help option for usage information\\n\"\nmsgstr \"\"\n\n#: options.cc:547\n#, c-format\nmsgid \"%s: %s: %s\\n\"\nmsgstr \"\"\n\n#: options.cc:651\nmsgid \"unexpected argument\"\nmsgstr \"\"\n\n#: options.cc:664 options.cc:725\nmsgid \"missing argument\"\nmsgstr \"\"\n\n#: options.cc:736\nmsgid \"unknown -z option\"\nmsgstr \"\"\n\n#: options.cc:935\n#, c-format\nmsgid \"ignoring --threads: %s was compiled without thread support\"\nmsgstr \"\"\n\n#: options.cc:942\n#, c-format\nmsgid \"ignoring --thread-count: %s was compiled without thread support\"\nmsgstr \"\"\n\n#: options.cc:981\n#, c-format\nmsgid \"unable to open -retain-symbols-file file %s: %s\"\nmsgstr \"\"\n\n#: options.cc:1003\nmsgid \"-shared and -static are incompatible\"\nmsgstr \"\"\n\n#: options.cc:1005\nmsgid \"-shared and -pie are incompatible\"\nmsgstr \"\"\n\n#: options.cc:1008\nmsgid \"-shared and -r are incompatible\"\nmsgstr \"\"\n\n#: options.cc:1010\nmsgid \"-pie and -r are incompatible\"\nmsgstr \"\"\n\n#: options.cc:1014\nmsgid \"-retain-symbols-file does not yet work with -r\"\nmsgstr \"\"\n\n#: options.cc:1020\nmsgid \"binary output format not compatible with -shared or -pie or -r\"\nmsgstr \"\"\n\n#: options.cc:1026\n#, c-format\nmsgid \"--hash-bucket-empty-fraction value %g out of range [0.0, 1.0)\"\nmsgstr \"\"\n\n#: options.cc:1031\nmsgid \"\"\n\"Options --incremental-changed, --incremental-unchanged, --incremental-\"\n\"unknown require the use of --incremental\"\nmsgstr \"\"\n\n#: options.cc:1097\nmsgid \"May not nest groups\"\nmsgstr \"\"\n\n#: options.cc:1109\nmsgid \"Group end without group start\"\nmsgstr \"\"\n\n#. I guess it's neither a long option nor a short option.\n#: options.cc:1174\nmsgid \"unknown option\"\nmsgstr \"\"\n\n#: options.cc:1201\n#, c-format\nmsgid \"%s: missing group end\\n\"\nmsgstr \"\"\n\n#: options.h:571\nmsgid \"Report usage information\"\nmsgstr \"\"\n\n#: options.h:573\nmsgid \"Report version information\"\nmsgstr \"\"\n\n#: options.h:575\nmsgid \"Report version and target information\"\nmsgstr \"\"\n\n#: options.h:584 options.h:635\nmsgid \"Not supported\"\nmsgstr \"\"\n\n#: options.h:585 options.h:636\nmsgid \"Do not copy DT_NEEDED tags from shared libraries\"\nmsgstr \"\"\n\n#: options.h:588\nmsgid \"Allow unresolved references in shared libraries\"\nmsgstr \"\"\n\n#: options.h:589\nmsgid \"Do not allow unresolved references in shared libraries\"\nmsgstr \"\"\n\n#: options.h:592\nmsgid \"Only set DT_NEEDED for shared libraries if used\"\nmsgstr \"\"\n\n#: options.h:593\nmsgid \"Always DT_NEEDED for shared libraries\"\nmsgstr \"\"\n\n#: options.h:600\nmsgid \"Set input format\"\nmsgstr \"\"\n\n#: options.h:603\nmsgid \"-l searches for shared libraries\"\nmsgstr \"\"\n\n#: options.h:605\nmsgid \"-l does not search for shared libraries\"\nmsgstr \"\"\n\n#: options.h:609\nmsgid \"Bind defined symbols locally\"\nmsgstr \"\"\n\n#: options.h:612\nmsgid \"Bind defined function symbols locally\"\nmsgstr \"\"\n\n#: options.h:615\nmsgid \"Generate build ID note\"\nmsgstr \"\"\n\n#: options.h:616 options.h:655\nmsgid \"[=STYLE]\"\nmsgstr \"\"\n\n#: options.h:619\nmsgid \"Check segment addresses for overlaps (default)\"\nmsgstr \"\"\n\n#: options.h:620\nmsgid \"Do not check segment addresses for overlaps\"\nmsgstr \"\"\n\n#: options.h:624 options.h:629\nmsgid \"Compress .debug_* sections in the output file\"\nmsgstr \"\"\n\n#: options.h:630\nmsgid \"[none]\"\nmsgstr \"\"\n\n#: options.h:639\nmsgid \"Define common symbols\"\nmsgstr \"\"\n\n#: options.h:640\nmsgid \"Do not define common symbols\"\nmsgstr \"\"\n\n#: options.h:642 options.h:644\nmsgid \"Alias for -d\"\nmsgstr \"\"\n\n#: options.h:647\nmsgid \"Turn on debugging\"\nmsgstr \"\"\n\n#: options.h:648\nmsgid \"[all,files,script,task][,...]\"\nmsgstr \"\"\n\n#: options.h:651\nmsgid \"Define a symbol\"\nmsgstr \"\"\n\n#: options.h:651\nmsgid \"SYMBOL=EXPRESSION\"\nmsgstr \"\"\n\n#: options.h:654\nmsgid \"Demangle C++ symbols in log messages\"\nmsgstr \"\"\n\n#: options.h:658\nmsgid \"Do not demangle C++ symbols in log messages\"\nmsgstr \"\"\n\n#: options.h:662\nmsgid \"Try to detect violations of the One Definition Rule\"\nmsgstr \"\"\n\n#: options.h:666\nmsgid \"Delete all temporary local symbols\"\nmsgstr \"\"\n\n#: options.h:669\nmsgid \"Add data symbols to dynamic symbols\"\nmsgstr \"\"\n\n#: options.h:672\nmsgid \"Add C++ operator new/delete to dynamic symbols\"\nmsgstr \"\"\n\n#: options.h:675\nmsgid \"Add C++ typeinfo to dynamic symbols\"\nmsgstr \"\"\n\n#: options.h:678\nmsgid \"Read a list of dynamic symbols\"\nmsgstr \"\"\n\n#: options.h:678 options.h:732 options.h:766 options.h:893 options.h:921\nmsgid \"FILE\"\nmsgstr \"\"\n\n#: options.h:681\nmsgid \"Set program start address\"\nmsgstr \"\"\n\n#: options.h:681 options.h:908 options.h:910 options.h:912\nmsgid \"ADDRESS\"\nmsgstr \"\"\n\n#: options.h:684\nmsgid \"Exclude libraries from automatic export\"\nmsgstr \"\"\n\n#: options.h:688\nmsgid \"Export all dynamic symbols\"\nmsgstr \"\"\n\n#: options.h:689\nmsgid \"Do not export all dynamic symbols (default)\"\nmsgstr \"\"\n\n#: options.h:692\nmsgid \"Create exception frame header\"\nmsgstr \"\"\n\n#: options.h:695\nmsgid \"Treat warnings as errors\"\nmsgstr \"\"\n\n#: options.h:696\nmsgid \"Do not treat warnings as errors\"\nmsgstr \"\"\n\n#: options.h:699\nmsgid \"Call SYMBOL at unload-time\"\nmsgstr \"\"\n\n#: options.h:699 options.h:729 options.h:873 options.h:915 options.h:936\n#: options.h:939\nmsgid \"SYMBOL\"\nmsgstr \"\"\n\n#: options.h:702\nmsgid \"Set shared library name\"\nmsgstr \"\"\n\n#: options.h:702 options.h:792\nmsgid \"FILENAME\"\nmsgstr \"\"\n\n#: options.h:705\nmsgid \"Min fraction of empty buckets in dynamic hash\"\nmsgstr \"\"\n\n#: options.h:706\nmsgid \"FRACTION\"\nmsgstr \"\"\n\n#: options.h:709\nmsgid \"Dynamic hash style\"\nmsgstr \"\"\n\n#: options.h:709\nmsgid \"[sysv,gnu,both]\"\nmsgstr \"\"\n\n#: options.h:713\nmsgid \"Set dynamic linker path\"\nmsgstr \"\"\n\n#: options.h:713\nmsgid \"PROGRAM\"\nmsgstr \"\"\n\n#: options.h:716\nmsgid \"Work in progress; do not use\"\nmsgstr \"\"\n\n#: options.h:717\nmsgid \"Do a full build\"\nmsgstr \"\"\n\n#: options.h:720\nmsgid \"Assume files changed\"\nmsgstr \"\"\n\n#: options.h:723\nmsgid \"Assume files didn't change\"\nmsgstr \"\"\n\n#: options.h:726\nmsgid \"Use timestamps to check files (default)\"\nmsgstr \"\"\n\n#: options.h:729\nmsgid \"Call SYMBOL at load-time\"\nmsgstr \"\"\n\n#: options.h:732\nmsgid \"Read only symbol values from FILE\"\nmsgstr \"\"\n\n#: options.h:735\nmsgid \"Search for library LIBNAME\"\nmsgstr \"\"\n\n#: options.h:735\nmsgid \"LIBNAME\"\nmsgstr \"\"\n\n#: options.h:738\nmsgid \"Add directory to search path\"\nmsgstr \"\"\n\n#: options.h:738 options.h:813 options.h:816 options.h:820 options.h:887\nmsgid \"DIR\"\nmsgstr \"\"\n\n#: options.h:741\nmsgid \"Ignored for compatibility\"\nmsgstr \"\"\n\n#: options.h:741\nmsgid \"EMULATION\"\nmsgstr \"\"\n\n#: options.h:744\nmsgid \"Write map file on standard output\"\nmsgstr \"\"\n\n#: options.h:745\nmsgid \"Write map file\"\nmsgstr \"\"\n\n#: options.h:746\nmsgid \"MAPFILENAME\"\nmsgstr \"\"\n\n#: options.h:749\nmsgid \"Do not page align data\"\nmsgstr \"\"\n\n#: options.h:751\nmsgid \"Do not page align data, do not make text readonly\"\nmsgstr \"\"\n\n#: options.h:752\nmsgid \"Page align data, make text readonly\"\nmsgstr \"\"\n\n#: options.h:755\nmsgid \"Enable use of DT_RUNPATH and DT_FLAGS\"\nmsgstr \"\"\n\n#: options.h:756\nmsgid \"Disable use of DT_RUNPATH and DT_FLAGS\"\nmsgstr \"\"\n\n#: options.h:759\nmsgid \"Create an output file even if errors occur\"\nmsgstr \"\"\n\n#: options.h:762 options.h:958\nmsgid \"Report undefined symbols (even with --shared)\"\nmsgstr \"\"\n\n#: options.h:766\nmsgid \"Set output file name\"\nmsgstr \"\"\n\n#: options.h:769\nmsgid \"Optimize output file size\"\nmsgstr \"\"\n\n#: options.h:769\nmsgid \"LEVEL\"\nmsgstr \"\"\n\n#: options.h:772\nmsgid \"Set output format\"\nmsgstr \"\"\n\n#: options.h:772\nmsgid \"[binary]\"\nmsgstr \"\"\n\n#: options.h:775 options.h:777\nmsgid \"Create a position independent executable\"\nmsgstr \"\"\n\n#: options.h:782\nmsgid \"Load a plugin library\"\nmsgstr \"\"\n\n#: options.h:782\nmsgid \"PLUGIN\"\nmsgstr \"\"\n\n#: options.h:784\nmsgid \"Pass an option to the plugin\"\nmsgstr \"\"\n\n#: options.h:784\nmsgid \"OPTION\"\nmsgstr \"\"\n\n#: options.h:788\nmsgid \"Preread archive symbols when multi-threaded\"\nmsgstr \"\"\n\n#: options.h:791\nmsgid \"Print symbols defined and used for each input\"\nmsgstr \"\"\n\n#: options.h:795\nmsgid \"Ignored for SVR4 compatibility\"\nmsgstr \"\"\n\n#: options.h:798\nmsgid \"Generate relocations in output\"\nmsgstr \"\"\n\n#: options.h:801\nmsgid \"Generate relocatable output\"\nmsgstr \"\"\n\n#: options.h:804\nmsgid \"Relax branches on certain targets\"\nmsgstr \"\"\n\n#: options.h:807\nmsgid \"keep only symbols listed in this file\"\nmsgstr \"\"\n\n#: options.h:807\nmsgid \"[file]\"\nmsgstr \"\"\n\n#: options.h:813 options.h:816\nmsgid \"Add DIR to runtime search path\"\nmsgstr \"\"\n\n#: options.h:819\nmsgid \"Add DIR to link time shared library search path\"\nmsgstr \"\"\n\n#: options.h:823\nmsgid \"Strip all symbols\"\nmsgstr \"\"\n\n#: options.h:825\nmsgid \"Strip debugging information\"\nmsgstr \"\"\n\n#: options.h:827\nmsgid \"Emit only debug line number information\"\nmsgstr \"\"\n\n#: options.h:829\nmsgid \"Strip debug symbols that are unused by gdb (at least versions <= 6.7)\"\nmsgstr \"\"\n\n#: options.h:832\nmsgid \"Strip LTO intermediate code sections\"\nmsgstr \"\"\n\n#: options.h:835\nmsgid \"\"\n\"(ARM only) The maximum distance from instructions in a group of sections to \"\n\"their stubs.  Negative values mean stubs are always after the group. 1 means \"\n\"using default size.\\n\"\nmsgstr \"\"\n\n#: options.h:838 options.h:852 options.h:956 options.h:975\nmsgid \"SIZE\"\nmsgstr \"\"\n\n#: options.h:841\nmsgid \"\"\n\"Use less memory and more disk I/O (included only for compatibility with GNU \"\n\"ld)\"\nmsgstr \"\"\n\n#: options.h:845 options.h:848\nmsgid \"Generate shared library\"\nmsgstr \"\"\n\n#: options.h:851\nmsgid \"Stack size when -fsplit-stack function calls non-split\"\nmsgstr \"\"\n\n#: options.h:857\nmsgid \"Do not link against shared libraries\"\nmsgstr \"\"\n\n#: options.h:860\nmsgid \"Identical Code Folding. '--icf=safe' folds only ctors and dtors.\"\nmsgstr \"\"\n\n#: options.h:866\nmsgid \"Number of iterations of ICF (default 2)\"\nmsgstr \"\"\n\n#: options.h:866 options.h:899 options.h:901 options.h:903 options.h:905\nmsgid \"COUNT\"\nmsgstr \"\"\n\n#: options.h:869\nmsgid \"List folded identical sections on stderr\"\nmsgstr \"\"\n\n#: options.h:870\nmsgid \"Do not list folded identical sections\"\nmsgstr \"\"\n\n#: options.h:873\nmsgid \"Do not fold this symbol during ICF\"\nmsgstr \"\"\n\n#: options.h:876\nmsgid \"Remove unused sections\"\nmsgstr \"\"\n\n#: options.h:877\nmsgid \"Don't remove unused sections (default)\"\nmsgstr \"\"\n\n#: options.h:880\nmsgid \"List removed unused sections on stderr\"\nmsgstr \"\"\n\n#: options.h:881\nmsgid \"Do not list removed unused sections\"\nmsgstr \"\"\n\n#: options.h:884\nmsgid \"Print resource usage statistics\"\nmsgstr \"\"\n\n#: options.h:887\nmsgid \"Set target system root directory\"\nmsgstr \"\"\n\n#: options.h:890\nmsgid \"Print the name of each input file\"\nmsgstr \"\"\n\n#: options.h:893\nmsgid \"Read linker script\"\nmsgstr \"\"\n\n#: options.h:896\nmsgid \"Run the linker multi-threaded\"\nmsgstr \"\"\n\n#: options.h:897\nmsgid \"Do not run the linker multi-threaded\"\nmsgstr \"\"\n\n#: options.h:899\nmsgid \"Number of threads to use\"\nmsgstr \"\"\n\n#: options.h:901\nmsgid \"Number of threads to use in initial pass\"\nmsgstr \"\"\n\n#: options.h:903\nmsgid \"Number of threads to use in middle pass\"\nmsgstr \"\"\n\n#: options.h:905\nmsgid \"Number of threads to use in final pass\"\nmsgstr \"\"\n\n#: options.h:908\nmsgid \"Set the address of the bss segment\"\nmsgstr \"\"\n\n#: options.h:910\nmsgid \"Set the address of the data segment\"\nmsgstr \"\"\n\n#: options.h:912\nmsgid \"Set the address of the text segment\"\nmsgstr \"\"\n\n#: options.h:915\nmsgid \"Create undefined reference to SYMBOL\"\nmsgstr \"\"\n\n#: options.h:918\nmsgid \"Synonym for --debug=files\"\nmsgstr \"\"\n\n#: options.h:921\nmsgid \"Read version script\"\nmsgstr \"\"\n\n#: options.h:924\nmsgid \"Warn about duplicate common symbols\"\nmsgstr \"\"\n\n#: options.h:925\nmsgid \"Do not warn about duplicate common symbols (default)\"\nmsgstr \"\"\n\n#: options.h:928\nmsgid \"Warn when skipping an incompatible library\"\nmsgstr \"\"\n\n#: options.h:929\nmsgid \"Don't warn when skipping an incompatible library\"\nmsgstr \"\"\n\n#: options.h:932\nmsgid \"Include all archive contents\"\nmsgstr \"\"\n\n#: options.h:933\nmsgid \"Include only needed archive contents\"\nmsgstr \"\"\n\n#: options.h:936\nmsgid \"Use wrapper functions for SYMBOL\"\nmsgstr \"\"\n\n#: options.h:939\nmsgid \"Trace references to symbol\"\nmsgstr \"\"\n\n#: options.h:942\nmsgid \"Default search path for Solaris compatibility\"\nmsgstr \"\"\n\n#: options.h:943\nmsgid \"PATH\"\nmsgstr \"\"\n\n#: options.h:946\nmsgid \"Start a library search group\"\nmsgstr \"\"\n\n#: options.h:948\nmsgid \"End a library search group\"\nmsgstr \"\"\n\n#: options.h:953\nmsgid \"Sort dynamic relocs\"\nmsgstr \"\"\n\n#: options.h:954\nmsgid \"Do not sort dynamic relocs\"\nmsgstr \"\"\n\n#: options.h:956\nmsgid \"Set common page size to SIZE\"\nmsgstr \"\"\n\n#: options.h:961\nmsgid \"Mark output as requiring executable stack\"\nmsgstr \"\"\n\n#: options.h:963\nmsgid \"Mark DSO to be initialized first at runtime\"\nmsgstr \"\"\n\n#: options.h:966\nmsgid \"Mark object to interpose all DSOs but executable\"\nmsgstr \"\"\n\n#: options.h:969\nmsgid \"Mark object for lazy runtime binding (default)\"\nmsgstr \"\"\n\n#: options.h:972\nmsgid \"Mark object requiring immediate process\"\nmsgstr \"\"\n\n#: options.h:975\nmsgid \"Set maximum page size to SIZE\"\nmsgstr \"\"\n\n#: options.h:978\nmsgid \"Do not create copy relocs\"\nmsgstr \"\"\n\n#: options.h:980\nmsgid \"Mark object not to use default search paths\"\nmsgstr \"\"\n\n#: options.h:983\nmsgid \"Mark DSO non-deletable at runtime\"\nmsgstr \"\"\n\n#: options.h:986\nmsgid \"Mark DSO not available to dlopen\"\nmsgstr \"\"\n\n#: options.h:989\nmsgid \"Mark DSO not available to dldump\"\nmsgstr \"\"\n\n#: options.h:992\nmsgid \"Mark output as not requiring executable stack\"\nmsgstr \"\"\n\n#: options.h:994\nmsgid \"Mark object for immediate function binding\"\nmsgstr \"\"\n\n#: options.h:997\nmsgid \"Mark DSO to indicate that needs immediate $ORIGIN processing at runtime\"\nmsgstr \"\"\n\n#: options.h:1000\nmsgid \"Where possible mark variables read-only after relocation\"\nmsgstr \"\"\n\n#: options.h:1001\nmsgid \"Don't mark variables read-only after relocation\"\nmsgstr \"\"\n\n#: output.cc:1132\nmsgid \"section group retained but group element discarded\"\nmsgstr \"\"\n\n#: output.cc:1860\n#, c-format\nmsgid \"invalid alignment %lu for section \\\"%s\\\"\"\nmsgstr \"\"\n\n#: output.cc:3573\n#, c-format\nmsgid \"dot moves backward in linker script from 0x%llx to 0x%llx\"\nmsgstr \"\"\n\n#: output.cc:3576\n#, c-format\nmsgid \"address of section '%s' moves backward from 0x%llx to 0x%llx\"\nmsgstr \"\"\n\n#: output.cc:3755\n#, c-format\nmsgid \"nobits section %s may not precede progbits section %s in same segment\"\nmsgstr \"\"\n\n#: output.cc:3907 output.cc:3975\n#, c-format\nmsgid \"%s: open: %s\"\nmsgstr \"\"\n\n#: output.cc:3996\n#, c-format\nmsgid \"%s: mremap: %s\"\nmsgstr \"\"\n\n#: output.cc:4005\n#, c-format\nmsgid \"%s: mmap: %s\"\nmsgstr \"\"\n\n#: output.cc:4085\n#, c-format\nmsgid \"%s: mmap: failed to allocate %lu bytes for output file: %s\"\nmsgstr \"\"\n\n#: output.cc:4096\n#, c-format\nmsgid \"%s: munmap: %s\"\nmsgstr \"\"\n\n#: output.cc:4115\n#, c-format\nmsgid \"%s: write: unexpected 0 return-value\"\nmsgstr \"\"\n\n#: output.cc:4117\n#, c-format\nmsgid \"%s: write: %s\"\nmsgstr \"\"\n\n#: output.cc:4132\n#, c-format\nmsgid \"%s: close: %s\"\nmsgstr \"\"\n\n#: output.h:520\nmsgid \"** section headers\"\nmsgstr \"\"\n\n#: output.h:565\nmsgid \"** segment headers\"\nmsgstr \"\"\n\n#: output.h:613\nmsgid \"** file header\"\nmsgstr \"\"\n\n#: output.h:833\nmsgid \"** fill\"\nmsgstr \"\"\n\n#: output.h:987\nmsgid \"** string table\"\nmsgstr \"\"\n\n#: output.h:1300\nmsgid \"** dynamic relocs\"\nmsgstr \"\"\n\n#: output.h:1301 output.h:1637\nmsgid \"** relocs\"\nmsgstr \"\"\n\n#: output.h:1662\nmsgid \"** group\"\nmsgstr \"\"\n\n#: output.h:1774\nmsgid \"** GOT\"\nmsgstr \"\"\n\n#: output.h:1916\nmsgid \"** dynamic\"\nmsgstr \"\"\n\n#: output.h:2039\nmsgid \"** symtab xindex\"\nmsgstr \"\"\n\n#: parameters.cc:172\n#, c-format\nmsgid \"unrecognized output format %s\"\nmsgstr \"\"\n\n#: plugin.cc:106\n#, c-format\nmsgid \"%s: could not load plugin library\"\nmsgstr \"\"\n\n#: plugin.cc:116\n#, c-format\nmsgid \"%s: could not find onload entry point\"\nmsgstr \"\"\n\n#: plugin.cc:426\nmsgid \"\"\n\"Input files added by plug-ins in --incremental mode not supported yet.\\n\"\nmsgstr \"\"\n\n#: powerpc.cc:1502 sparc.cc:2307 x86_64.cc:1632\n#, c-format\nmsgid \"%s: unsupported REL reloc section\"\nmsgstr \"\"\n\n#: readsyms.cc:191\n#, c-format\nmsgid \"%s: file is empty\"\nmsgstr \"\"\n\n#. Here we have to handle any other input file types we need.\n#: readsyms.cc:575\n#, c-format\nmsgid \"%s: not an object or archive\"\nmsgstr \"\"\n\n#: reduced_debug_output.cc:236\nmsgid \"\"\n\"Debug abbreviations extend beyond .debug_abbrev section; failed to reduce \"\n\"debug abbreviations\"\nmsgstr \"\"\n\n#: reduced_debug_output.cc:322\nmsgid \"Extremely large compile unit in debug info; failed to reduce debug info\"\nmsgstr \"\"\n\n#: reduced_debug_output.cc:330\nmsgid \"\"\n\"Debug info extends beyond .debug_info section;failed to reduce debug info\"\nmsgstr \"\"\n\n#: reduced_debug_output.cc:350 reduced_debug_output.cc:392\nmsgid \"Invalid DIE in debug info; failed to reduce debug info\"\nmsgstr \"\"\n\n#: reduced_debug_output.cc:373\nmsgid \"\"\n\"Debug info extends beyond .debug_info section; failed to reduce debug info\"\nmsgstr \"\"\n\n#: reloc.cc:297 reloc.cc:858\n#, c-format\nmsgid \"relocation section %u uses unexpected symbol table %u\"\nmsgstr \"\"\n\n#: reloc.cc:312 reloc.cc:875\n#, c-format\nmsgid \"unexpected entsize for reloc section %u: %lu != %u\"\nmsgstr \"\"\n\n#: reloc.cc:321 reloc.cc:884\n#, c-format\nmsgid \"reloc section %u size %lu uneven\"\nmsgstr \"\"\n\n#: reloc.cc:1203\n#, c-format\nmsgid \"could not convert call to '%s' to '%s'\"\nmsgstr \"\"\n\n#: reloc.cc:1343\n#, c-format\nmsgid \"reloc section size %zu is not a multiple of reloc size %d\\n\"\nmsgstr \"\"\n\n#. We should only see externally visible symbols in the symbol\n#. table.\n#: resolve.cc:191\nmsgid \"invalid STB_LOCAL symbol in external symbols\"\nmsgstr \"\"\n\n#. Any target which wants to handle STB_LOOS, etc., needs to\n#. define a resolve method.\n#: resolve.cc:197\nmsgid \"unsupported symbol binding\"\nmsgstr \"\"\n\n#. A dynamic object cannot reference a hidden or internal symbol\n#. defined in another object.\n#: resolve.cc:266\n#, c-format\nmsgid \"%s symbol '%s' in %s is referenced by DSO %s\"\nmsgstr \"\"\n\n#: resolve.cc:326\n#, c-format\nmsgid \"common of '%s' overriding smaller common\"\nmsgstr \"\"\n\n#: resolve.cc:331\n#, c-format\nmsgid \"common of '%s' overidden by larger common\"\nmsgstr \"\"\n\n#: resolve.cc:336\n#, c-format\nmsgid \"multiple common of '%s'\"\nmsgstr \"\"\n\n#: resolve.cc:442\n#, c-format\nmsgid \"multiple definition of '%s'\"\nmsgstr \"\"\n\n#: resolve.cc:481\n#, c-format\nmsgid \"definition of '%s' overriding common\"\nmsgstr \"\"\n\n#: resolve.cc:516\n#, c-format\nmsgid \"definition of '%s' overriding dynamic common definition\"\nmsgstr \"\"\n\n#: resolve.cc:636\n#, c-format\nmsgid \"common '%s' overridden by previous definition\"\nmsgstr \"\"\n\n#: resolve.cc:766 resolve.cc:778\nmsgid \"command line\"\nmsgstr \"\"\n\n#: script-sections.cc:690\nmsgid \"dot may not move backward\"\nmsgstr \"\"\n\n#: script-sections.cc:757\nmsgid \"** expression\"\nmsgstr \"\"\n\n#: script-sections.cc:941\nmsgid \"fill value is not absolute\"\nmsgstr \"\"\n\n#: script-sections.cc:1913\n#, c-format\nmsgid \"alignment of section %s is not absolute\"\nmsgstr \"\"\n\n#: script-sections.cc:1957\n#, c-format\nmsgid \"subalign of section %s is not absolute\"\nmsgstr \"\"\n\n#: script-sections.cc:1972\n#, c-format\nmsgid \"fill of section %s is not absolute\"\nmsgstr \"\"\n\n#: script-sections.cc:2048\nmsgid \"SPECIAL constraints are not implemented\"\nmsgstr \"\"\n\n#: script-sections.cc:2090\nmsgid \"mismatched definition for constrained sections\"\nmsgstr \"\"\n\n#: script-sections.cc:2634\nmsgid \"DATA_SEGMENT_ALIGN may only appear once in a linker script\"\nmsgstr \"\"\n\n#: script-sections.cc:2649\nmsgid \"DATA_SEGMENT_RELRO_END may only appear once in a linker script\"\nmsgstr \"\"\n\n#: script-sections.cc:2654\nmsgid \"DATA_SEGMENT_RELRO_END must follow DATA_SEGMENT_ALIGN\"\nmsgstr \"\"\n\n#: script-sections.cc:2826\nmsgid \"no matching section constraint\"\nmsgstr \"\"\n\n#: script-sections.cc:3151\nmsgid \"TLS sections are not adjacent\"\nmsgstr \"\"\n\n#: script-sections.cc:3280\nmsgid \"allocated section not in any segment\"\nmsgstr \"\"\n\n#: script-sections.cc:3309\n#, c-format\nmsgid \"no segment %s\"\nmsgstr \"\"\n\n#: script-sections.cc:3323\nmsgid \"section in two PT_LOAD segments\"\nmsgstr \"\"\n\n#: script-sections.cc:3330\nmsgid \"allocated section not in any PT_LOAD segment\"\nmsgstr \"\"\n\n#: script-sections.cc:3358\nmsgid \"may only specify load address for PT_LOAD segment\"\nmsgstr \"\"\n\n#: script-sections.cc:3382\n#, c-format\nmsgid \"PHDRS load address overrides section %s load address\"\nmsgstr \"\"\n\n#. We could support this if we wanted to.\n#: script-sections.cc:3393\nmsgid \"using only one of FILEHDR and PHDRS is not currently supported\"\nmsgstr \"\"\n\n#: script-sections.cc:3408\nmsgid \"\"\n\"sections loaded on first page without room for file and program headers are \"\n\"not supported\"\nmsgstr \"\"\n\n#: script-sections.cc:3414\nmsgid \"\"\n\"using FILEHDR and PHDRS on more than one PT_LOAD segment is not currently \"\n\"supported\"\nmsgstr \"\"\n\n#: script.cc:1072\nmsgid \"invalid use of PROVIDE for dot symbol\"\nmsgstr \"\"\n\n#: script.cc:2132\n#, c-format\nmsgid \"%s:%d:%d: %s\"\nmsgstr \"\"\n\n#. There are some options that we could handle here--e.g.,\n#. -lLIBRARY.  Should we bother?\n#: script.cc:2297\n#, c-format\nmsgid \"\"\n\"%s:%d:%d: ignoring command OPTION; OPTION is only valid for scripts \"\n\"specified via -T/--script\"\nmsgstr \"\"\n\n#: script.cc:2362\n#, c-format\nmsgid \"\"\n\"%s:%d:%d: ignoring SEARCH_DIR; SEARCH_DIR is only valid for scripts \"\n\"specified via -T/--script\"\nmsgstr \"\"\n\n#: script.cc:2606 script.cc:2620\n#, c-format\nmsgid \"%s:%d:%d: DATA_SEGMENT_ALIGN not in SECTIONS clause\"\nmsgstr \"\"\n\n#: script.cc:2739\nmsgid \"unknown PHDR type (try integer)\"\nmsgstr \"\"\n\n#: stringpool.cc:528\n#, c-format\nmsgid \"%s: %s entries: %zu; buckets: %zu\\n\"\nmsgstr \"\"\n\n#: stringpool.cc:532\n#, c-format\nmsgid \"%s: %s entries: %zu\\n\"\nmsgstr \"\"\n\n#: stringpool.cc:535\n#, c-format\nmsgid \"%s: %s Stringdata structures: %zu\\n\"\nmsgstr \"\"\n\n#: symtab.cc:857\n#, c-format\nmsgid \"%s: reference to %s\"\nmsgstr \"\"\n\n#: symtab.cc:859\n#, c-format\nmsgid \"%s: definition of %s\"\nmsgstr \"\"\n\n#: symtab.cc:1052\n#, c-format\nmsgid \"bad global symbol name offset %u at %zu\"\nmsgstr \"\"\n\n#: symtab.cc:1278\nmsgid \"--just-symbols does not make sense with a shared object\"\nmsgstr \"\"\n\n#: symtab.cc:1284\nmsgid \"too few symbol versions\"\nmsgstr \"\"\n\n#: symtab.cc:1333\n#, c-format\nmsgid \"bad symbol name offset %u at %zu\"\nmsgstr \"\"\n\n#: symtab.cc:1396\n#, c-format\nmsgid \"versym for symbol %zu out of range: %u\"\nmsgstr \"\"\n\n#: symtab.cc:1404\n#, c-format\nmsgid \"versym for symbol %zu has no name: %u\"\nmsgstr \"\"\n\n#: symtab.cc:2549 symtab.cc:2681\n#, c-format\nmsgid \"%s: unsupported symbol section 0x%x\"\nmsgstr \"\"\n\n#: symtab.cc:2933\n#, c-format\nmsgid \"%s: symbol table entries: %zu; buckets: %zu\\n\"\nmsgstr \"\"\n\n#: symtab.cc:2936\n#, c-format\nmsgid \"%s: symbol table entries: %zu\\n\"\nmsgstr \"\"\n\n#: symtab.cc:3007\n#, c-format\nmsgid \"\"\n\"while linking %s: symbol '%s' defined in multiple places (possible ODR \"\n\"violation):\"\nmsgstr \"\"\n\n#: target-reloc.h:259\nmsgid \"relocation refers to discarded comdat section\"\nmsgstr \"\"\n\n#: target-reloc.h:298\n#, c-format\nmsgid \"reloc has bad offset %zu\"\nmsgstr \"\"\n\n#: target.cc:90\n#, c-format\nmsgid \"%s: unsupported ELF file type %d\"\nmsgstr \"\"\n\n#: target.cc:157\n#, c-format\nmsgid \"linker does not include stack split support required by %s\"\nmsgstr \"\"\n\n#: tls.h:59\nmsgid \"TLS relocation out of range\"\nmsgstr \"\"\n\n#: tls.h:73\nmsgid \"TLS relocation against invalid instruction\"\nmsgstr \"\"\n\n#. This output is intended to follow the GNU standards.\n#: version.cc:65\n#, c-format\nmsgid \"Copyright 2008 Free Software Foundation, Inc.\\n\"\nmsgstr \"\"\n\n#: version.cc:66\n#, c-format\nmsgid \"\"\n\"This program is free software; you may redistribute it under the terms of\\n\"\n\"the GNU General Public License version 3 or (at your option) a later \"\n\"version.\\n\"\n\"This program has absolutely no warranty.\\n\"\nmsgstr \"\"\n\n#: workqueue-threads.cc:106\n#, c-format\nmsgid \"%s failed: %s\"\nmsgstr \"\"\n\n#: x86_64.cc:2184\n#, c-format\nmsgid \"unsupported reloc type %u\"\nmsgstr \"\"\n\n#: x86_64.cc:2524\n#, c-format\nmsgid \"unsupported reloc %u against local symbol\"\nmsgstr \"\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/po/id.po": "# Pesan bahasa indonesia untuk gold.\n# Copyright (C) 2009 Free Software Foundation, Inc.\n# This file is distributed under the same license as the binutils package.\n# Arif E. Nugroho <arif_endro@yahoo.com>, 2009.\n#\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: gold 2.19.1\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2008-09-09 17:16+0930\\n\"\n\"PO-Revision-Date: 2009-05-26 08:00+0700\\n\"\n\"Last-Translator: Arif E. Nugroho <arif_endro@yahoo.com>\\n\"\n\"Language-Team: Indonesian <translation-team-id@lists.sourceforge.net>\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=ISO-8859-1\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\n#: archive.cc:107\n#, c-format\nmsgid \"%s: no archive symbol table (run ranlib)\"\nmsgstr \"%s: tidak ada kumpulan tabel simbol (jalankan ranlib)\"\n\n#: archive.cc:189\n#, c-format\nmsgid \"%s: bad archive symbol table names\"\nmsgstr \"%s: nama kumpulan tabel simbol buruk\"\n\n#: archive.cc:221\n#, c-format\nmsgid \"%s: malformed archive header at %zu\"\nmsgstr \"%s: kumpulan kepala salah bentuk di %zu\"\n\n#: archive.cc:241\n#, c-format\nmsgid \"%s: malformed archive header size at %zu\"\nmsgstr \"%s: ukuran kepala kumpulan salah bentuk di %zu\"\n\n#: archive.cc:252\n#, c-format\nmsgid \"%s: malformed archive header name at %zu\"\nmsgstr \"%s: salah bentuk nama kepala kumpulan di %zu\"\n\n#: archive.cc:282\n#, c-format\nmsgid \"%s: bad extended name index at %zu\"\nmsgstr \"%s: nama indeks extensi buruk di %zu\"\n\n#: archive.cc:292\n#, c-format\nmsgid \"%s: bad extended name entry at header %zu\"\nmsgstr \"%s: nama masukan ekstensi buruk di kepala %zu\"\n\n#: archive.cc:389\n#, c-format\nmsgid \"%s: short archive header at %zu\"\nmsgstr \"%s: kumpulan kepala pendek di %zu\"\n\n#: archive.cc:530 archive.cc:545\n#, c-format\nmsgid \"%s: member at %zu is not an ELF object\"\nmsgstr \"%s: anggota di %zu bukan sebuah objek ELF\"\n\n#: archive.cc:775\n#, c-format\nmsgid \"%s: archive libraries: %u\\n\"\nmsgstr \"%s: kumpulan perpustakaan: %u\\n\"\n\n#: archive.cc:777\n#, c-format\nmsgid \"%s: total archive members: %u\\n\"\nmsgstr \"%s: jumlah total kumpulan: %u\\n\"\n\n#: archive.cc:779\n#, c-format\nmsgid \"%s: loaded archive members: %u\\n\"\nmsgstr \"%s: dimuat anggota kumpulan: %u\\n\"\n\n#: binary.cc:129\n#, c-format\nmsgid \"cannot open %s: %s:\"\nmsgstr \"tidak dapat membuka %s: %s:\"\n\n#: compressed_output.cc:128\nmsgid \"not compressing section data: zlib error\"\nmsgstr \"tidak mengkompress bagian data: zlib error\"\n\n#: cref.cc:244\n#, c-format\nmsgid \"cannot open symbol count file %s: %s\"\nmsgstr \"tidak dapat membuka jumlah berkas simbol %s: %s\"\n\n#: descriptors.cc:94\n#, c-format\nmsgid \"file %s was removed during the link\"\nmsgstr \"berkas %s telah dihapus ketika penyambungan\"\n\n#: descriptors.cc:133\nmsgid \"out of file descriptors and couldn't close any\"\nmsgstr \"diluar dari berkas deskripsi dan tidak dapat menutup apapun\"\n\n#: descriptors.cc:154 descriptors.cc:189\n#, c-format\nmsgid \"while closing %s: %s\"\nmsgstr \"ketika menutup %s: %s\"\n\n#: dirsearch.cc:71\n#, c-format\nmsgid \"%s: can not read directory: %s\"\nmsgstr \"%s: tidak dapat membaca direktori: %s\"\n\n#: dwarf_reader.cc:53 dwarf_reader.cc:84\nmsgid \"Unusually large LEB128 decoded, debug information may be corrupted\"\nmsgstr \"Besar LEB128 terurai tidak biasa, informasi penelusuran mungkin telah terkorupsi\"\n\n#: dynobj.cc:169\n#, c-format\nmsgid \"unexpected duplicate type %u section: %u, %u\"\nmsgstr \"tidak terduga duplikasi daerah tipe %u: %u, %u\"\n\n#: dynobj.cc:205\n#, c-format\nmsgid \"unexpected link in section %u header: %u != %u\"\nmsgstr \"tidak terduga sambungan dalam daerah %u kepala: %u != %u\"\n\n#: dynobj.cc:241\n#, c-format\nmsgid \"DYNAMIC section %u link out of range: %u\"\nmsgstr \"daerah DINAMIS %u sambungan diluar dari jangkauan: %u\"\n\n#: dynobj.cc:249\n#, c-format\nmsgid \"DYNAMIC section %u link %u is not a strtab\"\nmsgstr \"daerah DINAMIS %u sambungan %u bukan sebuah a strtab\"\n\n#: dynobj.cc:278\n#, c-format\nmsgid \"DT_SONAME value out of range: %lld >= %lld\"\nmsgstr \"DT_SONAME nilai diluar dari jangkauan: %lld >= %lld\"\n\n#: dynobj.cc:290\n#, c-format\nmsgid \"DT_NEEDED value out of range: %lld >= %lld\"\nmsgstr \"DT_NEEDED nilai diluar dari jangkauan: %lld >= %lld\"\n\n#: dynobj.cc:303\nmsgid \"missing DT_NULL in dynamic segment\"\nmsgstr \"hilang DT_NULL dalam bagian dinamis\"\n\n#: dynobj.cc:349\n#, c-format\nmsgid \"invalid dynamic symbol table name index: %u\"\nmsgstr \"nama indeks table simbol dinamis tidak valid: %u\"\n\n#: dynobj.cc:356\n#, c-format\nmsgid \"dynamic symbol table name section has wrong type: %u\"\nmsgstr \"nama daerah tabel simbol dinamis memiliki tipe salah: %u\"\n\n#: dynobj.cc:443 object.cc:376 object.cc:884\n#, c-format\nmsgid \"bad section name offset for section %u: %lu\"\nmsgstr \"nama daerah ofset buruk untuk daerah %u: %lu\"\n\n#: dynobj.cc:472\n#, c-format\nmsgid \"duplicate definition for version %u\"\nmsgstr \"duplikasi definisi untuk versi %u\"\n\n#: dynobj.cc:501\n#, c-format\nmsgid \"unexpected verdef version %u\"\nmsgstr \"tidak terduga verdef versi %u\"\n\n#: dynobj.cc:517\n#, c-format\nmsgid \"verdef vd_cnt field too small: %u\"\nmsgstr \"verdef vd_cnt daerah terlalu kecil: %u\"\n\n#: dynobj.cc:525\n#, c-format\nmsgid \"verdef vd_aux field out of range: %u\"\nmsgstr \"daerah verdef vd_aux diluar dari jangkauan: %u\"\n\n#: dynobj.cc:536\n#, c-format\nmsgid \"verdaux vda_name field out of range: %u\"\nmsgstr \"daerah verdaux vda_name diluar dari jangkauan: %u\"\n\n#: dynobj.cc:546\n#, c-format\nmsgid \"verdef vd_next field out of range: %u\"\nmsgstr \"daerah verdef vd_next diluar dari jangkauan: %u\"\n\n#: dynobj.cc:580\n#, c-format\nmsgid \"unexpected verneed version %u\"\nmsgstr \"tidak terduga versi verneed %u\"\n\n#: dynobj.cc:589\n#, c-format\nmsgid \"verneed vn_aux field out of range: %u\"\nmsgstr \"daerah verneed vn_aux diluar dari jangkauan: %u\"\n\n#: dynobj.cc:603\n#, c-format\nmsgid \"vernaux vna_name field out of range: %u\"\nmsgstr \"daerah vernaux vna_name diluar dari jangkauan: %u\"\n\n#: dynobj.cc:614\n#, c-format\nmsgid \"verneed vna_next field out of range: %u\"\nmsgstr \"daerah verneed vna_next diluar dari jangkauan: %u\"\n\n#: dynobj.cc:625\n#, c-format\nmsgid \"verneed vn_next field out of range: %u\"\nmsgstr \"daerah verneed vn_next diluar dari jangkauan: %u\"\n\n#: dynobj.cc:673\nmsgid \"size of dynamic symbols is not multiple of symbol size\"\nmsgstr \"ukuran dari simbol dinamis bukan kelipatan dari ukuran simbol\"\n\n#: dynobj.cc:1425\n#, c-format\nmsgid \"symbol %s has undefined version %s\"\nmsgstr \"simbol %s memiliki versi %s tidak terdefinisi\"\n\n#: ehframe.h:82\nmsgid \"** eh_frame_hdr\"\nmsgstr \"** eh_frame_hdr\"\n\n#: ehframe.h:353\nmsgid \"** eh_frame\"\nmsgstr \"** eh_frame\"\n\n#: errors.cc:106\n#, c-format\nmsgid \"%s: warning: \"\nmsgstr \"%s: peringatan: \"\n\n#: errors.cc:146\n#, c-format\nmsgid \"%s: %s: warning: \"\nmsgstr \"%s: %s: peringatan: \"\n\n#: errors.cc:172\n#, c-format\nmsgid \"%s: %s: undefined reference to '%s'\\n\"\nmsgstr \"%s: %s: referensi tidak terdefinisi ke '%s'\\n\"\n\n#: errors.cc:176\n#, c-format\nmsgid \"%s: %s: undefined reference to '%s', version '%s'\\n\"\nmsgstr \"%s: %s: referensi ke '%s' tidak terdefinisi, versi '%s'\\n\"\n\n#: errors.cc:186\n#, c-format\nmsgid \"%s: \"\nmsgstr \"%s: \"\n\n#: expression.cc:172\n#, c-format\nmsgid \"undefined symbol '%s' referenced in expression\"\nmsgstr \"simbol '%s' tidak terdefinisi direferensikan dalam ekspresi\"\n\n#: expression.cc:209\nmsgid \"invalid reference to dot symbol outside of SECTIONS clause\"\nmsgstr \"referensi tidak valid ke dot symbol diluar dari SECTIONS clause\"\n\n#. Handle unary operators.  We use a preprocessor macro as a hack to\n#. capture the C operator.\n#: expression.cc:278\nmsgid \"unary \"\nmsgstr \"unary \"\n\n#: expression.cc:278 expression.cc:400\nmsgid \" applied to section relative value\"\nmsgstr \" diaplikasikan ke daerah nilai relatif\"\n\n#. Handle binary operators.  We use a preprocessor macro as a hack to\n#. capture the C operator.  KEEP_LEFT means that if the left operand\n#. is section relative and the right operand is not, the result uses\n#. the same section as the left operand.  KEEP_RIGHT is the same with\n#. left and right swapped.  IS_DIV means that we need to give an error\n#. if the right operand is zero.  WARN means that we should warn if\n#. used on section relative values in a relocatable link.  We always\n#. warn if used on values in different sections in a relocatable link.\n#: expression.cc:400\nmsgid \"binary \"\nmsgstr \"binari \"\n\n#: expression.cc:404\nmsgid \" by zero\"\nmsgstr \" dengan nol\"\n\n#: expression.cc:575\nmsgid \"max applied to section relative value\"\nmsgstr \"maks diaplikasikan ke daerah nilai relatif\"\n\n#: expression.cc:610\nmsgid \"min applied to section relative value\"\nmsgstr \"min diaplikasikan ke daerah nilai relatif\"\n\n#: expression.cc:740\nmsgid \"aligning to section relative value\"\nmsgstr \"menyesuaikan ke daerah nilai relatif\"\n\n#: expression.cc:895\n#, c-format\nmsgid \"unknown constant %s\"\nmsgstr \"konstanta %s tidak diketahui\"\n\n#: expression.cc:1126\nmsgid \"SEGMENT_START not implemented\"\nmsgstr \"SEGMENT_START tidak diimplementasikan\"\n\n#: expression.cc:1135\nmsgid \"ORIGIN not implemented\"\nmsgstr \"ORIGIN tidak diimplementasikan\"\n\n#: expression.cc:1141\nmsgid \"LENGTH not implemented\"\nmsgstr \"LENGTH tidak diimplementasikan\"\n\n#: fileread.cc:55\n#, c-format\nmsgid \"munmap failed: %s\"\nmsgstr \"munmap gagal:  %s\"\n\n#: fileread.cc:119\n#, c-format\nmsgid \"%s: fstat failed: %s\"\nmsgstr \"%s: fstat gagal: %s\"\n\n#: fileread.cc:159\n#, c-format\nmsgid \"could not reopen file %s\"\nmsgstr \"tidak dapat membuka kembali berkas %s\"\n\n#: fileread.cc:292\n#, c-format\nmsgid \"%s: pread failed: %s\"\nmsgstr \"%s: pread gagal: %s\"\n\n#: fileread.cc:298\n#, c-format\nmsgid \"%s: file too short: read only %lld of %lld bytes at %lld\"\nmsgstr \"%s: berkas terlalu pendek: hanya membaca %lld dari %lld byte di %lld\"\n\n#: fileread.cc:382\n#, c-format\nmsgid \"%s: mmap offset %lld size %lld failed: %s\"\nmsgstr \"%s: mmap ofset %lld ukuran %lld gagal: %s\"\n\n#: fileread.cc:528\n#, c-format\nmsgid \"%s: lseek failed: %s\"\nmsgstr \"%s: lseek gagal: %s\"\n\n#: fileread.cc:534\n#, c-format\nmsgid \"%s: readv failed: %s\"\nmsgstr \"%s: readv gagal: %s\"\n\n#: fileread.cc:537\n#, c-format\nmsgid \"%s: file too short: read only %zd of %zd bytes at %lld\"\nmsgstr \"%s: berkas terlalu pendek: hanya membaca %zd dari %zd byte di %lld\"\n\n#: fileread.cc:686\n#, c-format\nmsgid \"%s: total bytes mapped for read: %llu\\n\"\nmsgstr \"%s: total byte dipetakan untuk pembacaan: %llu\\n\"\n\n#: fileread.cc:688\n#, c-format\nmsgid \"%s: maximum bytes mapped for read at one time: %llu\\n\"\nmsgstr \"%s: jumlah maksimal byte dipetakan untuk pembacaan di setiap waktu: %llu\\n\"\n\n#: fileread.cc:783\n#, c-format\nmsgid \"cannot find -l%s\"\nmsgstr \"tidak dapat menemukan -l%s\"\n\n#: fileread.cc:810\n#, c-format\nmsgid \"cannot find %s\"\nmsgstr \"tidak dapat menemukan %s\"\n\n#: fileread.cc:833\n#, c-format\nmsgid \"cannot open %s: %s\"\nmsgstr \"tidak dapat membuka %s: %s\"\n\n#: gold-threads.cc:103\n#, c-format\nmsgid \"pthead_mutextattr_init failed: %s\"\nmsgstr \"pthead_mutextattr_init gagal: %s\"\n\n#: gold-threads.cc:107\n#, c-format\nmsgid \"pthread_mutextattr_settype failed: %s\"\nmsgstr \"pthread_mutextattr_settype gagal: %s\"\n\n#: gold-threads.cc:112\n#, c-format\nmsgid \"pthread_mutex_init failed: %s\"\nmsgstr \"pthread_mutex_init gagal: %s\"\n\n#: gold-threads.cc:116\n#, c-format\nmsgid \"pthread_mutexattr_destroy failed: %s\"\nmsgstr \"pthread_mutexattr_destroy gagal: %s\"\n\n#: gold-threads.cc:123\n#, c-format\nmsgid \"pthread_mutex_destroy failed: %s\"\nmsgstr \"pthread_mutex_destroy gagal: %s\"\n\n#: gold-threads.cc:131\n#, c-format\nmsgid \"pthread_mutex_lock failed: %s\"\nmsgstr \"pthread_mutex_lock gagal: %s\"\n\n#: gold-threads.cc:139\n#, c-format\nmsgid \"pthread_mutex_unlock failed: %s\"\nmsgstr \"pthread_mutex_unlock gagal: %s\"\n\n#: gold-threads.cc:220\n#, c-format\nmsgid \"pthread_cond_init failed: %s\"\nmsgstr \"pthread_cond_init gagal: %s\"\n\n#: gold-threads.cc:227\n#, c-format\nmsgid \"pthread_cond_destroy failed: %s\"\nmsgstr \"pthread_cond_destroy gagal: %s\"\n\n#: gold-threads.cc:236\n#, c-format\nmsgid \"pthread_cond_wait failed: %s\"\nmsgstr \"pthread_cond_wait gagal: %s\"\n\n#: gold-threads.cc:244\n#, c-format\nmsgid \"pthread_cond_signal failed: %s\"\nmsgstr \"pthread_cond_signal gagal: %s\"\n\n#: gold-threads.cc:252\n#, c-format\nmsgid \"pthread_cond_broadcast failed: %s\"\nmsgstr \"pthread_cond_broadcast gagal: %s\"\n\n#: gold.cc:83\n#, c-format\nmsgid \"%s: internal error in %s, at %s:%d\\n\"\nmsgstr \"%s: kerusakan internal dalam %s, di %s:%d\\n\"\n\n#: gold.cc:130\nmsgid \"no input files\"\nmsgstr \"tidak ada berkas masukan\"\n\n#. We print out just the first .so we see; there may be others.\n#: gold.cc:195\n#, c-format\nmsgid \"cannot mix -static with dynamic object %s\"\nmsgstr \"tidak dapat mencampurkan -static dengan objek dinamis %s\"\n\n#: gold.cc:199\n#, c-format\nmsgid \"cannot mix -r with dynamic object %s\"\nmsgstr \"tidak dapat mencampurkan -r dengan objek dinamis %s\"\n\n#: gold.cc:203\n#, c-format\nmsgid \"cannot use non-ELF output format with dynamic object %s\"\nmsgstr \"tidak dapat menggunakan format keluaran bukan ELF dengan objek dinamis %s\"\n\n#. FIXME: This needs to specify the location somehow.\n#: i386.cc:193 i386.cc:1588 sparc.cc:211 sparc.cc:2322 x86_64.cc:208\n#: x86_64.cc:1656\nmsgid \"missing expected TLS relocation\"\nmsgstr \"hilang relokasi TLS yang diduga\"\n\n#: i386.cc:503 sparc.cc:1066 x86_64.cc:533\nmsgid \"** PLT\"\nmsgstr \"** PLT\"\n\n#: i386.cc:843 powerpc.cc:996 sparc.cc:1480 x86_64.cc:921 x86_64.cc:1230\n#, c-format\nmsgid \"%s: unsupported reloc %u against local symbol\"\nmsgstr \"%s: tidak didukung relokasi %u terhadap simbol lokal\"\n\n#: i386.cc:907 x86_64.cc:1033\n#, c-format\nmsgid \"section symbol %u has bad shndx %u\"\nmsgstr \"daerah simbol %u memiliki shndx buruk %u\"\n\n#: i386.cc:965 i386.cc:1297 powerpc.cc:1204 powerpc.cc:1413 sparc.cc:1852\n#: sparc.cc:2204 x86_64.cc:1110 x86_64.cc:1418\n#, c-format\nmsgid \"%s: unexpected reloc %u in object file\"\nmsgstr \"%s: tidak terduga relokasi %u dalam berkas objek\"\n\n#: i386.cc:999 i386.cc:1023 sparc.cc:1753 x86_64.cc:1141 x86_64.cc:1169\n#, c-format\nmsgid \"local symbol %u has bad shndx %u\"\nmsgstr \"lokal simbol %u memiliki shndx buruk %u\"\n\n#: i386.cc:1134 powerpc.cc:1223 sparc.cc:1871 x86_64.cc:1244 x86_64.cc:1536\n#, c-format\nmsgid \"%s: unsupported reloc %u against global symbol %s\"\nmsgstr \"%s: tidak didukung relokasi %u terhadap simbol global %s\"\n\n#: i386.cc:1473\n#, c-format\nmsgid \"%s: unsupported RELA reloc section\"\nmsgstr \"%s: tidak didukung daerah relokasi RELA\"\n\n#: i386.cc:1735 i386.cc:2429 powerpc.cc:1740 sparc.cc:2637 x86_64.cc:1859\n#: x86_64.cc:2435\n#, c-format\nmsgid \"unexpected reloc %u in object file\"\nmsgstr \"tidak diduga relokasi %u dalam berkas objek\"\n\n#: i386.cc:1767 i386.cc:1846 i386.cc:1898 i386.cc:1929 i386.cc:1986\n#: powerpc.cc:1746 sparc.cc:2643 sparc.cc:2826 sparc.cc:2887 sparc.cc:2994\n#: x86_64.cc:1880 x86_64.cc:1963 x86_64.cc:2018 x86_64.cc:2043\n#, c-format\nmsgid \"unsupported reloc %u\"\nmsgstr \"tidak diduga relokasi %u\"\n\n#: i386.cc:1906\nmsgid \"both SUN and GNU model TLS relocations\"\nmsgstr \"baik model relokasi TLS SUN dan GNU\"\n\n#: i386.cc:2443\n#, c-format\nmsgid \"unsupported reloc %u in object file\"\nmsgstr \"tidak diduga relokasi %u dalam berkas objek\"\n\n#: layout.cc:1511\n#, c-format\nmsgid \"--build-id=uuid failed: could not open /dev/urandom: %s\"\nmsgstr \"--build-id=uuid gagal: tidak dapat membuka /dev/urandom: %s\"\n\n#: layout.cc:1518\n#, c-format\nmsgid \"/dev/urandom: read failed: %s\"\nmsgstr \"/dev/urandom: pembacaan gagal: %s\"\n\n#: layout.cc:1520\n#, c-format\nmsgid \"/dev/urandom: expected %zu bytes, got %zd bytes\"\nmsgstr \"/dev/urandom: tidak terduga %zu byte, diperoleh %zd byte\"\n\n#: layout.cc:1542\n#, c-format\nmsgid \"--build-id argument '%s' not a valid hex number\"\nmsgstr \"--build-id argumen '%s' bukan sebuah nomor heksa yang valid\"\n\n#: layout.cc:1548\n#, c-format\nmsgid \"unrecognized --build-id argument '%s'\"\nmsgstr \"tidak dikenal argumen --build-id '%s'\"\n\n#: layout.cc:1866\n#, c-format\nmsgid \"load segment overlap [0x%llx -> 0x%llx] and [0x%llx -> 0x%llx]\"\nmsgstr \"daerah pemuatan saling tumpang tindih [0x%llx -> 0x%llx] dan [0x%llx -> 0x%llx]\"\n\n#: mapfile.cc:70\n#, c-format\nmsgid \"cannot open map file %s: %s\"\nmsgstr \"tidak dapat membuka berkas peta %s: %s\"\n\n#: mapfile.cc:84\n#, c-format\nmsgid \"cannot close map file: %s\"\nmsgstr \"tidak dapat menutup berkas peta: %s\"\n\n#: mapfile.cc:116\n#, c-format\nmsgid \"\"\n\"Archive member included because of file (symbol)\\n\"\n\"\\n\"\nmsgstr \"\"\n\"Kumpulan anggota dimasukan karena berkas (simbol)\\n\"\n\"\\n\"\n\n#: mapfile.cc:159\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Allocating common symbols\\n\"\nmsgstr \"\"\n\"\\n\"\n\"Mengalokasikan simbol umum\\n\"\n\n#: mapfile.cc:161\n#, c-format\nmsgid \"\"\n\"Common symbol       size              file\\n\"\n\"\\n\"\nmsgstr \"\"\n\"Simbol umum         ukuran            berkas\\n\"\n\"\\n\"\n\n#: mapfile.cc:195\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Memory map\\n\"\n\"\\n\"\nmsgstr \"\"\n\"\\n\"\n\"Peta memori\\n\"\n\"\\n\"\n\n#: mapfile.cc:361\n#, c-format\nmsgid \"\"\n\"\\n\"\n\"Discarded input sections\\n\"\n\"\\n\"\nmsgstr \"\"\n\"\\n\"\n\"Mengabaikan daerah masukan\\n\"\n\"\\n\"\n\n#: merge.cc:449\n#, c-format\nmsgid \"%s: %s merged constants size: %lu; input: %zu; output: %zu\\n\"\nmsgstr \"%s: %s gabungan ukuran konstanta: %lu; masukan: %zu; keluaran: %zu\\n\"\n\n#: merge.cc:472\nmsgid \"mergeable string section length not multiple of character size\"\nmsgstr \"panjang daerah string dapat digabungkan bukan kelipatan dari besar karakter\"\n\n#: merge.cc:488\nmsgid \"entry in mergeable string section not null terminated\"\nmsgstr \"masukan dalam daerah string yang dapat digabungkan bukan diakhiri kosong\"\n\n#: merge.cc:605\n#, c-format\nmsgid \"%s: %s input: %zu\\n\"\nmsgstr \"%s: %s masukan: %zu\\n\"\n\n#: merge.h:289\nmsgid \"** merge constants\"\nmsgstr \"** gabungan konstanta\"\n\n#: merge.h:411\nmsgid \"** merge strings\"\nmsgstr \"** gabungan strings\"\n\n#: object.cc:73\nmsgid \"missing SHT_SYMTAB_SHNDX section\"\nmsgstr \"hilang daerah SHT_SYMTAB_SHNDX\"\n\n#: object.cc:117\n#, c-format\nmsgid \"symbol %u out of range for SHT_SYMTAB_SHNDX section\"\nmsgstr \"simbol %u diluar dari jangkauan untuk daerah SHT_SYMTAB_SHNDX\"\n\n#: object.cc:124\n#, c-format\nmsgid \"extended index for symbol %u out of range: %u\"\nmsgstr \"indeks ekstensi untuk simbol %u diluar dari jangkauan: %u\"\n\n#: object.cc:141\n#, c-format\nmsgid \"%s: unsupported ELF machine number %d\"\nmsgstr \"%s: tidak didukung nomor mesin ELF %d\"\n\n#: object.cc:159\n#, c-format\nmsgid \"%s: %s\"\nmsgstr \"%s: %s\"\n\n#: object.cc:196\n#, c-format\nmsgid \"section name section has wrong type: %u\"\nmsgstr \"nama daerah nama memiliki tipe salah: %u\"\n\n#: object.cc:459\n#, c-format\nmsgid \"invalid symbol table name index: %u\"\nmsgstr \"nama indeks tabel simbol tidak valid: %u\"\n\n#: object.cc:465\n#, c-format\nmsgid \"symbol table name section has wrong type: %u\"\nmsgstr \"nama daerah tabel simbol memiliki tipe salah: %u\"\n\n#: object.cc:554\n#, c-format\nmsgid \"section group %u info %u out of range\"\nmsgstr \"nama grup %u info %u diluar dari jangkauan\"\n\n#: object.cc:573\n#, c-format\nmsgid \"symbol %u name offset %u out of range\"\nmsgstr \"simbol %u nama ofset %u diluar dari jangkauan\"\n\n#: object.cc:591\n#, c-format\nmsgid \"symbol %u invalid section index %u\"\nmsgstr \"simbol %u tidak valid daerah indeks %u\"\n\n#: object.cc:644\n#, c-format\nmsgid \"section %u in section group %u out of range\"\nmsgstr \"daerah %u dalam daerah grup %u diluar dari jangkauan\"\n\n#: object.cc:652\n#, c-format\nmsgid \"invalid section group %u refers to earlier section %u\"\nmsgstr \"tidak valid daerah grup %u mereferensikan ke daerah sebelumnya %u\"\n\n#: object.cc:827 reloc.cc:215 reloc.cc:723\n#, c-format\nmsgid \"relocation section %u has bad info %u\"\nmsgstr \"relokasi daerah %u memiliki info %u buruk\"\n\n#: object.cc:1080\nmsgid \"size of symbols is not multiple of symbol size\"\nmsgstr \"ukuran dari simbol bukan kelipatan dari ukuran simbol\"\n\n#: object.cc:1187\n#, c-format\nmsgid \"local symbol %u section name out of range: %u >= %u\"\nmsgstr \"simbol lokal %u nama daerah diluar dari jangkauan: %u >= %u\"\n\n#: object.cc:1245\n#, c-format\nmsgid \"unknown section index %u for local symbol %u\"\nmsgstr \"daerah indeks %u tidak diketahui untuk simbol lokal %u\"\n\n#: object.cc:1254\n#, c-format\nmsgid \"local symbol %u section index %u out of range\"\nmsgstr \"lokal simbol %u daerah indeks %u diluar dari daerah\"\n\n#: object.cc:1619\nmsgid \"incompatible target\"\nmsgstr \"target tidak kompatibel\"\n\n#: object.cc:1816\n#, c-format\nmsgid \"%s: unsupported ELF file type %d\"\nmsgstr \"%s: tipe berkas ELF %d tidak didukung\"\n\n#: object.cc:1835 object.cc:1881 object.cc:1915\n#, c-format\nmsgid \"%s: ELF file too short\"\nmsgstr \"%s: berkas ELF terlalu pendek\"\n\n#: object.cc:1843\n#, c-format\nmsgid \"%s: invalid ELF version 0\"\nmsgstr \"%s: versi ELF 0 tidak valid\"\n\n#: object.cc:1845\n#, c-format\nmsgid \"%s: unsupported ELF version %d\"\nmsgstr \"%s: versi %d ELF tidak didukung\"\n\n#: object.cc:1852\n#, c-format\nmsgid \"%s: invalid ELF class 0\"\nmsgstr \"%s: ELF kelas 0 tidak valid\"\n\n#: object.cc:1858\n#, c-format\nmsgid \"%s: unsupported ELF class %d\"\nmsgstr \"%s: ELF kelas %d tidak didukung\"\n\n#: object.cc:1865\n#, c-format\nmsgid \"%s: invalid ELF data encoding\"\nmsgstr \"%s: pengkodean data ELF tidak valid\"\n\n#: object.cc:1871\n#, c-format\nmsgid \"%s: unsupported ELF data encoding %d\"\nmsgstr \"%s: pengkodean data ELF %d tidak didukung\"\n\n#: object.cc:1891\n#, c-format\nmsgid \"%s: not configured to support 32-bit big-endian object\"\nmsgstr \"%s: tidak dikonfigurasikan untuk mendukung objek 32-bit big-endian\"\n\n#: object.cc:1904\n#, c-format\nmsgid \"%s: not configured to support 32-bit little-endian object\"\nmsgstr \"%s: tidak dikonfigurasikan untuk mendukung objek 32-bit little-endian\"\n\n#: object.cc:1925\n#, c-format\nmsgid \"%s: not configured to support 64-bit big-endian object\"\nmsgstr \"%s: tidak dikonfigurasikan untuk mendukung objek 64-bit big-endian\"\n\n#: object.cc:1938\n#, c-format\nmsgid \"%s: not configured to support 64-bit little-endian object\"\nmsgstr \"%s: tidak dikonfigurasikan untuk mendukung objek 64-bit little-endian\"\n\n#: options.cc:142\n#, c-format\nmsgid \"\"\n\"Usage: %s [options] file...\\n\"\n\"Options:\\n\"\nmsgstr \"\"\n\"Penggunaan: %s [pilihan] berkas...\\n\"\n\"Pilihan:\\n\"\n\n#. config.guess and libtool.m4 look in ld --help output for the\n#. string \"supported targets\".\n#: options.cc:150\n#, c-format\nmsgid \"%s: supported targets:\"\nmsgstr \"%s: target yang didukung:\"\n\n#: options.cc:162\n#, c-format\nmsgid \"Report bugs to %s\\n\"\nmsgstr \"Laporkan bugs ke %s\\n\"\n\n#: options.cc:179 options.cc:189\n#, c-format\nmsgid \"%s: invalid option value (expected an integer): %s\"\nmsgstr \"%s: nilai pilihan tidak valid (diduga sebuah bilangan bulat): %s\"\n\n#: options.cc:199\n#, c-format\nmsgid \"%s: invalid option value (expected a floating point number): %s\"\nmsgstr \"%s: nilai pilihan tidak valid (diduga sebuah bilangan pecahan): %s\"\n\n#: options.cc:208\n#, c-format\nmsgid \"%s: must take a non-empty argument\"\nmsgstr \"%s: harus mengambil sebuah argumen tidak kosong\"\n\n#: options.cc:249\n#, c-format\nmsgid \"%s: must take one of the following arguments: %s\"\nmsgstr \"%s: harus mengambil salah satu dari argumen berikut: %s\"\n\n#: options.cc:275\n#, c-format\nmsgid \"  Supported targets:\\n\"\nmsgstr \"  Target yang didukung:\\n\"\n\n#: options.cc:329\n#, c-format\nmsgid \"unable to parse script file %s\"\nmsgstr \"tidak dapat mengambil berkas script %s\"\n\n#: options.cc:337\n#, c-format\nmsgid \"unable to parse version script file %s\"\nmsgstr \"tidak dapat mengambil berkas script versi %s\"\n\n#: options.cc:363\n#, c-format\nmsgid \"%s: use the --help option for usage information\\n\"\nmsgstr \"%s: gunakan pilihan --help untuk informasi penggunaan\\n\"\n\n#: options.cc:372\n#, c-format\nmsgid \"%s: %s: %s\\n\"\nmsgstr \"%s: %s: %s\\n\"\n\n#: options.cc:393\n#, c-format\nmsgid \"format '%s' not supported; treating as elf (supported formats: elf, binary)\"\nmsgstr \"format '%s' tidak didukung; memperlakukan sebagai elf (format yang didukung: elf, binari)\"\n\n#: options.cc:499\nmsgid \"unexpected argument\"\nmsgstr \"argumen tidak diduga\"\n\n#: options.cc:512 options.cc:573\nmsgid \"missing argument\"\nmsgstr \"hilang argumen\"\n\n#: options.cc:584\nmsgid \"unknown -z option\"\nmsgstr \"pilihan -z tidak diketahui\"\n\n#: options.cc:727\n#, c-format\nmsgid \"ignoring --threads: %s was compiled without thread support\"\nmsgstr \"mengabaikan --threads: %s telah dikompilasi tanpa dukungan thread\"\n\n#: options.cc:734\n#, c-format\nmsgid \"ignoring --thread-count: %s was compiled without thread support\"\nmsgstr \"mengabaikan --thread-count: %s telah dikompilasi tanpa bantuah thread\"\n\n#: options.cc:776\nmsgid \"-shared and -r are incompatible\"\nmsgstr \"-shared dan -r tidak kompatibel\"\n\n#: options.cc:780\nmsgid \"binary output format not compatible with -shared or -r\"\nmsgstr \"format keluaran binari tidak kompatibel dengan -shared atau -r\"\n\n#: options.cc:785\n#, c-format\nmsgid \"--hash-bucket-empty-fraction value %g out of range [0.0, 1.0)\"\nmsgstr \"nilai --hash-bucket-empty-fraction %g diluar dari jangkauan [0.0, 1.0]\"\n\n#: options.cc:852\nmsgid \"May not nest groups\"\nmsgstr \"Mungkin bukan grups nest\"\n\n#: options.cc:864\nmsgid \"Group end without group start\"\nmsgstr \"Grup berakhir tanpa awal grup\"\n\n#. I guess it's neither a long option nor a short option.\n#: options.cc:922\nmsgid \"unknown option\"\nmsgstr \"pilihan tidak diketahui\"\n\n#: options.cc:948\n#, c-format\nmsgid \"%s: missing group end\\n\"\nmsgstr \"%s: hilang grup akhir\\n\"\n\n#: options.h:536\nmsgid \"Report usage information\"\nmsgstr \"Laporan informasi penggunaan\"\n\n#: options.h:538\nmsgid \"Report version information\"\nmsgstr \"Laporan informasi versi\"\n\n#: options.h:540\nmsgid \"Report version and target information\"\nmsgstr \"Laporan versi dan informasi target\"\n\n#: options.h:549\nmsgid \"Allow unresolved references in shared libraries\"\nmsgstr \"Ijinkan referensi tidak terselesaikan dalam perpustakaan terbagi\"\n\n#: options.h:550\nmsgid \"Do not allow unresolved references in shared libraries\"\nmsgstr \"Jangan ijinkan referensi tidak terselesaikan dalam perpustakaan terbagi\"\n\n#: options.h:553\nmsgid \"Only set DT_NEEDED for dynamic libs if used\"\nmsgstr \"Hanya set DT_NEEDED untuk libs dinamis jika digunakan\"\n\n#: options.h:554\nmsgid \"Always DT_NEEDED for dynamic libs\"\nmsgstr \"Selalu DT_NEEDED untuk libs dinamis\"\n\n#: options.h:561\nmsgid \"Set input format\"\nmsgstr \"Set format masukan\"\n\n#: options.h:564\nmsgid \"-l searches for shared libraries\"\nmsgstr \"-l mencari untuk perpustakaan terbagi\"\n\n#: options.h:566\nmsgid \"-l does not search for shared libraries\"\nmsgstr \"-l tidak mencari untuk perpustakaan terbagi\"\n\n#: options.h:570\nmsgid \"Bind defined symbols locally\"\nmsgstr \"Ikat simbol terdefinisi secara lokal\"\n\n#: options.h:573\nmsgid \"Bind defined function symbols locally\"\nmsgstr \"Ikan simbol fungsi terdefinisi secara lokal\"\n\n#: options.h:576\nmsgid \"Generate build ID note\"\nmsgstr \"Buat catatan identitas pembuatan\"\n\n#: options.h:577 options.h:612\nmsgid \"[=STYLE]\"\nmsgstr \"[=GAYA]\"\n\n#: options.h:580\nmsgid \"Check segment addresses for overlaps (default)\"\nmsgstr \"Periksa daerah alamat untuk tumpang tindih (baku)\"\n\n#: options.h:581\nmsgid \"Do not check segment addresses for overlaps\"\nmsgstr \"Jangan periksa daerah alamat untuk tumpang tindih\"\n\n#: options.h:585 options.h:590\nmsgid \"Compress .debug_* sections in the output file\"\nmsgstr \"Kompress .debug_* daerah dalam berkas keluaran\"\n\n#: options.h:591\nmsgid \"[none]\"\nmsgstr \"[kosong]\"\n\n#: options.h:596\nmsgid \"Define common symbols\"\nmsgstr \"Definisikan simbol umum\"\n\n#: options.h:597\nmsgid \"Do not define common symbols\"\nmsgstr \"Jangan definisikan simbol umum\"\n\n#: options.h:599 options.h:601\nmsgid \"Alias for -d\"\nmsgstr \"Alias untuk -d\"\n\n#: options.h:604\nmsgid \"Turn on debugging\"\nmsgstr \"Aktifkan penelusuran\"\n\n#: options.h:605\nmsgid \"[all,files,script,task][,...]\"\nmsgstr \"[semua,berkas,skript,tugas][,...]\"\n\n#: options.h:608\nmsgid \"Define a symbol\"\nmsgstr \"Definisikan sebuah simbol\"\n\n#: options.h:608\nmsgid \"SYMBOL=EXPRESSION\"\nmsgstr \"SIMBOL=EKSPRESI\"\n\n#: options.h:611\nmsgid \"Demangle C++ symbols in log messages\"\nmsgstr \"Demangle simbol C++ dalam pesan pencatatan\"\n\n#: options.h:615\nmsgid \"Do not demangle C++ symbols in log messages\"\nmsgstr \"Jangan demangle simbol C++ dalam pesan pencatatan\"\n\n#: options.h:619\nmsgid \"Try to detect violations of the One Definition Rule\"\nmsgstr \"Coba detekasi pelanggaran dalam Definisi Satu Aturan\"\n\n#: options.h:623\nmsgid \"Set program start address\"\nmsgstr \"Set alamat awal aplikasi\"\n\n#: options.h:623 options.h:766 options.h:768 options.h:770\nmsgid \"ADDRESS\"\nmsgstr \"ALAMAT\"\n\n#: options.h:626\nmsgid \"Export all dynamic symbols\"\nmsgstr \"Ekpor seluruh simbol dinamis\"\n\n#: options.h:629\nmsgid \"Create exception frame header\"\nmsgstr \"Buat pengecualian lembar kepala\"\n\n#: options.h:632\nmsgid \"Treat warnings as errors\"\nmsgstr \"Perlakukan peringatan sebagai kesalahan\"\n\n#: options.h:633\nmsgid \"Do not treat warnings as errors\"\nmsgstr \"Jangan perlakukan peringatan sebagai kesalahan\"\n\n#: options.h:636\nmsgid \"Set shared library name\"\nmsgstr \"Set nama perpustakaan terbagi\"\n\n#: options.h:636 options.h:696\nmsgid \"FILENAME\"\nmsgstr \"NAMA BERKAS\"\n\n#: options.h:639\nmsgid \"Min fraction of empty buckets in dynamic hash\"\nmsgstr \"Bagian minimal dari tempat kosong dalam hash dinamis\"\n\n#: options.h:640\nmsgid \"FRACTION\"\nmsgstr \"BAGIAN\"\n\n#: options.h:643\nmsgid \"Dynamic hash style\"\nmsgstr \"Gaya hash dinamis\"\n\n#: options.h:643\nmsgid \"[sysv,gnu,both]\"\nmsgstr \"[sysv,gnu,keduanya]\"\n\n#: options.h:647\nmsgid \"Set dynamic linker path\"\nmsgstr \"Set jalur penghubung dinamis\"\n\n#: options.h:647\nmsgid \"PROGRAM\"\nmsgstr \"APLIKASI\"\n\n#: options.h:650\nmsgid \"Read only symbol values from FILE\"\nmsgstr \"Hanya baca nilai simbol dari BERKAS\"\n\n#: options.h:650 options.h:684 options.h:751 options.h:779\nmsgid \"FILE\"\nmsgstr \"BERKAS\"\n\n#: options.h:653\nmsgid \"Search for library LIBNAME\"\nmsgstr \"Cari untuk perpustakaan LIBNAME\"\n\n#: options.h:653\nmsgid \"LIBNAME\"\nmsgstr \"LIBNAME\"\n\n#: options.h:656\nmsgid \"Add directory to search path\"\nmsgstr \"Tambahkan direktori ke jalur pencarian\"\n\n#: options.h:656 options.h:714 options.h:717 options.h:721 options.h:745\nmsgid \"DIR\"\nmsgstr \"DIR\"\n\n#: options.h:659\nmsgid \"Ignored for compatibility\"\nmsgstr \"Abaikan untuk kompabilitas\"\n\n#: options.h:659\nmsgid \"EMULATION\"\nmsgstr \"EMULASI\"\n\n#: options.h:662\nmsgid \"Write map file on standard output\"\nmsgstr \"Tulis berkas peta di standar keluaran\"\n\n#: options.h:663\nmsgid \"Write map file\"\nmsgstr \"Tulis berkas peta\"\n\n#: options.h:664\nmsgid \"MAPFILENAME\"\nmsgstr \"NAMABERKASPETA\"\n\n#: options.h:667\nmsgid \"Do not page align data\"\nmsgstr \"Jangan sesuaikan data page\"\n\n#: options.h:669\nmsgid \"Do not page align data, do not make text readonly\"\nmsgstr \"Jangan sesuaikan data page, jangan buat teks baca-saja\"\n\n#: options.h:670\nmsgid \"Page align data, make text readonly\"\nmsgstr \"Sesuaikan data halaman, buat teks baca saja\"\n\n#: options.h:673\nmsgid \"Enable use of DT_RUNPATH and DT_FLAGS\"\nmsgstr \"Aktifkan penggunaan DT_RUNPATH dan DT_FLAGS\"\n\n#: options.h:674\nmsgid \"Disable use of DT_RUNPATH and DT_FLAGS\"\nmsgstr \"Nonaktifkan penggunaan DT_RUNPATH dan DT_FLAGS\"\n\n#: options.h:677\nmsgid \"Create an output file even if errors occur\"\nmsgstr \"Buat sebuah berkas keluaran walaupun terjadi kesalahan\"\n\n#: options.h:680 options.h:808\nmsgid \"Report undefined symbols (even with --shared)\"\nmsgstr \"Laporkan simbol tidak terdefinisi (walaupun dengan --shared)\"\n\n#: options.h:684\nmsgid \"Set output file name\"\nmsgstr \"Set nama berkas keluaran\"\n\n#: options.h:687\nmsgid \"Optimize output file size\"\nmsgstr \"Optimasi besar berkas keluaran\"\n\n#: options.h:687\nmsgid \"LEVEL\"\nmsgstr \"TINGKAT\"\n\n#: options.h:690\nmsgid \"Set output format\"\nmsgstr \"Set format keluaran\"\n\n#: options.h:690\nmsgid \"[binary]\"\nmsgstr \"[binari]\"\n\n#: options.h:693\nmsgid \"Preread archive symbols when multi-threaded\"\nmsgstr \"Baca terlebih dahulu kumpulan simbol ketika multi-threaded\"\n\n#: options.h:695\nmsgid \"Print symbols defined and used for each input\"\nmsgstr \"Tampilkan simbol didefinisikan dan digunakan untuk setiap masukan\"\n\n#: options.h:699\nmsgid \"Ignored for SVR4 compatibility\"\nmsgstr \"Abaikan untuk kompabilitas SVR4\"\n\n#: options.h:702\nmsgid \"Generate relocations in output\"\nmsgstr \"Buat relokasi dalam keluaran\"\n\n#: options.h:705\nmsgid \"Generate relocatable output\"\nmsgstr \"Buat relokasi keluaran\"\n\n#: options.h:708\nmsgid \"Relax branches on certain targets\"\nmsgstr \"Percabangan relaks dalam beberapa target\"\n\n#: options.h:714 options.h:717\nmsgid \"Add DIR to runtime search path\"\nmsgstr \"Tambahkan DIR ke jalur pencarian waktu jalan\"\n\n#: options.h:720\nmsgid \"Add DIR to link time shared library search path\"\nmsgstr \"Tambahkan DIR ke jalur pencarian waktu penyambungan perpustakaan terbagi\"\n\n#: options.h:724\nmsgid \"Strip all symbols\"\nmsgstr \"Hapus seluruh simbol\"\n\n#: options.h:726\nmsgid \"Strip debugging information\"\nmsgstr \"Hapus informasi penelusuran\"\n\n#: options.h:728\nmsgid \"Emit only debug line number information\"\nmsgstr \"Hanya keluarkan informasi nomor baris penelusuran\"\n\n#: options.h:730\nmsgid \"Strip debug symbols that are unused by gdb (at least versions <= 6.7)\"\nmsgstr \"Hapus simbol penelusuran yang tidak digunakan oleh gdb (paling tidak versi < 6.7)\"\n\n#: options.h:734\nmsgid \"Generate shared library\"\nmsgstr \"Buat perpustakaan terbagi\"\n\n#: options.h:739\nmsgid \"Do not link against shared libraries\"\nmsgstr \"Jangan sambungkan terhadap perpustakaan terbagi\"\n\n#: options.h:742\nmsgid \"Print resource usage statistics\"\nmsgstr \"Tampilkan statistik penggunaan sumber daya\"\n\n#: options.h:745\nmsgid \"Set target system root directory\"\nmsgstr \"Set target direktori root sistem\"\n\n#: options.h:748\nmsgid \"Print the name of each input file\"\nmsgstr \"Tampilkan nama dari setiap berkas masukan\"\n\n#: options.h:751\nmsgid \"Read linker script\"\nmsgstr \"Baca script penyambung\"\n\n#: options.h:754\nmsgid \"Run the linker multi-threaded\"\nmsgstr \"Jalankan penyambung multi-threaded\"\n\n#: options.h:755\nmsgid \"Do not run the linker multi-threaded\"\nmsgstr \"Jangan jalankan penyambung multi-threaded\"\n\n#: options.h:757\nmsgid \"Number of threads to use\"\nmsgstr \"Jumlah dari thread yang digunakan\"\n\n#: options.h:757 options.h:759 options.h:761 options.h:763\nmsgid \"COUNT\"\nmsgstr \"JUMLAH\"\n\n#: options.h:759\nmsgid \"Number of threads to use in initial pass\"\nmsgstr \"Jumlah dari thread yang digunakan dalam tahap awal\"\n\n#: options.h:761\nmsgid \"Number of threads to use in middle pass\"\nmsgstr \"Jumlah thread yang digunakan dalam tahap perantara\"\n\n#: options.h:763\nmsgid \"Number of threads to use in final pass\"\nmsgstr \"Jumlah dari thread yang digunakan dalam tahap akhir\"\n\n#: options.h:766\nmsgid \"Set the address of the bss segment\"\nmsgstr \"Set alamat dari bagian bss\"\n\n#: options.h:768\nmsgid \"Set the address of the data segment\"\nmsgstr \"Set alamat dari bagian data\"\n\n#: options.h:770\nmsgid \"Set the address of the text segment\"\nmsgstr \"Set alamat dari bagian teks\"\n\n#: options.h:773\nmsgid \"Create undefined reference to SYMBOL\"\nmsgstr \"Buat referensi tidak terdefinisi ke SIMBOL\"\n\n#: options.h:773 options.h:786 options.h:789\nmsgid \"SYMBOL\"\nmsgstr \"SIMBOL\"\n\n#: options.h:776\nmsgid \"Synonym for --debug=files\"\nmsgstr \"Sinonim untuk --debug=berkas\"\n\n#: options.h:779\nmsgid \"Read version script\"\nmsgstr \"Baca versi script\"\n\n#: options.h:782\nmsgid \"Include all archive contents\"\nmsgstr \"Masukan seluruh isi kumpulan\"\n\n#: options.h:783\nmsgid \"Include only needed archive contents\"\nmsgstr \"Masukan hanya isi kumpulan yang dibutuhkan\"\n\n#: options.h:786\nmsgid \"Use wrapper functions for SYMBOL\"\nmsgstr \"Gunakan wrapper fungsi untuk SIMBOL\"\n\n#: options.h:789\nmsgid \"Trace references to symbol\"\nmsgstr \"Telusuri referensi ke simbol\"\n\n#: options.h:792\nmsgid \"Default search path for Solaris compatibility\"\nmsgstr \"Jalur pencarian baku untuk kompabilitas solaris\"\n\n#: options.h:793\nmsgid \"PATH\"\nmsgstr \"JALUR\"\n\n#: options.h:796\nmsgid \"Start a library search group\"\nmsgstr \"Awal sebuah perpustakaan grup pencarian\"\n\n#: options.h:798\nmsgid \"End a library search group\"\nmsgstr \"Akhir sebuah perpustakaan grup pencarian\"\n\n#: options.h:803\nmsgid \"Sort dynamic relocs\"\nmsgstr \"Urutkan relokasi dinamis\"\n\n#: options.h:804\nmsgid \"Do not sort dynamic relocs\"\nmsgstr \"Jangan urutkan relokasi dinamis\"\n\n#: options.h:806\nmsgid \"Set common page size to SIZE\"\nmsgstr \"Set ukuran halaman umum ke BESAR\"\n\n#: options.h:806 options.h:813\nmsgid \"SIZE\"\nmsgstr \"BESAR\"\n\n#: options.h:811\nmsgid \"Mark output as requiring executable stack\"\nmsgstr \"Tandai keluaran sebagai stack eksekusi yang dibutuhkan\"\n\n#: options.h:813\nmsgid \"Set maximum page size to SIZE\"\nmsgstr \"Set ukuran maksimal halaman ke UKURAN\"\n\n#: options.h:815\nmsgid \"Mark output as not requiring executable stack\"\nmsgstr \"Tandai keluaran sebagai tidak membutuhkan stack eksekusi\"\n\n#: options.h:817\nmsgid \"Mark DSO to be initialized first at runtime\"\nmsgstr \"Tandai DSO untuk diinisialisasi terlebih dahulu di waktu jalan\"\n\n#: options.h:820\nmsgid \"Mark object to interpose all DSOs but executable\"\nmsgstr \"Tandai objek untuk interpose seluruh DSO tetapi eksekusi\"\n\n#: options.h:823\nmsgid \"Mark object requiring immediate process\"\nmsgstr \"Tandai objek membutuhkan proses perantara\"\n\n#: options.h:826\nmsgid \"Mark object not to use default search paths\"\nmsgstr \"Tandai objek tidak menggunakan jalur pencarian baku\"\n\n#: options.h:829\nmsgid \"Mark DSO non-deletable at runtime\"\nmsgstr \"Tandai DSO tidak dapat dihapus di waktu jalan\"\n\n#: options.h:832\nmsgid \"Mark DSO not available to dlopen\"\nmsgstr \"Tandai DSO tidak tersedia di dlopen\"\n\n#: options.h:835\nmsgid \"Mark DSO not available to dldump\"\nmsgstr \"Tandai DSO tidak tersedia ke dldump\"\n\n#: options.h:838\nmsgid \"Where possible mark variables read-only after relocation\"\nmsgstr \"Dimana memungkinkan tanda variabel baca-saja setelah relokasi\"\n\n#: options.h:839\nmsgid \"Don't mark variables read-only after relocation\"\nmsgstr \"Jangan tandai variabel baca-saja setelah relokasi\"\n\n#: output.cc:1098\nmsgid \"section group retained but group element discarded\"\nmsgstr \"daerah grup dijaga tetapi elemen grup diabaikan\"\n\n#: output.cc:1800\n#, c-format\nmsgid \"invalid alignment %lu for section \\\"%s\\\"\"\nmsgstr \"alignment %lu tidak valid untuk daerah \\\"%s\\\"\"\n\n#: output.cc:3159\n#, c-format\nmsgid \"nobits section %s may not precede progbits section %s in same segment\"\nmsgstr \"daerah nobits %s tidak boleh mengawali daerah progbits %s dalam daerah yang sama\"\n\n#: output.cc:3329\n#, c-format\nmsgid \"%s: open: %s\"\nmsgstr \"%s: buka: %s\"\n\n#: output.cc:3350\n#, c-format\nmsgid \"%s: mremap: %s\"\nmsgstr \"%s: mremap: %s\"\n\n#: output.cc:3387\n#, c-format\nmsgid \"%s: lseek: %s\"\nmsgstr \"%s: lseek: %s\"\n\n#: output.cc:3390 output.cc:3427\n#, c-format\nmsgid \"%s: write: %s\"\nmsgstr \"%s: tulis: %s\"\n\n#: output.cc:3398\n#, c-format\nmsgid \"%s: mmap: %s\"\nmsgstr \"%s: mmap: %s\"\n\n#: output.cc:3408\n#, c-format\nmsgid \"%s: munmap: %s\"\nmsgstr \"%s: munmap: %s\"\n\n#: output.cc:3425\n#, c-format\nmsgid \"%s: write: unexpected 0 return-value\"\nmsgstr \"%s: tulis: tidak terduga 0 nilai-kembali\"\n\n#: output.cc:3439\n#, c-format\nmsgid \"%s: close: %s\"\nmsgstr \"%s: tutup: %s\"\n\n#: output.h:415\nmsgid \"** section headers\"\nmsgstr \"** daerah kepala\"\n\n#: output.h:451\nmsgid \"** segment headers\"\nmsgstr \"** bagian kepala\"\n\n#: output.h:490\nmsgid \"** file header\"\nmsgstr \"** berkas kepala\"\n\n#: output.h:696\nmsgid \"** fill\"\nmsgstr \"** isi\"\n\n#: output.h:850\nmsgid \"** string table\"\nmsgstr \"** tabel string\"\n\n#: output.h:1161\nmsgid \"** dynamic relocs\"\nmsgstr \"** relokasi dinamis\"\n\n#: output.h:1162 output.h:1498\nmsgid \"** relocs\"\nmsgstr \"** relokasi\"\n\n#: output.h:1523\nmsgid \"** group\"\nmsgstr \"** grup\"\n\n#: output.h:1630\nmsgid \"** GOT\"\nmsgstr \"** GOT\"\n\n#: output.h:1772\nmsgid \"** dynamic\"\nmsgstr \"** dinamis\"\n\n#: output.h:1890\nmsgid \"** symtab xindex\"\nmsgstr \"** symtab xindex\"\n\n#: parameters.cc:87\n#, c-format\nmsgid \"unrecognized output format %s\"\nmsgstr \"format keluaran tidak diketahui %s\"\n\n#: powerpc.cc:1086 sparc.cc:1569 x86_64.cc:957\nmsgid \"requires unsupported dynamic reloc; recompile with -fPIC\"\nmsgstr \"relokasi dinamis yang dibutuhkan tidak didukung; rekompilasi dengan -fPIC\"\n\n#: powerpc.cc:1447 sparc.cc:2237 x86_64.cc:1561\n#, c-format\nmsgid \"%s: unsupported REL reloc section\"\nmsgstr \"%s: daerah relokasi REL tidak didukung\"\n\n#: readsyms.cc:150\n#, c-format\nmsgid \"%s: file is empty\"\nmsgstr \"%s: berkas kosong\"\n\n#. Here we have to handle any other input file types we need.\n#: readsyms.cc:471\n#, c-format\nmsgid \"%s: not an object or archive\"\nmsgstr \"%s: bukan sebuah objek atau kumpulan\"\n\n#: reduced_debug_output.cc:240\nmsgid \"Debug abbreviations extend beyond .debug_abbrev section; failed to reduce debug abbreviations\"\nmsgstr \"Kependekan debug melewati daerah .debug_abbrev; gagai untuk mengurangi kependekan penelusuran\"\n\n#: reduced_debug_output.cc:326\nmsgid \"Extremely large compile unit in debug info; failed to reduce debug info\"\nmsgstr \"Ekstremely satuan kompilasi besar dalam informasi penelusuran; gagal untuk mengurangi informasi penelusuran\"\n\n#: reduced_debug_output.cc:334\nmsgid \"Debug info extends beyond .debug_info section;failed to reduce debug info\"\nmsgstr \"Informasi penelusuran melewati daerah .debug_info; gagal untuk mengurangi informasi penelusuran\"\n\n#: reduced_debug_output.cc:354 reduced_debug_output.cc:396\nmsgid \"Invalid DIE in debug info; failed to reduce debug info\"\nmsgstr \"Informasi debugu dalam DIE tidak valid; gagal untuk mengurangi informasi debug\"\n\n#: reduced_debug_output.cc:377\nmsgid \"Debug info extends beyond .debug_info section; failed to reduce debug info\"\nmsgstr \"Informasi debug melewati daerah .debug_info; gagal mengurangi informasi penelusuran\"\n\n#: reloc.cc:239 reloc.cc:743\n#, c-format\nmsgid \"relocation section %u uses unexpected symbol table %u\"\nmsgstr \"daerah relokasi %u menggunakan tabel simbol tidak terduga %u\"\n\n#: reloc.cc:254 reloc.cc:761\n#, c-format\nmsgid \"unexpected entsize for reloc section %u: %lu != %u\"\nmsgstr \"tidak terduga entsize untuk daerah relokasi %u: %lu != %u\"\n\n#: reloc.cc:263 reloc.cc:770\n#, c-format\nmsgid \"reloc section %u size %lu uneven\"\nmsgstr \"daerah relokasi %u besar %lu tidak genap\"\n\n#: reloc.cc:992\n#, c-format\nmsgid \"reloc section size %zu is not a multiple of reloc size %d\\n\"\nmsgstr \"ukuran daerah relokasi %zu bukan kelipatan dari ukuran relokasi %d\\n\"\n\n#. We should only see externally visible symbols in the symbol\n#. table.\n#: resolve.cc:170\nmsgid \"invalid STB_LOCAL symbol in external symbols\"\nmsgstr \"simbol STB_LOCAL tidak valid dalam simbol eksternal\"\n\n#. Any target which wants to handle STB_LOOS, etc., needs to\n#. define a resolve method.\n#: resolve.cc:176\nmsgid \"unsupported symbol binding\"\nmsgstr \"pengikatan simbol tidak diduga\"\n\n#. FIXME: Do a better job of reporting locations.\n#: resolve.cc:367\n#, c-format\nmsgid \"%s: multiple definition of %s\"\nmsgstr \"%s: definisi ganda dari %s\"\n\n#: resolve.cc:368 resolve.cc:373\nmsgid \"command line\"\nmsgstr \"baris perintah\"\n\n#: resolve.cc:370\n#, c-format\nmsgid \"%s: previous definition here\"\nmsgstr \"%s: definisi sebelumnya disini\"\n\n#: script-sections.cc:432\nmsgid \"dot may not move backward\"\nmsgstr \"dot tidak boleh bergerak kebelakang\"\n\n#: script-sections.cc:498\nmsgid \"** expression\"\nmsgstr \"** ekspresi\"\n\n#: script-sections.cc:684\nmsgid \"fill value is not absolute\"\nmsgstr \"nilai isi tidak absolut\"\n\n#: script-sections.cc:1693\n#, c-format\nmsgid \"alignment of section %s is not absolute\"\nmsgstr \"penyesuaian dari daerah %s tidak absolut\"\n\n#: script-sections.cc:1737\n#, c-format\nmsgid \"subalign of section %s is not absolute\"\nmsgstr \"subalign dari daerah %s tidak absolut\"\n\n#: script-sections.cc:1752\n#, c-format\nmsgid \"fill of section %s is not absolute\"\nmsgstr \"isi dari daerah %s tidak absolut\"\n\n#: script-sections.cc:1828\nmsgid \"SPECIAL constraints are not implemented\"\nmsgstr \"konstrain SPESIAL tidak terimplementasi\"\n\n#: script-sections.cc:1870\nmsgid \"mismatched definition for constrained sections\"\nmsgstr \"definisi tidak cocok untuk daerah konstrain\"\n\n#: script-sections.cc:2395\nmsgid \"DATA_SEGMENT_ALIGN may only appear once in a linker script\"\nmsgstr \"DATA_SEGMENT_ALIGN hanya mungkin muncul sekali dalam script linker\"\n\n#: script-sections.cc:2406\nmsgid \"DATA_SEGMENT_RELRO_END may only appear once in a linker script\"\nmsgstr \"DATA_SEGMENT_RELRO_END hanya mungkin muncul sekali dalam script linker\"\n\n#: script-sections.cc:2411\nmsgid \"DATA_SEGMENT_RELRO_END must follow DATA_SEGMENT_ALIGN\"\nmsgstr \"DATA_SEGMENT_RELRO_END harus mengikuti DATA_SEGMENT_ALIGN\"\n\n#: script-sections.cc:2570\nmsgid \"no matching section constraint\"\nmsgstr \"tidak ada kecocokan daerah konstrain\"\n\n#: script-sections.cc:2890\nmsgid \"TLS sections are not adjacent\"\nmsgstr \"daerah TLS tidak berurutan\"\n\n#: script-sections.cc:3016\nmsgid \"allocated section not in any segment\"\nmsgstr \"daerah yang dialokasikan tidka dalam bagian apapun\"\n\n#: script-sections.cc:3048\n#, c-format\nmsgid \"no segment %s\"\nmsgstr \"bukan bagian %s\"\n\n#: script-sections.cc:3058\nmsgid \"section in two PT_LOAD segments\"\nmsgstr \"daerah dalam dua bagian PT_LOAD\"\n\n#: script-sections.cc:3065\nmsgid \"allocated section not in any PT_LOAD segment\"\nmsgstr \"daerah dialokasikan tidak dalam bagian PT_LOAD apapun\"\n\n#: script-sections.cc:3093\nmsgid \"may only specify load address for PT_LOAD segment\"\nmsgstr \"mungkin hanya dispesifikasikan alamat pemuatan untuk bagian PT_LOAD\"\n\n#: script-sections.cc:3117\n#, c-format\nmsgid \"PHDRS load address overrides section %s load address\"\nmsgstr \"PHDRS alamat pemuatan memaksa daerah %s alamat pemuatan\"\n\n#. We could support this if we wanted to.\n#: script-sections.cc:3128\nmsgid \"using only one of FILEHDR and PHDRS is not currently supported\"\nmsgstr \"hanya menggunakan satu dari FILEHDR dan PHDRS belum didukung\"\n\n#: script-sections.cc:3143\nmsgid \"sections loaded on first page without room for file and program headers are not supported\"\nmsgstr \"daerah dimuat dalam halaman pertama tanpa ruang untuk berkas dan aplikasi kepala tidak didukung\"\n\n#: script-sections.cc:3149\nmsgid \"using FILEHDR and PHDRS on more than one PT_LOAD segment is not currently supported\"\nmsgstr \"menggunakan FILEHDR dan PHDRS di lebih dari sekali bagian PT_LOAD saat ini belum didukung\"\n\n#: script.cc:1063\nmsgid \"invalid use of PROVIDE for dot symbol\"\nmsgstr \"penggunaan tidak valid dari PROVIDE untuk simbol dot\"\n\n#: script.cc:1065\nmsgid \"invalid assignment to dot outside of SECTIONS\"\nmsgstr \"penempatan tidak valid untuk dot diluar dari DAERAH\"\n\n#: script.cc:1995\n#, c-format\nmsgid \"%s:%d:%d: %s\"\nmsgstr \"%s:%d:%d: %s\"\n\n#. There are some options that we could handle here--e.g.,\n#. -lLIBRARY.  Should we bother?\n#: script.cc:2143\n#, c-format\nmsgid \"%s:%d:%d: ignoring command OPTION; OPTION is only valid for scripts specified via -T/--script\"\nmsgstr \"%s:%d:%d mengabaikan perintah OPTION; OPTION hanya valid untuk script dispesifikasikan melalui -T/--script\"\n\n#: script.cc:2168\n#, c-format\nmsgid \"%s:%d:%d: ignoring SEARCH_DIR; SEARCH_DIR is only valid for scripts specified via -T/--script\"\nmsgstr \"%s:%d:%d: mengabaikan SEARCH_DIR; SEARCH_DIR hanya valid untuk script dispesifikasikan melalui -T/--script\"\n\n#: script.cc:2411 script.cc:2425\n#, c-format\nmsgid \"%s:%d:%d: DATA_SEGMENT_ALIGN not in SECTIONS clause\"\nmsgstr \"%s:%d:%d: DATA_SEGMENT_ALIGN tidak dalam clause DAERAH\"\n\n#: script.cc:2543\nmsgid \"unknown PHDR type (try integer)\"\nmsgstr \"tipe PHDR tidak diketahui (coba bilangan bulat)\"\n\n#: stringpool.cc:526\n#, c-format\nmsgid \"%s: %s entries: %zu; buckets: %zu\\n\"\nmsgstr \"%s: %s masukan: %zu; buckets: %zu\\n\"\n\n#: stringpool.cc:530\n#, c-format\nmsgid \"%s: %s entries: %zu\\n\"\nmsgstr \"%s: %s masukan: %zu\\n\"\n\n#: stringpool.cc:533\n#, c-format\nmsgid \"%s: %s Stringdata structures: %zu\\n\"\nmsgstr \"%s: %s struktur Stringdata: %zu\\n\"\n\n#: symtab.cc:623\n#, c-format\nmsgid \"%s: reference to %s\"\nmsgstr \"%s: referensi ke %s\"\n\n#: symtab.cc:625\n#, c-format\nmsgid \"%s: definition of %s\"\nmsgstr \"%s: definisi dari %s\"\n\n#: symtab.cc:860\n#, c-format\nmsgid \"bad global symbol name offset %u at %zu\"\nmsgstr \"ofset nama simbol global buruk %u di %zu\"\n\n#: symtab.cc:999\nmsgid \"--just-symbols does not make sense with a shared object\"\nmsgstr \"--just-symbols tidak masuk akal dengan sebuah objek terbagi\"\n\n#: symtab.cc:1005\nmsgid \"too few symbol versions\"\nmsgstr \"terlalu sedikit versi simbol\"\n\n#: symtab.cc:1054\n#, c-format\nmsgid \"bad symbol name offset %u at %zu\"\nmsgstr \"ofset nama simbol buruk %u di %zu\"\n\n#: symtab.cc:1117\n#, c-format\nmsgid \"versym for symbol %zu out of range: %u\"\nmsgstr \"versym untuk simbol %zu diluar dari jangkauan: %u\"\n\n#: symtab.cc:1125\n#, c-format\nmsgid \"versym for symbol %zu has no name: %u\"\nmsgstr \"versym untuk symbol %zu tidak memiliki nama: %u\"\n\n#: symtab.cc:2035 symtab.cc:2251\n#, c-format\nmsgid \"%s: unsupported symbol section 0x%x\"\nmsgstr \"%s: daerah simbol tidak didukung 0x%x\"\n\n#: symtab.cc:2409\n#, c-format\nmsgid \"%s: undefined reference to '%s', version '%s'\"\nmsgstr \"%s: referensi ke '%s' tidak terdefinisi, versi '%s'\"\n\n#: symtab.cc:2414\n#, c-format\nmsgid \"%s: undefined reference to '%s'\"\nmsgstr \"%s: referensi ke '%s' tidak terdefinisi\"\n\n#: symtab.cc:2498\n#, c-format\nmsgid \"%s: symbol table entries: %zu; buckets: %zu\\n\"\nmsgstr \"%s: masukan tabel simbol: %zu; buckets: %zu\\n\"\n\n#: symtab.cc:2501\n#, c-format\nmsgid \"%s: symbol table entries: %zu\\n\"\nmsgstr \"%s: masukan tabel simbol: %zu\\n\"\n\n#: symtab.cc:2572\n#, c-format\nmsgid \"while linking %s: symbol '%s' defined in multiple places (possible ODR violation):\"\nmsgstr \"ketika menyambungkan %s: simbol '%s' didefinisikan dalam beberapa tempat (mungkin penyimpangan ODR):\"\n\n#: target-reloc.h:247\nmsgid \"Relocation refers to discarded comdat section\"\nmsgstr \"Relokasi mereferensikan ke daerah comdat yang diabaikan\"\n\n#: target-reloc.h:278\n#, c-format\nmsgid \"reloc has bad offset %zu\"\nmsgstr \"relokasi memliki ofset %zu buruk\"\n\n#: tls.h:59\nmsgid \"TLS relocation out of range\"\nmsgstr \"relokasi TLS diluar dari jangkauan\"\n\n#: tls.h:73\nmsgid \"TLS relocation against invalid instruction\"\nmsgstr \"relokasi TLS terhadap instruksi tidak valid\"\n\n#. This output is intended to follow the GNU standards.\n#: version.cc:64\n#, c-format\nmsgid \"Copyright 2008 Free Software Foundation, Inc.\\n\"\nmsgstr \"Hak Cipta 2008 Free Software Foundation, Inc.\\n\"\n\n#: version.cc:65\n#, c-format\nmsgid \"\"\n\"This program is free software; you may redistribute it under the terms of\\n\"\n\"the GNU General Public License version 3 or (at your option) a later version.\\n\"\n\"This program has absolutely no warranty.\\n\"\nmsgstr \"\"\n\"Aplikasi ini adalah aplikasi bebas; anda boleh meredistribusikannya dibawah\\n\"\n\"perjanjian dari GNU General Public License versi 3 atau (menurut pilihan anda)\\n\"\n\" di versi selanjutnya.\\n\"\n\"Aplikasi ini benar benar tidak bergaransi.\\n\"\n\n#: workqueue-threads.cc:106\n#, c-format\nmsgid \"%s failed: %s\"\nmsgstr \"%s gagal: %s\"\n\n#: x86_64.cc:2104\n#, c-format\nmsgid \"unsupported reloc type %u\"\nmsgstr \"tipe relokasi %u tidak didukung\"\n\n#: x86_64.cc:2441\n#, c-format\nmsgid \"unsupported reloc %u against local symbol\"\nmsgstr \"relokasi %u terhadap simbol lokal tidak didukung\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/ld.1": ".\\\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)\n.\\\"\n.\\\" Standard preamble:\n.\\\" ========================================================================\n.de Sh \\\" Subsection heading\n.br\n.if t .Sp\n.ne 5\n.PP\n\\fB\\\\$1\\fR\n.PP\n..\n.de Sp \\\" Vertical space (when we can't use .PP)\n.if t .sp .5v\n.if n .sp\n..\n.de Vb \\\" Begin verbatim text\n.ft CW\n.nf\n.ne \\\\$1\n..\n.de Ve \\\" End verbatim text\n.ft R\n.fi\n..\n.\\\" Set up some character translations and predefined strings.  \\*(-- will\n.\\\" give an unbreakable dash, \\*(PI will give pi, \\*(L\" will give a left\n.\\\" double quote, and \\*(R\" will give a right double quote.  \\*(C+ will\n.\\\" give a nicer C++.  Capital omega is used to do unbreakable dashes and\n.\\\" therefore won't be available.  \\*(C` and \\*(C' expand to `' in nroff,\n.\\\" nothing in troff, for use with C<>.\n.tr \\(*W-\n.ds C+ C\\v'-.1v'\\h'-1p'\\s-2+\\h'-1p'+\\s0\\v'.1v'\\h'-1p'\n.ie n \\{\\\n.    ds -- \\(*W-\n.    ds PI pi\n.    if (\\n(.H=4u)&(1m=24u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-12u'-\\\" diablo 10 pitch\n.    if (\\n(.H=4u)&(1m=20u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-8u'-\\\"  diablo 12 pitch\n.    ds L\" \"\"\n.    ds R\" \"\"\n.    ds C` \"\"\n.    ds C' \"\"\n'br\\}\n.el\\{\\\n.    ds -- \\|\\(em\\|\n.    ds PI \\(*p\n.    ds L\" ``\n.    ds R\" ''\n'br\\}\n.\\\"\n.\\\" Escape single quotes in literal strings from groff's Unicode transform.\n.ie \\n(.g .ds Aq \\(aq\n.el       .ds Aq '\n.\\\"\n.\\\" If the F register is turned on, we'll generate index entries on stderr for\n.\\\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index\n.\\\" entries marked with X<> in POD.  Of course, you'll have to process the\n.\\\" output yourself in some meaningful fashion.\n.ie \\nF \\{\\\n.    de IX\n.    tm Index:\\\\$1\\t\\\\n%\\t\"\\\\$2\"\n..\n.    nr % 0\n.    rr F\n.\\}\n.el \\{\\\n.    de IX\n..\n.\\}\n.\\\"\n.\\\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).\n.\\\" Fear.  Run.  Save yourself.  No user-serviceable parts.\n.    \\\" fudge factors for nroff and troff\n.if n \\{\\\n.    ds #H 0\n.    ds #V .8m\n.    ds #F .3m\n.    ds #[ \\f1\n.    ds #] \\fP\n.\\}\n.if t \\{\\\n.    ds #H ((1u-(\\\\\\\\n(.fu%2u))*.13m)\n.    ds #V .6m\n.    ds #F 0\n.    ds #[ \\&\n.    ds #] \\&\n.\\}\n.    \\\" simple accents for nroff and troff\n.if n \\{\\\n.    ds ' \\&\n.    ds ` \\&\n.    ds ^ \\&\n.    ds , \\&\n.    ds ~ ~\n.    ds /\n.\\}\n.if t \\{\\\n.    ds ' \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\'\\h\"|\\\\n:u\"\n.    ds ` \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\`\\h'|\\\\n:u'\n.    ds ^ \\\\k:\\h'-(\\\\n(.wu*10/11-\\*(#H)'^\\h'|\\\\n:u'\n.    ds , \\\\k:\\h'-(\\\\n(.wu*8/10)',\\h'|\\\\n:u'\n.    ds ~ \\\\k:\\h'-(\\\\n(.wu-\\*(#H-.1m)'~\\h'|\\\\n:u'\n.    ds / \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\z\\(sl\\h'|\\\\n:u'\n.\\}\n.    \\\" troff and (daisy-wheel) nroff accents\n.ds : \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H+.1m+\\*(#F)'\\v'-\\*(#V'\\z.\\h'.2m+\\*(#F'.\\h'|\\\\n:u'\\v'\\*(#V'\n.ds 8 \\h'\\*(#H'\\(*b\\h'-\\*(#H'\n.ds o \\\\k:\\h'-(\\\\n(.wu+\\w'\\(de'u-\\*(#H)/2u'\\v'-.3n'\\*(#[\\z\\(de\\v'.3n'\\h'|\\\\n:u'\\*(#]\n.ds d- \\h'\\*(#H'\\(pd\\h'-\\w'~'u'\\v'-.25m'\\f2\\(hy\\fP\\v'.25m'\\h'-\\*(#H'\n.ds D- D\\\\k:\\h'-\\w'D'u'\\v'-.11m'\\z\\(hy\\v'.11m'\\h'|\\\\n:u'\n.ds th \\*(#[\\v'.3m'\\s+1I\\s-1\\v'-.3m'\\h'-(\\w'I'u*2/3)'\\s-1o\\s+1\\*(#]\n.ds Th \\*(#[\\s+2I\\s-2\\h'-\\w'I'u*3/5'\\v'-.3m'o\\v'.3m'\\*(#]\n.ds ae a\\h'-(\\w'a'u*4/10)'e\n.ds Ae A\\h'-(\\w'A'u*4/10)'E\n.    \\\" corrections for vroff\n.if v .ds ~ \\\\k:\\h'-(\\\\n(.wu*9/10-\\*(#H)'\\s-2\\u~\\d\\s+2\\h'|\\\\n:u'\n.if v .ds ^ \\\\k:\\h'-(\\\\n(.wu*10/11-\\*(#H)'\\v'-.4m'^\\v'.4m'\\h'|\\\\n:u'\n.    \\\" for low resolution devices (crt and lpr)\n.if \\n(.H>23 .if \\n(.V>19 \\\n\\{\\\n.    ds : e\n.    ds 8 ss\n.    ds o a\n.    ds d- d\\h'-1'\\(ga\n.    ds D- D\\h'-1'\\(hy\n.    ds th \\o'bp'\n.    ds Th \\o'LP'\n.    ds ae ae\n.    ds Ae AE\n.\\}\n.rm #[ #] #H #V #F C\n.\\\" ========================================================================\n.\\\"\n.IX Title \"LD 1\"\n.TH LD 1 \"2009-10-16\" \"binutils-2.20\" \"GNU Development Tools\"\n.\\\" For nroff, turn off justification.  Always turn off hyphenation; it makes\n.\\\" way too many mistakes in technical documents.\n.if n .ad l\n.nh\n.SH \"NAME\"\nld \\- The GNU linker\n.SH \"SYNOPSIS\"\n.IX Header \"SYNOPSIS\"\nld [\\fBoptions\\fR] \\fIobjfile\\fR ...\n.SH \"DESCRIPTION\"\n.IX Header \"DESCRIPTION\"\n\\&\\fBld\\fR combines a number of object and archive files, relocates\ntheir data and ties up symbol references. Usually the last step in\ncompiling a program is to run \\fBld\\fR.\n.PP\n\\&\\fBld\\fR accepts Linker Command Language files written in\na superset of \\s-1AT&T\\s0's Link Editor Command Language syntax,\nto provide explicit and total control over the linking process.\n.PP\nThis man page does not describe the command language; see the\n\\&\\fBld\\fR entry in \\f(CW\\*(C`info\\*(C'\\fR for full details on the command\nlanguage and on other aspects of the \\s-1GNU\\s0 linker.\n.PP\nThis version of \\fBld\\fR uses the general purpose \\s-1BFD\\s0 libraries\nto operate on object files. This allows \\fBld\\fR to read, combine, and\nwrite object files in many different formats\\-\\-\\-for example, \\s-1COFF\\s0 or\n\\&\\f(CW\\*(C`a.out\\*(C'\\fR.  Different formats may be linked together to produce any\navailable kind of object file.\n.PP\nAside from its flexibility, the \\s-1GNU\\s0 linker is more helpful than other\nlinkers in providing diagnostic information.  Many linkers abandon\nexecution immediately upon encountering an error; whenever possible,\n\\&\\fBld\\fR continues executing, allowing you to identify other errors\n(or, in some cases, to get an output file in spite of the error).\n.PP\nThe \\s-1GNU\\s0 linker \\fBld\\fR is meant to cover a broad range of situations,\nand to be as compatible as possible with other linkers.  As a result,\nyou have many choices to control its behavior.\n.SH \"OPTIONS\"\n.IX Header \"OPTIONS\"\nThe linker supports a plethora of command-line options, but in actual\npractice few of them are used in any particular context.\nFor instance, a frequent use of \\fBld\\fR is to link standard Unix\nobject files on a standard, supported Unix system.  On such a system, to\nlink a file \\f(CW\\*(C`hello.o\\*(C'\\fR:\n.PP\n.Vb 1\n\\&        ld \\-o <output> /lib/crt0.o hello.o \\-lc\n.Ve\n.PP\nThis tells \\fBld\\fR to produce a file called \\fIoutput\\fR as the\nresult of linking the file \\f(CW\\*(C`/lib/crt0.o\\*(C'\\fR with \\f(CW\\*(C`hello.o\\*(C'\\fR and\nthe library \\f(CW\\*(C`libc.a\\*(C'\\fR, which will come from the standard search\ndirectories.  (See the discussion of the \\fB\\-l\\fR option below.)\n.PP\nSome of the command-line options to \\fBld\\fR may be specified at any\npoint in the command line.  However, options which refer to files, such\nas \\fB\\-l\\fR or \\fB\\-T\\fR, cause the file to be read at the point at\nwhich the option appears in the command line, relative to the object\nfiles and other file options.  Repeating non-file options with a\ndifferent argument will either have no further effect, or override prior\noccurrences (those further to the left on the command line) of that\noption.  Options which may be meaningfully specified more than once are\nnoted in the descriptions below.\n.PP\nNon-option arguments are object files or archives which are to be linked\ntogether.  They may follow, precede, or be mixed in with command-line\noptions, except that an object file argument may not be placed between\nan option and its argument.\n.PP\nUsually the linker is invoked with at least one object file, but you can\nspecify other forms of binary input files using \\fB\\-l\\fR, \\fB\\-R\\fR,\nand the script command language.  If \\fIno\\fR binary input files at all\nare specified, the linker does not produce any output, and issues the\nmessage \\fBNo input files\\fR.\n.PP\nIf the linker cannot recognize the format of an object file, it will\nassume that it is a linker script.  A script specified in this way\naugments the main linker script used for the link (either the default\nlinker script or the one specified by using \\fB\\-T\\fR).  This feature\npermits the linker to link against a file which appears to be an object\nor an archive, but actually merely defines some symbol values, or uses\n\\&\\f(CW\\*(C`INPUT\\*(C'\\fR or \\f(CW\\*(C`GROUP\\*(C'\\fR to load other objects.  Specifying a\nscript in this way merely augments the main linker script, with the\nextra commands placed after the main script; use the \\fB\\-T\\fR option\nto replace the default linker script entirely, but note the effect of\nthe \\f(CW\\*(C`INSERT\\*(C'\\fR command.\n.PP\nFor options whose names are a single letter,\noption arguments must either follow the option letter without intervening\nwhitespace, or be given as separate arguments immediately following the\noption that requires them.\n.PP\nFor options whose names are multiple letters, either one dash or two can\nprecede the option name; for example, \\fB\\-trace\\-symbol\\fR and\n\\&\\fB\\-\\-trace\\-symbol\\fR are equivalent.  Note\\-\\-\\-there is one exception to\nthis rule.  Multiple letter options that start with a lower case 'o' can\nonly be preceded by two dashes.  This is to reduce confusion with the\n\\&\\fB\\-o\\fR option.  So for example \\fB\\-omagic\\fR sets the output file\nname to \\fBmagic\\fR whereas \\fB\\-\\-omagic\\fR sets the \\s-1NMAGIC\\s0 flag on the\noutput.\n.PP\nArguments to multiple-letter options must either be separated from the\noption name by an equals sign, or be given as separate arguments\nimmediately following the option that requires them.  For example,\n\\&\\fB\\-\\-trace\\-symbol foo\\fR and \\fB\\-\\-trace\\-symbol=foo\\fR are equivalent.\nUnique abbreviations of the names of multiple-letter options are\naccepted.\n.PP\nNote\\-\\-\\-if the linker is being invoked indirectly, via a compiler driver\n(e.g. \\fBgcc\\fR) then all the linker command line options should be\nprefixed by \\fB\\-Wl,\\fR (or whatever is appropriate for the particular\ncompiler driver) like this:\n.PP\n.Vb 1\n\\&          gcc \\-Wl,\\-\\-start\\-group foo.o bar.o \\-Wl,\\-\\-end\\-group\n.Ve\n.PP\nThis is important, because otherwise the compiler driver program may\nsilently drop the linker options, resulting in a bad link.  Confusion\nmay also arise when passing options that require values through a\ndriver, as the use of a space between option and argument acts as\na separator, and causes the driver to pass only the option to the linker\nand the argument to the compiler.  In this case, it is simplest to use\nthe joined forms of both single\\- and multiple-letter options, such as:\n.PP\n.Vb 1\n\\&          gcc foo.o bar.o \\-Wl,\\-eENTRY \\-Wl,\\-Map=a.map\n.Ve\n.PP\nHere is a table of the generic command line switches accepted by the \\s-1GNU\\s0\nlinker:\n.IP \"\\fB@\\fR\\fIfile\\fR\" 4\n.IX Item \"@file\"\nRead command-line options from \\fIfile\\fR.  The options read are\ninserted in place of the original @\\fIfile\\fR option.  If \\fIfile\\fR\ndoes not exist, or cannot be read, then the option will be treated\nliterally, and not removed.\n.Sp\nOptions in \\fIfile\\fR are separated by whitespace.  A whitespace\ncharacter may be included in an option by surrounding the entire\noption in either single or double quotes.  Any character (including a\nbackslash) may be included by prefixing the character to be included\nwith a backslash.  The \\fIfile\\fR may itself contain additional\n@\\fIfile\\fR options; any such options will be processed recursively.\n.IP \"\\fB\\-a\\fR \\fIkeyword\\fR\" 4\n.IX Item \"-a keyword\"\nThis option is supported for \\s-1HP/UX\\s0 compatibility.  The \\fIkeyword\\fR\nargument must be one of the strings \\fBarchive\\fR, \\fBshared\\fR, or\n\\&\\fBdefault\\fR.  \\fB\\-aarchive\\fR is functionally equivalent to\n\\&\\fB\\-Bstatic\\fR, and the other two keywords are functionally equivalent\nto \\fB\\-Bdynamic\\fR.  This option may be used any number of times.\n.IP \"\\fB\\-A\\fR \\fIarchitecture\\fR\" 4\n.IX Item \"-A architecture\"\n.PD 0\n.IP \"\\fB\\-\\-architecture=\\fR\\fIarchitecture\\fR\" 4\n.IX Item \"--architecture=architecture\"\n.PD\nIn the current release of \\fBld\\fR, this option is useful only for the\nIntel 960 family of architectures.  In that \\fBld\\fR configuration, the\n\\&\\fIarchitecture\\fR argument identifies the particular architecture in\nthe 960 family, enabling some safeguards and modifying the\narchive-library search path.\n.Sp\nFuture releases of \\fBld\\fR may support similar functionality for\nother architecture families.\n.IP \"\\fB\\-b\\fR \\fIinput-format\\fR\" 4\n.IX Item \"-b input-format\"\n.PD 0\n.IP \"\\fB\\-\\-format=\\fR\\fIinput-format\\fR\" 4\n.IX Item \"--format=input-format\"\n.PD\n\\&\\fBld\\fR may be configured to support more than one kind of object\nfile.  If your \\fBld\\fR is configured this way, you can use the\n\\&\\fB\\-b\\fR option to specify the binary format for input object files\nthat follow this option on the command line.  Even when \\fBld\\fR is\nconfigured to support alternative object formats, you don't usually need\nto specify this, as \\fBld\\fR should be configured to expect as a\ndefault input format the most usual format on each machine.\n\\&\\fIinput-format\\fR is a text string, the name of a particular format\nsupported by the \\s-1BFD\\s0 libraries.  (You can list the available binary\nformats with \\fBobjdump \\-i\\fR.)\n.Sp\nYou may want to use this option if you are linking files with an unusual\nbinary format.  You can also use \\fB\\-b\\fR to switch formats explicitly (when\nlinking object files of different formats), by including\n\\&\\fB\\-b\\fR \\fIinput-format\\fR before each group of object files in a\nparticular format.\n.Sp\nThe default format is taken from the environment variable\n\\&\\f(CW\\*(C`GNUTARGET\\*(C'\\fR.\n.Sp\nYou can also define the input format from a script, using the command\n\\&\\f(CW\\*(C`TARGET\\*(C'\\fR;\n.IP \"\\fB\\-c\\fR \\fIMRI-commandfile\\fR\" 4\n.IX Item \"-c MRI-commandfile\"\n.PD 0\n.IP \"\\fB\\-\\-mri\\-script=\\fR\\fIMRI-commandfile\\fR\" 4\n.IX Item \"--mri-script=MRI-commandfile\"\n.PD\nFor compatibility with linkers produced by \\s-1MRI\\s0, \\fBld\\fR accepts script\nfiles written in an alternate, restricted command language, described in\nthe \\s-1MRI\\s0 Compatible Script Files section of \\s-1GNU\\s0 ld documentation.\nIntroduce \\s-1MRI\\s0 script files with\nthe option \\fB\\-c\\fR; use the \\fB\\-T\\fR option to run linker\nscripts written in the general-purpose \\fBld\\fR scripting language.\nIf \\fIMRI-cmdfile\\fR does not exist, \\fBld\\fR looks for it in the directories\nspecified by any \\fB\\-L\\fR options.\n.IP \"\\fB\\-d\\fR\" 4\n.IX Item \"-d\"\n.PD 0\n.IP \"\\fB\\-dc\\fR\" 4\n.IX Item \"-dc\"\n.IP \"\\fB\\-dp\\fR\" 4\n.IX Item \"-dp\"\n.PD\nThese three options are equivalent; multiple forms are supported for\ncompatibility with other linkers.  They assign space to common symbols\neven if a relocatable output file is specified (with \\fB\\-r\\fR).  The\nscript command \\f(CW\\*(C`FORCE_COMMON_ALLOCATION\\*(C'\\fR has the same effect.\n.IP \"\\fB\\-e\\fR \\fIentry\\fR\" 4\n.IX Item \"-e entry\"\n.PD 0\n.IP \"\\fB\\-\\-entry=\\fR\\fIentry\\fR\" 4\n.IX Item \"--entry=entry\"\n.PD\nUse \\fIentry\\fR as the explicit symbol for beginning execution of your\nprogram, rather than the default entry point.  If there is no symbol\nnamed \\fIentry\\fR, the linker will try to parse \\fIentry\\fR as a number,\nand use that as the entry address (the number will be interpreted in\nbase 10; you may use a leading \\fB0x\\fR for base 16, or a leading\n\\&\\fB0\\fR for base 8).\n.IP \"\\fB\\-\\-exclude\\-libs\\fR \\fIlib\\fR\\fB,\\fR\\fIlib\\fR\\fB,...\\fR\" 4\n.IX Item \"--exclude-libs lib,lib,...\"\nSpecifies a list of archive libraries from which symbols should not be automatically\nexported.  The library names may be delimited by commas or colons.  Specifying\n\\&\\f(CW\\*(C`\\-\\-exclude\\-libs ALL\\*(C'\\fR excludes symbols in all archive libraries from\nautomatic export.  This option is available only for the i386 \\s-1PE\\s0 targeted\nport of the linker and for \\s-1ELF\\s0 targeted ports.  For i386 \\s-1PE\\s0, symbols\nexplicitly listed in a .def file are still exported, regardless of this\noption.  For \\s-1ELF\\s0 targeted ports, symbols affected by this option will\nbe treated as hidden.\n.IP \"\\fB\\-\\-exclude\\-modules\\-for\\-implib\\fR \\fImodule\\fR\\fB,\\fR\\fImodule\\fR\\fB,...\\fR\" 4\n.IX Item \"--exclude-modules-for-implib module,module,...\"\nSpecifies a list of object files or archive members, from which symbols\nshould not be automatically exported, but which should be copied wholesale\ninto the import library being generated during the link.  The module names\nmay be delimited by commas or colons, and must match exactly the filenames\nused by \\fBld\\fR to open the files; for archive members, this is simply\nthe member name, but for object files the name listed must include and\nmatch precisely any path used to specify the input file on the linker's\ncommand-line.  This option is available only for the i386 \\s-1PE\\s0 targeted port\nof the linker.  Symbols explicitly listed in a .def file are still exported,\nregardless of this option.\n.IP \"\\fB\\-E\\fR\" 4\n.IX Item \"-E\"\n.PD 0\n.IP \"\\fB\\-\\-export\\-dynamic\\fR\" 4\n.IX Item \"--export-dynamic\"\n.IP \"\\fB\\-\\-no\\-export\\-dynamic\\fR\" 4\n.IX Item \"--no-export-dynamic\"\n.PD\nWhen creating a dynamically linked executable, using the \\fB\\-E\\fR\noption or the \\fB\\-\\-export\\-dynamic\\fR option causes the linker to add\nall symbols to the dynamic symbol table.  The dynamic symbol table is the\nset of symbols which are visible from dynamic objects at run time.\n.Sp\nIf you do not use either of these options (or use the\n\\&\\fB\\-\\-no\\-export\\-dynamic\\fR option to restore the default behavior), the\ndynamic symbol table will normally contain only those symbols which are\nreferenced by some dynamic object mentioned in the link.\n.Sp\nIf you use \\f(CW\\*(C`dlopen\\*(C'\\fR to load a dynamic object which needs to refer\nback to the symbols defined by the program, rather than some other\ndynamic object, then you will probably need to use this option when\nlinking the program itself.\n.Sp\nYou can also use the dynamic list to control what symbols should\nbe added to the dynamic symbol table if the output format supports it.\nSee the description of \\fB\\-\\-dynamic\\-list\\fR.\n.Sp\nNote that this option is specific to \\s-1ELF\\s0 targeted ports.  \\s-1PE\\s0 targets\nsupport a similar function to export all symbols from a \\s-1DLL\\s0 or \\s-1EXE\\s0; see\nthe description of \\fB\\-\\-export\\-all\\-symbols\\fR below.\n.IP \"\\fB\\-EB\\fR\" 4\n.IX Item \"-EB\"\nLink big-endian objects.  This affects the default output format.\n.IP \"\\fB\\-EL\\fR\" 4\n.IX Item \"-EL\"\nLink little-endian objects.  This affects the default output format.\n.IP \"\\fB\\-f\\fR \\fIname\\fR\" 4\n.IX Item \"-f name\"\n.PD 0\n.IP \"\\fB\\-\\-auxiliary=\\fR\\fIname\\fR\" 4\n.IX Item \"--auxiliary=name\"\n.PD\nWhen creating an \\s-1ELF\\s0 shared object, set the internal \\s-1DT_AUXILIARY\\s0 field\nto the specified name.  This tells the dynamic linker that the symbol\ntable of the shared object should be used as an auxiliary filter on the\nsymbol table of the shared object \\fIname\\fR.\n.Sp\nIf you later link a program against this filter object, then, when you\nrun the program, the dynamic linker will see the \\s-1DT_AUXILIARY\\s0 field.  If\nthe dynamic linker resolves any symbols from the filter object, it will\nfirst check whether there is a definition in the shared object\n\\&\\fIname\\fR.  If there is one, it will be used instead of the definition\nin the filter object.  The shared object \\fIname\\fR need not exist.\nThus the shared object \\fIname\\fR may be used to provide an alternative\nimplementation of certain functions, perhaps for debugging or for\nmachine specific performance.\n.Sp\nThis option may be specified more than once.  The \\s-1DT_AUXILIARY\\s0 entries\nwill be created in the order in which they appear on the command line.\n.IP \"\\fB\\-F\\fR \\fIname\\fR\" 4\n.IX Item \"-F name\"\n.PD 0\n.IP \"\\fB\\-\\-filter=\\fR\\fIname\\fR\" 4\n.IX Item \"--filter=name\"\n.PD\nWhen creating an \\s-1ELF\\s0 shared object, set the internal \\s-1DT_FILTER\\s0 field to\nthe specified name.  This tells the dynamic linker that the symbol table\nof the shared object which is being created should be used as a filter\non the symbol table of the shared object \\fIname\\fR.\n.Sp\nIf you later link a program against this filter object, then, when you\nrun the program, the dynamic linker will see the \\s-1DT_FILTER\\s0 field.  The\ndynamic linker will resolve symbols according to the symbol table of the\nfilter object as usual, but it will actually link to the definitions\nfound in the shared object \\fIname\\fR.  Thus the filter object can be\nused to select a subset of the symbols provided by the object\n\\&\\fIname\\fR.\n.Sp\nSome older linkers used the \\fB\\-F\\fR option throughout a compilation\ntoolchain for specifying object-file format for both input and output\nobject files.\nThe \\s-1GNU\\s0 linker uses other mechanisms for this purpose: the\n\\&\\fB\\-b\\fR, \\fB\\-\\-format\\fR, \\fB\\-\\-oformat\\fR options, the\n\\&\\f(CW\\*(C`TARGET\\*(C'\\fR command in linker scripts, and the \\f(CW\\*(C`GNUTARGET\\*(C'\\fR\nenvironment variable.\nThe \\s-1GNU\\s0 linker will ignore the \\fB\\-F\\fR option when not\ncreating an \\s-1ELF\\s0 shared object.\n.IP \"\\fB\\-fini=\\fR\\fIname\\fR\" 4\n.IX Item \"-fini=name\"\nWhen creating an \\s-1ELF\\s0 executable or shared object, call \\s-1NAME\\s0 when the\nexecutable or shared object is unloaded, by setting \\s-1DT_FINI\\s0 to the\naddress of the function.  By default, the linker uses \\f(CW\\*(C`_fini\\*(C'\\fR as\nthe function to call.\n.IP \"\\fB\\-g\\fR\" 4\n.IX Item \"-g\"\nIgnored.  Provided for compatibility with other tools.\n.IP \"\\fB\\-G\\fR \\fIvalue\\fR\" 4\n.IX Item \"-G value\"\n.PD 0\n.IP \"\\fB\\-\\-gpsize=\\fR\\fIvalue\\fR\" 4\n.IX Item \"--gpsize=value\"\n.PD\nSet the maximum size of objects to be optimized using the \\s-1GP\\s0 register to\n\\&\\fIsize\\fR.  This is only meaningful for object file formats such as\n\\&\\s-1MIPS\\s0 \\s-1ECOFF\\s0 which supports putting large and small objects into different\nsections.  This is ignored for other object file formats.\n.IP \"\\fB\\-h\\fR \\fIname\\fR\" 4\n.IX Item \"-h name\"\n.PD 0\n.IP \"\\fB\\-soname=\\fR\\fIname\\fR\" 4\n.IX Item \"-soname=name\"\n.PD\nWhen creating an \\s-1ELF\\s0 shared object, set the internal \\s-1DT_SONAME\\s0 field to\nthe specified name.  When an executable is linked with a shared object\nwhich has a \\s-1DT_SONAME\\s0 field, then when the executable is run the dynamic\nlinker will attempt to load the shared object specified by the \\s-1DT_SONAME\\s0\nfield rather than the using the file name given to the linker.\n.IP \"\\fB\\-i\\fR\" 4\n.IX Item \"-i\"\nPerform an incremental link (same as option \\fB\\-r\\fR).\n.IP \"\\fB\\-init=\\fR\\fIname\\fR\" 4\n.IX Item \"-init=name\"\nWhen creating an \\s-1ELF\\s0 executable or shared object, call \\s-1NAME\\s0 when the\nexecutable or shared object is loaded, by setting \\s-1DT_INIT\\s0 to the address\nof the function.  By default, the linker uses \\f(CW\\*(C`_init\\*(C'\\fR as the\nfunction to call.\n.IP \"\\fB\\-l\\fR \\fInamespec\\fR\" 4\n.IX Item \"-l namespec\"\n.PD 0\n.IP \"\\fB\\-\\-library=\\fR\\fInamespec\\fR\" 4\n.IX Item \"--library=namespec\"\n.PD\nAdd the archive or object file specified by \\fInamespec\\fR to the\nlist of files to link.  This option may be used any number of times.\nIf \\fInamespec\\fR is of the form \\fI:\\fIfilename\\fI\\fR, \\fBld\\fR\nwill search the library path for a file called \\fIfilename\\fR, otherwise it\nwill search the library path for a file called \\fIlib\\fInamespec\\fI.a\\fR.\n.Sp\nOn systems which support shared libraries, \\fBld\\fR may also search for\nfiles other than \\fIlib\\fInamespec\\fI.a\\fR.  Specifically, on \\s-1ELF\\s0\nand SunOS systems, \\fBld\\fR will search a directory for a library\ncalled \\fIlib\\fInamespec\\fI.so\\fR before searching for one called\n\\&\\fIlib\\fInamespec\\fI.a\\fR.  (By convention, a \\f(CW\\*(C`.so\\*(C'\\fR extension\nindicates a shared library.)  Note that this behavior does not apply\nto \\fI:\\fIfilename\\fI\\fR, which always specifies a file called\n\\&\\fIfilename\\fR.\n.Sp\nThe linker will search an archive only once, at the location where it is\nspecified on the command line.  If the archive defines a symbol which\nwas undefined in some object which appeared before the archive on the\ncommand line, the linker will include the appropriate file(s) from the\narchive.  However, an undefined symbol in an object appearing later on\nthe command line will not cause the linker to search the archive again.\n.Sp\nSee the \\fB\\-(\\fR option for a way to force the linker to search\narchives multiple times.\n.Sp\nYou may list the same archive multiple times on the command line.\n.Sp\nThis type of archive searching is standard for Unix linkers.  However,\nif you are using \\fBld\\fR on \\s-1AIX\\s0, note that it is different from the\nbehaviour of the \\s-1AIX\\s0 linker.\n.IP \"\\fB\\-L\\fR \\fIsearchdir\\fR\" 4\n.IX Item \"-L searchdir\"\n.PD 0\n.IP \"\\fB\\-\\-library\\-path=\\fR\\fIsearchdir\\fR\" 4\n.IX Item \"--library-path=searchdir\"\n.PD\nAdd path \\fIsearchdir\\fR to the list of paths that \\fBld\\fR will search\nfor archive libraries and \\fBld\\fR control scripts.  You may use this\noption any number of times.  The directories are searched in the order\nin which they are specified on the command line.  Directories specified\non the command line are searched before the default directories.  All\n\\&\\fB\\-L\\fR options apply to all \\fB\\-l\\fR options, regardless of the\norder in which the options appear.  \\fB\\-L\\fR options do not affect\nhow \\fBld\\fR searches for a linker script unless \\fB\\-T\\fR\noption is specified.\n.Sp\nIf \\fIsearchdir\\fR begins with \\f(CW\\*(C`=\\*(C'\\fR, then the \\f(CW\\*(C`=\\*(C'\\fR will be replaced\nby the \\fIsysroot prefix\\fR, a path specified when the linker is configured.\n.Sp\nThe default set of paths searched (without being specified with\n\\&\\fB\\-L\\fR) depends on which emulation mode \\fBld\\fR is using, and in\nsome cases also on how it was configured.\n.Sp\nThe paths can also be specified in a link script with the\n\\&\\f(CW\\*(C`SEARCH_DIR\\*(C'\\fR command.  Directories specified this way are searched\nat the point in which the linker script appears in the command line.\n.IP \"\\fB\\-m\\fR \\fIemulation\\fR\" 4\n.IX Item \"-m emulation\"\nEmulate the \\fIemulation\\fR linker.  You can list the available\nemulations with the \\fB\\-\\-verbose\\fR or \\fB\\-V\\fR options.\n.Sp\nIf the \\fB\\-m\\fR option is not used, the emulation is taken from the\n\\&\\f(CW\\*(C`LDEMULATION\\*(C'\\fR environment variable, if that is defined.\n.Sp\nOtherwise, the default emulation depends upon how the linker was\nconfigured.\n.IP \"\\fB\\-M\\fR\" 4\n.IX Item \"-M\"\n.PD 0\n.IP \"\\fB\\-\\-print\\-map\\fR\" 4\n.IX Item \"--print-map\"\n.PD\nPrint a link map to the standard output.  A link map provides\ninformation about the link, including the following:\n.RS 4\n.IP \"\\(bu\" 4\nWhere object files are mapped into memory.\n.IP \"\\(bu\" 4\nHow common symbols are allocated.\n.IP \"\\(bu\" 4\nAll archive members included in the link, with a mention of the symbol\nwhich caused the archive member to be brought in.\n.IP \"\\(bu\" 4\nThe values assigned to symbols.\n.Sp\nNote \\- symbols whose values are computed by an expression which\ninvolves a reference to a previous value of the same symbol may not\nhave correct result displayed in the link map.  This is because the\nlinker discards intermediate results and only retains the final value\nof an expression.  Under such circumstances the linker will display\nthe final value enclosed by square brackets.  Thus for example a\nlinker script containing:\n.Sp\n.Vb 3\n\\&           foo = 1\n\\&           foo = foo * 4\n\\&           foo = foo + 8\n.Ve\n.Sp\nwill produce the following output in the link map if the \\fB\\-M\\fR\noption is used:\n.Sp\n.Vb 3\n\\&           0x00000001                foo = 0x1\n\\&           [0x0000000c]                foo = (foo * 0x4)\n\\&           [0x0000000c]                foo = (foo + 0x8)\n.Ve\n.Sp\nSee \\fBExpressions\\fR for more information about expressions in linker\nscripts.\n.RE\n.RS 4\n.RE\n.IP \"\\fB\\-n\\fR\" 4\n.IX Item \"-n\"\n.PD 0\n.IP \"\\fB\\-\\-nmagic\\fR\" 4\n.IX Item \"--nmagic\"\n.PD\nTurn off page alignment of sections, and mark the output as\n\\&\\f(CW\\*(C`NMAGIC\\*(C'\\fR if possible.\n.IP \"\\fB\\-N\\fR\" 4\n.IX Item \"-N\"\n.PD 0\n.IP \"\\fB\\-\\-omagic\\fR\" 4\n.IX Item \"--omagic\"\n.PD\nSet the text and data sections to be readable and writable.  Also, do\nnot page-align the data segment, and disable linking against shared\nlibraries.  If the output format supports Unix style magic numbers,\nmark the output as \\f(CW\\*(C`OMAGIC\\*(C'\\fR. Note: Although a writable text section\nis allowed for PE-COFF targets, it does not conform to the format\nspecification published by Microsoft.\n.IP \"\\fB\\-\\-no\\-omagic\\fR\" 4\n.IX Item \"--no-omagic\"\nThis option negates most of the effects of the \\fB\\-N\\fR option.  It\nsets the text section to be read-only, and forces the data segment to\nbe page-aligned.  Note \\- this option does not enable linking against\nshared libraries.  Use \\fB\\-Bdynamic\\fR for this.\n.IP \"\\fB\\-o\\fR \\fIoutput\\fR\" 4\n.IX Item \"-o output\"\n.PD 0\n.IP \"\\fB\\-\\-output=\\fR\\fIoutput\\fR\" 4\n.IX Item \"--output=output\"\n.PD\nUse \\fIoutput\\fR as the name for the program produced by \\fBld\\fR; if this\noption is not specified, the name \\fIa.out\\fR is used by default.  The\nscript command \\f(CW\\*(C`OUTPUT\\*(C'\\fR can also specify the output file name.\n.IP \"\\fB\\-O\\fR \\fIlevel\\fR\" 4\n.IX Item \"-O level\"\nIf \\fIlevel\\fR is a numeric values greater than zero \\fBld\\fR optimizes\nthe output.  This might take significantly longer and therefore probably\nshould only be enabled for the final binary.  At the moment this\noption only affects \\s-1ELF\\s0 shared library generation.  Future releases of\nthe linker may make more use of this option.  Also currently there is\nno difference in the linker's behaviour for different non-zero values\nof this option.  Again this may change with future releases.\n.IP \"\\fB\\-q\\fR\" 4\n.IX Item \"-q\"\n.PD 0\n.IP \"\\fB\\-\\-emit\\-relocs\\fR\" 4\n.IX Item \"--emit-relocs\"\n.PD\nLeave relocation sections and contents in fully linked executables.\nPost link analysis and optimization tools may need this information in\norder to perform correct modifications of executables.  This results\nin larger executables.\n.Sp\nThis option is currently only supported on \\s-1ELF\\s0 platforms.\n.IP \"\\fB\\-\\-force\\-dynamic\\fR\" 4\n.IX Item \"--force-dynamic\"\nForce the output file to have dynamic sections.  This option is specific\nto VxWorks targets.\n.IP \"\\fB\\-r\\fR\" 4\n.IX Item \"-r\"\n.PD 0\n.IP \"\\fB\\-\\-relocatable\\fR\" 4\n.IX Item \"--relocatable\"\n.PD\nGenerate relocatable output\\-\\-\\-i.e., generate an output file that can in\nturn serve as input to \\fBld\\fR.  This is often called \\fIpartial\nlinking\\fR.  As a side effect, in environments that support standard Unix\nmagic numbers, this option also sets the output file's magic number to\n\\&\\f(CW\\*(C`OMAGIC\\*(C'\\fR.\nIf this option is not specified, an absolute file is produced.  When\nlinking \\*(C+ programs, this option \\fIwill not\\fR resolve references to\nconstructors; to do that, use \\fB\\-Ur\\fR.\n.Sp\nWhen an input file does not have the same format as the output file,\npartial linking is only supported if that input file does not contain any\nrelocations.  Different output formats can have further restrictions; for\nexample some \\f(CW\\*(C`a.out\\*(C'\\fR\\-based formats do not support partial linking\nwith input files in other formats at all.\n.Sp\nThis option does the same thing as \\fB\\-i\\fR.\n.IP \"\\fB\\-R\\fR \\fIfilename\\fR\" 4\n.IX Item \"-R filename\"\n.PD 0\n.IP \"\\fB\\-\\-just\\-symbols=\\fR\\fIfilename\\fR\" 4\n.IX Item \"--just-symbols=filename\"\n.PD\nRead symbol names and their addresses from \\fIfilename\\fR, but do not\nrelocate it or include it in the output.  This allows your output file\nto refer symbolically to absolute locations of memory defined in other\nprograms.  You may use this option more than once.\n.Sp\nFor compatibility with other \\s-1ELF\\s0 linkers, if the \\fB\\-R\\fR option is\nfollowed by a directory name, rather than a file name, it is treated as\nthe \\fB\\-rpath\\fR option.\n.IP \"\\fB\\-s\\fR\" 4\n.IX Item \"-s\"\n.PD 0\n.IP \"\\fB\\-\\-strip\\-all\\fR\" 4\n.IX Item \"--strip-all\"\n.PD\nOmit all symbol information from the output file.\n.IP \"\\fB\\-S\\fR\" 4\n.IX Item \"-S\"\n.PD 0\n.IP \"\\fB\\-\\-strip\\-debug\\fR\" 4\n.IX Item \"--strip-debug\"\n.PD\nOmit debugger symbol information (but not all symbols) from the output file.\n.IP \"\\fB\\-t\\fR\" 4\n.IX Item \"-t\"\n.PD 0\n.IP \"\\fB\\-\\-trace\\fR\" 4\n.IX Item \"--trace\"\n.PD\nPrint the names of the input files as \\fBld\\fR processes them.\n.IP \"\\fB\\-T\\fR \\fIscriptfile\\fR\" 4\n.IX Item \"-T scriptfile\"\n.PD 0\n.IP \"\\fB\\-\\-script=\\fR\\fIscriptfile\\fR\" 4\n.IX Item \"--script=scriptfile\"\n.PD\nUse \\fIscriptfile\\fR as the linker script.  This script replaces\n\\&\\fBld\\fR's default linker script (rather than adding to it), so\n\\&\\fIcommandfile\\fR must specify everything necessary to describe the\noutput file.    If \\fIscriptfile\\fR does not exist in\nthe current directory, \\f(CW\\*(C`ld\\*(C'\\fR looks for it in the directories\nspecified by any preceding \\fB\\-L\\fR options.  Multiple \\fB\\-T\\fR\noptions accumulate.\n.IP \"\\fB\\-dT\\fR \\fIscriptfile\\fR\" 4\n.IX Item \"-dT scriptfile\"\n.PD 0\n.IP \"\\fB\\-\\-default\\-script=\\fR\\fIscriptfile\\fR\" 4\n.IX Item \"--default-script=scriptfile\"\n.PD\nUse \\fIscriptfile\\fR as the default linker script.\n.Sp\nThis option is similar to the \\fB\\-\\-script\\fR option except that\nprocessing of the script is delayed until after the rest of the\ncommand line has been processed.  This allows options placed after the\n\\&\\fB\\-\\-default\\-script\\fR option on the command line to affect the\nbehaviour of the linker script, which can be important when the linker\ncommand line cannot be directly controlled by the user.  (eg because\nthe command line is being constructed by another tool, such as\n\\&\\fBgcc\\fR).\n.IP \"\\fB\\-u\\fR \\fIsymbol\\fR\" 4\n.IX Item \"-u symbol\"\n.PD 0\n.IP \"\\fB\\-\\-undefined=\\fR\\fIsymbol\\fR\" 4\n.IX Item \"--undefined=symbol\"\n.PD\nForce \\fIsymbol\\fR to be entered in the output file as an undefined\nsymbol.  Doing this may, for example, trigger linking of additional\nmodules from standard libraries.  \\fB\\-u\\fR may be repeated with\ndifferent option arguments to enter additional undefined symbols.  This\noption is equivalent to the \\f(CW\\*(C`EXTERN\\*(C'\\fR linker script command.\n.IP \"\\fB\\-Ur\\fR\" 4\n.IX Item \"-Ur\"\nFor anything other than \\*(C+ programs, this option is equivalent to\n\\&\\fB\\-r\\fR: it generates relocatable output\\-\\-\\-i.e., an output file that can in\nturn serve as input to \\fBld\\fR.  When linking \\*(C+ programs, \\fB\\-Ur\\fR\n\\&\\fIdoes\\fR resolve references to constructors, unlike \\fB\\-r\\fR.\nIt does not work to use \\fB\\-Ur\\fR on files that were themselves linked\nwith \\fB\\-Ur\\fR; once the constructor table has been built, it cannot\nbe added to.  Use \\fB\\-Ur\\fR only for the last partial link, and\n\\&\\fB\\-r\\fR for the others.\n.IP \"\\fB\\-\\-unique[=\\fR\\fI\\s-1SECTION\\s0\\fR\\fB]\\fR\" 4\n.IX Item \"--unique[=SECTION]\"\nCreates a separate output section for every input section matching\n\\&\\fI\\s-1SECTION\\s0\\fR, or if the optional wildcard \\fI\\s-1SECTION\\s0\\fR argument is\nmissing, for every orphan input section.  An orphan section is one not\nspecifically mentioned in a linker script.  You may use this option\nmultiple times on the command line;  It prevents the normal merging of\ninput sections with the same name, overriding output section assignments\nin a linker script.\n.IP \"\\fB\\-v\\fR\" 4\n.IX Item \"-v\"\n.PD 0\n.IP \"\\fB\\-\\-version\\fR\" 4\n.IX Item \"--version\"\n.IP \"\\fB\\-V\\fR\" 4\n.IX Item \"-V\"\n.PD\nDisplay the version number for \\fBld\\fR.  The \\fB\\-V\\fR option also\nlists the supported emulations.\n.IP \"\\fB\\-x\\fR\" 4\n.IX Item \"-x\"\n.PD 0\n.IP \"\\fB\\-\\-discard\\-all\\fR\" 4\n.IX Item \"--discard-all\"\n.PD\nDelete all local symbols.\n.IP \"\\fB\\-X\\fR\" 4\n.IX Item \"-X\"\n.PD 0\n.IP \"\\fB\\-\\-discard\\-locals\\fR\" 4\n.IX Item \"--discard-locals\"\n.PD\nDelete all temporary local symbols.  (These symbols start with\nsystem-specific local label prefixes, typically \\fB.L\\fR for \\s-1ELF\\s0 systems\nor \\fBL\\fR for traditional a.out systems.)\n.IP \"\\fB\\-y\\fR \\fIsymbol\\fR\" 4\n.IX Item \"-y symbol\"\n.PD 0\n.IP \"\\fB\\-\\-trace\\-symbol=\\fR\\fIsymbol\\fR\" 4\n.IX Item \"--trace-symbol=symbol\"\n.PD\nPrint the name of each linked file in which \\fIsymbol\\fR appears.  This\noption may be given any number of times.  On many systems it is necessary\nto prepend an underscore.\n.Sp\nThis option is useful when you have an undefined symbol in your link but\ndon't know where the reference is coming from.\n.IP \"\\fB\\-Y\\fR \\fIpath\\fR\" 4\n.IX Item \"-Y path\"\nAdd \\fIpath\\fR to the default library search path.  This option exists\nfor Solaris compatibility.\n.IP \"\\fB\\-z\\fR \\fIkeyword\\fR\" 4\n.IX Item \"-z keyword\"\nThe recognized keywords are:\n.RS 4\n.IP \"\\fBcombreloc\\fR\" 4\n.IX Item \"combreloc\"\nCombines multiple reloc sections and sorts them to make dynamic symbol\nlookup caching possible.\n.IP \"\\fBdefs\\fR\" 4\n.IX Item \"defs\"\nDisallows undefined symbols in object files.  Undefined symbols in\nshared libraries are still allowed.\n.IP \"\\fBexecstack\\fR\" 4\n.IX Item \"execstack\"\nMarks the object as requiring executable stack.\n.IP \"\\fBinitfirst\\fR\" 4\n.IX Item \"initfirst\"\nThis option is only meaningful when building a shared object.\nIt marks the object so that its runtime initialization will occur\nbefore the runtime initialization of any other objects brought into\nthe process at the same time.  Similarly the runtime finalization of\nthe object will occur after the runtime finalization of any other\nobjects.\n.IP \"\\fBinterpose\\fR\" 4\n.IX Item \"interpose\"\nMarks the object that its symbol table interposes before all symbols\nbut the primary executable.\n.IP \"\\fBlazy\\fR\" 4\n.IX Item \"lazy\"\nWhen generating an executable or shared library, mark it to tell the\ndynamic linker to defer function call resolution to the point when\nthe function is called (lazy binding), rather than at load time.\nLazy binding is the default.\n.IP \"\\fBloadfltr\\fR\" 4\n.IX Item \"loadfltr\"\nMarks  the object that its filters be processed immediately at\nruntime.\n.IP \"\\fBmuldefs\\fR\" 4\n.IX Item \"muldefs\"\nAllows multiple definitions.\n.IP \"\\fBnocombreloc\\fR\" 4\n.IX Item \"nocombreloc\"\nDisables multiple reloc sections combining.\n.IP \"\\fBnocopyreloc\\fR\" 4\n.IX Item \"nocopyreloc\"\nDisables production of copy relocs.\n.IP \"\\fBnodefaultlib\\fR\" 4\n.IX Item \"nodefaultlib\"\nMarks the object that the search for dependencies of this object will\nignore any default library search paths.\n.IP \"\\fBnodelete\\fR\" 4\n.IX Item \"nodelete\"\nMarks the object shouldn't be unloaded at runtime.\n.IP \"\\fBnodlopen\\fR\" 4\n.IX Item \"nodlopen\"\nMarks the object not available to \\f(CW\\*(C`dlopen\\*(C'\\fR.\n.IP \"\\fBnodump\\fR\" 4\n.IX Item \"nodump\"\nMarks the object can not be dumped by \\f(CW\\*(C`dldump\\*(C'\\fR.\n.IP \"\\fBnoexecstack\\fR\" 4\n.IX Item \"noexecstack\"\nMarks the object as not requiring executable stack.\n.IP \"\\fBnorelro\\fR\" 4\n.IX Item \"norelro\"\nDon't create an \\s-1ELF\\s0 \\f(CW\\*(C`PT_GNU_RELRO\\*(C'\\fR segment header in the object.\n.IP \"\\fBnow\\fR\" 4\n.IX Item \"now\"\nWhen generating an executable or shared library, mark it to tell the\ndynamic linker to resolve all symbols when the program is started, or\nwhen the shared library is linked to using dlopen, instead of\ndeferring function call resolution to the point when the function is\nfirst called.\n.IP \"\\fBorigin\\fR\" 4\n.IX Item \"origin\"\nMarks the object may contain \\f(CW$ORIGIN\\fR.\n.IP \"\\fBrelro\\fR\" 4\n.IX Item \"relro\"\nCreate an \\s-1ELF\\s0 \\f(CW\\*(C`PT_GNU_RELRO\\*(C'\\fR segment header in the object.\n.IP \"\\fBmax\\-page\\-size=\\fR\\fIvalue\\fR\" 4\n.IX Item \"max-page-size=value\"\nSet the emulation maximum page size to \\fIvalue\\fR.\n.IP \"\\fBcommon\\-page\\-size=\\fR\\fIvalue\\fR\" 4\n.IX Item \"common-page-size=value\"\nSet the emulation common page size to \\fIvalue\\fR.\n.RE\n.RS 4\n.Sp\nOther keywords are ignored for Solaris compatibility.\n.RE\n.IP \"\\fB\\-(\\fR \\fIarchives\\fR \\fB\\-)\\fR\" 4\n.IX Item \"-( archives -)\"\n.PD 0\n.IP \"\\fB\\-\\-start\\-group\\fR \\fIarchives\\fR \\fB\\-\\-end\\-group\\fR\" 4\n.IX Item \"--start-group archives --end-group\"\n.PD\nThe \\fIarchives\\fR should be a list of archive files.  They may be\neither explicit file names, or \\fB\\-l\\fR options.\n.Sp\nThe specified archives are searched repeatedly until no new undefined\nreferences are created.  Normally, an archive is searched only once in\nthe order that it is specified on the command line.  If a symbol in that\narchive is needed to resolve an undefined symbol referred to by an\nobject in an archive that appears later on the command line, the linker\nwould not be able to resolve that reference.  By grouping the archives,\nthey all be searched repeatedly until all possible references are\nresolved.\n.Sp\nUsing this option has a significant performance cost.  It is best to use\nit only when there are unavoidable circular references between two or\nmore archives.\n.IP \"\\fB\\-\\-accept\\-unknown\\-input\\-arch\\fR\" 4\n.IX Item \"--accept-unknown-input-arch\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-accept\\-unknown\\-input\\-arch\\fR\" 4\n.IX Item \"--no-accept-unknown-input-arch\"\n.PD\nTells the linker to accept input files whose architecture cannot be\nrecognised.  The assumption is that the user knows what they are doing\nand deliberately wants to link in these unknown input files.  This was\nthe default behaviour of the linker, before release 2.14.  The default\nbehaviour from release 2.14 onwards is to reject such input files, and\nso the \\fB\\-\\-accept\\-unknown\\-input\\-arch\\fR option has been added to\nrestore the old behaviour.\n.IP \"\\fB\\-\\-as\\-needed\\fR\" 4\n.IX Item \"--as-needed\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-as\\-needed\\fR\" 4\n.IX Item \"--no-as-needed\"\n.PD\nThis option affects \\s-1ELF\\s0 \\s-1DT_NEEDED\\s0 tags for dynamic libraries mentioned\non the command line after the \\fB\\-\\-as\\-needed\\fR option.  Normally,\nthe linker will add a \\s-1DT_NEEDED\\s0 tag for each dynamic library mentioned\non the command line, regardless of whether the library is actually\nneeded.  \\fB\\-\\-as\\-needed\\fR causes a \\s-1DT_NEEDED\\s0 tag to only be emitted\nfor a library that satisfies a symbol reference from regular objects\nwhich is undefined at the point that the library was linked, or, if\nthe library is not found in the \\s-1DT_NEEDED\\s0 lists of other libraries\nlinked up to that point, a reference from another dynamic library.\n\\&\\fB\\-\\-no\\-as\\-needed\\fR restores the default behaviour.\n.IP \"\\fB\\-\\-add\\-needed\\fR\" 4\n.IX Item \"--add-needed\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-add\\-needed\\fR\" 4\n.IX Item \"--no-add-needed\"\n.PD\nThis option affects the treatment of dynamic libraries from \\s-1ELF\\s0\n\\&\\s-1DT_NEEDED\\s0 tags in dynamic libraries mentioned on the command line after\nthe \\fB\\-\\-no\\-add\\-needed\\fR option.  Normally, the linker will add\na \\s-1DT_NEEDED\\s0 tag for each dynamic library from \\s-1DT_NEEDED\\s0 tags.\n\\&\\fB\\-\\-no\\-add\\-needed\\fR causes \\s-1DT_NEEDED\\s0 tags will never be emitted\nfor those libraries from \\s-1DT_NEEDED\\s0 tags. \\fB\\-\\-add\\-needed\\fR restores\nthe default behaviour.\n.IP \"\\fB\\-assert\\fR \\fIkeyword\\fR\" 4\n.IX Item \"-assert keyword\"\nThis option is ignored for SunOS compatibility.\n.IP \"\\fB\\-Bdynamic\\fR\" 4\n.IX Item \"-Bdynamic\"\n.PD 0\n.IP \"\\fB\\-dy\\fR\" 4\n.IX Item \"-dy\"\n.IP \"\\fB\\-call_shared\\fR\" 4\n.IX Item \"-call_shared\"\n.PD\nLink against dynamic libraries.  This is only meaningful on platforms\nfor which shared libraries are supported.  This option is normally the\ndefault on such platforms.  The different variants of this option are\nfor compatibility with various systems.  You may use this option\nmultiple times on the command line: it affects library searching for\n\\&\\fB\\-l\\fR options which follow it.\n.IP \"\\fB\\-Bgroup\\fR\" 4\n.IX Item \"-Bgroup\"\nSet the \\f(CW\\*(C`DF_1_GROUP\\*(C'\\fR flag in the \\f(CW\\*(C`DT_FLAGS_1\\*(C'\\fR entry in the dynamic\nsection.  This causes the runtime linker to handle lookups in this\nobject and its dependencies to be performed only inside the group.\n\\&\\fB\\-\\-unresolved\\-symbols=report\\-all\\fR is implied.  This option is\nonly meaningful on \\s-1ELF\\s0 platforms which support shared libraries.\n.IP \"\\fB\\-Bstatic\\fR\" 4\n.IX Item \"-Bstatic\"\n.PD 0\n.IP \"\\fB\\-dn\\fR\" 4\n.IX Item \"-dn\"\n.IP \"\\fB\\-non_shared\\fR\" 4\n.IX Item \"-non_shared\"\n.IP \"\\fB\\-static\\fR\" 4\n.IX Item \"-static\"\n.PD\nDo not link against shared libraries.  This is only meaningful on\nplatforms for which shared libraries are supported.  The different\nvariants of this option are for compatibility with various systems.  You\nmay use this option multiple times on the command line: it affects\nlibrary searching for \\fB\\-l\\fR options which follow it.  This\noption also implies \\fB\\-\\-unresolved\\-symbols=report\\-all\\fR.  This\noption can be used with \\fB\\-shared\\fR.  Doing so means that a\nshared library is being created but that all of the library's external\nreferences must be resolved by pulling in entries from static\nlibraries.\n.IP \"\\fB\\-Bsymbolic\\fR\" 4\n.IX Item \"-Bsymbolic\"\nWhen creating a shared library, bind references to global symbols to the\ndefinition within the shared library, if any.  Normally, it is possible\nfor a program linked against a shared library to override the definition\nwithin the shared library.  This option is only meaningful on \\s-1ELF\\s0\nplatforms which support shared libraries.\n.IP \"\\fB\\-Bsymbolic\\-functions\\fR\" 4\n.IX Item \"-Bsymbolic-functions\"\nWhen creating a shared library, bind references to global function\nsymbols to the definition within the shared library, if any.\nThis option is only meaningful on \\s-1ELF\\s0 platforms which support shared\nlibraries.\n.IP \"\\fB\\-\\-dynamic\\-list=\\fR\\fIdynamic-list-file\\fR\" 4\n.IX Item \"--dynamic-list=dynamic-list-file\"\nSpecify the name of a dynamic list file to the linker.  This is\ntypically used when creating shared libraries to specify a list of\nglobal symbols whose references shouldn't be bound to the definition\nwithin the shared library, or creating dynamically linked executables\nto specify a list of symbols which should be added to the symbol table\nin the executable.  This option is only meaningful on \\s-1ELF\\s0 platforms\nwhich support shared libraries.\n.Sp\nThe format of the dynamic list is the same as the version node without\nscope and node name.  See \\fB\\s-1VERSION\\s0\\fR for more information.\n.IP \"\\fB\\-\\-dynamic\\-list\\-data\\fR\" 4\n.IX Item \"--dynamic-list-data\"\nInclude all global data symbols to the dynamic list.\n.IP \"\\fB\\-\\-dynamic\\-list\\-cpp\\-new\\fR\" 4\n.IX Item \"--dynamic-list-cpp-new\"\nProvide the builtin dynamic list for \\*(C+ operator new and delete.  It\nis mainly useful for building shared libstdc++.\n.IP \"\\fB\\-\\-dynamic\\-list\\-cpp\\-typeinfo\\fR\" 4\n.IX Item \"--dynamic-list-cpp-typeinfo\"\nProvide the builtin dynamic list for \\*(C+ runtime type identification.\n.IP \"\\fB\\-\\-check\\-sections\\fR\" 4\n.IX Item \"--check-sections\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-check\\-sections\\fR\" 4\n.IX Item \"--no-check-sections\"\n.PD\nAsks the linker \\fInot\\fR to check section addresses after they have\nbeen assigned to see if there are any overlaps.  Normally the linker will\nperform this check, and if it finds any overlaps it will produce\nsuitable error messages.  The linker does know about, and does make\nallowances for sections in overlays.  The default behaviour can be\nrestored by using the command line switch \\fB\\-\\-check\\-sections\\fR.\nSection overlap is not usually checked for relocatable links.  You can\nforce checking in that case by using the \\fB\\-\\-check\\-sections\\fR\noption.\n.IP \"\\fB\\-\\-cref\\fR\" 4\n.IX Item \"--cref\"\nOutput a cross reference table.  If a linker map file is being\ngenerated, the cross reference table is printed to the map file.\nOtherwise, it is printed on the standard output.\n.Sp\nThe format of the table is intentionally simple, so that it may be\neasily processed by a script if necessary.  The symbols are printed out,\nsorted by name.  For each symbol, a list of file names is given.  If the\nsymbol is defined, the first file listed is the location of the\ndefinition.  The remaining files contain references to the symbol.\n.IP \"\\fB\\-\\-no\\-define\\-common\\fR\" 4\n.IX Item \"--no-define-common\"\nThis option inhibits the assignment of addresses to common symbols.\nThe script command \\f(CW\\*(C`INHIBIT_COMMON_ALLOCATION\\*(C'\\fR has the same effect.\n.Sp\nThe \\fB\\-\\-no\\-define\\-common\\fR option allows decoupling\nthe decision to assign addresses to Common symbols from the choice\nof the output file type; otherwise a non-Relocatable output type\nforces assigning addresses to Common symbols.\nUsing \\fB\\-\\-no\\-define\\-common\\fR allows Common symbols that are referenced\nfrom a shared library to be assigned addresses only in the main program.\nThis eliminates the unused duplicate space in the shared library,\nand also prevents any possible confusion over resolving to the wrong\nduplicate when there are many dynamic modules with specialized search\npaths for runtime symbol resolution.\n.IP \"\\fB\\-\\-defsym=\\fR\\fIsymbol\\fR\\fB=\\fR\\fIexpression\\fR\" 4\n.IX Item \"--defsym=symbol=expression\"\nCreate a global symbol in the output file, containing the absolute\naddress given by \\fIexpression\\fR.  You may use this option as many\ntimes as necessary to define multiple symbols in the command line.  A\nlimited form of arithmetic is supported for the \\fIexpression\\fR in this\ncontext: you may give a hexadecimal constant or the name of an existing\nsymbol, or use \\f(CW\\*(C`+\\*(C'\\fR and \\f(CW\\*(C`\\-\\*(C'\\fR to add or subtract hexadecimal\nconstants or symbols.  If you need more elaborate expressions, consider\nusing the linker command language from a script.  \\fINote:\\fR there should be no white\nspace between \\fIsymbol\\fR, the equals sign (\"\\fB=\\fR\"), and\n\\&\\fIexpression\\fR.\n.IP \"\\fB\\-\\-demangle[=\\fR\\fIstyle\\fR\\fB]\\fR\" 4\n.IX Item \"--demangle[=style]\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-demangle\\fR\" 4\n.IX Item \"--no-demangle\"\n.PD\nThese options control whether to demangle symbol names in error messages\nand other output.  When the linker is told to demangle, it tries to\npresent symbol names in a readable fashion: it strips leading\nunderscores if they are used by the object file format, and converts \\*(C+\nmangled symbol names into user readable names.  Different compilers have\ndifferent mangling styles.  The optional demangling style argument can be used\nto choose an appropriate demangling style for your compiler.  The linker will\ndemangle by default unless the environment variable \\fB\\s-1COLLECT_NO_DEMANGLE\\s0\\fR\nis set.  These options may be used to override the default.\n.IP \"\\fB\\-I\\fR\\fIfile\\fR\" 4\n.IX Item \"-Ifile\"\n.PD 0\n.IP \"\\fB\\-\\-dynamic\\-linker=\\fR\\fIfile\\fR\" 4\n.IX Item \"--dynamic-linker=file\"\n.PD\nSet the name of the dynamic linker.  This is only meaningful when\ngenerating dynamically linked \\s-1ELF\\s0 executables.  The default dynamic\nlinker is normally correct; don't use this unless you know what you are\ndoing.\n.IP \"\\fB\\-\\-fatal\\-warnings\\fR\" 4\n.IX Item \"--fatal-warnings\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-fatal\\-warnings\\fR\" 4\n.IX Item \"--no-fatal-warnings\"\n.PD\nTreat all warnings as errors.  The default behaviour can be restored\nwith the option \\fB\\-\\-no\\-fatal\\-warnings\\fR.\n.IP \"\\fB\\-\\-force\\-exe\\-suffix\\fR\" 4\n.IX Item \"--force-exe-suffix\"\nMake sure that an output file has a .exe suffix.\n.Sp\nIf a successfully built fully linked output file does not have a\n\\&\\f(CW\\*(C`.exe\\*(C'\\fR or \\f(CW\\*(C`.dll\\*(C'\\fR suffix, this option forces the linker to copy\nthe output file to one of the same name with a \\f(CW\\*(C`.exe\\*(C'\\fR suffix. This\noption is useful when using unmodified Unix makefiles on a Microsoft\nWindows host, since some versions of Windows won't run an image unless\nit ends in a \\f(CW\\*(C`.exe\\*(C'\\fR suffix.\n.IP \"\\fB\\-\\-gc\\-sections\\fR\" 4\n.IX Item \"--gc-sections\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-gc\\-sections\\fR\" 4\n.IX Item \"--no-gc-sections\"\n.PD\nEnable garbage collection of unused input sections.  It is ignored on\ntargets that do not support this option.  The default behaviour (of not\nperforming this garbage collection) can be restored by specifying\n\\&\\fB\\-\\-no\\-gc\\-sections\\fR on the command line.\n.Sp\n\\&\\fB\\-\\-gc\\-sections\\fR decides which input sections are used by\nexamining symbols and relocations.  The section containing the entry\nsymbol and all sections containing symbols undefined on the\ncommand-line will be kept, as will sections containing symbols\nreferenced by dynamic objects.  Note that when building shared\nlibraries, the linker must assume that any visible symbol is\nreferenced.  Once this initial set of sections has been determined,\nthe linker recursively marks as used any section referenced by their\nrelocations.  See \\fB\\-\\-entry\\fR and \\fB\\-\\-undefined\\fR.\n.Sp\nThis option can be set when doing a partial link (enabled with option\n\\&\\fB\\-r\\fR).  In this case the root of symbols kept must be explicitely \nspecified either by an \\fB\\-\\-entry\\fR or \\fB\\-\\-undefined\\fR option or by\na \\f(CW\\*(C`ENTRY\\*(C'\\fR command in the linker script.\n.IP \"\\fB\\-\\-print\\-gc\\-sections\\fR\" 4\n.IX Item \"--print-gc-sections\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-print\\-gc\\-sections\\fR\" 4\n.IX Item \"--no-print-gc-sections\"\n.PD\nList all sections removed by garbage collection.  The listing is\nprinted on stderr.  This option is only effective if garbage\ncollection has been enabled via the \\fB\\-\\-gc\\-sections\\fR) option.  The\ndefault behaviour (of not listing the sections that are removed) can\nbe restored by specifying \\fB\\-\\-no\\-print\\-gc\\-sections\\fR on the command\nline.\n.IP \"\\fB\\-\\-help\\fR\" 4\n.IX Item \"--help\"\nPrint a summary of the command-line options on the standard output and exit.\n.IP \"\\fB\\-\\-target\\-help\\fR\" 4\n.IX Item \"--target-help\"\nPrint a summary of all target specific options on the standard output and exit.\n.IP \"\\fB\\-Map=\\fR\\fImapfile\\fR\" 4\n.IX Item \"-Map=mapfile\"\nPrint a link map to the file \\fImapfile\\fR.  See the description of the\n\\&\\fB\\-M\\fR option, above.\n.IP \"\\fB\\-\\-no\\-keep\\-memory\\fR\" 4\n.IX Item \"--no-keep-memory\"\n\\&\\fBld\\fR normally optimizes for speed over memory usage by caching the\nsymbol tables of input files in memory.  This option tells \\fBld\\fR to\ninstead optimize for memory usage, by rereading the symbol tables as\nnecessary.  This may be required if \\fBld\\fR runs out of memory space\nwhile linking a large executable.\n.IP \"\\fB\\-\\-no\\-undefined\\fR\" 4\n.IX Item \"--no-undefined\"\n.PD 0\n.IP \"\\fB\\-z defs\\fR\" 4\n.IX Item \"-z defs\"\n.PD\nReport unresolved symbol references from regular object files.  This\nis done even if the linker is creating a non-symbolic shared library.\nThe switch \\fB\\-\\-[no\\-]allow\\-shlib\\-undefined\\fR controls the\nbehaviour for reporting unresolved references found in shared\nlibraries being linked in.\n.IP \"\\fB\\-\\-allow\\-multiple\\-definition\\fR\" 4\n.IX Item \"--allow-multiple-definition\"\n.PD 0\n.IP \"\\fB\\-z muldefs\\fR\" 4\n.IX Item \"-z muldefs\"\n.PD\nNormally when a symbol is defined multiple times, the linker will\nreport a fatal error. These options allow multiple definitions and the\nfirst definition will be used.\n.IP \"\\fB\\-\\-allow\\-shlib\\-undefined\\fR\" 4\n.IX Item \"--allow-shlib-undefined\"\n.PD 0\n.IP \"\\fB\\-\\-no\\-allow\\-shlib\\-undefined\\fR\" 4\n.IX Item \"--no-allow-shlib-undefined\"\n.PD\nAllows or disallows undefined symbols in shared libraries.\nThis switch is similar to \\fB\\-\\-no\\-undefined\\fR except that it\ndetermines the behaviour when the undefined symbols are in a\nshared library rather than a regular object file.  It does not affect\nhow undefined symbols in regular object files are handled.\n.Sp\nThe default behaviour is to report errors for any undefined symbols\nreferenced in shared libraries if the linker is being used to create\nan executable, but to allow them if the linker is being used to create\na shared library.\n.Sp\nThe reasons for allowing undefined symbol references in shared\nlibraries specified at link time are that:\n.RS 4\n.IP \"\\(bu\" 4\nA shared library specified at link time may not be the same as the one\nthat is available at load time, so the symbol might actually be\nresolvable at load time.\n.IP \"\\(bu\" 4\nThere are some operating systems, eg BeOS and \\s-1HPPA\\s0, where undefined\nsymbols in shared libraries are normal.\n.Sp\nThe BeOS kernel for example patches shared libraries at load time to\nselect whichever function is most appropriate for the current\narchitecture.  This is used, for example, to dynamically select an\nappropriate memset function.\n.RE\n.RS 4\n.RE\n.IP \"\\fB\\-\\-no\\-undefined\\-version\\fR\" 4\n.IX Item \"--no-undefined-version\"\nNormally when a symbol has an undefined version, the linker will ignore\nit. This option disallows symbols with undefined version and a fatal error\nwill be issued instead.\n.IP \"\\fB\\-\\-default\\-symver\\fR\" 4\n.IX Item \"--default-symver\"\nCreate and use a default symbol version (the soname) for unversioned\nexported symbols.\n.IP \"\\fB\\-\\-default\\-imported\\-symver\\fR\" 4\n.IX Item \"--default-imported-symver\"\nCreate and use a default symbol version (the soname) for unversioned\nimported symbols.\n.IP \"\\fB\\-\\-no\\-warn\\-mismatch\\fR\" 4\n.IX Item \"--no-warn-mismatch\"\nNormally \\fBld\\fR will give an error if you try to link together input\nfiles that are mismatched for some reason, perhaps because they have\nbeen compiled for different processors or for different endiannesses.\nThis option tells \\fBld\\fR that it should silently permit such possible\nerrors.  This option should only be used with care, in cases when you\nhave taken some special action that ensures that the linker errors are\ninappropriate.\n.IP \"\\fB\\-\\-no\\-warn\\-search\\-mismatch\\fR\" 4\n.IX Item \"--no-warn-search-mismatch\"\nNormally \\fBld\\fR will give a warning if it finds an incompatible\nlibrary during a library search.  This option silences the warning.\n.IP \"\\fB\\-\\-no\\-whole\\-archive\\fR\" 4\n.IX Item \"--no-whole-archive\"\nTurn off the effect of the \\fB\\-\\-whole\\-archive\\fR option for subsequent\narchive files.\n.IP \"\\fB\\-\\-noinhibit\\-exec\\fR\" 4\n.IX Item \"--noinhibit-exec\"\nRetain the executable output file whenever it is still usable.\nNormally, the linker will not produce an output file if it encounters\nerrors during the link process; it exits without writing an output file\nwhen it issues any error whatsoever.\n.IP \"\\fB\\-nostdlib\\fR\" 4\n.IX Item \"-nostdlib\"\nOnly search library directories explicitly specified on the\ncommand line.  Library directories specified in linker scripts\n(including linker scripts specified on the command line) are ignored.\n.IP \"\\fB\\-\\-oformat=\\fR\\fIoutput-format\\fR\" 4\n.IX Item \"--oformat=output-format\"\n\\&\\fBld\\fR may be configured to support more than one kind of object\nfile.  If your \\fBld\\fR is configured this way, you can use the\n\\&\\fB\\-\\-oformat\\fR option to specify the binary format for the output\nobject file.  Even when \\fBld\\fR is configured to support alternative\nobject formats, you don't usually need to specify this, as \\fBld\\fR\nshould be configured to produce as a default output format the most\nusual format on each machine.  \\fIoutput-format\\fR is a text string, the\nname of a particular format supported by the \\s-1BFD\\s0 libraries.  (You can\nlist the available binary formats with \\fBobjdump \\-i\\fR.)  The script\ncommand \\f(CW\\*(C`OUTPUT_FORMAT\\*(C'\\fR can also specify the output format, but\nthis option overrides it.\n.IP \"\\fB\\-pie\\fR\" 4\n.IX Item \"-pie\"\n.PD 0\n.IP \"\\fB\\-\\-pic\\-executable\\fR\" 4\n.IX Item \"--pic-executable\"\n.PD\nCreate a position independent executable.  This is currently only supported on\n\\&\\s-1ELF\\s0 platforms.  Position independent executables are similar to shared\nlibraries in that they are relocated by the dynamic linker to the virtual\naddress the \\s-1OS\\s0 chooses for them (which can vary between invocations).  Like\nnormal dynamically linked executables they can be executed and symbols\ndefined in the executable cannot be overridden by shared libraries.\n.IP \"\\fB\\-qmagic\\fR\" 4\n.IX Item \"-qmagic\"\nThis option is ignored for Linux compatibility.\n.IP \"\\fB\\-Qy\\fR\" 4\n.IX Item \"-Qy\"\nThis option is ignored for \\s-1SVR4\\s0 compatibility.\n.IP \"\\fB\\-\\-relax\\fR\" 4\n.IX Item \"--relax\"\nAn option with machine dependent effects.\nThis option is only supported on a few targets.\n.Sp\nOn some platforms, the \\fB\\-\\-relax\\fR option performs global\noptimizations that become possible when the linker resolves addressing\nin the program, such as relaxing address modes and synthesizing new\ninstructions in the output object file.\n.Sp\nOn some platforms these link time global optimizations may make symbolic\ndebugging of the resulting executable impossible.\nThis is known to be\nthe case for the Matsushita \\s-1MN10200\\s0 and \\s-1MN10300\\s0 family of processors.\n.Sp\nOn platforms where this is not supported, \\fB\\-\\-relax\\fR is accepted,\nbut ignored.\n.IP \"\\fB\\-\\-retain\\-symbols\\-file=\\fR\\fIfilename\\fR\" 4\n.IX Item \"--retain-symbols-file=filename\"\nRetain \\fIonly\\fR the symbols listed in the file \\fIfilename\\fR,\ndiscarding all others.  \\fIfilename\\fR is simply a flat file, with one\nsymbol name per line.  This option is especially useful in environments\n(such as VxWorks)\nwhere a large global symbol table is accumulated gradually, to conserve\nrun-time memory.\n.Sp\n\\&\\fB\\-\\-retain\\-symbols\\-file\\fR does \\fInot\\fR discard undefined symbols,\nor symbols needed for relocations.\n.Sp\nYou may only specify \\fB\\-\\-retain\\-symbols\\-file\\fR once in the command\nline.  It overrides \\fB\\-s\\fR and \\fB\\-S\\fR.\n.IP \"\\fB\\-rpath=\\fR\\fIdir\\fR\" 4\n.IX Item \"-rpath=dir\"\nAdd a directory to the runtime library search path.  This is used when\nlinking an \\s-1ELF\\s0 executable with shared objects.  All \\fB\\-rpath\\fR\narguments are concatenated and passed to the runtime linker, which uses\nthem to locate shared objects at runtime.  The \\fB\\-rpath\\fR option is\nalso used when locating shared objects which are needed by shared\nobjects explicitly included in the link; see the description of the\n\\&\\fB\\-rpath\\-link\\fR option.  If \\fB\\-rpath\\fR is not used when linking an\n\\&\\s-1ELF\\s0 executable, the contents of the environment variable\n\\&\\f(CW\\*(C`LD_RUN_PATH\\*(C'\\fR will be used if it is defined.\n.Sp\nThe \\fB\\-rpath\\fR option may also be used on SunOS.  By default, on\nSunOS, the linker will form a runtime search patch out of all the\n\\&\\fB\\-L\\fR options it is given.  If a \\fB\\-rpath\\fR option is used, the\nruntime search path will be formed exclusively using the \\fB\\-rpath\\fR\noptions, ignoring the \\fB\\-L\\fR options.  This can be useful when using\ngcc, which adds many \\fB\\-L\\fR options which may be on \\s-1NFS\\s0 mounted\nfile systems.\n.Sp\nFor compatibility with other \\s-1ELF\\s0 linkers, if the \\fB\\-R\\fR option is\nfollowed by a directory name, rather than a file name, it is treated as\nthe \\fB\\-rpath\\fR option.\n.IP \"\\fB\\-rpath\\-link=\\fR\\fIdir\\fR\" 4\n.IX Item \"-rpath-link=dir\"\nWhen using \\s-1ELF\\s0 or SunOS, one shared library may require another.  This\nhappens when an \\f(CW\\*(C`ld \\-shared\\*(C'\\fR link includes a shared library as one\nof the input files.\n.Sp\nWhen the linker encounters such a dependency when doing a non-shared,\nnon-relocatable link, it will automatically try to locate the required\nshared library and include it in the link, if it is not included\nexplicitly.  In such a case, the \\fB\\-rpath\\-link\\fR option\nspecifies the first set of directories to search.  The\n\\&\\fB\\-rpath\\-link\\fR option may specify a sequence of directory names\neither by specifying a list of names separated by colons, or by\nappearing multiple times.\n.Sp\nThis option should be used with caution as it overrides the search path\nthat may have been hard compiled into a shared library. In such a case it\nis possible to use unintentionally a different search path than the\nruntime linker would do.\n.Sp\nThe linker uses the following search paths to locate required shared\nlibraries:\n.RS 4\n.IP \"1.\" 4\nAny directories specified by \\fB\\-rpath\\-link\\fR options.\n.IP \"2.\" 4\nAny directories specified by \\fB\\-rpath\\fR options.  The difference\nbetween \\fB\\-rpath\\fR and \\fB\\-rpath\\-link\\fR is that directories\nspecified by \\fB\\-rpath\\fR options are included in the executable and\nused at runtime, whereas the \\fB\\-rpath\\-link\\fR option is only effective\nat link time. Searching \\fB\\-rpath\\fR in this way is only supported\nby native linkers and cross linkers which have been configured with\nthe \\fB\\-\\-with\\-sysroot\\fR option.\n.IP \"3.\" 4\nOn an \\s-1ELF\\s0 system, for native linkers, if the \\fB\\-rpath\\fR and\n\\&\\fB\\-rpath\\-link\\fR options were not used, search the contents of the\nenvironment variable \\f(CW\\*(C`LD_RUN_PATH\\*(C'\\fR.\n.IP \"4.\" 4\nOn SunOS, if the \\fB\\-rpath\\fR option was not used, search any\ndirectories specified using \\fB\\-L\\fR options.\n.IP \"5.\" 4\nFor a native linker, the search the contents of the environment\nvariable \\f(CW\\*(C`LD_LIBRARY_PATH\\*(C'\\fR.\n.IP \"6.\" 4\nFor a native \\s-1ELF\\s0 linker, the directories in \\f(CW\\*(C`DT_RUNPATH\\*(C'\\fR or\n\\&\\f(CW\\*(C`DT_RPATH\\*(C'\\fR of a shared library are searched for shared\nlibraries needed by it. The \\f(CW\\*(C`DT_RPATH\\*(C'\\fR entries are ignored if\n\\&\\f(CW\\*(C`DT_RUNPATH\\*(C'\\fR entries exist.\n.IP \"7.\" 4\nThe default directories, normally \\fI/lib\\fR and \\fI/usr/lib\\fR.\n.IP \"8.\" 4\nFor a native linker on an \\s-1ELF\\s0 system, if the file \\fI/etc/ld.so.conf\\fR\nexists, the list of directories found in that file.\n.RE\n.RS 4\n.Sp\nIf the required shared library is not found, the linker will issue a\nwarning and continue with the link.\n.RE\n.IP \"\\fB\\-shared\\fR\" 4\n.IX Item \"-shared\"\n.PD 0\n.IP \"\\fB\\-Bshareable\\fR\" 4\n.IX Item \"-Bshareable\"\n.PD\nCreate a shared library.  This is currently only supported on \\s-1ELF\\s0, \\s-1XCOFF\\s0\nand SunOS platforms.  On SunOS, the linker will automatically create a\nshared library if the \\fB\\-e\\fR option is not used and there are\nundefined symbols in the link.\n.IP \"\\fB\\-\\-sort\\-common\\fR\" 4\n.IX Item \"--sort-common\"\n.PD 0\n.IP \"\\fB\\-\\-sort\\-common=ascending\\fR\" 4\n.IX Item \"--sort-common=ascending\"\n.IP \"\\fB\\-\\-sort\\-common=descending\\fR\" 4\n.IX Item \"--sort-common=descending\"\n.PD\nThis option tells \\fBld\\fR to sort the common symbols by alignment in\nascending or descending order when it places them in the appropriate output\nsections.  The symbol alignments considered are sixteen-byte or larger,\neight-byte, four-byte, two-byte, and one-byte. This is to prevent gaps\nbetween symbols due to alignment constraints.  If no sorting order is\nspecified, then descending order is assumed.\n.IP \"\\fB\\-\\-sort\\-section=name\\fR\" 4\n.IX Item \"--sort-section=name\"\nThis option will apply \\f(CW\\*(C`SORT_BY_NAME\\*(C'\\fR to all wildcard section\npatterns in the linker script.\n.IP \"\\fB\\-\\-sort\\-section=alignment\\fR\" 4\n.IX Item \"--sort-section=alignment\"\nThis option will apply \\f(CW\\*(C`SORT_BY_ALIGNMENT\\*(C'\\fR to all wildcard section\npatterns in the linker script.\n.IP \"\\fB\\-\\-split\\-by\\-file[=\\fR\\fIsize\\fR\\fB]\\fR\" 4\n.IX Item \"--split-by-file[=size]\"\nSimilar to \\fB\\-\\-split\\-by\\-reloc\\fR but creates a new output section for\neach input file when \\fIsize\\fR is reached.  \\fIsize\\fR defaults to a\nsize of 1 if not given.\n.IP \"\\fB\\-\\-split\\-by\\-reloc[=\\fR\\fIcount\\fR\\fB]\\fR\" 4\n.IX Item \"--split-by-reloc[=count]\"\nTries to creates extra sections in the output file so that no single\noutput section in the file contains more than \\fIcount\\fR relocations.\nThis is useful when generating huge relocatable files for downloading into\ncertain real time kernels with the \\s-1COFF\\s0 object file format; since \\s-1COFF\\s0\ncannot represent more than 65535 relocations in a single section.  Note\nthat this will fail to work with object file formats which do not\nsupport arbitrary sections.  The linker will not split up individual\ninput sections for redistribution, so if a single input section contains\nmore than \\fIcount\\fR relocations one output section will contain that\nmany relocations.  \\fIcount\\fR defaults to a value of 32768.\n.IP \"\\fB\\-\\-stats\\fR\" 4\n.IX Item \"--stats\"\nCompute and display statistics about the operation of the linker, such\nas execution time and memory usage.\n.IP \"\\fB\\-\\-sysroot=\\fR\\fIdirectory\\fR\" 4\n.IX Item \"--sysroot=directory\"\nUse \\fIdirectory\\fR as the location of the sysroot, overriding the\nconfigure-time default.  This option is only supported by linkers\nthat were configured using \\fB\\-\\-with\\-sysroot\\fR.\n.IP \"\\fB\\-\\-traditional\\-format\\fR\" 4\n.IX Item \"--traditional-format\"\nFor some targets, the output of \\fBld\\fR is different in some ways from\nthe output of some existing linker.  This switch requests \\fBld\\fR to\nuse the traditional format instead.\n.Sp\nFor example, on SunOS, \\fBld\\fR combines duplicate entries in the\nsymbol string table.  This can reduce the size of an output file with\nfull debugging information by over 30 percent.  Unfortunately, the SunOS\n\\&\\f(CW\\*(C`dbx\\*(C'\\fR program can not read the resulting program (\\f(CW\\*(C`gdb\\*(C'\\fR has no\ntrouble).  The \\fB\\-\\-traditional\\-format\\fR switch tells \\fBld\\fR to not\ncombine duplicate entries.\n.IP \"\\fB\\-\\-section\\-start=\\fR\\fIsectionname\\fR\\fB=\\fR\\fIorg\\fR\" 4\n.IX Item \"--section-start=sectionname=org\"\nLocate a section in the output file at the absolute\naddress given by \\fIorg\\fR.  You may use this option as many\ntimes as necessary to locate multiple sections in the command\nline.\n\\&\\fIorg\\fR must be a single hexadecimal integer;\nfor compatibility with other linkers, you may omit the leading\n\\&\\fB0x\\fR usually associated with hexadecimal values.  \\fINote:\\fR there\nshould be no white space between \\fIsectionname\\fR, the equals\nsign (\"\\fB=\\fR\"), and \\fIorg\\fR.\n.IP \"\\fB\\-Tbss=\\fR\\fIorg\\fR\" 4\n.IX Item \"-Tbss=org\"\n.PD 0\n.IP \"\\fB\\-Tdata=\\fR\\fIorg\\fR\" 4\n.IX Item \"-Tdata=org\"\n.IP \"\\fB\\-Ttext=\\fR\\fIorg\\fR\" 4\n.IX Item \"-Ttext=org\"\n.PD\nSame as \\fB\\-\\-section\\-start\\fR, with \\f(CW\\*(C`.bss\\*(C'\\fR, \\f(CW\\*(C`.data\\*(C'\\fR or\n\\&\\f(CW\\*(C`.text\\*(C'\\fR as the \\fIsectionname\\fR.\n.IP \"\\fB\\-Ttext\\-segment=\\fR\\fIorg\\fR\" 4\n.IX Item \"-Ttext-segment=org\"\nWhen creating an \\s-1ELF\\s0 executable or shared object, it will set the address\nof the first byte of the text segment.\n.IP \"\\fB\\-\\-unresolved\\-symbols=\\fR\\fImethod\\fR\" 4\n.IX Item \"--unresolved-symbols=method\"\nDetermine how to handle unresolved symbols.  There are four possible\nvalues for \\fBmethod\\fR:\n.RS 4\n.IP \"\\fBignore-all\\fR\" 4\n.IX Item \"ignore-all\"\nDo not report any unresolved symbols.\n.IP \"\\fBreport-all\\fR\" 4\n.IX Item \"report-all\"\nReport all unresolved symbols.  This is the default.\n.IP \"\\fBignore-in-object-files\\fR\" 4\n.IX Item \"ignore-in-object-files\"\nReport unresolved symbols that are contained in shared libraries, but\nignore them if they come from regular object files.\n.IP \"\\fBignore-in-shared-libs\\fR\" 4\n.IX Item \"ignore-in-shared-libs\"\nReport unresolved symbols that come from regular object files, but\nignore them if they come from shared libraries.  This can be useful\nwhen creating a dynamic binary and it is known that all the shared\nlibraries that it should be referencing are included on the linker's\ncommand line.\n.RE\n.RS 4\n.Sp\nThe behaviour for shared libraries on their own can also be controlled\nby the \\fB\\-\\-[no\\-]allow\\-shlib\\-undefined\\fR option.\n.Sp\nNormally the linker will generate an error message for each reported\nunresolved symbol but the option \\fB\\-\\-warn\\-unresolved\\-symbols\\fR\ncan change this to a warning.\n.RE\n.IP \"\\fB\\-\\-dll\\-verbose\\fR\" 4\n.IX Item \"--dll-verbose\"\n.PD 0\n.IP \"\\fB\\-\\-verbose\\fR\" 4\n.IX Item \"--verbose\"\n.PD\nDisplay the version number for \\fBld\\fR and list the linker emulations\nsupported.  Display which input files can and cannot be opened.  Display\nthe linker script being used by the linker.\n.IP \"\\fB\\-\\-version\\-script=\\fR\\fIversion-scriptfile\\fR\" 4\n.IX Item \"--version-script=version-scriptfile\"\nSpecify the name of a version script to the linker.  This is typically\nused when creating shared libraries to specify additional information\nabout the version hierarchy for the library being created.  This option\nis only fully supported on \\s-1ELF\\s0 platforms which support shared libraries;\nsee \\fB\\s-1VERSION\\s0\\fR.  It is partially supported on \\s-1PE\\s0 platforms, which can\nuse version scripts to filter symbol visibility in auto-export mode: any\nsymbols marked \\fBlocal\\fR in the version script will not be exported.\n.IP \"\\fB\\-\\-warn\\-common\\fR\" 4\n.IX Item \"--warn-common\"\nWarn when a common symbol is combined with another common symbol or with\na symbol definition.  Unix linkers allow this somewhat sloppy practise,\nbut linkers on some other operating systems do not.  This option allows\nyou to find potential problems from combining global symbols.\nUnfortunately, some C libraries use this practise, so you may get some\nwarnings about symbols in the libraries as well as in your programs.\n.Sp\nThere are three kinds of global symbols, illustrated here by C examples:\n.RS 4\n.IP \"\\fBint i = 1;\\fR\" 4\n.IX Item \"int i = 1;\"\nA definition, which goes in the initialized data section of the output\nfile.\n.IP \"\\fBextern int i;\\fR\" 4\n.IX Item \"extern int i;\"\nAn undefined reference, which does not allocate space.\nThere must be either a definition or a common symbol for the\nvariable somewhere.\n.IP \"\\fBint i;\\fR\" 4\n.IX Item \"int i;\"\nA common symbol.  If there are only (one or more) common symbols for a\nvariable, it goes in the uninitialized data area of the output file.\nThe linker merges multiple common symbols for the same variable into a\nsingle symbol.  If they are of different sizes, it picks the largest\nsize.  The linker turns a common symbol into a declaration, if there is\na definition of the same variable.\n.RE\n.RS 4\n.Sp\nThe \\fB\\-\\-warn\\-common\\fR option can produce five kinds of warnings.\nEach warning consists of a pair of lines: the first describes the symbol\njust encountered, and the second describes the previous symbol\nencountered with the same name.  One or both of the two symbols will be\na common symbol.\n.IP \"1.\" 4\nTurning a common symbol into a reference, because there is already a\ndefinition for the symbol.\n.Sp\n.Vb 3\n\\&        <file>(<section>): warning: common of \\`<symbol>\\*(Aq\n\\&           overridden by definition\n\\&        <file>(<section>): warning: defined here\n.Ve\n.IP \"2.\" 4\nTurning a common symbol into a reference, because a later definition for\nthe symbol is encountered.  This is the same as the previous case,\nexcept that the symbols are encountered in a different order.\n.Sp\n.Vb 3\n\\&        <file>(<section>): warning: definition of \\`<symbol>\\*(Aq\n\\&           overriding common\n\\&        <file>(<section>): warning: common is here\n.Ve\n.IP \"3.\" 4\nMerging a common symbol with a previous same-sized common symbol.\n.Sp\n.Vb 3\n\\&        <file>(<section>): warning: multiple common\n\\&           of \\`<symbol>\\*(Aq\n\\&        <file>(<section>): warning: previous common is here\n.Ve\n.IP \"4.\" 4\nMerging a common symbol with a previous larger common symbol.\n.Sp\n.Vb 3\n\\&        <file>(<section>): warning: common of \\`<symbol>\\*(Aq\n\\&           overridden by larger common\n\\&        <file>(<section>): warning: larger common is here\n.Ve\n.IP \"5.\" 4\nMerging a common symbol with a previous smaller common symbol.  This is\nthe same as the previous case, except that the symbols are\nencountered in a different order.\n.Sp\n.Vb 3\n\\&        <file>(<section>): warning: common of \\`<symbol>\\*(Aq\n\\&           overriding smaller common\n\\&        <file>(<section>): warning: smaller common is here\n.Ve\n.RE\n.RS 4\n.RE\n.IP \"\\fB\\-\\-warn\\-constructors\\fR\" 4\n.IX Item \"--warn-constructors\"\nWarn if any global constructors are used.  This is only useful for a few\nobject file formats.  For formats like \\s-1COFF\\s0 or \\s-1ELF\\s0, the linker can not\ndetect the use of global constructors.\n.IP \"\\fB\\-\\-warn\\-multiple\\-gp\\fR\" 4\n.IX Item \"--warn-multiple-gp\"\nWarn if multiple global pointer values are required in the output file.\nThis is only meaningful for certain processors, such as the Alpha.\nSpecifically, some processors put large-valued constants in a special\nsection.  A special register (the global pointer) points into the middle\nof this section, so that constants can be loaded efficiently via a\nbase-register relative addressing mode.  Since the offset in\nbase-register relative mode is fixed and relatively small (e.g., 16\nbits), this limits the maximum size of the constant pool.  Thus, in\nlarge programs, it is often necessary to use multiple global pointer\nvalues in order to be able to address all possible constants.  This\noption causes a warning to be issued whenever this case occurs.\n.IP \"\\fB\\-\\-warn\\-once\\fR\" 4\n.IX Item \"--warn-once\"\nOnly warn once for each undefined symbol, rather than once per module\nwhich refers to it.\n.IP \"\\fB\\-\\-warn\\-section\\-align\\fR\" 4\n.IX Item \"--warn-section-align\"\nWarn if the address of an output section is changed because of\nalignment.  Typically, the alignment will be set by an input section.\nThe address will only be changed if it not explicitly specified; that\nis, if the \\f(CW\\*(C`SECTIONS\\*(C'\\fR command does not specify a start address for\nthe section.\n.IP \"\\fB\\-\\-warn\\-shared\\-textrel\\fR\" 4\n.IX Item \"--warn-shared-textrel\"\nWarn if the linker adds a \\s-1DT_TEXTREL\\s0 to a shared object.\n.IP \"\\fB\\-\\-warn\\-alternate\\-em\\fR\" 4\n.IX Item \"--warn-alternate-em\"\nWarn if an object has alternate \\s-1ELF\\s0 machine code.\n.IP \"\\fB\\-\\-warn\\-unresolved\\-symbols\\fR\" 4\n.IX Item \"--warn-unresolved-symbols\"\nIf the linker is going to report an unresolved symbol (see the option\n\\&\\fB\\-\\-unresolved\\-symbols\\fR) it will normally generate an error.\nThis option makes it generate a warning instead.\n.IP \"\\fB\\-\\-error\\-unresolved\\-symbols\\fR\" 4\n.IX Item \"--error-unresolved-symbols\"\nThis restores the linker's default behaviour of generating errors when\nit is reporting unresolved symbols.\n.IP \"\\fB\\-\\-whole\\-archive\\fR\" 4\n.IX Item \"--whole-archive\"\nFor each archive mentioned on the command line after the\n\\&\\fB\\-\\-whole\\-archive\\fR option, include every object file in the archive\nin the link, rather than searching the archive for the required object\nfiles.  This is normally used to turn an archive file into a shared\nlibrary, forcing every object to be included in the resulting shared\nlibrary.  This option may be used more than once.\n.Sp\nTwo notes when using this option from gcc: First, gcc doesn't know\nabout this option, so you have to use \\fB\\-Wl,\\-whole\\-archive\\fR.\nSecond, don't forget to use \\fB\\-Wl,\\-no\\-whole\\-archive\\fR after your\nlist of archives, because gcc will add its own list of archives to\nyour link and you may not want this flag to affect those as well.\n.IP \"\\fB\\-\\-wrap=\\fR\\fIsymbol\\fR\" 4\n.IX Item \"--wrap=symbol\"\nUse a wrapper function for \\fIsymbol\\fR.  Any undefined reference to\n\\&\\fIsymbol\\fR will be resolved to \\f(CW\\*(C`_\\|_wrap_\\f(CIsymbol\\f(CW\\*(C'\\fR.  Any\nundefined reference to \\f(CW\\*(C`_\\|_real_\\f(CIsymbol\\f(CW\\*(C'\\fR will be resolved to\n\\&\\fIsymbol\\fR.\n.Sp\nThis can be used to provide a wrapper for a system function.  The\nwrapper function should be called \\f(CW\\*(C`_\\|_wrap_\\f(CIsymbol\\f(CW\\*(C'\\fR.  If it\nwishes to call the system function, it should call\n\\&\\f(CW\\*(C`_\\|_real_\\f(CIsymbol\\f(CW\\*(C'\\fR.\n.Sp\nHere is a trivial example:\n.Sp\n.Vb 6\n\\&        void *\n\\&        _\\|_wrap_malloc (size_t c)\n\\&        {\n\\&          printf (\"malloc called with %zu\\en\", c);\n\\&          return _\\|_real_malloc (c);\n\\&        }\n.Ve\n.Sp\nIf you link other code with this file using \\fB\\-\\-wrap malloc\\fR, then\nall calls to \\f(CW\\*(C`malloc\\*(C'\\fR will call the function \\f(CW\\*(C`_\\|_wrap_malloc\\*(C'\\fR\ninstead.  The call to \\f(CW\\*(C`_\\|_real_malloc\\*(C'\\fR in \\f(CW\\*(C`_\\|_wrap_malloc\\*(C'\\fR will\ncall the real \\f(CW\\*(C`malloc\\*(C'\\fR function.\n.Sp\nYou may wish to provide a \\f(CW\\*(C`_\\|_real_malloc\\*(C'\\fR function as well, so that\nlinks without the \\fB\\-\\-wrap\\fR option will succeed.  If you do this,\nyou should not put the definition of \\f(CW\\*(C`_\\|_real_malloc\\*(C'\\fR in the same\nfile as \\f(CW\\*(C`_\\|_wrap_malloc\\*(C'\\fR; if you do, the assembler may resolve the\ncall before the linker has a chance to wrap it to \\f(CW\\*(C`malloc\\*(C'\\fR.\n.IP \"\\fB\\-\\-eh\\-frame\\-hdr\\fR\" 4\n.IX Item \"--eh-frame-hdr\"\nRequest creation of \\f(CW\\*(C`.eh_frame_hdr\\*(C'\\fR section and \\s-1ELF\\s0\n\\&\\f(CW\\*(C`PT_GNU_EH_FRAME\\*(C'\\fR segment header.\n.IP \"\\fB\\-\\-enable\\-new\\-dtags\\fR\" 4\n.IX Item \"--enable-new-dtags\"\n.PD 0\n.IP \"\\fB\\-\\-disable\\-new\\-dtags\\fR\" 4\n.IX Item \"--disable-new-dtags\"\n.PD\nThis linker can create the new dynamic tags in \\s-1ELF\\s0. But the older \\s-1ELF\\s0\nsystems may not understand them. If you specify\n\\&\\fB\\-\\-enable\\-new\\-dtags\\fR, the dynamic tags will be created as needed.\nIf you specify \\fB\\-\\-disable\\-new\\-dtags\\fR, no new dynamic tags will be\ncreated. By default, the new dynamic tags are not created. Note that\nthose options are only available for \\s-1ELF\\s0 systems.\n.IP \"\\fB\\-\\-hash\\-size=\\fR\\fInumber\\fR\" 4\n.IX Item \"--hash-size=number\"\nSet the default size of the linker's hash tables to a prime number\nclose to \\fInumber\\fR.  Increasing this value can reduce the length of\ntime it takes the linker to perform its tasks, at the expense of\nincreasing the linker's memory requirements.  Similarly reducing this\nvalue can reduce the memory requirements at the expense of speed.\n.IP \"\\fB\\-\\-hash\\-style=\\fR\\fIstyle\\fR\" 4\n.IX Item \"--hash-style=style\"\nSet the type of linker's hash table(s).  \\fIstyle\\fR can be either\n\\&\\f(CW\\*(C`sysv\\*(C'\\fR for classic \\s-1ELF\\s0 \\f(CW\\*(C`.hash\\*(C'\\fR section, \\f(CW\\*(C`gnu\\*(C'\\fR for\nnew style \\s-1GNU\\s0 \\f(CW\\*(C`.gnu.hash\\*(C'\\fR section or \\f(CW\\*(C`both\\*(C'\\fR for both\nthe classic \\s-1ELF\\s0 \\f(CW\\*(C`.hash\\*(C'\\fR and new style \\s-1GNU\\s0 \\f(CW\\*(C`.gnu.hash\\*(C'\\fR\nhash tables.  The default is \\f(CW\\*(C`sysv\\*(C'\\fR.\n.IP \"\\fB\\-\\-reduce\\-memory\\-overheads\\fR\" 4\n.IX Item \"--reduce-memory-overheads\"\nThis option reduces memory requirements at ld runtime, at the expense of\nlinking speed.  This was introduced to select the old O(n^2) algorithm\nfor link map file generation, rather than the new O(n) algorithm which uses\nabout 40% more memory for symbol storage.\n.Sp\nAnother effect of the switch is to set the default hash table size to\n1021, which again saves memory at the cost of lengthening the linker's\nrun time.  This is not done however if the \\fB\\-\\-hash\\-size\\fR switch\nhas been used.\n.Sp\nThe \\fB\\-\\-reduce\\-memory\\-overheads\\fR switch may be also be used to\nenable other tradeoffs in future versions of the linker.\n.IP \"\\fB\\-\\-build\\-id\\fR\" 4\n.IX Item \"--build-id\"\n.PD 0\n.IP \"\\fB\\-\\-build\\-id=\\fR\\fIstyle\\fR\" 4\n.IX Item \"--build-id=style\"\n.PD\nRequest creation of \\f(CW\\*(C`.note.gnu.build\\-id\\*(C'\\fR \\s-1ELF\\s0 note section.\nThe contents of the note are unique bits identifying this linked\nfile.  \\fIstyle\\fR can be \\f(CW\\*(C`uuid\\*(C'\\fR to use 128 random bits,\n\\&\\f(CW\\*(C`sha1\\*(C'\\fR to use a 160\\-bit \\s-1SHA1\\s0 hash on the normative\nparts of the output contents, \\f(CW\\*(C`md5\\*(C'\\fR to use a 128\\-bit\n\\&\\s-1MD5\\s0 hash on the normative parts of the output contents, or\n\\&\\f(CW\\*(C`0x\\f(CIhexstring\\f(CW\\*(C'\\fR to use a chosen bit string specified as\nan even number of hexadecimal digits (\\f(CW\\*(C`\\-\\*(C'\\fR and \\f(CW\\*(C`:\\*(C'\\fR\ncharacters between digit pairs are ignored).  If \\fIstyle\\fR is\nomitted, \\f(CW\\*(C`sha1\\*(C'\\fR is used.\n.Sp\nThe \\f(CW\\*(C`md5\\*(C'\\fR and \\f(CW\\*(C`sha1\\*(C'\\fR styles produces an identifier\nthat is always the same in an identical output file, but will be\nunique among all nonidentical output files.  It is not intended\nto be compared as a checksum for the file's contents.  A linked\nfile may be changed later by other tools, but the build \\s-1ID\\s0 bit\nstring identifying the original linked file does not change.\n.Sp\nPassing \\f(CW\\*(C`none\\*(C'\\fR for \\fIstyle\\fR disables the setting from any\n\\&\\f(CW\\*(C`\\-\\-build\\-id\\*(C'\\fR options earlier on the command line.\n.PP\nThe i386 \\s-1PE\\s0 linker supports the \\fB\\-shared\\fR option, which causes\nthe output to be a dynamically linked library (\\s-1DLL\\s0) instead of a\nnormal executable.  You should name the output \\f(CW\\*(C`*.dll\\*(C'\\fR when you\nuse this option.  In addition, the linker fully supports the standard\n\\&\\f(CW\\*(C`*.def\\*(C'\\fR files, which may be specified on the linker command line\nlike an object file (in fact, it should precede archives it exports\nsymbols from, to ensure that they get linked in, just like a normal\nobject file).\n.PP\nIn addition to the options common to all targets, the i386 \\s-1PE\\s0 linker\nsupport additional command line options that are specific to the i386\n\\&\\s-1PE\\s0 target.  Options that take values may be separated from their\nvalues by either a space or an equals sign.\n.IP \"\\fB\\-\\-add\\-stdcall\\-alias\\fR\" 4\n.IX Item \"--add-stdcall-alias\"\nIf given, symbols with a stdcall suffix (@\\fInn\\fR) will be exported\nas-is and also with the suffix stripped.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-base\\-file\\fR \\fIfile\\fR\" 4\n.IX Item \"--base-file file\"\nUse \\fIfile\\fR as the name of a file in which to save the base\naddresses of all the relocations needed for generating DLLs with\n\\&\\fIdlltool\\fR.\n[This is an i386 \\s-1PE\\s0 specific option]\n.IP \"\\fB\\-\\-dll\\fR\" 4\n.IX Item \"--dll\"\nCreate a \\s-1DLL\\s0 instead of a regular executable.  You may also use\n\\&\\fB\\-shared\\fR or specify a \\f(CW\\*(C`LIBRARY\\*(C'\\fR in a given \\f(CW\\*(C`.def\\*(C'\\fR\nfile.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-enable\\-long\\-section\\-names\\fR\" 4\n.IX Item \"--enable-long-section-names\"\n.PD 0\n.IP \"\\fB\\-\\-disable\\-long\\-section\\-names\\fR\" 4\n.IX Item \"--disable-long-section-names\"\n.PD\nThe \\s-1PE\\s0 variants of the Coff object format add an extension that permits\nthe use of section names longer than eight characters, the normal limit\nfor Coff.  By default, these names are only allowed in object files, as\nfully-linked executable images do not carry the Coff string table required\nto support the longer names.  As a \\s-1GNU\\s0 extension, it is possible to\nallow their use in executable images as well, or to (probably pointlessly!)\ndisallow it in object files, by using these two options.  Executable images\ngenerated with these long section names are slightly non-standard, carrying\nas they do a string table, and may generate confusing output when examined\nwith non-GNU PE-aware tools, such as file viewers and dumpers.  However, \n\\&\\s-1GDB\\s0 relies on the use of \\s-1PE\\s0 long section names to find Dwarf\\-2 debug \ninformation sections in an executable image at runtime, and so if neither\noption is specified on the command-line, \\fBld\\fR will enable long\nsection names, overriding the default and technically correct behaviour,\nwhen it finds the presence of debug information while linking an executable\nimage and not stripping symbols.\n[This option is valid for all \\s-1PE\\s0 targeted ports of the linker]\n.IP \"\\fB\\-\\-enable\\-stdcall\\-fixup\\fR\" 4\n.IX Item \"--enable-stdcall-fixup\"\n.PD 0\n.IP \"\\fB\\-\\-disable\\-stdcall\\-fixup\\fR\" 4\n.IX Item \"--disable-stdcall-fixup\"\n.PD\nIf the link finds a symbol that it cannot resolve, it will attempt to\ndo \\*(L\"fuzzy linking\\*(R\" by looking for another defined symbol that differs\nonly in the format of the symbol name (cdecl vs stdcall) and will\nresolve that symbol by linking to the match.  For example, the\nundefined symbol \\f(CW\\*(C`_foo\\*(C'\\fR might be linked to the function\n\\&\\f(CW\\*(C`_foo@12\\*(C'\\fR, or the undefined symbol \\f(CW\\*(C`_bar@16\\*(C'\\fR might be linked\nto the function \\f(CW\\*(C`_bar\\*(C'\\fR.  When the linker does this, it prints a\nwarning, since it normally should have failed to link, but sometimes\nimport libraries generated from third-party dlls may need this feature\nto be usable.  If you specify \\fB\\-\\-enable\\-stdcall\\-fixup\\fR, this\nfeature is fully enabled and warnings are not printed.  If you specify\n\\&\\fB\\-\\-disable\\-stdcall\\-fixup\\fR, this feature is disabled and such\nmismatches are considered to be errors.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-export\\-all\\-symbols\\fR\" 4\n.IX Item \"--export-all-symbols\"\nIf given, all global symbols in the objects used to build a \\s-1DLL\\s0 will\nbe exported by the \\s-1DLL\\s0.  Note that this is the default if there\notherwise wouldn't be any exported symbols.  When symbols are\nexplicitly exported via \\s-1DEF\\s0 files or implicitly exported via function\nattributes, the default is to not export anything else unless this\noption is given.  Note that the symbols \\f(CW\\*(C`DllMain@12\\*(C'\\fR,\n\\&\\f(CW\\*(C`DllEntryPoint@0\\*(C'\\fR, \\f(CW\\*(C`DllMainCRTStartup@12\\*(C'\\fR, and\n\\&\\f(CW\\*(C`impure_ptr\\*(C'\\fR will not be automatically\nexported.  Also, symbols imported from other DLLs will not be\nre-exported, nor will symbols specifying the \\s-1DLL\\s0's internal layout\nsuch as those beginning with \\f(CW\\*(C`_head_\\*(C'\\fR or ending with\n\\&\\f(CW\\*(C`_iname\\*(C'\\fR.  In addition, no symbols from \\f(CW\\*(C`libgcc\\*(C'\\fR,\n\\&\\f(CW\\*(C`libstd++\\*(C'\\fR, \\f(CW\\*(C`libmingw32\\*(C'\\fR, or \\f(CW\\*(C`crtX.o\\*(C'\\fR will be exported.\nSymbols whose names begin with \\f(CW\\*(C`_\\|_rtti_\\*(C'\\fR or \\f(CW\\*(C`_\\|_builtin_\\*(C'\\fR will\nnot be exported, to help with \\*(C+ DLLs.  Finally, there is an\nextensive list of cygwin-private symbols that are not exported\n(obviously, this applies on when building DLLs for cygwin targets).\nThese cygwin-excludes are: \\f(CW\\*(C`_cygwin_dll_entry@12\\*(C'\\fR,\n\\&\\f(CW\\*(C`_cygwin_crt0_common@8\\*(C'\\fR, \\f(CW\\*(C`_cygwin_noncygwin_dll_entry@12\\*(C'\\fR,\n\\&\\f(CW\\*(C`_fmode\\*(C'\\fR, \\f(CW\\*(C`_impure_ptr\\*(C'\\fR, \\f(CW\\*(C`cygwin_attach_dll\\*(C'\\fR,\n\\&\\f(CW\\*(C`cygwin_premain0\\*(C'\\fR, \\f(CW\\*(C`cygwin_premain1\\*(C'\\fR, \\f(CW\\*(C`cygwin_premain2\\*(C'\\fR,\n\\&\\f(CW\\*(C`cygwin_premain3\\*(C'\\fR, and \\f(CW\\*(C`environ\\*(C'\\fR.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-exclude\\-symbols\\fR \\fIsymbol\\fR\\fB,\\fR\\fIsymbol\\fR\\fB,...\\fR\" 4\n.IX Item \"--exclude-symbols symbol,symbol,...\"\nSpecifies a list of symbols which should not be automatically\nexported.  The symbol names may be delimited by commas or colons.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-file\\-alignment\\fR\" 4\n.IX Item \"--file-alignment\"\nSpecify the file alignment.  Sections in the file will always begin at\nfile offsets which are multiples of this number.  This defaults to\n512.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-heap\\fR \\fIreserve\\fR\" 4\n.IX Item \"--heap reserve\"\n.PD 0\n.IP \"\\fB\\-\\-heap\\fR \\fIreserve\\fR\\fB,\\fR\\fIcommit\\fR\" 4\n.IX Item \"--heap reserve,commit\"\n.PD\nSpecify the number of bytes of memory to reserve (and optionally commit)\nto be used as heap for this program.  The default is 1Mb reserved, 4K\ncommitted.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-image\\-base\\fR \\fIvalue\\fR\" 4\n.IX Item \"--image-base value\"\nUse \\fIvalue\\fR as the base address of your program or dll.  This is\nthe lowest memory location that will be used when your program or dll\nis loaded.  To reduce the need to relocate and improve performance of\nyour dlls, each should have a unique base address and not overlap any\nother dlls.  The default is 0x400000 for executables, and 0x10000000\nfor dlls.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-kill\\-at\\fR\" 4\n.IX Item \"--kill-at\"\nIf given, the stdcall suffixes (@\\fInn\\fR) will be stripped from\nsymbols before they are exported.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-large\\-address\\-aware\\fR\" 4\n.IX Item \"--large-address-aware\"\nIf given, the appropriate bit in the \\*(L\"Characteristics\\*(R\" field of the \\s-1COFF\\s0\nheader is set to indicate that this executable supports virtual addresses\ngreater than 2 gigabytes.  This should be used in conjunction with the /3GB\nor /USERVA=\\fIvalue\\fR megabytes switch in the \\*(L\"[operating systems]\\*(R\"\nsection of the \\s-1BOOT\\s0.INI.  Otherwise, this bit has no effect.\n[This option is specific to \\s-1PE\\s0 targeted ports of the linker]\n.IP \"\\fB\\-\\-major\\-image\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--major-image-version value\"\nSets the major number of the \\*(L\"image version\\*(R\".  Defaults to 1.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-major\\-os\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--major-os-version value\"\nSets the major number of the \\*(L\"os version\\*(R\".  Defaults to 4.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-major\\-subsystem\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--major-subsystem-version value\"\nSets the major number of the \\*(L\"subsystem version\\*(R\".  Defaults to 4.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-minor\\-image\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--minor-image-version value\"\nSets the minor number of the \\*(L\"image version\\*(R\".  Defaults to 0.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-minor\\-os\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--minor-os-version value\"\nSets the minor number of the \\*(L\"os version\\*(R\".  Defaults to 0.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-minor\\-subsystem\\-version\\fR \\fIvalue\\fR\" 4\n.IX Item \"--minor-subsystem-version value\"\nSets the minor number of the \\*(L\"subsystem version\\*(R\".  Defaults to 0.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-output\\-def\\fR \\fIfile\\fR\" 4\n.IX Item \"--output-def file\"\nThe linker will create the file \\fIfile\\fR which will contain a \\s-1DEF\\s0\nfile corresponding to the \\s-1DLL\\s0 the linker is generating.  This \\s-1DEF\\s0 file\n(which should be called \\f(CW\\*(C`*.def\\*(C'\\fR) may be used to create an import\nlibrary with \\f(CW\\*(C`dlltool\\*(C'\\fR or may be used as a reference to\nautomatically or implicitly exported symbols.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-out\\-implib\\fR \\fIfile\\fR\" 4\n.IX Item \"--out-implib file\"\nThe linker will create the file \\fIfile\\fR which will contain an\nimport lib corresponding to the \\s-1DLL\\s0 the linker is generating. This\nimport lib (which should be called \\f(CW\\*(C`*.dll.a\\*(C'\\fR or \\f(CW\\*(C`*.a\\*(C'\\fR\nmay be used to link clients against the generated \\s-1DLL\\s0; this behaviour\nmakes it possible to skip a separate \\f(CW\\*(C`dlltool\\*(C'\\fR import library\ncreation step.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-enable\\-auto\\-image\\-base\\fR\" 4\n.IX Item \"--enable-auto-image-base\"\nAutomatically choose the image base for DLLs, unless one is specified\nusing the \\f(CW\\*(C`\\-\\-image\\-base\\*(C'\\fR argument.  By using a hash generated\nfrom the dllname to create unique image bases for each \\s-1DLL\\s0, in-memory\ncollisions and relocations which can delay program execution are\navoided.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-disable\\-auto\\-image\\-base\\fR\" 4\n.IX Item \"--disable-auto-image-base\"\nDo not automatically generate a unique image base.  If there is no\nuser-specified image base (\\f(CW\\*(C`\\-\\-image\\-base\\*(C'\\fR) then use the platform\ndefault.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-dll\\-search\\-prefix\\fR \\fIstring\\fR\" 4\n.IX Item \"--dll-search-prefix string\"\nWhen linking dynamically to a dll without an import library,\nsearch for \\f(CW\\*(C`<string><basename>.dll\\*(C'\\fR in preference to\n\\&\\f(CW\\*(C`lib<basename>.dll\\*(C'\\fR. This behaviour allows easy distinction\nbetween DLLs built for the various \\*(L\"subplatforms\\*(R\": native, cygwin,\nuwin, pw, etc.  For instance, cygwin DLLs typically use\n\\&\\f(CW\\*(C`\\-\\-dll\\-search\\-prefix=cyg\\*(C'\\fR.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-enable\\-auto\\-import\\fR\" 4\n.IX Item \"--enable-auto-import\"\nDo sophisticated linking of \\f(CW\\*(C`_symbol\\*(C'\\fR to \\f(CW\\*(C`_\\|_imp_\\|_symbol\\*(C'\\fR for\n\\&\\s-1DATA\\s0 imports from DLLs, and create the necessary thunking symbols when\nbuilding the import libraries with those \\s-1DATA\\s0 exports. Note: Use of the\n\\&'auto\\-import' extension will cause the text section of the image file\nto be made writable. This does not conform to the PE-COFF format\nspecification published by Microsoft.\n.Sp\nNote \\- use of the 'auto\\-import' extension will also cause read only\ndata which would normally be placed into the .rdata section to be\nplaced into the .data section instead.  This is in order to work\naround a problem with consts that is described here:\nhttp://www.cygwin.com/ml/cygwin/2004\\-09/msg01101.html\n.Sp\nUsing 'auto\\-import' generally will 'just work' \\*(-- but sometimes you may\nsee this message:\n.Sp\n\"variable '<var>' can't be auto-imported. Please read the\ndocumentation for ld's \\f(CW\\*(C`\\-\\-enable\\-auto\\-import\\*(C'\\fR for details.\"\n.Sp\nThis message occurs when some (sub)expression accesses an address\nultimately given by the sum of two constants (Win32 import tables only\nallow one).  Instances where this may occur include accesses to member\nfields of struct variables imported from a \\s-1DLL\\s0, as well as using a\nconstant index into an array variable imported from a \\s-1DLL\\s0.  Any\nmultiword variable (arrays, structs, long long, etc) may trigger\nthis error condition.  However, regardless of the exact data type\nof the offending exported variable, ld will always detect it, issue\nthe warning, and exit.\n.Sp\nThere are several ways to address this difficulty, regardless of the\ndata type of the exported variable:\n.Sp\nOne way is to use \\-\\-enable\\-runtime\\-pseudo\\-reloc switch. This leaves the task\nof adjusting references in your client code for runtime environment, so\nthis method works only when runtime environment supports this feature.\n.Sp\nA second solution is to force one of the 'constants' to be a variable \\*(--\nthat is, unknown and un-optimizable at compile time.  For arrays,\nthere are two possibilities: a) make the indexee (the array's address)\na variable, or b) make the 'constant' index a variable.  Thus:\n.Sp\n.Vb 3\n\\&        extern type extern_array[];\n\\&        extern_array[1] \\-\\->\n\\&           { volatile type *t=extern_array; t[1] }\n.Ve\n.Sp\nor\n.Sp\n.Vb 3\n\\&        extern type extern_array[];\n\\&        extern_array[1] \\-\\->\n\\&           { volatile int t=1; extern_array[t] }\n.Ve\n.Sp\nFor structs (and most other multiword data types) the only option\nis to make the struct itself (or the long long, or the ...) variable:\n.Sp\n.Vb 3\n\\&        extern struct s extern_struct;\n\\&        extern_struct.field \\-\\->\n\\&           { volatile struct s *t=&extern_struct; t\\->field }\n.Ve\n.Sp\nor\n.Sp\n.Vb 3\n\\&        extern long long extern_ll;\n\\&        extern_ll \\-\\->\n\\&          { volatile long long * local_ll=&extern_ll; *local_ll }\n.Ve\n.Sp\nA third method of dealing with this difficulty is to abandon\n\\&'auto\\-import' for the offending symbol and mark it with\n\\&\\f(CW\\*(C`_\\|_declspec(dllimport)\\*(C'\\fR.  However, in practise that\nrequires using compile-time #defines to indicate whether you are\nbuilding a \\s-1DLL\\s0, building client code that will link to the \\s-1DLL\\s0, or\nmerely building/linking to a static library.   In making the choice\nbetween the various methods of resolving the 'direct address with\nconstant offset' problem, you should consider typical real-world usage:\n.Sp\nOriginal:\n.Sp\n.Vb 7\n\\&        \\-\\-foo.h\n\\&        extern int arr[];\n\\&        \\-\\-foo.c\n\\&        #include \"foo.h\"\n\\&        void main(int argc, char **argv){\n\\&          printf(\"%d\\en\",arr[1]);\n\\&        }\n.Ve\n.Sp\nSolution 1:\n.Sp\n.Vb 9\n\\&        \\-\\-foo.h\n\\&        extern int arr[];\n\\&        \\-\\-foo.c\n\\&        #include \"foo.h\"\n\\&        void main(int argc, char **argv){\n\\&          /* This workaround is for win32 and cygwin; do not \"optimize\" */\n\\&          volatile int *parr = arr;\n\\&          printf(\"%d\\en\",parr[1]);\n\\&        }\n.Ve\n.Sp\nSolution 2:\n.Sp\n.Vb 10\n\\&        \\-\\-foo.h\n\\&        /* Note: auto\\-export is assumed (no _\\|_declspec(dllexport)) */\n\\&        #if (defined(_WIN32) || defined(_\\|_CYGWIN_\\|_)) && \\e\n\\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))\n\\&        #define FOO_IMPORT _\\|_declspec(dllimport)\n\\&        #else\n\\&        #define FOO_IMPORT\n\\&        #endif\n\\&        extern FOO_IMPORT int arr[];\n\\&        \\-\\-foo.c\n\\&        #include \"foo.h\"\n\\&        void main(int argc, char **argv){\n\\&          printf(\"%d\\en\",arr[1]);\n\\&        }\n.Ve\n.Sp\nA fourth way to avoid this problem is to re-code your\nlibrary to use a functional interface rather than a data interface\nfor the offending variables (e.g. \\fIset_foo()\\fR and \\fIget_foo()\\fR accessor\nfunctions).\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-disable\\-auto\\-import\\fR\" 4\n.IX Item \"--disable-auto-import\"\nDo not attempt to do sophisticated linking of \\f(CW\\*(C`_symbol\\*(C'\\fR to\n\\&\\f(CW\\*(C`_\\|_imp_\\|_symbol\\*(C'\\fR for \\s-1DATA\\s0 imports from DLLs.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-enable\\-runtime\\-pseudo\\-reloc\\fR\" 4\n.IX Item \"--enable-runtime-pseudo-reloc\"\nIf your code contains expressions described in \\-\\-enable\\-auto\\-import section,\nthat is, \\s-1DATA\\s0 imports from \\s-1DLL\\s0 with non-zero offset, this switch will create\na vector of 'runtime pseudo relocations' which can be used by runtime\nenvironment to adjust references to such data in your client code.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-disable\\-runtime\\-pseudo\\-reloc\\fR\" 4\n.IX Item \"--disable-runtime-pseudo-reloc\"\nDo not create pseudo relocations for non-zero offset \\s-1DATA\\s0 imports from\nDLLs.  This is the default.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-enable\\-extra\\-pe\\-debug\\fR\" 4\n.IX Item \"--enable-extra-pe-debug\"\nShow additional debug info related to auto-import symbol thunking.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-section\\-alignment\\fR\" 4\n.IX Item \"--section-alignment\"\nSets the section alignment.  Sections in memory will always begin at\naddresses which are a multiple of this number.  Defaults to 0x1000.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-stack\\fR \\fIreserve\\fR\" 4\n.IX Item \"--stack reserve\"\n.PD 0\n.IP \"\\fB\\-\\-stack\\fR \\fIreserve\\fR\\fB,\\fR\\fIcommit\\fR\" 4\n.IX Item \"--stack reserve,commit\"\n.PD\nSpecify the number of bytes of memory to reserve (and optionally commit)\nto be used as stack for this program.  The default is 2Mb reserved, 4K\ncommitted.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.IP \"\\fB\\-\\-subsystem\\fR \\fIwhich\\fR\" 4\n.IX Item \"--subsystem which\"\n.PD 0\n.IP \"\\fB\\-\\-subsystem\\fR \\fIwhich\\fR\\fB:\\fR\\fImajor\\fR\" 4\n.IX Item \"--subsystem which:major\"\n.IP \"\\fB\\-\\-subsystem\\fR \\fIwhich\\fR\\fB:\\fR\\fImajor\\fR\\fB.\\fR\\fIminor\\fR\" 4\n.IX Item \"--subsystem which:major.minor\"\n.PD\nSpecifies the subsystem under which your program will execute.  The\nlegal values for \\fIwhich\\fR are \\f(CW\\*(C`native\\*(C'\\fR, \\f(CW\\*(C`windows\\*(C'\\fR,\n\\&\\f(CW\\*(C`console\\*(C'\\fR, \\f(CW\\*(C`posix\\*(C'\\fR, and \\f(CW\\*(C`xbox\\*(C'\\fR.  You may optionally set\nthe subsystem version also.  Numeric values are also accepted for\n\\&\\fIwhich\\fR.\n[This option is specific to the i386 \\s-1PE\\s0 targeted port of the linker]\n.Sp\nThe following options set flags in the \\f(CW\\*(C`DllCharacteristics\\*(C'\\fR field\nof the \\s-1PE\\s0 file header:\n[These options are specific to \\s-1PE\\s0 targeted ports of the linker]\n.IP \"\\fB\\-\\-dynamicbase\\fR\" 4\n.IX Item \"--dynamicbase\"\nThe image base address may be relocated using address space layout\nrandomization (\\s-1ASLR\\s0).  This feature was introduced with \\s-1MS\\s0 Windows\nVista for i386 \\s-1PE\\s0 targets.\n.IP \"\\fB\\-\\-forceinteg\\fR\" 4\n.IX Item \"--forceinteg\"\nCode integrity checks are enforced.\n.IP \"\\fB\\-\\-nxcompat\\fR\" 4\n.IX Item \"--nxcompat\"\nThe image is compatible with the Data Execution Prevention.\nThis feature was introduced with \\s-1MS\\s0 Windows \\s-1XP\\s0 \\s-1SP2\\s0 for i386 \\s-1PE\\s0 targets.\n.IP \"\\fB\\-\\-no\\-isolation\\fR\" 4\n.IX Item \"--no-isolation\"\nAlthough the image understands isolation, do not isolate the image.\n.IP \"\\fB\\-\\-no\\-seh\\fR\" 4\n.IX Item \"--no-seh\"\nThe image does not use \\s-1SEH\\s0. No \\s-1SE\\s0 handler may be called from\nthis image.\n.IP \"\\fB\\-\\-no\\-bind\\fR\" 4\n.IX Item \"--no-bind\"\nDo not bind this image.\n.IP \"\\fB\\-\\-wdmdriver\\fR\" 4\n.IX Item \"--wdmdriver\"\nThe driver uses the \\s-1MS\\s0 Windows Driver Model.\n.IP \"\\fB\\-\\-tsaware\\fR\" 4\n.IX Item \"--tsaware\"\nThe image is Terminal Server aware.\n.PP\nThe 68HC11 and 68HC12 linkers support specific options to control the\nmemory bank switching mapping and trampoline code generation.\n.IP \"\\fB\\-\\-no\\-trampoline\\fR\" 4\n.IX Item \"--no-trampoline\"\nThis option disables the generation of trampoline. By default a trampoline\nis generated for each far function which is called using a \\f(CW\\*(C`jsr\\*(C'\\fR\ninstruction (this happens when a pointer to a far function is taken).\n.IP \"\\fB\\-\\-bank\\-window\\fR \\fIname\\fR\" 4\n.IX Item \"--bank-window name\"\nThis option indicates to the linker the name of the memory region in\nthe \\fB\\s-1MEMORY\\s0\\fR specification that describes the memory bank window.\nThe definition of such region is then used by the linker to compute\npaging and addresses within the memory window.\n.PP\nThe following options are supported to control handling of \\s-1GOT\\s0 generation\nwhen linking for 68K targets.\n.IP \"\\fB\\-\\-got=\\fR\\fItype\\fR\" 4\n.IX Item \"--got=type\"\nThis option tells the linker which \\s-1GOT\\s0 generation scheme to use.\n\\&\\fItype\\fR should be one of \\fBsingle\\fR, \\fBnegative\\fR,\n\\&\\fBmultigot\\fR or \\fBtarget\\fR.  For more information refer to the\nInfo entry for \\fIld\\fR.\n.SH \"ENVIRONMENT\"\n.IX Header \"ENVIRONMENT\"\nYou can change the behaviour of \\fBld\\fR with the environment variables\n\\&\\f(CW\\*(C`GNUTARGET\\*(C'\\fR,\n\\&\\f(CW\\*(C`LDEMULATION\\*(C'\\fR and \\f(CW\\*(C`COLLECT_NO_DEMANGLE\\*(C'\\fR.\n.PP\n\\&\\f(CW\\*(C`GNUTARGET\\*(C'\\fR determines the input-file object format if you don't\nuse \\fB\\-b\\fR (or its synonym \\fB\\-\\-format\\fR).  Its value should be one\nof the \\s-1BFD\\s0 names for an input format.  If there is no\n\\&\\f(CW\\*(C`GNUTARGET\\*(C'\\fR in the environment, \\fBld\\fR uses the natural format\nof the target. If \\f(CW\\*(C`GNUTARGET\\*(C'\\fR is set to \\f(CW\\*(C`default\\*(C'\\fR then \\s-1BFD\\s0\nattempts to discover the input format by examining binary input files;\nthis method often succeeds, but there are potential ambiguities, since\nthere is no method of ensuring that the magic number used to specify\nobject-file formats is unique.  However, the configuration procedure for\n\\&\\s-1BFD\\s0 on each system places the conventional format for that system first\nin the search-list, so ambiguities are resolved in favor of convention.\n.PP\n\\&\\f(CW\\*(C`LDEMULATION\\*(C'\\fR determines the default emulation if you don't use the\n\\&\\fB\\-m\\fR option.  The emulation can affect various aspects of linker\nbehaviour, particularly the default linker script.  You can list the\navailable emulations with the \\fB\\-\\-verbose\\fR or \\fB\\-V\\fR options.  If\nthe \\fB\\-m\\fR option is not used, and the \\f(CW\\*(C`LDEMULATION\\*(C'\\fR environment\nvariable is not defined, the default emulation depends upon how the\nlinker was configured.\n.PP\nNormally, the linker will default to demangling symbols.  However, if\n\\&\\f(CW\\*(C`COLLECT_NO_DEMANGLE\\*(C'\\fR is set in the environment, then it will\ndefault to not demangling symbols.  This environment variable is used in\na similar fashion by the \\f(CW\\*(C`gcc\\*(C'\\fR linker wrapper program.  The default\nmay be overridden by the \\fB\\-\\-demangle\\fR and \\fB\\-\\-no\\-demangle\\fR\noptions.\n.SH \"SEE ALSO\"\n.IX Header \"SEE ALSO\"\n\\&\\fIar\\fR\\|(1), \\fInm\\fR\\|(1), \\fIobjcopy\\fR\\|(1), \\fIobjdump\\fR\\|(1), \\fIreadelf\\fR\\|(1) and\nthe Info entries for \\fIbinutils\\fR and\n\\&\\fIld\\fR.\n.SH \"COPYRIGHT\"\n.IX Header \"COPYRIGHT\"\nCopyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,\n2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n.PP\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the \\s-1GNU\\s0 Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, with no Front-Cover Texts, and with no\nBack-Cover Texts.  A copy of the license is included in the\nsection entitled \\*(L\"\\s-1GNU\\s0 Free Documentation License\\*(R\".\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/ld.texinfo": "\\input texinfo\n@setfilename ld.info\n@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n@c Free Software Foundation, Inc.\n@syncodeindex ky cp\n@c man begin INCLUDE\n@include configdoc.texi\n@c (configdoc.texi is generated by the Makefile)\n@include bfdver.texi\n@c man end\n\n@c @smallbook\n\n@macro gcctabopt{body}\n@code{\\body\\}\n@end macro\n\n@c man begin NAME\n@ifset man\n@c Configure for the generation of man pages\n@set UsesEnvVars\n@set GENERIC\n@set ARM\n@set H8300\n@set HPPA\n@set I960\n@set M68HC11\n@set M68K\n@set MMIX\n@set MSP430\n@set POWERPC\n@set POWERPC64\n@set Renesas\n@set SPU\n@set TICOFF\n@set WIN32\n@set XTENSA\n@end ifset\n@c man end\n\n@ifinfo\n@format\nSTART-INFO-DIR-ENTRY\n* Ld: (ld).                       The GNU linker.\nEND-INFO-DIR-ENTRY\n@end format\n@end ifinfo\n\n@copying\nThis file documents the @sc{gnu} linker LD\n@ifset VERSION_PACKAGE\n@value{VERSION_PACKAGE}\n@end ifset\nversion @value{VERSION}.\n\nCopyright @copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000,\n2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, with no Front-Cover Texts, and with no\nBack-Cover Texts.  A copy of the license is included in the\nsection entitled ``GNU Free Documentation License''.\n@end copying\n@iftex\n@finalout\n@setchapternewpage odd\n@settitle The GNU linker\n@titlepage\n@title The GNU linker\n@sp 1\n@subtitle @code{ld}\n@ifset VERSION_PACKAGE\n@subtitle @value{VERSION_PACKAGE}\n@end ifset\n@subtitle Version @value{VERSION}\n@author Steve Chamberlain\n@author Ian Lance Taylor\n@page\n\n@tex\n{\\parskip=0pt\n\\hfill Red Hat Inc\\par\n\\hfill nickc\\@credhat.com, doc\\@redhat.com\\par\n\\hfill {\\it The GNU linker}\\par\n\\hfill Edited by Jeffrey Osier (jeffrey\\@cygnus.com)\\par\n}\n\\global\\parindent=0pt % Steve likes it this way.\n@end tex\n\n@vskip 0pt plus 1filll\n@c man begin COPYRIGHT\nCopyright @copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,\n2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, with no Front-Cover Texts, and with no\nBack-Cover Texts.  A copy of the license is included in the\nsection entitled ``GNU Free Documentation License''.\n@c man end\n\n@end titlepage\n@end iftex\n@contents\n@c FIXME: Talk about importance of *order* of args, cmds to linker!\n\n@ifnottex\n@node Top\n@top LD\nThis file documents the @sc{gnu} linker ld\n@ifset VERSION_PACKAGE\n@value{VERSION_PACKAGE}\n@end ifset\nversion @value{VERSION}.\n\nThis document is distributed under the terms of the GNU Free\nDocumentation License version 1.3.  A copy of the license is included\nin the section entitled ``GNU Free Documentation License''.\n\n@menu\n* Overview::                    Overview\n* Invocation::                  Invocation\n* Scripts::                     Linker Scripts\n@ifset GENERIC\n* Machine Dependent::           Machine Dependent Features\n@end ifset\n@ifclear GENERIC\n@ifset H8300\n* H8/300::                      ld and the H8/300\n@end ifset\n@ifset Renesas\n* Renesas::                     ld and other Renesas micros\n@end ifset\n@ifset I960\n* i960::                        ld and the Intel 960 family\n@end ifset\n@ifset ARM\n* ARM::\t\t\t\tld and the ARM family\n@end ifset\n@ifset HPPA\n* HPPA ELF32::                  ld and HPPA 32-bit ELF\n@end ifset\n@ifset M68HC11\n* M68HC11/68HC12::              ld and the Motorola 68HC11 and 68HC12 families\n@end ifset\n@ifset M68K\n* M68K::                        ld and Motorola 68K family\n@end ifset\n@ifset POWERPC\n* PowerPC ELF32::               ld and PowerPC 32-bit ELF Support\n@end ifset\n@ifset POWERPC64\n* PowerPC64 ELF64::             ld and PowerPC64 64-bit ELF Support\n@end ifset\n@ifset SPU\n* SPU ELF::\t\t\tld and SPU ELF Support\n@end ifset\n@ifset TICOFF\n* TI COFF::                     ld and the TI COFF\n@end ifset\n@ifset WIN32\n* Win32::                       ld and WIN32 (cygwin/mingw)\n@end ifset\n@ifset XTENSA\n* Xtensa::                      ld and Xtensa Processors\n@end ifset\n@end ifclear\n@ifclear SingleFormat\n* BFD::                         BFD\n@end ifclear\n@c Following blank line required for remaining bug in makeinfo conds/menus\n\n* Reporting Bugs::              Reporting Bugs\n* MRI::                         MRI Compatible Script Files\n* GNU Free Documentation License::  GNU Free Documentation License\n* LD Index::                       LD Index\n@end menu\n@end ifnottex\n\n@node Overview\n@chapter Overview\n\n@cindex @sc{gnu} linker\n@cindex what is this?\n\n@ifset man\n@c man begin SYNOPSIS\nld [@b{options}] @var{objfile} @dots{}\n@c man end\n\n@c man begin SEEALSO\nar(1), nm(1), objcopy(1), objdump(1), readelf(1) and\nthe Info entries for @file{binutils} and\n@file{ld}.\n@c man end\n@end ifset\n\n@c man begin DESCRIPTION\n\n@command{ld} combines a number of object and archive files, relocates\ntheir data and ties up symbol references. Usually the last step in\ncompiling a program is to run @command{ld}.\n\n@command{ld} accepts Linker Command Language files written in\na superset of AT&T's Link Editor Command Language syntax,\nto provide explicit and total control over the linking process.\n\n@ifset man\n@c For the man only\nThis man page does not describe the command language; see the\n@command{ld} entry in @code{info} for full details on the command\nlanguage and on other aspects of the GNU linker.\n@end ifset\n\n@ifclear SingleFormat\nThis version of @command{ld} uses the general purpose BFD libraries\nto operate on object files. This allows @command{ld} to read, combine, and\nwrite object files in many different formats---for example, COFF or\n@code{a.out}.  Different formats may be linked together to produce any\navailable kind of object file.  @xref{BFD}, for more information.\n@end ifclear\n\nAside from its flexibility, the @sc{gnu} linker is more helpful than other\nlinkers in providing diagnostic information.  Many linkers abandon\nexecution immediately upon encountering an error; whenever possible,\n@command{ld} continues executing, allowing you to identify other errors\n(or, in some cases, to get an output file in spite of the error).\n\n@c man end\n\n@node Invocation\n@chapter Invocation\n\n@c man begin DESCRIPTION\n\nThe @sc{gnu} linker @command{ld} is meant to cover a broad range of situations,\nand to be as compatible as possible with other linkers.  As a result,\nyou have many choices to control its behavior.\n\n@c man end\n\n@ifset UsesEnvVars\n@menu\n* Options::                     Command Line Options\n* Environment::                 Environment Variables\n@end menu\n\n@node Options\n@section Command Line Options\n@end ifset\n\n@cindex command line\n@cindex options\n\n@c man begin OPTIONS\n\nThe linker supports a plethora of command-line options, but in actual\npractice few of them are used in any particular context.\n@cindex standard Unix system\nFor instance, a frequent use of @command{ld} is to link standard Unix\nobject files on a standard, supported Unix system.  On such a system, to\nlink a file @code{hello.o}:\n\n@smallexample\nld -o @var{output} /lib/crt0.o hello.o -lc\n@end smallexample\n\nThis tells @command{ld} to produce a file called @var{output} as the\nresult of linking the file @code{/lib/crt0.o} with @code{hello.o} and\nthe library @code{libc.a}, which will come from the standard search\ndirectories.  (See the discussion of the @samp{-l} option below.)\n\nSome of the command-line options to @command{ld} may be specified at any\npoint in the command line.  However, options which refer to files, such\nas @samp{-l} or @samp{-T}, cause the file to be read at the point at\nwhich the option appears in the command line, relative to the object\nfiles and other file options.  Repeating non-file options with a\ndifferent argument will either have no further effect, or override prior\noccurrences (those further to the left on the command line) of that\noption.  Options which may be meaningfully specified more than once are\nnoted in the descriptions below.\n\n@cindex object files\nNon-option arguments are object files or archives which are to be linked\ntogether.  They may follow, precede, or be mixed in with command-line\noptions, except that an object file argument may not be placed between\nan option and its argument.\n\nUsually the linker is invoked with at least one object file, but you can\nspecify other forms of binary input files using @samp{-l}, @samp{-R},\nand the script command language.  If @emph{no} binary input files at all\nare specified, the linker does not produce any output, and issues the\nmessage @samp{No input files}.\n\nIf the linker cannot recognize the format of an object file, it will\nassume that it is a linker script.  A script specified in this way\naugments the main linker script used for the link (either the default\nlinker script or the one specified by using @samp{-T}).  This feature\npermits the linker to link against a file which appears to be an object\nor an archive, but actually merely defines some symbol values, or uses\n@code{INPUT} or @code{GROUP} to load other objects.  Specifying a\nscript in this way merely augments the main linker script, with the\nextra commands placed after the main script; use the @samp{-T} option\nto replace the default linker script entirely, but note the effect of\nthe @code{INSERT} command.  @xref{Scripts}.\n\nFor options whose names are a single letter,\noption arguments must either follow the option letter without intervening\nwhitespace, or be given as separate arguments immediately following the\noption that requires them.\n\nFor options whose names are multiple letters, either one dash or two can\nprecede the option name; for example, @samp{-trace-symbol} and\n@samp{--trace-symbol} are equivalent.  Note---there is one exception to\nthis rule.  Multiple letter options that start with a lower case 'o' can\nonly be preceded by two dashes.  This is to reduce confusion with the\n@samp{-o} option.  So for example @samp{-omagic} sets the output file\nname to @samp{magic} whereas @samp{--omagic} sets the NMAGIC flag on the\noutput.\n\nArguments to multiple-letter options must either be separated from the\noption name by an equals sign, or be given as separate arguments\nimmediately following the option that requires them.  For example,\n@samp{--trace-symbol foo} and @samp{--trace-symbol=foo} are equivalent.\nUnique abbreviations of the names of multiple-letter options are\naccepted.\n\nNote---if the linker is being invoked indirectly, via a compiler driver\n(e.g. @samp{gcc}) then all the linker command line options should be\nprefixed by @samp{-Wl,} (or whatever is appropriate for the particular\ncompiler driver) like this:\n\n@smallexample\n  gcc -Wl,--start-group foo.o bar.o -Wl,--end-group\n@end smallexample\n\nThis is important, because otherwise the compiler driver program may\nsilently drop the linker options, resulting in a bad link.  Confusion\nmay also arise when passing options that require values through a\ndriver, as the use of a space between option and argument acts as\na separator, and causes the driver to pass only the option to the linker\nand the argument to the compiler.  In this case, it is simplest to use\nthe joined forms of both single- and multiple-letter options, such as:\n\n@smallexample\n  gcc foo.o bar.o -Wl,-eENTRY -Wl,-Map=a.map\n@end smallexample\n\nHere is a table of the generic command line switches accepted by the GNU\nlinker:\n\n@table @gcctabopt\n@include at-file.texi\n\n@kindex -a @var{keyword}\n@item -a @var{keyword}\nThis option is supported for HP/UX compatibility.  The @var{keyword}\nargument must be one of the strings @samp{archive}, @samp{shared}, or\n@samp{default}.  @samp{-aarchive} is functionally equivalent to\n@samp{-Bstatic}, and the other two keywords are functionally equivalent\nto @samp{-Bdynamic}.  This option may be used any number of times.\n\n@ifset I960\n@cindex architectures\n@kindex -A @var{arch}\n@item -A @var{architecture}\n@kindex --architecture=@var{arch}\n@itemx --architecture=@var{architecture}\nIn the current release of @command{ld}, this option is useful only for the\nIntel 960 family of architectures.  In that @command{ld} configuration, the\n@var{architecture} argument identifies the particular architecture in\nthe 960 family, enabling some safeguards and modifying the\narchive-library search path.  @xref{i960,,@command{ld} and the Intel 960\nfamily}, for details.\n\nFuture releases of @command{ld} may support similar functionality for\nother architecture families.\n@end ifset\n\n@ifclear SingleFormat\n@cindex binary input format\n@kindex -b @var{format}\n@kindex --format=@var{format}\n@cindex input format\n@cindex input format\n@item -b @var{input-format}\n@itemx --format=@var{input-format}\n@command{ld} may be configured to support more than one kind of object\nfile.  If your @command{ld} is configured this way, you can use the\n@samp{-b} option to specify the binary format for input object files\nthat follow this option on the command line.  Even when @command{ld} is\nconfigured to support alternative object formats, you don't usually need\nto specify this, as @command{ld} should be configured to expect as a\ndefault input format the most usual format on each machine.\n@var{input-format} is a text string, the name of a particular format\nsupported by the BFD libraries.  (You can list the available binary\nformats with @samp{objdump -i}.)\n@xref{BFD}.\n\nYou may want to use this option if you are linking files with an unusual\nbinary format.  You can also use @samp{-b} to switch formats explicitly (when\nlinking object files of different formats), by including\n@samp{-b @var{input-format}} before each group of object files in a\nparticular format.\n\nThe default format is taken from the environment variable\n@code{GNUTARGET}.\n@ifset UsesEnvVars\n@xref{Environment}.\n@end ifset\nYou can also define the input format from a script, using the command\n@code{TARGET};\n@ifclear man\nsee @ref{Format Commands}.\n@end ifclear\n@end ifclear\n\n@kindex -c @var{MRI-cmdfile}\n@kindex --mri-script=@var{MRI-cmdfile}\n@cindex compatibility, MRI\n@item -c @var{MRI-commandfile}\n@itemx --mri-script=@var{MRI-commandfile}\nFor compatibility with linkers produced by MRI, @command{ld} accepts script\nfiles written in an alternate, restricted command language, described in\n@ifclear man\n@ref{MRI,,MRI Compatible Script Files}.\n@end ifclear\n@ifset man\nthe MRI Compatible Script Files section of GNU ld documentation.\n@end ifset\nIntroduce MRI script files with\nthe option @samp{-c}; use the @samp{-T} option to run linker\nscripts written in the general-purpose @command{ld} scripting language.\nIf @var{MRI-cmdfile} does not exist, @command{ld} looks for it in the directories\nspecified by any @samp{-L} options.\n\n@cindex common allocation\n@kindex -d\n@kindex -dc\n@kindex -dp\n@item -d\n@itemx -dc\n@itemx -dp\nThese three options are equivalent; multiple forms are supported for\ncompatibility with other linkers.  They assign space to common symbols\neven if a relocatable output file is specified (with @samp{-r}).  The\nscript command @code{FORCE_COMMON_ALLOCATION} has the same effect.\n@xref{Miscellaneous Commands}.\n\n@cindex entry point, from command line\n@kindex -e @var{entry}\n@kindex --entry=@var{entry}\n@item -e @var{entry}\n@itemx --entry=@var{entry}\nUse @var{entry} as the explicit symbol for beginning execution of your\nprogram, rather than the default entry point.  If there is no symbol\nnamed @var{entry}, the linker will try to parse @var{entry} as a number,\nand use that as the entry address (the number will be interpreted in\nbase 10; you may use a leading @samp{0x} for base 16, or a leading\n@samp{0} for base 8).  @xref{Entry Point}, for a discussion of defaults\nand other ways of specifying the entry point.\n\n@kindex --exclude-libs\n@item --exclude-libs @var{lib},@var{lib},...\nSpecifies a list of archive libraries from which symbols should not be automatically\nexported.  The library names may be delimited by commas or colons.  Specifying\n@code{--exclude-libs ALL} excludes symbols in all archive libraries from\nautomatic export.  This option is available only for the i386 PE targeted\nport of the linker and for ELF targeted ports.  For i386 PE, symbols\nexplicitly listed in a .def file are still exported, regardless of this\noption.  For ELF targeted ports, symbols affected by this option will\nbe treated as hidden.\n\n@kindex --exclude-modules-for-implib\n@item --exclude-modules-for-implib @var{module},@var{module},...\nSpecifies a list of object files or archive members, from which symbols\nshould not be automatically exported, but which should be copied wholesale\ninto the import library being generated during the link.  The module names\nmay be delimited by commas or colons, and must match exactly the filenames\nused by @command{ld} to open the files; for archive members, this is simply\nthe member name, but for object files the name listed must include and\nmatch precisely any path used to specify the input file on the linker's\ncommand-line.  This option is available only for the i386 PE targeted port\nof the linker.  Symbols explicitly listed in a .def file are still exported,\nregardless of this option.\n\n@cindex dynamic symbol table\n@kindex -E\n@kindex --export-dynamic\n@kindex --no-export-dynamic\n@item -E\n@itemx --export-dynamic\n@itemx --no-export-dynamic\nWhen creating a dynamically linked executable, using the @option{-E}\noption or the @option{--export-dynamic} option causes the linker to add\nall symbols to the dynamic symbol table.  The dynamic symbol table is the\nset of symbols which are visible from dynamic objects at run time.\n\nIf you do not use either of these options (or use the\n@option{--no-export-dynamic} option to restore the default behavior), the\ndynamic symbol table will normally contain only those symbols which are\nreferenced by some dynamic object mentioned in the link.\n\nIf you use @code{dlopen} to load a dynamic object which needs to refer\nback to the symbols defined by the program, rather than some other\ndynamic object, then you will probably need to use this option when\nlinking the program itself.\n\nYou can also use the dynamic list to control what symbols should\nbe added to the dynamic symbol table if the output format supports it.\nSee the description of @samp{--dynamic-list}.\n\nNote that this option is specific to ELF targeted ports.  PE targets\nsupport a similar function to export all symbols from a DLL or EXE; see\nthe description of @samp{--export-all-symbols} below.\n\n@ifclear SingleFormat\n@cindex big-endian objects\n@cindex endianness\n@kindex -EB\n@item -EB\nLink big-endian objects.  This affects the default output format.\n\n@cindex little-endian objects\n@kindex -EL\n@item -EL\nLink little-endian objects.  This affects the default output format.\n@end ifclear\n\n@kindex -f @var{name}\n@kindex --auxiliary=@var{name}\n@item -f @var{name}\n@itemx --auxiliary=@var{name}\nWhen creating an ELF shared object, set the internal DT_AUXILIARY field\nto the specified name.  This tells the dynamic linker that the symbol\ntable of the shared object should be used as an auxiliary filter on the\nsymbol table of the shared object @var{name}.\n\nIf you later link a program against this filter object, then, when you\nrun the program, the dynamic linker will see the DT_AUXILIARY field.  If\nthe dynamic linker resolves any symbols from the filter object, it will\nfirst check whether there is a definition in the shared object\n@var{name}.  If there is one, it will be used instead of the definition\nin the filter object.  The shared object @var{name} need not exist.\nThus the shared object @var{name} may be used to provide an alternative\nimplementation of certain functions, perhaps for debugging or for\nmachine specific performance.\n\nThis option may be specified more than once.  The DT_AUXILIARY entries\nwill be created in the order in which they appear on the command line.\n\n@kindex -F @var{name}\n@kindex --filter=@var{name}\n@item -F @var{name}\n@itemx --filter=@var{name}\nWhen creating an ELF shared object, set the internal DT_FILTER field to\nthe specified name.  This tells the dynamic linker that the symbol table\nof the shared object which is being created should be used as a filter\non the symbol table of the shared object @var{name}.\n\nIf you later link a program against this filter object, then, when you\nrun the program, the dynamic linker will see the DT_FILTER field.  The\ndynamic linker will resolve symbols according to the symbol table of the\nfilter object as usual, but it will actually link to the definitions\nfound in the shared object @var{name}.  Thus the filter object can be\nused to select a subset of the symbols provided by the object\n@var{name}.\n\nSome older linkers used the @option{-F} option throughout a compilation\ntoolchain for specifying object-file format for both input and output\nobject files.\n@ifclear SingleFormat\nThe @sc{gnu} linker uses other mechanisms for this purpose: the\n@option{-b}, @option{--format}, @option{--oformat} options, the\n@code{TARGET} command in linker scripts, and the @code{GNUTARGET}\nenvironment variable.\n@end ifclear\nThe @sc{gnu} linker will ignore the @option{-F} option when not\ncreating an ELF shared object.\n\n@cindex finalization function\n@kindex -fini=@var{name}\n@item -fini=@var{name}\nWhen creating an ELF executable or shared object, call NAME when the\nexecutable or shared object is unloaded, by setting DT_FINI to the\naddress of the function.  By default, the linker uses @code{_fini} as\nthe function to call.\n\n@kindex -g\n@item -g\nIgnored.  Provided for compatibility with other tools.\n\n@kindex -G @var{value}\n@kindex --gpsize=@var{value}\n@cindex object size\n@item -G @var{value}\n@itemx --gpsize=@var{value}\nSet the maximum size of objects to be optimized using the GP register to\n@var{size}.  This is only meaningful for object file formats such as\nMIPS ECOFF which supports putting large and small objects into different\nsections.  This is ignored for other object file formats.\n\n@cindex runtime library name\n@kindex -h @var{name}\n@kindex -soname=@var{name}\n@item -h @var{name}\n@itemx -soname=@var{name}\nWhen creating an ELF shared object, set the internal DT_SONAME field to\nthe specified name.  When an executable is linked with a shared object\nwhich has a DT_SONAME field, then when the executable is run the dynamic\nlinker will attempt to load the shared object specified by the DT_SONAME\nfield rather than the using the file name given to the linker.\n\n@kindex -i\n@cindex incremental link\n@item -i\nPerform an incremental link (same as option @samp{-r}).\n\n@cindex initialization function\n@kindex -init=@var{name}\n@item -init=@var{name}\nWhen creating an ELF executable or shared object, call NAME when the\nexecutable or shared object is loaded, by setting DT_INIT to the address\nof the function.  By default, the linker uses @code{_init} as the\nfunction to call.\n\n@cindex archive files, from cmd line\n@kindex -l @var{namespec}\n@kindex --library=@var{namespec}\n@item -l @var{namespec}\n@itemx --library=@var{namespec}\nAdd the archive or object file specified by @var{namespec} to the\nlist of files to link.  This option may be used any number of times.\nIf @var{namespec} is of the form @file{:@var{filename}}, @command{ld}\nwill search the library path for a file called @var{filename}, otherwise it\nwill search the library path for a file called @file{lib@var{namespec}.a}.\n\nOn systems which support shared libraries, @command{ld} may also search for\nfiles other than @file{lib@var{namespec}.a}.  Specifically, on ELF\nand SunOS systems, @command{ld} will search a directory for a library\ncalled @file{lib@var{namespec}.so} before searching for one called\n@file{lib@var{namespec}.a}.  (By convention, a @code{.so} extension\nindicates a shared library.)  Note that this behavior does not apply\nto @file{:@var{filename}}, which always specifies a file called\n@var{filename}.\n\nThe linker will search an archive only once, at the location where it is\nspecified on the command line.  If the archive defines a symbol which\nwas undefined in some object which appeared before the archive on the\ncommand line, the linker will include the appropriate file(s) from the\narchive.  However, an undefined symbol in an object appearing later on\nthe command line will not cause the linker to search the archive again.\n\nSee the @option{-(} option for a way to force the linker to search\narchives multiple times.\n\nYou may list the same archive multiple times on the command line.\n\n@ifset GENERIC\nThis type of archive searching is standard for Unix linkers.  However,\nif you are using @command{ld} on AIX, note that it is different from the\nbehaviour of the AIX linker.\n@end ifset\n\n@cindex search directory, from cmd line\n@kindex -L @var{dir}\n@kindex --library-path=@var{dir}\n@item -L @var{searchdir}\n@itemx --library-path=@var{searchdir}\nAdd path @var{searchdir} to the list of paths that @command{ld} will search\nfor archive libraries and @command{ld} control scripts.  You may use this\noption any number of times.  The directories are searched in the order\nin which they are specified on the command line.  Directories specified\non the command line are searched before the default directories.  All\n@option{-L} options apply to all @option{-l} options, regardless of the\norder in which the options appear.  @option{-L} options do not affect\nhow @command{ld} searches for a linker script unless @option{-T}\noption is specified.\n\nIf @var{searchdir} begins with @code{=}, then the @code{=} will be replaced\nby the @dfn{sysroot prefix}, a path specified when the linker is configured.\n\n@ifset UsesEnvVars\nThe default set of paths searched (without being specified with\n@samp{-L}) depends on which emulation mode @command{ld} is using, and in\nsome cases also on how it was configured.  @xref{Environment}.\n@end ifset\n\nThe paths can also be specified in a link script with the\n@code{SEARCH_DIR} command.  Directories specified this way are searched\nat the point in which the linker script appears in the command line.\n\n@cindex emulation\n@kindex -m @var{emulation}\n@item -m @var{emulation}\nEmulate the @var{emulation} linker.  You can list the available\nemulations with the @samp{--verbose} or @samp{-V} options.\n\nIf the @samp{-m} option is not used, the emulation is taken from the\n@code{LDEMULATION} environment variable, if that is defined.\n\nOtherwise, the default emulation depends upon how the linker was\nconfigured.\n\n@cindex link map\n@kindex -M\n@kindex --print-map\n@item -M\n@itemx --print-map\nPrint a link map to the standard output.  A link map provides\ninformation about the link, including the following:\n\n@itemize @bullet\n@item\nWhere object files are mapped into memory.\n@item\nHow common symbols are allocated.\n@item\nAll archive members included in the link, with a mention of the symbol\nwhich caused the archive member to be brought in.\n@item\nThe values assigned to symbols.\n\nNote - symbols whose values are computed by an expression which\ninvolves a reference to a previous value of the same symbol may not\nhave correct result displayed in the link map.  This is because the\nlinker discards intermediate results and only retains the final value\nof an expression.  Under such circumstances the linker will display\nthe final value enclosed by square brackets.  Thus for example a\nlinker script containing:\n\n@smallexample\n   foo = 1\n   foo = foo * 4\n   foo = foo + 8\n@end smallexample\n\nwill produce the following output in the link map if the @option{-M}\noption is used:\n\n@smallexample\n   0x00000001                foo = 0x1\n   [0x0000000c]                foo = (foo * 0x4)\n   [0x0000000c]                foo = (foo + 0x8)\n@end smallexample\n\nSee @ref{Expressions} for more information about expressions in linker\nscripts.\n@end itemize\n\n@kindex -n\n@cindex read-only text\n@cindex NMAGIC\n@kindex --nmagic\n@item -n\n@itemx --nmagic\nTurn off page alignment of sections, and mark the output as\n@code{NMAGIC} if possible.\n\n@kindex -N\n@kindex --omagic\n@cindex read/write from cmd line\n@cindex OMAGIC\n@item -N\n@itemx --omagic\nSet the text and data sections to be readable and writable.  Also, do\nnot page-align the data segment, and disable linking against shared\nlibraries.  If the output format supports Unix style magic numbers,\nmark the output as @code{OMAGIC}. Note: Although a writable text section\nis allowed for PE-COFF targets, it does not conform to the format\nspecification published by Microsoft.\n\n@kindex --no-omagic\n@cindex OMAGIC\n@item --no-omagic\nThis option negates most of the effects of the @option{-N} option.  It\nsets the text section to be read-only, and forces the data segment to\nbe page-aligned.  Note - this option does not enable linking against\nshared libraries.  Use @option{-Bdynamic} for this.\n\n@kindex -o @var{output}\n@kindex --output=@var{output}\n@cindex naming the output file\n@item -o @var{output}\n@itemx --output=@var{output}\nUse @var{output} as the name for the program produced by @command{ld}; if this\noption is not specified, the name @file{a.out} is used by default.  The\nscript command @code{OUTPUT} can also specify the output file name.\n\n@kindex -O @var{level}\n@cindex generating optimized output\n@item -O @var{level}\nIf @var{level} is a numeric values greater than zero @command{ld} optimizes\nthe output.  This might take significantly longer and therefore probably\nshould only be enabled for the final binary.  At the moment this\noption only affects ELF shared library generation.  Future releases of\nthe linker may make more use of this option.  Also currently there is\nno difference in the linker's behaviour for different non-zero values\nof this option.  Again this may change with future releases.\n\n@kindex -q\n@kindex --emit-relocs\n@cindex retain relocations in final executable\n@item -q\n@itemx --emit-relocs\nLeave relocation sections and contents in fully linked executables.\nPost link analysis and optimization tools may need this information in\norder to perform correct modifications of executables.  This results\nin larger executables.\n\nThis option is currently only supported on ELF platforms.\n\n@kindex --force-dynamic\n@cindex forcing the creation of dynamic sections\n@item --force-dynamic\nForce the output file to have dynamic sections.  This option is specific\nto VxWorks targets.\n\n@cindex partial link\n@cindex relocatable output\n@kindex -r\n@kindex --relocatable\n@item -r\n@itemx --relocatable\nGenerate relocatable output---i.e., generate an output file that can in\nturn serve as input to @command{ld}.  This is often called @dfn{partial\nlinking}.  As a side effect, in environments that support standard Unix\nmagic numbers, this option also sets the output file's magic number to\n@code{OMAGIC}.\n@c ; see @option{-N}.\nIf this option is not specified, an absolute file is produced.  When\nlinking C++ programs, this option @emph{will not} resolve references to\nconstructors; to do that, use @samp{-Ur}.\n\nWhen an input file does not have the same format as the output file,\npartial linking is only supported if that input file does not contain any\nrelocations.  Different output formats can have further restrictions; for\nexample some @code{a.out}-based formats do not support partial linking\nwith input files in other formats at all.\n\nThis option does the same thing as @samp{-i}.\n\n@kindex -R @var{file}\n@kindex --just-symbols=@var{file}\n@cindex symbol-only input\n@item -R @var{filename}\n@itemx --just-symbols=@var{filename}\nRead symbol names and their addresses from @var{filename}, but do not\nrelocate it or include it in the output.  This allows your output file\nto refer symbolically to absolute locations of memory defined in other\nprograms.  You may use this option more than once.\n\nFor compatibility with other ELF linkers, if the @option{-R} option is\nfollowed by a directory name, rather than a file name, it is treated as\nthe @option{-rpath} option.\n\n@kindex -s\n@kindex --strip-all\n@cindex strip all symbols\n@item -s\n@itemx --strip-all\nOmit all symbol information from the output file.\n\n@kindex -S\n@kindex --strip-debug\n@cindex strip debugger symbols\n@item -S\n@itemx --strip-debug\nOmit debugger symbol information (but not all symbols) from the output file.\n\n@kindex -t\n@kindex --trace\n@cindex input files, displaying\n@item -t\n@itemx --trace\nPrint the names of the input files as @command{ld} processes them.\n\n@kindex -T @var{script}\n@kindex --script=@var{script}\n@cindex script files\n@item -T @var{scriptfile}\n@itemx --script=@var{scriptfile}\nUse @var{scriptfile} as the linker script.  This script replaces\n@command{ld}'s default linker script (rather than adding to it), so\n@var{commandfile} must specify everything necessary to describe the\noutput file.  @xref{Scripts}.  If @var{scriptfile} does not exist in\nthe current directory, @code{ld} looks for it in the directories\nspecified by any preceding @samp{-L} options.  Multiple @samp{-T}\noptions accumulate.\n\n@kindex -dT @var{script}\n@kindex --default-script=@var{script}\n@cindex script files\n@item -dT @var{scriptfile}\n@itemx --default-script=@var{scriptfile}\nUse @var{scriptfile} as the default linker script.  @xref{Scripts}.\n\nThis option is similar to the @option{--script} option except that\nprocessing of the script is delayed until after the rest of the\ncommand line has been processed.  This allows options placed after the\n@option{--default-script} option on the command line to affect the\nbehaviour of the linker script, which can be important when the linker\ncommand line cannot be directly controlled by the user.  (eg because\nthe command line is being constructed by another tool, such as\n@samp{gcc}).\n\n@kindex -u @var{symbol}\n@kindex --undefined=@var{symbol}\n@cindex undefined symbol\n@item -u @var{symbol}\n@itemx --undefined=@var{symbol}\nForce @var{symbol} to be entered in the output file as an undefined\nsymbol.  Doing this may, for example, trigger linking of additional\nmodules from standard libraries.  @samp{-u} may be repeated with\ndifferent option arguments to enter additional undefined symbols.  This\noption is equivalent to the @code{EXTERN} linker script command.\n\n@kindex -Ur\n@cindex constructors\n@item -Ur\nFor anything other than C++ programs, this option is equivalent to\n@samp{-r}: it generates relocatable output---i.e., an output file that can in\nturn serve as input to @command{ld}.  When linking C++ programs, @samp{-Ur}\n@emph{does} resolve references to constructors, unlike @samp{-r}.\nIt does not work to use @samp{-Ur} on files that were themselves linked\nwith @samp{-Ur}; once the constructor table has been built, it cannot\nbe added to.  Use @samp{-Ur} only for the last partial link, and\n@samp{-r} for the others.\n\n@kindex --unique[=@var{SECTION}]\n@item --unique[=@var{SECTION}]\nCreates a separate output section for every input section matching\n@var{SECTION}, or if the optional wildcard @var{SECTION} argument is\nmissing, for every orphan input section.  An orphan section is one not\nspecifically mentioned in a linker script.  You may use this option\nmultiple times on the command line;  It prevents the normal merging of\ninput sections with the same name, overriding output section assignments\nin a linker script.\n\n@kindex -v\n@kindex -V\n@kindex --version\n@cindex version\n@item -v\n@itemx --version\n@itemx -V\nDisplay the version number for @command{ld}.  The @option{-V} option also\nlists the supported emulations.\n\n@kindex -x\n@kindex --discard-all\n@cindex deleting local symbols\n@item -x\n@itemx --discard-all\nDelete all local symbols.\n\n@kindex -X\n@kindex --discard-locals\n@cindex local symbols, deleting\n@item -X\n@itemx --discard-locals\nDelete all temporary local symbols.  (These symbols start with\nsystem-specific local label prefixes, typically @samp{.L} for ELF systems\nor @samp{L} for traditional a.out systems.)\n\n@kindex -y @var{symbol}\n@kindex --trace-symbol=@var{symbol}\n@cindex symbol tracing\n@item -y @var{symbol}\n@itemx --trace-symbol=@var{symbol}\nPrint the name of each linked file in which @var{symbol} appears.  This\noption may be given any number of times.  On many systems it is necessary\nto prepend an underscore.\n\nThis option is useful when you have an undefined symbol in your link but\ndon't know where the reference is coming from.\n\n@kindex -Y @var{path}\n@item -Y @var{path}\nAdd @var{path} to the default library search path.  This option exists\nfor Solaris compatibility.\n\n@kindex -z @var{keyword}\n@item -z @var{keyword}\nThe recognized keywords are:\n@table @samp\n\n@item combreloc\nCombines multiple reloc sections and sorts them to make dynamic symbol\nlookup caching possible.\n\n@item defs\nDisallows undefined symbols in object files.  Undefined symbols in\nshared libraries are still allowed.\n\n@item execstack\nMarks the object as requiring executable stack.\n\n@item initfirst\nThis option is only meaningful when building a shared object.\nIt marks the object so that its runtime initialization will occur\nbefore the runtime initialization of any other objects brought into\nthe process at the same time.  Similarly the runtime finalization of\nthe object will occur after the runtime finalization of any other\nobjects.\n\n@item interpose\nMarks the object that its symbol table interposes before all symbols\nbut the primary executable.\n\n@item lazy\nWhen generating an executable or shared library, mark it to tell the\ndynamic linker to defer function call resolution to the point when\nthe function is called (lazy binding), rather than at load time.\nLazy binding is the default.\n\n@item loadfltr\nMarks  the object that its filters be processed immediately at\nruntime.\n\n@item muldefs\nAllows multiple definitions.\n\n@item nocombreloc\nDisables multiple reloc sections combining.\n\n@item nocopyreloc\nDisables production of copy relocs.\n\n@item nodefaultlib\nMarks the object that the search for dependencies of this object will\nignore any default library search paths.\n\n@item nodelete\nMarks the object shouldn't be unloaded at runtime.\n\n@item nodlopen\nMarks the object not available to @code{dlopen}.\n\n@item nodump\nMarks the object can not be dumped by @code{dldump}.\n\n@item noexecstack\nMarks the object as not requiring executable stack.\n\n@item norelro\nDon't create an ELF @code{PT_GNU_RELRO} segment header in the object.\n\n@item now\nWhen generating an executable or shared library, mark it to tell the\ndynamic linker to resolve all symbols when the program is started, or\nwhen the shared library is linked to using dlopen, instead of\ndeferring function call resolution to the point when the function is\nfirst called.\n\n@item origin\nMarks the object may contain $ORIGIN.\n\n@item relro\nCreate an ELF @code{PT_GNU_RELRO} segment header in the object.\n\n@item max-page-size=@var{value}\nSet the emulation maximum page size to @var{value}.\n\n@item common-page-size=@var{value}\nSet the emulation common page size to @var{value}.\n\n@end table\n\nOther keywords are ignored for Solaris compatibility.\n\n@kindex -(\n@cindex groups of archives\n@item -( @var{archives} -)\n@itemx --start-group @var{archives} --end-group\nThe @var{archives} should be a list of archive files.  They may be\neither explicit file names, or @samp{-l} options.\n\nThe specified archives are searched repeatedly until no new undefined\nreferences are created.  Normally, an archive is searched only once in\nthe order that it is specified on the command line.  If a symbol in that\narchive is needed to resolve an undefined symbol referred to by an\nobject in an archive that appears later on the command line, the linker\nwould not be able to resolve that reference.  By grouping the archives,\nthey all be searched repeatedly until all possible references are\nresolved.\n\nUsing this option has a significant performance cost.  It is best to use\nit only when there are unavoidable circular references between two or\nmore archives.\n\n@kindex --accept-unknown-input-arch\n@kindex --no-accept-unknown-input-arch\n@item --accept-unknown-input-arch\n@itemx --no-accept-unknown-input-arch\nTells the linker to accept input files whose architecture cannot be\nrecognised.  The assumption is that the user knows what they are doing\nand deliberately wants to link in these unknown input files.  This was\nthe default behaviour of the linker, before release 2.14.  The default\nbehaviour from release 2.14 onwards is to reject such input files, and\nso the @samp{--accept-unknown-input-arch} option has been added to\nrestore the old behaviour.\n\n@kindex --as-needed\n@kindex --no-as-needed\n@item --as-needed\n@itemx --no-as-needed\nThis option affects ELF DT_NEEDED tags for dynamic libraries mentioned\non the command line after the @option{--as-needed} option.  Normally,\nthe linker will add a DT_NEEDED tag for each dynamic library mentioned\non the command line, regardless of whether the library is actually\nneeded.  @option{--as-needed} causes a DT_NEEDED tag to only be emitted\nfor a library that satisfies a symbol reference from regular objects\nwhich is undefined at the point that the library was linked, or, if\nthe library is not found in the DT_NEEDED lists of other libraries\nlinked up to that point, a reference from another dynamic library.\n@option{--no-as-needed} restores the default behaviour.\n\n@kindex --add-needed\n@kindex --no-add-needed\n@item --add-needed\n@itemx --no-add-needed\nThis option affects the treatment of dynamic libraries from ELF\nDT_NEEDED tags in dynamic libraries mentioned on the command line after\nthe @option{--no-add-needed} option.  Normally, the linker will add\na DT_NEEDED tag for each dynamic library from DT_NEEDED tags.\n@option{--no-add-needed} causes DT_NEEDED tags will never be emitted\nfor those libraries from DT_NEEDED tags. @option{--add-needed} restores\nthe default behaviour.\n\n@kindex -assert @var{keyword}\n@item -assert @var{keyword}\nThis option is ignored for SunOS compatibility.\n\n@kindex -Bdynamic\n@kindex -dy\n@kindex -call_shared\n@item -Bdynamic\n@itemx -dy\n@itemx -call_shared\nLink against dynamic libraries.  This is only meaningful on platforms\nfor which shared libraries are supported.  This option is normally the\ndefault on such platforms.  The different variants of this option are\nfor compatibility with various systems.  You may use this option\nmultiple times on the command line: it affects library searching for\n@option{-l} options which follow it.\n\n@kindex -Bgroup\n@item -Bgroup\nSet the @code{DF_1_GROUP} flag in the @code{DT_FLAGS_1} entry in the dynamic\nsection.  This causes the runtime linker to handle lookups in this\nobject and its dependencies to be performed only inside the group.\n@option{--unresolved-symbols=report-all} is implied.  This option is\nonly meaningful on ELF platforms which support shared libraries.\n\n@kindex -Bstatic\n@kindex -dn\n@kindex -non_shared\n@kindex -static\n@item -Bstatic\n@itemx -dn\n@itemx -non_shared\n@itemx -static\nDo not link against shared libraries.  This is only meaningful on\nplatforms for which shared libraries are supported.  The different\nvariants of this option are for compatibility with various systems.  You\nmay use this option multiple times on the command line: it affects\nlibrary searching for @option{-l} options which follow it.  This\noption also implies @option{--unresolved-symbols=report-all}.  This\noption can be used with @option{-shared}.  Doing so means that a\nshared library is being created but that all of the library's external\nreferences must be resolved by pulling in entries from static\nlibraries.\n\n@kindex -Bsymbolic\n@item -Bsymbolic\nWhen creating a shared library, bind references to global symbols to the\ndefinition within the shared library, if any.  Normally, it is possible\nfor a program linked against a shared library to override the definition\nwithin the shared library.  This option is only meaningful on ELF\nplatforms which support shared libraries.\n\n@kindex -Bsymbolic-functions\n@item -Bsymbolic-functions\nWhen creating a shared library, bind references to global function\nsymbols to the definition within the shared library, if any.\nThis option is only meaningful on ELF platforms which support shared\nlibraries.\n\n@kindex --dynamic-list=@var{dynamic-list-file}\n@item --dynamic-list=@var{dynamic-list-file}\nSpecify the name of a dynamic list file to the linker.  This is\ntypically used when creating shared libraries to specify a list of\nglobal symbols whose references shouldn't be bound to the definition\nwithin the shared library, or creating dynamically linked executables\nto specify a list of symbols which should be added to the symbol table\nin the executable.  This option is only meaningful on ELF platforms\nwhich support shared libraries.\n\nThe format of the dynamic list is the same as the version node without\nscope and node name.  See @ref{VERSION} for more information.\n\n@kindex --dynamic-list-data\n@item --dynamic-list-data\nInclude all global data symbols to the dynamic list.\n\n@kindex --dynamic-list-cpp-new\n@item --dynamic-list-cpp-new\nProvide the builtin dynamic list for C++ operator new and delete.  It\nis mainly useful for building shared libstdc++.\n\n@kindex --dynamic-list-cpp-typeinfo\n@item --dynamic-list-cpp-typeinfo\nProvide the builtin dynamic list for C++ runtime type identification.\n\n@kindex --check-sections\n@kindex --no-check-sections\n@item --check-sections\n@itemx --no-check-sections\nAsks the linker @emph{not} to check section addresses after they have\nbeen assigned to see if there are any overlaps.  Normally the linker will\nperform this check, and if it finds any overlaps it will produce\nsuitable error messages.  The linker does know about, and does make\nallowances for sections in overlays.  The default behaviour can be\nrestored by using the command line switch @option{--check-sections}.\nSection overlap is not usually checked for relocatable links.  You can\nforce checking in that case by using the @option{--check-sections}\noption.\n\n@cindex cross reference table\n@kindex --cref\n@item --cref\nOutput a cross reference table.  If a linker map file is being\ngenerated, the cross reference table is printed to the map file.\nOtherwise, it is printed on the standard output.\n\nThe format of the table is intentionally simple, so that it may be\neasily processed by a script if necessary.  The symbols are printed out,\nsorted by name.  For each symbol, a list of file names is given.  If the\nsymbol is defined, the first file listed is the location of the\ndefinition.  The remaining files contain references to the symbol.\n\n@cindex common allocation\n@kindex --no-define-common\n@item --no-define-common\nThis option inhibits the assignment of addresses to common symbols.\nThe script command @code{INHIBIT_COMMON_ALLOCATION} has the same effect.\n@xref{Miscellaneous Commands}.\n\nThe @samp{--no-define-common} option allows decoupling\nthe decision to assign addresses to Common symbols from the choice\nof the output file type; otherwise a non-Relocatable output type\nforces assigning addresses to Common symbols.\nUsing @samp{--no-define-common} allows Common symbols that are referenced\nfrom a shared library to be assigned addresses only in the main program.\nThis eliminates the unused duplicate space in the shared library,\nand also prevents any possible confusion over resolving to the wrong\nduplicate when there are many dynamic modules with specialized search\npaths for runtime symbol resolution.\n\n@cindex symbols, from command line\n@kindex --defsym=@var{symbol}=@var{exp}\n@item --defsym=@var{symbol}=@var{expression}\nCreate a global symbol in the output file, containing the absolute\naddress given by @var{expression}.  You may use this option as many\ntimes as necessary to define multiple symbols in the command line.  A\nlimited form of arithmetic is supported for the @var{expression} in this\ncontext: you may give a hexadecimal constant or the name of an existing\nsymbol, or use @code{+} and @code{-} to add or subtract hexadecimal\nconstants or symbols.  If you need more elaborate expressions, consider\nusing the linker command language from a script (@pxref{Assignments,,\nAssignment: Symbol Definitions}).  @emph{Note:} there should be no white\nspace between @var{symbol}, the equals sign (``@key{=}''), and\n@var{expression}.\n\n@cindex demangling, from command line\n@kindex --demangle[=@var{style}]\n@kindex --no-demangle\n@item --demangle[=@var{style}]\n@itemx --no-demangle\nThese options control whether to demangle symbol names in error messages\nand other output.  When the linker is told to demangle, it tries to\npresent symbol names in a readable fashion: it strips leading\nunderscores if they are used by the object file format, and converts C++\nmangled symbol names into user readable names.  Different compilers have\ndifferent mangling styles.  The optional demangling style argument can be used\nto choose an appropriate demangling style for your compiler.  The linker will\ndemangle by default unless the environment variable @samp{COLLECT_NO_DEMANGLE}\nis set.  These options may be used to override the default.\n\n@cindex dynamic linker, from command line\n@kindex -I@var{file}\n@kindex --dynamic-linker=@var{file}\n@item -I@var{file}\n@itemx --dynamic-linker=@var{file}\nSet the name of the dynamic linker.  This is only meaningful when\ngenerating dynamically linked ELF executables.  The default dynamic\nlinker is normally correct; don't use this unless you know what you are\ndoing.\n\n@kindex --fatal-warnings\n@kindex --no-fatal-warnings\n@item --fatal-warnings\n@itemx --no-fatal-warnings\nTreat all warnings as errors.  The default behaviour can be restored\nwith the option @option{--no-fatal-warnings}.\n\n@kindex --force-exe-suffix\n@item  --force-exe-suffix\nMake sure that an output file has a .exe suffix.\n\nIf a successfully built fully linked output file does not have a\n@code{.exe} or @code{.dll} suffix, this option forces the linker to copy\nthe output file to one of the same name with a @code{.exe} suffix. This\noption is useful when using unmodified Unix makefiles on a Microsoft\nWindows host, since some versions of Windows won't run an image unless\nit ends in a @code{.exe} suffix.\n\n@kindex --gc-sections\n@kindex --no-gc-sections\n@cindex garbage collection\n@item --gc-sections\n@itemx --no-gc-sections\nEnable garbage collection of unused input sections.  It is ignored on\ntargets that do not support this option.  The default behaviour (of not\nperforming this garbage collection) can be restored by specifying\n@samp{--no-gc-sections} on the command line.\n\n@samp{--gc-sections} decides which input sections are used by\nexamining symbols and relocations.  The section containing the entry\nsymbol and all sections containing symbols undefined on the\ncommand-line will be kept, as will sections containing symbols\nreferenced by dynamic objects.  Note that when building shared\nlibraries, the linker must assume that any visible symbol is\nreferenced.  Once this initial set of sections has been determined,\nthe linker recursively marks as used any section referenced by their\nrelocations.  See @samp{--entry} and @samp{--undefined}.\n\nThis option can be set when doing a partial link (enabled with option\n@samp{-r}).  In this case the root of symbols kept must be explicitely \nspecified either by an @samp{--entry} or @samp{--undefined} option or by\na @code{ENTRY} command in the linker script.\n\n@kindex --print-gc-sections\n@kindex --no-print-gc-sections\n@cindex garbage collection\n@item --print-gc-sections\n@itemx --no-print-gc-sections\nList all sections removed by garbage collection.  The listing is\nprinted on stderr.  This option is only effective if garbage\ncollection has been enabled via the @samp{--gc-sections}) option.  The\ndefault behaviour (of not listing the sections that are removed) can\nbe restored by specifying @samp{--no-print-gc-sections} on the command\nline.\n\n@cindex help\n@cindex usage\n@kindex --help\n@item --help\nPrint a summary of the command-line options on the standard output and exit.\n\n@kindex --target-help\n@item --target-help\nPrint a summary of all target specific options on the standard output and exit.\n\n@kindex -Map=@var{mapfile}\n@item -Map=@var{mapfile}\nPrint a link map to the file @var{mapfile}.  See the description of the\n@option{-M} option, above.\n\n@cindex memory usage\n@kindex --no-keep-memory\n@item --no-keep-memory\n@command{ld} normally optimizes for speed over memory usage by caching the\nsymbol tables of input files in memory.  This option tells @command{ld} to\ninstead optimize for memory usage, by rereading the symbol tables as\nnecessary.  This may be required if @command{ld} runs out of memory space\nwhile linking a large executable.\n\n@kindex --no-undefined\n@kindex -z defs\n@item --no-undefined\n@itemx -z defs\nReport unresolved symbol references from regular object files.  This\nis done even if the linker is creating a non-symbolic shared library.\nThe switch @option{--[no-]allow-shlib-undefined} controls the\nbehaviour for reporting unresolved references found in shared\nlibraries being linked in.\n\n@kindex --allow-multiple-definition\n@kindex -z muldefs\n@item --allow-multiple-definition\n@itemx -z muldefs\nNormally when a symbol is defined multiple times, the linker will\nreport a fatal error. These options allow multiple definitions and the\nfirst definition will be used.\n\n@kindex --allow-shlib-undefined\n@kindex --no-allow-shlib-undefined\n@item --allow-shlib-undefined\n@itemx --no-allow-shlib-undefined\nAllows or disallows undefined symbols in shared libraries.\nThis switch is similar to @option{--no-undefined} except that it\ndetermines the behaviour when the undefined symbols are in a\nshared library rather than a regular object file.  It does not affect\nhow undefined symbols in regular object files are handled.\n\nThe default behaviour is to report errors for any undefined symbols\nreferenced in shared libraries if the linker is being used to create\nan executable, but to allow them if the linker is being used to create\na shared library.\n\nThe reasons for allowing undefined symbol references in shared\nlibraries specified at link time are that:\n\n@itemize @bullet\n@item\nA shared library specified at link time may not be the same as the one\nthat is available at load time, so the symbol might actually be\nresolvable at load time.\n@item\nThere are some operating systems, eg BeOS and HPPA, where undefined\nsymbols in shared libraries are normal.\n\nThe BeOS kernel for example patches shared libraries at load time to\nselect whichever function is most appropriate for the current\narchitecture.  This is used, for example, to dynamically select an\nappropriate memset function.\n@end itemize\n\n@kindex --no-undefined-version\n@item --no-undefined-version\nNormally when a symbol has an undefined version, the linker will ignore\nit. This option disallows symbols with undefined version and a fatal error\nwill be issued instead.\n\n@kindex --default-symver\n@item --default-symver\nCreate and use a default symbol version (the soname) for unversioned\nexported symbols.\n\n@kindex --default-imported-symver\n@item --default-imported-symver\nCreate and use a default symbol version (the soname) for unversioned\nimported symbols.\n\n@kindex --no-warn-mismatch\n@item --no-warn-mismatch\nNormally @command{ld} will give an error if you try to link together input\nfiles that are mismatched for some reason, perhaps because they have\nbeen compiled for different processors or for different endiannesses.\nThis option tells @command{ld} that it should silently permit such possible\nerrors.  This option should only be used with care, in cases when you\nhave taken some special action that ensures that the linker errors are\ninappropriate.\n\n@kindex --no-warn-search-mismatch\n@item --no-warn-search-mismatch\nNormally @command{ld} will give a warning if it finds an incompatible\nlibrary during a library search.  This option silences the warning.\n\n@kindex --no-whole-archive\n@item --no-whole-archive\nTurn off the effect of the @option{--whole-archive} option for subsequent\narchive files.\n\n@cindex output file after errors\n@kindex --noinhibit-exec\n@item --noinhibit-exec\nRetain the executable output file whenever it is still usable.\nNormally, the linker will not produce an output file if it encounters\nerrors during the link process; it exits without writing an output file\nwhen it issues any error whatsoever.\n\n@kindex -nostdlib\n@item -nostdlib\nOnly search library directories explicitly specified on the\ncommand line.  Library directories specified in linker scripts\n(including linker scripts specified on the command line) are ignored.\n\n@ifclear SingleFormat\n@kindex --oformat=@var{output-format}\n@item --oformat=@var{output-format}\n@command{ld} may be configured to support more than one kind of object\nfile.  If your @command{ld} is configured this way, you can use the\n@samp{--oformat} option to specify the binary format for the output\nobject file.  Even when @command{ld} is configured to support alternative\nobject formats, you don't usually need to specify this, as @command{ld}\nshould be configured to produce as a default output format the most\nusual format on each machine.  @var{output-format} is a text string, the\nname of a particular format supported by the BFD libraries.  (You can\nlist the available binary formats with @samp{objdump -i}.)  The script\ncommand @code{OUTPUT_FORMAT} can also specify the output format, but\nthis option overrides it.  @xref{BFD}.\n@end ifclear\n\n@kindex -pie\n@kindex --pic-executable\n@item -pie\n@itemx --pic-executable\n@cindex position independent executables\nCreate a position independent executable.  This is currently only supported on\nELF platforms.  Position independent executables are similar to shared\nlibraries in that they are relocated by the dynamic linker to the virtual\naddress the OS chooses for them (which can vary between invocations).  Like\nnormal dynamically linked executables they can be executed and symbols\ndefined in the executable cannot be overridden by shared libraries.\n\n@kindex -qmagic\n@item -qmagic\nThis option is ignored for Linux compatibility.\n\n@kindex -Qy\n@item -Qy\nThis option is ignored for SVR4 compatibility.\n\n@kindex --relax\n@cindex synthesizing linker\n@cindex relaxing addressing modes\n@item --relax\nAn option with machine dependent effects.\n@ifset GENERIC\nThis option is only supported on a few targets.\n@end ifset\n@ifset H8300\n@xref{H8/300,,@command{ld} and the H8/300}.\n@end ifset\n@ifset I960\n@xref{i960,, @command{ld} and the Intel 960 family}.\n@end ifset\n@ifset XTENSA\n@xref{Xtensa,, @command{ld} and Xtensa Processors}.\n@end ifset\n@ifset M68HC11\n@xref{M68HC11/68HC12,,@command{ld} and the 68HC11 and 68HC12}.\n@end ifset\n@ifset POWERPC\n@xref{PowerPC ELF32,,@command{ld} and PowerPC 32-bit ELF Support}.\n@end ifset\n\nOn some platforms, the @samp{--relax} option performs global\noptimizations that become possible when the linker resolves addressing\nin the program, such as relaxing address modes and synthesizing new\ninstructions in the output object file.\n\nOn some platforms these link time global optimizations may make symbolic\ndebugging of the resulting executable impossible.\n@ifset GENERIC\nThis is known to be\nthe case for the Matsushita MN10200 and MN10300 family of processors.\n@end ifset\n\n@ifset GENERIC\nOn platforms where this is not supported, @samp{--relax} is accepted,\nbut ignored.\n@end ifset\n\n@cindex retaining specified symbols\n@cindex stripping all but some symbols\n@cindex symbols, retaining selectively\n@kindex --retain-symbols-file=@var{filename}\n@item --retain-symbols-file=@var{filename}\nRetain @emph{only} the symbols listed in the file @var{filename},\ndiscarding all others.  @var{filename} is simply a flat file, with one\nsymbol name per line.  This option is especially useful in environments\n@ifset GENERIC\n(such as VxWorks)\n@end ifset\nwhere a large global symbol table is accumulated gradually, to conserve\nrun-time memory.\n\n@samp{--retain-symbols-file} does @emph{not} discard undefined symbols,\nor symbols needed for relocations.\n\nYou may only specify @samp{--retain-symbols-file} once in the command\nline.  It overrides @samp{-s} and @samp{-S}.\n\n@ifset GENERIC\n@item -rpath=@var{dir}\n@cindex runtime library search path\n@kindex -rpath=@var{dir}\nAdd a directory to the runtime library search path.  This is used when\nlinking an ELF executable with shared objects.  All @option{-rpath}\narguments are concatenated and passed to the runtime linker, which uses\nthem to locate shared objects at runtime.  The @option{-rpath} option is\nalso used when locating shared objects which are needed by shared\nobjects explicitly included in the link; see the description of the\n@option{-rpath-link} option.  If @option{-rpath} is not used when linking an\nELF executable, the contents of the environment variable\n@code{LD_RUN_PATH} will be used if it is defined.\n\nThe @option{-rpath} option may also be used on SunOS.  By default, on\nSunOS, the linker will form a runtime search patch out of all the\n@option{-L} options it is given.  If a @option{-rpath} option is used, the\nruntime search path will be formed exclusively using the @option{-rpath}\noptions, ignoring the @option{-L} options.  This can be useful when using\ngcc, which adds many @option{-L} options which may be on NFS mounted\nfile systems.\n\nFor compatibility with other ELF linkers, if the @option{-R} option is\nfollowed by a directory name, rather than a file name, it is treated as\nthe @option{-rpath} option.\n@end ifset\n\n@ifset GENERIC\n@cindex link-time runtime library search path\n@kindex -rpath-link=@var{dir}\n@item -rpath-link=@var{dir}\nWhen using ELF or SunOS, one shared library may require another.  This\nhappens when an @code{ld -shared} link includes a shared library as one\nof the input files.\n\nWhen the linker encounters such a dependency when doing a non-shared,\nnon-relocatable link, it will automatically try to locate the required\nshared library and include it in the link, if it is not included\nexplicitly.  In such a case, the @option{-rpath-link} option\nspecifies the first set of directories to search.  The\n@option{-rpath-link} option may specify a sequence of directory names\neither by specifying a list of names separated by colons, or by\nappearing multiple times.\n\nThis option should be used with caution as it overrides the search path\nthat may have been hard compiled into a shared library. In such a case it\nis possible to use unintentionally a different search path than the\nruntime linker would do.\n\nThe linker uses the following search paths to locate required shared\nlibraries:\n@enumerate\n@item\nAny directories specified by @option{-rpath-link} options.\n@item\nAny directories specified by @option{-rpath} options.  The difference\nbetween @option{-rpath} and @option{-rpath-link} is that directories\nspecified by @option{-rpath} options are included in the executable and\nused at runtime, whereas the @option{-rpath-link} option is only effective\nat link time. Searching @option{-rpath} in this way is only supported\nby native linkers and cross linkers which have been configured with\nthe @option{--with-sysroot} option.\n@item\nOn an ELF system, for native linkers, if the @option{-rpath} and\n@option{-rpath-link} options were not used, search the contents of the\nenvironment variable @code{LD_RUN_PATH}.\n@item\nOn SunOS, if the @option{-rpath} option was not used, search any\ndirectories specified using @option{-L} options.\n@item\nFor a native linker, the search the contents of the environment\nvariable @code{LD_LIBRARY_PATH}.\n@item\nFor a native ELF linker, the directories in @code{DT_RUNPATH} or\n@code{DT_RPATH} of a shared library are searched for shared\nlibraries needed by it. The @code{DT_RPATH} entries are ignored if\n@code{DT_RUNPATH} entries exist.\n@item\nThe default directories, normally @file{/lib} and @file{/usr/lib}.\n@item\nFor a native linker on an ELF system, if the file @file{/etc/ld.so.conf}\nexists, the list of directories found in that file.\n@end enumerate\n\nIf the required shared library is not found, the linker will issue a\nwarning and continue with the link.\n@end ifset\n\n@kindex -shared\n@kindex -Bshareable\n@item -shared\n@itemx -Bshareable\n@cindex shared libraries\nCreate a shared library.  This is currently only supported on ELF, XCOFF\nand SunOS platforms.  On SunOS, the linker will automatically create a\nshared library if the @option{-e} option is not used and there are\nundefined symbols in the link.\n\n@kindex --sort-common\n@item --sort-common\n@itemx --sort-common=ascending\n@itemx --sort-common=descending\nThis option tells @command{ld} to sort the common symbols by alignment in\nascending or descending order when it places them in the appropriate output\nsections.  The symbol alignments considered are sixteen-byte or larger,\neight-byte, four-byte, two-byte, and one-byte. This is to prevent gaps\nbetween symbols due to alignment constraints.  If no sorting order is\nspecified, then descending order is assumed.\n\n@kindex --sort-section=name\n@item --sort-section=name\nThis option will apply @code{SORT_BY_NAME} to all wildcard section\npatterns in the linker script.\n\n@kindex --sort-section=alignment\n@item --sort-section=alignment\nThis option will apply @code{SORT_BY_ALIGNMENT} to all wildcard section\npatterns in the linker script.\n\n@kindex --split-by-file\n@item --split-by-file[=@var{size}]\nSimilar to @option{--split-by-reloc} but creates a new output section for\neach input file when @var{size} is reached.  @var{size} defaults to a\nsize of 1 if not given.\n\n@kindex --split-by-reloc\n@item --split-by-reloc[=@var{count}]\nTries to creates extra sections in the output file so that no single\noutput section in the file contains more than @var{count} relocations.\nThis is useful when generating huge relocatable files for downloading into\ncertain real time kernels with the COFF object file format; since COFF\ncannot represent more than 65535 relocations in a single section.  Note\nthat this will fail to work with object file formats which do not\nsupport arbitrary sections.  The linker will not split up individual\ninput sections for redistribution, so if a single input section contains\nmore than @var{count} relocations one output section will contain that\nmany relocations.  @var{count} defaults to a value of 32768.\n\n@kindex --stats\n@item --stats\nCompute and display statistics about the operation of the linker, such\nas execution time and memory usage.\n\n@kindex --sysroot=@var{directory}\n@item --sysroot=@var{directory}\nUse @var{directory} as the location of the sysroot, overriding the\nconfigure-time default.  This option is only supported by linkers\nthat were configured using @option{--with-sysroot}.\n\n@kindex --traditional-format\n@cindex traditional format\n@item --traditional-format\nFor some targets, the output of @command{ld} is different in some ways from\nthe output of some existing linker.  This switch requests @command{ld} to\nuse the traditional format instead.\n\n@cindex dbx\nFor example, on SunOS, @command{ld} combines duplicate entries in the\nsymbol string table.  This can reduce the size of an output file with\nfull debugging information by over 30 percent.  Unfortunately, the SunOS\n@code{dbx} program can not read the resulting program (@code{gdb} has no\ntrouble).  The @samp{--traditional-format} switch tells @command{ld} to not\ncombine duplicate entries.\n\n@kindex --section-start=@var{sectionname}=@var{org}\n@item --section-start=@var{sectionname}=@var{org}\nLocate a section in the output file at the absolute\naddress given by @var{org}.  You may use this option as many\ntimes as necessary to locate multiple sections in the command\nline.\n@var{org} must be a single hexadecimal integer;\nfor compatibility with other linkers, you may omit the leading\n@samp{0x} usually associated with hexadecimal values.  @emph{Note:} there\nshould be no white space between @var{sectionname}, the equals\nsign (``@key{=}''), and @var{org}.\n\n@kindex -Tbss=@var{org}\n@kindex -Tdata=@var{org}\n@kindex -Ttext=@var{org}\n@cindex segment origins, cmd line\n@item -Tbss=@var{org}\n@itemx -Tdata=@var{org}\n@itemx -Ttext=@var{org}\nSame as @option{--section-start}, with @code{.bss}, @code{.data} or\n@code{.text} as the @var{sectionname}.\n\n@kindex -Ttext-segment=@var{org}\n@item -Ttext-segment=@var{org}\n@cindex text segment origin, cmd line\nWhen creating an ELF executable or shared object, it will set the address\nof the first byte of the text segment.\n\n@kindex --unresolved-symbols\n@item --unresolved-symbols=@var{method}\nDetermine how to handle unresolved symbols.  There are four possible\nvalues for @samp{method}:\n\n@table @samp\n@item ignore-all\nDo not report any unresolved symbols.\n\n@item report-all\nReport all unresolved symbols.  This is the default.\n\n@item ignore-in-object-files\nReport unresolved symbols that are contained in shared libraries, but\nignore them if they come from regular object files.\n\n@item ignore-in-shared-libs\nReport unresolved symbols that come from regular object files, but\nignore them if they come from shared libraries.  This can be useful\nwhen creating a dynamic binary and it is known that all the shared\nlibraries that it should be referencing are included on the linker's\ncommand line.\n@end table\n\nThe behaviour for shared libraries on their own can also be controlled\nby the @option{--[no-]allow-shlib-undefined} option.\n\nNormally the linker will generate an error message for each reported\nunresolved symbol but the option @option{--warn-unresolved-symbols}\ncan change this to a warning.\n\n@kindex --verbose\n@cindex verbose\n@item --dll-verbose\n@itemx --verbose\nDisplay the version number for @command{ld} and list the linker emulations\nsupported.  Display which input files can and cannot be opened.  Display\nthe linker script being used by the linker.\n\n@kindex --version-script=@var{version-scriptfile}\n@cindex version script, symbol versions\n@item --version-script=@var{version-scriptfile}\nSpecify the name of a version script to the linker.  This is typically\nused when creating shared libraries to specify additional information\nabout the version hierarchy for the library being created.  This option\nis only fully supported on ELF platforms which support shared libraries;\nsee @ref{VERSION}.  It is partially supported on PE platforms, which can\nuse version scripts to filter symbol visibility in auto-export mode: any\nsymbols marked @samp{local} in the version script will not be exported.\n@xref{WIN32}.\n\n@kindex --warn-common\n@cindex warnings, on combining symbols\n@cindex combining symbols, warnings on\n@item --warn-common\nWarn when a common symbol is combined with another common symbol or with\na symbol definition.  Unix linkers allow this somewhat sloppy practise,\nbut linkers on some other operating systems do not.  This option allows\nyou to find potential problems from combining global symbols.\nUnfortunately, some C libraries use this practise, so you may get some\nwarnings about symbols in the libraries as well as in your programs.\n\nThere are three kinds of global symbols, illustrated here by C examples:\n\n@table @samp\n@item int i = 1;\nA definition, which goes in the initialized data section of the output\nfile.\n\n@item extern int i;\nAn undefined reference, which does not allocate space.\nThere must be either a definition or a common symbol for the\nvariable somewhere.\n\n@item int i;\nA common symbol.  If there are only (one or more) common symbols for a\nvariable, it goes in the uninitialized data area of the output file.\nThe linker merges multiple common symbols for the same variable into a\nsingle symbol.  If they are of different sizes, it picks the largest\nsize.  The linker turns a common symbol into a declaration, if there is\na definition of the same variable.\n@end table\n\nThe @samp{--warn-common} option can produce five kinds of warnings.\nEach warning consists of a pair of lines: the first describes the symbol\njust encountered, and the second describes the previous symbol\nencountered with the same name.  One or both of the two symbols will be\na common symbol.\n\n@enumerate\n@item\nTurning a common symbol into a reference, because there is already a\ndefinition for the symbol.\n@smallexample\n@var{file}(@var{section}): warning: common of `@var{symbol}'\n   overridden by definition\n@var{file}(@var{section}): warning: defined here\n@end smallexample\n\n@item\nTurning a common symbol into a reference, because a later definition for\nthe symbol is encountered.  This is the same as the previous case,\nexcept that the symbols are encountered in a different order.\n@smallexample\n@var{file}(@var{section}): warning: definition of `@var{symbol}'\n   overriding common\n@var{file}(@var{section}): warning: common is here\n@end smallexample\n\n@item\nMerging a common symbol with a previous same-sized common symbol.\n@smallexample\n@var{file}(@var{section}): warning: multiple common\n   of `@var{symbol}'\n@var{file}(@var{section}): warning: previous common is here\n@end smallexample\n\n@item\nMerging a common symbol with a previous larger common symbol.\n@smallexample\n@var{file}(@var{section}): warning: common of `@var{symbol}'\n   overridden by larger common\n@var{file}(@var{section}): warning: larger common is here\n@end smallexample\n\n@item\nMerging a common symbol with a previous smaller common symbol.  This is\nthe same as the previous case, except that the symbols are\nencountered in a different order.\n@smallexample\n@var{file}(@var{section}): warning: common of `@var{symbol}'\n   overriding smaller common\n@var{file}(@var{section}): warning: smaller common is here\n@end smallexample\n@end enumerate\n\n@kindex --warn-constructors\n@item --warn-constructors\nWarn if any global constructors are used.  This is only useful for a few\nobject file formats.  For formats like COFF or ELF, the linker can not\ndetect the use of global constructors.\n\n@kindex --warn-multiple-gp\n@item --warn-multiple-gp\nWarn if multiple global pointer values are required in the output file.\nThis is only meaningful for certain processors, such as the Alpha.\nSpecifically, some processors put large-valued constants in a special\nsection.  A special register (the global pointer) points into the middle\nof this section, so that constants can be loaded efficiently via a\nbase-register relative addressing mode.  Since the offset in\nbase-register relative mode is fixed and relatively small (e.g., 16\nbits), this limits the maximum size of the constant pool.  Thus, in\nlarge programs, it is often necessary to use multiple global pointer\nvalues in order to be able to address all possible constants.  This\noption causes a warning to be issued whenever this case occurs.\n\n@kindex --warn-once\n@cindex warnings, on undefined symbols\n@cindex undefined symbols, warnings on\n@item --warn-once\nOnly warn once for each undefined symbol, rather than once per module\nwhich refers to it.\n\n@kindex --warn-section-align\n@cindex warnings, on section alignment\n@cindex section alignment, warnings on\n@item --warn-section-align\nWarn if the address of an output section is changed because of\nalignment.  Typically, the alignment will be set by an input section.\nThe address will only be changed if it not explicitly specified; that\nis, if the @code{SECTIONS} command does not specify a start address for\nthe section (@pxref{SECTIONS}).\n\n@kindex --warn-shared-textrel\n@item --warn-shared-textrel\nWarn if the linker adds a DT_TEXTREL to a shared object.\n\n@kindex --warn-alternate-em\n@item --warn-alternate-em\nWarn if an object has alternate ELF machine code.\n\n@kindex --warn-unresolved-symbols\n@item --warn-unresolved-symbols\nIf the linker is going to report an unresolved symbol (see the option\n@option{--unresolved-symbols}) it will normally generate an error.\nThis option makes it generate a warning instead.\n\n@kindex --error-unresolved-symbols\n@item --error-unresolved-symbols\nThis restores the linker's default behaviour of generating errors when\nit is reporting unresolved symbols.\n\n@kindex --whole-archive\n@cindex including an entire archive\n@item --whole-archive\nFor each archive mentioned on the command line after the\n@option{--whole-archive} option, include every object file in the archive\nin the link, rather than searching the archive for the required object\nfiles.  This is normally used to turn an archive file into a shared\nlibrary, forcing every object to be included in the resulting shared\nlibrary.  This option may be used more than once.\n\nTwo notes when using this option from gcc: First, gcc doesn't know\nabout this option, so you have to use @option{-Wl,-whole-archive}.\nSecond, don't forget to use @option{-Wl,-no-whole-archive} after your\nlist of archives, because gcc will add its own list of archives to\nyour link and you may not want this flag to affect those as well.\n\n@kindex --wrap=@var{symbol}\n@item --wrap=@var{symbol}\nUse a wrapper function for @var{symbol}.  Any undefined reference to\n@var{symbol} will be resolved to @code{__wrap_@var{symbol}}.  Any\nundefined reference to @code{__real_@var{symbol}} will be resolved to\n@var{symbol}.\n\nThis can be used to provide a wrapper for a system function.  The\nwrapper function should be called @code{__wrap_@var{symbol}}.  If it\nwishes to call the system function, it should call\n@code{__real_@var{symbol}}.\n\nHere is a trivial example:\n\n@smallexample\nvoid *\n__wrap_malloc (size_t c)\n@{\n  printf (\"malloc called with %zu\\n\", c);\n  return __real_malloc (c);\n@}\n@end smallexample\n\nIf you link other code with this file using @option{--wrap malloc}, then\nall calls to @code{malloc} will call the function @code{__wrap_malloc}\ninstead.  The call to @code{__real_malloc} in @code{__wrap_malloc} will\ncall the real @code{malloc} function.\n\nYou may wish to provide a @code{__real_malloc} function as well, so that\nlinks without the @option{--wrap} option will succeed.  If you do this,\nyou should not put the definition of @code{__real_malloc} in the same\nfile as @code{__wrap_malloc}; if you do, the assembler may resolve the\ncall before the linker has a chance to wrap it to @code{malloc}.\n\n@kindex --eh-frame-hdr\n@item --eh-frame-hdr\nRequest creation of @code{.eh_frame_hdr} section and ELF\n@code{PT_GNU_EH_FRAME} segment header.\n\n@kindex --enable-new-dtags\n@kindex --disable-new-dtags\n@item --enable-new-dtags\n@itemx --disable-new-dtags\nThis linker can create the new dynamic tags in ELF. But the older ELF\nsystems may not understand them. If you specify\n@option{--enable-new-dtags}, the dynamic tags will be created as needed.\nIf you specify @option{--disable-new-dtags}, no new dynamic tags will be\ncreated. By default, the new dynamic tags are not created. Note that\nthose options are only available for ELF systems.\n\n@kindex --hash-size=@var{number}\n@item --hash-size=@var{number}\nSet the default size of the linker's hash tables to a prime number\nclose to @var{number}.  Increasing this value can reduce the length of\ntime it takes the linker to perform its tasks, at the expense of\nincreasing the linker's memory requirements.  Similarly reducing this\nvalue can reduce the memory requirements at the expense of speed.\n\n@kindex --hash-style=@var{style}\n@item --hash-style=@var{style}\nSet the type of linker's hash table(s).  @var{style} can be either\n@code{sysv} for classic ELF @code{.hash} section, @code{gnu} for\nnew style GNU @code{.gnu.hash} section or @code{both} for both\nthe classic ELF @code{.hash} and new style GNU @code{.gnu.hash}\nhash tables.  The default is @code{sysv}.\n\n@kindex --reduce-memory-overheads\n@item --reduce-memory-overheads\nThis option reduces memory requirements at ld runtime, at the expense of\nlinking speed.  This was introduced to select the old O(n^2) algorithm\nfor link map file generation, rather than the new O(n) algorithm which uses\nabout 40% more memory for symbol storage.\n\nAnother effect of the switch is to set the default hash table size to\n1021, which again saves memory at the cost of lengthening the linker's\nrun time.  This is not done however if the @option{--hash-size} switch\nhas been used.\n\nThe @option{--reduce-memory-overheads} switch may be also be used to\nenable other tradeoffs in future versions of the linker.\n\n@kindex --build-id\n@kindex --build-id=@var{style}\n@item --build-id\n@itemx --build-id=@var{style}\nRequest creation of @code{.note.gnu.build-id} ELF note section.\nThe contents of the note are unique bits identifying this linked\nfile.  @var{style} can be @code{uuid} to use 128 random bits,\n@code{sha1} to use a 160-bit @sc{SHA1} hash on the normative\nparts of the output contents, @code{md5} to use a 128-bit\n@sc{MD5} hash on the normative parts of the output contents, or\n@code{0x@var{hexstring}} to use a chosen bit string specified as\nan even number of hexadecimal digits (@code{-} and @code{:}\ncharacters between digit pairs are ignored).  If @var{style} is\nomitted, @code{sha1} is used.\n\nThe @code{md5} and @code{sha1} styles produces an identifier\nthat is always the same in an identical output file, but will be\nunique among all nonidentical output files.  It is not intended\nto be compared as a checksum for the file's contents.  A linked\nfile may be changed later by other tools, but the build ID bit\nstring identifying the original linked file does not change.\n\nPassing @code{none} for @var{style} disables the setting from any\n@code{--build-id} options earlier on the command line.\n@end table\n\n@c man end\n\n@subsection Options Specific to i386 PE Targets\n\n@c man begin OPTIONS\n\nThe i386 PE linker supports the @option{-shared} option, which causes\nthe output to be a dynamically linked library (DLL) instead of a\nnormal executable.  You should name the output @code{*.dll} when you\nuse this option.  In addition, the linker fully supports the standard\n@code{*.def} files, which may be specified on the linker command line\nlike an object file (in fact, it should precede archives it exports\nsymbols from, to ensure that they get linked in, just like a normal\nobject file).\n\nIn addition to the options common to all targets, the i386 PE linker\nsupport additional command line options that are specific to the i386\nPE target.  Options that take values may be separated from their\nvalues by either a space or an equals sign.\n\n@table @gcctabopt\n\n@kindex --add-stdcall-alias\n@item --add-stdcall-alias\nIf given, symbols with a stdcall suffix (@@@var{nn}) will be exported\nas-is and also with the suffix stripped.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --base-file\n@item --base-file @var{file}\nUse @var{file} as the name of a file in which to save the base\naddresses of all the relocations needed for generating DLLs with\n@file{dlltool}.\n[This is an i386 PE specific option]\n\n@kindex --dll\n@item --dll\nCreate a DLL instead of a regular executable.  You may also use\n@option{-shared} or specify a @code{LIBRARY} in a given @code{.def}\nfile.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --enable-long-section-names\n@kindex --disable-long-section-names\n@item --enable-long-section-names\n@itemx --disable-long-section-names\nThe PE variants of the Coff object format add an extension that permits\nthe use of section names longer than eight characters, the normal limit\nfor Coff.  By default, these names are only allowed in object files, as\nfully-linked executable images do not carry the Coff string table required\nto support the longer names.  As a GNU extension, it is possible to\nallow their use in executable images as well, or to (probably pointlessly!)\ndisallow it in object files, by using these two options.  Executable images\ngenerated with these long section names are slightly non-standard, carrying\nas they do a string table, and may generate confusing output when examined\nwith non-GNU PE-aware tools, such as file viewers and dumpers.  However, \nGDB relies on the use of PE long section names to find Dwarf-2 debug \ninformation sections in an executable image at runtime, and so if neither\noption is specified on the command-line, @command{ld} will enable long\nsection names, overriding the default and technically correct behaviour,\nwhen it finds the presence of debug information while linking an executable\nimage and not stripping symbols.\n[This option is valid for all PE targeted ports of the linker]\n\n@kindex --enable-stdcall-fixup\n@kindex --disable-stdcall-fixup\n@item --enable-stdcall-fixup\n@itemx --disable-stdcall-fixup\nIf the link finds a symbol that it cannot resolve, it will attempt to\ndo ``fuzzy linking'' by looking for another defined symbol that differs\nonly in the format of the symbol name (cdecl vs stdcall) and will\nresolve that symbol by linking to the match.  For example, the\nundefined symbol @code{_foo} might be linked to the function\n@code{_foo@@12}, or the undefined symbol @code{_bar@@16} might be linked\nto the function @code{_bar}.  When the linker does this, it prints a\nwarning, since it normally should have failed to link, but sometimes\nimport libraries generated from third-party dlls may need this feature\nto be usable.  If you specify @option{--enable-stdcall-fixup}, this\nfeature is fully enabled and warnings are not printed.  If you specify\n@option{--disable-stdcall-fixup}, this feature is disabled and such\nmismatches are considered to be errors.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex DLLs, creating\n@kindex --export-all-symbols\n@item --export-all-symbols\nIf given, all global symbols in the objects used to build a DLL will\nbe exported by the DLL.  Note that this is the default if there\notherwise wouldn't be any exported symbols.  When symbols are\nexplicitly exported via DEF files or implicitly exported via function\nattributes, the default is to not export anything else unless this\noption is given.  Note that the symbols @code{DllMain@@12},\n@code{DllEntryPoint@@0}, @code{DllMainCRTStartup@@12}, and\n@code{impure_ptr} will not be automatically\nexported.  Also, symbols imported from other DLLs will not be\nre-exported, nor will symbols specifying the DLL's internal layout\nsuch as those beginning with @code{_head_} or ending with\n@code{_iname}.  In addition, no symbols from @code{libgcc},\n@code{libstd++}, @code{libmingw32}, or @code{crtX.o} will be exported.\nSymbols whose names begin with @code{__rtti_} or @code{__builtin_} will\nnot be exported, to help with C++ DLLs.  Finally, there is an\nextensive list of cygwin-private symbols that are not exported\n(obviously, this applies on when building DLLs for cygwin targets).\nThese cygwin-excludes are: @code{_cygwin_dll_entry@@12},\n@code{_cygwin_crt0_common@@8}, @code{_cygwin_noncygwin_dll_entry@@12},\n@code{_fmode}, @code{_impure_ptr}, @code{cygwin_attach_dll},\n@code{cygwin_premain0}, @code{cygwin_premain1}, @code{cygwin_premain2},\n@code{cygwin_premain3}, and @code{environ}.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --exclude-symbols\n@item --exclude-symbols @var{symbol},@var{symbol},...\nSpecifies a list of symbols which should not be automatically\nexported.  The symbol names may be delimited by commas or colons.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --file-alignment\n@item --file-alignment\nSpecify the file alignment.  Sections in the file will always begin at\nfile offsets which are multiples of this number.  This defaults to\n512.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex heap size\n@kindex --heap\n@item --heap @var{reserve}\n@itemx --heap @var{reserve},@var{commit}\nSpecify the number of bytes of memory to reserve (and optionally commit)\nto be used as heap for this program.  The default is 1Mb reserved, 4K\ncommitted.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex image base\n@kindex --image-base\n@item --image-base @var{value}\nUse @var{value} as the base address of your program or dll.  This is\nthe lowest memory location that will be used when your program or dll\nis loaded.  To reduce the need to relocate and improve performance of\nyour dlls, each should have a unique base address and not overlap any\nother dlls.  The default is 0x400000 for executables, and 0x10000000\nfor dlls.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --kill-at\n@item --kill-at\nIf given, the stdcall suffixes (@@@var{nn}) will be stripped from\nsymbols before they are exported.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --large-address-aware\n@item --large-address-aware\nIf given, the appropriate bit in the ``Characteristics'' field of the COFF\nheader is set to indicate that this executable supports virtual addresses\ngreater than 2 gigabytes.  This should be used in conjunction with the /3GB\nor /USERVA=@var{value} megabytes switch in the ``[operating systems]''\nsection of the BOOT.INI.  Otherwise, this bit has no effect.\n[This option is specific to PE targeted ports of the linker]\n\n@kindex --major-image-version\n@item --major-image-version @var{value}\nSets the major number of the ``image version''.  Defaults to 1.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --major-os-version\n@item --major-os-version @var{value}\nSets the major number of the ``os version''.  Defaults to 4.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --major-subsystem-version\n@item --major-subsystem-version @var{value}\nSets the major number of the ``subsystem version''.  Defaults to 4.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --minor-image-version\n@item --minor-image-version @var{value}\nSets the minor number of the ``image version''.  Defaults to 0.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --minor-os-version\n@item --minor-os-version @var{value}\nSets the minor number of the ``os version''.  Defaults to 0.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --minor-subsystem-version\n@item --minor-subsystem-version @var{value}\nSets the minor number of the ``subsystem version''.  Defaults to 0.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex DEF files, creating\n@cindex DLLs, creating\n@kindex --output-def\n@item --output-def @var{file}\nThe linker will create the file @var{file} which will contain a DEF\nfile corresponding to the DLL the linker is generating.  This DEF file\n(which should be called @code{*.def}) may be used to create an import\nlibrary with @code{dlltool} or may be used as a reference to\nautomatically or implicitly exported symbols.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex DLLs, creating\n@kindex --out-implib\n@item --out-implib @var{file}\nThe linker will create the file @var{file} which will contain an\nimport lib corresponding to the DLL the linker is generating. This\nimport lib (which should be called @code{*.dll.a} or @code{*.a}\nmay be used to link clients against the generated DLL; this behaviour\nmakes it possible to skip a separate @code{dlltool} import library\ncreation step.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --enable-auto-image-base\n@item --enable-auto-image-base\nAutomatically choose the image base for DLLs, unless one is specified\nusing the @code{--image-base} argument.  By using a hash generated\nfrom the dllname to create unique image bases for each DLL, in-memory\ncollisions and relocations which can delay program execution are\navoided.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --disable-auto-image-base\n@item --disable-auto-image-base\nDo not automatically generate a unique image base.  If there is no\nuser-specified image base (@code{--image-base}) then use the platform\ndefault.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex DLLs, linking to\n@kindex --dll-search-prefix\n@item --dll-search-prefix @var{string}\nWhen linking dynamically to a dll without an import library,\nsearch for @code{<string><basename>.dll} in preference to\n@code{lib<basename>.dll}. This behaviour allows easy distinction\nbetween DLLs built for the various \"subplatforms\": native, cygwin,\nuwin, pw, etc.  For instance, cygwin DLLs typically use\n@code{--dll-search-prefix=cyg}.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --enable-auto-import\n@item --enable-auto-import\nDo sophisticated linking of @code{_symbol} to @code{__imp__symbol} for\nDATA imports from DLLs, and create the necessary thunking symbols when\nbuilding the import libraries with those DATA exports. Note: Use of the\n'auto-import' extension will cause the text section of the image file\nto be made writable. This does not conform to the PE-COFF format\nspecification published by Microsoft.\n\nNote - use of the 'auto-import' extension will also cause read only\ndata which would normally be placed into the .rdata section to be\nplaced into the .data section instead.  This is in order to work\naround a problem with consts that is described here:\nhttp://www.cygwin.com/ml/cygwin/2004-09/msg01101.html\n\nUsing 'auto-import' generally will 'just work' -- but sometimes you may\nsee this message:\n\n\"variable '<var>' can't be auto-imported. Please read the\ndocumentation for ld's @code{--enable-auto-import} for details.\"\n\nThis message occurs when some (sub)expression accesses an address\nultimately given by the sum of two constants (Win32 import tables only\nallow one).  Instances where this may occur include accesses to member\nfields of struct variables imported from a DLL, as well as using a\nconstant index into an array variable imported from a DLL.  Any\nmultiword variable (arrays, structs, long long, etc) may trigger\nthis error condition.  However, regardless of the exact data type\nof the offending exported variable, ld will always detect it, issue\nthe warning, and exit.\n\nThere are several ways to address this difficulty, regardless of the\ndata type of the exported variable:\n\nOne way is to use --enable-runtime-pseudo-reloc switch. This leaves the task\nof adjusting references in your client code for runtime environment, so\nthis method works only when runtime environment supports this feature.\n\nA second solution is to force one of the 'constants' to be a variable --\nthat is, unknown and un-optimizable at compile time.  For arrays,\nthere are two possibilities: a) make the indexee (the array's address)\na variable, or b) make the 'constant' index a variable.  Thus:\n\n@example\nextern type extern_array[];\nextern_array[1] -->\n   @{ volatile type *t=extern_array; t[1] @}\n@end example\n\nor\n\n@example\nextern type extern_array[];\nextern_array[1] -->\n   @{ volatile int t=1; extern_array[t] @}\n@end example\n\nFor structs (and most other multiword data types) the only option\nis to make the struct itself (or the long long, or the ...) variable:\n\n@example\nextern struct s extern_struct;\nextern_struct.field -->\n   @{ volatile struct s *t=&extern_struct; t->field @}\n@end example\n\nor\n\n@example\nextern long long extern_ll;\nextern_ll -->\n  @{ volatile long long * local_ll=&extern_ll; *local_ll @}\n@end example\n\nA third method of dealing with this difficulty is to abandon\n'auto-import' for the offending symbol and mark it with\n@code{__declspec(dllimport)}.  However, in practise that\nrequires using compile-time #defines to indicate whether you are\nbuilding a DLL, building client code that will link to the DLL, or\nmerely building/linking to a static library.   In making the choice\nbetween the various methods of resolving the 'direct address with\nconstant offset' problem, you should consider typical real-world usage:\n\nOriginal:\n@example\n--foo.h\nextern int arr[];\n--foo.c\n#include \"foo.h\"\nvoid main(int argc, char **argv)@{\n  printf(\"%d\\n\",arr[1]);\n@}\n@end example\n\nSolution 1:\n@example\n--foo.h\nextern int arr[];\n--foo.c\n#include \"foo.h\"\nvoid main(int argc, char **argv)@{\n  /* This workaround is for win32 and cygwin; do not \"optimize\" */\n  volatile int *parr = arr;\n  printf(\"%d\\n\",parr[1]);\n@}\n@end example\n\nSolution 2:\n@example\n--foo.h\n/* Note: auto-export is assumed (no __declspec(dllexport)) */\n#if (defined(_WIN32) || defined(__CYGWIN__)) && \\\n  !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))\n#define FOO_IMPORT __declspec(dllimport)\n#else\n#define FOO_IMPORT\n#endif\nextern FOO_IMPORT int arr[];\n--foo.c\n#include \"foo.h\"\nvoid main(int argc, char **argv)@{\n  printf(\"%d\\n\",arr[1]);\n@}\n@end example\n\nA fourth way to avoid this problem is to re-code your\nlibrary to use a functional interface rather than a data interface\nfor the offending variables (e.g. set_foo() and get_foo() accessor\nfunctions).\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --disable-auto-import\n@item --disable-auto-import\nDo not attempt to do sophisticated linking of @code{_symbol} to\n@code{__imp__symbol} for DATA imports from DLLs.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --enable-runtime-pseudo-reloc\n@item --enable-runtime-pseudo-reloc\nIf your code contains expressions described in --enable-auto-import section,\nthat is, DATA imports from DLL with non-zero offset, this switch will create\na vector of 'runtime pseudo relocations' which can be used by runtime\nenvironment to adjust references to such data in your client code.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --disable-runtime-pseudo-reloc\n@item --disable-runtime-pseudo-reloc\nDo not create pseudo relocations for non-zero offset DATA imports from\nDLLs.  This is the default.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --enable-extra-pe-debug\n@item --enable-extra-pe-debug\nShow additional debug info related to auto-import symbol thunking.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --section-alignment\n@item --section-alignment\nSets the section alignment.  Sections in memory will always begin at\naddresses which are a multiple of this number.  Defaults to 0x1000.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@cindex stack size\n@kindex --stack\n@item --stack @var{reserve}\n@itemx --stack @var{reserve},@var{commit}\nSpecify the number of bytes of memory to reserve (and optionally commit)\nto be used as stack for this program.  The default is 2Mb reserved, 4K\ncommitted.\n[This option is specific to the i386 PE targeted port of the linker]\n\n@kindex --subsystem\n@item --subsystem @var{which}\n@itemx --subsystem @var{which}:@var{major}\n@itemx --subsystem @var{which}:@var{major}.@var{minor}\nSpecifies the subsystem under which your program will execute.  The\nlegal values for @var{which} are @code{native}, @code{windows},\n@code{console}, @code{posix}, and @code{xbox}.  You may optionally set\nthe subsystem version also.  Numeric values are also accepted for\n@var{which}.\n[This option is specific to the i386 PE targeted port of the linker]\n\nThe following options set flags in the @code{DllCharacteristics} field\nof the PE file header:\n[These options are specific to PE targeted ports of the linker]\n\n@kindex --dynamicbase\n@item --dynamicbase\nThe image base address may be relocated using address space layout\nrandomization (ASLR).  This feature was introduced with MS Windows\nVista for i386 PE targets.\n\n@kindex --forceinteg\n@item --forceinteg\nCode integrity checks are enforced.\n\n@kindex --nxcompat\n@item --nxcompat\nThe image is compatible with the Data Execution Prevention.\nThis feature was introduced with MS Windows XP SP2 for i386 PE targets.\n\n@kindex --no-isolation\n@item --no-isolation\nAlthough the image understands isolation, do not isolate the image.\n\n@kindex --no-seh\n@item --no-seh\nThe image does not use SEH. No SE handler may be called from\nthis image.\n\n@kindex --no-bind\n@item --no-bind\nDo not bind this image.\n\n@kindex --wdmdriver\n@item --wdmdriver\nThe driver uses the MS Windows Driver Model.\n \n@kindex --tsaware\n@item --tsaware\nThe image is Terminal Server aware.\n\n@end table\n\n@c man end\n\n@ifset M68HC11\n@subsection Options specific to Motorola 68HC11 and 68HC12 targets\n\n@c man begin OPTIONS\n\nThe 68HC11 and 68HC12 linkers support specific options to control the\nmemory bank switching mapping and trampoline code generation.\n\n@table @gcctabopt\n\n@kindex --no-trampoline\n@item --no-trampoline\nThis option disables the generation of trampoline. By default a trampoline\nis generated for each far function which is called using a @code{jsr}\ninstruction (this happens when a pointer to a far function is taken).\n\n@kindex --bank-window\n@item --bank-window @var{name}\nThis option indicates to the linker the name of the memory region in\nthe @samp{MEMORY} specification that describes the memory bank window.\nThe definition of such region is then used by the linker to compute\npaging and addresses within the memory window.\n\n@end table\n\n@c man end\n@end ifset\n\n@ifset M68K\n@subsection Options specific to Motorola 68K target\n\n@c man begin OPTIONS\n\nThe following options are supported to control handling of GOT generation\nwhen linking for 68K targets.\n\n@table @gcctabopt\n\n@kindex --got\n@item --got=@var{type}\nThis option tells the linker which GOT generation scheme to use.\n@var{type} should be one of @samp{single}, @samp{negative},\n@samp{multigot} or @samp{target}.  For more information refer to the\nInfo entry for @file{ld}.\n\n@end table\n\n@c man end\n@end ifset\n\n@ifset UsesEnvVars\n@node Environment\n@section Environment Variables\n\n@c man begin ENVIRONMENT\n\nYou can change the behaviour of @command{ld} with the environment variables\n@ifclear SingleFormat\n@code{GNUTARGET},\n@end ifclear\n@code{LDEMULATION} and @code{COLLECT_NO_DEMANGLE}.\n\n@ifclear SingleFormat\n@kindex GNUTARGET\n@cindex default input format\n@code{GNUTARGET} determines the input-file object format if you don't\nuse @samp{-b} (or its synonym @samp{--format}).  Its value should be one\nof the BFD names for an input format (@pxref{BFD}).  If there is no\n@code{GNUTARGET} in the environment, @command{ld} uses the natural format\nof the target. If @code{GNUTARGET} is set to @code{default} then BFD\nattempts to discover the input format by examining binary input files;\nthis method often succeeds, but there are potential ambiguities, since\nthere is no method of ensuring that the magic number used to specify\nobject-file formats is unique.  However, the configuration procedure for\nBFD on each system places the conventional format for that system first\nin the search-list, so ambiguities are resolved in favor of convention.\n@end ifclear\n\n@kindex LDEMULATION\n@cindex default emulation\n@cindex emulation, default\n@code{LDEMULATION} determines the default emulation if you don't use the\n@samp{-m} option.  The emulation can affect various aspects of linker\nbehaviour, particularly the default linker script.  You can list the\navailable emulations with the @samp{--verbose} or @samp{-V} options.  If\nthe @samp{-m} option is not used, and the @code{LDEMULATION} environment\nvariable is not defined, the default emulation depends upon how the\nlinker was configured.\n\n@kindex COLLECT_NO_DEMANGLE\n@cindex demangling, default\nNormally, the linker will default to demangling symbols.  However, if\n@code{COLLECT_NO_DEMANGLE} is set in the environment, then it will\ndefault to not demangling symbols.  This environment variable is used in\na similar fashion by the @code{gcc} linker wrapper program.  The default\nmay be overridden by the @samp{--demangle} and @samp{--no-demangle}\noptions.\n\n@c man end\n@end ifset\n\n@node Scripts\n@chapter Linker Scripts\n\n@cindex scripts\n@cindex linker scripts\n@cindex command files\nEvery link is controlled by a @dfn{linker script}.  This script is\nwritten in the linker command language.\n\nThe main purpose of the linker script is to describe how the sections in\nthe input files should be mapped into the output file, and to control\nthe memory layout of the output file.  Most linker scripts do nothing\nmore than this.  However, when necessary, the linker script can also\ndirect the linker to perform many other operations, using the commands\ndescribed below.\n\nThe linker always uses a linker script.  If you do not supply one\nyourself, the linker will use a default script that is compiled into the\nlinker executable.  You can use the @samp{--verbose} command line option\nto display the default linker script.  Certain command line options,\nsuch as @samp{-r} or @samp{-N}, will affect the default linker script.\n\nYou may supply your own linker script by using the @samp{-T} command\nline option.  When you do this, your linker script will replace the\ndefault linker script.\n\nYou may also use linker scripts implicitly by naming them as input files\nto the linker, as though they were files to be linked.  @xref{Implicit\nLinker Scripts}.\n\n@menu\n* Basic Script Concepts::\tBasic Linker Script Concepts\n* Script Format::\t\tLinker Script Format\n* Simple Example::\t\tSimple Linker Script Example\n* Simple Commands::\t\tSimple Linker Script Commands\n* Assignments::\t\t\tAssigning Values to Symbols\n* SECTIONS::\t\t\tSECTIONS Command\n* MEMORY::\t\t\tMEMORY Command\n* PHDRS::\t\t\tPHDRS Command\n* VERSION::\t\t\tVERSION Command\n* Expressions::\t\t\tExpressions in Linker Scripts\n* Implicit Linker Scripts::\tImplicit Linker Scripts\n@end menu\n\n@node Basic Script Concepts\n@section Basic Linker Script Concepts\n@cindex linker script concepts\nWe need to define some basic concepts and vocabulary in order to\ndescribe the linker script language.\n\nThe linker combines input files into a single output file.  The output\nfile and each input file are in a special data format known as an\n@dfn{object file format}.  Each file is called an @dfn{object file}.\nThe output file is often called an @dfn{executable}, but for our\npurposes we will also call it an object file.  Each object file has,\namong other things, a list of @dfn{sections}.  We sometimes refer to a\nsection in an input file as an @dfn{input section}; similarly, a section\nin the output file is an @dfn{output section}.\n\nEach section in an object file has a name and a size.  Most sections\nalso have an associated block of data, known as the @dfn{section\ncontents}.  A section may be marked as @dfn{loadable}, which mean that\nthe contents should be loaded into memory when the output file is run.\nA section with no contents may be @dfn{allocatable}, which means that an\narea in memory should be set aside, but nothing in particular should be\nloaded there (in some cases this memory must be zeroed out).  A section\nwhich is neither loadable nor allocatable typically contains some sort\nof debugging information.\n\nEvery loadable or allocatable output section has two addresses.  The\nfirst is the @dfn{VMA}, or virtual memory address.  This is the address\nthe section will have when the output file is run.  The second is the\n@dfn{LMA}, or load memory address.  This is the address at which the\nsection will be loaded.  In most cases the two addresses will be the\nsame.  An example of when they might be different is when a data section\nis loaded into ROM, and then copied into RAM when the program starts up\n(this technique is often used to initialize global variables in a ROM\nbased system).  In this case the ROM address would be the LMA, and the\nRAM address would be the VMA.\n\nYou can see the sections in an object file by using the @code{objdump}\nprogram with the @samp{-h} option.\n\nEvery object file also has a list of @dfn{symbols}, known as the\n@dfn{symbol table}.  A symbol may be defined or undefined.  Each symbol\nhas a name, and each defined symbol has an address, among other\ninformation.  If you compile a C or C++ program into an object file, you\nwill get a defined symbol for every defined function and global or\nstatic variable.  Every undefined function or global variable which is\nreferenced in the input file will become an undefined symbol.\n\nYou can see the symbols in an object file by using the @code{nm}\nprogram, or by using the @code{objdump} program with the @samp{-t}\noption.\n\n@node Script Format\n@section Linker Script Format\n@cindex linker script format\nLinker scripts are text files.\n\nYou write a linker script as a series of commands.  Each command is\neither a keyword, possibly followed by arguments, or an assignment to a\nsymbol.  You may separate commands using semicolons.  Whitespace is\ngenerally ignored.\n\nStrings such as file or format names can normally be entered directly.\nIf the file name contains a character such as a comma which would\notherwise serve to separate file names, you may put the file name in\ndouble quotes.  There is no way to use a double quote character in a\nfile name.\n\nYou may include comments in linker scripts just as in C, delimited by\n@samp{/*} and @samp{*/}.  As in C, comments are syntactically equivalent\nto whitespace.\n\n@node Simple Example\n@section Simple Linker Script Example\n@cindex linker script example\n@cindex example of linker script\nMany linker scripts are fairly simple.\n\nThe simplest possible linker script has just one command:\n@samp{SECTIONS}.  You use the @samp{SECTIONS} command to describe the\nmemory layout of the output file.\n\nThe @samp{SECTIONS} command is a powerful command.  Here we will\ndescribe a simple use of it.  Let's assume your program consists only of\ncode, initialized data, and uninitialized data.  These will be in the\n@samp{.text}, @samp{.data}, and @samp{.bss} sections, respectively.\nLet's assume further that these are the only sections which appear in\nyour input files.\n\nFor this example, let's say that the code should be loaded at address\n0x10000, and that the data should start at address 0x8000000.  Here is a\nlinker script which will do that:\n@smallexample\nSECTIONS\n@{\n  . = 0x10000;\n  .text : @{ *(.text) @}\n  . = 0x8000000;\n  .data : @{ *(.data) @}\n  .bss : @{ *(.bss) @}\n@}\n@end smallexample\n\nYou write the @samp{SECTIONS} command as the keyword @samp{SECTIONS},\nfollowed by a series of symbol assignments and output section\ndescriptions enclosed in curly braces.\n\nThe first line inside the @samp{SECTIONS} command of the above example\nsets the value of the special symbol @samp{.}, which is the location\ncounter.  If you do not specify the address of an output section in some\nother way (other ways are described later), the address is set from the\ncurrent value of the location counter.  The location counter is then\nincremented by the size of the output section.  At the start of the\n@samp{SECTIONS} command, the location counter has the value @samp{0}.\n\nThe second line defines an output section, @samp{.text}.  The colon is\nrequired syntax which may be ignored for now.  Within the curly braces\nafter the output section name, you list the names of the input sections\nwhich should be placed into this output section.  The @samp{*} is a\nwildcard which matches any file name.  The expression @samp{*(.text)}\nmeans all @samp{.text} input sections in all input files.\n\nSince the location counter is @samp{0x10000} when the output section\n@samp{.text} is defined, the linker will set the address of the\n@samp{.text} section in the output file to be @samp{0x10000}.\n\nThe remaining lines define the @samp{.data} and @samp{.bss} sections in\nthe output file.  The linker will place the @samp{.data} output section\nat address @samp{0x8000000}.  After the linker places the @samp{.data}\noutput section, the value of the location counter will be\n@samp{0x8000000} plus the size of the @samp{.data} output section.  The\neffect is that the linker will place the @samp{.bss} output section\nimmediately after the @samp{.data} output section in memory.\n\nThe linker will ensure that each output section has the required\nalignment, by increasing the location counter if necessary.  In this\nexample, the specified addresses for the @samp{.text} and @samp{.data}\nsections will probably satisfy any alignment constraints, but the linker\nmay have to create a small gap between the @samp{.data} and @samp{.bss}\nsections.\n\nThat's it!  That's a simple and complete linker script.\n\n@node Simple Commands\n@section Simple Linker Script Commands\n@cindex linker script simple commands\nIn this section we describe the simple linker script commands.\n\n@menu\n* Entry Point::\t\t\tSetting the entry point\n* File Commands::\t\tCommands dealing with files\n@ifclear SingleFormat\n* Format Commands::\t\tCommands dealing with object file formats\n@end ifclear\n\n* REGION_ALIAS::\t\tAssign alias names to memory regions\n* Miscellaneous Commands::\tOther linker script commands\n@end menu\n\n@node Entry Point\n@subsection Setting the Entry Point\n@kindex ENTRY(@var{symbol})\n@cindex start of execution\n@cindex first instruction\n@cindex entry point\nThe first instruction to execute in a program is called the @dfn{entry\npoint}.  You can use the @code{ENTRY} linker script command to set the\nentry point.  The argument is a symbol name:\n@smallexample\nENTRY(@var{symbol})\n@end smallexample\n\nThere are several ways to set the entry point.  The linker will set the\nentry point by trying each of the following methods in order, and\nstopping when one of them succeeds:\n@itemize @bullet\n@item\nthe @samp{-e} @var{entry} command-line option;\n@item\nthe @code{ENTRY(@var{symbol})} command in a linker script;\n@item\nthe value of the symbol @code{start}, if defined;\n@item\nthe address of the first byte of the @samp{.text} section, if present;\n@item\nThe address @code{0}.\n@end itemize\n\n@node File Commands\n@subsection Commands Dealing with Files\n@cindex linker script file commands\nSeveral linker script commands deal with files.\n\n@table @code\n@item INCLUDE @var{filename}\n@kindex INCLUDE @var{filename}\n@cindex including a linker script\nInclude the linker script @var{filename} at this point.  The file will\nbe searched for in the current directory, and in any directory specified\nwith the @option{-L} option.  You can nest calls to @code{INCLUDE} up to\n10 levels deep.\n\nYou can place @code{INCLUDE} directives at the top level, in @code{MEMORY} or\n@code{SECTIONS} commands, or in output section descriptions.\n\n@item INPUT(@var{file}, @var{file}, @dots{})\n@itemx INPUT(@var{file} @var{file} @dots{})\n@kindex INPUT(@var{files})\n@cindex input files in linker scripts\n@cindex input object files in linker scripts\n@cindex linker script input object files\nThe @code{INPUT} command directs the linker to include the named files\nin the link, as though they were named on the command line.\n\nFor example, if you always want to include @file{subr.o} any time you do\na link, but you can't be bothered to put it on every link command line,\nthen you can put @samp{INPUT (subr.o)} in your linker script.\n\nIn fact, if you like, you can list all of your input files in the linker\nscript, and then invoke the linker with nothing but a @samp{-T} option.\n\nIn case a @dfn{sysroot prefix} is configured, and the filename starts\nwith the @samp{/} character, and the script being processed was\nlocated inside the @dfn{sysroot prefix}, the filename will be looked\nfor in the @dfn{sysroot prefix}.  Otherwise, the linker will try to\nopen the file in the current directory.  If it is not found, the\nlinker will search through the archive library search path.  See the\ndescription of @samp{-L} in @ref{Options,,Command Line Options}.\n\nIf you use @samp{INPUT (-l@var{file})}, @command{ld} will transform the\nname to @code{lib@var{file}.a}, as with the command line argument\n@samp{-l}.\n\nWhen you use the @code{INPUT} command in an implicit linker script, the\nfiles will be included in the link at the point at which the linker\nscript file is included.  This can affect archive searching.\n\n@item GROUP(@var{file}, @var{file}, @dots{})\n@itemx GROUP(@var{file} @var{file} @dots{})\n@kindex GROUP(@var{files})\n@cindex grouping input files\nThe @code{GROUP} command is like @code{INPUT}, except that the named\nfiles should all be archives, and they are searched repeatedly until no\nnew undefined references are created.  See the description of @samp{-(}\nin @ref{Options,,Command Line Options}.\n\n@item AS_NEEDED(@var{file}, @var{file}, @dots{})\n@itemx AS_NEEDED(@var{file} @var{file} @dots{})\n@kindex AS_NEEDED(@var{files})\nThis construct can appear only inside of the @code{INPUT} or @code{GROUP}\ncommands, among other filenames.  The files listed will be handled\nas if they appear directly in the @code{INPUT} or @code{GROUP} commands,\nwith the exception of ELF shared libraries, that will be added only\nwhen they are actually needed.  This construct essentially enables\n@option{--as-needed} option for all the files listed inside of it\nand restores previous @option{--as-needed} resp. @option{--no-as-needed}\nsetting afterwards.\n\n@item OUTPUT(@var{filename})\n@kindex OUTPUT(@var{filename})\n@cindex output file name in linker script\nThe @code{OUTPUT} command names the output file.  Using\n@code{OUTPUT(@var{filename})} in the linker script is exactly like using\n@samp{-o @var{filename}} on the command line (@pxref{Options,,Command\nLine Options}).  If both are used, the command line option takes\nprecedence.\n\nYou can use the @code{OUTPUT} command to define a default name for the\noutput file other than the usual default of @file{a.out}.\n\n@item SEARCH_DIR(@var{path})\n@kindex SEARCH_DIR(@var{path})\n@cindex library search path in linker script\n@cindex archive search path in linker script\n@cindex search path in linker script\nThe @code{SEARCH_DIR} command adds @var{path} to the list of paths where\n@command{ld} looks for archive libraries.  Using\n@code{SEARCH_DIR(@var{path})} is exactly like using @samp{-L @var{path}}\non the command line (@pxref{Options,,Command Line Options}).  If both\nare used, then the linker will search both paths.  Paths specified using\nthe command line option are searched first.\n\n@item STARTUP(@var{filename})\n@kindex STARTUP(@var{filename})\n@cindex first input file\nThe @code{STARTUP} command is just like the @code{INPUT} command, except\nthat @var{filename} will become the first input file to be linked, as\nthough it were specified first on the command line.  This may be useful\nwhen using a system in which the entry point is always the start of the\nfirst file.\n@end table\n\n@ifclear SingleFormat\n@node Format Commands\n@subsection Commands Dealing with Object File Formats\nA couple of linker script commands deal with object file formats.\n\n@table @code\n@item OUTPUT_FORMAT(@var{bfdname})\n@itemx OUTPUT_FORMAT(@var{default}, @var{big}, @var{little})\n@kindex OUTPUT_FORMAT(@var{bfdname})\n@cindex output file format in linker script\nThe @code{OUTPUT_FORMAT} command names the BFD format to use for the\noutput file (@pxref{BFD}).  Using @code{OUTPUT_FORMAT(@var{bfdname})} is\nexactly like using @samp{--oformat @var{bfdname}} on the command line\n(@pxref{Options,,Command Line Options}).  If both are used, the command\nline option takes precedence.\n\nYou can use @code{OUTPUT_FORMAT} with three arguments to use different\nformats based on the @samp{-EB} and @samp{-EL} command line options.\nThis permits the linker script to set the output format based on the\ndesired endianness.\n\nIf neither @samp{-EB} nor @samp{-EL} are used, then the output format\nwill be the first argument, @var{default}.  If @samp{-EB} is used, the\noutput format will be the second argument, @var{big}.  If @samp{-EL} is\nused, the output format will be the third argument, @var{little}.\n\nFor example, the default linker script for the MIPS ELF target uses this\ncommand:\n@smallexample\nOUTPUT_FORMAT(elf32-bigmips, elf32-bigmips, elf32-littlemips)\n@end smallexample\nThis says that the default format for the output file is\n@samp{elf32-bigmips}, but if the user uses the @samp{-EL} command line\noption, the output file will be created in the @samp{elf32-littlemips}\nformat.\n\n@item TARGET(@var{bfdname})\n@kindex TARGET(@var{bfdname})\n@cindex input file format in linker script\nThe @code{TARGET} command names the BFD format to use when reading input\nfiles.  It affects subsequent @code{INPUT} and @code{GROUP} commands.\nThis command is like using @samp{-b @var{bfdname}} on the command line\n(@pxref{Options,,Command Line Options}).  If the @code{TARGET} command\nis used but @code{OUTPUT_FORMAT} is not, then the last @code{TARGET}\ncommand is also used to set the format for the output file.  @xref{BFD}.\n@end table\n@end ifclear\n\n@node REGION_ALIAS\n@subsection Assign alias names to memory regions\n@kindex REGION_ALIAS(@var{alias}, @var{region})\n@cindex region alias\n@cindex region names\n\nAlias names can be added to existing memory regions created with the\n@ref{MEMORY} command.  Each name corresponds to at most one memory region.\n\n@smallexample\nREGION_ALIAS(@var{alias}, @var{region})\n@end smallexample\n\nThe @code{REGION_ALIAS} function creates an alias name @var{alias} for the\nmemory region @var{region}.  This allows a flexible mapping of output sections\nto memory regions.  An example follows.\n\nSuppose we have an application for embedded systems which come with various\nmemory storage devices.  All have a general purpose, volatile memory @code{RAM}\nthat allows code execution or data storage.  Some may have a read-only,\nnon-volatile memory @code{ROM} that allows code execution and read-only data\naccess.  The last variant is a read-only, non-volatile memory @code{ROM2} with\nread-only data access and no code execution capability.  We have four output\nsections:\n\n@itemize @bullet\n@item\n@code{.text} program code;\n@item\n@code{.rodata} read-only data;\n@item\n@code{.data} read-write initialized data;\n@item\n@code{.bss} read-write zero initialized data.\n@end itemize\n\nThe goal is to provide a linker command file that contains a system independent\npart defining the output sections and a system dependent part mapping the\noutput sections to the memory regions available on the system.  Our embedded\nsystems come with three different memory setups @code{A}, @code{B} and\n@code{C}:\n@multitable @columnfractions .25 .25 .25 .25\n@item Section @tab Variant A @tab Variant B @tab Variant C\n@item .text @tab RAM @tab ROM @tab ROM \n@item .rodata @tab RAM @tab ROM @tab ROM2\n@item .data @tab RAM @tab RAM/ROM @tab RAM/ROM2\n@item .bss @tab RAM @tab RAM @tab RAM\n@end multitable\nThe notation @code{RAM/ROM} or @code{RAM/ROM2} means that this section is\nloaded into region @code{ROM} or @code{ROM2} respectively.  Please note that\nthe load address of the @code{.data} section starts in all three variants at\nthe end of the @code{.rodata} section.\n\nThe base linker script that deals with the output sections follows.  It\nincludes the system dependent @code{linkcmds.memory} file that describes the\nmemory layout:\n@smallexample\nINCLUDE linkcmds.memory\n\nSECTIONS\n  @{\n    .text :\n      @{\n        *(.text)\n      @} > REGION_TEXT\n    .rodata :\n      @{\n        *(.rodata)\n        rodata_end = .;\n      @} > REGION_RODATA\n    .data : AT (rodata_end)\n      @{\n        data_start = .;\n        *(.data)\n      @} > REGION_DATA\n    data_size = SIZEOF(.data);\n    data_load_start = LOADADDR(.data);\n    .bss :\n      @{\n        *(.bss)\n      @} > REGION_BSS\n  @}\n@end smallexample\n\nNow we need three different @code{linkcmds.memory} files to define memory\nregions and alias names.  The content of @code{linkcmds.memory} for the three\nvariants @code{A}, @code{B} and @code{C}:\n@table @code\n@item A\nHere everything goes into the @code{RAM}.\n@smallexample\nMEMORY\n  @{\n    RAM : ORIGIN = 0, LENGTH = 4M\n  @}\n\nREGION_ALIAS(\"REGION_TEXT\", RAM);\nREGION_ALIAS(\"REGION_RODATA\", RAM);\nREGION_ALIAS(\"REGION_DATA\", RAM);\nREGION_ALIAS(\"REGION_BSS\", RAM);\n@end smallexample\n@item B\nProgram code and read-only data go into the @code{ROM}.  Read-write data goes\ninto the @code{RAM}.  An image of the initialized data is loaded into the\n@code{ROM} and will be copied during system start into the @code{RAM}.\n@smallexample\nMEMORY\n  @{\n    ROM : ORIGIN = 0, LENGTH = 3M\n    RAM : ORIGIN = 0x10000000, LENGTH = 1M\n  @}\n\nREGION_ALIAS(\"REGION_TEXT\", ROM);\nREGION_ALIAS(\"REGION_RODATA\", ROM);\nREGION_ALIAS(\"REGION_DATA\", RAM);\nREGION_ALIAS(\"REGION_BSS\", RAM);\n@end smallexample\n@item C\nProgram code goes into the @code{ROM}.  Read-only data goes into the\n@code{ROM2}.  Read-write data goes into the @code{RAM}.  An image of the\ninitialized data is loaded into the @code{ROM2} and will be copied during\nsystem start into the @code{RAM}.\n@smallexample\nMEMORY\n  @{\n    ROM : ORIGIN = 0, LENGTH = 2M\n    ROM2 : ORIGIN = 0x10000000, LENGTH = 1M\n    RAM : ORIGIN = 0x20000000, LENGTH = 1M\n  @}\n\nREGION_ALIAS(\"REGION_TEXT\", ROM);\nREGION_ALIAS(\"REGION_RODATA\", ROM2);\nREGION_ALIAS(\"REGION_DATA\", RAM);\nREGION_ALIAS(\"REGION_BSS\", RAM);\n@end smallexample\n@end table\n\nIt is possible to write a common system initialization routine to copy the\n@code{.data} section from @code{ROM} or @code{ROM2} into the @code{RAM} if\nnecessary:\n@smallexample\n#include <string.h>\n\nextern char data_start [];\nextern char data_size [];\nextern char data_load_start [];\n\nvoid copy_data(void)\n@{\n  if (data_start != data_load_start)\n    @{\n      memcpy(data_start, data_load_start, (size_t) data_size);\n    @}\n@}\n@end smallexample\n\n@node Miscellaneous Commands\n@subsection Other Linker Script Commands\nThere are a few other linker scripts commands.\n\n@table @code\n@item ASSERT(@var{exp}, @var{message})\n@kindex ASSERT\n@cindex assertion in linker script\nEnsure that @var{exp} is non-zero.  If it is zero, then exit the linker\nwith an error code, and print @var{message}.\n\n@item EXTERN(@var{symbol} @var{symbol} @dots{})\n@kindex EXTERN\n@cindex undefined symbol in linker script\nForce @var{symbol} to be entered in the output file as an undefined\nsymbol.  Doing this may, for example, trigger linking of additional\nmodules from standard libraries.  You may list several @var{symbol}s for\neach @code{EXTERN}, and you may use @code{EXTERN} multiple times.  This\ncommand has the same effect as the @samp{-u} command-line option.\n\n@item FORCE_COMMON_ALLOCATION\n@kindex FORCE_COMMON_ALLOCATION\n@cindex common allocation in linker script\nThis command has the same effect as the @samp{-d} command-line option:\nto make @command{ld} assign space to common symbols even if a relocatable\noutput file is specified (@samp{-r}).\n\n@item INHIBIT_COMMON_ALLOCATION\n@kindex INHIBIT_COMMON_ALLOCATION\n@cindex common allocation in linker script\nThis command has the same effect as the @samp{--no-define-common}\ncommand-line option: to make @code{ld} omit the assignment of addresses\nto common symbols even for a non-relocatable output file.\n\n@item INSERT [ AFTER | BEFORE ] @var{output_section}\n@kindex INSERT\n@cindex insert user script into default script\nThis command is typically used in a script specified by @samp{-T} to\naugment the default @code{SECTIONS} with, for example, overlays.  It\ninserts all prior linker script statements after (or before)\n@var{output_section}, and also causes @samp{-T} to not override the\ndefault linker script.  The exact insertion point is as for orphan\nsections.  @xref{Location Counter}.  The insertion happens after the\nlinker has mapped input sections to output sections.  Prior to the\ninsertion, since @samp{-T} scripts are parsed before the default\nlinker script, statements in the @samp{-T} script occur before the\ndefault linker script statements in the internal linker representation\nof the script.  In particular, input section assignments will be made\nto @samp{-T} output sections before those in the default script.  Here\nis an example of how a @samp{-T} script using @code{INSERT} might look:\n\n@smallexample\nSECTIONS\n@{\n  OVERLAY :\n  @{\n    .ov1 @{ ov1*(.text) @}\n    .ov2 @{ ov2*(.text) @}\n  @}\n@}\nINSERT AFTER .text;\n@end smallexample\n\n@item NOCROSSREFS(@var{section} @var{section} @dots{})\n@kindex NOCROSSREFS(@var{sections})\n@cindex cross references\nThis command may be used to tell @command{ld} to issue an error about any\nreferences among certain output sections.\n\nIn certain types of programs, particularly on embedded systems when\nusing overlays, when one section is loaded into memory, another section\nwill not be.  Any direct references between the two sections would be\nerrors.  For example, it would be an error if code in one section called\na function defined in the other section.\n\nThe @code{NOCROSSREFS} command takes a list of output section names.  If\n@command{ld} detects any cross references between the sections, it reports\nan error and returns a non-zero exit status.  Note that the\n@code{NOCROSSREFS} command uses output section names, not input section\nnames.\n\n@ifclear SingleFormat\n@item OUTPUT_ARCH(@var{bfdarch})\n@kindex OUTPUT_ARCH(@var{bfdarch})\n@cindex machine architecture\n@cindex architecture\nSpecify a particular output machine architecture.  The argument is one\nof the names used by the BFD library (@pxref{BFD}).  You can see the\narchitecture of an object file by using the @code{objdump} program with\nthe @samp{-f} option.\n@end ifclear\n@end table\n\n@node Assignments\n@section Assigning Values to Symbols\n@cindex assignment in scripts\n@cindex symbol definition, scripts\n@cindex variables, defining\nYou may assign a value to a symbol in a linker script.  This will define\nthe symbol and place it into the symbol table with a global scope.\n\n@menu\n* Simple Assignments::\t\tSimple Assignments\n* PROVIDE::\t\t\tPROVIDE\n* PROVIDE_HIDDEN::\t\tPROVIDE_HIDDEN\n* Source Code Reference::\tHow to use a linker script defined symbol in source code\n@end menu\n\n@node Simple Assignments\n@subsection Simple Assignments\n\nYou may assign to a symbol using any of the C assignment operators:\n\n@table @code\n@item @var{symbol} = @var{expression} ;\n@itemx @var{symbol} += @var{expression} ;\n@itemx @var{symbol} -= @var{expression} ;\n@itemx @var{symbol} *= @var{expression} ;\n@itemx @var{symbol} /= @var{expression} ;\n@itemx @var{symbol} <<= @var{expression} ;\n@itemx @var{symbol} >>= @var{expression} ;\n@itemx @var{symbol} &= @var{expression} ;\n@itemx @var{symbol} |= @var{expression} ;\n@end table\n\nThe first case will define @var{symbol} to the value of\n@var{expression}.  In the other cases, @var{symbol} must already be\ndefined, and the value will be adjusted accordingly.\n\nThe special symbol name @samp{.} indicates the location counter.  You\nmay only use this within a @code{SECTIONS} command.  @xref{Location Counter}.\n\nThe semicolon after @var{expression} is required.\n\nExpressions are defined below; see @ref{Expressions}.\n\nYou may write symbol assignments as commands in their own right, or as\nstatements within a @code{SECTIONS} command, or as part of an output\nsection description in a @code{SECTIONS} command.\n\nThe section of the symbol will be set from the section of the\nexpression; for more information, see @ref{Expression Section}.\n\nHere is an example showing the three different places that symbol\nassignments may be used:\n\n@smallexample\nfloating_point = 0;\nSECTIONS\n@{\n  .text :\n    @{\n      *(.text)\n      _etext = .;\n    @}\n  _bdata = (. + 3) & ~ 3;\n  .data : @{ *(.data) @}\n@}\n@end smallexample\n@noindent\nIn this example, the symbol @samp{floating_point} will be defined as\nzero.  The symbol @samp{_etext} will be defined as the address following\nthe last @samp{.text} input section.  The symbol @samp{_bdata} will be\ndefined as the address following the @samp{.text} output section aligned\nupward to a 4 byte boundary.\n\n@node PROVIDE\n@subsection PROVIDE\n@cindex PROVIDE\nIn some cases, it is desirable for a linker script to define a symbol\nonly if it is referenced and is not defined by any object included in\nthe link.  For example, traditional linkers defined the symbol\n@samp{etext}.  However, ANSI C requires that the user be able to use\n@samp{etext} as a function name without encountering an error.  The\n@code{PROVIDE} keyword may be used to define a symbol, such as\n@samp{etext}, only if it is referenced but not defined.  The syntax is\n@code{PROVIDE(@var{symbol} = @var{expression})}.\n\nHere is an example of using @code{PROVIDE} to define @samp{etext}:\n@smallexample\nSECTIONS\n@{\n  .text :\n    @{\n      *(.text)\n      _etext = .;\n      PROVIDE(etext = .);\n    @}\n@}\n@end smallexample\n\nIn this example, if the program defines @samp{_etext} (with a leading\nunderscore), the linker will give a multiple definition error.  If, on\nthe other hand, the program defines @samp{etext} (with no leading\nunderscore), the linker will silently use the definition in the program.\nIf the program references @samp{etext} but does not define it, the\nlinker will use the definition in the linker script.\n\n@node PROVIDE_HIDDEN\n@subsection PROVIDE_HIDDEN\n@cindex PROVIDE_HIDDEN\nSimilar to @code{PROVIDE}.  For ELF targeted ports, the symbol will be\nhidden and won't be exported.\n\n@node Source Code Reference\n@subsection Source Code Reference\n\nAccessing a linker script defined variable from source code is not\nintuitive.  In particular a linker script symbol is not equivalent to\na variable declaration in a high level language, it is instead a\nsymbol that does not have a value.\n\nBefore going further, it is important to note that compilers often\ntransform names in the source code into different names when they are\nstored in the symbol table.  For example, Fortran compilers commonly\nprepend or append an underscore, and C++ performs extensive @samp{name\nmangling}.  Therefore there might be a discrepancy between the name\nof a variable as it is used in source code and the name of the same\nvariable as it is defined in a linker script.  For example in C a\nlinker script variable might be referred to as:\n\n@smallexample\n  extern int foo;\n@end smallexample\n\nBut in the linker script it might be defined as:\n\n@smallexample\n  _foo = 1000;\n@end smallexample\n\nIn the remaining examples however it is assumed that no name\ntransformation has taken place.\n\nWhen a symbol is declared in a high level language such as C, two\nthings happen.  The first is that the compiler reserves enough space\nin the program's memory to hold the @emph{value} of the symbol.  The\nsecond is that the compiler creates an entry in the program's symbol\ntable which holds the symbol's @emph{address}.  ie the symbol table\ncontains the address of the block of memory holding the symbol's\nvalue.  So for example the following C declaration, at file scope:\n\n@smallexample\n  int foo = 1000;\n@end smallexample\n\ncreates a entry called @samp{foo} in the symbol table.  This entry\nholds the address of an @samp{int} sized block of memory where the\nnumber 1000 is initially stored.\n\nWhen a program references a symbol the compiler generates code that\nfirst accesses the symbol table to find the address of the symbol's\nmemory block and then code to read the value from that memory block.\nSo:\n\n@smallexample\n  foo = 1;\n@end smallexample\n\nlooks up the symbol @samp{foo} in the symbol table, gets the address\nassociated with this symbol and then writes the value 1 into that\naddress.  Whereas:\n\n@smallexample\n  int * a = & foo;\n@end smallexample\n\nlooks up the symbol @samp{foo} in the symbol table, gets it address\nand then copies this address into the block of memory associated with\nthe variable @samp{a}.\n\nLinker scripts symbol declarations, by contrast, create an entry in\nthe symbol table but do not assign any memory to them.  Thus they are\nan address without a value.  So for example the linker script definition:\n\n@smallexample\n  foo = 1000;\n@end smallexample\n\ncreates an entry in the symbol table called @samp{foo} which holds\nthe address of memory location 1000, but nothing special is stored at\naddress 1000.  This means that you cannot access the @emph{value} of a\nlinker script defined symbol - it has no value - all you can do is\naccess the @emph{address} of a linker script defined symbol.\n\nHence when you are using a linker script defined symbol in source code\nyou should always take the address of the symbol, and never attempt to\nuse its value.  For example suppose you want to copy the contents of a\nsection of memory called .ROM into a section called .FLASH and the\nlinker script contains these declarations:\n\n@smallexample\n@group\n  start_of_ROM   = .ROM;\n  end_of_ROM     = .ROM + sizeof (.ROM) - 1;\n  start_of_FLASH = .FLASH;\n@end group\n@end smallexample\n\nThen the C source code to perform the copy would be:\n\n@smallexample\n@group\n  extern char start_of_ROM, end_of_ROM, start_of_FLASH;\n\n  memcpy (& start_of_FLASH, & start_of_ROM, & end_of_ROM - & start_of_ROM);\n@end group\n@end smallexample\n\nNote the use of the @samp{&} operators.  These are correct.\n\n@node SECTIONS\n@section SECTIONS Command\n@kindex SECTIONS\nThe @code{SECTIONS} command tells the linker how to map input sections\ninto output sections, and how to place the output sections in memory.\n\nThe format of the @code{SECTIONS} command is:\n@smallexample\nSECTIONS\n@{\n  @var{sections-command}\n  @var{sections-command}\n  @dots{}\n@}\n@end smallexample\n\nEach @var{sections-command} may of be one of the following:\n\n@itemize @bullet\n@item\nan @code{ENTRY} command (@pxref{Entry Point,,Entry command})\n@item\na symbol assignment (@pxref{Assignments})\n@item\nan output section description\n@item\nan overlay description\n@end itemize\n\nThe @code{ENTRY} command and symbol assignments are permitted inside the\n@code{SECTIONS} command for convenience in using the location counter in\nthose commands.  This can also make the linker script easier to\nunderstand because you can use those commands at meaningful points in\nthe layout of the output file.\n\nOutput section descriptions and overlay descriptions are described\nbelow.\n\nIf you do not use a @code{SECTIONS} command in your linker script, the\nlinker will place each input section into an identically named output\nsection in the order that the sections are first encountered in the\ninput files.  If all input sections are present in the first file, for\nexample, the order of sections in the output file will match the order\nin the first input file.  The first section will be at address zero.\n\n@menu\n* Output Section Description::\tOutput section description\n* Output Section Name::\t\tOutput section name\n* Output Section Address::\tOutput section address\n* Input Section::\t\tInput section description\n* Output Section Data::\t\tOutput section data\n* Output Section Keywords::\tOutput section keywords\n* Output Section Discarding::\tOutput section discarding\n* Output Section Attributes::\tOutput section attributes\n* Overlay Description::\t\tOverlay description\n@end menu\n\n@node Output Section Description\n@subsection Output Section Description\nThe full description of an output section looks like this:\n@smallexample\n@group\n@var{section} [@var{address}] [(@var{type})] :\n  [AT(@var{lma})]\n  [ALIGN(@var{section_align})]\n  [SUBALIGN(@var{subsection_align})]\n  [@var{constraint}]\n  @{\n    @var{output-section-command}\n    @var{output-section-command}\n    @dots{}\n  @} [>@var{region}] [AT>@var{lma_region}] [:@var{phdr} :@var{phdr} @dots{}] [=@var{fillexp}]\n@end group\n@end smallexample\n\nMost output sections do not use most of the optional section attributes.\n\nThe whitespace around @var{section} is required, so that the section\nname is unambiguous.  The colon and the curly braces are also required.\nThe line breaks and other white space are optional.\n\nEach @var{output-section-command} may be one of the following:\n\n@itemize @bullet\n@item\na symbol assignment (@pxref{Assignments})\n@item\nan input section description (@pxref{Input Section})\n@item\ndata values to include directly (@pxref{Output Section Data})\n@item\na special output section keyword (@pxref{Output Section Keywords})\n@end itemize\n\n@node Output Section Name\n@subsection Output Section Name\n@cindex name, section\n@cindex section name\nThe name of the output section is @var{section}.  @var{section} must\nmeet the constraints of your output format.  In formats which only\nsupport a limited number of sections, such as @code{a.out}, the name\nmust be one of the names supported by the format (@code{a.out}, for\nexample, allows only @samp{.text}, @samp{.data} or @samp{.bss}). If the\noutput format supports any number of sections, but with numbers and not\nnames (as is the case for Oasys), the name should be supplied as a\nquoted numeric string.  A section name may consist of any sequence of\ncharacters, but a name which contains any unusual characters such as\ncommas must be quoted.\n\nThe output section name @samp{/DISCARD/} is special; @ref{Output Section\nDiscarding}.\n\n@node Output Section Address\n@subsection Output Section Address\n@cindex address, section\n@cindex section address\nThe @var{address} is an expression for the VMA (the virtual memory\naddress) of the output section.  If you do not provide @var{address},\nthe linker will set it based on @var{region} if present, or otherwise\nbased on the current value of the location counter.\n\nIf you provide @var{address}, the address of the output section will be\nset to precisely that.  If you provide neither @var{address} nor\n@var{region}, then the address of the output section will be set to the\ncurrent value of the location counter aligned to the alignment\nrequirements of the output section.  The alignment requirement of the\noutput section is the strictest alignment of any input section contained\nwithin the output section.\n\nFor example,\n@smallexample\n.text . : @{ *(.text) @}\n@end smallexample\n@noindent\nand\n@smallexample\n.text : @{ *(.text) @}\n@end smallexample\n@noindent\nare subtly different.  The first will set the address of the\n@samp{.text} output section to the current value of the location\ncounter.  The second will set it to the current value of the location\ncounter aligned to the strictest alignment of a @samp{.text} input\nsection.\n\nThe @var{address} may be an arbitrary expression; @ref{Expressions}.\nFor example, if you want to align the section on a 0x10 byte boundary,\nso that the lowest four bits of the section address are zero, you could\ndo something like this:\n@smallexample\n.text ALIGN(0x10) : @{ *(.text) @}\n@end smallexample\n@noindent\nThis works because @code{ALIGN} returns the current location counter\naligned upward to the specified value.\n\nSpecifying @var{address} for a section will change the value of the\nlocation counter, provided that the section is non-empty.  (Empty\nsections are ignored).\n\n@node Input Section\n@subsection Input Section Description\n@cindex input sections\n@cindex mapping input sections to output sections\nThe most common output section command is an input section description.\n\nThe input section description is the most basic linker script operation.\nYou use output sections to tell the linker how to lay out your program\nin memory.  You use input section descriptions to tell the linker how to\nmap the input files into your memory layout.\n\n@menu\n* Input Section Basics::\tInput section basics\n* Input Section Wildcards::\tInput section wildcard patterns\n* Input Section Common::\tInput section for common symbols\n* Input Section Keep::\t\tInput section and garbage collection\n* Input Section Example::\tInput section example\n@end menu\n\n@node Input Section Basics\n@subsubsection Input Section Basics\n@cindex input section basics\nAn input section description consists of a file name optionally followed\nby a list of section names in parentheses.\n\nThe file name and the section name may be wildcard patterns, which we\ndescribe further below (@pxref{Input Section Wildcards}).\n\nThe most common input section description is to include all input\nsections with a particular name in the output section.  For example, to\ninclude all input @samp{.text} sections, you would write:\n@smallexample\n*(.text)\n@end smallexample\n@noindent\nHere the @samp{*} is a wildcard which matches any file name.  To exclude a list\nof files from matching the file name wildcard, EXCLUDE_FILE may be used to\nmatch all files except the ones specified in the EXCLUDE_FILE list.  For\nexample:\n@smallexample\n*(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors)\n@end smallexample\nwill cause all .ctors sections from all files except @file{crtend.o} and\n@file{otherfile.o} to be included.\n\nThere are two ways to include more than one section:\n@smallexample\n*(.text .rdata)\n*(.text) *(.rdata)\n@end smallexample\n@noindent\nThe difference between these is the order in which the @samp{.text} and\n@samp{.rdata} input sections will appear in the output section.  In the\nfirst example, they will be intermingled, appearing in the same order as\nthey are found in the linker input.  In the second example, all\n@samp{.text} input sections will appear first, followed by all\n@samp{.rdata} input sections.\n\nYou can specify a file name to include sections from a particular file.\nYou would do this if one or more of your files contain special data that\nneeds to be at a particular location in memory.  For example:\n@smallexample\ndata.o(.data)\n@end smallexample\n\nYou can also specify files within archives by writing a pattern\nmatching the archive, a colon, then the pattern matching the file,\nwith no whitespace around the colon.\n\n@table @samp\n@item archive:file\nmatches file within archive\n@item archive:\nmatches the whole archive\n@item :file\nmatches file but not one in an archive\n@end table\n\nEither one or both of @samp{archive} and @samp{file} can contain shell\nwildcards.  On DOS based file systems, the linker will assume that a\nsingle letter followed by a colon is a drive specifier, so\n@samp{c:myfile.o} is a simple file specification, not @samp{myfile.o}\nwithin an archive called @samp{c}.  @samp{archive:file} filespecs may\nalso be used within an @code{EXCLUDE_FILE} list, but may not appear in\nother linker script contexts.  For instance, you cannot extract a file\nfrom an archive by using @samp{archive:file} in an @code{INPUT}\ncommand.\n\nIf you use a file name without a list of sections, then all sections in\nthe input file will be included in the output section.  This is not\ncommonly done, but it may by useful on occasion.  For example:\n@smallexample\ndata.o\n@end smallexample\n\nWhen you use a file name which is not an @samp{archive:file} specifier\nand does not contain any wild card\ncharacters, the linker will first see if you also specified the file\nname on the linker command line or in an @code{INPUT} command.  If you\ndid not, the linker will attempt to open the file as an input file, as\nthough it appeared on the command line.  Note that this differs from an\n@code{INPUT} command, because the linker will not search for the file in\nthe archive search path.\n\n@node Input Section Wildcards\n@subsubsection Input Section Wildcard Patterns\n@cindex input section wildcards\n@cindex wildcard file name patterns\n@cindex file name wildcard patterns\n@cindex section name wildcard patterns\nIn an input section description, either the file name or the section\nname or both may be wildcard patterns.\n\nThe file name of @samp{*} seen in many examples is a simple wildcard\npattern for the file name.\n\nThe wildcard patterns are like those used by the Unix shell.\n\n@table @samp\n@item *\nmatches any number of characters\n@item ?\nmatches any single character\n@item [@var{chars}]\nmatches a single instance of any of the @var{chars}; the @samp{-}\ncharacter may be used to specify a range of characters, as in\n@samp{[a-z]} to match any lower case letter\n@item \\\nquotes the following character\n@end table\n\nWhen a file name is matched with a wildcard, the wildcard characters\nwill not match a @samp{/} character (used to separate directory names on\nUnix).  A pattern consisting of a single @samp{*} character is an\nexception; it will always match any file name, whether it contains a\n@samp{/} or not.  In a section name, the wildcard characters will match\na @samp{/} character.\n\nFile name wildcard patterns only match files which are explicitly\nspecified on the command line or in an @code{INPUT} command.  The linker\ndoes not search directories to expand wildcards.\n\nIf a file name matches more than one wildcard pattern, or if a file name\nappears explicitly and is also matched by a wildcard pattern, the linker\nwill use the first match in the linker script.  For example, this\nsequence of input section descriptions is probably in error, because the\n@file{data.o} rule will not be used:\n@smallexample\n.data : @{ *(.data) @}\n.data1 : @{ data.o(.data) @}\n@end smallexample\n\n@cindex SORT_BY_NAME\nNormally, the linker will place files and sections matched by wildcards\nin the order in which they are seen during the link.  You can change\nthis by using the @code{SORT_BY_NAME} keyword, which appears before a wildcard\npattern in parentheses (e.g., @code{SORT_BY_NAME(.text*)}).  When the\n@code{SORT_BY_NAME} keyword is used, the linker will sort the files or sections\ninto ascending order by name before placing them in the output file.\n\n@cindex SORT_BY_ALIGNMENT\n@code{SORT_BY_ALIGNMENT} is very similar to @code{SORT_BY_NAME}. The\ndifference is @code{SORT_BY_ALIGNMENT} will sort sections into\nascending order by alignment before placing them in the output file.\n\n@cindex SORT\n@code{SORT} is an alias for @code{SORT_BY_NAME}.\n\nWhen there are nested section sorting commands in linker script, there\ncan be at most 1 level of nesting for section sorting commands.\n\n@enumerate\n@item\n@code{SORT_BY_NAME} (@code{SORT_BY_ALIGNMENT} (wildcard section pattern)).\nIt will sort the input sections by name first, then by alignment if 2\nsections have the same name.\n@item\n@code{SORT_BY_ALIGNMENT} (@code{SORT_BY_NAME} (wildcard section pattern)).\nIt will sort the input sections by alignment first, then by name if 2\nsections have the same alignment.\n@item\n@code{SORT_BY_NAME} (@code{SORT_BY_NAME} (wildcard section pattern)) is\ntreated the same as @code{SORT_BY_NAME} (wildcard section pattern).\n@item\n@code{SORT_BY_ALIGNMENT} (@code{SORT_BY_ALIGNMENT} (wildcard section pattern))\nis treated the same as @code{SORT_BY_ALIGNMENT} (wildcard section pattern).\n@item\nAll other nested section sorting commands are invalid.\n@end enumerate\n\nWhen both command line section sorting option and linker script\nsection sorting command are used, section sorting command always\ntakes precedence over the command line option.\n\nIf the section sorting command in linker script isn't nested, the\ncommand line option will make the section sorting command to be\ntreated as nested sorting command.\n\n@enumerate\n@item\n@code{SORT_BY_NAME} (wildcard section pattern ) with\n@option{--sort-sections alignment} is equivalent to\n@code{SORT_BY_NAME} (@code{SORT_BY_ALIGNMENT} (wildcard section pattern)).\n@item\n@code{SORT_BY_ALIGNMENT} (wildcard section pattern) with\n@option{--sort-section name} is equivalent to\n@code{SORT_BY_ALIGNMENT} (@code{SORT_BY_NAME} (wildcard section pattern)).\n@end enumerate\n\nIf the section sorting command in linker script is nested, the\ncommand line option will be ignored.\n\nIf you ever get confused about where input sections are going, use the\n@samp{-M} linker option to generate a map file.  The map file shows\nprecisely how input sections are mapped to output sections.\n\nThis example shows how wildcard patterns might be used to partition\nfiles.  This linker script directs the linker to place all @samp{.text}\nsections in @samp{.text} and all @samp{.bss} sections in @samp{.bss}.\nThe linker will place the @samp{.data} section from all files beginning\nwith an upper case character in @samp{.DATA}; for all other files, the\nlinker will place the @samp{.data} section in @samp{.data}.\n@smallexample\n@group\nSECTIONS @{\n  .text : @{ *(.text) @}\n  .DATA : @{ [A-Z]*(.data) @}\n  .data : @{ *(.data) @}\n  .bss : @{ *(.bss) @}\n@}\n@end group\n@end smallexample\n\n@node Input Section Common\n@subsubsection Input Section for Common Symbols\n@cindex common symbol placement\n@cindex uninitialized data placement\nA special notation is needed for common symbols, because in many object\nfile formats common symbols do not have a particular input section.  The\nlinker treats common symbols as though they are in an input section\nnamed @samp{COMMON}.\n\nYou may use file names with the @samp{COMMON} section just as with any\nother input sections.  You can use this to place common symbols from a\nparticular input file in one section while common symbols from other\ninput files are placed in another section.\n\nIn most cases, common symbols in input files will be placed in the\n@samp{.bss} section in the output file.  For example:\n@smallexample\n.bss @{ *(.bss) *(COMMON) @}\n@end smallexample\n\n@cindex scommon section\n@cindex small common symbols\nSome object file formats have more than one type of common symbol.  For\nexample, the MIPS ELF object file format distinguishes standard common\nsymbols and small common symbols.  In this case, the linker will use a\ndifferent special section name for other types of common symbols.  In\nthe case of MIPS ELF, the linker uses @samp{COMMON} for standard common\nsymbols and @samp{.scommon} for small common symbols.  This permits you\nto map the different types of common symbols into memory at different\nlocations.\n\n@cindex [COMMON]\nYou will sometimes see @samp{[COMMON]} in old linker scripts.  This\nnotation is now considered obsolete.  It is equivalent to\n@samp{*(COMMON)}.\n\n@node Input Section Keep\n@subsubsection Input Section and Garbage Collection\n@cindex KEEP\n@cindex garbage collection\nWhen link-time garbage collection is in use (@samp{--gc-sections}),\nit is often useful to mark sections that should not be eliminated.\nThis is accomplished by surrounding an input section's wildcard entry\nwith @code{KEEP()}, as in @code{KEEP(*(.init))} or\n@code{KEEP(SORT_BY_NAME(*)(.ctors))}.\n\n@node Input Section Example\n@subsubsection Input Section Example\nThe following example is a complete linker script.  It tells the linker\nto read all of the sections from file @file{all.o} and place them at the\nstart of output section @samp{outputa} which starts at location\n@samp{0x10000}.  All of section @samp{.input1} from file @file{foo.o}\nfollows immediately, in the same output section.  All of section\n@samp{.input2} from @file{foo.o} goes into output section\n@samp{outputb}, followed by section @samp{.input1} from @file{foo1.o}.\nAll of the remaining @samp{.input1} and @samp{.input2} sections from any\nfiles are written to output section @samp{outputc}.\n\n@smallexample\n@group\nSECTIONS @{\n  outputa 0x10000 :\n    @{\n    all.o\n    foo.o (.input1)\n    @}\n@end group\n@group\n  outputb :\n    @{\n    foo.o (.input2)\n    foo1.o (.input1)\n    @}\n@end group\n@group\n  outputc :\n    @{\n    *(.input1)\n    *(.input2)\n    @}\n@}\n@end group\n@end smallexample\n\n@node Output Section Data\n@subsection Output Section Data\n@cindex data\n@cindex section data\n@cindex output section data\n@kindex BYTE(@var{expression})\n@kindex SHORT(@var{expression})\n@kindex LONG(@var{expression})\n@kindex QUAD(@var{expression})\n@kindex SQUAD(@var{expression})\nYou can include explicit bytes of data in an output section by using\n@code{BYTE}, @code{SHORT}, @code{LONG}, @code{QUAD}, or @code{SQUAD} as\nan output section command.  Each keyword is followed by an expression in\nparentheses providing the value to store (@pxref{Expressions}).  The\nvalue of the expression is stored at the current value of the location\ncounter.\n\nThe @code{BYTE}, @code{SHORT}, @code{LONG}, and @code{QUAD} commands\nstore one, two, four, and eight bytes (respectively).  After storing the\nbytes, the location counter is incremented by the number of bytes\nstored.\n\nFor example, this will store the byte 1 followed by the four byte value\nof the symbol @samp{addr}:\n@smallexample\nBYTE(1)\nLONG(addr)\n@end smallexample\n\nWhen using a 64 bit host or target, @code{QUAD} and @code{SQUAD} are the\nsame; they both store an 8 byte, or 64 bit, value.  When both host and\ntarget are 32 bits, an expression is computed as 32 bits.  In this case\n@code{QUAD} stores a 32 bit value zero extended to 64 bits, and\n@code{SQUAD} stores a 32 bit value sign extended to 64 bits.\n\nIf the object file format of the output file has an explicit endianness,\nwhich is the normal case, the value will be stored in that endianness.\nWhen the object file format does not have an explicit endianness, as is\ntrue of, for example, S-records, the value will be stored in the\nendianness of the first input object file.\n\nNote---these commands only work inside a section description and not\nbetween them, so the following will produce an error from the linker:\n@smallexample\nSECTIONS @{@ .text : @{@ *(.text) @}@ LONG(1) .data : @{@ *(.data) @}@ @}@\n@end smallexample\nwhereas this will work:\n@smallexample\nSECTIONS @{@ .text : @{@ *(.text) ; LONG(1) @}@ .data : @{@ *(.data) @}@ @}@\n@end smallexample\n\n@kindex FILL(@var{expression})\n@cindex holes, filling\n@cindex unspecified memory\nYou may use the @code{FILL} command to set the fill pattern for the\ncurrent section.  It is followed by an expression in parentheses.  Any\notherwise unspecified regions of memory within the section (for example,\ngaps left due to the required alignment of input sections) are filled\nwith the value of the expression, repeated as\nnecessary.  A @code{FILL} statement covers memory locations after the\npoint at which it occurs in the section definition; by including more\nthan one @code{FILL} statement, you can have different fill patterns in\ndifferent parts of an output section.\n\nThis example shows how to fill unspecified regions of memory with the\nvalue @samp{0x90}:\n@smallexample\nFILL(0x90909090)\n@end smallexample\n\nThe @code{FILL} command is similar to the @samp{=@var{fillexp}} output\nsection attribute, but it only affects the\npart of the section following the @code{FILL} command, rather than the\nentire section.  If both are used, the @code{FILL} command takes\nprecedence.  @xref{Output Section Fill}, for details on the fill\nexpression.\n\n@node Output Section Keywords\n@subsection Output Section Keywords\nThere are a couple of keywords which can appear as output section\ncommands.\n\n@table @code\n@kindex CREATE_OBJECT_SYMBOLS\n@cindex input filename symbols\n@cindex filename symbols\n@item CREATE_OBJECT_SYMBOLS\nThe command tells the linker to create a symbol for each input file.\nThe name of each symbol will be the name of the corresponding input\nfile.  The section of each symbol will be the output section in which\nthe @code{CREATE_OBJECT_SYMBOLS} command appears.\n\nThis is conventional for the a.out object file format.  It is not\nnormally used for any other object file format.\n\n@kindex CONSTRUCTORS\n@cindex C++ constructors, arranging in link\n@cindex constructors, arranging in link\n@item CONSTRUCTORS\nWhen linking using the a.out object file format, the linker uses an\nunusual set construct to support C++ global constructors and\ndestructors.  When linking object file formats which do not support\narbitrary sections, such as ECOFF and XCOFF, the linker will\nautomatically recognize C++ global constructors and destructors by name.\nFor these object file formats, the @code{CONSTRUCTORS} command tells the\nlinker to place constructor information in the output section where the\n@code{CONSTRUCTORS} command appears.  The @code{CONSTRUCTORS} command is\nignored for other object file formats.\n\nThe symbol @w{@code{__CTOR_LIST__}} marks the start of the global\nconstructors, and the symbol @w{@code{__CTOR_END__}} marks the end.\nSimilarly, @w{@code{__DTOR_LIST__}} and @w{@code{__DTOR_END__}} mark\nthe start and end of the global destructors.  The\nfirst word in the list is the number of entries, followed by the address\nof each constructor or destructor, followed by a zero word.  The\ncompiler must arrange to actually run the code.  For these object file\nformats @sc{gnu} C++ normally calls constructors from a subroutine\n@code{__main}; a call to @code{__main} is automatically inserted into\nthe startup code for @code{main}.  @sc{gnu} C++ normally runs\ndestructors either by using @code{atexit}, or directly from the function\n@code{exit}.\n\nFor object file formats such as @code{COFF} or @code{ELF} which support\narbitrary section names, @sc{gnu} C++ will normally arrange to put the\naddresses of global constructors and destructors into the @code{.ctors}\nand @code{.dtors} sections.  Placing the following sequence into your\nlinker script will build the sort of table which the @sc{gnu} C++\nruntime code expects to see.\n\n@smallexample\n      __CTOR_LIST__ = .;\n      LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)\n      *(.ctors)\n      LONG(0)\n      __CTOR_END__ = .;\n      __DTOR_LIST__ = .;\n      LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)\n      *(.dtors)\n      LONG(0)\n      __DTOR_END__ = .;\n@end smallexample\n\nIf you are using the @sc{gnu} C++ support for initialization priority,\nwhich provides some control over the order in which global constructors\nare run, you must sort the constructors at link time to ensure that they\nare executed in the correct order.  When using the @code{CONSTRUCTORS}\ncommand, use @samp{SORT_BY_NAME(CONSTRUCTORS)} instead.  When using the\n@code{.ctors} and @code{.dtors} sections, use @samp{*(SORT_BY_NAME(.ctors))} and\n@samp{*(SORT_BY_NAME(.dtors))} instead of just @samp{*(.ctors)} and\n@samp{*(.dtors)}.\n\nNormally the compiler and linker will handle these issues automatically,\nand you will not need to concern yourself with them.  However, you may\nneed to consider this if you are using C++ and writing your own linker\nscripts.\n\n@end table\n\n@node Output Section Discarding\n@subsection Output Section Discarding\n@cindex discarding sections\n@cindex sections, discarding\n@cindex removing sections\nThe linker will not create output sections with no contents.  This is\nfor convenience when referring to input sections that may or may not\nbe present in any of the input files.  For example:\n@smallexample\n.foo : @{ *(.foo) @}\n@end smallexample\n@noindent\nwill only create a @samp{.foo} section in the output file if there is a\n@samp{.foo} section in at least one input file, and if the input\nsections are not all empty.  Other link script directives that allocate\nspace in an output section will also create the output section.\n\nThe linker will ignore address assignments (@pxref{Output Section Address})\non discarded output sections, except when the linker script defines\nsymbols in the output section.  In that case the linker will obey\nthe address assignments, possibly advancing dot even though the\nsection is discarded.\n\n@cindex /DISCARD/\nThe special output section name @samp{/DISCARD/} may be used to discard\ninput sections.  Any input sections which are assigned to an output\nsection named @samp{/DISCARD/} are not included in the output file.\n\n@node Output Section Attributes\n@subsection Output Section Attributes\n@cindex output section attributes\nWe showed above that the full description of an output section looked\nlike this:\n\n@smallexample\n@group\n@var{section} [@var{address}] [(@var{type})] :\n  [AT(@var{lma})]\n  [ALIGN(@var{section_align})]\n  [SUBALIGN(@var{subsection_align})]\n  [@var{constraint}]\n  @{\n    @var{output-section-command}\n    @var{output-section-command}\n    @dots{}\n  @} [>@var{region}] [AT>@var{lma_region}] [:@var{phdr} :@var{phdr} @dots{}] [=@var{fillexp}]\n@end group\n@end smallexample\n\nWe've already described @var{section}, @var{address}, and\n@var{output-section-command}.  In this section we will describe the\nremaining section attributes.\n\n@menu\n* Output Section Type::\t\tOutput section type\n* Output Section LMA::\t\tOutput section LMA\n* Forced Output Alignment::\tForced Output Alignment\n* Forced Input Alignment::\tForced Input Alignment\n* Output Section Constraint::   Output section constraint\n* Output Section Region::\tOutput section region\n* Output Section Phdr::\t\tOutput section phdr\n* Output Section Fill::\t\tOutput section fill\n@end menu\n\n@node Output Section Type\n@subsubsection Output Section Type\nEach output section may have a type.  The type is a keyword in\nparentheses.  The following types are defined:\n\n@table @code\n@item NOLOAD\nThe section should be marked as not loadable, so that it will not be\nloaded into memory when the program is run.\n@item DSECT\n@itemx COPY\n@itemx INFO\n@itemx OVERLAY\nThese type names are supported for backward compatibility, and are\nrarely used.  They all have the same effect: the section should be\nmarked as not allocatable, so that no memory is allocated for the\nsection when the program is run.\n@end table\n\n@kindex NOLOAD\n@cindex prevent unnecessary loading\n@cindex loading, preventing\nThe linker normally sets the attributes of an output section based on\nthe input sections which map into it.  You can override this by using\nthe section type.  For example, in the script sample below, the\n@samp{ROM} section is addressed at memory location @samp{0} and does not\nneed to be loaded when the program is run.  The contents of the\n@samp{ROM} section will appear in the linker output file as usual.\n@smallexample\n@group\nSECTIONS @{\n  ROM 0 (NOLOAD) : @{ @dots{} @}\n  @dots{}\n@}\n@end group\n@end smallexample\n\n@node Output Section LMA\n@subsubsection Output Section LMA\n@kindex AT>@var{lma_region}\n@kindex AT(@var{lma})\n@cindex load address\n@cindex section load address\nEvery section has a virtual address (VMA) and a load address (LMA); see\n@ref{Basic Script Concepts}.  The address expression which may appear in\nan output section description sets the VMA (@pxref{Output Section\nAddress}).\n\nThe expression @var{lma} that follows the @code{AT} keyword specifies\nthe load address of the section.\n\nAlternatively, with @samp{AT>@var{lma_region}} expression, you may\nspecify a memory region for the section's load address. @xref{MEMORY}.\nNote that if the section has not had a VMA assigned to it then the\nlinker will use the @var{lma_region} as the VMA region as well.\n\nIf neither @code{AT} nor @code{AT>} is specified for an allocatable\nsection, the linker will set the LMA such that the difference between\nVMA and LMA for the section is the same as the preceding output\nsection in the same region.  If there is no preceding output section\nor the section is not allocatable, the linker will set the LMA equal\nto the VMA.\n@xref{Output Section Region}.\n\n@cindex ROM initialized data\n@cindex initialized data in ROM\nThis feature is designed to make it easy to build a ROM image.  For\nexample, the following linker script creates three output sections: one\ncalled @samp{.text}, which starts at @code{0x1000}, one called\n@samp{.mdata}, which is loaded at the end of the @samp{.text} section\neven though its VMA is @code{0x2000}, and one called @samp{.bss} to hold\nuninitialized data at address @code{0x3000}.  The symbol @code{_data} is\ndefined with the value @code{0x2000}, which shows that the location\ncounter holds the VMA value, not the LMA value.\n\n@smallexample\n@group\nSECTIONS\n  @{\n  .text 0x1000 : @{ *(.text) _etext = . ; @}\n  .mdata 0x2000 :\n    AT ( ADDR (.text) + SIZEOF (.text) )\n    @{ _data = . ; *(.data); _edata = . ;  @}\n  .bss 0x3000 :\n    @{ _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;@}\n@}\n@end group\n@end smallexample\n\nThe run-time initialization code for use with a program generated with\nthis linker script would include something like the following, to copy\nthe initialized data from the ROM image to its runtime address.  Notice\nhow this code takes advantage of the symbols defined by the linker\nscript.\n\n@smallexample\n@group\nextern char _etext, _data, _edata, _bstart, _bend;\nchar *src = &_etext;\nchar *dst = &_data;\n\n/* ROM has data at end of text; copy it. */\nwhile (dst < &_edata) @{\n  *dst++ = *src++;\n@}\n\n/* Zero bss */\nfor (dst = &_bstart; dst< &_bend; dst++)\n  *dst = 0;\n@end group\n@end smallexample\n\n@node Forced Output Alignment\n@subsubsection Forced Output Alignment\n@kindex ALIGN(@var{section_align})\n@cindex forcing output section alignment\n@cindex output section alignment\nYou can increase an output section's alignment by using ALIGN.\n\n@node Forced Input Alignment\n@subsubsection Forced Input Alignment\n@kindex SUBALIGN(@var{subsection_align})\n@cindex forcing input section alignment\n@cindex input section alignment\nYou can force input section alignment within an output section by using\nSUBALIGN.  The value specified overrides any alignment given by input\nsections, whether larger or smaller.\n\n@node Output Section Constraint\n@subsubsection Output Section Constraint\n@kindex ONLY_IF_RO\n@kindex ONLY_IF_RW\n@cindex constraints on output sections\nYou can specify that an output section should only be created if all\nof its input sections are read-only or all of its input sections are\nread-write by using the keyword @code{ONLY_IF_RO} and\n@code{ONLY_IF_RW} respectively.\n\n@node Output Section Region\n@subsubsection Output Section Region\n@kindex >@var{region}\n@cindex section, assigning to memory region\n@cindex memory regions and sections\nYou can assign a section to a previously defined region of memory by\nusing @samp{>@var{region}}.  @xref{MEMORY}.\n\nHere is a simple example:\n@smallexample\n@group\nMEMORY @{ rom : ORIGIN = 0x1000, LENGTH = 0x1000 @}\nSECTIONS @{ ROM : @{ *(.text) @} >rom @}\n@end group\n@end smallexample\n\n@node Output Section Phdr\n@subsubsection Output Section Phdr\n@kindex :@var{phdr}\n@cindex section, assigning to program header\n@cindex program headers and sections\nYou can assign a section to a previously defined program segment by\nusing @samp{:@var{phdr}}.  @xref{PHDRS}.  If a section is assigned to\none or more segments, then all subsequent allocated sections will be\nassigned to those segments as well, unless they use an explicitly\n@code{:@var{phdr}} modifier.  You can use @code{:NONE} to tell the\nlinker to not put the section in any segment at all.\n\nHere is a simple example:\n@smallexample\n@group\nPHDRS @{ text PT_LOAD ; @}\nSECTIONS @{ .text : @{ *(.text) @} :text @}\n@end group\n@end smallexample\n\n@node Output Section Fill\n@subsubsection Output Section Fill\n@kindex =@var{fillexp}\n@cindex section fill pattern\n@cindex fill pattern, entire section\nYou can set the fill pattern for an entire section by using\n@samp{=@var{fillexp}}.  @var{fillexp} is an expression\n(@pxref{Expressions}).  Any otherwise unspecified regions of memory\nwithin the output section (for example, gaps left due to the required\nalignment of input sections) will be filled with the value, repeated as\nnecessary.  If the fill expression is a simple hex number, ie. a string\nof hex digit starting with @samp{0x} and without a trailing @samp{k} or @samp{M}, then\nan arbitrarily long sequence of hex digits can be used to specify the\nfill pattern;  Leading zeros become part of the pattern too.  For all\nother cases, including extra parentheses or a unary @code{+}, the fill\npattern is the four least significant bytes of the value of the\nexpression.  In all cases, the number is big-endian.\n\nYou can also change the fill value with a @code{FILL} command in the\noutput section commands; (@pxref{Output Section Data}).\n\nHere is a simple example:\n@smallexample\n@group\nSECTIONS @{ .text : @{ *(.text) @} =0x90909090 @}\n@end group\n@end smallexample\n\n@node Overlay Description\n@subsection Overlay Description\n@kindex OVERLAY\n@cindex overlays\nAn overlay description provides an easy way to describe sections which\nare to be loaded as part of a single memory image but are to be run at\nthe same memory address.  At run time, some sort of overlay manager will\ncopy the overlaid sections in and out of the runtime memory address as\nrequired, perhaps by simply manipulating addressing bits.  This approach\ncan be useful, for example, when a certain region of memory is faster\nthan another.\n\nOverlays are described using the @code{OVERLAY} command.  The\n@code{OVERLAY} command is used within a @code{SECTIONS} command, like an\noutput section description.  The full syntax of the @code{OVERLAY}\ncommand is as follows:\n@smallexample\n@group\nOVERLAY [@var{start}] : [NOCROSSREFS] [AT ( @var{ldaddr} )]\n  @{\n    @var{secname1}\n      @{\n        @var{output-section-command}\n        @var{output-section-command}\n        @dots{}\n      @} [:@var{phdr}@dots{}] [=@var{fill}]\n    @var{secname2}\n      @{\n        @var{output-section-command}\n        @var{output-section-command}\n        @dots{}\n      @} [:@var{phdr}@dots{}] [=@var{fill}]\n    @dots{}\n  @} [>@var{region}] [:@var{phdr}@dots{}] [=@var{fill}]\n@end group\n@end smallexample\n\nEverything is optional except @code{OVERLAY} (a keyword), and each\nsection must have a name (@var{secname1} and @var{secname2} above).  The\nsection definitions within the @code{OVERLAY} construct are identical to\nthose within the general @code{SECTIONS} contruct (@pxref{SECTIONS}),\nexcept that no addresses and no memory regions may be defined for\nsections within an @code{OVERLAY}.\n\nThe sections are all defined with the same starting address.  The load\naddresses of the sections are arranged such that they are consecutive in\nmemory starting at the load address used for the @code{OVERLAY} as a\nwhole (as with normal section definitions, the load address is optional,\nand defaults to the start address; the start address is also optional,\nand defaults to the current value of the location counter).\n\nIf the @code{NOCROSSREFS} keyword is used, and there any references\namong the sections, the linker will report an error.  Since the sections\nall run at the same address, it normally does not make sense for one\nsection to refer directly to another.  @xref{Miscellaneous Commands,\nNOCROSSREFS}.\n\nFor each section within the @code{OVERLAY}, the linker automatically\nprovides two symbols.  The symbol @code{__load_start_@var{secname}} is\ndefined as the starting load address of the section.  The symbol\n@code{__load_stop_@var{secname}} is defined as the final load address of\nthe section.  Any characters within @var{secname} which are not legal\nwithin C identifiers are removed.  C (or assembler) code may use these\nsymbols to move the overlaid sections around as necessary.\n\nAt the end of the overlay, the value of the location counter is set to\nthe start address of the overlay plus the size of the largest section.\n\nHere is an example.  Remember that this would appear inside a\n@code{SECTIONS} construct.\n@smallexample\n@group\n  OVERLAY 0x1000 : AT (0x4000)\n   @{\n     .text0 @{ o1/*.o(.text) @}\n     .text1 @{ o2/*.o(.text) @}\n   @}\n@end group\n@end smallexample\n@noindent\nThis will define both @samp{.text0} and @samp{.text1} to start at\naddress 0x1000.  @samp{.text0} will be loaded at address 0x4000, and\n@samp{.text1} will be loaded immediately after @samp{.text0}.  The\nfollowing symbols will be defined if referenced: @code{__load_start_text0},\n@code{__load_stop_text0}, @code{__load_start_text1},\n@code{__load_stop_text1}.\n\nC code to copy overlay @code{.text1} into the overlay area might look\nlike the following.\n\n@smallexample\n@group\n  extern char __load_start_text1, __load_stop_text1;\n  memcpy ((char *) 0x1000, &__load_start_text1,\n          &__load_stop_text1 - &__load_start_text1);\n@end group\n@end smallexample\n\nNote that the @code{OVERLAY} command is just syntactic sugar, since\neverything it does can be done using the more basic commands.  The above\nexample could have been written identically as follows.\n\n@smallexample\n@group\n  .text0 0x1000 : AT (0x4000) @{ o1/*.o(.text) @}\n  PROVIDE (__load_start_text0 = LOADADDR (.text0));\n  PROVIDE (__load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0));\n  .text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) @{ o2/*.o(.text) @}\n  PROVIDE (__load_start_text1 = LOADADDR (.text1));\n  PROVIDE (__load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1));\n  . = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));\n@end group\n@end smallexample\n\n@node MEMORY\n@section MEMORY Command\n@kindex MEMORY\n@cindex memory regions\n@cindex regions of memory\n@cindex allocating memory\n@cindex discontinuous memory\nThe linker's default configuration permits allocation of all available\nmemory.  You can override this by using the @code{MEMORY} command.\n\nThe @code{MEMORY} command describes the location and size of blocks of\nmemory in the target.  You can use it to describe which memory regions\nmay be used by the linker, and which memory regions it must avoid.  You\ncan then assign sections to particular memory regions.  The linker will\nset section addresses based on the memory regions, and will warn about\nregions that become too full.  The linker will not shuffle sections\naround to fit into the available regions.\n\nA linker script may contain at most one use of the @code{MEMORY}\ncommand.  However, you can define as many blocks of memory within it as\nyou wish.  The syntax is:\n@smallexample\n@group\nMEMORY\n  @{\n    @var{name} [(@var{attr})] : ORIGIN = @var{origin}, LENGTH = @var{len}\n    @dots{}\n  @}\n@end group\n@end smallexample\n\nThe @var{name} is a name used in the linker script to refer to the\nregion.  The region name has no meaning outside of the linker script.\nRegion names are stored in a separate name space, and will not conflict\nwith symbol names, file names, or section names.  Each memory region\nmust have a distinct name within the @code{MEMORY} command.  However you can\nadd later alias names to existing memory regions with the @ref{REGION_ALIAS}\ncommand.  \n\n@cindex memory region attributes\nThe @var{attr} string is an optional list of attributes that specify\nwhether to use a particular memory region for an input section which is\nnot explicitly mapped in the linker script.  As described in\n@ref{SECTIONS}, if you do not specify an output section for some input\nsection, the linker will create an output section with the same name as\nthe input section.  If you define region attributes, the linker will use\nthem to select the memory region for the output section that it creates.\n\nThe @var{attr} string must consist only of the following characters:\n@table @samp\n@item R\nRead-only section\n@item W\nRead/write section\n@item X\nExecutable section\n@item A\nAllocatable section\n@item I\nInitialized section\n@item L\nSame as @samp{I}\n@item !\nInvert the sense of any of the preceding attributes\n@end table\n\nIf a unmapped section matches any of the listed attributes other than\n@samp{!}, it will be placed in the memory region.  The @samp{!}\nattribute reverses this test, so that an unmapped section will be placed\nin the memory region only if it does not match any of the listed\nattributes.\n\n@kindex ORIGIN =\n@kindex o =\n@kindex org =\nThe @var{origin} is an numerical expression for the start address of\nthe memory region.  The expression must evaluate to a constant and it\ncannot involve any symbols.  The keyword @code{ORIGIN} may be\nabbreviated to @code{org} or @code{o} (but not, for example,\n@code{ORG}).\n\n@kindex LENGTH =\n@kindex len =\n@kindex l =\nThe @var{len} is an expression for the size in bytes of the memory\nregion.  As with the @var{origin} expression, the expression must\nbe numerical only and must evaluate to a constant.  The keyword\n@code{LENGTH} may be abbreviated to @code{len} or @code{l}.\n\nIn the following example, we specify that there are two memory regions\navailable for allocation: one starting at @samp{0} for 256 kilobytes,\nand the other starting at @samp{0x40000000} for four megabytes.  The\nlinker will place into the @samp{rom} memory region every section which\nis not explicitly mapped into a memory region, and is either read-only\nor executable.  The linker will place other sections which are not\nexplicitly mapped into a memory region into the @samp{ram} memory\nregion.\n\n@smallexample\n@group\nMEMORY\n  @{\n    rom (rx)  : ORIGIN = 0, LENGTH = 256K\n    ram (!rx) : org = 0x40000000, l = 4M\n  @}\n@end group\n@end smallexample\n\nOnce you define a memory region, you can direct the linker to place\nspecific output sections into that memory region by using the\n@samp{>@var{region}} output section attribute.  For example, if you have\na memory region named @samp{mem}, you would use @samp{>mem} in the\noutput section definition.  @xref{Output Section Region}.  If no address\nwas specified for the output section, the linker will set the address to\nthe next available address within the memory region.  If the combined\noutput sections directed to a memory region are too large for the\nregion, the linker will issue an error message.\n\nIt is possible to access the origin and length of a memory in an\nexpression via the @code{ORIGIN(@var{memory})} and\n@code{LENGTH(@var{memory})} functions:\n\n@smallexample\n@group\n  _fstack = ORIGIN(ram) + LENGTH(ram) - 4;\n@end group\n@end smallexample\n\n@node PHDRS\n@section PHDRS Command\n@kindex PHDRS\n@cindex program headers\n@cindex ELF program headers\n@cindex program segments\n@cindex segments, ELF\nThe ELF object file format uses @dfn{program headers}, also knows as\n@dfn{segments}.  The program headers describe how the program should be\nloaded into memory.  You can print them out by using the @code{objdump}\nprogram with the @samp{-p} option.\n\nWhen you run an ELF program on a native ELF system, the system loader\nreads the program headers in order to figure out how to load the\nprogram.  This will only work if the program headers are set correctly.\nThis manual does not describe the details of how the system loader\ninterprets program headers; for more information, see the ELF ABI.\n\nThe linker will create reasonable program headers by default.  However,\nin some cases, you may need to specify the program headers more\nprecisely.  You may use the @code{PHDRS} command for this purpose.  When\nthe linker sees the @code{PHDRS} command in the linker script, it will\nnot create any program headers other than the ones specified.\n\nThe linker only pays attention to the @code{PHDRS} command when\ngenerating an ELF output file.  In other cases, the linker will simply\nignore @code{PHDRS}.\n\nThis is the syntax of the @code{PHDRS} command.  The words @code{PHDRS},\n@code{FILEHDR}, @code{AT}, and @code{FLAGS} are keywords.\n\n@smallexample\n@group\nPHDRS\n@{\n  @var{name} @var{type} [ FILEHDR ] [ PHDRS ] [ AT ( @var{address} ) ]\n        [ FLAGS ( @var{flags} ) ] ;\n@}\n@end group\n@end smallexample\n\nThe @var{name} is used only for reference in the @code{SECTIONS} command\nof the linker script.  It is not put into the output file.  Program\nheader names are stored in a separate name space, and will not conflict\nwith symbol names, file names, or section names.  Each program header\nmust have a distinct name.\n\nCertain program header types describe segments of memory which the\nsystem loader will load from the file.  In the linker script, you\nspecify the contents of these segments by placing allocatable output\nsections in the segments.  You use the @samp{:@var{phdr}} output section\nattribute to place a section in a particular segment.  @xref{Output\nSection Phdr}.\n\nIt is normal to put certain sections in more than one segment.  This\nmerely implies that one segment of memory contains another.  You may\nrepeat @samp{:@var{phdr}}, using it once for each segment which should\ncontain the section.\n\nIf you place a section in one or more segments using @samp{:@var{phdr}},\nthen the linker will place all subsequent allocatable sections which do\nnot specify @samp{:@var{phdr}} in the same segments.  This is for\nconvenience, since generally a whole set of contiguous sections will be\nplaced in a single segment.  You can use @code{:NONE} to override the\ndefault segment and tell the linker to not put the section in any\nsegment at all.\n\n@kindex FILEHDR\n@kindex PHDRS\nYou may use the @code{FILEHDR} and @code{PHDRS} keywords appear after\nthe program header type to further describe the contents of the segment.\nThe @code{FILEHDR} keyword means that the segment should include the ELF\nfile header.  The @code{PHDRS} keyword means that the segment should\ninclude the ELF program headers themselves.\n\nThe @var{type} may be one of the following.  The numbers indicate the\nvalue of the keyword.\n\n@table @asis\n@item @code{PT_NULL} (0)\nIndicates an unused program header.\n\n@item @code{PT_LOAD} (1)\nIndicates that this program header describes a segment to be loaded from\nthe file.\n\n@item @code{PT_DYNAMIC} (2)\nIndicates a segment where dynamic linking information can be found.\n\n@item @code{PT_INTERP} (3)\nIndicates a segment where the name of the program interpreter may be\nfound.\n\n@item @code{PT_NOTE} (4)\nIndicates a segment holding note information.\n\n@item @code{PT_SHLIB} (5)\nA reserved program header type, defined but not specified by the ELF\nABI.\n\n@item @code{PT_PHDR} (6)\nIndicates a segment where the program headers may be found.\n\n@item @var{expression}\nAn expression giving the numeric type of the program header.  This may\nbe used for types not defined above.\n@end table\n\nYou can specify that a segment should be loaded at a particular address\nin memory by using an @code{AT} expression.  This is identical to the\n@code{AT} command used as an output section attribute (@pxref{Output\nSection LMA}).  The @code{AT} command for a program header overrides the\noutput section attribute.\n\nThe linker will normally set the segment flags based on the sections\nwhich comprise the segment.  You may use the @code{FLAGS} keyword to\nexplicitly specify the segment flags.  The value of @var{flags} must be\nan integer.  It is used to set the @code{p_flags} field of the program\nheader.\n\nHere is an example of @code{PHDRS}.  This shows a typical set of program\nheaders used on a native ELF system.\n\n@example\n@group\nPHDRS\n@{\n  headers PT_PHDR PHDRS ;\n  interp PT_INTERP ;\n  text PT_LOAD FILEHDR PHDRS ;\n  data PT_LOAD ;\n  dynamic PT_DYNAMIC ;\n@}\n\nSECTIONS\n@{\n  . = SIZEOF_HEADERS;\n  .interp : @{ *(.interp) @} :text :interp\n  .text : @{ *(.text) @} :text\n  .rodata : @{ *(.rodata) @} /* defaults to :text */\n  @dots{}\n  . = . + 0x1000; /* move to a new page in memory */\n  .data : @{ *(.data) @} :data\n  .dynamic : @{ *(.dynamic) @} :data :dynamic\n  @dots{}\n@}\n@end group\n@end example\n\n@node VERSION\n@section VERSION Command\n@kindex VERSION @{script text@}\n@cindex symbol versions\n@cindex version script\n@cindex versions of symbols\nThe linker supports symbol versions when using ELF.  Symbol versions are\nonly useful when using shared libraries.  The dynamic linker can use\nsymbol versions to select a specific version of a function when it runs\na program that may have been linked against an earlier version of the\nshared library.\n\nYou can include a version script directly in the main linker script, or\nyou can supply the version script as an implicit linker script.  You can\nalso use the @samp{--version-script} linker option.\n\nThe syntax of the @code{VERSION} command is simply\n@smallexample\nVERSION @{ version-script-commands @}\n@end smallexample\n\nThe format of the version script commands is identical to that used by\nSun's linker in Solaris 2.5.  The version script defines a tree of\nversion nodes.  You specify the node names and interdependencies in the\nversion script.  You can specify which symbols are bound to which\nversion nodes, and you can reduce a specified set of symbols to local\nscope so that they are not globally visible outside of the shared\nlibrary.\n\nThe easiest way to demonstrate the version script language is with a few\nexamples.\n\n@smallexample\nVERS_1.1 @{\n\t global:\n\t\t foo1;\n\t local:\n\t\t old*;\n\t\t original*;\n\t\t new*;\n@};\n\nVERS_1.2 @{\n\t\t foo2;\n@} VERS_1.1;\n\nVERS_2.0 @{\n\t\t bar1; bar2;\n\t extern \"C++\" @{\n\t\t ns::*;\n\t\t \"int f(int, double)\";\n         @}\n@} VERS_1.2;\n@end smallexample\n\nThis example version script defines three version nodes.  The first\nversion node defined is @samp{VERS_1.1}; it has no other dependencies.\nThe script binds the symbol @samp{foo1} to @samp{VERS_1.1}.  It reduces\na number of symbols to local scope so that they are not visible outside\nof the shared library; this is done using wildcard patterns, so that any\nsymbol whose name begins with @samp{old}, @samp{original}, or @samp{new}\nis matched.  The wildcard patterns available are the same as those used\nin the shell when matching filenames (also known as ``globbing'').\nHowever, if you specify the symbol name inside double quotes, then the\nname is treated as literal, rather than as a glob pattern.\n\nNext, the version script defines node @samp{VERS_1.2}.  This node\ndepends upon @samp{VERS_1.1}.  The script binds the symbol @samp{foo2}\nto the version node @samp{VERS_1.2}.\n\nFinally, the version script defines node @samp{VERS_2.0}.  This node\ndepends upon @samp{VERS_1.2}.  The scripts binds the symbols @samp{bar1}\nand @samp{bar2} are bound to the version node @samp{VERS_2.0}.\n\nWhen the linker finds a symbol defined in a library which is not\nspecifically bound to a version node, it will effectively bind it to an\nunspecified base version of the library.  You can bind all otherwise\nunspecified symbols to a given version node by using @samp{global: *;}\nsomewhere in the version script.  Note that it's slightly crazy to use\nwildcards in a global spec except on the last version node.  Global\nwildcards elsewhere run the risk of accidentally adding symbols to the\nset exported for an old version.  That's wrong since older versions\nought to have a fixed set of symbols.\n\nThe names of the version nodes have no specific meaning other than what\nthey might suggest to the person reading them.  The @samp{2.0} version\ncould just as well have appeared in between @samp{1.1} and @samp{1.2}.\nHowever, this would be a confusing way to write a version script.\n\nNode name can be omitted, provided it is the only version node\nin the version script.  Such version script doesn't assign any versions to\nsymbols, only selects which symbols will be globally visible out and which\nwon't.\n\n@smallexample\n@{ global: foo; bar; local: *; @};\n@end smallexample\n\nWhen you link an application against a shared library that has versioned\nsymbols, the application itself knows which version of each symbol it\nrequires, and it also knows which version nodes it needs from each\nshared library it is linked against.  Thus at runtime, the dynamic\nloader can make a quick check to make sure that the libraries you have\nlinked against do in fact supply all of the version nodes that the\napplication will need to resolve all of the dynamic symbols.  In this\nway it is possible for the dynamic linker to know with certainty that\nall external symbols that it needs will be resolvable without having to\nsearch for each symbol reference.\n\nThe symbol versioning is in effect a much more sophisticated way of\ndoing minor version checking that SunOS does.  The fundamental problem\nthat is being addressed here is that typically references to external\nfunctions are bound on an as-needed basis, and are not all bound when\nthe application starts up.  If a shared library is out of date, a\nrequired interface may be missing; when the application tries to use\nthat interface, it may suddenly and unexpectedly fail.  With symbol\nversioning, the user will get a warning when they start their program if\nthe libraries being used with the application are too old.\n\nThere are several GNU extensions to Sun's versioning approach.  The\nfirst of these is the ability to bind a symbol to a version node in the\nsource file where the symbol is defined instead of in the versioning\nscript.  This was done mainly to reduce the burden on the library\nmaintainer.  You can do this by putting something like:\n@smallexample\n__asm__(\".symver original_foo,foo@@VERS_1.1\");\n@end smallexample\n@noindent\nin the C source file.  This renames the function @samp{original_foo} to\nbe an alias for @samp{foo} bound to the version node @samp{VERS_1.1}.\nThe @samp{local:} directive can be used to prevent the symbol\n@samp{original_foo} from being exported. A @samp{.symver} directive\ntakes precedence over a version script.\n\nThe second GNU extension is to allow multiple versions of the same\nfunction to appear in a given shared library.  In this way you can make\nan incompatible change to an interface without increasing the major\nversion number of the shared library, while still allowing applications\nlinked against the old interface to continue to function.\n\nTo do this, you must use multiple @samp{.symver} directives in the\nsource file.  Here is an example:\n\n@smallexample\n__asm__(\".symver original_foo,foo@@\");\n__asm__(\".symver old_foo,foo@@VERS_1.1\");\n__asm__(\".symver old_foo1,foo@@VERS_1.2\");\n__asm__(\".symver new_foo,foo@@@@VERS_2.0\");\n@end smallexample\n\nIn this example, @samp{foo@@} represents the symbol @samp{foo} bound to the\nunspecified base version of the symbol.  The source file that contains this\nexample would define 4 C functions: @samp{original_foo}, @samp{old_foo},\n@samp{old_foo1}, and @samp{new_foo}.\n\nWhen you have multiple definitions of a given symbol, there needs to be\nsome way to specify a default version to which external references to\nthis symbol will be bound.  You can do this with the\n@samp{foo@@@@VERS_2.0} type of @samp{.symver} directive.  You can only\ndeclare one version of a symbol as the default in this manner; otherwise\nyou would effectively have multiple definitions of the same symbol.\n\nIf you wish to bind a reference to a specific version of the symbol\nwithin the shared library, you can use the aliases of convenience\n(i.e., @samp{old_foo}), or you can use the @samp{.symver} directive to\nspecifically bind to an external version of the function in question.\n\nYou can also specify the language in the version script:\n\n@smallexample\nVERSION extern \"lang\" @{ version-script-commands @}\n@end smallexample\n\nThe supported @samp{lang}s are @samp{C}, @samp{C++}, and @samp{Java}.\nThe linker will iterate over the list of symbols at the link time and\ndemangle them according to @samp{lang} before matching them to the\npatterns specified in @samp{version-script-commands}.\n\nDemangled names may contains spaces and other special characters.  As\ndescribed above, you can use a glob pattern to match demangled names,\nor you can use a double-quoted string to match the string exactly.  In\nthe latter case, be aware that minor differences (such as differing\nwhitespace) between the version script and the demangler output will\ncause a mismatch.  As the exact string generated by the demangler\nmight change in the future, even if the mangled name does not, you\nshould check that all of your version directives are behaving as you\nexpect when you upgrade.\n\n@node Expressions\n@section Expressions in Linker Scripts\n@cindex expressions\n@cindex arithmetic\nThe syntax for expressions in the linker script language is identical to\nthat of C expressions.  All expressions are evaluated as integers.  All\nexpressions are evaluated in the same size, which is 32 bits if both the\nhost and target are 32 bits, and is otherwise 64 bits.\n\nYou can use and set symbol values in expressions.\n\nThe linker defines several special purpose builtin functions for use in\nexpressions.\n\n@menu\n* Constants::\t\t\tConstants\n* Symbolic Constants::          Symbolic constants\n* Symbols::\t\t\tSymbol Names\n* Orphan Sections::\t\tOrphan Sections\n* Location Counter::\t\tThe Location Counter\n* Operators::\t\t\tOperators\n* Evaluation::\t\t\tEvaluation\n* Expression Section::\t\tThe Section of an Expression\n* Builtin Functions::\t\tBuiltin Functions\n@end menu\n\n@node Constants\n@subsection Constants\n@cindex integer notation\n@cindex constants in linker scripts\nAll constants are integers.\n\nAs in C, the linker considers an integer beginning with @samp{0} to be\noctal, and an integer beginning with @samp{0x} or @samp{0X} to be\nhexadecimal.  Alternatively the linker accepts suffixes of @samp{h} or\n@samp{H} for hexadeciaml, @samp{o} or @samp{O} for octal, @samp{b} or\n@samp{B} for binary and @samp{d} or @samp{D} for decimal.  Any integer\nvalue without a prefix or a suffix is considered to be decimal.\n\n@cindex scaled integers\n@cindex K and M integer suffixes\n@cindex M and K integer suffixes\n@cindex suffixes for integers\n@cindex integer suffixes\nIn addition, you can use the suffixes @code{K} and @code{M} to scale a\nconstant by\n@c TEXI2ROFF-KILL\n@ifnottex\n@c END TEXI2ROFF-KILL\n@code{1024} or @code{1024*1024}\n@c TEXI2ROFF-KILL\n@end ifnottex\n@tex\n${\\rm 1024}$ or ${\\rm 1024}^2$\n@end tex\n@c END TEXI2ROFF-KILL\nrespectively.  For example, the following\nall refer to the same quantity:\n\n@smallexample\n_fourk_1 = 4K;\n_fourk_2 = 4096;\n_fourk_3 = 0x1000;\n_fourk_4 = 10000o;\n@end smallexample\n\nNote - the @code{K} and @code{M} suffixes cannot be used in\nconjunction with the base suffixes mentioned above.\n\n@node Symbolic Constants\n@subsection Symbolic Constants\n@cindex symbolic constants\n@kindex CONSTANT\nIt is possible to refer to target specific constants via the use of\nthe @code{CONSTANT(@var{name})} operator, where @var{name} is one of:\n\n@table @code\n@item MAXPAGESIZE\n@kindex MAXPAGESIZE\nThe target's maximum page size.\n\n@item COMMONPAGESIZE\n@kindex COMMONPAGESIZE\nThe target's default page size.\n@end table\n\nSo for example:\n\n@smallexample\n  .text ALIGN (CONSTANT (MAXPAGESIZE)) : @{ *(.text) @} \n@end smallexample\n\nwill create a text section aligned to the largest page boundary\nsupported by the target.\n\n@node Symbols\n@subsection Symbol Names\n@cindex symbol names\n@cindex names\n@cindex quoted symbol names\n@kindex \"\nUnless quoted, symbol names start with a letter, underscore, or period\nand may include letters, digits, underscores, periods, and hyphens.\nUnquoted symbol names must not conflict with any keywords.  You can\nspecify a symbol which contains odd characters or has the same name as a\nkeyword by surrounding the symbol name in double quotes:\n@smallexample\n\"SECTION\" = 9;\n\"with a space\" = \"also with a space\" + 10;\n@end smallexample\n\nSince symbols can contain many non-alphabetic characters, it is safest\nto delimit symbols with spaces.  For example, @samp{A-B} is one symbol,\nwhereas @samp{A - B} is an expression involving subtraction.\n\n@node Orphan Sections\n@subsection Orphan Sections\n@cindex orphan\nOrphan sections are sections present in the input files which\nare not explicitly placed into the output file by the linker\nscript.  The linker will still copy these sections into the\noutput file, but it has to guess as to where they should be\nplaced.  The linker uses a simple heuristic to do this.  It\nattempts to place orphan sections after non-orphan sections of the\nsame attribute, such as code vs data, loadable vs non-loadable, etc.\nIf there is not enough room to do this then it places\nat the end of the file.\n\nFor ELF targets, the attribute of the section includes section type as\nwell as section flag.\n\nIf an orphaned section's name is representable as a C identifier then\nthe linker will automatically @pxref{PROVIDE} two symbols:\n__start_SECNAME and __end_SECNAME, where SECNAME is the name of the\nsection.  These indicate the start address and end address of the\norphaned section respectively.  Note: most section names are not\nrepresentable as C identifiers because they contain a @samp{.}\ncharacter.\n\n@node Location Counter\n@subsection The Location Counter\n@kindex .\n@cindex dot\n@cindex location counter\n@cindex current output location\nThe special linker variable @dfn{dot} @samp{.} always contains the\ncurrent output location counter.  Since the @code{.} always refers to a\nlocation in an output section, it may only appear in an expression\nwithin a @code{SECTIONS} command.  The @code{.} symbol may appear\nanywhere that an ordinary symbol is allowed in an expression.\n\n@cindex holes\nAssigning a value to @code{.} will cause the location counter to be\nmoved.  This may be used to create holes in the output section.  The\nlocation counter may not be moved backwards inside an output section,\nand may not be moved backwards outside of an output section if so\ndoing creates areas with overlapping LMAs.\n\n@smallexample\nSECTIONS\n@{\n  output :\n    @{\n      file1(.text)\n      . = . + 1000;\n      file2(.text)\n      . += 1000;\n      file3(.text)\n    @} = 0x12345678;\n@}\n@end smallexample\n@noindent\nIn the previous example, the @samp{.text} section from @file{file1} is\nlocated at the beginning of the output section @samp{output}.  It is\nfollowed by a 1000 byte gap.  Then the @samp{.text} section from\n@file{file2} appears, also with a 1000 byte gap following before the\n@samp{.text} section from @file{file3}.  The notation @samp{= 0x12345678}\nspecifies what data to write in the gaps (@pxref{Output Section Fill}).\n\n@cindex dot inside sections\nNote: @code{.} actually refers to the byte offset from the start of the\ncurrent containing object.  Normally this is the @code{SECTIONS}\nstatement, whose start address is 0, hence @code{.} can be used as an\nabsolute address.  If @code{.} is used inside a section description\nhowever, it refers to the byte offset from the start of that section,\nnot an absolute address.  Thus in a script like this:\n\n@smallexample\nSECTIONS\n@{\n    . = 0x100\n    .text: @{\n      *(.text)\n      . = 0x200\n    @}\n    . = 0x500\n    .data: @{\n      *(.data)\n      . += 0x600\n    @}\n@}\n@end smallexample\n\nThe @samp{.text} section will be assigned a starting address of 0x100\nand a size of exactly 0x200 bytes, even if there is not enough data in\nthe @samp{.text} input sections to fill this area.  (If there is too\nmuch data, an error will be produced because this would be an attempt to\nmove @code{.} backwards).  The @samp{.data} section will start at 0x500\nand it will have an extra 0x600 bytes worth of space after the end of\nthe values from the @samp{.data} input sections and before the end of\nthe @samp{.data} output section itself.\n\n@cindex dot outside sections\nSetting symbols to the value of the location counter outside of an\noutput section statement can result in unexpected values if the linker\nneeds to place orphan sections.  For example, given the following:\n\n@smallexample\nSECTIONS\n@{\n    start_of_text = . ;\n    .text: @{ *(.text) @}\n    end_of_text = . ;\n\n    start_of_data = . ;\n    .data: @{ *(.data) @}\n    end_of_data = . ;\n@}\n@end smallexample\n\nIf the linker needs to place some input section, e.g. @code{.rodata},\nnot mentioned in the script, it might choose to place that section\nbetween @code{.text} and @code{.data}.  You might think the linker\nshould place @code{.rodata} on the blank line in the above script, but\nblank lines are of no particular significance to the linker.  As well,\nthe linker doesn't associate the above symbol names with their\nsections.  Instead, it assumes that all assignments or other\nstatements belong to the previous output section, except for the\nspecial case of an assignment to @code{.}.  I.e., the linker will\nplace the orphan @code{.rodata} section as if the script was written\nas follows:\n\n@smallexample\nSECTIONS\n@{\n    start_of_text = . ;\n    .text: @{ *(.text) @}\n    end_of_text = . ;\n\n    start_of_data = . ;\n    .rodata: @{ *(.rodata) @}\n    .data: @{ *(.data) @}\n    end_of_data = . ;\n@}\n@end smallexample\n\nThis may or may not be the script author's intention for the value of\n@code{start_of_data}.  One way to influence the orphan section\nplacement is to assign the location counter to itself, as the linker\nassumes that an assignment to @code{.} is setting the start address of\na following output section and thus should be grouped with that\nsection.  So you could write:\n\n@smallexample\nSECTIONS\n@{\n    start_of_text = . ;\n    .text: @{ *(.text) @}\n    end_of_text = . ;\n\n    . = . ;\n    start_of_data = . ;\n    .data: @{ *(.data) @}\n    end_of_data = . ;\n@}\n@end smallexample\n\nNow, the orphan @code{.rodata} section will be placed between\n@code{end_of_text} and @code{start_of_data}.\n\n@need 2000\n@node Operators\n@subsection Operators\n@cindex operators for arithmetic\n@cindex arithmetic operators\n@cindex precedence in expressions\nThe linker recognizes the standard C set of arithmetic operators, with\nthe standard bindings and precedence levels:\n@c TEXI2ROFF-KILL\n@ifnottex\n@c END TEXI2ROFF-KILL\n@smallexample\nprecedence      associativity   Operators                Notes\n(highest)\n1               left            !  -  ~                  (1)\n2               left            *  /  %\n3               left            +  -\n4               left            >>  <<\n5               left            ==  !=  >  <  <=  >=\n6               left            &\n7               left            |\n8               left            &&\n9               left            ||\n10              right           ? :\n11              right           &=  +=  -=  *=  /=       (2)\n(lowest)\n@end smallexample\nNotes:\n(1) Prefix operators\n(2) @xref{Assignments}.\n@c TEXI2ROFF-KILL\n@end ifnottex\n@tex\n\\vskip \\baselineskip\n%\"lispnarrowing\" is the extra indent used generally for smallexample\n\\hskip\\lispnarrowing\\vbox{\\offinterlineskip\n\\hrule\n\\halign\n{\\vrule#&\\strut\\hfil\\ #\\ \\hfil&\\vrule#&\\strut\\hfil\\ #\\ \\hfil&\\vrule#&\\strut\\hfil\\ {\\tt #}\\ \\hfil&\\vrule#\\cr\nheight2pt&\\omit&&\\omit&&\\omit&\\cr\n&Precedence&&  Associativity  &&{\\rm Operators}&\\cr\nheight2pt&\\omit&&\\omit&&\\omit&\\cr\n\\noalign{\\hrule}\nheight2pt&\\omit&&\\omit&&\\omit&\\cr\n&highest&&&&&\\cr\n% '176 is tilde, '~' in tt font\n&1&&left&&\\qquad-          \\char'176\\      !\\qquad\\dag&\\cr\n&2&&left&&*          /        \\%&\\cr\n&3&&left&&+          -&\\cr\n&4&&left&&>>         <<&\\cr\n&5&&left&&==         !=       >      <      <=      >=&\\cr\n&6&&left&&\\&&\\cr\n&7&&left&&|&\\cr\n&8&&left&&{\\&\\&}&\\cr\n&9&&left&&||&\\cr\n&10&&right&&?        :&\\cr\n&11&&right&&\\qquad\\&=      +=       -=     *=     /=\\qquad\\ddag&\\cr\n&lowest&&&&&\\cr\nheight2pt&\\omit&&\\omit&&\\omit&\\cr}\n\\hrule}\n@end tex\n@iftex\n{\n@obeylines@parskip=0pt@parindent=0pt\n@dag@quad Prefix operators.\n@ddag@quad @xref{Assignments}.\n}\n@end iftex\n@c END TEXI2ROFF-KILL\n\n@node Evaluation\n@subsection Evaluation\n@cindex lazy evaluation\n@cindex expression evaluation order\nThe linker evaluates expressions lazily.  It only computes the value of\nan expression when absolutely necessary.\n\nThe linker needs some information, such as the value of the start\naddress of the first section, and the origins and lengths of memory\nregions, in order to do any linking at all.  These values are computed\nas soon as possible when the linker reads in the linker script.\n\nHowever, other values (such as symbol values) are not known or needed\nuntil after storage allocation.  Such values are evaluated later, when\nother information (such as the sizes of output sections) is available\nfor use in the symbol assignment expression.\n\nThe sizes of sections cannot be known until after allocation, so\nassignments dependent upon these are not performed until after\nallocation.\n\nSome expressions, such as those depending upon the location counter\n@samp{.}, must be evaluated during section allocation.\n\nIf the result of an expression is required, but the value is not\navailable, then an error results.  For example, a script like the\nfollowing\n@smallexample\n@group\nSECTIONS\n  @{\n    .text 9+this_isnt_constant :\n      @{ *(.text) @}\n  @}\n@end group\n@end smallexample\n@noindent\nwill cause the error message @samp{non constant expression for initial\naddress}.\n\n@node Expression Section\n@subsection The Section of an Expression\n@cindex expression sections\n@cindex absolute expressions\n@cindex relative expressions\n@cindex absolute and relocatable symbols\n@cindex relocatable and absolute symbols\n@cindex symbols, relocatable and absolute\nWhen the linker evaluates an expression, the result is either absolute\nor relative to some section.  A relative expression is expressed as a\nfixed offset from the base of a section.\n\nThe position of the expression within the linker script determines\nwhether it is absolute or relative.  An expression which appears within\nan output section definition is relative to the base of the output\nsection.  An expression which appears elsewhere will be absolute.\n\nA symbol set to a relative expression will be relocatable if you request\nrelocatable output using the @samp{-r} option.  That means that a\nfurther link operation may change the value of the symbol.  The symbol's\nsection will be the section of the relative expression.\n\nA symbol set to an absolute expression will retain the same value\nthrough any further link operation.  The symbol will be absolute, and\nwill not have any particular associated section.\n\nYou can use the builtin function @code{ABSOLUTE} to force an expression\nto be absolute when it would otherwise be relative.  For example, to\ncreate an absolute symbol set to the address of the end of the output\nsection @samp{.data}:\n@smallexample\nSECTIONS\n  @{\n    .data : @{ *(.data) _edata = ABSOLUTE(.); @}\n  @}\n@end smallexample\n@noindent\nIf @samp{ABSOLUTE} were not used, @samp{_edata} would be relative to the\n@samp{.data} section.\n\n@node Builtin Functions\n@subsection Builtin Functions\n@cindex functions in expressions\nThe linker script language includes a number of builtin functions for\nuse in linker script expressions.\n\n@table @code\n@item ABSOLUTE(@var{exp})\n@kindex ABSOLUTE(@var{exp})\n@cindex expression, absolute\nReturn the absolute (non-relocatable, as opposed to non-negative) value\nof the expression @var{exp}.  Primarily useful to assign an absolute\nvalue to a symbol within a section definition, where symbol values are\nnormally section relative.  @xref{Expression Section}.\n\n@item ADDR(@var{section})\n@kindex ADDR(@var{section})\n@cindex section address in expression\nReturn the absolute address (the VMA) of the named @var{section}.  Your\nscript must previously have defined the location of that section.  In\nthe following example, @code{symbol_1} and @code{symbol_2} are assigned\nidentical values:\n@smallexample\n@group\nSECTIONS @{ @dots{}\n  .output1 :\n    @{\n    start_of_output_1 = ABSOLUTE(.);\n    @dots{}\n    @}\n  .output :\n    @{\n    symbol_1 = ADDR(.output1);\n    symbol_2 = start_of_output_1;\n    @}\n@dots{} @}\n@end group\n@end smallexample\n\n@item ALIGN(@var{align})\n@itemx ALIGN(@var{exp},@var{align})\n@kindex ALIGN(@var{align})\n@kindex ALIGN(@var{exp},@var{align})\n@cindex round up location counter\n@cindex align location counter\n@cindex round up expression\n@cindex align expression\nReturn the location counter (@code{.}) or arbitrary expression aligned\nto the next @var{align} boundary.  The single operand @code{ALIGN}\ndoesn't change the value of the location counter---it just does\narithmetic on it.  The two operand @code{ALIGN} allows an arbitrary\nexpression to be aligned upwards (@code{ALIGN(@var{align})} is\nequivalent to @code{ALIGN(., @var{align})}).\n\nHere is an example which aligns the output @code{.data} section to the\nnext @code{0x2000} byte boundary after the preceding section and sets a\nvariable within the section to the next @code{0x8000} boundary after the\ninput sections:\n@smallexample\n@group\nSECTIONS @{ @dots{}\n  .data ALIGN(0x2000): @{\n    *(.data)\n    variable = ALIGN(0x8000);\n  @}\n@dots{} @}\n@end group\n@end smallexample\n@noindent\nThe first use of @code{ALIGN} in this example specifies the location of\na section because it is used as the optional @var{address} attribute of\na section definition (@pxref{Output Section Address}).  The second use\nof @code{ALIGN} is used to defines the value of a symbol.\n\nThe builtin function @code{NEXT} is closely related to @code{ALIGN}.\n\n@item ALIGNOF(@var{section})\n@kindex ALIGNOF(@var{section})\n@cindex section alignment\nReturn the alignment in bytes of the named @var{section}, if that section has\nbeen allocated.  If the section has not been allocated when this is\nevaluated, the linker will report an error. In the following example,\nthe alignment of the @code{.output} section is stored as the first\nvalue in that section.\n@smallexample\n@group\nSECTIONS@{ @dots{}\n  .output @{\n    LONG (ALIGNOF (.output))\n    @dots{}\n    @}\n@dots{} @}\n@end group\n@end smallexample\n\n@item BLOCK(@var{exp})\n@kindex BLOCK(@var{exp})\nThis is a synonym for @code{ALIGN}, for compatibility with older linker\nscripts.  It is most often seen when setting the address of an output\nsection.\n\n@item DATA_SEGMENT_ALIGN(@var{maxpagesize}, @var{commonpagesize})\n@kindex DATA_SEGMENT_ALIGN(@var{maxpagesize}, @var{commonpagesize})\nThis is equivalent to either\n@smallexample\n(ALIGN(@var{maxpagesize}) + (. & (@var{maxpagesize} - 1)))\n@end smallexample\nor\n@smallexample\n(ALIGN(@var{maxpagesize}) + (. & (@var{maxpagesize} - @var{commonpagesize})))\n@end smallexample\n@noindent\ndepending on whether the latter uses fewer @var{commonpagesize} sized pages\nfor the data segment (area between the result of this expression and\n@code{DATA_SEGMENT_END}) than the former or not.\nIf the latter form is used, it means @var{commonpagesize} bytes of runtime\nmemory will be saved at the expense of up to @var{commonpagesize} wasted\nbytes in the on-disk file.\n\nThis expression can only be used directly in @code{SECTIONS} commands, not in\nany output section descriptions and only once in the linker script.\n@var{commonpagesize} should be less or equal to @var{maxpagesize} and should\nbe the system page size the object wants to be optimized for (while still\nworking on system page sizes up to @var{maxpagesize}).\n\n@noindent\nExample:\n@smallexample\n  . = DATA_SEGMENT_ALIGN(0x10000, 0x2000);\n@end smallexample\n\n@item DATA_SEGMENT_END(@var{exp})\n@kindex DATA_SEGMENT_END(@var{exp})\nThis defines the end of data segment for @code{DATA_SEGMENT_ALIGN}\nevaluation purposes.\n\n@smallexample\n  . = DATA_SEGMENT_END(.);\n@end smallexample\n\n@item DATA_SEGMENT_RELRO_END(@var{offset}, @var{exp})\n@kindex DATA_SEGMENT_RELRO_END(@var{offset}, @var{exp})\nThis defines the end of the @code{PT_GNU_RELRO} segment when\n@samp{-z relro} option is used.  Second argument is returned.\nWhen @samp{-z relro} option is not present, @code{DATA_SEGMENT_RELRO_END}\ndoes nothing, otherwise @code{DATA_SEGMENT_ALIGN} is padded so that\n@var{exp} + @var{offset} is aligned to the most commonly used page\nboundary for particular target.  If present in the linker script,\nit must always come in between @code{DATA_SEGMENT_ALIGN} and\n@code{DATA_SEGMENT_END}.\n\n@smallexample\n  . = DATA_SEGMENT_RELRO_END(24, .);\n@end smallexample\n\n@item DEFINED(@var{symbol})\n@kindex DEFINED(@var{symbol})\n@cindex symbol defaults\nReturn 1 if @var{symbol} is in the linker global symbol table and is\ndefined before the statement using DEFINED in the script, otherwise\nreturn 0.  You can use this function to provide\ndefault values for symbols.  For example, the following script fragment\nshows how to set a global symbol @samp{begin} to the first location in\nthe @samp{.text} section---but if a symbol called @samp{begin} already\nexisted, its value is preserved:\n\n@smallexample\n@group\nSECTIONS @{ @dots{}\n  .text : @{\n    begin = DEFINED(begin) ? begin : . ;\n    @dots{}\n  @}\n  @dots{}\n@}\n@end group\n@end smallexample\n\n@item LENGTH(@var{memory})\n@kindex LENGTH(@var{memory})\nReturn the length of the memory region named @var{memory}.\n\n@item LOADADDR(@var{section})\n@kindex LOADADDR(@var{section})\n@cindex section load address in expression\nReturn the absolute LMA of the named @var{section}.  This is normally\nthe same as @code{ADDR}, but it may be different if the @code{AT}\nattribute is used in the output section definition (@pxref{Output\nSection LMA}).\n\n@kindex MAX\n@item MAX(@var{exp1}, @var{exp2})\nReturns the maximum of @var{exp1} and @var{exp2}.\n\n@kindex MIN\n@item MIN(@var{exp1}, @var{exp2})\nReturns the minimum of @var{exp1} and @var{exp2}.\n\n@item NEXT(@var{exp})\n@kindex NEXT(@var{exp})\n@cindex unallocated address, next\nReturn the next unallocated address that is a multiple of @var{exp}.\nThis function is closely related to @code{ALIGN(@var{exp})}; unless you\nuse the @code{MEMORY} command to define discontinuous memory for the\noutput file, the two functions are equivalent.\n\n@item ORIGIN(@var{memory})\n@kindex ORIGIN(@var{memory})\nReturn the origin of the memory region named @var{memory}.\n\n@item SEGMENT_START(@var{segment}, @var{default})\n@kindex SEGMENT_START(@var{segment}, @var{default})\nReturn the base address of the named @var{segment}.  If an explicit\nvalue has been given for this segment (with a command-line @samp{-T}\noption) that value will be returned; otherwise the value will be\n@var{default}.  At present, the @samp{-T} command-line option can only\nbe used to set the base address for the ``text'', ``data'', and\n``bss'' sections, but you use @code{SEGMENT_START} with any segment\nname.\n\n@item SIZEOF(@var{section})\n@kindex SIZEOF(@var{section})\n@cindex section size\nReturn the size in bytes of the named @var{section}, if that section has\nbeen allocated.  If the section has not been allocated when this is\nevaluated, the linker will report an error.  In the following example,\n@code{symbol_1} and @code{symbol_2} are assigned identical values:\n@smallexample\n@group\nSECTIONS@{ @dots{}\n  .output @{\n    .start = . ;\n    @dots{}\n    .end = . ;\n    @}\n  symbol_1 = .end - .start ;\n  symbol_2 = SIZEOF(.output);\n@dots{} @}\n@end group\n@end smallexample\n\n@item SIZEOF_HEADERS\n@itemx sizeof_headers\n@kindex SIZEOF_HEADERS\n@cindex header size\nReturn the size in bytes of the output file's headers.  This is\ninformation which appears at the start of the output file.  You can use\nthis number when setting the start address of the first section, if you\nchoose, to facilitate paging.\n\n@cindex not enough room for program headers\n@cindex program headers, not enough room\nWhen producing an ELF output file, if the linker script uses the\n@code{SIZEOF_HEADERS} builtin function, the linker must compute the\nnumber of program headers before it has determined all the section\naddresses and sizes.  If the linker later discovers that it needs\nadditional program headers, it will report an error @samp{not enough\nroom for program headers}.  To avoid this error, you must avoid using\nthe @code{SIZEOF_HEADERS} function, or you must rework your linker\nscript to avoid forcing the linker to use additional program headers, or\nyou must define the program headers yourself using the @code{PHDRS}\ncommand (@pxref{PHDRS}).\n@end table\n\n@node Implicit Linker Scripts\n@section Implicit Linker Scripts\n@cindex implicit linker scripts\nIf you specify a linker input file which the linker can not recognize as\nan object file or an archive file, it will try to read the file as a\nlinker script.  If the file can not be parsed as a linker script, the\nlinker will report an error.\n\nAn implicit linker script will not replace the default linker script.\n\nTypically an implicit linker script would contain only symbol\nassignments, or the @code{INPUT}, @code{GROUP}, or @code{VERSION}\ncommands.\n\nAny input files read because of an implicit linker script will be read\nat the position in the command line where the implicit linker script was\nread.  This can affect archive searching.\n\n@ifset GENERIC\n@node Machine Dependent\n@chapter Machine Dependent Features\n\n@cindex machine dependencies\n@command{ld} has additional features on some platforms; the following\nsections describe them.  Machines where @command{ld} has no additional\nfunctionality are not listed.\n\n@menu\n@ifset H8300\n* H8/300::                      @command{ld} and the H8/300\n@end ifset\n@ifset I960\n* i960::                        @command{ld} and the Intel 960 family\n@end ifset\n@ifset ARM\n* ARM::\t\t\t\t@command{ld} and the ARM family\n@end ifset\n@ifset HPPA\n* HPPA ELF32::                  @command{ld} and HPPA 32-bit ELF\n@end ifset\n@ifset M68K\n* M68K::\t\t\t@command{ld} and the Motorola 68K family\n@end ifset\n@ifset MMIX\n* MMIX::\t\t\t@command{ld} and MMIX\n@end ifset\n@ifset MSP430\n* MSP430::\t\t\t@command{ld} and MSP430\n@end ifset\n@ifset M68HC11\n* M68HC11/68HC12::\t\t@code{ld} and the Motorola 68HC11 and 68HC12 families\n@end ifset\n@ifset POWERPC\n* PowerPC ELF32::\t\t@command{ld} and PowerPC 32-bit ELF Support\n@end ifset\n@ifset POWERPC64\n* PowerPC64 ELF64::\t\t@command{ld} and PowerPC64 64-bit ELF Support\n@end ifset\n@ifset SPU\n* SPU ELF::\t\t\t@command{ld} and SPU ELF Support\n@end ifset\n@ifset TICOFF\n* TI COFF::                     @command{ld} and TI COFF\n@end ifset\n@ifset WIN32\n* WIN32::                       @command{ld} and WIN32 (cygwin/mingw)\n@end ifset\n@ifset XTENSA\n* Xtensa::                      @command{ld} and Xtensa Processors\n@end ifset\n@end menu\n@end ifset\n\n@ifset H8300\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node H8/300\n@section @command{ld} and the H8/300\n\n@cindex H8/300 support\nFor the H8/300, @command{ld} can perform these global optimizations when\nyou specify the @samp{--relax} command-line option.\n\n@table @emph\n@cindex relaxing on H8/300\n@item relaxing address modes\n@command{ld} finds all @code{jsr} and @code{jmp} instructions whose\ntargets are within eight bits, and turns them into eight-bit\nprogram-counter relative @code{bsr} and @code{bra} instructions,\nrespectively.\n\n@cindex synthesizing on H8/300\n@item synthesizing instructions\n@c FIXME: specifically mov.b, or any mov instructions really?\n@command{ld} finds all @code{mov.b} instructions which use the\nsixteen-bit absolute address form, but refer to the top\npage of memory, and changes them to use the eight-bit address form.\n(That is: the linker turns @samp{mov.b @code{@@}@var{aa}:16} into\n@samp{mov.b @code{@@}@var{aa}:8} whenever the address @var{aa} is in the\ntop page of memory).\n\n@item bit manipulation instructions\n@command{ld} finds all bit manipulation instructions like @code{band, bclr,\nbiand, bild, bior, bist, bixor, bld, bnot, bor, bset, bst, btst, bxor}\nwhich use 32 bit and 16 bit absolute address form, but refer to the top\npage of memory, and changes them to use the 8 bit address form.\n(That is: the linker turns @samp{bset #xx:3,@code{@@}@var{aa}:32} into\n@samp{bset #xx:3,@code{@@}@var{aa}:8} whenever the address @var{aa} is in\nthe top page of memory).\n\n@item system control instructions\n@command{ld} finds all @code{ldc.w, stc.w} instructions which use the\n32 bit absolute address form, but refer to the top page of memory, and\nchanges them to use 16 bit address form.\n(That is: the linker turns @samp{ldc.w @code{@@}@var{aa}:32,ccr} into\n@samp{ldc.w @code{@@}@var{aa}:16,ccr} whenever the address @var{aa} is in\nthe top page of memory).\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifclear GENERIC\n@ifset Renesas\n@c This stuff is pointless to say unless you're especially concerned\n@c with Renesas chips; don't enable it for generic case, please.\n@node Renesas\n@chapter @command{ld} and Other Renesas Chips\n\n@command{ld} also supports the Renesas (formerly Hitachi) H8/300H,\nH8/500, and SH chips.  No special features, commands, or command-line\noptions are required for these chips.\n@end ifset\n@end ifclear\n\n@ifset I960\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node i960\n@section @command{ld} and the Intel 960 Family\n\n@cindex i960 support\n\nYou can use the @samp{-A@var{architecture}} command line option to\nspecify one of the two-letter names identifying members of the 960\nfamily; the option specifies the desired output target, and warns of any\nincompatible instructions in the input files.  It also modifies the\nlinker's search strategy for archive libraries, to support the use of\nlibraries specific to each particular architecture, by including in the\nsearch loop names suffixed with the string identifying the architecture.\n\nFor example, if your @command{ld} command line included @w{@samp{-ACA}} as\nwell as @w{@samp{-ltry}}, the linker would look (in its built-in search\npaths, and in any paths you specify with @samp{-L}) for a library with\nthe names\n\n@smallexample\n@group\ntry\nlibtry.a\ntryca\nlibtryca.a\n@end group\n@end smallexample\n\n@noindent\nThe first two possibilities would be considered in any event; the last\ntwo are due to the use of @w{@samp{-ACA}}.\n\nYou can meaningfully use @samp{-A} more than once on a command line, since\nthe 960 architecture family allows combination of target architectures; each\nuse will add another pair of name variants to search for when @w{@samp{-l}}\nspecifies a library.\n\n@cindex @option{--relax} on i960\n@cindex relaxing on i960\n@command{ld} supports the @samp{--relax} option for the i960 family.  If\nyou specify @samp{--relax}, @command{ld} finds all @code{balx} and\n@code{calx} instructions whose targets are within 24 bits, and turns\nthem into 24-bit program-counter relative @code{bal} and @code{cal}\ninstructions, respectively.  @command{ld} also turns @code{cal}\ninstructions into @code{bal} instructions when it determines that the\ntarget subroutine is a leaf routine (that is, the target subroutine does\nnot itself call any subroutines).\n\n@cindex Cortex-A8 erratum workaround\n@kindex --fix-cortex-a8\n@kindex --no-fix-cortex-a8\nThe @samp{--fix-cortex-a8} switch enables a link-time workaround for an erratum in certain Cortex-A8 processors.  The workaround is enabled by default if you are targeting the ARM v7-A architecture profile.  It can be enabled otherwise by specifying @samp{--fix-cortex-a8}, or disabled unconditionally by specifying @samp{--no-fix-cortex-a8}.\n\nThe erratum only affects Thumb-2 code.  Please contact ARM for further details.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset ARM\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@ifset M68HC11\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node M68HC11/68HC12\n@section @command{ld} and the Motorola 68HC11 and 68HC12 families\n\n@cindex M68HC11 and 68HC12 support\n\n@subsection Linker Relaxation\n\nFor the Motorola 68HC11, @command{ld} can perform these global\noptimizations when you specify the @samp{--relax} command-line option.\n\n@table @emph\n@cindex relaxing on M68HC11\n@item relaxing address modes\n@command{ld} finds all @code{jsr} and @code{jmp} instructions whose\ntargets are within eight bits, and turns them into eight-bit\nprogram-counter relative @code{bsr} and @code{bra} instructions,\nrespectively.\n\n@command{ld} also looks at all 16-bit extended addressing modes and\ntransforms them in a direct addressing mode when the address is in\npage 0 (between 0 and 0x0ff).\n\n@item relaxing gcc instruction group\nWhen @command{gcc} is called with @option{-mrelax}, it can emit group\nof instructions that the linker can optimize to use a 68HC11 direct\naddressing mode. These instructions consists of @code{bclr} or\n@code{bset} instructions.\n\n@end table\n\n@subsection Trampoline Generation\n\n@cindex trampoline generation on M68HC11\n@cindex trampoline generation on M68HC12\nFor 68HC11 and 68HC12, @command{ld} can generate trampoline code to\ncall a far function using a normal @code{jsr} instruction. The linker\nwill also change the relocation to some far function to use the\ntrampoline address instead of the function address. This is typically the\ncase when a pointer to a function is taken. The pointer will in fact\npoint to the function trampoline.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@node ARM\n@section @command{ld} and the ARM family\n\n@cindex ARM interworking support\n@kindex --support-old-code\nFor the ARM, @command{ld} will generate code stubs to allow functions calls\nbetween ARM and Thumb code.  These stubs only work with code that has\nbeen compiled and assembled with the @samp{-mthumb-interwork} command\nline option.  If it is necessary to link with old ARM object files or\nlibraries, which have not been compiled with the -mthumb-interwork\noption then the @samp{--support-old-code} command line switch should be\ngiven to the linker.  This will make it generate larger stub functions\nwhich will work with non-interworking aware ARM code.  Note, however,\nthe linker does not support generating stubs for function calls to\nnon-interworking aware Thumb code.\n\n@cindex thumb entry point\n@cindex entry point, thumb\n@kindex --thumb-entry=@var{entry}\nThe @samp{--thumb-entry} switch is a duplicate of the generic\n@samp{--entry} switch, in that it sets the program's starting address.\nBut it also sets the bottom bit of the address, so that it can be\nbranched to using a BX instruction, and the program will start\nexecuting in Thumb mode straight away.\n\n@cindex PE import table prefixing\n@kindex --use-nul-prefixed-import-tables\nThe @samp{--use-nul-prefixed-import-tables} switch is specifying, that\nthe import tables idata4 and idata5 have to be generated with a zero\nelememt prefix for import libraries. This is the old style to generate\nimport tables. By default this option is turned off.\n\n@cindex BE8\n@kindex --be8\nThe @samp{--be8} switch instructs @command{ld} to generate BE8 format\nexecutables.  This option is only valid when linking big-endian objects.\nThe resulting image will contain big-endian data and little-endian code.\n\n@cindex TARGET1\n@kindex --target1-rel\n@kindex --target1-abs\nThe @samp{R_ARM_TARGET1} relocation is typically used for entries in the\n@samp{.init_array} section.  It is interpreted as either @samp{R_ARM_REL32}\nor @samp{R_ARM_ABS32}, depending on the target.  The @samp{--target1-rel}\nand @samp{--target1-abs} switches override the default.\n\n@cindex TARGET2\n@kindex --target2=@var{type}\nThe @samp{--target2=type} switch overrides the default definition of the\n@samp{R_ARM_TARGET2} relocation.  Valid values for @samp{type}, their\nmeanings, and target defaults are as follows:\n@table @samp\n@item rel\n@samp{R_ARM_REL32} (arm*-*-elf, arm*-*-eabi)\n@item abs\n@samp{R_ARM_ABS32} (arm*-*-symbianelf)\n@item got-rel\n@samp{R_ARM_GOT_PREL} (arm*-*-linux, arm*-*-*bsd)\n@end table\n\n@cindex FIX_V4BX\n@kindex --fix-v4bx\nThe @samp{R_ARM_V4BX} relocation (defined by the ARM AAELF\nspecification) enables objects compiled for the ARMv4 architecture to be\ninterworking-safe when linked with other objects compiled for ARMv4t, but\nalso allows pure ARMv4 binaries to be built from the same ARMv4 objects.\n\nIn the latter case, the switch @option{--fix-v4bx} must be passed to the\nlinker, which causes v4t @code{BX rM} instructions to be rewritten as\n@code{MOV PC,rM}, since v4 processors do not have a @code{BX} instruction.\n\nIn the former case, the switch should not be used, and @samp{R_ARM_V4BX}\nrelocations are ignored.\n\n@cindex FIX_V4BX_INTERWORKING\n@kindex --fix-v4bx-interworking\nReplace @code{BX rM} instructions identified by @samp{R_ARM_V4BX}\nrelocations with a branch to the following veneer:\n\n@smallexample\nTST rM, #1\nMOVEQ PC, rM\nBX Rn\n@end smallexample\n\nThis allows generation of libraries/applications that work on ARMv4 cores\nand are still interworking safe.  Note that the above veneer clobbers the\ncondition flags, so may cause incorrect progrm behavior in rare cases.\n\n@cindex USE_BLX\n@kindex --use-blx\nThe @samp{--use-blx} switch enables the linker to use ARM/Thumb\nBLX instructions (available on ARMv5t and above) in various\nsituations. Currently it is used to perform calls via the PLT from Thumb\ncode using BLX rather than using BX and a mode-switching stub before\neach PLT entry. This should lead to such calls executing slightly faster.\n\nThis option is enabled implicitly for SymbianOS, so there is no need to\nspecify it if you are using that target.\n\n@cindex VFP11_DENORM_FIX\n@kindex --vfp11-denorm-fix\nThe @samp{--vfp11-denorm-fix} switch enables a link-time workaround for a\nbug in certain VFP11 coprocessor hardware, which sometimes allows\ninstructions with denorm operands (which must be handled by support code)\nto have those operands overwritten by subsequent instructions before\nthe support code can read the intended values.\n\nThe bug may be avoided in scalar mode if you allow at least one\nintervening instruction between a VFP11 instruction which uses a register\nand another instruction which writes to the same register, or at least two\nintervening instructions if vector mode is in use. The bug only affects\nfull-compliance floating-point mode: you do not need this workaround if\nyou are using \"runfast\" mode. Please contact ARM for further details.\n\nIf you know you are using buggy VFP11 hardware, you can\nenable this workaround by specifying the linker option\n@samp{--vfp-denorm-fix=scalar} if you are using the VFP11 scalar\nmode only, or @samp{--vfp-denorm-fix=vector} if you are using\nvector mode (the latter also works for scalar code). The default is\n@samp{--vfp-denorm-fix=none}.\n\nIf the workaround is enabled, instructions are scanned for\npotentially-troublesome sequences, and a veneer is created for each\nsuch sequence which may trigger the erratum. The veneer consists of the\nfirst instruction of the sequence and a branch back to the subsequent\ninstruction. The original instruction is then replaced with a branch to\nthe veneer. The extra cycles required to call and return from the veneer\nare sufficient to avoid the erratum in both the scalar and vector cases.\n\n@cindex NO_ENUM_SIZE_WARNING\n@kindex --no-enum-size-warning\nThe @option{--no-enum-size-warning} switch prevents the linker from\nwarning when linking object files that specify incompatible EABI\nenumeration size attributes.  For example, with this switch enabled,\nlinking of an object file using 32-bit enumeration values with another\nusing enumeration values fitted into the smallest possible space will\nnot be diagnosed.\n\n@cindex NO_WCHAR_SIZE_WARNING\n@kindex --no-wchar-size-warning\nThe @option{--no-wchar-size-warning} switch prevents the linker from\nwarning when linking object files that specify incompatible EABI\n@code{wchar_t} size attributes.  For example, with this switch enabled,\nlinking of an object file using 32-bit @code{wchar_t} values with another\nusing 16-bit @code{wchar_t} values will not be diagnosed.\n\n@cindex PIC_VENEER\n@kindex --pic-veneer\nThe @samp{--pic-veneer} switch makes the linker use PIC sequences for\nARM/Thumb interworking veneers, even if the rest of the binary\nis not PIC.  This avoids problems on uClinux targets where\n@samp{--emit-relocs} is used to generate relocatable binaries.\n\n@cindex STUB_GROUP_SIZE\n@kindex --stub-group-size=@var{N}\nThe linker will automatically generate and insert small sequences of\ncode into a linked ARM ELF executable whenever an attempt is made to\nperform a function call to a symbol that is too far away.  The\nplacement of these sequences of instructions - called stubs - is\ncontrolled by the command line option @option{--stub-group-size=N}.\nThe placement is important because a poor choice can create a need for\nduplicate stubs, increasing the code sizw.  The linker will try to\ngroup stubs together in order to reduce interruptions to the flow of\ncode, but it needs guidance as to how big these groups should be and\nwhere they should be placed.\n\nThe value of @samp{N}, the parameter to the\n@option{--stub-group-size=} option controls where the stub groups are\nplaced.  If it is negative then all stubs are placed after the first\nbranch that needs them.  If it is positive then the stubs can be\nplaced either before or after the branches that need them.  If the\nvalue of @samp{N} is 1 (either +1 or -1) then the linker will choose\nexactly where to place groups of stubs, using its built in heuristics.\nA value of @samp{N} greater than 1 (or smaller than -1) tells the\nlinker that a single group of stubs can service at most @samp{N} bytes\nfrom the input sections.\n\nThe default, if @option{--stub-group-size=} is not specified, is\n@samp{N = +1}.\n\nFarcalls stubs insertion is fully supported for the ARM-EABI target\nonly, because it relies on object files properties not present\notherwise.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset HPPA\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node HPPA ELF32\n@section @command{ld} and HPPA 32-bit ELF Support\n@cindex HPPA multiple sub-space stubs\n@kindex --multi-subspace\nWhen generating a shared library, @command{ld} will by default generate\nimport stubs suitable for use with a single sub-space application.\nThe @samp{--multi-subspace} switch causes @command{ld} to generate export\nstubs, and different (larger) import stubs suitable for use with\nmultiple sub-spaces.\n\n@cindex HPPA stub grouping\n@kindex --stub-group-size=@var{N}\nLong branch stubs and import/export stubs are placed by @command{ld} in\nstub sections located between groups of input sections.\n@samp{--stub-group-size} specifies the maximum size of a group of input\nsections handled by one stub section.  Since branch offsets are signed,\na stub section may serve two groups of input sections, one group before\nthe stub section, and one group after it.  However, when using\nconditional branches that require stubs, it may be better (for branch\nprediction) that stub sections only serve one group of input sections.\nA negative value for @samp{N} chooses this scheme, ensuring that\nbranches to stubs always use a negative offset.  Two special values of\n@samp{N} are recognized, @samp{1} and @samp{-1}.  These both instruct\n@command{ld} to automatically size input section groups for the branch types\ndetected, with the same behaviour regarding stub placement as other\npositive or negative values of @samp{N} respectively.\n\nNote that @samp{--stub-group-size} does not split input sections.  A\nsingle input section larger than the group size specified will of course\ncreate a larger group (of one section).  If input sections are too\nlarge, it may not be possible for a branch to reach its stub.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset M68K\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node M68K\n@section @command{ld} and the Motorola 68K family\n\n@cindex Motorola 68K GOT generation\n@kindex --got=@var{type}\nThe @samp{--got=@var{type}} option lets you choose the GOT generation scheme.\nThe choices are @samp{single}, @samp{negative}, @samp{multigot} and\n@samp{target}.  When @samp{target} is selected the linker chooses\nthe default GOT generation scheme for the current target.\n@samp{single} tells the linker to generate a single GOT with\nentries only at non-negative offsets.\n@samp{negative} instructs the linker to generate a single GOT with\nentries at both negative and positive offsets.  Not all environments\nsupport such GOTs.\n@samp{multigot} allows the linker to generate several GOTs in the\noutput file.  All GOT references from a single input object\nfile access the same GOT, but references from different input object\nfiles might access different GOTs.  Not all environments support such GOTs.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset MMIX\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node MMIX\n@section @code{ld} and MMIX\nFor MMIX, there is a choice of generating @code{ELF} object files or\n@code{mmo} object files when linking.  The simulator @code{mmix}\nunderstands the @code{mmo} format.  The binutils @code{objcopy} utility\ncan translate between the two formats.\n\nThere is one special section, the @samp{.MMIX.reg_contents} section.\nContents in this section is assumed to correspond to that of global\nregisters, and symbols referring to it are translated to special symbols,\nequal to registers.  In a final link, the start address of the\n@samp{.MMIX.reg_contents} section corresponds to the first allocated\nglobal register multiplied by 8.  Register @code{$255} is not included in\nthis section; it is always set to the program entry, which is at the\nsymbol @code{Main} for @code{mmo} files.\n\nGlobal symbols with the prefix @code{__.MMIX.start.}, for example\n@code{__.MMIX.start..text} and @code{__.MMIX.start..data} are special.\nThe default linker script uses these to set the default start address\nof a section.\n\nInitial and trailing multiples of zero-valued 32-bit words in a section,\nare left out from an mmo file.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset MSP430\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node  MSP430\n@section @code{ld} and MSP430\nFor the MSP430 it is possible to select the MPU architecture.  The flag @samp{-m [mpu type]}\nwill select an appropriate linker script for selected MPU type.  (To get a list of known MPUs\njust pass @samp{-m help} option to the linker).\n\n@cindex MSP430 extra sections\nThe linker will recognize some extra sections which are MSP430 specific:\n\n@table @code\n@item @samp{.vectors}\nDefines a portion of ROM where interrupt vectors located.\n\n@item @samp{.bootloader}\nDefines the bootloader portion of the ROM (if applicable).  Any code\nin this section will be uploaded to the MPU.\n\n@item @samp{.infomem}\nDefines an information memory section (if applicable).  Any code in\nthis section will be uploaded to the MPU.\n\n@item @samp{.infomemnobits}\nThis is the same as the @samp{.infomem} section except that any code\nin this section will not be uploaded to the MPU.\n\n@item @samp{.noinit}\nDenotes a portion of RAM located above @samp{.bss} section.\n\nThe last two sections are used by gcc.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset POWERPC\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node PowerPC ELF32\n@section @command{ld} and PowerPC 32-bit ELF Support\n@cindex PowerPC long branches\n@kindex --relax on PowerPC\nBranches on PowerPC processors are limited to a signed 26-bit\ndisplacement, which may result in @command{ld} giving\n@samp{relocation truncated to fit} errors with very large programs.\n@samp{--relax} enables the generation of trampolines that can access\nthe entire 32-bit address space.  These trampolines are inserted at\nsection boundaries, so may not themselves be reachable if an input\nsection exceeds 33M in size.  You may combine @samp{-r} and\n@samp{--relax} to add trampolines in a partial link.  In that case\nboth branches to undefined symbols and inter-section branches are also\nconsidered potentially out of range, and trampolines inserted.\n\n@cindex PowerPC ELF32 options\n@table @option\n@cindex PowerPC PLT\n@kindex --bss-plt\n@item --bss-plt\nCurrent PowerPC GCC accepts a @samp{-msecure-plt} option that\ngenerates code capable of using a newer PLT and GOT layout that has\nthe security advantage of no executable section ever needing to be\nwritable and no writable section ever being executable.  PowerPC\n@command{ld} will generate this layout, including stubs to access the\nPLT, if all input files (including startup and static libraries) were\ncompiled with @samp{-msecure-plt}.  @samp{--bss-plt} forces the old\nBSS PLT (and GOT layout) which can give slightly better performance.\n\n@kindex --secure-plt\n@item --secure-plt\n@command{ld} will use the new PLT and GOT layout if it is linking new\n@samp{-fpic} or @samp{-fPIC} code, but does not do so automatically\nwhen linking non-PIC code.  This option requests the new PLT and GOT\nlayout.  A warning will be given if some object file requires the old\nstyle BSS PLT.\n\n@cindex PowerPC GOT\n@kindex --sdata-got\n@item --sdata-got\nThe new secure PLT and GOT are placed differently relative to other\nsections compared to older BSS PLT and GOT placement.  The location of\n@code{.plt} must change because the new secure PLT is an initialized\nsection while the old PLT is uninitialized.  The reason for the\n@code{.got} change is more subtle:  The new placement allows\n@code{.got} to be read-only in applications linked with\n@samp{-z relro -z now}.  However, this placement means that\n@code{.sdata} cannot always be used in shared libraries, because the\nPowerPC ABI accesses @code{.sdata} in shared libraries from the GOT\npointer.  @samp{--sdata-got} forces the old GOT placement.  PowerPC\nGCC doesn't use @code{.sdata} in shared libraries, so this option is\nreally only useful for other compilers that may do so.\n\n@cindex PowerPC stub symbols\n@kindex --emit-stub-syms\n@item --emit-stub-syms\nThis option causes @command{ld} to label linker stubs with a local\nsymbol that encodes the stub type and destination.\n\n@cindex PowerPC TLS optimization\n@kindex --no-tls-optimize\n@item --no-tls-optimize\nPowerPC @command{ld} normally performs some optimization of code\nsequences used to access Thread-Local Storage.  Use this option to\ndisable the optimization.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset POWERPC64\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node PowerPC64 ELF64\n@section @command{ld} and PowerPC64 64-bit ELF Support\n\n@cindex PowerPC64 ELF64 options\n@table @option\n@cindex PowerPC64 stub grouping\n@kindex --stub-group-size\n@item --stub-group-size\nLong branch stubs, PLT call stubs  and TOC adjusting stubs are placed\nby @command{ld} in stub sections located between groups of input sections.\n@samp{--stub-group-size} specifies the maximum size of a group of input\nsections handled by one stub section.  Since branch offsets are signed,\na stub section may serve two groups of input sections, one group before\nthe stub section, and one group after it.  However, when using\nconditional branches that require stubs, it may be better (for branch\nprediction) that stub sections only serve one group of input sections.\nA negative value for @samp{N} chooses this scheme, ensuring that\nbranches to stubs always use a negative offset.  Two special values of\n@samp{N} are recognized, @samp{1} and @samp{-1}.  These both instruct\n@command{ld} to automatically size input section groups for the branch types\ndetected, with the same behaviour regarding stub placement as other\npositive or negative values of @samp{N} respectively.\n\nNote that @samp{--stub-group-size} does not split input sections.  A\nsingle input section larger than the group size specified will of course\ncreate a larger group (of one section).  If input sections are too\nlarge, it may not be possible for a branch to reach its stub.\n\n@cindex PowerPC64 stub symbols\n@kindex --emit-stub-syms\n@item --emit-stub-syms\nThis option causes @command{ld} to label linker stubs with a local\nsymbol that encodes the stub type and destination.\n\n@cindex PowerPC64 dot symbols\n@kindex --dotsyms\n@kindex --no-dotsyms\n@item --dotsyms, --no-dotsyms\nThese two options control how @command{ld} interprets version patterns\nin a version script.  Older PowerPC64 compilers emitted both a\nfunction descriptor symbol with the same name as the function, and a\ncode entry symbol with the name prefixed by a dot (@samp{.}).  To\nproperly version a function @samp{foo}, the version script thus needs\nto control both @samp{foo} and @samp{.foo}.  The option\n@samp{--dotsyms}, on by default, automatically adds the required\ndot-prefixed patterns.  Use @samp{--no-dotsyms} to disable this\nfeature.\n\n@cindex PowerPC64 TLS optimization\n@kindex --no-tls-optimize\n@item --no-tls-optimize\nPowerPC64 @command{ld} normally performs some optimization of code\nsequences used to access Thread-Local Storage.  Use this option to\ndisable the optimization.\n\n@cindex PowerPC64 OPD optimization\n@kindex --no-opd-optimize\n@item --no-opd-optimize\nPowerPC64 @command{ld} normally removes @code{.opd} section entries\ncorresponding to deleted link-once functions, or functions removed by\nthe action of @samp{--gc-sections} or linker script @code{/DISCARD/}.\nUse this option to disable @code{.opd} optimization.\n\n@cindex PowerPC64 OPD spacing\n@kindex --non-overlapping-opd\n@item --non-overlapping-opd\nSome PowerPC64 compilers have an option to generate compressed\n@code{.opd} entries spaced 16 bytes apart, overlapping the third word,\nthe static chain pointer (unused in C) with the first word of the next\nentry.  This option expands such entries to the full 24 bytes.\n\n@cindex PowerPC64 TOC optimization\n@kindex --no-toc-optimize\n@item --no-toc-optimize\nPowerPC64 @command{ld} normally removes unused @code{.toc} section\nentries.  Such entries are detected by examining relocations that\nreference the TOC in code sections.  A reloc in a deleted code section\nmarks a TOC word as unneeded, while a reloc in a kept code section\nmarks a TOC word as needed.  Since the TOC may reference itself, TOC\nrelocs are also examined.  TOC words marked as both needed and\nunneeded will of course be kept.  TOC words without any referencing\nreloc are assumed to be part of a multi-word entry, and are kept or\ndiscarded as per the nearest marked preceding word.  This works\nreliably for compiler generated code, but may be incorrect if assembly\ncode is used to insert TOC entries.  Use this option to disable the\noptimization.\n\n@cindex PowerPC64 multi-TOC\n@kindex --no-multi-toc\n@item --no-multi-toc\nBy default, PowerPC64 GCC generates code for a TOC model where TOC\nentries are accessed with a 16-bit offset from r2.  This limits the\ntotal TOC size to 64K.  PowerPC64 @command{ld} extends this limit by\ngrouping code sections such that each group uses less than 64K for its\nTOC entries, then inserts r2 adjusting stubs between inter-group\ncalls.  @command{ld} does not split apart input sections, so cannot\nhelp if a single input file has a @code{.toc} section that exceeds\n64K, most likely from linking multiple files with @command{ld -r}.\nUse this option to turn off this feature.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset SPU\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node SPU ELF\n@section @command{ld} and SPU ELF Support\n\n@cindex SPU ELF options\n@table @option\n\n@cindex SPU plugins\n@kindex --plugin\n@item --plugin\nThis option marks an executable as a PIC plugin module.\n\n@cindex SPU overlays\n@kindex --no-overlays\n@item --no-overlays\nNormally, @command{ld} recognizes calls to functions within overlay\nregions, and redirects such calls to an overlay manager via a stub.\n@command{ld} also provides a built-in overlay manager.  This option\nturns off all this special overlay handling.\n\n@cindex SPU overlay stub symbols\n@kindex --emit-stub-syms\n@item --emit-stub-syms\nThis option causes @command{ld} to label overlay stubs with a local\nsymbol that encodes the stub type and destination.\n\n@cindex SPU extra overlay stubs\n@kindex --extra-overlay-stubs\n@item --extra-overlay-stubs\nThis option causes @command{ld} to add overlay call stubs on all\nfunction calls out of overlay regions.  Normally stubs are not added\non calls to non-overlay regions.\n\n@cindex SPU local store size\n@kindex --local-store=lo:hi\n@item --local-store=lo:hi\n@command{ld} usually checks that a final executable for SPU fits in\nthe address range 0 to 256k.  This option may be used to change the\nrange.  Disable the check entirely with @option{--local-store=0:0}.\n\n@cindex SPU\n@kindex --stack-analysis\n@item --stack-analysis\nSPU local store space is limited.  Over-allocation of stack space\nunnecessarily limits space available for code and data, while\nunder-allocation results in runtime failures.  If given this option,\n@command{ld} will provide an estimate of maximum stack usage.\n@command{ld} does this by examining symbols in code sections to\ndetermine the extents of functions, and looking at function prologues\nfor stack adjusting instructions.  A call-graph is created by looking\nfor relocations on branch instructions.  The graph is then searched\nfor the maximum stack usage path.  Note that this analysis does not\nfind calls made via function pointers, and does not handle recursion\nand other cycles in the call graph.  Stack usage may be\nunder-estimated if your code makes such calls.  Also, stack usage for\ndynamic allocation, e.g. alloca, will not be detected.  If a link map\nis requested, detailed information about each function's stack usage\nand calls will be given.\n\n@cindex SPU\n@kindex --emit-stack-syms\n@item --emit-stack-syms\nThis option, if given along with @option{--stack-analysis} will result\nin @command{ld} emitting stack sizing symbols for each function.\nThese take the form @code{__stack_<function_name>} for global\nfunctions, and @code{__stack_<number>_<function_name>} for static\nfunctions.  @code{<number>} is the section id in hex.  The value of\nsuch symbols is the stack requirement for the corresponding function.\nThe symbol size will be zero, type @code{STT_NOTYPE}, binding\n@code{STB_LOCAL}, and section @code{SHN_ABS}.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset TICOFF\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node TI COFF\n@section @command{ld}'s Support for Various TI COFF Versions\n@cindex TI COFF versions\n@kindex --format=@var{version}\nThe @samp{--format} switch allows selection of one of the various\nTI COFF versions.  The latest of this writing is 2; versions 0 and 1 are\nalso supported.  The TI COFF versions also vary in header byte-order\nformat; @command{ld} will read any version or byte order, but the output\nheader format depends on the default specified by the specific target.\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset WIN32\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node WIN32\n@section @command{ld} and WIN32 (cygwin/mingw)\n\nThis section describes some of the win32 specific @command{ld} issues.\nSee @ref{Options,,Command Line Options} for detailed description of the\ncommand line options mentioned here.\n\n@table @emph\n@cindex import libraries\n@item import libraries\nThe standard Windows linker creates and uses so-called import\nlibraries, which contains information for linking to dll's.  They are\nregular static archives and are handled as any other static\narchive.  The cygwin and mingw ports of @command{ld} have specific\nsupport for creating such libraries provided with the\n@samp{--out-implib} command line option.\n\n@item   exporting DLL symbols\n@cindex exporting DLL symbols\nThe cygwin/mingw @command{ld} has several ways to export symbols for dll's.\n\n@table @emph\n@item   using auto-export functionality\n@cindex using auto-export functionality\nBy default @command{ld} exports symbols with the auto-export functionality,\nwhich is controlled by the following command line options:\n\n@itemize\n@item --export-all-symbols   [This is the default]\n@item --exclude-symbols\n@item --exclude-libs\n@item --exclude-modules-for-implib\n@item --version-script\n@end itemize\n\nWhen auto-export is in operation, @command{ld} will export all the non-local\n(global and common) symbols it finds in a DLL, with the exception of a few\nsymbols known to belong to the system's runtime and libraries.  As it will\noften not be desirable to export all of a DLL's symbols, which may include\nprivate functions that are not part of any public interface, the command-line\noptions listed above may be used to filter symbols out from the list for \nexporting.  The @samp{--output-def} option can be used in order to see the\nfinal list of exported symbols with all exclusions taken into effect.\n\nIf @samp{--export-all-symbols} is not given explicitly on the\ncommand line, then the default auto-export behavior will be @emph{disabled}\nif either of the following are true:\n\n@itemize\n@item A DEF file is used.\n@item Any symbol in any object file was marked with the __declspec(dllexport) attribute.\n@end itemize\n\n@item   using a DEF file\n@cindex using a DEF file\nAnother way of exporting symbols is using a DEF file.  A DEF file is\nan ASCII file containing definitions of symbols which should be\nexported when a dll is created.  Usually it is named @samp{<dll\nname>.def} and is added as any other object file to the linker's\ncommand line.  The file's name must end in @samp{.def} or @samp{.DEF}.\n\n@example\ngcc -o <output> <objectfiles> <dll name>.def\n@end example\n\nUsing a DEF file turns off the normal auto-export behavior, unless the\n@samp{--export-all-symbols} option is also used.\n\nHere is an example of a DEF file for a shared library called @samp{xyz.dll}:\n\n@example\nLIBRARY \"xyz.dll\" BASE=0x20000000\n\nEXPORTS\nfoo\nbar\n_bar = bar\nanother_foo = abc.dll.afoo\nvar1 DATA\n@end example\n\nThis example defines a DLL with a non-default base address and five\nsymbols in the export table. The third exported symbol @code{_bar} is an\nalias for the second. The fourth symbol, @code{another_foo} is resolved\nby \"forwarding\" to another module and treating it as an alias for\n@code{afoo} exported from the DLL @samp{abc.dll}. The final symbol\n@code{var1} is declared to be a data object.\n\nThe optional @code{LIBRARY <name>} command indicates the @emph{internal}\nname of the output DLL. If @samp{<name>} does not include a suffix,\nthe default library suffix, @samp{.DLL} is appended.\n\nWhen the .DEF file is used to build an application, rather than a\nlibrary, the @code{NAME <name>} command should be used instead of\n@code{LIBRARY}. If @samp{<name>} does not include a suffix, the default\nexecutable suffix, @samp{.EXE} is appended.\n\nWith either @code{LIBRARY <name>} or @code{NAME <name>} the optional\nspecification @code{BASE = <number>} may be used to specify a\nnon-default base address for the image.\n\nIf neither @code{LIBRARY <name>} nor  @code{NAME <name>} is specified,\nor they specify an empty string, the internal name is the same as the\nfilename specified on the command line.\n\nThe complete specification of an export symbol is:\n\n@example\nEXPORTS\n  ( (  ( <name1> [ = <name2> ] )\n     | ( <name1> = <module-name> . <external-name>))\n  [ @@ <integer> ] [NONAME] [DATA] [CONSTANT] [PRIVATE] ) *\n@end example\n\nDeclares @samp{<name1>} as an exported symbol from the DLL, or declares\n@samp{<name1>} as an exported alias for @samp{<name2>}; or declares\n@samp{<name1>} as a \"forward\" alias for the symbol\n@samp{<external-name>} in the DLL @samp{<module-name>}.\nOptionally, the symbol may be exported by the specified ordinal\n@samp{<integer>} alias.\n\nThe optional keywords that follow the declaration indicate:\n\n@code{NONAME}: Do not put the symbol name in the DLL's export table.  It\nwill still be exported by its ordinal alias (either the value specified\nby the .def specification or, otherwise, the value assigned by the\nlinker). The symbol name, however, does remain visible in the import\nlibrary (if any), unless @code{PRIVATE} is also specified.\n\n@code{DATA}: The symbol is a variable or object, rather than a function.\nThe import lib will export only an indirect reference to @code{foo} as\nthe symbol @code{_imp__foo} (ie, @code{foo} must be resolved as\n@code{*_imp__foo}).\n\n@code{CONSTANT}: Like @code{DATA}, but put the undecorated @code{foo} as\nwell as @code{_imp__foo} into the import library. Both refer to the\nread-only import address table's pointer to the variable, not to the\nvariable itself. This can be dangerous. If the user code fails to add\nthe @code{dllimport} attribute and also fails to explicitly add the\nextra indirection that the use of the attribute enforces, the\napplication will behave unexpectedly.\n\n@code{PRIVATE}: Put the symbol in the DLL's export table, but do not put\nit into the static import library used to resolve imports at link time. The\nsymbol can still be imported using the @code{LoadLibrary/GetProcAddress}\nAPI at runtime or by by using the GNU ld extension of linking directly to\nthe DLL without an import library.\n\nSee ld/deffilep.y in the binutils sources for the full specification of\nother DEF file statements\n\n@cindex creating a DEF file\nWhile linking a shared dll, @command{ld} is able to create a DEF file\nwith the @samp{--output-def <file>} command line option.\n\n@item   Using decorations\n@cindex Using decorations\nAnother way of marking symbols for export is to modify the source code\nitself, so that when building the DLL each symbol to be exported is\ndeclared as:\n\n@example\n__declspec(dllexport) int a_variable\n__declspec(dllexport) void a_function(int with_args)\n@end example\n\nAll such symbols will be exported from the DLL.  If, however,\nany of the object files in the DLL contain symbols decorated in\nthis way, then the normal auto-export behavior is disabled, unless\nthe @samp{--export-all-symbols} option is also used.\n\nNote that object files that wish to access these symbols must @emph{not}\ndecorate them with dllexport.  Instead, they should use dllimport,\ninstead:\n\n@example\n__declspec(dllimport) int a_variable\n__declspec(dllimport) void a_function(int with_args)\n@end example\n\nThis complicates the structure of library header files, because\nwhen included by the library itself the header must declare the\nvariables and functions as dllexport, but when included by client\ncode the header must declare them as dllimport.  There are a number\nof idioms that are typically used to do this; often client code can\nomit the __declspec() declaration completely.  See\n@samp{--enable-auto-import} and @samp{automatic data imports} for more\ninformation.\n@end table\n\n@cindex automatic data imports\n@item automatic data imports\nThe standard Windows dll format supports data imports from dlls only\nby adding special decorations (dllimport/dllexport), which let the\ncompiler produce specific assembler instructions to deal with this\nissue.  This increases the effort necessary to port existing Un*x\ncode to these platforms, especially for large\nc++ libraries and applications.  The auto-import feature, which was\ninitially provided by Paul Sokolovsky, allows one to omit the\ndecorations to achieve a behavior that conforms to that on POSIX/Un*x\nplatforms. This feature is enabled with the @samp{--enable-auto-import}\ncommand-line option, although it is enabled by default on cygwin/mingw.\nThe @samp{--enable-auto-import} option itself now serves mainly to\nsuppress any warnings that are ordinarily emitted when linked objects\ntrigger the feature's use.\n\nauto-import of variables does not always work flawlessly without\nadditional assistance.  Sometimes, you will see this message\n\n\"variable '<var>' can't be auto-imported. Please read the\ndocumentation for ld's @code{--enable-auto-import} for details.\"\n\nThe @samp{--enable-auto-import} documentation explains why this error\noccurs, and several methods that can be used to overcome this difficulty.\nOne of these methods is the @emph{runtime pseudo-relocs} feature, described\nbelow.\n\n@cindex runtime pseudo-relocation\nFor complex variables imported from DLLs (such as structs or classes),\nobject files typically contain a base address for the variable and an\noffset (@emph{addend}) within the variable--to specify a particular\nfield or public member, for instance.  Unfortunately, the runtime loader used\nin win32 environments is incapable of fixing these references at runtime\nwithout the additional information supplied by dllimport/dllexport decorations.\nThe standard auto-import feature described above is unable to resolve these\nreferences.\n\nThe @samp{--enable-runtime-pseudo-relocs} switch allows these references to\nbe resolved without error, while leaving the task of adjusting the references\nthemselves (with their non-zero addends) to specialized code provided by the\nruntime environment.  Recent versions of the cygwin and mingw environments and\ncompilers provide this runtime support; older versions do not.  However, the\nsupport is only necessary on the developer's platform; the compiled result will\nrun without error on an older system.\n\n@samp{--enable-runtime-pseudo-relocs} is not the default; it must be explicitly\nenabled as needed.\n\n@cindex direct linking to a dll\n@item direct linking to a dll\nThe cygwin/mingw ports of @command{ld} support the direct linking,\nincluding data symbols, to a dll without the usage of any import\nlibraries.  This is much faster and uses much less memory than does the\ntraditional import library method, especially when linking large\nlibraries or applications.  When @command{ld} creates an import lib, each\nfunction or variable exported from the dll is stored in its own bfd, even\nthough a single bfd could contain many exports.  The overhead involved in\nstoring, loading, and processing so many bfd's is quite large, and explains the\ntremendous time, memory, and storage needed to link against particularly\nlarge or complex libraries when using import libs.\n\nLinking directly to a dll uses no extra command-line switches other than\n@samp{-L} and @samp{-l}, because @command{ld} already searches for a number\nof names to match each library.  All that is needed from the developer's\nperspective is an understanding of this search, in order to force ld to\nselect the dll instead of an import library.\n\n\nFor instance, when ld is called with the argument @samp{-lxxx} it will attempt\nto find, in the first directory of its search path,\n\n@example\nlibxxx.dll.a\nxxx.dll.a\nlibxxx.a\nxxx.lib\ncygxxx.dll (*)\nlibxxx.dll\nxxx.dll\n@end example\n\nbefore moving on to the next directory in the search path.\n\n(*) Actually, this is not @samp{cygxxx.dll} but in fact is @samp{<prefix>xxx.dll},\nwhere @samp{<prefix>} is set by the @command{ld} option\n@samp{--dll-search-prefix=<prefix>}. In the case of cygwin, the standard gcc spec\nfile includes @samp{--dll-search-prefix=cyg}, so in effect we actually search for\n@samp{cygxxx.dll}.\n\nOther win32-based unix environments, such as mingw or pw32, may use other\n@samp{<prefix>}es, although at present only cygwin makes use of this feature.  It\nwas originally intended to help avoid name conflicts among dll's built for the\nvarious win32/un*x environments, so that (for example) two versions of a zlib dll\ncould coexist on the same machine.\n\nThe generic cygwin/mingw path layout uses a @samp{bin} directory for\napplications and dll's and a @samp{lib} directory for the import\nlibraries (using cygwin nomenclature):\n\n@example\nbin/\n\tcygxxx.dll\nlib/\n\tlibxxx.dll.a   (in case of dll's)\n\tlibxxx.a       (in case of static archive)\n@end example\n\nLinking directly to a dll without using the import library can be\ndone two ways:\n\n1. Use the dll directly by adding the @samp{bin} path to the link line\n@example\ngcc -Wl,-verbose  -o a.exe -L../bin/ -lxxx\n@end example\n\nHowever, as the dll's often have version numbers appended to their names\n(@samp{cygncurses-5.dll}) this will often fail, unless one specifies\n@samp{-L../bin -lncurses-5} to include the version.  Import libs are generally\nnot versioned, and do not have this difficulty.\n\n2. Create a symbolic link from the dll to a file in the @samp{lib}\ndirectory according to the above mentioned search pattern.  This\nshould be used to avoid unwanted changes in the tools needed for\nmaking the app/dll.\n\n@example\nln -s bin/cygxxx.dll lib/[cyg|lib|]xxx.dll[.a]\n@end example\n\nThen you can link without any make environment changes.\n\n@example\ngcc -Wl,-verbose  -o a.exe -L../lib/ -lxxx\n@end example\n\nThis technique also avoids the version number problems, because the following is\nperfectly legal\n\n@example\nbin/\n\tcygxxx-5.dll\nlib/\n\tlibxxx.dll.a -> ../bin/cygxxx-5.dll\n@end example\n\nLinking directly to a dll without using an import lib will work\neven when auto-import features are exercised, and even when\n@samp{--enable-runtime-pseudo-relocs} is used.\n\nGiven the improvements in speed and memory usage, one might justifiably\nwonder why import libraries are used at all.  There are three reasons:\n\n1. Until recently, the link-directly-to-dll functionality did @emph{not}\nwork with auto-imported data.\n\n2. Sometimes it is necessary to include pure static objects within the\nimport library (which otherwise contains only bfd's for indirection\nsymbols that point to the exports of a dll).  Again, the import lib\nfor the cygwin kernel makes use of this ability, and it is not\npossible to do this without an import lib.\n\n3. Symbol aliases can only be resolved using an import lib.  This is\ncritical when linking against OS-supplied dll's (eg, the win32 API)\nin which symbols are usually exported as undecorated aliases of their\nstdcall-decorated assembly names.\n\nSo, import libs are not going away.  But the ability to replace\ntrue import libs with a simple symbolic link to (or a copy of)\na dll, in many cases, is a useful addition to the suite of tools\nbinutils makes available to the win32 developer.  Given the\nmassive improvements in memory requirements during linking, storage\nrequirements, and linking speed, we expect that many developers\nwill soon begin to use this feature whenever possible.\n\n@item symbol aliasing\n@table @emph\n@item adding additional names\nSometimes, it is useful to export symbols with additional names.\nA symbol @samp{foo} will be exported as @samp{foo}, but it can also be\nexported as @samp{_foo} by using special directives in the DEF file\nwhen creating the dll.  This will affect also the optional created\nimport library.  Consider the following DEF file:\n\n@example\nLIBRARY \"xyz.dll\" BASE=0x61000000\n\nEXPORTS\nfoo\n_foo = foo\n@end example\n\nThe line @samp{_foo = foo} maps the symbol @samp{foo} to @samp{_foo}.\n\nAnother method for creating a symbol alias is to create it in the\nsource code using the \"weak\" attribute:\n\n@example\nvoid foo () @{ /* Do something.  */; @}\nvoid _foo () __attribute__ ((weak, alias (\"foo\")));\n@end example\n\nSee the gcc manual for more information about attributes and weak\nsymbols.\n\n@item renaming symbols\nSometimes it is useful to rename exports.  For instance, the cygwin\nkernel does this regularly.  A symbol @samp{_foo} can be exported as\n@samp{foo} but not as @samp{_foo} by using special directives in the\nDEF file. (This will also affect the import library, if it is\ncreated).  In the following example:\n\n@example\nLIBRARY \"xyz.dll\" BASE=0x61000000\n\nEXPORTS\n_foo = foo\n@end example\n\nThe line @samp{_foo = foo} maps the exported symbol @samp{foo} to\n@samp{_foo}.\n@end table\n\nNote: using a DEF file disables the default auto-export behavior,\nunless the @samp{--export-all-symbols} command line option is used.\nIf, however, you are trying to rename symbols, then you should list\n@emph{all} desired exports in the DEF file, including the symbols\nthat are not being renamed, and do @emph{not} use the\n@samp{--export-all-symbols} option.  If you list only the\nrenamed symbols in the DEF file, and use @samp{--export-all-symbols}\nto handle the other symbols, then the both the new names @emph{and}\nthe original names for the renamed symbols will be exported.\nIn effect, you'd be aliasing those symbols, not renaming them,\nwhich is probably not what you wanted.\n\n@cindex weak externals\n@item weak externals\nThe Windows object format, PE, specifies a form of weak symbols called\nweak externals.  When a weak symbol is linked and the symbol is not\ndefined, the weak symbol becomes an alias for some other symbol.  There\nare three variants of weak externals:\n@itemize\n@item Definition is searched for in objects and libraries, historically\ncalled lazy externals.\n@item Definition is searched for only in other objects, not in libraries.\nThis form is not presently implemented.\n@item No search; the symbol is an alias.  This form is not presently\nimplemented.\n@end itemize\nAs a GNU extension, weak symbols that do not specify an alternate symbol\nare supported.  If the symbol is undefined when linking, the symbol\nuses a default value.\n\n@cindex aligned common symbols\n@item aligned common symbols\nAs a GNU extension to the PE file format, it is possible to specify the\ndesired alignment for a common symbol.  This information is conveyed from\nthe assembler or compiler to the linker by means of GNU-specific commands\ncarried in the object file's @samp{.drectve} section, which are recognized\nby @command{ld} and respected when laying out the common symbols.  Native\ntools will be able to process object files employing this GNU extension,\nbut will fail to respect the alignment instructions, and may issue noisy\nwarnings about unknown linker directives.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifset XTENSA\n@ifclear GENERIC\n@raisesections\n@end ifclear\n\n@node Xtensa\n@section @code{ld} and Xtensa Processors\n\n@cindex Xtensa processors\nThe default @command{ld} behavior for Xtensa processors is to interpret\n@code{SECTIONS} commands so that lists of explicitly named sections in a\nspecification with a wildcard file will be interleaved when necessary to\nkeep literal pools within the range of PC-relative load offsets.  For\nexample, with the command:\n\n@smallexample\nSECTIONS\n@{\n  .text : @{\n    *(.literal .text)\n  @}\n@}\n@end smallexample\n\n@noindent\n@command{ld} may interleave some of the @code{.literal}\nand @code{.text} sections from different object files to ensure that the\nliteral pools are within the range of PC-relative load offsets.  A valid\ninterleaving might place the @code{.literal} sections from an initial\ngroup of files followed by the @code{.text} sections of that group of\nfiles.  Then, the @code{.literal} sections from the rest of the files\nand the @code{.text} sections from the rest of the files would follow.\n\n@cindex @option{--relax} on Xtensa\n@cindex relaxing on Xtensa\nRelaxation is enabled by default for the Xtensa version of @command{ld} and\nprovides two important link-time optimizations.  The first optimization\nis to combine identical literal values to reduce code size.  A redundant\nliteral will be removed and all the @code{L32R} instructions that use it\nwill be changed to reference an identical literal, as long as the\nlocation of the replacement literal is within the offset range of all\nthe @code{L32R} instructions.  The second optimization is to remove\nunnecessary overhead from assembler-generated ``longcall'' sequences of\n@code{L32R}/@code{CALLX@var{n}} when the target functions are within\nrange of direct @code{CALL@var{n}} instructions.\n\nFor each of these cases where an indirect call sequence can be optimized\nto a direct call, the linker will change the @code{CALLX@var{n}}\ninstruction to a @code{CALL@var{n}} instruction, remove the @code{L32R}\ninstruction, and remove the literal referenced by the @code{L32R}\ninstruction if it is not used for anything else.  Removing the\n@code{L32R} instruction always reduces code size but can potentially\nhurt performance by changing the alignment of subsequent branch targets.\nBy default, the linker will always preserve alignments, either by\nswitching some instructions between 24-bit encodings and the equivalent\ndensity instructions or by inserting a no-op in place of the @code{L32R}\ninstruction that was removed.  If code size is more important than\nperformance, the @option{--size-opt} option can be used to prevent the\nlinker from widening density instructions or inserting no-ops, except in\na few cases where no-ops are required for correctness.\n\nThe following Xtensa-specific command-line options can be used to\ncontrol the linker:\n\n@cindex Xtensa options\n@table @option\n@kindex --no-relax\n@item --no-relax\nSince the Xtensa version of @code{ld} enables the @option{--relax} option\nby default, the @option{--no-relax} option is provided to disable\nrelaxation.\n\n@item --size-opt\nWhen optimizing indirect calls to direct calls, optimize for code size\nmore than performance.  With this option, the linker will not insert\nno-ops or widen density instructions to preserve branch target\nalignment.  There may still be some cases where no-ops are required to\npreserve the correctness of the code.\n@end table\n\n@ifclear GENERIC\n@lowersections\n@end ifclear\n@end ifset\n\n@ifclear SingleFormat\n@node BFD\n@chapter BFD\n\n@cindex back end\n@cindex object file management\n@cindex object formats available\n@kindex objdump -i\nThe linker accesses object and archive files using the BFD libraries.\nThese libraries allow the linker to use the same routines to operate on\nobject files whatever the object file format.  A different object file\nformat can be supported simply by creating a new BFD back end and adding\nit to the library.  To conserve runtime memory, however, the linker and\nassociated tools are usually configured to support only a subset of the\nobject file formats available.  You can use @code{objdump -i}\n(@pxref{objdump,,objdump,binutils.info,The GNU Binary Utilities}) to\nlist all the formats available for your configuration.\n\n@cindex BFD requirements\n@cindex requirements for BFD\nAs with most implementations, BFD is a compromise between\nseveral conflicting requirements. The major factor influencing\nBFD design was efficiency: any time used converting between\nformats is time which would not have been spent had BFD not\nbeen involved. This is partly offset by abstraction payback; since\nBFD simplifies applications and back ends, more time and care\nmay be spent optimizing algorithms for a greater speed.\n\nOne minor artifact of the BFD solution which you should bear in\nmind is the potential for information loss.  There are two places where\nuseful information can be lost using the BFD mechanism: during\nconversion and during output. @xref{BFD information loss}.\n\n@menu\n* BFD outline::                 How it works: an outline of BFD\n@end menu\n\n@node BFD outline\n@section How It Works: An Outline of BFD\n@cindex opening object files\n@include bfdsumm.texi\n@end ifclear\n\n@node Reporting Bugs\n@chapter Reporting Bugs\n@cindex bugs in @command{ld}\n@cindex reporting bugs in @command{ld}\n\nYour bug reports play an essential role in making @command{ld} reliable.\n\nReporting a bug may help you by bringing a solution to your problem, or\nit may not.  But in any case the principal function of a bug report is\nto help the entire community by making the next version of @command{ld}\nwork better.  Bug reports are your contribution to the maintenance of\n@command{ld}.\n\nIn order for a bug report to serve its purpose, you must include the\ninformation that enables us to fix the bug.\n\n@menu\n* Bug Criteria::                Have you found a bug?\n* Bug Reporting::               How to report bugs\n@end menu\n\n@node Bug Criteria\n@section Have You Found a Bug?\n@cindex bug criteria\n\nIf you are not sure whether you have found a bug, here are some guidelines:\n\n@itemize @bullet\n@cindex fatal signal\n@cindex linker crash\n@cindex crash of linker\n@item\nIf the linker gets a fatal signal, for any input whatever, that is a\n@command{ld} bug.  Reliable linkers never crash.\n\n@cindex error on valid input\n@item\nIf @command{ld} produces an error message for valid input, that is a bug.\n\n@cindex invalid input\n@item\nIf @command{ld} does not produce an error message for invalid input, that\nmay be a bug.  In the general case, the linker can not verify that\nobject files are correct.\n\n@item\nIf you are an experienced user of linkers, your suggestions for\nimprovement of @command{ld} are welcome in any case.\n@end itemize\n\n@node Bug Reporting\n@section How to Report Bugs\n@cindex bug reports\n@cindex @command{ld} bugs, reporting\n\nA number of companies and individuals offer support for @sc{gnu}\nproducts.  If you obtained @command{ld} from a support organization, we\nrecommend you contact that organization first.\n\nYou can find contact information for many support companies and\nindividuals in the file @file{etc/SERVICE} in the @sc{gnu} Emacs\ndistribution.\n\n@ifset BUGURL\nOtherwise, send bug reports for @command{ld} to\n@value{BUGURL}.\n@end ifset\n\nThe fundamental principle of reporting bugs usefully is this:\n@strong{report all the facts}.  If you are not sure whether to state a\nfact or leave it out, state it!\n\nOften people omit facts because they think they know what causes the\nproblem and assume that some details do not matter.  Thus, you might\nassume that the name of a symbol you use in an example does not\nmatter.  Well, probably it does not, but one cannot be sure.  Perhaps\nthe bug is a stray memory reference which happens to fetch from the\nlocation where that name is stored in memory; perhaps, if the name\nwere different, the contents of that location would fool the linker\ninto doing the right thing despite the bug.  Play it safe and give a\nspecific, complete example.  That is the easiest thing for you to do,\nand the most helpful.\n\nKeep in mind that the purpose of a bug report is to enable us to fix\nthe bug if it is new to us.  Therefore, always write your bug reports\non the assumption that the bug has not been reported previously.\n\nSometimes people give a few sketchy facts and ask, ``Does this ring a\nbell?''  This cannot help us fix a bug, so it is basically useless.  We\nrespond by asking for enough details to enable us to investigate.\nYou might as well expedite matters by sending them to begin with.\n\nTo enable us to fix the bug, you should include all these things:\n\n@itemize @bullet\n@item\nThe version of @command{ld}.  @command{ld} announces it if you start it with\nthe @samp{--version} argument.\n\nWithout this, we will not know whether there is any point in looking for\nthe bug in the current version of @command{ld}.\n\n@item\nAny patches you may have applied to the @command{ld} source, including any\npatches made to the @code{BFD} library.\n\n@item\nThe type of machine you are using, and the operating system name and\nversion number.\n\n@item\nWhat compiler (and its version) was used to compile @command{ld}---e.g.\n``@code{gcc-2.7}''.\n\n@item\nThe command arguments you gave the linker to link your example and\nobserve the bug.  To guarantee you will not omit something important,\nlist them all.  A copy of the Makefile (or the output from make) is\nsufficient.\n\nIf we were to try to guess the arguments, we would probably guess wrong\nand then we might not encounter the bug.\n\n@item\nA complete input file, or set of input files, that will reproduce the\nbug.  It is generally most helpful to send the actual object files\nprovided that they are reasonably small.  Say no more than 10K.  For\nbigger files you can either make them available by FTP or HTTP or else\nstate that you are willing to send the object file(s) to whomever\nrequests them.  (Note - your email will be going to a mailing list, so\nwe do not want to clog it up with large attachments).  But small\nattachments are best.\n\nIf the source files were assembled using @code{gas} or compiled using\n@code{gcc}, then it may be OK to send the source files rather than the\nobject files.  In this case, be sure to say exactly what version of\n@code{gas} or @code{gcc} was used to produce the object files.  Also say\nhow @code{gas} or @code{gcc} were configured.\n\n@item\nA description of what behavior you observe that you believe is\nincorrect.  For example, ``It gets a fatal signal.''\n\nOf course, if the bug is that @command{ld} gets a fatal signal, then we\nwill certainly notice it.  But if the bug is incorrect output, we might\nnot notice unless it is glaringly wrong.  You might as well not give us\na chance to make a mistake.\n\nEven if the problem you experience is a fatal signal, you should still\nsay so explicitly.  Suppose something strange is going on, such as, your\ncopy of @command{ld} is out of sync, or you have encountered a bug in the\nC library on your system.  (This has happened!)  Your copy might crash\nand ours would not.  If you told us to expect a crash, then when ours\nfails to crash, we would know that the bug was not happening for us.  If\nyou had not told us to expect a crash, then we would not be able to draw\nany conclusion from our observations.\n\n@item\nIf you wish to suggest changes to the @command{ld} source, send us context\ndiffs, as generated by @code{diff} with the @samp{-u}, @samp{-c}, or\n@samp{-p} option.  Always send diffs from the old file to the new file.\nIf you even discuss something in the @command{ld} source, refer to it by\ncontext, not by line number.\n\nThe line numbers in our development sources will not match those in your\nsources.  Your line numbers would convey no useful information to us.\n@end itemize\n\nHere are some things that are not necessary:\n\n@itemize @bullet\n@item\nA description of the envelope of the bug.\n\nOften people who encounter a bug spend a lot of time investigating\nwhich changes to the input file will make the bug go away and which\nchanges will not affect it.\n\nThis is often time consuming and not very useful, because the way we\nwill find the bug is by running a single example under the debugger\nwith breakpoints, not by pure deduction from a series of examples.\nWe recommend that you save your time for something else.\n\nOf course, if you can find a simpler example to report @emph{instead}\nof the original one, that is a convenience for us.  Errors in the\noutput will be easier to spot, running under the debugger will take\nless time, and so on.\n\nHowever, simplification is not vital; if you do not want to do this,\nreport the bug anyway and send us the entire test case you used.\n\n@item\nA patch for the bug.\n\nA patch for the bug does help us if it is a good one.  But do not omit\nthe necessary information, such as the test case, on the assumption that\na patch is all we need.  We might see problems with your patch and decide\nto fix the problem another way, or we might not understand it at all.\n\nSometimes with a program as complicated as @command{ld} it is very hard to\nconstruct an example that will make the program follow a certain path\nthrough the code.  If you do not send us the example, we will not be\nable to construct one, so we will not be able to verify that the bug is\nfixed.\n\nAnd if we cannot understand what bug you are trying to fix, or why your\npatch should be an improvement, we will not install it.  A test case will\nhelp us to understand.\n\n@item\nA guess about what the bug is or what it depends on.\n\nSuch guesses are usually wrong.  Even we cannot guess right about such\nthings without first using the debugger to find the facts.\n@end itemize\n\n@node MRI\n@appendix MRI Compatible Script Files\n@cindex MRI compatibility\nTo aid users making the transition to @sc{gnu} @command{ld} from the MRI\nlinker, @command{ld} can use MRI compatible linker scripts as an\nalternative to the more general-purpose linker scripting language\ndescribed in @ref{Scripts}.  MRI compatible linker scripts have a much\nsimpler command set than the scripting language otherwise used with\n@command{ld}.  @sc{gnu} @command{ld} supports the most commonly used MRI\nlinker commands; these commands are described here.\n\nIn general, MRI scripts aren't of much use with the @code{a.out} object\nfile format, since it only has three sections and MRI scripts lack some\nfeatures to make use of them.\n\nYou can specify a file containing an MRI-compatible script using the\n@samp{-c} command-line option.\n\nEach command in an MRI-compatible script occupies its own line; each\ncommand line starts with the keyword that identifies the command (though\nblank lines are also allowed for punctuation).  If a line of an\nMRI-compatible script begins with an unrecognized keyword, @command{ld}\nissues a warning message, but continues processing the script.\n\nLines beginning with @samp{*} are comments.\n\nYou can write these commands using all upper-case letters, or all\nlower case; for example, @samp{chip} is the same as @samp{CHIP}.\nThe following list shows only the upper-case form of each command.\n\n@table @code\n@cindex @code{ABSOLUTE} (MRI)\n@item ABSOLUTE @var{secname}\n@itemx ABSOLUTE @var{secname}, @var{secname}, @dots{} @var{secname}\nNormally, @command{ld} includes in the output file all sections from all\nthe input files.  However, in an MRI-compatible script, you can use the\n@code{ABSOLUTE} command to restrict the sections that will be present in\nyour output program.  If the @code{ABSOLUTE} command is used at all in a\nscript, then only the sections named explicitly in @code{ABSOLUTE}\ncommands will appear in the linker output.  You can still use other\ninput sections (whatever you select on the command line, or using\n@code{LOAD}) to resolve addresses in the output file.\n\n@cindex @code{ALIAS} (MRI)\n@item ALIAS @var{out-secname}, @var{in-secname}\nUse this command to place the data from input section @var{in-secname}\nin a section called @var{out-secname} in the linker output file.\n\n@var{in-secname} may be an integer.\n\n@cindex @code{ALIGN} (MRI)\n@item ALIGN @var{secname} = @var{expression}\nAlign the section called @var{secname} to @var{expression}.  The\n@var{expression} should be a power of two.\n\n@cindex @code{BASE} (MRI)\n@item BASE @var{expression}\nUse the value of @var{expression} as the lowest address (other than\nabsolute addresses) in the output file.\n\n@cindex @code{CHIP} (MRI)\n@item CHIP @var{expression}\n@itemx CHIP @var{expression}, @var{expression}\nThis command does nothing; it is accepted only for compatibility.\n\n@cindex @code{END} (MRI)\n@item END\nThis command does nothing whatever; it's only accepted for compatibility.\n\n@cindex @code{FORMAT} (MRI)\n@item FORMAT @var{output-format}\nSimilar to the @code{OUTPUT_FORMAT} command in the more general linker\nlanguage, but restricted to one of these output formats:\n\n@enumerate\n@item\nS-records, if @var{output-format} is @samp{S}\n\n@item\nIEEE, if @var{output-format} is @samp{IEEE}\n\n@item\nCOFF (the @samp{coff-m68k} variant in BFD), if @var{output-format} is\n@samp{COFF}\n@end enumerate\n\n@cindex @code{LIST} (MRI)\n@item LIST @var{anything}@dots{}\nPrint (to the standard output file) a link map, as produced by the\n@command{ld} command-line option @samp{-M}.\n\nThe keyword @code{LIST} may be followed by anything on the\nsame line, with no change in its effect.\n\n@cindex @code{LOAD} (MRI)\n@item LOAD @var{filename}\n@itemx LOAD @var{filename}, @var{filename}, @dots{} @var{filename}\nInclude one or more object file @var{filename} in the link; this has the\nsame effect as specifying @var{filename} directly on the @command{ld}\ncommand line.\n\n@cindex @code{NAME} (MRI)\n@item NAME @var{output-name}\n@var{output-name} is the name for the program produced by @command{ld}; the\nMRI-compatible command @code{NAME} is equivalent to the command-line\noption @samp{-o} or the general script language command @code{OUTPUT}.\n\n@cindex @code{ORDER} (MRI)\n@item ORDER @var{secname}, @var{secname}, @dots{} @var{secname}\n@itemx ORDER @var{secname} @var{secname} @var{secname}\nNormally, @command{ld} orders the sections in its output file in the\norder in which they first appear in the input files.  In an MRI-compatible\nscript, you can override this ordering with the @code{ORDER} command.  The\nsections you list with @code{ORDER} will appear first in your output\nfile, in the order specified.\n\n@cindex @code{PUBLIC} (MRI)\n@item PUBLIC @var{name}=@var{expression}\n@itemx PUBLIC @var{name},@var{expression}\n@itemx PUBLIC @var{name} @var{expression}\nSupply a value (@var{expression}) for external symbol\n@var{name} used in the linker input files.\n\n@cindex @code{SECT} (MRI)\n@item SECT @var{secname}, @var{expression}\n@itemx SECT @var{secname}=@var{expression}\n@itemx SECT @var{secname} @var{expression}\nYou can use any of these three forms of the @code{SECT} command to\nspecify the start address (@var{expression}) for section @var{secname}.\nIf you have more than one @code{SECT} statement for the same\n@var{secname}, only the @emph{first} sets the start address.\n@end table\n\n@node GNU Free Documentation License\n@appendix GNU Free Documentation License\n@include fdl.texi\n\n@node LD Index\n@unnumbered LD Index\n\n@printindex cp\n\n@tex\n% I think something like @colophon should be in texinfo.  In the\n% meantime:\n\\long\\def\\colophon{\\hbox to0pt{}\\vfill\n\\centerline{The body of this manual is set in}\n\\centerline{\\fontname\\tenrm,}\n\\centerline{with headings in {\\bf\\fontname\\tenbf}}\n\\centerline{and examples in {\\tt\\fontname\\tentt}.}\n\\centerline{{\\it\\fontname\\tenit\\/} and}\n\\centerline{{\\sl\\fontname\\tensl\\/}}\n\\centerline{are used for emphasis.}\\vfill}\n\\page\\colophon\n% Blame: doc@cygnus.com, 28mar91.\n@end tex\n\n@bye\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/ld.info": "This is ld.info, produced by makeinfo version 4.8 from ld.texinfo.\n\nSTART-INFO-DIR-ENTRY\n* Ld: (ld).                       The GNU linker.\nEND-INFO-DIR-ENTRY\n\n   This file documents the GNU linker LD (GNU Binutils) version 2.20.\n\n   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,\n2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\nFoundation, Inc.\n\n   Permission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3 or\nany later version published by the Free Software Foundation; with no\nInvariant Sections, with no Front-Cover Texts, and with no Back-Cover\nTexts.  A copy of the license is included in the section entitled \"GNU\nFree Documentation License\".\n\n\u001f\nFile: ld.info,  Node: Top,  Next: Overview,  Up: (dir)\n\nLD\n**\n\nThis file documents the GNU linker ld (GNU Binutils) version 2.20.\n\n   This document is distributed under the terms of the GNU Free\nDocumentation License version 1.3.  A copy of the license is included\nin the section entitled \"GNU Free Documentation License\".\n\n* Menu:\n\n* Overview::                    Overview\n* Invocation::                  Invocation\n* Scripts::                     Linker Scripts\n\n* Machine Dependent::           Machine Dependent Features\n\n* BFD::                         BFD\n\n* Reporting Bugs::              Reporting Bugs\n* MRI::                         MRI Compatible Script Files\n* GNU Free Documentation License::  GNU Free Documentation License\n* LD Index::                       LD Index\n\n\u001f\nFile: ld.info,  Node: Overview,  Next: Invocation,  Prev: Top,  Up: Top\n\n1 Overview\n**********\n\n`ld' combines a number of object and archive files, relocates their\ndata and ties up symbol references. Usually the last step in compiling\na program is to run `ld'.\n\n   `ld' accepts Linker Command Language files written in a superset of\nAT&T's Link Editor Command Language syntax, to provide explicit and\ntotal control over the linking process.\n\n   This version of `ld' uses the general purpose BFD libraries to\noperate on object files. This allows `ld' to read, combine, and write\nobject files in many different formats--for example, COFF or `a.out'.\nDifferent formats may be linked together to produce any available kind\nof object file.  *Note BFD::, for more information.\n\n   Aside from its flexibility, the GNU linker is more helpful than other\nlinkers in providing diagnostic information.  Many linkers abandon\nexecution immediately upon encountering an error; whenever possible,\n`ld' continues executing, allowing you to identify other errors (or, in\nsome cases, to get an output file in spite of the error).\n\n\u001f\nFile: ld.info,  Node: Invocation,  Next: Scripts,  Prev: Overview,  Up: Top\n\n2 Invocation\n************\n\nThe GNU linker `ld' is meant to cover a broad range of situations, and\nto be as compatible as possible with other linkers.  As a result, you\nhave many choices to control its behavior.\n\n* Menu:\n\n* Options::                     Command Line Options\n* Environment::                 Environment Variables\n\n\u001f\nFile: ld.info,  Node: Options,  Next: Environment,  Up: Invocation\n\n2.1 Command Line Options\n========================\n\n   The linker supports a plethora of command-line options, but in actual\npractice few of them are used in any particular context.  For instance,\na frequent use of `ld' is to link standard Unix object files on a\nstandard, supported Unix system.  On such a system, to link a file\n`hello.o':\n\n     ld -o OUTPUT /lib/crt0.o hello.o -lc\n\n   This tells `ld' to produce a file called OUTPUT as the result of\nlinking the file `/lib/crt0.o' with `hello.o' and the library `libc.a',\nwhich will come from the standard search directories.  (See the\ndiscussion of the `-l' option below.)\n\n   Some of the command-line options to `ld' may be specified at any\npoint in the command line.  However, options which refer to files, such\nas `-l' or `-T', cause the file to be read at the point at which the\noption appears in the command line, relative to the object files and\nother file options.  Repeating non-file options with a different\nargument will either have no further effect, or override prior\noccurrences (those further to the left on the command line) of that\noption.  Options which may be meaningfully specified more than once are\nnoted in the descriptions below.\n\n   Non-option arguments are object files or archives which are to be\nlinked together.  They may follow, precede, or be mixed in with\ncommand-line options, except that an object file argument may not be\nplaced between an option and its argument.\n\n   Usually the linker is invoked with at least one object file, but you\ncan specify other forms of binary input files using `-l', `-R', and the\nscript command language.  If _no_ binary input files at all are\nspecified, the linker does not produce any output, and issues the\nmessage `No input files'.\n\n   If the linker cannot recognize the format of an object file, it will\nassume that it is a linker script.  A script specified in this way\naugments the main linker script used for the link (either the default\nlinker script or the one specified by using `-T').  This feature\npermits the linker to link against a file which appears to be an object\nor an archive, but actually merely defines some symbol values, or uses\n`INPUT' or `GROUP' to load other objects.  Specifying a script in this\nway merely augments the main linker script, with the extra commands\nplaced after the main script; use the `-T' option to replace the\ndefault linker script entirely, but note the effect of the `INSERT'\ncommand.  *Note Scripts::.\n\n   For options whose names are a single letter, option arguments must\neither follow the option letter without intervening whitespace, or be\ngiven as separate arguments immediately following the option that\nrequires them.\n\n   For options whose names are multiple letters, either one dash or two\ncan precede the option name; for example, `-trace-symbol' and\n`--trace-symbol' are equivalent.  Note--there is one exception to this\nrule.  Multiple letter options that start with a lower case 'o' can\nonly be preceded by two dashes.  This is to reduce confusion with the\n`-o' option.  So for example `-omagic' sets the output file name to\n`magic' whereas `--omagic' sets the NMAGIC flag on the output.\n\n   Arguments to multiple-letter options must either be separated from\nthe option name by an equals sign, or be given as separate arguments\nimmediately following the option that requires them.  For example,\n`--trace-symbol foo' and `--trace-symbol=foo' are equivalent.  Unique\nabbreviations of the names of multiple-letter options are accepted.\n\n   Note--if the linker is being invoked indirectly, via a compiler\ndriver (e.g. `gcc') then all the linker command line options should be\nprefixed by `-Wl,' (or whatever is appropriate for the particular\ncompiler driver) like this:\n\n       gcc -Wl,--start-group foo.o bar.o -Wl,--end-group\n\n   This is important, because otherwise the compiler driver program may\nsilently drop the linker options, resulting in a bad link.  Confusion\nmay also arise when passing options that require values through a\ndriver, as the use of a space between option and argument acts as a\nseparator, and causes the driver to pass only the option to the linker\nand the argument to the compiler.  In this case, it is simplest to use\nthe joined forms of both single- and multiple-letter options, such as:\n\n       gcc foo.o bar.o -Wl,-eENTRY -Wl,-Map=a.map\n\n   Here is a table of the generic command line switches accepted by the\nGNU linker:\n\n`@FILE'\n     Read command-line options from FILE.  The options read are\n     inserted in place of the original @FILE option.  If FILE does not\n     exist, or cannot be read, then the option will be treated\n     literally, and not removed.\n\n     Options in FILE are separated by whitespace.  A whitespace\n     character may be included in an option by surrounding the entire\n     option in either single or double quotes.  Any character\n     (including a backslash) may be included by prefixing the character\n     to be included with a backslash.  The FILE may itself contain\n     additional @FILE options; any such options will be processed\n     recursively.\n\n`-a KEYWORD'\n     This option is supported for HP/UX compatibility.  The KEYWORD\n     argument must be one of the strings `archive', `shared', or\n     `default'.  `-aarchive' is functionally equivalent to `-Bstatic',\n     and the other two keywords are functionally equivalent to\n     `-Bdynamic'.  This option may be used any number of times.\n\n`-A ARCHITECTURE'\n`--architecture=ARCHITECTURE'\n     In the current release of `ld', this option is useful only for the\n     Intel 960 family of architectures.  In that `ld' configuration, the\n     ARCHITECTURE argument identifies the particular architecture in\n     the 960 family, enabling some safeguards and modifying the\n     archive-library search path.  *Note `ld' and the Intel 960 family:\n     i960, for details.\n\n     Future releases of `ld' may support similar functionality for\n     other architecture families.\n\n`-b INPUT-FORMAT'\n`--format=INPUT-FORMAT'\n     `ld' may be configured to support more than one kind of object\n     file.  If your `ld' is configured this way, you can use the `-b'\n     option to specify the binary format for input object files that\n     follow this option on the command line.  Even when `ld' is\n     configured to support alternative object formats, you don't\n     usually need to specify this, as `ld' should be configured to\n     expect as a default input format the most usual format on each\n     machine.  INPUT-FORMAT is a text string, the name of a particular\n     format supported by the BFD libraries.  (You can list the\n     available binary formats with `objdump -i'.)  *Note BFD::.\n\n     You may want to use this option if you are linking files with an\n     unusual binary format.  You can also use `-b' to switch formats\n     explicitly (when linking object files of different formats), by\n     including `-b INPUT-FORMAT' before each group of object files in a\n     particular format.\n\n     The default format is taken from the environment variable\n     `GNUTARGET'.  *Note Environment::.  You can also define the input\n     format from a script, using the command `TARGET'; see *Note Format\n     Commands::.\n\n`-c MRI-COMMANDFILE'\n`--mri-script=MRI-COMMANDFILE'\n     For compatibility with linkers produced by MRI, `ld' accepts script\n     files written in an alternate, restricted command language,\n     described in *Note MRI Compatible Script Files: MRI.  Introduce\n     MRI script files with the option `-c'; use the `-T' option to run\n     linker scripts written in the general-purpose `ld' scripting\n     language.  If MRI-CMDFILE does not exist, `ld' looks for it in the\n     directories specified by any `-L' options.\n\n`-d'\n`-dc'\n`-dp'\n     These three options are equivalent; multiple forms are supported\n     for compatibility with other linkers.  They assign space to common\n     symbols even if a relocatable output file is specified (with\n     `-r').  The script command `FORCE_COMMON_ALLOCATION' has the same\n     effect.  *Note Miscellaneous Commands::.\n\n`-e ENTRY'\n`--entry=ENTRY'\n     Use ENTRY as the explicit symbol for beginning execution of your\n     program, rather than the default entry point.  If there is no\n     symbol named ENTRY, the linker will try to parse ENTRY as a number,\n     and use that as the entry address (the number will be interpreted\n     in base 10; you may use a leading `0x' for base 16, or a leading\n     `0' for base 8).  *Note Entry Point::, for a discussion of defaults\n     and other ways of specifying the entry point.\n\n`--exclude-libs LIB,LIB,...'\n     Specifies a list of archive libraries from which symbols should\n     not be automatically exported.  The library names may be delimited\n     by commas or colons.  Specifying `--exclude-libs ALL' excludes\n     symbols in all archive libraries from automatic export.  This\n     option is available only for the i386 PE targeted port of the\n     linker and for ELF targeted ports.  For i386 PE, symbols\n     explicitly listed in a .def file are still exported, regardless of\n     this option.  For ELF targeted ports, symbols affected by this\n     option will be treated as hidden.\n\n`--exclude-modules-for-implib MODULE,MODULE,...'\n     Specifies a list of object files or archive members, from which\n     symbols should not be automatically exported, but which should be\n     copied wholesale into the import library being generated during\n     the link.  The module names may be delimited by commas or colons,\n     and must match exactly the filenames used by `ld' to open the\n     files; for archive members, this is simply the member name, but\n     for object files the name listed must include and match precisely\n     any path used to specify the input file on the linker's\n     command-line.  This option is available only for the i386 PE\n     targeted port of the linker.  Symbols explicitly listed in a .def\n     file are still exported, regardless of this option.\n\n`-E'\n`--export-dynamic'\n`--no-export-dynamic'\n     When creating a dynamically linked executable, using the `-E'\n     option or the `--export-dynamic' option causes the linker to add\n     all symbols to the dynamic symbol table.  The dynamic symbol table\n     is the set of symbols which are visible from dynamic objects at\n     run time.\n\n     If you do not use either of these options (or use the\n     `--no-export-dynamic' option to restore the default behavior), the\n     dynamic symbol table will normally contain only those symbols\n     which are referenced by some dynamic object mentioned in the link.\n\n     If you use `dlopen' to load a dynamic object which needs to refer\n     back to the symbols defined by the program, rather than some other\n     dynamic object, then you will probably need to use this option when\n     linking the program itself.\n\n     You can also use the dynamic list to control what symbols should\n     be added to the dynamic symbol table if the output format supports\n     it.  See the description of `--dynamic-list'.\n\n     Note that this option is specific to ELF targeted ports.  PE\n     targets support a similar function to export all symbols from a\n     DLL or EXE; see the description of `--export-all-symbols' below.\n\n`-EB'\n     Link big-endian objects.  This affects the default output format.\n\n`-EL'\n     Link little-endian objects.  This affects the default output\n     format.\n\n`-f NAME'\n`--auxiliary=NAME'\n     When creating an ELF shared object, set the internal DT_AUXILIARY\n     field to the specified name.  This tells the dynamic linker that\n     the symbol table of the shared object should be used as an\n     auxiliary filter on the symbol table of the shared object NAME.\n\n     If you later link a program against this filter object, then, when\n     you run the program, the dynamic linker will see the DT_AUXILIARY\n     field.  If the dynamic linker resolves any symbols from the filter\n     object, it will first check whether there is a definition in the\n     shared object NAME.  If there is one, it will be used instead of\n     the definition in the filter object.  The shared object NAME need\n     not exist.  Thus the shared object NAME may be used to provide an\n     alternative implementation of certain functions, perhaps for\n     debugging or for machine specific performance.\n\n     This option may be specified more than once.  The DT_AUXILIARY\n     entries will be created in the order in which they appear on the\n     command line.\n\n`-F NAME'\n`--filter=NAME'\n     When creating an ELF shared object, set the internal DT_FILTER\n     field to the specified name.  This tells the dynamic linker that\n     the symbol table of the shared object which is being created\n     should be used as a filter on the symbol table of the shared\n     object NAME.\n\n     If you later link a program against this filter object, then, when\n     you run the program, the dynamic linker will see the DT_FILTER\n     field.  The dynamic linker will resolve symbols according to the\n     symbol table of the filter object as usual, but it will actually\n     link to the definitions found in the shared object NAME.  Thus the\n     filter object can be used to select a subset of the symbols\n     provided by the object NAME.\n\n     Some older linkers used the `-F' option throughout a compilation\n     toolchain for specifying object-file format for both input and\n     output object files.  The GNU linker uses other mechanisms for\n     this purpose: the `-b', `--format', `--oformat' options, the\n     `TARGET' command in linker scripts, and the `GNUTARGET'\n     environment variable.  The GNU linker will ignore the `-F' option\n     when not creating an ELF shared object.\n\n`-fini=NAME'\n     When creating an ELF executable or shared object, call NAME when\n     the executable or shared object is unloaded, by setting DT_FINI to\n     the address of the function.  By default, the linker uses `_fini'\n     as the function to call.\n\n`-g'\n     Ignored.  Provided for compatibility with other tools.\n\n`-G VALUE'\n`--gpsize=VALUE'\n     Set the maximum size of objects to be optimized using the GP\n     register to SIZE.  This is only meaningful for object file formats\n     such as MIPS ECOFF which supports putting large and small objects\n     into different sections.  This is ignored for other object file\n     formats.\n\n`-h NAME'\n`-soname=NAME'\n     When creating an ELF shared object, set the internal DT_SONAME\n     field to the specified name.  When an executable is linked with a\n     shared object which has a DT_SONAME field, then when the\n     executable is run the dynamic linker will attempt to load the\n     shared object specified by the DT_SONAME field rather than the\n     using the file name given to the linker.\n\n`-i'\n     Perform an incremental link (same as option `-r').\n\n`-init=NAME'\n     When creating an ELF executable or shared object, call NAME when\n     the executable or shared object is loaded, by setting DT_INIT to\n     the address of the function.  By default, the linker uses `_init'\n     as the function to call.\n\n`-l NAMESPEC'\n`--library=NAMESPEC'\n     Add the archive or object file specified by NAMESPEC to the list\n     of files to link.  This option may be used any number of times.\n     If NAMESPEC is of the form `:FILENAME', `ld' will search the\n     library path for a file called FILENAME, otherwise it will search\n     the library path for a file called `libNAMESPEC.a'.\n\n     On systems which support shared libraries, `ld' may also search for\n     files other than `libNAMESPEC.a'.  Specifically, on ELF and SunOS\n     systems, `ld' will search a directory for a library called\n     `libNAMESPEC.so' before searching for one called `libNAMESPEC.a'.\n     (By convention, a `.so' extension indicates a shared library.)\n     Note that this behavior does not apply to `:FILENAME', which\n     always specifies a file called FILENAME.\n\n     The linker will search an archive only once, at the location where\n     it is specified on the command line.  If the archive defines a\n     symbol which was undefined in some object which appeared before\n     the archive on the command line, the linker will include the\n     appropriate file(s) from the archive.  However, an undefined\n     symbol in an object appearing later on the command line will not\n     cause the linker to search the archive again.\n\n     See the `-(' option for a way to force the linker to search\n     archives multiple times.\n\n     You may list the same archive multiple times on the command line.\n\n     This type of archive searching is standard for Unix linkers.\n     However, if you are using `ld' on AIX, note that it is different\n     from the behaviour of the AIX linker.\n\n`-L SEARCHDIR'\n`--library-path=SEARCHDIR'\n     Add path SEARCHDIR to the list of paths that `ld' will search for\n     archive libraries and `ld' control scripts.  You may use this\n     option any number of times.  The directories are searched in the\n     order in which they are specified on the command line.\n     Directories specified on the command line are searched before the\n     default directories.  All `-L' options apply to all `-l' options,\n     regardless of the order in which the options appear.  `-L' options\n     do not affect how `ld' searches for a linker script unless `-T'\n     option is specified.\n\n     If SEARCHDIR begins with `=', then the `=' will be replaced by the\n     \"sysroot prefix\", a path specified when the linker is configured.\n\n     The default set of paths searched (without being specified with\n     `-L') depends on which emulation mode `ld' is using, and in some\n     cases also on how it was configured.  *Note Environment::.\n\n     The paths can also be specified in a link script with the\n     `SEARCH_DIR' command.  Directories specified this way are searched\n     at the point in which the linker script appears in the command\n     line.\n\n`-m EMULATION'\n     Emulate the EMULATION linker.  You can list the available\n     emulations with the `--verbose' or `-V' options.\n\n     If the `-m' option is not used, the emulation is taken from the\n     `LDEMULATION' environment variable, if that is defined.\n\n     Otherwise, the default emulation depends upon how the linker was\n     configured.\n\n`-M'\n`--print-map'\n     Print a link map to the standard output.  A link map provides\n     information about the link, including the following:\n\n        * Where object files are mapped into memory.\n\n        * How common symbols are allocated.\n\n        * All archive members included in the link, with a mention of\n          the symbol which caused the archive member to be brought in.\n\n        * The values assigned to symbols.\n\n          Note - symbols whose values are computed by an expression\n          which involves a reference to a previous value of the same\n          symbol may not have correct result displayed in the link map.\n          This is because the linker discards intermediate results and\n          only retains the final value of an expression.  Under such\n          circumstances the linker will display the final value\n          enclosed by square brackets.  Thus for example a linker\n          script containing:\n\n                  foo = 1\n                  foo = foo * 4\n                  foo = foo + 8\n\n          will produce the following output in the link map if the `-M'\n          option is used:\n\n                  0x00000001                foo = 0x1\n                  [0x0000000c]                foo = (foo * 0x4)\n                  [0x0000000c]                foo = (foo + 0x8)\n\n          See *Note Expressions:: for more information about\n          expressions in linker scripts.\n\n`-n'\n`--nmagic'\n     Turn off page alignment of sections, and mark the output as\n     `NMAGIC' if possible.\n\n`-N'\n`--omagic'\n     Set the text and data sections to be readable and writable.  Also,\n     do not page-align the data segment, and disable linking against\n     shared libraries.  If the output format supports Unix style magic\n     numbers, mark the output as `OMAGIC'. Note: Although a writable\n     text section is allowed for PE-COFF targets, it does not conform\n     to the format specification published by Microsoft.\n\n`--no-omagic'\n     This option negates most of the effects of the `-N' option.  It\n     sets the text section to be read-only, and forces the data segment\n     to be page-aligned.  Note - this option does not enable linking\n     against shared libraries.  Use `-Bdynamic' for this.\n\n`-o OUTPUT'\n`--output=OUTPUT'\n     Use OUTPUT as the name for the program produced by `ld'; if this\n     option is not specified, the name `a.out' is used by default.  The\n     script command `OUTPUT' can also specify the output file name.\n\n`-O LEVEL'\n     If LEVEL is a numeric values greater than zero `ld' optimizes the\n     output.  This might take significantly longer and therefore\n     probably should only be enabled for the final binary.  At the\n     moment this option only affects ELF shared library generation.\n     Future releases of the linker may make more use of this option.\n     Also currently there is no difference in the linker's behaviour\n     for different non-zero values of this option.  Again this may\n     change with future releases.\n\n`-q'\n`--emit-relocs'\n     Leave relocation sections and contents in fully linked executables.\n     Post link analysis and optimization tools may need this\n     information in order to perform correct modifications of\n     executables.  This results in larger executables.\n\n     This option is currently only supported on ELF platforms.\n\n`--force-dynamic'\n     Force the output file to have dynamic sections.  This option is\n     specific to VxWorks targets.\n\n`-r'\n`--relocatable'\n     Generate relocatable output--i.e., generate an output file that\n     can in turn serve as input to `ld'.  This is often called \"partial\n     linking\".  As a side effect, in environments that support standard\n     Unix magic numbers, this option also sets the output file's magic\n     number to `OMAGIC'.  If this option is not specified, an absolute\n     file is produced.  When linking C++ programs, this option _will\n     not_ resolve references to constructors; to do that, use `-Ur'.\n\n     When an input file does not have the same format as the output\n     file, partial linking is only supported if that input file does\n     not contain any relocations.  Different output formats can have\n     further restrictions; for example some `a.out'-based formats do\n     not support partial linking with input files in other formats at\n     all.\n\n     This option does the same thing as `-i'.\n\n`-R FILENAME'\n`--just-symbols=FILENAME'\n     Read symbol names and their addresses from FILENAME, but do not\n     relocate it or include it in the output.  This allows your output\n     file to refer symbolically to absolute locations of memory defined\n     in other programs.  You may use this option more than once.\n\n     For compatibility with other ELF linkers, if the `-R' option is\n     followed by a directory name, rather than a file name, it is\n     treated as the `-rpath' option.\n\n`-s'\n`--strip-all'\n     Omit all symbol information from the output file.\n\n`-S'\n`--strip-debug'\n     Omit debugger symbol information (but not all symbols) from the\n     output file.\n\n`-t'\n`--trace'\n     Print the names of the input files as `ld' processes them.\n\n`-T SCRIPTFILE'\n`--script=SCRIPTFILE'\n     Use SCRIPTFILE as the linker script.  This script replaces `ld''s\n     default linker script (rather than adding to it), so COMMANDFILE\n     must specify everything necessary to describe the output file.\n     *Note Scripts::.  If SCRIPTFILE does not exist in the current\n     directory, `ld' looks for it in the directories specified by any\n     preceding `-L' options.  Multiple `-T' options accumulate.\n\n`-dT SCRIPTFILE'\n`--default-script=SCRIPTFILE'\n     Use SCRIPTFILE as the default linker script.  *Note Scripts::.\n\n     This option is similar to the `--script' option except that\n     processing of the script is delayed until after the rest of the\n     command line has been processed.  This allows options placed after\n     the `--default-script' option on the command line to affect the\n     behaviour of the linker script, which can be important when the\n     linker command line cannot be directly controlled by the user.\n     (eg because the command line is being constructed by another tool,\n     such as `gcc').\n\n`-u SYMBOL'\n`--undefined=SYMBOL'\n     Force SYMBOL to be entered in the output file as an undefined\n     symbol.  Doing this may, for example, trigger linking of additional\n     modules from standard libraries.  `-u' may be repeated with\n     different option arguments to enter additional undefined symbols.\n     This option is equivalent to the `EXTERN' linker script command.\n\n`-Ur'\n     For anything other than C++ programs, this option is equivalent to\n     `-r': it generates relocatable output--i.e., an output file that\n     can in turn serve as input to `ld'.  When linking C++ programs,\n     `-Ur' _does_ resolve references to constructors, unlike `-r'.  It\n     does not work to use `-Ur' on files that were themselves linked\n     with `-Ur'; once the constructor table has been built, it cannot\n     be added to.  Use `-Ur' only for the last partial link, and `-r'\n     for the others.\n\n`--unique[=SECTION]'\n     Creates a separate output section for every input section matching\n     SECTION, or if the optional wildcard SECTION argument is missing,\n     for every orphan input section.  An orphan section is one not\n     specifically mentioned in a linker script.  You may use this option\n     multiple times on the command line;  It prevents the normal\n     merging of input sections with the same name, overriding output\n     section assignments in a linker script.\n\n`-v'\n`--version'\n`-V'\n     Display the version number for `ld'.  The `-V' option also lists\n     the supported emulations.\n\n`-x'\n`--discard-all'\n     Delete all local symbols.\n\n`-X'\n`--discard-locals'\n     Delete all temporary local symbols.  (These symbols start with\n     system-specific local label prefixes, typically `.L' for ELF\n     systems or `L' for traditional a.out systems.)\n\n`-y SYMBOL'\n`--trace-symbol=SYMBOL'\n     Print the name of each linked file in which SYMBOL appears.  This\n     option may be given any number of times.  On many systems it is\n     necessary to prepend an underscore.\n\n     This option is useful when you have an undefined symbol in your\n     link but don't know where the reference is coming from.\n\n`-Y PATH'\n     Add PATH to the default library search path.  This option exists\n     for Solaris compatibility.\n\n`-z KEYWORD'\n     The recognized keywords are:\n    `combreloc'\n          Combines multiple reloc sections and sorts them to make\n          dynamic symbol lookup caching possible.\n\n    `defs'\n          Disallows undefined symbols in object files.  Undefined\n          symbols in shared libraries are still allowed.\n\n    `execstack'\n          Marks the object as requiring executable stack.\n\n    `initfirst'\n          This option is only meaningful when building a shared object.\n          It marks the object so that its runtime initialization will\n          occur before the runtime initialization of any other objects\n          brought into the process at the same time.  Similarly the\n          runtime finalization of the object will occur after the\n          runtime finalization of any other objects.\n\n    `interpose'\n          Marks the object that its symbol table interposes before all\n          symbols but the primary executable.\n\n    `lazy'\n          When generating an executable or shared library, mark it to\n          tell the dynamic linker to defer function call resolution to\n          the point when the function is called (lazy binding), rather\n          than at load time.  Lazy binding is the default.\n\n    `loadfltr'\n          Marks  the object that its filters be processed immediately at\n          runtime.\n\n    `muldefs'\n          Allows multiple definitions.\n\n    `nocombreloc'\n          Disables multiple reloc sections combining.\n\n    `nocopyreloc'\n          Disables production of copy relocs.\n\n    `nodefaultlib'\n          Marks the object that the search for dependencies of this\n          object will ignore any default library search paths.\n\n    `nodelete'\n          Marks the object shouldn't be unloaded at runtime.\n\n    `nodlopen'\n          Marks the object not available to `dlopen'.\n\n    `nodump'\n          Marks the object can not be dumped by `dldump'.\n\n    `noexecstack'\n          Marks the object as not requiring executable stack.\n\n    `norelro'\n          Don't create an ELF `PT_GNU_RELRO' segment header in the\n          object.\n\n    `now'\n          When generating an executable or shared library, mark it to\n          tell the dynamic linker to resolve all symbols when the\n          program is started, or when the shared library is linked to\n          using dlopen, instead of deferring function call resolution\n          to the point when the function is first called.\n\n    `origin'\n          Marks the object may contain $ORIGIN.\n\n    `relro'\n          Create an ELF `PT_GNU_RELRO' segment header in the object.\n\n    `max-page-size=VALUE'\n          Set the emulation maximum page size to VALUE.\n\n    `common-page-size=VALUE'\n          Set the emulation common page size to VALUE.\n\n\n     Other keywords are ignored for Solaris compatibility.\n\n`-( ARCHIVES -)'\n`--start-group ARCHIVES --end-group'\n     The ARCHIVES should be a list of archive files.  They may be\n     either explicit file names, or `-l' options.\n\n     The specified archives are searched repeatedly until no new\n     undefined references are created.  Normally, an archive is\n     searched only once in the order that it is specified on the\n     command line.  If a symbol in that archive is needed to resolve an\n     undefined symbol referred to by an object in an archive that\n     appears later on the command line, the linker would not be able to\n     resolve that reference.  By grouping the archives, they all be\n     searched repeatedly until all possible references are resolved.\n\n     Using this option has a significant performance cost.  It is best\n     to use it only when there are unavoidable circular references\n     between two or more archives.\n\n`--accept-unknown-input-arch'\n`--no-accept-unknown-input-arch'\n     Tells the linker to accept input files whose architecture cannot be\n     recognised.  The assumption is that the user knows what they are\n     doing and deliberately wants to link in these unknown input files.\n     This was the default behaviour of the linker, before release\n     2.14.  The default behaviour from release 2.14 onwards is to\n     reject such input files, and so the `--accept-unknown-input-arch'\n     option has been added to restore the old behaviour.\n\n`--as-needed'\n`--no-as-needed'\n     This option affects ELF DT_NEEDED tags for dynamic libraries\n     mentioned on the command line after the `--as-needed' option.\n     Normally, the linker will add a DT_NEEDED tag for each dynamic\n     library mentioned on the command line, regardless of whether the\n     library is actually needed.  `--as-needed' causes a DT_NEEDED tag\n     to only be emitted for a library that satisfies a symbol reference\n     from regular objects which is undefined at the point that the\n     library was linked, or, if the library is not found in the\n     DT_NEEDED lists of other libraries linked up to that point, a\n     reference from another dynamic library.  `--no-as-needed' restores\n     the default behaviour.\n\n`--add-needed'\n`--no-add-needed'\n     This option affects the treatment of dynamic libraries from ELF\n     DT_NEEDED tags in dynamic libraries mentioned on the command line\n     after the `--no-add-needed' option.  Normally, the linker will add\n     a DT_NEEDED tag for each dynamic library from DT_NEEDED tags.\n     `--no-add-needed' causes DT_NEEDED tags will never be emitted for\n     those libraries from DT_NEEDED tags. `--add-needed' restores the\n     default behaviour.\n\n`-assert KEYWORD'\n     This option is ignored for SunOS compatibility.\n\n`-Bdynamic'\n`-dy'\n`-call_shared'\n     Link against dynamic libraries.  This is only meaningful on\n     platforms for which shared libraries are supported.  This option\n     is normally the default on such platforms.  The different variants\n     of this option are for compatibility with various systems.  You\n     may use this option multiple times on the command line: it affects\n     library searching for `-l' options which follow it.\n\n`-Bgroup'\n     Set the `DF_1_GROUP' flag in the `DT_FLAGS_1' entry in the dynamic\n     section.  This causes the runtime linker to handle lookups in this\n     object and its dependencies to be performed only inside the group.\n     `--unresolved-symbols=report-all' is implied.  This option is only\n     meaningful on ELF platforms which support shared libraries.\n\n`-Bstatic'\n`-dn'\n`-non_shared'\n`-static'\n     Do not link against shared libraries.  This is only meaningful on\n     platforms for which shared libraries are supported.  The different\n     variants of this option are for compatibility with various\n     systems.  You may use this option multiple times on the command\n     line: it affects library searching for `-l' options which follow\n     it.  This option also implies `--unresolved-symbols=report-all'.\n     This option can be used with `-shared'.  Doing so means that a\n     shared library is being created but that all of the library's\n     external references must be resolved by pulling in entries from\n     static libraries.\n\n`-Bsymbolic'\n     When creating a shared library, bind references to global symbols\n     to the definition within the shared library, if any.  Normally, it\n     is possible for a program linked against a shared library to\n     override the definition within the shared library.  This option is\n     only meaningful on ELF platforms which support shared libraries.\n\n`-Bsymbolic-functions'\n     When creating a shared library, bind references to global function\n     symbols to the definition within the shared library, if any.  This\n     option is only meaningful on ELF platforms which support shared\n     libraries.\n\n`--dynamic-list=DYNAMIC-LIST-FILE'\n     Specify the name of a dynamic list file to the linker.  This is\n     typically used when creating shared libraries to specify a list of\n     global symbols whose references shouldn't be bound to the\n     definition within the shared library, or creating dynamically\n     linked executables to specify a list of symbols which should be\n     added to the symbol table in the executable.  This option is only\n     meaningful on ELF platforms which support shared libraries.\n\n     The format of the dynamic list is the same as the version node\n     without scope and node name.  See *Note VERSION:: for more\n     information.\n\n`--dynamic-list-data'\n     Include all global data symbols to the dynamic list.\n\n`--dynamic-list-cpp-new'\n     Provide the builtin dynamic list for C++ operator new and delete.\n     It is mainly useful for building shared libstdc++.\n\n`--dynamic-list-cpp-typeinfo'\n     Provide the builtin dynamic list for C++ runtime type\n     identification.\n\n`--check-sections'\n`--no-check-sections'\n     Asks the linker _not_ to check section addresses after they have\n     been assigned to see if there are any overlaps.  Normally the\n     linker will perform this check, and if it finds any overlaps it\n     will produce suitable error messages.  The linker does know about,\n     and does make allowances for sections in overlays.  The default\n     behaviour can be restored by using the command line switch\n     `--check-sections'.  Section overlap is not usually checked for\n     relocatable links.  You can force checking in that case by using\n     the `--check-sections' option.\n\n`--cref'\n     Output a cross reference table.  If a linker map file is being\n     generated, the cross reference table is printed to the map file.\n     Otherwise, it is printed on the standard output.\n\n     The format of the table is intentionally simple, so that it may be\n     easily processed by a script if necessary.  The symbols are\n     printed out, sorted by name.  For each symbol, a list of file\n     names is given.  If the symbol is defined, the first file listed\n     is the location of the definition.  The remaining files contain\n     references to the symbol.\n\n`--no-define-common'\n     This option inhibits the assignment of addresses to common symbols.\n     The script command `INHIBIT_COMMON_ALLOCATION' has the same effect.\n     *Note Miscellaneous Commands::.\n\n     The `--no-define-common' option allows decoupling the decision to\n     assign addresses to Common symbols from the choice of the output\n     file type; otherwise a non-Relocatable output type forces\n     assigning addresses to Common symbols.  Using `--no-define-common'\n     allows Common symbols that are referenced from a shared library to\n     be assigned addresses only in the main program.  This eliminates\n     the unused duplicate space in the shared library, and also\n     prevents any possible confusion over resolving to the wrong\n     duplicate when there are many dynamic modules with specialized\n     search paths for runtime symbol resolution.\n\n`--defsym=SYMBOL=EXPRESSION'\n     Create a global symbol in the output file, containing the absolute\n     address given by EXPRESSION.  You may use this option as many\n     times as necessary to define multiple symbols in the command line.\n     A limited form of arithmetic is supported for the EXPRESSION in\n     this context: you may give a hexadecimal constant or the name of\n     an existing symbol, or use `+' and `-' to add or subtract\n     hexadecimal constants or symbols.  If you need more elaborate\n     expressions, consider using the linker command language from a\n     script (*note Assignment: Symbol Definitions: Assignments.).\n     _Note:_ there should be no white space between SYMBOL, the equals\n     sign (\"<=>\"), and EXPRESSION.\n\n`--demangle[=STYLE]'\n`--no-demangle'\n     These options control whether to demangle symbol names in error\n     messages and other output.  When the linker is told to demangle,\n     it tries to present symbol names in a readable fashion: it strips\n     leading underscores if they are used by the object file format,\n     and converts C++ mangled symbol names into user readable names.\n     Different compilers have different mangling styles.  The optional\n     demangling style argument can be used to choose an appropriate\n     demangling style for your compiler.  The linker will demangle by\n     default unless the environment variable `COLLECT_NO_DEMANGLE' is\n     set.  These options may be used to override the default.\n\n`-IFILE'\n`--dynamic-linker=FILE'\n     Set the name of the dynamic linker.  This is only meaningful when\n     generating dynamically linked ELF executables.  The default dynamic\n     linker is normally correct; don't use this unless you know what\n     you are doing.\n\n`--fatal-warnings'\n`--no-fatal-warnings'\n     Treat all warnings as errors.  The default behaviour can be\n     restored with the option `--no-fatal-warnings'.\n\n`--force-exe-suffix'\n     Make sure that an output file has a .exe suffix.\n\n     If a successfully built fully linked output file does not have a\n     `.exe' or `.dll' suffix, this option forces the linker to copy the\n     output file to one of the same name with a `.exe' suffix. This\n     option is useful when using unmodified Unix makefiles on a\n     Microsoft Windows host, since some versions of Windows won't run\n     an image unless it ends in a `.exe' suffix.\n\n`--gc-sections'\n`--no-gc-sections'\n     Enable garbage collection of unused input sections.  It is ignored\n     on targets that do not support this option.  The default behaviour\n     (of not performing this garbage collection) can be restored by\n     specifying `--no-gc-sections' on the command line.\n\n     `--gc-sections' decides which input sections are used by examining\n     symbols and relocations.  The section containing the entry symbol\n     and all sections containing symbols undefined on the command-line\n     will be kept, as will sections containing symbols referenced by\n     dynamic objects.  Note that when building shared libraries, the\n     linker must assume that any visible symbol is referenced.  Once\n     this initial set of sections has been determined, the linker\n     recursively marks as used any section referenced by their\n     relocations.  See `--entry' and `--undefined'.\n\n     This option can be set when doing a partial link (enabled with\n     option `-r').  In this case the root of symbols kept must be\n     explicitely specified either by an `--entry' or `--undefined'\n     option or by a `ENTRY' command in the linker script.\n\n`--print-gc-sections'\n`--no-print-gc-sections'\n     List all sections removed by garbage collection.  The listing is\n     printed on stderr.  This option is only effective if garbage\n     collection has been enabled via the `--gc-sections') option.  The\n     default behaviour (of not listing the sections that are removed)\n     can be restored by specifying `--no-print-gc-sections' on the\n     command line.\n\n`--help'\n     Print a summary of the command-line options on the standard output\n     and exit.\n\n`--target-help'\n     Print a summary of all target specific options on the standard\n     output and exit.\n\n`-Map=MAPFILE'\n     Print a link map to the file MAPFILE.  See the description of the\n     `-M' option, above.\n\n`--no-keep-memory'\n     `ld' normally optimizes for speed over memory usage by caching the\n     symbol tables of input files in memory.  This option tells `ld' to\n     instead optimize for memory usage, by rereading the symbol tables\n     as necessary.  This may be required if `ld' runs out of memory\n     space while linking a large executable.\n\n`--no-undefined'\n`-z defs'\n     Report unresolved symbol references from regular object files.\n     This is done even if the linker is creating a non-symbolic shared\n     library.  The switch `--[no-]allow-shlib-undefined' controls the\n     behaviour for reporting unresolved references found in shared\n     libraries being linked in.\n\n`--allow-multiple-definition'\n`-z muldefs'\n     Normally when a symbol is defined multiple times, the linker will\n     report a fatal error. These options allow multiple definitions and\n     the first definition will be used.\n\n`--allow-shlib-undefined'\n`--no-allow-shlib-undefined'\n     Allows or disallows undefined symbols in shared libraries.  This\n     switch is similar to `--no-undefined' except that it determines\n     the behaviour when the undefined symbols are in a shared library\n     rather than a regular object file.  It does not affect how\n     undefined symbols in regular object files are handled.\n\n     The default behaviour is to report errors for any undefined symbols\n     referenced in shared libraries if the linker is being used to\n     create an executable, but to allow them if the linker is being\n     used to create a shared library.\n\n     The reasons for allowing undefined symbol references in shared\n     libraries specified at link time are that:\n\n        * A shared library specified at link time may not be the same\n          as the one that is available at load time, so the symbol\n          might actually be resolvable at load time.\n\n        * There are some operating systems, eg BeOS and HPPA, where\n          undefined symbols in shared libraries are normal.\n\n          The BeOS kernel for example patches shared libraries at load\n          time to select whichever function is most appropriate for the\n          current architecture.  This is used, for example, to\n          dynamically select an appropriate memset function.\n\n`--no-undefined-version'\n     Normally when a symbol has an undefined version, the linker will\n     ignore it. This option disallows symbols with undefined version\n     and a fatal error will be issued instead.\n\n`--default-symver'\n     Create and use a default symbol version (the soname) for\n     unversioned exported symbols.\n\n`--default-imported-symver'\n     Create and use a default symbol version (the soname) for\n     unversioned imported symbols.\n\n`--no-warn-mismatch'\n     Normally `ld' will give an error if you try to link together input\n     files that are mismatched for some reason, perhaps because they\n     have been compiled for different processors or for different\n     endiannesses.  This option tells `ld' that it should silently\n     permit such possible errors.  This option should only be used with\n     care, in cases when you have taken some special action that\n     ensures that the linker errors are inappropriate.\n\n`--no-warn-search-mismatch'\n     Normally `ld' will give a warning if it finds an incompatible\n     library during a library search.  This option silences the warning.\n\n`--no-whole-archive'\n     Turn off the effect of the `--whole-archive' option for subsequent\n     archive files.\n\n`--noinhibit-exec'\n     Retain the executable output file whenever it is still usable.\n     Normally, the linker will not produce an output file if it\n     encounters errors during the link process; it exits without\n     writing an output file when it issues any error whatsoever.\n\n`-nostdlib'\n     Only search library directories explicitly specified on the\n     command line.  Library directories specified in linker scripts\n     (including linker scripts specified on the command line) are\n     ignored.\n\n`--oformat=OUTPUT-FORMAT'\n     `ld' may be configured to support more than one kind of object\n     file.  If your `ld' is configured this way, you can use the\n     `--oformat' option to specify the binary format for the output\n     object file.  Even when `ld' is configured to support alternative\n     object formats, you don't usually need to specify this, as `ld'\n     should be configured to produce as a default output format the most\n     usual format on each machine.  OUTPUT-FORMAT is a text string, the\n     name of a particular format supported by the BFD libraries.  (You\n     can list the available binary formats with `objdump -i'.)  The\n     script command `OUTPUT_FORMAT' can also specify the output format,\n     but this option overrides it.  *Note BFD::.\n\n`-pie'\n`--pic-executable'\n     Create a position independent executable.  This is currently only\n     supported on ELF platforms.  Position independent executables are\n     similar to shared libraries in that they are relocated by the\n     dynamic linker to the virtual address the OS chooses for them\n     (which can vary between invocations).  Like normal dynamically\n     linked executables they can be executed and symbols defined in the\n     executable cannot be overridden by shared libraries.\n\n`-qmagic'\n     This option is ignored for Linux compatibility.\n\n`-Qy'\n     This option is ignored for SVR4 compatibility.\n\n`--relax'\n     An option with machine dependent effects.  This option is only\n     supported on a few targets.  *Note `ld' and the H8/300: H8/300.\n     *Note `ld' and the Intel 960 family: i960.  *Note `ld' and Xtensa\n     Processors: Xtensa.  *Note `ld' and the 68HC11 and 68HC12:\n     M68HC11/68HC12.  *Note `ld' and PowerPC 32-bit ELF Support:\n     PowerPC ELF32.\n\n     On some platforms, the `--relax' option performs global\n     optimizations that become possible when the linker resolves\n     addressing in the program, such as relaxing address modes and\n     synthesizing new instructions in the output object file.\n\n     On some platforms these link time global optimizations may make\n     symbolic debugging of the resulting executable impossible.  This\n     is known to be the case for the Matsushita MN10200 and MN10300\n     family of processors.\n\n     On platforms where this is not supported, `--relax' is accepted,\n     but ignored.\n\n`--retain-symbols-file=FILENAME'\n     Retain _only_ the symbols listed in the file FILENAME, discarding\n     all others.  FILENAME is simply a flat file, with one symbol name\n     per line.  This option is especially useful in environments (such\n     as VxWorks) where a large global symbol table is accumulated\n     gradually, to conserve run-time memory.\n\n     `--retain-symbols-file' does _not_ discard undefined symbols, or\n     symbols needed for relocations.\n\n     You may only specify `--retain-symbols-file' once in the command\n     line.  It overrides `-s' and `-S'.\n\n`-rpath=DIR'\n     Add a directory to the runtime library search path.  This is used\n     when linking an ELF executable with shared objects.  All `-rpath'\n     arguments are concatenated and passed to the runtime linker, which\n     uses them to locate shared objects at runtime.  The `-rpath'\n     option is also used when locating shared objects which are needed\n     by shared objects explicitly included in the link; see the\n     description of the `-rpath-link' option.  If `-rpath' is not used\n     when linking an ELF executable, the contents of the environment\n     variable `LD_RUN_PATH' will be used if it is defined.\n\n     The `-rpath' option may also be used on SunOS.  By default, on\n     SunOS, the linker will form a runtime search patch out of all the\n     `-L' options it is given.  If a `-rpath' option is used, the\n     runtime search path will be formed exclusively using the `-rpath'\n     options, ignoring the `-L' options.  This can be useful when using\n     gcc, which adds many `-L' options which may be on NFS mounted file\n     systems.\n\n     For compatibility with other ELF linkers, if the `-R' option is\n     followed by a directory name, rather than a file name, it is\n     treated as the `-rpath' option.\n\n`-rpath-link=DIR'\n     When using ELF or SunOS, one shared library may require another.\n     This happens when an `ld -shared' link includes a shared library\n     as one of the input files.\n\n     When the linker encounters such a dependency when doing a\n     non-shared, non-relocatable link, it will automatically try to\n     locate the required shared library and include it in the link, if\n     it is not included explicitly.  In such a case, the `-rpath-link'\n     option specifies the first set of directories to search.  The\n     `-rpath-link' option may specify a sequence of directory names\n     either by specifying a list of names separated by colons, or by\n     appearing multiple times.\n\n     This option should be used with caution as it overrides the search\n     path that may have been hard compiled into a shared library. In\n     such a case it is possible to use unintentionally a different\n     search path than the runtime linker would do.\n\n     The linker uses the following search paths to locate required\n     shared libraries:\n       1. Any directories specified by `-rpath-link' options.\n\n       2. Any directories specified by `-rpath' options.  The difference\n          between `-rpath' and `-rpath-link' is that directories\n          specified by `-rpath' options are included in the executable\n          and used at runtime, whereas the `-rpath-link' option is only\n          effective at link time. Searching `-rpath' in this way is\n          only supported by native linkers and cross linkers which have\n          been configured with the `--with-sysroot' option.\n\n       3. On an ELF system, for native linkers, if the `-rpath' and\n          `-rpath-link' options were not used, search the contents of\n          the environment variable `LD_RUN_PATH'.\n\n       4. On SunOS, if the `-rpath' option was not used, search any\n          directories specified using `-L' options.\n\n       5. For a native linker, the search the contents of the\n          environment variable `LD_LIBRARY_PATH'.\n\n       6. For a native ELF linker, the directories in `DT_RUNPATH' or\n          `DT_RPATH' of a shared library are searched for shared\n          libraries needed by it. The `DT_RPATH' entries are ignored if\n          `DT_RUNPATH' entries exist.\n\n       7. The default directories, normally `/lib' and `/usr/lib'.\n\n       8. For a native linker on an ELF system, if the file\n          `/etc/ld.so.conf' exists, the list of directories found in\n          that file.\n\n     If the required shared library is not found, the linker will issue\n     a warning and continue with the link.\n\n`-shared'\n`-Bshareable'\n     Create a shared library.  This is currently only supported on ELF,\n     XCOFF and SunOS platforms.  On SunOS, the linker will\n     automatically create a shared library if the `-e' option is not\n     used and there are undefined symbols in the link.\n\n`--sort-common'\n`--sort-common=ascending'\n`--sort-common=descending'\n     This option tells `ld' to sort the common symbols by alignment in\n     ascending or descending order when it places them in the\n     appropriate output sections.  The symbol alignments considered are\n     sixteen-byte or larger, eight-byte, four-byte, two-byte, and\n     one-byte. This is to prevent gaps between symbols due to alignment\n     constraints.  If no sorting order is specified, then descending\n     order is assumed.\n\n`--sort-section=name'\n     This option will apply `SORT_BY_NAME' to all wildcard section\n     patterns in the linker script.\n\n`--sort-section=alignment'\n     This option will apply `SORT_BY_ALIGNMENT' to all wildcard section\n     patterns in the linker script.\n\n`--split-by-file[=SIZE]'\n     Similar to `--split-by-reloc' but creates a new output section for\n     each input file when SIZE is reached.  SIZE defaults to a size of\n     1 if not given.\n\n`--split-by-reloc[=COUNT]'\n     Tries to creates extra sections in the output file so that no\n     single output section in the file contains more than COUNT\n     relocations.  This is useful when generating huge relocatable\n     files for downloading into certain real time kernels with the COFF\n     object file format; since COFF cannot represent more than 65535\n     relocations in a single section.  Note that this will fail to work\n     with object file formats which do not support arbitrary sections.\n     The linker will not split up individual input sections for\n     redistribution, so if a single input section contains more than\n     COUNT relocations one output section will contain that many\n     relocations.  COUNT defaults to a value of 32768.\n\n`--stats'\n     Compute and display statistics about the operation of the linker,\n     such as execution time and memory usage.\n\n`--sysroot=DIRECTORY'\n     Use DIRECTORY as the location of the sysroot, overriding the\n     configure-time default.  This option is only supported by linkers\n     that were configured using `--with-sysroot'.\n\n`--traditional-format'\n     For some targets, the output of `ld' is different in some ways from\n     the output of some existing linker.  This switch requests `ld' to\n     use the traditional format instead.\n\n     For example, on SunOS, `ld' combines duplicate entries in the\n     symbol string table.  This can reduce the size of an output file\n     with full debugging information by over 30 percent.\n     Unfortunately, the SunOS `dbx' program can not read the resulting\n     program (`gdb' has no trouble).  The `--traditional-format' switch\n     tells `ld' to not combine duplicate entries.\n\n`--section-start=SECTIONNAME=ORG'\n     Locate a section in the output file at the absolute address given\n     by ORG.  You may use this option as many times as necessary to\n     locate multiple sections in the command line.  ORG must be a\n     single hexadecimal integer; for compatibility with other linkers,\n     you may omit the leading `0x' usually associated with hexadecimal\n     values.  _Note:_ there should be no white space between\n     SECTIONNAME, the equals sign (\"<=>\"), and ORG.\n\n`-Tbss=ORG'\n`-Tdata=ORG'\n`-Ttext=ORG'\n     Same as `--section-start', with `.bss', `.data' or `.text' as the\n     SECTIONNAME.\n\n`-Ttext-segment=ORG'\n     When creating an ELF executable or shared object, it will set the\n     address of the first byte of the text segment.\n\n`--unresolved-symbols=METHOD'\n     Determine how to handle unresolved symbols.  There are four\n     possible values for `method':\n\n    `ignore-all'\n          Do not report any unresolved symbols.\n\n    `report-all'\n          Report all unresolved symbols.  This is the default.\n\n    `ignore-in-object-files'\n          Report unresolved symbols that are contained in shared\n          libraries, but ignore them if they come from regular object\n          files.\n\n    `ignore-in-shared-libs'\n          Report unresolved symbols that come from regular object\n          files, but ignore them if they come from shared libraries.\n          This can be useful when creating a dynamic binary and it is\n          known that all the shared libraries that it should be\n          referencing are included on the linker's command line.\n\n     The behaviour for shared libraries on their own can also be\n     controlled by the `--[no-]allow-shlib-undefined' option.\n\n     Normally the linker will generate an error message for each\n     reported unresolved symbol but the option\n     `--warn-unresolved-symbols' can change this to a warning.\n\n`--dll-verbose'\n`--verbose'\n     Display the version number for `ld' and list the linker emulations\n     supported.  Display which input files can and cannot be opened.\n     Display the linker script being used by the linker.\n\n`--version-script=VERSION-SCRIPTFILE'\n     Specify the name of a version script to the linker.  This is\n     typically used when creating shared libraries to specify\n     additional information about the version hierarchy for the library\n     being created.  This option is only fully supported on ELF\n     platforms which support shared libraries; see *Note VERSION::.  It\n     is partially supported on PE platforms, which can use version\n     scripts to filter symbol visibility in auto-export mode: any\n     symbols marked `local' in the version script will not be exported.\n     *Note WIN32::.\n\n`--warn-common'\n     Warn when a common symbol is combined with another common symbol\n     or with a symbol definition.  Unix linkers allow this somewhat\n     sloppy practise, but linkers on some other operating systems do\n     not.  This option allows you to find potential problems from\n     combining global symbols.  Unfortunately, some C libraries use\n     this practise, so you may get some warnings about symbols in the\n     libraries as well as in your programs.\n\n     There are three kinds of global symbols, illustrated here by C\n     examples:\n\n    `int i = 1;'\n          A definition, which goes in the initialized data section of\n          the output file.\n\n    `extern int i;'\n          An undefined reference, which does not allocate space.  There\n          must be either a definition or a common symbol for the\n          variable somewhere.\n\n    `int i;'\n          A common symbol.  If there are only (one or more) common\n          symbols for a variable, it goes in the uninitialized data\n          area of the output file.  The linker merges multiple common\n          symbols for the same variable into a single symbol.  If they\n          are of different sizes, it picks the largest size.  The\n          linker turns a common symbol into a declaration, if there is\n          a definition of the same variable.\n\n     The `--warn-common' option can produce five kinds of warnings.\n     Each warning consists of a pair of lines: the first describes the\n     symbol just encountered, and the second describes the previous\n     symbol encountered with the same name.  One or both of the two\n     symbols will be a common symbol.\n\n       1. Turning a common symbol into a reference, because there is\n          already a definition for the symbol.\n               FILE(SECTION): warning: common of `SYMBOL'\n                  overridden by definition\n               FILE(SECTION): warning: defined here\n\n       2. Turning a common symbol into a reference, because a later\n          definition for the symbol is encountered.  This is the same\n          as the previous case, except that the symbols are encountered\n          in a different order.\n               FILE(SECTION): warning: definition of `SYMBOL'\n                  overriding common\n               FILE(SECTION): warning: common is here\n\n       3. Merging a common symbol with a previous same-sized common\n          symbol.\n               FILE(SECTION): warning: multiple common\n                  of `SYMBOL'\n               FILE(SECTION): warning: previous common is here\n\n       4. Merging a common symbol with a previous larger common symbol.\n               FILE(SECTION): warning: common of `SYMBOL'\n                  overridden by larger common\n               FILE(SECTION): warning: larger common is here\n\n       5. Merging a common symbol with a previous smaller common\n          symbol.  This is the same as the previous case, except that\n          the symbols are encountered in a different order.\n               FILE(SECTION): warning: common of `SYMBOL'\n                  overriding smaller common\n               FILE(SECTION): warning: smaller common is here\n\n`--warn-constructors'\n     Warn if any global constructors are used.  This is only useful for\n     a few object file formats.  For formats like COFF or ELF, the\n     linker can not detect the use of global constructors.\n\n`--warn-multiple-gp'\n     Warn if multiple global pointer values are required in the output\n     file.  This is only meaningful for certain processors, such as the\n     Alpha.  Specifically, some processors put large-valued constants\n     in a special section.  A special register (the global pointer)\n     points into the middle of this section, so that constants can be\n     loaded efficiently via a base-register relative addressing mode.\n     Since the offset in base-register relative mode is fixed and\n     relatively small (e.g., 16 bits), this limits the maximum size of\n     the constant pool.  Thus, in large programs, it is often necessary\n     to use multiple global pointer values in order to be able to\n     address all possible constants.  This option causes a warning to\n     be issued whenever this case occurs.\n\n`--warn-once'\n     Only warn once for each undefined symbol, rather than once per\n     module which refers to it.\n\n`--warn-section-align'\n     Warn if the address of an output section is changed because of\n     alignment.  Typically, the alignment will be set by an input\n     section.  The address will only be changed if it not explicitly\n     specified; that is, if the `SECTIONS' command does not specify a\n     start address for the section (*note SECTIONS::).\n\n`--warn-shared-textrel'\n     Warn if the linker adds a DT_TEXTREL to a shared object.\n\n`--warn-alternate-em'\n     Warn if an object has alternate ELF machine code.\n\n`--warn-unresolved-symbols'\n     If the linker is going to report an unresolved symbol (see the\n     option `--unresolved-symbols') it will normally generate an error.\n     This option makes it generate a warning instead.\n\n`--error-unresolved-symbols'\n     This restores the linker's default behaviour of generating errors\n     when it is reporting unresolved symbols.\n\n`--whole-archive'\n     For each archive mentioned on the command line after the\n     `--whole-archive' option, include every object file in the archive\n     in the link, rather than searching the archive for the required\n     object files.  This is normally used to turn an archive file into\n     a shared library, forcing every object to be included in the\n     resulting shared library.  This option may be used more than once.\n\n     Two notes when using this option from gcc: First, gcc doesn't know\n     about this option, so you have to use `-Wl,-whole-archive'.\n     Second, don't forget to use `-Wl,-no-whole-archive' after your\n     list of archives, because gcc will add its own list of archives to\n     your link and you may not want this flag to affect those as well.\n\n`--wrap=SYMBOL'\n     Use a wrapper function for SYMBOL.  Any undefined reference to\n     SYMBOL will be resolved to `__wrap_SYMBOL'.  Any undefined\n     reference to `__real_SYMBOL' will be resolved to SYMBOL.\n\n     This can be used to provide a wrapper for a system function.  The\n     wrapper function should be called `__wrap_SYMBOL'.  If it wishes\n     to call the system function, it should call `__real_SYMBOL'.\n\n     Here is a trivial example:\n\n          void *\n          __wrap_malloc (size_t c)\n          {\n            printf (\"malloc called with %zu\\n\", c);\n            return __real_malloc (c);\n          }\n\n     If you link other code with this file using `--wrap malloc', then\n     all calls to `malloc' will call the function `__wrap_malloc'\n     instead.  The call to `__real_malloc' in `__wrap_malloc' will call\n     the real `malloc' function.\n\n     You may wish to provide a `__real_malloc' function as well, so that\n     links without the `--wrap' option will succeed.  If you do this,\n     you should not put the definition of `__real_malloc' in the same\n     file as `__wrap_malloc'; if you do, the assembler may resolve the\n     call before the linker has a chance to wrap it to `malloc'.\n\n`--eh-frame-hdr'\n     Request creation of `.eh_frame_hdr' section and ELF\n     `PT_GNU_EH_FRAME' segment header.\n\n`--enable-new-dtags'\n`--disable-new-dtags'\n     This linker can create the new dynamic tags in ELF. But the older\n     ELF systems may not understand them. If you specify\n     `--enable-new-dtags', the dynamic tags will be created as needed.\n     If you specify `--disable-new-dtags', no new dynamic tags will be\n     created. By default, the new dynamic tags are not created. Note\n     that those options are only available for ELF systems.\n\n`--hash-size=NUMBER'\n     Set the default size of the linker's hash tables to a prime number\n     close to NUMBER.  Increasing this value can reduce the length of\n     time it takes the linker to perform its tasks, at the expense of\n     increasing the linker's memory requirements.  Similarly reducing\n     this value can reduce the memory requirements at the expense of\n     speed.\n\n`--hash-style=STYLE'\n     Set the type of linker's hash table(s).  STYLE can be either\n     `sysv' for classic ELF `.hash' section, `gnu' for new style GNU\n     `.gnu.hash' section or `both' for both the classic ELF `.hash' and\n     new style GNU `.gnu.hash' hash tables.  The default is `sysv'.\n\n`--reduce-memory-overheads'\n     This option reduces memory requirements at ld runtime, at the\n     expense of linking speed.  This was introduced to select the old\n     O(n^2) algorithm for link map file generation, rather than the new\n     O(n) algorithm which uses about 40% more memory for symbol storage.\n\n     Another effect of the switch is to set the default hash table size\n     to 1021, which again saves memory at the cost of lengthening the\n     linker's run time.  This is not done however if the `--hash-size'\n     switch has been used.\n\n     The `--reduce-memory-overheads' switch may be also be used to\n     enable other tradeoffs in future versions of the linker.\n\n`--build-id'\n`--build-id=STYLE'\n     Request creation of `.note.gnu.build-id' ELF note section.  The\n     contents of the note are unique bits identifying this linked file.\n     STYLE can be `uuid' to use 128 random bits, `sha1' to use a\n     160-bit SHA1 hash on the normative parts of the output contents,\n     `md5' to use a 128-bit MD5 hash on the normative parts of the\n     output contents, or `0xHEXSTRING' to use a chosen bit string\n     specified as an even number of hexadecimal digits (`-' and `:'\n     characters between digit pairs are ignored).  If STYLE is omitted,\n     `sha1' is used.\n\n     The `md5' and `sha1' styles produces an identifier that is always\n     the same in an identical output file, but will be unique among all\n     nonidentical output files.  It is not intended to be compared as a\n     checksum for the file's contents.  A linked file may be changed\n     later by other tools, but the build ID bit string identifying the\n     original linked file does not change.\n\n     Passing `none' for STYLE disables the setting from any\n     `--build-id' options earlier on the command line.\n\n2.1.1 Options Specific to i386 PE Targets\n-----------------------------------------\n\nThe i386 PE linker supports the `-shared' option, which causes the\noutput to be a dynamically linked library (DLL) instead of a normal\nexecutable.  You should name the output `*.dll' when you use this\noption.  In addition, the linker fully supports the standard `*.def'\nfiles, which may be specified on the linker command line like an object\nfile (in fact, it should precede archives it exports symbols from, to\nensure that they get linked in, just like a normal object file).\n\n   In addition to the options common to all targets, the i386 PE linker\nsupport additional command line options that are specific to the i386\nPE target.  Options that take values may be separated from their values\nby either a space or an equals sign.\n\n`--add-stdcall-alias'\n     If given, symbols with a stdcall suffix (@NN) will be exported\n     as-is and also with the suffix stripped.  [This option is specific\n     to the i386 PE targeted port of the linker]\n\n`--base-file FILE'\n     Use FILE as the name of a file in which to save the base addresses\n     of all the relocations needed for generating DLLs with `dlltool'.\n     [This is an i386 PE specific option]\n\n`--dll'\n     Create a DLL instead of a regular executable.  You may also use\n     `-shared' or specify a `LIBRARY' in a given `.def' file.  [This\n     option is specific to the i386 PE targeted port of the linker]\n\n`--enable-long-section-names'\n`--disable-long-section-names'\n     The PE variants of the Coff object format add an extension that\n     permits the use of section names longer than eight characters, the\n     normal limit for Coff.  By default, these names are only allowed\n     in object files, as fully-linked executable images do not carry\n     the Coff string table required to support the longer names.  As a\n     GNU extension, it is possible to allow their use in executable\n     images as well, or to (probably pointlessly!)  disallow it in\n     object files, by using these two options.  Executable images\n     generated with these long section names are slightly non-standard,\n     carrying as they do a string table, and may generate confusing\n     output when examined with non-GNU PE-aware tools, such as file\n     viewers and dumpers.  However, GDB relies on the use of PE long\n     section names to find Dwarf-2 debug information sections in an\n     executable image at runtime, and so if neither option is specified\n     on the command-line, `ld' will enable long section names,\n     overriding the default and technically correct behaviour, when it\n     finds the presence of debug information while linking an executable\n     image and not stripping symbols.  [This option is valid for all PE\n     targeted ports of the linker]\n\n`--enable-stdcall-fixup'\n`--disable-stdcall-fixup'\n     If the link finds a symbol that it cannot resolve, it will attempt\n     to do \"fuzzy linking\" by looking for another defined symbol that\n     differs only in the format of the symbol name (cdecl vs stdcall)\n     and will resolve that symbol by linking to the match.  For\n     example, the undefined symbol `_foo' might be linked to the\n     function `_foo@12', or the undefined symbol `_bar@16' might be\n     linked to the function `_bar'.  When the linker does this, it\n     prints a warning, since it normally should have failed to link,\n     but sometimes import libraries generated from third-party dlls may\n     need this feature to be usable.  If you specify\n     `--enable-stdcall-fixup', this feature is fully enabled and\n     warnings are not printed.  If you specify\n     `--disable-stdcall-fixup', this feature is disabled and such\n     mismatches are considered to be errors.  [This option is specific\n     to the i386 PE targeted port of the linker]\n\n`--export-all-symbols'\n     If given, all global symbols in the objects used to build a DLL\n     will be exported by the DLL.  Note that this is the default if\n     there otherwise wouldn't be any exported symbols.  When symbols are\n     explicitly exported via DEF files or implicitly exported via\n     function attributes, the default is to not export anything else\n     unless this option is given.  Note that the symbols `DllMain@12',\n     `DllEntryPoint@0', `DllMainCRTStartup@12', and `impure_ptr' will\n     not be automatically exported.  Also, symbols imported from other\n     DLLs will not be re-exported, nor will symbols specifying the\n     DLL's internal layout such as those beginning with `_head_' or\n     ending with `_iname'.  In addition, no symbols from `libgcc',\n     `libstd++', `libmingw32', or `crtX.o' will be exported.  Symbols\n     whose names begin with `__rtti_' or `__builtin_' will not be\n     exported, to help with C++ DLLs.  Finally, there is an extensive\n     list of cygwin-private symbols that are not exported (obviously,\n     this applies on when building DLLs for cygwin targets).  These\n     cygwin-excludes are: `_cygwin_dll_entry@12',\n     `_cygwin_crt0_common@8', `_cygwin_noncygwin_dll_entry@12',\n     `_fmode', `_impure_ptr', `cygwin_attach_dll', `cygwin_premain0',\n     `cygwin_premain1', `cygwin_premain2', `cygwin_premain3', and\n     `environ'.  [This option is specific to the i386 PE targeted port\n     of the linker]\n\n`--exclude-symbols SYMBOL,SYMBOL,...'\n     Specifies a list of symbols which should not be automatically\n     exported.  The symbol names may be delimited by commas or colons.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--file-alignment'\n     Specify the file alignment.  Sections in the file will always\n     begin at file offsets which are multiples of this number.  This\n     defaults to 512.  [This option is specific to the i386 PE targeted\n     port of the linker]\n\n`--heap RESERVE'\n`--heap RESERVE,COMMIT'\n     Specify the number of bytes of memory to reserve (and optionally\n     commit) to be used as heap for this program.  The default is 1Mb\n     reserved, 4K committed.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--image-base VALUE'\n     Use VALUE as the base address of your program or dll.  This is the\n     lowest memory location that will be used when your program or dll\n     is loaded.  To reduce the need to relocate and improve performance\n     of your dlls, each should have a unique base address and not\n     overlap any other dlls.  The default is 0x400000 for executables,\n     and 0x10000000 for dlls.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--kill-at'\n     If given, the stdcall suffixes (@NN) will be stripped from symbols\n     before they are exported.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--large-address-aware'\n     If given, the appropriate bit in the \"Characteristics\" field of\n     the COFF header is set to indicate that this executable supports\n     virtual addresses greater than 2 gigabytes.  This should be used\n     in conjunction with the /3GB or /USERVA=VALUE megabytes switch in\n     the \"[operating systems]\" section of the BOOT.INI.  Otherwise,\n     this bit has no effect.  [This option is specific to PE targeted\n     ports of the linker]\n\n`--major-image-version VALUE'\n     Sets the major number of the \"image version\".  Defaults to 1.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--major-os-version VALUE'\n     Sets the major number of the \"os version\".  Defaults to 4.  [This\n     option is specific to the i386 PE targeted port of the linker]\n\n`--major-subsystem-version VALUE'\n     Sets the major number of the \"subsystem version\".  Defaults to 4.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--minor-image-version VALUE'\n     Sets the minor number of the \"image version\".  Defaults to 0.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--minor-os-version VALUE'\n     Sets the minor number of the \"os version\".  Defaults to 0.  [This\n     option is specific to the i386 PE targeted port of the linker]\n\n`--minor-subsystem-version VALUE'\n     Sets the minor number of the \"subsystem version\".  Defaults to 0.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--output-def FILE'\n     The linker will create the file FILE which will contain a DEF file\n     corresponding to the DLL the linker is generating.  This DEF file\n     (which should be called `*.def') may be used to create an import\n     library with `dlltool' or may be used as a reference to\n     automatically or implicitly exported symbols.  [This option is\n     specific to the i386 PE targeted port of the linker]\n\n`--out-implib FILE'\n     The linker will create the file FILE which will contain an import\n     lib corresponding to the DLL the linker is generating. This import\n     lib (which should be called `*.dll.a' or `*.a' may be used to link\n     clients against the generated DLL; this behaviour makes it\n     possible to skip a separate `dlltool' import library creation step.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--enable-auto-image-base'\n     Automatically choose the image base for DLLs, unless one is\n     specified using the `--image-base' argument.  By using a hash\n     generated from the dllname to create unique image bases for each\n     DLL, in-memory collisions and relocations which can delay program\n     execution are avoided.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--disable-auto-image-base'\n     Do not automatically generate a unique image base.  If there is no\n     user-specified image base (`--image-base') then use the platform\n     default.  [This option is specific to the i386 PE targeted port of\n     the linker]\n\n`--dll-search-prefix STRING'\n     When linking dynamically to a dll without an import library,\n     search for `<string><basename>.dll' in preference to\n     `lib<basename>.dll'. This behaviour allows easy distinction\n     between DLLs built for the various \"subplatforms\": native, cygwin,\n     uwin, pw, etc.  For instance, cygwin DLLs typically use\n     `--dll-search-prefix=cyg'.  [This option is specific to the i386\n     PE targeted port of the linker]\n\n`--enable-auto-import'\n     Do sophisticated linking of `_symbol' to `__imp__symbol' for DATA\n     imports from DLLs, and create the necessary thunking symbols when\n     building the import libraries with those DATA exports. Note: Use\n     of the 'auto-import' extension will cause the text section of the\n     image file to be made writable. This does not conform to the\n     PE-COFF format specification published by Microsoft.\n\n     Note - use of the 'auto-import' extension will also cause read only\n     data which would normally be placed into the .rdata section to be\n     placed into the .data section instead.  This is in order to work\n     around a problem with consts that is described here:\n     http://www.cygwin.com/ml/cygwin/2004-09/msg01101.html\n\n     Using 'auto-import' generally will 'just work' - but sometimes you\n     may see this message:\n\n     \"variable '<var>' can't be auto-imported. Please read the\n     documentation for ld's `--enable-auto-import' for details.\"\n\n     This message occurs when some (sub)expression accesses an address\n     ultimately given by the sum of two constants (Win32 import tables\n     only allow one).  Instances where this may occur include accesses\n     to member fields of struct variables imported from a DLL, as well\n     as using a constant index into an array variable imported from a\n     DLL.  Any multiword variable (arrays, structs, long long, etc) may\n     trigger this error condition.  However, regardless of the exact\n     data type of the offending exported variable, ld will always\n     detect it, issue the warning, and exit.\n\n     There are several ways to address this difficulty, regardless of\n     the data type of the exported variable:\n\n     One way is to use -enable-runtime-pseudo-reloc switch. This leaves\n     the task of adjusting references in your client code for runtime\n     environment, so this method works only when runtime environment\n     supports this feature.\n\n     A second solution is to force one of the 'constants' to be a\n     variable - that is, unknown and un-optimizable at compile time.\n     For arrays, there are two possibilities: a) make the indexee (the\n     array's address) a variable, or b) make the 'constant' index a\n     variable.  Thus:\n\n          extern type extern_array[];\n          extern_array[1] -->\n             { volatile type *t=extern_array; t[1] }\n\n     or\n\n          extern type extern_array[];\n          extern_array[1] -->\n             { volatile int t=1; extern_array[t] }\n\n     For structs (and most other multiword data types) the only option\n     is to make the struct itself (or the long long, or the ...)\n     variable:\n\n          extern struct s extern_struct;\n          extern_struct.field -->\n             { volatile struct s *t=&extern_struct; t->field }\n\n     or\n\n          extern long long extern_ll;\n          extern_ll -->\n            { volatile long long * local_ll=&extern_ll; *local_ll }\n\n     A third method of dealing with this difficulty is to abandon\n     'auto-import' for the offending symbol and mark it with\n     `__declspec(dllimport)'.  However, in practise that requires using\n     compile-time #defines to indicate whether you are building a DLL,\n     building client code that will link to the DLL, or merely\n     building/linking to a static library.   In making the choice\n     between the various methods of resolving the 'direct address with\n     constant offset' problem, you should consider typical real-world\n     usage:\n\n     Original:\n          --foo.h\n          extern int arr[];\n          --foo.c\n          #include \"foo.h\"\n          void main(int argc, char **argv){\n            printf(\"%d\\n\",arr[1]);\n          }\n\n     Solution 1:\n          --foo.h\n          extern int arr[];\n          --foo.c\n          #include \"foo.h\"\n          void main(int argc, char **argv){\n            /* This workaround is for win32 and cygwin; do not \"optimize\" */\n            volatile int *parr = arr;\n            printf(\"%d\\n\",parr[1]);\n          }\n\n     Solution 2:\n          --foo.h\n          /* Note: auto-export is assumed (no __declspec(dllexport)) */\n          #if (defined(_WIN32) || defined(__CYGWIN__)) && \\\n            !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))\n          #define FOO_IMPORT __declspec(dllimport)\n          #else\n          #define FOO_IMPORT\n          #endif\n          extern FOO_IMPORT int arr[];\n          --foo.c\n          #include \"foo.h\"\n          void main(int argc, char **argv){\n            printf(\"%d\\n\",arr[1]);\n          }\n\n     A fourth way to avoid this problem is to re-code your library to\n     use a functional interface rather than a data interface for the\n     offending variables (e.g. set_foo() and get_foo() accessor\n     functions).  [This option is specific to the i386 PE targeted port\n     of the linker]\n\n`--disable-auto-import'\n     Do not attempt to do sophisticated linking of `_symbol' to\n     `__imp__symbol' for DATA imports from DLLs.  [This option is\n     specific to the i386 PE targeted port of the linker]\n\n`--enable-runtime-pseudo-reloc'\n     If your code contains expressions described in -enable-auto-import\n     section, that is, DATA imports from DLL with non-zero offset, this\n     switch will create a vector of 'runtime pseudo relocations' which\n     can be used by runtime environment to adjust references to such\n     data in your client code.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--disable-runtime-pseudo-reloc'\n     Do not create pseudo relocations for non-zero offset DATA imports\n     from DLLs.  This is the default.  [This option is specific to the\n     i386 PE targeted port of the linker]\n\n`--enable-extra-pe-debug'\n     Show additional debug info related to auto-import symbol thunking.\n     [This option is specific to the i386 PE targeted port of the\n     linker]\n\n`--section-alignment'\n     Sets the section alignment.  Sections in memory will always begin\n     at addresses which are a multiple of this number.  Defaults to\n     0x1000.  [This option is specific to the i386 PE targeted port of\n     the linker]\n\n`--stack RESERVE'\n`--stack RESERVE,COMMIT'\n     Specify the number of bytes of memory to reserve (and optionally\n     commit) to be used as stack for this program.  The default is 2Mb\n     reserved, 4K committed.  [This option is specific to the i386 PE\n     targeted port of the linker]\n\n`--subsystem WHICH'\n`--subsystem WHICH:MAJOR'\n`--subsystem WHICH:MAJOR.MINOR'\n     Specifies the subsystem under which your program will execute.  The\n     legal values for WHICH are `native', `windows', `console',\n     `posix', and `xbox'.  You may optionally set the subsystem version\n     also.  Numeric values are also accepted for WHICH.  [This option\n     is specific to the i386 PE targeted port of the linker]\n\n     The following options set flags in the `DllCharacteristics' field\n     of the PE file header: [These options are specific to PE targeted\n     ports of the linker]\n\n`--dynamicbase'\n     The image base address may be relocated using address space layout\n     randomization (ASLR).  This feature was introduced with MS Windows\n     Vista for i386 PE targets.\n\n`--forceinteg'\n     Code integrity checks are enforced.\n\n`--nxcompat'\n     The image is compatible with the Data Execution Prevention.  This\n     feature was introduced with MS Windows XP SP2 for i386 PE targets.\n\n`--no-isolation'\n     Although the image understands isolation, do not isolate the image.\n\n`--no-seh'\n     The image does not use SEH. No SE handler may be called from this\n     image.\n\n`--no-bind'\n     Do not bind this image.\n\n`--wdmdriver'\n     The driver uses the MS Windows Driver Model.\n\n`--tsaware'\n     The image is Terminal Server aware.\n\n\n2.1.2 Options specific to Motorola 68HC11 and 68HC12 targets\n------------------------------------------------------------\n\nThe 68HC11 and 68HC12 linkers support specific options to control the\nmemory bank switching mapping and trampoline code generation.\n\n`--no-trampoline'\n     This option disables the generation of trampoline. By default a\n     trampoline is generated for each far function which is called\n     using a `jsr' instruction (this happens when a pointer to a far\n     function is taken).\n\n`--bank-window NAME'\n     This option indicates to the linker the name of the memory region\n     in the `MEMORY' specification that describes the memory bank\n     window.  The definition of such region is then used by the linker\n     to compute paging and addresses within the memory window.\n\n\n2.1.3 Options specific to Motorola 68K target\n---------------------------------------------\n\nThe following options are supported to control handling of GOT\ngeneration when linking for 68K targets.\n\n`--got=TYPE'\n     This option tells the linker which GOT generation scheme to use.\n     TYPE should be one of `single', `negative', `multigot' or\n     `target'.  For more information refer to the Info entry for `ld'.\n\n\n\u001f\nFile: ld.info,  Node: Environment,  Prev: Options,  Up: Invocation\n\n2.2 Environment Variables\n=========================\n\nYou can change the behaviour of `ld' with the environment variables\n`GNUTARGET', `LDEMULATION' and `COLLECT_NO_DEMANGLE'.\n\n   `GNUTARGET' determines the input-file object format if you don't use\n`-b' (or its synonym `--format').  Its value should be one of the BFD\nnames for an input format (*note BFD::).  If there is no `GNUTARGET' in\nthe environment, `ld' uses the natural format of the target. If\n`GNUTARGET' is set to `default' then BFD attempts to discover the input\nformat by examining binary input files; this method often succeeds, but\nthere are potential ambiguities, since there is no method of ensuring\nthat the magic number used to specify object-file formats is unique.\nHowever, the configuration procedure for BFD on each system places the\nconventional format for that system first in the search-list, so\nambiguities are resolved in favor of convention.\n\n   `LDEMULATION' determines the default emulation if you don't use the\n`-m' option.  The emulation can affect various aspects of linker\nbehaviour, particularly the default linker script.  You can list the\navailable emulations with the `--verbose' or `-V' options.  If the `-m'\noption is not used, and the `LDEMULATION' environment variable is not\ndefined, the default emulation depends upon how the linker was\nconfigured.\n\n   Normally, the linker will default to demangling symbols.  However, if\n`COLLECT_NO_DEMANGLE' is set in the environment, then it will default\nto not demangling symbols.  This environment variable is used in a\nsimilar fashion by the `gcc' linker wrapper program.  The default may\nbe overridden by the `--demangle' and `--no-demangle' options.\n\n\u001f\nFile: ld.info,  Node: Scripts,  Next: Machine Dependent,  Prev: Invocation,  Up: Top\n\n3 Linker Scripts\n****************\n\nEvery link is controlled by a \"linker script\".  This script is written\nin the linker command language.\n\n   The main purpose of the linker script is to describe how the\nsections in the input files should be mapped into the output file, and\nto control the memory layout of the output file.  Most linker scripts\ndo nothing more than this.  However, when necessary, the linker script\ncan also direct the linker to perform many other operations, using the\ncommands described below.\n\n   The linker always uses a linker script.  If you do not supply one\nyourself, the linker will use a default script that is compiled into the\nlinker executable.  You can use the `--verbose' command line option to\ndisplay the default linker script.  Certain command line options, such\nas `-r' or `-N', will affect the default linker script.\n\n   You may supply your own linker script by using the `-T' command line\noption.  When you do this, your linker script will replace the default\nlinker script.\n\n   You may also use linker scripts implicitly by naming them as input\nfiles to the linker, as though they were files to be linked.  *Note\nImplicit Linker Scripts::.\n\n* Menu:\n\n* Basic Script Concepts::\tBasic Linker Script Concepts\n* Script Format::\t\tLinker Script Format\n* Simple Example::\t\tSimple Linker Script Example\n* Simple Commands::\t\tSimple Linker Script Commands\n* Assignments::\t\t\tAssigning Values to Symbols\n* SECTIONS::\t\t\tSECTIONS Command\n* MEMORY::\t\t\tMEMORY Command\n* PHDRS::\t\t\tPHDRS Command\n* VERSION::\t\t\tVERSION Command\n* Expressions::\t\t\tExpressions in Linker Scripts\n* Implicit Linker Scripts::\tImplicit Linker Scripts\n\n\u001f\nFile: ld.info,  Node: Basic Script Concepts,  Next: Script Format,  Up: Scripts\n\n3.1 Basic Linker Script Concepts\n================================\n\nWe need to define some basic concepts and vocabulary in order to\ndescribe the linker script language.\n\n   The linker combines input files into a single output file.  The\noutput file and each input file are in a special data format known as an\n\"object file format\".  Each file is called an \"object file\".  The\noutput file is often called an \"executable\", but for our purposes we\nwill also call it an object file.  Each object file has, among other\nthings, a list of \"sections\".  We sometimes refer to a section in an\ninput file as an \"input section\"; similarly, a section in the output\nfile is an \"output section\".\n\n   Each section in an object file has a name and a size.  Most sections\nalso have an associated block of data, known as the \"section contents\".\nA section may be marked as \"loadable\", which mean that the contents\nshould be loaded into memory when the output file is run.  A section\nwith no contents may be \"allocatable\", which means that an area in\nmemory should be set aside, but nothing in particular should be loaded\nthere (in some cases this memory must be zeroed out).  A section which\nis neither loadable nor allocatable typically contains some sort of\ndebugging information.\n\n   Every loadable or allocatable output section has two addresses.  The\nfirst is the \"VMA\", or virtual memory address.  This is the address the\nsection will have when the output file is run.  The second is the\n\"LMA\", or load memory address.  This is the address at which the\nsection will be loaded.  In most cases the two addresses will be the\nsame.  An example of when they might be different is when a data section\nis loaded into ROM, and then copied into RAM when the program starts up\n(this technique is often used to initialize global variables in a ROM\nbased system).  In this case the ROM address would be the LMA, and the\nRAM address would be the VMA.\n\n   You can see the sections in an object file by using the `objdump'\nprogram with the `-h' option.\n\n   Every object file also has a list of \"symbols\", known as the \"symbol\ntable\".  A symbol may be defined or undefined.  Each symbol has a name,\nand each defined symbol has an address, among other information.  If\nyou compile a C or C++ program into an object file, you will get a\ndefined symbol for every defined function and global or static\nvariable.  Every undefined function or global variable which is\nreferenced in the input file will become an undefined symbol.\n\n   You can see the symbols in an object file by using the `nm' program,\nor by using the `objdump' program with the `-t' option.\n\n\u001f\nFile: ld.info,  Node: Script Format,  Next: Simple Example,  Prev: Basic Script Concepts,  Up: Scripts\n\n3.2 Linker Script Format\n========================\n\nLinker scripts are text files.\n\n   You write a linker script as a series of commands.  Each command is\neither a keyword, possibly followed by arguments, or an assignment to a\nsymbol.  You may separate commands using semicolons.  Whitespace is\ngenerally ignored.\n\n   Strings such as file or format names can normally be entered\ndirectly.  If the file name contains a character such as a comma which\nwould otherwise serve to separate file names, you may put the file name\nin double quotes.  There is no way to use a double quote character in a\nfile name.\n\n   You may include comments in linker scripts just as in C, delimited by\n`/*' and `*/'.  As in C, comments are syntactically equivalent to\nwhitespace.\n\n\u001f\nFile: ld.info,  Node: Simple Example,  Next: Simple Commands,  Prev: Script Format,  Up: Scripts\n\n3.3 Simple Linker Script Example\n================================\n\nMany linker scripts are fairly simple.\n\n   The simplest possible linker script has just one command:\n`SECTIONS'.  You use the `SECTIONS' command to describe the memory\nlayout of the output file.\n\n   The `SECTIONS' command is a powerful command.  Here we will describe\na simple use of it.  Let's assume your program consists only of code,\ninitialized data, and uninitialized data.  These will be in the\n`.text', `.data', and `.bss' sections, respectively.  Let's assume\nfurther that these are the only sections which appear in your input\nfiles.\n\n   For this example, let's say that the code should be loaded at address\n0x10000, and that the data should start at address 0x8000000.  Here is a\nlinker script which will do that:\n     SECTIONS\n     {\n       . = 0x10000;\n       .text : { *(.text) }\n       . = 0x8000000;\n       .data : { *(.data) }\n       .bss : { *(.bss) }\n     }\n\n   You write the `SECTIONS' command as the keyword `SECTIONS', followed\nby a series of symbol assignments and output section descriptions\nenclosed in curly braces.\n\n   The first line inside the `SECTIONS' command of the above example\nsets the value of the special symbol `.', which is the location\ncounter.  If you do not specify the address of an output section in some\nother way (other ways are described later), the address is set from the\ncurrent value of the location counter.  The location counter is then\nincremented by the size of the output section.  At the start of the\n`SECTIONS' command, the location counter has the value `0'.\n\n   The second line defines an output section, `.text'.  The colon is\nrequired syntax which may be ignored for now.  Within the curly braces\nafter the output section name, you list the names of the input sections\nwhich should be placed into this output section.  The `*' is a wildcard\nwhich matches any file name.  The expression `*(.text)' means all\n`.text' input sections in all input files.\n\n   Since the location counter is `0x10000' when the output section\n`.text' is defined, the linker will set the address of the `.text'\nsection in the output file to be `0x10000'.\n\n   The remaining lines define the `.data' and `.bss' sections in the\noutput file.  The linker will place the `.data' output section at\naddress `0x8000000'.  After the linker places the `.data' output\nsection, the value of the location counter will be `0x8000000' plus the\nsize of the `.data' output section.  The effect is that the linker will\nplace the `.bss' output section immediately after the `.data' output\nsection in memory.\n\n   The linker will ensure that each output section has the required\nalignment, by increasing the location counter if necessary.  In this\nexample, the specified addresses for the `.text' and `.data' sections\nwill probably satisfy any alignment constraints, but the linker may\nhave to create a small gap between the `.data' and `.bss' sections.\n\n   That's it!  That's a simple and complete linker script.\n\n\u001f\nFile: ld.info,  Node: Simple Commands,  Next: Assignments,  Prev: Simple Example,  Up: Scripts\n\n3.4 Simple Linker Script Commands\n=================================\n\nIn this section we describe the simple linker script commands.\n\n* Menu:\n\n* Entry Point::\t\t\tSetting the entry point\n* File Commands::\t\tCommands dealing with files\n\n* Format Commands::\t\tCommands dealing with object file formats\n\n* REGION_ALIAS::\t\tAssign alias names to memory regions\n* Miscellaneous Commands::\tOther linker script commands\n\n\u001f\nFile: ld.info,  Node: Entry Point,  Next: File Commands,  Up: Simple Commands\n\n3.4.1 Setting the Entry Point\n-----------------------------\n\nThe first instruction to execute in a program is called the \"entry\npoint\".  You can use the `ENTRY' linker script command to set the entry\npoint.  The argument is a symbol name:\n     ENTRY(SYMBOL)\n\n   There are several ways to set the entry point.  The linker will set\nthe entry point by trying each of the following methods in order, and\nstopping when one of them succeeds:\n   * the `-e' ENTRY command-line option;\n\n   * the `ENTRY(SYMBOL)' command in a linker script;\n\n   * the value of the symbol `start', if defined;\n\n   * the address of the first byte of the `.text' section, if present;\n\n   * The address `0'.\n\n\u001f\nFile: ld.info,  Node: File Commands,  Next: Format Commands,  Prev: Entry Point,  Up: Simple Commands\n\n3.4.2 Commands Dealing with Files\n---------------------------------\n\nSeveral linker script commands deal with files.\n\n`INCLUDE FILENAME'\n     Include the linker script FILENAME at this point.  The file will\n     be searched for in the current directory, and in any directory\n     specified with the `-L' option.  You can nest calls to `INCLUDE'\n     up to 10 levels deep.\n\n     You can place `INCLUDE' directives at the top level, in `MEMORY' or\n     `SECTIONS' commands, or in output section descriptions.\n\n`INPUT(FILE, FILE, ...)'\n`INPUT(FILE FILE ...)'\n     The `INPUT' command directs the linker to include the named files\n     in the link, as though they were named on the command line.\n\n     For example, if you always want to include `subr.o' any time you do\n     a link, but you can't be bothered to put it on every link command\n     line, then you can put `INPUT (subr.o)' in your linker script.\n\n     In fact, if you like, you can list all of your input files in the\n     linker script, and then invoke the linker with nothing but a `-T'\n     option.\n\n     In case a \"sysroot prefix\" is configured, and the filename starts\n     with the `/' character, and the script being processed was located\n     inside the \"sysroot prefix\", the filename will be looked for in\n     the \"sysroot prefix\".  Otherwise, the linker will try to open the\n     file in the current directory.  If it is not found, the linker\n     will search through the archive library search path.  See the\n     description of `-L' in *Note Command Line Options: Options.\n\n     If you use `INPUT (-lFILE)', `ld' will transform the name to\n     `libFILE.a', as with the command line argument `-l'.\n\n     When you use the `INPUT' command in an implicit linker script, the\n     files will be included in the link at the point at which the linker\n     script file is included.  This can affect archive searching.\n\n`GROUP(FILE, FILE, ...)'\n`GROUP(FILE FILE ...)'\n     The `GROUP' command is like `INPUT', except that the named files\n     should all be archives, and they are searched repeatedly until no\n     new undefined references are created.  See the description of `-('\n     in *Note Command Line Options: Options.\n\n`AS_NEEDED(FILE, FILE, ...)'\n`AS_NEEDED(FILE FILE ...)'\n     This construct can appear only inside of the `INPUT' or `GROUP'\n     commands, among other filenames.  The files listed will be handled\n     as if they appear directly in the `INPUT' or `GROUP' commands,\n     with the exception of ELF shared libraries, that will be added only\n     when they are actually needed.  This construct essentially enables\n     `--as-needed' option for all the files listed inside of it and\n     restores previous `--as-needed' resp. `--no-as-needed' setting\n     afterwards.\n\n`OUTPUT(FILENAME)'\n     The `OUTPUT' command names the output file.  Using\n     `OUTPUT(FILENAME)' in the linker script is exactly like using `-o\n     FILENAME' on the command line (*note Command Line Options:\n     Options.).  If both are used, the command line option takes\n     precedence.\n\n     You can use the `OUTPUT' command to define a default name for the\n     output file other than the usual default of `a.out'.\n\n`SEARCH_DIR(PATH)'\n     The `SEARCH_DIR' command adds PATH to the list of paths where `ld'\n     looks for archive libraries.  Using `SEARCH_DIR(PATH)' is exactly\n     like using `-L PATH' on the command line (*note Command Line\n     Options: Options.).  If both are used, then the linker will search\n     both paths.  Paths specified using the command line option are\n     searched first.\n\n`STARTUP(FILENAME)'\n     The `STARTUP' command is just like the `INPUT' command, except\n     that FILENAME will become the first input file to be linked, as\n     though it were specified first on the command line.  This may be\n     useful when using a system in which the entry point is always the\n     start of the first file.\n\n\u001f\nFile: ld.info,  Node: Format Commands,  Next: REGION_ALIAS,  Prev: File Commands,  Up: Simple Commands\n\n3.4.3 Commands Dealing with Object File Formats\n-----------------------------------------------\n\nA couple of linker script commands deal with object file formats.\n\n`OUTPUT_FORMAT(BFDNAME)'\n`OUTPUT_FORMAT(DEFAULT, BIG, LITTLE)'\n     The `OUTPUT_FORMAT' command names the BFD format to use for the\n     output file (*note BFD::).  Using `OUTPUT_FORMAT(BFDNAME)' is\n     exactly like using `--oformat BFDNAME' on the command line (*note\n     Command Line Options: Options.).  If both are used, the command\n     line option takes precedence.\n\n     You can use `OUTPUT_FORMAT' with three arguments to use different\n     formats based on the `-EB' and `-EL' command line options.  This\n     permits the linker script to set the output format based on the\n     desired endianness.\n\n     If neither `-EB' nor `-EL' are used, then the output format will\n     be the first argument, DEFAULT.  If `-EB' is used, the output\n     format will be the second argument, BIG.  If `-EL' is used, the\n     output format will be the third argument, LITTLE.\n\n     For example, the default linker script for the MIPS ELF target\n     uses this command:\n          OUTPUT_FORMAT(elf32-bigmips, elf32-bigmips, elf32-littlemips)\n     This says that the default format for the output file is\n     `elf32-bigmips', but if the user uses the `-EL' command line\n     option, the output file will be created in the `elf32-littlemips'\n     format.\n\n`TARGET(BFDNAME)'\n     The `TARGET' command names the BFD format to use when reading input\n     files.  It affects subsequent `INPUT' and `GROUP' commands.  This\n     command is like using `-b BFDNAME' on the command line (*note\n     Command Line Options: Options.).  If the `TARGET' command is used\n     but `OUTPUT_FORMAT' is not, then the last `TARGET' command is also\n     used to set the format for the output file.  *Note BFD::.\n\n\u001f\nFile: ld.info,  Node: REGION_ALIAS,  Next: Miscellaneous Commands,  Prev: Format Commands,  Up: Simple Commands\n\n3.4.4 Assign alias names to memory regions\n------------------------------------------\n\nAlias names can be added to existing memory regions created with the\n*Note MEMORY:: command.  Each name corresponds to at most one memory\nregion.\n\n     REGION_ALIAS(ALIAS, REGION)\n\n   The `REGION_ALIAS' function creates an alias name ALIAS for the\nmemory region REGION.  This allows a flexible mapping of output sections\nto memory regions.  An example follows.\n\n   Suppose we have an application for embedded systems which come with\nvarious memory storage devices.  All have a general purpose, volatile\nmemory `RAM' that allows code execution or data storage.  Some may have\na read-only, non-volatile memory `ROM' that allows code execution and\nread-only data access.  The last variant is a read-only, non-volatile\nmemory `ROM2' with read-only data access and no code execution\ncapability.  We have four output sections:\n\n   * `.text' program code;\n\n   * `.rodata' read-only data;\n\n   * `.data' read-write initialized data;\n\n   * `.bss' read-write zero initialized data.\n\n   The goal is to provide a linker command file that contains a system\nindependent part defining the output sections and a system dependent\npart mapping the output sections to the memory regions available on the\nsystem.  Our embedded systems come with three different memory setups\n`A', `B' and `C':\nSection            Variant A          Variant B          Variant C\n.text              RAM                ROM                ROM\n.rodata            RAM                ROM                ROM2\n.data              RAM                RAM/ROM            RAM/ROM2\n.bss               RAM                RAM                RAM\n   The notation `RAM/ROM' or `RAM/ROM2' means that this section is\nloaded into region `ROM' or `ROM2' respectively.  Please note that the\nload address of the `.data' section starts in all three variants at the\nend of the `.rodata' section.\n\n   The base linker script that deals with the output sections follows.\nIt includes the system dependent `linkcmds.memory' file that describes\nthe memory layout:\n     INCLUDE linkcmds.memory\n\n     SECTIONS\n       {\n         .text :\n           {\n             *(.text)\n           } > REGION_TEXT\n         .rodata :\n           {\n             *(.rodata)\n             rodata_end = .;\n           } > REGION_RODATA\n         .data : AT (rodata_end)\n           {\n             data_start = .;\n             *(.data)\n           } > REGION_DATA\n         data_size = SIZEOF(.data);\n         data_load_start = LOADADDR(.data);\n         .bss :\n           {\n             *(.bss)\n           } > REGION_BSS\n       }\n\n   Now we need three different `linkcmds.memory' files to define memory\nregions and alias names.  The content of `linkcmds.memory' for the three\nvariants `A', `B' and `C':\n`A'\n     Here everything goes into the `RAM'.\n          MEMORY\n            {\n              RAM : ORIGIN = 0, LENGTH = 4M\n            }\n\n          REGION_ALIAS(\"REGION_TEXT\", RAM);\n          REGION_ALIAS(\"REGION_RODATA\", RAM);\n          REGION_ALIAS(\"REGION_DATA\", RAM);\n          REGION_ALIAS(\"REGION_BSS\", RAM);\n\n`B'\n     Program code and read-only data go into the `ROM'.  Read-write\n     data goes into the `RAM'.  An image of the initialized data is\n     loaded into the `ROM' and will be copied during system start into\n     the `RAM'.\n          MEMORY\n            {\n              ROM : ORIGIN = 0, LENGTH = 3M\n              RAM : ORIGIN = 0x10000000, LENGTH = 1M\n            }\n\n          REGION_ALIAS(\"REGION_TEXT\", ROM);\n          REGION_ALIAS(\"REGION_RODATA\", ROM);\n          REGION_ALIAS(\"REGION_DATA\", RAM);\n          REGION_ALIAS(\"REGION_BSS\", RAM);\n\n`C'\n     Program code goes into the `ROM'.  Read-only data goes into the\n     `ROM2'.  Read-write data goes into the `RAM'.  An image of the\n     initialized data is loaded into the `ROM2' and will be copied\n     during system start into the `RAM'.\n          MEMORY\n            {\n              ROM : ORIGIN = 0, LENGTH = 2M\n              ROM2 : ORIGIN = 0x10000000, LENGTH = 1M\n              RAM : ORIGIN = 0x20000000, LENGTH = 1M\n            }\n\n          REGION_ALIAS(\"REGION_TEXT\", ROM);\n          REGION_ALIAS(\"REGION_RODATA\", ROM2);\n          REGION_ALIAS(\"REGION_DATA\", RAM);\n          REGION_ALIAS(\"REGION_BSS\", RAM);\n\n   It is possible to write a common system initialization routine to\ncopy the `.data' section from `ROM' or `ROM2' into the `RAM' if\nnecessary:\n     #include <string.h>\n\n     extern char data_start [];\n     extern char data_size [];\n     extern char data_load_start [];\n\n     void copy_data(void)\n     {\n       if (data_start != data_load_start)\n         {\n           memcpy(data_start, data_load_start, (size_t) data_size);\n         }\n     }\n\n\u001f\nFile: ld.info,  Node: Miscellaneous Commands,  Prev: REGION_ALIAS,  Up: Simple Commands\n\n3.4.5 Other Linker Script Commands\n----------------------------------\n\nThere are a few other linker scripts commands.\n\n`ASSERT(EXP, MESSAGE)'\n     Ensure that EXP is non-zero.  If it is zero, then exit the linker\n     with an error code, and print MESSAGE.\n\n`EXTERN(SYMBOL SYMBOL ...)'\n     Force SYMBOL to be entered in the output file as an undefined\n     symbol.  Doing this may, for example, trigger linking of additional\n     modules from standard libraries.  You may list several SYMBOLs for\n     each `EXTERN', and you may use `EXTERN' multiple times.  This\n     command has the same effect as the `-u' command-line option.\n\n`FORCE_COMMON_ALLOCATION'\n     This command has the same effect as the `-d' command-line option:\n     to make `ld' assign space to common symbols even if a relocatable\n     output file is specified (`-r').\n\n`INHIBIT_COMMON_ALLOCATION'\n     This command has the same effect as the `--no-define-common'\n     command-line option: to make `ld' omit the assignment of addresses\n     to common symbols even for a non-relocatable output file.\n\n`INSERT [ AFTER | BEFORE ] OUTPUT_SECTION'\n     This command is typically used in a script specified by `-T' to\n     augment the default `SECTIONS' with, for example, overlays.  It\n     inserts all prior linker script statements after (or before)\n     OUTPUT_SECTION, and also causes `-T' to not override the default\n     linker script.  The exact insertion point is as for orphan\n     sections.  *Note Location Counter::.  The insertion happens after\n     the linker has mapped input sections to output sections.  Prior to\n     the insertion, since `-T' scripts are parsed before the default\n     linker script, statements in the `-T' script occur before the\n     default linker script statements in the internal linker\n     representation of the script.  In particular, input section\n     assignments will be made to `-T' output sections before those in\n     the default script.  Here is an example of how a `-T' script using\n     `INSERT' might look:\n\n          SECTIONS\n          {\n            OVERLAY :\n            {\n              .ov1 { ov1*(.text) }\n              .ov2 { ov2*(.text) }\n            }\n          }\n          INSERT AFTER .text;\n\n`NOCROSSREFS(SECTION SECTION ...)'\n     This command may be used to tell `ld' to issue an error about any\n     references among certain output sections.\n\n     In certain types of programs, particularly on embedded systems when\n     using overlays, when one section is loaded into memory, another\n     section will not be.  Any direct references between the two\n     sections would be errors.  For example, it would be an error if\n     code in one section called a function defined in the other section.\n\n     The `NOCROSSREFS' command takes a list of output section names.  If\n     `ld' detects any cross references between the sections, it reports\n     an error and returns a non-zero exit status.  Note that the\n     `NOCROSSREFS' command uses output section names, not input section\n     names.\n\n`OUTPUT_ARCH(BFDARCH)'\n     Specify a particular output machine architecture.  The argument is\n     one of the names used by the BFD library (*note BFD::).  You can\n     see the architecture of an object file by using the `objdump'\n     program with the `-f' option.\n\n\u001f\nFile: ld.info,  Node: Assignments,  Next: SECTIONS,  Prev: Simple Commands,  Up: Scripts\n\n3.5 Assigning Values to Symbols\n===============================\n\nYou may assign a value to a symbol in a linker script.  This will define\nthe symbol and place it into the symbol table with a global scope.\n\n* Menu:\n\n* Simple Assignments::\t\tSimple Assignments\n* PROVIDE::\t\t\tPROVIDE\n* PROVIDE_HIDDEN::\t\tPROVIDE_HIDDEN\n* Source Code Reference::\tHow to use a linker script defined symbol in source code\n\n\u001f\nFile: ld.info,  Node: Simple Assignments,  Next: PROVIDE,  Up: Assignments\n\n3.5.1 Simple Assignments\n------------------------\n\nYou may assign to a symbol using any of the C assignment operators:\n\n`SYMBOL = EXPRESSION ;'\n`SYMBOL += EXPRESSION ;'\n`SYMBOL -= EXPRESSION ;'\n`SYMBOL *= EXPRESSION ;'\n`SYMBOL /= EXPRESSION ;'\n`SYMBOL <<= EXPRESSION ;'\n`SYMBOL >>= EXPRESSION ;'\n`SYMBOL &= EXPRESSION ;'\n`SYMBOL |= EXPRESSION ;'\n\n   The first case will define SYMBOL to the value of EXPRESSION.  In\nthe other cases, SYMBOL must already be defined, and the value will be\nadjusted accordingly.\n\n   The special symbol name `.' indicates the location counter.  You may\nonly use this within a `SECTIONS' command.  *Note Location Counter::.\n\n   The semicolon after EXPRESSION is required.\n\n   Expressions are defined below; see *Note Expressions::.\n\n   You may write symbol assignments as commands in their own right, or\nas statements within a `SECTIONS' command, or as part of an output\nsection description in a `SECTIONS' command.\n\n   The section of the symbol will be set from the section of the\nexpression; for more information, see *Note Expression Section::.\n\n   Here is an example showing the three different places that symbol\nassignments may be used:\n\n     floating_point = 0;\n     SECTIONS\n     {\n       .text :\n         {\n           *(.text)\n           _etext = .;\n         }\n       _bdata = (. + 3) & ~ 3;\n       .data : { *(.data) }\n     }\n   In this example, the symbol `floating_point' will be defined as\nzero.  The symbol `_etext' will be defined as the address following the\nlast `.text' input section.  The symbol `_bdata' will be defined as the\naddress following the `.text' output section aligned upward to a 4 byte\nboundary.\n\n\u001f\nFile: ld.info,  Node: PROVIDE,  Next: PROVIDE_HIDDEN,  Prev: Simple Assignments,  Up: Assignments\n\n3.5.2 PROVIDE\n-------------\n\nIn some cases, it is desirable for a linker script to define a symbol\nonly if it is referenced and is not defined by any object included in\nthe link.  For example, traditional linkers defined the symbol `etext'.\nHowever, ANSI C requires that the user be able to use `etext' as a\nfunction name without encountering an error.  The `PROVIDE' keyword may\nbe used to define a symbol, such as `etext', only if it is referenced\nbut not defined.  The syntax is `PROVIDE(SYMBOL = EXPRESSION)'.\n\n   Here is an example of using `PROVIDE' to define `etext':\n     SECTIONS\n     {\n       .text :\n         {\n           *(.text)\n           _etext = .;\n           PROVIDE(etext = .);\n         }\n     }\n\n   In this example, if the program defines `_etext' (with a leading\nunderscore), the linker will give a multiple definition error.  If, on\nthe other hand, the program defines `etext' (with no leading\nunderscore), the linker will silently use the definition in the program.\nIf the program references `etext' but does not define it, the linker\nwill use the definition in the linker script.\n\n\u001f\nFile: ld.info,  Node: PROVIDE_HIDDEN,  Next: Source Code Reference,  Prev: PROVIDE,  Up: Assignments\n\n3.5.3 PROVIDE_HIDDEN\n--------------------\n\nSimilar to `PROVIDE'.  For ELF targeted ports, the symbol will be\nhidden and won't be exported.\n\n\u001f\nFile: ld.info,  Node: Source Code Reference,  Prev: PROVIDE_HIDDEN,  Up: Assignments\n\n3.5.4 Source Code Reference\n---------------------------\n\nAccessing a linker script defined variable from source code is not\nintuitive.  In particular a linker script symbol is not equivalent to a\nvariable declaration in a high level language, it is instead a symbol\nthat does not have a value.\n\n   Before going further, it is important to note that compilers often\ntransform names in the source code into different names when they are\nstored in the symbol table.  For example, Fortran compilers commonly\nprepend or append an underscore, and C++ performs extensive `name\nmangling'.  Therefore there might be a discrepancy between the name of\na variable as it is used in source code and the name of the same\nvariable as it is defined in a linker script.  For example in C a\nlinker script variable might be referred to as:\n\n       extern int foo;\n\n   But in the linker script it might be defined as:\n\n       _foo = 1000;\n\n   In the remaining examples however it is assumed that no name\ntransformation has taken place.\n\n   When a symbol is declared in a high level language such as C, two\nthings happen.  The first is that the compiler reserves enough space in\nthe program's memory to hold the _value_ of the symbol.  The second is\nthat the compiler creates an entry in the program's symbol table which\nholds the symbol's _address_.  ie the symbol table contains the address\nof the block of memory holding the symbol's value.  So for example the\nfollowing C declaration, at file scope:\n\n       int foo = 1000;\n\n   creates a entry called `foo' in the symbol table.  This entry holds\nthe address of an `int' sized block of memory where the number 1000 is\ninitially stored.\n\n   When a program references a symbol the compiler generates code that\nfirst accesses the symbol table to find the address of the symbol's\nmemory block and then code to read the value from that memory block.\nSo:\n\n       foo = 1;\n\n   looks up the symbol `foo' in the symbol table, gets the address\nassociated with this symbol and then writes the value 1 into that\naddress.  Whereas:\n\n       int * a = & foo;\n\n   looks up the symbol `foo' in the symbol table, gets it address and\nthen copies this address into the block of memory associated with the\nvariable `a'.\n\n   Linker scripts symbol declarations, by contrast, create an entry in\nthe symbol table but do not assign any memory to them.  Thus they are\nan address without a value.  So for example the linker script\ndefinition:\n\n       foo = 1000;\n\n   creates an entry in the symbol table called `foo' which holds the\naddress of memory location 1000, but nothing special is stored at\naddress 1000.  This means that you cannot access the _value_ of a\nlinker script defined symbol - it has no value - all you can do is\naccess the _address_ of a linker script defined symbol.\n\n   Hence when you are using a linker script defined symbol in source\ncode you should always take the address of the symbol, and never\nattempt to use its value.  For example suppose you want to copy the\ncontents of a section of memory called .ROM into a section called\n.FLASH and the linker script contains these declarations:\n\n       start_of_ROM   = .ROM;\n       end_of_ROM     = .ROM + sizeof (.ROM) - 1;\n       start_of_FLASH = .FLASH;\n\n   Then the C source code to perform the copy would be:\n\n       extern char start_of_ROM, end_of_ROM, start_of_FLASH;\n\n       memcpy (& start_of_FLASH, & start_of_ROM, & end_of_ROM - & start_of_ROM);\n\n   Note the use of the `&' operators.  These are correct.\n\n\u001f\nFile: ld.info,  Node: SECTIONS,  Next: MEMORY,  Prev: Assignments,  Up: Scripts\n\n3.6 SECTIONS Command\n====================\n\nThe `SECTIONS' command tells the linker how to map input sections into\noutput sections, and how to place the output sections in memory.\n\n   The format of the `SECTIONS' command is:\n     SECTIONS\n     {\n       SECTIONS-COMMAND\n       SECTIONS-COMMAND\n       ...\n     }\n\n   Each SECTIONS-COMMAND may of be one of the following:\n\n   * an `ENTRY' command (*note Entry command: Entry Point.)\n\n   * a symbol assignment (*note Assignments::)\n\n   * an output section description\n\n   * an overlay description\n\n   The `ENTRY' command and symbol assignments are permitted inside the\n`SECTIONS' command for convenience in using the location counter in\nthose commands.  This can also make the linker script easier to\nunderstand because you can use those commands at meaningful points in\nthe layout of the output file.\n\n   Output section descriptions and overlay descriptions are described\nbelow.\n\n   If you do not use a `SECTIONS' command in your linker script, the\nlinker will place each input section into an identically named output\nsection in the order that the sections are first encountered in the\ninput files.  If all input sections are present in the first file, for\nexample, the order of sections in the output file will match the order\nin the first input file.  The first section will be at address zero.\n\n* Menu:\n\n* Output Section Description::\tOutput section description\n* Output Section Name::\t\tOutput section name\n* Output Section Address::\tOutput section address\n* Input Section::\t\tInput section description\n* Output Section Data::\t\tOutput section data\n* Output Section Keywords::\tOutput section keywords\n* Output Section Discarding::\tOutput section discarding\n* Output Section Attributes::\tOutput section attributes\n* Overlay Description::\t\tOverlay description\n\n\u001f\nFile: ld.info,  Node: Output Section Description,  Next: Output Section Name,  Up: SECTIONS\n\n3.6.1 Output Section Description\n--------------------------------\n\nThe full description of an output section looks like this:\n     SECTION [ADDRESS] [(TYPE)] :\n       [AT(LMA)]\n       [ALIGN(SECTION_ALIGN)]\n       [SUBALIGN(SUBSECTION_ALIGN)]\n       [CONSTRAINT]\n       {\n         OUTPUT-SECTION-COMMAND\n         OUTPUT-SECTION-COMMAND\n         ...\n       } [>REGION] [AT>LMA_REGION] [:PHDR :PHDR ...] [=FILLEXP]\n\n   Most output sections do not use most of the optional section\nattributes.\n\n   The whitespace around SECTION is required, so that the section name\nis unambiguous.  The colon and the curly braces are also required.  The\nline breaks and other white space are optional.\n\n   Each OUTPUT-SECTION-COMMAND may be one of the following:\n\n   * a symbol assignment (*note Assignments::)\n\n   * an input section description (*note Input Section::)\n\n   * data values to include directly (*note Output Section Data::)\n\n   * a special output section keyword (*note Output Section Keywords::)\n\n\u001f\nFile: ld.info,  Node: Output Section Name,  Next: Output Section Address,  Prev: Output Section Description,  Up: SECTIONS\n\n3.6.2 Output Section Name\n-------------------------\n\nThe name of the output section is SECTION.  SECTION must meet the\nconstraints of your output format.  In formats which only support a\nlimited number of sections, such as `a.out', the name must be one of\nthe names supported by the format (`a.out', for example, allows only\n`.text', `.data' or `.bss'). If the output format supports any number\nof sections, but with numbers and not names (as is the case for Oasys),\nthe name should be supplied as a quoted numeric string.  A section name\nmay consist of any sequence of characters, but a name which contains\nany unusual characters such as commas must be quoted.\n\n   The output section name `/DISCARD/' is special; *Note Output Section\nDiscarding::.\n\n\u001f\nFile: ld.info,  Node: Output Section Address,  Next: Input Section,  Prev: Output Section Name,  Up: SECTIONS\n\n3.6.3 Output Section Address\n----------------------------\n\nThe ADDRESS is an expression for the VMA (the virtual memory address)\nof the output section.  If you do not provide ADDRESS, the linker will\nset it based on REGION if present, or otherwise based on the current\nvalue of the location counter.\n\n   If you provide ADDRESS, the address of the output section will be\nset to precisely that.  If you provide neither ADDRESS nor REGION, then\nthe address of the output section will be set to the current value of\nthe location counter aligned to the alignment requirements of the\noutput section.  The alignment requirement of the output section is the\nstrictest alignment of any input section contained within the output\nsection.\n\n   For example,\n     .text . : { *(.text) }\n   and\n     .text : { *(.text) }\n   are subtly different.  The first will set the address of the `.text'\noutput section to the current value of the location counter.  The\nsecond will set it to the current value of the location counter aligned\nto the strictest alignment of a `.text' input section.\n\n   The ADDRESS may be an arbitrary expression; *Note Expressions::.\nFor example, if you want to align the section on a 0x10 byte boundary,\nso that the lowest four bits of the section address are zero, you could\ndo something like this:\n     .text ALIGN(0x10) : { *(.text) }\n   This works because `ALIGN' returns the current location counter\naligned upward to the specified value.\n\n   Specifying ADDRESS for a section will change the value of the\nlocation counter, provided that the section is non-empty.  (Empty\nsections are ignored).\n\n\u001f\nFile: ld.info,  Node: Input Section,  Next: Output Section Data,  Prev: Output Section Address,  Up: SECTIONS\n\n3.6.4 Input Section Description\n-------------------------------\n\nThe most common output section command is an input section description.\n\n   The input section description is the most basic linker script\noperation.  You use output sections to tell the linker how to lay out\nyour program in memory.  You use input section descriptions to tell the\nlinker how to map the input files into your memory layout.\n\n* Menu:\n\n* Input Section Basics::\tInput section basics\n* Input Section Wildcards::\tInput section wildcard patterns\n* Input Section Common::\tInput section for common symbols\n* Input Section Keep::\t\tInput section and garbage collection\n* Input Section Example::\tInput section example\n\n\u001f\nFile: ld.info,  Node: Input Section Basics,  Next: Input Section Wildcards,  Up: Input Section\n\n3.6.4.1 Input Section Basics\n............................\n\nAn input section description consists of a file name optionally followed\nby a list of section names in parentheses.\n\n   The file name and the section name may be wildcard patterns, which we\ndescribe further below (*note Input Section Wildcards::).\n\n   The most common input section description is to include all input\nsections with a particular name in the output section.  For example, to\ninclude all input `.text' sections, you would write:\n     *(.text)\n   Here the `*' is a wildcard which matches any file name.  To exclude\na list of files from matching the file name wildcard, EXCLUDE_FILE may\nbe used to match all files except the ones specified in the\nEXCLUDE_FILE list.  For example:\n     *(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors)\n   will cause all .ctors sections from all files except `crtend.o' and\n`otherfile.o' to be included.\n\n   There are two ways to include more than one section:\n     *(.text .rdata)\n     *(.text) *(.rdata)\n   The difference between these is the order in which the `.text' and\n`.rdata' input sections will appear in the output section.  In the\nfirst example, they will be intermingled, appearing in the same order as\nthey are found in the linker input.  In the second example, all `.text'\ninput sections will appear first, followed by all `.rdata' input\nsections.\n\n   You can specify a file name to include sections from a particular\nfile.  You would do this if one or more of your files contain special\ndata that needs to be at a particular location in memory.  For example:\n     data.o(.data)\n\n   You can also specify files within archives by writing a pattern\nmatching the archive, a colon, then the pattern matching the file, with\nno whitespace around the colon.\n\n`archive:file'\n     matches file within archive\n\n`archive:'\n     matches the whole archive\n\n`:file'\n     matches file but not one in an archive\n\n   Either one or both of `archive' and `file' can contain shell\nwildcards.  On DOS based file systems, the linker will assume that a\nsingle letter followed by a colon is a drive specifier, so `c:myfile.o'\nis a simple file specification, not `myfile.o' within an archive called\n`c'.  `archive:file' filespecs may also be used within an\n`EXCLUDE_FILE' list, but may not appear in other linker script\ncontexts.  For instance, you cannot extract a file from an archive by\nusing `archive:file' in an `INPUT' command.\n\n   If you use a file name without a list of sections, then all sections\nin the input file will be included in the output section.  This is not\ncommonly done, but it may by useful on occasion.  For example:\n     data.o\n\n   When you use a file name which is not an `archive:file' specifier\nand does not contain any wild card characters, the linker will first\nsee if you also specified the file name on the linker command line or\nin an `INPUT' command.  If you did not, the linker will attempt to open\nthe file as an input file, as though it appeared on the command line.\nNote that this differs from an `INPUT' command, because the linker will\nnot search for the file in the archive search path.\n\n\u001f\nFile: ld.info,  Node: Input Section Wildcards,  Next: Input Section Common,  Prev: Input Section Basics,  Up: Input Section\n\n3.6.4.2 Input Section Wildcard Patterns\n.......................................\n\nIn an input section description, either the file name or the section\nname or both may be wildcard patterns.\n\n   The file name of `*' seen in many examples is a simple wildcard\npattern for the file name.\n\n   The wildcard patterns are like those used by the Unix shell.\n\n`*'\n     matches any number of characters\n\n`?'\n     matches any single character\n\n`[CHARS]'\n     matches a single instance of any of the CHARS; the `-' character\n     may be used to specify a range of characters, as in `[a-z]' to\n     match any lower case letter\n\n`\\'\n     quotes the following character\n\n   When a file name is matched with a wildcard, the wildcard characters\nwill not match a `/' character (used to separate directory names on\nUnix).  A pattern consisting of a single `*' character is an exception;\nit will always match any file name, whether it contains a `/' or not.\nIn a section name, the wildcard characters will match a `/' character.\n\n   File name wildcard patterns only match files which are explicitly\nspecified on the command line or in an `INPUT' command.  The linker\ndoes not search directories to expand wildcards.\n\n   If a file name matches more than one wildcard pattern, or if a file\nname appears explicitly and is also matched by a wildcard pattern, the\nlinker will use the first match in the linker script.  For example, this\nsequence of input section descriptions is probably in error, because the\n`data.o' rule will not be used:\n     .data : { *(.data) }\n     .data1 : { data.o(.data) }\n\n   Normally, the linker will place files and sections matched by\nwildcards in the order in which they are seen during the link.  You can\nchange this by using the `SORT_BY_NAME' keyword, which appears before a\nwildcard pattern in parentheses (e.g., `SORT_BY_NAME(.text*)').  When\nthe `SORT_BY_NAME' keyword is used, the linker will sort the files or\nsections into ascending order by name before placing them in the output\nfile.\n\n   `SORT_BY_ALIGNMENT' is very similar to `SORT_BY_NAME'. The\ndifference is `SORT_BY_ALIGNMENT' will sort sections into ascending\norder by alignment before placing them in the output file.\n\n   `SORT' is an alias for `SORT_BY_NAME'.\n\n   When there are nested section sorting commands in linker script,\nthere can be at most 1 level of nesting for section sorting commands.\n\n  1. `SORT_BY_NAME' (`SORT_BY_ALIGNMENT' (wildcard section pattern)).\n     It will sort the input sections by name first, then by alignment\n     if 2 sections have the same name.\n\n  2. `SORT_BY_ALIGNMENT' (`SORT_BY_NAME' (wildcard section pattern)).\n     It will sort the input sections by alignment first, then by name\n     if 2 sections have the same alignment.\n\n  3. `SORT_BY_NAME' (`SORT_BY_NAME' (wildcard section pattern)) is\n     treated the same as `SORT_BY_NAME' (wildcard section pattern).\n\n  4. `SORT_BY_ALIGNMENT' (`SORT_BY_ALIGNMENT' (wildcard section\n     pattern)) is treated the same as `SORT_BY_ALIGNMENT' (wildcard\n     section pattern).\n\n  5. All other nested section sorting commands are invalid.\n\n   When both command line section sorting option and linker script\nsection sorting command are used, section sorting command always takes\nprecedence over the command line option.\n\n   If the section sorting command in linker script isn't nested, the\ncommand line option will make the section sorting command to be treated\nas nested sorting command.\n\n  1. `SORT_BY_NAME' (wildcard section pattern ) with `--sort-sections\n     alignment' is equivalent to `SORT_BY_NAME' (`SORT_BY_ALIGNMENT'\n     (wildcard section pattern)).\n\n  2. `SORT_BY_ALIGNMENT' (wildcard section pattern) with\n     `--sort-section name' is equivalent to `SORT_BY_ALIGNMENT'\n     (`SORT_BY_NAME' (wildcard section pattern)).\n\n   If the section sorting command in linker script is nested, the\ncommand line option will be ignored.\n\n   If you ever get confused about where input sections are going, use\nthe `-M' linker option to generate a map file.  The map file shows\nprecisely how input sections are mapped to output sections.\n\n   This example shows how wildcard patterns might be used to partition\nfiles.  This linker script directs the linker to place all `.text'\nsections in `.text' and all `.bss' sections in `.bss'.  The linker will\nplace the `.data' section from all files beginning with an upper case\ncharacter in `.DATA'; for all other files, the linker will place the\n`.data' section in `.data'.\n     SECTIONS {\n       .text : { *(.text) }\n       .DATA : { [A-Z]*(.data) }\n       .data : { *(.data) }\n       .bss : { *(.bss) }\n     }\n\n\u001f\nFile: ld.info,  Node: Input Section Common,  Next: Input Section Keep,  Prev: Input Section Wildcards,  Up: Input Section\n\n3.6.4.3 Input Section for Common Symbols\n........................................\n\nA special notation is needed for common symbols, because in many object\nfile formats common symbols do not have a particular input section.  The\nlinker treats common symbols as though they are in an input section\nnamed `COMMON'.\n\n   You may use file names with the `COMMON' section just as with any\nother input sections.  You can use this to place common symbols from a\nparticular input file in one section while common symbols from other\ninput files are placed in another section.\n\n   In most cases, common symbols in input files will be placed in the\n`.bss' section in the output file.  For example:\n     .bss { *(.bss) *(COMMON) }\n\n   Some object file formats have more than one type of common symbol.\nFor example, the MIPS ELF object file format distinguishes standard\ncommon symbols and small common symbols.  In this case, the linker will\nuse a different special section name for other types of common symbols.\nIn the case of MIPS ELF, the linker uses `COMMON' for standard common\nsymbols and `.scommon' for small common symbols.  This permits you to\nmap the different types of common symbols into memory at different\nlocations.\n\n   You will sometimes see `[COMMON]' in old linker scripts.  This\nnotation is now considered obsolete.  It is equivalent to `*(COMMON)'.\n\n\u001f\nFile: ld.info,  Node: Input Section Keep,  Next: Input Section Example,  Prev: Input Section Common,  Up: Input Section\n\n3.6.4.4 Input Section and Garbage Collection\n............................................\n\nWhen link-time garbage collection is in use (`--gc-sections'), it is\noften useful to mark sections that should not be eliminated.  This is\naccomplished by surrounding an input section's wildcard entry with\n`KEEP()', as in `KEEP(*(.init))' or `KEEP(SORT_BY_NAME(*)(.ctors))'.\n\n\u001f\nFile: ld.info,  Node: Input Section Example,  Prev: Input Section Keep,  Up: Input Section\n\n3.6.4.5 Input Section Example\n.............................\n\nThe following example is a complete linker script.  It tells the linker\nto read all of the sections from file `all.o' and place them at the\nstart of output section `outputa' which starts at location `0x10000'.\nAll of section `.input1' from file `foo.o' follows immediately, in the\nsame output section.  All of section `.input2' from `foo.o' goes into\noutput section `outputb', followed by section `.input1' from `foo1.o'.\nAll of the remaining `.input1' and `.input2' sections from any files\nare written to output section `outputc'.\n\n     SECTIONS {\n       outputa 0x10000 :\n         {\n         all.o\n         foo.o (.input1)\n         }\n       outputb :\n         {\n         foo.o (.input2)\n         foo1.o (.input1)\n         }\n       outputc :\n         {\n         *(.input1)\n         *(.input2)\n         }\n     }\n\n\u001f\nFile: ld.info,  Node: Output Section Data,  Next: Output Section Keywords,  Prev: Input Section,  Up: SECTIONS\n\n3.6.5 Output Section Data\n-------------------------\n\nYou can include explicit bytes of data in an output section by using\n`BYTE', `SHORT', `LONG', `QUAD', or `SQUAD' as an output section\ncommand.  Each keyword is followed by an expression in parentheses\nproviding the value to store (*note Expressions::).  The value of the\nexpression is stored at the current value of the location counter.\n\n   The `BYTE', `SHORT', `LONG', and `QUAD' commands store one, two,\nfour, and eight bytes (respectively).  After storing the bytes, the\nlocation counter is incremented by the number of bytes stored.\n\n   For example, this will store the byte 1 followed by the four byte\nvalue of the symbol `addr':\n     BYTE(1)\n     LONG(addr)\n\n   When using a 64 bit host or target, `QUAD' and `SQUAD' are the same;\nthey both store an 8 byte, or 64 bit, value.  When both host and target\nare 32 bits, an expression is computed as 32 bits.  In this case `QUAD'\nstores a 32 bit value zero extended to 64 bits, and `SQUAD' stores a 32\nbit value sign extended to 64 bits.\n\n   If the object file format of the output file has an explicit\nendianness, which is the normal case, the value will be stored in that\nendianness.  When the object file format does not have an explicit\nendianness, as is true of, for example, S-records, the value will be\nstored in the endianness of the first input object file.\n\n   Note--these commands only work inside a section description and not\nbetween them, so the following will produce an error from the linker:\n     SECTIONS { .text : { *(.text) } LONG(1) .data : { *(.data) } }\n   whereas this will work:\n     SECTIONS { .text : { *(.text) ; LONG(1) } .data : { *(.data) } }\n\n   You may use the `FILL' command to set the fill pattern for the\ncurrent section.  It is followed by an expression in parentheses.  Any\notherwise unspecified regions of memory within the section (for example,\ngaps left due to the required alignment of input sections) are filled\nwith the value of the expression, repeated as necessary.  A `FILL'\nstatement covers memory locations after the point at which it occurs in\nthe section definition; by including more than one `FILL' statement,\nyou can have different fill patterns in different parts of an output\nsection.\n\n   This example shows how to fill unspecified regions of memory with the\nvalue `0x90':\n     FILL(0x90909090)\n\n   The `FILL' command is similar to the `=FILLEXP' output section\nattribute, but it only affects the part of the section following the\n`FILL' command, rather than the entire section.  If both are used, the\n`FILL' command takes precedence.  *Note Output Section Fill::, for\ndetails on the fill expression.\n\n\u001f\nFile: ld.info,  Node: Output Section Keywords,  Next: Output Section Discarding,  Prev: Output Section Data,  Up: SECTIONS\n\n3.6.6 Output Section Keywords\n-----------------------------\n\nThere are a couple of keywords which can appear as output section\ncommands.\n\n`CREATE_OBJECT_SYMBOLS'\n     The command tells the linker to create a symbol for each input\n     file.  The name of each symbol will be the name of the\n     corresponding input file.  The section of each symbol will be the\n     output section in which the `CREATE_OBJECT_SYMBOLS' command\n     appears.\n\n     This is conventional for the a.out object file format.  It is not\n     normally used for any other object file format.\n\n`CONSTRUCTORS'\n     When linking using the a.out object file format, the linker uses an\n     unusual set construct to support C++ global constructors and\n     destructors.  When linking object file formats which do not support\n     arbitrary sections, such as ECOFF and XCOFF, the linker will\n     automatically recognize C++ global constructors and destructors by\n     name.  For these object file formats, the `CONSTRUCTORS' command\n     tells the linker to place constructor information in the output\n     section where the `CONSTRUCTORS' command appears.  The\n     `CONSTRUCTORS' command is ignored for other object file formats.\n\n     The symbol `__CTOR_LIST__' marks the start of the global\n     constructors, and the symbol `__CTOR_END__' marks the end.\n     Similarly, `__DTOR_LIST__' and `__DTOR_END__' mark the start and\n     end of the global destructors.  The first word in the list is the\n     number of entries, followed by the address of each constructor or\n     destructor, followed by a zero word.  The compiler must arrange to\n     actually run the code.  For these object file formats GNU C++\n     normally calls constructors from a subroutine `__main'; a call to\n     `__main' is automatically inserted into the startup code for\n     `main'.  GNU C++ normally runs destructors either by using\n     `atexit', or directly from the function `exit'.\n\n     For object file formats such as `COFF' or `ELF' which support\n     arbitrary section names, GNU C++ will normally arrange to put the\n     addresses of global constructors and destructors into the `.ctors'\n     and `.dtors' sections.  Placing the following sequence into your\n     linker script will build the sort of table which the GNU C++\n     runtime code expects to see.\n\n                __CTOR_LIST__ = .;\n                LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)\n                *(.ctors)\n                LONG(0)\n                __CTOR_END__ = .;\n                __DTOR_LIST__ = .;\n                LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)\n                *(.dtors)\n                LONG(0)\n                __DTOR_END__ = .;\n\n     If you are using the GNU C++ support for initialization priority,\n     which provides some control over the order in which global\n     constructors are run, you must sort the constructors at link time\n     to ensure that they are executed in the correct order.  When using\n     the `CONSTRUCTORS' command, use `SORT_BY_NAME(CONSTRUCTORS)'\n     instead.  When using the `.ctors' and `.dtors' sections, use\n     `*(SORT_BY_NAME(.ctors))' and `*(SORT_BY_NAME(.dtors))' instead of\n     just `*(.ctors)' and `*(.dtors)'.\n\n     Normally the compiler and linker will handle these issues\n     automatically, and you will not need to concern yourself with\n     them.  However, you may need to consider this if you are using C++\n     and writing your own linker scripts.\n\n\n\u001f\nFile: ld.info,  Node: Output Section Discarding,  Next: Output Section Attributes,  Prev: Output Section Keywords,  Up: SECTIONS\n\n3.6.7 Output Section Discarding\n-------------------------------\n\nThe linker will not create output sections with no contents.  This is\nfor convenience when referring to input sections that may or may not be\npresent in any of the input files.  For example:\n     .foo : { *(.foo) }\n   will only create a `.foo' section in the output file if there is a\n`.foo' section in at least one input file, and if the input sections\nare not all empty.  Other link script directives that allocate space in\nan output section will also create the output section.\n\n   The linker will ignore address assignments (*note Output Section\nAddress::) on discarded output sections, except when the linker script\ndefines symbols in the output section.  In that case the linker will\nobey the address assignments, possibly advancing dot even though the\nsection is discarded.\n\n   The special output section name `/DISCARD/' may be used to discard\ninput sections.  Any input sections which are assigned to an output\nsection named `/DISCARD/' are not included in the output file.\n\n\u001f\nFile: ld.info,  Node: Output Section Attributes,  Next: Overlay Description,  Prev: Output Section Discarding,  Up: SECTIONS\n\n3.6.8 Output Section Attributes\n-------------------------------\n\nWe showed above that the full description of an output section looked\nlike this:\n\n     SECTION [ADDRESS] [(TYPE)] :\n       [AT(LMA)]\n       [ALIGN(SECTION_ALIGN)]\n       [SUBALIGN(SUBSECTION_ALIGN)]\n       [CONSTRAINT]\n       {\n         OUTPUT-SECTION-COMMAND\n         OUTPUT-SECTION-COMMAND\n         ...\n       } [>REGION] [AT>LMA_REGION] [:PHDR :PHDR ...] [=FILLEXP]\n\n   We've already described SECTION, ADDRESS, and\nOUTPUT-SECTION-COMMAND.  In this section we will describe the remaining\nsection attributes.\n\n* Menu:\n\n* Output Section Type::\t\tOutput section type\n* Output Section LMA::\t\tOutput section LMA\n* Forced Output Alignment::\tForced Output Alignment\n* Forced Input Alignment::\tForced Input Alignment\n* Output Section Constraint::   Output section constraint\n* Output Section Region::\tOutput section region\n* Output Section Phdr::\t\tOutput section phdr\n* Output Section Fill::\t\tOutput section fill\n\n\u001f\nFile: ld.info,  Node: Output Section Type,  Next: Output Section LMA,  Up: Output Section Attributes\n\n3.6.8.1 Output Section Type\n...........................\n\nEach output section may have a type.  The type is a keyword in\nparentheses.  The following types are defined:\n\n`NOLOAD'\n     The section should be marked as not loadable, so that it will not\n     be loaded into memory when the program is run.\n\n`DSECT'\n`COPY'\n`INFO'\n`OVERLAY'\n     These type names are supported for backward compatibility, and are\n     rarely used.  They all have the same effect: the section should be\n     marked as not allocatable, so that no memory is allocated for the\n     section when the program is run.\n\n   The linker normally sets the attributes of an output section based on\nthe input sections which map into it.  You can override this by using\nthe section type.  For example, in the script sample below, the `ROM'\nsection is addressed at memory location `0' and does not need to be\nloaded when the program is run.  The contents of the `ROM' section will\nappear in the linker output file as usual.\n     SECTIONS {\n       ROM 0 (NOLOAD) : { ... }\n       ...\n     }\n\n\u001f\nFile: ld.info,  Node: Output Section LMA,  Next: Forced Output Alignment,  Prev: Output Section Type,  Up: Output Section Attributes\n\n3.6.8.2 Output Section LMA\n..........................\n\nEvery section has a virtual address (VMA) and a load address (LMA); see\n*Note Basic Script Concepts::.  The address expression which may appear\nin an output section description sets the VMA (*note Output Section\nAddress::).\n\n   The expression LMA that follows the `AT' keyword specifies the load\naddress of the section.\n\n   Alternatively, with `AT>LMA_REGION' expression, you may specify a\nmemory region for the section's load address. *Note MEMORY::.  Note\nthat if the section has not had a VMA assigned to it then the linker\nwill use the LMA_REGION as the VMA region as well.\n\n   If neither `AT' nor `AT>' is specified for an allocatable section,\nthe linker will set the LMA such that the difference between VMA and\nLMA for the section is the same as the preceding output section in the\nsame region.  If there is no preceding output section or the section is\nnot allocatable, the linker will set the LMA equal to the VMA.  *Note\nOutput Section Region::.\n\n   This feature is designed to make it easy to build a ROM image.  For\nexample, the following linker script creates three output sections: one\ncalled `.text', which starts at `0x1000', one called `.mdata', which is\nloaded at the end of the `.text' section even though its VMA is\n`0x2000', and one called `.bss' to hold uninitialized data at address\n`0x3000'.  The symbol `_data' is defined with the value `0x2000', which\nshows that the location counter holds the VMA value, not the LMA value.\n\n     SECTIONS\n       {\n       .text 0x1000 : { *(.text) _etext = . ; }\n       .mdata 0x2000 :\n         AT ( ADDR (.text) + SIZEOF (.text) )\n         { _data = . ; *(.data); _edata = . ;  }\n       .bss 0x3000 :\n         { _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;}\n     }\n\n   The run-time initialization code for use with a program generated\nwith this linker script would include something like the following, to\ncopy the initialized data from the ROM image to its runtime address.\nNotice how this code takes advantage of the symbols defined by the\nlinker script.\n\n     extern char _etext, _data, _edata, _bstart, _bend;\n     char *src = &_etext;\n     char *dst = &_data;\n\n     /* ROM has data at end of text; copy it. */\n     while (dst < &_edata) {\n       *dst++ = *src++;\n     }\n\n     /* Zero bss */\n     for (dst = &_bstart; dst< &_bend; dst++)\n       *dst = 0;\n\n\u001f\nFile: ld.info,  Node: Forced Output Alignment,  Next: Forced Input Alignment,  Prev: Output Section LMA,  Up: Output Section Attributes\n\n3.6.8.3 Forced Output Alignment\n...............................\n\nYou can increase an output section's alignment by using ALIGN.\n\n\u001f\nFile: ld.info,  Node: Forced Input Alignment,  Next: Output Section Constraint,  Prev: Forced Output Alignment,  Up: Output Section Attributes\n\n3.6.8.4 Forced Input Alignment\n..............................\n\nYou can force input section alignment within an output section by using\nSUBALIGN.  The value specified overrides any alignment given by input\nsections, whether larger or smaller.\n\n\u001f\nFile: ld.info,  Node: Output Section Constraint,  Next: Output Section Region,  Prev: Forced Input Alignment,  Up: Output Section Attributes\n\n3.6.8.5 Output Section Constraint\n.................................\n\nYou can specify that an output section should only be created if all of\nits input sections are read-only or all of its input sections are\nread-write by using the keyword `ONLY_IF_RO' and `ONLY_IF_RW'\nrespectively.\n\n\u001f\nFile: ld.info,  Node: Output Section Region,  Next: Output Section Phdr,  Prev: Output Section Constraint,  Up: Output Section Attributes\n\n3.6.8.6 Output Section Region\n.............................\n\nYou can assign a section to a previously defined region of memory by\nusing `>REGION'.  *Note MEMORY::.\n\n   Here is a simple example:\n     MEMORY { rom : ORIGIN = 0x1000, LENGTH = 0x1000 }\n     SECTIONS { ROM : { *(.text) } >rom }\n\n\u001f\nFile: ld.info,  Node: Output Section Phdr,  Next: Output Section Fill,  Prev: Output Section Region,  Up: Output Section Attributes\n\n3.6.8.7 Output Section Phdr\n...........................\n\nYou can assign a section to a previously defined program segment by\nusing `:PHDR'.  *Note PHDRS::.  If a section is assigned to one or more\nsegments, then all subsequent allocated sections will be assigned to\nthose segments as well, unless they use an explicitly `:PHDR' modifier.\nYou can use `:NONE' to tell the linker to not put the section in any\nsegment at all.\n\n   Here is a simple example:\n     PHDRS { text PT_LOAD ; }\n     SECTIONS { .text : { *(.text) } :text }\n\n\u001f\nFile: ld.info,  Node: Output Section Fill,  Prev: Output Section Phdr,  Up: Output Section Attributes\n\n3.6.8.8 Output Section Fill\n...........................\n\nYou can set the fill pattern for an entire section by using `=FILLEXP'.\nFILLEXP is an expression (*note Expressions::).  Any otherwise\nunspecified regions of memory within the output section (for example,\ngaps left due to the required alignment of input sections) will be\nfilled with the value, repeated as necessary.  If the fill expression\nis a simple hex number, ie. a string of hex digit starting with `0x'\nand without a trailing `k' or `M', then an arbitrarily long sequence of\nhex digits can be used to specify the fill pattern;  Leading zeros\nbecome part of the pattern too.  For all other cases, including extra\nparentheses or a unary `+', the fill pattern is the four least\nsignificant bytes of the value of the expression.  In all cases, the\nnumber is big-endian.\n\n   You can also change the fill value with a `FILL' command in the\noutput section commands; (*note Output Section Data::).\n\n   Here is a simple example:\n     SECTIONS { .text : { *(.text) } =0x90909090 }\n\n\u001f\nFile: ld.info,  Node: Overlay Description,  Prev: Output Section Attributes,  Up: SECTIONS\n\n3.6.9 Overlay Description\n-------------------------\n\nAn overlay description provides an easy way to describe sections which\nare to be loaded as part of a single memory image but are to be run at\nthe same memory address.  At run time, some sort of overlay manager will\ncopy the overlaid sections in and out of the runtime memory address as\nrequired, perhaps by simply manipulating addressing bits.  This approach\ncan be useful, for example, when a certain region of memory is faster\nthan another.\n\n   Overlays are described using the `OVERLAY' command.  The `OVERLAY'\ncommand is used within a `SECTIONS' command, like an output section\ndescription.  The full syntax of the `OVERLAY' command is as follows:\n     OVERLAY [START] : [NOCROSSREFS] [AT ( LDADDR )]\n       {\n         SECNAME1\n           {\n             OUTPUT-SECTION-COMMAND\n             OUTPUT-SECTION-COMMAND\n             ...\n           } [:PHDR...] [=FILL]\n         SECNAME2\n           {\n             OUTPUT-SECTION-COMMAND\n             OUTPUT-SECTION-COMMAND\n             ...\n           } [:PHDR...] [=FILL]\n         ...\n       } [>REGION] [:PHDR...] [=FILL]\n\n   Everything is optional except `OVERLAY' (a keyword), and each\nsection must have a name (SECNAME1 and SECNAME2 above).  The section\ndefinitions within the `OVERLAY' construct are identical to those\nwithin the general `SECTIONS' contruct (*note SECTIONS::), except that\nno addresses and no memory regions may be defined for sections within\nan `OVERLAY'.\n\n   The sections are all defined with the same starting address.  The\nload addresses of the sections are arranged such that they are\nconsecutive in memory starting at the load address used for the\n`OVERLAY' as a whole (as with normal section definitions, the load\naddress is optional, and defaults to the start address; the start\naddress is also optional, and defaults to the current value of the\nlocation counter).\n\n   If the `NOCROSSREFS' keyword is used, and there any references among\nthe sections, the linker will report an error.  Since the sections all\nrun at the same address, it normally does not make sense for one\nsection to refer directly to another.  *Note NOCROSSREFS: Miscellaneous\nCommands.\n\n   For each section within the `OVERLAY', the linker automatically\nprovides two symbols.  The symbol `__load_start_SECNAME' is defined as\nthe starting load address of the section.  The symbol\n`__load_stop_SECNAME' is defined as the final load address of the\nsection.  Any characters within SECNAME which are not legal within C\nidentifiers are removed.  C (or assembler) code may use these symbols\nto move the overlaid sections around as necessary.\n\n   At the end of the overlay, the value of the location counter is set\nto the start address of the overlay plus the size of the largest\nsection.\n\n   Here is an example.  Remember that this would appear inside a\n`SECTIONS' construct.\n       OVERLAY 0x1000 : AT (0x4000)\n        {\n          .text0 { o1/*.o(.text) }\n          .text1 { o2/*.o(.text) }\n        }\nThis will define both `.text0' and `.text1' to start at address\n0x1000.  `.text0' will be loaded at address 0x4000, and `.text1' will\nbe loaded immediately after `.text0'.  The following symbols will be\ndefined if referenced: `__load_start_text0', `__load_stop_text0',\n`__load_start_text1', `__load_stop_text1'.\n\n   C code to copy overlay `.text1' into the overlay area might look\nlike the following.\n\n       extern char __load_start_text1, __load_stop_text1;\n       memcpy ((char *) 0x1000, &__load_start_text1,\n               &__load_stop_text1 - &__load_start_text1);\n\n   Note that the `OVERLAY' command is just syntactic sugar, since\neverything it does can be done using the more basic commands.  The above\nexample could have been written identically as follows.\n\n       .text0 0x1000 : AT (0x4000) { o1/*.o(.text) }\n       PROVIDE (__load_start_text0 = LOADADDR (.text0));\n       PROVIDE (__load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0));\n       .text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) { o2/*.o(.text) }\n       PROVIDE (__load_start_text1 = LOADADDR (.text1));\n       PROVIDE (__load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1));\n       . = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));\n\n\u001f\nFile: ld.info,  Node: MEMORY,  Next: PHDRS,  Prev: SECTIONS,  Up: Scripts\n\n3.7 MEMORY Command\n==================\n\nThe linker's default configuration permits allocation of all available\nmemory.  You can override this by using the `MEMORY' command.\n\n   The `MEMORY' command describes the location and size of blocks of\nmemory in the target.  You can use it to describe which memory regions\nmay be used by the linker, and which memory regions it must avoid.  You\ncan then assign sections to particular memory regions.  The linker will\nset section addresses based on the memory regions, and will warn about\nregions that become too full.  The linker will not shuffle sections\naround to fit into the available regions.\n\n   A linker script may contain at most one use of the `MEMORY' command.\nHowever, you can define as many blocks of memory within it as you\nwish.  The syntax is:\n     MEMORY\n       {\n         NAME [(ATTR)] : ORIGIN = ORIGIN, LENGTH = LEN\n         ...\n       }\n\n   The NAME is a name used in the linker script to refer to the region.\nThe region name has no meaning outside of the linker script.  Region\nnames are stored in a separate name space, and will not conflict with\nsymbol names, file names, or section names.  Each memory region must\nhave a distinct name within the `MEMORY' command.  However you can add\nlater alias names to existing memory regions with the *Note\nREGION_ALIAS:: command.\n\n   The ATTR string is an optional list of attributes that specify\nwhether to use a particular memory region for an input section which is\nnot explicitly mapped in the linker script.  As described in *Note\nSECTIONS::, if you do not specify an output section for some input\nsection, the linker will create an output section with the same name as\nthe input section.  If you define region attributes, the linker will use\nthem to select the memory region for the output section that it creates.\n\n   The ATTR string must consist only of the following characters:\n`R'\n     Read-only section\n\n`W'\n     Read/write section\n\n`X'\n     Executable section\n\n`A'\n     Allocatable section\n\n`I'\n     Initialized section\n\n`L'\n     Same as `I'\n\n`!'\n     Invert the sense of any of the preceding attributes\n\n   If a unmapped section matches any of the listed attributes other than\n`!', it will be placed in the memory region.  The `!' attribute\nreverses this test, so that an unmapped section will be placed in the\nmemory region only if it does not match any of the listed attributes.\n\n   The ORIGIN is an numerical expression for the start address of the\nmemory region.  The expression must evaluate to a constant and it\ncannot involve any symbols.  The keyword `ORIGIN' may be abbreviated to\n`org' or `o' (but not, for example, `ORG').\n\n   The LEN is an expression for the size in bytes of the memory region.\nAs with the ORIGIN expression, the expression must be numerical only\nand must evaluate to a constant.  The keyword `LENGTH' may be\nabbreviated to `len' or `l'.\n\n   In the following example, we specify that there are two memory\nregions available for allocation: one starting at `0' for 256 kilobytes,\nand the other starting at `0x40000000' for four megabytes.  The linker\nwill place into the `rom' memory region every section which is not\nexplicitly mapped into a memory region, and is either read-only or\nexecutable.  The linker will place other sections which are not\nexplicitly mapped into a memory region into the `ram' memory region.\n\n     MEMORY\n       {\n         rom (rx)  : ORIGIN = 0, LENGTH = 256K\n         ram (!rx) : org = 0x40000000, l = 4M\n       }\n\n   Once you define a memory region, you can direct the linker to place\nspecific output sections into that memory region by using the `>REGION'\noutput section attribute.  For example, if you have a memory region\nnamed `mem', you would use `>mem' in the output section definition.\n*Note Output Section Region::.  If no address was specified for the\noutput section, the linker will set the address to the next available\naddress within the memory region.  If the combined output sections\ndirected to a memory region are too large for the region, the linker\nwill issue an error message.\n\n   It is possible to access the origin and length of a memory in an\nexpression via the `ORIGIN(MEMORY)' and `LENGTH(MEMORY)' functions:\n\n       _fstack = ORIGIN(ram) + LENGTH(ram) - 4;\n\n\u001f\nFile: ld.info,  Node: PHDRS,  Next: VERSION,  Prev: MEMORY,  Up: Scripts\n\n3.8 PHDRS Command\n=================\n\nThe ELF object file format uses \"program headers\", also knows as\n\"segments\".  The program headers describe how the program should be\nloaded into memory.  You can print them out by using the `objdump'\nprogram with the `-p' option.\n\n   When you run an ELF program on a native ELF system, the system loader\nreads the program headers in order to figure out how to load the\nprogram.  This will only work if the program headers are set correctly.\nThis manual does not describe the details of how the system loader\ninterprets program headers; for more information, see the ELF ABI.\n\n   The linker will create reasonable program headers by default.\nHowever, in some cases, you may need to specify the program headers more\nprecisely.  You may use the `PHDRS' command for this purpose.  When the\nlinker sees the `PHDRS' command in the linker script, it will not\ncreate any program headers other than the ones specified.\n\n   The linker only pays attention to the `PHDRS' command when\ngenerating an ELF output file.  In other cases, the linker will simply\nignore `PHDRS'.\n\n   This is the syntax of the `PHDRS' command.  The words `PHDRS',\n`FILEHDR', `AT', and `FLAGS' are keywords.\n\n     PHDRS\n     {\n       NAME TYPE [ FILEHDR ] [ PHDRS ] [ AT ( ADDRESS ) ]\n             [ FLAGS ( FLAGS ) ] ;\n     }\n\n   The NAME is used only for reference in the `SECTIONS' command of the\nlinker script.  It is not put into the output file.  Program header\nnames are stored in a separate name space, and will not conflict with\nsymbol names, file names, or section names.  Each program header must\nhave a distinct name.\n\n   Certain program header types describe segments of memory which the\nsystem loader will load from the file.  In the linker script, you\nspecify the contents of these segments by placing allocatable output\nsections in the segments.  You use the `:PHDR' output section attribute\nto place a section in a particular segment.  *Note Output Section\nPhdr::.\n\n   It is normal to put certain sections in more than one segment.  This\nmerely implies that one segment of memory contains another.  You may\nrepeat `:PHDR', using it once for each segment which should contain the\nsection.\n\n   If you place a section in one or more segments using `:PHDR', then\nthe linker will place all subsequent allocatable sections which do not\nspecify `:PHDR' in the same segments.  This is for convenience, since\ngenerally a whole set of contiguous sections will be placed in a single\nsegment.  You can use `:NONE' to override the default segment and tell\nthe linker to not put the section in any segment at all.\n\n   You may use the `FILEHDR' and `PHDRS' keywords appear after the\nprogram header type to further describe the contents of the segment.\nThe `FILEHDR' keyword means that the segment should include the ELF\nfile header.  The `PHDRS' keyword means that the segment should include\nthe ELF program headers themselves.\n\n   The TYPE may be one of the following.  The numbers indicate the\nvalue of the keyword.\n\n`PT_NULL' (0)\n     Indicates an unused program header.\n\n`PT_LOAD' (1)\n     Indicates that this program header describes a segment to be\n     loaded from the file.\n\n`PT_DYNAMIC' (2)\n     Indicates a segment where dynamic linking information can be found.\n\n`PT_INTERP' (3)\n     Indicates a segment where the name of the program interpreter may\n     be found.\n\n`PT_NOTE' (4)\n     Indicates a segment holding note information.\n\n`PT_SHLIB' (5)\n     A reserved program header type, defined but not specified by the\n     ELF ABI.\n\n`PT_PHDR' (6)\n     Indicates a segment where the program headers may be found.\n\nEXPRESSION\n     An expression giving the numeric type of the program header.  This\n     may be used for types not defined above.\n\n   You can specify that a segment should be loaded at a particular\naddress in memory by using an `AT' expression.  This is identical to the\n`AT' command used as an output section attribute (*note Output Section\nLMA::).  The `AT' command for a program header overrides the output\nsection attribute.\n\n   The linker will normally set the segment flags based on the sections\nwhich comprise the segment.  You may use the `FLAGS' keyword to\nexplicitly specify the segment flags.  The value of FLAGS must be an\ninteger.  It is used to set the `p_flags' field of the program header.\n\n   Here is an example of `PHDRS'.  This shows a typical set of program\nheaders used on a native ELF system.\n\n     PHDRS\n     {\n       headers PT_PHDR PHDRS ;\n       interp PT_INTERP ;\n       text PT_LOAD FILEHDR PHDRS ;\n       data PT_LOAD ;\n       dynamic PT_DYNAMIC ;\n     }\n\n     SECTIONS\n     {\n       . = SIZEOF_HEADERS;\n       .interp : { *(.interp) } :text :interp\n       .text : { *(.text) } :text\n       .rodata : { *(.rodata) } /* defaults to :text */\n       ...\n       . = . + 0x1000; /* move to a new page in memory */\n       .data : { *(.data) } :data\n       .dynamic : { *(.dynamic) } :data :dynamic\n       ...\n     }\n\n\u001f\nFile: ld.info,  Node: VERSION,  Next: Expressions,  Prev: PHDRS,  Up: Scripts\n\n3.9 VERSION Command\n===================\n\nThe linker supports symbol versions when using ELF.  Symbol versions are\nonly useful when using shared libraries.  The dynamic linker can use\nsymbol versions to select a specific version of a function when it runs\na program that may have been linked against an earlier version of the\nshared library.\n\n   You can include a version script directly in the main linker script,\nor you can supply the version script as an implicit linker script.  You\ncan also use the `--version-script' linker option.\n\n   The syntax of the `VERSION' command is simply\n     VERSION { version-script-commands }\n\n   The format of the version script commands is identical to that used\nby Sun's linker in Solaris 2.5.  The version script defines a tree of\nversion nodes.  You specify the node names and interdependencies in the\nversion script.  You can specify which symbols are bound to which\nversion nodes, and you can reduce a specified set of symbols to local\nscope so that they are not globally visible outside of the shared\nlibrary.\n\n   The easiest way to demonstrate the version script language is with a\nfew examples.\n\n     VERS_1.1 {\n     \t global:\n     \t\t foo1;\n     \t local:\n     \t\t old*;\n     \t\t original*;\n     \t\t new*;\n     };\n\n     VERS_1.2 {\n     \t\t foo2;\n     } VERS_1.1;\n\n     VERS_2.0 {\n     \t\t bar1; bar2;\n     \t extern \"C++\" {\n     \t\t ns::*;\n     \t\t \"int f(int, double)\";\n              }\n     } VERS_1.2;\n\n   This example version script defines three version nodes.  The first\nversion node defined is `VERS_1.1'; it has no other dependencies.  The\nscript binds the symbol `foo1' to `VERS_1.1'.  It reduces a number of\nsymbols to local scope so that they are not visible outside of the\nshared library; this is done using wildcard patterns, so that any\nsymbol whose name begins with `old', `original', or `new' is matched.\nThe wildcard patterns available are the same as those used in the shell\nwhen matching filenames (also known as \"globbing\").  However, if you\nspecify the symbol name inside double quotes, then the name is treated\nas literal, rather than as a glob pattern.\n\n   Next, the version script defines node `VERS_1.2'.  This node depends\nupon `VERS_1.1'.  The script binds the symbol `foo2' to the version\nnode `VERS_1.2'.\n\n   Finally, the version script defines node `VERS_2.0'.  This node\ndepends upon `VERS_1.2'.  The scripts binds the symbols `bar1' and\n`bar2' are bound to the version node `VERS_2.0'.\n\n   When the linker finds a symbol defined in a library which is not\nspecifically bound to a version node, it will effectively bind it to an\nunspecified base version of the library.  You can bind all otherwise\nunspecified symbols to a given version node by using `global: *;'\nsomewhere in the version script.  Note that it's slightly crazy to use\nwildcards in a global spec except on the last version node.  Global\nwildcards elsewhere run the risk of accidentally adding symbols to the\nset exported for an old version.  That's wrong since older versions\nought to have a fixed set of symbols.\n\n   The names of the version nodes have no specific meaning other than\nwhat they might suggest to the person reading them.  The `2.0' version\ncould just as well have appeared in between `1.1' and `1.2'.  However,\nthis would be a confusing way to write a version script.\n\n   Node name can be omitted, provided it is the only version node in\nthe version script.  Such version script doesn't assign any versions to\nsymbols, only selects which symbols will be globally visible out and\nwhich won't.\n\n     { global: foo; bar; local: *; };\n\n   When you link an application against a shared library that has\nversioned symbols, the application itself knows which version of each\nsymbol it requires, and it also knows which version nodes it needs from\neach shared library it is linked against.  Thus at runtime, the dynamic\nloader can make a quick check to make sure that the libraries you have\nlinked against do in fact supply all of the version nodes that the\napplication will need to resolve all of the dynamic symbols.  In this\nway it is possible for the dynamic linker to know with certainty that\nall external symbols that it needs will be resolvable without having to\nsearch for each symbol reference.\n\n   The symbol versioning is in effect a much more sophisticated way of\ndoing minor version checking that SunOS does.  The fundamental problem\nthat is being addressed here is that typically references to external\nfunctions are bound on an as-needed basis, and are not all bound when\nthe application starts up.  If a shared library is out of date, a\nrequired interface may be missing; when the application tries to use\nthat interface, it may suddenly and unexpectedly fail.  With symbol\nversioning, the user will get a warning when they start their program if\nthe libraries being used with the application are too old.\n\n   There are several GNU extensions to Sun's versioning approach.  The\nfirst of these is the ability to bind a symbol to a version node in the\nsource file where the symbol is defined instead of in the versioning\nscript.  This was done mainly to reduce the burden on the library\nmaintainer.  You can do this by putting something like:\n     __asm__(\".symver original_foo,foo@VERS_1.1\");\n   in the C source file.  This renames the function `original_foo' to\nbe an alias for `foo' bound to the version node `VERS_1.1'.  The\n`local:' directive can be used to prevent the symbol `original_foo'\nfrom being exported. A `.symver' directive takes precedence over a\nversion script.\n\n   The second GNU extension is to allow multiple versions of the same\nfunction to appear in a given shared library.  In this way you can make\nan incompatible change to an interface without increasing the major\nversion number of the shared library, while still allowing applications\nlinked against the old interface to continue to function.\n\n   To do this, you must use multiple `.symver' directives in the source\nfile.  Here is an example:\n\n     __asm__(\".symver original_foo,foo@\");\n     __asm__(\".symver old_foo,foo@VERS_1.1\");\n     __asm__(\".symver old_foo1,foo@VERS_1.2\");\n     __asm__(\".symver new_foo,foo@@VERS_2.0\");\n\n   In this example, `foo@' represents the symbol `foo' bound to the\nunspecified base version of the symbol.  The source file that contains\nthis example would define 4 C functions: `original_foo', `old_foo',\n`old_foo1', and `new_foo'.\n\n   When you have multiple definitions of a given symbol, there needs to\nbe some way to specify a default version to which external references to\nthis symbol will be bound.  You can do this with the `foo@@VERS_2.0'\ntype of `.symver' directive.  You can only declare one version of a\nsymbol as the default in this manner; otherwise you would effectively\nhave multiple definitions of the same symbol.\n\n   If you wish to bind a reference to a specific version of the symbol\nwithin the shared library, you can use the aliases of convenience\n(i.e., `old_foo'), or you can use the `.symver' directive to\nspecifically bind to an external version of the function in question.\n\n   You can also specify the language in the version script:\n\n     VERSION extern \"lang\" { version-script-commands }\n\n   The supported `lang's are `C', `C++', and `Java'.  The linker will\niterate over the list of symbols at the link time and demangle them\naccording to `lang' before matching them to the patterns specified in\n`version-script-commands'.\n\n   Demangled names may contains spaces and other special characters.  As\ndescribed above, you can use a glob pattern to match demangled names,\nor you can use a double-quoted string to match the string exactly.  In\nthe latter case, be aware that minor differences (such as differing\nwhitespace) between the version script and the demangler output will\ncause a mismatch.  As the exact string generated by the demangler might\nchange in the future, even if the mangled name does not, you should\ncheck that all of your version directives are behaving as you expect\nwhen you upgrade.\n\n\u001f\nFile: ld.info,  Node: Expressions,  Next: Implicit Linker Scripts,  Prev: VERSION,  Up: Scripts\n\n3.10 Expressions in Linker Scripts\n==================================\n\nThe syntax for expressions in the linker script language is identical to\nthat of C expressions.  All expressions are evaluated as integers.  All\nexpressions are evaluated in the same size, which is 32 bits if both the\nhost and target are 32 bits, and is otherwise 64 bits.\n\n   You can use and set symbol values in expressions.\n\n   The linker defines several special purpose builtin functions for use\nin expressions.\n\n* Menu:\n\n* Constants::\t\t\tConstants\n* Symbolic Constants::          Symbolic constants\n* Symbols::\t\t\tSymbol Names\n* Orphan Sections::\t\tOrphan Sections\n* Location Counter::\t\tThe Location Counter\n* Operators::\t\t\tOperators\n* Evaluation::\t\t\tEvaluation\n* Expression Section::\t\tThe Section of an Expression\n* Builtin Functions::\t\tBuiltin Functions\n\n\u001f\nFile: ld.info,  Node: Constants,  Next: Symbolic Constants,  Up: Expressions\n\n3.10.1 Constants\n----------------\n\nAll constants are integers.\n\n   As in C, the linker considers an integer beginning with `0' to be\noctal, and an integer beginning with `0x' or `0X' to be hexadecimal.\nAlternatively the linker accepts suffixes of `h' or `H' for\nhexadeciaml, `o' or `O' for octal, `b' or `B' for binary and `d' or `D'\nfor decimal.  Any integer value without a prefix or a suffix is\nconsidered to be decimal.\n\n   In addition, you can use the suffixes `K' and `M' to scale a\nconstant by `1024' or `1024*1024' respectively.  For example, the\nfollowing all refer to the same quantity:\n\n     _fourk_1 = 4K;\n     _fourk_2 = 4096;\n     _fourk_3 = 0x1000;\n     _fourk_4 = 10000o;\n\n   Note - the `K' and `M' suffixes cannot be used in conjunction with\nthe base suffixes mentioned above.\n\n\u001f\nFile: ld.info,  Node: Symbolic Constants,  Next: Symbols,  Prev: Constants,  Up: Expressions\n\n3.10.2 Symbolic Constants\n-------------------------\n\nIt is possible to refer to target specific constants via the use of the\n`CONSTANT(NAME)' operator, where NAME is one of:\n\n`MAXPAGESIZE'\n     The target's maximum page size.\n\n`COMMONPAGESIZE'\n     The target's default page size.\n\n   So for example:\n\n       .text ALIGN (CONSTANT (MAXPAGESIZE)) : { *(.text) }\n\n   will create a text section aligned to the largest page boundary\nsupported by the target.\n\n\u001f\nFile: ld.info,  Node: Symbols,  Next: Orphan Sections,  Prev: Symbolic Constants,  Up: Expressions\n\n3.10.3 Symbol Names\n-------------------\n\nUnless quoted, symbol names start with a letter, underscore, or period\nand may include letters, digits, underscores, periods, and hyphens.\nUnquoted symbol names must not conflict with any keywords.  You can\nspecify a symbol which contains odd characters or has the same name as a\nkeyword by surrounding the symbol name in double quotes:\n     \"SECTION\" = 9;\n     \"with a space\" = \"also with a space\" + 10;\n\n   Since symbols can contain many non-alphabetic characters, it is\nsafest to delimit symbols with spaces.  For example, `A-B' is one\nsymbol, whereas `A - B' is an expression involving subtraction.\n\n\u001f\nFile: ld.info,  Node: Orphan Sections,  Next: Location Counter,  Prev: Symbols,  Up: Expressions\n\n3.10.4 Orphan Sections\n----------------------\n\nOrphan sections are sections present in the input files which are not\nexplicitly placed into the output file by the linker script.  The\nlinker will still copy these sections into the output file, but it has\nto guess as to where they should be placed.  The linker uses a simple\nheuristic to do this.  It attempts to place orphan sections after\nnon-orphan sections of the same attribute, such as code vs data,\nloadable vs non-loadable, etc.  If there is not enough room to do this\nthen it places at the end of the file.\n\n   For ELF targets, the attribute of the section includes section type\nas well as section flag.\n\n   If an orphaned section's name is representable as a C identifier then\nthe linker will automatically *note PROVIDE:: two symbols:\n__start_SECNAME and __end_SECNAME, where SECNAME is the name of the\nsection.  These indicate the start address and end address of the\norphaned section respectively.  Note: most section names are not\nrepresentable as C identifiers because they contain a `.' character.\n\n\u001f\nFile: ld.info,  Node: Location Counter,  Next: Operators,  Prev: Orphan Sections,  Up: Expressions\n\n3.10.5 The Location Counter\n---------------------------\n\nThe special linker variable \"dot\" `.' always contains the current\noutput location counter.  Since the `.' always refers to a location in\nan output section, it may only appear in an expression within a\n`SECTIONS' command.  The `.' symbol may appear anywhere that an\nordinary symbol is allowed in an expression.\n\n   Assigning a value to `.' will cause the location counter to be\nmoved.  This may be used to create holes in the output section.  The\nlocation counter may not be moved backwards inside an output section,\nand may not be moved backwards outside of an output section if so doing\ncreates areas with overlapping LMAs.\n\n     SECTIONS\n     {\n       output :\n         {\n           file1(.text)\n           . = . + 1000;\n           file2(.text)\n           . += 1000;\n           file3(.text)\n         } = 0x12345678;\n     }\n   In the previous example, the `.text' section from `file1' is located\nat the beginning of the output section `output'.  It is followed by a\n1000 byte gap.  Then the `.text' section from `file2' appears, also\nwith a 1000 byte gap following before the `.text' section from `file3'.\nThe notation `= 0x12345678' specifies what data to write in the gaps\n(*note Output Section Fill::).\n\n   Note: `.' actually refers to the byte offset from the start of the\ncurrent containing object.  Normally this is the `SECTIONS' statement,\nwhose start address is 0, hence `.' can be used as an absolute address.\nIf `.' is used inside a section description however, it refers to the\nbyte offset from the start of that section, not an absolute address.\nThus in a script like this:\n\n     SECTIONS\n     {\n         . = 0x100\n         .text: {\n           *(.text)\n           . = 0x200\n         }\n         . = 0x500\n         .data: {\n           *(.data)\n           . += 0x600\n         }\n     }\n\n   The `.text' section will be assigned a starting address of 0x100 and\na size of exactly 0x200 bytes, even if there is not enough data in the\n`.text' input sections to fill this area.  (If there is too much data,\nan error will be produced because this would be an attempt to move `.'\nbackwards).  The `.data' section will start at 0x500 and it will have\nan extra 0x600 bytes worth of space after the end of the values from\nthe `.data' input sections and before the end of the `.data' output\nsection itself.\n\n   Setting symbols to the value of the location counter outside of an\noutput section statement can result in unexpected values if the linker\nneeds to place orphan sections.  For example, given the following:\n\n     SECTIONS\n     {\n         start_of_text = . ;\n         .text: { *(.text) }\n         end_of_text = . ;\n\n         start_of_data = . ;\n         .data: { *(.data) }\n         end_of_data = . ;\n     }\n\n   If the linker needs to place some input section, e.g. `.rodata', not\nmentioned in the script, it might choose to place that section between\n`.text' and `.data'.  You might think the linker should place `.rodata'\non the blank line in the above script, but blank lines are of no\nparticular significance to the linker.  As well, the linker doesn't\nassociate the above symbol names with their sections.  Instead, it\nassumes that all assignments or other statements belong to the previous\noutput section, except for the special case of an assignment to `.'.\nI.e., the linker will place the orphan `.rodata' section as if the\nscript was written as follows:\n\n     SECTIONS\n     {\n         start_of_text = . ;\n         .text: { *(.text) }\n         end_of_text = . ;\n\n         start_of_data = . ;\n         .rodata: { *(.rodata) }\n         .data: { *(.data) }\n         end_of_data = . ;\n     }\n\n   This may or may not be the script author's intention for the value of\n`start_of_data'.  One way to influence the orphan section placement is\nto assign the location counter to itself, as the linker assumes that an\nassignment to `.' is setting the start address of a following output\nsection and thus should be grouped with that section.  So you could\nwrite:\n\n     SECTIONS\n     {\n         start_of_text = . ;\n         .text: { *(.text) }\n         end_of_text = . ;\n\n         . = . ;\n         start_of_data = . ;\n         .data: { *(.data) }\n         end_of_data = . ;\n     }\n\n   Now, the orphan `.rodata' section will be placed between\n`end_of_text' and `start_of_data'.\n\n\u001f\nFile: ld.info,  Node: Operators,  Next: Evaluation,  Prev: Location Counter,  Up: Expressions\n\n3.10.6 Operators\n----------------\n\nThe linker recognizes the standard C set of arithmetic operators, with\nthe standard bindings and precedence levels:\n     precedence      associativity   Operators                Notes\n     (highest)\n     1               left            !  -  ~                  (1)\n     2               left            *  /  %\n     3               left            +  -\n     4               left            >>  <<\n     5               left            ==  !=  >  <  <=  >=\n     6               left            &\n     7               left            |\n     8               left            &&\n     9               left            ||\n     10              right           ? :\n     11              right           &=  +=  -=  *=  /=       (2)\n     (lowest)\n   Notes: (1) Prefix operators (2) *Note Assignments::.\n\n\u001f\nFile: ld.info,  Node: Evaluation,  Next: Expression Section,  Prev: Operators,  Up: Expressions\n\n3.10.7 Evaluation\n-----------------\n\nThe linker evaluates expressions lazily.  It only computes the value of\nan expression when absolutely necessary.\n\n   The linker needs some information, such as the value of the start\naddress of the first section, and the origins and lengths of memory\nregions, in order to do any linking at all.  These values are computed\nas soon as possible when the linker reads in the linker script.\n\n   However, other values (such as symbol values) are not known or needed\nuntil after storage allocation.  Such values are evaluated later, when\nother information (such as the sizes of output sections) is available\nfor use in the symbol assignment expression.\n\n   The sizes of sections cannot be known until after allocation, so\nassignments dependent upon these are not performed until after\nallocation.\n\n   Some expressions, such as those depending upon the location counter\n`.', must be evaluated during section allocation.\n\n   If the result of an expression is required, but the value is not\navailable, then an error results.  For example, a script like the\nfollowing\n     SECTIONS\n       {\n         .text 9+this_isnt_constant :\n           { *(.text) }\n       }\nwill cause the error message `non constant expression for initial\naddress'.\n\n\u001f\nFile: ld.info,  Node: Expression Section,  Next: Builtin Functions,  Prev: Evaluation,  Up: Expressions\n\n3.10.8 The Section of an Expression\n-----------------------------------\n\nWhen the linker evaluates an expression, the result is either absolute\nor relative to some section.  A relative expression is expressed as a\nfixed offset from the base of a section.\n\n   The position of the expression within the linker script determines\nwhether it is absolute or relative.  An expression which appears within\nan output section definition is relative to the base of the output\nsection.  An expression which appears elsewhere will be absolute.\n\n   A symbol set to a relative expression will be relocatable if you\nrequest relocatable output using the `-r' option.  That means that a\nfurther link operation may change the value of the symbol.  The symbol's\nsection will be the section of the relative expression.\n\n   A symbol set to an absolute expression will retain the same value\nthrough any further link operation.  The symbol will be absolute, and\nwill not have any particular associated section.\n\n   You can use the builtin function `ABSOLUTE' to force an expression\nto be absolute when it would otherwise be relative.  For example, to\ncreate an absolute symbol set to the address of the end of the output\nsection `.data':\n     SECTIONS\n       {\n         .data : { *(.data) _edata = ABSOLUTE(.); }\n       }\n   If `ABSOLUTE' were not used, `_edata' would be relative to the\n`.data' section.\n\n\u001f\nFile: ld.info,  Node: Builtin Functions,  Prev: Expression Section,  Up: Expressions\n\n3.10.9 Builtin Functions\n------------------------\n\nThe linker script language includes a number of builtin functions for\nuse in linker script expressions.\n\n`ABSOLUTE(EXP)'\n     Return the absolute (non-relocatable, as opposed to non-negative)\n     value of the expression EXP.  Primarily useful to assign an\n     absolute value to a symbol within a section definition, where\n     symbol values are normally section relative.  *Note Expression\n     Section::.\n\n`ADDR(SECTION)'\n     Return the absolute address (the VMA) of the named SECTION.  Your\n     script must previously have defined the location of that section.\n     In the following example, `symbol_1' and `symbol_2' are assigned\n     identical values:\n          SECTIONS { ...\n            .output1 :\n              {\n              start_of_output_1 = ABSOLUTE(.);\n              ...\n              }\n            .output :\n              {\n              symbol_1 = ADDR(.output1);\n              symbol_2 = start_of_output_1;\n              }\n          ... }\n\n`ALIGN(ALIGN)'\n`ALIGN(EXP,ALIGN)'\n     Return the location counter (`.') or arbitrary expression aligned\n     to the next ALIGN boundary.  The single operand `ALIGN' doesn't\n     change the value of the location counter--it just does arithmetic\n     on it.  The two operand `ALIGN' allows an arbitrary expression to\n     be aligned upwards (`ALIGN(ALIGN)' is equivalent to `ALIGN(.,\n     ALIGN)').\n\n     Here is an example which aligns the output `.data' section to the\n     next `0x2000' byte boundary after the preceding section and sets a\n     variable within the section to the next `0x8000' boundary after the\n     input sections:\n          SECTIONS { ...\n            .data ALIGN(0x2000): {\n              *(.data)\n              variable = ALIGN(0x8000);\n            }\n          ... }\n     The first use of `ALIGN' in this example specifies the\n     location of a section because it is used as the optional ADDRESS\n     attribute of a section definition (*note Output Section\n     Address::).  The second use of `ALIGN' is used to defines the\n     value of a symbol.\n\n     The builtin function `NEXT' is closely related to `ALIGN'.\n\n`ALIGNOF(SECTION)'\n     Return the alignment in bytes of the named SECTION, if that\n     section has been allocated.  If the section has not been allocated\n     when this is evaluated, the linker will report an error. In the\n     following example, the alignment of the `.output' section is\n     stored as the first value in that section.\n          SECTIONS{ ...\n            .output {\n              LONG (ALIGNOF (.output))\n              ...\n              }\n          ... }\n\n`BLOCK(EXP)'\n     This is a synonym for `ALIGN', for compatibility with older linker\n     scripts.  It is most often seen when setting the address of an\n     output section.\n\n`DATA_SEGMENT_ALIGN(MAXPAGESIZE, COMMONPAGESIZE)'\n     This is equivalent to either\n          (ALIGN(MAXPAGESIZE) + (. & (MAXPAGESIZE - 1)))\n     or\n          (ALIGN(MAXPAGESIZE) + (. & (MAXPAGESIZE - COMMONPAGESIZE)))\n     depending on whether the latter uses fewer COMMONPAGESIZE sized\n     pages for the data segment (area between the result of this\n     expression and `DATA_SEGMENT_END') than the former or not.  If the\n     latter form is used, it means COMMONPAGESIZE bytes of runtime\n     memory will be saved at the expense of up to COMMONPAGESIZE wasted\n     bytes in the on-disk file.\n\n     This expression can only be used directly in `SECTIONS' commands,\n     not in any output section descriptions and only once in the linker\n     script.  COMMONPAGESIZE should be less or equal to MAXPAGESIZE and\n     should be the system page size the object wants to be optimized\n     for (while still working on system page sizes up to MAXPAGESIZE).\n\n     Example:\n            . = DATA_SEGMENT_ALIGN(0x10000, 0x2000);\n\n`DATA_SEGMENT_END(EXP)'\n     This defines the end of data segment for `DATA_SEGMENT_ALIGN'\n     evaluation purposes.\n\n            . = DATA_SEGMENT_END(.);\n\n`DATA_SEGMENT_RELRO_END(OFFSET, EXP)'\n     This defines the end of the `PT_GNU_RELRO' segment when `-z relro'\n     option is used.  Second argument is returned.  When `-z relro'\n     option is not present, `DATA_SEGMENT_RELRO_END' does nothing,\n     otherwise `DATA_SEGMENT_ALIGN' is padded so that EXP + OFFSET is\n     aligned to the most commonly used page boundary for particular\n     target.  If present in the linker script, it must always come in\n     between `DATA_SEGMENT_ALIGN' and `DATA_SEGMENT_END'.\n\n            . = DATA_SEGMENT_RELRO_END(24, .);\n\n`DEFINED(SYMBOL)'\n     Return 1 if SYMBOL is in the linker global symbol table and is\n     defined before the statement using DEFINED in the script, otherwise\n     return 0.  You can use this function to provide default values for\n     symbols.  For example, the following script fragment shows how to\n     set a global symbol `begin' to the first location in the `.text'\n     section--but if a symbol called `begin' already existed, its value\n     is preserved:\n\n          SECTIONS { ...\n            .text : {\n              begin = DEFINED(begin) ? begin : . ;\n              ...\n            }\n            ...\n          }\n\n`LENGTH(MEMORY)'\n     Return the length of the memory region named MEMORY.\n\n`LOADADDR(SECTION)'\n     Return the absolute LMA of the named SECTION.  This is normally\n     the same as `ADDR', but it may be different if the `AT' attribute\n     is used in the output section definition (*note Output Section\n     LMA::).\n\n`MAX(EXP1, EXP2)'\n     Returns the maximum of EXP1 and EXP2.\n\n`MIN(EXP1, EXP2)'\n     Returns the minimum of EXP1 and EXP2.\n\n`NEXT(EXP)'\n     Return the next unallocated address that is a multiple of EXP.\n     This function is closely related to `ALIGN(EXP)'; unless you use\n     the `MEMORY' command to define discontinuous memory for the output\n     file, the two functions are equivalent.\n\n`ORIGIN(MEMORY)'\n     Return the origin of the memory region named MEMORY.\n\n`SEGMENT_START(SEGMENT, DEFAULT)'\n     Return the base address of the named SEGMENT.  If an explicit\n     value has been given for this segment (with a command-line `-T'\n     option) that value will be returned; otherwise the value will be\n     DEFAULT.  At present, the `-T' command-line option can only be\n     used to set the base address for the \"text\", \"data\", and \"bss\"\n     sections, but you use `SEGMENT_START' with any segment name.\n\n`SIZEOF(SECTION)'\n     Return the size in bytes of the named SECTION, if that section has\n     been allocated.  If the section has not been allocated when this is\n     evaluated, the linker will report an error.  In the following\n     example, `symbol_1' and `symbol_2' are assigned identical values:\n          SECTIONS{ ...\n            .output {\n              .start = . ;\n              ...\n              .end = . ;\n              }\n            symbol_1 = .end - .start ;\n            symbol_2 = SIZEOF(.output);\n          ... }\n\n`SIZEOF_HEADERS'\n`sizeof_headers'\n     Return the size in bytes of the output file's headers.  This is\n     information which appears at the start of the output file.  You\n     can use this number when setting the start address of the first\n     section, if you choose, to facilitate paging.\n\n     When producing an ELF output file, if the linker script uses the\n     `SIZEOF_HEADERS' builtin function, the linker must compute the\n     number of program headers before it has determined all the section\n     addresses and sizes.  If the linker later discovers that it needs\n     additional program headers, it will report an error `not enough\n     room for program headers'.  To avoid this error, you must avoid\n     using the `SIZEOF_HEADERS' function, or you must rework your linker\n     script to avoid forcing the linker to use additional program\n     headers, or you must define the program headers yourself using the\n     `PHDRS' command (*note PHDRS::).\n\n\u001f\nFile: ld.info,  Node: Implicit Linker Scripts,  Prev: Expressions,  Up: Scripts\n\n3.11 Implicit Linker Scripts\n============================\n\nIf you specify a linker input file which the linker can not recognize as\nan object file or an archive file, it will try to read the file as a\nlinker script.  If the file can not be parsed as a linker script, the\nlinker will report an error.\n\n   An implicit linker script will not replace the default linker script.\n\n   Typically an implicit linker script would contain only symbol\nassignments, or the `INPUT', `GROUP', or `VERSION' commands.\n\n   Any input files read because of an implicit linker script will be\nread at the position in the command line where the implicit linker\nscript was read.  This can affect archive searching.\n\n\u001f\nFile: ld.info,  Node: Machine Dependent,  Next: BFD,  Prev: Scripts,  Up: Top\n\n4 Machine Dependent Features\n****************************\n\n`ld' has additional features on some platforms; the following sections\ndescribe them.  Machines where `ld' has no additional functionality are\nnot listed.\n\n* Menu:\n\n\n* H8/300::                      `ld' and the H8/300\n\n* i960::                        `ld' and the Intel 960 family\n\n* ARM::\t\t\t\t`ld' and the ARM family\n\n* HPPA ELF32::                  `ld' and HPPA 32-bit ELF\n\n* M68K::\t\t\t`ld' and the Motorola 68K family\n\n* MMIX::\t\t\t`ld' and MMIX\n\n* MSP430::\t\t\t`ld' and MSP430\n\n* M68HC11/68HC12::\t\t`ld' and the Motorola 68HC11 and 68HC12 families\n\n* PowerPC ELF32::\t\t`ld' and PowerPC 32-bit ELF Support\n\n* PowerPC64 ELF64::\t\t`ld' and PowerPC64 64-bit ELF Support\n\n* SPU ELF::\t\t\t`ld' and SPU ELF Support\n\n* TI COFF::                     `ld' and TI COFF\n\n* WIN32::                       `ld' and WIN32 (cygwin/mingw)\n\n* Xtensa::                      `ld' and Xtensa Processors\n\n\u001f\nFile: ld.info,  Node: H8/300,  Next: i960,  Up: Machine Dependent\n\n4.1 `ld' and the H8/300\n=======================\n\nFor the H8/300, `ld' can perform these global optimizations when you\nspecify the `--relax' command-line option.\n\n_relaxing address modes_\n     `ld' finds all `jsr' and `jmp' instructions whose targets are\n     within eight bits, and turns them into eight-bit program-counter\n     relative `bsr' and `bra' instructions, respectively.\n\n_synthesizing instructions_\n     `ld' finds all `mov.b' instructions which use the sixteen-bit\n     absolute address form, but refer to the top page of memory, and\n     changes them to use the eight-bit address form.  (That is: the\n     linker turns `mov.b `@'AA:16' into `mov.b `@'AA:8' whenever the\n     address AA is in the top page of memory).\n\n_bit manipulation instructions_\n     `ld' finds all bit manipulation instructions like `band, bclr,\n     biand, bild, bior, bist, bixor, bld, bnot, bor, bset, bst, btst,\n     bxor' which use 32 bit and 16 bit absolute address form, but refer\n     to the top page of memory, and changes them to use the 8 bit\n     address form.  (That is: the linker turns `bset #xx:3,`@'AA:32'\n     into `bset #xx:3,`@'AA:8' whenever the address AA is in the top\n     page of memory).\n\n_system control instructions_\n     `ld' finds all `ldc.w, stc.w' instructions which use the 32 bit\n     absolute address form, but refer to the top page of memory, and\n     changes them to use 16 bit address form.  (That is: the linker\n     turns `ldc.w `@'AA:32,ccr' into `ldc.w `@'AA:16,ccr' whenever the\n     address AA is in the top page of memory).\n\n\u001f\nFile: ld.info,  Node: i960,  Next: ARM,  Prev: H8/300,  Up: Machine Dependent\n\n4.2 `ld' and the Intel 960 Family\n=================================\n\nYou can use the `-AARCHITECTURE' command line option to specify one of\nthe two-letter names identifying members of the 960 family; the option\nspecifies the desired output target, and warns of any incompatible\ninstructions in the input files.  It also modifies the linker's search\nstrategy for archive libraries, to support the use of libraries\nspecific to each particular architecture, by including in the search\nloop names suffixed with the string identifying the architecture.\n\n   For example, if your `ld' command line included `-ACA' as well as\n`-ltry', the linker would look (in its built-in search paths, and in\nany paths you specify with `-L') for a library with the names\n\n     try\n     libtry.a\n     tryca\n     libtryca.a\n\nThe first two possibilities would be considered in any event; the last\ntwo are due to the use of `-ACA'.\n\n   You can meaningfully use `-A' more than once on a command line, since\nthe 960 architecture family allows combination of target architectures;\neach use will add another pair of name variants to search for when `-l'\nspecifies a library.\n\n   `ld' supports the `--relax' option for the i960 family.  If you\nspecify `--relax', `ld' finds all `balx' and `calx' instructions whose\ntargets are within 24 bits, and turns them into 24-bit program-counter\nrelative `bal' and `cal' instructions, respectively.  `ld' also turns\n`cal' instructions into `bal' instructions when it determines that the\ntarget subroutine is a leaf routine (that is, the target subroutine does\nnot itself call any subroutines).\n\n   The `--fix-cortex-a8' switch enables a link-time workaround for an\nerratum in certain Cortex-A8 processors.  The workaround is enabled by\ndefault if you are targeting the ARM v7-A architecture profile.  It can\nbe enabled otherwise by specifying `--fix-cortex-a8', or disabled\nunconditionally by specifying `--no-fix-cortex-a8'.\n\n   The erratum only affects Thumb-2 code.  Please contact ARM for\nfurther details.\n\n\u001f\nFile: ld.info,  Node: M68HC11/68HC12,  Next: PowerPC ELF32,  Prev: MSP430,  Up: Machine Dependent\n\n4.3 `ld' and the Motorola 68HC11 and 68HC12 families\n====================================================\n\n4.3.1 Linker Relaxation\n-----------------------\n\nFor the Motorola 68HC11, `ld' can perform these global optimizations\nwhen you specify the `--relax' command-line option.\n\n_relaxing address modes_\n     `ld' finds all `jsr' and `jmp' instructions whose targets are\n     within eight bits, and turns them into eight-bit program-counter\n     relative `bsr' and `bra' instructions, respectively.\n\n     `ld' also looks at all 16-bit extended addressing modes and\n     transforms them in a direct addressing mode when the address is in\n     page 0 (between 0 and 0x0ff).\n\n_relaxing gcc instruction group_\n     When `gcc' is called with `-mrelax', it can emit group of\n     instructions that the linker can optimize to use a 68HC11 direct\n     addressing mode. These instructions consists of `bclr' or `bset'\n     instructions.\n\n\n4.3.2 Trampoline Generation\n---------------------------\n\nFor 68HC11 and 68HC12, `ld' can generate trampoline code to call a far\nfunction using a normal `jsr' instruction. The linker will also change\nthe relocation to some far function to use the trampoline address\ninstead of the function address. This is typically the case when a\npointer to a function is taken. The pointer will in fact point to the\nfunction trampoline.\n\n\u001f\nFile: ld.info,  Node: ARM,  Next: HPPA ELF32,  Prev: i960,  Up: Machine Dependent\n\n4.4 `ld' and the ARM family\n===========================\n\nFor the ARM, `ld' will generate code stubs to allow functions calls\nbetween ARM and Thumb code.  These stubs only work with code that has\nbeen compiled and assembled with the `-mthumb-interwork' command line\noption.  If it is necessary to link with old ARM object files or\nlibraries, which have not been compiled with the -mthumb-interwork\noption then the `--support-old-code' command line switch should be\ngiven to the linker.  This will make it generate larger stub functions\nwhich will work with non-interworking aware ARM code.  Note, however,\nthe linker does not support generating stubs for function calls to\nnon-interworking aware Thumb code.\n\n   The `--thumb-entry' switch is a duplicate of the generic `--entry'\nswitch, in that it sets the program's starting address.  But it also\nsets the bottom bit of the address, so that it can be branched to using\na BX instruction, and the program will start executing in Thumb mode\nstraight away.\n\n   The `--use-nul-prefixed-import-tables' switch is specifying, that\nthe import tables idata4 and idata5 have to be generated with a zero\nelememt prefix for import libraries. This is the old style to generate\nimport tables. By default this option is turned off.\n\n   The `--be8' switch instructs `ld' to generate BE8 format\nexecutables.  This option is only valid when linking big-endian objects.\nThe resulting image will contain big-endian data and little-endian code.\n\n   The `R_ARM_TARGET1' relocation is typically used for entries in the\n`.init_array' section.  It is interpreted as either `R_ARM_REL32' or\n`R_ARM_ABS32', depending on the target.  The `--target1-rel' and\n`--target1-abs' switches override the default.\n\n   The `--target2=type' switch overrides the default definition of the\n`R_ARM_TARGET2' relocation.  Valid values for `type', their meanings,\nand target defaults are as follows:\n`rel'\n     `R_ARM_REL32' (arm*-*-elf, arm*-*-eabi)\n\n`abs'\n     `R_ARM_ABS32' (arm*-*-symbianelf)\n\n`got-rel'\n     `R_ARM_GOT_PREL' (arm*-*-linux, arm*-*-*bsd)\n\n   The `R_ARM_V4BX' relocation (defined by the ARM AAELF specification)\nenables objects compiled for the ARMv4 architecture to be\ninterworking-safe when linked with other objects compiled for ARMv4t,\nbut also allows pure ARMv4 binaries to be built from the same ARMv4\nobjects.\n\n   In the latter case, the switch `--fix-v4bx' must be passed to the\nlinker, which causes v4t `BX rM' instructions to be rewritten as `MOV\nPC,rM', since v4 processors do not have a `BX' instruction.\n\n   In the former case, the switch should not be used, and `R_ARM_V4BX'\nrelocations are ignored.\n\n   Replace `BX rM' instructions identified by `R_ARM_V4BX' relocations\nwith a branch to the following veneer:\n\n     TST rM, #1\n     MOVEQ PC, rM\n     BX Rn\n\n   This allows generation of libraries/applications that work on ARMv4\ncores and are still interworking safe.  Note that the above veneer\nclobbers the condition flags, so may cause incorrect progrm behavior in\nrare cases.\n\n   The `--use-blx' switch enables the linker to use ARM/Thumb BLX\ninstructions (available on ARMv5t and above) in various situations.\nCurrently it is used to perform calls via the PLT from Thumb code using\nBLX rather than using BX and a mode-switching stub before each PLT\nentry. This should lead to such calls executing slightly faster.\n\n   This option is enabled implicitly for SymbianOS, so there is no need\nto specify it if you are using that target.\n\n   The `--vfp11-denorm-fix' switch enables a link-time workaround for a\nbug in certain VFP11 coprocessor hardware, which sometimes allows\ninstructions with denorm operands (which must be handled by support\ncode) to have those operands overwritten by subsequent instructions\nbefore the support code can read the intended values.\n\n   The bug may be avoided in scalar mode if you allow at least one\nintervening instruction between a VFP11 instruction which uses a\nregister and another instruction which writes to the same register, or\nat least two intervening instructions if vector mode is in use. The bug\nonly affects full-compliance floating-point mode: you do not need this\nworkaround if you are using \"runfast\" mode. Please contact ARM for\nfurther details.\n\n   If you know you are using buggy VFP11 hardware, you can enable this\nworkaround by specifying the linker option `--vfp-denorm-fix=scalar' if\nyou are using the VFP11 scalar mode only, or `--vfp-denorm-fix=vector'\nif you are using vector mode (the latter also works for scalar code).\nThe default is `--vfp-denorm-fix=none'.\n\n   If the workaround is enabled, instructions are scanned for\npotentially-troublesome sequences, and a veneer is created for each\nsuch sequence which may trigger the erratum. The veneer consists of the\nfirst instruction of the sequence and a branch back to the subsequent\ninstruction. The original instruction is then replaced with a branch to\nthe veneer. The extra cycles required to call and return from the veneer\nare sufficient to avoid the erratum in both the scalar and vector cases.\n\n   The `--no-enum-size-warning' switch prevents the linker from warning\nwhen linking object files that specify incompatible EABI enumeration\nsize attributes.  For example, with this switch enabled, linking of an\nobject file using 32-bit enumeration values with another using\nenumeration values fitted into the smallest possible space will not be\ndiagnosed.\n\n   The `--no-wchar-size-warning' switch prevents the linker from\nwarning when linking object files that specify incompatible EABI\n`wchar_t' size attributes.  For example, with this switch enabled,\nlinking of an object file using 32-bit `wchar_t' values with another\nusing 16-bit `wchar_t' values will not be diagnosed.\n\n   The `--pic-veneer' switch makes the linker use PIC sequences for\nARM/Thumb interworking veneers, even if the rest of the binary is not\nPIC.  This avoids problems on uClinux targets where `--emit-relocs' is\nused to generate relocatable binaries.\n\n   The linker will automatically generate and insert small sequences of\ncode into a linked ARM ELF executable whenever an attempt is made to\nperform a function call to a symbol that is too far away.  The\nplacement of these sequences of instructions - called stubs - is\ncontrolled by the command line option `--stub-group-size=N'.  The\nplacement is important because a poor choice can create a need for\nduplicate stubs, increasing the code sizw.  The linker will try to\ngroup stubs together in order to reduce interruptions to the flow of\ncode, but it needs guidance as to how big these groups should be and\nwhere they should be placed.\n\n   The value of `N', the parameter to the `--stub-group-size=' option\ncontrols where the stub groups are placed.  If it is negative then all\nstubs are placed after the first branch that needs them.  If it is\npositive then the stubs can be placed either before or after the\nbranches that need them.  If the value of `N' is 1 (either +1 or -1)\nthen the linker will choose exactly where to place groups of stubs,\nusing its built in heuristics.  A value of `N' greater than 1 (or\nsmaller than -1) tells the linker that a single group of stubs can\nservice at most `N' bytes from the input sections.\n\n   The default, if `--stub-group-size=' is not specified, is `N = +1'.\n\n   Farcalls stubs insertion is fully supported for the ARM-EABI target\nonly, because it relies on object files properties not present\notherwise.\n\n\u001f\nFile: ld.info,  Node: HPPA ELF32,  Next: M68K,  Prev: ARM,  Up: Machine Dependent\n\n4.5 `ld' and HPPA 32-bit ELF Support\n====================================\n\nWhen generating a shared library, `ld' will by default generate import\nstubs suitable for use with a single sub-space application.  The\n`--multi-subspace' switch causes `ld' to generate export stubs, and\ndifferent (larger) import stubs suitable for use with multiple\nsub-spaces.\n\n   Long branch stubs and import/export stubs are placed by `ld' in stub\nsections located between groups of input sections.  `--stub-group-size'\nspecifies the maximum size of a group of input sections handled by one\nstub section.  Since branch offsets are signed, a stub section may\nserve two groups of input sections, one group before the stub section,\nand one group after it.  However, when using conditional branches that\nrequire stubs, it may be better (for branch prediction) that stub\nsections only serve one group of input sections.  A negative value for\n`N' chooses this scheme, ensuring that branches to stubs always use a\nnegative offset.  Two special values of `N' are recognized, `1' and\n`-1'.  These both instruct `ld' to automatically size input section\ngroups for the branch types detected, with the same behaviour regarding\nstub placement as other positive or negative values of `N' respectively.\n\n   Note that `--stub-group-size' does not split input sections.  A\nsingle input section larger than the group size specified will of course\ncreate a larger group (of one section).  If input sections are too\nlarge, it may not be possible for a branch to reach its stub.\n\n\u001f\nFile: ld.info,  Node: M68K,  Next: MMIX,  Prev: HPPA ELF32,  Up: Machine Dependent\n\n4.6 `ld' and the Motorola 68K family\n====================================\n\nThe `--got=TYPE' option lets you choose the GOT generation scheme.  The\nchoices are `single', `negative', `multigot' and `target'.  When\n`target' is selected the linker chooses the default GOT generation\nscheme for the current target.  `single' tells the linker to generate a\nsingle GOT with entries only at non-negative offsets.  `negative'\ninstructs the linker to generate a single GOT with entries at both\nnegative and positive offsets.  Not all environments support such GOTs.\n`multigot' allows the linker to generate several GOTs in the output\nfile.  All GOT references from a single input object file access the\nsame GOT, but references from different input object files might access\ndifferent GOTs.  Not all environments support such GOTs.\n\n\u001f\nFile: ld.info,  Node: MMIX,  Next: MSP430,  Prev: M68K,  Up: Machine Dependent\n\n4.7 `ld' and MMIX\n=================\n\nFor MMIX, there is a choice of generating `ELF' object files or `mmo'\nobject files when linking.  The simulator `mmix' understands the `mmo'\nformat.  The binutils `objcopy' utility can translate between the two\nformats.\n\n   There is one special section, the `.MMIX.reg_contents' section.\nContents in this section is assumed to correspond to that of global\nregisters, and symbols referring to it are translated to special\nsymbols, equal to registers.  In a final link, the start address of the\n`.MMIX.reg_contents' section corresponds to the first allocated global\nregister multiplied by 8.  Register `$255' is not included in this\nsection; it is always set to the program entry, which is at the symbol\n`Main' for `mmo' files.\n\n   Global symbols with the prefix `__.MMIX.start.', for example\n`__.MMIX.start..text' and `__.MMIX.start..data' are special.  The\ndefault linker script uses these to set the default start address of a\nsection.\n\n   Initial and trailing multiples of zero-valued 32-bit words in a\nsection, are left out from an mmo file.\n\n\u001f\nFile: ld.info,  Node: MSP430,  Next: M68HC11/68HC12,  Prev: MMIX,  Up: Machine Dependent\n\n4.8 `ld' and MSP430\n===================\n\nFor the MSP430 it is possible to select the MPU architecture.  The flag\n`-m [mpu type]' will select an appropriate linker script for selected\nMPU type.  (To get a list of known MPUs just pass `-m help' option to\nthe linker).\n\n   The linker will recognize some extra sections which are MSP430\nspecific:\n\n``.vectors''\n     Defines a portion of ROM where interrupt vectors located.\n\n``.bootloader''\n     Defines the bootloader portion of the ROM (if applicable).  Any\n     code in this section will be uploaded to the MPU.\n\n``.infomem''\n     Defines an information memory section (if applicable).  Any code in\n     this section will be uploaded to the MPU.\n\n``.infomemnobits''\n     This is the same as the `.infomem' section except that any code in\n     this section will not be uploaded to the MPU.\n\n``.noinit''\n     Denotes a portion of RAM located above `.bss' section.\n\n     The last two sections are used by gcc.\n\n\u001f\nFile: ld.info,  Node: PowerPC ELF32,  Next: PowerPC64 ELF64,  Prev: M68HC11/68HC12,  Up: Machine Dependent\n\n4.9 `ld' and PowerPC 32-bit ELF Support\n=======================================\n\nBranches on PowerPC processors are limited to a signed 26-bit\ndisplacement, which may result in `ld' giving `relocation truncated to\nfit' errors with very large programs.  `--relax' enables the generation\nof trampolines that can access the entire 32-bit address space.  These\ntrampolines are inserted at section boundaries, so may not themselves\nbe reachable if an input section exceeds 33M in size.  You may combine\n`-r' and `--relax' to add trampolines in a partial link.  In that case\nboth branches to undefined symbols and inter-section branches are also\nconsidered potentially out of range, and trampolines inserted.\n\n`--bss-plt'\n     Current PowerPC GCC accepts a `-msecure-plt' option that generates\n     code capable of using a newer PLT and GOT layout that has the\n     security advantage of no executable section ever needing to be\n     writable and no writable section ever being executable.  PowerPC\n     `ld' will generate this layout, including stubs to access the PLT,\n     if all input files (including startup and static libraries) were\n     compiled with `-msecure-plt'.  `--bss-plt' forces the old BSS PLT\n     (and GOT layout) which can give slightly better performance.\n\n`--secure-plt'\n     `ld' will use the new PLT and GOT layout if it is linking new\n     `-fpic' or `-fPIC' code, but does not do so automatically when\n     linking non-PIC code.  This option requests the new PLT and GOT\n     layout.  A warning will be given if some object file requires the\n     old style BSS PLT.\n\n`--sdata-got'\n     The new secure PLT and GOT are placed differently relative to other\n     sections compared to older BSS PLT and GOT placement.  The\n     location of `.plt' must change because the new secure PLT is an\n     initialized section while the old PLT is uninitialized.  The\n     reason for the `.got' change is more subtle:  The new placement\n     allows `.got' to be read-only in applications linked with `-z\n     relro -z now'.  However, this placement means that `.sdata' cannot\n     always be used in shared libraries, because the PowerPC ABI\n     accesses `.sdata' in shared libraries from the GOT pointer.\n     `--sdata-got' forces the old GOT placement.  PowerPC GCC doesn't\n     use `.sdata' in shared libraries, so this option is really only\n     useful for other compilers that may do so.\n\n`--emit-stub-syms'\n     This option causes `ld' to label linker stubs with a local symbol\n     that encodes the stub type and destination.\n\n`--no-tls-optimize'\n     PowerPC `ld' normally performs some optimization of code sequences\n     used to access Thread-Local Storage.  Use this option to disable\n     the optimization.\n\n\u001f\nFile: ld.info,  Node: PowerPC64 ELF64,  Next: SPU ELF,  Prev: PowerPC ELF32,  Up: Machine Dependent\n\n4.10 `ld' and PowerPC64 64-bit ELF Support\n==========================================\n\n`--stub-group-size'\n     Long branch stubs, PLT call stubs  and TOC adjusting stubs are\n     placed by `ld' in stub sections located between groups of input\n     sections.  `--stub-group-size' specifies the maximum size of a\n     group of input sections handled by one stub section.  Since branch\n     offsets are signed, a stub section may serve two groups of input\n     sections, one group before the stub section, and one group after\n     it.  However, when using conditional branches that require stubs,\n     it may be better (for branch prediction) that stub sections only\n     serve one group of input sections.  A negative value for `N'\n     chooses this scheme, ensuring that branches to stubs always use a\n     negative offset.  Two special values of `N' are recognized, `1'\n     and `-1'.  These both instruct `ld' to automatically size input\n     section groups for the branch types detected, with the same\n     behaviour regarding stub placement as other positive or negative\n     values of `N' respectively.\n\n     Note that `--stub-group-size' does not split input sections.  A\n     single input section larger than the group size specified will of\n     course create a larger group (of one section).  If input sections\n     are too large, it may not be possible for a branch to reach its\n     stub.\n\n`--emit-stub-syms'\n     This option causes `ld' to label linker stubs with a local symbol\n     that encodes the stub type and destination.\n\n`--dotsyms, --no-dotsyms'\n     These two options control how `ld' interprets version patterns in\n     a version script.  Older PowerPC64 compilers emitted both a\n     function descriptor symbol with the same name as the function, and\n     a code entry symbol with the name prefixed by a dot (`.').  To\n     properly version a function `foo', the version script thus needs\n     to control both `foo' and `.foo'.  The option `--dotsyms', on by\n     default, automatically adds the required dot-prefixed patterns.\n     Use `--no-dotsyms' to disable this feature.\n\n`--no-tls-optimize'\n     PowerPC64 `ld' normally performs some optimization of code\n     sequences used to access Thread-Local Storage.  Use this option to\n     disable the optimization.\n\n`--no-opd-optimize'\n     PowerPC64 `ld' normally removes `.opd' section entries\n     corresponding to deleted link-once functions, or functions removed\n     by the action of `--gc-sections' or linker script `/DISCARD/'.\n     Use this option to disable `.opd' optimization.\n\n`--non-overlapping-opd'\n     Some PowerPC64 compilers have an option to generate compressed\n     `.opd' entries spaced 16 bytes apart, overlapping the third word,\n     the static chain pointer (unused in C) with the first word of the\n     next entry.  This option expands such entries to the full 24 bytes.\n\n`--no-toc-optimize'\n     PowerPC64 `ld' normally removes unused `.toc' section entries.\n     Such entries are detected by examining relocations that reference\n     the TOC in code sections.  A reloc in a deleted code section marks\n     a TOC word as unneeded, while a reloc in a kept code section marks\n     a TOC word as needed.  Since the TOC may reference itself, TOC\n     relocs are also examined.  TOC words marked as both needed and\n     unneeded will of course be kept.  TOC words without any referencing\n     reloc are assumed to be part of a multi-word entry, and are kept or\n     discarded as per the nearest marked preceding word.  This works\n     reliably for compiler generated code, but may be incorrect if\n     assembly code is used to insert TOC entries.  Use this option to\n     disable the optimization.\n\n`--no-multi-toc'\n     By default, PowerPC64 GCC generates code for a TOC model where TOC\n     entries are accessed with a 16-bit offset from r2.  This limits the\n     total TOC size to 64K.  PowerPC64 `ld' extends this limit by\n     grouping code sections such that each group uses less than 64K for\n     its TOC entries, then inserts r2 adjusting stubs between\n     inter-group calls.  `ld' does not split apart input sections, so\n     cannot help if a single input file has a `.toc' section that\n     exceeds 64K, most likely from linking multiple files with `ld -r'.\n     Use this option to turn off this feature.\n\n\u001f\nFile: ld.info,  Node: SPU ELF,  Next: TI COFF,  Prev: PowerPC64 ELF64,  Up: Machine Dependent\n\n4.11 `ld' and SPU ELF Support\n=============================\n\n`--plugin'\n     This option marks an executable as a PIC plugin module.\n\n`--no-overlays'\n     Normally, `ld' recognizes calls to functions within overlay\n     regions, and redirects such calls to an overlay manager via a stub.\n     `ld' also provides a built-in overlay manager.  This option turns\n     off all this special overlay handling.\n\n`--emit-stub-syms'\n     This option causes `ld' to label overlay stubs with a local symbol\n     that encodes the stub type and destination.\n\n`--extra-overlay-stubs'\n     This option causes `ld' to add overlay call stubs on all function\n     calls out of overlay regions.  Normally stubs are not added on\n     calls to non-overlay regions.\n\n`--local-store=lo:hi'\n     `ld' usually checks that a final executable for SPU fits in the\n     address range 0 to 256k.  This option may be used to change the\n     range.  Disable the check entirely with `--local-store=0:0'.\n\n`--stack-analysis'\n     SPU local store space is limited.  Over-allocation of stack space\n     unnecessarily limits space available for code and data, while\n     under-allocation results in runtime failures.  If given this\n     option, `ld' will provide an estimate of maximum stack usage.\n     `ld' does this by examining symbols in code sections to determine\n     the extents of functions, and looking at function prologues for\n     stack adjusting instructions.  A call-graph is created by looking\n     for relocations on branch instructions.  The graph is then searched\n     for the maximum stack usage path.  Note that this analysis does not\n     find calls made via function pointers, and does not handle\n     recursion and other cycles in the call graph.  Stack usage may be\n     under-estimated if your code makes such calls.  Also, stack usage\n     for dynamic allocation, e.g. alloca, will not be detected.  If a\n     link map is requested, detailed information about each function's\n     stack usage and calls will be given.\n\n`--emit-stack-syms'\n     This option, if given along with `--stack-analysis' will result in\n     `ld' emitting stack sizing symbols for each function.  These take\n     the form `__stack_<function_name>' for global functions, and\n     `__stack_<number>_<function_name>' for static functions.\n     `<number>' is the section id in hex.  The value of such symbols is\n     the stack requirement for the corresponding function.  The symbol\n     size will be zero, type `STT_NOTYPE', binding `STB_LOCAL', and\n     section `SHN_ABS'.\n\n\u001f\nFile: ld.info,  Node: TI COFF,  Next: WIN32,  Prev: SPU ELF,  Up: Machine Dependent\n\n4.12 `ld''s Support for Various TI COFF Versions\n================================================\n\nThe `--format' switch allows selection of one of the various TI COFF\nversions.  The latest of this writing is 2; versions 0 and 1 are also\nsupported.  The TI COFF versions also vary in header byte-order format;\n`ld' will read any version or byte order, but the output header format\ndepends on the default specified by the specific target.\n\n\u001f\nFile: ld.info,  Node: WIN32,  Next: Xtensa,  Prev: TI COFF,  Up: Machine Dependent\n\n4.13 `ld' and WIN32 (cygwin/mingw)\n==================================\n\nThis section describes some of the win32 specific `ld' issues.  See\n*Note Command Line Options: Options. for detailed description of the\ncommand line options mentioned here.\n\n_import libraries_\n     The standard Windows linker creates and uses so-called import\n     libraries, which contains information for linking to dll's.  They\n     are regular static archives and are handled as any other static\n     archive.  The cygwin and mingw ports of `ld' have specific support\n     for creating such libraries provided with the `--out-implib'\n     command line option.\n\n_exporting DLL symbols_\n     The cygwin/mingw `ld' has several ways to export symbols for dll's.\n\n    _using auto-export functionality_\n          By default `ld' exports symbols with the auto-export\n          functionality, which is controlled by the following command\n          line options:\n\n             * -export-all-symbols   [This is the default]\n\n             * -exclude-symbols\n\n             * -exclude-libs\n\n             * -exclude-modules-for-implib\n\n             * -version-script\n\n          When auto-export is in operation, `ld' will export all the\n          non-local (global and common) symbols it finds in a DLL, with\n          the exception of a few symbols known to belong to the\n          system's runtime and libraries.  As it will often not be\n          desirable to export all of a DLL's symbols, which may include\n          private functions that are not part of any public interface,\n          the command-line options listed above may be used to filter\n          symbols out from the list for exporting.  The `--output-def'\n          option can be used in order to see the final list of exported\n          symbols with all exclusions taken into effect.\n\n          If `--export-all-symbols' is not given explicitly on the\n          command line, then the default auto-export behavior will be\n          _disabled_ if either of the following are true:\n\n             * A DEF file is used.\n\n             * Any symbol in any object file was marked with the\n               __declspec(dllexport) attribute.\n\n    _using a DEF file_\n          Another way of exporting symbols is using a DEF file.  A DEF\n          file is an ASCII file containing definitions of symbols which\n          should be exported when a dll is created.  Usually it is\n          named `<dll name>.def' and is added as any other object file\n          to the linker's command line.  The file's name must end in\n          `.def' or `.DEF'.\n\n               gcc -o <output> <objectfiles> <dll name>.def\n\n          Using a DEF file turns off the normal auto-export behavior,\n          unless the `--export-all-symbols' option is also used.\n\n          Here is an example of a DEF file for a shared library called\n          `xyz.dll':\n\n               LIBRARY \"xyz.dll\" BASE=0x20000000\n\n               EXPORTS\n               foo\n               bar\n               _bar = bar\n               another_foo = abc.dll.afoo\n               var1 DATA\n\n          This example defines a DLL with a non-default base address\n          and five symbols in the export table. The third exported\n          symbol `_bar' is an alias for the second. The fourth symbol,\n          `another_foo' is resolved by \"forwarding\" to another module\n          and treating it as an alias for `afoo' exported from the DLL\n          `abc.dll'. The final symbol `var1' is declared to be a data\n          object.\n\n          The optional `LIBRARY <name>' command indicates the _internal_\n          name of the output DLL. If `<name>' does not include a suffix,\n          the default library suffix, `.DLL' is appended.\n\n          When the .DEF file is used to build an application, rather\n          than a library, the `NAME <name>' command should be used\n          instead of `LIBRARY'. If `<name>' does not include a suffix,\n          the default executable suffix, `.EXE' is appended.\n\n          With either `LIBRARY <name>' or `NAME <name>' the optional\n          specification `BASE = <number>' may be used to specify a\n          non-default base address for the image.\n\n          If neither `LIBRARY <name>' nor  `NAME <name>' is specified,\n          or they specify an empty string, the internal name is the\n          same as the filename specified on the command line.\n\n          The complete specification of an export symbol is:\n\n               EXPORTS\n                 ( (  ( <name1> [ = <name2> ] )\n                    | ( <name1> = <module-name> . <external-name>))\n                 [ @ <integer> ] [NONAME] [DATA] [CONSTANT] [PRIVATE] ) *\n\n          Declares `<name1>' as an exported symbol from the DLL, or\n          declares `<name1>' as an exported alias for `<name2>'; or\n          declares `<name1>' as a \"forward\" alias for the symbol\n          `<external-name>' in the DLL `<module-name>'.  Optionally,\n          the symbol may be exported by the specified ordinal\n          `<integer>' alias.\n\n          The optional keywords that follow the declaration indicate:\n\n          `NONAME': Do not put the symbol name in the DLL's export\n          table.  It will still be exported by its ordinal alias\n          (either the value specified by the .def specification or,\n          otherwise, the value assigned by the linker). The symbol\n          name, however, does remain visible in the import library (if\n          any), unless `PRIVATE' is also specified.\n\n          `DATA': The symbol is a variable or object, rather than a\n          function.  The import lib will export only an indirect\n          reference to `foo' as the symbol `_imp__foo' (ie, `foo' must\n          be resolved as `*_imp__foo').\n\n          `CONSTANT': Like `DATA', but put the undecorated `foo' as\n          well as `_imp__foo' into the import library. Both refer to the\n          read-only import address table's pointer to the variable, not\n          to the variable itself. This can be dangerous. If the user\n          code fails to add the `dllimport' attribute and also fails to\n          explicitly add the extra indirection that the use of the\n          attribute enforces, the application will behave unexpectedly.\n\n          `PRIVATE': Put the symbol in the DLL's export table, but do\n          not put it into the static import library used to resolve\n          imports at link time. The symbol can still be imported using\n          the `LoadLibrary/GetProcAddress' API at runtime or by by\n          using the GNU ld extension of linking directly to the DLL\n          without an import library.\n\n          See ld/deffilep.y in the binutils sources for the full\n          specification of other DEF file statements\n\n          While linking a shared dll, `ld' is able to create a DEF file\n          with the `--output-def <file>' command line option.\n\n    _Using decorations_\n          Another way of marking symbols for export is to modify the\n          source code itself, so that when building the DLL each symbol\n          to be exported is declared as:\n\n               __declspec(dllexport) int a_variable\n               __declspec(dllexport) void a_function(int with_args)\n\n          All such symbols will be exported from the DLL.  If, however,\n          any of the object files in the DLL contain symbols decorated\n          in this way, then the normal auto-export behavior is\n          disabled, unless the `--export-all-symbols' option is also\n          used.\n\n          Note that object files that wish to access these symbols must\n          _not_ decorate them with dllexport.  Instead, they should use\n          dllimport, instead:\n\n               __declspec(dllimport) int a_variable\n               __declspec(dllimport) void a_function(int with_args)\n\n          This complicates the structure of library header files,\n          because when included by the library itself the header must\n          declare the variables and functions as dllexport, but when\n          included by client code the header must declare them as\n          dllimport.  There are a number of idioms that are typically\n          used to do this; often client code can omit the __declspec()\n          declaration completely.  See `--enable-auto-import' and\n          `automatic data imports' for more information.\n\n_automatic data imports_\n     The standard Windows dll format supports data imports from dlls\n     only by adding special decorations (dllimport/dllexport), which\n     let the compiler produce specific assembler instructions to deal\n     with this issue.  This increases the effort necessary to port\n     existing Un*x code to these platforms, especially for large c++\n     libraries and applications.  The auto-import feature, which was\n     initially provided by Paul Sokolovsky, allows one to omit the\n     decorations to achieve a behavior that conforms to that on\n     POSIX/Un*x platforms. This feature is enabled with the\n     `--enable-auto-import' command-line option, although it is enabled\n     by default on cygwin/mingw.  The `--enable-auto-import' option\n     itself now serves mainly to suppress any warnings that are\n     ordinarily emitted when linked objects trigger the feature's use.\n\n     auto-import of variables does not always work flawlessly without\n     additional assistance.  Sometimes, you will see this message\n\n     \"variable '<var>' can't be auto-imported. Please read the\n     documentation for ld's `--enable-auto-import' for details.\"\n\n     The `--enable-auto-import' documentation explains why this error\n     occurs, and several methods that can be used to overcome this\n     difficulty.  One of these methods is the _runtime pseudo-relocs_\n     feature, described below.\n\n     For complex variables imported from DLLs (such as structs or\n     classes), object files typically contain a base address for the\n     variable and an offset (_addend_) within the variable-to specify a\n     particular field or public member, for instance.  Unfortunately,\n     the runtime loader used in win32 environments is incapable of\n     fixing these references at runtime without the additional\n     information supplied by dllimport/dllexport decorations.  The\n     standard auto-import feature described above is unable to resolve\n     these references.\n\n     The `--enable-runtime-pseudo-relocs' switch allows these\n     references to be resolved without error, while leaving the task of\n     adjusting the references themselves (with their non-zero addends)\n     to specialized code provided by the runtime environment.  Recent\n     versions of the cygwin and mingw environments and compilers\n     provide this runtime support; older versions do not.  However, the\n     support is only necessary on the developer's platform; the\n     compiled result will run without error on an older system.\n\n     `--enable-runtime-pseudo-relocs' is not the default; it must be\n     explicitly enabled as needed.\n\n_direct linking to a dll_\n     The cygwin/mingw ports of `ld' support the direct linking,\n     including data symbols, to a dll without the usage of any import\n     libraries.  This is much faster and uses much less memory than\n     does the traditional import library method, especially when\n     linking large libraries or applications.  When `ld' creates an\n     import lib, each function or variable exported from the dll is\n     stored in its own bfd, even though a single bfd could contain many\n     exports.  The overhead involved in storing, loading, and\n     processing so many bfd's is quite large, and explains the\n     tremendous time, memory, and storage needed to link against\n     particularly large or complex libraries when using import libs.\n\n     Linking directly to a dll uses no extra command-line switches\n     other than `-L' and `-l', because `ld' already searches for a\n     number of names to match each library.  All that is needed from\n     the developer's perspective is an understanding of this search, in\n     order to force ld to select the dll instead of an import library.\n\n     For instance, when ld is called with the argument `-lxxx' it will\n     attempt to find, in the first directory of its search path,\n\n          libxxx.dll.a\n          xxx.dll.a\n          libxxx.a\n          xxx.lib\n          cygxxx.dll (*)\n          libxxx.dll\n          xxx.dll\n\n     before moving on to the next directory in the search path.\n\n     (*) Actually, this is not `cygxxx.dll' but in fact is\n     `<prefix>xxx.dll', where `<prefix>' is set by the `ld' option\n     `--dll-search-prefix=<prefix>'. In the case of cygwin, the\n     standard gcc spec file includes `--dll-search-prefix=cyg', so in\n     effect we actually search for `cygxxx.dll'.\n\n     Other win32-based unix environments, such as mingw or pw32, may\n     use other `<prefix>'es, although at present only cygwin makes use\n     of this feature.  It was originally intended to help avoid name\n     conflicts among dll's built for the various win32/un*x\n     environments, so that (for example) two versions of a zlib dll\n     could coexist on the same machine.\n\n     The generic cygwin/mingw path layout uses a `bin' directory for\n     applications and dll's and a `lib' directory for the import\n     libraries (using cygwin nomenclature):\n\n          bin/\n          \tcygxxx.dll\n          lib/\n          \tlibxxx.dll.a   (in case of dll's)\n          \tlibxxx.a       (in case of static archive)\n\n     Linking directly to a dll without using the import library can be\n     done two ways:\n\n     1. Use the dll directly by adding the `bin' path to the link line\n          gcc -Wl,-verbose  -o a.exe -L../bin/ -lxxx\n\n     However, as the dll's often have version numbers appended to their\n     names (`cygncurses-5.dll') this will often fail, unless one\n     specifies `-L../bin -lncurses-5' to include the version.  Import\n     libs are generally not versioned, and do not have this difficulty.\n\n     2. Create a symbolic link from the dll to a file in the `lib'\n     directory according to the above mentioned search pattern.  This\n     should be used to avoid unwanted changes in the tools needed for\n     making the app/dll.\n\n          ln -s bin/cygxxx.dll lib/[cyg|lib|]xxx.dll[.a]\n\n     Then you can link without any make environment changes.\n\n          gcc -Wl,-verbose  -o a.exe -L../lib/ -lxxx\n\n     This technique also avoids the version number problems, because\n     the following is perfectly legal\n\n          bin/\n          \tcygxxx-5.dll\n          lib/\n          \tlibxxx.dll.a -> ../bin/cygxxx-5.dll\n\n     Linking directly to a dll without using an import lib will work\n     even when auto-import features are exercised, and even when\n     `--enable-runtime-pseudo-relocs' is used.\n\n     Given the improvements in speed and memory usage, one might\n     justifiably wonder why import libraries are used at all.  There\n     are three reasons:\n\n     1. Until recently, the link-directly-to-dll functionality did _not_\n     work with auto-imported data.\n\n     2. Sometimes it is necessary to include pure static objects within\n     the import library (which otherwise contains only bfd's for\n     indirection symbols that point to the exports of a dll).  Again,\n     the import lib for the cygwin kernel makes use of this ability,\n     and it is not possible to do this without an import lib.\n\n     3. Symbol aliases can only be resolved using an import lib.  This\n     is critical when linking against OS-supplied dll's (eg, the win32\n     API) in which symbols are usually exported as undecorated aliases\n     of their stdcall-decorated assembly names.\n\n     So, import libs are not going away.  But the ability to replace\n     true import libs with a simple symbolic link to (or a copy of) a\n     dll, in many cases, is a useful addition to the suite of tools\n     binutils makes available to the win32 developer.  Given the\n     massive improvements in memory requirements during linking, storage\n     requirements, and linking speed, we expect that many developers\n     will soon begin to use this feature whenever possible.\n\n_symbol aliasing_\n\n    _adding additional names_\n          Sometimes, it is useful to export symbols with additional\n          names.  A symbol `foo' will be exported as `foo', but it can\n          also be exported as `_foo' by using special directives in the\n          DEF file when creating the dll.  This will affect also the\n          optional created import library.  Consider the following DEF\n          file:\n\n               LIBRARY \"xyz.dll\" BASE=0x61000000\n\n               EXPORTS\n               foo\n               _foo = foo\n\n          The line `_foo = foo' maps the symbol `foo' to `_foo'.\n\n          Another method for creating a symbol alias is to create it in\n          the source code using the \"weak\" attribute:\n\n               void foo () { /* Do something.  */; }\n               void _foo () __attribute__ ((weak, alias (\"foo\")));\n\n          See the gcc manual for more information about attributes and\n          weak symbols.\n\n    _renaming symbols_\n          Sometimes it is useful to rename exports.  For instance, the\n          cygwin kernel does this regularly.  A symbol `_foo' can be\n          exported as `foo' but not as `_foo' by using special\n          directives in the DEF file. (This will also affect the import\n          library, if it is created).  In the following example:\n\n               LIBRARY \"xyz.dll\" BASE=0x61000000\n\n               EXPORTS\n               _foo = foo\n\n          The line `_foo = foo' maps the exported symbol `foo' to\n          `_foo'.\n\n     Note: using a DEF file disables the default auto-export behavior,\n     unless the `--export-all-symbols' command line option is used.\n     If, however, you are trying to rename symbols, then you should list\n     _all_ desired exports in the DEF file, including the symbols that\n     are not being renamed, and do _not_ use the `--export-all-symbols'\n     option.  If you list only the renamed symbols in the DEF file, and\n     use `--export-all-symbols' to handle the other symbols, then the\n     both the new names _and_ the original names for the renamed\n     symbols will be exported.  In effect, you'd be aliasing those\n     symbols, not renaming them, which is probably not what you wanted.\n\n_weak externals_\n     The Windows object format, PE, specifies a form of weak symbols\n     called weak externals.  When a weak symbol is linked and the\n     symbol is not defined, the weak symbol becomes an alias for some\n     other symbol.  There are three variants of weak externals:\n        * Definition is searched for in objects and libraries,\n          historically called lazy externals.\n\n        * Definition is searched for only in other objects, not in\n          libraries.  This form is not presently implemented.\n\n        * No search; the symbol is an alias.  This form is not presently\n          implemented.\n     As a GNU extension, weak symbols that do not specify an alternate\n     symbol are supported.  If the symbol is undefined when linking,\n     the symbol uses a default value.\n\n_aligned common symbols_\n     As a GNU extension to the PE file format, it is possible to\n     specify the desired alignment for a common symbol.  This\n     information is conveyed from the assembler or compiler to the\n     linker by means of GNU-specific commands carried in the object\n     file's `.drectve' section, which are recognized by `ld' and\n     respected when laying out the common symbols.  Native tools will\n     be able to process object files employing this GNU extension, but\n     will fail to respect the alignment instructions, and may issue\n     noisy warnings about unknown linker directives.\n\n\u001f\nFile: ld.info,  Node: Xtensa,  Prev: WIN32,  Up: Machine Dependent\n\n4.14 `ld' and Xtensa Processors\n===============================\n\nThe default `ld' behavior for Xtensa processors is to interpret\n`SECTIONS' commands so that lists of explicitly named sections in a\nspecification with a wildcard file will be interleaved when necessary to\nkeep literal pools within the range of PC-relative load offsets.  For\nexample, with the command:\n\n     SECTIONS\n     {\n       .text : {\n         *(.literal .text)\n       }\n     }\n\n`ld' may interleave some of the `.literal' and `.text' sections from\ndifferent object files to ensure that the literal pools are within the\nrange of PC-relative load offsets.  A valid interleaving might place\nthe `.literal' sections from an initial group of files followed by the\n`.text' sections of that group of files.  Then, the `.literal' sections\nfrom the rest of the files and the `.text' sections from the rest of\nthe files would follow.\n\n   Relaxation is enabled by default for the Xtensa version of `ld' and\nprovides two important link-time optimizations.  The first optimization\nis to combine identical literal values to reduce code size.  A redundant\nliteral will be removed and all the `L32R' instructions that use it\nwill be changed to reference an identical literal, as long as the\nlocation of the replacement literal is within the offset range of all\nthe `L32R' instructions.  The second optimization is to remove\nunnecessary overhead from assembler-generated \"longcall\" sequences of\n`L32R'/`CALLXN' when the target functions are within range of direct\n`CALLN' instructions.\n\n   For each of these cases where an indirect call sequence can be\noptimized to a direct call, the linker will change the `CALLXN'\ninstruction to a `CALLN' instruction, remove the `L32R' instruction,\nand remove the literal referenced by the `L32R' instruction if it is\nnot used for anything else.  Removing the `L32R' instruction always\nreduces code size but can potentially hurt performance by changing the\nalignment of subsequent branch targets.  By default, the linker will\nalways preserve alignments, either by switching some instructions\nbetween 24-bit encodings and the equivalent density instructions or by\ninserting a no-op in place of the `L32R' instruction that was removed.\nIf code size is more important than performance, the `--size-opt'\noption can be used to prevent the linker from widening density\ninstructions or inserting no-ops, except in a few cases where no-ops\nare required for correctness.\n\n   The following Xtensa-specific command-line options can be used to\ncontrol the linker:\n\n`--no-relax'\n     Since the Xtensa version of `ld' enables the `--relax' option by\n     default, the `--no-relax' option is provided to disable relaxation.\n\n`--size-opt'\n     When optimizing indirect calls to direct calls, optimize for code\n     size more than performance.  With this option, the linker will not\n     insert no-ops or widen density instructions to preserve branch\n     target alignment.  There may still be some cases where no-ops are\n     required to preserve the correctness of the code.\n\n\u001f\nFile: ld.info,  Node: BFD,  Next: Reporting Bugs,  Prev: Machine Dependent,  Up: Top\n\n5 BFD\n*****\n\nThe linker accesses object and archive files using the BFD libraries.\nThese libraries allow the linker to use the same routines to operate on\nobject files whatever the object file format.  A different object file\nformat can be supported simply by creating a new BFD back end and adding\nit to the library.  To conserve runtime memory, however, the linker and\nassociated tools are usually configured to support only a subset of the\nobject file formats available.  You can use `objdump -i' (*note\nobjdump: (binutils.info)objdump.) to list all the formats available for\nyour configuration.\n\n   As with most implementations, BFD is a compromise between several\nconflicting requirements. The major factor influencing BFD design was\nefficiency: any time used converting between formats is time which\nwould not have been spent had BFD not been involved. This is partly\noffset by abstraction payback; since BFD simplifies applications and\nback ends, more time and care may be spent optimizing algorithms for a\ngreater speed.\n\n   One minor artifact of the BFD solution which you should bear in mind\nis the potential for information loss.  There are two places where\nuseful information can be lost using the BFD mechanism: during\nconversion and during output. *Note BFD information loss::.\n\n* Menu:\n\n* BFD outline::                 How it works: an outline of BFD\n\n\u001f\nFile: ld.info,  Node: BFD outline,  Up: BFD\n\n5.1 How It Works: An Outline of BFD\n===================================\n\nWhen an object file is opened, BFD subroutines automatically determine\nthe format of the input object file.  They then build a descriptor in\nmemory with pointers to routines that will be used to access elements of\nthe object file's data structures.\n\n   As different information from the object files is required, BFD\nreads from different sections of the file and processes them.  For\nexample, a very common operation for the linker is processing symbol\ntables.  Each BFD back end provides a routine for converting between\nthe object file's representation of symbols and an internal canonical\nformat. When the linker asks for the symbol table of an object file, it\ncalls through a memory pointer to the routine from the relevant BFD\nback end which reads and converts the table into a canonical form.  The\nlinker then operates upon the canonical form. When the link is finished\nand the linker writes the output file's symbol table, another BFD back\nend routine is called to take the newly created symbol table and\nconvert it into the chosen output format.\n\n* Menu:\n\n* BFD information loss::\tInformation Loss\n* Canonical format::\t\tThe BFD\tcanonical object-file format\n\n\u001f\nFile: ld.info,  Node: BFD information loss,  Next: Canonical format,  Up: BFD outline\n\n5.1.1 Information Loss\n----------------------\n\n_Information can be lost during output._ The output formats supported\nby BFD do not provide identical facilities, and information which can\nbe described in one form has nowhere to go in another format. One\nexample of this is alignment information in `b.out'. There is nowhere\nin an `a.out' format file to store alignment information on the\ncontained data, so when a file is linked from `b.out' and an `a.out'\nimage is produced, alignment information will not propagate to the\noutput file. (The linker will still use the alignment information\ninternally, so the link is performed correctly).\n\n   Another example is COFF section names. COFF files may contain an\nunlimited number of sections, each one with a textual section name. If\nthe target of the link is a format which does not have many sections\n(e.g., `a.out') or has sections without names (e.g., the Oasys format),\nthe link cannot be done simply. You can circumvent this problem by\ndescribing the desired input-to-output section mapping with the linker\ncommand language.\n\n   _Information can be lost during canonicalization._ The BFD internal\ncanonical form of the external formats is not exhaustive; there are\nstructures in input formats for which there is no direct representation\ninternally.  This means that the BFD back ends cannot maintain all\npossible data richness through the transformation between external to\ninternal and back to external formats.\n\n   This limitation is only a problem when an application reads one\nformat and writes another.  Each BFD back end is responsible for\nmaintaining as much data as possible, and the internal BFD canonical\nform has structures which are opaque to the BFD core, and exported only\nto the back ends. When a file is read in one format, the canonical form\nis generated for BFD and the application. At the same time, the back\nend saves away any information which may otherwise be lost. If the data\nis then written back in the same format, the back end routine will be\nable to use the canonical form provided by the BFD core as well as the\ninformation it prepared earlier.  Since there is a great deal of\ncommonality between back ends, there is no information lost when\nlinking or copying big endian COFF to little endian COFF, or `a.out' to\n`b.out'.  When a mixture of formats is linked, the information is only\nlost from the files whose format differs from the destination.\n\n\u001f\nFile: ld.info,  Node: Canonical format,  Prev: BFD information loss,  Up: BFD outline\n\n5.1.2 The BFD canonical object-file format\n------------------------------------------\n\nThe greatest potential for loss of information occurs when there is the\nleast overlap between the information provided by the source format,\nthat stored by the canonical format, and that needed by the destination\nformat. A brief description of the canonical form may help you\nunderstand which kinds of data you can count on preserving across\nconversions.  \n\n_files_\n     Information stored on a per-file basis includes target machine\n     architecture, particular implementation format type, a demand\n     pageable bit, and a write protected bit.  Information like Unix\n     magic numbers is not stored here--only the magic numbers' meaning,\n     so a `ZMAGIC' file would have both the demand pageable bit and the\n     write protected text bit set.  The byte order of the target is\n     stored on a per-file basis, so that big- and little-endian object\n     files may be used with one another.\n\n_sections_\n     Each section in the input file contains the name of the section,\n     the section's original address in the object file, size and\n     alignment information, various flags, and pointers into other BFD\n     data structures.\n\n_symbols_\n     Each symbol contains a pointer to the information for the object\n     file which originally defined it, its name, its value, and various\n     flag bits.  When a BFD back end reads in a symbol table, it\n     relocates all symbols to make them relative to the base of the\n     section where they were defined.  Doing this ensures that each\n     symbol points to its containing section.  Each symbol also has a\n     varying amount of hidden private data for the BFD back end.  Since\n     the symbol points to the original file, the private data format\n     for that symbol is accessible.  `ld' can operate on a collection\n     of symbols of wildly different formats without problems.\n\n     Normal global and simple local symbols are maintained on output,\n     so an output file (no matter its format) will retain symbols\n     pointing to functions and to global, static, and common variables.\n     Some symbol information is not worth retaining; in `a.out', type\n     information is stored in the symbol table as long symbol names.\n     This information would be useless to most COFF debuggers; the\n     linker has command line switches to allow users to throw it away.\n\n     There is one word of type information within the symbol, so if the\n     format supports symbol type information within symbols (for\n     example, COFF, IEEE, Oasys) and the type is simple enough to fit\n     within one word (nearly everything but aggregates), the\n     information will be preserved.\n\n_relocation level_\n     Each canonical BFD relocation record contains a pointer to the\n     symbol to relocate to, the offset of the data to relocate, the\n     section the data is in, and a pointer to a relocation type\n     descriptor. Relocation is performed by passing messages through\n     the relocation type descriptor and the symbol pointer. Therefore,\n     relocations can be performed on output data using a relocation\n     method that is only available in one of the input formats. For\n     instance, Oasys provides a byte relocation format.  A relocation\n     record requesting this relocation type would point indirectly to a\n     routine to perform this, so the relocation may be performed on a\n     byte being written to a 68k COFF file, even though 68k COFF has no\n     such relocation type.\n\n_line numbers_\n     Object formats can contain, for debugging purposes, some form of\n     mapping between symbols, source line numbers, and addresses in the\n     output file.  These addresses have to be relocated along with the\n     symbol information.  Each symbol with an associated list of line\n     number records points to the first record of the list.  The head\n     of a line number list consists of a pointer to the symbol, which\n     allows finding out the address of the function whose line number\n     is being described. The rest of the list is made up of pairs:\n     offsets into the section and line numbers. Any format which can\n     simply derive this information can pass it successfully between\n     formats (COFF, IEEE and Oasys).\n\n\u001f\nFile: ld.info,  Node: Reporting Bugs,  Next: MRI,  Prev: BFD,  Up: Top\n\n6 Reporting Bugs\n****************\n\nYour bug reports play an essential role in making `ld' reliable.\n\n   Reporting a bug may help you by bringing a solution to your problem,\nor it may not.  But in any case the principal function of a bug report\nis to help the entire community by making the next version of `ld' work\nbetter.  Bug reports are your contribution to the maintenance of `ld'.\n\n   In order for a bug report to serve its purpose, you must include the\ninformation that enables us to fix the bug.\n\n* Menu:\n\n* Bug Criteria::                Have you found a bug?\n* Bug Reporting::               How to report bugs\n\n\u001f\nFile: ld.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs\n\n6.1 Have You Found a Bug?\n=========================\n\nIf you are not sure whether you have found a bug, here are some\nguidelines:\n\n   * If the linker gets a fatal signal, for any input whatever, that is\n     a `ld' bug.  Reliable linkers never crash.\n\n   * If `ld' produces an error message for valid input, that is a bug.\n\n   * If `ld' does not produce an error message for invalid input, that\n     may be a bug.  In the general case, the linker can not verify that\n     object files are correct.\n\n   * If you are an experienced user of linkers, your suggestions for\n     improvement of `ld' are welcome in any case.\n\n\u001f\nFile: ld.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs\n\n6.2 How to Report Bugs\n======================\n\nA number of companies and individuals offer support for GNU products.\nIf you obtained `ld' from a support organization, we recommend you\ncontact that organization first.\n\n   You can find contact information for many support companies and\nindividuals in the file `etc/SERVICE' in the GNU Emacs distribution.\n\n   Otherwise, send bug reports for `ld' to\n`http://www.sourceware.org/bugzilla/'.\n\n   The fundamental principle of reporting bugs usefully is this:\n*report all the facts*.  If you are not sure whether to state a fact or\nleave it out, state it!\n\n   Often people omit facts because they think they know what causes the\nproblem and assume that some details do not matter.  Thus, you might\nassume that the name of a symbol you use in an example does not matter.\nWell, probably it does not, but one cannot be sure.  Perhaps the bug\nis a stray memory reference which happens to fetch from the location\nwhere that name is stored in memory; perhaps, if the name were\ndifferent, the contents of that location would fool the linker into\ndoing the right thing despite the bug.  Play it safe and give a\nspecific, complete example.  That is the easiest thing for you to do,\nand the most helpful.\n\n   Keep in mind that the purpose of a bug report is to enable us to fix\nthe bug if it is new to us.  Therefore, always write your bug reports\non the assumption that the bug has not been reported previously.\n\n   Sometimes people give a few sketchy facts and ask, \"Does this ring a\nbell?\"  This cannot help us fix a bug, so it is basically useless.  We\nrespond by asking for enough details to enable us to investigate.  You\nmight as well expedite matters by sending them to begin with.\n\n   To enable us to fix the bug, you should include all these things:\n\n   * The version of `ld'.  `ld' announces it if you start it with the\n     `--version' argument.\n\n     Without this, we will not know whether there is any point in\n     looking for the bug in the current version of `ld'.\n\n   * Any patches you may have applied to the `ld' source, including any\n     patches made to the `BFD' library.\n\n   * The type of machine you are using, and the operating system name\n     and version number.\n\n   * What compiler (and its version) was used to compile `ld'--e.g.\n     \"`gcc-2.7'\".\n\n   * The command arguments you gave the linker to link your example and\n     observe the bug.  To guarantee you will not omit something\n     important, list them all.  A copy of the Makefile (or the output\n     from make) is sufficient.\n\n     If we were to try to guess the arguments, we would probably guess\n     wrong and then we might not encounter the bug.\n\n   * A complete input file, or set of input files, that will reproduce\n     the bug.  It is generally most helpful to send the actual object\n     files provided that they are reasonably small.  Say no more than\n     10K.  For bigger files you can either make them available by FTP\n     or HTTP or else state that you are willing to send the object\n     file(s) to whomever requests them.  (Note - your email will be\n     going to a mailing list, so we do not want to clog it up with\n     large attachments).  But small attachments are best.\n\n     If the source files were assembled using `gas' or compiled using\n     `gcc', then it may be OK to send the source files rather than the\n     object files.  In this case, be sure to say exactly what version of\n     `gas' or `gcc' was used to produce the object files.  Also say how\n     `gas' or `gcc' were configured.\n\n   * A description of what behavior you observe that you believe is\n     incorrect.  For example, \"It gets a fatal signal.\"\n\n     Of course, if the bug is that `ld' gets a fatal signal, then we\n     will certainly notice it.  But if the bug is incorrect output, we\n     might not notice unless it is glaringly wrong.  You might as well\n     not give us a chance to make a mistake.\n\n     Even if the problem you experience is a fatal signal, you should\n     still say so explicitly.  Suppose something strange is going on,\n     such as, your copy of `ld' is out of sync, or you have encountered\n     a bug in the C library on your system.  (This has happened!)  Your\n     copy might crash and ours would not.  If you told us to expect a\n     crash, then when ours fails to crash, we would know that the bug\n     was not happening for us.  If you had not told us to expect a\n     crash, then we would not be able to draw any conclusion from our\n     observations.\n\n   * If you wish to suggest changes to the `ld' source, send us context\n     diffs, as generated by `diff' with the `-u', `-c', or `-p' option.\n     Always send diffs from the old file to the new file.  If you even\n     discuss something in the `ld' source, refer to it by context, not\n     by line number.\n\n     The line numbers in our development sources will not match those\n     in your sources.  Your line numbers would convey no useful\n     information to us.\n\n   Here are some things that are not necessary:\n\n   * A description of the envelope of the bug.\n\n     Often people who encounter a bug spend a lot of time investigating\n     which changes to the input file will make the bug go away and which\n     changes will not affect it.\n\n     This is often time consuming and not very useful, because the way\n     we will find the bug is by running a single example under the\n     debugger with breakpoints, not by pure deduction from a series of\n     examples.  We recommend that you save your time for something else.\n\n     Of course, if you can find a simpler example to report _instead_\n     of the original one, that is a convenience for us.  Errors in the\n     output will be easier to spot, running under the debugger will take\n     less time, and so on.\n\n     However, simplification is not vital; if you do not want to do\n     this, report the bug anyway and send us the entire test case you\n     used.\n\n   * A patch for the bug.\n\n     A patch for the bug does help us if it is a good one.  But do not\n     omit the necessary information, such as the test case, on the\n     assumption that a patch is all we need.  We might see problems\n     with your patch and decide to fix the problem another way, or we\n     might not understand it at all.\n\n     Sometimes with a program as complicated as `ld' it is very hard to\n     construct an example that will make the program follow a certain\n     path through the code.  If you do not send us the example, we will\n     not be able to construct one, so we will not be able to verify\n     that the bug is fixed.\n\n     And if we cannot understand what bug you are trying to fix, or why\n     your patch should be an improvement, we will not install it.  A\n     test case will help us to understand.\n\n   * A guess about what the bug is or what it depends on.\n\n     Such guesses are usually wrong.  Even we cannot guess right about\n     such things without first using the debugger to find the facts.\n\n\u001f\nFile: ld.info,  Node: MRI,  Next: GNU Free Documentation License,  Prev: Reporting Bugs,  Up: Top\n\nAppendix A MRI Compatible Script Files\n**************************************\n\nTo aid users making the transition to GNU `ld' from the MRI linker,\n`ld' can use MRI compatible linker scripts as an alternative to the\nmore general-purpose linker scripting language described in *Note\nScripts::.  MRI compatible linker scripts have a much simpler command\nset than the scripting language otherwise used with `ld'.  GNU `ld'\nsupports the most commonly used MRI linker commands; these commands are\ndescribed here.\n\n   In general, MRI scripts aren't of much use with the `a.out' object\nfile format, since it only has three sections and MRI scripts lack some\nfeatures to make use of them.\n\n   You can specify a file containing an MRI-compatible script using the\n`-c' command-line option.\n\n   Each command in an MRI-compatible script occupies its own line; each\ncommand line starts with the keyword that identifies the command (though\nblank lines are also allowed for punctuation).  If a line of an\nMRI-compatible script begins with an unrecognized keyword, `ld' issues\na warning message, but continues processing the script.\n\n   Lines beginning with `*' are comments.\n\n   You can write these commands using all upper-case letters, or all\nlower case; for example, `chip' is the same as `CHIP'.  The following\nlist shows only the upper-case form of each command.\n\n`ABSOLUTE SECNAME'\n`ABSOLUTE SECNAME, SECNAME, ... SECNAME'\n     Normally, `ld' includes in the output file all sections from all\n     the input files.  However, in an MRI-compatible script, you can\n     use the `ABSOLUTE' command to restrict the sections that will be\n     present in your output program.  If the `ABSOLUTE' command is used\n     at all in a script, then only the sections named explicitly in\n     `ABSOLUTE' commands will appear in the linker output.  You can\n     still use other input sections (whatever you select on the command\n     line, or using `LOAD') to resolve addresses in the output file.\n\n`ALIAS OUT-SECNAME, IN-SECNAME'\n     Use this command to place the data from input section IN-SECNAME\n     in a section called OUT-SECNAME in the linker output file.\n\n     IN-SECNAME may be an integer.\n\n`ALIGN SECNAME = EXPRESSION'\n     Align the section called SECNAME to EXPRESSION.  The EXPRESSION\n     should be a power of two.\n\n`BASE EXPRESSION'\n     Use the value of EXPRESSION as the lowest address (other than\n     absolute addresses) in the output file.\n\n`CHIP EXPRESSION'\n`CHIP EXPRESSION, EXPRESSION'\n     This command does nothing; it is accepted only for compatibility.\n\n`END'\n     This command does nothing whatever; it's only accepted for\n     compatibility.\n\n`FORMAT OUTPUT-FORMAT'\n     Similar to the `OUTPUT_FORMAT' command in the more general linker\n     language, but restricted to one of these output formats:\n\n       1. S-records, if OUTPUT-FORMAT is `S'\n\n       2. IEEE, if OUTPUT-FORMAT is `IEEE'\n\n       3. COFF (the `coff-m68k' variant in BFD), if OUTPUT-FORMAT is\n          `COFF'\n\n`LIST ANYTHING...'\n     Print (to the standard output file) a link map, as produced by the\n     `ld' command-line option `-M'.\n\n     The keyword `LIST' may be followed by anything on the same line,\n     with no change in its effect.\n\n`LOAD FILENAME'\n`LOAD FILENAME, FILENAME, ... FILENAME'\n     Include one or more object file FILENAME in the link; this has the\n     same effect as specifying FILENAME directly on the `ld' command\n     line.\n\n`NAME OUTPUT-NAME'\n     OUTPUT-NAME is the name for the program produced by `ld'; the\n     MRI-compatible command `NAME' is equivalent to the command-line\n     option `-o' or the general script language command `OUTPUT'.\n\n`ORDER SECNAME, SECNAME, ... SECNAME'\n`ORDER SECNAME SECNAME SECNAME'\n     Normally, `ld' orders the sections in its output file in the order\n     in which they first appear in the input files.  In an\n     MRI-compatible script, you can override this ordering with the\n     `ORDER' command.  The sections you list with `ORDER' will appear\n     first in your output file, in the order specified.\n\n`PUBLIC NAME=EXPRESSION'\n`PUBLIC NAME,EXPRESSION'\n`PUBLIC NAME EXPRESSION'\n     Supply a value (EXPRESSION) for external symbol NAME used in the\n     linker input files.\n\n`SECT SECNAME, EXPRESSION'\n`SECT SECNAME=EXPRESSION'\n`SECT SECNAME EXPRESSION'\n     You can use any of these three forms of the `SECT' command to\n     specify the start address (EXPRESSION) for section SECNAME.  If\n     you have more than one `SECT' statement for the same SECNAME, only\n     the _first_ sets the start address.\n\n\u001f\nFile: ld.info,  Node: GNU Free Documentation License,  Next: LD Index,  Prev: MRI,  Up: Top\n\nAppendix B GNU Free Documentation License\n*****************************************\n\n                        Version 1.1, March 2000\n\n     Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n     Everyone is permitted to copy and distribute verbatim copies\n     of this license document, but changing it is not allowed.\n\n\n  0. PREAMBLE\n\n     The purpose of this License is to make a manual, textbook, or other\n     written document \"free\" in the sense of freedom: to assure everyone\n     the effective freedom to copy and redistribute it, with or without\n     modifying it, either commercially or noncommercially.  Secondarily,\n     this License preserves for the author and publisher a way to get\n     credit for their work, while not being considered responsible for\n     modifications made by others.\n\n     This License is a kind of \"copyleft\", which means that derivative\n     works of the document must themselves be free in the same sense.\n     It complements the GNU General Public License, which is a copyleft\n     license designed for free software.\n\n     We have designed this License in order to use it for manuals for\n     free software, because free software needs free documentation: a\n     free program should come with manuals providing the same freedoms\n     that the software does.  But this License is not limited to\n     software manuals; it can be used for any textual work, regardless\n     of subject matter or whether it is published as a printed book.\n     We recommend this License principally for works whose purpose is\n     instruction or reference.\n\n\n  1. APPLICABILITY AND DEFINITIONS\n\n     This License applies to any manual or other work that contains a\n     notice placed by the copyright holder saying it can be distributed\n     under the terms of this License.  The \"Document\", below, refers to\n     any such manual or work.  Any member of the public is a licensee,\n     and is addressed as \"you.\"\n\n     A \"Modified Version\" of the Document means any work containing the\n     Document or a portion of it, either copied verbatim, or with\n     modifications and/or translated into another language.\n\n     A \"Secondary Section\" is a named appendix or a front-matter\n     section of the Document that deals exclusively with the\n     relationship of the publishers or authors of the Document to the\n     Document's overall subject (or to related matters) and contains\n     nothing that could fall directly within that overall subject.\n     (For example, if the Document is in part a textbook of\n     mathematics, a Secondary Section may not explain any mathematics.)\n     The relationship could be a matter of historical connection with\n     the subject or with related matters, or of legal, commercial,\n     philosophical, ethical or political position regarding them.\n\n     The \"Invariant Sections\" are certain Secondary Sections whose\n     titles are designated, as being those of Invariant Sections, in\n     the notice that says that the Document is released under this\n     License.\n\n     The \"Cover Texts\" are certain short passages of text that are\n     listed, as Front-Cover Texts or Back-Cover Texts, in the notice\n     that says that the Document is released under this License.\n\n     A \"Transparent\" copy of the Document means a machine-readable copy,\n     represented in a format whose specification is available to the\n     general public, whose contents can be viewed and edited directly\n     and straightforwardly with generic text editors or (for images\n     composed of pixels) generic paint programs or (for drawings) some\n     widely available drawing editor, and that is suitable for input to\n     text formatters or for automatic translation to a variety of\n     formats suitable for input to text formatters.  A copy made in an\n     otherwise Transparent file format whose markup has been designed\n     to thwart or discourage subsequent modification by readers is not\n     Transparent.  A copy that is not \"Transparent\" is called \"Opaque.\"\n\n     Examples of suitable formats for Transparent copies include plain\n     ASCII without markup, Texinfo input format, LaTeX input format,\n     SGML or XML using a publicly available DTD, and\n     standard-conforming simple HTML designed for human modification.\n     Opaque formats include PostScript, PDF, proprietary formats that\n     can be read and edited only by proprietary word processors, SGML\n     or XML for which the DTD and/or processing tools are not generally\n     available, and the machine-generated HTML produced by some word\n     processors for output purposes only.\n\n     The \"Title Page\" means, for a printed book, the title page itself,\n     plus such following pages as are needed to hold, legibly, the\n     material this License requires to appear in the title page.  For\n     works in formats which do not have any title page as such, \"Title\n     Page\" means the text near the most prominent appearance of the\n     work's title, preceding the beginning of the body of the text.\n\n  2. VERBATIM COPYING\n\n     You may copy and distribute the Document in any medium, either\n     commercially or noncommercially, provided that this License, the\n     copyright notices, and the license notice saying this License\n     applies to the Document are reproduced in all copies, and that you\n     add no other conditions whatsoever to those of this License.  You\n     may not use technical measures to obstruct or control the reading\n     or further copying of the copies you make or distribute.  However,\n     you may accept compensation in exchange for copies.  If you\n     distribute a large enough number of copies you must also follow\n     the conditions in section 3.\n\n     You may also lend copies, under the same conditions stated above,\n     and you may publicly display copies.\n\n  3. COPYING IN QUANTITY\n\n     If you publish printed copies of the Document numbering more than\n     100, and the Document's license notice requires Cover Texts, you\n     must enclose the copies in covers that carry, clearly and legibly,\n     all these Cover Texts: Front-Cover Texts on the front cover, and\n     Back-Cover Texts on the back cover.  Both covers must also clearly\n     and legibly identify you as the publisher of these copies.  The\n     front cover must present the full title with all words of the\n     title equally prominent and visible.  You may add other material\n     on the covers in addition.  Copying with changes limited to the\n     covers, as long as they preserve the title of the Document and\n     satisfy these conditions, can be treated as verbatim copying in\n     other respects.\n\n     If the required texts for either cover are too voluminous to fit\n     legibly, you should put the first ones listed (as many as fit\n     reasonably) on the actual cover, and continue the rest onto\n     adjacent pages.\n\n     If you publish or distribute Opaque copies of the Document\n     numbering more than 100, you must either include a\n     machine-readable Transparent copy along with each Opaque copy, or\n     state in or with each Opaque copy a publicly-accessible\n     computer-network location containing a complete Transparent copy\n     of the Document, free of added material, which the general\n     network-using public has access to download anonymously at no\n     charge using public-standard network protocols.  If you use the\n     latter option, you must take reasonably prudent steps, when you\n     begin distribution of Opaque copies in quantity, to ensure that\n     this Transparent copy will remain thus accessible at the stated\n     location until at least one year after the last time you\n     distribute an Opaque copy (directly or through your agents or\n     retailers) of that edition to the public.\n\n     It is requested, but not required, that you contact the authors of\n     the Document well before redistributing any large number of\n     copies, to give them a chance to provide you with an updated\n     version of the Document.\n\n  4. MODIFICATIONS\n\n     You may copy and distribute a Modified Version of the Document\n     under the conditions of sections 2 and 3 above, provided that you\n     release the Modified Version under precisely this License, with\n     the Modified Version filling the role of the Document, thus\n     licensing distribution and modification of the Modified Version to\n     whoever possesses a copy of it.  In addition, you must do these\n     things in the Modified Version:\n\n     A. Use in the Title Page (and on the covers, if any) a title\n     distinct    from that of the Document, and from those of previous\n     versions    (which should, if there were any, be listed in the\n     History section    of the Document).  You may use the same title\n     as a previous version    if the original publisher of that version\n     gives permission.\n     B. List on the Title Page, as authors, one or more persons or\n     entities    responsible for authorship of the modifications in the\n     Modified    Version, together with at least five of the principal\n     authors of the    Document (all of its principal authors, if it\n     has less than five).\n     C. State on the Title page the name of the publisher of the\n     Modified Version, as the publisher.\n     D. Preserve all the copyright notices of the Document.\n     E. Add an appropriate copyright notice for your modifications\n     adjacent to the other copyright notices.\n     F. Include, immediately after the copyright notices, a license\n     notice    giving the public permission to use the Modified Version\n     under the    terms of this License, in the form shown in the\n     Addendum below.\n     G. Preserve in that license notice the full lists of Invariant\n     Sections    and required Cover Texts given in the Document's\n     license notice.\n     H. Include an unaltered copy of this License.\n     I. Preserve the section entitled \"History\", and its title, and add\n     to    it an item stating at least the title, year, new authors, and\n       publisher of the Modified Version as given on the Title Page.\n     If    there is no section entitled \"History\" in the Document,\n     create one    stating the title, year, authors, and publisher of\n     the Document as    given on its Title Page, then add an item\n     describing the Modified    Version as stated in the previous\n     sentence.\n     J. Preserve the network location, if any, given in the Document for\n       public access to a Transparent copy of the Document, and\n     likewise    the network locations given in the Document for\n     previous versions    it was based on.  These may be placed in the\n     \"History\" section.     You may omit a network location for a work\n     that was published at    least four years before the Document\n     itself, or if the original    publisher of the version it refers\n     to gives permission.\n     K. In any section entitled \"Acknowledgements\" or \"Dedications\",\n     preserve the section's title, and preserve in the section all the\n      substance and tone of each of the contributor acknowledgements\n     and/or dedications given therein.\n     L. Preserve all the Invariant Sections of the Document,\n     unaltered in their text and in their titles.  Section numbers\n     or the equivalent are not considered part of the section titles.\n     M. Delete any section entitled \"Endorsements.\"  Such a section\n     may not be included in the Modified Version.\n     N. Do not retitle any existing section as \"Endorsements\"    or to\n     conflict in title with any Invariant Section.\n\n     If the Modified Version includes new front-matter sections or\n     appendices that qualify as Secondary Sections and contain no\n     material copied from the Document, you may at your option\n     designate some or all of these sections as invariant.  To do this,\n     add their titles to the list of Invariant Sections in the Modified\n     Version's license notice.  These titles must be distinct from any\n     other section titles.\n\n     You may add a section entitled \"Endorsements\", provided it contains\n     nothing but endorsements of your Modified Version by various\n     parties-for example, statements of peer review or that the text has\n     been approved by an organization as the authoritative definition\n     of a standard.\n\n     You may add a passage of up to five words as a Front-Cover Text,\n     and a passage of up to 25 words as a Back-Cover Text, to the end\n     of the list of Cover Texts in the Modified Version.  Only one\n     passage of Front-Cover Text and one of Back-Cover Text may be\n     added by (or through arrangements made by) any one entity.  If the\n     Document already includes a cover text for the same cover,\n     previously added by you or by arrangement made by the same entity\n     you are acting on behalf of, you may not add another; but you may\n     replace the old one, on explicit permission from the previous\n     publisher that added the old one.\n\n     The author(s) and publisher(s) of the Document do not by this\n     License give permission to use their names for publicity for or to\n     assert or imply endorsement of any Modified Version.\n\n  5. COMBINING DOCUMENTS\n\n     You may combine the Document with other documents released under\n     this License, under the terms defined in section 4 above for\n     modified versions, provided that you include in the combination\n     all of the Invariant Sections of all of the original documents,\n     unmodified, and list them all as Invariant Sections of your\n     combined work in its license notice.\n\n     The combined work need only contain one copy of this License, and\n     multiple identical Invariant Sections may be replaced with a single\n     copy.  If there are multiple Invariant Sections with the same name\n     but different contents, make the title of each such section unique\n     by adding at the end of it, in parentheses, the name of the\n     original author or publisher of that section if known, or else a\n     unique number.  Make the same adjustment to the section titles in\n     the list of Invariant Sections in the license notice of the\n     combined work.\n\n     In the combination, you must combine any sections entitled\n     \"History\" in the various original documents, forming one section\n     entitled \"History\"; likewise combine any sections entitled\n     \"Acknowledgements\", and any sections entitled \"Dedications.\"  You\n     must delete all sections entitled \"Endorsements.\"\n\n  6. COLLECTIONS OF DOCUMENTS\n\n     You may make a collection consisting of the Document and other\n     documents released under this License, and replace the individual\n     copies of this License in the various documents with a single copy\n     that is included in the collection, provided that you follow the\n     rules of this License for verbatim copying of each of the\n     documents in all other respects.\n\n     You may extract a single document from such a collection, and\n     distribute it individually under this License, provided you insert\n     a copy of this License into the extracted document, and follow\n     this License in all other respects regarding verbatim copying of\n     that document.\n\n  7. AGGREGATION WITH INDEPENDENT WORKS\n\n     A compilation of the Document or its derivatives with other\n     separate and independent documents or works, in or on a volume of\n     a storage or distribution medium, does not as a whole count as a\n     Modified Version of the Document, provided no compilation\n     copyright is claimed for the compilation.  Such a compilation is\n     called an \"aggregate\", and this License does not apply to the\n     other self-contained works thus compiled with the Document, on\n     account of their being thus compiled, if they are not themselves\n     derivative works of the Document.\n\n     If the Cover Text requirement of section 3 is applicable to these\n     copies of the Document, then if the Document is less than one\n     quarter of the entire aggregate, the Document's Cover Texts may be\n     placed on covers that surround only the Document within the\n     aggregate.  Otherwise they must appear on covers around the whole\n     aggregate.\n\n  8. TRANSLATION\n\n     Translation is considered a kind of modification, so you may\n     distribute translations of the Document under the terms of section\n     4.  Replacing Invariant Sections with translations requires special\n     permission from their copyright holders, but you may include\n     translations of some or all Invariant Sections in addition to the\n     original versions of these Invariant Sections.  You may include a\n     translation of this License provided that you also include the\n     original English version of this License.  In case of a\n     disagreement between the translation and the original English\n     version of this License, the original English version will prevail.\n\n  9. TERMINATION\n\n     You may not copy, modify, sublicense, or distribute the Document\n     except as expressly provided for under this License.  Any other\n     attempt to copy, modify, sublicense or distribute the Document is\n     void, and will automatically terminate your rights under this\n     License.  However, parties who have received copies, or rights,\n     from you under this License will not have their licenses\n     terminated so long as such parties remain in full compliance.\n\n 10. FUTURE REVISIONS OF THIS LICENSE\n\n     The Free Software Foundation may publish new, revised versions of\n     the GNU Free Documentation License from time to time.  Such new\n     versions will be similar in spirit to the present version, but may\n     differ in detail to address new problems or concerns.  See\n     http://www.gnu.org/copyleft/.\n\n     Each version of the License is given a distinguishing version\n     number.  If the Document specifies that a particular numbered\n     version of this License \"or any later version\" applies to it, you\n     have the option of following the terms and conditions either of\n     that specified version or of any later version that has been\n     published (not as a draft) by the Free Software Foundation.  If\n     the Document does not specify a version number of this License,\n     you may choose any version ever published (not as a draft) by the\n     Free Software Foundation.\n\n\nADDENDUM: How to use this License for your documents\n====================================================\n\nTo use this License in a document you have written, include a copy of\nthe License in the document and put the following copyright and license\nnotices just after the title page:\n\n     Copyright (C)  YEAR  YOUR NAME.\n     Permission is granted to copy, distribute and/or modify this document\n     under the terms of the GNU Free Documentation License, Version 1.1\n     or any later version published by the Free Software Foundation;\n     with the Invariant Sections being LIST THEIR TITLES, with the\n     Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n     A copy of the license is included in the section entitled \"GNU\n     Free Documentation License.\"\n\n   If you have no Invariant Sections, write \"with no Invariant Sections\"\ninstead of saying which ones are invariant.  If you have no Front-Cover\nTexts, write \"no Front-Cover Texts\" instead of \"Front-Cover Texts being\nLIST\"; likewise for Back-Cover Texts.\n\n   If your document contains nontrivial examples of program code, we\nrecommend releasing these examples in parallel under your choice of\nfree software license, such as the GNU General Public License, to\npermit their use in free software.\n\n\u001f\nFile: ld.info,  Node: LD Index,  Prev: GNU Free Documentation License,  Up: Top\n\nLD Index\n********\n\n\u0000\b[index\u0000\b]\n* Menu:\n\n* \":                                     Symbols.            (line    6)\n* -(:                                    Options.            (line  675)\n* --accept-unknown-input-arch:           Options.            (line  693)\n* --add-needed:                          Options.            (line  717)\n* --add-stdcall-alias:                   Options.            (line 1527)\n* --allow-multiple-definition:           Options.            (line  945)\n* --allow-shlib-undefined:               Options.            (line  951)\n* --architecture=ARCH:                   Options.            (line  113)\n* --as-needed:                           Options.            (line  703)\n* --auxiliary=NAME:                      Options.            (line  235)\n* --bank-window:                         Options.            (line 1926)\n* --base-file:                           Options.            (line 1532)\n* --be8:                                 ARM.                (line   28)\n* --bss-plt:                             PowerPC ELF32.      (line   16)\n* --build-id:                            Options.            (line 1489)\n* --build-id=STYLE:                      Options.            (line 1489)\n* --check-sections:                      Options.            (line  799)\n* --cref:                                Options.            (line  811)\n* --default-imported-symver:             Options.            (line  988)\n* --default-script=SCRIPT:               Options.            (line  520)\n* --default-symver:                      Options.            (line  984)\n* --defsym=SYMBOL=EXP:                   Options.            (line  839)\n* --demangle[=STYLE]:                    Options.            (line  852)\n* --disable-auto-image-base:             Options.            (line 1701)\n* --disable-auto-import:                 Options.            (line 1836)\n* --disable-long-section-names:          Options.            (line 1542)\n* --disable-new-dtags:                   Options.            (line 1452)\n* --disable-runtime-pseudo-reloc:        Options.            (line 1849)\n* --disable-stdcall-fixup:               Options.            (line 1564)\n* --discard-all:                         Options.            (line  566)\n* --discard-locals:                      Options.            (line  570)\n* --dll:                                 Options.            (line 1537)\n* --dll-search-prefix:                   Options.            (line 1707)\n* --dotsyms:                             PowerPC64 ELF64.    (line   33)\n* --dynamic-linker=FILE:                 Options.            (line  865)\n* --dynamic-list-cpp-new:                Options.            (line  791)\n* --dynamic-list-cpp-typeinfo:           Options.            (line  795)\n* --dynamic-list-data:                   Options.            (line  788)\n* --dynamic-list=DYNAMIC-LIST-FILE:      Options.            (line  775)\n* --dynamicbase:                         Options.            (line 1885)\n* --eh-frame-hdr:                        Options.            (line 1448)\n* --emit-relocs:                         Options.            (line  455)\n* --emit-stack-syms:                     SPU ELF.            (line   46)\n* --emit-stub-syms <1>:                  PowerPC ELF32.      (line   47)\n* --emit-stub-syms <2>:                  SPU ELF.            (line   15)\n* --emit-stub-syms:                      PowerPC64 ELF64.    (line   29)\n* --enable-auto-image-base:              Options.            (line 1693)\n* --enable-auto-import:                  Options.            (line 1716)\n* --enable-extra-pe-debug:               Options.            (line 1854)\n* --enable-long-section-names:           Options.            (line 1542)\n* --enable-new-dtags:                    Options.            (line 1452)\n* --enable-runtime-pseudo-reloc:         Options.            (line 1841)\n* --enable-stdcall-fixup:                Options.            (line 1564)\n* --entry=ENTRY:                         Options.            (line  167)\n* --error-unresolved-symbols:            Options.            (line 1401)\n* --exclude-libs:                        Options.            (line  177)\n* --exclude-modules-for-implib:          Options.            (line  188)\n* --exclude-symbols:                     Options.            (line 1606)\n* --export-all-symbols:                  Options.            (line 1582)\n* --export-dynamic:                      Options.            (line  201)\n* --extra-overlay-stubs:                 SPU ELF.            (line   19)\n* --fatal-warnings:                      Options.            (line  872)\n* --file-alignment:                      Options.            (line 1612)\n* --filter=NAME:                         Options.            (line  256)\n* --fix-cortex-a8:                       i960.               (line   39)\n* --fix-v4bx:                            ARM.                (line   49)\n* --fix-v4bx-interworking:               ARM.                (line   62)\n* --force-dynamic:                       Options.            (line  464)\n* --force-exe-suffix:                    Options.            (line  877)\n* --forceinteg:                          Options.            (line 1890)\n* --format=FORMAT:                       Options.            (line  124)\n* --format=VERSION:                      TI COFF.            (line    6)\n* --gc-sections:                         Options.            (line  887)\n* --got:                                 Options.            (line 1939)\n* --got=TYPE:                            M68K.               (line    6)\n* --gpsize=VALUE:                        Options.            (line  289)\n* --hash-size=NUMBER:                    Options.            (line 1461)\n* --hash-style=STYLE:                    Options.            (line 1469)\n* --heap:                                Options.            (line 1618)\n* --help:                                Options.            (line  918)\n* --image-base:                          Options.            (line 1625)\n* --just-symbols=FILE:                   Options.            (line  487)\n* --kill-at:                             Options.            (line 1634)\n* --large-address-aware:                 Options.            (line 1639)\n* --library-path=DIR:                    Options.            (line  348)\n* --library=NAMESPEC:                    Options.            (line  315)\n* --local-store=lo:hi:                   SPU ELF.            (line   24)\n* --major-image-version:                 Options.            (line 1648)\n* --major-os-version:                    Options.            (line 1653)\n* --major-subsystem-version:             Options.            (line 1657)\n* --minor-image-version:                 Options.            (line 1662)\n* --minor-os-version:                    Options.            (line 1667)\n* --minor-subsystem-version:             Options.            (line 1671)\n* --mri-script=MRI-CMDFILE:              Options.            (line  148)\n* --multi-subspace:                      HPPA ELF32.         (line    6)\n* --nmagic:                              Options.            (line  419)\n* --no-accept-unknown-input-arch:        Options.            (line  693)\n* --no-add-needed:                       Options.            (line  717)\n* --no-allow-shlib-undefined:            Options.            (line  951)\n* --no-as-needed:                        Options.            (line  703)\n* --no-bind:                             Options.            (line 1904)\n* --no-check-sections:                   Options.            (line  799)\n* --no-define-common:                    Options.            (line  823)\n* --no-demangle:                         Options.            (line  852)\n* --no-dotsyms:                          PowerPC64 ELF64.    (line   33)\n* --no-enum-size-warning:                ARM.                (line  111)\n* --no-export-dynamic:                   Options.            (line  201)\n* --no-fatal-warnings:                   Options.            (line  872)\n* --no-fix-cortex-a8:                    i960.               (line   39)\n* --no-gc-sections:                      Options.            (line  887)\n* --no-isolation:                        Options.            (line 1897)\n* --no-keep-memory:                      Options.            (line  930)\n* --no-multi-toc:                        PowerPC64 ELF64.    (line   74)\n* --no-omagic:                           Options.            (line  433)\n* --no-opd-optimize:                     PowerPC64 ELF64.    (line   48)\n* --no-overlays:                         SPU ELF.            (line    9)\n* --no-print-gc-sections:                Options.            (line  909)\n* --no-relax:                            Xtensa.             (line   56)\n* --no-seh:                              Options.            (line 1900)\n* --no-tls-optimize <1>:                 PowerPC ELF32.      (line   51)\n* --no-tls-optimize:                     PowerPC64 ELF64.    (line   43)\n* --no-toc-optimize:                     PowerPC64 ELF64.    (line   60)\n* --no-trampoline:                       Options.            (line 1920)\n* --no-undefined:                        Options.            (line  937)\n* --no-undefined-version:                Options.            (line  979)\n* --no-warn-mismatch:                    Options.            (line  992)\n* --no-warn-search-mismatch:             Options.            (line 1001)\n* --no-wchar-size-warning:               ARM.                (line  118)\n* --no-whole-archive:                    Options.            (line 1005)\n* --noinhibit-exec:                      Options.            (line 1009)\n* --non-overlapping-opd:                 PowerPC64 ELF64.    (line   54)\n* --nxcompat:                            Options.            (line 1893)\n* --oformat=OUTPUT-FORMAT:               Options.            (line 1021)\n* --omagic:                              Options.            (line  424)\n* --out-implib:                          Options.            (line 1684)\n* --output-def:                          Options.            (line 1676)\n* --output=OUTPUT:                       Options.            (line  439)\n* --pic-executable:                      Options.            (line 1034)\n* --pic-veneer:                          ARM.                (line  124)\n* --plugin:                              SPU ELF.            (line    6)\n* --print-gc-sections:                   Options.            (line  909)\n* --print-map:                           Options.            (line  382)\n* --reduce-memory-overheads:             Options.            (line 1475)\n* --relax:                               Options.            (line 1050)\n* --relax on i960:                       i960.               (line   31)\n* --relax on PowerPC:                    PowerPC ELF32.      (line    6)\n* --relax on Xtensa:                     Xtensa.             (line   27)\n* --relocatable:                         Options.            (line  468)\n* --retain-symbols-file=FILENAME:        Options.            (line 1071)\n* --script=SCRIPT:                       Options.            (line  511)\n* --sdata-got:                           PowerPC ELF32.      (line   33)\n* --section-alignment:                   Options.            (line 1859)\n* --section-start=SECTIONNAME=ORG:       Options.            (line 1227)\n* --secure-plt:                          PowerPC ELF32.      (line   26)\n* --sort-common:                         Options.            (line 1169)\n* --sort-section=alignment:              Options.            (line 1184)\n* --sort-section=name:                   Options.            (line 1180)\n* --split-by-file:                       Options.            (line 1188)\n* --split-by-reloc:                      Options.            (line 1193)\n* --stack:                               Options.            (line 1865)\n* --stack-analysis:                      SPU ELF.            (line   29)\n* --stats:                               Options.            (line 1206)\n* --strip-all:                           Options.            (line  498)\n* --strip-debug:                         Options.            (line  502)\n* --stub-group-size:                     PowerPC64 ELF64.    (line    6)\n* --stub-group-size=N <1>:               ARM.                (line  129)\n* --stub-group-size=N:                   HPPA ELF32.         (line   12)\n* --subsystem:                           Options.            (line 1872)\n* --support-old-code:                    ARM.                (line    6)\n* --sysroot=DIRECTORY:                   Options.            (line 1210)\n* --target-help:                         Options.            (line  922)\n* --target1-abs:                         ARM.                (line   32)\n* --target1-rel:                         ARM.                (line   32)\n* --target2=TYPE:                        ARM.                (line   37)\n* --thumb-entry=ENTRY:                   ARM.                (line   17)\n* --trace:                               Options.            (line  507)\n* --trace-symbol=SYMBOL:                 Options.            (line  576)\n* --traditional-format:                  Options.            (line 1215)\n* --tsaware:                             Options.            (line 1910)\n* --undefined=SYMBOL:                    Options.            (line  533)\n* --unique[=SECTION]:                    Options.            (line  551)\n* --unresolved-symbols:                  Options.            (line 1246)\n* --use-blx:                             ARM.                (line   74)\n* --use-nul-prefixed-import-tables:      ARM.                (line   23)\n* --verbose:                             Options.            (line 1275)\n* --version:                             Options.            (line  560)\n* --version-script=VERSION-SCRIPTFILE:   Options.            (line 1281)\n* --vfp11-denorm-fix:                    ARM.                (line   83)\n* --warn-alternate-em:                   Options.            (line 1393)\n* --warn-common:                         Options.            (line 1292)\n* --warn-constructors:                   Options.            (line 1360)\n* --warn-multiple-gp:                    Options.            (line 1365)\n* --warn-once:                           Options.            (line 1379)\n* --warn-section-align:                  Options.            (line 1383)\n* --warn-shared-textrel:                 Options.            (line 1390)\n* --warn-unresolved-symbols:             Options.            (line 1396)\n* --wdmdriver:                           Options.            (line 1907)\n* --whole-archive:                       Options.            (line 1405)\n* --wrap=SYMBOL:                         Options.            (line 1419)\n* -A ARCH:                               Options.            (line  112)\n* -a KEYWORD:                            Options.            (line  105)\n* -assert KEYWORD:                       Options.            (line  727)\n* -b FORMAT:                             Options.            (line  124)\n* -Bdynamic:                             Options.            (line  730)\n* -Bgroup:                               Options.            (line  740)\n* -Bshareable:                           Options.            (line 1162)\n* -Bstatic:                              Options.            (line  747)\n* -Bsymbolic:                            Options.            (line  762)\n* -Bsymbolic-functions:                  Options.            (line  769)\n* -c MRI-CMDFILE:                        Options.            (line  148)\n* -call_shared:                          Options.            (line  730)\n* -d:                                    Options.            (line  158)\n* -dc:                                   Options.            (line  158)\n* -dn:                                   Options.            (line  747)\n* -dp:                                   Options.            (line  158)\n* -dT SCRIPT:                            Options.            (line  520)\n* -dy:                                   Options.            (line  730)\n* -E:                                    Options.            (line  201)\n* -e ENTRY:                              Options.            (line  167)\n* -EB:                                   Options.            (line  228)\n* -EL:                                   Options.            (line  231)\n* -F NAME:                               Options.            (line  256)\n* -f NAME:                               Options.            (line  235)\n* -fini=NAME:                            Options.            (line  280)\n* -g:                                    Options.            (line  286)\n* -G VALUE:                              Options.            (line  289)\n* -h NAME:                               Options.            (line  297)\n* -i:                                    Options.            (line  306)\n* -IFILE:                                Options.            (line  865)\n* -init=NAME:                            Options.            (line  309)\n* -L DIR:                                Options.            (line  348)\n* -l NAMESPEC:                           Options.            (line  315)\n* -M:                                    Options.            (line  382)\n* -m EMULATION:                          Options.            (line  372)\n* -Map=MAPFILE:                          Options.            (line  926)\n* -N:                                    Options.            (line  424)\n* -n:                                    Options.            (line  419)\n* -non_shared:                           Options.            (line  747)\n* -nostdlib:                             Options.            (line 1015)\n* -O LEVEL:                              Options.            (line  445)\n* -o OUTPUT:                             Options.            (line  439)\n* -pie:                                  Options.            (line 1034)\n* -q:                                    Options.            (line  455)\n* -qmagic:                               Options.            (line 1044)\n* -Qy:                                   Options.            (line 1047)\n* -r:                                    Options.            (line  468)\n* -R FILE:                               Options.            (line  487)\n* -rpath-link=DIR:                       Options.            (line 1107)\n* -rpath=DIR:                            Options.            (line 1085)\n* -s:                                    Options.            (line  498)\n* -S:                                    Options.            (line  502)\n* -shared:                               Options.            (line 1162)\n* -soname=NAME:                          Options.            (line  297)\n* -static:                               Options.            (line  747)\n* -t:                                    Options.            (line  507)\n* -T SCRIPT:                             Options.            (line  511)\n* -Tbss=ORG:                             Options.            (line 1236)\n* -Tdata=ORG:                            Options.            (line 1236)\n* -Ttext-segment=ORG:                    Options.            (line 1242)\n* -Ttext=ORG:                            Options.            (line 1236)\n* -u SYMBOL:                             Options.            (line  533)\n* -Ur:                                   Options.            (line  541)\n* -V:                                    Options.            (line  560)\n* -v:                                    Options.            (line  560)\n* -X:                                    Options.            (line  570)\n* -x:                                    Options.            (line  566)\n* -Y PATH:                               Options.            (line  585)\n* -y SYMBOL:                             Options.            (line  576)\n* -z defs:                               Options.            (line  937)\n* -z KEYWORD:                            Options.            (line  589)\n* -z muldefs:                            Options.            (line  945)\n* .:                                     Location Counter.   (line    6)\n* /DISCARD/:                             Output Section Discarding.\n                                                             (line   21)\n* :PHDR:                                 Output Section Phdr.\n                                                             (line    6)\n* =FILLEXP:                              Output Section Fill.\n                                                             (line    6)\n* >REGION:                               Output Section Region.\n                                                             (line    6)\n* [COMMON]:                              Input Section Common.\n                                                             (line   29)\n* ABSOLUTE (MRI):                        MRI.                (line   33)\n* absolute and relocatable symbols:      Expression Section. (line    6)\n* absolute expressions:                  Expression Section. (line    6)\n* ABSOLUTE(EXP):                         Builtin Functions.  (line   10)\n* ADDR(SECTION):                         Builtin Functions.  (line   17)\n* address, section:                      Output Section Address.\n                                                             (line    6)\n* ALIAS (MRI):                           MRI.                (line   44)\n* ALIGN (MRI):                           MRI.                (line   50)\n* align expression:                      Builtin Functions.  (line   36)\n* align location counter:                Builtin Functions.  (line   36)\n* ALIGN(ALIGN):                          Builtin Functions.  (line   36)\n* ALIGN(EXP,ALIGN):                      Builtin Functions.  (line   36)\n* ALIGN(SECTION_ALIGN):                  Forced Output Alignment.\n                                                             (line    6)\n* aligned common symbols:                WIN32.              (line  418)\n* ALIGNOF(SECTION):                      Builtin Functions.  (line   62)\n* allocating memory:                     MEMORY.             (line    6)\n* architecture:                          Miscellaneous Commands.\n                                                             (line   72)\n* architectures:                         Options.            (line  112)\n* archive files, from cmd line:          Options.            (line  315)\n* archive search path in linker script:  File Commands.      (line   74)\n* arithmetic:                            Expressions.        (line    6)\n* arithmetic operators:                  Operators.          (line    6)\n* ARM interworking support:              ARM.                (line    6)\n* AS_NEEDED(FILES):                      File Commands.      (line   54)\n* ASSERT:                                Miscellaneous Commands.\n                                                             (line    9)\n* assertion in linker script:            Miscellaneous Commands.\n                                                             (line    9)\n* assignment in scripts:                 Assignments.        (line    6)\n* AT(LMA):                               Output Section LMA. (line    6)\n* AT>LMA_REGION:                         Output Section LMA. (line    6)\n* automatic data imports:                WIN32.              (line  185)\n* back end:                              BFD.                (line    6)\n* BASE (MRI):                            MRI.                (line   54)\n* BE8:                                   ARM.                (line   28)\n* BFD canonical format:                  Canonical format.   (line   11)\n* BFD requirements:                      BFD.                (line   16)\n* big-endian objects:                    Options.            (line  228)\n* binary input format:                   Options.            (line  124)\n* BLOCK(EXP):                            Builtin Functions.  (line   75)\n* bug criteria:                          Bug Criteria.       (line    6)\n* bug reports:                           Bug Reporting.      (line    6)\n* bugs in ld:                            Reporting Bugs.     (line    6)\n* BYTE(EXPRESSION):                      Output Section Data.\n                                                             (line    6)\n* C++ constructors, arranging in link:   Output Section Keywords.\n                                                             (line   19)\n* CHIP (MRI):                            MRI.                (line   58)\n* COLLECT_NO_DEMANGLE:                   Environment.        (line   29)\n* combining symbols, warnings on:        Options.            (line 1292)\n* command files:                         Scripts.            (line    6)\n* command line:                          Options.            (line    6)\n* common allocation:                     Options.            (line  158)\n* common allocation in linker script:    Miscellaneous Commands.\n                                                             (line   20)\n* common symbol placement:               Input Section Common.\n                                                             (line    6)\n* COMMONPAGESIZE:                        Symbolic Constants. (line   13)\n* compatibility, MRI:                    Options.            (line  148)\n* CONSTANT:                              Symbolic Constants. (line    6)\n* constants in linker scripts:           Constants.          (line    6)\n* constraints on output sections:        Output Section Constraint.\n                                                             (line    6)\n* CONSTRUCTORS:                          Output Section Keywords.\n                                                             (line   19)\n* constructors:                          Options.            (line  541)\n* constructors, arranging in link:       Output Section Keywords.\n                                                             (line   19)\n* Cortex-A8 erratum workaround:          i960.               (line   39)\n* crash of linker:                       Bug Criteria.       (line    9)\n* CREATE_OBJECT_SYMBOLS:                 Output Section Keywords.\n                                                             (line    9)\n* creating a DEF file:                   WIN32.              (line  152)\n* cross reference table:                 Options.            (line  811)\n* cross references:                      Miscellaneous Commands.\n                                                             (line   56)\n* current output location:               Location Counter.   (line    6)\n* data:                                  Output Section Data.\n                                                             (line    6)\n* DATA_SEGMENT_ALIGN(MAXPAGESIZE, COMMONPAGESIZE): Builtin Functions.\n                                                             (line   80)\n* DATA_SEGMENT_END(EXP):                 Builtin Functions.  (line  101)\n* DATA_SEGMENT_RELRO_END(OFFSET, EXP):   Builtin Functions.  (line  107)\n* dbx:                                   Options.            (line 1220)\n* DEF files, creating:                   Options.            (line 1676)\n* default emulation:                     Environment.        (line   21)\n* default input format:                  Environment.        (line    9)\n* DEFINED(SYMBOL):                       Builtin Functions.  (line  118)\n* deleting local symbols:                Options.            (line  566)\n* demangling, default:                   Environment.        (line   29)\n* demangling, from command line:         Options.            (line  852)\n* direct linking to a dll:               WIN32.              (line  233)\n* discarding sections:                   Output Section Discarding.\n                                                             (line    6)\n* discontinuous memory:                  MEMORY.             (line    6)\n* DLLs, creating:                        Options.            (line 1676)\n* DLLs, linking to:                      Options.            (line 1707)\n* dot:                                   Location Counter.   (line    6)\n* dot inside sections:                   Location Counter.   (line   36)\n* dot outside sections:                  Location Counter.   (line   66)\n* dynamic linker, from command line:     Options.            (line  865)\n* dynamic symbol table:                  Options.            (line  201)\n* ELF program headers:                   PHDRS.              (line    6)\n* emulation:                             Options.            (line  372)\n* emulation, default:                    Environment.        (line   21)\n* END (MRI):                             MRI.                (line   62)\n* endianness:                            Options.            (line  228)\n* entry point:                           Entry Point.        (line    6)\n* entry point, from command line:        Options.            (line  167)\n* entry point, thumb:                    ARM.                (line   17)\n* ENTRY(SYMBOL):                         Entry Point.        (line    6)\n* error on valid input:                  Bug Criteria.       (line   12)\n* example of linker script:              Simple Example.     (line    6)\n* exporting DLL symbols:                 WIN32.              (line   19)\n* expression evaluation order:           Evaluation.         (line    6)\n* expression sections:                   Expression Section. (line    6)\n* expression, absolute:                  Builtin Functions.  (line   10)\n* expressions:                           Expressions.        (line    6)\n* EXTERN:                                Miscellaneous Commands.\n                                                             (line   13)\n* fatal signal:                          Bug Criteria.       (line    9)\n* file name wildcard patterns:           Input Section Wildcards.\n                                                             (line    6)\n* FILEHDR:                               PHDRS.              (line   61)\n* filename symbols:                      Output Section Keywords.\n                                                             (line    9)\n* fill pattern, entire section:          Output Section Fill.\n                                                             (line    6)\n* FILL(EXPRESSION):                      Output Section Data.\n                                                             (line   39)\n* finalization function:                 Options.            (line  280)\n* first input file:                      File Commands.      (line   82)\n* first instruction:                     Entry Point.        (line    6)\n* FIX_V4BX:                              ARM.                (line   49)\n* FIX_V4BX_INTERWORKING:                 ARM.                (line   62)\n* FORCE_COMMON_ALLOCATION:               Miscellaneous Commands.\n                                                             (line   20)\n* forcing input section alignment:       Forced Input Alignment.\n                                                             (line    6)\n* forcing output section alignment:      Forced Output Alignment.\n                                                             (line    6)\n* forcing the creation of dynamic sections: Options.         (line  464)\n* FORMAT (MRI):                          MRI.                (line   66)\n* functions in expressions:              Builtin Functions.  (line    6)\n* garbage collection <1>:                Options.            (line  909)\n* garbage collection <2>:                Input Section Keep. (line    6)\n* garbage collection:                    Options.            (line  887)\n* generating optimized output:           Options.            (line  445)\n* GNU linker:                            Overview.           (line    6)\n* GNUTARGET:                             Environment.        (line    9)\n* GROUP(FILES):                          File Commands.      (line   47)\n* grouping input files:                  File Commands.      (line   47)\n* groups of archives:                    Options.            (line  675)\n* H8/300 support:                        H8/300.             (line    6)\n* header size:                           Builtin Functions.  (line  183)\n* heap size:                             Options.            (line 1618)\n* help:                                  Options.            (line  918)\n* holes:                                 Location Counter.   (line   12)\n* holes, filling:                        Output Section Data.\n                                                             (line   39)\n* HPPA multiple sub-space stubs:         HPPA ELF32.         (line    6)\n* HPPA stub grouping:                    HPPA ELF32.         (line   12)\n* i960 support:                          i960.               (line    6)\n* image base:                            Options.            (line 1625)\n* implicit linker scripts:               Implicit Linker Scripts.\n                                                             (line    6)\n* import libraries:                      WIN32.              (line   10)\n* INCLUDE FILENAME:                      File Commands.      (line    9)\n* including a linker script:             File Commands.      (line    9)\n* including an entire archive:           Options.            (line 1405)\n* incremental link:                      Options.            (line  306)\n* INHIBIT_COMMON_ALLOCATION:             Miscellaneous Commands.\n                                                             (line   25)\n* initialization function:               Options.            (line  309)\n* initialized data in ROM:               Output Section LMA. (line   26)\n* input file format in linker script:    Format Commands.    (line   35)\n* input filename symbols:                Output Section Keywords.\n                                                             (line    9)\n* input files in linker scripts:         File Commands.      (line   19)\n* input files, displaying:               Options.            (line  507)\n* input format:                          Options.            (line  124)\n* input object files in linker scripts:  File Commands.      (line   19)\n* input section alignment:               Forced Input Alignment.\n                                                             (line    6)\n* input section basics:                  Input Section Basics.\n                                                             (line    6)\n* input section wildcards:               Input Section Wildcards.\n                                                             (line    6)\n* input sections:                        Input Section.      (line    6)\n* INPUT(FILES):                          File Commands.      (line   19)\n* INSERT:                                Miscellaneous Commands.\n                                                             (line   30)\n* insert user script into default script: Miscellaneous Commands.\n                                                             (line   30)\n* integer notation:                      Constants.          (line    6)\n* integer suffixes:                      Constants.          (line   15)\n* internal object-file format:           Canonical format.   (line   11)\n* invalid input:                         Bug Criteria.       (line   14)\n* K and M integer suffixes:              Constants.          (line   15)\n* KEEP:                                  Input Section Keep. (line    6)\n* l =:                                   MEMORY.             (line   74)\n* lazy evaluation:                       Evaluation.         (line    6)\n* ld bugs, reporting:                    Bug Reporting.      (line    6)\n* LDEMULATION:                           Environment.        (line   21)\n* len =:                                 MEMORY.             (line   74)\n* LENGTH =:                              MEMORY.             (line   74)\n* LENGTH(MEMORY):                        Builtin Functions.  (line  135)\n* library search path in linker script:  File Commands.      (line   74)\n* link map:                              Options.            (line  382)\n* link-time runtime library search path: Options.            (line 1107)\n* linker crash:                          Bug Criteria.       (line    9)\n* linker script concepts:                Basic Script Concepts.\n                                                             (line    6)\n* linker script example:                 Simple Example.     (line    6)\n* linker script file commands:           File Commands.      (line    6)\n* linker script format:                  Script Format.      (line    6)\n* linker script input object files:      File Commands.      (line   19)\n* linker script simple commands:         Simple Commands.    (line    6)\n* linker scripts:                        Scripts.            (line    6)\n* LIST (MRI):                            MRI.                (line   77)\n* little-endian objects:                 Options.            (line  231)\n* LOAD (MRI):                            MRI.                (line   84)\n* load address:                          Output Section LMA. (line    6)\n* LOADADDR(SECTION):                     Builtin Functions.  (line  138)\n* loading, preventing:                   Output Section Type.\n                                                             (line   22)\n* local symbols, deleting:               Options.            (line  570)\n* location counter:                      Location Counter.   (line    6)\n* LONG(EXPRESSION):                      Output Section Data.\n                                                             (line    6)\n* M and K integer suffixes:              Constants.          (line   15)\n* M68HC11 and 68HC12 support:            M68HC11/68HC12.     (line    6)\n* machine architecture:                  Miscellaneous Commands.\n                                                             (line   72)\n* machine dependencies:                  Machine Dependent.  (line    6)\n* mapping input sections to output sections: Input Section.  (line    6)\n* MAX:                                   Builtin Functions.  (line  143)\n* MAXPAGESIZE:                           Symbolic Constants. (line   10)\n* MEMORY:                                MEMORY.             (line    6)\n* memory region attributes:              MEMORY.             (line   34)\n* memory regions:                        MEMORY.             (line    6)\n* memory regions and sections:           Output Section Region.\n                                                             (line    6)\n* memory usage:                          Options.            (line  930)\n* MIN:                                   Builtin Functions.  (line  146)\n* Motorola 68K GOT generation:           M68K.               (line    6)\n* MRI compatibility:                     MRI.                (line    6)\n* MSP430 extra sections:                 MSP430.             (line   11)\n* NAME (MRI):                            MRI.                (line   90)\n* name, section:                         Output Section Name.\n                                                             (line    6)\n* names:                                 Symbols.            (line    6)\n* naming the output file:                Options.            (line  439)\n* NEXT(EXP):                             Builtin Functions.  (line  150)\n* NMAGIC:                                Options.            (line  419)\n* NO_ENUM_SIZE_WARNING:                  ARM.                (line  111)\n* NO_WCHAR_SIZE_WARNING:                 ARM.                (line  118)\n* NOCROSSREFS(SECTIONS):                 Miscellaneous Commands.\n                                                             (line   56)\n* NOLOAD:                                Output Section Type.\n                                                             (line   22)\n* not enough room for program headers:   Builtin Functions.  (line  188)\n* o =:                                   MEMORY.             (line   69)\n* objdump -i:                            BFD.                (line    6)\n* object file management:                BFD.                (line    6)\n* object files:                          Options.            (line   29)\n* object formats available:              BFD.                (line    6)\n* object size:                           Options.            (line  289)\n* OMAGIC:                                Options.            (line  424)\n* ONLY_IF_RO:                            Output Section Constraint.\n                                                             (line    6)\n* ONLY_IF_RW:                            Output Section Constraint.\n                                                             (line    6)\n* opening object files:                  BFD outline.        (line    6)\n* operators for arithmetic:              Operators.          (line    6)\n* options:                               Options.            (line    6)\n* ORDER (MRI):                           MRI.                (line   95)\n* org =:                                 MEMORY.             (line   69)\n* ORIGIN =:                              MEMORY.             (line   69)\n* ORIGIN(MEMORY):                        Builtin Functions.  (line  156)\n* orphan:                                Orphan Sections.    (line    6)\n* output file after errors:              Options.            (line 1009)\n* output file format in linker script:   Format Commands.    (line   10)\n* output file name in linker script:     File Commands.      (line   64)\n* output section alignment:              Forced Output Alignment.\n                                                             (line    6)\n* output section attributes:             Output Section Attributes.\n                                                             (line    6)\n* output section data:                   Output Section Data.\n                                                             (line    6)\n* OUTPUT(FILENAME):                      File Commands.      (line   64)\n* OUTPUT_ARCH(BFDARCH):                  Miscellaneous Commands.\n                                                             (line   72)\n* OUTPUT_FORMAT(BFDNAME):                Format Commands.    (line   10)\n* OVERLAY:                               Overlay Description.\n                                                             (line    6)\n* overlays:                              Overlay Description.\n                                                             (line    6)\n* partial link:                          Options.            (line  468)\n* PE import table prefixing:             ARM.                (line   23)\n* PHDRS:                                 PHDRS.              (line   61)\n* PIC_VENEER:                            ARM.                (line  124)\n* position independent executables:      Options.            (line 1036)\n* PowerPC ELF32 options:                 PowerPC ELF32.      (line   16)\n* PowerPC GOT:                           PowerPC ELF32.      (line   33)\n* PowerPC long branches:                 PowerPC ELF32.      (line    6)\n* PowerPC PLT:                           PowerPC ELF32.      (line   16)\n* PowerPC stub symbols:                  PowerPC ELF32.      (line   47)\n* PowerPC TLS optimization:              PowerPC ELF32.      (line   51)\n* PowerPC64 dot symbols:                 PowerPC64 ELF64.    (line   33)\n* PowerPC64 ELF64 options:               PowerPC64 ELF64.    (line    6)\n* PowerPC64 multi-TOC:                   PowerPC64 ELF64.    (line   74)\n* PowerPC64 OPD optimization:            PowerPC64 ELF64.    (line   48)\n* PowerPC64 OPD spacing:                 PowerPC64 ELF64.    (line   54)\n* PowerPC64 stub grouping:               PowerPC64 ELF64.    (line    6)\n* PowerPC64 stub symbols:                PowerPC64 ELF64.    (line   29)\n* PowerPC64 TLS optimization:            PowerPC64 ELF64.    (line   43)\n* PowerPC64 TOC optimization:            PowerPC64 ELF64.    (line   60)\n* precedence in expressions:             Operators.          (line    6)\n* prevent unnecessary loading:           Output Section Type.\n                                                             (line   22)\n* program headers:                       PHDRS.              (line    6)\n* program headers and sections:          Output Section Phdr.\n                                                             (line    6)\n* program headers, not enough room:      Builtin Functions.  (line  188)\n* program segments:                      PHDRS.              (line    6)\n* PROVIDE:                               PROVIDE.            (line    6)\n* PROVIDE_HIDDEN:                        PROVIDE_HIDDEN.     (line    6)\n* PUBLIC (MRI):                          MRI.                (line  103)\n* QUAD(EXPRESSION):                      Output Section Data.\n                                                             (line    6)\n* quoted symbol names:                   Symbols.            (line    6)\n* read-only text:                        Options.            (line  419)\n* read/write from cmd line:              Options.            (line  424)\n* region alias:                          REGION_ALIAS.       (line    6)\n* region names:                          REGION_ALIAS.       (line    6)\n* REGION_ALIAS(ALIAS, REGION):           REGION_ALIAS.       (line    6)\n* regions of memory:                     MEMORY.             (line    6)\n* relative expressions:                  Expression Section. (line    6)\n* relaxing addressing modes:             Options.            (line 1050)\n* relaxing on H8/300:                    H8/300.             (line    9)\n* relaxing on i960:                      i960.               (line   31)\n* relaxing on M68HC11:                   M68HC11/68HC12.     (line   12)\n* relaxing on Xtensa:                    Xtensa.             (line   27)\n* relocatable and absolute symbols:      Expression Section. (line    6)\n* relocatable output:                    Options.            (line  468)\n* removing sections:                     Output Section Discarding.\n                                                             (line    6)\n* reporting bugs in ld:                  Reporting Bugs.     (line    6)\n* requirements for BFD:                  BFD.                (line   16)\n* retain relocations in final executable: Options.           (line  455)\n* retaining specified symbols:           Options.            (line 1071)\n* ROM initialized data:                  Output Section LMA. (line   26)\n* round up expression:                   Builtin Functions.  (line   36)\n* round up location counter:             Builtin Functions.  (line   36)\n* runtime library name:                  Options.            (line  297)\n* runtime library search path:           Options.            (line 1085)\n* runtime pseudo-relocation:             WIN32.              (line  211)\n* scaled integers:                       Constants.          (line   15)\n* scommon section:                       Input Section Common.\n                                                             (line   20)\n* script files:                          Options.            (line  520)\n* scripts:                               Scripts.            (line    6)\n* search directory, from cmd line:       Options.            (line  348)\n* search path in linker script:          File Commands.      (line   74)\n* SEARCH_DIR(PATH):                      File Commands.      (line   74)\n* SECT (MRI):                            MRI.                (line  109)\n* section address:                       Output Section Address.\n                                                             (line    6)\n* section address in expression:         Builtin Functions.  (line   17)\n* section alignment:                     Builtin Functions.  (line   62)\n* section alignment, warnings on:        Options.            (line 1383)\n* section data:                          Output Section Data.\n                                                             (line    6)\n* section fill pattern:                  Output Section Fill.\n                                                             (line    6)\n* section load address:                  Output Section LMA. (line    6)\n* section load address in expression:    Builtin Functions.  (line  138)\n* section name:                          Output Section Name.\n                                                             (line    6)\n* section name wildcard patterns:        Input Section Wildcards.\n                                                             (line    6)\n* section size:                          Builtin Functions.  (line  167)\n* section, assigning to memory region:   Output Section Region.\n                                                             (line    6)\n* section, assigning to program header:  Output Section Phdr.\n                                                             (line    6)\n* SECTIONS:                              SECTIONS.           (line    6)\n* sections, discarding:                  Output Section Discarding.\n                                                             (line    6)\n* segment origins, cmd line:             Options.            (line 1236)\n* SEGMENT_START(SEGMENT, DEFAULT):       Builtin Functions.  (line  159)\n* segments, ELF:                         PHDRS.              (line    6)\n* shared libraries:                      Options.            (line 1164)\n* SHORT(EXPRESSION):                     Output Section Data.\n                                                             (line    6)\n* SIZEOF(SECTION):                       Builtin Functions.  (line  167)\n* SIZEOF_HEADERS:                        Builtin Functions.  (line  183)\n* small common symbols:                  Input Section Common.\n                                                             (line   20)\n* SORT:                                  Input Section Wildcards.\n                                                             (line   58)\n* SORT_BY_ALIGNMENT:                     Input Section Wildcards.\n                                                             (line   54)\n* SORT_BY_NAME:                          Input Section Wildcards.\n                                                             (line   46)\n* SPU:                                   SPU ELF.            (line   29)\n* SPU ELF options:                       SPU ELF.            (line    6)\n* SPU extra overlay stubs:               SPU ELF.            (line   19)\n* SPU local store size:                  SPU ELF.            (line   24)\n* SPU overlay stub symbols:              SPU ELF.            (line   15)\n* SPU overlays:                          SPU ELF.            (line    9)\n* SPU plugins:                           SPU ELF.            (line    6)\n* SQUAD(EXPRESSION):                     Output Section Data.\n                                                             (line    6)\n* stack size:                            Options.            (line 1865)\n* standard Unix system:                  Options.            (line    7)\n* start of execution:                    Entry Point.        (line    6)\n* STARTUP(FILENAME):                     File Commands.      (line   82)\n* strip all symbols:                     Options.            (line  498)\n* strip debugger symbols:                Options.            (line  502)\n* stripping all but some symbols:        Options.            (line 1071)\n* STUB_GROUP_SIZE:                       ARM.                (line  129)\n* SUBALIGN(SUBSECTION_ALIGN):            Forced Input Alignment.\n                                                             (line    6)\n* suffixes for integers:                 Constants.          (line   15)\n* symbol defaults:                       Builtin Functions.  (line  118)\n* symbol definition, scripts:            Assignments.        (line    6)\n* symbol names:                          Symbols.            (line    6)\n* symbol tracing:                        Options.            (line  576)\n* symbol versions:                       VERSION.            (line    6)\n* symbol-only input:                     Options.            (line  487)\n* symbolic constants:                    Symbolic Constants. (line    6)\n* symbols, from command line:            Options.            (line  839)\n* symbols, relocatable and absolute:     Expression Section. (line    6)\n* symbols, retaining selectively:        Options.            (line 1071)\n* synthesizing linker:                   Options.            (line 1050)\n* synthesizing on H8/300:                H8/300.             (line   14)\n* TARGET(BFDNAME):                       Format Commands.    (line   35)\n* TARGET1:                               ARM.                (line   32)\n* TARGET2:                               ARM.                (line   37)\n* text segment origin, cmd line:         Options.            (line 1243)\n* thumb entry point:                     ARM.                (line   17)\n* TI COFF versions:                      TI COFF.            (line    6)\n* traditional format:                    Options.            (line 1215)\n* trampoline generation on M68HC11:      M68HC11/68HC12.     (line   31)\n* trampoline generation on M68HC12:      M68HC11/68HC12.     (line   31)\n* unallocated address, next:             Builtin Functions.  (line  150)\n* undefined symbol:                      Options.            (line  533)\n* undefined symbol in linker script:     Miscellaneous Commands.\n                                                             (line   13)\n* undefined symbols, warnings on:        Options.            (line 1379)\n* uninitialized data placement:          Input Section Common.\n                                                             (line    6)\n* unspecified memory:                    Output Section Data.\n                                                             (line   39)\n* usage:                                 Options.            (line  918)\n* USE_BLX:                               ARM.                (line   74)\n* using a DEF file:                      WIN32.              (line   57)\n* using auto-export functionality:       WIN32.              (line   22)\n* Using decorations:                     WIN32.              (line  156)\n* variables, defining:                   Assignments.        (line    6)\n* verbose:                               Options.            (line 1275)\n* version:                               Options.            (line  560)\n* version script:                        VERSION.            (line    6)\n* version script, symbol versions:       Options.            (line 1281)\n* VERSION {script text}:                 VERSION.            (line    6)\n* versions of symbols:                   VERSION.            (line    6)\n* VFP11_DENORM_FIX:                      ARM.                (line   83)\n* warnings, on combining symbols:        Options.            (line 1292)\n* warnings, on section alignment:        Options.            (line 1383)\n* warnings, on undefined symbols:        Options.            (line 1379)\n* weak externals:                        WIN32.              (line  401)\n* what is this?:                         Overview.           (line    6)\n* wildcard file name patterns:           Input Section Wildcards.\n                                                             (line    6)\n* Xtensa options:                        Xtensa.             (line   56)\n* Xtensa processors:                     Xtensa.             (line    6)\n\n\n\u001f\nTag Table:\nNode: Top\u007f759\nNode: Overview\u007f1542\nNode: Invocation\u007f2656\nNode: Options\u007f3064\nNode: Environment\u007f90607\nNode: Scripts\u007f92367\nNode: Basic Script Concepts\u007f94101\nNode: Script Format\u007f96808\nNode: Simple Example\u007f97671\nNode: Simple Commands\u007f100767\nNode: Entry Point\u007f101273\nNode: File Commands\u007f102032\nNode: Format Commands\u007f106033\nNode: REGION_ALIAS\u007f107989\nNode: Miscellaneous Commands\u007f112821\nNode: Assignments\u007f116197\nNode: Simple Assignments\u007f116688\nNode: PROVIDE\u007f118424\nNode: PROVIDE_HIDDEN\u007f119629\nNode: Source Code Reference\u007f119873\nNode: SECTIONS\u007f123453\nNode: Output Section Description\u007f125344\nNode: Output Section Name\u007f126431\nNode: Output Section Address\u007f127307\nNode: Input Section\u007f129027\nNode: Input Section Basics\u007f129828\nNode: Input Section Wildcards\u007f133046\nNode: Input Section Common\u007f137779\nNode: Input Section Keep\u007f139261\nNode: Input Section Example\u007f139751\nNode: Output Section Data\u007f140719\nNode: Output Section Keywords\u007f143496\nNode: Output Section Discarding\u007f147065\nNode: Output Section Attributes\u007f148246\nNode: Output Section Type\u007f149347\nNode: Output Section LMA\u007f150501\nNode: Forced Output Alignment\u007f153014\nNode: Forced Input Alignment\u007f153282\nNode: Output Section Constraint\u007f153671\nNode: Output Section Region\u007f154099\nNode: Output Section Phdr\u007f154532\nNode: Output Section Fill\u007f155196\nNode: Overlay Description\u007f156338\nNode: MEMORY\u007f160641\nNode: PHDRS\u007f164974\nNode: VERSION\u007f170013\nNode: Expressions\u007f178088\nNode: Constants\u007f179017\nNode: Symbolic Constants\u007f179892\nNode: Symbols\u007f180443\nNode: Orphan Sections\u007f181190\nNode: Location Counter\u007f182354\nNode: Operators\u007f186790\nNode: Evaluation\u007f187712\nNode: Expression Section\u007f189076\nNode: Builtin Functions\u007f190565\nNode: Implicit Linker Scripts\u007f198532\nNode: Machine Dependent\u007f199307\nNode: H8/300\u007f200323\nNode: i960\u007f201948\nNode: M68HC11/68HC12\u007f204049\nNode: ARM\u007f205503\nNode: HPPA ELF32\u007f213015\nNode: M68K\u007f214638\nNode: MMIX\u007f215547\nNode: MSP430\u007f216712\nNode: PowerPC ELF32\u007f217761\nNode: PowerPC64 ELF64\u007f220597\nNode: SPU ELF\u007f225013\nNode: TI COFF\u007f227645\nNode: WIN32\u007f228171\nNode: Xtensa\u007f247895\nNode: BFD\u007f251017\nNode: BFD outline\u007f252472\nNode: BFD information loss\u007f253758\nNode: Canonical format\u007f256275\nNode: Reporting Bugs\u007f260632\nNode: Bug Criteria\u007f261326\nNode: Bug Reporting\u007f262025\nNode: MRI\u007f269064\nNode: GNU Free Documentation License\u007f273707\nNode: LD Index\u007f293424\n\u001f\nEnd Tag Table\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/emultempl/elf32.em": "# This shell script emits a C file. -*- C -*-\n# It does some substitutions.\n# This file is now misnamed, because it supports both 32 bit and 64 bit\n# ELF emulations.\ntest -z \"${ELFSIZE}\" && ELFSIZE=32\nif [ -z \"$MACHINE\" ]; then\n  OUTPUT_ARCH=${ARCH}\nelse\n  OUTPUT_ARCH=${ARCH}:${MACHINE}\nfi\nfragment <<EOF\n/* This file is is generated by a shell script.  DO NOT EDIT! */\n\n/* ${ELFSIZE} bit ELF emulation code for ${EMULATION_NAME}\n   Copyright 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n   Free Software Foundation, Inc.\n   Written by Steve Chamberlain <sac@cygnus.com>\n   ELF support by Ian Lance Taylor <ian@cygnus.com>\n\n   This file is part of the GNU Binutils.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n   MA 02110-1301, USA.  */\n\n#define TARGET_IS_${EMULATION_NAME}\n\n#include \"sysdep.h\"\n#include \"bfd.h\"\n#include \"libiberty.h\"\n#include \"safe-ctype.h\"\n#include \"getopt.h\"\n#include \"md5.h\"\n#include \"sha1.h\"\n#include <fcntl.h>\n\n#include \"bfdlink.h\"\n\n#include \"ld.h\"\n#include \"ldmain.h\"\n#include \"ldmisc.h\"\n#include \"ldexp.h\"\n#include \"ldlang.h\"\n#include \"ldfile.h\"\n#include \"ldemul.h\"\n#include <ldgram.h>\n#include \"elf/common.h\"\n#include \"elf-bfd.h\"\n\n/* Declare functions used by various EXTRA_EM_FILEs.  */\nstatic void gld${EMULATION_NAME}_before_parse (void);\nstatic void gld${EMULATION_NAME}_after_open (void);\nstatic void gld${EMULATION_NAME}_before_allocation (void);\nstatic void gld${EMULATION_NAME}_after_allocation (void);\nstatic lang_output_section_statement_type *gld${EMULATION_NAME}_place_orphan\n  (asection *, const char *, int);\nEOF\n\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\n  case ${target} in\n    *-*-linux-* | *-*-k*bsd*-*)\n  fragment <<EOF\n#ifdef HAVE_GLOB\n#include <glob.h>\n#endif\nEOF\n    ;;\n  esac\nfi\n\n# Import any needed special functions and/or overrides.\n#\nsource_em ${srcdir}/emultempl/elf-generic.em\nif test -n \"$EXTRA_EM_FILE\" ; then\n  source_em ${srcdir}/emultempl/${EXTRA_EM_FILE}.em\nfi\n\n# Functions in this file can be overridden by setting the LDEMUL_* shell\n# variables.  If the name of the overriding function is the same as is\n# defined in this file, then don't output this file's version.\n# If a different overriding name is given then output the standard function\n# as presumably it is called from the overriding function.\n#\nif test x\"$LDEMUL_BEFORE_PARSE\" != xgld\"$EMULATION_NAME\"_before_parse; then\nfragment <<EOF\n\nstatic void\ngld${EMULATION_NAME}_before_parse (void)\n{\n  ldfile_set_output_arch (\"${OUTPUT_ARCH}\", bfd_arch_`echo ${ARCH} | sed -e 's/:.*//'`);\n  config.dynamic_link = ${DYNAMIC_LINK-TRUE};\n  config.has_shared = `if test -n \"$GENERATE_SHLIB_SCRIPT\" ; then echo TRUE ; else echo FALSE ; fi`;\n}\n\nEOF\nfi\n\nif test x\"$LDEMUL_RECOGNIZED_FILE\" != xgld\"${EMULATION_NAME}\"_load_symbols; then\nfragment <<EOF\n/* Handle as_needed DT_NEEDED.  */\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_load_symbols (lang_input_statement_type *entry)\n{\n  int link_class = 0;\n\n  /* Tell the ELF linker that we don't want the output file to have a\n     DT_NEEDED entry for this file, unless it is used to resolve\n     references in a regular object.  */\n  if (entry->as_needed)\n    link_class = DYN_AS_NEEDED;\n\n  /* Tell the ELF linker that we don't want the output file to have a\n     DT_NEEDED entry for any dynamic library in DT_NEEDED tags from\n     this file at all.  */\n  if (!entry->add_needed)\n    link_class |= DYN_NO_ADD_NEEDED;\n\n  if (entry->just_syms_flag\n      && (bfd_get_file_flags (entry->the_bfd) & DYNAMIC) != 0)\n    einfo (_(\"%P%F: --just-symbols may not be used on DSO: %B\\n\"),\n\t   entry->the_bfd);\n\n  if (!link_class\n      || (bfd_get_file_flags (entry->the_bfd) & DYNAMIC) == 0)\n    return FALSE;\n\n  bfd_elf_set_dyn_lib_class (entry->the_bfd,\n                             (enum dynamic_lib_link_class) link_class);\n\n  /* Continue on with normal load_symbols processing.  */\n  return FALSE;\n}\nEOF\nfi\n\nfragment <<EOF\n\n/* These variables are required to pass information back and forth\n   between after_open and check_needed and stat_needed and vercheck.  */\n\nstatic struct bfd_link_needed_list *global_needed;\nstatic struct stat global_stat;\nstatic lang_input_statement_type *global_found;\nstatic struct bfd_link_needed_list *global_vercheck_needed;\nstatic bfd_boolean global_vercheck_failed;\n\n\n/* On Linux, it's possible to have different versions of the same\n   shared library linked against different versions of libc.  The\n   dynamic linker somehow tags which libc version to use in\n   /etc/ld.so.cache, and, based on the libc that it sees in the\n   executable, chooses which version of the shared library to use.\n\n   We try to do a similar check here by checking whether this shared\n   library needs any other shared libraries which may conflict with\n   libraries we have already included in the link.  If it does, we\n   skip it, and try to find another shared library farther on down the\n   link path.\n\n   This is called via lang_for_each_input_file.\n   GLOBAL_VERCHECK_NEEDED is the list of objects needed by the object\n   which we are checking.  This sets GLOBAL_VERCHECK_FAILED if we find\n   a conflicting version.  */\n\nstatic void\ngld${EMULATION_NAME}_vercheck (lang_input_statement_type *s)\n{\n  const char *soname;\n  struct bfd_link_needed_list *l;\n\n  if (global_vercheck_failed)\n    return;\n  if (s->the_bfd == NULL\n      || (bfd_get_file_flags (s->the_bfd) & DYNAMIC) == 0)\n    return;\n\n  soname = bfd_elf_get_dt_soname (s->the_bfd);\n  if (soname == NULL)\n    soname = lbasename (bfd_get_filename (s->the_bfd));\n\n  for (l = global_vercheck_needed; l != NULL; l = l->next)\n    {\n      const char *suffix;\n\n      if (strcmp (soname, l->name) == 0)\n\t{\n\t  /* Probably can't happen, but it's an easy check.  */\n\t  continue;\n\t}\n\n      if (strchr (l->name, '/') != NULL)\n\tcontinue;\n\n      suffix = strstr (l->name, \".so.\");\n      if (suffix == NULL)\n\tcontinue;\n\n      suffix += sizeof \".so.\" - 1;\n\n      if (strncmp (soname, l->name, suffix - l->name) == 0)\n\t{\n\t  /* Here we know that S is a dynamic object FOO.SO.VER1, and\n\t     the object we are considering needs a dynamic object\n\t     FOO.SO.VER2, and VER1 and VER2 are different.  This\n\t     appears to be a version mismatch, so we tell the caller\n\t     to try a different version of this library.  */\n\t  global_vercheck_failed = TRUE;\n\t  return;\n\t}\n    }\n}\n\n\n/* See if an input file matches a DT_NEEDED entry by running stat on\n   the file.  */\n\nstatic void\ngld${EMULATION_NAME}_stat_needed (lang_input_statement_type *s)\n{\n  struct stat st;\n  const char *suffix;\n  const char *soname;\n\n  if (global_found != NULL)\n    return;\n  if (s->the_bfd == NULL)\n    return;\n\n  /* If this input file was an as-needed entry, and wasn't found to be\n     needed at the stage it was linked, then don't say we have loaded it.  */\n  if ((bfd_elf_get_dyn_lib_class (s->the_bfd) & DYN_AS_NEEDED) != 0)\n    return;\n\n  if (bfd_stat (s->the_bfd, &st) != 0)\n    {\n      einfo (\"%P:%B: bfd_stat failed: %E\\n\", s->the_bfd);\n      return;\n    }\n\n  /* Some operating systems, e.g. Windows, do not provide a meaningful\n     st_ino; they always set it to zero.  (Windows does provide a\n     meaningful st_dev.)  Do not indicate a duplicate library in that\n     case.  While there is no guarantee that a system that provides\n     meaningful inode numbers will never set st_ino to zero, this is\n     merely an optimization, so we do not need to worry about false\n     negatives.  */\n  if (st.st_dev == global_stat.st_dev\n      && st.st_ino == global_stat.st_ino\n      && st.st_ino != 0)\n    {\n      global_found = s;\n      return;\n    }\n\n  /* We issue a warning if it looks like we are including two\n     different versions of the same shared library.  For example,\n     there may be a problem if -lc picks up libc.so.6 but some other\n     shared library has a DT_NEEDED entry of libc.so.5.  This is a\n     heuristic test, and it will only work if the name looks like\n     NAME.so.VERSION.  FIXME: Depending on file names is error-prone.\n     If we really want to issue warnings about mixing version numbers\n     of shared libraries, we need to find a better way.  */\n\n  if (strchr (global_needed->name, '/') != NULL)\n    return;\n  suffix = strstr (global_needed->name, \".so.\");\n  if (suffix == NULL)\n    return;\n  suffix += sizeof \".so.\" - 1;\n\n  soname = bfd_elf_get_dt_soname (s->the_bfd);\n  if (soname == NULL)\n    soname = lbasename (s->filename);\n\n  if (strncmp (soname, global_needed->name, suffix - global_needed->name) == 0)\n    einfo (\"%P: warning: %s, needed by %B, may conflict with %s\\n\",\n\t   global_needed->name, global_needed->by, soname);\n}\n\nstruct dt_needed\n{\n  bfd *by;\n  const char *name;\n};\n\n/* This function is called for each possible name for a dynamic object\n   named by a DT_NEEDED entry.  The FORCE parameter indicates whether\n   to skip the check for a conflicting version.  */\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_try_needed (struct dt_needed *needed,\n\t\t\t\t int force)\n{\n  bfd *abfd;\n  const char *name = needed->name;\n  const char *soname;\n  int link_class;\n\n  abfd = bfd_openr (name, bfd_get_target (link_info.output_bfd));\n  if (abfd == NULL)\n    return FALSE;\n  if (! bfd_check_format (abfd, bfd_object))\n    {\n      bfd_close (abfd);\n      return FALSE;\n    }\n  if ((bfd_get_file_flags (abfd) & DYNAMIC) == 0)\n    {\n      bfd_close (abfd);\n      return FALSE;\n    }\n\n  /* For DT_NEEDED, they have to match.  */\n  if (abfd->xvec != link_info.output_bfd->xvec)\n    {\n      bfd_close (abfd);\n      return FALSE;\n    }\n\n  /* Check whether this object would include any conflicting library\n     versions.  If FORCE is set, then we skip this check; we use this\n     the second time around, if we couldn't find any compatible\n     instance of the shared library.  */\n\n  if (! force)\n    {\n      struct bfd_link_needed_list *needed;\n\n      if (! bfd_elf_get_bfd_needed_list (abfd, &needed))\n\teinfo (\"%F%P:%B: bfd_elf_get_bfd_needed_list failed: %E\\n\", abfd);\n\n      if (needed != NULL)\n\t{\n\t  global_vercheck_needed = needed;\n\t  global_vercheck_failed = FALSE;\n\t  lang_for_each_input_file (gld${EMULATION_NAME}_vercheck);\n\t  if (global_vercheck_failed)\n\t    {\n\t      bfd_close (abfd);\n\t      /* Return FALSE to force the caller to move on to try\n\t\t another file on the search path.  */\n\t      return FALSE;\n\t    }\n\n\t  /* But wait!  It gets much worse.  On Linux, if a shared\n\t     library does not use libc at all, we are supposed to skip\n\t     it the first time around in case we encounter a shared\n\t     library later on with the same name which does use the\n\t     version of libc that we want.  This is much too horrible\n\t     to use on any system other than Linux.  */\n\nEOF\ncase ${target} in\n  *-*-linux-* | *-*-k*bsd*-*)\n    fragment <<EOF\n\t  {\n\t    struct bfd_link_needed_list *l;\n\n\t    for (l = needed; l != NULL; l = l->next)\n\t      if (CONST_STRNEQ (l->name, \"libc.so\"))\n\t\tbreak;\n\t    if (l == NULL)\n\t      {\n\t\tbfd_close (abfd);\n\t\treturn FALSE;\n\t      }\n\t  }\n\nEOF\n    ;;\nesac\nfragment <<EOF\n\t}\n    }\n\n  /* We've found a dynamic object matching the DT_NEEDED entry.  */\n\n  /* We have already checked that there is no other input file of the\n     same name.  We must now check again that we are not including the\n     same file twice.  We need to do this because on many systems\n     libc.so is a symlink to, e.g., libc.so.1.  The SONAME entry will\n     reference libc.so.1.  If we have already included libc.so, we\n     don't want to include libc.so.1 if they are the same file, and we\n     can only check that using stat.  */\n\n  if (bfd_stat (abfd, &global_stat) != 0)\n    einfo (\"%F%P:%B: bfd_stat failed: %E\\n\", abfd);\n\n  /* First strip off everything before the last '/'.  */\n  soname = lbasename (abfd->filename);\n\n  if (trace_file_tries)\n    info_msg (_(\"found %s at %s\\n\"), soname, name);\n\n  global_found = NULL;\n  lang_for_each_input_file (gld${EMULATION_NAME}_stat_needed);\n  if (global_found != NULL)\n    {\n      /* Return TRUE to indicate that we found the file, even though\n\t we aren't going to do anything with it.  */\n      return TRUE;\n    }\n\n  /* Specify the soname to use.  */\n  bfd_elf_set_dt_needed_name (abfd, soname);\n\n  /* Tell the ELF linker that we don't want the output file to have a\n     DT_NEEDED entry for this file, unless it is used to resolve\n     references in a regular object.  */\n  link_class = DYN_DT_NEEDED;\n\n  /* Tell the ELF linker that we don't want the output file to have a\n     DT_NEEDED entry for this file at all if the entry is from a file\n     with DYN_NO_ADD_NEEDED.  */\n  if (needed->by != NULL\n      && (bfd_elf_get_dyn_lib_class (needed->by) & DYN_NO_ADD_NEEDED) != 0)\n    link_class |= DYN_NO_NEEDED | DYN_NO_ADD_NEEDED;\n\n  bfd_elf_set_dyn_lib_class (abfd, (enum dynamic_lib_link_class) link_class);\n\n  /* Add this file into the symbol table.  */\n  if (! bfd_link_add_symbols (abfd, &link_info))\n    einfo (\"%F%B: could not read symbols: %E\\n\", abfd);\n\n  return TRUE;\n}\n\n\n/* Search for a needed file in a path.  */\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_search_needed (const char *path,\n\t\t\t\t    struct dt_needed *n, int force)\n{\n  const char *s;\n  const char *name = n->name;\n  size_t len;\n  struct dt_needed needed;\n\n  if (name[0] == '/')\n    return gld${EMULATION_NAME}_try_needed (n, force);\n\n  if (path == NULL || *path == '\\0')\n    return FALSE;\n\n  needed.by = n->by;\n  needed.name = n->name;\n\n  len = strlen (name);\n  while (1)\n    {\n      char *filename, *sset;\n\n      s = strchr (path, config.rpath_separator);\n      if (s == NULL)\n\ts = path + strlen (path);\n\n      filename = (char *) xmalloc (s - path + len + 2);\n      if (s == path)\n\tsset = filename;\n      else\n\t{\n\t  memcpy (filename, path, s - path);\n\t  filename[s - path] = '/';\n\t  sset = filename + (s - path) + 1;\n\t}\n      strcpy (sset, name);\n\n      needed.name = filename;\n      if (gld${EMULATION_NAME}_try_needed (&needed, force))\n\treturn TRUE;\n\n      free (filename);\n\n      if (*s == '\\0')\n\tbreak;\n      path = s + 1;\n    }\n\n  return FALSE;\n}\n\nEOF\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\n  fragment <<EOF\n\n/* Add the sysroot to every entry in a path separated by\n   config.rpath_separator.  */\n\nstatic char *\ngld${EMULATION_NAME}_add_sysroot (const char *path)\n{\n  int len, colons, i;\n  char *ret, *p;\n\n  len = strlen (path);\n  colons = 0;\n  i = 0;\n  while (path[i])\n    if (path[i++] == config.rpath_separator)\n      colons++;\n\n  if (path[i])\n    colons++;\n\n  len = len + (colons + 1) * strlen (ld_sysroot);\n  ret = xmalloc (len + 1);\n  strcpy (ret, ld_sysroot);\n  p = ret + strlen (ret);\n  i = 0;\n  while (path[i])\n    if (path[i] == config.rpath_separator)\n      {\n\t*p++ = path[i++];\n\tstrcpy (p, ld_sysroot);\n\tp = p + strlen (p);\n      }\n    else\n      *p++ = path[i++];\n\n  *p = 0;\n  return ret;\n}\n\nEOF\n  case ${target} in\n    *-*-freebsd* | *-*-dragonfly*)\n      fragment <<EOF\n/* Read the system search path the FreeBSD way rather than the Linux way.  */\n#ifdef HAVE_ELF_HINTS_H\n#include <elf-hints.h>\n#else\n#include \"elf-hints-local.h\"\n#endif\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_check_ld_elf_hints (const char *name, int force)\n{\n  static bfd_boolean initialized;\n  static char *ld_elf_hints;\n  struct dt_needed needed;\n\n  if (!initialized)\n    {\n      FILE *f;\n      char *tmppath;\n\n      tmppath = concat (ld_sysroot, _PATH_ELF_HINTS, (const char *) NULL);\n      f = fopen (tmppath, FOPEN_RB);\n      free (tmppath);\n      if (f != NULL)\n\t{\n\t  struct elfhints_hdr hdr;\n\n\t  if (fread (&hdr, 1, sizeof (hdr), f) == sizeof (hdr)\n\t      && hdr.magic == ELFHINTS_MAGIC\n\t      && hdr.version == 1)\n\t    {\n\t      if (fseek (f, hdr.strtab + hdr.dirlist, SEEK_SET) != -1)\n\t\t{\n\t\t  char *b;\n\n\t\t  b = xmalloc (hdr.dirlistlen + 1);\n\t\t  if (fread (b, 1, hdr.dirlistlen + 1, f) ==\n\t\t      hdr.dirlistlen + 1)\n\t\t    ld_elf_hints = gld${EMULATION_NAME}_add_sysroot (b);\n\n\t\t  free (b);\n\t\t}\n\t    }\n\t  fclose (f);\n\t}\n\n      initialized = TRUE;\n    }\n\n  if (ld_elf_hints == NULL)\n    return FALSE;\n\n  needed.by = NULL;\n  needed.name = name;\n  return gld${EMULATION_NAME}_search_needed (ld_elf_hints, & needed,\n\t\t\t\t\t     force);\n}\nEOF\n    # FreeBSD\n    ;;\n\n    *-*-linux-* | *-*-k*bsd*-*)\n      fragment <<EOF\n/* For a native linker, check the file /etc/ld.so.conf for directories\n   in which we may find shared libraries.  /etc/ld.so.conf is really\n   only meaningful on Linux.  */\n\nstruct gld${EMULATION_NAME}_ld_so_conf\n{\n  char *path;\n  size_t len, alloc;\n};\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_parse_ld_so_conf\n     (struct gld${EMULATION_NAME}_ld_so_conf *info, const char *filename);\n\nstatic void\ngld${EMULATION_NAME}_parse_ld_so_conf_include\n     (struct gld${EMULATION_NAME}_ld_so_conf *info, const char *filename,\n      const char *pattern)\n{\n  char *newp = NULL;\n#ifdef HAVE_GLOB\n  glob_t gl;\n#endif\n\n  if (pattern[0] != '/')\n    {\n      char *p = strrchr (filename, '/');\n      size_t patlen = strlen (pattern) + 1;\n\n      newp = xmalloc (p - filename + 1 + patlen);\n      memcpy (newp, filename, p - filename + 1);\n      memcpy (newp + (p - filename + 1), pattern, patlen);\n      pattern = newp;\n    }\n\n#ifdef HAVE_GLOB\n  if (glob (pattern, 0, NULL, &gl) == 0)\n    {\n      size_t i;\n\n      for (i = 0; i < gl.gl_pathc; ++i)\n\tgld${EMULATION_NAME}_parse_ld_so_conf (info, gl.gl_pathv[i]);\n      globfree (&gl);\n    }\n#else\n  /* If we do not have glob, treat the pattern as a literal filename.  */\n  gld${EMULATION_NAME}_parse_ld_so_conf (info, pattern);\n#endif\n\n  if (newp)\n    free (newp);\n}\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_parse_ld_so_conf\n     (struct gld${EMULATION_NAME}_ld_so_conf *info, const char *filename)\n{\n  FILE *f = fopen (filename, FOPEN_RT);\n  char *line;\n  size_t linelen;\n\n  if (f == NULL)\n    return FALSE;\n\n  linelen = 256;\n  line = xmalloc (linelen);\n  do\n    {\n      char *p = line, *q;\n\n      /* Normally this would use getline(3), but we need to be portable.  */\n      while ((q = fgets (p, linelen - (p - line), f)) != NULL\n\t     && strlen (q) == linelen - (p - line) - 1\n\t     && line[linelen - 2] != '\\n')\n\t{\n\t  line = xrealloc (line, 2 * linelen);\n\t  p = line + linelen - 1;\n\t  linelen += linelen;\n\t}\n\n      if (q == NULL && p == line)\n\tbreak;\n\n      p = strchr (line, '\\n');\n      if (p)\n\t*p = '\\0';\n\n      /* Because the file format does not know any form of quoting we\n\t can search forward for the next '#' character and if found\n\t make it terminating the line.  */\n      p = strchr (line, '#');\n      if (p)\n\t*p = '\\0';\n\n      /* Remove leading whitespace.  NUL is no whitespace character.  */\n      p = line;\n      while (*p == ' ' || *p == '\\f' || *p == '\\r' || *p == '\\t' || *p == '\\v')\n\t++p;\n\n      /* If the line is blank it is ignored.  */\n      if (p[0] == '\\0')\n\tcontinue;\n\n      if (CONST_STRNEQ (p, \"include\") && (p[7] == ' ' || p[7] == '\\t'))\n\t{\n\t  char *dir, c;\n\t  p += 8;\n\t  do\n\t    {\n\t      while (*p == ' ' || *p == '\\t')\n\t\t++p;\n\n\t      if (*p == '\\0')\n\t\tbreak;\n\n\t      dir = p;\n\n\t      while (*p != ' ' && *p != '\\t' && *p)\n\t\t++p;\n\n\t      c = *p;\n\t      *p++ = '\\0';\n\t      if (dir[0] != '\\0')\n\t\tgld${EMULATION_NAME}_parse_ld_so_conf_include (info, filename,\n\t\t\t\t\t\t\t       dir);\n\t    }\n\t  while (c != '\\0');\n\t}\n      else\n\t{\n\t  char *dir = p;\n\t  while (*p && *p != '=' && *p != ' ' && *p != '\\t' && *p != '\\f'\n\t\t && *p != '\\r' && *p != '\\v')\n\t    ++p;\n\n\t  while (p != dir && p[-1] == '/')\n\t    --p;\n\t  if (info->path == NULL)\n\t    {\n\t      info->alloc = p - dir + 1 + 256;\n\t      info->path = xmalloc (info->alloc);\n\t      info->len = 0;\n\t    }\n\t  else\n\t    {\n\t      if (info->len + 1 + (p - dir) >= info->alloc)\n\t\t{\n\t\t  info->alloc += p - dir + 256;\n\t\t  info->path = xrealloc (info->path, info->alloc);\n\t\t}\n\t      info->path[info->len++] = config.rpath_separator;\n\t    }\n\t  memcpy (info->path + info->len, dir, p - dir);\n\t  info->len += p - dir;\n\t  info->path[info->len] = '\\0';\n\t}\n    }\n  while (! feof (f));\n  free (line);\n  fclose (f);\n  return TRUE;\n}\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_check_ld_so_conf (const char *name, int force)\n{\n  static bfd_boolean initialized;\n  static char *ld_so_conf;\n  struct dt_needed needed;\n\n  if (! initialized)\n    {\n      char *tmppath;\n      struct gld${EMULATION_NAME}_ld_so_conf info;\n\n      info.path = NULL;\n      info.len = info.alloc = 0;\n      tmppath = concat (ld_sysroot, \"${prefix}/etc/ld.so.conf\",\n\t\t\t(const char *) NULL);\n      if (!gld${EMULATION_NAME}_parse_ld_so_conf (&info, tmppath))\n\t{\n\t  free (tmppath);\n\t  tmppath = concat (ld_sysroot, \"/etc/ld.so.conf\",\n\t\t\t    (const char *) NULL);\n\t  gld${EMULATION_NAME}_parse_ld_so_conf (&info, tmppath);\n\t}\n      free (tmppath);\n\n      if (info.path)\n\t{\n\t  char *d = gld${EMULATION_NAME}_add_sysroot (info.path);\n\t  free (info.path);\n\t  ld_so_conf = d;\n\t}\n      initialized = TRUE;\n    }\n\n  if (ld_so_conf == NULL)\n    return FALSE;\n\n\n  needed.by = NULL;\n  needed.name = name;\n  return gld${EMULATION_NAME}_search_needed (ld_so_conf, &needed, force);\n}\n\nEOF\n    # Linux\n    ;;\n  esac\nfi\nfragment <<EOF\n\n/* See if an input file matches a DT_NEEDED entry by name.  */\n\nstatic void\ngld${EMULATION_NAME}_check_needed (lang_input_statement_type *s)\n{\n  const char *soname;\n\n  /* Stop looking if we've found a loaded lib.  */\n  if (global_found != NULL\n      && (bfd_elf_get_dyn_lib_class (global_found->the_bfd)\n\t  & DYN_AS_NEEDED) == 0)\n    return;\n\n  if (s->filename == NULL || s->the_bfd == NULL)\n    return;\n\n  /* Don't look for a second non-loaded as-needed lib.  */\n  if (global_found != NULL\n      && (bfd_elf_get_dyn_lib_class (s->the_bfd) & DYN_AS_NEEDED) != 0)\n    return;\n\n  if (strcmp (s->filename, global_needed->name) == 0)\n    {\n      global_found = s;\n      return;\n    }\n\n  if (s->search_dirs_flag)\n    {\n      const char *f = strrchr (s->filename, '/');\n      if (f != NULL\n\t  && strcmp (f + 1, global_needed->name) == 0)\n\t{\n\t  global_found = s;\n\t  return;\n\t}\n    }\n\n  soname = bfd_elf_get_dt_soname (s->the_bfd);\n  if (soname != NULL\n      && strcmp (soname, global_needed->name) == 0)\n    {\n      global_found = s;\n      return;\n    }\n}\n\nEOF\n\nif test x\"$LDEMUL_AFTER_OPEN\" != xgld\"$EMULATION_NAME\"_after_open; then\nfragment <<EOF\n\nstatic bfd_size_type\ngld${EMULATION_NAME}_id_note_section_size (bfd *abfd,\n\t\t\t\t\t   struct bfd_link_info *link_info)\n{\n  const char *style = link_info->emit_note_gnu_build_id;\n  bfd_size_type size;\n\n  abfd = abfd;\n\n  size = offsetof (Elf_External_Note, name[sizeof \"GNU\"]);\n  size = (size + 3) & -(bfd_size_type) 4;\n\n  if (!strcmp (style, \"md5\") || !strcmp (style, \"uuid\"))\n    size += 128 / 8;\n  else if (!strcmp (style, \"sha1\"))\n    size += 160 / 8;\n  else if (!strncmp (style, \"0x\", 2))\n    {\n      /* ID is in string form (hex).  Convert to bits.  */\n      const char *id = style + 2;\n      do\n\t{\n\t  if (ISXDIGIT (id[0]) && ISXDIGIT (id[1]))\n\t    {\n\t      ++size;\n\t      id += 2;\n\t    }\n\t  else if (*id == '-' || *id == ':')\n\t    ++id;\n\t  else\n\t    {\n\t      size = 0;\n\t      break;\n\t    }\n\t} while (*id != '\\0');\n    }\n  else\n    size = 0;\n\n  return size;\n}\n\nstatic unsigned char\nread_hex (const char xdigit)\n{\n  if (ISDIGIT (xdigit))\n    return xdigit - '0';\n  if (ISUPPER (xdigit))\n    return xdigit - 'A' + 0xa;\n  if (ISLOWER (xdigit))\n    return xdigit - 'a' + 0xa;\n  abort ();\n  return 0;\n}\n\nstruct build_id_info\n{\n  const char *style;\n  asection *sec;\n};\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_write_build_id_section (bfd *abfd)\n{\n  const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n  struct build_id_info *info = (struct build_id_info *)\n    elf_tdata (abfd)->after_write_object_contents_info;\n  asection *asec;\n  Elf_Internal_Shdr *i_shdr;\n  unsigned char *contents, *id_bits;\n  bfd_size_type size;\n  Elf_External_Note *e_note;\n\n  asec = info->sec;\n  if (bfd_is_abs_section (asec->output_section))\n    {\n      einfo (_(\"%P: warning: .note.gnu.build-id section discarded,\"\n\t       \" --build-id ignored.\\n\"));\n      return TRUE;\n    }\n  i_shdr = &elf_section_data (asec->output_section)->this_hdr;\n\n  if (i_shdr->contents == NULL)\n    {\n      if (asec->contents == NULL)\n\tasec->contents = (unsigned char *) xmalloc (asec->size);\n      contents = asec->contents;\n    }\n  else\n    contents = i_shdr->contents + asec->output_offset;\n\n  e_note = (Elf_External_Note *) contents;\n  size = offsetof (Elf_External_Note, name[sizeof \"GNU\"]);\n  size = (size + 3) & -(bfd_size_type) 4;\n  id_bits = contents + size;\n  size = asec->size - size;\n\n  bfd_h_put_32 (abfd, sizeof \"GNU\", &e_note->namesz);\n  bfd_h_put_32 (abfd, size, &e_note->descsz);\n  bfd_h_put_32 (abfd, NT_GNU_BUILD_ID, &e_note->type);\n  memcpy (e_note->name, \"GNU\", sizeof \"GNU\");\n\n  if (!strcmp (info->style, \"md5\"))\n    {\n      struct md5_ctx ctx;\n      md5_init_ctx (&ctx);\n      if (bed->s->checksum_contents (abfd,\n\t\t\t\t     (void (*) (const void *, size_t, void *))\n\t\t\t\t     &md5_process_bytes,\n\t\t\t\t     &ctx))\n\tmd5_finish_ctx (&ctx, id_bits);\n      else\n\treturn FALSE;\n    }\n  else if (!strcmp (info->style, \"sha1\"))\n    {\n      struct sha1_ctx ctx;\n      sha1_init_ctx (&ctx);\n      if (bed->s->checksum_contents (abfd,\n\t\t\t\t     (void (*) (const void *, size_t, void *))\n\t\t\t\t     &sha1_process_bytes,\n\t\t\t\t     &ctx))\n\tsha1_finish_ctx (&ctx, id_bits);\n      else\n\treturn FALSE;\n    }\n  else if (!strcmp (info->style, \"uuid\"))\n    {\n      int n;\n      int fd = open (\"/dev/urandom\", O_RDONLY);\n      if (fd < 0)\n\treturn FALSE;\n      n = read (fd, id_bits, size);\n      close (fd);\n      if (n < (int) size)\n\treturn FALSE;\n    }\n  else if (!strncmp (info->style, \"0x\", 2))\n    {\n      /* ID is in string form (hex).  Convert to bits.  */\n      const char *id = info->style + 2;\n      size_t n = 0;\n      do\n\t{\n\t  if (ISXDIGIT (id[0]) && ISXDIGIT (id[1]))\n\t    {\n\t      id_bits[n] = read_hex (*id++) << 4;\n\t      id_bits[n++] |= read_hex (*id++);\n\t    }\n\t  else if (*id == '-' || *id == ':')\n\t    ++id;\n\t  else\n\t    abort ();\t\t/* Should have been validated earlier.  */\n\t} while (*id != '\\0');\n    }\n  else\n    abort ();\t\t\t/* Should have been validated earlier.  */\n\n  size = asec->size;\n  return (bfd_seek (abfd,\n\t\t    i_shdr->sh_offset + asec->output_offset, SEEK_SET) == 0\n\t  && bfd_bwrite (contents, size, abfd) == size);\n}\n\n\n/* This is called after all the input files have been opened.  */\n\nstatic void\ngld${EMULATION_NAME}_after_open (void)\n{\n  struct bfd_link_needed_list *needed, *l;\n  struct elf_link_hash_table *htab;\n\n  htab = elf_hash_table (&link_info);\n  if (!is_elf_hash_table (htab))\n    return;\n\n  if (link_info.emit_note_gnu_build_id)\n    {\n      bfd *abfd;\n      asection *s;\n      bfd_size_type size;\n\n      abfd = link_info.input_bfds;\n\n      if (abfd == NULL)\n\t{\n\t  /* PR 10555: If there are no input files do not\n\t     try to create a .note.gnu-build-id section.  */\n\t  free (link_info.emit_note_gnu_build_id);\n\t  link_info.emit_note_gnu_build_id = NULL;\n\t}\n      else\n\t{\n\t  size = gld${EMULATION_NAME}_id_note_section_size (abfd, &link_info);\n\t  if (size == 0)\n\t    {\n\t      einfo (\"%P: warning: unrecognized --build-id style ignored.\\n\");\n\t      free (link_info.emit_note_gnu_build_id);\n\t      link_info.emit_note_gnu_build_id = NULL;\n\t    }\n\t  else\n\t    {\n\t      s = bfd_make_section_with_flags (abfd, \".note.gnu.build-id\",\n\t\t\t\t\t       SEC_ALLOC | SEC_LOAD\n\t\t\t\t\t       | SEC_IN_MEMORY | SEC_LINKER_CREATED\n\t\t\t\t\t       | SEC_READONLY | SEC_DATA);\n\t      if (s != NULL && bfd_set_section_alignment (abfd, s, 2))\n\t\t{\n\t\t  struct elf_obj_tdata *t = elf_tdata (link_info.output_bfd);\n\t\t  struct build_id_info *b =\n                      (struct build_id_info *) xmalloc (sizeof *b);\n\n\t\t  b->style = link_info.emit_note_gnu_build_id;\n\t\t  b->sec = s;\n\t\t  elf_section_type (s) = SHT_NOTE;\n\t\t  s->size = size;\n\t\t  t->after_write_object_contents\n\t\t    = &gld${EMULATION_NAME}_write_build_id_section;\n\t\t  t->after_write_object_contents_info = b;\n\t\t}\n\t      else\n\t\t{\n\t\t  einfo (\"%P: warning: Cannot create .note.gnu.build-id section,\"\n\t\t\t \" --build-id ignored.\\n\");\n\t\t  free (link_info.emit_note_gnu_build_id);\n\t\t  link_info.emit_note_gnu_build_id = NULL;\n\t\t}\n\t    }\n\t}\n    }\n\n  if (link_info.relocatable)\n    return;\n\n  if (link_info.eh_frame_hdr\n      && !link_info.traditional_format)\n    {\n      bfd *abfd;\n      asection *s;\n\n      for (abfd = link_info.input_bfds; abfd; abfd = abfd->link_next)\n\t{\n\t  s = bfd_get_section_by_name (abfd, \".eh_frame\");\n\t  if (s && s->size > 8 && !bfd_is_abs_section (s->output_section))\n\t    break;\n\t}\n      if (abfd)\n\t{\n\t  const struct elf_backend_data *bed;\n\n\t  bed = get_elf_backend_data (abfd);\n\t  s = bfd_make_section_with_flags (abfd, \".eh_frame_hdr\",\n\t\t\t\t\t   bed->dynamic_sec_flags\n\t\t\t\t\t   | SEC_READONLY);\n\t  if (s != NULL\n\t      && bfd_set_section_alignment (abfd, s, 2))\n\t    htab->eh_info.hdr_sec = s;\n\t  else\n\t    einfo (\"%P: warning: Cannot create .eh_frame_hdr section,\"\n\t\t   \" --eh-frame-hdr ignored.\\n\");\n\t}\n    }\n\n  /* Get the list of files which appear in DT_NEEDED entries in\n     dynamic objects included in the link (often there will be none).\n     For each such file, we want to track down the corresponding\n     library, and include the symbol table in the link.  This is what\n     the runtime dynamic linker will do.  Tracking the files down here\n     permits one dynamic object to include another without requiring\n     special action by the person doing the link.  Note that the\n     needed list can actually grow while we are stepping through this\n     loop.  */\n  if (!link_info.executable)\n    return;\n  needed = bfd_elf_get_needed_list (link_info.output_bfd, &link_info);\n  for (l = needed; l != NULL; l = l->next)\n    {\n      struct bfd_link_needed_list *ll;\n      struct dt_needed n, nn;\n      int force;\n\n      /* If the lib that needs this one was --as-needed and wasn't\n\t found to be needed, then this lib isn't needed either.  */\n      if (l->by != NULL\n\t  && (bfd_elf_get_dyn_lib_class (l->by) & DYN_AS_NEEDED) != 0)\n\tcontinue;\n\n      /* If we've already seen this file, skip it.  */\n      for (ll = needed; ll != l; ll = ll->next)\n\tif ((ll->by == NULL\n\t     || (bfd_elf_get_dyn_lib_class (ll->by) & DYN_AS_NEEDED) == 0)\n\t    && strcmp (ll->name, l->name) == 0)\n\t  break;\n      if (ll != l)\n\tcontinue;\n\n      /* See if this file was included in the link explicitly.  */\n      global_needed = l;\n      global_found = NULL;\n      lang_for_each_input_file (gld${EMULATION_NAME}_check_needed);\n      if (global_found != NULL\n\t  && (bfd_elf_get_dyn_lib_class (global_found->the_bfd)\n\t      & DYN_AS_NEEDED) == 0)\n\tcontinue;\n\n      n.by = l->by;\n      n.name = l->name;\n      nn.by = l->by;\n      if (trace_file_tries)\n\tinfo_msg (_(\"%s needed by %B\\n\"), l->name, l->by);\n\n      /* As-needed libs specified on the command line (or linker script)\n\t take priority over libs found in search dirs.  */\n      if (global_found != NULL)\n\t{\n\t  nn.name = global_found->filename;\n\t  if (gld${EMULATION_NAME}_try_needed (&nn, TRUE))\n\t    continue;\n\t}\n\n      /* We need to find this file and include the symbol table.  We\n\t want to search for the file in the same way that the dynamic\n\t linker will search.  That means that we want to use\n\t rpath_link, rpath, then the environment variable\n\t LD_LIBRARY_PATH (native only), then the DT_RPATH/DT_RUNPATH\n\t entries (native only), then the linker script LIB_SEARCH_DIRS.\n\t We do not search using the -L arguments.\n\n\t We search twice.  The first time, we skip objects which may\n\t introduce version mismatches.  The second time, we force\n\t their use.  See gld${EMULATION_NAME}_vercheck comment.  */\n      for (force = 0; force < 2; force++)\n\t{\n\t  size_t len;\n\t  search_dirs_type *search;\nEOF\nif [ \"x${NATIVE}\" = xyes ] ; then\nfragment <<EOF\n\t  const char *lib_path;\nEOF\nfi\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\nfragment <<EOF\n\t  struct bfd_link_needed_list *rp;\n\t  int found;\nEOF\nfi\nfragment <<EOF\n\n\t  if (gld${EMULATION_NAME}_search_needed (command_line.rpath_link,\n\t\t\t\t\t\t  &n, force))\n\t    break;\nEOF\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\nfragment <<EOF\n\t  if (gld${EMULATION_NAME}_search_needed (command_line.rpath,\n\t\t\t\t\t\t  &n, force))\n\t    break;\nEOF\nfi\nif [ \"x${NATIVE}\" = xyes ] ; then\nfragment <<EOF\n\t  if (command_line.rpath_link == NULL\n\t      && command_line.rpath == NULL)\n\t    {\n\t      lib_path = (const char *) getenv (\"LD_RUN_PATH\");\n\t      if (gld${EMULATION_NAME}_search_needed (lib_path, &n,\n\t\t\t\t\t\t      force))\n\t\tbreak;\n\t    }\n\t  lib_path = (const char *) getenv (\"LD_LIBRARY_PATH\");\n\t  if (gld${EMULATION_NAME}_search_needed (lib_path, &n, force))\n\t    break;\nEOF\nfi\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\nfragment <<EOF\n\t  found = 0;\n\t  rp = bfd_elf_get_runpath_list (link_info.output_bfd, &link_info);\n\t  for (; !found && rp != NULL; rp = rp->next)\n\t    {\n\t      char *tmpname = gld${EMULATION_NAME}_add_sysroot (rp->name);\n\t      found = (rp->by == l->by\n\t\t       && gld${EMULATION_NAME}_search_needed (tmpname,\n\t\t\t\t\t\t\t      &n,\n\t\t\t\t\t\t\t      force));\n\t      free (tmpname);\n\t    }\n\t  if (found)\n\t    break;\n\nEOF\nfi\nif [ \"x${USE_LIBPATH}\" = xyes ] ; then\n  case ${target} in\n    *-*-freebsd* | *-*-dragonfly*)\n      fragment <<EOF\n\t  if (gld${EMULATION_NAME}_check_ld_elf_hints (l->name, force))\n\t    break;\nEOF\n    # FreeBSD\n    ;;\n\n    *-*-linux-* | *-*-k*bsd*-*)\n    # Linux\n      fragment <<EOF\n\t  if (gld${EMULATION_NAME}_check_ld_so_conf (l->name, force))\n\t    break;\n\nEOF\n    ;;\n  esac\nfi\nfragment <<EOF\n\t  len = strlen (l->name);\n\t  for (search = search_head; search != NULL; search = search->next)\n\t    {\n\t      char *filename;\n\n\t      if (search->cmdline)\n\t\tcontinue;\n\t      filename = (char *) xmalloc (strlen (search->name) + len + 2);\n\t      sprintf (filename, \"%s/%s\", search->name, l->name);\n\t      nn.name = filename;\n\t      if (gld${EMULATION_NAME}_try_needed (&nn, force))\n\t\tbreak;\n\t      free (filename);\n\t    }\n\t  if (search != NULL)\n\t    break;\nEOF\nfragment <<EOF\n\t}\n\n      if (force < 2)\n\tcontinue;\n\n      einfo (\"%P: warning: %s, needed by %B, not found (try using -rpath or -rpath-link)\\n\",\n\t     l->name, l->by);\n    }\n}\n\nEOF\nfi\n\nfragment <<EOF\n\n/* Look through an expression for an assignment statement.  */\n\nstatic void\ngld${EMULATION_NAME}_find_exp_assignment (etree_type *exp)\n{\n  bfd_boolean provide = FALSE;\n\n  switch (exp->type.node_class)\n    {\n    case etree_provide:\n      provide = TRUE;\n      /* Fall thru */\n    case etree_assign:\n      /* We call record_link_assignment even if the symbol is defined.\n\t This is because if it is defined by a dynamic object, we\n\t actually want to use the value defined by the linker script,\n\t not the value from the dynamic object (because we are setting\n\t symbols like etext).  If the symbol is defined by a regular\n\t object, then, as it happens, calling record_link_assignment\n\t will do no harm.  */\n      if (strcmp (exp->assign.dst, \".\") != 0)\n\t{\n\t  if (!bfd_elf_record_link_assignment (link_info.output_bfd,\n\t\t\t\t\t       &link_info,\n\t\t\t\t\t       exp->assign.dst, provide,\n\t\t\t\t\t       exp->assign.hidden))\n\t    einfo (\"%P%F: failed to record assignment to %s: %E\\n\",\n\t\t   exp->assign.dst);\n\t}\n      gld${EMULATION_NAME}_find_exp_assignment (exp->assign.src);\n      break;\n\n    case etree_binary:\n      gld${EMULATION_NAME}_find_exp_assignment (exp->binary.lhs);\n      gld${EMULATION_NAME}_find_exp_assignment (exp->binary.rhs);\n      break;\n\n    case etree_trinary:\n      gld${EMULATION_NAME}_find_exp_assignment (exp->trinary.cond);\n      gld${EMULATION_NAME}_find_exp_assignment (exp->trinary.lhs);\n      gld${EMULATION_NAME}_find_exp_assignment (exp->trinary.rhs);\n      break;\n\n    case etree_unary:\n      gld${EMULATION_NAME}_find_exp_assignment (exp->unary.child);\n      break;\n\n    default:\n      break;\n    }\n}\n\n\n/* This is called by the before_allocation routine via\n   lang_for_each_statement.  It locates any assignment statements, and\n   tells the ELF backend about them, in case they are assignments to\n   symbols which are referred to by dynamic objects.  */\n\nstatic void\ngld${EMULATION_NAME}_find_statement_assignment (lang_statement_union_type *s)\n{\n  if (s->header.type == lang_assignment_statement_enum)\n    gld${EMULATION_NAME}_find_exp_assignment (s->assignment_statement.exp);\n}\n\nEOF\n\nif test x\"$LDEMUL_BEFORE_ALLOCATION\" != xgld\"$EMULATION_NAME\"_before_allocation; then\n  if test x\"${ELF_INTERPRETER_NAME+set}\" = xset; then\n    ELF_INTERPRETER_SET_DEFAULT=\"\n  if (sinterp != NULL)\n    {\n      sinterp->contents = (unsigned char *) ${ELF_INTERPRETER_NAME};\n      sinterp->size = strlen ((char *) sinterp->contents) + 1;\n    }\n\n\"\n  else\n    ELF_INTERPRETER_SET_DEFAULT=\n  fi\nfragment <<EOF\n\n/* This is called after the sections have been attached to output\n   sections, but before any sizes or addresses have been set.  */\n\nstatic void\ngld${EMULATION_NAME}_before_allocation (void)\n{\n  const char *rpath;\n  asection *sinterp;\n\n  if (link_info.hash->type == bfd_link_elf_hash_table)\n    _bfd_elf_tls_setup (link_info.output_bfd, &link_info);\n\n  /* If we are going to make any variable assignments, we need to let\n     the ELF backend know about them in case the variables are\n     referred to by dynamic objects.  */\n  lang_for_each_statement (gld${EMULATION_NAME}_find_statement_assignment);\n\n  /* Let the ELF backend work out the sizes of any sections required\n     by dynamic linking.  */\n  rpath = command_line.rpath;\n  if (rpath == NULL)\n    rpath = (const char *) getenv (\"LD_RUN_PATH\");\n  if (! (bfd_elf_size_dynamic_sections\n\t (link_info.output_bfd, command_line.soname, rpath,\n\t  command_line.filter_shlib,\n\t  (const char * const *) command_line.auxiliary_filters,\n\t  &link_info, &sinterp, lang_elf_version_info)))\n    einfo (\"%P%F: failed to set dynamic section sizes: %E\\n\");\n\n${ELF_INTERPRETER_SET_DEFAULT}\n  /* Let the user override the dynamic linker we are using.  */\n  if (command_line.interpreter != NULL\n      && sinterp != NULL)\n    {\n      sinterp->contents = (bfd_byte *) command_line.interpreter;\n      sinterp->size = strlen (command_line.interpreter) + 1;\n    }\n\n  /* Look for any sections named .gnu.warning.  As a GNU extensions,\n     we treat such sections as containing warning messages.  We print\n     out the warning message, and then zero out the section size so\n     that it does not get copied into the output file.  */\n\n  {\n    LANG_FOR_EACH_INPUT_STATEMENT (is)\n      {\n\tasection *s;\n\tbfd_size_type sz;\n\tchar *msg;\n\tbfd_boolean ret;\n\n\tif (is->just_syms_flag)\n\t  continue;\n\n\ts = bfd_get_section_by_name (is->the_bfd, \".gnu.warning\");\n\tif (s == NULL)\n\t  continue;\n\n\tsz = s->size;\n\tmsg = (char *) xmalloc ((size_t) (sz + 1));\n\tif (! bfd_get_section_contents (is->the_bfd, s,\tmsg,\n\t\t\t\t\t(file_ptr) 0, sz))\n\t  einfo (\"%F%B: Can't read contents of section .gnu.warning: %E\\n\",\n\t\t is->the_bfd);\n\tmsg[sz] = '\\0';\n\tret = link_info.callbacks->warning (&link_info, msg,\n\t\t\t\t\t    (const char *) NULL,\n\t\t\t\t\t    is->the_bfd, (asection *) NULL,\n\t\t\t\t\t    (bfd_vma) 0);\n\tASSERT (ret);\n\tfree (msg);\n\n\t/* Clobber the section size, so that we don't waste space\n\t   copying the warning into the output file.  If we've already\n\t   sized the output section, adjust its size.  The adjustment\n\t   is on rawsize because targets that size sections early will\n\t   have called lang_reset_memory_regions after sizing.  */\n\tif (s->output_section != NULL\n\t    && s->output_section->rawsize >= s->size)\n\t  s->output_section->rawsize -= s->size;\n\n\ts->size = 0;\n\n\t/* Also set SEC_EXCLUDE, so that local symbols defined in the\n\t   warning section don't get copied to the output.  */\n\ts->flags |= SEC_EXCLUDE | SEC_KEEP;\n      }\n  }\n\n  before_allocation_default ();\n\n  if (!bfd_elf_size_dynsym_hash_dynstr (link_info.output_bfd, &link_info))\n    einfo (\"%P%F: failed to set dynamic section sizes: %E\\n\");\n}\n\nEOF\nfi\n\nif test x\"$LDEMUL_OPEN_DYNAMIC_ARCHIVE\" != xgld\"$EMULATION_NAME\"_open_dynamic_archive; then\nfragment <<EOF\n\n/* Try to open a dynamic archive.  This is where we know that ELF\n   dynamic libraries have an extension of .so (or .sl on oddball systems\n   like hpux).  */\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_open_dynamic_archive\n  (const char *arch, search_dirs_type *search, lang_input_statement_type *entry)\n{\n  const char *filename;\n  char *string;\n\n  if (! entry->is_archive)\n    return FALSE;\n\n  filename = entry->filename;\n\n  /* This allocates a few bytes too many when EXTRA_SHLIB_EXTENSION\n     is defined, but it does not seem worth the headache to optimize\n     away those two bytes of space.  */\n  string = (char *) xmalloc (strlen (search->name)\n\t\t\t     + strlen (filename)\n\t\t\t     + strlen (arch)\n#ifdef EXTRA_SHLIB_EXTENSION\n\t\t\t     + strlen (EXTRA_SHLIB_EXTENSION)\n#endif\n\t\t\t     + sizeof \"/lib.so\");\n\n  sprintf (string, \"%s/lib%s%s.so\", search->name, filename, arch);\n\n#ifdef EXTRA_SHLIB_EXTENSION\n  /* Try the .so extension first.  If that fails build a new filename\n     using EXTRA_SHLIB_EXTENSION.  */\n  if (! ldfile_try_open_bfd (string, entry))\n    {\n      sprintf (string, \"%s/lib%s%s%s\", search->name,\n\t       filename, arch, EXTRA_SHLIB_EXTENSION);\n#endif\n\n  if (! ldfile_try_open_bfd (string, entry))\n    {\n      free (string);\n      return FALSE;\n    }\n#ifdef EXTRA_SHLIB_EXTENSION\n    }\n#endif\n\n  entry->filename = string;\n\n  /* We have found a dynamic object to include in the link.  The ELF\n     backend linker will create a DT_NEEDED entry in the .dynamic\n     section naming this file.  If this file includes a DT_SONAME\n     entry, it will be used.  Otherwise, the ELF linker will just use\n     the name of the file.  For an archive found by searching, like\n     this one, the DT_NEEDED entry should consist of just the name of\n     the file, without the path information used to find it.  Note\n     that we only need to do this if we have a dynamic object; an\n     archive will never be referenced by a DT_NEEDED entry.\n\n     FIXME: This approach--using bfd_elf_set_dt_needed_name--is not\n     very pretty.  I haven't been able to think of anything that is\n     pretty, though.  */\n  if (bfd_check_format (entry->the_bfd, bfd_object)\n      && (entry->the_bfd->flags & DYNAMIC) != 0)\n    {\n      ASSERT (entry->is_archive && entry->search_dirs_flag);\n\n      /* Rather than duplicating the logic above.  Just use the\n\t filename we recorded earlier.  */\n\n      filename = lbasename (entry->filename);\n      bfd_elf_set_dt_needed_name (entry->the_bfd, filename);\n    }\n\n  return TRUE;\n}\n\nEOF\nfi\n\nif test x\"$LDEMUL_PLACE_ORPHAN\" != xgld\"$EMULATION_NAME\"_place_orphan; then\nfragment <<EOF\n\n/* A variant of lang_output_section_find used by place_orphan.  */\n\nstatic lang_output_section_statement_type *\noutput_rel_find (asection *sec, int isdyn)\n{\n  lang_output_section_statement_type *lookup;\n  lang_output_section_statement_type *last = NULL;\n  lang_output_section_statement_type *last_alloc = NULL;\n  lang_output_section_statement_type *last_ro_alloc = NULL;\n  lang_output_section_statement_type *last_rel = NULL;\n  lang_output_section_statement_type *last_rel_alloc = NULL;\n  int rela = sec->name[4] == 'a';\n\n  for (lookup = &lang_output_section_statement.head->output_section_statement;\n       lookup != NULL;\n       lookup = lookup->next)\n    {\n      if (lookup->constraint >= 0\n\t  && CONST_STRNEQ (lookup->name, \".rel\"))\n\t{\n\t  int lookrela = lookup->name[4] == 'a';\n\n\t  /* .rel.dyn must come before all other reloc sections, to suit\n\t     GNU ld.so.  */\n\t  if (isdyn)\n\t    break;\n\n\t  /* Don't place after .rel.plt as doing so results in wrong\n\t     dynamic tags.  */\n\t  if (strcmp (\".plt\", lookup->name + 4 + lookrela) == 0)\n\t    break;\n\n\t  if (rela == lookrela || last_rel == NULL)\n\t    last_rel = lookup;\n\t  if ((rela == lookrela || last_rel_alloc == NULL)\n\t      && lookup->bfd_section != NULL\n\t      && (lookup->bfd_section->flags & SEC_ALLOC) != 0)\n\t    last_rel_alloc = lookup;\n\t}\n\n      last = lookup;\n      if (lookup->bfd_section != NULL\n\t  && (lookup->bfd_section->flags & SEC_ALLOC) != 0)\n\t{\n\t  last_alloc = lookup;\n\t  if ((lookup->bfd_section->flags & SEC_READONLY) != 0)\n\t    last_ro_alloc = lookup;\n\t}\n    }\n\n  if (last_rel_alloc)\n    return last_rel_alloc;\n\n  if (last_rel)\n    return last_rel;\n\n  if (last_ro_alloc)\n    return last_ro_alloc;\n\n  if (last_alloc)\n    return last_alloc;\n\n  return last;\n}\n\n/* Place an orphan section.  We use this to put random SHF_ALLOC\n   sections in the right segment.  */\n\nstatic lang_output_section_statement_type *\ngld${EMULATION_NAME}_place_orphan (asection *s,\n\t\t\t\t   const char *secname,\n\t\t\t\t   int constraint)\n{\n  static struct orphan_save hold[] =\n    {\n      { \".text\",\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_CODE,\n\t0, 0, 0, 0 },\n      { \".rodata\",\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,\n\t0, 0, 0, 0 },\n      { \".data\",\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_DATA,\n\t0, 0, 0, 0 },\n      { \".bss\",\n\tSEC_ALLOC,\n\t0, 0, 0, 0 },\n      { 0,\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,\n\t0, 0, 0, 0 },\n      { \".interp\",\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,\n\t0, 0, 0, 0 },\n      { \".sdata\",\n\tSEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_DATA | SEC_SMALL_DATA,\n\t0, 0, 0, 0 },\n      { 0,\n\tSEC_HAS_CONTENTS,\n\t0, 0, 0, 0 },\n    };\n  enum orphan_save_index\n    {\n      orphan_text = 0,\n      orphan_rodata,\n      orphan_data,\n      orphan_bss,\n      orphan_rel,\n      orphan_interp,\n      orphan_sdata,\n      orphan_nonalloc\n    };\n  static int orphan_init_done = 0;\n  struct orphan_save *place;\n  lang_output_section_statement_type *after;\n  lang_output_section_statement_type *os;\n  int isdyn = 0;\n  int iself = s->owner->xvec->flavour == bfd_target_elf_flavour;\n  unsigned int sh_type = iself ? elf_section_type (s) : SHT_NULL;\n\n  if (! link_info.relocatable\n      && link_info.combreloc\n      && (s->flags & SEC_ALLOC))\n    {\n      if (iself)\n\tswitch (sh_type)\n\t  {\n\t  case SHT_RELA:\n\t    secname = \".rela.dyn\";\n\t    isdyn = 1;\n\t    break;\n\t  case SHT_REL:\n\t    secname = \".rel.dyn\";\n\t    isdyn = 1;\n\t    break;\n\t  default:\n\t    break;\n\t  }\n      else if (CONST_STRNEQ (secname, \".rel\"))\n\t{\n\t  secname = secname[4] == 'a' ? \".rela.dyn\" : \".rel.dyn\";\n\t  isdyn = 1;\n\t}\n    }\n\n  /* Look through the script to see where to place this section.  */\n  if (constraint == 0)\n    for (os = lang_output_section_find (secname);\n\t os != NULL;\n\t os = next_matching_output_section_statement (os, 0))\n      {\n\t/* If we don't match an existing output section, tell\n\t   lang_insert_orphan to create a new output section.  */\n\tconstraint = SPECIAL;\n\n\tif (os->bfd_section != NULL\n\t    && (os->bfd_section->flags == 0\n\t\t|| (_bfd_elf_match_sections_by_type (link_info.output_bfd,\n\t\t\t\t\t\t     os->bfd_section,\n\t\t\t\t\t\t     s->owner, s)\n\t\t    && ((s->flags ^ os->bfd_section->flags)\n\t\t\t& (SEC_LOAD | SEC_ALLOC)) == 0)))\n\t  {\n\t    /* We already have an output section statement with this\n\t       name, and its bfd section has compatible flags.\n\t       If the section already exists but does not have any flags\n\t       set, then it has been created by the linker, probably as a\n\t       result of a --section-start command line switch.  */\n\t    lang_add_section (&os->children, s, os);\n\t    return os;\n\t  }\n      }\n\n  if (!orphan_init_done)\n    {\n      lang_output_section_statement_type *lookup;\n      struct orphan_save *ho;\n\n      for (ho = hold; ho < hold + sizeof (hold) / sizeof (hold[0]); ++ho)\n\tif (ho->name != NULL)\n\t  {\n\t    ho->os = lang_output_section_find (ho->name);\n\t    if (ho->os != NULL && ho->os->flags == 0)\n\t      ho->os->flags = ho->flags;\n\t  }\n      lookup = hold[orphan_bss].os;\n      if (lookup == NULL)\n\tlookup = &lang_output_section_statement.head->output_section_statement;\n      for (; lookup != NULL; lookup = lookup->next)\n\tif ((lookup->bfd_section != NULL\n\t     && (lookup->bfd_section->flags & SEC_DEBUGGING) != 0)\n\t    || strcmp (lookup->name, \".comment\") == 0)\n\t  break;\n      hold[orphan_nonalloc].os = lookup ? lookup->prev : NULL;\n      hold[orphan_nonalloc].name = \".comment\";\n      orphan_init_done = 1;\n    }\n\n  /* If this is a final link, then always put .gnu.warning.SYMBOL\n     sections into the .text section to get them out of the way.  */\n  if (link_info.executable\n      && ! link_info.relocatable\n      && CONST_STRNEQ (s->name, \".gnu.warning.\")\n      && hold[orphan_text].os != NULL)\n    {\n      os = hold[orphan_text].os;\n      lang_add_section (&os->children, s, os);\n      return os;\n    }\n\n  /* Decide which segment the section should go in based on the\n     section name and section flags.  We put loadable .note sections\n     right after the .interp section, so that the PT_NOTE segment is\n     stored right after the program headers where the OS can read it\n     in the first page.  */\n\n  place = NULL;\n  if ((s->flags & (SEC_ALLOC | SEC_DEBUGGING)) == 0)\n    place = &hold[orphan_nonalloc];\n  else if ((s->flags & SEC_ALLOC) == 0)\n    ;\n  else if ((s->flags & SEC_LOAD) != 0\n\t   && ((iself && sh_type == SHT_NOTE)\n\t       || (!iself && CONST_STRNEQ (secname, \".note\"))))\n    place = &hold[orphan_interp];\n  else if ((s->flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)\n    place = &hold[orphan_bss];\n  else if ((s->flags & SEC_SMALL_DATA) != 0)\n    place = &hold[orphan_sdata];\n  else if ((s->flags & SEC_READONLY) == 0)\n    place = &hold[orphan_data];\n  else if (((iself && (sh_type == SHT_RELA || sh_type == SHT_REL))\n\t    || (!iself && CONST_STRNEQ (secname, \".rel\")))\n\t   && (s->flags & SEC_LOAD) != 0)\n    place = &hold[orphan_rel];\n  else if ((s->flags & SEC_CODE) == 0)\n    place = &hold[orphan_rodata];\n  else\n    place = &hold[orphan_text];\n\n  after = NULL;\n  if (place != NULL)\n    {\n      if (place->os == NULL)\n\t{\n\t  if (place->name != NULL)\n\t    place->os = lang_output_section_find (place->name);\n\t  else\n\t    place->os = output_rel_find (s, isdyn);\n\t}\n      after = place->os;\n      if (after == NULL)\n\tafter = lang_output_section_find_by_flags\n\t  (s, &place->os, _bfd_elf_match_sections_by_type);\n      if (after == NULL)\n\t/* *ABS* is always the first output section statement.  */\n\tafter = &lang_output_section_statement.head->output_section_statement;\n    }\n\n  return lang_insert_orphan (s, secname, constraint, after, place, NULL, NULL);\n}\nEOF\nfi\n\nif test x\"$LDEMUL_AFTER_ALLOCATION\" != xgld\"$EMULATION_NAME\"_after_allocation; then\nfragment <<EOF\n\nstatic void\ngld${EMULATION_NAME}_after_allocation (void)\n{\n  bfd_boolean need_layout = bfd_elf_discard_info (link_info.output_bfd,\n\t\t\t\t\t\t  &link_info);\n  gld${EMULATION_NAME}_map_segments (need_layout);\n}\nEOF\nfi\n\nif test x\"$LDEMUL_GET_SCRIPT\" != xgld\"$EMULATION_NAME\"_get_script; then\nfragment <<EOF\n\nstatic char *\ngld${EMULATION_NAME}_get_script (int *isfile)\nEOF\n\nif test -n \"$COMPILE_IN\"\nthen\n# Scripts compiled in.\n\n# sed commands to quote an ld script as a C string.\nsc=\"-f stringify.sed\"\n\nfragment <<EOF\n{\n  *isfile = 0;\n\n  if (link_info.relocatable && config.build_constructors)\n    return\nEOF\nsed $sc ldscripts/${EMULATION_NAME}.xu\t\t\t>> e${EMULATION_NAME}.c\necho '  ; else if (link_info.relocatable) return'\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xr\t\t\t>> e${EMULATION_NAME}.c\necho '  ; else if (!config.text_read_only) return'\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xbn\t\t\t>> e${EMULATION_NAME}.c\nif cmp -s ldscripts/${EMULATION_NAME}.x ldscripts/${EMULATION_NAME}.xn; then : ; else\necho '  ; else if (!config.magic_demand_paged) return'\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xn\t\t\t>> e${EMULATION_NAME}.c\nfi\nif test -n \"$GENERATE_PIE_SCRIPT\" ; then\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\necho '  ; else if (link_info.pie && link_info.combreloc' >> e${EMULATION_NAME}.c\necho '             && link_info.relro' >> e${EMULATION_NAME}.c\necho '             && (link_info.flags & DF_BIND_NOW)) return' >> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xdw\t\t\t>> e${EMULATION_NAME}.c\necho '  ; else if (link_info.pie && link_info.combreloc) return' >> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xdc\t\t\t>> e${EMULATION_NAME}.c\nfi\necho '  ; else if (link_info.pie) return'\t\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xd\t\t\t>> e${EMULATION_NAME}.c\nfi\nif test -n \"$GENERATE_SHLIB_SCRIPT\" ; then\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\necho '  ; else if (link_info.shared && link_info.combreloc' >> e${EMULATION_NAME}.c\necho '             && link_info.relro' >> e${EMULATION_NAME}.c\necho '             && (link_info.flags & DF_BIND_NOW)) return' >> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xsw\t\t\t>> e${EMULATION_NAME}.c\necho '  ; else if (link_info.shared && link_info.combreloc) return' >> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xsc\t\t\t>> e${EMULATION_NAME}.c\nfi\necho '  ; else if (link_info.shared) return'\t\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xs\t\t\t>> e${EMULATION_NAME}.c\nfi\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\necho '  ; else if (link_info.combreloc && link_info.relro' >> e${EMULATION_NAME}.c\necho '             && (link_info.flags & DF_BIND_NOW)) return' >> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xw\t\t\t>> e${EMULATION_NAME}.c\necho '  ; else if (link_info.combreloc) return'\t\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.xc\t\t\t>> e${EMULATION_NAME}.c\nfi\necho '  ; else return'\t\t\t\t\t>> e${EMULATION_NAME}.c\nsed $sc ldscripts/${EMULATION_NAME}.x\t\t\t>> e${EMULATION_NAME}.c\necho '; }'\t\t\t\t\t\t>> e${EMULATION_NAME}.c\n\nelse\n# Scripts read from the filesystem.\n\nfragment <<EOF\n{\n  *isfile = 1;\n\n  if (link_info.relocatable && config.build_constructors)\n    return \"ldscripts/${EMULATION_NAME}.xu\";\n  else if (link_info.relocatable)\n    return \"ldscripts/${EMULATION_NAME}.xr\";\n  else if (!config.text_read_only)\n    return \"ldscripts/${EMULATION_NAME}.xbn\";\nEOF\nif cmp -s ldscripts/${EMULATION_NAME}.x ldscripts/${EMULATION_NAME}.xn; then :\nelse\nfragment <<EOF\n  else if (!config.magic_demand_paged)\n    return \"ldscripts/${EMULATION_NAME}.xn\";\nEOF\nfi\nif test -n \"$GENERATE_PIE_SCRIPT\" ; then\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\nfragment <<EOF\n  else if (link_info.pie && link_info.combreloc\n\t   && link_info.relro && (link_info.flags & DF_BIND_NOW))\n    return \"ldscripts/${EMULATION_NAME}.xdw\";\n  else if (link_info.pie && link_info.combreloc)\n    return \"ldscripts/${EMULATION_NAME}.xdc\";\nEOF\nfi\nfragment <<EOF\n  else if (link_info.pie)\n    return \"ldscripts/${EMULATION_NAME}.xd\";\nEOF\nfi\nif test -n \"$GENERATE_SHLIB_SCRIPT\" ; then\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\nfragment <<EOF\n  else if (link_info.shared && link_info.combreloc\n\t   && link_info.relro && (link_info.flags & DF_BIND_NOW))\n    return \"ldscripts/${EMULATION_NAME}.xsw\";\n  else if (link_info.shared && link_info.combreloc)\n    return \"ldscripts/${EMULATION_NAME}.xsc\";\nEOF\nfi\nfragment <<EOF\n  else if (link_info.shared)\n    return \"ldscripts/${EMULATION_NAME}.xs\";\nEOF\nfi\nif test -n \"$GENERATE_COMBRELOC_SCRIPT\" ; then\nfragment <<EOF\n  else if (link_info.combreloc && link_info.relro\n\t   && (link_info.flags & DF_BIND_NOW))\n    return \"ldscripts/${EMULATION_NAME}.xw\";\n  else if (link_info.combreloc)\n    return \"ldscripts/${EMULATION_NAME}.xc\";\nEOF\nfi\nfragment <<EOF\n  else\n    return \"ldscripts/${EMULATION_NAME}.x\";\n}\n\nEOF\nfi\nfi\n\nif test -n \"$PARSE_AND_LIST_ARGS_CASES\" -o x\"$GENERATE_SHLIB_SCRIPT\" = xyes; then\n\nif test -n \"$PARSE_AND_LIST_PROLOGUE\" ; then\nfragment <<EOF\n $PARSE_AND_LIST_PROLOGUE\nEOF\nfi\n\nfragment <<EOF\n\n#define OPTION_DISABLE_NEW_DTAGS\t(400)\n#define OPTION_ENABLE_NEW_DTAGS\t\t(OPTION_DISABLE_NEW_DTAGS + 1)\n#define OPTION_GROUP\t\t\t(OPTION_ENABLE_NEW_DTAGS + 1)\n#define OPTION_EH_FRAME_HDR\t\t(OPTION_GROUP + 1)\n#define OPTION_EXCLUDE_LIBS\t\t(OPTION_EH_FRAME_HDR + 1)\n#define OPTION_HASH_STYLE\t\t(OPTION_EXCLUDE_LIBS + 1)\n#define OPTION_BUILD_ID\t\t\t(OPTION_HASH_STYLE + 1)\n\nstatic void\ngld${EMULATION_NAME}_add_options\n  (int ns, char **shortopts, int nl, struct option **longopts,\n   int nrl ATTRIBUTE_UNUSED, struct option **really_longopts ATTRIBUTE_UNUSED)\n{\n  static const char xtra_short[] = \"${PARSE_AND_LIST_SHORTOPTS}z:\";\n  static const struct option xtra_long[] = {\n    {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\nEOF\n\nif test x\"$GENERATE_SHLIB_SCRIPT\" = xyes; then\nfragment <<EOF\n    {\"disable-new-dtags\", no_argument, NULL, OPTION_DISABLE_NEW_DTAGS},\n    {\"enable-new-dtags\", no_argument, NULL, OPTION_ENABLE_NEW_DTAGS},\n    {\"eh-frame-hdr\", no_argument, NULL, OPTION_EH_FRAME_HDR},\n    {\"exclude-libs\", required_argument, NULL, OPTION_EXCLUDE_LIBS},\n    {\"hash-style\", required_argument, NULL, OPTION_HASH_STYLE},\n    {\"Bgroup\", no_argument, NULL, OPTION_GROUP},\nEOF\nfi\n\nif test -n \"$PARSE_AND_LIST_LONGOPTS\" ; then\nfragment <<EOF\n    $PARSE_AND_LIST_LONGOPTS\nEOF\nfi\n\nfragment <<EOF\n    {NULL, no_argument, NULL, 0}\n  };\n\n  *shortopts = (char *) xrealloc (*shortopts, ns + sizeof (xtra_short));\n  memcpy (*shortopts + ns, &xtra_short, sizeof (xtra_short));\n  *longopts = (struct option *)\n    xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));\n  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));\n}\n\n#define DEFAULT_BUILD_ID_STYLE\t\"sha1\"\n\nstatic bfd_boolean\ngld${EMULATION_NAME}_handle_option (int optc)\n{\n  switch (optc)\n    {\n    default:\n      return FALSE;\n\n    case OPTION_BUILD_ID:\n      if (link_info.emit_note_gnu_build_id != NULL)\n\t{\n\t  free (link_info.emit_note_gnu_build_id);\n\t  link_info.emit_note_gnu_build_id = NULL;\n\t}\n      if (optarg == NULL)\n\toptarg = DEFAULT_BUILD_ID_STYLE;\n      if (strcmp (optarg, \"none\"))\n\tlink_info.emit_note_gnu_build_id = xstrdup (optarg);\n      break;\n\nEOF\n\nif test x\"$GENERATE_SHLIB_SCRIPT\" = xyes; then\nfragment <<EOF\n    case OPTION_DISABLE_NEW_DTAGS:\n      link_info.new_dtags = FALSE;\n      break;\n\n    case OPTION_ENABLE_NEW_DTAGS:\n      link_info.new_dtags = TRUE;\n      break;\n\n    case OPTION_EH_FRAME_HDR:\n      link_info.eh_frame_hdr = TRUE;\n      break;\n\n    case OPTION_GROUP:\n      link_info.flags_1 |= (bfd_vma) DF_1_GROUP;\n      /* Groups must be self-contained.  */\n      link_info.unresolved_syms_in_objects = RM_GENERATE_ERROR;\n      link_info.unresolved_syms_in_shared_libs = RM_GENERATE_ERROR;\n      break;\n\n    case OPTION_EXCLUDE_LIBS:\n      add_excluded_libs (optarg);\n      break;\n\n    case OPTION_HASH_STYLE:\n      link_info.emit_hash = FALSE;\n      link_info.emit_gnu_hash = FALSE;\n      if (strcmp (optarg, \"sysv\") == 0)\n\tlink_info.emit_hash = TRUE;\n      else if (strcmp (optarg, \"gnu\") == 0)\n\tlink_info.emit_gnu_hash = TRUE;\n      else if (strcmp (optarg, \"both\") == 0)\n\t{\n\t  link_info.emit_hash = TRUE;\n\t  link_info.emit_gnu_hash = TRUE;\n\t}\n      else\n\teinfo (_(\"%P%F: invalid hash style \\`%s'\\n\"), optarg);\n      break;\n\n    case 'z':\n      if (strcmp (optarg, \"initfirst\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_INITFIRST;\n      else if (strcmp (optarg, \"interpose\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_INTERPOSE;\n      else if (strcmp (optarg, \"loadfltr\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_LOADFLTR;\n      else if (strcmp (optarg, \"nodefaultlib\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_NODEFLIB;\n      else if (strcmp (optarg, \"nodelete\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_NODELETE;\n      else if (strcmp (optarg, \"nodlopen\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_NOOPEN;\n      else if (strcmp (optarg, \"nodump\") == 0)\n\tlink_info.flags_1 |= (bfd_vma) DF_1_NODUMP;\n      else if (strcmp (optarg, \"now\") == 0)\n\t{\n\t  link_info.flags |= (bfd_vma) DF_BIND_NOW;\n\t  link_info.flags_1 |= (bfd_vma) DF_1_NOW;\n\t}\n      else if (strcmp (optarg, \"lazy\") == 0)\n\t{\n\t  link_info.flags &= ~(bfd_vma) DF_BIND_NOW;\n\t  link_info.flags_1 &= ~(bfd_vma) DF_1_NOW;\n\t}\n      else if (strcmp (optarg, \"origin\") == 0)\n\t{\n\t  link_info.flags |= (bfd_vma) DF_ORIGIN;\n\t  link_info.flags_1 |= (bfd_vma) DF_1_ORIGIN;\n\t}\n      else if (strcmp (optarg, \"defs\") == 0)\n\tlink_info.unresolved_syms_in_objects = RM_GENERATE_ERROR;\n      else if (strcmp (optarg, \"muldefs\") == 0)\n\tlink_info.allow_multiple_definition = TRUE;\n      else if (strcmp (optarg, \"combreloc\") == 0)\n\tlink_info.combreloc = TRUE;\n      else if (strcmp (optarg, \"nocombreloc\") == 0)\n\tlink_info.combreloc = FALSE;\n      else if (strcmp (optarg, \"nocopyreloc\") == 0)\n\tlink_info.nocopyreloc = TRUE;\n      else if (strcmp (optarg, \"execstack\") == 0)\n\t{\n\t  link_info.execstack = TRUE;\n\t  link_info.noexecstack = FALSE;\n\t}\n      else if (strcmp (optarg, \"noexecstack\") == 0)\n\t{\n\t  link_info.noexecstack = TRUE;\n\t  link_info.execstack = FALSE;\n\t}\nEOF\n\n  if test -n \"$COMMONPAGESIZE\"; then\nfragment <<EOF\n      else if (strcmp (optarg, \"relro\") == 0)\n\tlink_info.relro = TRUE;\n      else if (strcmp (optarg, \"norelro\") == 0)\n\tlink_info.relro = FALSE;\nEOF\n  fi\n\nfragment <<EOF\n      else if (CONST_STRNEQ (optarg, \"max-page-size=\"))\n\t{\n\t  char *end;\n\n\t  config.maxpagesize = strtoul (optarg + 14, &end, 0);\n\t  if (*end || (config.maxpagesize & (config.maxpagesize - 1)) != 0)\n\t    einfo (_(\"%P%F: invalid maxium page size \\`%s'\\n\"),\n\t\t   optarg + 14);\n\t}\n      else if (CONST_STRNEQ (optarg, \"common-page-size=\"))\n\t{\n\t  char *end;\n\t  config.commonpagesize = strtoul (optarg + 17, &end, 0);\n\t  if (*end\n\t      || (config.commonpagesize & (config.commonpagesize - 1)) != 0)\n\t    einfo (_(\"%P%F: invalid common page size \\`%s'\\n\"),\n\t\t   optarg + 17);\n\t}\n      /* What about the other Solaris -z options? FIXME.  */\n      break;\nEOF\nfi\n\nif test -n \"$PARSE_AND_LIST_ARGS_CASES\" ; then\nfragment <<EOF\n $PARSE_AND_LIST_ARGS_CASES\nEOF\nfi\n\nfragment <<EOF\n    }\n\n  return TRUE;\n}\n\nEOF\n\nif test x\"$LDEMUL_LIST_OPTIONS\" != xgld\"$EMULATION_NAME\"_list_options; then\nfragment <<EOF\n\nstatic void\ngld${EMULATION_NAME}_list_options (FILE * file)\n{\n  fprintf (file, _(\"\\\n  --build-id[=STYLE]          Generate build ID note\\n\"));\nEOF\n\nif test x\"$GENERATE_SHLIB_SCRIPT\" = xyes; then\nfragment <<EOF\n  fprintf (file, _(\"\\\n  -Bgroup                     Selects group name lookup rules for DSO\\n\"));\n  fprintf (file, _(\"\\\n  --disable-new-dtags         Disable new dynamic tags\\n\"));\n  fprintf (file, _(\"\\\n  --enable-new-dtags          Enable new dynamic tags\\n\"));\n  fprintf (file, _(\"\\\n  --eh-frame-hdr              Create .eh_frame_hdr section\\n\"));\n  fprintf (file, _(\"\\\n  --hash-style=STYLE          Set hash style to sysv, gnu or both\\n\"));\n  fprintf (file, _(\"\\\n  -z combreloc                Merge dynamic relocs into one section and sort\\n\"));\n  fprintf (file, _(\"\\\n  -z defs                     Report unresolved symbols in object files.\\n\"));\n  fprintf (file, _(\"\\\n  -z execstack                Mark executable as requiring executable stack\\n\"));\n  fprintf (file, _(\"\\\n  -z initfirst                Mark DSO to be initialized first at runtime\\n\"));\n  fprintf (file, _(\"\\\n  -z interpose                Mark object to interpose all DSOs but executable\\n\"));\n  fprintf (file, _(\"\\\n  -z lazy                     Mark object lazy runtime binding (default)\\n\"));\n  fprintf (file, _(\"\\\n  -z loadfltr                 Mark object requiring immediate process\\n\"));\n  fprintf (file, _(\"\\\n  -z muldefs                  Allow multiple definitions\\n\"));\n  fprintf (file, _(\"\\\n  -z nocombreloc              Don't merge dynamic relocs into one section\\n\"));\n  fprintf (file, _(\"\\\n  -z nocopyreloc              Don't create copy relocs\\n\"));\n  fprintf (file, _(\"\\\n  -z nodefaultlib             Mark object not to use default search paths\\n\"));\n  fprintf (file, _(\"\\\n  -z nodelete                 Mark DSO non-deletable at runtime\\n\"));\n  fprintf (file, _(\"\\\n  -z nodlopen                 Mark DSO not available to dlopen\\n\"));\n  fprintf (file, _(\"\\\n  -z nodump                   Mark DSO not available to dldump\\n\"));\n  fprintf (file, _(\"\\\n  -z noexecstack              Mark executable as not requiring executable stack\\n\"));\nEOF\n\n  if test -n \"$COMMONPAGESIZE\"; then\nfragment <<EOF\n  fprintf (file, _(\"\\\n  -z norelro                  Don't create RELRO program header\\n\"));\nEOF\n  fi\n\nfragment <<EOF\n  fprintf (file, _(\"\\\n  -z now                      Mark object non-lazy runtime binding\\n\"));\n  fprintf (file, _(\"\\\n  -z origin                   Mark object requiring immediate \\$ORIGIN\\n\\\n                                processing at runtime\\n\"));\nEOF\n\n  if test -n \"$COMMONPAGESIZE\"; then\nfragment <<EOF\n  fprintf (file, _(\"\\\n  -z relro                    Create RELRO program header\\n\"));\nEOF\n  fi\n\nfragment <<EOF\n  fprintf (file, _(\"\\\n  -z max-page-size=SIZE       Set maximum page size to SIZE\\n\"));\n  fprintf (file, _(\"\\\n  -z common-page-size=SIZE    Set common page size to SIZE\\n\"));\n  fprintf (file, _(\"\\\n  -z KEYWORD                  Ignored for Solaris compatibility\\n\"));\nEOF\nfi\n\nif test -n \"$PARSE_AND_LIST_OPTIONS\" ; then\nfragment <<EOF\n $PARSE_AND_LIST_OPTIONS\nEOF\nfi\n\nfragment <<EOF\n}\nEOF\n\nif test -n \"$PARSE_AND_LIST_EPILOGUE\" ; then\nfragment <<EOF\n $PARSE_AND_LIST_EPILOGUE\nEOF\nfi\nfi\nelse\nfragment <<EOF\n#define gld${EMULATION_NAME}_add_options NULL\n#define gld${EMULATION_NAME}_handle_option NULL\nEOF\nif test x\"$LDEMUL_LIST_OPTIONS\" != xgld\"$EMULATION_NAME\"_list_options; then\nfragment <<EOF\n#define gld${EMULATION_NAME}_list_options NULL\nEOF\nfi\nfi\n\nfragment <<EOF\n\nstruct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n{\n  ${LDEMUL_BEFORE_PARSE-gld${EMULATION_NAME}_before_parse},\n  ${LDEMUL_SYSLIB-syslib_default},\n  ${LDEMUL_HLL-hll_default},\n  ${LDEMUL_AFTER_PARSE-after_parse_default},\n  ${LDEMUL_AFTER_OPEN-gld${EMULATION_NAME}_after_open},\n  ${LDEMUL_AFTER_ALLOCATION-gld${EMULATION_NAME}_after_allocation},\n  ${LDEMUL_SET_OUTPUT_ARCH-set_output_arch_default},\n  ${LDEMUL_CHOOSE_TARGET-ldemul_default_target},\n  ${LDEMUL_BEFORE_ALLOCATION-gld${EMULATION_NAME}_before_allocation},\n  ${LDEMUL_GET_SCRIPT-gld${EMULATION_NAME}_get_script},\n  \"${EMULATION_NAME}\",\n  \"${OUTPUT_FORMAT}\",\n  ${LDEMUL_FINISH-finish_default},\n  ${LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS-NULL},\n  ${LDEMUL_OPEN_DYNAMIC_ARCHIVE-gld${EMULATION_NAME}_open_dynamic_archive},\n  ${LDEMUL_PLACE_ORPHAN-gld${EMULATION_NAME}_place_orphan},\n  ${LDEMUL_SET_SYMBOLS-NULL},\n  ${LDEMUL_PARSE_ARGS-NULL},\n  gld${EMULATION_NAME}_add_options,\n  gld${EMULATION_NAME}_handle_option,\n  ${LDEMUL_UNRECOGNIZED_FILE-NULL},\n  ${LDEMUL_LIST_OPTIONS-gld${EMULATION_NAME}_list_options},\n  ${LDEMUL_RECOGNIZED_FILE-gld${EMULATION_NAME}_load_symbols},\n  ${LDEMUL_FIND_POTENTIAL_LIBRARIES-NULL},\n  ${LDEMUL_NEW_VERS_PATTERN-NULL}\n};\nEOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/dl1main.c": "#include <stdio.h>\n#include <dlfcn.h>\n\nint bar = -20;\n\nint \nmain (void)\n{\n  int ret = 0;\n  void *handle;\n  void (*fcn) (void);\n\n  handle = dlopen(\"./tmpdir/libdl1.so\", RTLD_GLOBAL|RTLD_LAZY);\n  if (!handle)\n    {\n      printf(\"dlopen ./tmpdir/libdl1.so: %s\\n\", dlerror ());\n      return 1;\n    }\n\n  fcn = (void (*)(void)) dlsym(handle, \"foo\");\n  if (!fcn)\n    {\n      printf(\"dlsym foo: %s\\n\", dlerror ());\n      ret += 1;\n    }\n  else\n    {\n      (*fcn) ();\n    }\n\n  dlclose (handle);\n  return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/dl6dmain.c": "#include <stdio.h>\n#include <dlfcn.h>\n\nint bar = -20;\n\nint \nmain (void)\n{\n  int ret = 0;\n  void *handle;\n  void (*fcn) (void);\n\n  handle = dlopen(\"./tmpdir/libdl6d.so\", RTLD_GLOBAL|RTLD_LAZY);\n  if (!handle)\n    {\n      printf(\"dlopen ./tmpdir/libdl6d.so: %s\\n\", dlerror ());\n      return 1;\n    }\n\n  fcn = (void (*)(void)) dlsym(handle, \"foo\");\n  if (!fcn)\n    {\n      printf(\"dlsym foo: %s\\n\", dlerror ());\n      ret += 1;\n    }\n  else\n    {\n      (*fcn) ();\n    }\n\n  dlclose (handle);\n  return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/dl6bmain.c": "#include <stdio.h>\n#include <dlfcn.h>\n\nint bar = -20;\n\nint \nmain (void)\n{\n  int ret = 0;\n  void *handle;\n  void (*fcn) (void);\n\n  handle = dlopen(\"./tmpdir/libdl6b.so\", RTLD_GLOBAL|RTLD_LAZY);\n  if (!handle)\n    {\n      printf(\"dlopen ./tmpdir/libdl6b.so: %s\\n\", dlerror ());\n      return 1;\n    }\n\n  fcn = (void (*)(void)) dlsym(handle, \"foo\");\n  if (!fcn)\n    {\n      printf(\"dlsym foo: %s\\n\", dlerror ());\n      ret += 1;\n    }\n  else\n    {\n      (*fcn) ();\n    }\n\n  dlclose (handle);\n  return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/shared.exp": "# Expect script for various ELF tests.\n#   Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n#\n# This file is part of the GNU Binutils.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n# MA 02110-1301, USA.\n#\n\n# Exclude non-ELF targets.\n\nif ![is_elf_format] {\n    return\n}\n\n# The following tests require running the executable generated by ld.\nif ![isnative] {\n    return\n}\n\n# Check if compiler works\nif { [which $CC] == 0 } {\n    return\n}\n\nset build_tests {\n  {\"Build libfoo.so\"\n   \"-shared\" \"-fPIC\"\n   {foo.c} {} \"libfoo.so\"}\n  {\"Build versioned libfoo.so\"\n   \"-shared -Wl,--version-script=foo.map\" \"-fPIC\"\n   {foo.c} {} \"libfoov.so\"}\n  {\"Build libbar.so\"\n   \"-shared\" \"-fPIC\"\n   {begin.c end.c} {} \"libbar.so\"}\n  {\"Build warn libbar.so\"\n   \"-shared\" \"-fPIC\"\n   {beginwarn.c end.c} {} \"libbarw.so\"}\n  {\"Build hidden libbar.so\"\n   \"-shared\" \"-fPIC\"\n   {begin.c endhidden.c} {} \"libbarh.so\"}\n  {\"Build protected libbar.so\"\n   \"-shared\" \"-fPIC\"\n   {begin.c endprotected.c} {} \"libbarp.so\"}\n  {\"Build libbar.so with libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoo.so\" \"-fPIC\"\n   {end.c} {} \"libbarfoo.so\"}\n  {\"Build libar.so with versioned libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoov.so\" \"-fPIC\"\n   {end.c} {} \"libbarfoov.so\"}\n  {\"Build hidden libbar.so with libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoo.so\" \"-fPIC\"\n   {endhidden.c} {} \"libbarhfoo.so\"}\n  {\"Build hidden libar.so with versioned libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoov.so\" \"-fPIC\"\n   {endhidden.c} {} \"libbarhfoov.so\"}\n  {\"Build protected libbar.so with libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoo.so\" \"-fPIC\"\n   {endprotected.c} {} \"libbarpfoo.so\"}\n  {\"Build protected libbar.so with versioned libfoo.so\"\n   \"-shared tmpdir/begin.o tmpdir/libfoov.so\" \"-fPIC\"\n   {endprotected.c} {} \"libbarpfoov.so\"}\n  {\"Build libdl1.so\"\n   \"-shared\" \"-fPIC\"\n   {dl1.c} {} \"libdl1.so\"}\n  {\"Build libdl2a.so with --dynamic-list=dl2.list\"\n   \"-shared -Wl,--dynamic-list=dl2.list\" \"-fPIC\"\n   {dl2.c dl2xxx.c} {} \"libdl2a.so\"}\n  {\"Build libdl2a.so with --dynamic-list=dl2a.list\"\n   \"-shared -Wl,--dynamic-list=dl2a.list\" \"-fPIC\"\n   {dl2.c dl2xxx.c} {} \"libdl2a.so\"}\n  {\"Build libdl2a.so with --dynamic-list-data\"\n   \"-shared -Wl,--dynamic-list-data\" \"-fPIC\"\n   {dl2.c dl2xxx.c} {} \"libdl2a.so\"}\n  {\"Build libdl2b.so with --dynamic-list=dl2.list and dl2xxx.list\"\n   \"-shared -Wl,--dynamic-list=dl2.list,--dynamic-list=dl2xxx.list\" \"-fPIC\"\n   {dl2.c dl2xxx.c} {} \"libdl2b.so\"}\n  {\"Build libdl2c.so with --dynamic-list-data and dl2xxx.list\"\n   \"-shared -Wl,--dynamic-list-data,--dynamic-list=dl2xxx.list\" \"-fPIC\"\n   {dl2.c dl2xxx.c} {} \"libdl2c.so\"}\n  {\"Build libdl4a.so with --dynamic-list=dl4.list\"\n   \"-shared -Wl,--dynamic-list=dl4.list\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4a.so\"}\n  {\"Build libdl4b.so with --dynamic-list-data\"\n   \"-shared -Wl,--dynamic-list-data\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4b.so\"}\n  {\"Build libdl4c.so with --dynamic-list=dl4.list and dl4xxx.list\"\n   \"-shared -Wl,--dynamic-list=dl4.list,--dynamic-list=dl4xxx.list\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4c.so\"}\n  {\"Build libdl4d.so with --dynamic-list-data and dl4xxx.list\"\n   \"-shared -Wl,--dynamic-list-data,--dynamic-list=dl4xxx.list\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4d.so\"}\n  {\"Build libdl4e.so with -Bsymbolic-functions --dynamic-list-cpp-new\"\n   \"-shared -Wl,-Bsymbolic-functions,--dynamic-list-cpp-new\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4e.so\"}\n  {\"Build libdl4f.so with --dynamic-list-cpp-new -Bsymbolic-functions\"\n   \"-shared -Wl,--dynamic-list-cpp-new,-Bsymbolic-functions\" \"-fPIC\"\n   {dl4.c dl4xxx.c} {} \"libdl4f.so\"}\n  {\"Build libdl6a.so\"\n   \"-shared\" \"-fPIC\"\n   {dl6.c} {} \"libdl6a.so\"}\n  {\"Build libdl6b.so with -Bsymbolic --dynamic-list-data\"\n   \"-shared -Wl,-Bsymbolic,--dynamic-list-data\" \"-fPIC\"\n   {dl6.c} {} \"libdl6b.so\"}\n  {\"Build libdl6c.so with -Bsymbolic\"\n   \"-shared -Wl,-Bsymbolic\" \"-fPIC\"\n   {dl6.c} {} \"libdl6c.so\"}\n  {\"Build libdl6d.so with --dynamic-list-data -Bsymbolic\"\n   \"-shared -Wl,--dynamic-list-data,-Bsymbolic\" \"-fPIC\"\n   {dl6.c} {} \"libdl6d.so\"}\n  {\"Build libdata1.so\"\n   \"-shared\" \"-fPIC\"\n   {data1.c} {} \"libdata1.so\"}\n  {\"Build libcomm1.o\"\n   \"-r -nostdlib\" \"\"\n   {comm1.c} {} \"libcomm1.o\"}\n  {\"Build libfunc1.so\"\n   \"-shared\" \"-fPIC\"\n   {func1.c} {} \"libfunc1.so\"}\n  {\"Build libpr9676-1.a\"\n   \"\" \"-fPIC\"\n   {pr9676-1.c} {} \"libpr9676-1.a\"}\n  {\"Build libpr9676-2.a\"\n   \"\" \"-fPIC\"\n   {pr9676-2.c} {} \"libpr9676-2.a\"}\n  {\"Build libpr9676-3.so\"\n   \"-shared\" \"-fPIC\"\n   {pr9676-3.c} {} \"libpr9676-3.so\"}\n  {\"Build libpr9676-4.so\"\n   \"-shared\" \"-fPIC\"\n   {pr9676-4.c} {} \"libpr9676-4.so\"}\n  {\"Build libpr9676-4a.so\"\n   \"-shared tmpdir/pr9676-4.o -Ltmpdir -lpr9676-3 -Wl,--start-group -lpr9676-1 -lpr9676-2 -Wl,--end-group\"\n   \"-fPIC\"\n   {dummy.c} {{readelf {-s} pr9676.rd}} \"libpr9676-4a.so\"}\n  {\"Build libpr9679.so\"\n   \"-shared\" \"-fPIC -O0\"\n   {pr9679-1.c pr9679-2.c} {{readelf {-s} pr9679.rd}} \"libpr9679.so\"}\n}\n\nset run_tests {\n    {\"Run normal with libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoo.so tmpdir/end.o\" \"\"\n     {main.c} \"normal\" \"normal.out\"}\n    {\"Run protected with libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoo.so tmpdir/endprotected.o\" \"\"\n     {main.c} \"protected\" \"normal.out\"}\n    {\"Run hidden with libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoo.so tmpdir/endhidden.o\" \"\"\n     {main.c} \"hidden\" \"hidden.out\"}\n    {\"Run normal with versioned libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoov.so tmpdir/end.o\" \"\"\n     {main.c} \"normalv\" \"normal.out\"}\n    {\"Run warn with versioned libfoo.so\"\n     \"tmpdir/beginwarn.o tmpdir/libfoov.so\" \"\"\n     {main.c} \"warn\" \"warn.out\"\n     \"\" \"\" \"^.*\\\\\\): warning: function foo is deprecated$\"}\n    {\"Run protected with versioned libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoov.so tmpdir/endprotected.o\" \"\"\n     {main.c} \"protected\" \"normal.out\"}\n    {\"Run hidden with versioned libfoo.so\"\n     \"tmpdir/begin.o tmpdir/libfoov.so tmpdir/endhidden.o\" \"\"\n     {main.c} \"hiddenv\" \"hidden.out\"}\n    {\"Run normal libbar.so with libfoo.so\"\n     \"tmpdir/libbarfoo.so tmpdir/libfoo.so\" \"\"\n     {main.c} \"normal\" \"normal.out\"}\n    {\"Run protected libbar.so with libfoo.so\"\n     \"tmpdir/libbarpfoo.so tmpdir/libfoo.so\" \"\"\n     {main.c} \"protected\" \"normal.out\"}\n    {\"Run hidden libbar.so with libfoo.so\"\n     \"tmpdir/libbarhfoo.so tmpdir/libfoo.so\" \"\"\n     {main.c} \"hidden\" \"hidden.out\"}\n    {\"Run normal libbar.so with versioned libfoo.so\"\n     \"tmpdir/libbarfoov.so tmpdir/libfoov.so\" \"\"\n     {main.c} \"normal\" \"normal.out\"}\n    {\"Run protected libbar.so with versioned libfoo.so\"\n     \"tmpdir/libbarpfoov.so tmpdir/libfoov.so\" \"\"\n     {main.c} \"protected\" \"normal.out\"}\n    {\"Run hidden libbar.so with versioned libfoo.so\"\n     \"tmpdir/libbarhfoov.so tmpdir/libfoov.so\" \"\"\n     {main.c} \"hidden\" \"hidden.out\"}\n    {\"Run dl1a with --dynamic-list=dl1.list and dlopen on libdl1.so\"\n     \"--dynamic-list=dl1.list -ldl\" \"\"\n     {dl1main.c} \"dl1a\" \"dl1.out\"}\n    {\"Run dl1b with --dynamic-list-data and dlopen on libdl1.so\"\n     \"--dynamic-list-data -ldl\" \"\"\n     {dl1main.c} \"dl1b\" \"dl1.out\"}\n    {\"Run with libdl2a.so\"\n     \"tmpdir/libdl2a.so\" \"\"\n     {dl2main.c} \"dl2a\" \"dl2a.out\"}\n    {\"Run with libdl2b.so\"\n     \"tmpdir/libdl2b.so\" \"\"\n     {dl2main.c} \"dl2b\" \"dl2b.out\"}\n    {\"Run with libdl2c.so\"\n     \"tmpdir/libdl2c.so\" \"\"\n     {dl2main.c} \"dl2c\" \"dl2b.out\"}\n    {\"Run with libdl4a.so\"\n     \"tmpdir/libdl4a.so\" \"\"\n     {dl4main.c} \"dl4a\" \"dl4a.out\"}\n    {\"Run with libdl4b.so\"\n     \"tmpdir/libdl4b.so\" \"\"\n     {dl4main.c} \"dl4b\" \"dl4a.out\"}\n    {\"Run with libdl4c.so\"\n     \"tmpdir/libdl4c.so\" \"\"\n     {dl4main.c} \"dl4c\" \"dl4b.out\"}\n    {\"Run with libdl4d.so\"\n     \"tmpdir/libdl4d.so\" \"\"\n     {dl4main.c} \"dl4d\" \"dl4b.out\"}\n    {\"Run with libdl4e.so\"\n     \"tmpdir/libdl4e.so\" \"\"\n     {dl4main.c} \"dl4e\" \"dl4a.out\"}\n    {\"Run with libdl4f.so\"\n     \"tmpdir/libdl4f.so\" \"\"\n     {dl4main.c} \"dl4f\" \"dl4a.out\"}\n    {\"Run dl6a1 with --dynamic-list-data and dlopen on libdl6a.so\"\n     \"--dynamic-list-data -ldl\" \"\"\n     {dl6amain.c} \"dl6a1\" \"dl6a.out\"}\n    {\"Run dl6a2 with -Bsymbolic-functions and dlopen on libdl6a.so\"\n     \"-Bsymbolic-functions -ldl\" \"\"\n     {dl6amain.c} \"dl6a2\" \"dl6b.out\"}\n    {\"Run dl6a3 with -Bsymbolic and dlopen on libdl6a.so\"\n     \"-Bsymbolic -ldl\" \"\"\n     {dl6amain.c} \"dl6a3\" \"dl6b.out\"}\n    {\"Run dl6a4 with -Bsymbolic --dynamic-list-data and dlopen on libdl6a.so\"\n     \"-Bsymbolic --dynamic-list-data -ldl\" \"\"\n     {dl6amain.c} \"dl6a4\" \"dl6a.out\"}\n    {\"Run dl6a5 with -Bsymbolic-functions --dynamic-list-cpp-new and dlopen on libdl6a.so\"\n     \"-Bsymbolic-functions --dynamic-list-cpp-new -ldl\" \"\"\n     {dl6amain.c} \"dl6a5\" \"dl6b.out\"}\n    {\"Run dl6a6 with --dynamic-list-cpp-new -Bsymbolic-functions and dlopen on libdl6a.so\"\n     \"--dynamic-list-cpp-new -Bsymbolic-functions -ldl\" \"\"\n     {dl6amain.c} \"dl6a6\" \"dl6b.out\"}\n    {\"Run dl6a7 with --dynamic-list-data -Bsymbolic and dlopen on libdl6a.so\"\n     \"--dynamic-list-data -Bsymbolic -ldl\" \"\"\n     {dl6amain.c} \"dl6a7\" \"dl6a.out\"}\n    {\"Run dl6b1 with --dynamic-list-data and dlopen on libdl6b.so\"\n     \"--dynamic-list-data -ldl\" \"\"\n     {dl6bmain.c} \"dl6b1\" \"dl6a.out\"}\n    {\"Run dl6b2 with dlopen on libdl6b.so\"\n     \"-ldl\" \"\"\n     {dl6bmain.c} \"dl6b2\" \"dl6b.out\"}\n    {\"Run dl6c1 with --dynamic-list-data and dlopen on libdl6c.so\"\n     \"--dynamic-list-data -ldl\" \"\"\n     {dl6cmain.c} \"dl6c1\" \"dl6b.out\"}\n    {\"Run dl6d1 with --dynamic-list-data and dlopen on libdl6d.so\"\n     \"--dynamic-list-data -ldl\" \"\"\n     {dl6dmain.c} \"dl6d1\" \"dl6b.out\"}\n    {\"Run with libdata1.so\"\n     \"tmpdir/libdata1.so\" \"\"\n     {dynbss1.c} \"dynbss1\" \"pass.out\"}\n    {\"Run with libfunc1.so comm1.o\"\n     \"tmpdir/libfunc1.so tmpdir/comm1.o\" \"\"\n     {dummy.c} \"comm1\" \"pass.out\"}\n    {\"Run with comm1.o libfunc1.so\"\n     \"tmpdir/comm1.o tmpdir/libfunc1.so\" \"\"\n     {dummy.c} \"comm1\" \"pass.out\"}\n}\n\nrun_cc_link_tests $build_tests\n# NetBSD ELF systems do not currently support the .*_array sections.\nrun_ld_link_exec_tests [list \"*-*-netbsdelf*\"] $run_tests\n\n# Check if compiler works\nif { [which $CXX] == 0 } {\n    return\n}\n\nset build_cxx_tests {\n  {\"Build libdl3a.so with --dynamic-list=dl3.list\"\n   \"-shared -Wl,--dynamic-list=dl3.list\" \"-fPIC\"\n   {dl3.cc} {} \"libdl3a.so\" \"c++\"}\n  {\"Build libdl3b.so with -Bsymbolic\"\n   \"-shared -Wl,-Bsymbolic\" \"-fPIC\"\n   {dl3.cc} {} \"libdl3b.so\" \"c++\"}\n  {\"Build libdl3a.so with --dynamic-list-cpp-typeinfo\"\n   \"-shared -Wl,--dynamic-list-cpp-typeinfo\" \"-fPIC\"\n   {dl3.cc} {} \"libdl3c.so\" \"c++\"}\n  {\"Build libdnew1a.so with --Bsymbolic-functions --dynamic-list-cpp-new\"\n   \"-shared -Wl,-Bsymbolic-functions,--dynamic-list-cpp-new\" \"-fPIC\"\n   {del.cc new.cc} {} \"libnew1a.so\" \"c++\"}\n  {\"Build libdnew1b.so with --dynamic-list-data --dynamic-list-cpp-new\"\n   \"-shared -Wl,--dynamic-list-data,--dynamic-list-cpp-new\" \"-fPIC\"\n   {del.cc new.cc} {} \"libnew1b.so\" \"c++\"}\n}\n\nset run_cxx_tests {\n    {\"Run with libdl3a.so\"\n     \"tmpdir/libdl3a.so\" \"\"\n     {dl3main.cc} \"dl3a\" \"dl3a.out\" \"\" \"c++\"}\n# \"-shared -Bsymbolic\" only works with gcc 4.5.0 and newer.\n#    {\"Run with libdl3b.so\"\n#     \"tmpdir/libdl3b.so\" \"\"\n#     {dl3main.cc} \"dl3b\" \"dl3b.out\" \"\" \"c++\"}\n    {\"Run with libdl3c.so\"\n     \"tmpdir/libdl3c.so\" \"\"\n     {dl3main.cc} \"dl3c\" \"dl3a.out\" \"\" \"c++\"}\n    {\"Run with libnew1a.so\"\n     \"tmpdir/libnew1a.so\" \"\"\n     {dl5.cc} \"dl5a\" \"dl5.out\" \"\" \"c++\"}\n    {\"Run with libnew1b.so\"\n     \"tmpdir/libnew1b.so\" \"\"\n     {dl5.cc} \"dl5b\" \"dl5.out\" \"\" \"c++\"}\n}\n\nrun_cc_link_tests $build_cxx_tests\nrun_ld_link_exec_tests [] $run_cxx_tests\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/dl6amain.c": "#include <stdio.h>\n#include <dlfcn.h>\n\nint bar = -20;\n\nint \nmain (void)\n{\n  int ret = 0;\n  void *handle;\n  void (*fcn) (void);\n\n  handle = dlopen(\"./tmpdir/libdl6a.so\", RTLD_GLOBAL|RTLD_LAZY);\n  if (!handle)\n    {\n      printf(\"dlopen ./tmpdir/libdl6a.so: %s\\n\", dlerror ());\n      return 1;\n    }\n\n  fcn = (void (*)(void)) dlsym(handle, \"foo\");\n  if (!fcn)\n    {\n      printf(\"dlsym foo: %s\\n\", dlerror ());\n      ret += 1;\n    }\n  else\n    {\n      (*fcn) ();\n    }\n\n  dlclose (handle);\n  return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-elf/dl6cmain.c": "#include <stdio.h>\n#include <dlfcn.h>\n\nint bar = -20;\n\nint \nmain (void)\n{\n  int ret = 0;\n  void *handle;\n  void (*fcn) (void);\n\n  handle = dlopen(\"./tmpdir/libdl6c.so\", RTLD_GLOBAL|RTLD_LAZY);\n  if (!handle)\n    {\n      printf(\"dlopen ./tmpdir/libdl6c.so: %s\\n\", dlerror ());\n      return 1;\n    }\n\n  fcn = (void (*)(void)) dlsym(handle, \"foo\");\n  if (!fcn)\n    {\n      printf(\"dlsym foo: %s\\n\", dlerror ());\n      ret += 1;\n    }\n  else\n    {\n      (*fcn) ();\n    }\n\n  dlclose (handle);\n  return ret;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/ia64-waw.tbl",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/ia64-raw.tbl",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/ia64-asmtab.c",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/ga.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/ga.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/pt_BR.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/de.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/nl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/opcodes/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/ga.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/ga.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/rw.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/pt_BR.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/ms.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/de.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/nl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gprof/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/vms-hdr.c",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/configure.com",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/hosts/alphavms.h",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/rw.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/ja.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/ja.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/ru.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/bfd/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/winduni.c",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/uk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/rw.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/ja.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/sk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/ja.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/zh_TW.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/ru.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/binutils/testsuite/binutils-all/windres/bmp1.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/intl/locale.alias",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gold/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/etc/configbuild.jin",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/etc/configdev.jin",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/libiberty/strverscmp.c",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/config/obj-evax.h",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/config/obj-evax.c",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/rw.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/doc/c-lm32.texi",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/testsuite/gas/bfin/vector2.s",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/gas/testsuite/gas/cris/bork.s",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/ga.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/ga.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/zh_TW.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-versados/t2-2.ro",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-versados/t2-3.ro",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-versados/t1-1.ro",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-versados/t1-2.ro",
        "/tmp/vanessa/spack-stage/spack-stage-binutils-2.20.1-bv635kxckwimus6hfmvtxcbf2dckk7zo/spack-src/ld/testsuite/ld-versados/t2-1.ro"
    ],
    "total_files": 10102
}