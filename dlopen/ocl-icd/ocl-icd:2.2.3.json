{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-ocl-icd-2.2.3-bzayzu6tyk7u5h3tkf76d4bsf3wbz3e4/spack-src/configure.ac": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.67])\nAC_INIT([OpenCL ICD Loader], [2.2.3], [ocl-icd-devel@lists.forge.imag.fr], [ocl-icd])\nAC_CONFIG_SRCDIR([ocl_icd_loader.c])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([-Wall -Werror foreign 1.9 tar-pax check-news color-tests parallel-tests])\nAMX_SILENT_RULES([AM_DEFAULT_VERBOSITY=1])\n# AM_PROG_AR must be called before LT_INIT...\nAM_PROG_AR\nLT_INIT([disable-static])\nAC_CONFIG_TESTDIR([tests], [.])\n\nOPENCL_VERSION=\"2.0\"\nAC_SUBST([OPENCL_VERSION])\n\n# Checks for programs.\nAC_PROG_CC_C89\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAM_PROG_CC_C_O\n\nAC_PATH_PROG([ASCIIDOC], [asciidoc], [])\nAC_PATH_PROG([A2X], [a2x], [])\nAC_PATH_PROG([XMLTO], [xmlto], [])\nAM_CONDITIONAL([GEN_DOC], [\\\n\ttest x\"$ASCIIDOC\" != x && \\\n\ttest x\"$A2X\" != x && \\\n\ttest x\"$XMLTO\" != x ])\n\n# Checks for libraries.\nAC_CHECK_LIB([dl], [dlopen])\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h string.h])\ncl_h=no\ncase $host_os in\n  darwin* )\n    AC_CHECK_HEADER([OpenCL/opencl.h],[cl_h=yes])\n    ;;\n  * )\n    AC_CHECK_HEADER([CL/opencl.h],[cl_h=yes])\n    ;;\nesac\nif test $cl_h = yes; then\n  AC_MSG_CHECKING([whether OpenCL headers 2.0 are available])\n  AC_PREPROC_IFELSE([\n    AC_LANG_PROGRAM([[\n#if defined(__APPLE__) || defined(__MACOSX)\n#  include <OpenCL/opencl.h>\n#else\n#  include <CL/opencl.h>\n#endif\n#ifndef CL_VERSION_2_0\n#  error Cannot find CL_VERSION_2_0 symbol\n#endif\n      ]], [[\n      ]])],[\n    AC_MSG_RESULT([yes])\n  ],[\n    AC_MSG_RESULT([no])\n    cl_h=no\n  ])\nfi\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_INLINE\nAC_TYPE_SIZE_T\nAC_C_CONST\n\nNO_DEPRECATED_DECLARATIONS_FLAGS=\nAX_CHECK_COMPILER_FLAGS([-Wno-deprecated-declarations],\n  [NO_DEPRECATED_DECLARATIONS_FLAGS=\"-Wno-deprecated-declarations\"])\nAC_SUBST([NO_DEPRECATED_DECLARATIONS_FLAGS])\n\n# Checks for library functions.\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\nAC_CHECK_FUNCS([strstr])\n\n# --enable-pthread-once\nAC_ARG_ENABLE([pthread-once],\n  [AS_HELP_STRING([--enable-pthread-once],\n               [use pthread_once() to ensure correct initialisation without polling])],\n  [pthread_once=$enableval],\n  [pthread_once=no])\n\nif test \"$pthread_once\" = yes ; then\n  AX_PTHREAD([\n    AC_DEFINE([USE_PTHREAD], [1],\n              [pthreads are available])\n  ], [\n    AC_MSG_ERROR([No pthread detected on this platform!])\n  ])\nfi\n\n# --enable-official-khronos-headers\nAC_ARG_ENABLE([official-khronos-headers],\n  [AS_HELP_STRING([--enable-official-khronos-headers],\n               [use official Khronos OpenCL headers provided in the sources instead of OpenCL headers installed on the system])],\n  [khronos_headers=$enableval],\n  [khronos_headers=may])\n\nAS_CASE([$cl_h,$khronos_headers],\n  [no,no], [AC_MSG_ERROR([No 2.0 OpenCL headers available and --disable-official-khronos-headers used])],\n  [no,*], [khronos_headers=yes],\n  [yes,yes], [AC_MSG_WARN([Using internal copy of OpenCL headers as requested, even if they are available on the system])],\n  [yes,*], [khronos_headers=no],\n  [AC_MSG_ERROR([Internal error. Please, report this bug])])\n\nif test $khronos_headers = no; then\n  AC_MSG_NOTICE([using system OpenCL headers])\nelse\n  AC_MSG_NOTICE([using internal copy of OpenCL headers])\n  AM_CPPFLAGS=\"$AM_CPPFLAGS -I\\${abs_top_srcdir}/khronos-headers\"\n  AC_SUBST([AM_CPPFLAGS])\nfi\n\n# --disable-debug\nAC_ARG_ENABLE([debug],\n  [AS_HELP_STRING([--disable-debug],\n               [remove debug and additionnal checks (default is included)])],\n  [use_debug=$enableval],\n  [use_debug=yes])\nif  test \"x$use_debug\" != xno ; then\n  AC_DEFINE([DEBUG_OCL_ICD], [1],\n            [Add DEBUG additionnal code])\nfi\n\n# --enable-update-database\nAC_ARG_ENABLE([update-database],\n  [AS_HELP_STRING([--enable-update-database],\n               [update the YAML database from the currently installed ICD Loader and OpenCL headers (root access required)])],\n  [update_database=$enableval],\n  [update_database=no])\nAM_CONDITIONAL([UPDATE_DATABASE], [test x\"$update_database\" != xno])\n\n# always use versionned symbols (check required for MacOSX)\nAM_CONDITIONAL([USE_MAP], [true])\n\nAC_CONFIG_FILES([\n  Makefile\n  doc/Makefile\n  tests/Makefile\n\n  OpenCL.pc\n  ocl-icd.pc\n  tests/atlocal\n])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-ocl-icd-2.2.3-bzayzu6tyk7u5h3tkf76d4bsf3wbz3e4/spack-src/ocl_icd_loader.c": "/**\nCopyright (c) 2012, Brice Videau <brice.videau@imag.fr>\nCopyright (c) 2012, Vincent Danjean <Vincent.Danjean@ens-lyon.org>\nAll rights reserved.\n      \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    \n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n        \nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include <dirent.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <dlfcn.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include \"config.h\"\n#ifdef USE_PTHREAD\n#  include <pthread.h>\n#endif\n#pragma GCC diagnostic push\n#  pragma GCC diagnostic ignored \"-Wcpp\"\n#  define CL_USE_DEPRECATED_OPENCL_1_1_APIS\n#  include <CL/opencl.h>\n#pragma GCC diagnostic pop\n\n#pragma GCC visibility push(hidden)\n\n#include \"ocl_icd_loader.h\"\n#define DEBUG_OCL_ICD_PROVIDE_DUMP_FIELD\n#include \"ocl_icd_debug.h\"\n\n#define ETC_OPENCL_VENDORS \"/etc/OpenCL/vendors\"\n\nint debug_ocl_icd_mask=0;\n\ntypedef __typeof__(clGetPlatformInfo) *clGetPlatformInfo_fn;\n\ninline void dump_vendor_icd(const char* info, const struct vendor_icd *v) {\n  debug(D_DUMP, \"%s %p={ num=%i, first=%i, handle=%p, f=%p}\\n\", info,\n\tv, v->num_platforms, v->first_platform, v->dl_handle, v->ext_fn_ptr);\n}\n\nstruct vendor_icd *_icds=NULL;\nstruct platform_icd *_picds=NULL;\nstatic cl_uint _num_icds = 0;\ncl_uint _num_picds = 0;\n\n#ifdef DEBUG_OCL_ICD\n#  define _clS(x) [-x] = #x\n#  define MAX_CL_ERRORS (-CL_INVALID_DEVICE_PARTITION_COUNT)\nstatic char const * const clErrorStr[MAX_CL_ERRORS+1] = {\n  _clS(CL_SUCCESS),\n  _clS(CL_DEVICE_NOT_FOUND),\n  _clS(CL_DEVICE_NOT_AVAILABLE),\n  _clS(CL_COMPILER_NOT_AVAILABLE),\n  _clS(CL_MEM_OBJECT_ALLOCATION_FAILURE),\n  _clS(CL_OUT_OF_RESOURCES),\n  _clS(CL_OUT_OF_HOST_MEMORY),\n  _clS(CL_PROFILING_INFO_NOT_AVAILABLE),\n  _clS(CL_MEM_COPY_OVERLAP),\n  _clS(CL_IMAGE_FORMAT_MISMATCH),\n  _clS(CL_IMAGE_FORMAT_NOT_SUPPORTED),\n  _clS(CL_BUILD_PROGRAM_FAILURE),\n  _clS(CL_MAP_FAILURE),\n  _clS(CL_MISALIGNED_SUB_BUFFER_OFFSET),\n  _clS(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST),\n  _clS(CL_COMPILE_PROGRAM_FAILURE),\n  _clS(CL_LINKER_NOT_AVAILABLE),\n  _clS(CL_LINK_PROGRAM_FAILURE),\n  _clS(CL_DEVICE_PARTITION_FAILED),\n  _clS(CL_KERNEL_ARG_INFO_NOT_AVAILABLE),\n  _clS(CL_INVALID_VALUE),\n  _clS(CL_INVALID_DEVICE_TYPE),\n  _clS(CL_INVALID_PLATFORM),\n  _clS(CL_INVALID_DEVICE),\n  _clS(CL_INVALID_CONTEXT),\n  _clS(CL_INVALID_QUEUE_PROPERTIES),\n  _clS(CL_INVALID_COMMAND_QUEUE),\n  _clS(CL_INVALID_HOST_PTR),\n  _clS(CL_INVALID_MEM_OBJECT),\n  _clS(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR),\n  _clS(CL_INVALID_IMAGE_SIZE),\n  _clS(CL_INVALID_SAMPLER),\n  _clS(CL_INVALID_BINARY),\n  _clS(CL_INVALID_BUILD_OPTIONS),\n  _clS(CL_INVALID_PROGRAM),\n  _clS(CL_INVALID_PROGRAM_EXECUTABLE),\n  _clS(CL_INVALID_KERNEL_NAME),\n  _clS(CL_INVALID_KERNEL_DEFINITION),\n  _clS(CL_INVALID_KERNEL),\n  _clS(CL_INVALID_ARG_INDEX),\n  _clS(CL_INVALID_ARG_VALUE),\n  _clS(CL_INVALID_ARG_SIZE),\n  _clS(CL_INVALID_KERNEL_ARGS),\n  _clS(CL_INVALID_WORK_DIMENSION),\n  _clS(CL_INVALID_WORK_GROUP_SIZE),\n  _clS(CL_INVALID_WORK_ITEM_SIZE),\n  _clS(CL_INVALID_GLOBAL_OFFSET),\n  _clS(CL_INVALID_EVENT_WAIT_LIST),\n  _clS(CL_INVALID_EVENT),\n  _clS(CL_INVALID_OPERATION),\n  _clS(CL_INVALID_GL_OBJECT),\n  _clS(CL_INVALID_BUFFER_SIZE),\n  _clS(CL_INVALID_MIP_LEVEL),\n  _clS(CL_INVALID_GLOBAL_WORK_SIZE),\n  _clS(CL_INVALID_PROPERTY),\n  _clS(CL_INVALID_IMAGE_DESCRIPTOR),\n  _clS(CL_INVALID_COMPILER_OPTIONS),\n  _clS(CL_INVALID_LINKER_OPTIONS),\n  _clS(CL_INVALID_DEVICE_PARTITION_COUNT)\n};\n#undef _clS\n#endif\n\nstatic char* _clerror2string (cl_int error) __attribute__((unused));\nstatic char* _clerror2string (cl_int error) {\n#ifdef DEBUG_OCL_ICD\n  if (-error > MAX_CL_ERRORS || error > 0) {\n    debug(D_WARN, \"Unknown error code %d\", error);\n    RETURN_STR(\"OpenCL Error\");\n  }\n  const char *ret=clErrorStr[-error];\n  if (ret == NULL) {\n    debug(D_WARN, \"Unknown error code %d\", error);\n    RETURN_STR(\"OpenCL Error\");\n  }\n  RETURN_STR(ret);\n#else\n  static char number[15];\n  if (error==0) {\n    RETURN_STR(\"CL_SUCCESS\");\n  }\n  snprintf(number, 15, \"%i\", error);\n  RETURN_STR(number);\n#endif\n}\n\nstatic inline int _string_end_with_icd(const char* str) {\n  size_t len = strlen(str);\n  if( len<5 || strcmp(str + len - 4, \".icd\" ) != 0 ) {\n    return 0;\n  }\n  return 1;\n}\n\nstatic inline int _string_with_slash(const char* str) {\n  return strchr(str, '/') != NULL;\n}\n\nstatic inline unsigned int _find_num_icds(DIR *dir) {\n  unsigned int num_icds = 0;\n  struct dirent *ent;\n  while( (ent=readdir(dir)) != NULL ){\n    if (_string_end_with_icd(ent->d_name)) {\n      num_icds++;\n    }\n  }\n  rewinddir(dir);\n  RETURN(num_icds);\n}\n\nstatic inline unsigned int _load_icd(int num_icds, const char* lib_path) {\n  unsigned int ret=0;\n  debug(D_LOG, \"Loading ICD '%s'\", lib_path);\n\n  _icds[num_icds].dl_handle = dlopen(lib_path, RTLD_LAZY|RTLD_LOCAL);//|RTLD_DEEPBIND);\n  if(_icds[num_icds].dl_handle != NULL) {\n    debug(D_LOG, \"ICD[%i] loaded\", num_icds);\n    ret=1;\n  } else {\n    debug(D_WARN, \"error while dlopening the IDL: '%s',\\n  => skipping ICD\", dlerror());\n  }\n  return ret;\n}\n\nstatic inline unsigned int _open_driver(unsigned int num_icds,\n\t\t\t\t\tconst char*dir_path, const char*file_path) {\n  char * lib_path;\n  char * err;\n  unsigned int lib_path_length;\n  if (dir_path != NULL) {\n    lib_path_length = strlen(dir_path) + strlen(file_path) + 2;\n    lib_path = malloc(lib_path_length*sizeof(char));\n    sprintf(lib_path,\"%s/%s\", dir_path, file_path);\n  } else {\n    lib_path_length = strlen(file_path) + 1;\n    lib_path = malloc(lib_path_length*sizeof(char));\n    sprintf(lib_path,\"%s\", file_path);\n  }\n  debug(D_LOG, \"Considering file '%s'\", lib_path);\n  FILE *f = fopen(lib_path,\"r\");\n  free(lib_path);\n  if (f==NULL) {\n    RETURN(num_icds);\n  }\n  \n  fseek(f, 0, SEEK_END);\n  lib_path_length = ftell(f)+1;\n  fseek(f, 0, SEEK_SET);\n  if(lib_path_length == 1) {\n    debug(D_WARN, \"File contents too short, skipping ICD\");\n    fclose(f);\n    RETURN(num_icds);\n  }\n  lib_path = malloc(lib_path_length*sizeof(char));\n  err = fgets(lib_path, lib_path_length, f);\n  fclose(f);\n  if( err == NULL ) {\n    free(lib_path);\n    debug(D_WARN, \"Error while loading file contents, skipping ICD\");\n    RETURN(num_icds);\n  }\n\n  lib_path_length = strnlen(lib_path, lib_path_length);\n  \n  if( lib_path[lib_path_length-1] == '\\n' )\n    lib_path[lib_path_length-1] = '\\0';\n\n  num_icds += _load_icd(num_icds, lib_path);\n\n  free(lib_path);\n  RETURN(num_icds);\n}\n\nstatic inline unsigned int _open_drivers(DIR *dir, const char* dir_path) {\n  unsigned int num_icds = 0;\n  struct dirent *ent;\n  while( (ent=readdir(dir)) != NULL ){\n    if(! _string_end_with_icd(ent->d_name)) {\n      continue;\n    }\n    num_icds = _open_driver(num_icds, dir_path, ent->d_name);\n\n  }\n  RETURN(num_icds);\n}\n\nstatic void* _get_function_addr(void* dlh, clGetExtensionFunctionAddress_fn fn, const char*name) {\n  void *addr1;\n  debug(D_LOG,\"Looking for function %s\",name);\n  addr1=dlsym(dlh, name);\n  if (addr1 == NULL) {\n    debug(D_WARN, \"Missing global symbol '%s' in ICD, should be skipped\", name);\n  }\n  void* addr2=NULL;\n  if (fn) {\n    addr2=(*fn)(name);\n    if (addr2 == NULL) {\n      debug(D_WARN, \"Missing function '%s' in ICD, should be skipped\", name);\n    }\n#ifdef DEBUG_OCL_ICD\n    if (addr1 && addr2 && addr1!=addr2) {\n      debug(D_WARN, \"Function and symbol '%s' have different addresses!\", name);\n    }\n#endif\n  }\n  if (!addr2) addr2=addr1;\n  RETURN(addr2);\n}\n\nstatic int _allocate_platforms(int req) {\n  static cl_uint allocated=0;\n  debug(D_LOG,\"Requesting allocation for %d platforms\",req);\n  if (allocated - _num_picds < req) {\n    if (allocated==0) {\n      _picds=(struct platform_icd*)malloc(req*sizeof(struct platform_icd));\n    } else {\n      req = req - (allocated - _num_picds);\n      _picds=(struct platform_icd*)realloc(_picds, (allocated+req)*sizeof(struct platform_icd));\n    }\n    allocated += req;\n  }\n  RETURN(allocated - _num_picds);\n}\n\nstatic char* _malloc_clGetPlatformInfo(clGetPlatformInfo_fn plt_info_ptr,\n\t\t cl_platform_id pid, cl_platform_info cname, char* sname) {\n  cl_int error;\n  size_t param_value_size_ret;\n  error = plt_info_ptr(pid, cname, 0, NULL, &param_value_size_ret);\n  if (error != CL_SUCCESS) {\n    debug(D_WARN, \"Error %s while requesting %s in platform %p\",\n\t  _clerror2string(error), sname, pid);\n    return NULL;\n  }\n  char *param_value = (char *)malloc(sizeof(char)*param_value_size_ret);\n  if (param_value == NULL) {\n    debug(D_WARN, \"Error in malloc while requesting %s in platform %p\",\n\t  sname, pid);\n    return NULL;\n  }\n  error = plt_info_ptr(pid, cname, param_value_size_ret, param_value, NULL);\n  if (error != CL_SUCCESS){\n    free(param_value);\n    debug(D_WARN, \"Error %s while requesting %s in platform %p\",\n\t  _clerror2string(error), sname, pid);\n    return NULL;\n  }\n  RETURN_STR(param_value);\n}\n\nstatic inline void _find_and_check_platforms(cl_uint num_icds) {\n  cl_uint i;\n  _num_icds = 0;\n  for( i=0; i<num_icds; i++){\n    debug(D_LOG, \"Checking ICD %i/%i\", i, num_icds);\n    dump_vendor_icd(\"before looking for platforms\", &_icds[i]);\n    struct vendor_icd *picd = &_icds[i];\n    void* dlh = _icds[i].dl_handle;\n    picd->ext_fn_ptr = _get_function_addr(dlh, NULL, \"clGetExtensionFunctionAddress\");\n    clIcdGetPlatformIDsKHR_fn plt_fn_ptr = \n      _get_function_addr(dlh, picd->ext_fn_ptr, \"clIcdGetPlatformIDsKHR\");\n    clGetPlatformInfo_fn plt_info_ptr = \n      _get_function_addr(dlh, picd->ext_fn_ptr,\t\"clGetPlatformInfo\");\n    if( picd->ext_fn_ptr == NULL\n\t|| plt_fn_ptr == NULL\n\t|| plt_info_ptr == NULL) {\n      debug(D_WARN, \"Missing symbols in ICD, skipping it\");\n      continue;\n    }\n    cl_uint num_platforms=0;\n    cl_int error;\n    error = (*plt_fn_ptr)(0, NULL, &num_platforms);\n    if( error != CL_SUCCESS || num_platforms == 0) {\n      debug(D_LOG, \"No platform in ICD, skipping it\");\n      continue;\n    }\n    cl_platform_id *platforms = (cl_platform_id *) malloc( sizeof(cl_platform_id) * num_platforms);\n    error = (*plt_fn_ptr)(num_platforms, platforms, NULL);\n    if( error != CL_SUCCESS ){\n      free(platforms);\n      debug(D_WARN, \"Error in loading ICD platforms, skipping ICD\");\n      continue;\n    }\n    cl_uint num_valid_platforms=0;\n    cl_uint j;\n    debug(D_LOG, \"Try to load %d plateforms\", num_platforms);\n    if (_allocate_platforms(num_platforms) < num_platforms) {\n      free(platforms);\n      debug(D_WARN, \"Not enought platform allocated. Skipping ICD\");\n      continue;\n    }\n    for(j=0; j<num_platforms; j++) {\n      debug(D_LOG, \"Checking platform %i\", j);\n      struct platform_icd *p=&_picds[_num_picds];\n      char *param_value=NULL;\n      p->extension_suffix=NULL;\n      p->vicd=&_icds[i];\n      p->pid=platforms[j];\n#ifdef DEBUG_OCL_ICD\n      if (debug_ocl_icd_mask & D_DUMP) {\n        int log=debug_ocl_icd_mask & D_TRACE;\n        debug_ocl_icd_mask &= ~D_TRACE;\n\tdump_platform(p->vicd->ext_fn_ptr, p->pid);\n        debug_ocl_icd_mask |= log;\n      }\n#endif\n      {\n\t      /* Allow to workaround a bug in the Intel ICD used\n\t       * with optirun (search for NVidia Optimus for more info)\n\t       */\n\t      const char* str=getenv(\"OCL_ICD_ASSUME_ICD_EXTENSION\");\n\t      if (! str || str[0]==0) {\n\t\t      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_EXTENSIONS, \"extensions\");\n\t\t      if (param_value == NULL){\n\t\t\t      debug(D_WARN, \"Skipping platform %i\", j);\n\t\t\t      continue;\n\t\t      }\n\t\t      debug(D_DUMP, \"Supported extensions: %s\", param_value);\n\t\t      if( strstr(param_value, \"cl_khr_icd\") == NULL){\n\t\t\t      free(param_value); \n\t\t\t      debug(D_WARN, \"Missing khr extension in platform %i, skipping it\", j);\n\t\t\t      continue;\n\t\t      }\n\t\t      free(param_value);\n\t      }\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_ICD_SUFFIX_KHR, \"suffix\");\n      if (param_value == NULL){\n\tdebug(D_WARN, \"Skipping platform %i\", j);\n        continue;\n      }\n      p->extension_suffix = param_value;\n      debug(D_DUMP|D_LOG, \"Extension suffix: %s\", param_value);\n#ifdef DEBUG_OCL_ICD\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_PROFILE, \"profile\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Profile: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_VERSION, \"version\");\n      p->version = param_value;\n      if (param_value != NULL){\n        debug(D_DUMP, \"Version: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_NAME, \"name\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Name: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_VENDOR, \"vendor\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Vendor: %s\", param_value);\n\tfree(param_value);\n      }\n#endif\n      num_valid_platforms++;\n      _num_picds++;\n    }\n    if( num_valid_platforms != 0 ) {\n      if ( _num_icds != i ) {\n        picd->dl_handle = dlh;\n      }\n      dump_vendor_icd(\"after looking for platforms\", &_icds[_num_icds]);\n      _num_icds++;\n      picd->num_platforms = num_valid_platforms;\n      _icds[i].first_platform = _num_picds - num_valid_platforms;\n    } else {\n      dlclose(dlh);\n    }\n    free(platforms);\n  }\n}\n\nstatic void __initClIcd( void ) {\n  debug_init();\n  cl_uint num_icds = 0;\n  int is_dir = 0;\n  DIR *dir = NULL;\n  const char* dir_path=getenv(\"OCL_ICD_VENDORS\");\n  if (! dir_path || dir_path[0]==0) {\n    debug(D_DUMP, \"OCL_ICD_VENDORS empty or not defined, using %s\", ETC_OPENCL_VENDORS);\n    dir_path=ETC_OPENCL_VENDORS;\n    is_dir=1;\n  }\n  if (!is_dir) {\n    struct stat buf;\n    int ret=stat(dir_path, &buf);\n    if (ret != 0 && errno != ENOENT) {\n      debug(D_WARN, \"Cannot stat '%s'. Aborting\", dir_path);\n    }\n    if (ret == 0 && S_ISDIR(buf.st_mode)) {\n      is_dir=1;\n    }\n  }\n  \n  if (!is_dir) {\n    debug(D_LOG,\"Only loading '%s' as an ICD\", dir_path);\n    num_icds = 1;\n    dir=NULL;\n  } else {\n    debug(D_LOG,\"Reading icd list from '%s'\", dir_path);\n    dir = opendir(dir_path);\n    if(dir == NULL) {\n      if (errno == ENOTDIR) {\n        debug(D_DUMP, \"%s is not a directory, trying to use it as a ICD libname\",\n  \tdir_path);\n      }\n      goto abort;\n    }\n\n    num_icds = _find_num_icds(dir);\n    if(num_icds == 0) {\n      goto abort;\n    }\n  }\n\n  _icds = (struct vendor_icd*)malloc(num_icds * sizeof(struct vendor_icd));\n  if (_icds == NULL) {\n    goto abort;\n  }\n  \n  if (!is_dir) {\n    if (_string_end_with_icd(dir_path)) {\n      num_icds = 0;\n      if (! _string_with_slash(dir_path)) {\n\tnum_icds = _open_driver(0, ETC_OPENCL_VENDORS, dir_path);\n      }\n      if (num_icds == 0) {\n\tnum_icds = _open_driver(0, NULL, dir_path);\n      }\n    } else {\n      num_icds = _load_icd(0, dir_path);\n    }\n  } else {\n    num_icds = _open_drivers(dir, dir_path);\n  }\n  if(num_icds == 0) {\n    goto abort;\n  }\n\n  _find_and_check_platforms(num_icds);\n  if(_num_icds == 0){\n    goto abort;\n  }\n\n  if (_num_icds < num_icds) {\n    _icds = (struct vendor_icd*)realloc(_icds, _num_icds * sizeof(struct vendor_icd));\n  }\n  debug(D_WARN, \"%d valid vendor(s)!\", _num_icds);\n\n  if (dir != NULL){\n    closedir(dir);\n  }\n  return;\n abort:\n  _num_icds = 0;\n  if (_icds) {\n    free(_icds);\n    _icds = NULL;\n  }\n  if (dir != NULL){\n    closedir(dir);\n  }\n  return;\n}\n\n#ifdef USE_PTHREAD\nstatic pthread_once_t once_init = PTHREAD_ONCE_INIT;\n#else\nstatic int gard=0;\n#endif\nvolatile static __thread int in_init = 0;\nvolatile static cl_uint _initialized = 0;\n\nstatic inline void __attribute__((constructor)) _initClIcd( void ) {\n  if( _initialized )\n    return;\n#ifdef USE_PTHREAD\n  if (in_init) {\n    /* probably reentrency, in_init is a __thread variable */\n    debug(D_WARN, \"Executing init while already in init!\");\n  } else {\n    in_init=1;\n    __sync_synchronize();\n    pthread_once(&once_init, &__initClIcd);\n    __sync_synchronize();\n    in_init=0;\n  }\n#else\n  if (__sync_bool_compare_and_swap(&gard, 0, 1)) {\n    in_init=1;\n    __sync_synchronize();\n    __initClIcd();\n    __sync_synchronize();\n    in_init=0;\n  } else {\n    if (in_init) {\n      /* probably reentrency (could also be preemptive user-level threads). */\n    } else {\n      /* someone else started __initClIcd(). We wait until it ends. */\n      debug(D_WARN, \"Waiting end of init\");\n      while (!_initialized) {\n\t__sync_synchronize();\n      }\n      debug(D_WARN, \"Wait done\");\n   }\n  }\n#endif\n  _initialized = 1;\n}\n\ncl_platform_id __attribute__((visibility(\"internal\")))\ngetDefaultPlatformID() {\n  static cl_platform_id defaultPlatformID=NULL;\n  static int defaultSet=0;\n  if (! defaultSet) {\n    do {\n      if(_num_picds == 0) {\n\tbreak;\n      }\n      const char *default_platform = getenv(\"OPENCL_ICD_DEFAULT_PLATFORM\");\n      int num_default_platform;\n      char *end_scan;\n      if (! default_platform) {\n\tnum_default_platform = 0;\n      } else {\n\tnum_default_platform = strtol(default_platform, &end_scan, 10);\n\tif (*default_platform == '\\0' || *end_scan != '\\0') {\n\t  break;\n\t}\n      }\n      if (num_default_platform < 0 || num_default_platform >= _num_picds) {\n\tbreak;\n      }\n      defaultPlatformID=_picds[num_default_platform].pid;\n    } while(0);\n    defaultSet=1;\n  }\n  return defaultPlatformID;\n}\n\n#pragma GCC visibility pop\n#define hidden_alias(name) \\\n  typeof(name) name##_hid __attribute__ ((alias (#name), visibility(\"hidden\")))\n\ntypedef enum {\n  CL_ICDL_OCL_VERSION=1,\n  CL_ICDL_VERSION=2,\n  CL_ICDL_NAME=3,\n  CL_ICDL_VENDOR=4,\n} cl_icdl_info;\n\nstatic cl_int clGetICDLoaderInfoOCLICD(\n  cl_icdl_info     param_name,\n  size_t           param_value_size, \n  void *           param_value,\n  size_t *         param_value_size_ret)\n{\n  char cl_icdl_ocl_version[] = \"OpenCL 1.2\";\n  char cl_icdl_version[] = PACKAGE_VERSION;\n  char cl_icdl_name[] = PACKAGE_NAME;\n  char cl_icdl_vendor[] = \"OCL Icd free software\";\n\n  size_t size_string;\n  char * string_p;\n#define oclcase(name, NAME) \\\n  case CL_ICDL_##NAME: \\\n    string_p = cl_icdl_##name; \\\n    size_string = sizeof(cl_icdl_##name); \\\n    break\n\n  switch ( param_name ) {\n    oclcase(ocl_version,OCL_VERSION);\n    oclcase(version,VERSION);\n    oclcase(name,NAME);\n    oclcase(vendor,VENDOR);\n    default:\n      return CL_INVALID_VALUE;\n      break;\n  }\n#undef oclcase\n  if( param_value != NULL ) {\n    if( size_string > param_value_size )\n      return CL_INVALID_VALUE;\n    memcpy(param_value, string_p, size_string);\n  }\n  if( param_value_size_ret != NULL )\n    *param_value_size_ret = size_string;\n  return CL_SUCCESS;\n}\n\nCL_API_ENTRY void * CL_API_CALL\nclGetExtensionFunctionAddress(const char * func_name) CL_API_SUFFIX__VERSION_1_0 {\n  debug_trace();\n  _initClIcd();\n  if( func_name == NULL )\n    return NULL;\n  cl_uint suffix_length;\n  cl_uint i;\n  void * return_value=NULL;\n  struct func_desc const * fn=&function_description[0];\n  int lenfn=strlen(func_name);\n  if (lenfn > 3 &&\n      (strcmp(func_name+lenfn-3, \"KHR\")==0 || strcmp(func_name+lenfn-3, \"EXT\")==0)) {\n    while (fn->name != NULL) {\n      if (strcmp(func_name, fn->name)==0)\n        RETURN(fn->addr);\n      fn++;\n    }\n  }\n  for(i=0; i<_num_picds; i++) {\n    suffix_length = strlen(_picds[i].extension_suffix);\n    if( suffix_length > strlen(func_name) )\n      continue;\n    if(strcmp(_picds[i].extension_suffix, &func_name[strlen(func_name)-suffix_length]) == 0)\n      RETURN((*_picds[i].vicd->ext_fn_ptr)(func_name));\n  }\n  if(strcmp(func_name, \"clGetICDLoaderInfoOCLICD\") == 0) {\n    return (void*)(void*(*)(void))(&clGetICDLoaderInfoOCLICD);\n  }\n  RETURN(return_value);\n}\nhidden_alias(clGetExtensionFunctionAddress);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclGetPlatformIDs(cl_uint          num_entries,\n                 cl_platform_id * platforms,\n                 cl_uint *        num_platforms) CL_API_SUFFIX__VERSION_1_0 {\n  debug_trace();\n  _initClIcd();\n  if( platforms == NULL && num_platforms == NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( num_entries == 0 && platforms != NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( _num_icds == 0 || _num_picds == 0 ) {\n    if ( num_platforms != NULL )\n      *num_platforms = 0;\n    RETURN(CL_PLATFORM_NOT_FOUND_KHR);\n  }\n\n  cl_uint i;\n  if( num_platforms != NULL ){\n    *num_platforms = _num_picds;\n  }\n  if( platforms != NULL ) {\n    cl_uint n_platforms = _num_picds < num_entries ? _num_picds : num_entries;\n    for( i=0; i<n_platforms; i++) {\n      *(platforms++) = _picds[i].pid;\n    }\n  }\n  return CL_SUCCESS;\n}\nhidden_alias(clGetPlatformIDs);\n\n#define RETURN_WITH_ERRCODE(errvar, errvalue, retvalue) \\\n  do { \\\n    if(errvar) { \\\n      *errvar=errvalue; \\\n    } \\\n    RETURN(NULL); \\\n  } while(0)\n\n#define CHECK_PLATFORM(__pid) \\\n  ({ \\\n    cl_platform_id _pid=(__pid); \\\n    int good=0; \\\n    cl_uint j; \\\n    for( j=0; j<_num_picds; j++) { \\\n      if( _picds[j].pid == _pid) { \\\n        good=1; \\\n        break; \\\n      } \\\n    } \\\n    good; \\\n  })\n\nCL_API_ENTRY cl_context CL_API_CALL\nclCreateContext(const cl_context_properties *  properties ,\n                cl_uint                        num_devices ,\n                const cl_device_id *           devices ,\n                void (CL_CALLBACK *  pfn_notify )(const char *, const void *, size_t, void *),\n                void *                         user_data ,\n                cl_int *                       errcode_ret ){\n  debug_trace();\n  _initClIcd();\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n        if((struct _cl_platform_id *) properties[i+1] == NULL) {\n          if(errcode_ret) {\n            *errcode_ret = CL_INVALID_PLATFORM;\n          }\n          RETURN(NULL);\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n\t    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_PLATFORM, NULL);\n          }\n        }\n        RETURN(((struct _cl_platform_id *) properties[i+1])\n          ->dispatch->clCreateContext(properties, num_devices, devices,\n                        pfn_notify, user_data, errcode_ret));\n      }\n      i += 2;\n    }\n  }\n  if(devices == NULL || num_devices == 0) {\n    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_VALUE, NULL);\n  }\n  if((struct _cl_device_id *)devices[0] == NULL) {\n    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_DEVICE, NULL);\n  }\n  RETURN(((struct _cl_device_id *)devices[0])\n    ->dispatch->clCreateContext(properties, num_devices, devices,\n                  pfn_notify, user_data, errcode_ret));\n}\nhidden_alias(clCreateContext);\n\nCL_API_ENTRY cl_context CL_API_CALL\nclCreateContextFromType(const cl_context_properties *  properties ,\n                        cl_device_type                 device_type ,\n                        void (CL_CALLBACK *      pfn_notify )(const char *, const void *, size_t, void *),\n                        void *                         user_data ,\n                        cl_int *                       errcode_ret ){\n  debug_trace();\n  _initClIcd();\n  if(_num_picds == 0) {\n    goto out;\n  }\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n\tif( (struct _cl_platform_id *) properties[i+1] == NULL ) {\n\t  goto out;\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n            goto out;\n          }\n        }\n        return ((struct _cl_platform_id *) properties[i+1])\n          ->dispatch->clCreateContextFromType(properties, device_type,\n                        pfn_notify, user_data, errcode_ret);\n      }\n      i += 2;\n    }\n  } else {\n    const char *default_platform = getenv(\"OPENCL_ICD_DEFAULT_PLATFORM\");\n    int num_default_platform;\n    char *end_scan;\n    if (! default_platform) {\n      num_default_platform = 0;\n    } else {\n      num_default_platform = strtol(default_platform, &end_scan, 10);\n      if (*default_platform == '\\0' || *end_scan != '\\0') {\n\tgoto out;\n      }\n    }\n    if (num_default_platform < 0 || num_default_platform >= _num_picds) {\n      goto out;\n    }\n    RETURN(_picds[num_default_platform].pid->dispatch->clCreateContextFromType\n\t(properties, device_type, pfn_notify, user_data, errcode_ret));\n  }\n out:\n  RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_PLATFORM, NULL);\n}\nhidden_alias(clCreateContextFromType);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclGetGLContextInfoKHR(const cl_context_properties *  properties ,\n                      cl_gl_context_info             param_name ,\n                      size_t                         param_value_size ,\n                      void *                         param_value ,\n                      size_t *                       param_value_size_ret ){\n  debug_trace();\n  _initClIcd();\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n        if( (struct _cl_platform_id *) properties[i+1] == NULL ) {\n\t  RETURN(CL_INVALID_PLATFORM);\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n\t    RETURN(CL_INVALID_PLATFORM);\n          }\n        }\n        RETURN(((struct _cl_platform_id *) properties[i+1])\n\t  ->dispatch->clGetGLContextInfoKHR(properties, param_name,\n                        param_value_size, param_value, param_value_size_ret));\n      }\n      i += 2;\n    }\n  }\n  RETURN(CL_INVALID_PLATFORM);\n}\nhidden_alias(clGetGLContextInfoKHR);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclWaitForEvents(cl_uint              num_events ,\n                const cl_event *     event_list ){\n  debug_trace();\n  if( num_events == 0 || event_list == NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( (struct _cl_event *)event_list[0] == NULL )\n    RETURN(CL_INVALID_EVENT);\n  RETURN(((struct _cl_event *)event_list[0])\n    ->dispatch->clWaitForEvents(num_events, event_list));\n}\nhidden_alias(clWaitForEvents);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclUnloadCompiler( void ){\n  debug_trace();\n  RETURN(CL_SUCCESS);\n}\nhidden_alias(clUnloadCompiler);\n",
        "/tmp/vanessa/spack-stage/spack-stage-ocl-icd-2.2.3-bzayzu6tyk7u5h3tkf76d4bsf3wbz3e4/spack-src/doc/libOpenCL.7.txt": "libOpenCL(7)\n============\nVincent Danjean <Vincent.Danjean@ens-lyon.org>\n:Author Initials: VD\n:toc:\n:icons:\n:numbered:\n\nNAME\n----\nlibOpenCL, libOpenCL.so - OCL-ICD implementation of OpenCL ICD loader\n\nDESCRIPTION\n-----------\n`libOpenCL.so` is the library linked by OpenCL programs. It does not contains\nany OpenCL implementation itself, but merly act as a dispatcher to real OpenCL\nimplementations provided as OpenCL Installable Client Driver (ICD).\nAn ICD loader should be able to load ICDs provided by any vendors.\n\nAccording to OpenCL specifications from Khronos (see [Kronos]), the ICD Loader\nlooks for files into '`/etc/OpenCL/vendors/`' directory and, for each file\nwhose name ends with '`.icd`', the ICD Loader loads with **dlopen**(3) the\nshared library whose name is on the first line of the '`.icd`' file.\n\nShared library name in \".icd\" files can have its path, or it can be a plain\nfilename. In the latter case, the ICD shared library will be look for into the\nstandard dynamic loader paths.\n\nENVIRONNEMENT\n-------------\nSome environment variables can be used modify the default behavior of\nlibOpenCL.\n\n*OCL_ICD_VENDORS*::\nThis variable allows one to change the way ICD are searched on the system.\nSeveral cases are considerated:\n\na. if *$OCL_ICD_VENDORS* is a directory path, then this path replaces the\n  \"/etc/OpenCL/vendors\" path in the standard behavior: the loader will use the\n  '`.icd`' files in this directory;\nb. else, if *$OCL_ICD_VENDORS* ends with '`.icd`', libOpenCL.so will only load\n  the ICD whose shared library name is wrote into the specified \".icd\"\n  file;\n  +\n  If there is no slash into\n  *$OCL_ICD_VENDORS*, libOpenCL.so will first try to use\n  '`/etc/OpenCL/vendors/`'*$OCL_ICD_VENDORS*. If this fail, it uses\n  *$OCL_ICD_VENDORS* (as a relative or absolute file name path).\nc. else libOpenCL.so will try to load *$OCL_ICD_VENDORS* as the ICD shared\n  library itself (i.e. to load it directly with **dlopen**(3)).\n\n*OCL_ICD_ASSUME_ICD_EXTENSION*::\n  If set, contrary the the Kronos specification, the loader will not check that\n  the loaded ICDs declare the `cl_khr_icd` extension. You may need to define\n  this environment variable if you are using the Intel ICD toguether with\n  *optirun*(1). Else, a bug into the Intel ICD will make the application crash.\n\n*OCL_ICD_DEBUG*::\n+\n--\nIf ocl-icd has been compiled with debug support, you can set this environment\nvariable to a value where each bit display some kind of informations. Defined\nvalues are:\n\n* *1*: warnings (enabled by default if debug support is present and\n  *OCL_ICD_DEBUG* is not set)\n* *2*: informative messages\n* *4*: entering/exiting for some OpenCL functions\n* *8*: dump of the internal structure of loaded ICDs\n\n*OCL_ICD_DEBUG* is mainly useful for ocl-icd development itself and/or for ICD\ndevelopment.\n--\n\nSEE ALSO\n--------\nhttp://www.khronos.org/registry/cl/[Kronos OpenCL registry website]\n"
    },
    "skipped": [],
    "total_files": 37
}