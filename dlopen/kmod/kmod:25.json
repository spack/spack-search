{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/uname.c": "/*\n * Copyright (C) 2012-2013  ProFUSION embedded systems\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/utsname.h>\n\n#include \"testsuite.h\"\n\nTS_EXPORT int uname(struct utsname *u)\n{\n\tstatic void *nextlib = NULL;\n\tstatic int (*nextlib_uname)(struct utsname *u);\n\tconst char *release;\n\tint err;\n\tsize_t sz;\n\n\tif (nextlib == NULL) {\n#ifdef RTLD_NEXT\n\t\tnextlib = RTLD_NEXT;\n#else\n\t\tnextlib = dlopen(\"libc.so.6\", RTLD_LAZY);\n#endif\n\t\tnextlib_uname = dlsym(nextlib, \"uname\");\n\t}\n\n\terr = nextlib_uname(u);\n\tif (err < 0)\n\t\treturn err;\n\n\tif (!environ)\n\t\t/*\n\t\t * probably called from within glibc before main(); unsafe\n\t\t * to call getenv()\n\t\t */\n\t\treturn 0;\n\n\trelease = getenv(S_TC_UNAME_R);\n\tif (release == NULL) {\n\t\tfprintf(stderr, \"TRAP uname(): missing export %s?\\n\",\n\t\t\t\t\t\t\tS_TC_UNAME_R);\n\t\treturn 0;\n\t}\n\n\tsz = strlen(release) + 1;\n\tif (sz > sizeof(u->release)) {\n\t\tfprintf(stderr, \"uname(): sizeof release (%s) \"\n\t\t\t\t\"is greater than available space: %zu\",\n\t\t\t\trelease, sizeof(u->release));\n\t\terrno = -EFAULT;\n\t\treturn -1;\n\t}\n\n\tmemcpy(u->release, release, sz);\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/path.c": "/*\n * Copyright (C) 2012-2013  ProFUSION embedded systems\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <assert.h>\n#include <dirent.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <limits.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n#include <shared/util.h>\n\n#include \"testsuite.h\"\n\nstatic void *nextlib;\nstatic const char *rootpath;\nstatic size_t rootpathlen;\n\nstatic inline bool need_trap(const char *path)\n{\n\treturn path != NULL && path[0] == '/'\n\t\t&& !strstartswith(path, ABS_TOP_BUILDDIR);\n}\n\nstatic const char *trap_path(const char *path, char buf[PATH_MAX * 2])\n{\n\tsize_t len;\n\n\tif (!need_trap(path))\n\t\treturn path;\n\n\tlen = strlen(path);\n\n\tif (len + rootpathlen > PATH_MAX * 2) {\n\t\terrno = ENAMETOOLONG;\n\t\treturn NULL;\n\t}\n\n\tmemcpy(buf, rootpath, rootpathlen);\n\tstrcpy(buf + rootpathlen, path);\n\treturn buf;\n}\n\nstatic bool get_rootpath(const char *f)\n{\n\tif (rootpath != NULL)\n\t\treturn true;\n\n\trootpath = getenv(S_TC_ROOTFS);\n\tif (rootpath == NULL) {\n\t\tERR(\"TRAP %s(): missing export %s?\\n\", f, S_TC_ROOTFS);\n\t\terrno = ENOENT;\n\t\treturn false;\n\t}\n\n\trootpathlen = strlen(rootpath);\n\n\treturn true;\n}\n\nstatic void *get_libc_func(const char *f)\n{\n\tvoid *fp;\n\n\tif (nextlib == NULL) {\n#ifdef RTLD_NEXT\n\t\tnextlib = RTLD_NEXT;\n#else\n\t\tnextlib = dlopen(\"libc.so.6\", RTLD_LAZY);\n#endif\n\t}\n\n\tfp = dlsym(nextlib, f);\n\tassert(fp);\n\n\treturn fp;\n}\n\n/* wrapper template for a function with one \"const char* path\" argument */\n#define WRAP_1ARG(rettype, failret, name) \\\nTS_EXPORT rettype name(const char *path) \\\n{ \\\n\tconst char *p;\t\t\t\t\\\n\tchar buf[PATH_MAX * 2];                 \\\n\tstatic rettype (*_fn)(const char*);\t\\\n\t\t\t\t\t\t\\\n\tif (!get_rootpath(__func__))\t\t\\\n\t\treturn failret;\t\t\t\\\n\t_fn = get_libc_func(#name);\t\t\\\n\tp = trap_path(path, buf);\t\t\\\n\tif (p == NULL)\t\t\t\t\\\n\t\treturn failret;\t\t\t\\\n\treturn (*_fn)(p);\t\t\t\\\n}\n\n/* wrapper template for a function with \"const char* path\" and another argument */\n#define WRAP_2ARGS(rettype, failret, name, arg2t)\t\\\nTS_EXPORT rettype name(const char *path, arg2t arg2)\t\\\n{ \\\n\tconst char *p;\t\t\t\t\t\\\n\tchar buf[PATH_MAX * 2];\t\t\t\t\\\n\tstatic rettype (*_fn)(const char*, arg2t arg2);\t\\\n\t\t\t\t\t\t\t\\\n\tif (!get_rootpath(__func__))\t\t\t\\\n\t\treturn failret;\t\t\t\t\\\n\t_fn = get_libc_func(#name);\t\t\t\\\n\tp = trap_path(path, buf);\t\t\t\\\n\tif (p == NULL)\t\t\t\t\t\\\n\t\treturn failret;\t\t\t\t\\\n\treturn (*_fn)(p, arg2);\t\t\t\t\\\n}\n\n/* wrapper template for open family */\n#define WRAP_OPEN(suffix)\t\t\t\t\t\\\nTS_EXPORT int open ## suffix (const char *path, int flags, ...)\t\\\n{ \\\n\tconst char *p;\t\t\t\t\t\t\\\n\tchar buf[PATH_MAX * 2];\t\t\t\t\t\\\n\tstatic int (*_fn)(const char *path, int flags, ...);\t\\\n\t\t\t\t\t\t\t\t\\\n\tif (!get_rootpath(__func__))\t\t\t\t\\\n\t\treturn -1;\t\t\t\t\t\\\n\t_fn = get_libc_func(\"open\" #suffix);\t\t\t\\\n\tp = trap_path(path, buf);\t\t\t\t\\\n\tif (p == NULL)\t\t\t\t\t\t\\\n\t\treturn -1;\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tif (flags & O_CREAT) {\t\t\t\t\t\\\n\t\tmode_t mode;\t\t\t\t\t\\\n\t\tva_list ap;\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\t\tva_start(ap, flags);\t\t\t\t\\\n\t\tmode = va_arg(ap, mode_t);\t\t\t\\\n\t\tva_end(ap);\t\t\t\t\t\\\n\t\treturn _fn(p, flags, mode);\t\t\t\\\n\t}\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\treturn _fn(p, flags);\t\t\t\t\t\\\n}\n\n/* wrapper template for __xstat family */\n#define WRAP_VERSTAT(prefix, suffix)\t\t\t    \\\nTS_EXPORT int prefix ## stat ## suffix (int ver,\t    \\\n\t\t\t      const char *path,\t\t    \\\n\t                      struct stat ## suffix *st)    \\\n{ \\\n\tconst char *p;\t\t\t\t\t    \\\n\tchar buf[PATH_MAX * 2];\t\t\t\t    \\\n\tstatic int (*_fn)(int ver, const char *path,\t    \\\n\t\t          struct stat ## suffix *);\t    \\\n\t_fn = get_libc_func(#prefix \"stat\" #suffix);\t    \\\n\t\t\t\t\t\t\t    \\\n\tif (!get_rootpath(__func__))\t\t\t    \\\n\t\treturn -1;\t\t\t\t    \\\n\tp = trap_path(path, buf);\t\t\t    \\\n\tif (p == NULL)\t\t\t\t\t    \\\n\t\treturn -1;\t\t\t\t    \\\n\t\t\t\t\t\t\t    \\\n\treturn _fn(ver, p, st);\t\t\t\t    \\\n}\n\nWRAP_1ARG(DIR*, NULL, opendir);\n\nWRAP_2ARGS(FILE*, NULL, fopen, const char*);\nWRAP_2ARGS(int, -1, mkdir, mode_t);\nWRAP_2ARGS(int, -1, access, int);\nWRAP_2ARGS(int, -1, stat, struct stat*);\nWRAP_2ARGS(int, -1, lstat, struct stat*);\n#ifndef _FILE_OFFSET_BITS\nWRAP_2ARGS(int, -1, stat64, struct stat64*);\nWRAP_2ARGS(int, -1, lstat64, struct stat64*);\nWRAP_OPEN(64);\n#endif\n\nWRAP_OPEN();\n\n#ifdef HAVE___XSTAT\nWRAP_VERSTAT(__x,);\nWRAP_VERSTAT(__lx,);\n#ifndef _FILE_OFFSET_BITS\nWRAP_VERSTAT(__x,64);\nWRAP_VERSTAT(__lx,64);\n#endif\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/init_module.c": "/*\n * Copyright (C) 2012-2013  ProFUSION embedded systems\n * Copyright (C) 2012-2013  Lucas De Marchi <lucas.de.marchi@gmail.com>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef HAVE_FINIT_MODULE\n#define HAVE_FINIT_MODULE 1\n#endif\n\n#include <assert.h>\n#include <dirent.h>\n#include <dlfcn.h>\n#include <elf.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <limits.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <sys/utsname.h>\n\n#include <shared/util.h>\n\n/* kmod_elf_get_section() is not exported, we need the private header */\n#include <libkmod/libkmod-internal.h>\n\n/* FIXME: hack, change name so we don't clash */\n#undef ERR\n#include \"testsuite.h\"\n#include \"stripped-module.h\"\n\nstruct mod {\n\tstruct mod *next;\n\tint ret;\n\tint errcode;\n\tchar name[];\n};\n\nstatic struct mod *modules;\nstatic bool need_init = true;\nstatic struct kmod_ctx *ctx;\n\nstatic void parse_retcodes(struct mod *_modules, const char *s)\n{\n\tconst char *p;\n\n\tif (s == NULL)\n\t\treturn;\n\n\tfor (p = s;;) {\n\t\tstruct mod *mod;\n\t\tconst char *modname;\n\t\tchar *end;\n\t\tsize_t modnamelen;\n\t\tint ret, errcode;\n\t\tlong l;\n\n\t\tmodname = p;\n\t\tif (modname == NULL || modname[0] == '\\0')\n\t\t\tbreak;\n\n\t\tmodnamelen = strcspn(s, \":\");\n\t\tif (modname[modnamelen] != ':')\n\t\t\tbreak;\n\n\t\tp = modname + modnamelen + 1;\n\t\tif (p == NULL)\n\t\t\tbreak;\n\n\t\tl = strtol(p, &end, 0);\n\t\tif (end == p || *end != ':')\n\t\t\tbreak;\n\t\tret = (int) l;\n\t\tp = end + 1;\n\n\t\tl = strtol(p, &end, 0);\n\t\tif (*end == ':')\n\t\t\tp = end + 1;\n\t\telse if (*end != '\\0')\n\t\t\tbreak;\n\n\t\terrcode = (int) l;\n\n\t\tmod = malloc(sizeof(*mod) + modnamelen + 1);\n\t\tif (mod == NULL)\n\t\t\tbreak;\n\n\t\tmemcpy(mod->name, modname, modnamelen);\n\t\tmod->name[modnamelen] = '\\0';\n\t\tmod->ret = ret;\n\t\tmod->errcode = errcode;\n\t\tmod->next = _modules;\n\t\t_modules = mod;\n\t}\n}\n\nstatic int write_one_line_file(const char *fn, const char *line, int len)\n{\n        FILE *f;\n        int r;\n\n        assert(fn);\n        assert(line);\n\n        f = fopen(fn, \"we\");\n        if (!f)\n                return -errno;\n\n        errno = 0;\n        if (fputs(line, f) < 0) {\n                r = -errno;\n                goto finish;\n        }\n\n        fflush(f);\n\n        if (ferror(f)) {\n                if (errno != 0)\n                        r = -errno;\n                else\n                        r = -EIO;\n        } else\n                r = 0;\n\nfinish:\n        fclose(f);\n        return r;\n}\n\nstatic int create_sysfs_files(const char *modname)\n{\n\tchar buf[PATH_MAX];\n\tconst char *sysfsmod = \"/sys/module/\";\n\tint len = strlen(sysfsmod);\n\n\tmemcpy(buf, sysfsmod, len);\n\tstrcpy(buf + len, modname);\n\tlen += strlen(modname);\n\n\tassert(mkdir_p(buf, len, 0755) >= 0);\n\n\tstrcpy(buf + len, \"/initstate\");\n\treturn write_one_line_file(buf, \"live\\n\", strlen(\"live\\n\"));\n}\n\nstatic struct mod *find_module(struct mod *_modules, const char *modname)\n{\n\tstruct mod *mod;\n\n\tfor (mod = _modules; mod != NULL; mod = mod->next) {\n\t\tif (streq(mod->name, modname))\n\t\t\treturn mod;\n\t}\n\n\treturn NULL;\n}\n\nstatic void init_retcodes(void)\n{\n\tconst char *s;\n\n\tif (!need_init)\n\t\treturn;\n\n\tneed_init = false;\n\ts = getenv(S_TC_INIT_MODULE_RETCODES);\n\tif (s == NULL) {\n\t\tfprintf(stderr, \"TRAP init_module(): missing export %s?\\n\",\n\t\t\t\t\t\tS_TC_INIT_MODULE_RETCODES);\n\t}\n\n\tctx = kmod_new(NULL, NULL);\n\n\tparse_retcodes(modules, s);\n}\n\nstatic inline bool module_is_inkernel(const char *modname)\n{\n\tstruct kmod_module *mod;\n\tint state;\n\tbool ret;\n\n\tif (kmod_module_new_from_name(ctx, modname, &mod) < 0)\n\t\treturn false;\n\n\tstate = kmod_module_get_initstate(mod);\n\n\tif (state == KMOD_MODULE_LIVE ||\n\t\t\tstate == KMOD_MODULE_BUILTIN)\n\t\tret = true;\n\telse\n\t\tret = false;\n\n\tkmod_module_unref(mod);\n\n\treturn ret;\n}\n\nstatic uint8_t elf_identify(void *mem)\n{\n\tuint8_t *p = mem;\n\treturn p[EI_CLASS];\n}\n\nTS_EXPORT long init_module(void *mem, unsigned long len, const char *args);\n\n/*\n * Default behavior is to try to mimic init_module behavior inside the kernel.\n * If it is a simple test that you know the error code, set the return code\n * in TESTSUITE_INIT_MODULE_RETCODES env var instead.\n *\n * The exception is when the module name is not find in the memory passed.\n * This is because we want to be able to pass dummy modules (and not real\n * ones) and it still work.\n */\nlong init_module(void *mem, unsigned long len, const char *args)\n{\n\tconst char *modname;\n\tstruct kmod_elf *elf;\n\tstruct mod *mod;\n\tconst void *buf;\n\tuint64_t bufsize;\n\tint err;\n\tuint8_t class;\n\toff_t offset;\n\n\tinit_retcodes();\n\n\telf = kmod_elf_new(mem, len);\n\tif (elf == NULL)\n\t\treturn 0;\n\n\terr = kmod_elf_get_section(elf, \".gnu.linkonce.this_module\", &buf,\n\t\t\t\t\t\t\t\t&bufsize);\n\tkmod_elf_unref(elf);\n\n\t/* We couldn't parse the ELF file. Just exit as if it was successful */\n\tif (err < 0)\n\t\treturn 0;\n\n\t/* We need to open both 32 and 64 bits module - hack! */\n\tclass = elf_identify(mem);\n\tif (class == ELFCLASS64)\n\t\toffset = MODULE_NAME_OFFSET_64;\n\telse\n\t\toffset = MODULE_NAME_OFFSET_32;\n\n\tmodname = (char *)buf + offset;\n\tmod = find_module(modules, modname);\n\tif (mod != NULL) {\n\t\terrno = mod->errcode;\n\t\terr = mod->ret;\n\t} else if (module_is_inkernel(modname)) {\n\t\terr = -1;\n\t\terrno = EEXIST;\n\t} else\n\t\terr = 0;\n\n\tif (err == 0)\n\t\tcreate_sysfs_files(modname);\n\n\treturn err;\n}\n\nstatic int check_kernel_version(int major, int minor)\n{\n\tstruct utsname u;\n\tconst char *p;\n\tint maj = 0, min = 0;\n\n\tif (uname(&u) < 0)\n\t\treturn false;\n\tfor (p = u.release; *p >= '0' && *p <= '9'; p++)\n\t\tmaj = maj * 10 + *p - '0';\n\tif (*p == '.')\n\t\tfor (p++; *p >= '0' && *p <= '9'; p++)\n\t\t\tmin = min * 10 + *p - '0';\n\tif (maj > major || (maj == major && min >= minor))\n\t\treturn true;\n\treturn false;\n}\n\n\nTS_EXPORT int finit_module(const int fd, const char *args, const int flags);\n\nint finit_module(const int fd, const char *args, const int flags)\n{\n\tint err;\n\tvoid *mem;\n\tunsigned long len;\n\tstruct stat st;\n\n\tif (!check_kernel_version(3, 8)) {\n\t\terrno = ENOSYS;\n\t\treturn -1;\n\t}\n\tif (fstat(fd, &st) < 0)\n\t\treturn -1;\n\n\tlen = st.st_size;\n\tmem = mmap(NULL, len, PROT_READ, MAP_PRIVATE, fd, 0);\n\tif (mem == MAP_FAILED)\n\t\treturn -1;\n\n\terr = init_module(mem, len, args);\n\tmunmap(mem, len);\n\n\treturn err;\n}\n\nTS_EXPORT long int syscall(long int __sysno, ...)\n{\n\tva_list ap;\n\tlong ret;\n\n\tif (__sysno == -1) {\n\t\terrno = ENOSYS;\n\t\treturn -1;\n\t}\n\n\tif (__sysno == __NR_finit_module) {\n\t\tconst char *args;\n\t\tint flags;\n\t\tint fd;\n\n\t\tva_start(ap, __sysno);\n\n\t\tfd = va_arg(ap, int);\n\t\targs = va_arg(ap, const char *);\n\t\tflags = va_arg(ap, int);\n\n\t\tret = finit_module(fd, args, flags);\n\n\t\tva_end(ap);\n\t\treturn ret;\n\t}\n\n\tif (__sysno == __NR_gettid) {\n\t\tstatic void *nextlib = NULL;\n\t\tstatic long (*nextlib_syscall)(long number, ...);\n\n\t\tif (nextlib_syscall == NULL) {\n#ifdef RTLD_NEXT\n\t\t\tnextlib = RTLD_NEXT;\n#else\n\t\t\tnextlib = dlopen(\"libc.so.6\", RTLD_LAZY);\n#endif\n\t\t\tnextlib_syscall = dlsym(nextlib, \"syscall\");\n\t\t\tif (nextlib_syscall == NULL) {\n\t\t\t\tfprintf(stderr, \"FIXME FIXME FIXME: could not load syscall symbol: %s\\n\",\n\t\t\t\t\tdlerror());\n\t\t\t\tabort();\n\t\t\t}\n\t\t}\n\n\t\treturn nextlib_syscall(__NR_gettid);\n\t}\n\n\t/*\n\t * FIXME: no way to call the libc function due since this is a\n\t * variadic argument function and we don't have a vsyscall() variant\n\t * this may fail if a library or process is trying to call syscall()\n\t * directly, for example to implement gettid().\n\t */\n\tfprintf(stderr, \"FIXME FIXME FIXME: could not wrap call to syscall(%ld), this should not happen\\n\",\n\t\t__sysno);\n\n\tabort();\n}\n\n/* the test is going away anyway, but lets keep valgrind happy */\nvoid free_resources(void) __attribute__((destructor));\nvoid free_resources(void)\n{\n\twhile (modules) {\n\t\tstruct mod *mod = modules->next;\n\t\tfree(modules);\n\t\tmodules = mod;\n\t}\n\n\tif (ctx)\n\t\tkmod_unref(ctx);\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/mod-simple-i386.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/mod-simple-sparc64.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/dummy.sha1",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/mod-simple-x86_64.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/dummy.sha256",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-fake-hpsa.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-e.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-a.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-fake-cciss.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-foo-b.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-g.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-j.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-foo-a.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-f.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-b.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-simple.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-i.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-d.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-h.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-foo-c.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-fake-scsi-mod.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-k.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-foo.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/module-playground/cache/mod-loop-c.ko",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-dependencies/lib/modules/4.0.20-kmod/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-dependencies/lib/modules/4.0.20-kmod/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-dependencies/lib/modules/4.0.20-kmod/modules.builtin.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-dependencies/lib/modules/4.0.20-kmod/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/insert/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/insert/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/insert/lib/modules/4.4.4/modules.builtin.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/insert/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/remove/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/remove/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/remove/lib/modules/4.4.4/modules.builtin.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-tools/remove/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modinfo/external/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modinfo/external/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modinfo/external/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-initstate/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-initstate/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-initstate/lib/modules/4.4.4/modules.builtin.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-initstate/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/show-depends/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/show-depends/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/show-depends/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/softdep-loop/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/softdep-loop/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/softdep-loop/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/alias-to-none/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/alias-to-none/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/alias-to-none/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/builtin/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/builtin/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/builtin/lib/modules/4.4.4/modules.builtin.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/builtin/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/external/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/external/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/external/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel/lib/modules/3.3.3/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel/lib/modules/3.3.3/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel/lib/modules/3.3.3/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel-force/lib/modules/3.3.3/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel-force/lib/modules/3.3.3/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/oldkernel-force/lib/modules/3.3.3/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/force/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/force/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/force/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/install-cmd-loop/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/install-cmd-loop/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/install-cmd-loop/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/module-param-kcmdline/lib/modules/4.4.4/modules.alias.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/module-param-kcmdline/lib/modules/4.4.4/modules.symbols.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-modprobe/module-param-kcmdline/lib/modules/4.4.4/modules.dep.bin",
        "/tmp/vanessa/spack-stage/spack-stage-kmod-25-74mw2qqojbfxeboghaoyiyypvti4cx6x/spack-src/testsuite/rootfs-pristine/test-loaded/sys/module/btusb/notes/.note.gnu.build-id"
    ],
    "total_files": 367
}