{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pyopenssl-19.0.0-rigmzlxswdzv6qw7wgrzmxfwptc3xjic/spack-src/tests/memdbg.py": "import sys\n\nimport traceback\n\nfrom cffi import api as _api\n\n\nsys.modules['ssl'] = None\nsys.modules['_hashlib'] = None\n\n\n_ffi = _api.FFI()\n_ffi.cdef(\n    \"\"\"\n    void *malloc(size_t size);\n    void free(void *ptr);\n    void *realloc(void *ptr, size_t size);\n\n    int  CRYPTO_set_mem_functions(void *(*m)(size_t),void *(*r)(void *,size_t), void (*f)(void *));\n\n    int backtrace(void **buffer, int size);\n    char **backtrace_symbols(void *const *buffer, int size);\n    void backtrace_symbols_fd(void *const *buffer, int size, int fd);\n    \"\"\")  # noqa\n_api = _ffi.verify(\n    \"\"\"\n    #include <openssl/crypto.h>\n    #include <stdlib.h>\n    #include <execinfo.h>\n    \"\"\", libraries=[\"crypto\"])\nC = _ffi.dlopen(None)\n\nverbose = False\n\n\ndef log(s):\n    if verbose:\n        print(s)\n\n\ndef _backtrace():\n    buf = _ffi.new(\"void*[]\", 64)\n    result = _api.backtrace(buf, len(buf))\n    strings = _api.backtrace_symbols(buf, result)\n    stack = [_ffi.string(strings[i]) for i in range(result)]\n    C.free(strings)\n    return stack\n\n\n@_ffi.callback(\"void*(*)(size_t)\")\ndef malloc(n):\n    memory = C.malloc(n)\n    python_stack = traceback.extract_stack(limit=3)\n    c_stack = _backtrace()\n    heap[memory] = [(n, python_stack, c_stack)]\n    log(\"malloc(%d) -> %s\" % (n, memory))\n    return memory\n\n\n@_ffi.callback(\"void*(*)(void*, size_t)\")\ndef realloc(p, n):\n    memory = C.realloc(p, n)\n    old = heap.pop(p)\n\n    python_stack = traceback.extract_stack(limit=3)\n    c_stack = _backtrace()\n\n    old.append((n, python_stack, c_stack))\n    heap[memory] = old\n    log(\"realloc(0x%x, %d) -> %s\" % (int(_ffi.cast(\"int\", p)), n, memory))\n    return memory\n\n\n@_ffi.callback(\"void(*)(void*)\")\ndef free(p):\n    if p != _ffi.NULL:\n        C.free(p)\n        del heap[p]\n        log(\"free(0x%x)\" % (int(_ffi.cast(\"int\", p)),))\n\n\nif _api.CRYPTO_set_mem_functions(malloc, realloc, free):\n    log('Enabled memory debugging')\n    heap = {}\nelse:\n    log('Failed to enable memory debugging')\n    heap = None\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pyopenssl-19.0.0-rigmzlxswdzv6qw7wgrzmxfwptc3xjic/spack-src/doc/images/pyopenssl-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyopenssl-19.0.0-rigmzlxswdzv6qw7wgrzmxfwptc3xjic/spack-src/doc/images/pyopenssl-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pyopenssl-19.0.0-rigmzlxswdzv6qw7wgrzmxfwptc3xjic/spack-src/doc/images/pyopenssl-brand.png"
    ],
    "total_files": 61
}