{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/setup.py": "#!/usr/bin/env python\n# Author:  Lisandro Dalcin\n# Contact: dalcinl@gmail.com\n\n__doc__ = \\\n\"\"\"\nPython bindings for MPI\n\"\"\"\n\nimport sys\nimport os\nimport re\n\ntry:\n    import setuptools\nexcept ImportError:\n    setuptools = None\n\npyver = sys.version_info[:2]\nif pyver < (2, 6) or (3, 0) <= pyver < (3, 2):\n    raise RuntimeError(\"Python version 2.6, 2.7 or >= 3.2 required\")\nif pyver == (2, 6) or pyver == (3, 2):\n    sys.stderr.write(\n        \"WARNING: Python %d.%d is not supported.\\n\" % pyver)\nif (hasattr(sys, 'pypy_version_info') and\n    sys.pypy_version_info[:2] < (2, 0)):\n    raise RuntimeError(\"PyPy version >= 2.0 required\")\n\ntopdir = os.path.abspath(os.path.dirname(__file__))\nsys.path.insert(0, os.path.join(topdir, 'conf'))\n\n# --------------------------------------------------------------------\n# Metadata\n# --------------------------------------------------------------------\n\ndef name():\n    return 'mpi4py'\n\ndef version():\n    srcdir = os.path.join(topdir, 'src')\n    with open(os.path.join(srcdir, 'mpi4py', '__init__.py')) as f:\n        m = re.search(r\"__version__\\s*=\\s*'(.*)'\", f.read())\n        return m.groups()[0]\n\ndef description():\n    with open(os.path.join(topdir, 'DESCRIPTION.rst')) as f:\n        return f.read()\n\nname    = name()\nversion = version()\n\nurl      = 'https://bitbucket.org/mpi4py/%(name)s/' % vars()\ndownload = url + 'downloads/%(name)s-%(version)s.tar.gz' % vars()\n\nclassifiers = \"\"\"\nDevelopment Status :: 5 - Production/Stable\nIntended Audience :: Developers\nIntended Audience :: Science/Research\nLicense :: OSI Approved :: BSD License\nOperating System :: MacOS :: MacOS X\nOperating System :: Microsoft :: Windows\nOperating System :: POSIX\nOperating System :: POSIX :: Linux\nOperating System :: POSIX :: SunOS/Solaris\nOperating System :: Unix\nProgramming Language :: C\nProgramming Language :: Cython\nProgramming Language :: Python\nProgramming Language :: Python :: 2\nProgramming Language :: Python :: 2.7\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3.3\nProgramming Language :: Python :: 3.4\nProgramming Language :: Python :: 3.5\nProgramming Language :: Python :: 3.6\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\nTopic :: Scientific/Engineering\nTopic :: Software Development :: Libraries :: Python Modules\nTopic :: System :: Distributed Computing\n\"\"\"\n\nkeywords = \"\"\"\nscientific computing\nparallel computing\nmessage passing interface\nMPI\n\"\"\"\n\nplatforms = \"\"\"\nMac OS X\nLinux\nSolaris\nUnix\nWindows\n\"\"\"\n\nmetadata = {\n    'name'             : name,\n    'version'          : version,\n    'description'      : __doc__.strip(),\n    'long_description' : description(),\n    'url'              : url,\n    'download_url'     : download,\n    'classifiers'      : [c for c in classifiers.split('\\n') if c],\n    'keywords'         : [k for k in keywords.split('\\n')    if k],\n    'platforms'        : [p for p in platforms.split('\\n')   if p],\n    'license'          : 'BSD',\n    'author'           : 'Lisandro Dalcin',\n    'author_email'     : 'dalcinl@gmail.com',\n    'maintainer'       : 'Lisandro Dalcin',\n    'maintainer_email' : 'dalcinl@gmail.com',\n    }\n\nmetadata['provides'] = ['mpi4py']\n\n# --------------------------------------------------------------------\n# Extension modules\n# --------------------------------------------------------------------\n\ndef run_command(exe, args):\n    from distutils.spawn import find_executable\n    from distutils.util  import split_quoted\n    cmd = find_executable(exe)\n    if not cmd: return []\n    if not isinstance(args, str):\n        args = ' '.join(args)\n    try:\n        with os.popen(cmd + ' ' + args) as f:\n            return split_quoted(f.read())\n    except:\n        return []\n\nlinux   = sys.platform.startswith('linux')\nsolaris = sys.platform.startswith('sunos')\ndarwin  = sys.platform.startswith('darwin')\n\nif linux:\n    def whole_archive(compiler, name, library_dirs=[]):\n        return ['-Wl,-whole-archive',\n                '-l' + name,\n                '-Wl,-no-whole-archive',\n                ]\nelif darwin:\n    def darwin_linker_dirs(compiler):\n        from distutils.util import split_quoted\n        linker_cmd = compiler.linker_so + ['-show']\n        linker_cmd = run_command(linker_cmd[0], linker_cmd[1:])\n        library_dirs  = compiler.library_dirs[:]\n        library_dirs += [flag[2:] for flag in linker_cmd\n                         if flag.startswith('-L')]\n        library_dirs += ['/usr/lib']\n        library_dirs += ['/usr/local/lib']\n        return library_dirs\n    def whole_archive(compiler, name, library_dirs=[]):\n        library_dirs = library_dirs[:]\n        library_dirs += darwin_linker_dirs(compiler)\n        for libdir in library_dirs:\n            libpath = os.path.join(libdir, 'lib%s.a' % name)\n            if os.path.isfile(libpath):\n                return ['-force_load', libpath]\n        return ['-l%s' % name]\nelif solaris:\n    def whole_archive(compiler, name, library_dirs=[]):\n        return ['-Wl,-zallextract',\n                '-l' + name,\n                '-Wl,-zdefaultextract',\n                ]\nelse:\n    whole_archive = None\n\ndef configure_dl(ext, config_cmd):\n    from distutils import log\n    log.info(\"checking for dlopen() availability ...\")\n    ok = config_cmd.check_header('dlfcn.h')\n    if ok : ext.define_macros += [('HAVE_DLFCN_H', 1)]\n    ok = config_cmd.check_library('dl')\n    if ok: ext.libraries += ['dl']\n    ok = config_cmd.check_function('dlopen',\n                                   libraries=['dl'],\n                                   decl=1, call=1)\n    if ok: ext.define_macros += [('HAVE_DLOPEN', 1)]\n\ndef configure_mpi(ext, config_cmd):\n    from textwrap import dedent\n    from distutils import log\n    from distutils.errors import DistutilsPlatformError\n    headers = ['stdlib.h', 'mpi.h']\n    #\n    log.info(\"checking for MPI compile and link ...\")\n    ConfigTest = dedent(\"\"\"\\\n    int main(int argc, char **argv)\n    {\n      (void)MPI_Init(&argc, &argv);\n      (void)MPI_Finalize();\n      return 0;\n    }\n    \"\"\")\n    errmsg = \"Cannot %s MPI programs. Check your configuration!!!\"\n    ok = config_cmd.try_compile(ConfigTest, headers=headers)\n    if not ok: raise DistutilsPlatformError(errmsg % \"compile\")\n    ok = config_cmd.try_link(ConfigTest, headers=headers)\n    if not ok: raise DistutilsPlatformError(errmsg % \"link\")\n    #\n    log.info(\"checking for missing MPI functions/symbols ...\")\n    tests  = [\"defined(%s)\" % macro for macro in\n              (\"OPEN_MPI\", \"MSMPI_VER\",)]\n    tests += [\"(defined(MPICH_NAME)&&(MPICH_NAME==3))\"]\n    tests += [\"(defined(MPICH_NAME)&&(MPICH_NAME==2))\"]\n    ConfigTest = dedent(\"\"\"\\\n    #if !(%s)\n    #error \"Unknown MPI implementation\"\n    #endif\n    \"\"\") % \"||\".join(tests)\n    ok = config_cmd.try_compile(ConfigTest, headers=headers)\n    if not ok:\n        from mpidistutils import ConfigureMPI\n        configure = ConfigureMPI(config_cmd)\n        results = configure.run()\n        configure.dump(results)\n        ext.define_macros += [('HAVE_CONFIG_H', 1)]\n    else:\n        for function, arglist in (\n            ('MPI_Type_create_f90_integer',   '0,(MPI_Datatype*)0'),\n            ('MPI_Type_create_f90_real',    '0,0,(MPI_Datatype*)0'),\n            ('MPI_Type_create_f90_complex', '0,0,(MPI_Datatype*)0'),\n            ('MPI_Status_c2f', '(MPI_Status*)0,(MPI_Fint*)0'),\n            ('MPI_Status_f2c', '(MPI_Fint*)0,(MPI_Status*)0'),\n            ):\n            ok = config_cmd.check_function_call(\n                function, arglist, headers=headers)\n            if not ok:\n                macro = 'PyMPI_MISSING_' + function\n                ext.define_macros += [(macro, 1)]\n    #\n    if os.name == 'posix':\n        configure_dl(ext, config_cmd)\n\ndef configure_libmpe(lib, config_cmd):\n    #\n    mpecc = os.environ.get('MPECC') or 'mpecc'\n    command = run_command(mpecc, '-mpilog -show')\n    for arg in command:\n        if arg.startswith('-L'):\n            libdir = arg[2:]\n            lib.library_dirs.append(libdir)\n            lib.runtime_library_dirs.append(libdir)\n    #\n    log_lib  = 'lmpe'\n    dep_libs = ('pthread', 'mpe')\n    ok = config_cmd.check_library(log_lib, lib.library_dirs)\n    if not ok: return\n    libraries = []\n    for libname in dep_libs:\n        if config_cmd.check_library(\n            libname, lib.library_dirs,\n            other_libraries=libraries):\n            libraries.insert(0, libname)\n    if whole_archive:\n        cc = config_cmd.compiler\n        dirs = lib.library_dirs[:]\n        lib.extra_link_args += whole_archive(cc, log_lib, dirs)\n        lib.extra_link_args += ['-l' + libname\n                                for libname in libraries]\n    else:\n        lib.libraries += [log_lib] + libraries\n\ndef configure_libvt(lib, config_cmd):\n    #\n    vtcc = os.environ.get('VTCC') or 'vtcc'\n    command = run_command(vtcc, '-vt:showme')\n    for arg in command:\n        if arg.startswith('-L'):\n            libdir = arg[2:]\n            lib.library_dirs.append(libdir)\n            lib.runtime_library_dirs.append(libdir)\n    # modern VampirTrace\n    if lib.name == 'vt':\n        log_lib = 'vt-mpi'\n    else:\n        log_lib = lib.name\n    ok = config_cmd.check_library(log_lib, lib.library_dirs)\n    if ok: lib.libraries = [log_lib]\n    if ok: return\n    # older VampirTrace, Open MPI <= 1.4\n    if lib.name == 'vt-hyb':\n        log_lib = 'vt.ompi'\n    else:\n        log_lib = 'vt.mpi'\n    dep_libs = ('dl', 'z', 'otf',)\n    ok = config_cmd.check_library(log_lib, lib.library_dirs)\n    if not ok: return\n    libraries = []\n    for libname in dep_libs:\n        if config_cmd.check_library(\n            libname, lib.library_dirs,\n            other_libraries=libraries):\n            libraries.insert(0, libname)\n    if whole_archive:\n        cc = config_cmd.compiler\n        dirs = lib.library_dirs[:]\n        lib.extra_link_args += whole_archive(cc, log_lib, dirs)\n        lib.extra_link_args += ['-l' + libname\n                                for libname in libraries]\n    else:\n        lib.libraries += [log_lib] + libraries\n    lib.define_macros.append(('LIBVT_LEGACY', 1))\n    if lib.name == 'vt-hyb':\n        openmp_flag = '-fopenmp' # GCC, Intel\n        lib.extra_compile_args.append(openmp_flag)\n        lib.extra_link_args.append(openmp_flag)\n\ndef configure_pyexe(exe, config_cmd):\n    from distutils import sysconfig\n    if sys.platform.startswith('win'):\n        return\n    if (sys.platform == 'darwin' and\n        ('Anaconda' in sys.version or\n         'Continuum Analytics' in sys.version)):\n        py_version = sysconfig.get_python_version()\n        py_abiflags = getattr(sys, 'abiflags', '')\n        exe.libraries += ['python' + py_version + py_abiflags]\n        return\n    #\n    from distutils.util import split_quoted\n    cfg_vars = sysconfig.get_config_vars()\n    libraries = []\n    library_dirs = []\n    link_args = []\n    if not sysconfig.get_config_var('Py_ENABLE_SHARED'):\n        py_version = sysconfig.get_python_version()\n        py_abiflags = getattr(sys, 'abiflags', '')\n        libraries = ['python' + py_version + py_abiflags]\n        if hasattr(sys, 'pypy_version_info'):\n            py_tag = py_version[0].replace('2', '')\n            libraries = ['pypy%s-c' % py_tag]\n    if sys.platform == 'darwin':\n        fwkdir = cfg_vars.get('PYTHONFRAMEWORKDIR')\n        if (fwkdir and fwkdir != 'no-framework' and\n            fwkdir in cfg_vars.get('LINKFORSHARED', '')):\n            del libraries[:]\n    for var in ('LIBDIR', 'LIBPL'):\n        library_dirs += split_quoted(cfg_vars.get(var, ''))\n    for var in ('LDFLAGS',\n                'LIBS', 'MODLIBS', 'SYSLIBS',\n                'LDLAST'):\n        link_args += split_quoted(cfg_vars.get(var, ''))\n    exe.libraries += libraries\n    exe.library_dirs += library_dirs\n    exe.extra_link_args += link_args\n\n\ndef ext_modules():\n    modules = []\n    # custom dl extension module\n    dl = dict(\n        name='mpi4py.dl',\n        optional=True,\n        sources=['src/dynload.c'],\n        depends=['src/dynload.h'],\n        configure=configure_dl,\n        )\n    if os.name == 'posix':\n        modules.append(dl)\n    # MPI extension module\n    from glob import glob\n    MPI = dict(\n        name='mpi4py.MPI',\n        sources=['src/MPI.c'],\n        depends=(['src/mpi4py.MPI.c'] +\n                 glob('src/*.h') +\n                 glob('src/lib-mpi/*.h') +\n                 glob('src/lib-mpi/config/*.h') +\n                 glob('src/lib-mpi/compat/*.h')\n                 ),\n        configure=configure_mpi,\n        )\n    modules.append(MPI)\n    #\n    return modules\n\ndef libraries():\n    # MPE logging\n    pmpi_mpe = dict(\n        name='mpe', kind='dylib',\n        optional=True,\n        package='mpi4py',\n        dest_dir='lib-pmpi',\n        sources=['src/lib-pmpi/mpe.c'],\n        configure=configure_libmpe,\n        )\n    # VampirTrace logging\n    pmpi_vt = dict(\n        name='vt', kind='dylib',\n        optional=True,\n        package='mpi4py',\n        dest_dir='lib-pmpi',\n        sources=['src/lib-pmpi/vt.c'],\n        configure=configure_libvt,\n        )\n    pmpi_vt_mpi = dict(\n        name='vt-mpi', kind='dylib',\n        optional=True,\n        package='mpi4py',\n        dest_dir='lib-pmpi',\n        sources=['src/lib-pmpi/vt-mpi.c'],\n        configure=configure_libvt,\n        )\n    pmpi_vt_hyb = dict(\n        name='vt-hyb', kind='dylib',\n        optional=True,\n        package='mpi4py',\n        dest_dir='lib-pmpi',\n        sources=['src/lib-pmpi/vt-hyb.c'],\n        configure=configure_libvt,\n        )\n    #\n    return [\n        pmpi_mpe,\n        pmpi_vt,\n        pmpi_vt_mpi,\n        pmpi_vt_hyb,\n        ]\n\ndef executables():\n    # MPI-enabled Python interpreter\n    pyexe = dict(name='python-mpi',\n                 optional=True,\n                 package='mpi4py',\n                 dest_dir='bin',\n                 sources=['src/python.c'],\n                 configure=configure_pyexe,\n                 )\n    #\n    if hasattr(sys, 'pypy_version_info'):\n        return []\n    return [pyexe]\n\n# --------------------------------------------------------------------\n# Setup\n# --------------------------------------------------------------------\n\nfrom mpidistutils import setup\nfrom mpidistutils import Extension  as Ext\nfrom mpidistutils import Library    as Lib\nfrom mpidistutils import Executable as Exe\n\nCYTHON = '0.22'\n\ndef run_setup():\n    \"\"\"\n    Call setup(*args, **kargs)\n    \"\"\"\n    setup_args = metadata.copy()\n    if setuptools:\n        setup_args['zip_safe'] = False\n    if setuptools and not os.getenv('CONDA_BUILD'):\n        src = os.path.join('src', 'mpi4py.MPI.c')\n        has_src = os.path.exists(os.path.join(topdir, src))\n        has_git = os.path.isdir(os.path.join(topdir, '.git'))\n        has_hg  = os.path.isdir(os.path.join(topdir, '.hg'))\n        if not has_src or has_git or has_hg:\n            setup_args['setup_requires'] = ['Cython>='+CYTHON]\n    #\n    setup(packages     = ['mpi4py', 'mpi4py.futures'],\n          package_dir  = {'mpi4py' : 'src/mpi4py'},\n          package_data = {'mpi4py' : ['*.pxd',\n                                      'include/mpi4py/*.h',\n                                      'include/mpi4py/*.i',\n                                      'include/mpi4py/*.pxi',]},\n          ext_modules  = [Ext(**ext) for ext in ext_modules()],\n          libraries    = [Lib(**lib) for lib in libraries()  ],\n          executables  = [Exe(**exe) for exe in executables()],\n          **setup_args)\n\ndef chk_cython(VERSION):\n    from distutils import log\n    from distutils.version import LooseVersion\n    from distutils.version import StrictVersion\n    warn = lambda msg='': sys.stderr.write(msg+'\\n')\n    #\n    try:\n        import Cython\n    except ImportError:\n        warn(\"*\"*80)\n        warn()\n        warn(\" You need to generate C source files with Cython!!\")\n        warn(\" Download and install Cython <http://www.cython.org>\")\n        warn()\n        warn(\"*\"*80)\n        return False\n    #\n    try:\n        CYTHON_VERSION = Cython.__version__\n    except AttributeError:\n        from Cython.Compiler.Version import version as CYTHON_VERSION\n    REQUIRED = VERSION\n    m = re.match(r\"(\\d+\\.\\d+(?:\\.\\d+)?).*\", CYTHON_VERSION)\n    if m:\n        Version = StrictVersion\n        AVAILABLE = m.groups()[0]\n    else:\n        Version = LooseVersion\n        AVAILABLE = CYTHON_VERSION\n    if (REQUIRED is not None and\n        Version(AVAILABLE) < Version(REQUIRED)):\n        warn(\"*\"*80)\n        warn()\n        warn(\" You need to install Cython %s (you have version %s)\"\n             % (REQUIRED, CYTHON_VERSION))\n        warn(\" Download and install Cython <http://www.cython.org>\")\n        warn()\n        warn(\"*\"*80)\n        return False\n    #\n    return True\n\ndef run_cython(source, depends=(), includes=(),\n               destdir_c=None, destdir_h=None,\n               wdir=None, force=False, VERSION=None):\n    from glob import glob\n    from distutils import log\n    from distutils import dep_util\n    from distutils.errors import DistutilsError\n    target = os.path.splitext(source)[0]+'.c'\n    cwd = os.getcwd()\n    try:\n        if wdir: os.chdir(wdir)\n        alldeps = [source]\n        for dep in depends:\n            alldeps += glob(dep)\n        if not (force or dep_util.newer_group(alldeps, target)):\n            log.debug(\"skipping '%s' -> '%s' (up-to-date)\",\n                      source, target)\n            return\n    finally:\n        os.chdir(cwd)\n    if not chk_cython(VERSION):\n        raise DistutilsError(\"requires Cython>=%s\" % VERSION)\n    log.info(\"cythonizing '%s' -> '%s'\", source, target)\n    from cythonize import cythonize\n    err = cythonize(source,\n                    includes=includes,\n                    destdir_c=destdir_c,\n                    destdir_h=destdir_h,\n                    wdir=wdir)\n    if err:\n        raise DistutilsError(\n            \"Cython failure: '%s' -> '%s'\" % (source, target))\n\ndef build_sources(cmd):\n    from distutils.errors import DistutilsError\n    has_src = os.path.exists(os.path.join(\n        topdir, 'src', 'mpi4py.MPI.c'))\n    has_vcs = (os.path.isdir(os.path.join(topdir, '.git')) or\n               os.path.isdir(os.path.join(topdir, '.hg' )))\n    if (has_src and not has_vcs and not cmd.force): return\n    # mpi4py.MPI\n    source = 'mpi4py.MPI.pyx'\n    depends = ['mpi4py/MPI/*.pyx',\n               'mpi4py/MPI/*.pxd',\n               'mpi4py/MPI/*.pxi',]\n    destdir_h = os.path.join('mpi4py', 'include', 'mpi4py')\n    run_cython(source, depends, destdir_h=destdir_h,\n               wdir='src', force=cmd.force, VERSION=CYTHON)\n\nfrom mpidistutils import build_src\nbuild_src.run = build_sources\n\ndef run_testsuite(cmd):\n    from distutils.errors import DistutilsError\n    sys.path.insert(0, 'test')\n    try:\n        from runtests import main\n    finally:\n        del sys.path[0]\n    if cmd.dry_run:\n        return\n    args = cmd.args[:] or []\n    if cmd.verbose < 1:\n        args.insert(0,'-q')\n    if cmd.verbose > 1:\n        args.insert(0,'-v')\n    err = main(args)\n    if err:\n        raise DistutilsError(\"test\")\n\nfrom mpidistutils import test\ntest.run = run_testsuite\n\ndef main():\n    run_setup()\n\nif __name__ == '__main__':\n    main()\n\n# --------------------------------------------------------------------\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/CHANGES.rst": "=======================\nCHANGES: MPI for Python\n=======================\n\n:Author:  Lisandro Dalcin\n:Contact: dalcinl@gmail.com\n\n\nRelease 3.0.0 [2017-11-08]\n==========================\n\n* New features:\n\n  + `mpi4py.futures`: Execute computations asynchronously using a pool\n    of MPI processes. This package is based on ``concurrent.futures``\n    from the Python standard library.\n  + `mpi4py.run`: Run Python code and abort execution in case of\n    unhandled exceptions to prevent deadlocks.\n  + `mpi4py.bench`: Run basic MPI benchmarks and tests.\n\n* Enhancements:\n\n  + Lowercase, pickle-based collective communication calls are now\n    thread-safe through the use of fine-grained locking.\n  + The ``MPI`` module now exposes a ``memory`` type which is a\n    lightweight variant of the builtin ``memoryview`` type, but\n    exposes both the legacy Python 2 and the modern Python 3 buffer\n    interface under a Python 2 runtime.\n  + The ``MPI.Comm.Alltoallw()`` method now uses ``count=1`` and\n    ``displ=0`` as defaults, assuming that messages are specified\n    through user-defined datatypes.\n  + The ``Request.Wait[all]()`` methods now return ``True`` to match\n    the interface of ``Request.Test[all]()``.\n  + The ``Win`` class now implements the Python buffer interface.\n\n* Backward-incompatible changes:\n\n  + The ``buf`` argument of the ``MPI.Comm.recv()`` method is\n    deprecated, passing anything but ``None`` emits a warning.\n  + The ``MPI.Win.memory`` property was removed, use the\n    ``MPI.Win.tomemory()`` method instead.\n  + Executing ``python -m mpi4py`` in the command line is now\n    equivalent to ``python -m mpi4py.run``. For the former behavior,\n    use ``python -m mpi4py.bench``.\n  + Python 2.6 and 3.2 are no longer supported. The ``mpi4py.MPI``\n    module may still build and partially work, but other pure-Python\n    modules under the ``mpi4py`` namespace will not.\n  + Windows: Remove support for legacy MPICH2, Open MPI, and DeinoMPI.\n\n\nRelease 2.0.0 [2015-10-18]\n==========================\n\n* Support for MPI-3 features.\n\n  + Matched probes and receives.\n  + Nonblocking collectives.\n  + Neighborhood collectives.\n  + New communicator constructors.\n  + Request-based RMA operations.\n  + New RMA communication and synchronisation calls.\n  + New window constructors.\n  + New datatype constructor.\n  + New C++ boolean and floating complex datatypes.\n\n* Support for MPI-2 features not included in previous releases.\n\n  + Generalized All-to-All collective (``Comm.Alltoallw()``)\n  + User-defined data representations (``Register_datarep()``)\n\n* New scalable implementation of reduction operations for Python\n  objects. This code is based on binomial tree algorithms using\n  point-to-point communication and duplicated communicator\n  contexts. To disable this feature, use\n  ``mpi4py.rc.fast_reduce = False``.\n\n* Backward-incompatible changes:\n\n  + Python 2.4, 2.5, 3.0 and 3.1 are no longer supported.\n  + Default MPI error handling policies are overriden. After import,\n    mpi4py sets the ``ERRORS_RETURN`` error handler in ``COMM_SELF``\n    and ``COMM_WORLD``, as well as any new ``Comm``, ``Win``, or\n    ``File`` instance created through mpi4py, thus effectively\n    ignoring the MPI rules about error handler inheritance.  This way,\n    MPI errors translate to Python exceptions.  To disable this\n    behavior and use the standard MPI error handling rules, use\n    ``mpi4py.rc.errors = 'default'``.\n  + Change signature of all send methods,\n    ``dest`` is a required argument.\n  + Change signature of all receive and probe methods,\n    ``source`` defaults to ``ANY_SOURCE``,\n    ``tag`` defaults to ``ANY_TAG``.\n  + Change signature of send lowercase-spelling methods,\n    ``obj`` arguments are not mandatory.\n  + Change signature of recv lowercase-spelling methods,\n    renamed 'obj' arguments to 'buf'.\n  + Change ``Request.Waitsome()`` and ``Request.Testsome()``\n    to return ``None`` or ``list``.\n  + Change signature of all lowercase-spelling collectives,\n    ``sendobj`` arguments are now mandatory,\n    ``recvobj`` arguments were removed.\n  + Reduction operations ``MAXLOC`` and ``MINLOC`` are no longer\n    special-cased in lowercase-spelling methods ``Comm.[all]reduce()``\n    and ``Comm.[ex]scan()``, the input object must be specified as a\n    tuple ``(obj, location)``.\n  + Change signature of name publishing functions.\n    The new signatures are\n    ``Publish_name(service_name, port_name, info=INFO_NULL)`` and\n    ``Unpublish_name(service_name, port_name, info=INFO_NULL)```.\n  + ``Win`` instances now cache Python objects exposing memory by\n    keeping references instead of using MPI attribute caching.\n  + Change signature of ``Win.Lock()``.\n    The new signature is\n    ``Win.Lock(rank, lock_type=LOCK_EXCLUSIVE, assertion=0)``.\n  + Move ``Cartcomm.Map()`` to ``Intracomm.Cart_map()``.\n  + Move ``Graphcomm.Map()`` to ``Intracomm.Graph_map()``.\n  + Remove the ``mpi4py.MPE`` module.\n  + Rename the Cython definition file for use with ``cimport``\n    statement from ``mpi_c.pxd`` to ``libmpi.pxd``.\n\n\nRelease 1.3.1 [2013-08-07]\n==========================\n\n* Regenerate C wrappers with Cython 0.19.1 to support Python 3.3.\n\n* Install ``*.pxd`` files in ``<site-packages>/mpi4py`` to ease the\n  support for Cython's ``cimport`` statement in code requiring to\n  access mpi4py internals.\n\n* As a side-effect of using Cython 0.19.1, ancient Python 2.3 is no\n  longer supported. If you really need it, you can install an older\n  Cython and run ``python setup.py build_src --force``.\n\n\nRelease 1.3 [2012-01-20]\n========================\n\n* Now ``Comm.recv()`` accept a buffer to receive the message.\n\n* Add ``Comm.irecv()`` and ``Request.{wait|test}[any|all]()``.\n\n* Add ``Intracomm.Spawn_multiple()``.\n\n* Better buffer handling for PEP 3118 and legacy buffer interfaces.\n\n* Add support for attribute attribute caching on communicators,\n  datatypes and windows.\n\n* Install MPI-enabled Python interpreter as\n  ``<path>/mpi4py/bin/python-mpi``.\n\n* Windows: Support for building with Open MPI.\n\n\nRelease 1.2.2 [2010-09-13]\n==========================\n\n* Add ``mpi4py.get_config()`` to retrieve information (compiler\n  wrappers, includes, libraries, etc) about the MPI implementation\n  employed to build mpi4py.\n\n* Workaround Python libraries with missing GILState-related API calls\n  in case of non-threaded Python builds.\n\n* Windows: look for MPICH2, DeinoMPI, Microsoft HPC Pack at their\n  default install locations under %ProgramFiles.\n\n* MPE: fix hacks related to old API's, these hacks are broken when MPE\n  is built with a MPI implementations other than MPICH2.\n\n* HP-MPI: fix for missing Fortran datatypes, use dlopen() to load the\n  MPI shared library before MPI_Init()\n\n* Many distutils-related fixes, cleanup, and enhancements, better\n  logics to find MPI compiler wrappers.\n\n* Support for ``pip install mpi4py``.\n\n\nRelease 1.2.1 [2010-02-26]\n==========================\n\n* Fix declaration in Cython include file. This declaration, while\n  valid for Cython, broke the simple-minded parsing used in\n  conf/mpidistutils.py to implement configure-tests for availability\n  of MPI symbols.\n\n* Update SWIG support and make it compatible with Python 3. Also\n  generate an warning for SWIG < 1.3.28.\n\n* Fix distutils-related issues in Mac OS X. Now ARCHFLAGS environment\n  variable is honored of all Python's ``config/Makefile`` variables.\n\n* Fix issues with Open MPI < 1.4.2 releated to error checking and\n  ``MPI_XXX_NULL`` handles.\n\n\nRelease 1.2 [2009-12-29]\n========================\n\n* Automatic MPI datatype discovery for NumPy arrays and PEP-3118\n  buffers. Now buffer-like objects can be messaged directly, it is no\n  longer required to explicitly pass a 2/3-list/tuple like ``[data,\n  MPI.DOUBLE]``, or ``[data, count, MPI.DOUBLE]``. Only basic types\n  are supported, i.e., all C/C99-native signed/unsigned integral types\n  and single/double precision real/complex floating types. Many thanks\n  to Eilif Muller for the initial feedback.\n\n* Nonblocking send of pickled Python objects. Many thanks to Andreas\n  Kloeckner for the initial patch and enlightening discussion about\n  this enhancement.\n\n* ``Request`` instances now hold a reference to the Python object\n  exposing the buffer involved in point-to-point communication or\n  parallel I/O. Many thanks to Andreas Kloeckner for the initial\n  feedback.\n\n* Support for logging of user-defined states and events using `MPE\n  <http://www.mcs.anl.gov/research/projects/perfvis/>`_. Runtime\n  (i.e., without requiring a recompile!)  activation of logging of all\n  MPI calls is supported in POSIX platforms implementing ``dlopen()``.\n\n* Support for all the new features in MPI-2.2 (new C99 and F90\n  datatypes, distributed graph topology, local reduction operation,\n  and other minor enhancements).\n\n* Fix the annoying issues related to Open MPI and Python dynamic\n  loading of extension modules in platforms supporting ``dlopen()``.\n\n* Fix SLURM dynamic loading issues on SiCortex. Many thanks to Ian\n  Langmore for providing me shell access.\n\n\nRelease 1.1.0 [2009-06-06]\n==========================\n\n* Fix bug in ``Comm.Iprobe()`` that caused segfaults as Python C-API\n  calls were issued with the GIL released (issue #2).\n\n* Add ``Comm.bsend()`` and ``Comm.ssend()`` for buffered and\n  synchronous send semantics when communicating general Python\n  objects.\n\n* Now the call ``Info.Get(key)`` return a *single* value (i.e, instead\n  of a 2-tuple); this value is ``None`` if ``key`` is not in the\n  ``Info`` object, or a string otherwise. Previously, the call\n  redundantly returned ``(None, False)`` for missing key-value pairs;\n  ``None`` is enough to signal a missing entry.\n\n* Add support for parametrized Fortran datatypes.\n\n* Add support for decoding user-defined datatypes.\n\n* Add support for user-defined reduction operations on memory\n  buffers. However, at most 16 user-defined reduction operations\n  can be created. Ask the author for more room if you need it.\n\n\nRelease 1.0.0 [2009-03-20]\n==========================\n\nThis is the fist release of the all-new, Cython-based, implementation\nof *MPI for Python*. Unfortunately, this implementation is not\nbackward-compatible with the previous one. The list below summarizes\nthe more important changes that can impact user codes.\n\n* Some communication calls had *overloaded* functionality. Now there\n  is a clear distinction between communication of general Python\n  object with *pickle*, and (fast, near C-speed) communication of\n  buffer-like objects (e.g., NumPy arrays).\n\n  - for communicating general Python objects, you have to use\n    all-lowercase methods, like ``send()``, ``recv()``, ``bcast()``,\n    etc.\n\n  - for communicating array data, you have to use ``Send()``,\n    ``Recv()``, ``Bcast()``, etc. methods. Buffer arguments to these\n    calls must be explicitly specified by using a 2/3-list/tuple like\n    ``[data, MPI.DOUBLE]``, or ``[data, count, MPI.DOUBLE]`` (the\n    former one uses the byte-size of ``data`` and the extent of the\n    MPI datatype to define the ``count``).\n\n* Indexing a communicator with an integer returned a special object\n  associating the communication with a target rank, alleviating you\n  from specifying source/destination/root arguments in point-to-point\n  and collective communications. This functionality is no longer\n  available, expressions like::\n\n     MPI.COMM_WORLD[0].Send(...)\n     MPI.COMM_WORLD[0].Recv(...)\n     MPI.COMM_WORLD[0].Bcast(...)\n\n  have to be replaced by::\n\n     MPI.COMM_WORLD.Send(..., dest=0)\n     MPI.COMM_WORLD.Recv(..., source=0)\n     MPI.COMM_WORLD.Bcast(..., root=0)\n\n* Automatic MPI initialization (i.e., at import time) requests the\n  maximum level of MPI thread support (i.e., it is done by calling\n  ``MPI_Init_thread()`` and passing ``MPI_THREAD_MULTIPLE``). In case\n  you need to change this behavior, you can tweak the contents of the\n  ``mpi4py.rc`` module.\n\n* In order to obtain the values of predefined attributes attached to\n  the world communicator, now you have to use the ``Get_attr()``\n  method on the ``MPI.COMM_WORLD`` instance::\n\n     tag_ub = MPI.COMM_WORLD.Get_attr(MPI.TAG_UB)\n\n* In the previous implementation, ``MPI.COMM_WORLD`` and\n  ``MPI.COMM_SELF`` were associated to **duplicates** of the (C-level)\n  ``MPI_COMM_WORLD`` and ``MPI_COMM_SELF`` predefined communicator\n  handles. Now this is no longer the case, ``MPI.COMM_WORLD`` and\n  ``MPI.COMM_SELF`` proxies the **actual** ``MPI_COMM_WORLD`` and\n  ``MPI_COMM_SELF`` handles.\n\n* Convenience aliases ``MPI.WORLD`` and ``MPI.SELF`` were removed. Use\n  instead ``MPI.COMM_WORLD`` and ``MPI.COMM_SELF``.\n\n* Convenience constants ``MPI.WORLD_SIZE`` and ``MPI.WORLD_RANK`` were\n  removed. Use instead ``MPI.COMM_WORLD.Get_size()`` and\n  ``MPI.COMM_WORLD.Get_rank()``.\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/demo/wrap-cffi/helloworld.py": "from mpi4py import MPI\nimport cffi\nimport os\n\n_libdir = os.path.dirname(__file__)\n\nffi = cffi.FFI()\nif MPI._sizeof(MPI.Comm) == ffi.sizeof('int'):\n    _mpi_comm_t = 'int'\nelse:\n    _mpi_comm_t = 'void*'\nffi.cdef(\"\"\"\ntypedef %(_mpi_comm_t)s MPI_Comm;\nvoid sayhello(MPI_Comm);\n\"\"\" % vars())\nlib = ffi.dlopen(os.path.join(_libdir, \"libhelloworld.so\"))\n\ndef sayhello(comm):\n    comm_ptr = MPI._addressof(comm)\n    comm_val = ffi.cast('MPI_Comm*', comm_ptr)[0]\n    lib.sayhello(comm_val)\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/dynload.c": "/* Author:  Lisandro Dalcin\n * Contact: dalcinl@gmail.com\n */\n\n#include \"Python.h\"\n#include \"dynload.h\"\n\nstatic PyObject *\ndl_dlopen(PyObject *self, PyObject *args)\n{\n  void *handle = NULL;\n  char *filename = NULL;\n  int mode = 0;\n  (void)self; /* unused */\n  if (!PyArg_ParseTuple(args, (char *)\"zi:dlopen\",\n                        &filename, &mode)) return NULL;\n  handle = dlopen(filename, mode);\n  return PyLong_FromVoidPtr(handle);\n}\n\nstatic PyObject *\ndl_dlsym(PyObject *self, PyObject *args)\n{\n  PyObject *arg0 = NULL;\n  void *handle = NULL;\n  char *symbol = NULL;\n  void *symval = NULL;\n  (void)self; /* unused */\n  if (!PyArg_ParseTuple(args, (char *)\"Os:dlsym\",\n                        &arg0, &symbol)) return NULL;\n#ifdef RTLD_DEFAULT\n  handle = (void *)RTLD_DEFAULT;\n#endif\n  if (arg0 != Py_None) {\n    handle = PyLong_AsVoidPtr(arg0);\n    if (PyErr_Occurred()) return NULL;\n  }\n  symval = dlsym(handle, symbol);\n  return PyLong_FromVoidPtr(symval);\n}\n\nstatic PyObject *\ndl_dlclose(PyObject *self, PyObject *arg0)\n{\n  int err = 0;\n  void *handle = NULL;\n  (void)self; /* unused */\n  if (arg0 != Py_None) {\n    handle = PyLong_AsVoidPtr(arg0);\n    if (PyErr_Occurred()) return NULL;\n  }\n  if (handle)\n    err = dlclose(handle);\n  return Py_BuildValue((char *)\"i\", err);\n}\n\nstatic PyObject *\ndl_dlerror(PyObject *self, PyObject *args)\n{\n  char *errmsg = NULL;\n  (void)self; (void)args; /* unused */\n  errmsg = dlerror();\n  return Py_BuildValue((char *)\"z\", errmsg);\n}\n\nstatic PyMethodDef dl_methods[] = {\n  { (char *)\"dlopen\",  dl_dlopen,  METH_VARARGS, NULL },\n  { (char *)\"dlsym\",   dl_dlsym,   METH_VARARGS, NULL },\n  { (char *)\"dlclose\", dl_dlclose, METH_O,       NULL },\n  { (char *)\"dlerror\", dl_dlerror, METH_NOARGS,  NULL },\n  { (char *)NULL,      NULL,       0,            NULL } /* sentinel */\n};\n\nPyDoc_STRVAR(dl_doc,\n\"POSIX dynamic linking loader\");\n\n#if PY_MAJOR_VERSION >= 3\nstatic struct PyModuleDef dl_module = {\n  PyModuleDef_HEAD_INIT, /* m_base     */\n  (char *)\"dl\",          /* m_name     */\n  dl_doc,                /* m_doc      */\n  -1,                    /* m_size     */\n  dl_methods,            /* m_methods  */\n  NULL,                  /* m_reload   */\n  NULL,                  /* m_traverse */\n  NULL,                  /* m_clear    */\n  NULL                   /* m_free     */\n};\n#endif\n\n#if !defined(PyModule_AddIntMacro)\n#define PyModule_AddIntMacro(m, c) \\\n  PyModule_AddIntConstant(m, (char *)#c, c)\n#endif\n\n#define PyModule_AddPtrMacro(m, c) \\\n  PyModule_AddObject(m, (char *)#c, PyLong_FromVoidPtr((void *)c))\n\n\n#if PY_MAJOR_VERSION >= 3\nPyMODINIT_FUNC PyInit_dl(void);\nPyMODINIT_FUNC PyInit_dl(void)\n#else\nPyMODINIT_FUNC initdl(void);\nPyMODINIT_FUNC initdl(void)\n#endif\n{\n  PyObject *m = NULL;\n\n#if PY_MAJOR_VERSION >= 3\n  m = PyModule_Create(&dl_module);\n#else\n  m = Py_InitModule3((char *)\"dl\", dl_methods, (char *)dl_doc);\n#endif\n  if (!m) goto bad;\n\n  if (PyModule_AddIntMacro(m, RTLD_LAZY   ) < 0) goto bad;\n  if (PyModule_AddIntMacro(m, RTLD_NOW    ) < 0) goto bad;\n  if (PyModule_AddIntMacro(m, RTLD_LOCAL  ) < 0) goto bad;\n  if (PyModule_AddIntMacro(m, RTLD_GLOBAL ) < 0) goto bad;\n\n#ifdef RTLD_NOLOAD\n  if (PyModule_AddIntMacro(m, RTLD_NOLOAD   ) < 0) goto bad;\n#endif\n#ifdef RTLD_NODELETE\n  if (PyModule_AddIntMacro(m, RTLD_NODELETE ) < 0) goto bad;\n#endif\n#ifdef RTLD_DEEPBIND\n  if (PyModule_AddIntMacro(m, RTLD_DEEPBIND ) < 0) goto bad;\n#endif\n#ifdef RTLD_FIRST\n  if (PyModule_AddIntMacro(m, RTLD_FIRST    ) < 0) goto bad;\n#endif\n\n#ifdef RTLD_DEFAULT\n  if (PyModule_AddPtrMacro(m, RTLD_DEFAULT)   < 0) goto bad;\n#endif\n#ifdef RTLD_NEXT\n  if (PyModule_AddPtrMacro(m, RTLD_NEXT)      < 0) goto bad;\n#endif\n\n#ifdef RTLD_SELF\n  if (PyModule_AddPtrMacro(m, RTLD_SELF)      < 0) goto bad;\n#endif\n#ifdef RTLD_MAIN_ONLY\n  if (PyModule_AddPtrMacro(m, RTLD_MAIN_ONLY) < 0) goto bad;\n#endif\n\n finally:\n#if PY_MAJOR_VERSION >= 3\n  return m;\n#else\n  return;\n#endif\n\n bad:\n  Py_XDECREF(m);\n  m = NULL;\n  goto finally;\n}\n\n/*\n  Local variables:\n  c-basic-offset: 2\n  indent-tabs-mode: nil\n  End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/dynload.h": "/* Author:  Lisandro Dalcin\n * Contact: dalcinl@gmail.com\n */\n\n#ifndef PyMPI_DYNLOAD_H\n#define PyMPI_DYNLOAD_H\n\n#if HAVE_DLFCN_H\n  #include <dlfcn.h>\n#else\n  #if defined(__linux) || defined(__linux__)\n    #define RTLD_LAZY     0x00001\n    #define RTLD_NOW      0x00002\n    #define RTLD_LOCAL    0x00000\n    #define RTLD_GLOBAL   0x00100\n    #define RTLD_NOLOAD   0x00004\n    #define RTLD_NODELETE 0x01000\n    #define RTLD_DEEPBIND 0x00008\n  #elif defined(__sun) || defined(__sun__)\n    #define RTLD_LAZY     0x00001\n    #define RTLD_NOW      0x00002\n    #define RTLD_LOCAL    0x00000\n    #define RTLD_GLOBAL   0x00100\n    #define RTLD_NOLOAD   0x00004\n    #define RTLD_NODELETE 0x01000\n    #define RTLD_FIRST    0x02000\n  #elif defined(__APPLE__)\n    #define RTLD_LAZY     0x1\n    #define RTLD_NOW      0x2\n    #define RTLD_LOCAL    0x4\n    #define RTLD_GLOBAL   0x8\n    #define RTLD_NOLOAD   0x10\n    #define RTLD_NODELETE 0x80\n    #define RTLD_FIRST    0x100\n  #elif defined(__CYGWIN__)\n    #define RTLD_LAZY     1\n    #define RTLD_NOW      2\n    #define RTLD_LOCAL    0\n    #define RTLD_GLOBAL   4\n  #endif\n  #if defined(__cplusplus)\n  extern \"C\" {\n  #endif\n  extern void *dlopen(const char *, int);\n  extern void *dlsym(void *, const char *);\n  extern int   dlclose(void *);\n  extern char *dlerror(void);\n  #if defined(__cplusplus)\n  }\n  #endif\n#endif\n\n#ifndef RTLD_LAZY\n#define RTLD_LAZY 1\n#endif\n#ifndef RTLD_NOW\n#define RTLD_NOW RTLD_LAZY\n#endif\n#ifndef RTLD_LOCAL\n#define RTLD_LOCAL 0\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL RTLD_LOCAL\n#endif\n\n#endif /* !PyMPI_DYNLOAD_H */\n\n/*\n  Local variables:\n  c-basic-offset: 2\n  indent-tabs-mode: nil\n  End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/lib-mpi/compat/sicortex.h": "#ifndef PyMPI_COMPAT_SICORTEX_H\n#define PyMPI_COMPAT_SICORTEX_H\n\n#include \"../../dynload.h\"\n\nstatic void PyMPI_SCMPI_dlopen_libslurm(void)\n{\n  (void)dlopen(\"libslurm.so\", RTLD_NOW|RTLD_GLOBAL|RTLD_NOLOAD);\n  (void)dlerror();\n}\n\nstatic int PyMPI_SCMPI_MPI_Init(int *argc, char ***argv)\n{\n  PyMPI_SCMPI_dlopen_libslurm();\n  return MPI_Init(argc, argv);\n}\n#undef  MPI_Init\n#define MPI_Init PyMPI_SCMPI_MPI_Init\n\nstatic int PyMPI_SCMPI_MPI_Init_thread(int *argc, char ***argv,\n                                       int required, int *provided)\n{\n  PyMPI_SCMPI_dlopen_libslurm();\n  return MPI_Init_thread(argc, argv, required, provided);\n}\n#undef  MPI_Init_thread\n#define MPI_Init_thread PyMPI_SCMPI_MPI_Init_thread\n\n#endif /* !PyMPI_COMPAT_SICORTEX_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/lib-mpi/compat/pcmpi.h": "#ifndef PyMPI_COMPAT_PCMPI_H\n#define PyMPI_COMPAT_PCMPI_H\n\n/* ---------------------------------------------------------------- */\n\nstatic int PyMPI_PCMPI_MPI_Request_get_status(MPI_Request request,\n                                              int *flag,\n                                              MPI_Status *status)\n{\n  MPI_Status sts;\n  if (!status ||\n      status == MPI_STATUS_IGNORE ||\n      status == MPI_STATUSES_IGNORE) status = &sts;\n  return MPI_Request_get_status(request, flag, status);\n}\n#undef  MPI_Request_get_status\n#define MPI_Request_get_status PyMPI_PCMPI_MPI_Request_get_status\n\n/* ---------------------------------------------------------------- */\n\nstatic int PyMPI_PCMPI_MPI_Win_get_attr(MPI_Win win,\n                                        int keyval,\n                                        void *attrval,\n                                        int *flag)\n{\n  int ierr;\n  ierr = MPI_Win_get_attr(win, keyval, attrval, flag);\n  if (ierr == MPI_SUCCESS && keyval == MPI_WIN_BASE && *flag)\n    *((void **)attrval) = **((void ***)attrval);\n  return ierr;\n}\n#undef  MPI_Win_get_attr\n#define MPI_Win_get_attr PyMPI_PCMPI_MPI_Win_get_attr\n\n/* ---------------------------------------------------------------- */\n\n#ifndef PCMPI_DLOPEN_LIBMPI\n#define PCMPI_DLOPEN_LIBMPI 1\n#endif\n\n#if PCMPI_DLOPEN_LIBMPI\n#if HAVE_DLOPEN\n\n#include \"../../dynload.h\"\n\nstatic void PyMPI_PCMPI_dlopen_libmpi(void)\n{\n  void *handle1 = (void *)0;\n  void *handle2 = (void *)0;\n  int mode = RTLD_NOW | RTLD_GLOBAL;\n  #ifdef RTLD_NOLOAD\n  mode |= RTLD_NOLOAD;\n  #endif\n#if defined(__APPLE__)\n  if (!handle1) handle1 = dlopen(\"libmpi.2.dylib\", mode);\n  if (!handle1) handle1 = dlopen(\"libmpi.1.dylib\", mode);\n  if (!handle1) handle1 = dlopen(\"libmpi.dylib\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.2.dylib\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.1.dylib\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.dylib\", mode);\n#else\n  if (!handle1) handle1 = dlopen(\"libmpi.so.2\", mode);\n  if (!handle1) handle1 = dlopen(\"libmpi.so.1\", mode);\n  if (!handle1) handle1 = dlopen(\"libmpi.so\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.so.2\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.so.1\", mode);\n  if (!handle2) handle2 = dlopen(\"libmpio.so\", mode);\n#endif\n}\n\nstatic int PyMPI_PCMPI_MPI_Init(int *argc, char ***argv)\n{\n  PyMPI_PCMPI_dlopen_libmpi();\n  return MPI_Init(argc, argv);\n}\n#undef  MPI_Init\n#define MPI_Init PyMPI_PCMPI_MPI_Init\n\nstatic int PyMPI_PCMPI_MPI_Init_thread(int *argc, char ***argv,\n                                       int required, int *provided)\n{\n  PyMPI_PCMPI_dlopen_libmpi();\n  return MPI_Init_thread(argc, argv, required, provided);\n}\n#undef  MPI_Init_thread\n#define MPI_Init_thread PyMPI_PCMPI_MPI_Init_thread\n\n#endif /* !HAVE_DLOPEN */\n#endif /* !PCMPI_DLOPEN_LIBMPI */\n\n/* ---------------------------------------------------------------- */\n\n#endif /* !PyMPI_COMPAT_PCMPI_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/lib-mpi/compat/openmpi.h": "#ifndef PyMPI_COMPAT_OPENMPI_H\n#define PyMPI_COMPAT_OPENMPI_H\n\n/* ------------------------------------------------------------------------- */\n/* ------------------------------------------------------------------------- */\n\n/*\n * The hackery below redefines the actuall calls to 'MPI_Init()' and\n * 'MPI_Init_thread()' in order to preload the main MPI dynamic\n * library with appropriate flags to 'dlopen()' ensuring global\n * availability of library symbols.\n */\n\n#if !defined(OPENMPI_DLOPEN_LIBMPI) && defined(OMPI_MAJOR_VERSION)\n#if OMPI_MAJOR_VERSION >= 3 && OMPI_MAJOR_VERSION < 10\n#define OPENMPI_DLOPEN_LIBMPI 0\n#endif\n#endif\n\n#ifndef OPENMPI_DLOPEN_LIBMPI\n#define OPENMPI_DLOPEN_LIBMPI 1\n#endif\n\n#if OPENMPI_DLOPEN_LIBMPI\n#if HAVE_DLOPEN\n\n#include \"../../dynload.h\"\n\n/*\nstatic void * my_dlopen(const char *name, int mode) {\n  void *handle;\n  static int called = 0;\n  if (!called) {\n    called = 1;\n    #if HAVE_DLFCN_H\n    printf(\"HAVE_DLFCN_H: yes\\n\");\n    #else\n    printf(\"HAVE_DLFCN_H: no\\n\");\n    #endif\n    printf(\"\\n\");\n    printf(\"RTLD_LAZY:    0x%X\\n\", RTLD_LAZY   );\n    printf(\"RTLD_NOW:     0x%X\\n\", RTLD_NOW    );\n    printf(\"RTLD_LOCAL:   0x%X\\n\", RTLD_LOCAL  );\n    printf(\"RTLD_GLOBAL:  0x%X\\n\", RTLD_GLOBAL );\n    #ifdef RTLD_NOLOAD\n    printf(\"RTLD_NOLOAD:  0x%X\\n\", RTLD_NOLOAD );\n    #endif\n    printf(\"\\n\");\n  }\n  handle = dlopen(name, mode);\n  printf(\"dlopen(\\\"%s\\\",0x%X) -> %p\\n\", name, mode, handle);\n  printf(\"dlerror() -> %s\\n\\n\", dlerror());\n  return handle;\n}\n#define dlopen my_dlopen\n*/\n\nstatic void PyMPI_OPENMPI_dlopen_libmpi(void)\n{\n  void *handle = 0;\n  int mode = RTLD_NOW | RTLD_GLOBAL;\n#if defined(__APPLE__)\n  /* macOS */\n  #ifdef RTLD_NOLOAD\n  mode |= RTLD_NOLOAD;\n  #endif\n  #if defined(OMPI_MAJOR_VERSION)\n  #if OMPI_MAJOR_VERSION == 3\n  if (!handle) handle = dlopen(\"libmpi.40.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 2\n  if (!handle) handle = dlopen(\"libmpi.20.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 10\n  if (!handle) handle = dlopen(\"libmpi.12.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 6\n  if (!handle) handle = dlopen(\"libmpi.1.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1\n  if (!handle) handle = dlopen(\"libmpi.0.dylib\", mode);\n  #endif\n  #endif\n  if (!handle) handle = dlopen(\"libmpi.dylib\", mode);\n#else\n  /* GNU/Linux and others */\n  #ifdef RTLD_NOLOAD\n  mode |= RTLD_NOLOAD;\n  #endif\n  #if defined(OMPI_MAJOR_VERSION)\n  #if OMPI_MAJOR_VERSION >= 10 /* IBM Spectrum MPI */\n  if (!handle) handle = dlopen(\"libmpi_ibm.so.2\", mode);\n  if (!handle) handle = dlopen(\"libmpi_ibm.so.1\", mode);\n  if (!handle) handle = dlopen(\"libmpi_ibm.so\", mode);\n  #elif OMPI_MAJOR_VERSION == 3\n  if (!handle) handle = dlopen(\"libmpi.so.40\", mode);\n  #elif OMPI_MAJOR_VERSION == 2\n  if (!handle) handle = dlopen(\"libmpi.so.20\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 10\n  if (!handle) handle = dlopen(\"libmpi.so.12\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 6\n  if (!handle) handle = dlopen(\"libmpi.so.1\", mode);\n  #elif OMPI_MAJOR_VERSION == 1\n  if (!handle) handle = dlopen(\"libmpi.so.0\", mode);\n  #endif\n  #endif\n  if (!handle) handle = dlopen(\"libmpi.so\", mode);\n#endif\n}\n\nstatic int PyMPI_OPENMPI_MPI_Init(int *argc, char ***argv)\n{\n  PyMPI_OPENMPI_dlopen_libmpi();\n  return MPI_Init(argc, argv);\n}\n#undef  MPI_Init\n#define MPI_Init PyMPI_OPENMPI_MPI_Init\n\nstatic int PyMPI_OPENMPI_MPI_Init_thread(int *argc, char ***argv,\n                                         int required, int *provided)\n{\n  PyMPI_OPENMPI_dlopen_libmpi();\n  return MPI_Init_thread(argc, argv, required, provided);\n}\n#undef  MPI_Init_thread\n#define MPI_Init_thread PyMPI_OPENMPI_MPI_Init_thread\n\n#endif /* !HAVE_DLOPEN */\n#endif /* !OPENMPI_DLOPEN_LIBMPI */\n\n/* ------------------------------------------------------------------------- */\n/* ------------------------------------------------------------------------- */\n\n\n/* ------------------------------------------------------------------------- */\n\n#if (defined(OMPI_MAJOR_VERSION) && \\\n     defined(OMPI_MINOR_VERSION) && \\\n     defined(OMPI_RELEASE_VERSION))\n#define PyMPI_OPENMPI_VERSION ((OMPI_MAJOR_VERSION   * 10000) + \\\n                               (OMPI_MINOR_VERSION   * 100)   + \\\n                               (OMPI_RELEASE_VERSION * 1))\n#else\n#define PyMPI_OPENMPI_VERSION 10000\n#endif\n\n/* ------------------------------------------------------------------------- */\n\n/*\n * Open MPI < 1.1.3 generates an error when MPI_File_get_errhandler()\n * is called with the predefined error handlers MPI_ERRORS_RETURN and\n * MPI_ERRORS_ARE_FATAL.\n */\n\n#if PyMPI_OPENMPI_VERSION < 10103\n\nstatic int PyMPI_OPENMPI_Errhandler_free(MPI_Errhandler *errhandler)\n{\n  if (errhandler && ((*errhandler == MPI_ERRORS_RETURN) ||\n                     (*errhandler == MPI_ERRORS_ARE_FATAL))) {\n    *errhandler = MPI_ERRHANDLER_NULL;\n    return MPI_SUCCESS;\n  }\n  return MPI_Errhandler_free(errhandler);\n}\n#undef  MPI_Errhandler_free\n#define MPI_Errhandler_free PyMPI_OPENMPI_Errhandler_free\n\n#endif /* !(PyMPI_OPENMPI_VERSION < 10103) */\n\n/* ------------------------------------------------------------------------- */\n\n/*\n * Open MPI 1.1 generates an error when MPI_File_get_errhandler() is\n * called with the MPI_FILE_NULL handle.  The code below try to fix\n * this bug by intercepting the calls to the functions setting and\n * getting the error handlers for MPI_File's.\n */\n\n#if PyMPI_OPENMPI_VERSION < 10200\n\nstatic MPI_Errhandler PyMPI_OPENMPI_FILE_NULL_ERRHANDLER = (MPI_Errhandler)0;\n\nstatic int PyMPI_OPENMPI_File_get_errhandler(MPI_File file,\n                                             MPI_Errhandler *errhandler)\n{\n  if (file == MPI_FILE_NULL) {\n    if (PyMPI_OPENMPI_FILE_NULL_ERRHANDLER == (MPI_Errhandler)0) {\n      PyMPI_OPENMPI_FILE_NULL_ERRHANDLER = MPI_ERRORS_RETURN;\n    }\n    *errhandler = PyMPI_OPENMPI_FILE_NULL_ERRHANDLER;\n    return MPI_SUCCESS;\n  }\n  return MPI_File_get_errhandler(file, errhandler);\n}\n#undef  MPI_File_get_errhandler\n#define MPI_File_get_errhandler PyMPI_OPENMPI_File_get_errhandler\n\nstatic int PyMPI_OPENMPI_File_set_errhandler(MPI_File file,\n                                             MPI_Errhandler errhandler)\n{\n  int ierr = MPI_File_set_errhandler(file, errhandler);\n  if (ierr != MPI_SUCCESS) return ierr;\n  if (file == MPI_FILE_NULL) {\n    PyMPI_OPENMPI_FILE_NULL_ERRHANDLER = errhandler;\n  }\n  return ierr;\n}\n#undef  MPI_File_set_errhandler\n#define MPI_File_set_errhandler PyMPI_OPENMPI_File_set_errhandler\n\n#endif /* !(PyMPI_OPENMPI_VERSION < 10200) */\n\n/* ---------------------------------------------------------------- */\n\n#if PyMPI_OPENMPI_VERSION < 10301\n\nstatic MPI_Fint PyMPI_OPENMPI_File_c2f(MPI_File file)\n{\n  if (file == MPI_FILE_NULL) return (MPI_Fint)0;\n  return MPI_File_c2f(file);\n}\n#define MPI_File_c2f PyMPI_OPENMPI_File_c2f\n\n#endif /* !(PyMPI_OPENMPI_VERSION < 10301) */\n\n/* ------------------------------------------------------------------------- */\n\n#if PyMPI_OPENMPI_VERSION < 10402\n\nstatic int PyMPI_OPENMPI_MPI_Cancel(MPI_Request *request)\n{\n  if (request && *request == MPI_REQUEST_NULL) {\n    MPI_Comm_call_errhandler(MPI_COMM_WORLD, MPI_ERR_REQUEST);\n    return MPI_ERR_REQUEST;\n  }\n  return MPI_Cancel(request);\n}\n#undef  MPI_Cancel\n#define MPI_Cancel PyMPI_OPENMPI_MPI_Cancel\n\nstatic int PyMPI_OPENMPI_MPI_Request_free(MPI_Request *request)\n{\n  if (request && *request == MPI_REQUEST_NULL) {\n    MPI_Comm_call_errhandler(MPI_COMM_WORLD, MPI_ERR_REQUEST);\n    return MPI_ERR_REQUEST;\n  }\n  return MPI_Request_free(request);\n}\n#undef  MPI_Request_free\n#define MPI_Request_free PyMPI_OPENMPI_MPI_Request_free\n\nstatic int PyMPI_OPENMPI_MPI_Win_get_errhandler(MPI_Win win,\n                                                MPI_Errhandler *errhandler)\n{\n  if (win == MPI_WIN_NULL) {\n    MPI_Comm_call_errhandler(MPI_COMM_WORLD, MPI_ERR_WIN);\n    return MPI_ERR_WIN;\n  }\n  return MPI_Win_get_errhandler(win, errhandler);\n}\n#undef  MPI_Win_get_errhandler\n#define MPI_Win_get_errhandler PyMPI_OPENMPI_MPI_Win_get_errhandler\n\nstatic int PyMPI_OPENMPI_MPI_Win_set_errhandler(MPI_Win win,\n                                                MPI_Errhandler errhandler)\n{\n  if (win == MPI_WIN_NULL) {\n    MPI_Comm_call_errhandler(MPI_COMM_WORLD, MPI_ERR_WIN);\n    return MPI_ERR_WIN;\n  }\n  return MPI_Win_set_errhandler(win, errhandler);\n}\n#undef  MPI_Win_set_errhandler\n#define MPI_Win_set_errhandler PyMPI_OPENMPI_MPI_Win_set_errhandler\n\n#endif /* !(PyMPI_OPENMPI_VERSION < 10402) */\n\n/* ------------------------------------------------------------------------- */\n\n/*\n * Open MPI 1.7 tries to set status even in the case of MPI_STATUS_IGNORE.\n */\n\n#if PyMPI_OPENMPI_VERSION >= 10700 && PyMPI_OPENMPI_VERSION < 10800\nstatic int PyMPI_OPENMPI_MPI_Mrecv(void *buf, int count, MPI_Datatype type,\n                                   MPI_Message *message, MPI_Status *status)\n{\n  MPI_Status sts; if (status == MPI_STATUS_IGNORE) status = &sts;\n  return MPI_Mrecv(buf, count, type, message, status);\n}\n#undef  MPI_Mrecv\n#define MPI_Mrecv PyMPI_OPENMPI_MPI_Mrecv\n#endif  /* !(PyMPI_OPENMPI_VERSION > 10700) */\n\n/* ------------------------------------------------------------------------- */\n\n#endif /* !PyMPI_COMPAT_OPENMPI_H */\n\n/*\n  Local Variables:\n  c-basic-offset: 2\n  indent-tabs-mode: nil\n  End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/src/mpi4py/__init__.py": "# Author:  Lisandro Dalcin\n# Contact: dalcinl@gmail.com\n\"\"\"\nThis is the **MPI for Python** package.\n\nWhat is *MPI*?\n==============\n\nThe *Message Passing Interface*, is a standardized and portable\nmessage-passing system designed to function on a wide variety of\nparallel computers. The standard defines the syntax and semantics of\nlibrary routines and allows users to write portable programs in the\nmain scientific programming languages (Fortran, C, or C++). Since\nits release, the MPI specification has become the leading standard\nfor message-passing libraries for parallel computers.\n\nWhat is *MPI for Python*?\n=========================\n\n*MPI for Python* provides MPI bindings for the Python programming\nlanguage, allowing any Python program to exploit multiple processors.\nThis package is constructed on top of the MPI-1/2 specifications and\nprovides an object oriented interface which closely follows MPI-2 C++\nbindings.\n\"\"\"\n\n__version__ = '3.0.0'\n__author__ = 'Lisandro Dalcin'\n__credits__ = 'MPI Forum, MPICH Team, Open MPI Team'\n\n\n__all__ = ['MPI']\n\n\ndef get_include():\n    \"\"\"Return the directory in the package that contains header files.\n\n    Extension modules that need to compile against mpi4py should use\n    this function to locate the appropriate include directory. Using\n    Python distutils (or perhaps NumPy distutils)::\n\n      import mpi4py\n      Extension('extension_name', ...\n                include_dirs=[..., mpi4py.get_include()])\n\n    \"\"\"\n    from os.path import join, dirname\n    return join(dirname(__file__), 'include')\n\n\ndef get_config():\n    \"\"\"Return a dictionary with information about MPI.\"\"\"\n    from os.path import join, dirname\n    try:\n        from configparser import ConfigParser\n    except ImportError:  # pragma: no cover\n        from ConfigParser import ConfigParser\n    parser = ConfigParser()\n    parser.read(join(dirname(__file__), 'mpi.cfg'))\n    return dict(parser.items('mpi'))\n\n\ndef rc(**kargs):  # pylint: disable=invalid-name\n    \"\"\"Runtime configuration options.\n\n    Parameters\n    ----------\n    initialize : bool\n        Automatic MPI initialization at import (default: True).\n    threads : bool\n        Request for thread support (default: True).\n    thread_level : {'multiple', 'serialized', 'funneled', 'single'}\n        Level of thread support to request (default: 'multiple').\n    finalize : None or bool\n        Automatic MPI finalization at exit (default: None).\n    fast_reduce : bool\n        Use tree-based reductions for objects (default: True).\n    recv_mprobe : bool\n        Use matched probes to receive objects (default: True).\n    errors : {'exception', 'default', 'fatal'}\n        Error handling policy (default: 'exception').\n\n    \"\"\"\n    for key in kargs:\n        if not hasattr(rc, key):\n            raise TypeError(\"unexpected argument '{0}'\".format(key))\n    for key, value in kargs.items():\n        setattr(rc, key, value)\n\nrc.initialize = True\nrc.threads = True\nrc.thread_level = 'multiple'\nrc.finalize = None\nrc.fast_reduce = True\nrc.recv_mprobe = True\nrc.errors = 'exception'\n__import__('sys').modules[__name__ + '.rc'] = rc\n\n\ndef profile(name, **kargs):\n    \"\"\"Support for the MPI profiling interface.\n\n    Parameters\n    ----------\n    name : str\n       Name of the profiler library to load.\n    path : list of str, optional\n       Additional paths to search for the profiler.\n    logfile : str, optional\n       Filename prefix for dumping profiler output.\n\n    \"\"\"\n    import sys\n    import os\n    from .dl import dlopen, dlerror, RTLD_NOW, RTLD_GLOBAL\n\n    def lookup_dylib(name, path):\n        # pylint: disable=missing-docstring\n        pattern = []\n        if sys.platform.startswith('win'):  # pragma: no cover\n            pattern.append(('', '.dll'))\n        elif sys.platform == 'darwin':  # pragma: no cover\n            pattern.append(('lib', '.dylib'))\n        elif os.name == 'posix':  # pragma: no cover\n            pattern.append(('lib', '.so'))\n        pattern.append(('', ''))\n        for pth in path:\n            for (lib, dso) in pattern:\n                filename = os.path.join(pth, lib + name + dso)\n                if os.path.isfile(filename):\n                    return os.path.abspath(filename)\n        return None\n\n    logfile = kargs.pop('logfile', None)\n    if logfile:\n        if name in ('mpe',):\n            if 'MPE_LOGFILE_PREFIX' not in os.environ:\n                os.environ['MPE_LOGFILE_PREFIX'] = logfile\n        if name in ('vt', 'vt-mpi', 'vt-hyb'):\n            if 'VT_FILE_PREFIX' not in os.environ:\n                os.environ['VT_FILE_PREFIX'] = logfile\n\n    path = kargs.pop('path', [])\n    if isinstance(path, str):\n        path = [path]\n    else:\n        path = list(path)\n    prefix = os.path.dirname(__file__)\n    path.append(os.path.join(prefix, 'lib-pmpi'))\n    filename = lookup_dylib(name, path)\n    if filename is None:\n        raise ValueError(\"profiler '{0}' not found\".format(name))\n\n    handle = dlopen(filename, RTLD_NOW | RTLD_GLOBAL)\n    if handle:\n        profile.registry.append((name, (handle, filename)))\n    else:\n        from warnings import warn\n        warn(dlerror())\n\nprofile.registry = []\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/test/test_dl.py": "import mpiunittest as unittest\nimport sys, os\ntry:\n    from mpi4py import dl\nexcept ImportError:\n    dl = None\n\n@unittest.skipIf(dl is None, 'mpi4py-dl')\nclass TestDL(unittest.TestCase):\n\n    def testDL1(self):\n        if sys.platform == 'darwin':\n            libm = 'libm.dylib'\n        else:\n            libm = 'libm.so'\n\n        handle = dl.dlopen(libm, dl.RTLD_LOCAL|dl.RTLD_LAZY)\n        if handle == 0 and sys.platform.startswith('linux'):\n            self.assertTrue(dl.dlerror() is not None)\n            handle = dl.dlopen('libm.so.6', dl.RTLD_LOCAL|dl.RTLD_LAZY)\n        self.assertTrue(handle != 0)\n        self.assertTrue(dl.dlerror() is None)\n\n        symbol = dl.dlsym(handle, 'sqrt')\n        self.assertTrue(symbol != 0)\n        self.assertTrue(dl.dlerror() is None)\n\n        symbol = dl.dlsym(handle, 'xxxxx')\n        self.assertTrue(symbol == 0)\n        self.assertTrue(dl.dlerror() is not None)\n\n        ierr = dl.dlclose(handle)\n        self.assertTrue(ierr == 0)\n        self.assertTrue(dl.dlerror() is None)\n\n    @unittest.skipIf(hasattr(sys, 'pypy_version_info') and\n                     sys.platform == 'darwin',\n                     'pypy|darwin')\n    def testDL2(self):\n        handle = dl.dlopen(None, dl.RTLD_GLOBAL|dl.RTLD_NOW)\n        self.assertTrue(handle != 0)\n        self.assertTrue(dl.dlerror() is None)\n\n        symbol = dl.dlsym(handle, 'malloc')\n        self.assertTrue(symbol != 0)\n        self.assertTrue(dl.dlerror() is None)\n\n        symbol = dl.dlsym(handle, '!@#$%^&*()')\n        self.assertTrue(symbol == 0)\n        self.assertTrue(dl.dlerror() is not None)\n\n        ierr = dl.dlclose(handle)\n        self.assertTrue(ierr == 0)\n        self.assertTrue(dl.dlerror() is None)\n\n    def testDL3(self):\n        symbol = dl.dlsym(None, 'malloc')\n        self.assertTrue(symbol != 0)\n        self.assertTrue(dl.dlerror() is None)\n\n        symbol = dl.dlsym(None, '!@#$%^&*()')\n        self.assertTrue(symbol == 0)\n        self.assertTrue(dl.dlerror() is not None)\n\n        ierr = dl.dlclose(None)\n        self.assertTrue(ierr == 0)\n        self.assertTrue(dl.dlerror() is None)\n\n    def testDL4(self):\n        handle = dl.dlopen('xxxxx', dl.RTLD_LOCAL|dl.RTLD_LAZY)\n        self.assertTrue(handle == 0)\n        self.assertTrue(dl.dlerror() is not None)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/CHANGES.html": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta name=\"generator\" content=\"Docutils 0.13.1: http://docutils.sourceforge.net/\" />\n<title>CHANGES: MPI for Python</title>\n<meta name=\"author\" content=\"Lisandro Dalcin\" />\n<style type=\"text/css\">\n\n/*\n:Author: David Goodger (goodger@python.org)\n:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $\n:Copyright: This stylesheet has been placed in the public domain.\n\nDefault cascading style sheet for the HTML output of Docutils.\n\nSee http://docutils.sf.net/docs/howto/html-stylesheets.html for how to\ncustomize this style sheet.\n*/\n\n/* used to remove borders from tables and images */\n.borderless, table.borderless td, table.borderless th {\n  border: 0 }\n\ntable.borderless td, table.borderless th {\n  /* Override padding for \"table.docutils td\" with \"! important\".\n     The right padding separates the table cells. */\n  padding: 0 0.5em 0 0 ! important }\n\n.first {\n  /* Override more specific margin styles with \"! important\". */\n  margin-top: 0 ! important }\n\n.last, .with-subtitle {\n  margin-bottom: 0 ! important }\n\n.hidden {\n  display: none }\n\n.subscript {\n  vertical-align: sub;\n  font-size: smaller }\n\n.superscript {\n  vertical-align: super;\n  font-size: smaller }\n\na.toc-backref {\n  text-decoration: none ;\n  color: black }\n\nblockquote.epigraph {\n  margin: 2em 5em ; }\n\ndl.docutils dd {\n  margin-bottom: 0.5em }\n\nobject[type=\"image/svg+xml\"], object[type=\"application/x-shockwave-flash\"] {\n  overflow: hidden;\n}\n\n/* Uncomment (and remove this text!) to get bold-faced definition list terms\ndl.docutils dt {\n  font-weight: bold }\n*/\n\ndiv.abstract {\n  margin: 2em 5em }\n\ndiv.abstract p.topic-title {\n  font-weight: bold ;\n  text-align: center }\n\ndiv.admonition, div.attention, div.caution, div.danger, div.error,\ndiv.hint, div.important, div.note, div.tip, div.warning {\n  margin: 2em ;\n  border: medium outset ;\n  padding: 1em }\n\ndiv.admonition p.admonition-title, div.hint p.admonition-title,\ndiv.important p.admonition-title, div.note p.admonition-title,\ndiv.tip p.admonition-title {\n  font-weight: bold ;\n  font-family: sans-serif }\n\ndiv.attention p.admonition-title, div.caution p.admonition-title,\ndiv.danger p.admonition-title, div.error p.admonition-title,\ndiv.warning p.admonition-title, .code .error {\n  color: red ;\n  font-weight: bold ;\n  font-family: sans-serif }\n\n/* Uncomment (and remove this text!) to get reduced vertical space in\n   compound paragraphs.\ndiv.compound .compound-first, div.compound .compound-middle {\n  margin-bottom: 0.5em }\n\ndiv.compound .compound-last, div.compound .compound-middle {\n  margin-top: 0.5em }\n*/\n\ndiv.dedication {\n  margin: 2em 5em ;\n  text-align: center ;\n  font-style: italic }\n\ndiv.dedication p.topic-title {\n  font-weight: bold ;\n  font-style: normal }\n\ndiv.figure {\n  margin-left: 2em ;\n  margin-right: 2em }\n\ndiv.footer, div.header {\n  clear: both;\n  font-size: smaller }\n\ndiv.line-block {\n  display: block ;\n  margin-top: 1em ;\n  margin-bottom: 1em }\n\ndiv.line-block div.line-block {\n  margin-top: 0 ;\n  margin-bottom: 0 ;\n  margin-left: 1.5em }\n\ndiv.sidebar {\n  margin: 0 0 0.5em 1em ;\n  border: medium outset ;\n  padding: 1em ;\n  background-color: #ffffee ;\n  width: 40% ;\n  float: right ;\n  clear: right }\n\ndiv.sidebar p.rubric {\n  font-family: sans-serif ;\n  font-size: medium }\n\ndiv.system-messages {\n  margin: 5em }\n\ndiv.system-messages h1 {\n  color: red }\n\ndiv.system-message {\n  border: medium outset ;\n  padding: 1em }\n\ndiv.system-message p.system-message-title {\n  color: red ;\n  font-weight: bold }\n\ndiv.topic {\n  margin: 2em }\n\nh1.section-subtitle, h2.section-subtitle, h3.section-subtitle,\nh4.section-subtitle, h5.section-subtitle, h6.section-subtitle {\n  margin-top: 0.4em }\n\nh1.title {\n  text-align: center }\n\nh2.subtitle {\n  text-align: center }\n\nhr.docutils {\n  width: 75% }\n\nimg.align-left, .figure.align-left, object.align-left, table.align-left {\n  clear: left ;\n  float: left ;\n  margin-right: 1em }\n\nimg.align-right, .figure.align-right, object.align-right, table.align-right {\n  clear: right ;\n  float: right ;\n  margin-left: 1em }\n\nimg.align-center, .figure.align-center, object.align-center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\ntable.align-center {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.align-left {\n  text-align: left }\n\n.align-center {\n  clear: both ;\n  text-align: center }\n\n.align-right {\n  text-align: right }\n\n/* reset inner alignment in figures */\ndiv.align-right {\n  text-align: inherit }\n\n/* div.align-center * { */\n/*   text-align: left } */\n\n.align-top    {\n  vertical-align: top }\n\n.align-middle {\n  vertical-align: middle }\n\n.align-bottom {\n  vertical-align: bottom }\n\nol.simple, ul.simple {\n  margin-bottom: 1em }\n\nol.arabic {\n  list-style: decimal }\n\nol.loweralpha {\n  list-style: lower-alpha }\n\nol.upperalpha {\n  list-style: upper-alpha }\n\nol.lowerroman {\n  list-style: lower-roman }\n\nol.upperroman {\n  list-style: upper-roman }\n\np.attribution {\n  text-align: right ;\n  margin-left: 50% }\n\np.caption {\n  font-style: italic }\n\np.credits {\n  font-style: italic ;\n  font-size: smaller }\n\np.label {\n  white-space: nowrap }\n\np.rubric {\n  font-weight: bold ;\n  font-size: larger ;\n  color: maroon ;\n  text-align: center }\n\np.sidebar-title {\n  font-family: sans-serif ;\n  font-weight: bold ;\n  font-size: larger }\n\np.sidebar-subtitle {\n  font-family: sans-serif ;\n  font-weight: bold }\n\np.topic-title {\n  font-weight: bold }\n\npre.address {\n  margin-bottom: 0 ;\n  margin-top: 0 ;\n  font: inherit }\n\npre.literal-block, pre.doctest-block, pre.math, pre.code {\n  margin-left: 2em ;\n  margin-right: 2em }\n\npre.code .ln { color: grey; } /* line numbers */\npre.code, code { background-color: #eeeeee }\npre.code .comment, code .comment { color: #5C6576 }\npre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }\npre.code .literal.string, code .literal.string { color: #0C5404 }\npre.code .name.builtin, code .name.builtin { color: #352B84 }\npre.code .deleted, code .deleted { background-color: #DEB0A1}\npre.code .inserted, code .inserted { background-color: #A3D289}\n\nspan.classifier {\n  font-family: sans-serif ;\n  font-style: oblique }\n\nspan.classifier-delimiter {\n  font-family: sans-serif ;\n  font-weight: bold }\n\nspan.interpreted {\n  font-family: sans-serif }\n\nspan.option {\n  white-space: nowrap }\n\nspan.pre {\n  white-space: pre }\n\nspan.problematic {\n  color: red }\n\nspan.section-subtitle {\n  /* font-size relative to parent (h1..h6 element) */\n  font-size: 80% }\n\ntable.citation {\n  border-left: solid 1px gray;\n  margin-left: 1px }\n\ntable.docinfo {\n  margin: 2em 4em }\n\ntable.docutils {\n  margin-top: 0.5em ;\n  margin-bottom: 0.5em }\n\ntable.footnote {\n  border-left: solid 1px black;\n  margin-left: 1px }\n\ntable.docutils td, table.docutils th,\ntable.docinfo td, table.docinfo th {\n  padding-left: 0.5em ;\n  padding-right: 0.5em ;\n  vertical-align: top }\n\ntable.docutils th.field-name, table.docinfo th.docinfo-name {\n  font-weight: bold ;\n  text-align: left ;\n  white-space: nowrap ;\n  padding-left: 0 }\n\n/* \"booktabs\" style (no vertical lines) */\ntable.docutils.booktabs {\n  border: 0px;\n  border-top: 2px solid;\n  border-bottom: 2px solid;\n  border-collapse: collapse;\n}\ntable.docutils.booktabs * {\n  border: 0px;\n}\ntable.docutils.booktabs th {\n  border-bottom: thin solid;\n  text-align: left;\n}\n\nh1 tt.docutils, h2 tt.docutils, h3 tt.docutils,\nh4 tt.docutils, h5 tt.docutils, h6 tt.docutils {\n  font-size: 100% }\n\nul.auto-toc {\n  list-style-type: none }\n\n</style>\n</head>\n<body>\n<div class=\"document\" id=\"changes-mpi-for-python\">\n<h1 class=\"title\">CHANGES: MPI for Python</h1>\n<table class=\"docinfo\" frame=\"void\" rules=\"none\">\n<col class=\"docinfo-name\" />\n<col class=\"docinfo-content\" />\n<tbody valign=\"top\">\n<tr><th class=\"docinfo-name\">Author:</th>\n<td>Lisandro Dalcin</td></tr>\n<tr><th class=\"docinfo-name\">Contact:</th>\n<td><a class=\"first last reference external\" href=\"mailto:dalcinl&#37;&#52;&#48;gmail&#46;com\">dalcinl<span>&#64;</span>gmail<span>&#46;</span>com</a></td></tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"release-3-0-0-2017-11-08\">\n<h1>Release 3.0.0 [2017-11-08]</h1>\n<ul>\n<li><p class=\"first\">New features:</p>\n<ul>\n<li><p class=\"first\"><cite>mpi4py.futures</cite>: Execute computations asynchronously using a pool\nof MPI processes. This package is based on <tt class=\"docutils literal\">concurrent.futures</tt>\nfrom the Python standard library.</p>\n</li>\n<li><p class=\"first\"><cite>mpi4py.run</cite>: Run Python code and abort execution in case of\nunhandled exceptions to prevent deadlocks.</p>\n</li>\n<li><p class=\"first\"><cite>mpi4py.bench</cite>: Run basic MPI benchmarks and tests.</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\">Enhancements:</p>\n<ul>\n<li><p class=\"first\">Lowercase, pickle-based collective communication calls are now\nthread-safe through the use of fine-grained locking.</p>\n</li>\n<li><p class=\"first\">The <tt class=\"docutils literal\">MPI</tt> module now exposes a <tt class=\"docutils literal\">memory</tt> type which is a\nlightweight variant of the builtin <tt class=\"docutils literal\">memoryview</tt> type, but\nexposes both the legacy Python 2 and the modern Python 3 buffer\ninterface under a Python 2 runtime.</p>\n</li>\n<li><p class=\"first\">The <tt class=\"docutils literal\">MPI.Comm.Alltoallw()</tt> method now uses <tt class=\"docutils literal\">count=1</tt> and\n<tt class=\"docutils literal\">displ=0</tt> as defaults, assuming that messages are specified\nthrough user-defined datatypes.</p>\n</li>\n<li><p class=\"first\">The <tt class=\"docutils literal\"><span class=\"pre\">Request.Wait[all]()</span></tt> methods now return <tt class=\"docutils literal\">True</tt> to match\nthe interface of <tt class=\"docutils literal\"><span class=\"pre\">Request.Test[all]()</span></tt>.</p>\n</li>\n<li><p class=\"first\">The <tt class=\"docutils literal\">Win</tt> class now implements the Python buffer interface.</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\">Backward-incompatible changes:</p>\n<ul>\n<li><p class=\"first\">The <tt class=\"docutils literal\">buf</tt> argument of the <tt class=\"docutils literal\">MPI.Comm.recv()</tt> method is\ndeprecated, passing anything but <tt class=\"docutils literal\">None</tt> emits a warning.</p>\n</li>\n<li><p class=\"first\">The <tt class=\"docutils literal\">MPI.Win.memory</tt> property was removed, use the\n<tt class=\"docutils literal\">MPI.Win.tomemory()</tt> method instead.</p>\n</li>\n<li><p class=\"first\">Executing <tt class=\"docutils literal\">python <span class=\"pre\">-m</span> mpi4py</tt> in the command line is now\nequivalent to <tt class=\"docutils literal\">python <span class=\"pre\">-m</span> mpi4py.run</tt>. For the former behavior,\nuse <tt class=\"docutils literal\">python <span class=\"pre\">-m</span> mpi4py.bench</tt>.</p>\n</li>\n<li><p class=\"first\">Python 2.6 and 3.2 are no longer supported. The <tt class=\"docutils literal\">mpi4py.MPI</tt>\nmodule may still build and partially work, but other pure-Python\nmodules under the <tt class=\"docutils literal\">mpi4py</tt> namespace will not.</p>\n</li>\n<li><p class=\"first\">Windows: Remove support for legacy MPICH2, Open MPI, and DeinoMPI.</p>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-2-0-0-2015-10-18\">\n<h1>Release 2.0.0 [2015-10-18]</h1>\n<ul>\n<li><p class=\"first\">Support for MPI-3 features.</p>\n<ul>\n<li><p class=\"first\">Matched probes and receives.</p>\n</li>\n<li><p class=\"first\">Nonblocking collectives.</p>\n</li>\n<li><p class=\"first\">Neighborhood collectives.</p>\n</li>\n<li><p class=\"first\">New communicator constructors.</p>\n</li>\n<li><p class=\"first\">Request-based RMA operations.</p>\n</li>\n<li><p class=\"first\">New RMA communication and synchronisation calls.</p>\n</li>\n<li><p class=\"first\">New window constructors.</p>\n</li>\n<li><p class=\"first\">New datatype constructor.</p>\n</li>\n<li><p class=\"first\">New C++ boolean and floating complex datatypes.</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\">Support for MPI-2 features not included in previous releases.</p>\n<ul>\n<li><p class=\"first\">Generalized All-to-All collective (<tt class=\"docutils literal\">Comm.Alltoallw()</tt>)</p>\n</li>\n<li><p class=\"first\">User-defined data representations (<tt class=\"docutils literal\">Register_datarep()</tt>)</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\">New scalable implementation of reduction operations for Python\nobjects. This code is based on binomial tree algorithms using\npoint-to-point communication and duplicated communicator\ncontexts. To disable this feature, use\n<tt class=\"docutils literal\">mpi4py.rc.fast_reduce = False</tt>.</p>\n</li>\n<li><p class=\"first\">Backward-incompatible changes:</p>\n<ul>\n<li><p class=\"first\">Python 2.4, 2.5, 3.0 and 3.1 are no longer supported.</p>\n</li>\n<li><p class=\"first\">Default MPI error handling policies are overriden. After import,\nmpi4py sets the <tt class=\"docutils literal\">ERRORS_RETURN</tt> error handler in <tt class=\"docutils literal\">COMM_SELF</tt>\nand <tt class=\"docutils literal\">COMM_WORLD</tt>, as well as any new <tt class=\"docutils literal\">Comm</tt>, <tt class=\"docutils literal\">Win</tt>, or\n<tt class=\"docutils literal\">File</tt> instance created through mpi4py, thus effectively\nignoring the MPI rules about error handler inheritance.  This way,\nMPI errors translate to Python exceptions.  To disable this\nbehavior and use the standard MPI error handling rules, use\n<tt class=\"docutils literal\">mpi4py.rc.errors = 'default'</tt>.</p>\n</li>\n<li><p class=\"first\">Change signature of all send methods,\n<tt class=\"docutils literal\">dest</tt> is a required argument.</p>\n</li>\n<li><p class=\"first\">Change signature of all receive and probe methods,\n<tt class=\"docutils literal\">source</tt> defaults to <tt class=\"docutils literal\">ANY_SOURCE</tt>,\n<tt class=\"docutils literal\">tag</tt> defaults to <tt class=\"docutils literal\">ANY_TAG</tt>.</p>\n</li>\n<li><p class=\"first\">Change signature of send lowercase-spelling methods,\n<tt class=\"docutils literal\">obj</tt> arguments are not mandatory.</p>\n</li>\n<li><p class=\"first\">Change signature of recv lowercase-spelling methods,\nrenamed 'obj' arguments to 'buf'.</p>\n</li>\n<li><p class=\"first\">Change <tt class=\"docutils literal\">Request.Waitsome()</tt> and <tt class=\"docutils literal\">Request.Testsome()</tt>\nto return <tt class=\"docutils literal\">None</tt> or <tt class=\"docutils literal\">list</tt>.</p>\n</li>\n<li><p class=\"first\">Change signature of all lowercase-spelling collectives,\n<tt class=\"docutils literal\">sendobj</tt> arguments are now mandatory,\n<tt class=\"docutils literal\">recvobj</tt> arguments were removed.</p>\n</li>\n<li><p class=\"first\">Reduction operations <tt class=\"docutils literal\">MAXLOC</tt> and <tt class=\"docutils literal\">MINLOC</tt> are no longer\nspecial-cased in lowercase-spelling methods <tt class=\"docutils literal\"><span class=\"pre\">Comm.[all]reduce()</span></tt>\nand <tt class=\"docutils literal\"><span class=\"pre\">Comm.[ex]scan()</span></tt>, the input object must be specified as a\ntuple <tt class=\"docutils literal\">(obj, location)</tt>.</p>\n</li>\n<li><p class=\"first\">Change signature of name publishing functions.\nThe new signatures are\n<tt class=\"docutils literal\">Publish_name(service_name, port_name, info=INFO_NULL)</tt> and\n<tt class=\"docutils literal\">Unpublish_name(service_name, port_name, info=INFO_NULL)`</tt>.</p>\n</li>\n<li><p class=\"first\"><tt class=\"docutils literal\">Win</tt> instances now cache Python objects exposing memory by\nkeeping references instead of using MPI attribute caching.</p>\n</li>\n<li><p class=\"first\">Change signature of <tt class=\"docutils literal\">Win.Lock()</tt>.\nThe new signature is\n<tt class=\"docutils literal\">Win.Lock(rank, lock_type=LOCK_EXCLUSIVE, assertion=0)</tt>.</p>\n</li>\n<li><p class=\"first\">Move <tt class=\"docutils literal\">Cartcomm.Map()</tt> to <tt class=\"docutils literal\">Intracomm.Cart_map()</tt>.</p>\n</li>\n<li><p class=\"first\">Move <tt class=\"docutils literal\">Graphcomm.Map()</tt> to <tt class=\"docutils literal\">Intracomm.Graph_map()</tt>.</p>\n</li>\n<li><p class=\"first\">Remove the <tt class=\"docutils literal\">mpi4py.MPE</tt> module.</p>\n</li>\n<li><p class=\"first\">Rename the Cython definition file for use with <tt class=\"docutils literal\">cimport</tt>\nstatement from <tt class=\"docutils literal\">mpi_c.pxd</tt> to <tt class=\"docutils literal\">libmpi.pxd</tt>.</p>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-3-1-2013-08-07\">\n<h1>Release 1.3.1 [2013-08-07]</h1>\n<ul>\n<li><p class=\"first\">Regenerate C wrappers with Cython 0.19.1 to support Python 3.3.</p>\n</li>\n<li><p class=\"first\">Install <tt class=\"docutils literal\">*.pxd</tt> files in <tt class=\"docutils literal\"><span class=\"pre\">&lt;site-packages&gt;/mpi4py</span></tt> to ease the\nsupport for Cython's <tt class=\"docutils literal\">cimport</tt> statement in code requiring to\naccess mpi4py internals.</p>\n</li>\n<li><p class=\"first\">As a side-effect of using Cython 0.19.1, ancient Python 2.3 is no\nlonger supported. If you really need it, you can install an older\nCython and run <tt class=\"docutils literal\">python setup.py build_src <span class=\"pre\">--force</span></tt>.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-3-2012-01-20\">\n<h1>Release 1.3 [2012-01-20]</h1>\n<ul>\n<li><p class=\"first\">Now <tt class=\"docutils literal\">Comm.recv()</tt> accept a buffer to receive the message.</p>\n</li>\n<li><p class=\"first\">Add <tt class=\"docutils literal\">Comm.irecv()</tt> and <tt class=\"docutils literal\"><span class=\"pre\">Request.{wait|test}[any|all]()</span></tt>.</p>\n</li>\n<li><p class=\"first\">Add <tt class=\"docutils literal\">Intracomm.Spawn_multiple()</tt>.</p>\n</li>\n<li><p class=\"first\">Better buffer handling for PEP 3118 and legacy buffer interfaces.</p>\n</li>\n<li><p class=\"first\">Add support for attribute attribute caching on communicators,\ndatatypes and windows.</p>\n</li>\n<li><p class=\"first\">Install MPI-enabled Python interpreter as\n<tt class=\"docutils literal\"><span class=\"pre\">&lt;path&gt;/mpi4py/bin/python-mpi</span></tt>.</p>\n</li>\n<li><p class=\"first\">Windows: Support for building with Open MPI.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-2-2-2010-09-13\">\n<h1>Release 1.2.2 [2010-09-13]</h1>\n<ul>\n<li><p class=\"first\">Add <tt class=\"docutils literal\">mpi4py.get_config()</tt> to retrieve information (compiler\nwrappers, includes, libraries, etc) about the MPI implementation\nemployed to build mpi4py.</p>\n</li>\n<li><p class=\"first\">Workaround Python libraries with missing GILState-related API calls\nin case of non-threaded Python builds.</p>\n</li>\n<li><p class=\"first\">Windows: look for MPICH2, DeinoMPI, Microsoft HPC Pack at their\ndefault install locations under %ProgramFiles.</p>\n</li>\n<li><p class=\"first\">MPE: fix hacks related to old API's, these hacks are broken when MPE\nis built with a MPI implementations other than MPICH2.</p>\n</li>\n<li><p class=\"first\">HP-MPI: fix for missing Fortran datatypes, use dlopen() to load the\nMPI shared library before MPI_Init()</p>\n</li>\n<li><p class=\"first\">Many distutils-related fixes, cleanup, and enhancements, better\nlogics to find MPI compiler wrappers.</p>\n</li>\n<li><p class=\"first\">Support for <tt class=\"docutils literal\">pip install mpi4py</tt>.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-2-1-2010-02-26\">\n<h1>Release 1.2.1 [2010-02-26]</h1>\n<ul>\n<li><p class=\"first\">Fix declaration in Cython include file. This declaration, while\nvalid for Cython, broke the simple-minded parsing used in\nconf/mpidistutils.py to implement configure-tests for availability\nof MPI symbols.</p>\n</li>\n<li><p class=\"first\">Update SWIG support and make it compatible with Python 3. Also\ngenerate an warning for SWIG &lt; 1.3.28.</p>\n</li>\n<li><p class=\"first\">Fix distutils-related issues in Mac OS X. Now ARCHFLAGS environment\nvariable is honored of all Python's <tt class=\"docutils literal\">config/Makefile</tt> variables.</p>\n</li>\n<li><p class=\"first\">Fix issues with Open MPI &lt; 1.4.2 releated to error checking and\n<tt class=\"docutils literal\">MPI_XXX_NULL</tt> handles.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-2-2009-12-29\">\n<h1>Release 1.2 [2009-12-29]</h1>\n<ul>\n<li><p class=\"first\">Automatic MPI datatype discovery for NumPy arrays and PEP-3118\nbuffers. Now buffer-like objects can be messaged directly, it is no\nlonger required to explicitly pass a 2/3-list/tuple like <tt class=\"docutils literal\">[data,\nMPI.DOUBLE]</tt>, or <tt class=\"docutils literal\">[data, count, MPI.DOUBLE]</tt>. Only basic types\nare supported, i.e., all C/C99-native signed/unsigned integral types\nand single/double precision real/complex floating types. Many thanks\nto Eilif Muller for the initial feedback.</p>\n</li>\n<li><p class=\"first\">Nonblocking send of pickled Python objects. Many thanks to Andreas\nKloeckner for the initial patch and enlightening discussion about\nthis enhancement.</p>\n</li>\n<li><p class=\"first\"><tt class=\"docutils literal\">Request</tt> instances now hold a reference to the Python object\nexposing the buffer involved in point-to-point communication or\nparallel I/O. Many thanks to Andreas Kloeckner for the initial\nfeedback.</p>\n</li>\n<li><p class=\"first\">Support for logging of user-defined states and events using <a class=\"reference external\" href=\"http://www.mcs.anl.gov/research/projects/perfvis/\">MPE</a>. Runtime\n(i.e., without requiring a recompile!)  activation of logging of all\nMPI calls is supported in POSIX platforms implementing <tt class=\"docutils literal\">dlopen()</tt>.</p>\n</li>\n<li><p class=\"first\">Support for all the new features in MPI-2.2 (new C99 and F90\ndatatypes, distributed graph topology, local reduction operation,\nand other minor enhancements).</p>\n</li>\n<li><p class=\"first\">Fix the annoying issues related to Open MPI and Python dynamic\nloading of extension modules in platforms supporting <tt class=\"docutils literal\">dlopen()</tt>.</p>\n</li>\n<li><p class=\"first\">Fix SLURM dynamic loading issues on SiCortex. Many thanks to Ian\nLangmore for providing me shell access.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-1-0-2009-06-06\">\n<h1>Release 1.1.0 [2009-06-06]</h1>\n<ul>\n<li><p class=\"first\">Fix bug in <tt class=\"docutils literal\">Comm.Iprobe()</tt> that caused segfaults as Python C-API\ncalls were issued with the GIL released (issue #2).</p>\n</li>\n<li><p class=\"first\">Add <tt class=\"docutils literal\">Comm.bsend()</tt> and <tt class=\"docutils literal\">Comm.ssend()</tt> for buffered and\nsynchronous send semantics when communicating general Python\nobjects.</p>\n</li>\n<li><p class=\"first\">Now the call <tt class=\"docutils literal\">Info.Get(key)</tt> return a <em>single</em> value (i.e, instead\nof a 2-tuple); this value is <tt class=\"docutils literal\">None</tt> if <tt class=\"docutils literal\">key</tt> is not in the\n<tt class=\"docutils literal\">Info</tt> object, or a string otherwise. Previously, the call\nredundantly returned <tt class=\"docutils literal\">(None, False)</tt> for missing key-value pairs;\n<tt class=\"docutils literal\">None</tt> is enough to signal a missing entry.</p>\n</li>\n<li><p class=\"first\">Add support for parametrized Fortran datatypes.</p>\n</li>\n<li><p class=\"first\">Add support for decoding user-defined datatypes.</p>\n</li>\n<li><p class=\"first\">Add support for user-defined reduction operations on memory\nbuffers. However, at most 16 user-defined reduction operations\ncan be created. Ask the author for more room if you need it.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"release-1-0-0-2009-03-20\">\n<h1>Release 1.0.0 [2009-03-20]</h1>\n<p>This is the fist release of the all-new, Cython-based, implementation\nof <em>MPI for Python</em>. Unfortunately, this implementation is not\nbackward-compatible with the previous one. The list below summarizes\nthe more important changes that can impact user codes.</p>\n<ul>\n<li><p class=\"first\">Some communication calls had <em>overloaded</em> functionality. Now there\nis a clear distinction between communication of general Python\nobject with <em>pickle</em>, and (fast, near C-speed) communication of\nbuffer-like objects (e.g., NumPy arrays).</p>\n<ul>\n<li><p class=\"first\">for communicating general Python objects, you have to use\nall-lowercase methods, like <tt class=\"docutils literal\">send()</tt>, <tt class=\"docutils literal\">recv()</tt>, <tt class=\"docutils literal\">bcast()</tt>,\netc.</p>\n</li>\n<li><p class=\"first\">for communicating array data, you have to use <tt class=\"docutils literal\">Send()</tt>,\n<tt class=\"docutils literal\">Recv()</tt>, <tt class=\"docutils literal\">Bcast()</tt>, etc. methods. Buffer arguments to these\ncalls must be explicitly specified by using a 2/3-list/tuple like\n<tt class=\"docutils literal\">[data, MPI.DOUBLE]</tt>, or <tt class=\"docutils literal\">[data, count, MPI.DOUBLE]</tt> (the\nformer one uses the byte-size of <tt class=\"docutils literal\">data</tt> and the extent of the\nMPI datatype to define the <tt class=\"docutils literal\">count</tt>).</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\">Indexing a communicator with an integer returned a special object\nassociating the communication with a target rank, alleviating you\nfrom specifying source/destination/root arguments in point-to-point\nand collective communications. This functionality is no longer\navailable, expressions like:</p>\n<pre class=\"literal-block\">\nMPI.COMM_WORLD[0].Send(...)\nMPI.COMM_WORLD[0].Recv(...)\nMPI.COMM_WORLD[0].Bcast(...)\n</pre>\n<p>have to be replaced by:</p>\n<pre class=\"literal-block\">\nMPI.COMM_WORLD.Send(..., dest=0)\nMPI.COMM_WORLD.Recv(..., source=0)\nMPI.COMM_WORLD.Bcast(..., root=0)\n</pre>\n</li>\n<li><p class=\"first\">Automatic MPI initialization (i.e., at import time) requests the\nmaximum level of MPI thread support (i.e., it is done by calling\n<tt class=\"docutils literal\">MPI_Init_thread()</tt> and passing <tt class=\"docutils literal\">MPI_THREAD_MULTIPLE</tt>). In case\nyou need to change this behavior, you can tweak the contents of the\n<tt class=\"docutils literal\">mpi4py.rc</tt> module.</p>\n</li>\n<li><p class=\"first\">In order to obtain the values of predefined attributes attached to\nthe world communicator, now you have to use the <tt class=\"docutils literal\">Get_attr()</tt>\nmethod on the <tt class=\"docutils literal\">MPI.COMM_WORLD</tt> instance:</p>\n<pre class=\"literal-block\">\ntag_ub = MPI.COMM_WORLD.Get_attr(MPI.TAG_UB)\n</pre>\n</li>\n<li><p class=\"first\">In the previous implementation, <tt class=\"docutils literal\">MPI.COMM_WORLD</tt> and\n<tt class=\"docutils literal\">MPI.COMM_SELF</tt> were associated to <strong>duplicates</strong> of the (C-level)\n<tt class=\"docutils literal\">MPI_COMM_WORLD</tt> and <tt class=\"docutils literal\">MPI_COMM_SELF</tt> predefined communicator\nhandles. Now this is no longer the case, <tt class=\"docutils literal\">MPI.COMM_WORLD</tt> and\n<tt class=\"docutils literal\">MPI.COMM_SELF</tt> proxies the <strong>actual</strong> <tt class=\"docutils literal\">MPI_COMM_WORLD</tt> and\n<tt class=\"docutils literal\">MPI_COMM_SELF</tt> handles.</p>\n</li>\n<li><p class=\"first\">Convenience aliases <tt class=\"docutils literal\">MPI.WORLD</tt> and <tt class=\"docutils literal\">MPI.SELF</tt> were removed. Use\ninstead <tt class=\"docutils literal\">MPI.COMM_WORLD</tt> and <tt class=\"docutils literal\">MPI.COMM_SELF</tt>.</p>\n</li>\n<li><p class=\"first\">Convenience constants <tt class=\"docutils literal\">MPI.WORLD_SIZE</tt> and <tt class=\"docutils literal\">MPI.WORLD_RANK</tt> were\nremoved. Use instead <tt class=\"docutils literal\">MPI.COMM_WORLD.Get_size()</tt> and\n<tt class=\"docutils literal\">MPI.COMM_WORLD.Get_rank()</tt>.</p>\n</li>\n</ul>\n</div>\n</div>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/apiref/mpi4py-pysrc.html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>mpi4py</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th bgcolor=\"#70b0f0\" class=\"navbar-select\"\n          >&nbsp;&nbsp;&nbsp;Home&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Project homepage -->\n      <th class=\"navbar\" align=\"right\" width=\"100%\">\n        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n          <tr><th class=\"navbar\" align=\"center\"\n            ><a class=\"navbar\" target=\"_top\" href=\"https://bitbucket.org/mpi4py/mpi4py\">MPI for Python</a></th>\n          </tr></table></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        Package&nbsp;mpi4py\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"mpi4py-pysrc.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<h1 class=\"epydoc\">Source Code for <a href=\"mpi4py-module.html\">Package mpi4py</a></h1>\n<pre class=\"py-src\">\n<a name=\"L1\"></a><tt class=\"py-lineno\">  1</tt>  <tt class=\"py-line\"><tt class=\"py-comment\"># Author:  Lisandro Dalcin</tt> </tt>\n<a name=\"L2\"></a><tt class=\"py-lineno\">  2</tt>  <tt class=\"py-line\"><tt class=\"py-comment\"># Contact: dalcinl@gmail.com</tt> </tt>\n<a name=\"L3\"></a><tt class=\"py-lineno\">  3</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">\"\"\"</tt> </tt>\n<a name=\"L4\"></a><tt class=\"py-lineno\">  4</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">This is the **MPI for Python** package.</tt> </tt>\n<a name=\"L5\"></a><tt class=\"py-lineno\">  5</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L6\"></a><tt class=\"py-lineno\">  6</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">What is *MPI*?</tt> </tt>\n<a name=\"L7\"></a><tt class=\"py-lineno\">  7</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">==============</tt> </tt>\n<a name=\"L8\"></a><tt class=\"py-lineno\">  8</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L9\"></a><tt class=\"py-lineno\">  9</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">The *Message Passing Interface*, is a standardized and portable</tt> </tt>\n<a name=\"L10\"></a><tt class=\"py-lineno\"> 10</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">message-passing system designed to function on a wide variety of</tt> </tt>\n<a name=\"L11\"></a><tt class=\"py-lineno\"> 11</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">parallel computers. The standard defines the syntax and semantics of</tt> </tt>\n<a name=\"L12\"></a><tt class=\"py-lineno\"> 12</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">library routines and allows users to write portable programs in the</tt> </tt>\n<a name=\"L13\"></a><tt class=\"py-lineno\"> 13</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">main scientific programming languages (Fortran, C, or C++). Since</tt> </tt>\n<a name=\"L14\"></a><tt class=\"py-lineno\"> 14</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">its release, the MPI specification has become the leading standard</tt> </tt>\n<a name=\"L15\"></a><tt class=\"py-lineno\"> 15</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">for message-passing libraries for parallel computers.</tt> </tt>\n<a name=\"L16\"></a><tt class=\"py-lineno\"> 16</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L17\"></a><tt class=\"py-lineno\"> 17</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">What is *MPI for Python*?</tt> </tt>\n<a name=\"L18\"></a><tt class=\"py-lineno\"> 18</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">=========================</tt> </tt>\n<a name=\"L19\"></a><tt class=\"py-lineno\"> 19</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L20\"></a><tt class=\"py-lineno\"> 20</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">*MPI for Python* provides MPI bindings for the Python programming</tt> </tt>\n<a name=\"L21\"></a><tt class=\"py-lineno\"> 21</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">language, allowing any Python program to exploit multiple processors.</tt> </tt>\n<a name=\"L22\"></a><tt class=\"py-lineno\"> 22</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">This package is constructed on top of the MPI-1/2 specifications and</tt> </tt>\n<a name=\"L23\"></a><tt class=\"py-lineno\"> 23</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">provides an object oriented interface which closely follows MPI-2 C++</tt> </tt>\n<a name=\"L24\"></a><tt class=\"py-lineno\"> 24</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">bindings.</tt> </tt>\n<a name=\"L25\"></a><tt class=\"py-lineno\"> 25</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">\"\"\"</tt> </tt>\n<a name=\"L26\"></a><tt class=\"py-lineno\"> 26</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L27\"></a><tt class=\"py-lineno\"> 27</tt>  <tt class=\"py-line\"><tt class=\"py-name\">__version__</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-string\">'3.0.0'</tt> </tt>\n<a name=\"L28\"></a><tt class=\"py-lineno\"> 28</tt>  <tt class=\"py-line\"><tt class=\"py-name\">__author__</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-string\">'Lisandro Dalcin'</tt> </tt>\n<a name=\"L29\"></a><tt class=\"py-lineno\"> 29</tt>  <tt class=\"py-line\"><tt class=\"py-name\">__credits__</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-string\">'MPI Forum, MPICH Team, Open MPI Team'</tt> </tt>\n<a name=\"L30\"></a><tt class=\"py-lineno\"> 30</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L31\"></a><tt class=\"py-lineno\"> 31</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L32\"></a><tt class=\"py-lineno\"> 32</tt>  <tt class=\"py-line\"><tt class=\"py-name\">__all__</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-op\">[</tt><tt class=\"py-string\">'MPI'</tt><tt class=\"py-op\">]</tt> </tt>\n<a name=\"L33\"></a><tt class=\"py-lineno\"> 33</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L34\"></a><tt class=\"py-lineno\"> 34</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"get_include\"></a><div id=\"get_include-def\"><a name=\"L35\"></a><tt class=\"py-lineno\"> 35</tt> <a class=\"py-toggle\" href=\"#\" id=\"get_include-toggle\" onclick=\"return toggle('get_include');\">-</a><tt class=\"py-line\"><tt class=\"py-keyword\">def</tt> <a class=\"py-def-name\" href=\"mpi4py-module.html#get_include\">get_include</a><tt class=\"py-op\">(</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n</div><div id=\"get_include-collapsed\" style=\"display:none;\" pad=\"+++\" indent=\"++++\"></div><div id=\"get_include-expanded\"><a name=\"L36\"></a><tt class=\"py-lineno\"> 36</tt>  <tt class=\"py-line\">    <tt class=\"py-docstring\">\"\"\"Return the directory in the package that contains header files.</tt> </tt>\n<a name=\"L37\"></a><tt class=\"py-lineno\"> 37</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L38\"></a><tt class=\"py-lineno\"> 38</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    Extension modules that need to compile against mpi4py should use</tt> </tt>\n<a name=\"L39\"></a><tt class=\"py-lineno\"> 39</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    this function to locate the appropriate include directory. Using</tt> </tt>\n<a name=\"L40\"></a><tt class=\"py-lineno\"> 40</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    Python distutils (or perhaps NumPy distutils)::</tt> </tt>\n<a name=\"L41\"></a><tt class=\"py-lineno\"> 41</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L42\"></a><tt class=\"py-lineno\"> 42</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">      import mpi4py</tt> </tt>\n<a name=\"L43\"></a><tt class=\"py-lineno\"> 43</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">      Extension('extension_name', ...</tt> </tt>\n<a name=\"L44\"></a><tt class=\"py-lineno\"> 44</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">                include_dirs=[..., mpi4py.get_include()])</tt> </tt>\n<a name=\"L45\"></a><tt class=\"py-lineno\"> 45</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L46\"></a><tt class=\"py-lineno\"> 46</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    \"\"\"</tt> </tt>\n<a name=\"L47\"></a><tt class=\"py-lineno\"> 47</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">from</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">join</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">dirname</tt> </tt>\n<a name=\"L48\"></a><tt class=\"py-lineno\"> 48</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">return</tt> <tt class=\"py-name\">join</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">dirname</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">__file__</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'include'</tt><tt class=\"py-op\">)</tt> </tt>\n</div><a name=\"L49\"></a><tt class=\"py-lineno\"> 49</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L50\"></a><tt class=\"py-lineno\"> 50</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"get_config\"></a><div id=\"get_config-def\"><a name=\"L51\"></a><tt class=\"py-lineno\"> 51</tt> <a class=\"py-toggle\" href=\"#\" id=\"get_config-toggle\" onclick=\"return toggle('get_config');\">-</a><tt class=\"py-line\"><tt class=\"py-keyword\">def</tt> <a class=\"py-def-name\" href=\"mpi4py-module.html#get_config\">get_config</a><tt class=\"py-op\">(</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n</div><div id=\"get_config-collapsed\" style=\"display:none;\" pad=\"+++\" indent=\"++++\"></div><div id=\"get_config-expanded\"><a name=\"L52\"></a><tt class=\"py-lineno\"> 52</tt>  <tt class=\"py-line\">    <tt class=\"py-docstring\">\"\"\"Return a dictionary with information about MPI.\"\"\"</tt> </tt>\n<a name=\"L53\"></a><tt class=\"py-lineno\"> 53</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">from</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">join</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">dirname</tt> </tt>\n<a name=\"L54\"></a><tt class=\"py-lineno\"> 54</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">try</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L55\"></a><tt class=\"py-lineno\"> 55</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">from</tt> <tt class=\"py-name\">configparser</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">ConfigParser</tt> </tt>\n<a name=\"L56\"></a><tt class=\"py-lineno\"> 56</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">except</tt> <tt class=\"py-name\">ImportError</tt><tt class=\"py-op\">:</tt>  <tt class=\"py-comment\"># pragma: no cover</tt> </tt>\n<a name=\"L57\"></a><tt class=\"py-lineno\"> 57</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">from</tt> <tt class=\"py-name\">ConfigParser</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">ConfigParser</tt> </tt>\n<a name=\"L58\"></a><tt class=\"py-lineno\"> 58</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">parser</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">ConfigParser</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L59\"></a><tt class=\"py-lineno\"> 59</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">parser</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">read</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">join</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">dirname</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">__file__</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'mpi.cfg'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L60\"></a><tt class=\"py-lineno\"> 60</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">return</tt> <tt class=\"py-name\">dict</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">parser</tt><tt class=\"py-op\">.</tt><tt id=\"link-0\" class=\"py-name\" targets=\"Method mpi4py.MPI.Info.items()=mpi4py.MPI.Info-class.html#items\"><a title=\"mpi4py.MPI.Info.items\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-0', 'items', 'link-0');\">items</a></tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'mpi'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n</div><a name=\"L61\"></a><tt class=\"py-lineno\"> 61</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L62\"></a><tt class=\"py-lineno\"> 62</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"rc\"></a><div id=\"rc-def\"><a name=\"L63\"></a><tt class=\"py-lineno\"> 63</tt> <a class=\"py-toggle\" href=\"#\" id=\"rc-toggle\" onclick=\"return toggle('rc');\">-</a><tt class=\"py-line\"><tt class=\"py-keyword\">def</tt> <a class=\"py-def-name\" href=\"mpi4py-module.html#rc\">rc</a><tt class=\"py-op\">(</tt><tt class=\"py-op\">**</tt><tt class=\"py-param\">kargs</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt>  <tt class=\"py-comment\"># pylint: disable=invalid-name</tt> </tt>\n</div><a name=\"L64\"></a><tt class=\"py-lineno\"> 64</tt>  <tt class=\"py-line\">    <tt class=\"py-docstring\">\"\"\"Runtime configuration options.</tt> </tt>\n<a name=\"L65\"></a><tt class=\"py-lineno\"> 65</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L66\"></a><tt class=\"py-lineno\"> 66</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    Parameters</tt> </tt>\n<a name=\"L67\"></a><tt class=\"py-lineno\"> 67</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    ----------</tt> </tt>\n<a name=\"L68\"></a><tt class=\"py-lineno\"> 68</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    initialize : bool</tt> </tt>\n<a name=\"L69\"></a><tt class=\"py-lineno\"> 69</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Automatic MPI initialization at import (default: True).</tt> </tt>\n<a name=\"L70\"></a><tt class=\"py-lineno\"> 70</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    threads : bool</tt> </tt>\n<a name=\"L71\"></a><tt class=\"py-lineno\"> 71</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Request for thread support (default: True).</tt> </tt>\n<a name=\"L72\"></a><tt class=\"py-lineno\"> 72</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    thread_level : {'multiple', 'serialized', 'funneled', 'single'}</tt> </tt>\n<a name=\"L73\"></a><tt class=\"py-lineno\"> 73</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Level of thread support to request (default: 'multiple').</tt> </tt>\n<a name=\"L74\"></a><tt class=\"py-lineno\"> 74</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    finalize : None or bool</tt> </tt>\n<a name=\"L75\"></a><tt class=\"py-lineno\"> 75</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Automatic MPI finalization at exit (default: None).</tt> </tt>\n<a name=\"L76\"></a><tt class=\"py-lineno\"> 76</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    fast_reduce : bool</tt> </tt>\n<a name=\"L77\"></a><tt class=\"py-lineno\"> 77</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Use tree-based reductions for objects (default: True).</tt> </tt>\n<a name=\"L78\"></a><tt class=\"py-lineno\"> 78</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    recv_mprobe : bool</tt> </tt>\n<a name=\"L79\"></a><tt class=\"py-lineno\"> 79</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Use matched probes to receive objects (default: True).</tt> </tt>\n<a name=\"L80\"></a><tt class=\"py-lineno\"> 80</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    errors : {'exception', 'default', 'fatal'}</tt> </tt>\n<a name=\"L81\"></a><tt class=\"py-lineno\"> 81</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">        Error handling policy (default: 'exception').</tt> </tt>\n<a name=\"L82\"></a><tt class=\"py-lineno\"> 82</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L83\"></a><tt class=\"py-lineno\"> 83</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    \"\"\"</tt> </tt>\n<a name=\"L84\"></a><tt class=\"py-lineno\"> 84</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">for</tt> <tt class=\"py-name\">key</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">kargs</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L85\"></a><tt class=\"py-lineno\"> 85</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">if</tt> <tt class=\"py-keyword\">not</tt> <tt class=\"py-name\">hasattr</tt><tt class=\"py-op\">(</tt><tt id=\"link-1\" class=\"py-name\" targets=\"Function mpi4py.rc()=mpi4py-module.html#rc\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-1', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">key</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L86\"></a><tt class=\"py-lineno\"> 86</tt>  <tt class=\"py-line\">            <tt class=\"py-keyword\">raise</tt> <tt class=\"py-name\">TypeError</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">\"unexpected argument '{0}'\"</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">format</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">key</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L87\"></a><tt class=\"py-lineno\"> 87</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">for</tt> <tt class=\"py-name\">key</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">value</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">kargs</tt><tt class=\"py-op\">.</tt><tt id=\"link-2\" class=\"py-name\"><a title=\"mpi4py.MPI.Info.items\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-2', 'items', 'link-0');\">items</a></tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L88\"></a><tt class=\"py-lineno\"> 88</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">setattr</tt><tt class=\"py-op\">(</tt><tt id=\"link-3\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-3', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">key</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">value</tt><tt class=\"py-op\">)</tt> </tt>\n</div><a name=\"L89\"></a><tt class=\"py-lineno\"> 89</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L90\"></a><tt class=\"py-lineno\"> 90</tt>  <tt class=\"py-line\"><tt id=\"link-4\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-4', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">initialize</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">True</tt> </tt>\n<a name=\"L91\"></a><tt class=\"py-lineno\"> 91</tt>  <tt class=\"py-line\"><tt id=\"link-5\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-5', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">threads</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">True</tt> </tt>\n<a name=\"L92\"></a><tt class=\"py-lineno\"> 92</tt>  <tt class=\"py-line\"><tt id=\"link-6\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-6', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">thread_level</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-string\">'multiple'</tt> </tt>\n<a name=\"L93\"></a><tt class=\"py-lineno\"> 93</tt>  <tt class=\"py-line\"><tt id=\"link-7\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-7', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">finalize</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">None</tt> </tt>\n<a name=\"L94\"></a><tt class=\"py-lineno\"> 94</tt>  <tt class=\"py-line\"><tt id=\"link-8\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-8', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">fast_reduce</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">True</tt> </tt>\n<a name=\"L95\"></a><tt class=\"py-lineno\"> 95</tt>  <tt class=\"py-line\"><tt id=\"link-9\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-9', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">recv_mprobe</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">True</tt> </tt>\n<a name=\"L96\"></a><tt class=\"py-lineno\"> 96</tt>  <tt class=\"py-line\"><tt id=\"link-10\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-10', 'rc', 'link-1');\">rc</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">errors</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-string\">'exception'</tt> </tt>\n<a name=\"L97\"></a><tt class=\"py-lineno\"> 97</tt>  <tt class=\"py-line\"><tt class=\"py-name\">__import__</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'sys'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">modules</tt><tt class=\"py-op\">[</tt><tt class=\"py-name\">__name__</tt> <tt class=\"py-op\">+</tt> <tt class=\"py-string\">'.rc'</tt><tt class=\"py-op\">]</tt> <tt class=\"py-op\">=</tt> <tt id=\"link-11\" class=\"py-name\"><a title=\"mpi4py.rc\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-11', 'rc', 'link-1');\">rc</a></tt> </tt>\n<a name=\"L98\"></a><tt class=\"py-lineno\"> 98</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L99\"></a><tt class=\"py-lineno\"> 99</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"profile\"></a><div id=\"profile-def\"><a name=\"L100\"></a><tt class=\"py-lineno\">100</tt> <a class=\"py-toggle\" href=\"#\" id=\"profile-toggle\" onclick=\"return toggle('profile');\">-</a><tt class=\"py-line\"><tt class=\"py-keyword\">def</tt> <a class=\"py-def-name\" href=\"mpi4py-module.html#profile\">profile</a><tt class=\"py-op\">(</tt><tt class=\"py-param\">name</tt><tt class=\"py-op\">,</tt> <tt class=\"py-op\">**</tt><tt class=\"py-param\">kargs</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n</div><div id=\"profile-collapsed\" style=\"display:none;\" pad=\"+++\" indent=\"++++\"></div><div id=\"profile-expanded\"><a name=\"L101\"></a><tt class=\"py-lineno\">101</tt>  <tt class=\"py-line\">    <tt class=\"py-docstring\">\"\"\"Support for the MPI profiling interface.</tt> </tt>\n<a name=\"L102\"></a><tt class=\"py-lineno\">102</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L103\"></a><tt class=\"py-lineno\">103</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    Parameters</tt> </tt>\n<a name=\"L104\"></a><tt class=\"py-lineno\">104</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    ----------</tt> </tt>\n<a name=\"L105\"></a><tt class=\"py-lineno\">105</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    name : str</tt> </tt>\n<a name=\"L106\"></a><tt class=\"py-lineno\">106</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">       Name of the profiler library to load.</tt> </tt>\n<a name=\"L107\"></a><tt class=\"py-lineno\">107</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    path : list of str, optional</tt> </tt>\n<a name=\"L108\"></a><tt class=\"py-lineno\">108</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">       Additional paths to search for the profiler.</tt> </tt>\n<a name=\"L109\"></a><tt class=\"py-lineno\">109</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    logfile : str, optional</tt> </tt>\n<a name=\"L110\"></a><tt class=\"py-lineno\">110</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">       Filename prefix for dumping profiler output.</tt> </tt>\n<a name=\"L111\"></a><tt class=\"py-lineno\">111</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\"></tt> </tt>\n<a name=\"L112\"></a><tt class=\"py-lineno\">112</tt>  <tt class=\"py-line\"><tt class=\"py-docstring\">    \"\"\"</tt> </tt>\n<a name=\"L113\"></a><tt class=\"py-lineno\">113</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">sys</tt> </tt>\n<a name=\"L114\"></a><tt class=\"py-lineno\">114</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">os</tt> </tt>\n<a name=\"L115\"></a><tt class=\"py-lineno\">115</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">from</tt> <tt class=\"py-op\">.</tt><tt class=\"py-name\">dl</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">dlopen</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">dlerror</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">RTLD_NOW</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">RTLD_GLOBAL</tt> </tt>\n<a name=\"L116\"></a><tt class=\"py-lineno\">116</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L117\"></a><tt class=\"py-lineno\">117</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">def</tt> <tt class=\"py-def-name\">lookup_dylib</tt><tt class=\"py-op\">(</tt><tt class=\"py-param\">name</tt><tt class=\"py-op\">,</tt> <tt class=\"py-param\">path</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L118\"></a><tt class=\"py-lineno\">118</tt>  <tt class=\"py-line\">        <tt class=\"py-comment\"># pylint: disable=missing-docstring</tt> </tt>\n<a name=\"L119\"></a><tt class=\"py-lineno\">119</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">pattern</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-op\">[</tt><tt class=\"py-op\">]</tt> </tt>\n<a name=\"L120\"></a><tt class=\"py-lineno\">120</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">sys</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">platform</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">startswith</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'win'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt>  <tt class=\"py-comment\"># pragma: no cover</tt> </tt>\n<a name=\"L121\"></a><tt class=\"py-lineno\">121</tt>  <tt class=\"py-line\">            <tt class=\"py-name\">pattern</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">''</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'.dll'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L122\"></a><tt class=\"py-lineno\">122</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">elif</tt> <tt class=\"py-name\">sys</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">platform</tt> <tt class=\"py-op\">==</tt> <tt class=\"py-string\">'darwin'</tt><tt class=\"py-op\">:</tt>  <tt class=\"py-comment\"># pragma: no cover</tt> </tt>\n<a name=\"L123\"></a><tt class=\"py-lineno\">123</tt>  <tt class=\"py-line\">            <tt class=\"py-name\">pattern</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'lib'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'.dylib'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L124\"></a><tt class=\"py-lineno\">124</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">elif</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt id=\"link-12\" class=\"py-name\" targets=\"Variable mpi4py.MPI.Comm.name=mpi4py.MPI.Comm-class.html#name,Variable mpi4py.MPI.Datatype.name=mpi4py.MPI.Datatype-class.html#name,Variable mpi4py.MPI.Win.name=mpi4py.MPI.Win-class.html#name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-12', 'name', 'link-12');\">name</a></tt> <tt class=\"py-op\">==</tt> <tt class=\"py-string\">'posix'</tt><tt class=\"py-op\">:</tt>  <tt class=\"py-comment\"># pragma: no cover</tt> </tt>\n<a name=\"L125\"></a><tt class=\"py-lineno\">125</tt>  <tt class=\"py-line\">            <tt class=\"py-name\">pattern</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'lib'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'.so'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L126\"></a><tt class=\"py-lineno\">126</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">pattern</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">''</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">''</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L127\"></a><tt class=\"py-lineno\">127</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">for</tt> <tt class=\"py-name\">pth</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">path</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L128\"></a><tt class=\"py-lineno\">128</tt>  <tt class=\"py-line\">            <tt class=\"py-keyword\">for</tt> <tt class=\"py-op\">(</tt><tt class=\"py-name\">lib</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">dso</tt><tt class=\"py-op\">)</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">pattern</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L129\"></a><tt class=\"py-lineno\">129</tt>  <tt class=\"py-line\">                <tt class=\"py-name\">filename</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">join</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">pth</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">lib</tt> <tt class=\"py-op\">+</tt> <tt id=\"link-13\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-13', 'name', 'link-12');\">name</a></tt> <tt class=\"py-op\">+</tt> <tt class=\"py-name\">dso</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L130\"></a><tt class=\"py-lineno\">130</tt>  <tt class=\"py-line\">                <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">isfile</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">filename</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L131\"></a><tt class=\"py-lineno\">131</tt>  <tt class=\"py-line\">                    <tt class=\"py-keyword\">return</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">abspath</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">filename</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L132\"></a><tt class=\"py-lineno\">132</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">return</tt> <tt class=\"py-name\">None</tt> </tt>\n</div><a name=\"L133\"></a><tt class=\"py-lineno\">133</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L134\"></a><tt class=\"py-lineno\">134</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">logfile</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">kargs</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">pop</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'logfile'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">None</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L135\"></a><tt class=\"py-lineno\">135</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">logfile</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L136\"></a><tt class=\"py-lineno\">136</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">if</tt> <tt id=\"link-14\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-14', 'name', 'link-12');\">name</a></tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-op\">(</tt><tt class=\"py-string\">'mpe'</tt><tt class=\"py-op\">,</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L137\"></a><tt class=\"py-lineno\">137</tt>  <tt class=\"py-line\">            <tt class=\"py-keyword\">if</tt> <tt class=\"py-string\">'MPE_LOGFILE_PREFIX'</tt> <tt class=\"py-keyword\">not</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">environ</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L138\"></a><tt class=\"py-lineno\">138</tt>  <tt class=\"py-line\">                <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">environ</tt><tt class=\"py-op\">[</tt><tt class=\"py-string\">'MPE_LOGFILE_PREFIX'</tt><tt class=\"py-op\">]</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">logfile</tt> </tt>\n<a name=\"L139\"></a><tt class=\"py-lineno\">139</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">if</tt> <tt id=\"link-15\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-15', 'name', 'link-12');\">name</a></tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-op\">(</tt><tt class=\"py-string\">'vt'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'vt-mpi'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'vt-hyb'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L140\"></a><tt class=\"py-lineno\">140</tt>  <tt class=\"py-line\">            <tt class=\"py-keyword\">if</tt> <tt class=\"py-string\">'VT_FILE_PREFIX'</tt> <tt class=\"py-keyword\">not</tt> <tt class=\"py-keyword\">in</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">environ</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L141\"></a><tt class=\"py-lineno\">141</tt>  <tt class=\"py-line\">                <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">environ</tt><tt class=\"py-op\">[</tt><tt class=\"py-string\">'VT_FILE_PREFIX'</tt><tt class=\"py-op\">]</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">logfile</tt> </tt>\n<a name=\"L142\"></a><tt class=\"py-lineno\">142</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L143\"></a><tt class=\"py-lineno\">143</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">path</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">kargs</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">pop</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">'path'</tt><tt class=\"py-op\">,</tt> <tt class=\"py-op\">[</tt><tt class=\"py-op\">]</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L144\"></a><tt class=\"py-lineno\">144</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">isinstance</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">str</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L145\"></a><tt class=\"py-lineno\">145</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">path</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-op\">[</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">]</tt> </tt>\n<a name=\"L146\"></a><tt class=\"py-lineno\">146</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">else</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L147\"></a><tt class=\"py-lineno\">147</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">path</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">list</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L148\"></a><tt class=\"py-lineno\">148</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">prefix</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">dirname</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">__file__</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L149\"></a><tt class=\"py-lineno\">149</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">os</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">path</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">join</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">prefix</tt><tt class=\"py-op\">,</tt> <tt class=\"py-string\">'lib-pmpi'</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L150\"></a><tt class=\"py-lineno\">150</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">filename</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">lookup_dylib</tt><tt class=\"py-op\">(</tt><tt id=\"link-16\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-16', 'name', 'link-12');\">name</a></tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">path</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L151\"></a><tt class=\"py-lineno\">151</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">filename</tt> <tt class=\"py-keyword\">is</tt> <tt class=\"py-name\">None</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L152\"></a><tt class=\"py-lineno\">152</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">raise</tt> <tt class=\"py-name\">ValueError</tt><tt class=\"py-op\">(</tt><tt class=\"py-string\">\"profiler '{0}' not found\"</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">format</tt><tt class=\"py-op\">(</tt><tt id=\"link-17\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-17', 'name', 'link-12');\">name</a></tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L153\"></a><tt class=\"py-lineno\">153</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L154\"></a><tt class=\"py-lineno\">154</tt>  <tt class=\"py-line\">    <tt class=\"py-name\">handle</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-name\">dlopen</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">filename</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">RTLD_NOW</tt> <tt class=\"py-op\">|</tt> <tt class=\"py-name\">RTLD_GLOBAL</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L155\"></a><tt class=\"py-lineno\">155</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">if</tt> <tt class=\"py-name\">handle</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L156\"></a><tt class=\"py-lineno\">156</tt>  <tt class=\"py-line\">        <tt id=\"link-18\" class=\"py-name\" targets=\"Function mpi4py.profile()=mpi4py-module.html#profile\"><a title=\"mpi4py.profile\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-18', 'profile', 'link-18');\">profile</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">registry</tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">append</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">(</tt><tt id=\"link-19\" class=\"py-name\"><a title=\"mpi4py.MPI.Comm.name\nmpi4py.MPI.Datatype.name\nmpi4py.MPI.Win.name\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-19', 'name', 'link-12');\">name</a></tt><tt class=\"py-op\">,</tt> <tt class=\"py-op\">(</tt><tt class=\"py-name\">handle</tt><tt class=\"py-op\">,</tt> <tt class=\"py-name\">filename</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n<a name=\"L157\"></a><tt class=\"py-lineno\">157</tt>  <tt class=\"py-line\">    <tt class=\"py-keyword\">else</tt><tt class=\"py-op\">:</tt> </tt>\n<a name=\"L158\"></a><tt class=\"py-lineno\">158</tt>  <tt class=\"py-line\">        <tt class=\"py-keyword\">from</tt> <tt class=\"py-name\">warnings</tt> <tt class=\"py-keyword\">import</tt> <tt class=\"py-name\">warn</tt> </tt>\n<a name=\"L159\"></a><tt class=\"py-lineno\">159</tt>  <tt class=\"py-line\">        <tt class=\"py-name\">warn</tt><tt class=\"py-op\">(</tt><tt class=\"py-name\">dlerror</tt><tt class=\"py-op\">(</tt><tt class=\"py-op\">)</tt><tt class=\"py-op\">)</tt> </tt>\n</div><a name=\"L160\"></a><tt class=\"py-lineno\">160</tt>  <tt class=\"py-line\"> </tt>\n<a name=\"L161\"></a><tt class=\"py-lineno\">161</tt>  <tt class=\"py-line\"><tt id=\"link-20\" class=\"py-name\"><a title=\"mpi4py.profile\" class=\"py-name\" href=\"#\" onclick=\"return doclink('link-20', 'profile', 'link-18');\">profile</a></tt><tt class=\"py-op\">.</tt><tt class=\"py-name\">registry</tt> <tt class=\"py-op\">=</tt> <tt class=\"py-op\">[</tt><tt class=\"py-op\">]</tt> </tt>\n<a name=\"L162\"></a><tt class=\"py-lineno\">162</tt>  <tt class=\"py-line\"> </tt><script type=\"text/javascript\">\n<!--\nexpandto(location.href);\n// -->\n</script>\n</pre>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th bgcolor=\"#70b0f0\" class=\"navbar-select\"\n          >&nbsp;&nbsp;&nbsp;Home&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Project homepage -->\n      <th class=\"navbar\" align=\"right\" width=\"100%\">\n        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n          <tr><th class=\"navbar\" align=\"center\"\n            ><a class=\"navbar\" target=\"_top\" href=\"https://bitbucket.org/mpi4py/mpi4py\">MPI for Python</a></th>\n          </tr></table></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0.1\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a target=\"mainFrame\" href=\"http://epydoc.sourceforge.net\"\n        >http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie();\n  // -->\n</script>\n</body>\n</html>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/mpi4py.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/objects.inv",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/comment-close.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/down.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/down-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/comment-bright.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/comment.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/up-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/file.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/ajax-loader.gif",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/usrman/_static/minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-mpi4py-3.0.0-d6q7gqktd7zco6yaiu37qvyep6a3q5pa/spack-src/docs/apiref/crarr.png"
    ],
    "total_files": 402
}