{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-rmpi-0.6-9-vvz2ngt7yad23akjbjnl6rc4b3jfpjjs/spack-src/src/Rmpi.c": "/* Copyright (C) 2002 Hao Yu\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n#include \"Rmpi.h\"\n\n#ifdef OPENMPI\n#include <dlfcn.h>\n#endif\n\nstatic MPI_Comm\t*comm;\nstatic MPI_Status *status;\nstatic MPI_Datatype *datatype;\nstatic MPI_Info *info;\nstatic MPI_Request *request;\nstatic int COMM_MAXSIZE=10;\nstatic int STATUS_MAXSIZE=2000;\nstatic int REQUEST_MAXSIZE=2000;\nstatic MPI_Datatype *xdouble;\n\n#ifndef XLENGTH\n#define XLENGTH LENGTH\n#endif\n\nSEXP mpidist(){\n\tint i=0;\n\n#ifdef OPENMPI\n\ti=1;\n#endif\n\n#ifdef LAM\n        i=2;\n#endif\n\n#ifdef MPICH\n\ti=3;\n#endif\n\n#if defined(MPICH2) || defined(INTELMPI)\n\ti=4;\n#endif\n\n\treturn AsInt(i);\t\n}\n\nSEXP mpi_initialize(){\n\tint i,flag;\n\tMPI_Initialized(&flag);\n\n\n#ifndef MPI2\n        static int fake_argc = 1;\n       \tchar *fake_argv[1];\n        char *fake_argv0 = \"R\";\n#endif\n\nif (flag)\n\treturn AsInt(1);\n\telse {\n\n#ifndef __APPLE__\n#ifdef OPENMPI\n    if (!dlopen(\"libmpi.so.1\", RTLD_GLOBAL | RTLD_LAZY) \n\t&& !dlopen(\"libmpi.so.0\", RTLD_GLOBAL | RTLD_LAZY)\n\t&& !dlopen(\"libmpi.so\", RTLD_GLOBAL | RTLD_LAZY)) {\n        Rprintf(\"%s\\n\",dlerror());\n        return AsInt(0);\n    }\n#endif\n#endif\n\n#ifndef MPI2\n   \tfake_argv[0] = (char *)&fake_argv0;\n       \tMPI_Init(&fake_argc, (char ***)(void*)&fake_argv);\n#else \n\tMPI_Init((void *)0,(void *)0);\n#endif \n\n\t\tMPI_Comm_set_errhandler(MPI_COMM_WORLD, MPI_ERRORS_RETURN);\n\t\tMPI_Comm_set_errhandler(MPI_COMM_SELF, MPI_ERRORS_RETURN);\n\t\tcomm=(MPI_Comm *)Calloc(COMM_MAXSIZE, MPI_Comm); \n\t\tstatus=(MPI_Status *)Calloc(STATUS_MAXSIZE, MPI_Status); \n\t\tdatatype=(MPI_Datatype *)Calloc(1, MPI_Datatype); \n\t\txdouble=(MPI_Datatype *)Calloc(1, MPI_Datatype); \n\t\tinfo=(MPI_Info *)Calloc(1, MPI_Info);\n\t\tinfo[0]=MPI_INFO_NULL;\n\t\trequest=(MPI_Request *)Calloc(REQUEST_MAXSIZE, MPI_Request);\n\t\tfor (i=0; i< REQUEST_MAXSIZE; request[i++]=MPI_REQUEST_NULL);\t\n\t\tcomm[0]=MPI_COMM_WORLD;\n\t\tfor (i=1;i < COMM_MAXSIZE; comm[i++]=MPI_COMM_NULL);\n\n\t\treturn AsInt(1);\n\t} \n}\n\nSEXP mpi_finalize(){\n\tMPI_Finalize();\n\tFree(comm);\n\tFree(status);\n\tFree(request);\n\tFree(datatype);\n\tFree(xdouble);\n\tFree(info);\n\treturn AsInt(1);\n}\n\nSEXP mpi_get_processor_name (){\n\tint resultlen;\n\tchar *name;\n\tSEXP sexp_name;\n    PROTECT (sexp_name  = allocVector (STRSXP, 1));\n\tname = (char *)Calloc(MPI_MAX_PROCESSOR_NAME, char);\n\tMPI_Get_processor_name(name, &resultlen);\n\tSET_STRING_ELT(sexp_name, 0, mkChar(name));\n\tUNPROTECT(1);\n\tFree(name);\n\n\treturn sexp_name;\n}\n\n/*\nSEXP bin_nchar(SEXP sexp_data){\n\treturn AsInt(LENGTH(STRING_ELT(sexp_data,0)));\n}\n*/\n\n#ifdef MPI2\nSEXP mpi_universe_size(){\n\tint *MPI_Universe_Size;\n\tint univ_flag;\n\tMPI_Comm_get_attr(comm[0], MPI_UNIVERSE_SIZE, &MPI_Universe_Size, &univ_flag);\n\tif (univ_flag)\n    \treturn AsInt(*MPI_Universe_Size);\n\telse \n\t\treturn AsInt(0);\n}\n#endif\n\nSEXP mpi_any_source(){\n\treturn AsInt(MPI_ANY_SOURCE);\n}\n\nSEXP mpi_any_tag(){\n\treturn AsInt(MPI_ANY_TAG);\n}\n\nSEXP mpi_undefined(){\n\treturn AsInt(MPI_UNDEFINED);\n}\n\nSEXP mpi_proc_null(){\n\treturn AsInt(MPI_PROC_NULL);\n}\n\nSEXP mpi_info_create(SEXP sexp_info){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Info_create( &info[INTEGER(sexp_info)[0]]))));\n}\n\nSEXP mpi_info_set(SEXP sexp_info, SEXP sexp_key, SEXP sexp_value){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Info_set(info[INTEGER(sexp_info)[0]],\n\t\tCHAR2( STRING_ELT (sexp_key,0)), CHAR2(STRING_ELT(sexp_value,0))))));\n}\n\nSEXP mpi_info_get(SEXP sexp_info, SEXP sexp_key, SEXP sexp_valuelen){\n\tint flag;\n        char *value;\n\tSEXP sexp_value;\n\n    \tPROTECT (sexp_value  = allocVector (STRSXP, 1));\n \tvalue = (char *)Calloc(INTEGER(sexp_valuelen)[0], char);  \n\tmpi_errhandler(MPI_Info_get(info[INTEGER(sexp_info)[0]], \n\t\tCHAR2( STRING_ELT (sexp_key,0)), \n\t\tINTEGER(sexp_valuelen)[0], value, &flag));\n        SET_STRING_ELT(sexp_value, 0, mkChar(value));\n        UNPROTECT(1); \n\tFree(value);\n\treturn sexp_value;\n}\n\nSEXP mpi_info_free(SEXP sexp_info){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Info_free( &info[INTEGER(sexp_info)[0]]))));\n}\n\nSEXP mpi_realloc_comm(SEXP sexp_newncomm){\n\tint i, newcomm=INTEGER(sexp_newncomm)[0];\n\tif (newcomm > COMM_MAXSIZE){\n\t\tcomm=(MPI_Comm *)Realloc(comm, newcomm, MPI_Comm); \t\n\t\tfor (i=COMM_MAXSIZE; i < newcomm; comm[i++]=MPI_COMM_NULL);\n\t\tCOMM_MAXSIZE=newcomm;\n\t}\n\treturn AsInt(1);\n}\n\nSEXP mpi_comm_maxsize(){\n\treturn AsInt(COMM_MAXSIZE);\n}\n\nSEXP mpi_realloc_status(SEXP sexp_newnstatus){\n\tint newsize=INTEGER(sexp_newnstatus)[0];\n\tif (newsize > STATUS_MAXSIZE){\n\t\tstatus=(MPI_Status *)Realloc(status, newsize, MPI_Status); \n\t\tSTATUS_MAXSIZE=newsize;\n\t}\n\treturn AsInt(1);\n}\n\nSEXP mpi_status_maxsize(){\n\treturn AsInt(STATUS_MAXSIZE);\n}\n\nSEXP mpi_realloc_request(SEXP sexp_newnrequest){\n\tint i, newsize=INTEGER(sexp_newnrequest)[0];\n\tif (newsize > REQUEST_MAXSIZE){\n\t\trequest=(MPI_Request *)Realloc(request, newsize , MPI_Request); \n\t\tfor (i=REQUEST_MAXSIZE; i< newsize; request[i++]=MPI_REQUEST_NULL);\t\n\t\tREQUEST_MAXSIZE=newsize;\n\t}\n\treturn AsInt(1);\n}\n\nSEXP mpi_request_maxsize(){\n\treturn AsInt(REQUEST_MAXSIZE);\n}\n\nSEXP mpi_realloc_datatype(SEXP sexp_newndatatype){\n\tdatatype=(MPI_Datatype *)Realloc(datatype, INTEGER(sexp_newndatatype)[0], MPI_Datatype); \n\treturn AsInt(1);\n}\n\n/******************** Collective ***************************************/\nSEXP mpi_gather(SEXP sexp_sdata,\n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_rdata,\n\t\t\t\t   SEXP sexp_root,\n\t\t\t\t   SEXP sexp_comm){\n\tint len, rlen, commn=INTEGER(sexp_comm)[0], root=INTEGER(sexp_root)[0];\n\tchar *rdata;\n\tSEXP sexp_rdata2 = NULL;\n\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n \t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Gather(INTEGER(sexp_sdata), len, MPI_INT, \n\t\t\tINTEGER(sexp_rdata), len, MPI_INT, root, comm[commn]));\n\t\tbreak;\n\tcase 2:\n \t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Gather(REAL(sexp_sdata), len, MPI_DOUBLE, \n\t\t\tREAL(sexp_rdata), len, MPI_DOUBLE, root, comm[commn]));\n\t\tbreak;\n\tcase 3: \n\t\tlen=LENGTH(STRING_ELT(sexp_sdata,0));\n\t\trlen=LENGTH(STRING_ELT(sexp_rdata,0));\n\n        \tPROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n        \trdata = (char *)Calloc(rlen, char);\n                MPI_Gather(CHAR2 (STRING_ELT ((sexp_sdata),0)), len, MPI_CHAR,\n                        rdata, len, MPI_CHAR, root, comm[commn]);\n        \tSET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n        \tUNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n\tcase 4:\n                len=LENGTH(sexp_sdata);\n                mpi_errhandler(MPI_Gather(RAW(sexp_sdata), len, MPI_BYTE,\n                        RAW(sexp_rdata), len, MPI_BYTE, root, comm[commn]));\n                break;\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], root, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n\n\tif (INTEGER(sexp_type)[0]==3)\n\t\treturn sexp_rdata2;\n\telse\n\t\treturn sexp_rdata;\n}\n\nSEXP mpi_gatherv(SEXP sexp_sdata,\n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_rdata,\n\t\t\t\t   SEXP sexp_recvcounts,\n\t\t\t\t   SEXP sexp_root,\n\t\t\t\t   SEXP sexp_comm){\n\tint len, rlen, commn=INTEGER(sexp_comm)[0], root=INTEGER(sexp_root)[0];\n\tint *displs=NULL, gsize, rank, i;\n\tchar *rdata;\n\tSEXP sexp_rdata2 = NULL;\n\t\n\tMPI_Comm_size(comm[commn], &gsize);\n\tMPI_Comm_rank(comm[commn], &rank);\n\tif (rank==root){\n\t\tdispls=(int *)Calloc(gsize, int);\n\t\tdispls[0]=0;\n\t\tfor (i=1; i < gsize; i++)\n\t\t\tdispls[i]=displs[i-1]+INTEGER(sexp_recvcounts)[i-1];\n\t}\n\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Gatherv(INTEGER(sexp_sdata), len, MPI_INT, \n\t\t\tINTEGER(sexp_rdata), INTEGER(sexp_recvcounts), displs, MPI_INT, \n\t\t\t\troot, comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Gatherv(REAL(sexp_sdata), len, MPI_DOUBLE, \n\t\t\tREAL(sexp_rdata), INTEGER(sexp_recvcounts), displs, \n\t\t\t\tMPI_DOUBLE, root, comm[commn]));\n\t\tbreak;\n\tcase 3:\n\t\tlen=LENGTH(STRING_ELT(sexp_sdata,0));\t\n\t\trlen=LENGTH(STRING_ELT(sexp_rdata,0));\n        \n                PROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n                rdata = (char *)Calloc(rlen, char);\n                MPI_Gatherv(CHAR2 (STRING_ELT ((sexp_sdata),0)),len,MPI_CHAR,\n\t\t     rdata, INTEGER(sexp_recvcounts),\n\t\t     displs, MPI_CHAR, root, comm[commn]);\n                SET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n\tcase 4:\n                len=LENGTH(sexp_sdata);\n                mpi_errhandler(MPI_Gatherv(RAW(sexp_sdata), len, MPI_BYTE,\n                        RAW(sexp_rdata), INTEGER(sexp_recvcounts), displs,\n                                MPI_BYTE, root, comm[commn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], rank, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\n\t}\n\tif (rank == root)\n\t\tFree(displs);\n\n\tif (INTEGER(sexp_type)[0]==3)\n\t\treturn sexp_rdata2;\n\telse\n\t\treturn sexp_rdata;\n}\n\nSEXP mpi_scatter(SEXP sexp_sdata,\n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_rdata,\n\t\t\t\t   SEXP sexp_root,\n\t\t\t\t   SEXP sexp_comm){\n\tint \tlen, rlen;\n\tint\tcommn=INTEGER(sexp_comm)[0], root=INTEGER(sexp_root)[0];\n\tchar \t*rdata;\n\tSEXP \tsexp_rdata2 = NULL;\n\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n \t\tlen=LENGTH(sexp_rdata);\n\t\tmpi_errhandler(MPI_Scatter(INTEGER(sexp_sdata), len, MPI_INT, \n\t\t\tINTEGER(sexp_rdata), len, MPI_INT, root, comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\tlen=LENGTH(sexp_rdata);\n\t\tmpi_errhandler(MPI_Scatter(REAL(sexp_sdata), len, MPI_DOUBLE, \n\t\t\tREAL(sexp_rdata), len, MPI_DOUBLE, root, comm[commn]));\n\t\tbreak;\n\tcase 3:\n \t\tlen=LENGTH(STRING_ELT(sexp_rdata,0));\n                rlen=LENGTH(STRING_ELT(sexp_rdata,0));\n\n                PROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n                rdata = (char *)Calloc(rlen, char);\n\t\tMPI_Scatter(CHAR2(STRING_ELT ((sexp_sdata),0)), len, MPI_CHAR,\n                       rdata, len, MPI_CHAR, root, comm[commn]);\n                SET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n\tcase 4:\n                len=LENGTH(sexp_rdata);\n                mpi_errhandler(MPI_Scatter(RAW(sexp_sdata), len, MPI_BYTE,\n                        RAW(sexp_rdata), len, MPI_BYTE, root, comm[commn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], root, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n        if (INTEGER(sexp_type)[0]==3)\n                return sexp_rdata2;\n        else\n                return sexp_rdata;\n}\n\nSEXP mpi_scatterv(SEXP sexp_sdata,\n\t\t\t\t  SEXP sexp_sendcounts,\n\t\t\t\t  SEXP sexp_type,\n\t\t\t\t  SEXP sexp_rdata,\n\t\t\t\t  SEXP sexp_root,\n\t\t\t\t  SEXP sexp_comm){\n\tint len, rlen, commn=INTEGER(sexp_comm)[0], root=INTEGER(sexp_root)[0];\n\tint gsize,rank,i,*displs=NULL;\n    \tchar *rdata;\n\tSEXP sexp_rdata2 = NULL;\n\n\tMPI_Comm_size(comm[commn], &gsize);\n\tMPI_Comm_rank(comm[commn], &rank);\n\tif (rank==root){\n\t\tdispls=(int *)Calloc(gsize, int);\n\t\tdispls[0]=0;\n\t\tfor (i=1; i < gsize; i++)\n\t\t\tdispls[i]=displs[i-1]+INTEGER(sexp_sendcounts)[i-1];\n\t}\n\t\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n\t\t len=LENGTH(sexp_rdata);\n\t\tmpi_errhandler(MPI_Scatterv(INTEGER(sexp_sdata), INTEGER(sexp_sendcounts),\n\t\t\tdispls, MPI_INT, INTEGER(sexp_rdata), len, MPI_INT, \n\t\t\t\troot, comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\t len=LENGTH(sexp_rdata);\n\t\tmpi_errhandler(MPI_Scatterv(REAL(sexp_sdata), INTEGER(sexp_sendcounts),\n\t\t\tdispls, MPI_DOUBLE, REAL(sexp_rdata), len,  \n\t\t\t\tMPI_DOUBLE, root, comm[commn]));\n\t\tbreak;\n\tcase 3:\n                len=LENGTH(STRING_ELT(sexp_rdata,0));\n                rlen=LENGTH(STRING_ELT(sexp_rdata,0));\n\n                PROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n                // rdata = (char *)R_alloc(rlen, sizeof(char));\n                rdata = (char *)Calloc(rlen, char);\n                MPI_Scatterv(CHAR2 (STRING_ELT ((sexp_sdata),0)), INTEGER(sexp_sendcounts),displs, \n\t\t\tMPI_CHAR,rdata, len, MPI_CHAR, root, comm[commn]);\n                SET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n\tcase 4:\n                len=LENGTH(sexp_rdata);\n                mpi_errhandler(MPI_Scatterv(RAW(sexp_sdata), INTEGER(sexp_sendcounts),\n                        displs, MPI_BYTE, RAW(sexp_rdata), len,\n                                MPI_BYTE, root, comm[commn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], rank, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n\tif (rank == root)\n\n\t\tFree(displs);\n\n        if (INTEGER(sexp_type)[0]==3)\n                return sexp_rdata2;\n        else\n                return sexp_rdata;\n}\n\nSEXP mpi_allgather(SEXP sexp_sdata,\n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_rdata,\n\t\t\t\t   SEXP sexp_comm){\n\tint len, rlen, commn=INTEGER(sexp_comm)[0];\n\tchar *rdata;\n\tSEXP sexp_rdata2 = NULL;\n\t\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Allgather(INTEGER(sexp_sdata), len, MPI_INT, \n\t\t\tINTEGER(sexp_rdata), len, MPI_INT, comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Allgather(REAL(sexp_sdata), len, MPI_DOUBLE, \n\t\t\tREAL(sexp_rdata), len, MPI_DOUBLE, comm[commn]));\n\t\tbreak;\n\tcase 3:\n\t \tlen=LENGTH(STRING_ELT(sexp_sdata,0));\n                rlen=LENGTH(STRING_ELT(sexp_rdata,0));\n\n                PROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n                rdata = (char *)Calloc(rlen, char);\n                MPI_Allgather(CHAR2 (STRING_ELT ((sexp_sdata),0)),len,\n\t\t\tMPI_CHAR,rdata, len, MPI_CHAR, comm[commn]);\n                SET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n \tcase 4:\n                len=LENGTH(sexp_sdata);\n                mpi_errhandler(MPI_Allgather(RAW(sexp_sdata), len, MPI_BYTE,\n                        RAW(sexp_rdata), len, MPI_BYTE, comm[commn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], 0, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\n\t}\n\n        if (INTEGER(sexp_type)[0]==3)\n                return sexp_rdata2;\n        else\n                return sexp_rdata;\n}\n\nSEXP mpi_allgatherv(SEXP sexp_sdata,\n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_rdata,\n\t\t\t\t   SEXP sexp_recvcounts,\n\t\t\t\t   SEXP sexp_comm){\n\tint len, rlen, commn=INTEGER(sexp_comm)[0], *displs, gsize, i;\n\tchar *rdata;\n\tSEXP sexp_rdata2 = NULL;\n\t\n\tMPI_Comm_size(comm[commn], &gsize);\n\tdispls=(int *)Calloc(gsize, int);\n\tdispls[0]=0;\n\tfor (i=1; i < gsize; i++)\n\t\tdispls[i]=displs[i-1]+INTEGER(sexp_recvcounts)[i-1];\n\n\tswitch (INTEGER(sexp_type)[0]){\n\tcase 1:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Allgatherv(INTEGER(sexp_sdata), len, MPI_INT,\n\t\t\tINTEGER(sexp_rdata), INTEGER(sexp_recvcounts), displs,\n\t\t\t\t MPI_INT,comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\tlen=LENGTH(sexp_sdata);\n\t\tmpi_errhandler(MPI_Allgatherv(REAL(sexp_sdata), len, MPI_DOUBLE,\n\t\t\tREAL(sexp_rdata), INTEGER(sexp_recvcounts), displs, \n\t\t\t\tMPI_DOUBLE, comm[commn]));\n\t\tbreak;\n\tcase 3:\n\t \tlen=LENGTH(STRING_ELT(sexp_sdata,0));\n                rlen=LENGTH(STRING_ELT(sexp_rdata,0));\n\n                PROTECT (sexp_rdata2  = allocVector (STRSXP, 1));\n                rdata = (char *)Calloc(rlen, char);\n                MPI_Allgatherv(CHAR2 (STRING_ELT ((sexp_sdata),0)),len, MPI_CHAR, rdata,\n\t\t      INTEGER(sexp_recvcounts), displs, MPI_CHAR, comm[commn]);\n                SET_STRING_ELT(sexp_rdata2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n \tcase 4:\n                len=LENGTH(sexp_sdata);\n                mpi_errhandler(MPI_Allgatherv(RAW(sexp_sdata), len, MPI_BYTE,\n                        RAW(sexp_rdata), INTEGER(sexp_recvcounts), displs,\n                                MPI_BYTE, comm[commn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_sdata=AS_NUMERIC(sexp_sdata));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_sdata), 1, datatype[0], 0, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\n\t}\n\tFree(displs);\n        if (INTEGER(sexp_type)[0]==3)\n                return sexp_rdata2;\n        else\n                return sexp_rdata;\n}\n\nSEXP mpi_bcast(SEXP sexp_data,\n\t\t\t   SEXP sexp_type,\n\t\t\t   SEXP\tsexp_rank,\n\t\t\t   SEXP sexp_comm,\n\t\t\t   SEXP sexp_buffunit){\n\n\tint len=LENGTH(sexp_data), type=INTEGER(sexp_type)[0];\n\tint rank=INTEGER(sexp_rank)[0], root,  commn=INTEGER(sexp_comm)[0],slen;\n\tint buffunit=INTEGER(sexp_buffunit)[0],errcode=0;\n\tchar *rdata;\n\tSEXP sexp_data2 = NULL;\n\t//MPI_Datatype xdouble;\n\tR_xlen_t xlen=XLENGTH(sexp_data);\n\t\n\tswitch (type){\n\tcase 1:\n\t\terrcode=MPI_Bcast(INTEGER(sexp_data), len, MPI_INT, rank, comm[commn]);\n\t\tbreak;\n\tcase 2:\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_data), len, MPI_DOUBLE, rank, comm[commn]));\n\t\tbreak;\n\tcase 3:\n        \tMPI_Comm_rank(comm[commn], &root);\n\t\tslen=LENGTH(STRING_ELT (sexp_data,0)); \n\t\tif (rank==root) \n\t\t\tMPI_Bcast(CHAR2 (STRING_ELT (sexp_data,0)), slen, \n\t\t\t\tMPI_CHAR, rank, comm[commn]);\n\t\telse {\n                \tPROTECT (sexp_data2  = allocVector (STRSXP, 1));\n\t               \trdata = (char *)Calloc(slen, char);\n                       \tMPI_Bcast(rdata, slen, MPI_CHAR, rank, comm[commn]);\n\t\t\tSET_STRING_ELT(sexp_data2, 0, mkChar(rdata));\n\t\t\tUNPROTECT(1);\n\t\t\tFree(rdata);\n\t\t}\n\t\tbreak;\n\tcase 4:\n                errcode=MPI_Bcast(RAW(sexp_data), len, MPI_BYTE, rank, comm[commn]);\n                break;\n\tcase 5:\n\t\tMPI_Type_contiguous(buffunit, MPI_DOUBLE, xdouble);\n\t\tMPI_Type_commit(xdouble);\n\t\tif ((xlen % buffunit) > 0) len=1+(xlen/buffunit); else len=xlen/buffunit;\n        mpi_errhandler(MPI_Bcast(REAL(sexp_data), len, xdouble[0], rank, comm[commn]));\n\t\tMPI_Type_free(xdouble);\n\t\tbreak;\n\tdefault:\n\t\tPROTECT(sexp_data=AS_NUMERIC(sexp_data));\n\t\tmpi_errhandler(MPI_Bcast(REAL(sexp_data), 1, datatype[0], rank, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n\tif (errcode!=MPI_SUCCESS){\n\t\tint errmsglen;\n\t\tchar errmsg[MPI_MAX_ERROR_STRING];\n\t\tMPI_Error_string(errcode, errmsg, &errmsglen);\n\t\tRprintf(\"%s\\n\",errmsg);\n\t\treturn mkString(\"error\");\n\t}\n\telse {\n        \tif ((INTEGER(sexp_type)[0]==3) && (rank!=root))\n                \treturn sexp_data2;\n        \telse\n                \treturn sexp_data;\n\t}\n}\n\nSEXP mpi_send(SEXP sexp_data, \n\t\t\t  SEXP sexp_type,\n\t\t\t  SEXP sexp_dest, \n\t\t\t  SEXP sexp_tag,\n\t\t\t  SEXP sexp_comm){\n\tint slen,len=LENGTH(sexp_data),type=INTEGER(sexp_type)[0], dest=INTEGER(sexp_dest)[0];\n\tint commn=INTEGER(sexp_comm)[0], tag=INTEGER(sexp_tag)[0];\n\n\tswitch (type){\n\tcase 1:\n\t\tmpi_errhandler(MPI_Send(INTEGER(sexp_data), len, MPI_INT, dest, tag, comm[commn]));\n\t\tbreak;\n\tcase 2:\n\t\tmpi_errhandler(MPI_Send(REAL(sexp_data), len, MPI_DOUBLE, dest, tag, comm[commn]));\n\t\tbreak;\n\tcase 3:\n\t\tslen=LENGTH(STRING_ELT(sexp_data,0));\n\t\tMPI_Send(CHAR2(STRING_ELT(sexp_data,0)),slen, MPI_CHAR, dest, tag, comm[commn]); \n\t\tbreak;\n        case 4:\n                MPI_Send(RAW(sexp_data),len, MPI_BYTE, dest, tag, comm[commn]);                \n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_data=AS_NUMERIC(sexp_data));\n\t\tmpi_errhandler(MPI_Send(REAL(sexp_data), 1, datatype[0], dest, tag, comm[commn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n\treturn R_NilValue;\n}\n\nSEXP mpi_recv(SEXP sexp_data, \n  \t\t\t  SEXP sexp_type,\n\t\t\t  SEXP sexp_source, \n\t\t\t  SEXP sexp_tag,\n\t\t\t  SEXP sexp_comm,\n\t\t\t  SEXP sexp_status){\n\tint len=LENGTH(sexp_data), type=INTEGER(sexp_type)[0], source=INTEGER(sexp_source)[0];\n\tint tag=INTEGER(sexp_tag)[0],commn=INTEGER(sexp_comm)[0], statusn=INTEGER(sexp_status)[0];\n\tint slen;\n\tchar *rdata;\n\tSEXP sexp_data2 = NULL;\n\n\tswitch (type){\n\tcase 1:\n\t\tmpi_errhandler(MPI_Recv(INTEGER(sexp_data), len, MPI_INT, source, tag, comm[commn],\n\t\t\t&status[statusn]));\n\t\tbreak;\n\tcase 2:\n\t\tmpi_errhandler(MPI_Recv(REAL(sexp_data), len, MPI_DOUBLE, source, tag, comm[commn],\n\t\t\t&status[statusn]));\n\t\tbreak;\n\tcase 3:\n\t\tslen=LENGTH(STRING_ELT(sexp_data,0));\n                PROTECT (sexp_data2  = allocVector (STRSXP, 1));\n                rdata = (char *)Calloc(slen, char);\n\t\tMPI_Recv(rdata, slen,MPI_CHAR,source,tag, comm[commn],&status[statusn]);\n                SET_STRING_ELT(sexp_data2, 0, mkChar(rdata));\n                UNPROTECT(1);\n\t\tFree(rdata);\n\t\tbreak;\n\tcase 4:          \n\t\tmpi_errhandler(MPI_Recv(RAW(sexp_data), len, MPI_BYTE, source, tag, comm[commn],\n                        &status[statusn]));\n                break;\n\n\tdefault:\n\t\tPROTECT(sexp_data=AS_NUMERIC(sexp_data));\n\t\tmpi_errhandler(MPI_Recv(REAL(sexp_data), 1, datatype[0], source, tag, comm[commn],\n\t\t\t&status[statusn]));\n\t\tUNPROTECT(1);\n\t\tbreak;\t\t\n\t}\n        if (INTEGER(sexp_type)[0]==3)\n                return sexp_data2;\n        else\n\t\treturn sexp_data;\n}\n\nSEXP mpi_reduce(SEXP sexp_send, \n\t\t\t\tSEXP sexp_type,\n\t\t\t\tSEXP sexp_op, \n\t\t\t\tSEXP sexp_dest,\n\t\t\t\tSEXP sexp_comm){\n\tint len=LENGTH(sexp_send), type=INTEGER(sexp_type)[0], dest=INTEGER(sexp_dest)[0];\n\tint commn=INTEGER(sexp_comm)[0], intop = INTEGER(sexp_op)[0];\n\tMPI_Op op= MPI_SUM;\n\tSEXP sexp_recv = NULL;\n\n\tswitch(intop){\n\tcase 1:\n\t\top=MPI_SUM;\n\t\tbreak;\n\tcase 2:\n\t\top=MPI_PROD;\n\t\tbreak;\n\tcase 3:\n\t\top=MPI_MAX;\n\t\tbreak;\n\tcase 4:\n\t\top=MPI_MIN;\n\t\tbreak;\n\tcase 5:\n\t\top=MPI_MAXLOC;\n\t\tbreak;\n\tcase 6:\n\t\top=MPI_MINLOC;\n\t\tbreak;\n\n\t}\n\tswitch(type){\n\tcase 1:\n\t\tif (intop < 5){\n\t\t\tPROTECT (sexp_recv = allocVector(INTSXP, len));\n\t\t\tmpi_errhandler(MPI_Reduce(INTEGER(sexp_send), INTEGER(sexp_recv), \n\t\t\tlen, MPI_INT, op, dest, comm[commn])); \n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\tint *send, rank, i;\n\t\t\tMPI_Comm_rank(comm[commn], &rank);\n\t\t\tsend = (int *)Calloc(2*len, int);\n\t\t\tfor (i=0; i < len; i++){\n\t\t\t\tsend[2*i] = INTEGER(sexp_send)[i];\n\t\t\t\tsend[2*i+1] = rank; \n\t\t\t}\n\t\t\tPROTECT (sexp_recv = allocVector(INTSXP, 2*len));\n\t\t\tmpi_errhandler(MPI_Reduce(send, INTEGER(sexp_recv), \n\t\t\tlen, MPI_2INT, op, dest, comm[commn])); \n\t\t\tFree(send);\n\t\t\tbreak;\n\t\t}\n\tcase 2:\n\t\tif (intop < 5){\n\t\t\tPROTECT (sexp_recv = allocVector(REALSXP, len));\n\t\t\tmpi_errhandler(MPI_Reduce(REAL(sexp_send), REAL(sexp_recv), \n\t\t\tlen, MPI_DOUBLE, op, dest, comm[commn])); \n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tint i, rank;\n\t\t\tstruct Dblint *send, *recv;\n\t\t\tsend=(struct Dblint *)Calloc(len, struct Dblint);\n\t\t\trecv=(struct Dblint *)Calloc(len, struct Dblint);\n\t\t\tMPI_Comm_rank(comm[commn], &rank);\n\t\t\tfor (i=0;i<len;i++){\n\t\t\t\tsend[i].x = REAL(sexp_send)[i];\n\t\t\t\tsend[i].rank = rank;\n\t\t\t}\n\t\t\tmpi_errhandler(MPI_Reduce(send, recv, len, MPI_DOUBLE_INT, op, dest, comm[commn])); \n\t\t\tPROTECT (sexp_recv = allocVector(REALSXP, 2*len));\n\t\t\tfor (i=0; i<len; i++){\n\t\t\t\tREAL(sexp_recv)[2*i] = recv[i].x;\n\t\t\t\tREAL(sexp_recv)[2*i+1] = recv[i].rank;\n\t\t\t}\n\t\t\tFree(send);\n\t\t\tFree(recv);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tUNPROTECT(1);\t\t\t\n\treturn sexp_recv;\n}\n\n\nSEXP mpi_allreduce(SEXP sexp_send, \n\t\t\t\t   SEXP sexp_type,\n\t\t\t\t   SEXP sexp_op,\n\t\t\t\t   SEXP sexp_comm){\n\tint len=LENGTH(sexp_send), type=INTEGER(sexp_type)[0], commn=INTEGER(sexp_comm)[0];\n\tint intop = INTEGER(sexp_op)[0];\n\tMPI_Op op = MPI_SUM;\n\tSEXP sexp_recv = NULL;\n\n\tswitch(intop){\n\tcase 1:\n\t\top=MPI_SUM;\n\t\tbreak;\n\tcase 2:\n\t\top=MPI_PROD;\n\t\tbreak;\n\tcase 3:\n\t\top=MPI_MAX;\n\t\tbreak;\n\tcase 4:\n\t\top=MPI_MIN;\n\t\tbreak;\n\tcase 5:\n\t\top=MPI_MAXLOC;\n\t\tbreak;\n\tcase 6:\n\t\top=MPI_MINLOC;\n\t\tbreak;\n\n\t}\n\n\tswitch(type){\n\tcase 1:\n\t\tif (intop < 5){\n\t\t\tPROTECT (sexp_recv = allocVector(INTSXP, len));\n\t\t\tmpi_errhandler(MPI_Allreduce(INTEGER(sexp_send), INTEGER(sexp_recv), \n\t\t\tlen, MPI_INT, op, comm[commn])); \n\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\tint *send, rank, i;\n\t\t\tMPI_Comm_rank(comm[commn], &rank);\n\t\t\tsend = (int *)Calloc(2*len, int);\n\t\t\tfor (i=0; i < len; i++){\n\t\t\t\tsend[2*i] = INTEGER(sexp_send)[i];\n\t\t\t\tsend[2*i+1] = rank; \n\t\t\t}\n\t\t\tPROTECT (sexp_recv = allocVector(INTSXP, 2*len));\n\t\t\tmpi_errhandler(MPI_Allreduce(send, INTEGER(sexp_recv), \n\t\t\tlen, MPI_2INT, op, comm[commn])); \n\t\t\tFree(send);\n\t\tbreak;\n\t\t}\n\tcase 2:\n\t\tif (intop < 5) {\n\t\t\tPROTECT (sexp_recv = allocVector(REALSXP, len));\n\t\t\tmpi_errhandler(MPI_Allreduce(REAL(sexp_send), REAL(sexp_recv), \n\t\t\t\tlen, MPI_DOUBLE, op, comm[commn])); \n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tint i, rank;\n\t\t\tstruct Dblint *send, *recv;\n\t\t\tsend=(struct Dblint *)Calloc(len, struct Dblint);\n\t\t\trecv=(struct Dblint *)Calloc(len, struct Dblint);\n\t\t\tMPI_Comm_rank(comm[commn], &rank);\n\t\t\tfor (i=0;i<len;i++){\n\t\t\t\tsend[i].x = REAL(sexp_send)[i];\n\t\t\t\tsend[i].rank = rank;\n\t\t\t}\n\t\t\tmpi_errhandler(MPI_Allreduce(send, recv, len, MPI_DOUBLE_INT, op, comm[commn])); \n\t\t\tPROTECT (sexp_recv = allocVector(REALSXP, 2*len));\n\t\t\tfor (i=0; i<len; i++){\n\t\t\t\tREAL(sexp_recv)[2*i] = recv[i].x;\n\t\t\t\tREAL(sexp_recv)[2*i+1] = recv[i].rank;\n\t\t\t}\n\t\t\tFree(send);\n\t\t\tFree(recv);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tUNPROTECT(1);\t\t\t\n\treturn sexp_recv;\n}\n\nSEXP mpi_iprobe(SEXP sexp_source, SEXP sexp_tag, SEXP sexp_comm, SEXP sexp_status){\n\tint flag;\n\tmpi_errhandler(MPI_Iprobe(INTEGER (sexp_source)[0], \n\t\tINTEGER(sexp_tag)[0], comm[INTEGER(sexp_comm)[0]], &flag, \n\t\t&status[INTEGER(sexp_status)[0]]));\n\treturn AsInt(flag);\n}\n\nSEXP mpi_probe(SEXP sexp_source, SEXP sexp_tag, SEXP sexp_comm, SEXP sexp_status){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Probe(INTEGER (sexp_source)[0], \n\t\tINTEGER(sexp_tag)[0], comm[INTEGER(sexp_comm)[0]], \n\t\t&status[INTEGER(sexp_status)[0]]))));\n}\n\nSEXP mpi_get_count(SEXP sexp_status, SEXP sexp_type){\n\tSEXP sexp_count;\n\tMPI_Datatype datatype = MPI_DATATYPE_NULL;\n\t\n\tswitch(INTEGER(sexp_type)[0]){\n\tcase 1:\n\t\tdatatype=MPI_INT;\n\t\tbreak;\n\tcase 2:\n\t\tdatatype=MPI_DOUBLE;\n\t\tbreak;\n\tcase 3:\n\t\tdatatype=MPI_CHAR;\n\t\tbreak;\n \tcase 4:\n                datatype=MPI_BYTE;\n                break;\n\n\t}\n\t\n\tPROTECT (sexp_count = allocVector(INTSXP, 1));\n\tmpi_errhandler(MPI_Get_count(&status[INTEGER(sexp_status)[0]], datatype, INTEGER(sexp_count)));\n\tUNPROTECT(1);\n\n\treturn sexp_count;\n}\n\nSEXP mpi_get_sourcetag (SEXP sexp_status){\n\tint statusn =INTEGER(sexp_status)[0];\n\tSEXP sexp_st;\n\tPROTECT(sexp_st=allocVector(INTSXP,2));\n\tINTEGER(sexp_st)[0]=status[statusn].MPI_SOURCE;\n\tINTEGER(sexp_st)[1]=status[statusn].MPI_TAG;\n\tUNPROTECT(1);\n\treturn sexp_st;\n}\n\n/******************************* COMM **************************************/\nSEXP mpi_barrier(SEXP sexp_comm){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Barrier(comm[INTEGER(sexp_comm)[0]])))); \n}\n\nSEXP mpi_comm_is_null(SEXP sexp_comm){\n\treturn AsInt(comm[INTEGER(sexp_comm)[0]]==MPI_COMM_NULL);\n}\n\nSEXP mpi_comm_size(SEXP sexp_comm){\n\tint size;\n\tMPI_Comm_size(comm[INTEGER(sexp_comm)[0]], &size); \n\treturn AsInt(size);\n}\n\nSEXP mpi_comm_rank(SEXP sexp_comm){\n\tint rank;\n\tMPI_Comm_rank(comm[INTEGER(sexp_comm)[0]], &rank);\n\treturn AsInt(rank);\n}\n\nSEXP mpi_comm_dup(SEXP sexp_comm, SEXP sexp_newcomm){\n    int commn=INTEGER(sexp_comm)[0], newcommn=INTEGER(sexp_newcomm)[0];\n    if (commn==0)\n        return AsInt(erreturn(mpi_errhandler(MPI_Comm_dup(MPI_COMM_WORLD,\n                &comm[newcommn]))));\n    else\n        return AsInt(erreturn(mpi_errhandler(MPI_Comm_dup(comm[commn],\n                &comm[newcommn]))));\n}\n\nSEXP mpi_comm_c2f(SEXP sexp_comm){\n  int c = INTEGER(sexp_comm)[0];\n  return AsInt(MPI_Comm_c2f(comm[c]));\n}\n\nSEXP mpi_comm_free(SEXP sexp_comm){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Comm_free(&comm[INTEGER(sexp_comm)[0]]))));\n}\n\nSEXP mpi_abort(SEXP sexp_comm){\n\tint errcode=0, commn=INTEGER(sexp_comm)[0];\n\tif (commn==0)\n\t\tMPI_Abort(MPI_COMM_WORLD, errcode);\n\telse\n\t\tMPI_Abort(comm[commn], errcode);\n\tRprintf(\"The return errcode for mpi.abort() is %d\\n\", errcode);\n\treturn AsInt(errcode);\n}\n\n/********************Intercomm********************************************/\nSEXP mpi_comm_set_errhandler(SEXP sexp_comm){\n\treturn AsInt(erreturn(MPI_Comm_set_errhandler(comm[INTEGER(sexp_comm)[0]], \n\t\tMPI_ERRORS_RETURN)));\n}\n\nSEXP mpi_comm_test_inter(SEXP sexp_comm){\n\tint flag;\n\tMPI_Comm_test_inter(comm[INTEGER(sexp_comm)[0]], &flag);\n\treturn AsInt(flag);\n}\n\n#ifdef MPI2\nSEXP mpi_comm_spawn (SEXP sexp_slave,\n\t\t\t\t\t SEXP sexp_argv,\n\t\t\t\t\t SEXP sexp_nslave,\n\t\t\t\t\t SEXP sexp_info,\n\t\t\t\t\t SEXP sexp_root,\n\t\t\t\t\t SEXP sexp_intercomm,\n\t\t\t\t\t SEXP sexp_quiet){\n    int i, nslave = INTEGER (sexp_nslave)[0], len = LENGTH (sexp_argv);\n\tint infon=INTEGER(sexp_info)[0], root=INTEGER(sexp_root)[0];\n\tint intercommn=INTEGER(sexp_intercomm)[0], *slaverrcode, realns;\n    int quiet = INTEGER(sexp_quiet)[0];\n\n\tslaverrcode = (int *)Calloc(nslave, int);\n\tif (len==0)\n\t\tmpi_errhandler(MPI_Comm_spawn (CHAR2 (STRING_ELT (sexp_slave, 0)), MPI_ARGV_NULL, nslave,   \n\t\t\t\t\tinfo[infon], root, MPI_COMM_SELF, &comm[intercommn],\n\t\t\t\t\tslaverrcode)); \n\telse {\n\t\tchar **argv = (char **) R_alloc (len+1, sizeof (char *));\n\t\tfor (i = 0; i < len; i++)\n\t\t\targv[i] = CHAR2 (STRING_ELT (sexp_argv, i));\n\t\targv[len] = NULL;\n\t\tmpi_errhandler(MPI_Comm_spawn (CHAR2 (STRING_ELT (sexp_slave, 0)), argv, nslave,   \n\t\t\t\t\tinfo[infon], root, MPI_COMM_SELF, &comm[intercommn],\n\t\t\t\t\tslaverrcode)); \n\t}\n\n\tMPI_Comm_remote_size(comm[intercommn], &realns);\n\tif (realns < nslave)\n\t\tfor (i=0; i < nslave; mpi_errhandler(slaverrcode[i++]));\n\n\tFree(slaverrcode);\n\tif (!quiet || realns < nslave)\n\t\tRprintf(\"\\t%d slaves are spawned successfully. %d failed.\\n\", realns, nslave-realns);\n    return AsInt(realns);\n}\n\nSEXP mpi_comm_get_parent(SEXP sexp_comm){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Comm_get_parent(&comm[INTEGER(sexp_comm)[0]]))));\n}\n\nSEXP mpi_is_master(){\n\tint check;\n\tMPI_Comm master;\n\tMPI_Comm_get_parent(&master);\n\tcheck=(master==MPI_COMM_NULL);\n\tif (!check) MPI_Comm_free(&master);\n\treturn AsInt(check);\n}\n\nSEXP mpi_comm_disconnect(SEXP sexp_comm){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Comm_disconnect(&comm[INTEGER(sexp_comm)[0]]))));\n}\n#endif\n\nSEXP mpi_intercomm_merge(SEXP sexp_intercomm, SEXP sexp_high, SEXP sexp_comm){\n\treturn AsInt(erreturn(mpi_errhandler(MPI_Intercomm_merge(comm[INTEGER(sexp_intercomm)[0]],\n\t\tINTEGER(sexp_high)[0],\n\t\t&comm[INTEGER(sexp_comm)[0]]))));\n}\n\nSEXP mpi_comm_remote_size(SEXP sexp_comm){\n\tint size;\n\tmpi_errhandler(MPI_Comm_remote_size(comm[INTEGER(sexp_comm)[0]], &size));\n\treturn AsInt(size);\n}\n\nSEXP mpi_sendrecv(SEXP sexp_senddata,\n        SEXP sexp_sendtype,\n        SEXP sexp_dest,\n        SEXP sexp_sendtag,\n        SEXP sexp_recvdata,\n        SEXP sexp_recvtype,                   \n        SEXP sexp_source,                   \n        SEXP sexp_recvtag,\n        SEXP sexp_comm,\n        SEXP sexp_status)\n{\n    int slen, rlen;\n    int sendcount=LENGTH(sexp_senddata), sendtype=INTEGER(sexp_sendtype)[0];\n    int dest=INTEGER(sexp_dest)[0], sendtag=INTEGER(sexp_sendtag)[0];\n    int recvcount=LENGTH(sexp_recvdata), recvtype=INTEGER(sexp_recvtype)[0];\n    int source=INTEGER(sexp_source)[0], recvtag=INTEGER(sexp_recvtag)[0];\n    int commn=INTEGER(sexp_comm)[0],statusn=INTEGER(sexp_status)[0];\n    char *rdata;\n    SEXP sexp_recvdata2 = NULL;\n\n    switch(sendtype){\n        case 1:\n            switch(recvtype){\n               \tcase 1:\n                    MPI_Sendrecv(INTEGER(sexp_senddata),sendcount, \n\t\t\tMPI_INT,dest,sendtag, INTEGER(sexp_recvdata), \n\t\t\trecvcount, MPI_INT, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 2:\n                    MPI_Sendrecv(INTEGER(sexp_senddata),sendcount, \n\t\t\tMPI_INT,dest,sendtag, REAL(sexp_recvdata), \n\t\t\trecvcount, MPI_DOUBLE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 3:\n                    rlen=LENGTH(STRING_ELT(sexp_recvdata,0)); \n                    PROTECT (sexp_recvdata2  = allocVector (STRSXP, 1));\n                    rdata = (char *)Calloc(rlen, char);\n                    MPI_Sendrecv(INTEGER(sexp_senddata),sendcount, MPI_INT, dest, sendtag, \n\t\t\trdata, rlen, MPI_CHAR, source, recvtag, comm[commn],  &status[statusn]);\n                    SET_STRING_ELT(sexp_recvdata2, 0, mkChar(rdata));\n                    UNPROTECT(1);\n                    Free(rdata);\n                    break;\n \t\tcase 4:\n                     MPI_Sendrecv(INTEGER(sexp_senddata),sendcount,\n                        MPI_INT,dest,sendtag, RAW(sexp_recvdata),\n                        recvcount, MPI_BYTE, source,recvtag,\n                        comm[commn], &status[statusn]);\n\t\t    break;\n                }\n\t    break;\n        case 2:\n            switch(recvtype){\n                case 1:\n                    MPI_Sendrecv(REAL(sexp_senddata),sendcount, \n\t\t\tMPI_DOUBLE,dest,sendtag, INTEGER(sexp_recvdata), \n\t\t\trecvcount, MPI_INT, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 2: \n                    MPI_Sendrecv(REAL(sexp_senddata),sendcount, \n\t\t\tMPI_DOUBLE,dest,sendtag, REAL(sexp_recvdata), \n\t\t\trecvcount, MPI_DOUBLE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 3:\n                    rlen=LENGTH(STRING_ELT(sexp_recvdata,0)); \n                    PROTECT (sexp_recvdata2  = allocVector (STRSXP, 1));\n                    rdata = (char *)Calloc(rlen, char);\n                    MPI_Sendrecv(REAL(sexp_senddata),sendcount, MPI_DOUBLE, dest, sendtag, \n\t\t\trdata, rlen, MPI_CHAR, source, recvtag, comm[commn],  &status[statusn]);\n                    SET_STRING_ELT(sexp_recvdata2, 0, mkChar(rdata));\n                    UNPROTECT(1);\n                    Free(rdata);\n                    break;\n \t\tcase 4:\n                    MPI_Sendrecv(REAL(sexp_senddata),sendcount,\n                        MPI_DOUBLE,dest,sendtag, RAW(sexp_recvdata),\n                        recvcount, MPI_BYTE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n\n                }\n            break;\n        case 3: \n            slen=LENGTH(STRING_ELT(sexp_senddata,0));                       \n  \n            switch(recvtype){\n               \tcase 1:\n                    MPI_Sendrecv(CHAR2(STRING_ELT(sexp_senddata,0)),slen, \n\t\t\tMPI_CHAR,dest,sendtag, INTEGER(sexp_recvdata), \n\t\t\trecvcount, MPI_INT, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 2:                       \n\t\t    MPI_Sendrecv(CHAR2(STRING_ELT(sexp_senddata,0)),slen, \n\t\t\tMPI_CHAR,dest,sendtag, REAL(sexp_recvdata), \n\t\t\trecvcount, MPI_DOUBLE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 3:\n                    rlen=LENGTH(STRING_ELT(sexp_recvdata,0));\n                    PROTECT (sexp_recvdata2  = allocVector (STRSXP, 1));\n                    rdata = (char *)Calloc(rlen, char);\n\n\t\t    MPI_Sendrecv(CHAR2(STRING_ELT(sexp_senddata,0)),slen, MPI_CHAR, dest, sendtag, \n\t\t\trdata, rlen, MPI_CHAR, source, recvtag, comm[commn], &status[statusn]);\n                    SET_STRING_ELT(sexp_recvdata2, 0, mkChar(rdata));\n                    UNPROTECT(1);\n                    Free(rdata);\n                    break;\n \t\tcase 4:\n                    MPI_Sendrecv(CHAR2(STRING_ELT(sexp_senddata,0)),slen,\n                        MPI_CHAR,dest,sendtag, RAW(sexp_recvdata),\n                        recvcount, MPI_BYTE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n\n          \t}\n   \t\tbreak;\n \tcase 4:\n            switch(recvtype){\n                case 1:\n                    MPI_Sendrecv(RAW(sexp_senddata),sendcount,\n                        MPI_BYTE,dest,sendtag, INTEGER(sexp_recvdata),\n                        recvcount, MPI_INT, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 2:\n                    MPI_Sendrecv(RAW(sexp_senddata),sendcount,\n                        MPI_BYTE,dest,sendtag, REAL(sexp_recvdata),\n                        recvcount, MPI_DOUBLE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                case 3:\n                    rlen=LENGTH(STRING_ELT(sexp_recvdata,0));\n                    PROTECT (sexp_recvdata2  = allocVector (STRSXP, 1));\n                    rdata = (char *)Calloc(rlen, char);\n                    MPI_Sendrecv(RAW(sexp_senddata),sendcount, MPI_BYTE, dest, sendtag, \n\t\t\trdata, rlen, MPI_CHAR, source, recvtag, comm[commn],  &status[statusn]);\n                    SET_STRING_ELT(sexp_recvdata2, 0, mkChar(rdata));\n                    UNPROTECT(1);\n                    Free(rdata);\n                    break;\n                case 4:\n                    MPI_Sendrecv(RAW(sexp_senddata),sendcount,\n                        MPI_BYTE,dest,sendtag, RAW(sexp_recvdata),\n                        recvcount, MPI_BYTE, source,recvtag,\n                        comm[commn], &status[statusn]);\n                    break;\n                }\n            break;\n\n\t    }\n    if (recvtype==3)\n\treturn sexp_recvdata2;\n    else\n    \treturn sexp_recvdata;          \n}\n\nSEXP mpi_sendrecv_replace(SEXP sexp_data,\n        SEXP sexp_type,\n        SEXP sexp_dest,\n        SEXP sexp_sendtag,\n        SEXP sexp_source,\n        SEXP sexp_recvtag,\n        SEXP sexp_comm, \n        SEXP sexp_status)\n{\n        int slen;\n        int len=LENGTH(sexp_data), type=INTEGER(sexp_type)[0];\n        int dest=INTEGER(sexp_dest)[0], sendtag=INTEGER(sexp_sendtag)[0];\n        int source=INTEGER(sexp_source)[0],recvtag=INTEGER(sexp_recvtag)[0];\n        int commn=INTEGER(sexp_comm)[0],statusn=INTEGER(sexp_status)[0];\n\tchar *srdata;\n\tSEXP sexp_data2 = NULL;\n\n        switch (type){\n        case 1:\n                MPI_Sendrecv_replace(INTEGER(sexp_data), len, MPI_INT, dest, \n\t\tsendtag, source, recvtag, comm[commn], &status[statusn]);\n                break;\n        case 2:\n                MPI_Sendrecv_replace(REAL(sexp_data), len, MPI_DOUBLE, dest, \n\t\tsendtag, source, recvtag, comm[commn], &status[statusn]);\n                break;\n\n        case 3:\n                slen=LENGTH(STRING_ELT(sexp_data,0));\n\t\tPROTECT (sexp_data2  = allocVector (STRSXP, 1));\n\t\tsrdata= (char *)Calloc(slen, char);\n\t\tstrcpy(srdata, CHAR(STRING_ELT(sexp_data,0)));\n                MPI_Sendrecv_replace(srdata, slen,MPI_CHAR, dest, sendtag, source, recvtag, \n\t\t\t\tcomm[commn], &status[statusn]); \n\t\tUNPROTECT(1);\n\t\tFree(srdata); \n                break;\n \tcase 4:\n                MPI_Sendrecv_replace(RAW(sexp_data), len, MPI_BYTE, dest,\n                sendtag, source, recvtag, comm[commn], &status[statusn]);\n                break;\n\n        default:\n                PROTECT(sexp_data=AS_NUMERIC(sexp_data));\n                MPI_Sendrecv_replace(REAL(sexp_data), 1, datatype[0], dest, \n\t\t\tsendtag, source, recvtag, comm[commn],\n                        &status[statusn]);                        \n                break;\n          }\n\tif (type==3)\n\t\treturn sexp_data2;\n\telse\n          \treturn sexp_data;\n}\n\n/************ cart dim *************************************/\n\nSEXP mpi_cart_create(SEXP sexp_comm_old,  SEXP sexp_dims, SEXP sexp_periods, SEXP sexp_reorder, \n           SEXP sexp_comm_cart) {\n        int comm_old = INTEGER(sexp_comm_old)[0];\n        int ndims = LENGTH(sexp_dims);\n        int reorder = INTEGER(sexp_reorder)[0];\n        int comm_cart = INTEGER(sexp_comm_cart)[0];\n        int retcode; \n        retcode=erreturn(mpi_errhandler(MPI_Cart_create(comm[comm_old], ndims, \n                INTEGER(sexp_dims), INTEGER(sexp_periods), reorder, &comm[comm_cart])));    \n        return  AsInt(retcode);\n}\n\nSEXP mpi_dims_create(SEXP sexp_nnodes, SEXP sexp_ndims, SEXP sexp_dims) {\n        int nnodes = INTEGER(sexp_nnodes)[0];\n        int ndims = INTEGER(sexp_ndims)[0];\n        mpi_errhandler(MPI_Dims_create(nnodes, ndims, INTEGER(sexp_dims)));\n        return sexp_dims;\n}\n\n\nSEXP mpi_cartdim_get(SEXP sexp_comm) {\n        int comm2 = INTEGER(sexp_comm)[0];\n        int ndims;\n        mpi_errhandler(MPI_Cartdim_get(comm[comm2], &ndims));\n        return AsInt(ndims);    \n}\n\nSEXP mpi_cart_get(SEXP sexp_comm, SEXP sexp_maxdims) {\n        int comm2 = INTEGER(sexp_comm)[0];\n        int maxdims = INTEGER(sexp_maxdims)[0];\n        SEXP dims_periods_coords;\n\n        PROTECT (dims_periods_coords = allocVector(INTSXP, maxdims*3));\n        \n        mpi_errhandler(MPI_Cart_get(comm[comm2], maxdims, INTEGER(dims_periods_coords), \n\t\tINTEGER(dims_periods_coords) + maxdims, INTEGER(dims_periods_coords) + maxdims*2));\n        \n        UNPROTECT(1);\n        return dims_periods_coords;\n}\n\n\nSEXP mpi_cart_rank(SEXP sexp_comm, SEXP sexp_coords){\n        int comm2 = INTEGER(sexp_comm)[0];      \n        int rank;\n        mpi_errhandler(MPI_Cart_rank(comm[comm2], INTEGER(sexp_coords), &rank));\n        return AsInt(rank);\n}\n\nSEXP mpi_cart_coords(SEXP sexp_comm, SEXP sexp_rank, SEXP sexp_maxdims) {\n        int comm2 = INTEGER(sexp_comm)[0];\n        int rank = INTEGER(sexp_rank)[0];\n        int maxdims = INTEGER(sexp_maxdims)[0];\n        SEXP coords;\n        PROTECT (coords = allocVector(INTSXP, maxdims));\n        mpi_errhandler(MPI_Cart_coords(comm[comm2], rank, maxdims, INTEGER(coords)));\n        UNPROTECT(1);   \n        return coords;\n}\n\n\nSEXP mpi_cart_shift(SEXP sexp_comm, SEXP sexp_direction, SEXP sexp_disp) {\n        int comm2 = INTEGER(sexp_comm)[0];\n        int direction = INTEGER(sexp_direction)[0];\n        int disp = INTEGER(sexp_disp)[0];\n        SEXP rank_source_dest;  \n        PROTECT (rank_source_dest = allocVector(INTSXP,2 ));\n        mpi_errhandler(MPI_Cart_shift(comm[comm2], direction, disp, &INTEGER(rank_source_dest)[0],\n\t\t &INTEGER(rank_source_dest)[1]));\n        UNPROTECT(1);\n        return rank_source_dest;\n}\n\n/************** nonblocking point to point calls *************************/\nSEXP mpi_isend(SEXP sexp_data,\n                          SEXP sexp_type,\n                          SEXP sexp_dest,\n                          SEXP sexp_tag,\n                          SEXP sexp_comm,\n                          SEXP sexp_request){\n        int slen,len=LENGTH(sexp_data),type=INTEGER(sexp_type)[0], dest=INTEGER(sexp_dest)[0];\n        int commn=INTEGER(sexp_comm)[0], tag=INTEGER(sexp_tag)[0], requestn=INTEGER(sexp_request)[0];\n        \n        switch (type){\n        case 1:\n                mpi_errhandler(MPI_Isend(INTEGER(sexp_data), len, MPI_INT, dest, tag, \n\t\t\tcomm[commn], &request[requestn]));\n                break;\n        case 2:\n\n                mpi_errhandler(MPI_Isend(REAL(sexp_data), len, MPI_DOUBLE, dest, tag, comm[commn], \n\t\t\t&request[requestn]));\n                break;\n        case 3:\n                slen=LENGTH(STRING_ELT(sexp_data,0));\n                mpi_errhandler(MPI_Isend(CHAR2(STRING_ELT(sexp_data,0)),slen, MPI_CHAR, dest, \n\t\t\ttag, comm[commn], &request[requestn]));\n                break;\n\tcase 4:\n\n                mpi_errhandler(MPI_Isend(RAW(sexp_data), len, MPI_BYTE, dest, tag, comm[commn],\n                        &request[requestn]));\n                break;\n\n        default:\n                PROTECT(sexp_data=AS_NUMERIC(sexp_data));\n                mpi_errhandler(MPI_Isend(REAL(sexp_data), 1, datatype[0], dest, tag, comm[commn], \n\t\t\t&request[requestn]));\n                UNPROTECT(1);\n                break;\n        }\n        return R_NilValue;\n}\n\nSEXP mpi_irecv(SEXP sexp_data,\n                          SEXP sexp_type,\n                          SEXP sexp_source,\n                          SEXP sexp_tag,\n                          SEXP sexp_comm,\n                          SEXP sexp_request){\n        int slen,len=LENGTH(sexp_data),type=INTEGER(sexp_type)[0], source=INTEGER(sexp_source)[0];\n        int commn=INTEGER(sexp_comm)[0], tag=INTEGER(sexp_tag)[0], requestn=INTEGER(sexp_request)[0];\n\n        switch (type){\n        case 1:\n                mpi_errhandler(MPI_Irecv(INTEGER(sexp_data), len, MPI_INT, source, tag, \n\t\t\tcomm[commn], &request[requestn]));\n                break;\n        case 2:\n                mpi_errhandler(MPI_Irecv(REAL(sexp_data), len, MPI_DOUBLE, source, tag, comm[commn], \n\t\t\t&request[requestn]));\n                break;\n        case 3:\n                slen=LENGTH(STRING_ELT(sexp_data,0));\n                        mpi_errhandler(MPI_Irecv(CHAR2(STRING_ELT(sexp_data,0)),slen, MPI_CHAR, \n\t\t\t\tsource, tag, comm[commn], &request[requestn]));\n                break;\n \tcase 4:\n                mpi_errhandler(MPI_Irecv(RAW(sexp_data), len, MPI_BYTE, source, tag, comm[commn],\n                        &request[requestn]));\n                break;\n\n        default:\n                PROTECT(sexp_data=AS_NUMERIC(sexp_data));\n                mpi_errhandler(MPI_Irecv(REAL(sexp_data), 1, datatype[0], source, tag, comm[commn], \n\t\t\t&request[requestn]));\n                UNPROTECT(1);\n                break;\n        }\n        return R_NilValue;\n}\n\nSEXP mpi_wait(SEXP sexp_request, SEXP sexp_status){\n        int requestn=INTEGER(sexp_request)[0], statusn=INTEGER(sexp_status)[0];\n        mpi_errhandler(MPI_Wait(&request[requestn], &status[statusn]));\n        return R_NilValue;\n}\n\n\nSEXP mpi_test(SEXP sexp_request,  SEXP sexp_status){\n        int requestn=INTEGER(sexp_request)[0], flag, statusn=INTEGER(sexp_status)[0];\n        mpi_errhandler(MPI_Test(&request[requestn], &flag, &status[statusn]));\n        return AsInt(flag);\n}\n\nSEXP mpi_cancel(SEXP sexp_request){\n\tint requestn=INTEGER(sexp_request)[0];\n\tmpi_errhandler(MPI_Cancel(&request[requestn]));\n\treturn R_NilValue;\n}\n\nSEXP mpi_test_cancelled(SEXP sexp_status){\n        int flag, statusn=INTEGER(sexp_status)[0];\n        mpi_errhandler(MPI_Test_cancelled(&status[statusn], &flag));\n        return AsInt(flag);\n}\n\nSEXP mpi_waitany(SEXP sexp_count, SEXP sexp_status){\n        int index, countn=INTEGER(sexp_count)[0],statusn=INTEGER(sexp_status)[0];\n        mpi_errhandler(MPI_Waitany(countn, request, &index, &status[statusn]));\n        return AsInt(index);\n}\n\nSEXP mpi_testany(SEXP sexp_count, SEXP sexp_status){\n        int countn=INTEGER(sexp_count)[0],  statusn=INTEGER(sexp_status)[0];\n\t\tSEXP indexflag;\n\t\tPROTECT (indexflag = allocVector(INTSXP, 2));\n        mpi_errhandler(MPI_Testany(countn, request, &INTEGER(indexflag)[0],\n\t\t&INTEGER(indexflag)[1], &status[statusn]));\n\t\tUNPROTECT(1);\n        return indexflag;\n}\n\nSEXP mpi_waitall(SEXP sexp_count){\n        int countn=INTEGER(sexp_count)[0];\n        mpi_errhandler(MPI_Waitall(countn, request, status));\n        return R_NilValue;\n}\n\nSEXP mpi_testall(SEXP sexp_count){\n        int countn=INTEGER(sexp_count)[0], flag;\n        mpi_errhandler(MPI_Testall(countn, request, &flag, status));\n        return AsInt(flag);\n}\n\nSEXP mpi_testsome(SEXP sexp_count){\n        int countn=INTEGER(sexp_count)[0];\n\t\tSEXP indices;\n\t\tPROTECT (indices = allocVector(INTSXP, countn+1));\n        mpi_errhandler(MPI_Testsome(countn, request, &INTEGER(indices)[0], \n\t\t&INTEGER(indices)[1], status));\n\t\tUNPROTECT(1);\n        return indices;\n}\n\nSEXP mpi_waitsome(SEXP sexp_count){\n        int countn=INTEGER(sexp_count)[0];\n\t\tSEXP indices;\n\t\tPROTECT (indices = allocVector(INTSXP, countn+1));\n        mpi_errhandler(MPI_Waitsome(countn, request, &INTEGER(indices)[0], \n\t\t&INTEGER(indices)[1], status));\n\t\tUNPROTECT(1);\n        return indices;\n}\n\n/*\nSEXP mpi_request_get_status(SEXP sexp_request,  SEXP sexp_status){\n        int requestn=INTEGER(sexp_request)[0], flag, statusn=INTEGER(sexp_status)[0];\n        mpi_errhandler(MPI_Request_get_status(request[requestn], &flag, &status[statusn]));\n        return AsInt(flag);\n}\n*/\n\n"
    },
    "skipped": [],
    "total_files": 74
}