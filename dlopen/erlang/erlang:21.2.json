{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/config.h.in": "/* config.h.in.  Generated from configure.in by autoheader.  */\n\n\n#define GHBN_R_SOLARIS  2\n#define GHBN_R_AIX      3\n#define GHBN_R_GLIBC    4\n\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* Assumed cache-line size (in bytes) */\n#undef ASSUMED_CACHE_LINE_SIZE\n\n/* Define the brk() argument type. */\n#undef BRK_ARG_TYPE\n\n/* Define the brk() return type. */\n#undef BRK_RET_TYPE\n\n/* Define if the code model is small (code fits below 2Gb) */\n#undef CODE_MODEL_SMALL\n\n/* Define if you need to include rpc/types.h to get INADDR_LOOPBACK defined */\n#undef DEF_INADDR_LOOPBACK_IN_RPC_TYPES_H\n\n/* Define if you need to include winsock2.h to get INADDR_LOOPBACK defined */\n#undef DEF_INADDR_LOOPBACK_IN_WINSOCK2_H\n\n/* Define if you want to disable vfork. */\n#undef DISABLE_VFORK\n\n/* Define to 1 if your processor stores the words in a double in middle-endian\n   format (like some ARMs). */\n#undef DOUBLE_MIDDLE_ENDIAN\n\n/* Define if sbrk()/brk() wrappers can track malloc()s core memory use */\n#undef ERTS_BRK_WRAPPERS_CAN_TRACK_MALLOC\n\n/* Define to override the default number of write_concurrency locks */\n#undef ERTS_DB_HASH_LOCK_CNT\n\n/* The only reason ERTS_EMU_CMDLINE_FLAGS exists is to force modification of\n   config.h when the emulator command line flags are modified by configure */\n#undef ERTS_EMU_CMDLINE_FLAGS\n\n/* Define if you have kernel poll and want to use it */\n#undef ERTS_ENABLE_KERNEL_POLL\n\n/* Define as 1 if you want to enable microstate accounting, 2 if you want\n   extra states */\n#undef ERTS_ENABLE_MSACC\n\n/* Define > 0 if big-endian < 0 if little-endian, or 0 if unknown */\n#undef ERTS_ENDIANNESS\n\n/* Define if OS monotonic clock is corrected */\n#undef ERTS_HAVE_CORRECTED_OS_MONOTONIC_TIME\n\n/* Define if you have a low resolution OS monotonic clock */\n#undef ERTS_HAVE_LOW_RESOLUTION_OS_MONOTONIC_LOW\n\n/* Define if dlopen() needs to be called before first call to dlerror() */\n#undef ERTS_NEED_DLOPEN_BEFORE_DLERROR\n\n/* Per-function attribute for disabling retpoline. This is *only* defined when\n   --with-spectre-mitigation=incomplete and has no effects otherwise */\n#undef ERTS_NO_RETPOLINE\n\n/* Type qualifier restrict */\n#undef ERTS_RESTRICT\n\n/* Save compile time? */\n#undef ERTS_SAVED_COMPILE_TIME\n\n/* Define if structure alignment is enough for allocators. If not defined,\n   64-bit alignment will be forced. */\n#undef ERTS_STRUCTURE_ALIGNED_ALLOC\n\n/* Define if poll() should be used instead of select() */\n#undef ERTS_USE_POLL\n\n/* Define if __after_morecore_hook can track malloc()s core memory use. */\n#undef ERTS___AFTER_MORECORE_HOOK_CAN_TRACK_MALLOC\n\n/* Define if bigendian */\n#undef ETHR_BIGENDIAN\n\n/* Define if gcc wont let you clobber ebx with cmpxchg8b and position\n   independent code */\n#undef ETHR_CMPXCHG8B_PIC_NO_CLOBBER_EBX\n\n/* Define if you get a register shortage with cmpxchg8b and position\n   independent code */\n#undef ETHR_CMPXCHG8B_REGISTER_SHORTAGE\n\n/* Define if you want to disable native ethread implementations */\n#undef ETHR_DISABLE_NATIVE_IMPLS\n\n/* Define if you want to force usage of pthread rwlocks */\n#undef ETHR_FORCE_PTHREAD_RWLOCK\n\n/* Define if you use a gcc that supports the double word cmpxchg instruction\n   */\n#undef ETHR_GCC_HAVE_DW_CMPXCHG_ASM_SUPPORT\n\n/* Define if you use a gcc that supports -msse2 and understand sse2 specific\n   asm statements */\n#undef ETHR_GCC_HAVE_SSE2_ASM_SUPPORT\n\n/* Define if you have a clock_gettime() with a monotonic clock */\n#undef ETHR_HAVE_CLOCK_GETTIME_MONOTONIC\n\n/* Define if you have all ethread defines */\n#undef ETHR_HAVE_ETHREAD_DEFINES\n\n/* Define as a boolean indicating whether you have a gcc compatible compiler\n   capable of generating the ARM DMB instruction, and are compiling for an ARM\n   processor with ARM DMB instruction support, or not */\n#undef ETHR_HAVE_GCC_ASM_ARM_DMB_INSTRUCTION\n\n/* Define as a boolean indicating whether you have a gcc __atomic builtins or\n   not */\n#undef ETHR_HAVE_GCC___ATOMIC_BUILTINS\n\n/* Define if you have a monotonic gethrtime() */\n#undef ETHR_HAVE_GETHRTIME\n\n/* Define if you have libatomic_ops atomic operations */\n#undef ETHR_HAVE_LIBATOMIC_OPS\n\n/* Define if you have a linux futex implementation. */\n#undef ETHR_HAVE_LINUX_FUTEX\n\n/* Define if you have a mach clock_get_time() with a monotonic clock */\n#undef ETHR_HAVE_MACH_CLOCK_GET_TIME\n\n/* Define if the pthread.h header file is in pthread/mit directory. */\n#undef ETHR_HAVE_MIT_PTHREAD_H\n\n/* Define if you have the pthread_attr_setguardsize function. */\n#undef ETHR_HAVE_PTHREAD_ATTR_SETGUARDSIZE\n\n/* Define if pthread_cond_timedwait() can be used with a monotonic clock */\n#undef ETHR_HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC\n\n/* Define if you have ibm style pthread_getname_np */\n#undef ETHR_HAVE_PTHREAD_GETNAME_NP_2\n\n/* Define if you have linux style pthread_getname_np */\n#undef ETHR_HAVE_PTHREAD_GETNAME_NP_3\n\n/* Define if you have the <pthread.h> header file. */\n#undef ETHR_HAVE_PTHREAD_H\n\n/* Define if you have the pthread_rwlockattr_setkind_np() function. */\n#undef ETHR_HAVE_PTHREAD_RWLOCKATTR_SETKIND_NP\n\n/* Define if you have the PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP rwlock\n   attribute. */\n#undef ETHR_HAVE_PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP\n\n/* Define if you have darwin style pthread_setname_np */\n#undef ETHR_HAVE_PTHREAD_SETNAME_NP_1\n\n/* Define if you have linux style pthread_setname_np */\n#undef ETHR_HAVE_PTHREAD_SETNAME_NP_2\n\n/* Define if you have bsd style pthread_set_name_np */\n#undef ETHR_HAVE_PTHREAD_SET_NAME_NP_2\n\n/* Define if you have the pthread_spin_lock function. */\n#undef ETHR_HAVE_PTHREAD_SPIN_LOCK\n\n/* Define if you have the pthread_yield() function. */\n#undef ETHR_HAVE_PTHREAD_YIELD\n\n/* Define if you have the <sched.h> header file. */\n#undef ETHR_HAVE_SCHED_H\n\n/* Define if you have the sched_yield() function. */\n#undef ETHR_HAVE_SCHED_YIELD\n\n/* Define if you have the <sys/time.h> header file. */\n#undef ETHR_HAVE_SYS_TIME_H\n\n/* Define if you can use PTHREAD_STACK_MIN */\n#undef ETHR_HAVE_USABLE_PTHREAD_STACK_MIN\n\n/* Define if you have _InterlockedAnd() */\n#undef ETHR_HAVE__INTERLOCKEDAND\n\n/* Define if you have _InterlockedAnd64() */\n#undef ETHR_HAVE__INTERLOCKEDAND64\n\n/* Define if you have _InterlockedCompareExchange() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE\n\n/* Define if you have _InterlockedCompareExchange128() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE128\n\n/* Define if you have _InterlockedCompareExchange64() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64\n\n/* Define if you have _InterlockedCompareExchange64_acq() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64_ACQ\n\n/* Define if you have _InterlockedCompareExchange64_rel() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64_REL\n\n/* Define if you have _InterlockedCompareExchange_acq() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE_ACQ\n\n/* Define if you have _InterlockedCompareExchange_rel() */\n#undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE_REL\n\n/* Define if you have _InterlockedDecrement() */\n#undef ETHR_HAVE__INTERLOCKEDDECREMENT\n\n/* Define if you have _InterlockedDecrement64() */\n#undef ETHR_HAVE__INTERLOCKEDDECREMENT64\n\n/* Define if you have _InterlockedDecrement64_rel() */\n#undef ETHR_HAVE__INTERLOCKEDDECREMENT64_REL\n\n/* Define if you have _InterlockedDecrement_rel() */\n#undef ETHR_HAVE__INTERLOCKEDDECREMENT_REL\n\n/* Define if you have _InterlockedExchange() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGE\n\n/* Define if you have _InterlockedExchange64() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGE64\n\n/* Define if you have _InterlockedExchangeAdd() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD\n\n/* Define if you have _InterlockedExchangeAdd64() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD64\n\n/* Define if you have _InterlockedExchangeAdd64_acq() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD64_ACQ\n\n/* Define if you have _InterlockedExchangeAdd_acq() */\n#undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD_ACQ\n\n/* Define if you have _InterlockedIncrement() */\n#undef ETHR_HAVE__INTERLOCKEDINCREMENT\n\n/* Define if you have _InterlockedIncrement64() */\n#undef ETHR_HAVE__INTERLOCKEDINCREMENT64\n\n/* Define if you have _InterlockedIncrement64_acq() */\n#undef ETHR_HAVE__INTERLOCKEDINCREMENT64_ACQ\n\n/* Define if you have _InterlockedIncrement_acq() */\n#undef ETHR_HAVE__INTERLOCKEDINCREMENT_ACQ\n\n/* Define if you have _InterlockedOr() */\n#undef ETHR_HAVE__INTERLOCKEDOR\n\n/* Define if you have _InterlockedOr64() */\n#undef ETHR_HAVE__INTERLOCKEDOR64\n\n/* Define as a bitmask corresponding to the word sizes that\n   __atomic_add_fetch() can handle on your system */\n#undef ETHR_HAVE___atomic_add_fetch\n\n/* Define as a bitmask corresponding to the word sizes that\n   __atomic_compare_exchange_n() can handle on your system */\n#undef ETHR_HAVE___atomic_compare_exchange_n\n\n/* Define as a bitmask corresponding to the word sizes that\n   __atomic_fetch_and() can handle on your system */\n#undef ETHR_HAVE___atomic_fetch_and\n\n/* Define as a bitmask corresponding to the word sizes that\n   __atomic_fetch_or() can handle on your system */\n#undef ETHR_HAVE___atomic_fetch_or\n\n/* Define as a bitmask corresponding to the word sizes that __atomic_load_n()\n   can handle on your system */\n#undef ETHR_HAVE___atomic_load_n\n\n/* Define as a bitmask corresponding to the word sizes that __atomic_store_n()\n   can handle on your system */\n#undef ETHR_HAVE___atomic_store_n\n\n/* Define as a bitmask corresponding to the word sizes that\n   __sync_add_and_fetch() can handle on your system */\n#undef ETHR_HAVE___sync_add_and_fetch\n\n/* Define as a bitmask corresponding to the word sizes that\n   __sync_fetch_and_and() can handle on your system */\n#undef ETHR_HAVE___sync_fetch_and_and\n\n/* Define as a bitmask corresponding to the word sizes that\n   __sync_fetch_and_or() can handle on your system */\n#undef ETHR_HAVE___sync_fetch_and_or\n\n/* Define as a bitmask corresponding to the word sizes that\n   __sync_synchronize() can handle on your system */\n#undef ETHR_HAVE___sync_synchronize\n\n/* Define as a bitmask corresponding to the word sizes that\n   __sync_val_compare_and_swap() can handle on your system */\n#undef ETHR_HAVE___sync_val_compare_and_swap\n\n/* Define if you want to modify the default stack size */\n#undef ETHR_MODIFIED_DEFAULT_STACK_SIZE\n\n/* Define to the monotonic clock id to use */\n#undef ETHR_MONOTONIC_CLOCK_ID\n\n/* Define if you need the <nptl/pthread.h> header file. */\n#undef ETHR_NEED_NPTL_PTHREAD_H\n\n/* Define if you prefer gcc native ethread implementations */\n#undef ETHR_PREFER_GCC_NATIVE_IMPLS\n\n/* Define if you prefer libatomic_ops native ethread implementations */\n#undef ETHR_PREFER_LIBATOMIC_OPS_NATIVE_IMPLS\n\n/* Define if you have pthreads */\n#undef ETHR_PTHREADS\n\n/* Define if pthread_yield() returns an int. */\n#undef ETHR_PTHREAD_YIELD_RET_INT\n\n/* Define if sched_yield() returns an int. */\n#undef ETHR_SCHED_YIELD_RET_INT\n\n/* Define to the size of AO_t if libatomic_ops is used */\n#undef ETHR_SIZEOF_AO_T\n\n/* Define to the size of int */\n#undef ETHR_SIZEOF_INT\n\n/* Define to the size of long */\n#undef ETHR_SIZEOF_LONG\n\n/* Define to the size of long long */\n#undef ETHR_SIZEOF_LONG_LONG\n\n/* Define to the size of pointers */\n#undef ETHR_SIZEOF_PTR\n\n/* Define to the size of __int128_t */\n#undef ETHR_SIZEOF___INT128_T\n\n/* Define to the size of __int64 */\n#undef ETHR_SIZEOF___INT64\n\n/* Define if you want to enable check for native ethread implementations */\n#undef ETHR_SMP_REQUIRE_NATIVE_IMPLS\n\n/* Define if only run in Sparc PSO, or TSO mode */\n#undef ETHR_SPARC_PSO\n\n/* Define if run in Sparc RMO, PSO, or TSO mode */\n#undef ETHR_SPARC_RMO\n\n/* Define if only run in Sparc TSO mode */\n#undef ETHR_SPARC_TSO\n\n/* Define if you can safely include both <sys/time.h> and <time.h>. */\n#undef ETHR_TIME_WITH_SYS_TIME\n\n/* Define as a boolean indicating whether you trust gcc's __atomic_* builtins\n   memory barrier implementations, or not */\n#undef ETHR_TRUST_GCC_ATOMIC_BUILTINS_MEMORY_BARRIERS\n\n/* Define if you have win32 threads */\n#undef ETHR_WIN32_THREADS\n\n/* Define if x86/x86_64 out of order instructions should be synchronized */\n#undef ETHR_X86_OUT_OF_ORDER\n\n/* Define to 1 if you have the <arpa/nameser.h> header file. */\n#undef HAVE_ARPA_NAMESER_H\n\n/* Define to 1 if you have the `brk' function. */\n#undef HAVE_BRK\n\n/* define if clock_gettime() works for getting thread time */\n#undef HAVE_CLOCK_GETTIME_CPU_TIME\n\n/* Define if you have clock_gettime(CLOCK_MONOTONIC_RAW, _) */\n#undef HAVE_CLOCK_GETTIME_MONOTONIC_RAW\n\n/* Define to 1 if you have the `clock_get_attributes' function. */\n#undef HAVE_CLOCK_GET_ATTRIBUTES\n\n/* Define to 1 if you have the `closefrom' function. */\n#undef HAVE_CLOSEFROM\n\n/* Define if you have a decl of fread that conflicts with int fread */\n#undef HAVE_CONFLICTING_FREAD_DECLARATION\n\n/* Define if you have a putenv() that stores a copy of the key-value pair */\n#undef HAVE_COPYING_PUTENV\n\n/* Define if you have cpuset_getaffinity/cpuset_setaffinity */\n#undef HAVE_CPUSET_xETAFFINITY\n\n/* Define to 1 if you have the declaration of `getrlimit', and to 0 if you\n   don't. */\n#undef HAVE_DECL_GETRLIMIT\n\n/* Define to 1 if you have the declaration of `IN6ADDR_ANY_INIT', and to 0 if\n   you don't. */\n#undef HAVE_DECL_IN6ADDR_ANY_INIT\n\n/* Define to 1 if you have the declaration of `IN6ADDR_LOOPBACK_INIT', and to\n   0 if you don't. */\n#undef HAVE_DECL_IN6ADDR_LOOPBACK_INIT\n\n/* Define to 1 if you have the declaration of `IPV6_V6ONLY', and to 0 if you\n   don't. */\n#undef HAVE_DECL_IPV6_V6ONLY\n\n/* Define to 1 if you have the declaration of `posix2time', and to 0 if you\n   don't. */\n#undef HAVE_DECL_POSIX2TIME\n\n/* Define to 1 if you have the declaration of `RLIMIT_STACK', and to 0 if you\n   don't. */\n#undef HAVE_DECL_RLIMIT_STACK\n\n/* Define to 1 if you have the declaration of `SCTPS_BOUND', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTPS_BOUND\n\n/* Define to 1 if you have the declaration of `SCTPS_COOKIE_ECHOED', and to 0\n   if you don't. */\n#undef HAVE_DECL_SCTPS_COOKIE_ECHOED\n\n/* Define to 1 if you have the declaration of `SCTPS_COOKIE_WAIT', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTPS_COOKIE_WAIT\n\n/* Define to 1 if you have the declaration of `SCTPS_ESTABLISHED', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTPS_ESTABLISHED\n\n/* Define to 1 if you have the declaration of `SCTPS_IDLE', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTPS_IDLE\n\n/* Define to 1 if you have the declaration of `SCTPS_LISTEN', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTPS_LISTEN\n\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_ACK_SENT', and\n   to 0 if you don't. */\n#undef HAVE_DECL_SCTPS_SHUTDOWN_ACK_SENT\n\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_PENDING', and to\n   0 if you don't. */\n#undef HAVE_DECL_SCTPS_SHUTDOWN_PENDING\n\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_RECEIVED', and\n   to 0 if you don't. */\n#undef HAVE_DECL_SCTPS_SHUTDOWN_RECEIVED\n\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_SENT', and to 0\n   if you don't. */\n#undef HAVE_DECL_SCTPS_SHUTDOWN_SENT\n\n/* Define to 1 if you have the declaration of `SCTP_ABORT', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_ABORT\n\n/* Define to 1 if you have the declaration of `SCTP_ADDR_CONFIRMED', and to 0\n   if you don't. */\n#undef HAVE_DECL_SCTP_ADDR_CONFIRMED\n\n/* Define to 1 if you have the declaration of `SCTP_ADDR_OVER', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTP_ADDR_OVER\n\n/* Define to 1 if you have the declaration of `SCTP_BOUND', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_BOUND\n\n/* Define to 1 if you have the declaration of `SCTP_CLOSED', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_CLOSED\n\n/* Define to 1 if you have the declaration of `SCTP_COOKIE_ECHOED', and to 0\n   if you don't. */\n#undef HAVE_DECL_SCTP_COOKIE_ECHOED\n\n/* Define to 1 if you have the declaration of `SCTP_COOKIE_WAIT', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTP_COOKIE_WAIT\n\n/* Define to 1 if you have the declaration of `SCTP_DELAYED_ACK_TIME', and to\n   0 if you don't. */\n#undef HAVE_DECL_SCTP_DELAYED_ACK_TIME\n\n/* Define to 1 if you have the declaration of `SCTP_EMPTY', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_EMPTY\n\n/* Define to 1 if you have the declaration of `SCTP_EOF', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_EOF\n\n/* Define to 1 if you have the declaration of `SCTP_ESTABLISHED', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTP_ESTABLISHED\n\n/* Define to 1 if you have the declaration of `SCTP_LISTEN', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_LISTEN\n\n/* Define to 1 if you have the declaration of `SCTP_SENDALL', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SCTP_SENDALL\n\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_ACK_SENT', and to\n   0 if you don't. */\n#undef HAVE_DECL_SCTP_SHUTDOWN_ACK_SENT\n\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_PENDING', and to\n   0 if you don't. */\n#undef HAVE_DECL_SCTP_SHUTDOWN_PENDING\n\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_RECEIVED', and to\n   0 if you don't. */\n#undef HAVE_DECL_SCTP_SHUTDOWN_RECEIVED\n\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_SENT', and to 0\n   if you don't. */\n#undef HAVE_DECL_SCTP_SHUTDOWN_SENT\n\n/* Define to 1 if you have the declaration of `SCTP_UNCONFIRMED', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTP_UNCONFIRMED\n\n/* Define to 1 if you have the declaration of `SCTP_UNORDERED', and to 0 if\n   you don't. */\n#undef HAVE_DECL_SCTP_UNORDERED\n\n/* Define to 1 if you have the declaration of `setrlimit', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SETRLIMIT\n\n/* Define to 1 if you have the declaration of `time2posix', and to 0 if you\n   don't. */\n#undef HAVE_DECL_TIME2POSIX\n\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_DIRENT_H\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `dlopen' function. */\n#undef HAVE_DLOPEN\n\n/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */\n#undef HAVE_DOPRNT\n\n/* Define if you have the 'end' symbol */\n#undef HAVE_END_SYMBOL\n\n/* Define if you have a working fallocate() */\n#undef HAVE_FALLOCATE\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define to 1 if you have the `fdatasync' function. */\n#undef HAVE_FDATASYNC\n\n/* Define to 1 if you have the `finite' function. */\n#undef HAVE_FINITE\n\n/* Define to 1 if you have the `flockfile' function. */\n#undef HAVE_FLOCKFILE\n\n/* Define to 1 if you have the `fork' function. */\n#undef HAVE_FORK\n\n/* Define to 1 if you have the `fpsetmask' function. */\n#undef HAVE_FPSETMASK\n\n/* Define to 1 if you have the `fstat' function. */\n#undef HAVE_FSTAT\n\n/* Define if you have fwrite_unlocked */\n#undef HAVE_FWRITE_UNLOCKED\n\n/* Define to 1 if you have a good `getaddrinfo' function. */\n#undef HAVE_GETADDRINFO\n\n/* Define to 1 if you have the `gethostbyname2' function. */\n#undef HAVE_GETHOSTBYNAME2\n\n/* Define to flavour of gethostbyname_r */\n#undef HAVE_GETHOSTBYNAME_R\n\n/* Define to 1 if you have the `gethrtime' function. */\n#undef HAVE_GETHRTIME\n\n/* define if gethrvtime() works and uses ioctl() to /proc/self */\n#undef HAVE_GETHRVTIME_PROCFS_IOCTL\n\n/* Define to 1 if you have the `getifaddrs' function. */\n#undef HAVE_GETIFADDRS\n\n/* Define to 1 if you have the `getipnodebyaddr' function. */\n#undef HAVE_GETIPNODEBYADDR\n\n/* Define to 1 if you have the `getipnodebyname' function. */\n#undef HAVE_GETIPNODEBYNAME\n\n/* Define to 1 if you have a good `getnameinfo' function. */\n#undef HAVE_GETNAMEINFO\n\n/* Define to 1 if you have the `getrusage' function. */\n#undef HAVE_GETRUSAGE\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the `gmtime_r' function. */\n#undef HAVE_GMTIME_R\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n#undef HAVE_IEEEFP_H\n\n/* Define to 1 if you have the `ieee_handler' function. */\n#undef HAVE_IEEE_HANDLER\n\n/* Define to 1 if you have the <ifaddrs.h> header file. */\n#undef HAVE_IFADDRS_H\n\n/* Define if ipv6 is present */\n#undef HAVE_IN6\n\n/* Define to 1 if you have the variable in6addr_any declared. */\n#undef HAVE_IN6ADDR_ANY\n\n/* Define to 1 if you have the variable in6addr_loopback declared. */\n#undef HAVE_IN6ADDR_LOOPBACK\n\n/* Define to 1 if you have the `inet_pton' function. */\n#undef HAVE_INET_PTON\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Early linux used in_addr6 instead of in6_addr, define if you have this */\n#undef HAVE_IN_ADDR6_STRUCT\n\n/* Define to 1 if you have the `isfinite' function. */\n#undef HAVE_ISFINITE\n\n/* Define to 1 if you have the `isinf' function. */\n#undef HAVE_ISINF\n\n/* Define to 1 if you have the `isnan' function. */\n#undef HAVE_ISNAN\n\n/* Define if you have kstat */\n#undef HAVE_KSTAT\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n#undef HAVE_LANGINFO_H\n\n/* Define to 1 if you have the `dl' library (-ldl). */\n#undef HAVE_LIBDL\n\n/* Define to 1 if you have the `dlpi' library (-ldlpi). */\n#undef HAVE_LIBDLPI\n\n/* Define to 1 if you have the <libdlpi.h> header file. */\n#undef HAVE_LIBDLPI_H\n\n/* Define to 1 if you have the `inet' library (-linet). */\n#undef HAVE_LIBINET\n\n/* Define to 1 if you have the `m' library (-lm). */\n#undef HAVE_LIBM\n\n/* Define to 1 if you have the `sctp' library (-lsctp). */\n#undef HAVE_LIBSCTP\n\n/* Define to 1 if you have the `util' library (-lutil). */\n#undef HAVE_LIBUTIL\n\n/* Define to 1 if you have the <libutil.h> header file. */\n#undef HAVE_LIBUTIL_H\n\n/* Define to 1 if you have the `z' library (-lz). */\n#undef HAVE_LIBZ\n\n/* Define to 1 if you have the <limits.h> header file. */\n#undef HAVE_LIMITS_H\n\n/* Define to 1 if you have the <linux/falloc.h> header file. */\n#undef HAVE_LINUX_FALLOC_H\n\n/* Define to 1 if you have the `localtime_r' function. */\n#undef HAVE_LOCALTIME_R\n\n/* Define to 1 if you have the `log2' function. */\n#undef HAVE_LOG2\n\n/* Define to 1 if you have the <lttng/tracepoint-event.h> header file. */\n#undef HAVE_LTTNG_TRACEPOINT_EVENT_H\n\n/* Define to 1 if you have the <lttng/tracepoint.h> header file. */\n#undef HAVE_LTTNG_TRACEPOINT_H\n\n/* Define to 1 if you have the <malloc.h> header file. */\n#undef HAVE_MALLOC_H\n\n/* Define to 1 if you have the `mallopt' function. */\n#undef HAVE_MALLOPT\n\n/* Define to 1 if you have the `memcpy' function. */\n#undef HAVE_MEMCPY\n\n/* Define to 1 if you have the `memmove' function. */\n#undef HAVE_MEMMOVE\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define if the pthread.h header file is in pthread/mit directory. */\n#undef HAVE_MIT_PTHREAD_H\n\n/* Define to 1 if you have the `mlockall' function. */\n#undef HAVE_MLOCKALL\n\n/* Define to 1 if you have the `mmap' function. */\n#undef HAVE_MMAP\n\n/* Define if you have a monotonic erts_os_hrtime() implementation */\n#undef HAVE_MONOTONIC_ERTS_SYS_HRTIME\n\n/* Define to 1 if you have the `mprotect' function. */\n#undef HAVE_MPROTECT\n\n/* Define to 1 if you have the `mremap' function. */\n#undef HAVE_MREMAP\n\n/* Define if setsockopt() accepts multicast options */\n#undef HAVE_MULTICAST_SUPPORT\n\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\n#undef HAVE_NDIR_H\n\n/* Define to 1 if you have the <netpacket/packet.h> header file. */\n#undef HAVE_NETPACKET_PACKET_H\n\n/* Define to 1 if you have the <net/errno.h> header file. */\n#undef HAVE_NET_ERRNO_H\n\n/* Define to 1 if you have the <net/if_dl.h> header file. */\n#undef HAVE_NET_IF_DL_H\n\n/* Define to 1 if you have the `nl_langinfo' function. */\n#undef HAVE_NL_LANGINFO\n\n/* Define if you don't have a definition of INADDR_LOOPBACK */\n#undef HAVE_NO_INADDR_LOOPBACK\n\n/* Define to 1 if you have the `openpty' function. */\n#undef HAVE_OPENPTY\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#undef HAVE_POLL_H\n\n/* Define to 1 if you have the `posix2time' function. */\n#undef HAVE_POSIX2TIME\n\n/* Define to 1 if you have the `posix_fadvise' function. */\n#undef HAVE_POSIX_FADVISE\n\n/* Define if you have a working posix_fallocate() */\n#undef HAVE_POSIX_FALLOCATE\n\n/* Define to 1 if you have the `posix_memalign' function. */\n#undef HAVE_POSIX_MEMALIGN\n\n/* Define to 1 if you have the `ppoll' function. */\n#undef HAVE_PPOLL\n\n/* Define to 1 if you have the `pread' function. */\n#undef HAVE_PREAD\n\n/* Define if you have processor_bind functionality */\n#undef HAVE_PROCESSOR_BIND\n\n/* Define if you have pset functionality */\n#undef HAVE_PSET\n\n/* Define if you have the <pthread.h> header file. */\n#undef HAVE_PTHREAD_H\n\n/* Define to 1 if you have the <pty.h> header file. */\n#undef HAVE_PTY_H\n\n/* Define if you have putc_unlocked */\n#undef HAVE_PUTC_UNLOCKED\n\n/* Define to 1 if you have the `pwrite' function. */\n#undef HAVE_PWRITE\n\n/* Define to 1 if you have the `res_gethostbyname' function. */\n#undef HAVE_RES_GETHOSTBYNAME\n\n/* Define to 1 if you have the `sbrk' function. */\n#undef HAVE_SBRK\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define if you have sched_getaffinity/sched_setaffinity */\n#undef HAVE_SCHED_xETAFFINITY\n\n/* Define to 1 if you have the `sctp_bindx' function. */\n#undef HAVE_SCTP_BINDX\n\n/* Define to 1 if you have the `sctp_freeladdrs' function. */\n#undef HAVE_SCTP_FREELADDRS\n\n/* Define to 1 if you have the `sctp_freepaddrs' function. */\n#undef HAVE_SCTP_FREEPADDRS\n\n/* Define to 1 if you have the `sctp_getladdrs' function. */\n#undef HAVE_SCTP_GETLADDRS\n\n/* Define to 1 if you have the `sctp_getpaddrs' function. */\n#undef HAVE_SCTP_GETPADDRS\n\n/* Define to 1 if you have the <netinet/sctp.h> header file */\n#undef HAVE_SCTP_H\n\n/* Define to 1 if you have the `sctp_peeloff' function. */\n#undef HAVE_SCTP_PEELOFF\n\n/* Define to 1 if you have the <sdkddkver.h> header file. */\n#undef HAVE_SDKDDKVER_H\n\n/* Define to 1 if you have the `sendfile' function. */\n#undef HAVE_SENDFILE\n\n/* Define to 1 if you have the `sendfilev' function. */\n#undef HAVE_SENDFILEV\n\n/* Define to 1 if you have the `setlocale' function. */\n#undef HAVE_SETLOCALE\n\n/* Define to 1 if you have the `setns' function. */\n#undef HAVE_SETNS\n\n/* Define to 1 if you have the <setns.h> header file. */\n#undef HAVE_SETNS_H\n\n/* Define to 1 if you have the `setsid' function. */\n#undef HAVE_SETSID\n\n/* Define if we have socklen_t */\n#undef HAVE_SOCKLEN_T\n\n/* define if you have the Solaris/ultrasparc /dev/perfmon interface */\n#undef HAVE_SOLARIS_SPARC_PERFMON\n\n/* Define if you have SO_BSDCOMPAT flag on sockets */\n#undef HAVE_SO_BSDCOMPAT\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the `strerror' function. */\n#undef HAVE_STRERROR\n\n/* Define to 1 if you have the `strerror_r' function. */\n#undef HAVE_STRERROR_R\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strlcat' function. */\n#undef HAVE_STRLCAT\n\n/* Define to 1 if you have the `strlcpy' function. */\n#undef HAVE_STRLCPY\n\n/* Define to 1 if you have the `strncasecmp' function. */\n#undef HAVE_STRNCASECMP\n\n/* Define to 1 if `ifr_enaddr' is a member of `struct ifreq'. */\n#undef HAVE_STRUCT_IFREQ_IFR_ENADDR\n\n/* Define to 1 if `ifr_hwaddr' is a member of `struct ifreq'. */\n#undef HAVE_STRUCT_IFREQ_IFR_HWADDR\n\n/* Define to 1 if `spp_flags' is a member of `struct sctp_paddrparams'. */\n#undef HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_FLAGS\n\n/* Define to 1 if `spp_pathmtu' is a member of `struct sctp_paddrparams'. */\n#undef HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_PATHMTU\n\n/* Define to 1 if `spp_sackdelay' is a member of `struct sctp_paddrparams'. */\n#undef HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_SACKDELAY\n\n/* Define to 1 if `sre_data' is a member of `struct sctp_remote_error'. */\n#undef HAVE_STRUCT_SCTP_REMOTE_ERROR_SRE_DATA\n\n/* Define to 1 if `ssf_data' is a member of `struct sctp_send_failed'. */\n#undef HAVE_STRUCT_SCTP_SEND_FAILED_SSF_DATA\n\n/* Define to 1 if you have the <syslog.h> header file. */\n#undef HAVE_SYSLOG_H\n\n/* Define if you have systemd daemon */\n#undef HAVE_SYSTEMD_DAEMON\n\n/* Define to 1 if you have the <systemd/sd-daemon.h> header file. */\n#undef HAVE_SYSTEMD_SD_DAEMON_H\n\n/* Define if you have <sys/devpoll.h> header file. */\n#undef HAVE_SYS_DEVPOLL_H\n\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_DIR_H\n\n/* Define if you have the <sys/epoll.h> header file. */\n#undef HAVE_SYS_EPOLL_H\n\n/* Define if you have <sys/event.h> header file. */\n#undef HAVE_SYS_EVENT_H\n\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\n#undef HAVE_SYS_IOCTL_H\n\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_NDIR_H\n\n/* Define to 1 if you have the <sys/resource.h> header file */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/sdt.h> header file. */\n#undef HAVE_SYS_SDT_H\n\n/* Define to 1 if you have the <sys/socketio.h> header file. */\n#undef HAVE_SYS_SOCKETIO_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/sockio.h> header file. */\n#undef HAVE_SYS_SOCKIO_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/stropts.h> header file. */\n#undef HAVE_SYS_STROPTS_H\n\n/* Define to 1 if you have the <sys/sysctl.h> header file. */\n#undef HAVE_SYS_SYSCTL_H\n\n/* Define to 1 if you have the <sys/timerfd.h> header file. */\n#undef HAVE_SYS_TIMERFD_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#undef HAVE_SYS_UIO_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#undef HAVE_SYS_UN_H\n\n/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */\n#undef HAVE_SYS_WAIT_H\n\n/* Define if termcap functions exists */\n#undef HAVE_TERMCAP\n\n/* Define to 1 if you have the `time2posix' function. */\n#undef HAVE_TIME2POSIX\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the <util.h> header file. */\n#undef HAVE_UTIL_H\n\n/* Define to 1 if you have the <utmp.h> header file. */\n#undef HAVE_UTMP_H\n\n/* Define to 1 if you have the `vfork' function. */\n#undef HAVE_VFORK\n\n/* Define to 1 if you have the <vfork.h> header file. */\n#undef HAVE_VFORK_H\n\n/* Define to 1 if you have the `vprintf' function. */\n#undef HAVE_VPRINTF\n\n/* Define to 1 if you have a `wcwidth' function. */\n#undef HAVE_WCWIDTH\n\n/* Define to 1 if you have the <windows.h> header file. */\n#undef HAVE_WINDOWS_H\n\n/* Define to 1 if you have the <winsock2.h> header file. */\n#undef HAVE_WINSOCK2_H\n\n/* Define to 1 if `fork' works. */\n#undef HAVE_WORKING_FORK\n\n/* Define if you have a working posix_openpt implementation */\n#undef HAVE_WORKING_POSIX_OPENPT\n\n/* Define to 1 if `vfork' works. */\n#undef HAVE_WORKING_VFORK\n\n/* Define to 1 if you have the `writev' function. */\n#undef HAVE_WRITEV\n\n/* Define to 1 if you have the <ws2tcpip.h> header file. */\n#undef HAVE_WS2TCPIP_H\n\n/* Define if your zlib version defines inflateGetDictionary. */\n#undef HAVE_ZLIB_INFLATEGETDICTIONARY\n\n/* Define to 1 if you have the `_brk' function. */\n#undef HAVE__BRK\n\n/* Define if you have the '_end' symbol */\n#undef HAVE__END_SYMBOL\n\n/* Define to 1 if you have the `_sbrk' function. */\n#undef HAVE__SBRK\n\n/* Define to 1 if you have the `__brk' function. */\n#undef HAVE___BRK\n\n/* Define to 1 if you have the `__sbrk' function. */\n#undef HAVE___SBRK\n\n/* Define to enable HiPE */\n#undef HIPE\n\n/* Define to monotonic clock id to use */\n#undef HRTIME_CLOCK_ID\n\n/* Define as a string of monotonic clock id to use */\n#undef HRTIME_CLOCK_ID_STR\n\n/* define if h_errno is declared (in some way) in a system header file */\n#undef H_ERRNO_DECLARED\n\n/* Define to monotonic clock id to use */\n#undef MONOTONIC_CLOCK_ID\n\n/* Define as a string of monotonic clock id to use */\n#undef MONOTONIC_CLOCK_ID_STR\n\n/* Define if netdb.h needs struct sockaddr_in ans in.h CAN be included before\n   */\n#undef NETDB_H_NEEDS_IN_H\n\n/* Define if floating points exceptions are non-existing/not reliable */\n#undef NO_FPE_SIGNALS\n\n/* Defined if no found C compiler can handle jump tables */\n#undef NO_JUMP_TABLE\n\n/* Define if you dont have salen */\n#undef NO_SA_LEN\n\n/* Define if you want to implement erts_os_monotonic_time() using\n   clock_gettime() */\n#undef OS_MONOTONIC_TIME_USING_CLOCK_GETTIME\n\n/* Define if you want to implement erts_os_monotonic_time() using gethrtime()\n   */\n#undef OS_MONOTONIC_TIME_USING_GETHRTIME\n\n/* Define if you want to implement erts_os_monotonic_time() using mach\n   clock_get_time() */\n#undef OS_MONOTONIC_TIME_USING_MACH_CLOCK_GET_TIME\n\n/* Define if you want to implement erts_os_monotonic_time() using times() */\n#undef OS_MONOTONIC_TIME_USING_TIMES\n\n/* Define if you want to implement erts_os_system_time() using gettimeofday()\n   */\n#undef OS_SYSTEM_TIME_GETTIMEOFDAY\n\n/* Define if you want to implement erts_os_system_time() using clock_gettime()\n   */\n#undef OS_SYSTEM_TIME_USING_CLOCK_GETTIME\n\n/* Define if you want to implement erts_os_system_time() using mach\n   clock_get_time() */\n#undef OS_SYSTEM_TIME_USING_MACH_CLOCK_GET_TIME\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* Define if you wish to redefine FD_SETSIZE to be able to select on more fd\n   */\n#undef REDEFINE_FD_SETSIZE\n\n/* Define as the return type of signal handlers (`int' or `void'). */\n#undef RETSIGTYPE\n\n/* Define the sbrk() argument type. */\n#undef SBRK_ARG_TYPE\n\n/* Define the sbrk() return type. */\n#undef SBRK_RET_TYPE\n\n/* Define if building a sharing-preserving emulator */\n#undef SHCOPY\n\n/* The size of `AO_t', as computed by sizeof. */\n#undef SIZEOF_AO_T\n\n/* The size of `char', as computed by sizeof. */\n#undef SIZEOF_CHAR\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `long long', as computed by sizeof. */\n#undef SIZEOF_LONG_LONG\n\n/* The size of `off_t', as computed by sizeof. */\n#undef SIZEOF_OFF_T\n\n/* The size of `short', as computed by sizeof. */\n#undef SIZEOF_SHORT\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The size of `time_t', as computed by sizeof. */\n#undef SIZEOF_TIME_T\n\n/* The size of `void *', as computed by sizeof. */\n#undef SIZEOF_VOID_P\n\n/* The size of `__int128_t', as computed by sizeof. */\n#undef SIZEOF___INT128_T\n\n/* The size of `__int64', as computed by sizeof. */\n#undef SIZEOF___INT64\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* define if the variable sys_errlist is declared in a system header file */\n#undef SYS_ERRLIST_DECLARED\n\n/* Define if you want to implement erts_os_hrtime() using clock_gettime() */\n#undef SYS_HRTIME_USING_CLOCK_GETTIME\n\n/* Define if you want to implement erts_os_hrtime() using gethrtime() */\n#undef SYS_HRTIME_USING_GETHRTIME\n\n/* Define if you want to implement erts_os_hrtime() using mach\n   clock_get_time() */\n#undef SYS_HRTIME_USING_MACH_CLOCK_GET_TIME\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#undef TIME_WITH_SYS_TIME\n\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\n#undef TM_IN_SYS_TIME\n\n/* Define if you want to use dtrace for dynamic tracing */\n#undef USE_DTRACE\n\n/* Define if you want to use dynamic tracing */\n#undef USE_DYNAMIC_TRACE\n\n/* Define if you want to use lttng for dynamic tracing */\n#undef USE_LTTNG\n\n/* Define if you have matherr() function and struct exception type */\n#undef USE_MATHERR\n\n/* Define if select() should be used instead of poll() */\n#undef USE_SELECT\n\n/* Define if you want to use systemtap for dynamic tracing */\n#undef USE_SYSTEMTAP\n\n/* Define to enable VM dynamic trace probes */\n#undef USE_VM_PROBES\n\n/* Define to wall clock id to use */\n#undef WALL_CLOCK_ID\n\n/* Define as a string of wall clock id to use */\n#undef WALL_CLOCK_ID_STR\n\n/* Define if windows.h includes winsock2.h */\n#undef WINDOWS_H_INCLUDES_WINSOCK2_H\n\n/* Define if big-endian */\n#undef WORDS_BIGENDIAN\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `long int' if <sys/types.h> does not define. */\n#undef off_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef pid_t\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define as `fork' if `vfork' does not work. */\n#undef vfork\n\n\n/* Redefine in6_addr. XXX this should be moved to the files where it's used? */\n#ifdef HAVE_IN_ADDR6_STRUCT\n#define in6_addr in_addr6\n#endif\n\n/* Define a reasonable default for INADDR_LOOPBACK */\n/* XXX this should be moved to the files where it's used? */\n#ifdef HAVE_NO_INADDR_LOOPBACK\n#define INADDR_LOOPBACK (u_long)0x7F000001\n#endif\n\n#ifdef REDEFINE_FD_SETSIZE\n#define FD_SETSIZE 1024\n#endif\n \n#ifdef HAVE_GETHRVTIME_PROCFS_IOCTL\n#define HAVE_GETHRVTIME\n#endif\n\n#if !defined(HAVE_ISFINITE) && !defined(HAVE_FINITE)\n# if defined(HAVE_ISINF) && defined(HAVE_ISNAN)\n#  define USE_ISINF_ISNAN\n# endif\n#endif\n\n#if defined(DEBUG) && !defined(ERTS_ENABLE_LOCK_CHECK)\n#define ERTS_ENABLE_LOCK_CHECK 1\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/configure.in": "dnl Process this file with autoconf to produce a configure script. -*-m4-*-\n\ndnl %CopyrightBegin%\ndnl\ndnl Copyright Ericsson AB 1997-2018. All Rights Reserved.\ndnl\ndnl Licensed under the Apache License, Version 2.0 (the \"License\");\ndnl you may not use this file except in compliance with the License.\ndnl You may obtain a copy of the License at\ndnl\ndnl     http://www.apache.org/licenses/LICENSE-2.0\ndnl\ndnl Unless required by applicable law or agreed to in writing, software\ndnl distributed under the License is distributed on an \"AS IS\" BASIS,\ndnl WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\ndnl See the License for the specific language governing permissions and\ndnl limitations under the License.\ndnl\ndnl %CopyrightEnd%\n\ndnl The string \"FIXME convbreak\" means that there is a break of\ndnl autoconf convention that should be cleaned up.\n\nAC_INIT(vsn.mk)\nAC_PREREQ(2.59)\n\nLM_PRECIOUS_VARS\n\nif test \"x$no_recursion\" != \"xyes\" -a \"x$OVERRIDE_CONFIG_CACHE\" = \"x\"; then\n    # We do not want to use a common cache!\n    cache_file=/dev/null\nfi\n\ndnl How to set srcdir absolute is taken from the GNU Emacs distribution\n#### Make srcdir absolute, if it isn't already.  It's important to\n#### avoid running the path through pwd unnecessary, since pwd can\n#### give you automounter prefixes, which can go away.\ncase \"${srcdir}\" in\n  /* ) ;;\n  . )\n    ## We may be able to use the $PWD environment variable to make this\n    ## absolute.  But sometimes PWD is inaccurate.\n    ## Make sure CDPATH doesn't affect cd (in case PWD is relative).\n    CDPATH=\n    if test \"${PWD}\" != \"\" && test \"`(cd ${PWD} ; sh -c pwd)`\" = \"`pwd`\"  ;\n    then\n      srcdir=\"$PWD\"\n    else\n      srcdir=\"`(cd ${srcdir}; pwd)`\"\n    fi\n  ;;\n  *  ) srcdir=\"`(cd ${srcdir}; pwd)`\" ;;\nesac\n\n## Now, make sure that ERL_TOP is set and is the same as srcdir\n##\nif test -z \"$ERL_TOP\" || test ! -d $ERL_TOP ; then\n  AC_MSG_ERROR(You need to set the environment variable ERL_TOP!)\nfi\nif test x\"${ERL_TOP}/erts\" != x\"$srcdir\"; then\n  AC_MSG_ERROR([You need to run configure with argument --srcdir=${ERL_TOP}/erts])\nfi\nerl_top=${ERL_TOP}\n\n# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n# echo X\n# echo \"X srcdir  = $srcdir\"\n# echo \"X ERL_TOP = $ERL_TOP\"\n# echo X\n# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nAC_CONFIG_AUX_DIRS($srcdir/autoconf)\n\ndnl ----------------------------------------------------------------------\ndnl Figure out what system we are running on.\ndnl ----------------------------------------------------------------------\n\n#\n# To configure for free source run ./configure --host=free_source\n#\ndnl\ndnl AC_CANONICAL_HOST does not like free_source as a host specification,\ndnl so we make a little special case.\ndnl\nif test \"X$host\" != \"Xfree_source\" -a \"X$host\" != \"Xwin32\"; then\n    AC_CANONICAL_HOST\nelse\n    host_os=$host\nfi\n\nif test \"$cross_compiling\" = \"yes\"; then\n    CROSS_COMPILING=yes\nelse\n    CROSS_COMPILING=no\nfi\nAC_SUBST(CROSS_COMPILING)\n\nERL_XCOMP_SYSROOT_INIT\n\nAC_ISC_POSIX\n\nAC_CONFIG_HEADER($host/config.h:config.h.in include/internal/$host/ethread_header_config.h:include/internal/ethread_header_config.h.in include/$host/erl_int_sizes_config.h:include/erl_int_sizes_config.h.in)\ndnl ----------------------------------------------------------------------\ndnl Optional features.\ndnl ----------------------------------------------------------------------\nENABLE_ALLOC_TYPE_VARS=\nAC_SUBST(ENABLE_ALLOC_TYPE_VARS)\n\nAC_ARG_ENABLE(bootstrap-only,\nAS_HELP_STRING([--enable-bootstrap-only],\n               [enable bootstrap only configuration]),\n[ if test \"X$enableval\" = \"Xyes\"; then\n\t# Disable stuff not necessary in a bootstrap only system in order\n\t# to speed up things by reducing the amount of stuff needing to be\n\t# built...\n\twith_termcap=no\n\twith_ssl=no\n\twith_ssl_zlib=no\n\tenable_hipe=no\n\tenable_sctp=no\n  fi\n])\n\nAC_ARG_ENABLE(dirty-schedulers-test,\nAS_HELP_STRING([--enable-dirty-schedulers-test], [enable dirty scheduler test (for debugging purposes)]),\n[ case \"$enableval\" in\n    yes)  enable_dirty_schedulers_test=yes ;;\n    *) enable_dirty_schedulers_test=no ;;\n  esac ], enable_dirty_schedulers_test=no)\n\nAC_ARG_ENABLE(smp-require-native-atomics,\n\t      AS_HELP_STRING([--disable-smp-require-native-atomics],\n                             [disable the SMP requirement of a native atomic implementation]),\n[ case \"$enableval\" in\n    no) smp_require_native_atomics=no ;;\n    *)  smp_require_native_atomics=yes ;;\n  esac ], smp_require_native_atomics=yes)\n\nAC_ARG_WITH(termcap,\nAS_HELP_STRING([--with-termcap], [use termcap (default)])\nAS_HELP_STRING([--without-termcap],\n               [do not use any termcap libraries (ncurses,curses,termcap,termlib)]),\n[],\n[with_termcap=yes])\n\nAC_ARG_ENABLE(lock-checking,\nAS_HELP_STRING([--enable-lock-checking], [enable lock checking]),\n[ case \"$enableval\" in\n    no) enable_lock_check=no ;;\n    *)  enable_lock_check=yes ;;\n  esac\n],\n  enable_lock_check=no)\n\nAC_ARG_ENABLE(lock-counter,\nAS_HELP_STRING([--enable-lock-counter], [enable lock counters]),\n[ case \"$enableval\" in\n    no) enable_lock_count=no ;;\n    *)  enable_lock_count=yes ;;\n  esac ], enable_lock_count=no)\n\nAC_ARG_ENABLE(kernel-poll,\nAS_HELP_STRING([--enable-kernel-poll], [enable kernel poll support])\nAS_HELP_STRING([--disable-kernel-poll], [disable kernel poll support]),\n[ case \"$enableval\" in\n    no) enable_kernel_poll=no ;;\n    *)  enable_kernel_poll=yes ;;\n  esac ], enable_kernel_poll=unknown)\n\n\nAC_ARG_ENABLE(sctp,\nAS_HELP_STRING([--enable-sctp], [enable sctp support (default)\nto on demand load the SCTP library in runtime if needed])\nAS_HELP_STRING([--enable-sctp=lib], [enable sctp support\nto link against the SCTP library])\nAS_HELP_STRING([--disable-sctp], [disable sctp support]),\n[ case \"x$enableval\" in\n      xno|xyes|xlib|x)\n          ;;\n      x*)\n          AC_MSG_ERROR(\"invalid value --enable-sctp=$enableval\")\n          ;;\n  esac ])\n\nAC_ARG_ENABLE(hipe,\nAS_HELP_STRING([--enable-hipe], [enable hipe support])\nAS_HELP_STRING([--disable-hipe], [disable hipe support]))\n\nAC_ARG_ENABLE(native-libs,\nAS_HELP_STRING([--enable-native-libs],\n               [compile Erlang libraries to native code]))\n\nAC_ARG_ENABLE(fp-exceptions,\nAS_HELP_STRING([--enable-fp-exceptions],\n               [use hardware floating point exceptions (default if hipe enabled)]),\n[ case \"$enableval\" in\n    no) enable_fp_exceptions=no ;;\n    *)  enable_fp_exceptions=yes ;;\n  esac\n],enable_fp_exceptions=auto)\n\nAC_ARG_ENABLE(m64-build,\nAS_HELP_STRING([--enable-m64-build],\n               [build 64bit binaries using the -m64 flag to (g)cc]),\n[ case \"$enableval\" in\n    no) enable_m64_build=no ;;\n    *)  enable_m64_build=yes ;;\n  esac\n],enable_m64_build=no)\n\nAC_ARG_ENABLE(m32-build,\nAS_HELP_STRING([--enable-m32-build],\n               [build 32bit binaries using the -m32 flag to (g)cc]),\n[ case \"$enableval\" in\n    no) enable_m32_build=no ;;\n    *)\tenable_m32_build=yes ;;\n  esac\n],enable_m32_build=no)\n\nAC_ARG_WITH(dynamic-trace,\nAS_HELP_STRING([--with-dynamic-trace={dtrace|lttng|systemtap}],\n\t       [specify use of dynamic trace framework, dtrace, lttng or systemtap])\nAS_HELP_STRING([--without-dynamic-trace], \n               [don't enable any dynamic tracing (default)]))\n\nif test X\"$with_dynamic_trace\" = X\"\"; then\n   with_dynamic_trace=no\nfi\n\ncase \"$with_dynamic_trace\" in\n     no) DYNAMIC_TRACE_FRAMEWORK=;;\n     lttng)\n            AC_DEFINE(USE_LTTNG,[1],\n                      [Define if you want to use lttng for dynamic tracing])\n            DYNAMIC_TRACE_FRAMEWORK=lttng;;\n     dtrace) \n\t    AC_DEFINE(USE_DTRACE,[1],\n\t\t[Define if you want to use dtrace for dynamic tracing])\n     \t     DYNAMIC_TRACE_FRAMEWORK=dtrace;;\n     systemtap) \n\t    AC_DEFINE(USE_SYSTEMTAP,[1],\n\t\t[Define if you want to use systemtap for dynamic tracing])\n\t    DYNAMIC_TRACE_FRAMEWORK=systemtap;;\n     *)\t\n     \t    AC_MSG_ERROR(Unknown dynamic tracing framework specified with --with-dynamic-trace!);;\nesac\n\nif test X\"$DYNAMIC_TRACE_FRAMEWORK\" != X\"\"; then\n   AC_DEFINE(USE_DYNAMIC_TRACE,[1],\n\t\t[Define if you want to use dynamic tracing])\nfi\n\nAC_ARG_ENABLE(vm-probes,\nAS_HELP_STRING([--enable-vm-probes],\n               [add dynamic trace probes to the Beam VM (only possible if --with-dynamic-trace is enabled, and then default)]),\n\t       [ case \"$enableval\" in\n    \t       \t no) use_vm_probes=no ;;\n    \t\t *)\n\t\t\tif  test X\"$DYNAMIC_TRACE_FRAMEWORK\" != X\"\"; then\n\t\t \t    use_vm_probes=yes ;\n\t\t\telse\n\t\t\t    AC_MSG_ERROR(Can not enable VM probes without any dynamic tracing framework!);\n\t\t\tfi;;  \n  \t\t esac ], if  test X\"$DYNAMIC_TRACE_FRAMEWORK\" != X\"\"; then\n\t\t \t    use_vm_probes=yes ;\n\t\t\telse\n\t\t\t    use_vm_probes=no\n\t\t\tfi)\n\nAC_SUBST(USE_VM_PROBES)\nif test X\"$DYNAMIC_TRACE_FRAMEWORK\" != X\"lttng\"; then\n    if test X\"$use_vm_probes\" = X\"yes\"; then\n        USE_VM_PROBES=yes\n        AC_DEFINE(USE_VM_PROBES,[1],\n                  [Define to enable VM dynamic trace probes])\n    fi\nfi\n\nAC_ARG_WITH(assumed-cache-line-size,\nAS_HELP_STRING([--with-assumed-cache-line-size=SIZE],\n               [specify assumed cache line size in bytes (valid values are powers of two between and including 16 and 8192; default is 64)]))\n\ndnl Require the assumed cache-line size to be a power of two between 16 and 8192\ncase \"$with_assumed_cache_line_size\" in\n     \"\"|no|yes)\n\twith_assumed_cache_line_size=64;;\n     16|32|64|128|256|512|1024|2048|4096|8192)\n\t;;\n     *)\n\tAC_MSG_ERROR([Invalid assumed cache-line size of $with_assumed_cache_line_size bytes])\n\t;;\nesac\n\nAC_DEFINE_UNQUOTED(ASSUMED_CACHE_LINE_SIZE,\n\t\t   $with_assumed_cache_line_size,\n\t\t   [Assumed cache-line size (in bytes)])\n\nAC_ARG_ENABLE(systemd,\nAS_HELP_STRING([--enable-systemd], [enable systemd support in epmd]),\n[],\n[enable_systemd=no])\n\nAC_ARG_ENABLE(saved-compile-time,\nAS_HELP_STRING([--disable-saved-compile-time], [disable saved compile time]),\n[ case \"$enableval\" in\n    no) save_compile_time=0 ;;\n    *)  save_compile_time=1 ;;\n  esac ], save_compile_time=1)\n\nAC_DEFINE_UNQUOTED(ERTS_SAVED_COMPILE_TIME, $save_compile_time, [Save compile time?])\n\nAC_ARG_WITH(microstate-accounting,\nAS_HELP_STRING([--with-microstate-accounting={yes|extra}],\n               [enable microstate account, possibly with extra detailed states])\nAS_HELP_STRING([--without-microstate-accounting],\n               [don't enable microstate accounting]),\n[],[with_microstate_accounting=yes])\n\ncase \"$with_microstate_accounting\" in\n    yes) AC_DEFINE(ERTS_ENABLE_MSACC,[1],\n\t\t[Define as 1 if you want to enable microstate accounting, 2 if you want extra states]) ;;\n    extra) AC_DEFINE(ERTS_ENABLE_MSACC,[2],\n\t\t[Define as 1 if you want to enable microstate accounting, 2 if you want extra states]) ;;\n    *) ;;\nesac\n\ndnl Magic test for clearcase.\nOTP_RELEASE=\nif test \"${ERLANG_COMMERCIAL_BUILD}\" != \"\"; then\n\tOTP_EXTRA_FLAGS=-DOTP_RELEASE\n\tOTP_RELEASE=yes\nelse\n\tOTP_EXTRA_FLAGS=\nfi\nAC_SUBST(OTP_RELEASE)\n\nAC_MSG_CHECKING([OTP release])\n[SYSTEM_VSN=`cat $ERL_TOP/OTP_VERSION | sed \"s|\\([0-9]*\\).*|\\1|\"`]\nAC_MSG_RESULT([$SYSTEM_VSN])\nAC_SUBST(SYSTEM_VSN)\n\nAC_MSG_CHECKING([OTP version])\n[OTP_VERSION=`cat $ERL_TOP/OTP_VERSION`]\nAC_MSG_RESULT([$OTP_VERSION])\nAC_SUBST(OTP_VERSION)\n\nif test X${enable_m64_build} = Xyes; then\n\tcase $CFLAGS in\n\t\t*-m64*)\n\t\t\t;;\n\t\t*)\n\t\t\tCFLAGS=\"-m64 $CFLAGS\"\n\t\t\t;;\n\tesac\nelse\n\tif test X${enable_m32_build} = Xyes;\n\tthen\n\t\tcase $CFLAGS in\n\t\t    *-m32*)\n\t\t\t    ;;\n\t\t    *)\n\t\t\t    CFLAGS=\"-m32 $CFLAGS\"\n\t\t\t    ;;\n\t\tesac ;\n\tfi\nfi\n\nAC_ARG_ENABLE(static-nifs,\nAS_HELP_STRING([--enable-static-nifs], [link nifs statically. If yes then all nifs in all Erlang/OTP applications will be statically linked into the main binary. It is also possible to give a list of nifs that should be linked statically. The list should be a comma separated and contain the absolute path to a .a archive for each nif that is to be statically linked. The name of the .a archive has to be the same as the name of the nif. Note that you have to link any external dependencies that the nifs have to the main binary, so for the crypto nif you want to pass LIBS=-lcrypto to configure.]),\n\t       STATIC_NIFS=\"$enableval\",\n\t       STATIC_NIFS=no)\nAC_SUBST(STATIC_NIFS)\n\nAC_ARG_ENABLE(static-drivers,\nAS_HELP_STRING([--enable-static-drivers], [comma separated list of linked-in drivers to link statically with the main binary. The list should contain the absolute path to a .a archive for each driver that is to be statically linked. The name of the .a archive has to be the same as the name of the driver.]),\n\t       STATIC_DRIVERS=\"$enableval\",\n\t       STATIC_DRIVERS=no)\nAC_SUBST(STATIC_DRIVERS)\n\nAC_ARG_WITH(ets-write-concurrency-locks,\nAS_HELP_STRING([--with-ets-write-concurrency-locks={8|16|32|64|128|256}],\n               [specify how many locks the write_concurrency option for ets should use.])\nAS_HELP_STRING([--without-ets-write-concurrency-locks],\n               [use the default number of write_concurrency locks (default)]))\n\nif test X\"$with_ets_write_concurrency_locks\" != X\"\"; then\n   AC_DEFINE_UNQUOTED(ERTS_DB_HASH_LOCK_CNT,$with_ets_write_concurrency_locks,\n\t\t      [Define to override the default number of write_concurrency locks])\nfi\n\nAC_ARG_WITH(spectre-mitigation,\n    AS_HELP_STRING([--with-spectre-mitigation={yes|incomplete}],\n                   [enable spectre mitigation, either fully or with mitigations\n                    disabled in a handful places like the interpreter])\n    AS_HELP_STRING([--without-spectre-mitigation],\n                   [build without spectre mitigation]),\n    [],[with_spectre_mitigation=no])\n\ncase \"$with_spectre_mitigation\" in\n    no) ;;\n    yes) ;;\n    incomplete) ;;\n    *) AC_MSG_ERROR([Invalid spectre mitigation setting]) ;;\nesac\n\ni_noretpoline_attr=\"\"\n\nif test X\"$with_spectre_mitigation\" != X\"no\"; then\n    CFLAGS=\"$CFLAGS -mindirect-branch=thunk\"\n\n    AC_MSG_CHECKING([for spectre mitigation])\n    AC_COMPILE_IFELSE(\n        [AC_LANG_PROGRAM([],[return 0;])],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_ERROR([no])])\n\n    if test X\"$with_spectre_mitigation\" = X\"incomplete\"; then\n        # gcc and clang support this attribute if they're recent enough. Note\n        # that we must compile with -Werror to check for actual support as they\n        # warn rather than error out on unsupported attributes.\n\n        i_noretpoline_attr='__attribute__((__indirect_branch__(\"keep\")))'\n        i_preserve_cflags=\"$CFLAGS\"\n        CFLAGS=\"$CFLAGS -Werror\"\n\n        AC_MSG_CHECKING([whether spectre mitigation can be disabled on a per-function basis])\n        AC_COMPILE_IFELSE(\n            [AC_LANG_PROGRAM([$i_noretpoline_attr],[return 0;])],\n            [AC_MSG_RESULT([yes])],\n            [AC_MSG_ERROR([no])])\n\n        CFLAGS=\"$i_preserve_cflags\"\n    fi\nfi\n\nAC_DEFINE_UNQUOTED(ERTS_NO_RETPOLINE, $i_noretpoline_attr,\n                   [Per-function attribute for disabling retpoline. This is\n                    *only* defined when --with-spectre-mitigation=incomplete\n                    and has no effects otherwise])\n\ndnl ----------------------------------------------------------------------\ndnl Checks for programs.\ndnl ----------------------------------------------------------------------\n\nAC_PROG_CC\nAC_SUBST(GCC)\n\ndnl ---------------------------------------------------------------------\ndnl Special stuff regarding CFLAGS and details in the environment...\ndnl ---------------------------------------------------------------------\n\ndnl NOTE: CPPFLAGS will be included in CFLAGS at the end\ncase $host_os in\n    linux*) CPPFLAGS=\"$CPPFLAGS -D_GNU_SOURCE\";; \n    win32)\n\t# The ethread library requires _WIN32_WINNT of at least 0x0403.\n\t# -D_WIN32_WINNT=* from CPPFLAGS is saved in ETHR_DEFS.\n\tCPPFLAGS=\"$CPPFLAGS -D_WIN32_WINNT=0x0600 -DWINVER=0x0600\"\n\t;;\n    *)\n\t;;\nesac\n\n\nLM_WINDOWS_ENVIRONMENT\n\t\ndnl\ndnl Flags to the C compiler\ndnl\ndnl Make sure we find config.h\ndnl\n\nextra_flags=\"-I${ERL_TOP}/erts/$host $OTP_EXTRA_FLAGS\"\nCFLAGS=\"$CFLAGS $extra_flags\"\nDEBUG_CFLAGS=\"-g $CPPFLAGS $extra_flags $DEBUG_CFLAGS\"\nDEBUG_FLAGS=-g\n\ndnl\ndnl Adjust DEBUG_CFLAGS to match CFLAGS in terms of -m\ndnl\n\ncase $CFLAGS in\n\t*-m64*)\n\t\tcase $DEBUG_CFLAGS in\n\t\t\t*-m64*)\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tDEBUG_CFLAGS=\"-m64 $DEBUG_CFLAGS\"\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t*-m32*)\n\t\tcase $DEBUG_CFLAGS in\n\t\t\t*-m32*)\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tDEBUG_CFLAGS=\"-m32 $DEBUG_CFLAGS\"\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n\n\nCFLAG_RUNTIME_LIBRARY_PATH=\"-Wl,-R\"\ncase $host_os in\n  darwin*)\n\tCFLAG_RUNTIME_LIBRARY_PATH=\n\t;;\n  win32)\n\tCFLAG_RUNTIME_LIBRARY_PATH=\n\t;;\n  osf*)\n\tCFLAG_RUNTIME_LIBRARY_PATH=\"-Wl,-rpath,\"\n\t;;\n  *)\n\t;;\nesac\n\nlfs_conf=ok\nlfs_source=none\nif test \"${LFS_CFLAGS+set}\" = \"set\" || \\\n   test \"${LFS_LDFLAGS+set}\" = \"set\" || \\\n   test \"${LFS_LIBS+set}\" = \"set\"; then\n    lfs_source=user\nelse\n   LM_CHECK_GETCONF\n   test \"$GETCONF\" = \"false\" || lfs_source=getconf\nfi\n\nif test \"$lfs_source\" = \"none\"; then\n    AC_MSG_WARN([Do not know how to check for large file support flags; no getconf is available])\nelse\n    for var in CFLAGS LDFLAGS LIBS; do\n\tAC_MSG_CHECKING([for large file support $var])\n\tif test $lfs_source = user; then\n\t    eval \"lfs_val=\\\"\\$LFS_$var\\\"\"\n\telse\n\t    eval \"lfs_var=LFS_$var\"\n\t    lfs_val=`$GETCONF $lfs_var 2>/dev/null` || lfs_conf=failed\n\t    if test $lfs_conf = failed; then\n\t\tAC_MSG_RESULT([failed])\n\t\tbreak\n\t    fi\n\t    eval \"$lfs_var=\\\"$lfs_val\\\"\"\n\tfi\n\ttest \"$lfs_val\" != \"\" || lfs_val=none\n\tAC_MSG_RESULT([$lfs_val])\n    done\n    if test $lfs_conf = failed; then\n\tAC_MSG_WARN([Check for large file support flags failed; $GETCONF failed])\n    else\n\tCFLAGS=\"$CFLAGS $LFS_CFLAGS\"\n\tDEBUG_CFLAGS=\"$DEBUG_CFLAGS $LFS_CFLAGS\"\n\tLDFLAGS=\"$LDFLAGS $LFS_LDFLAGS\"\n\tLIBS=\"$LIBS $LFS_LIBS\"\n    fi\nfi\n\nif test \"x$GCC\" = xyes; then\n  # Treat certain GCC warnings as errors\n  LM_TRY_ENABLE_CFLAG([-Werror=return-type], [WERRORFLAGS])\n  LM_TRY_ENABLE_CFLAG([-Werror=implicit], [WERRORFLAGS])\n  LM_TRY_ENABLE_CFLAG([-Werror=undef], [WERRORFLAGS])\n\n  # until the emulator can handle this, I suggest we turn it off!\n  #WFLAGS=\"-Wall -Wshadow -Wcast-qual -Wmissing-declarations\"\n  WFLAGS=\"-Wall -Wstrict-prototypes\"\n\n  case \"$host_cpu\" in\n    tile*)\n      # tile-gcc is a bit stricter with -Wmissing-prototypes than other gccs,\n      # and too strict for our taste.\n      ;;\n    *)\n      WFLAGS=\"$WFLAGS -Wmissing-prototypes\";;\n  esac\n\n  saved_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -Wdeclaration-after-statement\"\n  AC_TRY_COMPILE([],[;], warn_decl_after_st=true, warn_decl_after_st=false)\n  if test \"X$warn_decl_after_st\" = \"Xtrue\"; then\n    WFLAGS=\"$WFLAGS -Wdeclaration-after-statement\"\n  fi\n  CFLAGS=$saved_CFLAGS\nelse\n  WFLAGS=\"\"\n  WERRORFLAGS=\"\"\nfi\n\nAC_MSG_CHECKING([CFLAGS for -O switch])\ncase \"$CFLAGS\" in\n     *-O*) AC_MSG_RESULT([yes]) ;;\n     *)\n       AC_MSG_ERROR([\n  CFLAGS must contain a -O flag. If you need to edit the CFLAGS you probably\n  also want to add the default CFLAGS. The default CFLAGS are \"-O2 -g\".\n  If you want to build erts without any optimization, pass -O0 to CFLAGS.]) ;;\nesac\n\ndnl DEBUG_FLAGS is obsolete (I hope)\nAC_SUBST(DEBUG_FLAGS)\nAC_SUBST(DEBUG_CFLAGS)\nAC_SUBST(WFLAGS)\nAC_SUBST(WERRORFLAGS)\nAC_SUBST(CFLAG_RUNTIME_LIBRARY_PATH)\n\n## Check if we can do profile guided optimization of beam_emu\nLM_CHECK_ENABLE_CFLAG([-fprofile-generate -Werror],[PROFILE_GENERATE])\nLM_CHECK_ENABLE_CFLAG([-fprofile-use -Werror],[PROFILE_USE])\n\n## Check if this is clang\nLM_CHECK_ENABLE_CFLAG([-fprofile-instr-generate -Werror],[PROFILE_INSTR_GENERATE])\nif test \"X$PROFILE_INSTR_GENERATE\" = \"Xtrue\"; then\n   # It was clang, now we also have to check if we have llvm-profdata and that\n   # we can link programs with -fprofile-instr-use\n   saved_CFLAGS=$CFLAGS;\n   CFLAGS=\"-fprofile-instr-generate -Werror $saved_CFLAGS\"\n   AC_RUN_IFELSE([AC_LANG_PROGRAM([],[])],\n     [AC_CHECK_PROGS([LLVM_PROFDATA], [llvm-profdata])\n      AC_CHECK_PROGS([XCRUN], [xcrun])\n      if test \"X$XCRUN\" != \"X\" -a \"X$LLVM_PROFDATA\" = \"X\"; then\n        AC_MSG_CHECKING([for $XCRUN llvm-profdata])\n        if $XCRUN llvm-profdata --help 2>& AS_MESSAGE_LOG_FD >& AS_MESSAGE_LOG_FD; then\n          LLVM_PROFDATA=\"$XCRUN llvm-profdata\"\n          AC_MSG_RESULT([yes])\n        else\n          AC_MSG_RESULT([no])\n        fi\n      fi\n      AC_SUBST(LLVM_PROFDATA)\n      if test \"X$LLVM_PROFDATA\" != \"X\"; then\n        CFLAGS=\"-fprofile-instr-use=default.profdata -Werror $saved_CFLAGS\";\n        $LLVM_PROFDATA merge -output=default.profdata *.profraw;\n        AC_MSG_CHECKING([whether gcc accepts -fprofile-instr-use=default.profdata -Werror])\n        AC_COMPILE_IFELSE([],\n          [AC_MSG_RESULT([yes])\n           PROFILE_INSTR_USE=true],\n          [AC_MSG_RESULT([no])\n           PROFILE_INSTR_USE=false])\n        rm -f default.profdata\n      fi],\n     [],\n     [AC_MSG_NOTICE([Disabling PGO when cross-compiling])])\n   rm -f *.profraw\n   CFLAGS=$saved_CFLAGS;\nfi\n\nAC_ARG_ENABLE(pgo,\nAS_HELP_STRING([--enable-pgo],\n               [build erts using PGO (profile guided optimization)]),\n[ case \"$enableval\" in\n    no) enable_pgo=no ;;\n    *)\tenable_pgo=yes ;;\n  esac\n],enable_pgo=default)\n\nLM_CHECK_ENABLE_CFLAG([-fprofile-use -fprofile-correction -Werror],[PROFILE_CORRECTION])\n\nUSE_PGO=false\nAC_MSG_CHECKING([whether to do PGO of erts])\nif test $enable_pgo = no; then\n  AC_MSG_RESULT([no, disabled by user])\nelif test $CROSS_COMPILING = yes; then\n  if test $enable_pgo = yes; then\n    AC_MSG_ERROR(cannot use PGO when cross-compiling)\n  else\n    AC_MSG_RESULT([no, cross compiling])\n  fi\nelif test \"X$host\" = \"Xwin32\"; then\n  AC_MSG_RESULT([no, not supported in windows])\nelif test \"X$PROFILE_GENERATE\" = \"Xtrue\" -a \"X$PROFILE_USE\" = \"Xtrue\" -a \"X$PROFILE_CORRECTION\" = \"Xtrue\"; then\n  ## We need -fprofile-generate and -fprofile-correction support to use PGO with\n  ## gcc as multiple threads run within the executed object files\n  USE_PGO=true\n  PROFILE_COMPILER=gcc\n  AC_MSG_RESULT([yes, using -fprofile-generate -fprofile-correction])\nelif test \"X$PROFILE_INSTR_GENERATE\" = \"Xtrue\" -a \"X$PROFILE_INSTR_USE\" = \"Xtrue\"; then\n  USE_PGO=true\n  PROFILE_COMPILER=clang\n  AC_MSG_RESULT([yes, using -fprofile-instr-generate])\nelse\n  if $enable_pgo = yes; then\n    AC_MSG_ERROR(cannot use PGO with this compiler)\n  else\n    AC_MSG_RESULT([no])\n  fi\nfi\n\nAC_SUBST(USE_PGO)\nAC_SUBST(PROFILE_COMPILER)\n\nAC_CHECK_SIZEOF(void *) # Needed for ARCH and smp checks below\nif test \"x$ac_cv_sizeof_void_p\" = x8; then\n  AC_SUBST(EXTERNAL_WORD_SIZE, 64)\nelse\n  AC_SUBST(EXTERNAL_WORD_SIZE, 32)\nfi\n\ndnl\ndnl Figure out operating system and cpu architecture\ndnl\n\nif test \"x$host_alias\" != \"x\"; then\n    chk_opsys_=$host_os\nelse\n    chk_opsys_=`uname -s`\n    if test \"x$chk_opsys_\" = \"xSunOS\"; then\n\tchk_opsys_=$chk_opsys_`uname -r`\n    fi\nfi\ncase $chk_opsys_ in\n    win32)\t\t\tOPSYS=win32;;\n    solaris2.*|SunOS5.*)\tOPSYS=sol2;;\n    linux*|Linux)\t\tOPSYS=linux;;\n    darwin|Darwin)\t\tOPSYS=darwin;;\n    freebsd|FreeBSD)\t\tOPSYS=freebsd;;\n    *)\t\t\t\tOPSYS=noopsys\nesac\n\nAC_SUBST(OPSYS)\n\nLM_HARDWARE_ARCH\n\ndnl Check consistency of os and darwin-switches\n\n\ndnl Take care of LDFLAGS on darwin, and disable common_test as it\ndnl has a build/configure system re rx-lib that is not compatible\ndnl First remove common_tests skip file.\n\ndnl Adjust LDFLAGS to allow 64bit linkage on DARWIN\ncase $ARCH-$OPSYS in\n\tamd64-darwin*)\n\t\tAC_MSG_NOTICE([Adjusting LDFLAGS to cope with 64bit Darwin])\n\t\tcase $LDFLAGS in\n\t\t\t*-m64*)\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tLDFLAGS=\"-m64 $LDFLAGS\"\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*-darwin*)\n\t\tcase $LDFLAGS in\n\t\t\t*-m32*)\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tLDFLAGS=\"-m32 $LDFLAGS\"\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t*)\n\t\tif test X${enable_m64_build} = Xyes; then\n\t\t\tAC_MSG_NOTICE([Adjusting LDFLAGS to use -m64])\n\t\t\tcase $LDFLAGS in\n\t\t\t\t*-m64*)\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tLDFLAGS=\"-m64 $LDFLAGS\"\n\t\t\t\t;;\n\t\t\tesac\n\t\tfi;\n\t\tif test X${enable_m32_build} = Xyes; then\n\t\t\tAC_MSG_NOTICE([Adjusting LDFLAGS to use -m32]) ;\n\t\t\tcase $LDFLAGS in\n\t\t\t\t*-m32*)\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tLDFLAGS=\"-m32 $LDFLAGS\"\n\t\t\t\t;;\n\t\t\tesac ;\n\t\tfi\n\t\t;;\nesac\n\nAC_MSG_CHECKING(if VM has to be linked with Carbon framework)\ncase $ARCH-$OPSYS in\n\t*-darwin*)\n  \t\tLIBCARBON=\"-framework Carbon -framework Cocoa\"\n\t\tAC_MSG_RESULT([yes])\n\t\t;;\n\t*)\n\t\tLIBCARBON=\n\t\tAC_MSG_RESULT([no])\n\t\t;;\nesac\n\t\nAC_SUBST(LIBCARBON)\n\n_search_path=/bin:/usr/bin:/usr/local/bin:$PATH\n\nAC_PATH_PROG(RM, rm, false, $_search_path)\nif test \"$ac_cv_path_RM\" = false; then\n  AC_MSG_ERROR([No 'rm' command found])\nfi\n\nAC_PATH_PROG(MKDIR, mkdir, false, $_search_path)\nif test \"$ac_cv_path_MKDIR\" = false; then\n  AC_MSG_ERROR([No 'mkdir' command found])\nfi\n\nAC_PATH_PROG(CP, cp, false, $_search_path)\nif test \"$ac_cv_path_CP\" = false; then\n  AC_MSG_ERROR([No 'cp' command found])\nfi\n\n_search_path=\n\n\n# Remove old configuration information.\n# Next line should be placed after AC_PATH_PROG(RM, ...), but before\n# first output to CONN_INFO. So this is just the right place.\n$RM -f \"$ERL_TOP/erts/CONF_INFO\"\n\ndnl Check if we should/can build a sharing-preserving emulator\nAC_MSG_CHECKING(if we are building a sharing-preserving emulator)\nif test \"$enable_sharing_preserving\" = \"yes\"; then\n        AC_DEFINE(SHCOPY, [1],\n\t\t  [Define if building a sharing-preserving emulator])\n\tAC_MSG_RESULT([yes])\nelse\n\tAC_MSG_RESULT([no])\nfi\n\n\ndnl some tests below will call this if we haven't already - and autoconf\ndnl can't handle those tests being done conditionally at runtime\nAC_PROG_CPP\n\nAC_PROG_RANLIB\n\nAC_PROG_YACC\nLM_PROG_PERL5\nif test \"$ac_cv_path_PERL\" = false; then\n  AC_MSG_ERROR([Perl version 5 is required to build the emulator!])\nfi\nAC_PROG_LN_S\n\n\nAC_CHECK_TOOL([AR], [ar], [false])\nif test \"$ac_cv_prog_AR\" = false; then\n  AC_MSG_ERROR([No 'ar' command found in PATH])\nfi\n\n#\n# Get programs needed for building the documentation \n#\n\n## Delete previous failed configure results\nif test -f doc/CONF_INFO; then\n   $RM doc/CONF_INFO\nfi\n\nAC_CHECK_PROGS(XSLTPROC, xsltproc)\nif test -z \"$XSLTPROC\"; then\n  echo \"xsltproc\" >> doc/CONF_INFO\n  AC_MSG_WARN([No 'xsltproc' command found: the documentation cannot be built])\nfi\n\nAC_CHECK_PROGS(FOP, fop)\nif test -z \"$FOP\"; then\n  FOP=\"$ERL_TOP/make/fakefop\"\n  echo \"fop\" >> doc/CONF_INFO\n  AC_MSG_WARN([No 'fop' command found: going to generate placeholder PDF files])\nfi\n\nAC_CHECK_PROGS(XMLLINT, xmllint)\nif test -z \"$XMLLINT\"; then\n  echo \"xmllint\" >> doc/CONF_INFO\n  AC_MSG_WARN([No 'xmllint' command found: can't run the xmllint target for the documentation])\nfi\n\ndnl\ndnl We can live with Solaris /usr/ucb/install\ndnl\ncase $host in\n  *-*-solaris*|free_source)\n    if test -x /usr/ucb/install; then\n      INSTALL=\"/usr/ucb/install -c\"\n    fi\n    ;;\n  *)\n    ;;\nesac\nAC_PROG_INSTALL\nLM_PROG_INSTALL_DIR\n\ncase $host_os in\n\tdarwin*)\n\t\tdnl Need to preserve modification time on archives;\n\t\tdnl otherwise, ranlib has to be run on archives\n\t\tdnl again after installation.\n\t\tINSTALL_DATA=\"$INSTALL_DATA -p\";;\n\t*)\n\t\t;;\nesac\n\ndnl\ndnl Fix for Tilera install permissions\ndnl\n\ncase $build in\n\t*tile*)\n\t\tINSTALL_PROGRAM=\"$INSTALL_PROGRAM -m755\"\n\t\tINSTALL_SCRIPT=\"$INSTALL_SCRIPT -m755\"\n\t\t;;\n\t*)\n\t\t;;\nesac\n\ndnl ----------------------------------------------------------------------\ndnl Misc. things (some of them should go away)\ndnl ----------------------------------------------------------------------\n\ndnl\ndnl An attempt to allow cross compiling. This is not the right way,\ndnl nor does it work currently. Some makefiles still needs these\ndnl variables, so we leave them in for now.\ndnl\nHCC='$(CC)'         AC_SUBST(HCC)\nHCFLAGS=\"\"          AC_SUBST(HCFLAGS)\nHCFLAGS=\"$HCFLAGS -I${ERL_TOP}/erts/$host\"\nvxworks_reclaim=\"\"  AC_SUBST(vxworks_reclaim)\n\ndnl We want to use $(CC) as linker for the emulator regardless of\ndnl what the user say. This might not be the right way to do it, but\ndnl for now that is the way we do it.\nUSER_LD=$LD\nUSER_LDFLAGS=\"$LDFLAGS\"\nLD='$(CC)'\ncase $host_os in\n     darwin*)\n\tsaved_LDFLAGS=\"$LDFLAGS\"\n\tLDFLAGS=\"$LDFLAGS -Wl,-no_weak_imports\"\n\tAC_TRY_LINK([],[],\n\t\t[\n\t\t\tLD_MAY_BE_WEAK=no\n\t\t],\n\t\t[\n\t\t\tLD_MAY_BE_WEAK=yes\n\t\t\tLDFLAGS=\"$saved_LDFLAGS\"\n\t\t]);;\n    *)\n\tLD_MAY_BE_WEAK=no;;\nesac\n\nAC_SUBST(LD)\n\nLDFLAG_RUNTIME_LIBRARY_PATH=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\nAC_SUBST(LDFLAG_RUNTIME_LIBRARY_PATH)\n\ndnl Check for cygwin and object/exe files extension\ndnl AC_CYGWIN is deprecated\nAC_EXEEXT\nAC_OBJEXT\n\ndnl This is the os flavour, should be unix, ose, vxworks or win32\ncase $host in\n   win32)\n      ERLANG_OSTYPE=win32 ;;\n   *)\n      ERLANG_OSTYPE=unix ;;\nesac\n\nAC_SUBST(ERLANG_OSTYPE)\n\n# Check how to export functions from the emulator executable, needed\n# when dynamically loaded drivers are loaded (so that they can find\n# emulator functions).\n# OS'es with ELF executables using the GNU linker (Linux and recent *BSD,\n# in rare cases Solaris) typically need '-Wl,-export-dynamic' (i.e. pass\n# -export-dynamic to the linker - also known as -rdynamic and some other\n# variants); some sysVr4 system(s) instead need(s) '-Wl,-Bexport'.\n# AIX 4.x (perhaps only for x>=2) wants -Wl,-bexpall,-brtl and doesn't\n# reliably return an error for others, thus we separate it out.\n# Otherwise we assume that if the linker accepts the flag, it is needed.\nAC_MSG_CHECKING(for extra flags needed to export symbols)\nDEXPORT=\"\"\ncase $host_os in\n\taix4*)\n\t\tDEXPORT=-Wl,-bexpall,-brtl\n\t;;\n\tbsdi*)\n    \t\tDEXPORT=\"-rdynamic \" \n    \t;;\n\twin32)\n    \t\tDEXPORT=\"\" \n    \t;;\n\t*)\n\t\tsave_ldflags=\"$LDFLAGS\"\n\t\tLDFLAGS=-Wl,-export-dynamic\n\t\tAC_TRY_LINK(,,[DEXPORT=-Wl,-export-dynamic], [\n\t\t\tLDFLAGS=-Wl,-Bexport\n\t\t\tAC_TRY_LINK(,,[DEXPORT=-Wl,-Bexport],\n\t\t\t\tAC_MSG_RESULT(none))])\n\t\tLDFLAGS=\"$save_ldflags\"\n\t;;\nesac\nAC_SUBST(DEXPORT)\ncase \"x$DEXPORT\" in\n\t\"x\")\n\t\tAC_MSG_RESULT([none]);;\n\t*)\n\t\tAC_MSG_RESULT([$DEXPORT]);;\nesac\n\n# Check for Solaris/ultrasparc /dev/perfmon interface\n# (also needs gcc specific asm instructions)\ncase \"${host}:${GCC}\" in\n  sparc-*-solaris*:yes)\n    AC_DEFINE(HAVE_SOLARIS_SPARC_PERFMON,[1],\n\t[define if you have the Solaris/ultrasparc /dev/perfmon interface])\n    ;;\n  *)\n    ;;\nesac\n\n\ndnl ----------------------------------------------------------------------\ndnl Checks for libraries.\ndnl ----------------------------------------------------------------------\n\nAC_CHECK_LIB(m, sin)\nAC_CHECK_LIB(dl, dlopen)\nAC_CHECK_LIB(inet, main)\nAC_CHECK_LIB(util, openpty)\n\ndnl Try to find a thread library.\ndnl\ndnl ETHR_LIB_NAME, ETHR_LIBS, ETHR_X_LIBS, ETHR_THR_LIB_BASE and ETHR_DEFS\ndnl are set by ERL_FIND_ETHR_LIB\nERL_FIND_ETHR_LIB\n\nif test \"X$ETHR_LIB_NAME\" = \"X\"; then\n   AC_MSG_ERROR([cannot build emulator since no thread library was found])\nfi\n\nTYPES=opt\n\nDIRTY_SCHEDULER_TEST=$enable_dirty_schedulers_test\nAC_SUBST(DIRTY_SCHEDULER_TEST)\ntest $DIRTY_SCHEDULER_TEST != yes || {\n    test -f \"$ERL_TOP/erts/CONF_INFO\" || echo \"\" > \"$ERL_TOP/erts/CONF_INFO\"\n    cat >> $ERL_TOP/erts/CONF_INFO <<EOF\n\n                 WARNING:\n                   Dirty Scheduler Test has been enabled. This\n                   feature is for debugging purposes only.\n                   Poor performance as well as strange system\n                   characteristics is expected!\n\nEOF\n}\n\ntest \"X$smp_require_native_atomics\" = \"Xyes\" &&\n     AC_DEFINE(ETHR_SMP_REQUIRE_NATIVE_IMPLS, 1, [Define if you want to enable check for native ethread implementations])\n\ncase \"$ethr_have_native_atomics-$smp_require_native_atomics-$ethr_have_native_spinlock\" in\n  yes-*)\n\tif test \"$ethr_native_atomic_implementation\" = \"gcc_sync\"; then\n\t    test -f \"$ERL_TOP/erts/CONF_INFO\" ||\n\t\techo \"\" > \"$ERL_TOP/erts/CONF_INFO\"\n\t    cat >> $ERL_TOP/erts/CONF_INFO <<EOF\n\n                 WARNING:\n                   Only gcc's __sync_* builtins available for\n                   atomic memory access. This will cause lots\n                   of expensive and unnecessary memory barrier\n                   instructions to be issued which will make\n                   the performance of the runtime system\n                   suffer. You are *strongly* advised to\n                   upgrade to a gcc version that supports the\n                   __atomic_* builtins (at least gcc version\n                   4.7) or build with libatomic_ops. See the\n                   \"Atomic Memory Operations and the VM\"\n\t\t   chapter of \\$ERL_TOP/HOWTO/INSTALL.md for\n                   more information.\n\nEOF\n\tfi\n\t;;\n\n  no-yes-*)\n\tAC_MSG_ERROR([No native atomic implementation found. See the \\\"Atomic Memory Operations and the VM\\\" chapter of \\$ERL_TOP/HOWTO/INSTALL.md for more information.])\n\t;;\n\n  no-no-yes)\n\n\ttest -f \"$ERL_TOP/erts/CONF_INFO\" ||\n\t    echo \"\" > \"$ERL_TOP/erts/CONF_INFO\"\n\tcat >> $ERL_TOP/erts/CONF_INFO <<EOF\n\n                 No native atomic implementation available.\n                 Fallbacks implemented using spinlocks will be\n                 used. Note that the performance of the SMP\n                 runtime system will suffer immensely due to\n\t\t this.\n\nEOF\n\t;;\n\n  no-no-no)\n\ttest -f \"$ERL_TOP/erts/CONF_INFO\" ||\n\t    echo \"\" > \"$ERL_TOP/erts/CONF_INFO\"\n\tcat >> \"$ERL_TOP/erts/CONF_INFO\" <<EOF\n\n                 No native atomic implementation, nor no native\n                 spinlock implementation available. Fallbacks\n                 implemented using mutexes will be used. Note\n                 that the performance of the SMP runtime system\n                 will suffer immensely due to this.\n\nEOF\n\t;;\n\nesac\nAC_SUBST(TYPES)\n\nAC_CHECK_FUNCS([posix_fadvise closefrom])\nAC_CHECK_HEADERS([linux/falloc.h])\ndnl * Old glibcs have broken fallocate64(). Make sure not to use it.\nAC_CACHE_CHECK([whether fallocate() works],i_cv_fallocate_works,[\n    AC_TRY_LINK([\n        #include <stdio.h>\n        #include <stdlib.h>\n        #include <fcntl.h>\n        #include <unistd.h>\n\t#include <fcntl.h>\n\t#include <linux/falloc.h>\n\t],\n        [\t            \n\tint fd = creat(\"conftest.temp\", 0600);\n        fallocate(fd, FALLOC_FL_KEEP_SIZE,(off_t)  1024,(off_t)  1024);\n    \t], i_cv_fallocate_works=yes, i_cv_fallocate_works=no)\n])\nif test $i_cv_fallocate_works = yes; then\n   AC_DEFINE(HAVE_FALLOCATE, 1, Define if you have a working fallocate())\nfi\n\ndnl * Old glibcs have broken posix_fallocate(). Make sure not to use it.\ndnl * It may also be broken in AIX.\nAC_CACHE_CHECK([whether posix_fallocate() works],i_cv_posix_fallocate_works,[\n    AC_TRY_RUN([\n        #if !defined(__sun) && !defined(__sun__)\n        #define _XOPEN_SOURCE 600\n        #endif\n        #include <stdio.h>\n        #include <stdlib.h>\n        #include <fcntl.h>\n        #include <unistd.h>\n        #if defined(__GLIBC__) && (__GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 7))\n            possibly broken posix_fallocate\n        #endif\n        int main() {\n            int fd = creat(\"conftest.temp\", 0600);\n            int ret;\n            if (-1 == fd) {\n               perror(\"creat()\");\n               return 2;\n            }\n            ret = posix_fallocate(fd, 1024, 1024) < 0 ? 1 : 0;\n            unlink(\"conftest.temp\");\n            return ret;\n        }\n    ], [\n        i_cv_posix_fallocate_works=yes\n    ], [\n        i_cv_posix_fallocate_works=no\n    ], [\n        i_cv_posix_fallocate_works=no\n    ])\n])\nif test $i_cv_posix_fallocate_works = yes; then\n   AC_DEFINE(HAVE_POSIX_FALLOCATE,, Define if you have a working posix_fallocate())\nfi\n\n#\n# EMU_THR_LIB_NAME, EMU_THR_LIBS, EMU_THR_X_LIBS, and EMU_THR_DEFS is\n# used by the emulator, and can (but should not) be used by applications\n# that only require thread support when the emulator has thread support.\n# Other applications should use ETHR_LIB_NAME, ETHR_LIBS, ETHR_X_LIBS,\n# and ETHR_DEFS.\n#\n\nEMU_THR_LIB_NAME=\nEMU_THR_X_LIBS=\nEMU_THR_LIBS=\nEMU_THR_DEFS=\n\n# Threads enabled for emulator\nEMU_THR_LIB_NAME=$ETHR_LIB_NAME\nEMU_THR_X_LIBS=$ETHR_X_LIBS\nEMU_THR_LIBS=$ETHR_LIBS\nEMU_THR_DEFS=$ETHR_DEFS\nENABLE_ALLOC_TYPE_VARS=\"$ENABLE_ALLOC_TYPE_VARS threads\"\nAC_MSG_CHECKING(whether lock checking should be enabled)\nAC_MSG_RESULT($enable_lock_check)\nif test \"x$enable_lock_check\" != \"xno\"; then\n    EMU_THR_DEFS=\"$EMU_THR_DEFS -DERTS_ENABLE_LOCK_CHECK\"\nfi\n\nAC_MSG_CHECKING(whether lock counters should be enabled)\nAC_MSG_RESULT($enable_lock_count)\nif test \"x$enable_lock_count\" != \"xno\"; then\n    TYPES=\"$TYPES lcnt\"\nfi\n\ncase $host_os in\n    linux*)\n\tAC_MSG_CHECKING([whether dlopen() needs to be called before first call to dlerror()])\n\tif test \"x$ETHR_THR_LIB_BASE_TYPE\" != \"xposix_nptl\"; then\n\t    AC_DEFINE(ERTS_NEED_DLOPEN_BEFORE_DLERROR,[1],\n\t\t[Define if dlopen() needs to be called before first call to dlerror()])\n\t\tAC_MSG_RESULT(yes)\n\telse\n\t\tAC_MSG_RESULT(no)\n\tfi\n\t;;\n    *)\n\t;;\nesac\n\n# Remove -D_WIN32_WINNT*, -DWINVER* and -D_GNU_SOURCE from EMU_THR_DEFS\n# (defined in CFLAGS). Note that we want to keep these flags\n# in ETHR_DEFS, but not in EMU_THR_DEFS.\nnew_emu_thr_defs=\nfor thr_def in $EMU_THR_DEFS; do\n    case $thr_def in\n\t-D_GNU_SOURCE*|-D_WIN32_WINNT*|-DWINVER*)\n\t    ;;\n\t*)\n\t    new_emu_thr_defs=\"$new_emu_thr_defs $thr_def\"\n\t    ;;\n    esac\ndone\nEMU_THR_DEFS=$new_emu_thr_defs\n\nAC_SUBST(EMU_THR_LIB_NAME)\nAC_SUBST(EMU_THR_X_LIBS)\nAC_SUBST(EMU_THR_LIBS)\nAC_SUBST(EMU_THR_DEFS)\n\nif test \"x$enable_lock_check\" = \"xno\"; then\n    EMU_LOCK_CHECKING=no\nelse\n    EMU_LOCK_CHECKING=yes\nfi\n\nAC_SUBST(EMU_LOCK_CHECKING)\n\nERL_INTERNAL_LIBS\n\ndnl THR_LIBS and THR_DEFS are only used by odbc\nTHR_LIBS=$ETHR_X_LIBS\nTHR_DEFS=$ETHR_DEFS\n\nAC_SUBST(THR_LIBS)\nAC_SUBST(THR_DEFS)\n\ndnl ----------------------------------------------------------------------\ndnl Try to figure out where to get the termcap functions from.\ndnl We use tgetent(), tgetflag(), tgetnum(), tgetstr() and tputs()\ndnl ----------------------------------------------------------------------\n\nTERMCAP_LIB=\n\nif test \"x$with_termcap\" != \"xno\" &&\n   test \"X$host\" != \"Xwin32\"; then\n    # try these libs\n    termcap_libs=\"tinfo ncurses curses termcap termlib\"\n\n    for termcap_lib in $termcap_libs; do\n\tAC_CHECK_LIB($termcap_lib, tgetent, TERMCAP_LIB=\"-l$termcap_lib\")\n\tif test \"x$TERMCAP_LIB\" != \"x\"; then\n\t    break\n\tfi\n    done\n\n    if test \"x$TERMCAP_LIB\" = \"x\"; then\n\tAC_MSG_ERROR([No curses library functions found])\n    fi\nfi\n\nAC_SUBST(TERMCAP_LIB)\n\nif test \"x$TERMCAP_LIB\" != \"x\"; then\n\n\tAC_DEFINE(HAVE_TERMCAP, 1, [Define if termcap functions exists])\nfi\n\nif test \"X$host\" != \"Xwin32\"; then\n    AC_MSG_CHECKING(for wcwidth)\n    AC_TRY_LINK([#include <wchar.h>], [wcwidth(0);],\n                have_wcwidth=yes, have_wcwidth=no)\n    if test $have_wcwidth = yes; then\n        AC_MSG_RESULT([yes])\n        AC_DEFINE(HAVE_WCWIDTH, [1],\n                  [Define to 1 if you have a `wcwidth' function.])\n    fi\nfi\n\ndnl -------------\ndnl zlib\ndnl -------------\n\nAC_ARG_ENABLE(builtin-zlib,\n  AS_HELP_STRING([--enable-builtin-zlib],\n                 [force use of our own built-in zlib]),\n  [ case \"$enableval\" in\n      no) enable_builtin_zlib=no ;;\n      *)  enable_builtin_zlib=yes ;;\n    esac ], enable_builtin_zlib=no)\n\nZ_LIB=\n\nif test \"x$enable_builtin_zlib\" = \"xyes\"; then\n  AC_DEFINE(HAVE_ZLIB_INFLATEGETDICTIONARY, 1,\n            [Define if your zlib version defines inflateGetDictionary.])\n  AC_MSG_NOTICE([Using our own built-in zlib source])\nelse\nAC_MSG_CHECKING(for zlib 1.2.5 or higher)\nzlib_save_LIBS=$LIBS\nLIBS=\"-lz $LIBS\"\nAC_LINK_IFELSE(\n [AC_LANG_PROGRAM([[\n#include \"zlib.h\"\n]],[[\n#if ZLIB_VERNUM >= 0x1250\n  Bytef s[1];\n  s[0] = 0;\n  (void) adler32((uLong)0, s, 1);\n#else\n#error \"No zlib 1.2.5 or higher found\"\nerror\n#endif\n]])],\n[\n Z_LIB=\"-lz\"\n AC_DEFINE(HAVE_LIBZ, 1, [Define to 1 if you have the `z' library (-lz).])\n AC_MSG_RESULT(yes)\n],[\n AC_MSG_RESULT(no)\n])\n\nif test \"$Z_LIB\" != \"\"; then\n  AC_MSG_CHECKING(for zlib inflateGetDictionary presence)\n  AC_SEARCH_LIBS(inflateGetDictionary, [z],\n                 AC_DEFINE(HAVE_ZLIB_INFLATEGETDICTIONARY, 1,\n                           [Define if your zlib version defines inflateGetDictionary.]))\nfi\n\nLIBS=$zlib_save_LIBS\n\nfi\nAC_SUBST(Z_LIB)\n\ndnl\ndnl This test kindly borrowed from Tcl\ndnl\n#--------------------------------------------------------------------\n#\tCheck for the existence of the -lsocket and -lnsl libraries.\n#\tThe order here is important, so that they end up in the right\n#\torder in the command line generated by make.  Here are some\n#\tspecial considerations:\n#\t1. Use \"connect\" and \"accept\" to check for -lsocket, and\n#\t   \"gethostbyname\" to check for -lnsl.\n#\t2. Use each function name only once:  can't redo a check because\n#\t   autoconf caches the results of the last check and won't redo it.\n#\t3. Use -lnsl and -lsocket only if they supply procedures that\n#\t   aren't already present in the normal libraries.  This is because\n#\t   IRIX 5.2 has libraries, but they aren't needed and they're\n#\t   bogus:  they goof up name resolution if used.\n#\t4. On some SVR4 systems, can't use -lsocket without -lnsl too.\n#\t   To get around this problem, check for both libraries together\n#\t   if -lsocket doesn't work by itself.\n#--------------------------------------------------------------------\n\ntk_oldLibs=$LIBS\nerl_checkBoth=0\nSOCKET_LIBS=\"\"\nAC_CHECK_FUNC(connect, erl_checkSocket=0, erl_checkSocket=1)\nif test \"$erl_checkSocket\" = 1; then\n    AC_CHECK_LIB(socket, main, SOCKET_LIBS=\"-lsocket\", erl_checkBoth=1)\nfi\n\nif test \"$erl_checkBoth\" = 1; then\n    LIBS=\"$LIBS -lsocket -lnsl\"\n    AC_CHECK_FUNC(accept, SOCKET_LIBS=\"-lsocket -lnsl\")\nfi\n\nLIBS=\"$tk_oldLibs $SOCKET_LIBS\"\nAC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [SOCKET_LIBS=\"$SOCKET_LIBS -lnsl\"]))\nAC_CHECK_FUNC(gethostbyname_r,have_gethostbyname_r=yes)\n\nLIBS=\"$tk_oldLibs $SOCKET_LIBS\"\n\nAC_SUBST(SOCKET_LIBS)\n\ndnl\ndnl These gethostbyname thingies use old style AC_DEFINE for BC with ancient \ndnl autoconf...\ndnl \n\nif test \"$have_gethostbyname_r\" = yes; then\n\t# OK, so we have gethostbyname_r() - but do we know how to call it...?\n\t# (if not, HAVE_GETHOSTBYNAME_R will not be defined at all)\n\tcase $host_os in\n\t\tsolaris2*)\n\t\t\tAC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_SOLARIS,\n\t\t\t\t[Define to flavour of gethostbyname_r])\n\t\t;;\n\t\taix4*)\n\t\t\t# AIX version also needs \"struct hostent_data\" defn\n\t\t\tAC_TRY_COMPILE([#include <netdb.h>],\n\t\t\t\t[struct hostent_data hd;],\n\t\t\t\tAC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_AIX,\n\t\t\t\t    [Define to flavour of gethostbyname_r]))\n\t\t;;\n\t\t*)\n\t\t\tAC_EGREP_CPP(^yes$,[\n#include <stdio.h>\n#ifdef __GLIBC__\nyes\n#endif\n\t\t\t  ], AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_GLIBC,\n\t\t\t\t[Define to flavour of gethostbyname_r]))\n\t\t;;\n\tesac\nfi\n\nAC_MSG_CHECKING(for working posix_openpt implementation)\nAC_TRY_LINK([\n#define _XOPEN_SOURCE 600 \n#include <stdlib.h>\n#include <fcntl.h>\n],\n[\n    int mfd = posix_openpt(O_RDWR);\n    ptsname(mfd);\n    grantpt(mfd);\n    unlockpt(mfd);\n    return mfd;\n], working_posix_openpt=yes, working_posix_openpt=no)\n\nif test \"X$working_posix_openpt\" = \"Xyes\"; then\n    AC_DEFINE(HAVE_WORKING_POSIX_OPENPT, [1],\n\t      [Define if you have a working posix_openpt implementation])\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\nfi\n\ndnl Check for usage of sockaddr_in in netdb.h\ndnl somewhat ugly check, I check for presence of the string and that \ndnl compilation works. If either fails I assume it's not needed.\ndnl Seems only to be needed on a patched version of solaris2.5.1, with\ndnl netdb.h  version  1.18.\nAC_MSG_CHECKING([if netdb.h requires netinet/in.h to be previously included])\nAC_EGREP_CPP(sockaddr_in, \n\t     [#include <netdb.h>],\n\t     AC_TRY_COMPILE([#include <netinet/in.h>\n\t\t\t     #include <netdb.h>], \n\t\t\t    [return 0;],\n\t\t\t    need_in_h=yes, \n                            need_in_h=no),\n             need_in_h=no)\n\nif test $need_in_h = yes; then\n\tAC_DEFINE(NETDB_H_NEEDS_IN_H,[1],\n\t\t[Define if netdb.h needs struct sockaddr_in ans in.h CAN be included before])\n\tAC_MSG_RESULT(yes)\nelse\n\tAC_MSG_RESULT(no)\nfi\n\ndnl Check for type socklen_t\ndnl\nAC_MSG_CHECKING([for socklen_t])\nAC_TRY_COMPILE( [#include <sys/socket.h>], \n\t\t[socklen_t test;],\n\t\thave_socklen_t=yes, \n                have_socklen_t=no),\n\nif test $have_socklen_t = yes; then\n\tAC_DEFINE(HAVE_SOCKLEN_T,[1],[Define if we have socklen_t])\n\tAC_MSG_RESULT(yes)\nelse\n\tAC_MSG_RESULT(no)\nfi\n\n\ndnl h_errno isn't always declared in netdb.h, and with some definitions\ndnl (e.g. function call for thread-safe) a simple 'extern int' may conflict\ndnl (we do assume that h_errno exists at all...)\nAC_CACHE_CHECK([for h_errno declaration in netdb.h],\n  ac_cv_decl_h_errno,\n[AC_TRY_COMPILE([#include <netdb.h>], [int err = h_errno;],\n  ac_cv_decl_h_errno=yes, ac_cv_decl_h_errno=no)])\nif test $ac_cv_decl_h_errno = yes; then\n  AC_DEFINE(H_ERRNO_DECLARED,[1],\n\t[define if h_errno is declared (in some way) in a system header file])\nfi\n\n\ndnl ----------------------------------------------------------------------\ndnl Checks for header files.\ndnl ----------------------------------------------------------------------\n\ndnl We sometimes need EMU_THR_DEFS in order to find certain headers.\nsaved_cppflags=$CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS $EMU_THR_DEFS\"\n\nAC_HEADER_DIRENT\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\nAC_HEADER_TIME\n\ndnl Interactive UX needs <net/errno.h> for socket related error codes.\ndnl Some Linuxes needs <sys/socketio.h> instead of <sys/sockio.h>\ndnl\nAC_CHECK_HEADERS(fcntl.h limits.h unistd.h syslog.h dlfcn.h ieeefp.h \\\n                 sys/types.h sys/stropts.h sys/sysctl.h \\\n                 sys/ioctl.h sys/time.h sys/uio.h \\\n                 sys/socket.h sys/sockio.h sys/socketio.h \\\n                 net/errno.h malloc.h arpa/nameser.h libdlpi.h \\\n\t\t pty.h util.h libutil.h utmp.h langinfo.h poll.h sdkddkver.h)\n\nAC_CHECK_MEMBERS([struct ifreq.ifr_hwaddr], [], [],\n\t[#ifdef __WIN32__\n\t #else\n\t #ifdef VXWORKS\n\t #else\n\t #include <net/if.h>\n\t #endif\n\t #endif\n\t])\n\nAC_CHECK_MEMBERS([struct ifreq.ifr_enaddr], [], [],\n\t[#ifdef __WIN32__\n\t #else\n\t #ifdef VXWORKS\n\t #else\n\t #include <net/if.h>\n\t #endif\n\t #endif\n\t])\n\ndnl ----------------------------------------------------------------------\ndnl  Check the availability of systemd\ndnl ----------------------------------------------------------------------\nif test x\"$enable_systemd\" != x\"no\"; then\n\nsystemd_daemon_save_LIBS=$LIBS\nLIBS=\nAC_SEARCH_LIBS(sd_listen_fds,[systemd systemd-daemon],\n  [have_sd_listen_fds=yes],[have_sd_listen_fds=no],$systemd_daemon_save_LIBS)\nAC_SEARCH_LIBS(sd_notify,[systemd systemd-daemon],\n  [have_sd_notify=yes],[have_sd_notify=no],$systemd_daemon_save_LIBS)\nAC_CHECK_HEADERS(systemd/sd-daemon.h,\n  [have_systemd_sd_daemon_h=yes],[have_systemd_sd_daemon_h=no])\n\nif test x\"$have_sd_listen_fds\" = x\"yes\" && \\\n   test x\"$have_sd_notify\" = x\"yes\" && \\\n   test x\"$have_systemd_sd_daemon_h\" = x\"yes\"; then\n  AC_DEFINE([HAVE_SYSTEMD_DAEMON],[1],[Define if you have systemd daemon])\n  SYSTEMD_DAEMON_LIBS=$LIBS\nelif test x\"$enable_systemd\" = x\"yes\"; then\n  AC_MSG_FAILURE([--enable-systemd was given, but test for systemd failed])\nfi\nLIBS=$systemd_daemon_save_LIBS\nfi\nAC_SUBST(SYSTEMD_DAEMON_LIBS)\n\n\ndnl ----------------------------------------------------------------------\ndnl Check the availability for libdlpi\ndnl ----------------------------------------------------------------------\nAC_CHECK_LIB(dlpi, dlpi_open)\nif test x\"$ac_cv_lib_dlpi_dlpi_open\" = x\"no\"; then\n   unset -v ac_cv_lib_dlpi_dlpi_open\n   dnl Try again now with -L/lib (or ditto 64) as argument to linker since\n   dnl gcc makes /usr/ccs/bin/ld ignore the crle configured linker default paths\n   dnl typically causing dlpi not being found on Solaris et.al\n   save_ldflags=\"$LDFLAGS\"\n   try_dlpi_lib=/lib\n   if test x\"$ac_cv_sizeof_void_p\" = x\"8\"; then\n      if test -d /lib64; then\n\t try_dlpi_lib=/lib64\n      elif test -d /lib/64; then\n\t try_dlpi_lib=/lib/64\n      fi\n   fi\n   if test ! -f \"$try_dlpi_lib/libdlpi.so\" && \\\n      test -f \"$try_dlpi_lib/libdlpi.so.1\"\n   then\n      dnl It looks like there is a missing symlink\n      dnl - let's be helpful and notify the user\n      dnl NOTE this help is far from perfect e.g if there would be no\n      dnl *.so.1 but a *.so.1.123 or *.so.2 this will be no help\n      AC_MSG_ERROR(\n\t[Your OS installation is missing a symbolic link.\n\tMaybe it lacks some development package(s)...\n\tIt can anyhow be fixed with the following command:\n\t# ln -s libdlpi.so.1 $try_dlpi_lib/libdlpi.so\n\t])\n   fi\n   LDFLAGS=\"-L$try_dlpi_lib -R$try_dlpi_lib $LDFLAGS\"\n   unset -v try_dlpi_lib\n   AC_MSG_NOTICE([Extending the search to include /lib])\n   AC_CHECK_LIB(dlpi, dlpi_open)\n   if test x\"$ac_cv_lib_dlpi_dlpi_open\" = x\"no\"; then\n      LDFLAGS=\"$save_ldflags\"\n   fi\n   unset -v save_ldflags\nfi\n\nAC_CHECK_HEADER(sys/resource.h,\n\t[AC_DEFINE(HAVE_SYS_RESOURCE_H, 1,\n\t\t[Define to 1 if you have the <sys/resource.h> header file])\n\t AC_CHECK_DECLS([getrlimit, setrlimit, RLIMIT_STACK],\n\t\t[],[],\n\t\t[#include <sys/resource.h>])],\n\t[],[])\n\nAC_CHECK_FUNCS([getrusage])\n\ndnl Check if we have kernel poll support\nhave_kernel_poll=no\nAC_CHECK_HEADER(sys/event.h, have_kernel_poll=kqueue)\nAC_CHECK_HEADER(sys/epoll.h, have_kernel_poll=epoll)\nAC_CHECK_HEADER(sys/devpoll.h, have_kernel_poll=/dev/poll)\n\ndnl Check if we have timerfds to be used for high accuracy\ndnl epoll_wait timeouts\nAC_CHECK_HEADERS([sys/timerfd.h])\n\ndnl Check for kernel SCTP support\nAC_SUBST(LIBSCTP)\nif test \"x$enable_sctp\" != \"xno\" ; then\n    AC_CHECK_HEADER(netinet/sctp.h,\n        [LIBSCTP=libsctp.so.1\n\t AC_DEFINE(HAVE_SCTP_H, [1],\n            [Define to 1 if you have the <netinet/sctp.h> header file])],\n\t[],\n\t[#if HAVE_SYS_SOCKET_H\n\t #include <sys/socket.h>\n\t #endif\n\t])\nfi\n\nif test x\"$ac_cv_header_netinet_sctp_h\" = x\"yes\"; then\n    AS_IF([test \"x$enable_sctp\" = \"xlib\"],\n        AC_CHECK_LIB(sctp, sctp_bindx))\n    AC_CHECK_FUNCS([sctp_bindx sctp_peeloff sctp_getladdrs sctp_freeladdrs sctp_getpaddrs sctp_freepaddrs])\n    AC_CHECK_DECLS([SCTP_UNORDERED, SCTP_ADDR_OVER, SCTP_ABORT,\n                    SCTP_EOF, SCTP_SENDALL, SCTP_ADDR_CONFIRMED,\n\t\t    SCTP_DELAYED_ACK_TIME,\n\t\t    SCTP_EMPTY, SCTP_UNCONFIRMED,\n\t\t    SCTP_CLOSED, SCTPS_IDLE,\n\t\t    SCTP_BOUND, SCTPS_BOUND,\n\t\t    SCTP_LISTEN, SCTPS_LISTEN,\n\t\t    SCTP_COOKIE_WAIT, SCTPS_COOKIE_WAIT,\n\t\t    SCTP_COOKIE_ECHOED, SCTPS_COOKIE_ECHOED,\n\t\t    SCTP_ESTABLISHED, SCTPS_ESTABLISHED,\n\t\t    SCTP_SHUTDOWN_PENDING, SCTPS_SHUTDOWN_PENDING,\n\t\t    SCTP_SHUTDOWN_SENT, SCTPS_SHUTDOWN_SENT,\n\t\t    SCTP_SHUTDOWN_RECEIVED, SCTPS_SHUTDOWN_RECEIVED,\n\t\t    SCTP_SHUTDOWN_ACK_SENT, SCTPS_SHUTDOWN_ACK_SENT], [], [],\n        [#if HAVE_SYS_SOCKET_H\n         #include <sys/socket.h>\n         #endif\n         #include <netinet/sctp.h>\n        ])\n    AC_CHECK_MEMBERS([struct sctp_paddrparams.spp_pathmtu,\n                      struct sctp_paddrparams.spp_sackdelay,\n                      struct sctp_paddrparams.spp_flags,\n                      struct sctp_remote_error.sre_data,\n                      struct sctp_send_failed.ssf_data], [], [],\n        [#if HAVE_SYS_SOCKET_H\n         #include <sys/socket.h>\n         #endif\n         #include <netinet/sctp.h>\n        ])\nfi\n\ndnl Check for setns\nAC_CHECK_HEADERS(sched.h setns.h)\nAC_CHECK_FUNCS([setns])\n\nHAVE_VALGRIND=no\nAC_CHECK_HEADER(valgrind/valgrind.h, HAVE_VALGRIND=yes)\nAC_SUBST(HAVE_VALGRIND)\n\nLM_DECL_SO_BSDCOMPAT\nLM_DECL_INADDR_LOOPBACK\nLM_DECL_SYS_ERRLIST\n\nAC_CACHE_CHECK([if windows.h includes winsock2.h],\n\t\terts_cv_windows_h_includes_winsock2_h,\n\t\tAC_TRY_COMPILE([#include <windows.h>\n\t\t\t\t],\n\t\t\t       [#ifndef _WINSOCK2API_\n\t\t\t\t#error winsock2.h not included\n\t\t\t\t#endif\n\t\t\t\tint i = 1;\n\t\t\t\t],\n\t\t\t       erts_cv_windows_h_includes_winsock2_h=yes,\n\t\t\t       erts_cv_windows_h_includes_winsock2_h=no))\nif test $erts_cv_windows_h_includes_winsock2_h = yes; then\n\tAC_DEFINE(WINDOWS_H_INCLUDES_WINSOCK2_H, 1, \\\n[Define if windows.h includes winsock2.h])\nfi\n\ndnl restore CPPFLAGS\nCPPFLAGS=$saved_cppflags\n\ndnl ----------------------------------------------------------------------\ndnl Checks for typedefs, structures, and compiler characteristics.\ndnl ----------------------------------------------------------------------\n\nAC_C_CONST\nAC_TYPE_SIGNAL\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\n\nAC_STRUCT_TM\nLM_STRUCT_SOCKADDR_SA_LEN\nLM_STRUCT_EXCEPTION\n\nAC_CHECK_SIZEOF(char, 1)\nAC_CHECK_SIZEOF(short)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(void *)\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(size_t)\nAC_CHECK_SIZEOF(off_t)\nAC_CHECK_SIZEOF(time_t)\n\nBITS64=\n\nif test $ac_cv_sizeof_void_p = 8; then\n  BITS64=yes\nfi\nAC_SUBST(BITS64)\n\nAC_MSG_CHECKING([for C compiler 'restrict' support])\nrestrict_keyword=\"\"\nfor x in restrict __restrict; do\n    AC_TRY_COMPILE([int * $x foo(int * $x arg);\n\t\t    int * $x foo(int * $x arg)\n\t\t        { int * $x var=arg; return var;}\n\t\t   ],[],\n\t\t   [restrict_keyword=$x],[])\n    if test \"x$restrict_keyword\" != \"x\"; then\n\tbreak\n    fi\ndone\nAC_DEFINE_UNQUOTED(ERTS_RESTRICT,[$restrict_keyword],[Type qualifier restrict])\nif test \"x$restrict_keyword\" != \"x\"; then\n   AC_MSG_RESULT(yes)\nelse\n   AC_MSG_RESULT(no)\nfi\n\nif test \"x$ac_compiler_gnu\" = \"xyes\"; then\nAC_MSG_CHECKING([if we should add -fno-tree-copyrename to CFLAGS for computed gotos to work properly])\nAC_TRY_COMPILE([],[\n\t\t#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)\n\t\t\t;\n\t\t\t#else\n\t\t\t#error old and ok\n\t\t\t#endif\n\t\t\t],\n\t\t\tno_tree_copyrename=yes,\n\t\t\tno_tree_copyrename=no)\n\nif test \"x$no_tree_copyrename\" = \"xyes\"; then\n\tCFLAGS=\"$CFLAGS -fno-tree-copyrename\"\n\tAC_MSG_RESULT(yes, adjusting CFLAGS)\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING([for broken gcc-4.3.0 compiler])\nAC_TRY_RUN([\n/* pr36339.c */\nextern void abort (void);\n\ntypedef unsigned long my_uintptr_t;\n\nint check_a(my_uintptr_t tagged_ptr);\n\nint __attribute__((noinline)) try_a(my_uintptr_t x)\n{\n  my_uintptr_t heap[2];\n  my_uintptr_t *hp = heap;\n\n  hp[0] = x;\n  hp[1] = 0;\n  return check_a((my_uintptr_t)(void*)((char*)hp + 1));\n}\n\nint __attribute__((noinline)) check_a(my_uintptr_t tagged_ptr)\n{\n  my_uintptr_t *hp = (my_uintptr_t*)(void*)((char*)tagged_ptr - 1);\n\n  if (hp[0] == 42 && hp[1] == 0)\n    return 0;\n  return -1;\n}\n\nint main(void)\n{\n  if (try_a(42) < 0)\n    abort ();\n  return 0;\n}\n], gcc_4_3_0_bug=no, gcc_4_3_0_bug=yes, gcc_4_3_0_bug=cross)\n\ncase $gcc_4_3_0_bug in\n\tyes|no)\n\t\tgcc_4_3_0_bug_result=$gcc_4_3_0_bug;;\n\tcross)\n\t\tgcc_dumped_vsn=`$CC -dumpversion 2>/dev/null`\n\t\tcase gcc-$gcc_dumped_vsn in\n\t\t\tgcc-4.3.0) gcc_4_3_0_bug=yes;;\n\t\t\t*) gcc_4_3_0_bug=no;;\n\t\tesac\n\t\tgcc_4_3_0_bug_result=\"$gcc_4_3_0_bug; could not run test since cross compiling, checked version number ($gcc_dumped_vsn) instead\";;\nesac\n\nAC_MSG_RESULT([$gcc_4_3_0_bug_result])\nif test $gcc_4_3_0_bug = yes; then\n\tAC_MSG_ERROR([This gcc miscompiles the Erlang runtime system; please use a different version])\t\nfi\n\nfi\n\ncase X$erl_xcomp_bigendian in\n    X) ;;\n    Xyes|Xno) ac_cv_c_bigendian=$erl_xcomp_bigendian;;\n    *) AC_MSG_ERROR([Bad erl_xcomp_bigendian value: $erl_xcomp_bigendian]);;\nesac\n\nAC_C_BIGENDIAN(\n\t[\n\t AC_DEFINE([WORDS_BIGENDIAN], [1], [Define if big-endian])\n\t AC_DEFINE([ERTS_ENDIANNESS], [1], [Define > 0 if big-endian < 0 if little-endian, or 0 if unknown])\n\t],\n\t[\n\t AC_DEFINE([ERTS_ENDIANNESS], [-1], [Define > 0 if big-endian < 0 if little-endian, or 0 if unknown])\n\t],\n\t[\n\t  case \"$erl_xcomp_bigendian\" in\n\t    yes)\n\t     AC_DEFINE([ERTS_ENDIANNESS], [1], [Define > 0 if big-endian < 0 if little-endian, or 0 if unknown]);;\n\t    no)\n\t     AC_DEFINE([ERTS_ENDIANNESS], [-1], [Define > 0 if big-endian < 0 if little-endian, or 0 if unknown]);;\n\t    *)\n\t     AC_DEFINE([ERTS_ENDIANNESS], [0], [Define > 0 if big-endian < 0 if little-endian, or 0 if unknown]);;\n\t  esac\n\t])\t\n\nAC_C_DOUBLE_MIDDLE_ENDIAN\n\ndnl fdatasync syscall (Unix only)\nAC_CHECK_FUNCS([fdatasync])\n\ndnl Find which C libraries are required to use fdatasync\ndnl TODO: Remove check once SunOS >= 5.11 is required by erts.\ndnl       fdatasync requires linking against -lrt on SunOS <= 5.10.\ndnl       OpenSolaris 2009.06 is SunOS 5.11 and does not require -lrt.\nAC_SEARCH_LIBS(fdatasync, [rt])\n\n\ndnl sendfile syscall\ncase $host_os in\n    linux*|freebsd*|dragonfly*|darwin*)\n\t\tAC_CHECK_FUNCS([sendfile])\n\t\t;;\n    solaris*)\n\t\tAC_SEARCH_LIBS(sendfilev, sendfile,\n\t\t\tAC_DEFINE([HAVE_SENDFILEV],[1],\n\t\t           [Define to 1 if you have the `sendfilev' function.]))\n\t\t;;\n    win32)\n\t\tLIBS=\"$LIBS -lmswsock\"\n\t\t;;\n    *)\n\t\t;;\nesac\n\ndnl ----------------------------------------------------------------------\ndnl Checks for library functions.\ndnl ----------------------------------------------------------------------\n\ndnl We may need the thread library and thread flags in order to find right stuff\nsaved_cppflags=$CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS $EMU_THR_DEFS\"\nsaved_libs=$LIBS\nLIBS=\"$LIBS $EMU_THR_X_LIBS\"\n\ndnl Check if we have these, in which case we'll try to build\ndnl inet_gethost with ipv6 support.\nAC_CHECK_HEADERS(windows.h)\nAC_CHECK_HEADERS(winsock2.h)\nAC_CHECK_HEADERS(ws2tcpip.h,[],[],[\n#ifdef HAVE_WINSOCK2_H\n#include <winsock2.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n])\ndnl AC_CHECK_FUNC(getaddrinfo, have_getaddrinfo=yes, have_getaddrinfo=no)\nAC_MSG_CHECKING(for getaddrinfo)\nAC_TRY_LINK([\n#include <stdlib.h>\n#include <string.h>\n#ifdef HAVE_WINSOCK2_H\n#include <winsock2.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n#ifdef HAVE_WS2TCPIP_H\n#include <ws2tcpip.h>\n#endif\n#ifndef __WIN32__\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\n], \n[\ngetaddrinfo(\"\",\"\",NULL,NULL);\n],have_getaddrinfo=yes, have_getaddrinfo=no)\nif test $have_getaddrinfo = yes; then\n        AC_MSG_RESULT([yes])\n        AC_MSG_CHECKING([whether getaddrinfo accepts enough flags])\n        AC_TRY_LINK([\n#include <stdlib.h>\n#include <string.h>\n#ifdef HAVE_WINSOCK2_H\n#include <winsock2.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n#ifdef HAVE_WS2TCPIP_H\n#include <ws2tcpip.h>\n#endif\n#ifndef __WIN32__\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\n],\n[\n    struct addrinfo hints, *ai;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_flags = AI_CANONNAME;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_family = AF_INET6;\n    if (getaddrinfo(\"::\", NULL, &hints, &ai) == 0) {\n\tfreeaddrinfo(ai);\n\texit(0);\n    } else {\n\texit(1);\n    }\n],, have_getaddrinfo=no)\n\tAC_MSG_RESULT($have_getaddrinfo)\n\tcase $have_getaddrinfo in\n\t    yes)\n\t\tAC_DEFINE(HAVE_GETADDRINFO, [1], \n\t\t          [Define to 1 if you have a good `getaddrinfo' function.]);;\n\t    *) ;;\n\tesac\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_MSG_CHECKING(for getnameinfo)\nAC_TRY_LINK([\n#include <stdlib.h>\n#include <string.h>\n#ifdef HAVE_WINSOCK2_H\n#include <winsock2.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n#ifdef HAVE_WS2TCPIP_H\n#include <ws2tcpip.h>\n#endif\n#ifndef __WIN32__\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\n], \n[\ngetnameinfo(NULL,0,NULL,0,NULL,0,0);\n],have_getnameinfo=yes, have_getnameinfo=no)\nif test $have_getnameinfo = yes; then\n        AC_MSG_RESULT([yes])\n\tAC_DEFINE(HAVE_GETNAMEINFO, [1], \n\t\t  [Define to 1 if you have a good `getnameinfo' function.])\nelse\n\tAC_MSG_RESULT([no])\t  \nfi\n\n\nAC_CHECK_FUNCS([getipnodebyname getipnodebyaddr gethostbyname2])\n\nAC_CHECK_FUNCS([ieee_handler fpsetmask finite isnan isinf res_gethostbyname dlopen \\\n\t\tpread pwrite memmove strerror strerror_r strncasecmp \\\n\t\tgethrtime localtime_r gmtime_r inet_pton mprotect \\\n\t\tmmap mremap memcpy mallopt sbrk _sbrk __sbrk brk _brk __brk \\\n\t\tflockfile fstat strlcpy strlcat setsid posix2time time2posix \\\n\t\tsetlocale nl_langinfo poll mlockall ppoll])\n\nAC_MSG_CHECKING([for isfinite])\nAC_TRY_LINK([#include <math.h>],\n            [isfinite(0);], have_isfinite=yes, have_isfinite=no),\n\nif test $have_isfinite = yes; then\n    AC_DEFINE(HAVE_ISFINITE,[1],\n              [Define to 1 if you have the `isfinite' function.])\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\nfi\n\ncase X$erl_xcomp_posix_memalign in\n     Xno) ;;\n     Xyes) have_posix_memalign=yes ;;\n     *)\n\tAC_CHECK_FUNC(\n\t\t[posix_memalign],\n                [if test \"$cross_compiling\" != yes; then\nAC_TRY_RUN([\n#include <stdlib.h>\nint main(void) {\n    void *ptr = NULL;\n    int error;\n    size_t alignment = 0x40000, size = 0x20028;\n    if ((error = posix_memalign(&ptr, alignment, size)) != 0 || ptr == NULL)\n      return error;\n    return 0;\n}\n],have_posix_memalign=yes\n)\n\t\t else\n\t\t\thave_posix_memalign=yes\n\t\t fi]);;\nesac\n\nif test \"$have_posix_memalign\" = \"yes\"; then\n   AC_DEFINE(HAVE_POSIX_MEMALIGN,[1],\n\t     [Define to 1 if you have the `posix_memalign' function.])\nfi\n\n\ndnl writev on OS X snow leopard is broken for files > 4GB\ncase $host_os in\n        darwin10.8.0)\n\t    AC_MSG_CHECKING([for writev])\n\t    AC_MSG_RESULT(no, not stable on OS X Snow Leopard) ;;\n        *)\n\t    AC_CHECK_FUNCS([writev]) ;;\nesac\n\nAC_CHECK_DECLS([posix2time, time2posix],,,[#include <time.h>])\n\ndisable_vfork=false\nif test \"x$EMU_THR_LIB_NAME\" != \"x\"; then\n\tAC_MSG_CHECKING([if vfork is known to hang multithreaded applications])\n\tcase $host_os in\n\t\tosf*)\n\t\t\tAC_MSG_RESULT(yes)\n\t\t\tdisable_vfork=true;;\n\t\t*)\n\t\t\tAC_MSG_RESULT(no);;\n\tesac\nfi\n\nif test $disable_vfork = false; then\n\tAC_FUNC_VFORK\n\tif test $ac_cv_func_vfork_works = no; then\n\t\tdisable_vfork=true\n\tfi\nfi\n\nif test $disable_vfork = true; then\n\tAC_DEFINE(DISABLE_VFORK, 1, [Define if you want to disable vfork.])\nfi\n\nAC_FUNC_VPRINTF\n\ndnl The AC_DEFINEs are necessary for autoheader to work. :-(\ndnl for gzio\nLM_CHECK_FUNC_DECL(fread, [extern int fread();],,\n                   AC_DEFINE(HAVE_CONFLICTING_FREAD_DECLARATION,[1],[Define if you have a decl of fread that conflicts with int fread]))\n\ndnl Checking with TRY_LINK since putc_unlocked might be (probably is) a macro\nAC_CACHE_CHECK([for putc_unlocked],\n\terts_cv_putc_unlocked,\n\tAC_TRY_LINK([#include <stdio.h>],\n\t\t[int res = putc_unlocked('x',stdout);],\n\t\terts_cv_putc_unlocked=yes,\n             \terts_cv_putc_unlocked=no))\nif test $erts_cv_putc_unlocked = yes; then\n\tAC_DEFINE(HAVE_PUTC_UNLOCKED, 1, [Define if you have putc_unlocked])\nfi\n\ndnl Checking with TRY_LINK since fwrite_unlocked might be a macro\nAC_CACHE_CHECK([for fwrite_unlocked],\n\terts_cv_fwrite_unlocked,\n\tAC_TRY_LINK([#include <stdio.h>],\n\t\t[size_t res = fwrite_unlocked(NULL,sizeof(char),0,stdout);],\n\t\terts_cv_fwrite_unlocked=yes,\n             \terts_cv_fwrite_unlocked=no))\nif test $erts_cv_fwrite_unlocked = yes; then\n\tAC_DEFINE(HAVE_FWRITE_UNLOCKED, 1, [Define if you have fwrite_unlocked])\nfi\n\ndnl Need by run_erl.\nAC_CHECK_FUNCS([openpty])\n\nAC_CHECK_HEADERS(net/if_dl.h ifaddrs.h netpacket/packet.h sys/un.h)\nAC_CHECK_FUNCS([getifaddrs])\n\ndnl Checks for variables in6addr_any and in6addr_loopback,\ndnl\ndnl They normally declared by netinet/in.h, according to POSIX,\ndnl but not on Windows 7 (Windows SDK 7.1).  I would have liked\ndnl to just write AC_CHECK_DECL([in6addr_any], ...) but if doing so,\ndnl the configure check fails erroneously on Linux with the error\ndnl \"cannot convert to a pointer type\", on a line looking like\ndnl \"char *p = (char *) in6addr_any;\", so work around that\ndnl with some more code. \nAC_CACHE_CHECK(\n    [whether in6addr_any is declared],\n    [erts_cv_have_in6addr_any],\n    [AC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t    [[\n\t\t#include <sys/types.h>\n\t\t#include <sys/socket.h>\n\t\t#include <netinet/in.h>\n\t    ]],\n\t    [[printf(\"%d\", in6addr_any.s6_addr[16]);]]\n\t)],\n\t[erts_cv_have_in6addr_any=yes],\n\t[erts_cv_have_in6addr_any=no]\n    )]\n)\n\ncase \"$erts_cv_have_in6addr_any\" in\n yes)\n   AC_DEFINE([HAVE_IN6ADDR_ANY], [1],\n             [Define to 1 if you have the variable in6addr_any declared.])\nesac\n\nAC_CACHE_CHECK(\n    [whether in6addr_loopback is declared],\n    [erts_cv_have_in6addr_loopback],\n    [AC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t    [[\n\t\t#include <sys/types.h>\n\t\t#include <sys/socket.h>\n\t\t#include <netinet/in.h>\n\t    ]],\n\t    [[printf(\"%d\", in6addr_loopback.s6_addr[16]);]]\n\t)],\n\t[erts_cv_have_in6addr_loopback=yes],\n\t[erts_cv_have_in6addr_loopback=no]\n    )]\n)\n\ncase \"$erts_cv_have_in6addr_loopback\" in\n yes)\n   AC_DEFINE([HAVE_IN6ADDR_LOOPBACK], [1],\n             [Define to 1 if you have the variable in6addr_loopback declared.])\nesac\n\nAC_CHECK_DECLS([IN6ADDR_ANY_INIT, IN6ADDR_LOOPBACK_INIT, IPV6_V6ONLY], [], [],\n\t       [\n\t\t#include <sys/types.h>\n\t\t#include <sys/socket.h>\n\t\t#include <netinet/in.h>\n\t       ])\n\ndnl ----------------------------------------------------------------------\ndnl Checks for features/quirks in the system that affects Erlang.\ndnl ----------------------------------------------------------------------\n\nAC_MSG_CHECKING([for sched_getaffinity/sched_setaffinity])\nAC_TRY_LINK([#include <sched.h>],\n[\n#ifndef CPU_SETSIZE\n#error no CPU_SETSIZE\n#endif\n\tint res;\n\tcpu_set_t cpuset;\n\tCPU_ZERO(&cpuset);\n\tCPU_SET(1, &cpuset);\n\tres = sched_setaffinity(0, sizeof(cpu_set_t), &cpuset);\n\tres = sched_getaffinity(0, sizeof(cpu_set_t), &cpuset);\n\tres = CPU_ISSET(1, &cpuset);\n\tCPU_CLR(1, &cpuset);\n],\n\t\tsched_xetaffinity=yes,\n\t\tsched_xetaffinity=no)\nAC_MSG_RESULT([$sched_xetaffinity])\nif test $sched_xetaffinity = yes; then\n\tAC_DEFINE(HAVE_SCHED_xETAFFINITY, 1, [Define if you have sched_getaffinity/sched_setaffinity])\nfi\n\n\nAC_MSG_CHECKING([for pset functionality])\nAC_TRY_LINK([#include <sys/pset.h>],\n[\n\tint res;\n\tpsetid_t id = PS_MYID;\n\tint type = PS_PRIVATE;\n\tuint_t numcpus = 1024;\n\tprocessorid_t cpulist[1024];\n\n\tres = pset_info(id, &type, &numcpus, &cpulist[0]);\n],\n\t\tpset_functionality=yes,\n\t\tpset_functionality=no)\nAC_MSG_RESULT([$pset_functionality])\nif test $pset_functionality = yes; then\n\tAC_DEFINE(HAVE_PSET, 1, [Define if you have pset functionality])\nfi\n\nAC_MSG_CHECKING([for processor_bind functionality])\nAC_TRY_LINK([\n#include <sys/types.h>\n#include <sys/processor.h>\n#include <sys/procset.h>\n],\n[\n\tint res = processor_bind(P_LWPID, P_MYID, PBIND_NONE, NULL);\n],\n\t\tprocessor_bind_functionality=yes,\n\t\tprocessor_bind_functionality=no)\nAC_MSG_RESULT([$processor_bind_functionality])\nif test $processor_bind_functionality = yes; then\n\tAC_DEFINE(HAVE_PROCESSOR_BIND, 1, [Define if you have processor_bind functionality])\nfi\n\nAC_MSG_CHECKING([for cpuset_getaffinity/cpuset_setaffinity])\nAC_TRY_LINK([\n#include <sys/param.h>\n#include <sys/cpuset.h>\n],\n[\n\tint res;\n\tcpuset_t cpuset;\n\tCPU_ZERO(&cpuset);\n\tCPU_SET(1, &cpuset);\n\tres = cpuset_setaffinity(CPU_LEVEL_WHICH, CPU_WHICH_PID, -1, sizeof(cpuset_t), &cpuset);\n\tres = cpuset_getaffinity(CPU_LEVEL_WHICH, CPU_WHICH_PID, -1, sizeof(cpuset_t), &cpuset);\n\tres = CPU_ISSET(1, &cpuset);\n\tCPU_CLR(1, &cpuset);\n],\n\t\tcpuset_xetaffinity=yes,\n\t\tcpuset_xetaffinity=no)\nAC_MSG_RESULT([$cpuset_xetaffinity])\nif test $cpuset_xetaffinity = yes; then\n\tAC_DEFINE(HAVE_CPUSET_xETAFFINITY, 1, [Define if you have cpuset_getaffinity/cpuset_setaffinity])\nfi\n\nAC_CACHE_CHECK([for 'end' symbol],\n\t\terts_cv_have_end_symbol,\n\t\t[AC_TRY_LINK([],\n\t\t\t[extern char end; {char *x = &end; *x= 0;}],\n\t\t\terts_cv_have_end_symbol=yes,\n\t\t\terts_cv_have_end_symbol=no)])\nif test $erts_cv_have_end_symbol = yes; then\n\tAC_DEFINE(HAVE_END_SYMBOL, 1, [Define if you have the 'end' symbol])\nfi\n\nAC_CACHE_CHECK([for '_end' symbol],\n\t\terts_cv_have__end_symbol,\n\t\t[AC_TRY_LINK([],\n\t\t\t[extern char _end; {char *x = &_end; *x= 0;}],\n\t\t\terts_cv_have__end_symbol=yes,\n\t\t\terts_cv_have__end_symbol=no)])\nif test $erts_cv_have__end_symbol = yes; then\n\tAC_DEFINE(HAVE__END_SYMBOL, 1, [Define if you have the '_end' symbol])\nfi\n\nAC_CACHE_CHECK([if __after_morecore_hook can track malloc()s core memory use],\n\t\terts_cv___after_morecore_hook_can_track_malloc,\n\t\t[AC_TRY_RUN([\n#include <stdlib.h>\n#ifdef HAVE_MALLOC_H\n#  include <malloc.h>\n#endif\n#if defined(HAVE_END_SYMBOL)\nextern char end;\n#elif defined(HAVE__END_SYMBOL)\nextern char _end;\n#endif\n\n#ifdef ETHR_PTHREADS\n#  ifdef ETHR_HAVE_PTHREAD_H\n#    include <pthread.h>\n#  else\n#    ifdef ETHR_HAVE_MIT_PTHREAD_H\n#      include <pthread/mit/pthread.h>\n#    endif\n#  endif\n#  define N_THR 5\n#else\n#  define N_THR 1\n#endif\n\nstatic char *heap_start = NULL;\nstatic char *heap_end = NULL;\n\nvoid update_heap_size(void)\n{\n    heap_end = (char *) sbrk(0);\n}\n\nvoid init_hook(void)\n{\n#if defined(HAVE_END_SYMBOL)\n    heap_start = &end;\n#elif defined(HAVE__END_SYMBOL)\n    heap_start = &_end;\n#else\n    heap_start = sbrk(0);\n#endif\n    __after_morecore_hook = update_heap_size;\n}\n\nvoid (*__malloc_initialize_hook) (void) = init_hook;\n\nstatic int\ncheck_malloc(int size)\n{\n    char *p = (char *) malloc(size);\n    if (!heap_start || !heap_end) return 0;\n    if (!p) return 0;\n    if (p < heap_start || heap_end <= p) return 0;\n    if (p + size < heap_start || heap_end < p + size) return 0;\n    return 1;\n}\n\n#ifdef ETHR_PTHREADS\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\n#endif\n\nstatic void *\ndo_tests(void *vresp)\n{\n    int i, ok = 0;\n#ifdef ETHR_PTHREADS\n    if (pthread_mutex_lock(&mutex) != 0)\n\treturn NULL;\n#endif\n\n    for (i = 0; i < 10; i++)\n\tif (!check_malloc(1000))\n\t    goto failed;\n    for (i = 0; i < 100; i++)\n\tif (!check_malloc(1))\n\t    goto failed;\n    if (!check_malloc(1024*1024+1))\n\tgoto failed;\n    if (!check_malloc(10*1024*1024+1))\n\tgoto failed;\n    ok = 1;\n\n failed:\n#ifdef ETHR_PTHREADS\n    if (pthread_mutex_unlock(&mutex) != 0)\n\treturn NULL;\n#endif\n    if (ok)\n\t*((int *) vresp) = 0;\n    return NULL;\n}\n\n\nint main(void)\n{\n    int res[N_THR], i;\n#ifdef ETHR_PTHREADS\n    pthread_t tid[N_THR];\n#endif\n\n#if defined(HAVE_MALLOPT) && defined(M_MMAP_MAX)\n    (void) mallopt(M_MMAP_MAX, 0);\n#endif\n\n    for (i = 0; i < N_THR; i++)\n\tres[i] = 1;\n#ifdef ETHR_PTHREADS\n    for (i = 1; i < N_THR; i++)\n\tif (pthread_create(&tid[i], NULL, do_tests, &res[i]) != 0)\n\t    return 1;\n#endif\n    (void) do_tests(&res[0]);\n#ifdef ETHR_PTHREADS\n    for (i = 1; i < N_THR; i++)\n\tif (pthread_join(tid[i], NULL) != 0)\n\t    return 1;\n#endif\n    for (i = 0; i < N_THR; i++)\n\tif (res[i])\n\t    return 1;\n    return 0;\n}\n\t],\n\terts_cv___after_morecore_hook_can_track_malloc=yes,\n\terts_cv___after_morecore_hook_can_track_malloc=no,\n\t[\n\tcase X$erl_xcomp_after_morecore_hook in\n\t    X) erts_cv___after_morecore_hook_can_track_malloc=cross;;\n\t    Xyes|Xno) erts_cv___after_morecore_hook_can_track_malloc=$erl_xcomp_after_morecore_hook;;\n\t    *) AC_MSG_ERROR([Bad erl_xcomp_after_morecore_hook value: $erl_xcomp_after_morecore_hook]);;\n\tesac\n\t]\n\t)])\n\ncase $erts_cv___after_morecore_hook_can_track_malloc in\n\tyes) AC_DEFINE(ERTS___AFTER_MORECORE_HOOK_CAN_TRACK_MALLOC, 1, \\\n[Define if __after_morecore_hook can track malloc()s core memory use.]);;\n\tcross) AC_MSG_WARN([result no guessed because of cross compilation]);;\n\t*) ;;\nesac\n\nif test \"x$ac_cv_func_sbrk\" = \"xyes\"; then\n    AC_CACHE_CHECK([types of sbrk()s return value and argument],\n\t\t    erts_cv_sbrk_ret_arg_types,\n\t\t    [\n\n\terts_cv_sbrk_ret_arg_types=unknown\n\tret_types=\"void *,char *\"\n\targ_types=\"intptr_t,ptrdiff_t,int,long\"\n\tsave_ifs=\"$IFS\"; IFS=\",\"\n\tfor rtype in $ret_types; do\n\t    for atype in $arg_types; do\n\t\tIFS=$save_ifs\n\t\tAC_TRY_LINK([#include <sys/types.h>\n\t\t\t\t#include <unistd.h>],\n\t\t\t\t[$rtype sbrk($atype incr);],\n\t\t\t\t[erts_cv_sbrk_ret_arg_types=\"$rtype,$atype\"])\n\t\tIFS=\",\"\n\t\tif test \"$erts_cv_sbrk_ret_arg_types\" != \"unknown\"; then\n\t\t    break 2\n\t\tfi\n\t    done\n\tdone\n\tIFS=$save_ifs])\n    \n    if test \"$erts_cv_sbrk_ret_arg_types\" != \"unknown\"; then\n\tsave_ifs=\"$IFS\"; IFS=\",\"\n\tread ret_type arg_type <<EOF\n$erts_cv_sbrk_ret_arg_types\nEOF\n\tIFS=$save_ifs\n\tAC_DEFINE_UNQUOTED(SBRK_RET_TYPE, $ret_type, \\\n[Define the sbrk() return type.])\n\tAC_DEFINE_UNQUOTED(SBRK_ARG_TYPE, $arg_type, \\\n[Define the sbrk() argument type.])\n    fi\nfi\n\nif test $ac_cv_func_brk = yes; then\n    AC_CACHE_CHECK([types of brk()s return value and argument],\n\t\t    erts_cv_brk_ret_arg_types,\n\t\t    [\n\n\terts_cv_brk_ret_arg_types=unknown\n\tret_types=\"int,long,char *,void *\"\n\targ_types=\"void *,const void *,char *,const char *\"\n\tsave_ifs=\"$IFS\"; IFS=\",\"\n\tfor rtype in $ret_types; do\n\t    for atype in $arg_types; do\n\t\tIFS=$save_ifs\n\t\tAC_TRY_LINK([#include <sys/types.h>\n\t\t\t\t#include <unistd.h>],\n\t\t\t\t[$rtype brk($atype endds);],\n\t\t\t\t[erts_cv_brk_ret_arg_types=\"$rtype,$atype\"])\n\t\tIFS=\",\"\n\t\tif test \"$erts_cv_brk_ret_arg_types\" != \"unknown\"; then\n\t\t    break 2\n\t\tfi\n\t    done\n\tdone\n\tIFS=$save_ifs])\n    \n    if test \"$erts_cv_brk_ret_arg_types\" != \"unknown\"; then\n\tsave_ifs=\"$IFS\"; IFS=\",\"\n\tread ret_type arg_type <<EOF\n$erts_cv_brk_ret_arg_types\nEOF\n\tIFS=$save_ifs\n\tAC_DEFINE_UNQUOTED(BRK_RET_TYPE, $ret_type, \\\n[Define the brk() return type.])\n\tAC_DEFINE_UNQUOTED(BRK_ARG_TYPE, $arg_type, \\\n[Define the brk() argument type.])\n    fi\n\nfi\n\nif test $ac_cv_func_sbrk = yes; then\n\n    AC_CACHE_CHECK([if sbrk()/brk() wrappers can track malloc()s core memory use],\n\t\t    erts_cv_brk_wrappers_can_track_malloc,\n\t\t    [AC_TRY_RUN([\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n#ifdef HAVE_DLFCN_H\n#  include <dlfcn.h>\n#endif\n\n/*\n * Our implementation requires that we have sbrk(), and 'end' or '_end'.\n */\n\n#if !defined(HAVE_SBRK)\n#  error no sbrk()\n#endif\n#if defined(HAVE_END_SYMBOL)\nextern char end;\n#elif defined(HAVE__END_SYMBOL)\nextern char _end;\n#else\n#  error no 'end' nor '_end'\n#endif\n\n#ifdef ETHR_PTHREADS\n#  ifdef ETHR_HAVE_PTHREAD_H\n#    include <pthread.h>\n#  else\n#    ifdef ETHR_HAVE_MIT_PTHREAD_H\n#      include <pthread/mit/pthread.h>\n#    endif\n#  endif\n#  define N_THR 5\n#else\n#  define N_THR 1\n#endif\n\n#define SBRK_IMPL(RET_TYPE, SBRK, ARG_TYPE)\t\t\t\t\\\nRET_TYPE SBRK (ARG_TYPE);\t\t\t\t\t\t\\\nstatic RET_TYPE (*real_ ## SBRK)(ARG_TYPE) = NULL;\t\t\t\\\nRET_TYPE\t\t\t\t\t\t\t\t\\\nSBRK (ARG_TYPE arg)\t\t\t\t\t\t\t\\\n{\t\t\t\t\t\t\t\t\t\\\n    RET_TYPE res;\t\t\t\t\t\t\t\\\n    if (!real_ ## SBRK) real_ ## SBRK = dlsym(RTLD_NEXT, #SBRK);\t\\\n    res = (*real_ ## SBRK)(arg);\t\t\t\t\t\\\n    if (res != (RET_TYPE) -1) heap_end = (char *) (*real_ ## SBRK)(0);\t\\\n    return res;\t\t\t\t\t\t\t\t\\\n}\n\n#define BRK_IMPL(RET_TYPE, BRK, ARG_TYPE)\t\t\t\t\\\nRET_TYPE BRK (ARG_TYPE);\t\t\t\t\t\t\\\nstatic RET_TYPE (*real_ ## BRK)(ARG_TYPE) = NULL;\t\t\t\\\nRET_TYPE\t\t\t\t\t\t\t\t\\\nBRK (ARG_TYPE arg)\t\t\t\t\t\t\t\\\n{\t\t\t\t\t\t\t\t\t\\\n    RET_TYPE res;\t\t\t\t\t\t\t\\\n    if (!real_ ## BRK) real_ ## BRK = dlsym(RTLD_NEXT, #BRK);\t\t\\\n    res = (*real_ ## BRK)(arg);\t\t\t\t\t\t\\\n    if (res != (RET_TYPE) -1) heap_end = (char *) arg;\t\t\t\\\n    return res;\t\t\t\t\t\t\t\t\\\n}\n\nstatic char *heap_start = NULL;\nstatic char *heap_end = NULL;\n\nSBRK_IMPL(SBRK_RET_TYPE, sbrk, SBRK_ARG_TYPE)\n#ifdef HAVE_BRK\n   BRK_IMPL(BRK_RET_TYPE, brk, BRK_ARG_TYPE)\n#endif\n\n#ifdef HAVE__SBRK\n   SBRK_IMPL(SBRK_RET_TYPE, _sbrk, SBRK_ARG_TYPE)\n#endif\n#ifdef HAVE__BRK\n   BRK_IMPL(BRK_RET_TYPE, _brk, BRK_ARG_TYPE)\n#endif\n\n#ifdef HAVE___SBRK\n   SBRK_IMPL(SBRK_RET_TYPE, __sbrk, SBRK_ARG_TYPE)\n#endif\n#ifdef HAVE___BRK\n   BRK_IMPL(BRK_RET_TYPE, __brk, BRK_ARG_TYPE)\n#endif\n\nstatic int\ncheck_malloc(int size)\n{\n    char *p = (char *) malloc(size);\n    if (!heap_start || !heap_end) return 0;\n    if (!p) return 0;\n    if (p < heap_start || heap_end <= p) return 0;\n    if (p + size < heap_start || heap_end < p + size) return 0;\n    return 1;\n}\n\n#ifdef ETHR_PTHREADS\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\n#endif\n\nstatic void *\ndo_tests(void *vresp)\n{\n    int i, ok = 0;\n#ifdef ETHR_PTHREADS\n    if (pthread_mutex_lock(&mutex) != 0)\n\treturn NULL;\n#endif\n\n    for (i = 0; i < 10; i++)\n\tif (!check_malloc(1000))\n\t    goto failed;\n    for (i = 0; i < 100; i++)\n\tif (!check_malloc(1))\n\t    goto failed;\n    if (!check_malloc(1024*1024+1))\n\tgoto failed;\n    if (!check_malloc(10*1024*1024+1))\n\tgoto failed;\n    ok = 1;\n\n failed:\n#ifdef ETHR_PTHREADS\n    if (pthread_mutex_unlock(&mutex) != 0)\n\treturn NULL;\n#endif\n    if (ok)\n\t*((int *) vresp) = 0;\n    return NULL;\n}\n\n\nint main(void)\n{\n    int res[N_THR], i;\n#ifdef ETHR_PTHREADS\n    pthread_t tid[N_THR];\n#endif\n#if defined(HAVE_END_SYMBOL)\n    heap_start = &end;\n#elif defined(HAVE__END_SYMBOL)\n    heap_start = &_end;\n#endif\n\n#if defined(HAVE_MALLOPT) && defined(M_MMAP_MAX)\n    (void) mallopt(M_MMAP_MAX, 0);\n#endif\n\n    for (i = 0; i < N_THR; i++)\n\tres[i] = 1;\n#ifdef ETHR_PTHREADS\n    for (i = 1; i < N_THR; i++)\n\tif (pthread_create(&tid[i], NULL, do_tests, &res[i]) != 0)\n\t    return 1;\n#endif\n    (void) do_tests(&res[0]);\n#ifdef ETHR_PTHREADS\n    for (i = 1; i < N_THR; i++)\n\tif (pthread_join(tid[i], NULL) != 0)\n\t    return 1;\n#endif\n    for (i = 0; i < N_THR; i++)\n\tif (res[i])\n\t    return 1;\n    return 0;\n}\n\t],\n\t    erts_cv_brk_wrappers_can_track_malloc=yes,\n\t    erts_cv_brk_wrappers_can_track_malloc=no,\n\t    [\n\t    case X$erl_xcomp_dlsym_brk_wrappers in\n\t\tX) erts_cv_brk_wrappers_can_track_malloc=cross;;\n\t\tXyes|Xno) erts_cv_brk_wrappers_can_track_malloc=$erl_xcomp_dlsym_brk_wrappers;;\n\t\t*) AC_MSG_ERROR([Bad erl_xcomp_dlsym_brk_wrappers value: $erl_xcomp_dlsym_brk_wrappers]);;\n\t    esac\n\t    ])])\n\tcase $erts_cv_brk_wrappers_can_track_malloc in\n\t    yes)\n\t\tAC_DEFINE(ERTS_BRK_WRAPPERS_CAN_TRACK_MALLOC, 1, \\\n[Define if sbrk()/brk() wrappers can track malloc()s core memory use]);;\n\t    cross)\n\t\tAC_MSG_WARN([result no guessed because of cross compilation]);;\n\t    *) ;;\n\tesac\nfi\n\ndnl Restore LIBS\nLIBS=$saved_libs\ndnl restore CPPFLAGS\nCPPFLAGS=$saved_cppflags\n\ncase $ARCH in\n     x86|amd64)\n\tAC_DEFINE(ERTS_STRUCTURE_ALIGNED_ALLOC, 1, [Define if structure alignment is enough for allocators. If not defined, 64-bit alignment will be forced.]);;\n     *)\n\t;;\nesac\n\nLM_SYS_IPV6\nLM_SYS_MULTICAST\nERL_TIME_CORRECTION\nAC_CHECK_PROG(M4, m4, m4)\n\n\nif test X${enable_hipe} != Xno; then\n        dnl HiPE cannot run without mprotect()\n        if test X$ac_cv_func_mprotect != Xyes; then\n            if test X${enable_hipe} = Xyes; then\n\t        AC_MSG_ERROR([HiPE needs mprotect() on $ARCH])\n            else\n\t        enable_hipe=no\n\t        AC_MSG_WARN([Disable HiPE due to lack of mprotect()])\n            fi\n        fi\nfi\n\ndnl check to auto-enable hipe here...\nif test \"$cross_compiling\" != \"yes\" && test X${enable_hipe} != Xno; then\n  if test -z \"$M4\"; then\n\tenable_hipe=no\n   \tAC_MSG_NOTICE([HiPE disabled as no valid m4 is found in PATH])\n  else\n  \tcase \"$ARCH-$OPSYS\" in\n\t    x86-linux|amd64-linux|x86-darwin*|amd64-darwin*|ppc-linux|ppc64-linux|ppc-darwin|arm-linux|amd64-freebsd|x86-freebsd|x86-sol2|amd64-sol2|ultrasparc-linux)\n      \t\tenable_hipe=yes\n      \t\t;;\t\n  \tesac\n  fi\nfi\n\nif test X${enable_hipe} = Xyes; then\n   case $OPSYS in\n\tlinux)\n\t\tppcBEAMLDFLAGS=\"-Wl,-m,elf32ppc\"\n\t\tppc64BEAMLDFLAGS=\"-Wl,-m,elf64ppc,-T,hipe/elf64ppc.x\"\n\t\t;;\n\tdarwin)\n\t\tamd64BEAMLDFLAGS=\"-pagezero_size 0x10000000\"\n\t\t;;\n   esac\n   archVarName=\"${ARCH}BEAMLDFLAGS\"\n   eval HIPEBEAMLDFLAGS=\\$$archVarName\nfi\nAC_SUBST(HIPEBEAMLDFLAGS)\n\ndnl Permanently disable floating point exceptions.\ndnl On x86/amd64, floating points exceptions have\ndnl unresolved stability issues.\nAC_MSG_CHECKING([for unreliable floating point exceptions])\nFPE=unreliable\nAC_SUBST(FPE)\nAC_MSG_RESULT([unreliable])\nAC_DEFINE(NO_FPE_SIGNALS,[],[Define if floating points exceptions are non-existing/not reliable])\n\ndnl\ndnl Some operating systems allow you to redefine FD_SETSIZE to be able\ndnl to select on more than the default number of file descriptors.\ndnl We first discovered this in BSD/OS where the default is ridiculously\ndnl low (256). But since we use a lot of file descriptors we found the\ndnl need to go over the limit in other os's as well. Since FD_SETSIZE \ndnl must be defined before pulling in sys/types.h the actual number\ndnl of file descriptors is set in acconfig.h and will thus be in config.h\ndnl which *always* should be included first.\ndnl\n\nAC_MSG_CHECKING([whether to redefine FD_SETSIZE])\ncase $host_os in\n  bsdi*)\n\tAC_DEFINE(REDEFINE_FD_SETSIZE,[],[Define if you wish to redefine FD_SETSIZE to be able to select on more fd])\n\tAC_MSG_RESULT(yes)\n\t;;\n  *)\n\tAC_MSG_RESULT(no)\n\t;;\nesac\n\n\n\ndnl ----------------------------------------------------------------------\ndnl Tests related to configurable options given on command line\ndnl (using the --disable, --enable and --with switches).\ndnl ----------------------------------------------------------------------\n\n#\n# Check if we should enable HiPE.\n#\n\nHIPE_ENABLED=\nHIPE_HELPERS=\n\ndnl if not disabled, autoenable HiPE on known supported platforms\ndnl done up where floating point is checked, need to descide there already...\n\nif test X${enable_hipe} = Xyes; then\n  if test X$ac_cv_sizeof_void_p != X4 -a X$ARCH != Xamd64 -a X$ARCH != Xppc64; then\n\tAC_MSG_WARN([HiPE is not supported in 64-bit builds])\n  else\n     HIPE_ENABLED=yes\n     AC_DEFINE(HIPE,[1],[Define to enable HiPE])\n     HIPE_HELPERS=\"xmerl syntax_tools edoc\"\n     ENABLE_ALLOC_TYPE_VARS=\"$ENABLE_ALLOC_TYPE_VARS hipe\"\n     AC_MSG_NOTICE([Enable exec_alloc for hipe code allocation])\n     ENABLE_ALLOC_TYPE_VARS=\"$ENABLE_ALLOC_TYPE_VARS exec_alloc\"\n  fi\nfi\nAC_SUBST(HIPE_HELPERS)\nAC_SUBST(HIPE_ENABLED)\n\n#\n# Check if Erlang libraries should be compiled to native code.\n#\nNATIVE_LIBS_ENABLED=\nif test X${enable_native_libs} = Xyes -a X${HIPE_ENABLED} = Xyes; then\n  NATIVE_LIBS_ENABLED=yes\nfi\nAC_SUBST(NATIVE_LIBS_ENABLED)\n\n#\n# Check for working poll().\n#\nAC_MSG_CHECKING([for working poll()])\nif test \"x$ac_cv_header_poll_h\" != \"xyes\" -o \"x$ac_cv_func_poll\" != \"xyes\"; then\n\npoll_works=no\n\nelse\n\nAC_TRY_RUN([\n#include <poll.h>\nmain()\n{\n#ifdef _POLL_EMUL_H_\n  exit(1); /* Implemented using select() -- fail */\n#else\n  struct pollfd fds[1];\n  int fd;\n  fd = open(\"/dev/null\", 1);\n  fds[0].fd = fd;\n  fds[0].events = POLLIN;\n  fds[0].revents = 0;\n  if (poll(fds, 1, 0) < 0 || (fds[0].revents & POLLNVAL) != 0) {\n    exit(1);  /* Does not work for devices -- fail */\n  }\n  exit(0);\n#endif\n}\n],\npoll_works=yes,\npoll_works=no,\n[\ncase X$erl_xcomp_poll in\n    X) poll_works=cross;;\n    Xyes|Xno) poll_works=$erl_xcomp_poll;;\n    *) AC_MSG_ERROR([Bad erl_xcomp_poll value: $erl_xcomp_poll]);;\nesac\n])\n\nfi\n\ncase $poll_works-$host_os in\n    no-*|cross-darwin*)\n\t#\n\t# The USE_SELECT define is used by the ssl application (should not\n\t# be used by erts).\n\t#\n\tAC_DEFINE(USE_SELECT, 1, [Define if select() should be used instead of poll()])\n\tif test $poll_works = cross; then\n\t    AC_MSG_RESULT(cross)\n\t    AC_MSG_WARN([result no guessed based on OS ($host_os) because of cross compilation])\n\telse\n\t    AC_MSG_RESULT([no; non-existing, broken, or based on select()])\n        fi\n\tpoll_works=no;;\n    yes-*|cross-*)\n\tAC_DEFINE(ERTS_USE_POLL, 1, [Define if poll() should be used instead of select()])\n\tif test $poll_works = cross; then\n\t    AC_MSG_RESULT(cross)\n\t    AC_MSG_WARN([result yes guessed based on OS ($host_os) because of cross compilation])\n\telse\n\t    AC_MSG_RESULT(yes)\n        fi\n\tpoll_works=yes;;\nesac\n\n#\n# If kqueue() found\n#\nif test $have_kernel_poll = kqueue; then\n## Some OS X kernel version seems to have bugs in them with regards to kqueue\n## Disable kernel poll on those versions\n   AC_MSG_CHECKING([whether host os has known kqueue bugs])\n   case $host_os in\n     # Any OS X version < 16 has known problems with using kqueue\n     # so we don't use it there. See erl_poll.c for details.\n     darwin[[0-9]].*|darwin1[[0-5]].*)\n        AC_MSG_RESULT([yes, disabling kernel poll])\n        have_kernel_poll=no\n        ;;\n     *)\n        AC_MSG_RESULT([no])\n        ;;\n   esac\nfi\n#\n# If epoll() found, check that it is level triggered.\n#\nif test $have_kernel_poll = epoll; then\n\tAC_MSG_CHECKING([whether epoll is level triggered])\n\tAC_TRY_LINK([#include <sys/epoll.h>],[\n\t\t\t#ifdef EPOLLET\n\t\t\t/* Edge triggered option exist, assume level triggered\n\t\t\t   is default */\n\t\t\t;\n\t\t\t#else\n\t\t\t/* No edge triggered option exist; assume edge\n\t\t\t   triggered only */\n\t\t\t#error No EPOLLET\n\t\t\t#endif\n\t\t\t],\n\t\t\tlevel_triggered_epoll=yes,\n\t\t\t[level_triggered_epoll=no\n\t\t\t have_kernel_poll=no])\n\tAC_MSG_RESULT([$level_triggered_epoll])\nfi\n#\n# Check if we should enable kernel poll support\n#\nAC_MSG_CHECKING(whether kernel poll support should be enabled)\nERTS_ENABLE_KERNEL_POLL=no\nERTS_BUILD_FALLBACK_POLL=no\ncase $enable_kernel_poll-$have_kernel_poll in\n    no-*)\n\tAC_MSG_RESULT(no; disabled by user);;\n    yes-no)\n\tAC_MSG_ERROR(no; kernel poll support requested but not found);;\n    *-no)\n\tAC_MSG_RESULT(no);;\n    *)\n\tcase $have_kernel_poll in\n\t    epoll)\n\t\tAC_DEFINE(HAVE_SYS_EPOLL_H, 1, [Define if you have the <sys/epoll.h> header file.])\n                ERTS_BUILD_FALLBACK_POLL=yes\n                ;;\n\t    /dev/poll)\n\t\tAC_DEFINE(HAVE_SYS_DEVPOLL_H, 1, [Define if you have <sys/devpoll.h> header file.])\n                ;;\n\t    kqueue)\n\t\tAC_DEFINE(HAVE_SYS_EVENT_H, 1, [Define if you have <sys/event.h> header file.])\n                ERTS_BUILD_FALLBACK_POLL=yes\n                ;;\n\t    *)\n\t\tAC_MSG_ERROR(configure.in need to be updated);;\n\tesac\n\tERTS_ENABLE_KERNEL_POLL=yes\n\tAC_DEFINE(ERTS_ENABLE_KERNEL_POLL, 1, [Define if you have kernel poll and want to use it])\n\tAC_MSG_RESULT([yes; $have_kernel_poll]);;\nesac\nAC_SUBST(ERTS_BUILD_FALLBACK_POLL)\n\nAC_MSG_CHECKING([whether putenv() stores a copy of the key-value pair])\nAC_TRY_RUN([\n#include <stdlib.h>\nint main(void) {\n    int i;\n    char *env;\n    char buf[10];\n    for (i = 0; i < 7; i++)\n\tbuf[i] = 'X';\n    buf[i] = '\\0';\n    buf[3] = '=';\n    if (putenv(buf) != 0)\n\treturn 1;\n    for (i = 4; i < 7; i++)\n\tbuf[i] = 'Y';\n    env = getenv(\"XXX\");\n    if (!env)\n\treturn 2;\n    for (i = 0; i < 3; i++)\n\tif (env[i] != 'X')\n\t    return 3;\n    for (i = 0; i < 3; i++)\n\tbuf[i] = 'Y';\n    env = getenv(\"XXX\");\n    if (!env)\n\treturn 4;\n    for (i = 0; i < 3; i++)\n\tif (env[i] != 'X')\n\t    return 5;\n    return 0;\n}\n],\ncopying_putenv=yes,\ncopying_putenv=no,\n[\ncase X$erl_xcomp_putenv_copy in\n    X) copying_putenv=cross;;\n    Xyes|Xno) copying_putenv=$erl_xcomp_putenv_copy;;\n    *) AC_MSG_ERROR([Bad erl_xcomp_putenv_copy value: $erl_xcomp_putenv_copy]);;\nesac\n])\n\nAC_MSG_RESULT($copying_putenv)\ncase $copying_putenv in\n    yes)\n\tAC_DEFINE(HAVE_COPYING_PUTENV,[1],\\\n[Define if you have a putenv() that stores a copy of the key-value pair]);;\n    cross)\n\tAC_MSG_WARN([result no guessed because of cross compilation]);;\n    *) ;;\nesac\n\ndnl ----------------------------------------------------------------------\ndnl Stuff that should be moved into their respective application\ndnl ----------------------------------------------------------------------\n\ndnl crypto\n#--------------------------------------------------------------------\n# Dynamic Erlang Drivers\n#\n# Linking to produce dynamic Erlang drivers to be loaded by Erlang's\n# Dynamic Driver Loader and Linker (DDLL). Below the prefix DED is an\n# abbreviation for `Dynamic Erlang Driver'.\n#\n# For DED we need something quite sloppy, which allows undefined references \n# (notably driver functions) in the resulting shared library. \n# Example of Makefile rule (and settings of macros):\n#\n# LIBS = @LIBS@\n# LD = @DED_LD@\n# LDFLAGS = @DED_LDFLAGS@\n# soname = @ldsoname@\n#\n# my_drv.so:   my_drv.o my_utils.o\n#              $(LD) $(LDFLAGS) $(soname) $@ -o $@ $^ -lc $(LIBS)\n#\n#--------------------------------------------------------------------\n\nDED_SYS_INCLUDE=\"-I${ERL_TOP}/erts/emulator/beam -I${ERL_TOP}/erts/include -I${ERL_TOP}/erts/include/$host -I${ERL_TOP}/erts/include/internal -I${ERL_TOP}/erts/include/internal/$host -I${ERL_TOP}/erts/emulator/sys/$ERLANG_OSTYPE -I${ERL_TOP}/erts/emulator/sys/common\"\n\nif test \"X$ETHR_DEFS\" = \"X\"; then\n    DED_THR_DEFS=\"-D_THREAD_SAFE -D_REENTRANT\"\nelse\n    DED_THR_DEFS=\"$ETHR_DEFS\"\nfi\nDED_EMU_THR_DEFS=$EMU_THR_DEFS\nDED_CFLAGS=\"$CFLAGS $CPPFLAGS\"\nif test \"x$GCC\" = xyes; then\n    DED_STATIC_CFLAGS=\"$DED_CFLAGS\"\n    DED_CFLAGS=\"$DED_CFLAGS -fPIC\"\nfi\n\nDED_EXT=so\ncase $host_os in\n    win32) DED_EXT=dll;;\n    darwin*)\n\tDED_CFLAGS=\"$DED_CFLAGS -fno-common\"\n\tDED_STATIC_CFLAGS=\"$DED_STATIC_CFLAGS -fno-common\";;\n    *)\n\t;;\nesac\n\nDED_STATIC_CFLAGS=\"$DED_STATIC_CFLAGS -DSTATIC_ERLANG_NIF -DSTATIC_ERLANG_DRIVER\"\n\n# If DED_LD is set in environment, we expect all DED_LD* variables\n# to be specified (cross compiling)\nif test \"x$DED_LD\" = \"x\"; then\n\nDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"-R\"\ncase $host_os in\n\twin32)\n\t\tDED_LD=\"ld.sh\"\n\t\tDED_LDFLAGS=\"-dll\"\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\n\t;;\n\tsolaris2*|sysv4*)\n\t\tDED_LDFLAGS=\"-G\"\n\t\tif test X${enable_m64_build} = Xyes; then\n\t\t\tDED_LDFLAGS=\"-64 $DED_LDFLAGS\"\n\t\tfi\n\t;;\n\taix4*)\n\t\tDED_LDFLAGS=\"-G -bnoentry -bexpall\"\n\t;;\n\tfreebsd2*)\n\t\t# Non-ELF GNU linker\n\t\tDED_LDFLAGS=\"-Bshareable\"\n\t;;\n\tdarwin*)\n\t\t# Mach-O linker: a shared lib and a loadable\n\t\t# object file is not the same thing.\n\t\tDED_LDFLAGS=\"-bundle -bundle_loader ${ERL_TOP}/bin/$host/beam.smp\"\n\t\tcase $ARCH in\n\t\t\tamd64)\n\t\t\t\tDED_LDFLAGS=\"-m64 $DED_LDFLAGS\"\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\t;;\n\t\tesac\n\t\tDED_LD=\"$CC\"\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\n\t;;\n\tlinux*)\n\t\tDED_LD=\"$CC\"\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\n\t\tDED_LDFLAGS=\"-shared -Wl,-Bsymbolic\"\n\t\tif test X${enable_m64_build} = Xyes; then\n\t\t\tDED_LDFLAGS=\"-m64 $DED_LDFLAGS\"\n\t\tfi;\n\t\tif test X${enable_m32_build} = Xyes; then\n\t\t\tDED_LDFLAGS=\"-m32 $DED_LDFLAGS\"\n\t\tfi\n\t;;\t\n\tfreebsd*)\n\t\tDED_LD=\"$CC\"\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\n\t\tDED_LDFLAGS=\"-shared\"\n\t\tif test X${enable_m64_build} = Xyes; then\n\t\t\tDED_LDFLAGS=\"-m64 $DED_LDFLAGS\"\n\t\tfi;\n\t\tif test X${enable_m32_build} = Xyes; then\n\t\t\tDED_LDFLAGS=\"-m32 $DED_LDFLAGS\"\n\t\tfi\n\t;;\t\n\topenbsd*)\n\t\tDED_LD=\"$CC\"\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\n\t\tDED_LDFLAGS=\"-shared\"\n\t;;\n\tosf*)\n\t\t# NOTE! Whitespace after -rpath is important.\n\t\tDED_LD_FLAG_RUNTIME_LIBRARY_PATH=\"-rpath \"\n\t\tDED_LDFLAGS=\"-shared -expect_unresolved '*'\"\n\t;;\n\t*)\n\t\t# assume GNU linker and ELF\n\t\tDED_LDFLAGS=\"-shared\"\n\t\t# GNU linker has no option for 64bit build, should not propagate -m64\n\t;;\nesac\n\nif test \"$DED_LD\" = \"\" && test \"$USER_LD\" != \"\"; then\n    DED_LD=\"$USER_LD\"\n    DED_LDFLAGS=\"$USER_LDFLAGS $DED_LDFLAGS\"\nfi\n\nfi # \"x$DED_LD\" = \"x\"\n\nAC_CHECK_TOOL(DED_LD, ld, false)\ntest \"$DED_LD\" != \"false\" || AC_MSG_ERROR([No linker found])\n\nAC_MSG_CHECKING(for compiler flags for loadable drivers)\nAC_MSG_RESULT([$DED_CFLAGS])\nAC_MSG_CHECKING(for linker for loadable drivers)\nAC_MSG_RESULT([$DED_LD])\nAC_MSG_CHECKING(for linker flags for loadable drivers)\nAC_MSG_RESULT([$DED_LDFLAGS])\nAC_MSG_CHECKING(for 'runtime library path' linker flag)\nif test \"x$DED_LD_FLAG_RUNTIME_LIBRARY_PATH\" != \"x\"; then\n\tAC_MSG_RESULT([$DED_LD_FLAG_RUNTIME_LIBRARY_PATH])\nelse\n\tAC_MSG_RESULT([not found])\nfi\n\nAC_SUBST(DED_EXT)\nAC_SUBST(DED_SYS_INCLUDE)\nAC_SUBST(DED_CFLAGS)\nAC_SUBST(DED_STATIC_CFLAGS)\nAC_SUBST(DED_LD)\nAC_SUBST(DED_LDFLAGS)\nAC_SUBST(DED_LD_FLAG_RUNTIME_LIBRARY_PATH)\nAC_SUBST(DED_THR_DEFS)\nAC_SUBST(DED_EMU_THR_DEFS)\nAC_SUBST(STATIC_CFLAGS)\n\ndnl\ndnl We should look for a compiler that handles jump tables, for beam_emu \ndnl to be optimized\ndnl\n\nLM_FIND_EMU_CC\n\ndnl\ndnl Test whether code pointers are always short (32 bits).\ndnl\n\nAC_MSG_CHECKING([whether the code model is small])\nsaved_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS $HIPEBEAMLDFLAGS\"\nAC_TRY_RUN([\n   #include <stdlib.h>\n   int main() {\n    if ((unsigned long long)&main < (1ull << 32)) {\n       exit(0);\n    }\n    exit(1);\n   }\n],\nerl_code_model_small=yes,\nerl_code_model_small=no,\n[case X$erl_xcomp_code_model_small in\n      X) erl_code_model_small=no;;\n      Xyes|Xno) erl_code_model_small=$erl_xcomp_code_model_small;;\n      *) AC_MSG_ERROR([Bad erl_xcomp_code_model_small value: $erl_xcomp_code_model_small]);;\n esac])\nAC_MSG_RESULT([$erl_code_model_small])\nLDFLAGS=\"$saved_LDFLAGS\"\ncase $erl_code_model_small in\n     yes)\n        AC_DEFINE(CODE_MODEL_SMALL,[1],\n\t[Define if the code model is small (code fits below 2Gb)])\n\tCODE_MODEL=small\n\t;;\n     no)\n\tCODE_MODEL=unknown\n        ;;\nesac\nAC_SUBST(CODE_MODEL)\n\ndnl\ndnl DTrace & LTTNG\ndnl\ncase $DYNAMIC_TRACE_FRAMEWORK in\n     dtrace|systemtap)\n        AC_CHECK_TOOL(DTRACE, dtrace, none)\n        test \"$DTRACE\" = \"none\" && AC_MSG_ERROR([No dtrace utility found.]);\n        enable_lttng_test=no\n\tenable_dtrace_test=yes;;\n     lttng)\n        enable_lttng_test=yes\n        enable_dtrace_test=no;;\n     *)\n        enable_lttng_test=no\n        enable_dtrace_test=no;;\nesac        \n\t\t     \nAC_SUBST(DTRACE)\n\nAC_SUBST(DTRACE_CPP)\nAC_SUBST(DTRACE_ENABLED)\nAC_SUBST(DTRACE_ENABLED_2STEP)\nDTRACE_CPP=-C\nDTRACE_ENABLED=\nDTRACE_ENABLED_2STEP=\nDTRACE_2STEP_TEST=./dtrace-test.o\nDTRACE_BITS_FLAG=\ncase $OPSYS in\n    freebsd)\n\tif test \"$BITS64\" = \"yes\" ; then\n\t\tDTRACE_BITS_FLAG=-64\n\telse\n\t\tDTRACE_BITS_FLAG=-32\n\tfi\n    ;;\n    *)\n\t: # Nothing to do\n    ;;\nesac\nif test \"$enable_dtrace_test\" = \"yes\" ; then\n        if test \"$DTRACE\" = \"dtrace\" ; then\n                AC_CHECK_HEADERS(sys/sdt.h)\n\t\tAC_MSG_CHECKING([for 1-stage DTrace precompilation])\n                # The OS X version of dtrace prints a spurious line here.\n                if ! dtrace -h $DTRACE_CPP -Iemulator/beam -o ./foo-dtrace.h -s emulator/beam/erlang_dtrace.d; then\n                        AC_MSG_ERROR([Could not precompile erlang_dtrace.d: dtrace -h failed])\n                fi\n\t\tAC_MSG_RESULT([yes])\n\n\t\tAC_MSG_CHECKING([for 2-stage DTrace precompilation])\n                AC_TRY_COMPILE([ #include \"foo-dtrace.h\" ],\n                    [ERLANG_DIST_PORT_BUSY_ENABLED();],\n\t\t    [$RM -f $DTRACE_2STEP_TEST\n\t\t     dtrace -G $DTRACE_CPP $DTRACE_BITS_FLAG -Iemulator/beam -o $DTRACE_2STEP_TEST -s emulator/beam/erlang_dtrace.d conftest.$OBJEXT 2>&AS_MESSAGE_LOG_FD\n                     if test -f $DTRACE_2STEP_TEST; then\n\t\t\t$RM $DTRACE_2STEP_TEST\n                        DTRACE_ENABLED_2STEP=yes\n\t\t     fi],\n                    [])\n\t\t$RM -f foo-dtrace.h\n\t\tAS_IF([test \"x$DTRACE_ENABLED_2STEP\" = \"xyes\"],\n\t\t      [AC_MSG_RESULT([yes])],\n                      [AC_MSG_RESULT([no])])\n\n                DTRACE_ENABLED=yes\n                case $OPSYS in\n                    linux)\n                        : # No extra libs to add to LIBS\n                    ;;\n                    freebsd)\n                        LIBS=\"$LIBS -lelf\"\n                    ;;\n                    *)\n                        LIBS=\"$LIBS -ldtrace\"\n                    ;;\n                esac\n        else\n                AC_MSG_ERROR([Dtrace preprocessing test failed.])\n        fi\nfi\n\nif test \"$enable_lttng_test\" = \"yes\" ; then\n    AC_CHECK_HEADERS(lttng/tracepoint.h)\n    AC_CHECK_HEADERS(lttng/tracepoint-event.h)\n    dnl The macro tracepoint_enabled is not present in older lttng versions\n    dnl checking for tracepoint_enabled\n    AC_MSG_CHECKING([for tracepoint_enabled in lttng/tracepoint.h])\n    AC_COMPILE_IFELSE(\n        [AC_LANG_PROGRAM(\n            [#include <lttng/tracepoint.h>\n             #define TRACEPOINT_PROVIDER org_erlang_otp\n             TRACEPOINT_EVENT(\n                 org_erlang_otp,\n                 dummy,\n                 TP_ARGS(int, my_int),\n                 TP_FIELDS(ctf_integer(int, my_int, my_int)))\n             #define TRACEPOINT_CREATE_PROBES\n             #define TRACEPOINT_DEFINE],\n            [if(tracepoint_enabled(org_erlang_otp,dummy)) do {} while(0)])],\n        [AC_MSG_RESULT([yes])],\n        [AC_MSG_ERROR([no (available in lttng-ust v2.7)])])\n    if test \"x$ac_cv_header_lttng_tracepoint_h\" = \"xyes\" \\\n        -a \"x$ac_cv_header_lttng_tracepoint_event_h\" = \"xyes\"; then\n        # No straight forward way to test for liblttng-ust when no public symbol exists,\n        # just add the lib.\n        LIBS=\"$LIBS -llttng-ust -ldl\"\n    else\n        AC_MSG_ERROR([No LTTng support found.])\n    fi\nfi\n\n\ndnl\ndnl SSL, SSH and CRYPTO need the OpenSSL libraries\ndnl\ndnl Check flags --with-ssl, --without-ssl --with-ssl=PATH.\ndnl If no option is given or --with-ssl is set without a path then we\ndnl search for OpenSSL libraries and header files in the standard locations. \ndnl If set to --without-ssl we disable the use of SSL, SSH and CRYPTO.\ndnl If set to --with-ssl=PATH we use that path as the prefix, i.e. we\ndnl use \"PATH/include\" and \"PATH/lib\".\n\nAC_SUBST(SSL_INCLUDE)\nAC_SUBST(SSL_INCDIR)\nAC_SUBST(SSL_LIBDIR)\nAC_SUBST(SSL_FLAGS)\nAC_SUBST(SSL_CRYPTO_LIBNAME)\nAC_SUBST(SSL_SSL_LIBNAME)\nAC_SUBST(SSL_CC_RUNTIME_LIBRARY_PATH)\nAC_SUBST(SSL_LD_RUNTIME_LIBRARY_PATH)\nAC_SUBST(SSL_DED_LD_RUNTIME_LIBRARY_PATH)\nAC_SUBST(SSL_DYNAMIC_ONLY)\nAC_SUBST(SSL_LINK_WITH_KERBEROS)\nAC_SUBST(STATIC_KERBEROS_LIBS)\nAC_SUBST(SSL_LINK_WITH_ZLIB)\nAC_SUBST(STATIC_ZLIB_LIBS)\n\nstd_ssl_locations=\"/usr/local /usr/sfw /usr /opt/local /usr/pkg /usr/local/openssl /usr/lib/openssl /usr/openssl /usr/local/ssl /usr/lib/ssl /usr/ssl /\"\n\nAC_ARG_WITH(ssl-zlib,\nAS_HELP_STRING([--with-ssl-zlib=PATH],\n               [specify location of ZLib to be used by OpenSSL])\nAS_HELP_STRING([--with-ssl-zlib],\n               [link SSL with  Zlib (default if found)])\nAS_HELP_STRING([--without-ssl-zlib],\n               [don't link SSL with ZLib]))\n\n\nif  test \"x$with_ssl_zlib\" = \"xno\"; then\n\tSSL_LINK_WITH_ZLIB=no\n\tSTATIC_ZLIB_LIBS=\nelif test \"x$with_ssl_zlib\" = \"xyes\" || test \"x$with_ssl_zlib\" = \"x\"; then\n\tif test $erl_xcomp_without_sysroot = yes; then\n\t\tAC_MSG_WARN([Cannot search for zlib; missing cross system root (erl_xcomp_sysroot).])\n\t\tSSL_LINK_WITH_ZLIB=no\t\n\t\tSTATIC_ZLIB_LIBS=\t\n\telif  test \"x$MIXED_CYGWIN\" = \"xyes\" -o \"x$MIXED_MSYS\" = \"xyes\"; then\n\t\tSSL_LINK_WITH_ZLIB=no\t\n\t\tSTATIC_ZLIB_LIBS=\t\n\telse\n\t\tSSL_LINK_WITH_ZLIB=no\n\t\tSTATIC_ZLIB_LIBS=\n\t\tAC_MSG_CHECKING(for static ZLib to be used by SSL in standard locations) \n\t\tfor rdir in $std_ssl_locations; do\n\t\t\tdir=\"$erl_xcomp_sysroot$rdir\"\n\t\t\tif test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then\n\t\t\t\tif test -f \"$dir/lib64/libz.a\"; then\n\t\t\t\t\tSSL_LINK_WITH_ZLIB=yes\n\t\t\t\t\tSTATIC_ZLIB_LIBS=\"$dir/lib64/libz.a\"\n\t\t\t\t\tbreak\n\t\t\t\telif test -f \"$dir/lib/64/libz.a\"; then\n\t\t\t\t\tSSL_LINK_WITH_ZLIB=yes\n\t\t\t\t\tSTATIC_ZLIB_LIBS=\"$dir/lib/64/libz.a\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tif test -f \"$dir/lib/libz.a\"; then\n\t\t\t\t\tSSL_LINK_WITH_ZLIB=yes\n\t\t\t\tSTATIC_ZLIB_LIBS=\"$dir/lib/libz.a\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif test \"x$SSL_LINK_WITH_ZLIB\" = \"xno\"; then\n\t\t       \tAC_MSG_RESULT([no])\n\t\telse\n\t\t\tAC_MSG_RESULT([$STATIC_ZLIB_LIBS])\n\t\tfi\n\tfi\t\t\t\t\nelse\n\tSSL_LINK_WITH_ZLIB=no\n\tSTATIC_ZLIB_LIBS=\n\tif test -f \"$with_ssl_zlib/libz.a\"; then\n\t\tSSL_LINK_WITH_ZLIB=yes\n\t\tSTATIC_ZLIB_LIBS=$with_ssl_zlib/libz.a\n\telif test -f \"$with_ssl_zlib/lib/libz.a\"; then\n\t\tSSL_LINK_WITH_ZLIB=yes\n\t\tSTATIC_ZLIB_LIBS=$with_ssl_zlib/lib/libz.a\n\tfi\n\tif test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then\n\t\tif test -f \"$with_ssl_zlib/lib64/libz.a\"; then\n\t\t\tSSL_LINK_WITH_ZLIB=yes\n\t\t\tSTATIC_ZLIB_LIBS=$with_ssl_zlib/lib64/libz.a\n\t\telif test -f \"$with_ssl_zlib/lib/64/libz.a\"; then\n\t\t\tSSL_LINK_WITH_ZLIB=yes\n\t\t\tSTATIC_ZLIB_LIBS=$with_ssl_zlib/lib/64/libz.a\n\t\tfi\n\tfi\n\tif test \"x$SSL_LINK_WITH_ZLIB\" = \"xno\"; then\n\t       \tAC_MSG_ERROR(Invalid path to option --with-ssl-zlib=PATH)\n\tfi\nfi\n\t\t\n\t\t\t\nAC_ARG_WITH(ssl,\nAS_HELP_STRING([--with-ssl=PATH], [specify location of OpenSSL include and lib])\nAS_HELP_STRING([--with-ssl], [use SSL (default)])\nAS_HELP_STRING([--without-ssl], [don't use SSL]))\n\nAC_ARG_WITH(ssl-incl,\nAS_HELP_STRING([--with-ssl-incl=PATH], [location of OpenSSL include dir, if different than specified by --with-ssl=PATH]),\n[\ncase X$with_ssl in\n    X | Xyes | Xno) AC_MSG_ERROR([--with-ssl-incl=PATH set without --with-ssl=PATH]);;\nesac\n],\n[with_ssl_incl=$with_ssl]) #default\n\nAC_ARG_WITH(ssl-rpath,\nAS_HELP_STRING([--with-ssl-rpath=yes|no|PATHS],\n               [runtime library path for OpenSSL. Default is \"yes\", which equates to a\n\t       number of standard locations. If \"no\", then no runtime\n\t       library paths will be used. Anything else should be a\n\t       comma separated list of paths.]),\n[\ncase X$with_ssl in\n    Xno) AC_MSG_ERROR([--with-ssl-rpath set without --with-ssl]);;\nesac\n],\n[with_ssl_rpath=yes]) #default\n\n\nAC_ARG_ENABLE(dynamic-ssl-lib,\nAS_HELP_STRING([--disable-dynamic-ssl-lib],\n               [disable using dynamic openssl libraries]),\n[ case \"$enableval\" in\n    no) enable_dynamic_ssl=no ;;\n    *)  enable_dynamic_ssl=yes ;;\n  esac ], enable_dynamic_ssl=yes)\n\n#----------------------------------------------------------------------\n# We actually might do the SSL tests twice due to late discovery of \n# kerberos problems with static linking, in case we redo it all trying\n# dynamic SSL libraries instead.\n#----------------------------------------------------------------------\n\nssl_done=no\n\nwhile test \"x$ssl_done\" != \"xyes\"; do\n\nssl_done=yes # Default only one run\n\n# Remove all SKIP files from previous runs\nfor a in ssl crypto ssh; do\n  $RM -f $ERL_TOP/lib/$a/SKIP\ndone\n\nSSL_DYNAMIC_ONLY=$enable_dynamic_ssl\nSSL_STATIC_ONLY=no\n\ncase \"$erl_xcomp_without_sysroot-$with_ssl\" in\n  yes-* | no-no)\n    SSL_APP=\n    CRYPTO_APP=\n    SSH_APP=\n    if test \"$with_ssl\" = \"no\"; then\n\tskip=\"User gave --without-ssl option\"\n    else\n\tskip=\"Cannot search for ssl; missing cross system root (erl_xcomp_sysroot).\"\n    fi\n    for a in ssl crypto ssh; do\n        echo \"$skip\" > $ERL_TOP/lib/$a/SKIP\n    done\n    ;;\n  no-yes | no- )\n    # On windows, we could try to find the installation\n    # of Shining Light OpenSSL, which can be found by poking in\n    # the uninstall section in the registry, it's worth a try...\n    extra_dir=\"\"\n    if  test \"x$MIXED_CYGWIN\" = \"xyes\"; then\n    \tAC_CHECK_PROG(REGTOOL, regtool, regtool, false)\n\tif test \"$ac_cv_prog_REGTOOL\" != false; then\n\t\twrp=\"/machine/software/microsoft/windows/currentversion/\"\n\t   \tif test \"x$ARCH\" = \"xamd64\"; then\n\t\t   urp=\"uninstall/openssl (64-bit)_is1/inno setup: app path\"\n\t\t   regtool_subsystem=-w\n\t\telse\n\t\t   urp=\"uninstall/openssl (32-bit)_is1/inno setup: app path\"\n\t\t   regtool_subsystem=-W\n\t\tfi\t\n\t\trp=\"$wrp$urp\"\n\t\tif regtool -q $regtool_subsystem get \"$rp\" > /dev/null; then\n\t\t   true\n\t\telse\n\t\t   # Fallback to unspecified wordlength\n\t\t   urp=\"uninstall/openssl_is1/inno setup: app path\"\n\t\t   rp=\"$wrp$urp\"\n\t\tfi\t\n\t\tif regtool -q $regtool_subsystem get \"$rp\" > /dev/null; then\n\t\t\tssl_install_dir=`regtool -q $regtool_subsystem get \"$rp\"`\n\t\t\t# Try hard to get rid of spaces...\n\t\t\tif cygpath -d \"$ssl_install_dir\" > /dev/null 2>&1; then\n\t\t\t\tssl_install_dir=`cygpath -d \"$ssl_install_dir\"`\n\t\t\tfi\n\t\t\textra_dir=`cygpath $ssl_install_dir`\n\t\tfi\n\tfi\n    elif test \"x$MIXED_MSYS\" = \"xyes\"; then\n    \tAC_CHECK_PROG(REGTOOL, reg_query.sh, reg_query.sh, false)\n\tif test \"$ac_cv_prog_REGTOOL\" != false; then\n\t   \tif test \"x$ARCH\" = \"xamd64\"; then\n\t\t   rp=\"HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Uninstall/OpenSSL (64-bit)_is1\"\n\t\telse\n\t\t   rp=\"HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Uninstall/OpenSSL_is1\"\n\t\tfi\t\n\t\tkey=\"Inno Setup: App Path\"\n\t\tif \"$ac_cv_prog_REGTOOL\" \"$rp\" \"$key\" > /dev/null; then\n\t\t\tssl_install_dir=`\"$ac_cv_prog_REGTOOL\" \"$rp\" \"$key\"`\n\t\t\textra_dir=`win2msys_path.sh \"$ssl_install_dir\"`\n\t\tfi\n\tfi\n    fi\n    # We search for OpenSSL in the common OS standard locations.\n    SSL_APP=ssl\n    CRYPTO_APP=crypto\n    SSH_APP=ssh\n\n    SSL_CRYPTO_LIBNAME=crypto\n    SSL_SSL_LIBNAME=ssl\n    \n    if  test \"x$MIXED_CYGWIN\" = \"xyes\" -o \"x$MIXED_MSYS\" = \"xyes\"; then\n    \tif test \"x$ARCH\" = \"xamd64\"; then\n\t  std_win_ssl_locations=\"/cygdrive/c/OpenSSL-Win64 /c/OpenSSL-Win64 /opt/local64/pgm/OpenSSL\"\n\telse\n\t  std_win_ssl_locations=\"/cygdrive/c/OpenSSL-Win32 /c/OpenSSL-Win32 /cygdrive/c/OpenSSL /c/OpenSSL /opt/local/pgm/OpenSSL\"\n\tfi\n    else\n        std_win_ssl_locations=\"\"\n    fi\n\n\n    AC_MSG_CHECKING(for OpenSSL >= 0.9.8c in standard locations)\n    for rdir in $extra_dir $std_win_ssl_locations $std_ssl_locations; do\n\tdir=\"$erl_xcomp_sysroot$rdir\"\n\tif test -f \"$erl_xcomp_isysroot$rdir/include/openssl/opensslv.h\"; then\n\t\tis_real_ssl=yes\n\t\tSSL_INCDIR=\"$dir\"\n\t\tif test \"x$MIXED_CYGWIN\" = \"xyes\" -o \"x$MIXED_MSYS\" = \"xyes\"; then\n\t\t\tif test -f \"$dir/lib/VC/libeay32.lib\"; then\n\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib/VC\"\n\t\t\t\tSSL_LIBDIR=\"$dir/lib/VC\"\n\t\t\t\tSSL_CRYPTO_LIBNAME=libeay32\n\t\t\t\tSSL_SSL_LIBNAME=ssleay32\n\t\t\telif test -f \"$dir/lib/VC/openssl.lib\"; then \n\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib/VC\"\n\t\t\t\tSSL_LIBDIR=\"$dir/lib/VC\"\n\t\t\telif test -f $dir/lib/VC/libeay32MD.lib; then\n\t\t            SSL_CRYPTO_LIBNAME=libeay32MD\n\t\t            SSL_SSL_LIBNAME=ssleay32MD\n\t\t\t    if test \"x$enable_dynamic_ssl\" = \"xno\" && \\\n\t                       test -f  $dir/lib/VC/static/libeay32MD.lib; then\n\t\t\t\t  SSL_RUNTIME_LIBDIR=\"$rdir/lib/VC/static\"\n\t\t\t\t  SSL_LIBDIR=\"$dir/lib/VC/static\"\n\t\t            else\n\t\t\t          SSL_RUNTIME_LIBDIR=\"$rdir/lib/VC\"\n\t\t\t\t  SSL_LIBDIR=\"$dir/lib/VC\"\n                            fi \n\t\t\telif test -f \"$dir/lib/libeay32.lib\"; then\n\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib\"\n\t\t\t\tSSL_LIBDIR=\"$dir/lib\"\n\t\t\t\tSSL_CRYPTO_LIBNAME=libeay32\n\t\t\t\tSSL_SSL_LIBNAME=ssleay32\n\t\t\telif test -f \"$dir/lib/openssl.lib\"; then\n\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib\"\n\t\t\t\tSSL_LIBDIR=\"$dir/lib\"\n\t\t\telse\n\t\t\t\tis_real_ssl=no\n\t\t\tfi\n\t\telif test -f \"$dir/lib/powerpc/libsslcrypto.a\"; then\n\t\t\tSSL_CRYPTO_LIBNAME=sslcrypto\n\t\t\tSSL_LIBDIR=\"$dir/lib/powerpc/\"\n\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib/powerpc/\"\n\t\telse\n\t\t\tif test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then\n\t\t\t\tif test -f \"$dir/lib64/libcrypto.a\"; then\n\t\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib64\"\n\t\t\t\t\tSSL_LIBDIR=\"$dir/lib64\"\n\t\t\t\telif test -f \"$dir/lib/64/libcrypto.a\"; then\n\t\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib/64\"\n\t\t\t\t\tSSL_LIBDIR=\"$dir/lib/64\"\n\t\t\t\telif test -f \"$dir/lib64/libcrypto.so\"; then\n\t\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib64\"\n\t\t\t\t\tSSL_LIBDIR=\"$dir/lib64\"\n\t\t\t\telif test -f \"$dir/lib/64/libcrypto.so\"; then\n\t\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib/64\"\n\t\t\t\t\tSSL_LIBDIR=\"$dir/lib/64\"\n\t\t\t\telse\n\t\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib\"\n\t\t\t\t\tSSL_LIBDIR=\"$dir/lib\"\n\t\t\t\tfi\n\t\t\telse\t \n\t\t\t\tSSL_RUNTIME_LIBDIR=\"$rdir/lib\"\n\t\t\t\tSSL_LIBDIR=\"$dir/lib\"\n\t\t\tfi\n\t\tfi\n\t\tif test '!' -f \"$SSL_LIBDIR/lib${SSL_CRYPTO_LIBNAME}.a\"; then\n\t\t\tSSL_DYNAMIC_ONLY=yes\n\t\telif test '!' -f \"$SSL_LIBDIR/lib${SSL_CRYPTO_LIBNAME}.so\" -a '!' -f \"$SSL_LIBDIR/lib${SSL_CRYPTO_LIBNAME}.dylib\"; then\n\t\t\tSSL_STATIC_ONLY=yes\n\t\tfi\n\t\tSSL_BINDIR=\"$rdir/bin\"\n\t\tif test \"x$is_real_ssl\" = \"xyes\" ; then\n\t\t\tSSL_INCLUDE=\"-I$dir/include\"\n\t\t\told_CPPFLAGS=$CPPFLAGS\n\t\t\tCPPFLAGS=$SSL_INCLUDE\n\t\t\tAC_EGREP_CPP(^yes$,[\n#include <openssl/opensslv.h>\n#if OPENSSL_VERSION_NUMBER >= 0x0090803fL\nyes\n#endif\n\t\t\t],[\n\t\t\tssl_found=yes\n\t\t\t],[\n\t\t\tSSL_APP=\n\t\t\tssl_found=no\n         \t\t])\n         \t\tCPPFLAGS=$old_CPPFLAGS\n\t\t\tif test \"x$ssl_found\" = \"xyes\"; then\n\t\t\t   \tif test \"x$MIXED_CYGWIN\" = \"xyes\" -o \"x$MIXED_MSYS\" = \"xyes\"; then\n\t\t\t\t   \tssl_linkable=yes\n\t\t\t\telif test \"x${SSL_CRYPTO_LIBNAME}\" = \"xsslcrypto\"; then\n\t\t\t\t# This should only be triggered seen OSE\n\t\t\t\t\tssl_linkable=yes\n\t\t\t\telse\n\t\t\t\t\tsaveCFLAGS=\"$CFLAGS\"\n \t\t\t\t\tsaveLDFLAGS=\"$LDFLAGS\"\n\t\t\t\t\tsaveLIBS=\"$LIBS\"\n \t\t\t\t\tCFLAGS=\"$CFLAGS $SSL_INCLUDE\"\n\t\t\t\t\tif test \"x$SSL_STATIC_ONLY\" = \"xyes\"; then\n\t\t\t\t\t\tLIBS=\"${SSL_LIBDIR}/lib${SSL_CRYPTO_LIBNAME}.a\"\n\t\t\t\t\telse\n\t\t\t\t\t\tLDFLAGS=\"$LDFLAGS -L$SSL_LIBDIR\"\n\t\t\t\t\t\tLIBS=\"$LIBS -l${SSL_CRYPTO_LIBNAME}\"\n\t\t\t\t\tfi\n \t\t\t\t\tAC_TRY_LINK([\n\t\t\t\t\t#include <stdio.h>\n \t\t\t\t\t#include <openssl/hmac.h>],\n \t\t\t\t\t[ \n\t\t\t\t\tHMAC(0, 0, 0, 0, 0, 0, 0);\n \t\t\t\t\t],\n \t\t\t\t\t[ssl_linkable=yes],\n \t\t\t\t\t[ssl_linkable=no])\n \t\t\t\t\tCFLAGS=\"$saveCFLAGS\"\n \t\t\t\t\tLDFLAGS=\"$saveLDFLAGS\"\n\t\t\t\t\tLIBS=\"$saveLIBS\"\n\t\t\t\tfi\n \t\t\tfi\n\t \t\tif test \"x$ssl_found\" = \"xyes\" && test \"x$ssl_linkable\" = \"xyes\"; then\n\t\t\t \tAC_MSG_RESULT([$dir])\n\t   \t\t\tbreak;\n         \t\tfi\n\t\tfi\t\n       fi\n    done\n\n    if test \"x$ssl_found\" != \"xyes\" ; then\n\tdnl \n\tdnl If no SSL found above, check whether we are running on OpenBSD.\n\tdnl\n\tcase $host_os in\n\topenbsd*)\n\t       if test -f \"$erl_xcomp_isysroot/usr/include/openssl/opensslv.h\"; then\n\t\t  # Trust OpenBSD to have everything the in the correct locations.\n\t\t  ssl_found=yes\n\t\t  ssl_linkable=yes\n\t\t  SSL_INCDIR=\"$erl_xcomp_sysroot/usr\"\n\t          AC_MSG_RESULT([$SSL_INCDIR])\n\t\t  SSL_RUNTIME_LIB=\"/usr/lib\"\n\t\t  SSL_LIB=\"$erl_xcomp_sysroot/usr/lib\"\n\t\t  SSL_BINDIR=\"/usr/sbin\"\n\t\t  dnl OpenBSD requires us to link with -L and -l\n\t\t  SSL_DYNAMIC_ONLY=\"yes\" \n\t\tfi\n\t\t;;\n\tesac\n    fi\ndnl\t\tNow, certain linuxes have a 64bit libcrypto\ndnl\t\tthat cannot build shared libraries (i.e. not PIC)\ndnl\t\tOne could argue that this is wrong, but\ndnl\t\tso it is - be adoptable\n    if test \"$ssl_found\" = \"yes\" && test \"$ssl_linkable\" = \"yes\" && test \"$SSL_DYNAMIC_ONLY\" != \"yes\"; then\n\tcase $host_os in\n\t\tlinux*)\n\t\t\tsaveCFLAGS=\"$CFLAGS\"\n \t\t\tsaveLDFLAGS=\"$LDFLAGS\"\n\t\t\tsaveLIBS=\"$LIBS\"\n \t\t\tCFLAGS=\"$DED_CFLAGS $SSL_INCLUDE\"\n \t\t\tLDFLAGS=\"$DED_LDFLAGS\"\n\t\t\tLIBS=\"$SSL_LIBDIR/libcrypto.a $STATIC_ZLIB_LIBS\"\n \t\t\tAC_TRY_LINK([\n\t\t\t#include <stdio.h>\n \t\t\t#include <openssl/hmac.h>],\n \t\t\t[ \n\t\t\tHMAC(0, 0, 0, 0, 0, 0, 0);\n \t\t\t],\n \t\t\t[ssl_dyn_linkable=yes],\n \t\t\t[ssl_dyn_linkable=no])\n \t\t\tCFLAGS=\"$saveCFLAGS\"\n \t\t\tLDFLAGS=\"$saveLDFLAGS\"\n\t\t\tLIBS=\"$saveLIBS\"\n\t\t\tif test \"x$ssl_dyn_linkable\" != \"xyes\"; then\n\t\t\t\tSSL_DYNAMIC_ONLY=yes\n\t\t\t\tAC_MSG_WARN([SSL will be linked against dynamic lib as static lib is not purely relocatable])\n\t\t\tfi\n\t\t\t;;\n\tesac\n    fi\t\t\t\t\t\n\t\n\t\t\t\t\n\n\n    if test \"x$ssl_found\" != \"xyes\" || test  \"x$ssl_linkable\" != \"xyes\"; then\n       if test \"x$ssl_found\" = \"xyes\"; then \n       \t\tAC_MSG_RESULT([found; but not usable])\n       else\n       \t\tAC_MSG_RESULT([no])\n       fi\n       SSL_APP=\n       CRYPTO_APP=\n       SSH_APP=\n       AC_MSG_WARN([No (usable) OpenSSL found, skipping ssl, ssh and crypto applications])\n\n       for a in ssl crypto ssh; do\n           echo \"No usable OpenSSL found\" > $ERL_TOP/lib/$a/SKIP\n       done\n    fi\n    ;;\n  *)\n    # Option given with PATH to package\n    if test ! -d \"$with_ssl\" ; then\n       AC_MSG_ERROR(Invalid path to option --with-ssl=PATH)\n    fi\n    if test ! -d \"$with_ssl_incl\" ; then\n       AC_MSG_ERROR(Invalid path to option --with-ssl-incl=PATH)\n    fi\n    SSL_INCDIR=\"$with_ssl_incl\"\n    SSL_CRYPTO_LIBNAME=crypto\n    SSL_SSL_LIBNAME=ssl\n    if test \"x$MIXED_CYGWIN\" = \"xyes\" -o \"x$MIXED_MSYS\" = \"xyes\" && test -d \"$with_ssl/lib/VC\"; then\n\tif test -f \"$with_ssl/lib/VC/libeay32.lib\"; then\n\t    SSL_LIBDIR=\"$with_ssl/lib/VC\"\n\t    SSL_CRYPTO_LIBNAME=libeay32\n\t    SSL_SSL_LIBNAME=ssleay32\n\telif test -f \"$with_ssl/lib/VC/openssl.lib\"; then \n\t    SSL_LIBDIR=\"$with_ssl/lib/VC\"\n\telif test -f $with_ssl/lib/VC/libeay32MD.lib; then\n\t    SSL_CRYPTO_LIBNAME=libeay32MD\n            SSL_SSL_LIBNAME=ssleay32MD\n\t    if test \"x$enable_dynamic_ssl\" = \"xno\" && \\\n\t       test -f  $with_ssl/lib/VC/static/libeay32MD.lib; then\n\t\tSSL_LIBDIR=\"$with_ssl/lib/VC/static\"\n\t    else\n\t\tSSL_LIBDIR=\"$with_ssl/lib/VC\"\n            fi \n\telif test -f \"$with_ssl/lib/libeay32.lib\"; then\n\t    SSL_LIBDIR=\"$with_ssl/lib\"\n\t    SSL_CRYPTO_LIBNAME=libeay32\n\t    SSL_SSL_LIBNAME=ssleay32\n\telse\n\t    # This probably wont work, but that's what the user said, so...\n\t    SSL_LIBDIR=\"$with_ssl/lib\"\n\tfi\n    elif test -f \"$dir/lib/powerpc/libsslcrypto.a\"; then\n\t    SSL_CRYPTO_LIBNAME=sslcrypto\n\t    SSL_LIBDIR=\"$with_ssl/lib/powerpc/\"\n    elif test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then\n\tif test -f \"$with_ssl/lib64/libcrypto.a\"; then\n\t\tSSL_LIBDIR=\"$with_ssl/lib64\"\n\telif test -f \"$with_ssl/lib/64/libcrypto.a\"; then\n\t\tSSL_LIBDIR=\"$with_ssl/lib/64\"\n\telif test -f \"$with_ssl/lib64/libcrypto.so\"; then\n\t\tSSL_LIBDIR=\"$with_ssl/lib64\"\n\telif test -f \"$with_ssl/lib/64/libcrypto.so\"; then\n\t\tSSL_LIBDIR=\"$with_ssl/lib/64\"\n\telse\n\t\tSSL_LIBDIR=\"$with_ssl/lib\"\n\tfi\n    else\t \n\tSSL_LIBDIR=\"$with_ssl/lib\"\n    fi\n    if test '!' -f \"${SSL_LIBDIR}/lib${SSL_CRYPTO_LIBNAME}.a\"; then\n\tSSL_DYNAMIC_ONLY=yes\n    elif test '!' -f ${SSL_LIBDIR}/lib${SSL_CRYPTO_LIBNAME}.so -a '!' -f \"$SSL_LIBDIR/lib${SSL_CRYPTO_LIBNAME}.dylib\"; then\n\tSSL_STATIC_ONLY=yes\n    fi\n    SSL_INCLUDE=\"-I$with_ssl_incl/include\"\n    SSL_APP=ssl\n    CRYPTO_APP=crypto\n    SSH_APP=ssh\n    if test \"$cross_compiling\" = \"yes\"; then\n\tSSL_RUNTIME_LIBDIR=`echo \"$SSL_LIBDIR\" | sed -n \"s|^$erl_xcomp_sysroot\\(/*\\)\\(.*\\)\\$|/\\2|p\"`\n    else\n\tSSL_RUNTIME_LIBDIR=\"$SSL_LIBDIR\"\n    fi\nesac\n\nif test \"x$SSL_APP\" != \"x\" ; then\n    dnl We found openssl, now check if we use kerberos 5 support\n    dnl FIXME: Do we still support platforms that have Kerberos?\n    AC_MSG_CHECKING(for OpenSSL kerberos 5 support)\n    old_CPPFLAGS=$CPPFLAGS\n    CPPFLAGS=$SSL_INCLUDE\n    AC_EGREP_CPP(^yes$,[\n#include <openssl/opensslv.h>\n#include <openssl/opensslconf.h>\n#if OPENSSL_VERSION_NUMBER < 0x1010000fL && !defined(OPENSSL_NO_KRB5)\nyes\n#endif\n      ],[\n      AC_MSG_RESULT([yes])\n      ssl_krb5_enabled=yes\n      if test \"x$SSL_DYNAMIC_ONLY\" != \"xyes\"; then\n          if test -f \"$SSL_LIBDIR/libkrb5.a\"; then\n              SSL_LINK_WITH_KERBEROS=yes\n\t      STATIC_KERBEROS_LIBS=\"$SSL_LIBDIR/libkrb5.a\"\n\t      if test -f \"$SSL_LIBDIR/libkrb5support.a\"; then\n\t\t  STATIC_KERBEROS_LIBS=\"$STATIC_KERBEROS_LIBS $SSL_LIBDIR/libkrb5support.a\"\n\t      fi\n\t      if test -f \"$SSL_LIBDIR/libk5crypto.a\"; then\n\t\t  STATIC_KERBEROS_LIBS=\"$STATIC_KERBEROS_LIBS $SSL_LIBDIR/libk5crypto.a\"\n\t      fi\n\t      if test -f \"$SSL_LIBDIR/libresolv.a\"; then\n\t\t  STATIC_KERBEROS_LIBS=\"$STATIC_KERBEROS_LIBS $SSL_LIBDIR/libresolv.a\"\n\t      fi\n\t      if test -f \"$SSL_LIBDIR/libcom_err.a\"; then\n\t\t  STATIC_KERBEROS_LIBS=\"$STATIC_KERBEROS_LIBS $SSL_LIBDIR/libcom_err.a\"\n\t      fi\n          else\n\t      AC_MSG_WARN([Kerberos needed but no kerberos static libraries found])\n\t      AC_MSG_WARN([Rescanning for dynamic SSL libraries])\n\t      enable_dynamic_ssl=yes\n\t      ssl_done=no\n\t      SSL_LINK_WITH_KERBEROS=no\n\t      STATIC_KERBEROS_LIBS=\"\"\n\t      ssl_krb5_enabled=no\n\t      SSL_WITH_KERBEROS=no\n          fi\n      else \t\n\t      SSL_LINK_WITH_KERBEROS=no\n\t      STATIC_KERBEROS_LIBS=\"\"\n      fi\n      ],[\n      AC_MSG_RESULT([no])\n      ssl_krb5_enabled=no\n      SSL_WITH_KERBEROS=no\n      ])\n    CPPFLAGS=$old_CPPFLAGS\n    SSL_KRB5_INCLUDE=\n    if test \"x$ssl_krb5_enabled\" = \"xyes\" ; then\n        AC_MSG_CHECKING(for krb5.h in standard locations)\n\tfor dir in $extra_dir \"$SSL_INCDIR/include\" \"$SSL_INCDIR/include/openssl\" \\\n\t\t\"$SSL_INCDIR/include/kerberos\" \\\n\t\t\"$erl_xcomp_isysroot/cygdrive/c/kerberos/include\" \\\n\t\t\"$erl_xcomp_isysroot/usr/local/kerberos/include\" \\\n\t\t\"$erl_xcomp_isysroot/usr/kerberos/include\" \\\n\t\t\"$erl_xcomp_isysroot/usr/include\"\n\tdo\n            if test -f \"$dir/krb5.h\" ; then\n                SSL_KRB5_INCLUDE=\"$dir\"\n\t\tbreak\n            fi\n        done\n        if test \"x$SSL_KRB5_INCLUDE\" = \"x\" ; then\n\t    AC_MSG_RESULT([not found])\n\t    SSL_APP=\n\t    CRYPTO_APP=\n\t    SSH_APP=\n\t    AC_MSG_WARN([OpenSSL is configured for kerberos but no krb5.h found])\n\t    for a in ssl crypto ssh ; do\n\t \techo \"OpenSSL is configured for kerberos but no krb5.h found\" > $ERL_TOP/lib/$a/SKIP\n\t    done\n        else\n            AC_MSG_RESULT([found in $SSL_KRB5_INCLUDE])\n            SSL_INCLUDE=\"$SSL_INCLUDE -I$SSL_KRB5_INCLUDE\"\n        fi\n    fi\nfi\n\ndone # while test ssl_done != yes\n\nSSL_CC_RUNTIME_LIBRARY_PATH=\nSSL_LD_RUNTIME_LIBRARY_PATH=\nSSL_DED_LD_RUNTIME_LIBRARY_PATH=\ncc_rflg=\"$CFLAG_RUNTIME_LIBRARY_PATH\"\nld_rflg=\"$LDFLAG_RUNTIME_LIBRARY_PATH\"\nded_ld_rflg=\"$DED_LD_FLAG_RUNTIME_LIBRARY_PATH\"\n\n\ncase \"$with_ssl_rpath\" in\n\nyes)   # Use standard lib locations for ssl runtime library path\n\n  if test \"$SSL_APP\" != \"\" && test \"$SSL_DYNAMIC_ONLY\" = \"yes\" && \\\n   { test \"$cc_rflg\" != \"\" || test \"$ld_rflg\" != \"\" || test \"$ded_ld_rflg\" != \"\"; } ; then\n\n    AC_MSG_CHECKING(for ssl runtime library path to use)\n\n    libdirs=\"/lib\"\n\n    if test \"$ac_cv_sizeof_void_p\" = \"8\"; then\n\tdir_lib64=no\n\tdir_lib_64=no\n\n\tcase \"$SSL_RUNTIME_LIBDIR\" in\n\t    */lib/64 | */lib/64/ ) dir_lib_64=yes;;\n\t    */lib64 | */lib64/ ) dir_lib64=yes;;\n\t    *) ;;\n\tesac\n\n\tfor dir in $std_ssl_locations; do\n\t    test $dir_lib_64 = no &&\n\t    \ttest -d \"$erl_xcomp_sysroot$dir/lib/64\" &&\n\t\t    dir_lib_64=yes\n\t    test $dir_lib64 = no &&\n\t\ttest -d \"$erl_xcomp_sysroot$dir/lib64\" &&\n\t\t    dir_lib64=yes\n\tdone\n\n\ttest $dir_lib_64 = yes && libdirs=\"/lib/64 $libdirs\"\n\ttest $dir_lib64 = yes && libdirs=\"/lib64 $libdirs\"\n    fi\n\n    for type in std x_std curr; do\n\n        cc_rpath=\"$cc_rflg$SSL_RUNTIME_LIBDIR\"\n        ld_rpath=\"$ld_rflg$SSL_RUNTIME_LIBDIR\"\n        ded_ld_rpath=\"$ded_ld_rflg$SSL_RUNTIME_LIBDIR\"\n\trpath=\"$SSL_RUNTIME_LIBDIR\"\n\n\tif test $type != curr; then\n\t    for ldir in $libdirs; do\n\t\tfor dir in $std_ssl_locations; do\n\t\t    test \"$SSL_LIBDIR\" != \"$dir$ldir\" || continue\n\t\t    test $type != x_std || test -d \"$dir$ldir\" || continue\n\t\t    test \"$cc_rflg\" = \"\" ||\n\t\t\tcc_rpath=\"$cc_rpath $cc_rflg$dir$ldir\"\n\t\t    test \"$ld_rflg\" = \"\" ||\n\t\t\tld_rpath=\"$ld_rpath $ld_rflg$dir$ldir\"\n\t\t    test \"$ded_ld_rflg\" = \"\" ||\n\t\t\tded_ld_rpath=\"$ded_ld_rpath $ded_ld_rflg$dir$ldir\"\n\t\t    rpath=\"$rpath:$dir$ldir\"\n                done\n\t    done\n\tfi\n\n\tsaveCFLAGS=\"$CFLAGS\"\n\tsaveLDFLAGS=\"$LDFLAGS\"\n\tsaveLIBS=\"$LIBS\"\n\tCFLAGS=\"$CFLAGS $SSL_INCLUDE\"\n\tLDFLAGS=\"$LDFLAGS $ld_rpath -L$SSL_LIBDIR\"\n\tLIBS=\"-lcrypto\"\n\tAC_TRY_LINK([\n                         #include <stdio.h>\n                         #include <openssl/hmac.h>\n                    ],\n                    [ \n\t\t\t HMAC(0, 0, 0, 0, 0, 0, 0);\n                    ],\n                    [rpath_success=yes],\n                    [rpath_success=no])\n\tCFLAGS=\"$saveCFLAGS\"\n\tLDFLAGS=\"$saveLDFLAGS\"\n\tLIBS=\"$saveLIBS\"\n\n\ttest \"$rpath_success\" = \"yes\" && break\n    done\n\n    test \"$rpath_success\" = \"yes\" || { cc_rpath=; ld_rpath=; ded_ld_rpath=; rpath=; }\n\n    SSL_CC_RUNTIME_LIBRARY_PATH=\"$cc_rpath\"\n    SSL_LD_RUNTIME_LIBRARY_PATH=\"$ld_rpath\"\n    SSL_DED_LD_RUNTIME_LIBRARY_PATH=\"$ded_ld_rpath\"\n\n    AC_MSG_RESULT([$rpath])\n    test \"$rpath\" != \"\" || AC_MSG_WARN([Cannot set run path during linking])\n  fi\n  ;;\n\nno)   # Use no ssl runtime library path\n  SSL_DED_LD_RUNTIME_LIBRARY_PATH=\n  ;;\n\n*)    # Use ssl runtime library paths set by --with-ssl-rpath (without any check)\n  ded_ld_rpath=\n  delimit=\n  for dir in `echo $with_ssl_rpath | sed \"s/,/ /g\"`; do\n      ded_ld_rpath=\"$ded_ld_rpath$delimit$ded_ld_rflg$dir\"\n      delimit=\" \"\n  done\n  SSL_DED_LD_RUNTIME_LIBRARY_PATH=\"$ded_ld_rpath\"\n  ;;\n\nesac\n\n\nAC_ARG_ENABLE(fips,\nAS_HELP_STRING([--enable-fips], [enable OpenSSL FIPS mode support])\nAS_HELP_STRING([--disable-fips], [disable OpenSSL FIPS mode support (default)]),\n[ case \"$enableval\" in\n    yes) enable_fips_support=yes ;;\n    *)   enable_fips_support=no ;;\n  esac ], enable_fips_support=no)\n\nif test \"x$enable_fips_support\" = \"xyes\" && test \"$CRYPTO_APP\" != \"\"; then\n   saveCFLAGS=\"$CFLAGS\"\n   saveLDFLAGS=\"$LDFLAGS\"\n   saveLIBS=\"$LIBS\"\n   CFLAGS=\"$CFLAGS $SSL_INCLUDE\"\n   LDFLAGS=\"$LDFLAGS $SSL_LD_RUNTIME_LIBRARY_PATH -L$SSL_LIBDIR\"\n   LIBS=\"-lcrypto\"\n   AC_CHECK_FUNC([FIPS_mode_set],\n   [SSL_FLAGS=\"-DFIPS_SUPPORT\"],\n   [SSL_FLAGS=])\n   CFLAGS=\"$saveCFLAGS\"\n   LDFLAGS=\"$saveLDFLAGS\"\n   LIBS=\"$saveLIBS\"\nelse\n   SSL_FLAGS=\nfi\n\n#--------------------------------------------------------------------\n# Os mon stuff.\n#--------------------------------------------------------------------\nAC_SUBST(os_mon_programs)\nAC_SUBST(CPU_SUP_LIBS)\n\nAC_CHECK_LIB(kstat, kstat_open, [ \n\tuse_cpu_sup=yes\n\tCPU_SUP_LIBS=\"$CPU_SUP_LIBS -lkstat\"\n\t])\n\nAC_CHECK_LIB(kvm, kvm_open, [\n\tuse_cpu_sup=yes\n\tCPU_SUP_LIBS=\"$CPU_SUP_LIBS -lkvm\"\n\t])\n\ncase $host_os in\n\tsolaris2*)\n\t\tos_mon_programs=\"$os_mon_programs ferrule mod_syslog\" ;;\n\tdarwin*)\n\t\tuse_cpu_sup=yes ;;\n\topenbsd*)\n\t\tuse_cpu_sup=yes ;;\n\tlinux*)\n\t\tuse_cpu_sup=yes ;;\n\tfreebsd*)\n\t\tuse_cpu_sup=yes ;;\nesac\n\nif test \"$use_cpu_sup\" = \"yes\"; then\n    os_mon_programs=\"$os_mon_programs cpu_sup\"\nfi\n\nAC_ARG_WITH(javac,\nAS_HELP_STRING([--with-javac=JAVAC], [specify Java compiler to use])\nAS_HELP_STRING([--with-javac], [use a Java compiler if found (default)])\nAS_HELP_STRING([--without-javac], [don't use any Java compiler]))\n\ndnl\ndnl Then there are a number of apps which needs a java compiler...\ndnl\nneed_java=\"jinterface ic/java_src\"\n\n# Remove all SKIP files from previous runs\nfor a in $need_java ; do\n  $RM -f $ERL_TOP/lib/$a/SKIP\ndone\n\nif test \"X$with_javac\" = \"Xno\"; then\n  for a in $need_java ; do\n\techo \"Java compiler disabled by user\" > $ERL_TOP/lib/$a/SKIP\n  done\n\nelse # begin - try to find javac\n\nif test \"X$with_javac\" != \"Xyes\" -a \"X$with_javac\" != \"X\"; then\n    check_javac=$with_javac\nelse\n  check_javac=\"javac.sh javac guavac gcj jikes bock\"\nfi\n\nAC_CHECK_PROGS(JAVAC, $check_javac)\nif test -n \"$JAVAC\"; then\n  dnl Make sure it's at least JDK 1.6\n  AC_CACHE_CHECK(for JDK version 1.6, \n     ac_cv_prog_javac_ver_1_6,\n     [ERL_TRY_LINK_JAVA([], [for (String i : args);],\n        ac_cv_prog_javac_ver_1_6=yes, ac_cv_prog_javac_ver_1_6=no)])\n  if test $ac_cv_prog_javac_ver_1_6 = no; then\n    unset -v JAVAC\n  fi\nfi\nif test -z \"$JAVAC\"; then\n\n  if test \"X$with_javac\" != \"X\"; then\n  \tAC_MSG_ERROR([No java compiler found in PATH (checked for $check_javac)])\n  fi\n\n  AC_MSG_WARN([Could not find any usable java compiler, will skip: jinterface])\n\n  for a in $need_java ; do\n\techo \"No Java compiler found\" > $ERL_TOP/lib/$a/SKIP\n  done\nfi\n\nfi # end - try to find javac\n\ndnl\ndnl Orber has a c++ example, this isn't the right way to check for\ndnl it, but....\ndnl\nAC_SUBST(CXXFLAGS)\ndnl this deliberately does not believe that 'gcc' is a C++ compiler\nAC_CHECK_TOOLS(CXX, [$CCC c++ g++ CC cxx cc++ cl], false)\n\n# Remove SKIP file from previous run\n$RM -f $ERL_TOP/lib/orber/SKIP\n\nif test \"$CXX\" = false; then\n  echo \"No C++ compiler found\" > $ERL_TOP/lib/orber/SKIP\nfi\n\ndnl ----------------------------------------------------------------------\ndnl Include CPPFLAGS in CFLAGS\ndnl ----------------------------------------------------------------------\nCFLAGS=\"$CFLAGS $CPPFLAGS\"\n\n#\n# Currently if we compile for 64 bits we want to compile\n# some external port programs using 32 bits\n#\n\n# If not defined we trust the C compiler in $CC to do 32 bits\nif test -z \"$CC32\"; then\n  CC32=\"$CC\"\nfi\n\nif test -z \"$CFLAGS32\"; then\n  if test $ac_cv_sizeof_void_p != 4; then\n    # We are compiling default 64 bits and use -m32 for 32 bit compilations\n    CFLAGS32=\"$CFLAGS -m32\"\n  else\n    CFLAGS32=\"$CFLAGS\"\n  fi\nfi\n\nAC_SUBST(CC32)\nAC_SUBST(CFLAGS32)\n\ndnl\ndnl ERTS_EMU_CMDLINE_FLAGS will force modification of config.h when\ndnl the emulator command line flags are modified by configure, which\ndnl in turn will make 'make' detect that files depending on config.h\ndnl needs to be rebuilt.\ndnl\n\nAC_DEFINE_UNQUOTED(ERTS_EMU_CMDLINE_FLAGS,\n\"$STATIC_CFLAGS $CFLAGS $DEBUG_CFLAGS $EMU_THR_DEFS $DEFS $WERRORFLAGS $WFLAGS\",\n[The only reason ERTS_EMU_CMDLINE_FLAGS exists is to force modification of config.h when the emulator command line flags are modified by configure])\n\ndnl ----------------------------------------------------------------------\ndnl Directories needed for the build\ndnl ----------------------------------------------------------------------\n\nerts=${erl_top}/erts\n\nerts_dirs=\"\t\t\t\t\t\t\t\t\n  $erts/obj $erts/obj.debug\n\t\t\t\t\t\t\t\t\t\n  $erts/obj/$host\n  $erts/obj.debug/$host\n\n\"\nfor d in ${erl_top}/bin ${erl_top}/bin/$host $erts_dirs ;\ndo\n  if test ! -d $d; then\n    mkdir -p 1>/dev/null 2>&1 $d\n  fi\ndone\n\ndnl ---------------------------------------------------------------------\ndnl Autoheader macro for adding code at top and bottom of config.h.in\ndnl ---------------------------------------------------------------------\nAH_TOP([\n#define GHBN_R_SOLARIS  2\n#define GHBN_R_AIX      3\n#define GHBN_R_GLIBC    4\n])\n\nAH_BOTTOM([\n/* Redefine in6_addr. XXX this should be moved to the files where it's used? */\n#ifdef HAVE_IN_ADDR6_STRUCT\n#define in6_addr in_addr6\n#endif\n\n/* Define a reasonable default for INADDR_LOOPBACK */\n/* XXX this should be moved to the files where it's used? */\n#ifdef HAVE_NO_INADDR_LOOPBACK\n#define INADDR_LOOPBACK (u_long)0x7F000001\n#endif\n\n#ifdef REDEFINE_FD_SETSIZE\n#define FD_SETSIZE 1024\n#endif\n \n#ifdef HAVE_GETHRVTIME_PROCFS_IOCTL\n#define HAVE_GETHRVTIME\n#endif\n\n#if !defined(HAVE_ISFINITE) && !defined(HAVE_FINITE)\n# if defined(HAVE_ISINF) && defined(HAVE_ISNAN)\n#  define USE_ISINF_ISNAN\n# endif\n#endif\n\n#if defined(DEBUG) && !defined(ERTS_ENABLE_LOCK_CHECK)\n#define ERTS_ENABLE_LOCK_CHECK 1\n#endif\n])\n\nif test \"x$GCC\" = xyes; then\n  CFLAGS=\"$WERRORFLAGS $CFLAGS\"\nfi\n\ndnl ----------------------------------------------------------------------\ndnl Enable -fsanitize= flags.\ndnl ----------------------------------------------------------------------\n\nm4_define(DEFAULT_SANITIZERS, [address,undefined])\nAC_ARG_ENABLE(\n    sanitizers,\n    AS_HELP_STRING(\n        [--enable-sanitizers@<:@=comma-separated list of sanitizers@:>@],\n\t    [Default=DEFAULT_SANITIZERS]),\n[\ncase \"$enableval\" in\n    no) sanitizers= ;;\n    yes) sanitizers=\"-fsanitize=DEFAULT_SANITIZERS\" ;;\n    *) sanitizers=\"-fsanitize=$enableval\" ;;\nesac\nCFLAGS=\"$CFLAGS $sanitizers\"\nLDFLAGS=\"$LDFLAGS $sanitizers\"\n])\n\ndnl ----------------------------------------------------------------------\ndnl Check for log2\ndnl ----------------------------------------------------------------------\nAC_CHECK_FUNCS([log2])\n\ndnl ----------------------------------------------------------------------\ndnl Output the result.\ndnl ----------------------------------------------------------------------\n\ndnl  Note that the output files are relative to $srcdir\nAC_CONFIG_FILES([\n  emulator/$host/Makefile:emulator/Makefile.in\n  epmd/src/$host/Makefile:epmd/src/Makefile.in\n  etc/common/$host/Makefile:etc/common/Makefile.in\n  include/internal/$host/ethread.mk:include/internal/ethread.mk.in\n  include/internal/$host/erts_internal.mk:include/internal/erts_internal.mk.in\n  lib_src/$host/Makefile:lib_src/Makefile.in\n  ../make/$host/otp.mk:../make/otp.mk.in\n  ../make/$host/otp_ded.mk:../make/otp_ded.mk.in\n])\n\nAC_CONFIG_FILES([../make/make_emakefile:../make/make_emakefile.in],\n                [chmod +x ../make/make_emakefile])\n\ndnl\ndnl The ones below should be moved to their respective lib\ndnl\ndnl  ../lib/ssl/c_src/$host/Makefile:../lib/ssl/c_src/Makefile.in\nAC_CONFIG_FILES([\n  ../lib/os_mon/c_src/$host/Makefile:../lib/os_mon/c_src/Makefile.in\n  ../lib/crypto/c_src/$host/Makefile:../lib/crypto/c_src/Makefile.in\n  ../lib/runtime_tools/c_src/$host/Makefile:../lib/runtime_tools/c_src/Makefile.in\n  ../lib/tools/c_src/$host/Makefile:../lib/tools/c_src/Makefile.in\n  ])\n\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/autoconf/win64.config.cache.static": "# This file is a shell script that caches the results of configure\n# tests run on this system so they can be shared between configure\n# scripts and configure runs, see configure's option --config-cache.\n# It is not useful on other systems.  If it contains results you don't\n# want to keep, you may remove or edit it.\n#\n# config.status only pays attention to the cache file if you give it\n# the --recheck option to rerun configure.\n#\n# `ac_cv_env_foo' variables (set or unset) will be overridden when\n# loading this file, other *unset* `ac_cv_foo' will be assigned the\n# following values.\n\nac_cv_c_bigendian=${ac_cv_c_bigendian=no}\nac_cv_c_compiler_gnu=${ac_cv_c_compiler_gnu=no}\nac_cv_c_const=${ac_cv_c_const=yes}\nac_cv_cxx_compiler_gnu=${ac_cv_cxx_compiler_gnu=no}\nac_cv_decl_h_errno=${ac_cv_decl_h_errno=no}\nac_cv_decl_inaddr_loopback=${ac_cv_decl_inaddr_loopback=no}\nac_cv_decl_inaddr_loopback_rpc=${ac_cv_decl_inaddr_loopback_rpc=no}\nac_cv_decl_inaddr_loopback_winsock2=${ac_cv_decl_inaddr_loopback_winsock2=yes}\nac_cv_decl_so_bsdcompat=${ac_cv_decl_so_bsdcompat=no}\nac_cv_decl_sys_errlist=${ac_cv_decl_sys_errlist=no}\nac_cv_env_AR_set=set\nac_cv_env_AR_value=ar.sh\nac_cv_env_CCC_set=\nac_cv_env_CCC_value=\nac_cv_env_CC_set=set\nac_cv_env_CC_value=cc.sh\nac_cv_env_CFLAGS_set=\nac_cv_env_CFLAGS_value=\nac_cv_env_CPPFLAGS_set=\nac_cv_env_CPPFLAGS_value=\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_CXXFLAGS_set=\nac_cv_env_CXXFLAGS_value=\nac_cv_env_CXX_set=set\nac_cv_env_CXX_value=cc.sh\nac_cv_env_LDFLAGS_set=\nac_cv_env_LDFLAGS_value=\nac_cv_env_build_alias_set=set\nac_cv_env_build_alias_value=win32\nac_cv_env_host_alias_set=set\nac_cv_env_host_alias_value=win32\nac_cv_env_target_alias_set=set\nac_cv_env_target_alias_value=win32\nac_cv_exeext=${ac_cv_exeext=.exe}\nac_cv_func___brk=${ac_cv_func___brk=no}\nac_cv_func___sbrk=${ac_cv_func___sbrk=no}\nac_cv_func__brk=${ac_cv_func__brk=no}\nac_cv_func__doprnt=${ac_cv_func__doprnt=no}\nac_cv_func__sbrk=${ac_cv_func__sbrk=no}\nac_cv_func_accept=${ac_cv_func_accept=no}\nac_cv_func_alloca_works=${ac_cv_func_alloca_works=yes}\nac_cv_func_brk=${ac_cv_func_brk=no}\nac_cv_func_clock_gettime=${ac_cv_func_clock_gettime=no}\nac_cv_func_connect=${ac_cv_func_connect=no}\nac_cv_func_decl_fread=${ac_cv_func_decl_fread=yes}\nac_cv_func_dlopen=${ac_cv_func_dlopen=no}\nac_cv_func_dup2=${ac_cv_func_dup2=yes}\nac_cv_func_fdatasync=${ac_cv_func_fdatasync=no}\nac_cv_func_finite=${ac_cv_func_finite=no}\nac_cv_func_flockfile=${ac_cv_func_flockfile=no}\nac_cv_func_fork=${ac_cv_func_fork=no}\nac_cv_func_fork_works=${ac_cv_func_fork_works=no}\nac_cv_func_fpsetmask=${ac_cv_func_fpsetmask=no}\nac_cv_func_fstat=${ac_cv_func_fstat=yes}\nac_cv_func_gethostbyaddr=${ac_cv_func_gethostbyaddr=no}\nac_cv_func_gethostbyaddr_r=${ac_cv_func_gethostbyaddr_r=no}\nac_cv_func_gethostbyname=${ac_cv_func_gethostbyname=yes}\nac_cv_func_gethostbyname2=${ac_cv_func_gethostbyname2=no}\nac_cv_func_gethostbyname_r=${ac_cv_func_gethostbyname_r=no}\nac_cv_func_gethostname=${ac_cv_func_gethostname=no}\nac_cv_func_gethrtime=${ac_cv_func_gethrtime=no}\nac_cv_func_getifaddrs=${ac_cv_func_getifaddrs=no}\nac_cv_func_getipnodebyaddr=${ac_cv_func_getipnodebyaddr=no}\nac_cv_func_getipnodebyname=${ac_cv_func_getipnodebyname=no}\nac_cv_func_getpagesize=${ac_cv_func_getpagesize=no}\nac_cv_func_gettimeofday=${ac_cv_func_gettimeofday=no}\nac_cv_func_gmtime_r=${ac_cv_func_gmtime_r=no}\nac_cv_func_ieee_handler=${ac_cv_func_ieee_handler=no}\nac_cv_func_inet_ntoa=${ac_cv_func_inet_ntoa=no}\nac_cv_func_inet_pton=${ac_cv_func_inet_pton=yes}\nac_cv_func_isinf=${ac_cv_func_isinf=no}\nac_cv_func_isnan=${ac_cv_func_isnan=no}\nac_cv_func_localtime_r=${ac_cv_func_localtime_r=no}\nac_cv_func_mallopt=${ac_cv_func_mallopt=no}\nac_cv_func_memchr=${ac_cv_func_memchr=yes}\nac_cv_func_memcmp_working=${ac_cv_func_memcmp_working=yes}\nac_cv_func_memcpy=${ac_cv_func_memcpy=no}\nac_cv_func_memmove=${ac_cv_func_memmove=yes}\nac_cv_func_memset=${ac_cv_func_memset=yes}\nac_cv_func_mmap=${ac_cv_func_mmap=no}\nac_cv_func_mmap_fixed_mapped=${ac_cv_func_mmap_fixed_mapped=no}\nac_cv_func_mremap=${ac_cv_func_mremap=no}\nac_cv_func_nl_langinfo=${ac_cv_func_nl_langinfo=no}\nac_cv_func_openpty=${ac_cv_func_openpty=no}\nac_cv_func_poll=${ac_cv_func_poll=no}\nac_cv_func_posix2time=${ac_cv_func_posix2time=no}\nac_cv_func_posix_fadvise=${ac_cv_func_posix_fadvise=no}\nac_cv_func_pread=${ac_cv_func_pread=no}\nac_cv_func_pwrite=${ac_cv_func_pwrite=no}\nac_cv_func_res_gethostbyname=${ac_cv_func_res_gethostbyname=no}\nac_cv_func_sbrk=${ac_cv_func_sbrk=no}\nac_cv_func_sctp_bindx=${ac_cv_func_sctp_bindx=no}\nac_cv_func_sctp_peeloff=${ac_cv_func_sctp_peeloff=no}\nac_cv_func_select=${ac_cv_func_select=no}\nac_cv_func_setlocale=${ac_cv_func_setlocale=yes}\nac_cv_func_setsid=${ac_cv_func_setsid=no}\nac_cv_func_setvbuf_reversed=${ac_cv_func_setvbuf_reversed=yes}\nac_cv_func_socket=${ac_cv_func_socket=no}\nac_cv_func_strchr=${ac_cv_func_strchr=yes}\nac_cv_func_strerror=${ac_cv_func_strerror=yes}\nac_cv_func_strerror_r=${ac_cv_func_strerror_r=no}\nac_cv_func_strlcat=${ac_cv_func_strlcat=no}\nac_cv_func_strlcpy=${ac_cv_func_strlcpy=no}\nac_cv_func_strncasecmp=${ac_cv_func_strncasecmp=no}\nac_cv_func_strrchr=${ac_cv_func_strrchr=yes}\nac_cv_func_strstr=${ac_cv_func_strstr=yes}\nac_cv_func_uname=${ac_cv_func_uname=no}\nac_cv_func_vfork=${ac_cv_func_vfork=no}\nac_cv_func_vfork_works=${ac_cv_func_vfork_works=no}\nac_cv_func_vprintf=${ac_cv_func_vprintf=yes}\nac_cv_func_writev=${ac_cv_func_writev=no}\nac_cv_have_decl_SCTPS_BOUND=${ac_cv_have_decl_SCTPS_BOUND=no}\nac_cv_have_decl_SCTPS_COOKIE_ECHOED=${ac_cv_have_decl_SCTPS_COOKIE_ECHOED=no}\nac_cv_have_decl_SCTPS_COOKIE_WAIT=${ac_cv_have_decl_SCTPS_COOKIE_WAIT=no}\nac_cv_have_decl_SCTPS_ESTABLISHED=${ac_cv_have_decl_SCTPS_ESTABLISHED=no}\nac_cv_have_decl_SCTPS_IDLE=${ac_cv_have_decl_SCTPS_IDLE=no}\nac_cv_have_decl_SCTPS_LISTEN=${ac_cv_have_decl_SCTPS_LISTEN=no}\nac_cv_have_decl_SCTPS_SHUTDOWN_ACK_SENT=${ac_cv_have_decl_SCTPS_SHUTDOWN_ACK_SENT=no}\nac_cv_have_decl_SCTPS_SHUTDOWN_PENDING=${ac_cv_have_decl_SCTPS_SHUTDOWN_PENDING=no}\nac_cv_have_decl_SCTPS_SHUTDOWN_RECEIVED=${ac_cv_have_decl_SCTPS_SHUTDOWN_RECEIVED=no}\nac_cv_have_decl_SCTPS_SHUTDOWN_SENT=${ac_cv_have_decl_SCTPS_SHUTDOWN_SENT=no}\nac_cv_have_decl_SCTP_ABORT=${ac_cv_have_decl_SCTP_ABORT=no}\nac_cv_have_decl_SCTP_ADDR_CONFIRMED=${ac_cv_have_decl_SCTP_ADDR_CONFIRMED=no}\nac_cv_have_decl_SCTP_ADDR_OVER=${ac_cv_have_decl_SCTP_ADDR_OVER=no}\nac_cv_have_decl_SCTP_BOUND=${ac_cv_have_decl_SCTP_BOUND=no}\nac_cv_have_decl_SCTP_CLOSED=${ac_cv_have_decl_SCTP_CLOSED=no}\nac_cv_have_decl_SCTP_COOKIE_ECHOED=${ac_cv_have_decl_SCTP_COOKIE_ECHOED=no}\nac_cv_have_decl_SCTP_COOKIE_WAIT=${ac_cv_have_decl_SCTP_COOKIE_WAIT=no}\nac_cv_have_decl_SCTP_DELAYED_ACK_TIME=${ac_cv_have_decl_SCTP_DELAYED_ACK_TIME=no}\nac_cv_have_decl_SCTP_EMPTY=${ac_cv_have_decl_SCTP_EMPTY=no}\nac_cv_have_decl_SCTP_EOF=${ac_cv_have_decl_SCTP_EOF=no}\nac_cv_have_decl_SCTP_ESTABLISHED=${ac_cv_have_decl_SCTP_ESTABLISHED=no}\nac_cv_have_decl_SCTP_LISTEN=${ac_cv_have_decl_SCTP_LISTEN=no}\nac_cv_have_decl_SCTP_SENDALL=${ac_cv_have_decl_SCTP_SENDALL=no}\nac_cv_have_decl_SCTP_SHUTDOWN_ACK_SENT=${ac_cv_have_decl_SCTP_SHUTDOWN_ACK_SENT=no}\nac_cv_have_decl_SCTP_SHUTDOWN_PENDING=${ac_cv_have_decl_SCTP_SHUTDOWN_PENDING=no}\nac_cv_have_decl_SCTP_SHUTDOWN_RECEIVED=${ac_cv_have_decl_SCTP_SHUTDOWN_RECEIVED=no}\nac_cv_have_decl_SCTP_SHUTDOWN_SENT=${ac_cv_have_decl_SCTP_SHUTDOWN_SENT=no}\nac_cv_have_decl_SCTP_UNORDERED=${ac_cv_have_decl_SCTP_UNORDERED=no}\nac_cv_have_decl_posix2time=${ac_cv_have_decl_posix2time=no}\nac_cv_header_arpa_inet_h=${ac_cv_header_arpa_inet_h=no}\nac_cv_header_arpa_nameser_h=${ac_cv_header_arpa_nameser_h=no}\nac_cv_header_dirent_dirent_h=${ac_cv_header_dirent_dirent_h=no}\nac_cv_header_dirent_ndir_h=${ac_cv_header_dirent_ndir_h=no}\nac_cv_header_dirent_sys_dir_h=${ac_cv_header_dirent_sys_dir_h=no}\nac_cv_header_dirent_sys_ndir_h=${ac_cv_header_dirent_sys_ndir_h=no}\nac_cv_header_dlfcn_h=${ac_cv_header_dlfcn_h=no}\nac_cv_header_fcntl_h=${ac_cv_header_fcntl_h=yes}\nac_cv_header_gl_gl_h=${ac_cv_header_gl_gl_h=yes}\nac_cv_header_ieeefp_h=${ac_cv_header_ieeefp_h=no}\nac_cv_header_ifaddrs_h=${ac_cv_header_ifaddrs_h=no}\nac_cv_header_inttypes_h=${ac_cv_header_inttypes_h=no}\nac_cv_header_langinfo_h=${ac_cv_header_langinfo_h=no}\nac_cv_header_limits_h=${ac_cv_header_limits_h=yes}\nac_cv_header_mach_o_dyld_h=${ac_cv_header_mach_o_dyld_h=no}\nac_cv_header_malloc_h=${ac_cv_header_malloc_h=yes}\nac_cv_header_memory_h=${ac_cv_header_memory_h=yes}\nac_cv_header_net_errno_h=${ac_cv_header_net_errno_h=no}\nac_cv_header_net_if_dl_h=${ac_cv_header_net_if_dl_h=no}\nac_cv_header_netdb_h=${ac_cv_header_netdb_h=no}\nac_cv_header_netinet_in_h=${ac_cv_header_netinet_in_h=no}\nac_cv_header_netpacket_packet_h=${ac_cv_header_netpacket_packet_h=no}\nac_cv_header_poll_h=${ac_cv_header_poll_h=no}\nac_cv_header_pty_h=${ac_cv_header_pty_h=no}\nac_cv_header_stdc=${ac_cv_header_stdc=yes}\nac_cv_header_stddef_h=${ac_cv_header_stddef_h=yes}\nac_cv_header_stdint_h=${ac_cv_header_stdint_h=yes}\nac_cv_header_stdlib_h=${ac_cv_header_stdlib_h=yes}\nac_cv_header_string_h=${ac_cv_header_string_h=yes}\nac_cv_header_strings_h=${ac_cv_header_strings_h=no}\nac_cv_header_sys_devpoll_h=${ac_cv_header_sys_devpoll_h=no}\nac_cv_header_sys_epoll_h=${ac_cv_header_sys_epoll_h=no}\nac_cv_header_sys_event_h=${ac_cv_header_sys_event_h=no}\nac_cv_header_sys_ioctl_h=${ac_cv_header_sys_ioctl_h=no}\nac_cv_header_sys_param_h=${ac_cv_header_sys_param_h=no}\nac_cv_header_sys_resource_h=${ac_cv_header_sys_resource_h=no}\nac_cv_header_sys_select_h=${ac_cv_header_sys_select_h=no}\nac_cv_header_sys_socket_h=${ac_cv_header_sys_socket_h=no}\nac_cv_header_sys_socketio_h=${ac_cv_header_sys_socketio_h=no}\nac_cv_header_sys_sockio_h=${ac_cv_header_sys_sockio_h=no}\nac_cv_header_sys_stat_h=${ac_cv_header_sys_stat_h=yes}\nac_cv_header_sys_stropts_h=${ac_cv_header_sys_stropts_h=no}\nac_cv_header_sys_sysctl_h=${ac_cv_header_sys_sysctl_h=no}\nac_cv_header_sys_time_h=${ac_cv_header_sys_time_h=no}\nac_cv_header_sys_types_h=${ac_cv_header_sys_types_h=yes}\nac_cv_header_sys_uio_h=${ac_cv_header_sys_uio_h=no}\nac_cv_header_sys_wait_h=${ac_cv_header_sys_wait_h=no}\nac_cv_header_syslog_h=${ac_cv_header_syslog_h=no}\nac_cv_header_time=${ac_cv_header_time=no}\nac_cv_header_unistd_h=${ac_cv_header_unistd_h=no}\nac_cv_header_util_h=${ac_cv_header_util_h=no}\nac_cv_header_utmp_h=${ac_cv_header_utmp_h=no}\nac_cv_header_valgrind_valgrind_h=${ac_cv_header_valgrind_valgrind_h=no}\nac_cv_header_vfork_h=${ac_cv_header_vfork_h=no}\nac_cv_header_windows_h=${ac_cv_header_windows_h=yes}\nac_cv_header_winsock2_h=${ac_cv_header_winsock2_h=yes}\nac_cv_header_ws2tcpip_h=${ac_cv_header_ws2tcpip_h=yes}\nac_cv_lib_dl_dlopen=${ac_cv_lib_dl_dlopen=no}\nac_cv_lib_inet_main=${ac_cv_lib_inet_main=no}\nac_cv_lib_kstat_kstat_open=${ac_cv_lib_kstat_kstat_open=no}\nac_cv_lib_m_sin=${ac_cv_lib_m_sin=no}\nac_cv_lib_nsl_gethostbyname=${ac_cv_lib_nsl_gethostbyname=no}\nac_cv_lib_nsl_main=${ac_cv_lib_nsl_main=no}\nac_cv_lib_resolv_res_gethostbyname=${ac_cv_lib_resolv_res_gethostbyname=no}\nac_cv_lib_rt_clock_gettime=${ac_cv_lib_rt_clock_gettime=no}\nac_cv_lib_socket_getpeername=${ac_cv_lib_socket_getpeername=no}\nac_cv_lib_socket_main=${ac_cv_lib_socket_main=yes}\nac_cv_lib_socket_socket=${ac_cv_lib_socket_socket=no}\nac_cv_lib_util_openpty=${ac_cv_lib_util_openpty=no}\nac_cv_lib_ws2_32_main=${ac_cv_lib_ws2_32_main=yes}\nac_cv_member_struct_ErlDrvEntry_stop_select=${ac_cv_member_struct_ErlDrvEntry_stop_select=no}\nac_cv_member_struct_sctp_paddrparams_spp_flags=${ac_cv_member_struct_sctp_paddrparams_spp_flags=no}\nac_cv_member_struct_sctp_paddrparams_spp_pathmtu=${ac_cv_member_struct_sctp_paddrparams_spp_pathmtu=no}\nac_cv_member_struct_sctp_paddrparams_spp_sackdelay=${ac_cv_member_struct_sctp_paddrparams_spp_sackdelay=no}\nac_cv_member_struct_sctp_remote_error_sre_data=${ac_cv_member_struct_sctp_remote_error_sre_data=no}\nac_cv_member_struct_sctp_send_failed_ssf_data=${ac_cv_member_struct_sctp_send_failed_ssf_data=no}\nac_cv_objext=${ac_cv_objext=o}\nac_cv_path_MKDIR=${ac_cv_path_MKDIR=/bin/mkdir}\nac_cv_path_RM=${ac_cv_path_RM=/bin/rm}\nac_cv_prog_AR=${ac_cv_prog_AR=ar.sh}\nac_cv_prog_CC=${ac_cv_prog_CC=cc.sh}\nac_cv_prog_CPP=${ac_cv_prog_CPP='cc.sh -E'}\nac_cv_prog_CXX=${ac_cv_prog_CXX=cc.sh}\nac_cv_prog_DED_LD=${ac_cv_prog_DED_LD=ld.sh}\nac_cv_prog_JAVAC=${ac_cv_prog_JAVAC=javac.sh}\nac_cv_prog_M4=${ac_cv_prog_M4=m4}\nac_cv_prog_RANLIB=${ac_cv_prog_RANLIB=true}\nac_cv_prog_cc_c89=${ac_cv_prog_cc_c89=}\nac_cv_prog_cc_g=${ac_cv_prog_cc_g=yes}\nac_cv_search_fdatasync=${ac_cv_search_fdatasync=no}\nac_cv_search_opendir=${ac_cv_search_opendir=no}\nac_cv_search_strerror=${ac_cv_search_strerror='none required'}\nac_cv_sizeof___int64=${ac_cv_sizeof___int64=8}\nac_cv_sizeof_char=${ac_cv_sizeof_char=1}\nac_cv_sizeof_int=${ac_cv_sizeof_int=4}\nac_cv_sizeof_long=${ac_cv_sizeof_long=4}\nac_cv_sizeof_long_long=${ac_cv_sizeof_long_long=8}\nac_cv_sizeof_off_t=${ac_cv_sizeof_off_t=4}\nac_cv_sizeof_short=${ac_cv_sizeof_short=2}\nac_cv_sizeof_size_t=${ac_cv_sizeof_size_t=8}\nac_cv_sizeof_void_p=${ac_cv_sizeof_void_p=8}\nac_cv_struct_exception=${ac_cv_struct_exception=no}\nac_cv_struct_sockaddr_sa_len=${ac_cv_struct_sockaddr_sa_len=no}\nac_cv_struct_tm=${ac_cv_struct_tm=time.h}\nac_cv_type_off_t=${ac_cv_type_off_t=yes}\nac_cv_type_pid_t=${ac_cv_type_pid_t=no}\nac_cv_type_signal=${ac_cv_type_signal=void}\nac_cv_type_size_t=${ac_cv_type_size_t=yes}\nac_cv_type_uid_t=${ac_cv_type_uid_t=no}\nac_cv_working_alloca_h=${ac_cv_working_alloca_h=no}\nerts_cv___after_morecore_hook_can_track_malloc=${erts_cv___after_morecore_hook_can_track_malloc=no}\nerts_cv_fwrite_unlocked=${erts_cv_fwrite_unlocked=no}\nerts_cv_have__end_symbol=${erts_cv_have__end_symbol=no}\nerts_cv_have_end_symbol=${erts_cv_have_end_symbol=no}\nerts_cv_putc_unlocked=${erts_cv_putc_unlocked=no}\nerts_cv_windows_h_includes_winsock2_h=${erts_cv_windows_h_includes_winsock2_h=no}\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/autoconf/win32.config.cache.static": "# This file is a shell script that caches the results of configure\n# tests run on this system so they can be shared between configure\n# scripts and configure runs, see configure's option --config-cache.\n# It is not useful on other systems.  If it contains results you don't\n# want to keep, you may remove or edit it.\n#\n# config.status only pays attention to the cache file if you give it\n# the --recheck option to rerun configure.\n#\n# `ac_cv_env_foo' variables (set or unset) will be overridden when\n# loading this file, other *unset* `ac_cv_foo' will be assigned the\n# following values.\n\nac_cv_c_bigendian=${ac_cv_c_bigendian=no}\nac_cv_c_compiler_gnu=${ac_cv_c_compiler_gnu=no}\nac_cv_c_const=${ac_cv_c_const=yes}\nac_cv_cxx_compiler_gnu=${ac_cv_cxx_compiler_gnu=no}\nac_cv_decl_h_errno=${ac_cv_decl_h_errno=no}\nac_cv_decl_inaddr_loopback=${ac_cv_decl_inaddr_loopback=no}\nac_cv_decl_inaddr_loopback_rpc=${ac_cv_decl_inaddr_loopback_rpc=no}\nac_cv_decl_inaddr_loopback_winsock2=${ac_cv_decl_inaddr_loopback_winsock2=yes}\nac_cv_decl_so_bsdcompat=${ac_cv_decl_so_bsdcompat=no}\nac_cv_decl_sys_errlist=${ac_cv_decl_sys_errlist=no}\nac_cv_env_CC_set=set\nac_cv_env_CC_value=cc.sh\nac_cv_env_CFLAGS_set=\nac_cv_env_CFLAGS_value=\nac_cv_env_CPPFLAGS_set=\nac_cv_env_CPPFLAGS_value=\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_CXXFLAGS_set=\nac_cv_env_CXXFLAGS_value=\nac_cv_env_CXX_set=set\nac_cv_env_CXX_value=cc.sh\nac_cv_env_LDFLAGS_set=\nac_cv_env_LDFLAGS_value=\nac_cv_env_build_alias_set=set\nac_cv_env_build_alias_value=win32\nac_cv_env_host_alias_set=set\nac_cv_env_host_alias_value=win32\nac_cv_env_target_alias_set=set\nac_cv_env_target_alias_value=win32\nac_cv_exeext=${ac_cv_exeext=.exe}\nac_cv_func___brk=${ac_cv_func___brk=no}\nac_cv_func___sbrk=${ac_cv_func___sbrk=no}\nac_cv_func__brk=${ac_cv_func__brk=no}\nac_cv_func__doprnt=${ac_cv_func__doprnt=no}\nac_cv_func__sbrk=${ac_cv_func__sbrk=no}\nac_cv_func_accept=${ac_cv_func_accept=no}\nac_cv_func_alloca_works=${ac_cv_func_alloca_works=yes}\nac_cv_func_brk=${ac_cv_func_brk=no}\nac_cv_func_clock_gettime=${ac_cv_func_clock_gettime=no}\nac_cv_func_connect=${ac_cv_func_connect=no}\nac_cv_func_decl_fread=${ac_cv_func_decl_fread=no}\nac_cv_func_dlopen=${ac_cv_func_dlopen=no}\nac_cv_func_dup2=${ac_cv_func_dup2=yes}\nac_cv_func_finite=${ac_cv_func_finite=no}\nac_cv_func_flockfile=${ac_cv_func_flockfile=no}\nac_cv_func_fork=${ac_cv_func_fork=no}\nac_cv_func_fork_works=${ac_cv_func_fork_works=no}\nac_cv_func_fpsetmask=${ac_cv_func_fpsetmask=no}\nac_cv_func_fstat=${ac_cv_func_fstat=yes}\nac_cv_func_gethostbyaddr=${ac_cv_func_gethostbyaddr=no}\nac_cv_func_gethostbyaddr_r=${ac_cv_func_gethostbyaddr_r=no}\nac_cv_func_gethostbyname=${ac_cv_func_gethostbyname=no}\nac_cv_func_gethostbyname2=${ac_cv_func_gethostbyname2=no}\nac_cv_func_gethostbyname_r=${ac_cv_func_gethostbyname_r=no}\nac_cv_func_gethostname=${ac_cv_func_gethostname=no}\nac_cv_func_gethrtime=${ac_cv_func_gethrtime=no}\nac_cv_func_getipnodebyaddr=${ac_cv_func_getipnodebyaddr=no}\nac_cv_func_getipnodebyname=${ac_cv_func_getipnodebyname=no}\nac_cv_func_getpagesize=${ac_cv_func_getpagesize=no}\nac_cv_func_gettimeofday=${ac_cv_func_gettimeofday=no}\nac_cv_func_gmtime_r=${ac_cv_func_gmtime_r=no}\nac_cv_func_ieee_handler=${ac_cv_func_ieee_handler=no}\nac_cv_func_inet_ntoa=${ac_cv_func_inet_ntoa=no}\nac_cv_func_isinf=${ac_cv_func_isinf=no}\nac_cv_func_isnan=${ac_cv_func_isnan=no}\nac_cv_func_localtime_r=${ac_cv_func_localtime_r=no}\nac_cv_func_mallopt=${ac_cv_func_mallopt=no}\nac_cv_func_memchr=${ac_cv_func_memchr=yes}\nac_cv_func_memcmp_working=${ac_cv_func_memcmp_working=yes}\nac_cv_func_memcpy=${ac_cv_func_memcpy=yes}\nac_cv_func_memmove=${ac_cv_func_memmove=yes}\nac_cv_func_memset=${ac_cv_func_memset=yes}\nac_cv_func_mmap_fixed_mapped=${ac_cv_func_mmap_fixed_mapped=no}\nac_cv_func_mremap=${ac_cv_func_mremap=no}\nac_cv_func_nl_langinfo=${ac_cv_func_nl_langinfo=no}\nac_cv_func_openpty=${ac_cv_func_openpty=no}\nac_cv_func_posix2time=${ac_cv_func_posix2time=no}\nac_cv_func_pread=${ac_cv_func_pread=no}\nac_cv_func_pwrite=${ac_cv_func_pwrite=no}\nac_cv_func_res_gethostbyname=${ac_cv_func_res_gethostbyname=no}\nac_cv_func_sbrk=${ac_cv_func_sbrk=no}\nac_cv_func_select=${ac_cv_func_select=no}\nac_cv_func_setlocale=${ac_cv_func_setlocale=yes}\nac_cv_func_setsid=${ac_cv_func_setsid=no}\nac_cv_func_socket=${ac_cv_func_socket=no}\nac_cv_func_strchr=${ac_cv_func_strchr=yes}\nac_cv_func_strerror=${ac_cv_func_strerror=yes}\nac_cv_func_strerror_r=${ac_cv_func_strerror_r=no}\nac_cv_func_strlcat=${ac_cv_func_strlcat=no}\nac_cv_func_strlcpy=${ac_cv_func_strlcpy=no}\nac_cv_func_strncasecmp=${ac_cv_func_strncasecmp=no}\nac_cv_func_strrchr=${ac_cv_func_strrchr=yes}\nac_cv_func_strstr=${ac_cv_func_strstr=yes}\nac_cv_func_uname=${ac_cv_func_uname=no}\nac_cv_func_vfork=${ac_cv_func_vfork=no}\nac_cv_func_vfork_works=${ac_cv_func_vfork_works=no}\nac_cv_func_vprintf=${ac_cv_func_vprintf=yes}\nac_cv_func_writev=${ac_cv_func_writev=no}\nac_cv_header_arpa_inet_h=${ac_cv_header_arpa_inet_h=no}\nac_cv_header_arpa_nameser_h=${ac_cv_header_arpa_nameser_h=no}\nac_cv_header_dirent_dirent_h=${ac_cv_header_dirent_dirent_h=no}\nac_cv_header_dirent_ndir_h=${ac_cv_header_dirent_ndir_h=no}\nac_cv_header_dirent_sys_dir_h=${ac_cv_header_dirent_sys_dir_h=no}\nac_cv_header_dirent_sys_ndir_h=${ac_cv_header_dirent_sys_ndir_h=no}\nac_cv_header_dlfcn_h=${ac_cv_header_dlfcn_h=no}\nac_cv_header_fcntl_h=${ac_cv_header_fcntl_h=yes}\nac_cv_header_gl_gl_h=${ac_cv_header_gl_gl_h=yes}\nac_cv_header_ieeefp_h=${ac_cv_header_ieeefp_h=no}\nac_cv_header_inttypes_h=${ac_cv_header_inttypes_h=no}\nac_cv_header_langinfo_h=${ac_cv_header_langinfo_h=no}\nac_cv_header_limits_h=${ac_cv_header_limits_h=yes}\nac_cv_header_malloc_h=${ac_cv_header_malloc_h=yes}\nac_cv_header_memory_h=${ac_cv_header_memory_h=yes}\nac_cv_header_net_errno_h=${ac_cv_header_net_errno_h=no}\nac_cv_header_netdb_h=${ac_cv_header_netdb_h=no}\nac_cv_header_netinet_in_h=${ac_cv_header_netinet_in_h=no}\nac_cv_header_pty_h=${ac_cv_header_pty_h=no}\nac_cv_header_stdc=${ac_cv_header_stdc=yes}\nac_cv_header_stddef_h=${ac_cv_header_stddef_h=yes}\nac_cv_header_stdint_h=${ac_cv_header_stdint_h=no}\nac_cv_header_stdlib_h=${ac_cv_header_stdlib_h=yes}\nac_cv_header_string_h=${ac_cv_header_string_h=yes}\nac_cv_header_strings_h=${ac_cv_header_strings_h=no}\nac_cv_header_sys_devpoll_h=${ac_cv_header_sys_devpoll_h=no}\nac_cv_header_sys_epoll_h=${ac_cv_header_sys_epoll_h=no}\nac_cv_header_sys_event_h=${ac_cv_header_sys_event_h=no}\nac_cv_header_sys_ioctl_h=${ac_cv_header_sys_ioctl_h=no}\nac_cv_header_sys_param_h=${ac_cv_header_sys_param_h=no}\nac_cv_header_sys_select_h=${ac_cv_header_sys_select_h=no}\nac_cv_header_sys_socket_h=${ac_cv_header_sys_socket_h=no}\nac_cv_header_sys_socketio_h=${ac_cv_header_sys_socketio_h=no}\nac_cv_header_sys_sockio_h=${ac_cv_header_sys_sockio_h=no}\nac_cv_header_sys_stat_h=${ac_cv_header_sys_stat_h=yes}\nac_cv_header_sys_stropts_h=${ac_cv_header_sys_stropts_h=no}\nac_cv_header_sys_sysctl_h=${ac_cv_header_sys_sysctl_h=no}\nac_cv_header_sys_time_h=${ac_cv_header_sys_time_h=no}\nac_cv_header_sys_types_h=${ac_cv_header_sys_types_h=yes}\nac_cv_header_sys_uio_h=${ac_cv_header_sys_uio_h=no}\nac_cv_header_sys_wait_h=${ac_cv_header_sys_wait_h=no}\nac_cv_header_syslog_h=${ac_cv_header_syslog_h=no}\nac_cv_header_time=${ac_cv_header_time=no}\nac_cv_header_unistd_h=${ac_cv_header_unistd_h=no}\nac_cv_header_util_h=${ac_cv_header_util_h=no}\nac_cv_header_utmp_h=${ac_cv_header_utmp_h=no}\nac_cv_header_valgrind_valgrind_h=${ac_cv_header_valgrind_valgrind_h=no}\nac_cv_header_vfork_h=${ac_cv_header_vfork_h=no}\nac_cv_lib_dl_dlopen=${ac_cv_lib_dl_dlopen=no}\nac_cv_lib_inet_main=${ac_cv_lib_inet_main=no}\nac_cv_lib_kstat_kstat_open=${ac_cv_lib_kstat_kstat_open=no}\nac_cv_lib_m_sin=${ac_cv_lib_m_sin=no}\nac_cv_lib_nsl_gethostbyname=${ac_cv_lib_nsl_gethostbyname=no}\nac_cv_lib_nsl_main=${ac_cv_lib_nsl_main=no}\nac_cv_lib_resolv_res_gethostbyname=${ac_cv_lib_resolv_res_gethostbyname=no}\nac_cv_lib_rt_clock_gettime=${ac_cv_lib_rt_clock_gettime=no}\nac_cv_lib_socket_getpeername=${ac_cv_lib_socket_getpeername=no}\nac_cv_lib_socket_main=${ac_cv_lib_socket_main=yes}\nac_cv_lib_socket_socket=${ac_cv_lib_socket_socket=no}\nac_cv_lib_util_openpty=${ac_cv_lib_util_openpty=no}\nac_cv_lib_ws2_32_main=${ac_cv_lib_ws2_32_main=yes}\nac_cv_member_struct_ErlDrvEntry_stop_select=${ac_cv_member_struct_ErlDrvEntry_stop_select=no}\nac_cv_objext=${ac_cv_objext=o}\nac_cv_path_MKDIR=${ac_cv_path_MKDIR=/bin/mkdir}\nac_cv_path_PERL=${ac_cv_path_PERL=/usr/bin/perl}\nac_cv_path_RM=${ac_cv_path_RM=/bin/rm}\nac_cv_path_install=${ac_cv_path_install='/usr/bin/install -c'}\nac_cv_prog_AR=${ac_cv_prog_AR=ar.sh}\nac_cv_prog_CC=${ac_cv_prog_CC=cc.sh}\nac_cv_prog_CPP=${ac_cv_prog_CPP='cc.sh -E'}\nac_cv_prog_CXX=${ac_cv_prog_CXX=cc.sh}\nac_cv_prog_DED_LD=${ac_cv_prog_DED_LD=ld.sh}\nac_cv_prog_ac_ct_DED_LD=${ac_cv_prog_ac_ct_DED_LD=ld.sh}\nac_cv_prog_M4=${ac_cv_prog_M4=m4}\nac_cv_prog_PERL=${ac_cv_prog_PERL=perl}\nac_cv_prog_RANLIB=${ac_cv_prog_RANLIB=true}\nac_cv_prog_LD=${ac_cv_prog_LD=ld.sh}\nac_cv_prog_ac_ct_LD=${ac_cv_prog_ac_ct_LD=ld.sh}\nac_cv_prog_cc_g=${ac_cv_prog_cc_g=yes}\nac_cv_prog_cc_stdc=${ac_cv_prog_cc_stdc=}\nac_cv_prog_cxx_g=${ac_cv_prog_cxx_g=no}\nac_cv_prog_egrep=${ac_cv_prog_egrep='grep -E'}\nac_cv_prog_emu_cc=${ac_cv_prog_emu_cc=emu_cc.sh}\nac_cv_prog_make_make_set=${ac_cv_prog_make_make_set=yes}\nac_cv_prog_mkdir_p=${ac_cv_prog_mkdir_p='/usr/bin/install -c -d'}\nac_cv_search_opendir=${ac_cv_search_opendir=no}\nac_cv_search_strerror=${ac_cv_search_strerror='none required'}\nac_cv_sizeof_char=${ac_cv_sizeof_char=1}\nac_cv_sizeof_int=${ac_cv_sizeof_int=4}\nac_cv_sizeof_long=${ac_cv_sizeof_long=4}\nac_cv_sizeof_long_long=${ac_cv_sizeof_long_long=8}\nac_cv_sizeof_off_t=${ac_cv_sizeof_off_t=4}\nac_cv_sizeof_short=${ac_cv_sizeof_short=2}\nac_cv_sizeof_size_t=${ac_cv_sizeof_size_t=4}\nac_cv_sizeof_void_p=${ac_cv_sizeof_void_p=4}\nac_cv_struct_exception=${ac_cv_struct_exception=no}\nac_cv_struct_sockaddr_sa_len=${ac_cv_struct_sockaddr_sa_len=no}\nac_cv_struct_tm=${ac_cv_struct_tm=time.h}\nac_cv_sys_multicast_support=${ac_cv_sys_multicast_support=no}\nac_cv_type_char=${ac_cv_type_char=yes}\nac_cv_type_int=${ac_cv_type_int=yes}\nac_cv_type_long=${ac_cv_type_long=yes}\nac_cv_type_long_long=${ac_cv_type_long_long=yes}\nac_cv_type_off_t=${ac_cv_type_off_t=yes}\nac_cv_type_pid_t=${ac_cv_type_pid_t=no}\nac_cv_type_short=${ac_cv_type_short=yes}\nac_cv_type_signal=${ac_cv_type_signal=void}\nac_cv_type_size_t=${ac_cv_type_size_t=yes}\nac_cv_type_uid_t=${ac_cv_type_uid_t=no}\nac_cv_type_void_p=${ac_cv_type_void_p=yes}\nac_cv_working_alloca_h=${ac_cv_working_alloca_h=no}\nerts_cv___after_morecore_hook_can_track_malloc=${erts_cv___after_morecore_hook_can_track_malloc=no}\nerts_cv_fwrite_unlocked=${erts_cv_fwrite_unlocked=no}\nerts_cv_have__end_symbol=${erts_cv_have__end_symbol=no}\nerts_cv_have_end_symbol=${erts_cv_have_end_symbol=no}\nerts_cv_putc_unlocked=${erts_cv_putc_unlocked=no}\nerts_cv_windows_h_includes_winsock2_h=${erts_cv_windows_h_includes_winsock2_h=no}\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/doc/src/notes.xml": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<!DOCTYPE chapter SYSTEM \"chapter.dtd\">\n\n<chapter>\n  <header>\n    <copyright>\n      <year>2004</year><year>2018</year>\n      <holder>Ericsson AB. All Rights Reserved.</holder>\n    </copyright>\n    <legalnotice>\n      Licensed under the Apache License, Version 2.0 (the \"License\");\n      you may not use this file except in compliance with the License.\n      You may obtain a copy of the License at\n \n          http://www.apache.org/licenses/LICENSE-2.0\n\n      Unless required by applicable law or agreed to in writing, software\n      distributed under the License is distributed on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      See the License for the specific language governing permissions and\n      limitations under the License.\n\n    </legalnotice>\n\n    <title>ERTS Release Notes</title>\n    <prepared>otp_appnotes</prepared>\n    <docno>nil</docno>\n    <date>nil</date>\n    <rev>nil</rev>\n    <file>notes.xml</file>\n  </header>\n  <p>This document describes the changes made to the ERTS application.</p>\n\n<section><title>Erts 10.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    When a process was waiting for a TCP socket send\n\t    operation to complete, and another process closed the\n\t    socket during that send, the sending process could hang.\n\t    This bug has now been corrected.</p>\n          <p>\n\t    Own Id: OTP-12242 Aux Id: ERL-561 </p>\n        </item>\n        <item>\n          <p>\n\t    Document <c>bit_size</c> in match specifications and\n\t    allow it in <c>ets:fun2ms</c>.</p>\n          <p>\n\t    Own Id: OTP-15343 Aux Id: PR-1962 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>ets:select_replace</c> when called with a\n\t    fully bound key could cause a following call to\n\t    <c>ets:next</c> or <c>ets:prev</c> to crash the emulator\n\t    or return invalid result.</p>\n          <p>\n\t    Own Id: OTP-15346</p>\n        </item>\n        <item>\n\t    <p>When a module has been purged from memory, any\n\t    literals belonging to that module will be copied to all\n\t    processes that hold references to them. The max heap size\n\t    limit would be ignored in the garbage collection\n\t    initiated when copying literals to a process. If the max\n\t    heap size was exceeded, the process would typically be\n\t    terminated in the following garbage collection. Corrected\n\t    to terminate the process directly if copying a literal\n\t    would exceed the max heap size.</p>\n          <p>\n\t    Own Id: OTP-15360</p>\n        </item>\n        <item>\n          <p>\n\t    Fix compilation of run_erl on Solaris 11.4 and later.</p>\n          <p>\n\t    Own Id: OTP-15389</p>\n        </item>\n        <item>\n\t    <p>Fixed a bug where <c>lists:reverse/1-2</c> could use\n\t    far too many reductions. This bug was introduced in\n\t    <c>OTP 21.1</c>.</p>\n          <p>\n\t    Own Id: OTP-15436</p>\n        </item>\n        <item>\n\t    <p>Fixed a bug where a dirty scheduler could stay awake\n\t    forever if a distribution entry was removed as part of a\n\t    dirty GC.</p>\n          <p>\n\t    Own Id: OTP-15446 Aux Id: PR-2024 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix microstate accounting handing in various places. Most\n\t    importantly the GC states when the GC is run on a dirty\n\t    scheduler are now managed correctly.</p>\n          <p>\n\t    Own Id: OTP-15450 Aux Id: ERIERL-229 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>file:sendfile</c> when the send operation\n\t    failed. For sockets in <c>active</c> modes it could cause\n\t    emulator crash or a hanging call. For sockets with\n\t    <c>{active,false}</c> an unexpected <c>{inet_reply, _,\n\t    _}</c> message could be sent to the calling process. The\n\t    bug exists since OTP-21.0.</p>\n          <p>\n\t    Own Id: OTP-15461 Aux Id: ERL-784 </p>\n        </item>\n        <item>\n          <p>\n\t    The erts configure script has been updated to reject any\n\t    CFLAGS that does not have <c>-O</c>. This in order to\n\t    prevent the common mistake of forgetting to add\n\t    <c>-O2</c> to custom CFLAGS.</p>\n          <p>\n\t    Own Id: OTP-15465</p>\n        </item>\n        <item>\n          <p>\n\t    Fix reduction count in lists:member/2</p>\n          <p>\n\t    Own Id: OTP-15474 Aux Id: ERIERL-229 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    New <c>counters</c> and <c>atomics</c> modules supplies\n\t    access to highly efficient operations on mutable fixed\n\t    word sized variables.</p>\n          <p>\n\t    Own Id: OTP-13468</p>\n        </item>\n        <item>\n\t    <p>There is a new module <c>persistent_term</c> that\n\t    implements a term storage suitable for terms that are\n\t    frequently used but never or infrequently updated.\n\t    Lookups are done in constant time without copying the\n\t    terms.</p>\n          <p>\n\t    Own Id: OTP-14669 Aux Id: PR-1989 </p>\n        </item>\n        <item>\n          <p>\n\t    A function <c>inet:getifaddrs/1</c> that takes a list\n\t    with a namespace option has been added, for platforms\n\t    that support that feature, for example Linux (only?).</p>\n          <p>\n\t    Own Id: OTP-15121 Aux Id: ERIERL-189, PR-1974 </p>\n        </item>\n        <item>\n\t    <p>Added the <c>nopush</c> option for TCP sockets, which\n\t    corresponds to <c>TCP_NOPUSH</c> on *BSD and\n\t    <c>TCP_CORK</c> on Linux.</p>\n\t    <p>This is also used internally in <c>file:sendfile</c>\n\t    to reduce latency on subsequent send operations.</p>\n          <p>\n\t    Own Id: OTP-15357 Aux Id: ERL-698 </p>\n        </item>\n        <item>\n\t    <p>List subtraction (The <c>--</c> operator) will now\n\t    yield properly on large inputs.</p>\n          <p>\n\t    Own Id: OTP-15371</p>\n        </item>\n        <item>\n          <p>\n\t    Optimize handling of send_delay for tcp sockes to better\n\t    work with the new pollthread implementation introduced in\n\t    OTP-21.</p>\n          <p>\n\t    Own Id: OTP-15471 Aux Id: ERIERL-229 </p>\n        </item>\n        <item>\n          <p>\n\t    Optimize driver_set_timer with a zero timeout to\n\t    short-circuit and not create any timer structure, but\n\t    instead schedule the timer immediately.</p>\n          <p>\n\t    Own Id: OTP-15472 Aux Id: ERIERL-229 </p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>erl_xcomp_code_model_small</c> as a cross\n\t    configure variable in order to let the emulator be build\n\t    with the assumption that a small code model will be used\n\t    on the target machine.</p>\n          <p>\n\t    Own Id: OTP-15473 Aux Id: ERIERL-229 </p>\n        </item>\n        <item>\n          <p>\n\t    Add a new pollset that is made to handle sockets that use\n\t    <c>{active, true}</c> or <c>{active, N}</c>. The new\n\t    pollset will not be polled by a pollthread, but instead\n\t    polled by a normal scheduler.</p>\n          <p>\n\t    This change was made because of the overhead associated\n\t    with constantly having to re-apply the ONESHOT mechanism\n\t    on fds that all input events were interesting.</p>\n          <p>\n\t    The new pollset is only active on platforms that support\n\t    concurrent kernel poll updates, i.e. Linux and BSD.</p>\n          <p>\n\t    Own Id: OTP-15475 Aux Id: ERIERL-229 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where emulator would segfault if a literal\n\t    message was sent when sequence tracing was enabled.</p>\n          <p>\n\t    Own Id: OTP-15478 Aux Id: ERL-741 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.1.3</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Added an optional <c>./configure</c> flag to compile\n\t    the emulator with spectre mitigation:\n\t    <c>--with-spectre-mitigation</c></p>\n\t    <p>Note that this requires a recent version of GCC with\n\t    support for spectre mitigation and the\n\t    <c>--mindirect-branch=thunk</c> flag, such as\n\t    <c>8.1</c>.</p>\n          <p>\n\t    Own Id: OTP-15430 Aux Id: ERIERL-237 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a rare bug where files could be closed on a\n\t    normal instead of an IO scheduler, resulting in system\n\t    instability if the operation blocked.</p>\n          <p>\n\t    Own Id: OTP-15421</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug where the socket option 'pktoptions' caused a read\n\t    of uninitialized memory has been fixed. Would cause\n\t    malfunction on FreeBSD.</p>\n          <p>\n\t    Own Id: OTP-14297 Aux Id: OTP-15141 </p>\n        </item>\n        <item>\n\t    <p>Fixed a memory leak on errors when reading files.</p>\n          <p>\n\t    Own Id: OTP-15318</p>\n        </item>\n        <item>\n\t    <p>File access through UNC paths works again on Windows.\n\t    This regression was introduced in OTP 21.</p>\n          <p>\n\t    Own Id: OTP-15333 Aux Id: ERL-737 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix the seq_trace token to not be cleared when a process\n\t    receives messages sent by erts. Some examples of when\n\t    this could happen is all port BIFs, i.e.\n\t    <c>open_port</c>, <c>port_command</c> etc etc.</p>\n          <p>\n\t    Fix so that messages sent by nifs can be traced using\n\t    normal and <c>seq_trace</c> tracing.</p>\n          <p>\n\t    Own Id: OTP-15038 Aux Id: ERL-602 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed specs and documentation for <c>process_info</c>\n\t    item <c>monitored_by</c> to include port identifiers and\n\t    nif resources as possible types.</p>\n          <p>\n\t    Own Id: OTP-15180 Aux Id: ERL-648 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in generation of erl_crash.dump, which could\n\t    cause VM to crash.</p>\n          <p>\n\t    Bug exist since erts-9.2 (OTP-20.2).</p>\n          <p>\n\t    Own Id: OTP-15181</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where ctrl-break or ctrl-c would not trigger the\n\t    break mode properly on Windows. This bug was introduced\n\t    in erts-10.0 (OTP-21).</p>\n          <p>\n\t    Own Id: OTP-15205</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a performance bug for reception of UDP packages,\n\t    where a memory buffer would be reallocated when it should\n\t    not have been.</p>\n          <p>\n\t    Introduce a limit on the maximum automatic increase of\n\t    the UDP user-space buffer to the theoretical max of the\n\t    network PATH, i.e. 65535.</p>\n          <p>\n\t    Own Id: OTP-15206</p>\n        </item>\n        <item>\n          <p>\n\t    Fix alignment of erts allocator state internally in erts.\n\t    With the improper alignment the emulator would refuse to\n\t    start when compiled with clang on 32-bit systems.</p>\n          <p>\n\t    Own Id: OTP-15208 Aux Id: PR-1897 ERL-677 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where too many concurrent calls to\n\t    <c>erlang:open_port({spawn,\"cmd\"},...)</c> would result\n\t    in the emulator terminating with the reason \"Failed to\n\t    write to erl_child_setup: \". After this fix the\n\t    <c>open_port</c> call will throw an <c>emfile</c>\n\t    exception instead.</p>\n          <p>\n\t    Own Id: OTP-15210</p>\n        </item>\n        <item>\n          <p>\n\t    Upgraded the ERTS internal PCRE library from version 8.41\n\t    to version 8.42. See <url\n\t    href=\"http://pcre.org/original/changelog.txt\">http://pcre.org/original/changelog.txt</url>\n\t    for information about changes made to PCRE. This library\n\t    implements major parts of the <seealso\n\t    marker=\"stdlib:re\"><c>re</c></seealso> regular\n\t    expressions module.</p>\n          <p>\n\t    Own Id: OTP-15217</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>open_port({fd,X,Y}, ...)</c> to release the file\n\t    descriptors from the pollset when closing the port.\n\t    Without this fix the same file descriptor number could\n\t    not be reused when doing multiple open_port and\n\t    port_close sequences.</p>\n          <p>\n\t    Own Id: OTP-15236 Aux Id: ERL-692 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>float_to_list/2</c> and\n\t    <c>float_to_binary/2</c> with options\n\t    <c>[{decimals,0},compact]</c> causing totally wrong\n\t    results. Bug exists since OTP-21.0.</p>\n          <p>\n\t    Own Id: OTP-15276 Aux Id: PR-1920 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>erlang:memory</c> causing <c>ets</c> to\n\t    report too much. This small false memory leak (16 bytes\n\t    each time) can only happen when a specific race condition\n\t    occurs between scheduler threads on a table with option\n\t    <c>write_concurrency</c>.</p>\n          <p>\n\t    Own Id: OTP-15278</p>\n        </item>\n        <item>\n          <p>\n\t    Minor <c>configure</c> test fixes</p>\n          <p>\n\t    Own Id: OTP-15282</p>\n        </item>\n        <item>\n          <p>\n\t    Improved robustness of distribution connection setup. In\n\t    OTP-21.0 a truly asynchronous connection setup was\n\t    introduced. This is further improvement on that work to\n\t    make the emulator more robust and also be able to recover\n\t    in cases when involved Erlang processes misbehave.</p>\n          <p>\n\t    Own Id: OTP-15297 Aux Id: OTP-15279, OTP-15280 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The socket options <c>recvtos</c>, <c>recvttl</c>,\n\t    <c>recvtclass</c> and <c>pktoptions</c> have been\n\t    implemented in the socket modules. See the documentation\n\t    for the <c>gen_tcp</c>, <c>gen_udp</c> and <c>inet</c>\n\t    modules. Note that support for these in the runtime\n\t    system is platform dependent. Especially for\n\t    <c>pktoptions</c> which is very Linux specific and\n\t    obsoleted by the RFCs that defined it.</p>\n          <p>\n\t    Own Id: OTP-15145 Aux Id: ERIERL-187 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.8</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    As of ERTS version 10.0 (OTP 21.0) the\n\t    <c>erl_child_setup</c> program, which creates port\n\t    programs, ignores <c>TERM</c> signals. This setting was\n\t    unintentionally inherited by port programs. Handling of\n\t    <c>TERM</c> signals in port programs has now been\n\t    restored to the default behavior. That is, terminate the\n\t    process.</p>\n          <p>\n\t    Own Id: OTP-15289 Aux Id: ERIERL-235, OTP-14943, ERL-576 </p>\n        </item>\n        <item>\n          <p>\n\t    The fix made for OTP-15279 in erts-10.07 (OTP-21.0.8) was\n\t    not complete. It could cause a new connection attempt to\n\t    be incorrectly aborted in certain cases. This fix will\n\t    amend that flaw.</p>\n          <p>\n\t    Own Id: OTP-15296 Aux Id: OTP-15279, ERIERL-226 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.7</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A process could get stuck in an infinite rescheduling\n\t    loop between normal and dirty schedulers. This bug was\n\t    introduced in ERTS version 10.0.</p>\n          <p>\n\t    Thanks to Maxim Fedorov for finding and fixing this\n\t    issue.</p>\n          <p>\n\t    Own Id: OTP-15275 Aux Id: PR-1943 </p>\n        </item>\n        <item>\n          <p>\n\t    Garbage collection of a distribution entry could cause an\n\t    emulator crash if <c>net_kernel</c> had not brought\n\t    previous connection attempts on it down properly.</p>\n          <p>\n\t    Own Id: OTP-15279 Aux Id: ERIERL-226 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.6</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A race between termination of a process and resume of the\n\t    same process via <c>erlang:resume_process/1</c> could\n\t    cause the VM to crash. This bug was introduced in erts\n\t    version 10.0 (OTP 21.0).</p>\n          <p>\n\t    Own Id: OTP-15237</p>\n        </item>\n        <item>\n          <p>\n\t    When tracing on <c>running</c>, <c>in</c> trace events\n\t    could be lost when a process was rescheduled between a\n\t    dirty and a normal scheduler.</p>\n          <p>\n\t    Own Id: OTP-15269 Aux Id: ERL-713 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug which caused an emulator crash when\n\t    <c>enif_send()</c> was called by a NIF that executed on a\n\t    dirty scheduler. The bug was either triggered when the\n\t    NIF called <c>enif_send()</c> without a message\n\t    environment, or when the process executing the NIF was\n\t    <c>send</c> traced.</p>\n          <p>\n\t    Own Id: OTP-15223</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug causing some Erlang references to be\n\t    inconsistently ordered. This could for example cause\n\t    failure to look up certain elements with references as\n\t    keys in search data structures. This bug was introduced\n\t    in R13B02.</p>\n          <p>\n\t    Thanks to Simon Cornish for finding the bug and supplying\n\t    a fix.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-15225</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a bug that prevented the <c>noshell</c> option\n\t    from working correctly on Mac OS X and BSD.</p>\n          <p>\n\t    Own Id: OTP-15169</p>\n        </item>\n        <item>\n\t    <p>Fixed a crash when matching directly against a literal\n\t    map using a single key that had been saved on the\n\t    stack.</p>\n          <p>\n\t    Own Id: OTP-15184</p>\n        </item>\n        <item>\n\t    <p>Fix node crash when passing a bad time option to\n\t    <c>file:read_file_info/2</c>.</p>\n          <p>\n\t    Own Id: OTP-15196</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a scheduler bug that caused normal schedulers to\n\t    run dirty code.</p>\n          <p>\n\t    Own Id: OTP-15154</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug in <c>erlang:trace_info/2</c> which caused\n\t    the emulator to crash when a bad argument was passed. The\n\t    bug was introduced in ERTS version 10.0.</p>\n          <p>\n\t    Own Id: OTP-15183 Aux Id: ERL-670 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a rare bug that could cause processes to be\n\t    scheduled after they had been freed.</p>\n          <p>\n\t    Own Id: OTP-15067 Aux Id: ERL-573 </p>\n        </item>\n        <item>\n\t    <p>Fixed a race condition in the inet driver that could\n\t    cause receive to hang when the emulator was compiled with\n\t    gcc 8.</p>\n          <p>\n\t    Own Id: OTP-15158 Aux Id: ERL-654 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>The keys used in <c>os:getenv</c> and <c>os:putenv</c>\n\t    are case-insensitive again on Windows.</p>\n          <p>\n\t    Own Id: OTP-15147 Aux Id: ERL-644 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 10.0</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The type specifications for <c>file:posix/0</c> and\n\t    <c>inet:posix/0</c> have been updated according to which\n\t    errors file and socket operations should be able to\n\t    return.</p>\n          <p>\n\t    Own Id: OTP-14019 Aux Id: ERL-550 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix error printout from run_erl and a bug that could\n\t    cause unintended fds to be leaked into the started\n\t    program.</p>\n          <p>\n\t    Own Id: OTP-14537 Aux Id: PR1529 </p>\n        </item>\n        <item>\n\t    <p> File operations used to accept <seealso\n\t    marker=\"kernel:file#type-name_all\">filenames</seealso>\n\t    containing null characters (integer value zero). This\n\t    caused the name to be truncated and in some cases\n\t    arguments to primitive operations to be mixed up.\n\t    Filenames containing null characters inside the filename\n\t    are now <em>rejected</em> and will cause primitive file\n\t    operations to fail. </p> <p> Also environment variable\n\t    operations used to accept <seealso\n\t    marker=\"kernel:os#type-env_var_name\">names</seealso> and\n\t    <seealso\n\t    marker=\"kernel:os#type-env_var_value\">values</seealso> of\n\t    environment variables containing null characters (integer\n\t    value zero). This caused operations to silently produce\n\t    erroneous results. Environment variable names and values\n\t    containing null characters inside the name or value are\n\t    now <em>rejected</em> and will cause environment variable\n\t    operations to fail. </p> <p>Primitive environment\n\t    variable operations also used to accept the <c>$=</c>\n\t    character in environment variable names causing various\n\t    problems. <c>$=</c> characters in environment variable\n\t    names are now also <em>rejected</em>. </p> <p>Also\n\t    <seealso\n\t    marker=\"kernel:os#cmd/1\"><c>os:cmd/1</c></seealso> now\n\t    reject null characters inside its <seealso\n\t    marker=\"kernel:os#type-os_command\">command</seealso>.\n\t    </p> <p><seealso\n\t    marker=\"erts:erlang#open_port/2\"><c>erlang:open_port/2</c></seealso>\n\t    will also reject null characters inside the port name\n\t    from now on.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14543 Aux Id: ERL-370 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bugs related to the bookkeeping of microstate\n\t    accounting states.</p>\n          <p>\n\t    Own Id: OTP-14652</p>\n        </item>\n        <item>\n\t    <p><c>os:putenv</c> and <c>os:getenv</c> no longer access\n\t    the process environment directly and instead work on a\n\t    thread-safe emulation. The only observable difference is\n\t    that it's <em>not</em> kept in sync with libc\n\t    <c>getenv(3)</c> / <c>putenv(3)</c>, so those who relied\n\t    on that behavior in drivers or NIFs will need to add\n\t    manual synchronization.</p> <p>On Windows this means that\n\t    you can no longer resolve DLL dependencies by modifying\n\t    the <c>PATH</c> just before loading the driver/NIF. To\n\t    make this less of a problem, the emulator now adds the\n\t    target DLL's folder to the DLL search path.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14666</p>\n        </item>\n        <item>\n\t    <p>Corrected <c>erlang:is_builtin(erlang, M, F)</c> to\n\t    return <c>true</c> for <c>apply/2</c> and\n\t    <c>yield/0</c>.</p>\n          <p>\n\t    Own Id: OTP-14713 Aux Id: ERL-500 </p>\n        </item>\n        <item>\n\t    <p>Fixed a bug where the PATH environment variable wasn't\n\t    updated correctly on a release downgrade, effectively\n\t    keeping the PATH of the new release.</p>\n          <p>\n\t    Own Id: OTP-14719</p>\n        </item>\n        <item>\n\t    <p>A receive optimization that avoids scanning the entire\n\t    message queue when receiving a message containing a\n\t    freshly created reference could in rare circumstances\n\t    (involving recursive calls to the functions that does the\n\t    receive) cause the receive to hang. This has been\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-14782 Aux Id: ERL-511 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix building of Erlang/OTP on platforms which have small\n\t    data area with short addressing. For example the\n\t    PowerPC/RTEMS platform.</p>\n          <p>\n\t    Own Id: OTP-14909 Aux Id: PR-1692 </p>\n        </item>\n        <item>\n\t    <p>Fixed a crash when <c>enif_make_binary</c> is called\n\t    with a binary produced by <c>enif_inspect_binary</c> in a\n\t    different environment.</p>\n          <p>\n\t    Own Id: OTP-14931</p>\n        </item>\n        <item>\n\t    <p>Fixed a crash when <c>enif_make_binary</c> is called\n\t    more than once with a binary that had previously been\n\t    added to an <c>enif_ioq</c>.</p>\n          <p>\n\t    Own Id: OTP-14932</p>\n        </item>\n        <item>\n          <p>\n\t    The erl_child_setup program now ignores SIGTERM signals.</p>\n          <p>\n\t    Own Id: OTP-14943 Aux Id: ERL-576 </p>\n        </item>\n        <item>\n          <p>\n\t    Force 64-bit alignment on pre-allocators on architectures\n\t    which needs it.</p>\n          <p>\n\t    Own Id: OTP-14977</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where dirty scheduler picked up non-dirty\n\t    work.</p>\n          <p>\n\t    Own Id: OTP-14978</p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>gen_tcp:send/2</c> on closed sockets now\n\t    returns <c>{error, closed}</c> instead of\n\t    <c>{error,enotconn}</c>.</p>\n          <p>\n\t    Own Id: OTP-15001</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:monotonic_time/1</c> failed with <c>badarg</c>\n\t    when passing the <c>perf_counter</c> time unit as\n\t    argument.</p>\n          <p>\n\t    Own Id: OTP-15008</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where rapid <c>init:restart()</c> calls would\n\t    sometimes crash because a code load request leaked in\n\t    between the restarts.</p>\n          <p>\n\t    Own Id: OTP-15013</p>\n        </item>\n        <item>\n          <p>\n\t    Improve <c>float_to_list(F, [{decimals,D}])</c> to closer\n\t    conform with <c>io_lib:format(\"~.*f\", [D,F])</c>.</p>\n          <p>\n\t    There are however, still cases when <c>float_to_list</c>\n\t    does not produce the exact same result as\n\t    <c>io_lib:format</c>, especially for large values\n\t    <c>F</c> and/or many decimals <c>D</c>.</p>\n          <p>\n\t    Own Id: OTP-15015 Aux Id: OTP-14890 </p>\n        </item>\n        <item>\n\t    <p>Fixed a deadlock that would occur on certain\n\t    allocators when a reallocation failed with <c>+ramv</c>\n\t    enabled.</p>\n          <p>\n\t    Own Id: OTP-15024</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug that made it impossible to use an erl_tracer as\n\t    the seq_trace trace receiver.</p>\n          <p>\n\t    Own Id: OTP-15029</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where a large (> 1 GB) emulator generated error\n\t    logger message would cause the emulator to crash.</p>\n          <p>\n\t    Own Id: OTP-15032</p>\n        </item>\n        <item>\n\t    <p>The emulator will no longer crash when reading the\n\t    file information of an ordinary file that has an NTFS\n\t    reparse point, such as files stored in a OneDrive-mapped\n\t    folder.</p>\n          <p>\n\t    Own Id: OTP-15062 Aux Id: ERL-615 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>enif_binary_to_term</c> which could cause\n\t    memory corruption for immediate terms (atoms, small\n\t    integers, pids, ports, empty lists).</p>\n          <p>\n\t    Own Id: OTP-15080</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>erlang:system_profile/2</c> that could\n\t    cause superfluous <c>{profile,_,active,_,_}</c> messages\n\t    for terminating processes.</p>\n          <p>\n\t    Own Id: OTP-15085</p>\n        </item>\n        <item>\n          <p>\n\t    On OSs with per thread CPU time support, change\n\t    <c>cpu_timestamp</c> in <seealso\n\t    marker=\"erlang#trace/3\">erlang:trace/3</seealso> to use\n\t    it instead of per process CPU time. This makes this\n\t    option useable on such OSs when running multiple\n\t    schedulers.</p>\n          <p>\n\t    Own Id: OTP-15090</p>\n        </item>\n        <item>\n          <p>\n\t    Fix segfault in abort_signal_task which could happen if a\n\t    port terminated while there were outstanding port tasks\n\t    that were not signals, for example a\n\t    ready_input/ready_output event.</p>\n          <p>\n\t    Own Id: OTP-15108 Aux Id: ERL-621 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>ets</c> that could cause VM crash if\n\t    process A terminates after fixating a table and process B\n\t    deletes the table at \"the same time\". The table fixation\n\t    could be done with <c>ets:safe_fixtable</c> or if process\n\t    A terminates in the middle of a long running\n\t    <c>select</c> or <c>match</c> call.</p>\n          <p>\n\t    Own Id: OTP-15109</p>\n        </item>\n        <item>\n\t    <p>Owner and group changes through\n\t    <c>file:write_file_info</c>, <c>file:change_owner</c>,\n\t    and <c>file:change_group</c> will no longer report\n\t    success on permission errors.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-15118</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a bug error reporting from escripts on windows where\n\t    the error message would get garbled.</p>\n          <p>\n\t    Own Id: OTP-15119 Aux Id: PR-1826 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix segfault when a process is interally re-scheduled\n\t    while being traced for in out events. This bug was\n\t    introduced in erts-8.0 (OTP-19.0).</p>\n          <p>\n\t    Own Id: OTP-15125</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>It is now possible to open device files and FIFOs with\n\t    <c>file:open/2</c>.</p>\n          <p>\n\t    Own Id: OTP-11462</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>erlang:system_flag(scheduler_wall_time,Bool)</c>\n\t    call is now reference counted and will be turned off if\n\t    the (last) process that started the performance\n\t    statistics dies. Thus it is no longer possible to start\n\t    the statistics with <c>rpc:call(Node, erlang,\n\t    system_flag, [scheduler_wall_time, true])</c> since it\n\t    will be turned off directly afterwards when the rpc\n\t    process dies.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11694</p>\n        </item>\n        <item>\n\t    <p>A new logging API is added to Erlang/OTP, see the\n\t    <seealso\n\t    marker=\"kernel:logger\"><c>logger(3)</c></seealso> manual\n\t    page, and section <seealso\n\t    marker=\"kernel:logger_chapter\">Logging</seealso> in the\n\t    Kernel User's Guide.</p>\n\t    <p>Calls to <c>error_logger</c> are automatically\n\t    redirected to the new API, and legacy error logger event\n\t    handlers can still be used. It is, however, recommended\n\t    to use the Logger API directly when writing new code.</p>\n\t    <p>Notice the following potential incompatibilities:</p>\n\t    <list> <item><p>Kernel configuration parameters\n\t    <c>error_logger</c> still works, but is overruled if the\n\t    default handler's output destination is configured with\n\t    Kernel configuration parameter <c>logger</c>.</p> <p>In\n\t    general, parameters for configuring error logger are\n\t    overwritten by new parameters for configuring\n\t    Logger.</p></item> <item><p>The concept of SASL error\n\t    logging is deprecated, meaning that by default the SASL\n\t    application does not affect which log events are\n\t    logged.</p> <p>By default, supervisor reports and crash\n\t    reports are logged by the default Logger handler started\n\t    by Kernel, and end up at the same destination (terminal\n\t    or file) as other standard log event from Erlang/OTP.</p>\n\t    <p>Progress reports are not logged by default, but can be\n\t    enabled by setting the primary log level to info, for\n\t    example with the Kernel configuration parameter\n\t    <c>logger_level</c>.</p> <p>To obtain backwards\n\t    compatibility with the SASL error logging functionality\n\t    from earlier releases, set Kernel configuration parameter\n\t    <c>logger_sasl_compatible</c> to <c>true</c>. This\n\t    prevents the default Logger handler from logging any\n\t    supervisor-, crash-, or progress reports. Instead, SASL\n\t    adds a separate Logger handler during application start,\n\t    which takes care of these log events. The SASL\n\t    configuration parameters <c>sasl_error_logger</c> and\n\t    <c>sasl_errlog_type</c> specify the destination (terminal\n\t    or file) and severity level to log for these\n\t    events.</p></item></list>\n          <p>\n\t    Since Logger is new in Erlang/OTP 21.0, we do reserve the\n\t    right to introduce changes to the Logger API and\n\t    functionality in patches following this release. These\n\t    changes might or might not be backwards compatible with\n\t    the initial version.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13295</p>\n        </item>\n        <item>\n          <p>\n\t    <c>gen_sctp:connect_init/4</c> or rather connect in\n\t    <c>inet_drv.c</c> for SCTP has been fixed to not check\n\t    the write file descriptor for writeability after a\n\t    connect, since for SCTP (SOCK_SEQPACKET) that property\n\t    does not seem to be any kind of indicator for when a\n\t    connect has finished. This fixes connects that the OS\n\t    returned as \"in progress\" that was misinterpreted by\n\t    <c>gen_sctp:connect_init</c> as failed.</p>\n          <p>\n\t    Own Id: OTP-13760 Aux Id: PR-1592 </p>\n        </item>\n        <item>\n\t    <p>The file driver has been rewritten as a NIF,\n\t    decreasing the latency of file operations. Notable\n\t    incompatibilities are:</p> <list> <item><p>The\n\t    <c>use_threads</c> option for <c>file:sendfile/5</c> no\n\t    longer has any effect; we either use non-blocking\n\t    <c>sendfile(2)</c> or fall back to <c>file:read</c> +\n\t    <c>gen_tcp:send</c>. </p></item> <item><p>The\n\t    file-specific DTrace probes have been removed. The same\n\t    effect can be achieved with normal tracing together with\n\t    the <c>nif__entry</c>/<c>nif__return</c> probes to track\n\t    scheduling.</p></item> </list>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14256</p>\n        </item>\n        <item>\n\t    <p>The I/O polling functionality of erts has been\n\t    re-written to better make use of the OSs polling\n\t    mechanisms. This change means that erts will now always\n\t    prefer to use a kernel-polling mechanism if possible.\n\t    Also all of the I/O polling has been moved to dedicated\n\t    threads instead of being placed in the scheduler\n\t    loops.</p> <p>As a result of this, the <c>erl</c> options\n\t    <c>+K</c> and <c>+secio</c> have been removed. It is\n\t    still possible to disable kernel-poll, but it has to be\n\t    done at compile time through the configure option\n\t    <c>--disable-kernel-poll</c>.</p> <p>The new <c>erl</c>\n\t    options <seealso marker=\"erl#+IOt\"><c>+IOt</c></seealso>\n\t    and <seealso marker=\"erl#+IOp\"><c>+IOp</c></seealso> can\n\t    be used to change how many IO poll threads and poll sets\n\t    that erts should use. See their respective documentation\n\t    for more details.</p>\n          <p>\n\t    Own Id: OTP-14346</p>\n        </item>\n        <item>\n\t    <p>Truly asynchronous auto-connect. Earlier, when\n\t    <c>erlang:send</c> was aimed toward an unconnected node,\n\t    the function would not return until the connection setup\n\t    had completed (or failed). Now the function returns\n\t    directly after the message has been enqueued and the\n\t    connection setup started.</p>\n\t    <p>The same applies to all distributed operations that\n\t    may trigger auto-connect, i.e. <c>'!'</c>, <c>send</c>,\n\t    <c>link</c>, <c>monitor</c>, <c>monitor_node</c>,\n\t    <c>exit/2</c> and <c>group_leader</c>.</p>\n\t    <p>The interface for all these functions are unchanged as\n\t    they do not return connection failures. The only\n\t    exception is <c>erlang:monitor</c> where a <em>possible\n\t    incompatibility</em> is introduced: An attempt to monitor\n\t    a process on a primitive node (such as erl_interface or\n\t    jinterface), where remote process monitoring is not\n\t    implemented, will no longer fail with <c>badarg</c>\n\t    exception. Instead a monitor will be created, but it will\n\t    only supervise the connection to the node.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14370</p>\n        </item>\n        <item>\n\t    <p>Changed the default behaviour of <c>.erlang</c>\n\t    loading: <c>.erlang</c> is no longer loaded from the\n\t    current directory. <c>c:erlangrc(PathList)</c> can be\n\t    used to search and load an <c>.erlang</c> file from user\n\t    specified directories.</p> <p><c>escript</c>,\n\t    <c>erlc</c>, <c>dialyzer</c> and <c>typer</c> no longer\n\t    load an <c>.erlang</c> at all.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14439</p>\n        </item>\n        <item>\n          <p>\n\t    New functionality for implementation of alternative\n\t    carriers for the Erlang distribution has been introduced.\n\t    This mainly consists of support for usage of distribution\n\t    controller processes (previously only ports could be used\n\t    as distribution controllers). For more information see\n\t    <seealso marker=\"erts:alt_dist#distribution_module\">ERTS\n\t    User's Guide \u279c How to implement an Alternative Carrier\n\t    for the Erlang Distribution \u279c Distribution\n\t    Module</seealso>.</p>\n          <p>\n\t    Own Id: OTP-14459</p>\n        </item>\n        <item>\n          <p>\n\t    Add support for the lcc compiler and in extension the\n\t    Elbrus 2000 platform.</p>\n          <p>\n\t    Own Id: OTP-14492</p>\n        </item>\n        <item>\n\t    <p>Support for \"tuple calls\" have been removed from the\n\t    run-time system. Tuple calls was an undocumented and\n\t    unsupported feature which allowed the module argument for\n\t    an apply operation to be a tuple: <c>Var = dict:new(),\n\t    Var:size()</c>. This \"feature\" frequently caused\n\t    confusion, especially when such call failed. The\n\t    stacktrace would point out functions that don't exist in\n\t    the source code.</p>\n\t    <p>For legacy code that need to use parameterized modules\n\t    or tuple calls for some other reason, there is a new\n\t    compiler option called <c>tuple_calls</c>. When this\n\t    option is given, the compiler will generate extra code\n\t    that emulates the old behavior for calls where the module\n\t    is a variable.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14497</p>\n        </item>\n        <item>\n\t    <p>Creation of small maps with literal keys has been\n\t    optimized to be faster and potentially use less memory.\n\t    The keys are combined into a literal key tuple which is\n\t    put into the literal pool. The key tuple can be shared\n\t    between many instances of maps having the same keys.</p>\n          <p>\n\t    Own Id: OTP-14502</p>\n        </item>\n        <item>\n          <p>\n\t    When an exception is thrown, include the arguments of the\n\t    call in the stacktrace for BIFs <c>band</c>, <c>bor</c>,\n\t    <c>bsl</c>, <c>bsr</c>, <c>bxor</c>, <c>div</c>,\n\t    <c>rem</c> and the operators <c>+</c>, <c>-</c>, <c>*</c>\n\t    and <c>/</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14508</p>\n        </item>\n        <item>\n          <p>\n\t    The non-smp emulators have been removed. This means that\n\t    the configure options <c>--disable-threads</c> and\n\t    <c>--enable-plain-emulator</c> have been removed and\n\t    configure will now refuse to build Erlang/OTP on\n\t    platforms without thread support.</p>\n          <p>\n\t    In order to achieve a similar setup as the non-smp\n\t    emulator, it is possible to start Erlang/OTP with the\n\t    <c>+S 1</c> option.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14518</p>\n        </item>\n        <item>\n\t    <p>Modules that use floating point constants compiled\n\t    with R15 or earlier will need to be re-compiled before\n\t    they can be loaded.</p>\n          <p>\n\t    Own Id: OTP-14575</p>\n        </item>\n        <item>\n          <p>\n\t    Implementation of true asynchronous signaling between\n\t    processes in order to improve scalability. Signals\n\t    affected include exit, monitor, demonitor, monitor\n\t    triggered, link, unlink, and group leader.</p>\n          <p>\n\t    Own Id: OTP-14589</p>\n        </item>\n        <item>\n          <p>\n\t    Added a PGO (profile guided optimization) pass to the\n\t    build step of erts. This can be disabled by passing\n\t    --disable-pgo to configure.</p>\n          <p>\n\t    Own Id: OTP-14604</p>\n        </item>\n        <item>\n          <p>\n\t    Improved the performance of <c>binary:split</c> and\n\t    <c>binary:match</c>.</p>\n          <p>\n\t    Own Id: OTP-14610 Aux Id: PR-1480 </p>\n        </item>\n        <item>\n          <p>\n\t    It is not longer possible to disable dirty schedulers\n\t    when building erlang.</p>\n          <p>\n\t    Own Id: OTP-14613</p>\n        </item>\n        <item>\n\t    <p>Loaded BEAM code in a 64-bit system requires less\n\t    memory because of better packing of operands for\n\t    instructions.</p>\n\t    <p>These memory savings were achieved by major\n\t    improvements to the <c>beam_makeops</c> scripts used when\n\t    building the run time system and BEAM compiler. There is\n\t    also new for documentation for <c>beam_makeops</c> that\n\t    describes how new BEAM instructions and loader\n\t    transformations can be implemented. The documentation is\n\t    found in here in a source directory or git repository:\n\t    erts/emulator/internal_doc/beam_makeops.md. An online\n\t    version can be found here:\n\t    https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/beam_makeops.md</p>\n          <p>\n\t    Own Id: OTP-14626</p>\n        </item>\n        <item>\n\t    <p><c>file:read_file</c> has been changed to read the\n\t    content of files that report a size of 0 even when data\n\t    can be read from them. An example of such a file is\n\t    <c>/proc/cpuinfo</c> on Linux.</p>\n          <p>\n\t    Own Id: OTP-14637 Aux Id: ERL-327 PR-1524 </p>\n        </item>\n        <item>\n          <p>\n\t    It is no longer possible to disable the <c>temp_alloc</c>\n\t    allocator. Disabling it caused serious performance\n\t    degradations and was never what was wanted.</p>\n          <p>\n\t    Own Id: OTP-14651</p>\n        </item>\n        <item>\n\t    <p>The reduction cost of sending messages is now\n\t    constant. It will no longer scale according to the length\n\t    of the receiving process' message queue.</p>\n          <p>\n\t    Own Id: OTP-14667</p>\n        </item>\n        <item>\n          <p>\n\t    Improved loading of modules with <c>-on_load</c>\n\t    directive, to no longer block all schedulers when the\n\t    load operation is completed.</p>\n          <p>\n\t    Own Id: OTP-14680</p>\n        </item>\n        <item>\n          <p>\n\t    On platforms with real-time signals available, SIGRTMIN+1\n\t    is now used as the internal scheduler suspend signal\n\t    instead of SIGUSR2.</p>\n          <p>\n\t    Own Id: OTP-14682</p>\n        </item>\n        <item>\n\t    <p>When the value returned from a '<c>catch</c>'\n\t    expression is ignored, no stacktrace will be built if an\n\t    exception is caught. That will save time and produce less\n\t    garbage. There are also some minor optimizations of\n\t    '<c>try</c>/<c>catch</c>' both in the compiler and\n\t    run-time system.</p>\n          <p>\n\t    Own Id: OTP-14683</p>\n        </item>\n        <item>\n\t    <p>The guarantees and non-guarantees of\n\t    <c>erlang:get_stacktrace/0</c> are now documented.</p>\n          <p>\n\t    Own Id: OTP-14687</p>\n        </item>\n        <item>\n\t    <p>There is a new syntax in '<c>try/catch</c>' for\n\t    retrieving the stacktrace without calling\n\t    '<c>erlang:get_stacktrace/0</c>'. See the reference\n\t    manual for a description of the new syntax. The\n\t    '<c>erlang:get_stacktrace/0</c>' BIF is now\n\t    deprecated.</p>\n          <p>\n\t    Own Id: OTP-14692</p>\n        </item>\n        <item>\n          <p>\n\t    New 'used' option for <c>binary_to_term/2</c> that will\n\t    also return number of bytes actually read from the\n\t    binary. This enables easy access to any extra data in the\n\t    binary located directly after the returned term.</p>\n          <p>\n\t    Own Id: OTP-14780</p>\n        </item>\n        <item>\n          <p>\n\t    Added more statistics for\n\t    <c>erlang:system_info({allocator,A})</c> in the\n\t    <c>mbcs_pool</c> section.</p>\n          <p>\n\t    Own Id: OTP-14795 Aux Id: ERL-88 </p>\n        </item>\n        <item>\n\t    <p>Added <c>enif_ioq_peek_head</c> to retrieve Erlang\n\t    terms from NIF IO queues without having to resort to\n\t    copying.</p>\n          <p>\n\t    Own Id: OTP-14797</p>\n        </item>\n        <item>\n\t    <p>There is a new option '<c>makedep_side_effect</c>' for\n\t    the compiler and <c>-MMD</c> for '<c>erlc</c>' that\n\t    generates dependencies and continues to compile as\n\t    normal.</p>\n          <p>\n\t    Own Id: OTP-14830</p>\n        </item>\n        <item>\n\t    <p>Added <c>ets:whereis/1</c> for retrieving the table\n\t    identifier of a named table.</p>\n          <p>\n\t    Own Id: OTP-14884</p>\n        </item>\n        <item>\n\t    <p><c>seq_trace</c> labels may now be any erlang\n\t    term.</p>\n          <p>\n\t    Own Id: OTP-14899</p>\n        </item>\n        <item>\n          <p>\n\t    Optimized the common case of <c>monitor</c> followed by\n\t    <c>send</c> to the same local process. The monitor signal\n\t    is now delayed in order to be piggybacked with the sent\n\t    message and thereby only get one lock operation on the\n\t    message queue of the receiver. A delayed monitor signal\n\t    is flushed if no <c>send</c> has been done at the latest\n\t    when the process is scheduled out.</p>\n          <p>\n\t    Own Id: OTP-14901</p>\n        </item>\n        <item>\n          <p>\n\t    Make hipe compiled code work on x86_64 (amd64) with OS\n\t    security feature PIE, where executable code can be loaded\n\t    into a random location. Old behavior, if hipe was\n\t    enabled, was to disable PIE build options for the VM.</p>\n          <p>\n\t    Own Id: OTP-14903</p>\n        </item>\n        <item>\n\t    <p>The number of driver async threads will now default to\n\t    1 as the standard drivers do not use them anymore. Users\n\t    that changed this value to tweak the file driver should\n\t    replace <c>+A</c> with <c>+SDio</c> since it now uses\n\t    dirty IO schedulers instead of async threads.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14928</p>\n        </item>\n        <item>\n          <p>\n\t    Optimize <c>==</c> and <c>/=</c> for binaries with\n\t    different sizes to be constant in time instead of\n\t    proportional to the size of their common prefix.</p>\n          <p>\n\t    Own Id: OTP-14934 Aux Id: PR-1708 </p>\n        </item>\n        <item>\n          <p>\n\t    Refactorings making some internal process flags available\n\t    for other usage.</p>\n          <p>\n\t    Own Id: OTP-14948</p>\n        </item>\n        <item>\n          <p>\n\t    Removed need for HiPE to allocate native executable\n\t    memory in low 2GB address space on x86_64. Command line\n\t    option <c>+MXscs</c> is thereby obsolete and ignored.</p>\n          <p>\n\t    Own Id: OTP-14951</p>\n        </item>\n        <item>\n\t    <p>Added <c>enif_make_map_from_arrays</c> for creating a\n\t    populated map, analogous to\n\t    <c>enif_make_list_from_array</c>.</p>\n          <p>\n\t    Own Id: OTP-14954</p>\n        </item>\n        <item>\n\t    <p>Added configuration switches for busy-wait and wake up\n\t    thresholds for dirty schedulers, and changing these\n\t    settings for normal schedulers will no longer affect\n\t    dirty schedulers. </p> <p>Refer to the documentation for\n\t    details. The new switches are <seealso\n\t    marker=\"erl#+sbwtdcpu\">+sbwtdcpu</seealso>, <seealso\n\t    marker=\"erl#+sbwtdio\">+sbwtdio</seealso>, <seealso\n\t    marker=\"erl#+swtdcpu\">+swtdcpu</seealso>, and <seealso\n\t    marker=\"erl#+swtdio\">+swtdio</seealso>.</p> <p>The\n\t    default busy wait threshold for dirty scheduler threads\n\t    has also been lowered to <c>short</c>.</p>\n          <p>\n\t    Own Id: OTP-14959</p>\n        </item>\n        <item>\n          <p>\n\t    The list of \"taints\" now also includes dynamic loaded\n\t    drivers in addition to NIF libraries. Statically linked\n\t    drivers and NIF libraries that are part of erts are not\n\t    included. The \"taints\" are returned by\n\t    <c>system_info(taints)</c> and printed in the header of\n\t    <c>erl_crash.dump</c> files.</p>\n          <p>\n\t    Own Id: OTP-14960</p>\n        </item>\n        <item>\n\t    <p>Added <c>instrument:allocations</c> and\n\t    <c>instrument:carriers</c> for retrieving information\n\t    about memory utilization and fragmentation.</p>\n\t    <p>The old <c>instrument</c> interface has been removed,\n\t    as have the related options <c>+Mim</c> and\n\t    <c>+Mis</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14961</p>\n        </item>\n        <item>\n\t    <p>The process suspend functionality used by the <seealso\n\t    marker=\"erlang#suspend_process/2\">erlang:suspend_process/2</seealso>\n\t    BIF has been reimplemented using the newly introduced\n\t    true asynchronous signaling between processes. This\n\t    mainly to reduce memory usage in the process control\n\t    block of all processes, but also in order to simplify the\n\t    implementation.</p> <warning> <p>You can easily create\n\t    deadlocks if processes suspends each other (directly or\n\t    in circles). In ERTS versions prior to ERTS version 10.0,\n\t    the runtime system prevented such deadlocks, but this\n\t    prevention has now been removed due to performance\n\t    reasons.</p> </warning> <p>Other ERTS internal\n\t    functionality that used the previous process suspend\n\t    functionality have also been reimplemented to use\n\t    asynchronous signaling instead.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14964 Aux Id: OTP-14589 </p>\n        </item>\n        <item>\n\t    <p>Added the <c>nifs</c> option to\n\t    <c>?MODULE:module_info/1</c> for listing a module's\n\t    installed NIF functions.</p>\n          <p>\n\t    Own Id: OTP-14965</p>\n        </item>\n        <item>\n          <p>\n\t    New implementation of <c>erlang:process_info/[1,2]</c>.</p>\n          <p>\n\t    In the general case when inspecting another process, the\n\t    new implementation sends an asynchronous process-info\n\t    request signal to the other process and waits for the\n\t    result instead of locking the other process and reading\n\t    the result directly. In some special cases where no\n\t    conflicts occur, signal order wont be violated, and the\n\t    amount of data requested is guaranteed to be small, the\n\t    inspected process may be inspected directly.</p>\n          <p>\n\t    Appropriate amount of reductions are now also bumped when\n\t    inspecting a process.</p>\n          <p>\n\t    Own Id: OTP-14966</p>\n        </item>\n        <item>\n          <p>\n\t    Removed process start time from crash dump in order to\n\t    save memory in process control block.</p>\n          <p>\n\t    Own Id: OTP-14975 Aux Id: PR-1597 </p>\n        </item>\n        <item>\n          <p>\n\t    Optimize <c>erlang:put/2</c> when updating existing key\n\t    with a new immediate value (atom, small integer, pid,\n\t    port).</p>\n          <p>\n\t    Own Id: OTP-14976</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:process_info/1</c> has been changed to no\n\t    longer include <c>messages</c> by default. Instead\n\t    <c>erlang:process_info/2</c> should be used.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14986 Aux Id: PR-1745 </p>\n        </item>\n        <item>\n          <p>\n\t    New <c>erlang:system_info(ets_count)</c> to get total\n\t    number of ets tables existing at the local node.</p>\n          <p>\n\t    Own Id: OTP-14987</p>\n        </item>\n        <item>\n          <p>\n\t    New NIF functions: <c>enif_mutex_name</c>,\n\t    <c>enif_cond_name</c>, <c>enif_rwlock_name</c>,\n\t    <c>enif_thread_name</c>, <c>enif_vfprintf</c>,\n\t    <c>enif_vsnprintf</c>.</p>\n          <p>\n\t    Own Id: OTP-14994</p>\n        </item>\n        <item>\n\t    <p>When <c>erlang:system_flag(backtrace_depth, 0)</c> has\n\t    been called, all exceptions will now contain the entry\n\t    for <em>one</em> function (despite the zero). It used to\n\t    be that a hand-made stack backtrace passed to\n\t    <c>erlang:raise/3</c> would be be truncated to an empty\n\t    list.</p>\n          <p>\n\t    Own Id: OTP-15026</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug for named <c>ets</c> tables which could cause\n\t    unexpected results from matchspec iteration functions\n\t    (<c>ets:select*</c> and <c>ets:match*</c>) if the table\n\t    was deleted and recreated with the same name during the\n\t    iteration. The iteration could incorrectly continue\n\t    through the recreated table. The expected correct\n\t    behavior is now for the iteration call to fail with a\n\t    <c>badarg</c> exception if the table is deleted before\n\t    the iteration has completed.</p>\n          <p>\n\t    Own Id: OTP-15031</p>\n        </item>\n        <item>\n\t    <p>Two new guards BIFs operating on maps have been added:\n\t    <c>map_get/2</c> and <c>is_map_key/2</c>. They do the\n\t    same as <c>maps:get/2</c> and <c>maps:is_key/2</c>,\n\t    respectively, except that they are allowed to be used in\n\t    guards.</p>\n          <p>\n\t    Own Id: OTP-15037 Aux Id: PR-1784, PR-1802 </p>\n        </item>\n        <item>\n          <p>\n\t    Release run-queue lock while cleaning up terminated dirty\n\t    process.</p>\n          <p>\n\t    Own Id: OTP-15081</p>\n        </item>\n        <item>\n\t    <p>The callback module passed as <c>-epmd_module</c> to\n\t    erl has been expanded to be able to do name and port\n\t    resolving.</p> <p>Documentation has also been added in\n\t    the <seealso\n\t    marker=\"kernel:erl_epmd\"><c>erl_epmd</c></seealso>\n\t    reference manual and ERTS User's Guide <seealso\n\t    marker=\"erts:alt_disco\">How to Implement an Alternative\n\t    Service Discovery for Erlang Distribution</seealso>.</p>\n          <p>\n\t    Own Id: OTP-15086 Aux Id: PR-1694 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.6</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>List subtraction (The <c>--</c> operator) will now\n\t    yield properly on large inputs.</p>\n          <p>\n\t    Own Id: OTP-15371</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    ERTS internal trees of monitor structures could get into\n\t    an inconsistent state. This could cause <c>'DOWN'</c>\n\t    messages not to be delivered when they should, as well as\n\t    delivery of <c>'DOWN'</c> messages that should not be\n\t    delivered.</p>\n          <p>\n\t    This bug was introduced in ERTS version 9.0 (OTP 20.0)\n\t    and was fixed in ERTS version 10.0 (OTP 21.0) due to a\n\t    rewrite of the monitor code. That is, this bug only exist\n\t    in the OTP 20 release.</p>\n          <p>\n\t    Own Id: OTP-15399 Aux Id: ERL-751, ERIERL-262, OTP-14205 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed bug in <c>ets:select_replace</c> when called with a\n\t    fully bound key could cause a following call to\n\t    <c>ets:next</c> or <c>ets:prev</c> to crash the emulator\n\t    or return invalid result.</p>\n          <p>\n\t    Own Id: OTP-15346</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug which caused an emulator crash when\n\t    <c>enif_send()</c> was called by a NIF that executed on a\n\t    dirty scheduler. The bug was either triggered when the\n\t    NIF called <c>enif_send()</c> without a message\n\t    environment, or when the process executing the NIF was\n\t    <c>send</c> traced.</p>\n          <p>\n\t    Own Id: OTP-15223</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug causing some Erlang references to be\n\t    inconsistently ordered. This could for example cause\n\t    failure to look up certain elements with references as\n\t    keys in search data structures. This bug was introduced\n\t    in R13B02.</p>\n          <p>\n\t    Thanks to Simon Cornish for finding the bug and supplying\n\t    a fix.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-15225</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a race condition in the inet driver that could\n\t    cause receive to hang when the emulator was compiled with\n\t    gcc 8.</p>\n          <p>\n\t    Own Id: OTP-15158 Aux Id: ERL-654 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in generation of erl_crash.dump, which could\n\t    cause VM to crash.</p>\n          <p>\n\t    Bug exist since erts-9.2 (OTP-20.2).</p>\n          <p>\n\t    Own Id: OTP-15181</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a rare bug that could cause processes to be\n\t    scheduled after they had been freed.</p>\n          <p>\n\t    Own Id: OTP-15067 Aux Id: ERL-573 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed bug in <c>ets</c> that could cause VM crash if\n\t    process A terminates after fixating a table and process B\n\t    deletes the table at \"the same time\". The table fixation\n\t    could be done with <c>ets:safe_fixtable</c> or if process\n\t    A terminates in the middle of a long running\n\t    <c>select</c> or <c>match</c> call.</p>\n          <p>\n\t    Own Id: OTP-15109</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed bug in <c>enif_binary_to_term</c> which could cause\n\t    memory corruption for immediate terms (atoms, small\n\t    integers, pids, ports, empty lists).</p>\n          <p>\n\t    Own Id: OTP-15080</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>erlang:system_profile/2</c> that could\n\t    cause superfluous <c>{profile,_,active,_,_}</c> messages\n\t    for terminating processes.</p>\n          <p>\n\t    Own Id: OTP-15085</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a crash in <c>heart:get_cmd/0</c> when the\n\t    stored command was too long.</p>\n          <p>\n\t    Own Id: OTP-15034</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a <c>configure</c> test for <c>libz</c> internals\n\t    that unintentionally caused various native code in OTP to\n\t    link against <c>libz</c>. Under certain circumstances\n\t    this caused the build of OTP to fail.</p>\n          <p>\n\t    Own Id: OTP-14840 Aux Id: ERL-529 </p>\n        </item>\n        <item>\n          <p>\n\t    File names containing unicode codepoints larger than 255\n\t    were not correctly encoded in stack traces.</p>\n          <p>\n\t    Own Id: OTP-14847 Aux Id: ERL-544 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix HiPE bug for binary constructs like\n\t    <c>&lt;&lt;X/utf8&gt;&gt;</c> which could in rare cases\n\t    cause faulty results or VM crash.</p>\n          <p>\n\t    This fix affects both the <c>hipe</c> compiler and\n\t    <c>erts</c> runtime in an <em>incompatible</em> way. Old\n\t    hipe compiled files need to be recompiled to load and run\n\t    properly as native.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14850 Aux Id: PR-1664 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>term_to_binary/2</c> spec for\n\t    <c>minor_version</c>.</p>\n          <p>\n\t    Own Id: OTP-14876 Aux Id: ERL-548 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in erlang:binary_to_integer/2 where invalid\n\t    characters were not detected for bases larger then 10.\n\t    e.g. <c>binary_to_integer(&lt;&lt;\":\"&gt;&gt;, 16)</c>\n\t    would return 3 and not badarg as it should.</p>\n          <p>\n\t    Own Id: OTP-14879</p>\n        </item>\n        <item>\n\t    <p>Fixed bug in <c>float_to_list/2</c> and\n\t    <c>float_to_binary/2</c> with option <c>decimals</c> that\n\t    caused a faulty rounding up of the last decimal digit for\n\t    about 6% of floats with a fraction part.</p>\n\t    <p>For example, <c>float_to_list(0.145,\n\t    [{decimals,1}])</c> returned <c>\"0.2\"</c> instead of\n\t    <c>\"0.1\"</c>.</p>\n          <p>\n\t    Own Id: OTP-14890</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing slow hipe execution in modules loaded\n\t    early during boot or loaded by <c>code:atomic_load</c> or\n\t    <c>code:finish_loading</c>.</p>\n          <p>\n\t    Own Id: OTP-14891</p>\n        </item>\n        <item>\n\t    <p>Fixed a buffer overflow in an internal string\n\t    formatting function that could be hit if specifying a\n\t    long floating-point format specifier to\n\t    <c>erts_sprintf</c> or similar.</p>\n          <p>\n\t    Own Id: OTP-14920</p>\n        </item>\n        <item>\n\t    <p><c>erlang:iolist_to_iovec/1</c> and\n\t    <c>enif_inspect_iovec</c> will no longer fail when\n\t    provided with binaries that have been matched-out on a\n\t    non-byte boundary.</p>\n          <p>\n\t    Own Id: OTP-14921</p>\n        </item>\n        <item>\n\t    <p><c>iolist_to_binary/1</c> and\n\t    <c>erlang:iolist_to_iovec/1</c> will now badarg if\n\t    supplied with a bitstring (without a list).</p>\n          <p>\n\t    Own Id: OTP-14926</p>\n        </item>\n        <item>\n          <p>\n\t    Reject loading modules with names containing directory\n\t    separators ('/' or '\\' on Windows).</p>\n          <p>\n\t    Own Id: OTP-14933 Aux Id: ERL-564, PR-1716 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix potential dead-lock when the tracer process dies\n\t    while a the traced process is running on a dirty\n\t    scheduler.</p>\n          <p>\n\t    Own Id: OTP-14938</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    More crash dump info such as: process binary virtual heap\n\t    stats, full info for process causing out-of-mem during\n\t    GC, more port related info, and dirty scheduler info.</p>\n          <p>\n\t    Own Id: OTP-14820</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.2.1</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Improve search algorithm of abandoned memory carriers.\n\t    Instead of limited linear search, each allocator instance\n\t    maintain a balanced search tree of all its abandoned\n\t    carriers for faster and more exhaustive search.</p>\n          <p>\n\t    Own Id: OTP-14915 Aux Id: ERIERL-88 </p>\n        </item>\n        <item>\n          <p>\n\t    New erts_alloc command line options <c>+M_acnl</c> and\n\t    <c>+M_acfml</c> to limit carrier abandonment.</p>\n          <p>\n\t    Own Id: OTP-14916 Aux Id: ERIERL-88 </p>\n        </item>\n        <item>\n          <p>\n\t    New family of <c>erts_alloc</c> strategies: Age Order\n\t    First Fit. Similar to \"address order\", but instead the\n\t    oldest possible carrier is always chosen for allocation.</p>\n          <p>\n\t    Own Id: OTP-14917 Aux Id: ERIERL-88 </p>\n        </item>\n        <item>\n          <p>\n\t    Add possibility to change allocator options at runtime\n\t    with <c>system_info(erts_alloc, ...)</c>. Only option\n\t    <c>sbct</c> (single block carrier threshold) is currently\n\t    supported via this interface.</p>\n          <p>\n\t    Own Id: OTP-14918 Aux Id: ERIERL-88 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix a bug in tracing where the {caller} match spec\n\t    function would be set to undefined incorrectly when used\n\t    in conjunction with return_to or return_trace on some\n\t    functions.</p>\n          <p>\n\t    The functions effected are: erlang:put/2, erlang:erase/1,\n\t    erlang:process_info/1,2, erlang:nif_load/2,\n\t    erts_internal:garbage_collection/1 and\n\t    erts_internal:check_process_code/1.</p>\n          <p>\n\t    Because of this bug, the analysis done by fprof could\n\t    become incorrect when the functions above are the\n\t    tail-call in a function.</p>\n          <p>\n\t    Own Id: OTP-14677</p>\n        </item>\n        <item>\n          <p>\n\t    Fix emulator deadlock that would happen if\n\t    <c>trap_exit</c> was set to true and a process sends an\n\t    exit signal to itself using <c>exit(self(), Reason)</c>\n\t    while receive tracing was enabled for that process.</p>\n          <p>\n\t    Own Id: OTP-14678 Aux Id: ERL-495 </p>\n        </item>\n        <item>\n\t    <p>Writing of crash dumps is significantly faster.</p>\n\t    <p>Maps are now included in crash dumps.</p>\n\t    <p>Constants terms would only be shown in one process,\n\t    while other processes referencing the same constant term\n\t    would show a marker for incomplete heap. </p>\n          <p>\n\t    Own Id: OTP-14685 Aux Id: OTP-14611, OTP-14603, OTP-14595 </p>\n        </item>\n        <item>\n          <p>\n\t    The fallback home directory for windows has been changed\n\t    to be the PROFILE directory instead of the WINDOWS\n\t    directory. The fallback is used when the environment\n\t    variables HOMEDRIVE and HOMEPATH have not been set.</p>\n          <p>\n\t    Own Id: OTP-14691</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug for hipe compiled code using\n\t    <c>&lt;&lt;X/utf32&gt;&gt;</c> binary construction that\n\t    could cause faulty result or even VM crash.</p>\n          <p>\n\t    On architectures other than x86_64, code need to be\n\t    recompiled to benefit from this fix.</p>\n          <p>\n\t    Own Id: OTP-14740</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>erlang:garbage_collect/2</c> and\n\t    <c>erlang:check_process_code/3</c>, when called with\n\t    option <c>{async,ReqestId}</c>. Could cause VM crash or\n\t    heap corruption if <c>RequestId</c> was an immediate term\n\t    (like a pid, atom or small integer). Bug exists since\n\t    OTP-17.0.</p>\n          <p>\n\t    Own Id: OTP-14752</p>\n        </item>\n        <item>\n\t    <p>ERL_NIF_MINOR_VERSION wasn't bumped with the addition\n\t    of <c>enif_ioq_*</c>.</p>\n          <p>\n\t    Own Id: OTP-14779</p>\n        </item>\n        <item>\n\t    <p>Purging of loaded code that contained \"fake literals\"\n\t    (for example the magic reference obtained from\n\t    '<c>ets:new/2</c>') would crash the runtime system.\n\t    Corrected.</p>\n          <p>\n\t    Own Id: OTP-14791</p>\n        </item>\n        <item>\n\t    <p>Setting the size of the atom table to a number near\n\t    2147483647 (using the '<c>+t</c>' option) would cause the\n\t    emulator to exit with a failure to allocate a huge amount\n\t    of memory. This has been corrected. Also the usage\n\t    message for the '<c>+t</c>' option has been corrected to\n\t    show the correct upper limit 2147483647 instead of 0.</p>\n          <p>\n\t    Own Id: OTP-14796</p>\n        </item>\n        <item>\n\t    <p>Fixed a bug that prevented registered process names\n\t    from being resolved in lcnt results.</p>\n          <p>\n\t    Own Id: OTP-14803</p>\n        </item>\n        <item>\n\t    <p>Formatting bugs were fixed in several HiPE debug\n\t    BIFs.</p>\n          <p>\n\t    Own Id: OTP-14804</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Binaries and some other data in crash dumps are now\n\t    encoded in base64 (instead of in hex), which will reduce\n\t    the size of crash dumps.</p>\n\t    <p>A few bugs in the handling of sub binaries in\n\t    <c>crashdump_viewer</c> have been fixed.</p>\n          <p>\n\t    Own Id: OTP-14686</p>\n        </item>\n        <item>\n          <p>\n\t    Micro optimization for send operations of messages to\n\t    other nodes. The local ack-message, which is otherwise\n\t    sent back from TPC/IP port driver to sending client\n\t    process, is now ignored earlier for distributed send\n\t    operations.</p>\n          <p>\n\t    Own Id: OTP-14689</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a bug in file closure on Unix; close(2) was\n\t    retried on EINTR which could cause a different (recently\n\t    opened) file to be closed as well.</p>\n          <p>\n\t    Own Id: OTP-14775</p>\n        </item>\n        <item>\n          <p>\n\t    A race-condition when tearing down a connection with\n\t    active node monitors could cause the runtime system to\n\t    crash.</p>\n          <p>\n\t    This bug was introduced in ERTS version 8.0 (OTP 19.0).</p>\n          <p>\n\t    Own Id: OTP-14781 Aux Id: OTP-13047 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Microstate accounting sometimes produced incorrect\n\t    results for dirty schedulers.</p>\n          <p>\n\t    Own Id: OTP-14707</p>\n        </item>\n        <item>\n\t    <p>Fixed a regression in <c>zlib:gunzip/1</c> that\n\t    prevented it from working when the decompressed size was\n\t    a perfect multiple of 16384. This regression was\n\t    introduced in 20.1.1</p>\n          <p>\n\t    Own Id: OTP-14730 Aux Id: ERL-507 </p>\n        </item>\n        <item>\n\t    <p>Fixed a memory corruption bug in\n\t    <c>enif_inspect_iovec</c>; writable binaries stayed\n\t    writable after entering the iovec.</p>\n          <p>\n\t    Own Id: OTP-14745</p>\n        </item>\n        <item>\n\t    <p>Fixed a crash in <c>enif_inspect_iovec</c> on\n\t    encountering empty binaries.</p>\n          <p>\n\t    Own Id: OTP-14750</p>\n        </item>\n        <item>\n\t    <p><c>zlib:deflateParams/3</c> will no longer return\n\t    <c>buf_error</c> when called after <c>zlib:deflate/2</c>\n\t    with zlib <c>1.2.11</c>.</p>\n          <p>\n\t    Own Id: OTP-14751</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Added zlib:set_controlling_process/2 to move a\n\t    zstream() between processes.</p>\n          <p>\n\t    Own Id: OTP-14672 Aux Id: ERL-494 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix so that schedulers are bound correctly when the first\n\t    available cpu is not the first detected cpu. e.g. when\n\t    using \"taskset -c X..Y\" when X is not equal to 0.</p>\n          <p>\n\t    Own Id: OTP-14694</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed bug that could cause a VM crash when a corrupt\n\t    message is received on distribution channel from other\n\t    node.</p>\n          <p>\n\t    Own Id: OTP-14661 Aux Id: ERIERL-80 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>The new zlib module returned a data_error when\n\t    inflating concatenated streams, which was incompatible\n\t    with the old module's behavior of returning the\n\t    uncompressed data up to the end of the first stream.</p>\n          <p>\n\t    Own Id: OTP-14648</p>\n        </item>\n        <item>\n\t    <p>zlib:gunzip/1 will no longer stop at the end of the\n\t    first stream when decompressing concatenated gzip\n\t    files.</p>\n          <p>\n\t    Own Id: OTP-14649</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Changed <c>erlang:apply/2</c> to raise a <c>badarg</c>\n\t    exception if the second argument is not a proper list.\n\t    Previous behavior was a misleading <c>undef</c>\n\t    exception.</p>\n          <p>\n\t    Own Id: OTP-14490 Aux Id: ERL-432 </p>\n        </item>\n        <item>\n\t    <p>On macOS, <c>crypto</c> would crash if <c>observer</c>\n\t    had been started before <c>crypto</c>. On the beta for\n\t    macOS 10.13 (High Sierra), <c>crypto</c> would crash.\n\t    Both of those bugs have been fixed.</p>\n          <p>\n\t    Own Id: OTP-14499 Aux Id: ERL-251 ERL-439 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in enif_whereis_pid/port that could cause heap\n\t    corruption in rare cases.</p>\n          <p>\n\t    Own Id: OTP-14523</p>\n        </item>\n        <item>\n          <p>\n\t    Fix so that trace messages generated when in a dirty nif\n\t    are flushed correctly when the dirty nif is done\n\t    executing.</p>\n          <p>\n\t    Own Id: OTP-14538</p>\n        </item>\n        <item>\n          <p>\n\t    Fix escape code handling when using ANSI color codes in\n\t    the shell.</p>\n          <p>\n\t    Own Id: OTP-14549 Aux Id: PR1536 </p>\n        </item>\n        <item>\n          <p>\n\t    Upgraded the ERTS internal PCRE library from version 8.40\n\t    to version 8.41. See <url\n\t    href=\"http://pcre.org/original/changelog.txt\">http://pcre.org/original/changelog.txt</url>\n\t    for information about changes made to PCRE. This library\n\t    implements major parts of the <seealso\n\t    marker=\"stdlib:re\"><c>re</c></seealso> regular\n\t    expressions module.</p>\n          <p>\n\t    Own Id: OTP-14574</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug causing <c>statistics(runtime)</c> to produce\n\t    negative values and a bug in\n\t    <c>statistics(wall_clock)</c> causing it to produce\n\t    values one second too long.</p>\n          <p>\n\t    <c>statistics(runtime)</c> now also use\n\t    <c>getrusage()</c> as source when available preventing\n\t    the returned value from wrapping as frequent as before.</p>\n          <p>\n\t    Own Id: OTP-14597 Aux Id: ERL-465 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed small memory leak that could occur when sending to\n\t    a terminating port.</p>\n          <p>\n\t    Own Id: OTP-14609</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing VM crash when a module with\n\t    <c>-on_load</c> directive is loaded while\n\t    <c>erlang:trace(on_load, ...)</c> is enabled.</p>\n          <p>\n\t    Own Id: OTP-14612</p>\n        </item>\n        <item>\n\t    <p>A warning that the compiler may optimize away atoms\n\t    have been added to the documentation of\n\t    <c>list_to_existing_atom/1</c> and\n\t    <c>binary_to_existing_atom/2</c>.</p>\n          <p>\n\t    Own Id: OTP-14614 Aux Id: ERL-453 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Lock counting can now be fully toggled at runtime in\n\t    the lock counting emulator (<c>-emu_type lcnt</c>).\n\t    Everything is enabled by default to match the old\n\t    behavior, but specific categories can be toggled at will\n\t    with minimal runtime overhead when disabled. Refer to the\n\t    documentation on <c>lcnt:rt_mask/1</c> for details.</p>\n          <p>\n\t    Own Id: OTP-13170</p>\n        </item>\n        <item>\n\t    <p>The <c>zlib</c> module has been refactored and all its\n\t    operations will now yield appropriately, allowing them to\n\t    be used freely in concurrent applications.</p> <p>The\n\t    following functions have been deprecated, but will not\n\t    produce compiler warnings until OTP 21:\n\t    <c>zlib:adler32</c>, <c>zlib:crc32</c>,\n\t    <c>zlib:inflateChunk</c>, <c>zlib:getBufSize</c>,\n\t    <c>zlib:setBufSize</c>.</p> <p>The behavior of throwing\n\t    an error when a dictionary is required for decompression\n\t    has also been deprecated. Refer to the documentation on\n\t    <c>inflateSetDictionary/2</c> for details.</p>\n          <p>\n\t    Own Id: OTP-14185</p>\n        </item>\n        <item>\n\t    <p><c>lcnt:collect</c> and <c>lcnt:clear</c> will no\n\t    longer block all other threads in the runtime system.</p>\n          <p>\n\t    Own Id: OTP-14412</p>\n        </item>\n        <item>\n\t    <p>Add <c>erlang:iolist_to_iovec/1</c>, which converts an\n\t    iolist() to an erlang:iovec(), which suitable for use\n\t    with <c>enif_inspect_iovec</c>.</p>\n          <p>\n\t    Own Id: OTP-14520</p>\n        </item>\n        <item>\n\t    <p>When provided with bad arguments, the <c>zlib</c>\n\t    module will now raise named exceptions instead of just\n\t    <c>badarg</c>. For example, <c>not_initialized</c> when\n\t    using <c>zlib:inflate/2</c> with an uninitialized\n\t    stream.</p>\n          <p>\n\t    Own Id: OTP-14527</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:halt/2</c> allows any Unicode string as slogan\n\t    for the crash dump.</p>\n          <p>\n\t    Own Id: OTP-14553</p>\n        </item>\n        <item>\n\t    <p>Add new nif API functions for managing an I/O Queue.\n\t    The added functions are:</p> <list type=\"bulleted\">\n\t    <item><seealso marker=\"erl_nif#enif_ioq_create\">\n\t    <c>enif_ioq_create()</c></seealso></item> <item><seealso\n\t    marker=\"erl_nif#enif_ioq_destroy\">\n\t    <c>enif_ioq_destroy()</c></seealso></item> <item><seealso\n\t    marker=\"erl_nif#enif_ioq_enq_binary\">\n\t    <c>enif_ioq_enq_binary()</c></seealso></item>\n\t    <item><seealso marker=\"erl_nif#enif_ioq_enqv\">\n\t    <c>enif_ioq_enqv()</c></seealso></item> <item><seealso\n\t    marker=\"erl_nif#enif_ioq_deq\">\n\t    <c>enif_ioq_deq()</c></seealso></item> <item><seealso\n\t    marker=\"erl_nif#enif_ioq_peek\">\n\t    <c>enif_ioq_peek()</c></seealso></item> <item><seealso\n\t    marker=\"erl_nif#enif_inspect_iovec\">\n\t    <c>enif_inspect_iovec()</c></seealso></item>\n\t    <item><seealso marker=\"erl_nif#enif_free_iovec\">\n\t    <c>enif_free_iovec()</c></seealso></item> </list>\n          <p>\n\t    Own Id: OTP-14598</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed bug in <c>binary_to_term</c> and\n\t    <c>binary_to_atom</c> that could cause VM crash.\n\t    Typically happens when the last character of an UTF8\n\t    string is in the range 128 to 255, but truncated to only\n\t    one byte. Bug exists in <c>binary_to_term</c> since ERTS\n\t    version 5.10.2 (OTP_R16B01) and <c>binary_to_atom</c>\n\t    since ERTS version 9.0 (OTP-20.0).</p>\n          <p>\n\t    Own Id: OTP-14590 Aux Id: ERL-474 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A timer internal bit-field used for storing scheduler id\n\t    was too small. As a result, VM internal timer data\n\t    structures could become inconsistent when using 1024\n\t    schedulers on the system. Note that systems with less\n\t    than 1024 schedulers are not effected by this bug.</p>\n          <p>\n\t    This bug was introduced in ERTS version 7.0 (OTP 18.0).</p>\n          <p>\n\t    Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468 </p>\n        </item>\n        <item>\n          <p>\n\t    Automatic cleanup of a BIF timer, when the owner process\n\t    terminated, could race with the timeout of the timer.\n\t    This could cause the VM internal data structures to\n\t    become inconsistent which very likely caused a VM crash.</p>\n          <p>\n\t    This bug was introduced in ERTS version 9.0 (OTP 20.0).</p>\n          <p>\n\t    Own Id: OTP-14554 Aux Id: OTP-14356, ERL-468 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Binary append operations did not check for overflow,\n\t    resulting in nonsensical results when huge binaries were\n\t    appended.</p>\n          <p>\n\t    Own Id: OTP-14524</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Added missing release notes for OTP-14491 (\"performance\n\t    bug in pre-allocators\") which was included in erts-9.0.1\n\t    (OTP-20.0.1).</p>\n          <p>\n\t    Own Id: OTP-14494</p>\n        </item>\n        <item>\n\t    <p>Fixed a bug that prevented TCP sockets from being\n\t    closed properly on send timeouts.</p>\n          <p>\n\t    Own Id: OTP-14509</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in operator <c>bxor</c> causing erroneuos\n\t    result when one operand is a big <em>negative</em>\n\t    integer with the lowest <c>N*W</c> bits as zero and the\n\t    other operand not larger than <c>N*W</c> bits. <c>N</c>\n\t    is an integer of 1 or larger and <c>W</c> is 32 or 64\n\t    depending on word size.</p>\n          <p>\n\t    Own Id: OTP-14514</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug in gen_tcp:send where it never returned when\n\t    repeatedly called on a remotely closed TCP socket.</p>\n          <p>\n\t    Own Id: OTP-13939 Aux Id: ERL-193 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed segfault that could happen during cleanup of\n\t    aborted erlang:port_command/3 calls. A port_command is\n\t    aborted if the port is closed at the same time as the\n\t    port_command was issued. This bug was introduced in\n\t    erts-8.0.</p>\n          <p>\n\t    Own Id: OTP-14481</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed implementation of <c>statistics(wall_clock)</c> and\n\t    <c>statistics(runtime)</c> so that values do not\n\t    unnecessarily wrap due to the emulator. Note that the\n\t    values returned by <c>statistics(runtime)</c> may still\n\t    wrap due to limitations in the underlying functionality\n\t    provided by the operating system.</p>\n          <p>\n\t    Own Id: OTP-14484</p>\n        </item>\n        <item>\n\t  <p>\n\t    Fix performance bug in pre-allocators that could cause\n\t    them to permanently fall back on normal more expensive memory\n\t    allocation. Pre-allocators are used for quick allocation\n\t    of short lived meta data used by messages and other\n\t    scheduled tasks. Bug exists since OTP_R15B02.\n\t    [this release note was missing in erts-9.0.1]</p>\n\t  <p>\n\t    Own Id: OTP-14491</p>\n\t</item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 9.0</title>\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fix various bugs regarding loading, upgrade and purge\n\t    of HiPE compiled code:</p> <list> <item>The native code\n\t    memory for a purged module was never deallocated.</item>\n\t    <item>Wrong functions could in some cases be called after\n\t    a module upgrade.</item>\n\t    <item><c>erlang:check_process_code</c> did not check for\n\t    recursive calls made from native code.</item> </list>\n          <p>\n\t    Own Id: OTP-13968</p>\n        </item>\n        <item>\n          <p>\n\t    Hipe optional LLVM backend does require LLVM version 3.9\n\t    or later as older versions forced strong dependencies on\n\t    erts internals structures.</p>\n          <p>\n\t    Own Id: OTP-14238</p>\n        </item>\n        <item>\n\t    <p>When an exception such as '<c>throw(HugeTerm)</c>' was\n\t    caught, <c>HugeTerm</c> term would be kept in the process\n\t    until the next exception occurred, potentially increasing\n\t    the heap size for the process. That has been\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-14255 Aux Id: OTP-14400, OTP-14401 </p>\n        </item>\n        <item>\n          <p>\n\t    Slogans in crash dumps have been extended to print more\n\t    complex terms.</p>\n          <p>\n\t    Own Id: OTP-14303</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug when using <c>enif_inspect_binary</c> in\n\t    combination with <c>enif_copy</c>. In some circumstances\n\t    the inspected binary could be reallocated by the\n\t    <c>enif_copy</c> call when it shouldn't have been.</p>\n          <p>\n\t    Own Id: OTP-14304</p>\n        </item>\n        <item>\n          <p>\n\t    The address family <c>local</c> (AF_UNIX / AF_LOCAL) now\n\t    does not ensure zero termination of Linux Abstract\n\t    Addresses so they can use all bytes.</p>\n          <p>\n\t    Own Id: OTP-14305</p>\n        </item>\n        <item>\n          <p>\n\t    Use <c>-fno-PIE</c> for Gentoo Hardened and others that\n\t    don't accept linker flag <c>-no-pie</c>.</p>\n          <p>\n\t    Own Id: OTP-14307 Aux Id: PR-1379 </p>\n        </item>\n        <item>\n          <p>\n\t    Disable hipe for <c>ppc64le</c> architecture (little\n\t    endian) as it is not, and has never been, supported. It\n\t    was earlier equated with <c>ppc64</c> (big endian) which\n\t    lead to broken build without <c>--disable-hipe</c>.</p>\n          <p>\n\t    Own Id: OTP-14314 Aux Id: ERL-369, PR-1394 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix 'epmd -kill' to return a failure exit status code if\n\t    epmd was not killed because of some error.</p>\n          <p>\n\t    Own Id: OTP-14324</p>\n        </item>\n        <item>\n\t    <p>Fixed the following dirty scheduler related bugs:</p>\n\t    <list> <item><p>the <c>+SDPcpu</c> command line argument\n\t    could cause the amount of dirty CPU schedulers to be set\n\t    to zero</p></item>\n\t    <item><p><c>erlang:system_flag(multi_scheduling, _)</c>\n\t    failed when only one normal scheduler was used together\n\t    with dirty scheduler support</p></item> </list>\n          <p>\n\t    Own Id: OTP-14335</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erlexec to handle mismatch in sysconf and proc fs\n\t    when figuring out the cpu topology. This behaviour has\n\t    been seen when using docker together with\n\t    <c>--cpuset-cpus</c>.</p>\n          <p>\n\t    Own Id: OTP-14352</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed memory segment cache used for multiblock carriers.\n\t    Huge (> 2GB) memory segments could cause a VM crash.\n\t    Creation of such huge memory segments used for multiblock\n\t    carriers is however very uncommon.</p>\n          <p>\n\t    Own Id: OTP-14360 Aux Id: ERL-401, PR-1417 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing <c>code:is_module_native</c> to falsely\n\t    return true when <c>local</c> call trace is enabled for\n\t    the module.</p>\n          <p>\n\t    Own Id: OTP-14390</p>\n        </item>\n        <item>\n          <p>\n\t    Fix emulator crash when receive tracing on a\n\t    <c>trace_delivered</c> message.</p>\n          <p>\n\t    Own Id: OTP-14411</p>\n        </item>\n        <item>\n          <p>\n\t    Fix file:sendfile error handling on SunOS when a\n\t    connection is closed during transmission.</p>\n          <p>\n\t    Own Id: OTP-14424</p>\n        </item>\n        <item>\n          <p>\n\t    <c>escript</c> did not handle paths with spaces correct.</p>\n          <p>\n\t    Own Id: OTP-14433</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erroneous lock check assertion when <c>wx</c> is run\n\t    on MacOS X.</p>\n          <p>\n\t    Own Id: OTP-14437 Aux Id: ERL-360 </p>\n        </item>\n        <item>\n\t    <p>Active-mode TCP sockets are now cleaned up properly on\n\t    send/shutdown errors.</p>\n          <p>\n\t    Own Id: OTP-14441 Aux Id: ERL-430 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix compilation of hipe_mkliterals when the LIBS\n\t    configure variable had to be set.</p>\n          <p>\n\t    Own Id: OTP-14447</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Added <c>erlang:garbage_collect/2</c> that takes an\n\t    option list as the last argument that can be used to\n\t    control whether a minor or a major garbage collection is\n\t    to be done. Doing a minor collection only collects terms\n\t    that have recently died, but is cheaper than a major\n\t    collection.</p>\n          <p>\n\t    Own Id: OTP-11695</p>\n        </item>\n        <item>\n          <p>\n\t    Optimized test for tuples with an atom as first element.</p>\n          <p>\n\t    Own Id: OTP-12148</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang literals are no longer copied during process to\n\t    process messaging.</p>\n          <p>\n\t    Own Id: OTP-13529</p>\n        </item>\n        <item>\n\t    <p>Add support in the <c>erl_nif</c> API for asynchronous\n\t    message notifications when sockets or other file\n\t    descriptors are ready to accept read or write operations.\n\t    The following functions have been added:</p> <list>\n\t    <item><p>enif_select</p></item>\n\t    <item><p>enif_monitor_process</p></item>\n\t    <item><p>enif_demonitor_process</p></item>\n\t    <item><p>enif_compare_monitors</p></item>\n\t    <item><p>enif_open_resource_type_x</p></item> </list>\n          <p>\n\t    Own Id: OTP-13684</p>\n        </item>\n        <item>\n\t    <p>There are two new guard BIFs '<c>floor/1</c>' and\n\t    '<c>ceil/1</c>'. They both return integers. In the\n\t    '<c>math</c>' module, there are two new BIFs with the\n\t    same names that return floating point values.</p>\n          <p>\n\t    Own Id: OTP-13692</p>\n        </item>\n        <item>\n          <p>\n\t    Remove deprecated <c>erlang:hash/2</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13827</p>\n        </item>\n        <item>\n\t    <p>Replaced usage of deprecated symbolic <seealso\n\t    marker=\"erts:erlang#type-time_unit\"><c>time\n\t    unit</c></seealso> representations.</p>\n          <p>\n\t    Own Id: OTP-13831 Aux Id: OTP-13735 </p>\n        </item>\n        <item>\n          <p>\n\t    Added support in zlib for extraction of the inflation\n\t    dictionary.</p>\n          <p>\n\t    Own Id: OTP-13842</p>\n        </item>\n        <item>\n          <p>\n\t    The previously used purge strategy has been removed. The\n\t    optional purge strategy introduced in ERTS version 8.1 is\n\t    now the only strategy available.</p>\n          <p>\n\t    The new purge strategy is slightly incompatible with the\n\t    old strategy. Previously processes holding <c>fun</c>s\n\t    that referred to the module being purged either failed a\n\t    soft purge, or was killed during a hard purge. The new\n\t    strategy completely ignores <c>fun</c>s. If <c>fun</c>s\n\t    referring to the code being purged exist, and are used\n\t    after a purge, an exception will be raised upon usage.\n\t    That is, the behavior will be exactly the same as the\n\t    case when a <c>fun</c> is received by a process after the\n\t    purge.</p>\n          <p>\n\t    For more information see the documentation of <seealso\n\t    marker=\"erts:erlang#check_process_code/3\"><c>erlang:check_process_code/3</c></seealso>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13844 Aux Id: OTP-13833 </p>\n        </item>\n        <item>\n          <p>\n\t    Dirty schedulers are now enabled by default when the\n\t    runtime system is built with SMP support.</p>\n          <p>\n\t    Own Id: OTP-13860</p>\n        </item>\n        <item>\n          <p>\n\t    Improved ETS lookup/insert/delete speed for large\n\t    <c>set</c>, <c>bag</c> and <c>duplicate_bag</c> by a\n\t    significant reduction of the hash load factor. This speed\n\t    improvement comes at the expense of less than one word\n\t    per table entry. Tables with less than 256 entries are\n\t    not affected at all.</p>\n          <p>\n\t    Own Id: OTP-13903</p>\n        </item>\n        <item>\n          <p>\n\t    The NIF library <c>reload</c> feature is not supported\n\t    anymore. It has been marked as deprecated since OTP R15B.\n\t    This means that you are only allowed to do one successful\n\t    call to <c>erlang:load_nif/2</c> for each module\n\t    instance. A second call to <c>erlang:load_nif/2</c> will\n\t    return <c>{error, {reload, _}}</c> even if the NIF\n\t    library implements the <c>reload</c> callback.</p>\n          <p>\n\t    Runtime upgrade of a NIF library is still supported by\n\t    using the Erlang module upgrade mechanics with a current\n\t    and an old module instance existing at the same time with\n\t    their corresponding NIF libraries.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13908</p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>erlang:system_info(atom_count)</c> and\n\t    <c>erlang:system_info(atom_limit)</c> to provide a way to\n\t    retrieve the current and maximum number of atoms.</p>\n          <p>\n\t    Own Id: OTP-13976</p>\n        </item>\n        <item>\n\t    <p>The function <c>fmod/2</c> has been added to the\n\t    <c>math</c> module.</p>\n          <p>\n\t    Own Id: OTP-14000</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:load_nif/2</c> returns new error type\n\t    <c>notsup</c> when called for a HiPE compiled module,\n\t    which is not supported.</p>\n          <p>\n\t    Own Id: OTP-14002</p>\n        </item>\n        <item>\n          <p>\n\t    Add driver and nif lock instrumentation to lcnt</p>\n          <p>\n\t    Own Id: OTP-14069</p>\n        </item>\n        <item>\n          <p>\n\t    Reduce memory pressure by converting sub-binaries to\n\t    heap-binaries when possible. This is done during garbage\n\t    collection.</p>\n          <p>\n\t    Own Id: OTP-14149</p>\n        </item>\n        <item>\n          <p>\n\t    Dirty schedulers are now enabled and supported on Erlang\n\t    runtime systems with SMP support.</p>\n          <p>\n\t    Besides support for dirty NIFs also support for dirty\n\t    BIFs and dirty garbage collection have been introduced.\n\t    All garbage collections that potentially will take a long\n\t    time to complete are now performed on dirty schedulers if\n\t    enabled.</p>\n          <p>\n\t    <seealso\n\t    marker=\"erts:erlang#statistics/1\"><c>erlang:statistics/1</c></seealso>\n\t    with arguments inspecting scheduler and run queue states\n\t    have been changed due to the dirty scheduler support.\n\t    Code using this functionality may have to be rewritten\n\t    taking these incompatibilities into consideration.\n\t    Examples of such uses are calls to <seealso\n\t    marker=\"erts:erlang#statistics_scheduler_wall_time\"><c>erlang:statistics(scheduler_wall_time)</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erlang#statistics_total_run_queue_lengths\"><c>statistics(total_run_queue_lengths)</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erlang#statistics_total_active_tasks\"><c>statistics(total_active_tasks)</c></seealso>,\n\t    etc.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14152</p>\n        </item>\n        <item>\n\t    <p>Atoms may now contain arbitrary Unicode\n\t    characters.</p>\n          <p>\n\t    Own Id: OTP-14178</p>\n        </item>\n        <item>\n          <p>\n\t    Introduce an event manager in Erlang to handle OS\n\t    signals. A subset of OS signals may be subscribed to and\n\t    those are described in the Kernel application.</p>\n          <p>\n\t    Own Id: OTP-14186</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>escript</c> program now handles symbolic links to\n\t    escripts.</p>\n          <p>\n\t    This is useful for standalone systems with\n\t    <c>escript</c>s residing on a bin directory not included\n\t    in the execution path (as it may cause their <c>erl</c>\n\t    program(s) to override the desired one). Instead the\n\t    <c>escript</c>s can be referred to via symbolic links\n\t    from a bin directory in the path.</p>\n          <p>\n\t    Own Id: OTP-14201 Aux Id: PR-1293 </p>\n        </item>\n        <item>\n          <p>\n\t    All uses of the magic binary kludge has been replaced by\n\t    uses of erlang references.</p>\n          <p>\n\t    A magic binary was presented as an empty binary, but\n\t    actually referred other data internally in the Erlang VM.\n\t    Since they were presented as empty binaries, different\n\t    magic binaries compared as equal, and also lost their\n\t    internal data when passed out of an erlang node.</p>\n          <p>\n\t    The new usage of references has not got any of these\n\t    strange semantic issues, and the usage of these\n\t    references has been optimized to give the same\n\t    performance benefits as well as memory usage benefits as\n\t    magic binaries had.</p>\n          <p>\n\t    A couple of examples of previous uses of magic binaries\n\t    are match specifications and NIF resources.</p>\n          <p>\n\t    Own Id: OTP-14205</p>\n        </item>\n        <item>\n          <p>\n\t    The non-smp emulators have been deprecated and are\n\t    scheduled for removal in OTP-21.</p>\n          <p>\n\t    In preparation for this, the threaded non-smp emulator is\n\t    no longer built by default and has to be enabled using\n\t    the --enable-plain-emulator to configure.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14272</p>\n        </item>\n        <item>\n          <p>\n\t    Allow HiPE to run on VM built with\n\t    <c>--enable-m32-build</c>.</p>\n          <p>\n\t    Own Id: OTP-14330 Aux Id: PR-1397 </p>\n        </item>\n        <item>\n          <p>\n\t    Upgraded the OTP internal PCRE library from version 8.33\n\t    to version 8.40. This library is used for implementation\n\t    of the <seealso marker=\"stdlib:re\"><c>re</c></seealso>\n\t    regular expressions module.</p>\n          <p>\n\t    Besides various bug fixes, the new version allows for\n\t    better stack protection. In order to utilize this\n\t    feature, the stack size of normal scheduler threads is\n\t    now by default set to 128 kilo words on all platforms.\n\t    The stack size of normal scheduler threads can be set\n\t    upon system start by passing the <seealso\n\t    marker=\"erts:erl#sched_thread_stack_size\"><c>+sss</c></seealso>\n\t    command line argument to the <seealso\n\t    marker=\"erts:erl\"><c>erl</c></seealso> command.</p>\n          <p>\n\t    See <url\n\t    href=\"http://pcre.org/original/changelog.txt\">http://pcre.org/original/changelog.txt</url>\n\t    for information about changes made to PCRE between the\n\t    versions 8.33 and 8.40.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-14331 Aux Id: ERL-208 </p>\n        </item>\n        <item>\n          <p>\n\t    Remove generation of atoms in old latin1 external format\n\t    in the distribution between erlang nodes,\n\t    <c>erl_interface</c>, and <c>jinterface</c>. The new utf8\n\t    format for atoms was introduced in OTP R16. An OTP 20\n\t    node can therefore not connect to nodes older than R16.</p>\n          <p>\n\t    Atoms that can be encoded using latin1 are still encoded\n\t    by <c>term_to_binary()</c> using latin1 encoding. Note\n\t    that all atoms will by default be encoded using utf8 in a\n\t    future Erlang/OTP release. For more information see the\n\t    documentation of <seealso\n\t    marker=\"erts:erlang#term_to_binary/2\"><c>erlang:term_to_binary/2</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-14337</p>\n        </item>\n        <item>\n          <p>\n\t    Added function <c>re:version/0</c> which returns\n\t    information about the OTP internal PCRE version used for\n\t    implementation of the <c>re</c> module.</p>\n          <p>\n\t    Own Id: OTP-14347 Aux Id: PR-1412 </p>\n        </item>\n        <item>\n          <p>\n\t    Added new debug bif <c>erlang:list_to_port/1</c>.</p>\n          <p>\n\t    Own Id: OTP-14348</p>\n        </item>\n        <item>\n          <p>\n\t    Various improvements of timer management internally in\n\t    the VM. These improvements both reduced memory\n\t    consumption of timer wheels as well as reduce the amount\n\t    of work that has to be performed in order to handle\n\t    timers.</p>\n          <p>\n\t    Own Id: OTP-14356</p>\n        </item>\n        <item>\n\t    <p> Sockets can now be bound to device (SO_BINDTODEVICE)\n\t    on platforms where it is supported. </p> <p> This has\n\t    been implemented e.g to support VRF-Lite under Linux; see\n\t    <url\n\t    href=\"https://www.kernel.org/doc/Documentation/networking/vrf.txt\">\n\t    VRF </url>, and GitHub pull request <url\n\t    href=\"https://github.com/erlang/otp/pull/1326\">#1326</url>.\n\t    </p>\n          <p>\n\t    Own Id: OTP-14357 Aux Id: PR-1326 </p>\n        </item>\n        <item>\n\t    <p>Added the following <seealso\n\t    marker=\"erl\"><c>erl</c></seealso> command line arguments\n\t    with which you can set suggested stack for dirty\n\t    schedulers:</p> <taglist> <tag><seealso\n\t    marker=\"erl#dcpu_sched_thread_stack_size\"><c>+sssdcpu</c></seealso></tag>\n\t    <item><p>for dirty CPU schedulers</p></item>\n\t    <tag><seealso\n\t    marker=\"erl#dio_sched_thread_stack_size\"><c>+sssdio</c></seealso></tag>\n\t    <item><p>for dirty IO schedulers</p></item> </taglist>\n\t    <p>The default suggested stack size for dirty schedulers\n\t    is 40 kilo words.</p>\n          <p>\n\t    Own Id: OTP-14380</p>\n        </item>\n        <item>\n          <p>\n\t    Changed erts startup program name, argv 0, to use the\n\t    environment variable <c>ESCRIPT_NAME</c> so that\n\t    <c>erlc</c>, <c>dialyzer</c>, <c>typer</c>,\n\t    <c>ct_run</c>, or the escript name can be seen with\n\t    external programs, such as ps and htop (depending on\n\t    options), on unix.</p>\n          <p>\n\t    Own Id: OTP-14381</p>\n        </item>\n        <item>\n          <p>\n\t    Improvements of <c>escript</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-14384 Aux Id: OTP-14201 </p>\n        </item>\n        <item>\n          <p>\n\t    Add function <c>enif_hash</c> for NIFs to calculate hash\n\t    values of arbitrary terms.</p>\n          <p>\n\t    Own Id: OTP-14385 Aux Id: PR-1413 </p>\n        </item>\n        <item>\n\t    <p>'<c>./configure --enable-lock-counter</c>' will\n\t    enabling building of an additional emulator that has\n\t    support for lock counting. (The option previously\n\t    existed, but would turn on lock counting in the default\n\t    emulator being built.) To start the lock-counting\n\t    emulator, use '<c>erl -emu_type lcnt</c>'.</p>\n\t    <p>On Windows, <c>erl</c> recognized the undocumented\n\t    option <c>-debug</c> for starting a debug-compiled\n\t    emulator. That option has been removed. Use '<c>erl\n\t    -emu_type debug</c>' instead.</p>\n          <p>\n\t    Own Id: OTP-14407</p>\n        </item>\n        <item>\n          <p>\n\t    Warnings have been added to the relevant documentation\n\t    about not using un-secure distributed nodes in exposed\n\t    environments.</p>\n          <p>\n\t    Own Id: OTP-14425</p>\n        </item>\n        <item>\n          <p>\n\t    Improvement of the documentation of the environment\n\t    variable <c>ERL_CRASH_DUMP_SECONDS</c> as well as the\n\t    default behavior when it is not set.</p>\n          <p>\n\t    Own Id: OTP-14434</p>\n        </item>\n        <item>\n          <p>\n\t    Enabled off-heap message queue for some system processes\n\t    that might receive large amounts of messages.</p>\n          <p>\n\t    Own Id: OTP-14438</p>\n        </item>\n        <item>\n\t    <p>ETS lock indexes have been replaced with the table\n\t    name in LCNT results.</p>\n          <p>\n\t    Own Id: OTP-14442 Aux Id: ERIERL-22 </p>\n        </item>\n        <item>\n          <p>\n\t    Introduced the new functions <seealso\n\t    marker=\"erl_nif#enif_whereis_pid\"><c>enif_whereis_pid()</c></seealso>\n\t    and <seealso\n\t    marker=\"erl_nif#enif_whereis_port\"><c>enif_whereis_port()</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-14453 Aux Id: PR-1400 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.6</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed small memory leak that could occur when sending to\n\t    a terminating port.</p>\n          <p>\n\t    Own Id: OTP-14609 Aux Id: ERIERL-238 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a race condition in the inet driver that could\n\t    cause receive to hang when the emulator was compiled with\n\t    gcc 8.</p>\n          <p>\n\t    Own Id: OTP-15158 Aux Id: ERL-654 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug causing some Erlang references to be\n\t    inconsistently ordered. This could for example cause\n\t    failure to look up certain elements with references as\n\t    keys in search data structures. This bug was introduced\n\t    in R13B02.</p>\n          <p>\n\t    Thanks to Simon Cornish for finding the bug and supplying\n\t    a fix.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-15225</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a bug in file closure on Unix; close(2) was\n\t    retried on EINTR which could cause a different (recently\n\t    opened) file to be closed as well.</p>\n          <p>\n\t    Own Id: OTP-14775</p>\n        </item>\n        <item>\n          <p>\n\t    A race-condition when tearing down a connection with\n\t    active node monitors could cause the runtime system to\n\t    crash.</p>\n          <p>\n\t    This bug was introduced in ERTS version 8.0 (OTP 19.0).</p>\n          <p>\n\t    Own Id: OTP-14781 Aux Id: OTP-13047 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A timer internal bit-field used for storing scheduler id\n\t    was too small. As a result, VM internal timer data\n\t    structures could become inconsistent when using 1024\n\t    schedulers on the system. Note that systems with less\n\t    than 1024 schedulers are not effected by this bug.</p>\n          <p>\n\t    This bug was introduced in ERTS version 7.0 (OTP 18.0).</p>\n          <p>\n\t    Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>binary_to_term</c> and\n\t    <c>binary_to_atom</c> that could cause VM crash.\n\t    Typically happens when the last character of an UTF8\n\t    string is in the range 128 to 255, but truncated to only\n\t    one byte. Bug exists in <c>binary_to_term</c> since ERTS\n\t    version 5.10.2 (OTP_R16B01) and <c>binary_to_atom</c>\n\t    since ERTS version 9.0 (OTP-20.0).</p>\n          <p>\n\t    Own Id: OTP-14590 Aux Id: ERL-474 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing VM crash when a module with\n\t    <c>-on_load</c> directive is loaded while\n\t    <c>erlang:trace(on_load, ...)</c> is enabled.</p>\n          <p>\n\t    Own Id: OTP-14612</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug that could cause a VM crash when a corrupt\n\t    message is received on distribution channel from other\n\t    node.</p>\n          <p>\n\t    Own Id: OTP-14661 Aux Id: ERIERL-80 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix performance bug in pre-allocators that could cause\n\t    them to permanently fall back on normal more expensive\n\t    memory allocation. Pre-allocators are used for quick\n\t    allocation of short lived meta data used by messages and\n\t    other scheduled tasks. Bug exists since OTP_R15B02.</p>\n          <p>\n\t    Own Id: OTP-14491</p>\n        </item>\n        <item>\n\t    <p>Fixed a bug that prevented TCP sockets from being\n\t    closed properly on send timeouts.</p>\n          <p>\n\t    Own Id: OTP-14509</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in operator <c>bxor</c> causing erroneuos\n\t    result when one operand is a big <em>negative</em>\n\t    integer with the lowest <c>N*W</c> bits as zero and the\n\t    other operand not larger than <c>N*W</c> bits. <c>N</c>\n\t    is an integer of 1 or larger and <c>W</c> is 32 or 64\n\t    depending on word size.</p>\n          <p>\n\t    Own Id: OTP-14514</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5.1</title>\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug in gen_tcp:send where it never returned when\n\t    repeatedly called on a remotely closed TCP socket.</p>\n          <p>\n\t    Own Id: OTP-13939 Aux Id: ERL-193 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed segfault that could happen during cleanup of\n\t    aborted erlang:port_command/3 calls. A port_command is\n\t    aborted if the port is closed at the same time as the\n\t    port_command was issued. This bug was introduced in\n\t    erts-8.0.</p>\n          <p>\n\t    Own Id: OTP-14481</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed implementation of <c>statistics(wall_clock)</c> and\n\t    <c>statistics(runtime)</c> so that values do not\n\t    unnecessarily wrap due to the emulator. Note that the\n\t    values returned by <c>statistics(runtime)</c> may still\n\t    wrap due to limitations in the underlying functionality\n\t    provided by the operating system.</p>\n          <p>\n\t    Own Id: OTP-14484</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Active-mode TCP sockets are now cleaned up properly on\n\t    send/shutdown errors.</p>\n          <p>\n\t    Own Id: OTP-14441 Aux Id: ERL-430 </p>\n        </item>\n        <item>\n          <p>\n\t    A code purge operation could under certain circumstances\n\t    expand the size of hibernated processes.</p>\n          <p>\n\t    Own Id: OTP-14444 Aux Id: ERIERL-24 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix so that the ERL_ZZ_SIGTERM_KILL introduced in\n\t    erts-8.3.4 works.</p>\n          <p>\n\t    Own Id: OTP-14451</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Add option to make SIGTERM trigger the OS default\n\t    behaviour instead of doing a gracefull shutdown. To\n\t    activate this bahviour the environment variable\n\t    ERL_ZZ_SIGTERM_KILL should be set to \"true\". This option\n\t    only works in OTP 19 as OTP 20 will have a different way\n\t    to deal with SIGTERM.</p>\n          <p>\n\t    Own Id: OTP-14418 Aux Id: ERIERL-15 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed memory segment cache used for multiblock carriers.\n\t    Huge (> 2GB) memory segments could cause a VM crash.\n\t    Creation of such huge memory segments used for multiblock\n\t    carriers is however very uncommon.</p>\n          <p>\n\t    Own Id: OTP-14360 Aux Id: ERL-401, PR-1417 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix release note for OTP-14290 in ERTS version 8.3.1. It\n\t    was erroneously placed under \"Known Bugs and Problems\".</p>\n          <p>\n\t    Own Id: OTP-14363 Aux Id: OTP-14290 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The <c>+Bi</c> command line argument of <c>erl</c>\n\t    erroneously caused <c>SIGTERM</c> to be ignored by the VM\n\t    as well as of all its child processes. This bug was\n\t    introduced in erts version 8.3.</p>\n          <p>\n\t    Own Id: OTP-14358 Aux Id: OTP-14085 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Invoking <c>init:stop/0</c> via the SIGTERM signal, in a\n\t    non-SMP BEAM, could cause BEAM to terminate with fatal\n\t    error. This has now been fixed and the BEAM will\n\t    terminate normally when SIGTERM is received.</p>\n          <p>\n\t    Own Id: OTP-14290</p>\n        </item>\n        <item>\n          <p>\n\t    Trying to open a directory with file:read_file/1 on Unix\n\t    leaked a file descriptor. This bug has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-14308 Aux Id: ERL-383 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fixed a number of bugs that caused faulty stack-traces\n\t    to be generated. The faulty stack traces were generated\n\t    either when applying the following functions or tracing\n\t    the following functions:</p> <list>\n\t    <item><c>erlang:error/1</c></item>\n\t    <item><c>erlang:error/2</c></item>\n\t    <item><c>erlang:exit/1</c></item>\n\t    <item><c>erlang:throw/1</c></item> </list>\n          <p>\n\t    Own Id: OTP-14055</p>\n        </item>\n        <item>\n          <p>\n\t    Corrected documentation about memory footprint for maps.</p>\n          <p>\n\t    Own Id: OTP-14118</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>process_info(Pid, current_stacktrace)</c> to use\n\t    stack depth limit set by\n\t    <c>system_flag(backtrace_depth)</c>. The old behavior was\n\t    a hard coded depth limit of 8.</p>\n          <p>\n\t    Own Id: OTP-14119 Aux Id: PR-1263 </p>\n        </item>\n        <item>\n          <p>\n\t    A process calling <seealso\n\t    marker=\"erlang#system_flag_multi_scheduling\"><c>erlang:system_flag(multi_scheduling,\n\t    block)</c></seealso> could end up hanging forever in the\n\t    call.</p>\n          <p>\n\t    Own Id: OTP-14121</p>\n        </item>\n        <item>\n\t    <p>Dirty scheduler bug fixes:</p> <list> <item><p>Fixed\n\t    call time tracing of process being scheduled on dirty\n\t    scheduler.</p></item> <item><p>GC info from dirty\n\t    schedulers.</p></item> <item><p>Multi scheduling block\n\t    with dirty schedulers could crash the runtime\n\t    system.</p></item> <item><p>Process structures could be\n\t    removed prematurely.</p></item> <item><p>GC on dirty\n\t    scheduler could crash the runtime system.</p></item>\n\t    <item><p>Termination of a process executing on a dirty\n\t    scheduler could cause a runtime system crash.</p></item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-14122</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed crash that occurred when writing timer data to a\n\t    crash dump.</p>\n          <p>\n\t    Own Id: OTP-14133</p>\n        </item>\n        <item>\n          <p>\n\t    A literal area could be removed while still referred from\n\t    processes.</p>\n          <p>\n\t    Own Id: OTP-14134</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug in the garbage collector that could crash the\n\t    runtime system.</p>\n          <p>\n\t    Own Id: OTP-14135</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug in call-time trace for NIFs which caused\n\t    tracing to erroneously be started multiple times for one\n\t    call.</p>\n          <p>\n\t    Own Id: OTP-14136</p>\n        </item>\n        <item>\n          <p>\n\t    Remove a debug printout and an unnecessary garbage\n\t    collection when handling exceptions in hipe compiled\n\t    code.</p>\n          <p>\n\t    Own Id: OTP-14153</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in tracing of garbage collection that could cause\n\t    VM crash. Bug exists since OTP 19.0.</p>\n          <p>\n\t    Own Id: OTP-14154</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>binary_to_term</c> for binaries created by\n\t    <c>term_to_binary </c> with option <c>compressed</c>. The\n\t    bug can cause <c>badarg</c> exception for a valid binary\n\t    when Erlang VM is linked against a <c>zlib</c> library of\n\t    version 1.2.9 or newer. Bug exists since OTP 17.0.</p>\n          <p>\n\t    Own Id: OTP-14159 Aux Id: ERL-340 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix suspension of schedulers when generating a crashdump.</p>\n          <p>\n\t    Own Id: OTP-14164</p>\n        </item>\n        <item>\n\t    <p>NIF resources was not handled in a thread-safe manner\n\t    in the runtime system without SMP support.</p>\n\t    <p>As a consequence of this fix, the following driver\n\t    functions are now thread-safe also in the runtime system\n\t    without SMP support:</p> <list>\n\t    <item><p><c>driver_free_binary()</c></p></item>\n\t    <item><p><c>driver_realloc_binary()</c></p></item>\n\t    <item><p><c>driver_binary_get_refc()</c></p></item>\n\t    <item><p><c>driver_binary_inc_refc()</c></p></item>\n\t    <item><p><c>driver_binary_dec_refc()</c></p></item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-14202</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>erlang:round/1</c> for large floating point\n\t    numbers with an odd absolute value between <c>(1 bsl\n\t    52)</c> and <c>(1 bsl 53)</c>. The result was falsely\n\t    calculated as the next higher even number even though all\n\t    integer values up to <c>(1 bsl 53)</c> can be represented\n\t    as floats with full precision.</p>\n          <p>\n\t    Own Id: OTP-14227</p>\n        </item>\n        <item>\n          <p>\n\t    Add size of literals to module code size in crash dump\n\t    and <c>(l)oaded</c> command in break menu like it used to\n\t    be before OTP-19.0.</p>\n          <p>\n\t    Own Id: OTP-14228</p>\n        </item>\n        <item>\n          <p>\n\t    Fix potential bug in <c>enif_send</c> when called without\n\t    a process context and with argument <c>msg_env</c> as\n\t    <c>NULL</c>.</p>\n          <p>\n\t    Own Id: OTP-14229</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where passing an appendable binary to\n\t    <c>erlang:port_control()</c> could crash the emulator.</p>\n          <p>\n\t    Own Id: OTP-14231</p>\n        </item>\n        <item>\n          <p>\n\t    Receive expressions with timeout in the Erlang shell\n\t    could cause a VM crash.</p>\n          <p>\n\t    Own Id: OTP-14241 Aux Id: ERL-365 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    A received SIGTERM signal to beam will generate a\n\t    <c>'stop'</c> message to the <c>init</c> process and\n\t    terminate the Erlang VM nicely. This is equivalent to\n\t    calling <c>init:stop/0</c>.</p>\n          <p>\n\t    Own Id: OTP-14085</p>\n        </item>\n        <item>\n          <p>\n\t    Workaround for buggy Android implementation of\n\t    <c>PTHREAD_STACK_MIN</c> causing build of runtime system\n\t    to crash on undeclared <c>PAGE_SIZE</c>.</p>\n          <p>\n\t    Own Id: OTP-14165 Aux Id: ERL-319 </p>\n        </item>\n        <item>\n          <p>\n\t    Add configure option --without-thread-names that removes\n\t    the naming of individual emulator threads.</p>\n          <p>\n\t    Own Id: OTP-14234</p>\n        </item>\n        <item>\n          <p>\n\t    Add warning in documentation of <c>zlib:deflateInit/6</c>\n\t    about option <c>WindowsBits</c> values 8 and -8.</p>\n          <p>\n\t    Own Id: OTP-14254 Aux Id: ERL-362 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.2.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix bug in <c>binary_to_term</c> for binaries created by\n\t    <c>term_to_binary </c> with option <c>compressed</c>. The\n\t    bug can cause <c>badarg</c> exception for a valid binary\n\t    when Erlang VM is linked against a <c>zlib</c> library of\n\t    version 1.2.9 or newer. Bug exists since OTP 17.0.</p>\n          <p>\n\t    Own Id: OTP-14159 Aux Id: ERL-340 </p>\n        </item>\n        <item>\n          <p>\n\t    The driver efile_drv when opening a file now use fstat()\n\t    on the open file instead of stat() before opening, if\n\t    fstat() exists. This avoids a race when the file happens\n\t    to change between stat() and open().</p>\n          <p>\n\t    Own Id: OTP-14184 Aux Id: seq-13266 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.2.1</title>\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix a quite rare bug causing VM crash during code loading\n\t    and the use of export funs (fun M:F/A) of not yet loaded\n\t    modules. Requires a very specfic timing of concurrent\n\t    scheduler threads. Has been seen on ARM but can probably\n\t    also occure on other architectures. Bug has existed since\n\t    OTP R16.</p>\n          <p>\n\t    Own Id: OTP-14144 Aux Id: seq13242 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed <c>configure</c> failures on MacOSX. Most important\n\t    <c>clock_gettime()</c> was detected when building for\n\t    MacOSX - El Capitan using XCode 8 despite it is not\n\t    available until MacOSX - Sierra.</p>\n          <p>\n\t    Own Id: OTP-13904 Aux Id: ERL-256 </p>\n        </item>\n        <item>\n          <p>\n\t    <c>code:add_pathsa/1</c> and command line option\n\t    <c>-pa</c> both revert the given list of directories when\n\t    adding it at the beginning of the code path. This is now\n\t    documented.</p>\n          <p>\n\t    Own Id: OTP-13920 Aux Id: ERL-267 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix a compilation error of erts in OpenBSD related to the\n\t    usage of the __errno variable.</p>\n          <p>\n\t    Own Id: OTP-13927</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed so that when enabling tracing on a process that had\n\t    an invalid tracer associated with it, the new tracer\n\t    overwrites the old tracer. Before this fix, calling\n\t    erlang:trace/3 would behave as if the tracer was still\n\t    alive and not apply the new trace.</p>\n          <p>\n\t    This fault was introduced in ERTS 8.0.</p>\n          <p>\n\t    Own Id: OTP-13928</p>\n        </item>\n        <item>\n          <p>\n\t    Fix parsing of <c>-profile_boot 'true' | 'false'</c></p>\n          <p>\n\t    Own Id: OTP-13955 Aux Id: ERL-280 </p>\n        </item>\n        <item>\n          <p>\n\t    A slight improvement of <c>erlang:get_stacktrace/0</c>\n\t    for exceptions raised in hipe compiled code. Beam\n\t    compiled functions in such stack trace was earlier\n\t    replaced by some unrelated function. They are now instead\n\t    omitted. This is an attempt to reduce the confusion in\n\t    the absence of a complete and correct stack trace for\n\t    mixed beam and hipe functions.</p>\n          <p>\n\t    Own Id: OTP-13992</p>\n        </item>\n        <item>\n\t    <p> Correct type declaration of match specification head.\n\t    </p>\n          <p>\n\t    Own Id: OTP-13996</p>\n        </item>\n        <item>\n          <p>\n\t    HiPE code loading failed for x86_64 if gcc was configured\n\t    with <c>--enable-default-pie</c>. Fixed by disabling PIE,\n\t    if needed for HiPE, when building the VM.</p>\n          <p>\n\t    Own Id: OTP-14031 Aux Id: ERL-294, PR-1239 </p>\n        </item>\n        <item>\n          <p>\n\t    Faulty arguments could be presented on exception from a\n\t    NIF that had rescheduled itself using\n\t    <c>enif_schedule_nif()</c>.</p>\n          <p>\n\t    Own Id: OTP-14048</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system could crash if a garbage collection on\n\t    a process was performed immediately after a NIF had been\n\t    rescheduled using <c>enif_schedule_nif()</c>.</p>\n          <p>\n\t    Own Id: OTP-14049</p>\n        </item>\n        <item>\n          <p>\n\t    A reference to purged code could be left undetected by\n\t    the purge operation if a process just had rescheduled a\n\t    NIF call using <c>enif_schedule_nif()</c> when the\n\t    process was checked. This could cause a runtime system\n\t    crash.</p>\n          <p>\n\t    Own Id: OTP-14050</p>\n        </item>\n        <item>\n\t    <p>Fixed a number of dirty scheduler related bugs:</p>\n\t    <list> <item><p>Process priority was not handled correct\n\t    when scheduling on a dirty scheduler.</p></item>\n\t    <item><p>The runtime system could crash when an exit\n\t    signal with a compound exit reason was sent to a process\n\t    executing on a dirty scheduler.</p></item> <item><p>The\n\t    runtime system crashed when call tracing a process\n\t    executing on a dirty scheduler.</p></item> <item><p>A\n\t    code purge operation could end up hanging forever when a\n\t    process executed on a dirty scheduler</p></item> </list>\n          <p>\n\t    Own Id: OTP-14051</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Fix minor soft purge race bug that could incorrectly\n\t    trigger code_server to load new code for the module if\n\t    the soft purge failed and no current version of the\n\t    module existed.</p>\n          <p>\n\t    Own Id: OTP-13925</p>\n        </item>\n        <item>\n          <p>\n\t    To ease troubleshooting, <c>erlang:load_nif/2</c> now\n\t    includes the return value from a failed call to\n\t    load/reload/upgrade in the text part of the error tuple.\n\t    The <c>crypto</c> NIF makes use of this feature by\n\t    returning the source line where/if the initialization\n\t    fails.</p>\n          <p>\n\t    Own Id: OTP-13951</p>\n        </item>\n        <item>\n          <p>\n\t    New environment variable <c>ERL_CRASH_DUMP_BYTES</c> can\n\t    be used to limit the size of crash dumps. If the limit is\n\t    reached, crash dump generation is aborted and the\n\t    generated file will be truncated.</p>\n          <p>\n\t    Own Id: OTP-14046</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.1.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A code purge operation could under certain circumstances\n\t    expand the size of hibernated processes.</p>\n          <p>\n\t    Own Id: OTP-14444 Aux Id: ERIERL-24 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The emulator got a dynamic library dependency towards\n\t    libsctp, which on Linux was not intended since the\n\t    emulator there loads and resolves the needed sctp\n\t    functions in runtime. This has been fixed and a configure\n\t    switch --enable-sctp=lib has been added for those who\n\t    want such a library dependency.</p>\n          <p>\n\t    Own Id: OTP-13956 Aux Id: ERL-262, ERL-133 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix SIGUSR1 crashdump generation</p>\n          <p>\n\t    Do not generate a core when a crashdump is asked for.</p>\n          <p>\n\t    Own Id: OTP-13997</p>\n        </item>\n        <item>\n\t    <p>The new functions in <c>code</c> that allows loading\n\t    of many modules at once had a performance problem. While\n\t    executing a helper function in the <c>erl_prim_loader</c>\n\t    process, garbage messages were produced. The garbages\n\t    messages were ignored and ultimately discarded, but there\n\t    would be a negative impact on performance and memory\n\t    usage. The number of garbage message depended on both the\n\t    number of modules to be loaded and the length of the code\n\t    path.</p>\n\t    <p>The functions affected of this problem were:\n\t    <c>atomic_load/1</c>, <c>ensure_modules_loaded/1</c>, and\n\t    <c>prepare_loading/1</c>.</p>\n          <p>\n\t    Own Id: OTP-14009</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix bug for calls from hipe code to BIFs that disable GC\n\t    while yielding. Has been causing Dialyzer crashes on ARM\n\t    (and presumably all other non-intel platforms).</p>\n          <p>\n\t    Own Id: OTP-13724 Aux Id: PR-1116 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix a bug where changing the current working directory of\n\t    the VM would not change the current working directory of\n\t    programs spawned using <c>erlang:open_port({spawn,\"\"},\n\t    ...)</c>.</p>\n          <p>\n\t    Own Id: OTP-13733 Aux Id: ERL-175 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix a bug where disabling tracing from a process that had\n\t    return_to tracing enabled and was tracing on\n\t    <c>erlang:trace/3</c> would cause a segmentation fault.</p>\n          <p>\n\t    Own Id: OTP-13734</p>\n        </item>\n        <item>\n          <p>\n\t    Update all erts documentation to use simpler English, use\n\t    consistent terminology and be easier to navigate.</p>\n          <p>\n\t    Own Id: OTP-13740</p>\n        </item>\n        <item>\n          <p>\n\t    Add dirty schedulers to the microstate accounting\n\t    statistics.</p>\n          <p>\n\t    Own Id: OTP-13744</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed dirty scheduler build support on 32-bit windows.</p>\n          <p>\n\t    Own Id: OTP-13759</p>\n        </item>\n        <item>\n          <p>\n\t    inet:getstat(Socket) on an SCTP socket returned 0 for\n\t    send stats. This bug has now been corrected. Reported by\n\t    systra as issue ERL-102 on bugs.erlang.org.</p>\n          <p>\n\t    Own Id: OTP-13773 Aux Id: ERL-102 </p>\n        </item>\n        <item>\n          <p>\n\t    AF_UNSPEC and unknown address families were misread by\n\t    UDP receive in prim_inet resulting in an exception. This\n\t    bug has now been corrected.</p>\n          <p>\n\t    Own Id: OTP-13775</p>\n        </item>\n        <item>\n          <p>\n\t    Sweep HiPE stack for literals during code purge.</p>\n          <p>\n\t    Own Id: OTP-13777 Aux Id: PR-1122 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in run_erl for OpenBSD that could cause it on\n\t    rare occations to exit without starting the program (erl)\n\t    at all.</p>\n          <p>\n\t    Own Id: OTP-13795</p>\n        </item>\n        <item>\n          <p>\n\t    Update build scripts to not make assumtions about where\n\t    env, cp and perl are located.</p>\n          <p>\n\t    Own Id: OTP-13800</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where init:stop could deadlock if a process\n\t    with infinite shutdown timeout (e.g. a supervisor)\n\t    attempted to load code while terminating.</p>\n          <p>\n\t    Own Id: OTP-13802</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a segmentation fault on sparc CPUs when free'ing a\n\t    tracer module's state.</p>\n          <p>\n\t    Own Id: OTP-13803</p>\n        </item>\n        <item>\n          <p>\n\t    <c>fun</c>s was not properly handled during purge of a\n\t    module. This could cause a crash of the VM after a purge\n\t    of a module.</p>\n          <p>\n\t    Own Id: OTP-13809</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a memory leak when the process monitoring a port\n\t    crashed.</p>\n          <p>\n\t    Own Id: OTP-13818</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed multiple dirty scheduler related tracing bugs.</p>\n          <p>\n\t    Own Id: OTP-13822</p>\n        </item>\n        <item>\n          <p>\n\t    Fix error handling in beam code runtime loader for a\n\t    number of cases when index and size fields got corrupted\n\t    (negative) values.</p>\n          <p>\n\t    Own Id: OTP-13848 Aux Id: ERL-216 </p>\n        </item>\n        <item>\n          <p>\n\t    Minor fix of dirty scheduler implementation.</p>\n          <p>\n\t    Own Id: OTP-13852</p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>erl_drv_send_term()</c> or\n\t    <c>erl_drv_output_term()</c> from a non-scheduler thread\n\t    while the corresponding port was invalid caused the\n\t    emulator to enter an inconsistent state which eventually\n\t    caused an emulator crash.</p>\n          <p>\n\t    Own Id: OTP-13866</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a rare race condition in <c>erlang:open_port({spawn,\n\t    \"\"}, ...)</c> that would result in the erl_child_setup\n\t    program aborting and cause the emulator to exit.</p>\n          <p>\n\t    Own Id: OTP-13868</p>\n        </item>\n        <item>\n\t    <p>Driver and NIF operations accessing processes or ports\n\t    could cause an emulator crash when used from\n\t    non-scheduler threads. Those operations are:</p> <list>\n\t    <item><c>erl_drv_send_term()</c></item>\n\t    <item><c>driver_send_term()</c></item>\n\t    <item><c>erl_drv_output_term()</c></item>\n\t    <item><c>driver_output_term()</c></item>\n\t    <item><c>enif_send()</c></item>\n\t    <item><c>enif_port_command()</c></item> </list>\n          <p>\n\t    Own Id: OTP-13869</p>\n        </item>\n        <item>\n          <p>\n\t    Fix start scripts generation dependency in Makefile</p>\n          <p>\n\t    Own Id: OTP-13871 Aux Id: ERL-241 </p>\n        </item>\n        <item>\n          <p>\n\t    The VM could crash if <c>erlang:get_stacktrace()</c> was\n\t    called after a rescheduled NIF had thrown an exception.</p>\n          <p>\n\t    Own Id: OTP-13877</p>\n        </item>\n        <item>\n\t    <p>Calling <c>code:delete/1</c> before a loading a module\n\t    with an on_load function, the old code would be\n\t    overwritten, causing a memory or a crash if NIFs were\n\t    involved. (Thanks to vans163 for reporting this bug.)</p>\n          <p>\n\t    Own Id: OTP-13893 Aux Id: ERL-240 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Improved accuracy of timeouts on MacOS X. This by setting\n\t    premature timeouts followed by a short actual timeout\n\t    during scheduler wait.</p>\n          <p>\n\t    Own Id: OTP-13698</p>\n        </item>\n        <item>\n\t    <p>Added the following symbolic time unit representations\n\t    to the <seealso\n\t    marker=\"erlang#type-time_unit\"><c>erlang:time_unit()</c></seealso>\n\t    type:</p> <list> <item><c>second</c></item>\n\t    <item><c>millisecond</c></item>\n\t    <item><c>microsecond</c></item>\n\t    <item><c>nanosecond</c></item> </list> <p>The following\n\t    symbolic time unit representations are now\n\t    <em>deprecated</em>, but still part of the\n\t    <c>erlang:time_unit()</c> type:</p> <list>\n\t    <item><c>seconds</c></item>\n\t    <item><c>milli_seconds</c></item>\n\t    <item><c>micro_seconds</c></item>\n\t    <item><c>nano_seconds</c></item> </list>\n          <p>\n\t    Own Id: OTP-13735</p>\n        </item>\n        <item>\n          <p>\n\t    Fix maps hashing entropy of maps with maps keys.</p>\n          <p>\n\t    Own Id: OTP-13763 Aux Id: ERL-199 </p>\n        </item>\n        <item>\n          <p>\n\t    Improved dirty scheduler support. A purge of a module can\n\t    now be performed without having to wait for completion of\n\t    all ongoing dirty NIF calls.</p>\n          <p>\n\t    Note that when enabling support for dirty schedulers, a\n\t    new purge strategy will as of ERTS version 8.1 be\n\t    enabled. This new strategy is not fully backwards\n\t    compatible with the strategy used by default. For more\n\t    information see the documentation of <seealso\n\t    marker=\"erts:erlang#check_process_code/3\"><c>erlang:check_process_code/3</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-13808 Aux Id: OTP-13833 </p>\n        </item>\n        <item>\n          <p>\n\t    A new purge strategy has been introduced. The new\n\t    strategy will by default be disabled during the OTP 19\n\t    release, but will be the only strategy available as of\n\t    the OTP 20 release.</p>\n          <p>\n\t    The new strategy is slightly incompatible with the\n\t    strategy being used by default in OTP 19. Using the\n\t    default strategy, processes holding <c>fun</c>s that\n\t    refer to the module being purged either fail a soft\n\t    purge, or will be killed during a hard purge. The new\n\t    strategy completely ignores <c>fun</c>s. If <c>fun</c>s\n\t    referring to the code being purged exist, and are used\n\t    after a purge, an exception will be raised upon usage.\n\t    That is, the behavior will be exactly the same as the\n\t    case when a <c>fun</c> is received by a process after the\n\t    purge.</p>\n          <p>\n\t    The new strategy can optionally be enabled when building\n\t    OTP during OTP 19, and will automatically be enabled if\n\t    the runtime system is built with support for dirty\n\t    schedulers.</p>\n          <p>\n\t    For more information see the documentation of <seealso\n\t    marker=\"erts:erlang#check_process_code/3\"><c>erlang:check_process_code/3</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-13833</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed unnecessary overestimation of heap size need during\n\t    garbage collection.</p>\n          <p>\n\t    Own Id: OTP-13851</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a VM crash that occurred in a garbage collection of\n\t    a process when it had received binaries. This bug was\n\t    introduced in ERTS version 8.0 (OTP 19.0).</p>\n          <p>\n\t    Own Id: OTP-13890</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a VM crash that occurred in garbage collection of a\n\t    process when it had received maps over the distribution.\n\t    This bug was introduced in ERTS version 8.0 (OTP 19.0).</p>\n          <p>\n\t    Own Id: OTP-13889</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a race that could cause a lost wakeup of a process\n\t    that timed out in a <c>receive ... after</c>. This bug\n\t    was introduced in ERTS version 7.0.</p>\n          <p>\n\t    Own Id: OTP-13798 Aux Id: OTP-11997 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed segfault after writing an erl crash dump.</p>\n          <p>\n\t    Own Id: OTP-13799</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix scheduler deadlock bug in <c>ets:update_counter/4</c>\n\t    when key is not found and inserting the default object\n\t    causes the table to grow.</p>\n          <p>\n\t    Own Id: OTP-13731 Aux Id: ERL-188 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix VM abort \"Overrun stack and heap\" in garbage\n\t    collection triggered by a <c>bsl</c> operation and some\n\t    very specific heap conditions.</p>\n          <p>\n\t    Own Id: OTP-13732 Aux Id: seq13142 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A memory allocation bug in <c>group_leader/2</c> could\n\t    cause an emulator crash when garbage collecting a process\n\t    that had been assigned a remote group leader. This bug\n\t    was introduced in ERTS version 8.0.</p>\n          <p>\n\t    Own Id: OTP-13716</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 8.0</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>The handling of <c>on_load</c> functions has been\n\t    improved. The major improvement is that if a code upgrade\n\t    fails because the <c>on_load</c> function fails, the\n\t    previous version of the module will now be retained.</p>\n          <p>\n\t    Own Id: OTP-12593</p>\n        </item>\n        <item>\n\t    <p><c>is_builtin(erlang, apply, 3)</c> will now return\n\t    <c>true</c>.</p>\n          <p>\n\t    Own Id: OTP-13034</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>enif_get_list_length</c> to return false if list\n\t    is improper or have length larger than <c>UINT_MAX</c>\n\t    (did return true and an incorrect length value).</p>\n          <p>\n\t    Own Id: OTP-13288 Aux Id: PR913 </p>\n        </item>\n        <item>\n          <p>\n\t    Cleanup hipe signal handling code for x86 and make it\n\t    more portable.</p>\n          <p>\n\t    Own Id: OTP-13341 Aux Id: PR951 </p>\n        </item>\n        <item>\n          <p>\n\t    Make file:datasync use fsync instead of fdatasync on Mac\n\t    OSX.</p>\n          <p>\n\t    Own Id: OTP-13411</p>\n        </item>\n        <item>\n          <p>\n\t    Make sure to create a crash dump when running out of\n\t    memory. This was accidentally removed in the erts-7.3\n\t    release.</p>\n          <p>\n\t    Own Id: OTP-13419</p>\n        </item>\n        <item>\n          <p>\n\t    A bug has been fixed where if erlang was started +B on a\n\t    unix platform it would be killed by a SIGUSR2 signal when\n\t    creating a crash dump.</p>\n          <p>\n\t    Own Id: OTP-13425</p>\n        </item>\n        <item>\n          <p>\n\t    Fix race between <c>process_flag(trap_exit,true)</c> and\n\t    a received exit signal.</p>\n          <p>\n\t    A process could terminate due to exit signal even though\n\t    <c>process_flag(trap_exit,true)</c> had returned. A very\n\t    specific timing between call to <c>process_flag/2</c> and\n\t    exit signal from another scheduler was required for this\n\t    to happen.</p>\n          <p>\n\t    Own Id: OTP-13452</p>\n        </item>\n        <item>\n\t    <p>Don't search for non-existing Map keys twice</p>\n\t    <p>For <c>maps:get/2,3</c> and <c>maps:find/2</c>,\n\t    searching for an immediate key, e.g. an atom, in a small\n\t    map, the search was performed twice if the key did not\n\t    exist.</p>\n          <p>\n\t    Own Id: OTP-13459</p>\n        </item>\n        <item>\n          <p>\n\t    When an abnormally large distribution message is about to\n\t    be sent, the VM has been changed to create a crash dump\n\t    instead of a core dump.</p>\n          <p>\n\t    Own Id: OTP-13474</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>erlang:process_info/2</c> type specification</p>\n          <p>\n\t    Own Id: OTP-13485 Aux Id: ERL-123 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>open_port/2</c> with option <c>{args,\n\t    List}</c>. A vm crash could be caused by an improper\n\t    <c>List</c>.</p>\n          <p>\n\t    Own Id: OTP-13489 Aux Id: ERL-127 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a race-condition bug where the emulator could crash\n\t    when <c>erlang:system_profile/1,2</c> was enabled and a\n\t    process had to be re-scheduled during termination.</p>\n          <p>\n\t    Own Id: OTP-13494 Aux Id: ERL-126 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bugs where the reduction counter was not handled\n\t    correct.</p>\n          <p>\n\t    Own Id: OTP-13512</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed typo in description of the <c>EPMD_DUMP_REQ</c>\n\t    response.</p>\n          <p>\n\t    Own Id: OTP-13517</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where a process flagged as sensitive would\n\t    sometimes record its save_calls when it shouldn't.</p>\n          <p>\n\t    Own Id: OTP-13540</p>\n        </item>\n        <item>\n          <p>\n\t    Update configure scripts to not use hard-coded path for\n\t    /bin/pwd and /bin/rm.</p>\n          <p>\n\t    Own Id: OTP-13562</p>\n        </item>\n        <item>\n          <p>\n\t    When passing a larger binary than the outputv callback of\n\t    a linked-in driver can handle in one io vector slot, the\n\t    binary is now split into multiple slots in the io vector.\n\t    This change only effects system where the max size of an\n\t    io vector slot is smaller then the word size of the\n\t    system (e.g. Windows).</p>\n          <p>\n\t    This change means that it is now possible on Windows to\n\t    send binaries that are larger than 4GB to port_command,\n\t    which is what is used for file:write, gen_tcp:send etc.</p>\n          <p>\n\t    Own Id: OTP-13628</p>\n        </item>\n        <item>\n          <p>\n\t    Workaround of Maps output in crashdumps. Currently the\n\t    atom 'undefined' is generated instead of Map data if a\n\t    Map type is encountered during crash.</p>\n          <p>\n\t    Own Id: OTP-13657</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The tracing support has been extended to allow a <seealso\n\t    marker=\"erl_tracer\">tracer module</seealso> to be the\n\t    trace event handler instead of a process or port. The\n\t    <seealso marker=\"erl_tracer\">tracer module</seealso>\n\t    makes it possible for trace tools to filter or manipulate\n\t    trace event data without the trace event first having to\n\t    be copied from the traced process or port.</p>\n          <p>\n\t    With the introduction of this feature,\n\t    <c>erlang:trace(all|existing, _, _)</c> now also returns\n\t    the tracer process as part of the number of processes on\n\t    which tracing is enabled. The is incompatible with the\n\t    previous releases.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10267</p>\n        </item>\n        <item>\n          <p>\n\t    Introduce LTTng tracing of Erlang Runtime System</p>\n          <p>\n\t    For LTTng to be enabled OTP needs to be built with\n\t    configure option <c>--with-dynamic-trace=lttng</c>.</p>\n          <p>\n\t    This feature introduces tracepoints for schedulers,\n\t    drivers, memory carriers, memory and async thread pool.</p>\n\t    <p> For a list of all tracepoints, see <seealso\n\t    marker=\"runtime_tools:LTTng\">Runtime Tools User's\n\t    Guide</seealso> .</p>\n          <p>\n\t    Own Id: OTP-10282</p>\n        </item>\n        <item>\n          <p>\n\t    Make it possible to monitor/demonitor ports using the\n\t    <seealso\n\t    marker=\"erlang#monitor/2\">erlang:monitor/2</seealso> API.\n\t    The process and port information functions have also been\n\t    updated to include information about monitors from\n\t    processes to ports.</p>\n          <p>\n\t    Own Id: OTP-11384</p>\n        </item>\n        <item>\n          <p>\n\t    Add microstate accounting</p>\n          <p>\n\t    Microstate accounting is a way to track which state the\n\t    different threads within ERTS are in. The main usage area\n\t    is to pin point performance bottlenecks by checking which\n\t    states the threads are in and then from there figuring\n\t    out why and where to optimize.</p>\n          <p>\n\t    Since checking whether microstate accounting is on or off\n\t    is relatively expensive only a few of the states are\n\t    enabled by default and more states can be enabled through\n\t    configure.</p>\n          <p>\n\t    There is a convenience module called msacc that has been\n\t    added to runtime_tools that can assist in gathering and\n\t    interpreting the data from Microstate accounting.</p>\n          <p>\n\t    For more information see <seealso\n\t    marker=\"erts:erlang#statistics_microstate_accounting\">erlang:statistics(microstate_accounting,\n\t    _)</seealso> and the <seealso\n\t    marker=\"runtime_tools:msacc\">msacc</seealso> module in\n\t    runtime_tools.</p>\n          <p>\n\t    Own Id: OTP-12345</p>\n        </item>\n        <item>\n          <p>\n\t    The port of Erlang/OTP to the real-time operating system\n\t    OSE has been removed.</p>\n          <p>\n\t    Own Id: OTP-12573</p>\n        </item>\n        <item>\n          <p>\n\t    Sharing preserved copy for messages and exit signals</p>\n          <p>\n\t    Enable sharing preserved copy with configure option\n\t    <c>--enable-sharing-preserving</c>. This will preserve\n\t    sharing, within the process, when communication with\n\t    other processes in the Erlang node. There is a trade-off,\n\t    the copy is more costly but this cost can be reclaimed if\n\t    there is a lot of sharing in the message. In addition\n\t    literals will not be copied in a send except during a\n\t    purge phase of the module where the literals are located.\n\t    This feature is considered experimental in 19.0.</p>\n          <p>\n\t    Own Id: OTP-12590 Aux Id: OTP-10251 </p>\n        </item>\n        <item>\n          <p>\n\t    Halfword BEAM has been removed.</p>\n          <p>\n\t    Own Id: OTP-12883</p>\n        </item>\n        <item>\n          <p>\n\t    Added <seealso\n\t    marker=\"kernel:os#perf_counter/1\">os:perf_counter/1</seealso>.</p>\n          <p>\n\t    The perf_counter is a very very cheap and high resolution\n\t    timer that can be used to timestamp system events. It\n\t    does not have monoticity guarantees, but should on most\n\t    OS's expose a monotonous time.</p>\n          <p>\n\t    Own Id: OTP-12908</p>\n        </item>\n        <item>\n          <p>\n\t    Support for a fragmented young heap generation. That is,\n\t    the young heap generation can consist of multiple non\n\t    continuous memory areas. The main reason for this change\n\t    is to avoid extra copying of messages that could not be\n\t    allocated directly on the receivers heap.</p>\n          <p>\n\t    Own Id: OTP-13047</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang linked-in driver can now force the call to\n\t    open_port to block until a call to erl_drv_init_ack is\n\t    made inside the driver. This is useful when you want to\n\t    do some asynchronous initialization, for example getting\n\t    configuration from a pipe, and you want the initial\n\t    open_port call to fail if the configuration is incomplete\n\t    or wrong. See the erl_driver documentation for more\n\t    details on the API.</p>\n          <p>\n\t    Own Id: OTP-13086</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang linked-in drivers can now set their own pids as\n\t    seen in <c>erlang:port_info/1</c> by using the\n\t    <c>erl_drv_set_pid</c> function. For more details see the\n\t    erl_driver documentation.</p>\n          <p>\n\t    Own Id: OTP-13087</p>\n        </item>\n        <item>\n          <p>\n\t    The functionality behind <c>erlang:open_port/2</c> when\n\t    called with spawn or spawn_executable has been redone so\n\t    that the forking of the new program is done in a separate\n\t    process called erl_child_setup. This allows for a much\n\t    more robust implementation that uses less memory and does\n\t    not block the entire emulator if the program to be\n\t    started is on an un-accessible NFS. Benchmarks have shown\n\t    this approach to be about 3-5 times as fast as the old\n\t    approach where the fork/vfork was done by erts. This is a\n\t    pure stability and performance fix, however some error\n\t    messages may have changed, which is why it is marked as a\n\t    backwards incompatible change.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13088</p>\n        </item>\n        <item>\n\t    <p>Improved yielding strategy in the implementation of\n\t    the following native functions:</p> <list>\n\t    <item><c>erlang:binary_to_list/1</c></item>\n\t    <item><c>erlang:binary_to_list/3</c></item>\n\t    <item><c>erlang:bitstring_to_list/1</c></item>\n\t    <item><c>erlang:list_to_binary/1</c></item>\n\t    <item><c>erlang:iolist_to_binary/1</c></item>\n\t    <item><c>erlang:list_to_bitstring/1</c></item>\n\t    <item><c>binary:list_to_bin/1</c></item> </list> <p>This\n\t    in order to improve performance of these functions.</p>\n          <p>\n\t    Own Id: OTP-13096</p>\n        </item>\n        <item>\n          <p>\n\t    All garbage collections of processes now bump reductions.\n\t    Also the amount of reductions bumped when garbage\n\t    collecting has been adjusted. It now better corresponds\n\t    to the amount of work performed. This in order to improve\n\t    the real time characteristics of the system.</p>\n          <p>\n\t    Own Id: OTP-13097</p>\n        </item>\n        <item>\n\t    <p>New functions that can load multiple modules at once\n\t    have been added to the '<c>code</c>' module. The\n\t    functions are <c>code:atomic_load/1</c>,\n\t    <c>code:prepare_loading/1</c>,\n\t    <c>code:finish_loading/1</c>, and\n\t    <c>code:ensure_modules_loaded/1</c>.</p>\n          <p>\n\t    Own Id: OTP-13111</p>\n        </item>\n        <item>\n\t    <p>The <c>-boot_var</c> option for <c>erl</c> now only\n\t    supports a single key and single value (as documented).\n\t    The option used to allow multiple key/value pairs, but\n\t    that behavior was undocumented.</p>\n\t    <p>The function <c>erl_prim_loader:start/3</c> has been\n\t    removed. Its documentation has also been removed.</p>\n\t    <p>The undocumented and unsupported function\n\t    <c>erl_prim_loader:get_files/2</c> has been removed.</p>\n          <p>\n\t    Own Id: OTP-13112</p>\n        </item>\n        <item>\n          <p>\n\t    Low level BIF <c>erlang:purge_module/1</c> is made more\n\t    robust against incorrect use. Lingering processes that\n\t    still refer the old code are now killed before the module\n\t    is purged to prevent fatal VM behavior.</p>\n          <p>\n\t    Own Id: OTP-13122</p>\n        </item>\n        <item>\n\t    <p>Improved dirty scheduler implementation. For more\n\t    information see the <seealso\n\t    marker=\"erl_nif#dirty_nifs\">NIF\n\t    documentation</seealso>.</p> <note><list> <item><p>The\n\t    dirty scheduler support is still\n\t    <em>experimental</em>.</p></item> <item><p>The support\n\t    for determining whether dirty NIF support exist or not at\n\t    compile time using the C preprocessor macro\n\t    <c>ERL_NIF_DIRTY_SCHEDULER_SUPPORT</c> has been\n\t    removed.</p></item> <item><p>The\n\t    <c>enif_is_on_dirty_scheduler()</c> function has been\n\t    removed. Use <seealso\n\t    marker=\"erl_nif#enif_thread_type\"><c>enif_thread_type()</c></seealso>\n\t    instead.</p></item> </list></note>\n          <p>\n\t    Own Id: OTP-13123</p>\n        </item>\n        <item>\n          <p>\n\t    Various optimizations done to process dictionary access.</p>\n          <p>\n\t    Own Id: OTP-13167</p>\n        </item>\n        <item>\n          <p>\n\t    Added max_heap_size process flag. max_heap_size allows\n\t    the user to limit the maximum heap used by a process. See\n\t    <seealso\n\t    marker=\"erlang#process_flag/2\">erlang:process_flag</seealso>\n\t    for more details.</p>\n          <p>\n\t    Own Id: OTP-13174</p>\n        </item>\n        <item>\n          <p>\n\t    Allow dynamic drivers and NIF libraries to be built with\n\t    gcc option <c>-fvisibility=hidden</c> for faster loading\n\t    and more optimized code.</p>\n          <p>\n\t    Own Id: OTP-13227</p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>erlang:process_info(Pid,\n\t    garbage_collection_info)</c> which returns extended\n\t    garbage_collection information. For more details see the\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-13265</p>\n        </item>\n        <item>\n          <p>\n\t    The functions <c>erlang:list_to_integer/1</c> and\n\t    <c>string:to_integer/1</c> have been optimized for large\n\t    inputs.</p>\n          <p>\n\t    Own Id: OTP-13293</p>\n        </item>\n        <item>\n          <p>\n\t    Improved memory allocation strategy for hipe native code\n\t    on x86_64 (amd64) architectures by reserving enough low\n\t    virtual address space needed for the HiPE/AMD64 small\n\t    code model. The default virtual address area for hipe\n\t    code is set to 512Mb, but can be changed with emulator\n\t    flag <c>+MXscs</c>.</p>\n          <p>\n\t    Own Id: OTP-13359</p>\n        </item>\n        <item>\n          <p>\n\t    Introduction of configurable management of data referred\n\t    to by the message queue of a process. Each process can be\n\t    configured individually.</p>\n          <p>\n\t    It is now possible to configure the message queue of a\n\t    process, so that all data referred by it will be kept\n\t    outside of the heap, and by this prevent this data from\n\t    being part of garbage collections.</p>\n          <p>\n\t    For more information see the documentation of <seealso\n\t    marker=\"erlang#process_flag_message_queue_data\"><c>process_flag(message_queue_data,\n\t    MQD)</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-13366 Aux Id: OTP-13047 </p>\n        </item>\n        <item>\n          <p>\n\t    Processes now yield when scanning large message queues\n\t    and not finding a matching message. This in order to\n\t    improve real time characteristics.</p>\n          <p>\n\t    Own Id: OTP-13401</p>\n        </item>\n        <item>\n          <p>\n\t    Optimized an erts internal function that is used to\n\t    traverse erlang terms. The internal function was mainly\n\t    used by term_to_binary and comparison of terms.\n\t    Benchmarks have shown up to a 10% performance increase in\n\t    those functions after the optimization.</p>\n          <p>\n\t    Own Id: OTP-13440</p>\n        </item>\n        <item>\n          <p>Add the following NIF API functions:</p>\n\t    <list> <item><seealso\n\t    marker=\"erl_nif#enif_cpu_time\"><c>enif_cpu_time</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_now_time\"><c>enif_now_time</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_make_unique_integer\"><c>enif_make_unique_integer</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_is_process_alive\"><c>enif_is_process_alive</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_is_port_alive\"><c>enif_is_port_alive</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_term_to_binary\"><c>enif_term_to_binary</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_binary_to_term\"><c>enif_binary_to_term</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erl_nif#enif_port_command\"><c>enif_port_command</c></seealso></item>\n\t    </list>\n          <p>\n\t    For details of what each function does, see the erl_nif\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-13442</p>\n        </item>\n        <item>\n          <p>\n\t    Optimize <c>'++'</c> operator and <c>lists:append/2</c>\n\t    by using a single pass to build a new list while checking\n\t    for properness.</p>\n          <p>\n\t    Own Id: OTP-13487</p>\n        </item>\n        <item>\n          <p>\n\t    Handle terms (pids,ports and refs) from nodes with a\n\t    'creation' value larger than 3. This is a preparation of\n\t    the distribution protocol to allow OTP 19 nodes to\n\t    correctly communicate with future nodes (20 or higher).\n\t    The 'creation' value differentiates different\n\t    incarnations of the same node (name).</p>\n          <p>\n\t    Own Id: OTP-13488</p>\n        </item>\n        <item>\n          <p>\n\t    Don't send unasked for systemd notifications in epmd</p>\n          <p>\n\t    Own Id: OTP-13493 Aux Id: PR-999 </p>\n        </item>\n        <item>\n          <p>\n\t    The enif_send API has been extended to allow NULL to be\n\t    used as the message environment. When used this way, a\n\t    message environment is implicitly created and the given\n\t    term is copied into that environment before sending. This\n\t    can be an optimization if many small messages are being\n\t    sent by the nif.</p>\n          <p>\n\t    Own Id: OTP-13495</p>\n        </item>\n        <item>\n          <p>\n\t    The tracing support has been extended to allow tracing on\n\t    ports. Ports can be traced on using the 'ports', 'send'\n\t    and 'receive' trace flags.</p>\n          <p>\n\t    The first argument of <seealso\n\t    marker=\"erts:erlang#trace/3\">erlang:trace/3</seealso> has\n\t    been extended so that <c>'all'</c>, <c>'existing'</c> and\n\t    <c>'new'</c> now include both processes and ports. New\n\t    <c>Tracee</c> variants, <c>'all_processes'</c>,\n\t    <c>'all_ports'</c>, <c>'existing_processes'</c> etc have\n\t    been added to specify only processes or ports.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13496</p>\n        </item>\n        <item>\n          <p>\n\t    When the <c>'procs'</c> trace flag is enabled, a\n\t    <c>'spawned'</c> trace event is now also generated by a\n\t    newly created process. The previous event <c>'spawn'</c>\n\t    remains, but as it is generated by the process that did\n\t    the spawn, it is not guaranteed that it is ordered with\n\t    other trace events from the newly spawned process. So\n\t    when tracking the lifetime of a process this new event\n\t    should be used as the creation event.</p>\n          <p>\n\t    This new trace event is marked as an incompatibility\n\t    because tools that expect certain trace events when\n\t    enabling 'procs' will have to updated.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13497</p>\n        </item>\n        <item>\n          <p>\n\t    Add the <seealso\n\t    marker=\"erts:erlang#match_spec_test/3\">erlang:match_spec_test/3</seealso>\n\t    function. The functions allows the testing of match\n\t    specifications for both tracing and ets tables. It can be\n\t    used to test that a match specification does the expected\n\t    filtering on specific data. It also returns more verbose\n\t    error reasons for incorrectly constructed match\n\t    specifications.</p>\n          <p>\n\t    Own Id: OTP-13501</p>\n        </item>\n        <item>\n          <p>\n\t    The erts internal tracing support has been changed to\n\t    have much less overhead and be more scalable.</p>\n          <p>\n\t    This rewrite does not break any backwards\n\t    incompatibilities, but it does change the ordering of\n\t    some trace messages when compared to previous releases.\n\t    It should be noted that this only applies to trace\n\t    messages sent to processes or ports, it does not apply to\n\t    the new tracer module. However in future releases they\n\t    may also be effected by this.</p>\n          <p>\n\t    Trace messages are only guaranteed to be ordered from one\n\t    traced process or port. In previous releases this was not\n\t    visible as a <c>'send'</c> trace message would always\n\t    arrive before the corresponding <c>'receive'</c> trace\n\t    message that is no longer always the case. This also\n\t    means that timestamped trace messages may seem to arrive\n\t    out of order as the timestamp is taken when the event is\n\t    triggered and not when it is put in the queue of the\n\t    tracer.</p>\n          <p>\n\t    Own Id: OTP-13503</p>\n        </item>\n        <item>\n          <p>\n\t    Add possibility to filter <c>send</c> and <c>receive</c>\n\t    trace with match specifications.</p>\n          <p>\n\t    Own Id: OTP-13507</p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>maps:update_with/3,4</c> and <c>maps:take/2</c></p>\n          <p>\n\t    Own Id: OTP-13522 Aux Id: PR-1025 </p>\n        </item>\n        <item>\n          <p>\n\t    Introduce LTTng tracing via Erlang tracing.</p>\n          <p>\n\t    For LTTng to be enabled OTP needs to be built with\n\t    configure option <c>--with-dynamic-trace=lttng</c>.</p>\n\t    <p>The dynamic trace module <c>dyntrace</c> is now\n\t    capable to be used as a LTTng sink for Erlang tracing.\n\t    For a list of all tracepoints, see <seealso\n\t    marker=\"runtime_tools:LTTng\">Runtime Tools User's\n\t    Guide</seealso> .</p>\n\t    <p>This feature also introduces an incompatible change in\n\t    trace tags. The trace tags <c>gc_start</c> and\n\t    <c>gc_end</c> has been split into <c>gc_minor_start</c>,\n\t    <c>gc_minor_end</c> and <c>gc_major_start</c>,\n\t    <c>gc_major_end</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-13532</p>\n        </item>\n        <item>\n          <p>\n\t    Print heap pointers for garbing processes during\n\t    crashdump</p>\n          <p>\n\t    Own Id: OTP-13541 Aux Id: PR-1026 </p>\n        </item>\n        <item>\n          <p>\n\t    Changed and improved low level memory statistics returned\n\t    by <c>erlang:system_info/1</c>. The info for\n\t    <c>erts_mmap</c> has been moved from <c>mseg_alloc</c> to\n\t    its own section returned by <c>{allocator,\n\t    erts_mmap}</c>.</p>\n          <p>\n\t    Own Id: OTP-13560</p>\n        </item>\n        <item>\n          <p>\n\t    Add enif_snprintf to the NIF API</p>\n          <p>\n\t    The function <c>enif_snprintf</c> is similar to\n\t    <c>snprintf</c> call but can handle formatting of Erlang\n\t    terms via <c>%T</c> format specifier.</p>\n          <p>\n\t    Own Id: OTP-13580</p>\n        </item>\n        <item>\n\t    <p>The warning in the documentation for\n\t    <c>erlang:raise/3</c> has been removed. It is now\n\t    officially perfectly fine to use raise/3 in production\n\t    code.</p>\n          <p>\n\t    Own Id: OTP-13599</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bugs caused by the VM sometimes truncating object\n\t    sizes or offsets to 32 bits on 64-bit hosts. These bugs\n\t    were mainly found when working with large unicode strings\n\t    and nifs environments.</p>\n          <p>\n\t    Own Id: OTP-13606</p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>-start_epmd</c> command line option, this lets you\n\t    disable automatic starting of epmd when starting a\n\t    distributed node.</p>\n          <p>\n\t    Add <c>-epmd_module</c> command line option, this lets\n\t    you specify a module to register and look-up node names\n\t    in. The default module is <c>erl_epmd</c>.</p>\n          <p>\n\t    Own Id: OTP-13627</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:halt</c> now truncates strings longer than 200\n\t    characters instead of failing with <c>badarg</c>.</p>\n          <p>\n\t    Own Id: OTP-13630</p>\n        </item>\n        <item>\n          <p>\n\t    Fix possible race in poller wake up on windows</p>\n          <p>\n\t    Own Id: OTP-13634</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1.6</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>List subtraction (The <c>--</c> operator) will now\n\t    yield properly on large inputs.</p>\n          <p>\n\t    Own Id: OTP-15371</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed small memory leak that could occur when sending to\n\t    a terminating port.</p>\n          <p>\n\t    Own Id: OTP-14609 Aux Id: ERIERL-238 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1.4</title>\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix performance bug in pre-allocators that could cause\n\t    them to permanently fall back on normal more expensive\n\t    memory allocation. Pre-allocators are used for quick\n\t    allocation of short lived meta data used by messages and\n\t    other scheduled tasks. Bug exists since OTP_R15B02.</p>\n          <p>\n\t    Own Id: OTP-14491</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in operator <c>bxor</c> causing erroneuos\n\t    result when one operand is a big <em>negative</em>\n\t    integer with the lowest <c>N*W</c> bits as zero and the\n\t    other operand not larger than <c>N*W</c> bits. <c>N</c>\n\t    is an integer of 1 or larger and <c>W</c> is 32 or 64\n\t    depending on word size.</p>\n          <p>\n\t    Own Id: OTP-14514</p>\n        </item>\n        <item>\n          <p>\n\t    A timer internal bit-field used for storing scheduler id\n\t    was too small. As a result, VM internal timer data\n\t    structures could become inconsistent when using 1024\n\t    schedulers on the system. Note that systems with less\n\t    than 1024 schedulers are not effected by this bug.</p>\n          <p>\n\t    This bug was introduced in ERTS version 7.0 (OTP 18.0).</p>\n          <p>\n\t    Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>binary_to_term</c> and\n\t    <c>binary_to_atom</c> that could cause VM crash.\n\t    Typically happens when the last character of an UTF8\n\t    string is in the range 128 to 255, but truncated to only\n\t    one byte. Bug exists in <c>binary_to_term</c> since ERTS\n\t    version 5.10.2 (OTP_R16B01) and <c>binary_to_atom</c>\n\t    since ERTS version 9.0 (OTP-20.0).</p>\n          <p>\n\t    Own Id: OTP-14590 Aux Id: ERL-474 </p>\n        </item>\n      </list>\n    </section>\n</section>\n\n<section><title>Erts 7.3.1.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug has been fixed where if erlang was started +B on a\n\t    unix platform it would be killed by a SIGUSR2 signal when\n\t    creating a crash dump.</p>\n          <p>\n\t    Own Id: OTP-13425 Aux Id: ERL-94 </p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>erl_drv_send_term()</c> or\n\t    <c>erl_drv_output_term()</c> from a non-scheduler thread\n\t    while the corresponding port was invalid caused the\n\t    emulator to enter an inconsistent state which eventually\n\t    caused an emulator crash.</p>\n          <p>\n\t    Own Id: OTP-13866</p>\n        </item>\n        <item>\n\t    <p>Driver and NIF operations accessing processes or ports\n\t    could cause an emulator crash when used from\n\t    non-scheduler threads. Those operations are:</p> <list>\n\t    <item><c>erl_drv_send_term()</c></item>\n\t    <item><c>driver_send_term()</c></item>\n\t    <item><c>erl_drv_output_term()</c></item>\n\t    <item><c>driver_output_term()</c></item>\n\t    <item><c>enif_send()</c></item>\n\t    <item><c>enif_port_command()</c></item> </list>\n          <p>\n\t    Own Id: OTP-13869</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>binary_to_term</c> for binaries created by\n\t    <c>term_to_binary </c> with option <c>compressed</c>. The\n\t    bug can cause <c>badarg</c> exception for a valid binary\n\t    when Erlang VM is linked against a <c>zlib</c> library of\n\t    version 1.2.9 or newer. Bug exists since OTP 17.0.</p>\n          <p>\n\t    Own Id: OTP-14159 Aux Id: ERL-340 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a race that could cause a lost wakeup of a process\n\t    that timed out in a <c>receive ... after</c>. This bug\n\t    was introduced in ERTS version 7.0.</p>\n          <p>\n\t    Own Id: OTP-13798 Aux Id: OTP-11997 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed segfault after writing an erl crash dump.</p>\n          <p>\n\t    Own Id: OTP-13799</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix scheduler deadlock bug in <c>ets:update_counter/4</c>\n\t    when key is not found and inserting the default object\n\t    causes the table to grow.</p>\n          <p>\n\t    Own Id: OTP-13731 Aux Id: ERL-188 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    <c>process_info(Pid, last_calls)</c> did not work for\n\t    <c>Pid /= self()</c>.</p>\n          <p>\n\t    Own Id: OTP-13418</p>\n        </item>\n        <item>\n          <p>\n\t    Make sure to create a crash dump when running out of\n\t    memory. This was accidentally removed in the erts-7.3\n\t    release.</p>\n          <p>\n\t    Own Id: OTP-13419</p>\n        </item>\n        <item>\n          <p>\n\t    Schedulers could be woken by a premature timeout on\n\t    Linux. This premature wakeup was however harmless.</p>\n          <p>\n\t    Own Id: OTP-13420</p>\n        </item>\n        <item>\n          <p>\n\t    A process communicating with a port via one of the\n\t    <c>erlang:port_*</c> BIFs could potentially end up in an\n\t    inconsistent state if the port terminated during the\n\t    communication. When this occurred the process could later\n\t    block in a <c>receive</c> even though it had messages\n\t    matching in its message queue.</p>\n          <p>\n\t    This bug was introduced in erts version 5.10 (OTP R16A).</p>\n          <p>\n\t    Own Id: OTP-13424 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    The reference count of a process structure could under\n\t    rare circumstances be erroneously managed. When this\n\t    happened invalid memory accesses occurred.</p>\n          <p>\n\t    Own Id: OTP-13446</p>\n        </item>\n        <item>\n          <p>\n\t    Fix race between <c>process_flag(trap_exit,true)</c> and\n\t    a received exit signal.</p>\n          <p>\n\t    A process could terminate due to exit signal even though\n\t    <c>process_flag(trap_exit,true)</c> had returned. A very\n\t    specific timing between call to <c>process_flag/2</c> and\n\t    exit signal from another scheduler was required for this\n\t    to happen.</p>\n          <p>\n\t    Own Id: OTP-13452</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The '-path' flag to 'erl' has been documented. This flag\n\t    replaces the path specified in the boot script. It has\n\t    always existed, but was earlier only documented in SASL\n\t    (script).</p>\n          <p>\n\t    Own Id: OTP-13060</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>call_time</c> tracing functionality internally\n\t    used a time based on OS system time in order to measure\n\t    call time which could cause erroneous results if OS\n\t    system time was changed during tracing.</p>\n          <p>\n\t    This functionality now use Erlang monotonic time in order\n\t    to measure time. Besides fixing the erroneous results due\n\t    to OS system time being used, the results are often also\n\t    better since Erlang monotonic time often has better\n\t    accuracy and precision.</p>\n          <p>\n\t    Own Id: OTP-13216</p>\n        </item>\n        <item>\n          <p>\n\t    Fix behaviour of -delay_write command line switch of\n\t    epmd, which is used for debugging - in some cases epmd\n\t    was sleeping twice the requested amount of time.</p>\n          <p>\n\t    Own Id: OTP-13220</p>\n        </item>\n        <item>\n          <p>\n\t    Fix race between timeout and exit signal that could cause\n\t    a process to ignore the exit signal and continue\n\t    execution. Bug exist since OTP 18.0.</p>\n          <p>\n\t    Own Id: OTP-13245</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>erlang:halt/1,2</c> for large exit status\n\t    values, causing either <c>badarg</c> (on 32-bit) or exit\n\t    with a crash dump and/or core dump (on 64-bit). Make\n\t    <c>erlang:halt/1,2</c> tolerate any non negative integer\n\t    as exit status and truncate high order bits if the OS\n\t    does not support it.</p>\n          <p>\n\t    Own Id: OTP-13251 Aux Id: ERL-49 </p>\n        </item>\n        <item>\n          <p>\n\t    <seealso\n\t    marker=\"kernel:gen_tcp#accept/2\"><c>gen_tcp:accept/2</c></seealso>\n\t    was not <seealso\n\t    marker=\"erts:time_correction#Time_Warp_Safe_Code\">time\n\t    warp safe</seealso>. This since it used the same time as\n\t    returned by <seealso\n\t    marker=\"erts:erlang#now/0\"><c>erlang:now/0</c></seealso>\n\t    when calculating timeout. This has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-13254 Aux Id: OTP-11997, OTP-13222 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix faulty error handling when writing to a compressed\n\t    file.</p>\n          <p>\n\t    Own Id: OTP-13270</p>\n        </item>\n        <item>\n          <p>\n\t    Fix sendfile usage for large files on FreeBSD</p>\n          <p>\n\t    Own Id: OTP-13271</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug that could cause\n\t    <c>process_info(P,current_location)</c> to crash emulator\n\t    for hipe compiled modules.</p>\n          <p>\n\t    Own Id: OTP-13282 Aux Id: ERL-79 </p>\n        </item>\n        <item>\n          <p>\n\t    Out of memory errors have been changed to cause an exit\n\t    instead of abort.</p>\n          <p>\n\t    Own Id: OTP-13292</p>\n        </item>\n        <item>\n          <p>\n\t    When calling <c>garbage_collect/[1,2]</c> or\n\t    <c>check_process_code/[2,3]</c> from a process with a\n\t    higher priority than the priority of the process operated\n\t    on, the run queues could end up in an inconsistent state.\n\t    This bug has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-13298 Aux Id: OTP-11388 </p>\n        </item>\n        <item>\n          <p>\n\t    A workaround for an issue with older gcc versions (less\n\t    than 5) and inline assembly on 32-bit x86 caused an\n\t    emulator crash when it had been compiled with a newer gcc\n\t    version. An improved <c>configure</c> test, run when\n\t    building OTP, now detects whether the workaround should\n\t    be used or not.</p>\n          <p>\n\t    Own Id: OTP-13326 Aux Id: ERL-80 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Introduced new statistics functionality in order to\n\t    more efficiently retrieve information about run able and\n\t    active processes and ports. For more information see:</p>\n\t    <list> <item><seealso\n\t    marker=\"erlang#statistics_total_run_queue_lengths\"><c>statistics(total_run_queue_lengths)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_run_queue_lengths\"><c>statistics(run_queue_lengths)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_total_active_tasks\"><c>statistics(total_active_tasks)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_active_tasks\"><c>statistics(active_tasks)</c></seealso></item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-13201</p>\n        </item>\n        <item>\n          <p>\n\t    Time warp safety improvements.</p>\n          <p>\n\t    Introduced the options <c>monotonic_timestamp</c>, and\n\t    <c>strict_monotonic_timestamp</c> to the trace,\n\t    sequential trace, and system profile functionality. This\n\t    since the already existing <c>timestamp</c> option is not\n\t    time warp safe.</p>\n          <p>\n\t    Introduced the option <c>safe_fixed_monotonic_time</c> to\n\t    <c>ets:info/2</c> and <c>dets:info/2</c>. This since the\n\t    already existing <c>safe_fixed</c> option is not time\n\t    warp safe.</p>\n          <p>\n\t    Own Id: OTP-13222 Aux Id: OTP-11997 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix a register race where down nodes goes undetected in\n\t    epmd</p>\n          <p>\n\t    Own Id: OTP-13301</p>\n        </item>\n        <item>\n          <p>\n\t    Improved the gcc inline assembly implementing double word\n\t    atomic compare and exchange on x86/x86_64 so that it also\n\t    can be used when compiling with clang.</p>\n          <p>\n\t    Own Id: OTP-13336</p>\n        </item>\n        <item>\n          <p>\n\t    An optimization preventing a long wait for a scheduler\n\t    thread looking up information about a process executing\n\t    on another scheduler thread had unintentionally been lost\n\t    in erts-5.10 (OTP R16A). This optimization has now been\n\t    reintroduced.</p>\n          <p>\n\t    Own Id: OTP-13365 Aux Id: OTP-9892 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.2.1.1</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Introduced new statistics functionality in order to\n\t    more efficiently retrieve information about run able and\n\t    active processes and ports. For more information see:</p>\n\t    <list> <item><seealso\n\t    marker=\"erlang#statistics_total_run_queue_lengths\"><c>statistics(total_run_queue_lengths)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_run_queue_lengths\"><c>statistics(run_queue_lengths)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_total_active_tasks\"><c>statistics(total_active_tasks)</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#statistics_active_tasks\"><c>statistics(active_tasks)</c></seealso></item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-13201</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.2.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Revert \"Fix erroneous splitting of emulator path\"</p>\n          <p>\n\t    Own Id: OTP-13202</p>\n        </item>\n        <item>\n          <p>\n\t    Fix HiPE enabled emulator for FreeBSD.</p>\n          <p>\n\t    Own Id: OTP-13204 Aux Id: pr926 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Small documentation fixes</p>\n          <p>\n\t    Own Id: OTP-13017</p>\n        </item>\n        <item>\n          <p>\n\t    Fix memory corruption bug caused by disabling\n\t    distribution and then re-enable distribution with a node\n\t    name that has previously been used by a remote node.</p>\n          <p>\n\t    Own Id: OTP-13076 Aux Id: seq12959 </p>\n        </item>\n        <item>\n          <p>\n\t    Renamed variables with name bool as Visual Studio 2015\n\t    now treats this is a keyword.</p>\n          <p>\n\t    Own Id: OTP-13079</p>\n        </item>\n        <item>\n\t    <p><c>erl_prim_loader</c> has not supported custom\n\t    loaders for several releases. In the documentation for\n\t    <c>erl_prim_loader</c>, all references to custom loaders\n\t    have now been removed.</p>\n          <p>\n\t    Own Id: OTP-13102</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed compilation of erts together with libc versions\n\t    that do not define __uint32_t.</p>\n          <p>\n\t    Own Id: OTP-13105</p>\n        </item>\n        <item>\n          <p>\n\t    erl -make now returns non-zero exit codes on failure</p>\n          <p>\n\t    Own Id: OTP-13107</p>\n        </item>\n        <item>\n          <p>\n\t    Fix crash on init:restart in embedded mode caused by\n\t    on_load handler process not being relaunched leading to\n\t    load failure for modules such as crypto and asn1rt_nif\n\t    that need it to be present for correct NIF loading.</p>\n          <p>\n\t    Own Id: OTP-13115</p>\n        </item>\n        <item>\n          <p>\n\t    Fix maps decode in erlang:binary_to_term/1</p>\n\t    <p>Decoding a term with a large (HAMT) map in an small\n\t    (FLAT) map could cause a critical error if the external\n\t    format was not produced by beam.</p>\n          <p>\n\t    Own Id: OTP-13125</p>\n        </item>\n        <item>\n          <p>\n\t    Fix very rare bug in GC when big maps with a lot of hash\n\t    collisions from a remote node are waiting in inner\n\t    message queue.</p>\n          <p>\n\t    Own Id: OTP-13146</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug that could cause a crash dump to become\n\t    almost empty.</p>\n          <p>\n\t    Own Id: OTP-13150</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p> Updated the xmllint target to just check the xml\n\t    files with real documentation content.<br/> Corrected\n\t    some errors and added some missing target in the DTD's.\n\t    </p>\n          <p>\n\t    Own Id: OTP-13026</p>\n        </item>\n        <item>\n          <p>\n\t    Add function enif_getenv to read OS environment variables\n\t    in a portable way from NIFs.</p>\n          <p>\n\t    Own Id: OTP-13147</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.1</title>\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix bug in ETS that could cause stray objects marked for\n\t    deletion to occasionally be missed by the cleanup done by\n\t    <c>safe_fixtable(_,false)</c>.</p>\n          <p>\n\t    Own Id: OTP-12870</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed VM crash that could occur if a trace port was\n\t    linked to a process, and the trace port terminated\n\t    abnormally while handling a trace message. This bug has\n\t    always existed in the runtime system with SMP support.</p>\n          <p>\n\t    Own Id: OTP-12901</p>\n        </item>\n        <item>\n          <p>\n\t    Instead of aborting, the vm now creates a crash dump when\n\t    a system process is terminated.</p>\n          <p>\n\t    Own Id: OTP-12934</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a rare emulator dead lock that occurred when\n\t    erlang:process_flag(priority,...) was called by a process\n\t    that was also scheduled for an internal system activity.</p>\n          <p>\n\t    Own Id: OTP-12943</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system on various posix platforms (except for\n\t    Linux and Solaris) could crash when large amounts of\n\t    file-descriptors were in use.</p>\n          <p>\n\t    Own Id: OTP-12954</p>\n        </item>\n        <item>\n          <p>\n\t    A beam file compiled by hipe for an incompatible runtime\n\t    system was sometimes not rejected by the loader, which\n\t    could lead to vm crash. This fix will also allow the same\n\t    hipe compiler to be used by both normal and debug-built\n\t    vm.</p>\n          <p>\n\t    Own Id: OTP-12962</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>maps:merge/2</c> when called by hipe\n\t    compiled code that could cause vm crash. Bug exists since\n\t    erts-7.0 (OTP 18.0).</p>\n          <p>\n\t    Own Id: OTP-12965</p>\n        </item>\n        <item>\n          <p>\n\t    When tracing with <c>process_dump</c> option, the VM\n\t    could abort if there was an ongoing binary match\n\t    somewhere in the call stack of the traced process.</p>\n          <p>\n\t    Own Id: OTP-12968</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed possible output deadlock in tty driver when hitting\n\t    \"CTRL-C\" in a non-smp emulator shell on unix.</p>\n          <p>\n\t    Own Id: OTP-12987 Aux Id: Seq12947 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>binary_to_integer</c> to throw badarg for \"+\" and\n\t    \"-\" similar to <c>list_to_integer</c>.</p>\n          <p>\n\t    Own Id: OTP-12988</p>\n        </item>\n        <item>\n          <p>\n\t    Suppress warning of unused argument when using macro\n\t    enif_make_pid.</p>\n          <p>\n\t    Own Id: OTP-12989</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Changed default clock source used for OS system time on\n\t    MacOS X to <c>gettimeofday()</c> in order to improve\n\t    performance. The system can be configured during build to\n\t    use the previously used higher resolution clock source by\n\t    passing the switch <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP_Configuring\"><c>--with-clock-resolution=high</c></seealso>\n\t    when configuring the build.</p>\n          <p>\n\t    Own Id: OTP-12945 Aux Id: OTP-12892 </p>\n        </item>\n        <item>\n          <p>\n\t    Added the <c>configure</c> option <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP_Configuring\"><c>--disable-saved-compile-time</c></seealso>\n\t    which disables saving of compile date and time in the\n\t    emulator binary.</p>\n          <p>\n\t    Own Id: OTP-12971</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.0.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a binary memory leak when printing to shell using\n\t    the tty driver (i.e. not -oldshell).</p>\n          <p>\n\t    Own Id: OTP-12941</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a bug where the standard error port sometimes crashes\n\t    with eagain as the reason.</p>\n          <p>\n\t    Own Id: OTP-12942</p>\n        </item>\n        <item>\n           <p>\n\t    When tracing with <c>process_dump</c> option, the VM\n\t    could abort if there was an ongoing binary match\n\t    somewhere in the call stack of the traced process./</p>\n          <p>\n\t    Own Id: OTP-12968</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.0.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A process could end up in an inconsistent half exited\n\t    state in the runtime system without SMP support. This\n\t    could occur if the processes was traced by a port that it\n\t    also was linked to, and the port terminated abnormally\n\t    while handling a trace message for the process.</p>\n          <p>\n\t    This bug has always existed in the runtime system without\n\t    SMP support, but never in the runtime system with SMP\n\t    support.</p>\n          <p>\n\t    Own Id: OTP-12889 Aux Id: seq12885 </p>\n        </item>\n        <item>\n          <p>\n\t    Removed unnecessary copying of data when retrieving\n\t    corrected Erlang monotonic time.</p>\n          <p>\n\t    Own Id: OTP-12894</p>\n        </item>\n        <item>\n          <p>\n\t    Changed default OS monotonic clock source chosen at build\n\t    time. This in order to improve performance. The behavior\n\t    will now on most systems be that (both OS and Erlang)\n\t    monotonic time stops when the system is suspended.</p>\n          <p>\n\t    If you prefer that monotonic time elapse during suspend\n\t    of the machine, you can pass the command line argument\n\t    <c>--enable-prefer-elapsed-monotonic-time-during-suspend</c>\n\t    to <c>configure</c> when building Erlang/OTP. The\n\t    configuration stage will try to find such a clock source,\n\t    but might not be able to find it. Note that there might\n\t    be a performance penalty associated with such a clock\n\t    source.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12895</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:system_info(end_time)</c> returned a faulty\n\t    value on 32-bit architectures.</p>\n          <p>\n\t    Own Id: OTP-12896</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The <c>configure</c> command line argument\n\t    <c>--enable-gettimeofday-as-os-system-time</c> has been\n\t    added which force usage of <c>gettimeofday()</c> for OS\n\t    system time. This will improve performance of\n\t    <c>os:system_time()</c> and <c>os:timestamp()</c> on\n\t    MacOS X, at the expense of worse accuracy, resolution and\n\t    precision of Erlang monotonic time, Erlang system time,\n\t    and OS system time.</p>\n          <p>\n\t    Own Id: OTP-12892</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix a rare hanging of the VM seen to happen just after\n\t    emulator start. Bug exists since R14.</p>\n          <p>\n\t    Own Id: OTP-12859 Aux Id: seq12882 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 7.0</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix issuing with spaces and quoting in the arguments when\n\t    using erlang:open_port spawn_executable on windows. The\n\t    behavior now mimics how unix works. This change implies a\n\t    backwards incompatibility for how spawn_executable works\n\t    on windows.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11905</p>\n        </item>\n        <item>\n          <p>\n\t    Fix global call trace when hipe compiled code call beam\n\t    compiled functions. Tracing of beam functions should now\n\t    alway work regardless who the caller is.</p>\n          <p>\n\t    Own Id: OTP-11939</p>\n        </item>\n        <item>\n          <p>\n\t    Correct cache alignment for ETS <c>write_concurrency</c>\n\t    locks to improve performance by reduced false sharing.\n\t    May increase memory footprint for tables with\n\t    <c>write_concurrency</c>.</p>\n          <p>\n\t    Own Id: OTP-11974</p>\n        </item>\n        <item>\n          <p>\n\t    All possibly blocking operations in the fd/spawn and\n\t    terminal driver have been converted to non-blocking\n\t    operations. Before this fix it was possible for the VM to\n\t    be blocked for a long time if the entity consuming\n\t    stdout/stderr did not consume it fast enough.</p>\n          <p>\n\t    Own Id: OTP-12239</p>\n        </item>\n        <item>\n          <p>\n\t    Add missing overhead for offheap binaries created from\n\t    external format. This fix can improve the garbage\n\t    collection of large binaries originating from\n\t    <c>binary_to_term</c> or messages from remote nodes.</p>\n          <p>\n\t    Own Id: OTP-12554</p>\n        </item>\n        <item>\n          <p>\n\t    Ensure hashing of zero is consistent</p>\n\t    <p> Erlang treats positive and negative zero as\n\t    equal:</p> \n          <p>\n\t    <c>true = 0.0 =:= 0.0/-1</c></p>\n\t    <p>However, Erlangs hash functions: hash, phash and\n\t    phash2 did not reflect this behaviour. The hash values\n\t    produced by the different hash functions would not be\n\t    identical for positive and negative zero.</p> <p>This\n\t    change ensures that hash value of positive zero is always\n\t    produced regardless of the signedness of the zero float,\n\t    i.e.,</p>\n          <p>\n\t    <c>true = erlang:phash2(0.0) =:=\n\t    erlang:phash2(0.0/-1)</c></p>\n          <p>\n\t    Own Id: OTP-12641</p>\n        </item>\n        <item>\n          <p>\n\t    Ensure NIF term creation disallows illegal floating point\n\t    values and too long atoms. Such values will cause a NIF\n\t    to throw badarg exception when it returns.</p>\n          <p>\n\t    Own Id: OTP-12655</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed building of Map results from match_specs</p>\n          <p>\n\t    A faulty \"box-value\" entered into the heap which could\n\t    cause a segmentation fault in the garbage collector if it\n\t    was written on a heap fragment.</p>\n          <p>\n\t    Own Id: OTP-12656</p>\n        </item>\n        <item>\n          <p>\n\t    Fix hipe bug when matching a \"writable\" binary. The bug\n\t    has been seen to sometimes cause a failed binary matching\n\t    of a correct utf8 character, but other symptoms are also\n\t    possible.</p>\n          <p>\n\t    Own Id: OTP-12667</p>\n        </item>\n        <item>\n          <p>\n\t    Keep dirty schedulers from waking other schedulers.</p>\n          <p>\n\t    Own Id: OTP-12685</p>\n        </item>\n        <item>\n          <p>\n\t    Disable floating point exceptions if the VM is compiled\n\t    by clang/llvm. This is a known long-standing problem in\n\t    clang/llvm.</p>\n          <p>\n\t    Own Id: OTP-12717</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>file:sendfile</c> for FreeBSD causing not\n\t    the entire file to be sent.</p>\n          <p>\n\t    Own Id: OTP-12720</p>\n        </item>\n        <item>\n          <p>\n\t    Fix the broken Android support in erl_child_setup.c</p>\n          <p>\n\t    Own Id: OTP-12751</p>\n        </item>\n        <item>\n          <p>\n\t    Faulty statistics reported by the <c>fix_alloc</c>\n\t    allocator.</p>\n          <p>\n\t    Own Id: OTP-12766</p>\n        </item>\n        <item>\n          <p>\n\t    Fix two erts_snprintf() calls to correct sizes.</p>\n          <p>\n\t    - run_erl.c (ose): Use the size of the signal type, not\n\t    its pointer. - erl_node_tables.c: Use the size of the\n\t    _BUFFER in erts_snprintf() to make sure we can use the\n\t    full space.</p>\n          <p>\n\t    Own Id: OTP-12771</p>\n        </item>\n        <item>\n          <p>\n\t    Delayed memory allocations could be delayed an\n\t    unnecessarily long time.</p>\n          <p>\n\t    Own Id: OTP-12812</p>\n        </item>\n        <item>\n          <p>\n\t    Make sure that timeouts on a pool of acceptors are\n\t    released in the correct order.</p>\n          <p>\n\t    Own Id: OTP-12817</p>\n        </item>\n        <item>\n          <p>\n\t    Fix segmentation fault in module_info for deleted modules</p>\n          <p>\n\t    Own Id: OTP-12820</p>\n        </item>\n        <item>\n\t    <p>Fix garbage collection of literals in code purge</p>\n\t    <p>During code purging and check_process_code, the\n\t    checking of the binary reference embedded in the match\n\t    binary state was omitted for the tracing tests. This\n\t    would cause the binary match state to reference\n\t    deallocated memory.</p>\n          <p>\n\t    Own Id: OTP-12821</p>\n        </item>\n        <item>\n          <p>\n\t    A bug has been corrected for gen_tcp:close so when\n\t    {linger,{true,0}} is in effect it does not wait for data\n\t    in the driver queue to transfer out before closing the\n\t    port. Bug fix by Rory Byrne.</p>\n          <p>\n\t    Own Id: OTP-12840</p>\n        </item>\n        <item>\n          <p>\n\t    The documentation of the driver callback <seealso\n\t    marker=\"driver_entry#start\"><c>start()</c></seealso>\n\t    erroneously stated that a return value of\n\t    <c>ERL_DRV_ERROR_ERRNO</c> caused the error value to be\n\t    passed via <c>erl_errno</c> when it should have been\n\t    <c>errno</c>.</p>\n          <p>\n\t    Own Id: OTP-12855</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Add <c>md5</c> and <c>module</c> entries to\n\t    <c>?MODULE:module_info/0/1</c> and remove obsolete entry\n\t    'import'.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11940</p>\n        </item>\n        <item>\n          <p>\n\t    Debug function <c>erlang:display/1</c> shows content of\n\t    binaries and bitstrings, not only the length.</p>\n          <p>\n\t    Own Id: OTP-11941</p>\n        </item>\n        <item>\n\t    <p>The time functionality of Erlang has been extended.\n\t    This both includes a <seealso\n\t    marker=\"time_correction#The_New_Time_API\">new\n\t    API</seealso> for time, as well as <seealso\n\t    marker=\"time_correction#Time_Warp_Modes\">time warp\n\t    modes</seealso> which alters the behavior of the system\n\t    when system time changes. <em>You are strongly encouraged\n\t    to use the new API</em> instead of the old API based on\n\t    <seealso\n\t    marker=\"erlang#now/0\"><c>erlang:now/0</c></seealso>.\n\t    <c>erlang:now/0</c> has been deprecated since it is and\n\t    forever will be a scalability bottleneck. For more\n\t    information see the <seealso\n\t    marker=\"time_correction\">Time and Time\n\t    Correction</seealso> chapter of the ERTS User's\n\t    Guide.</p>\n\t    <p>Besides the API changes and time warp modes a lot of\n\t    scalability and performance improvements regarding time\n\t    management has been made internally in the runtime\n\t    system. Examples of such improvements are scheduler\n\t    specific timer wheels, scheduler specific BIF timer\n\t    management, parallel retrieval of monotonic time and\n\t    system time on systems with primitives that are not\n\t    buggy.</p>\n          <p>\n\t    Own Id: OTP-11997</p>\n        </item>\n        <item>\n\t    <p><c>erlang:function_exported(M, F, A)</c> will now\n\t    return <c>true</c> if <c>M:F/A</c> refers to a BIF.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12099</p>\n        </item>\n        <item>\n          <p>\n\t    New BIF: <c>erlang:get_keys/0</c>, lists all keys\n\t    associated with the process dictionary. Note:\n\t    <c>erlang:get_keys/0</c> is auto-imported.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12151 Aux Id: seq12521 </p>\n        </item>\n        <item>\n          <p>\n\t    Make distributed send of large messages yield to improve\n\t    real-time characteristics.</p>\n          <p>\n\t    Own Id: OTP-12232</p>\n        </item>\n        <item>\n          <p>\n\t    Use high accuracy poll timeouts</p>\n          <p>\n\t    Where available, use poll/select API's that can handle\n\t    time resolutions less than 1ms. In the cases where such\n\t    API's are not available the timeout is rounded up to the\n\t    nearest ms.</p>\n          <p>\n\t    Own Id: OTP-12236</p>\n        </item>\n        <item>\n          <p>\n\t    The internal group to user_drv protocol has been changed\n\t    to be synchronous in order to guarantee that output sent\n\t    to a process implementing the user_drv protocol is\n\t    printed before replying. This protocol is used by the\n\t    standard_output device and the ssh application when\n\t    acting as a client. </p>\n          <p>\n\t    This change changes the previous unlimited buffer when\n\t    printing to standard_io and other devices that end up in\n\t    user_drv to 1KB.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12240</p>\n        </item>\n        <item>\n\t    <p>The previously introduced \"eager check I/O\" feature is\n\t    now enabled by default.</p>\n\t    <p>Eager check I/O can be disabled using the <c>erl</c>\n\t    command line argument: <c>+secio false</c></p>\n\t    <p>Characteristics impact compared to previous\n\t    default:</p> <list> <item>Lower latency and smoother\n\t    management of externally triggered I/O operations.</item>\n\t    <item>A slightly reduced priority of externally triggered\n\t    I/O operations.</item> </list>\n          <p>\n\t    Own Id: OTP-12254 Aux Id: OTP-12117 </p>\n        </item>\n        <item>\n          <p>\n\t    Properly support maps in match_specs</p>\n          <p>\n\t    Own Id: OTP-12270</p>\n        </item>\n        <item>\n          <p>\n\t    The notice that a crashdump has been written has been\n\t    moved to be printed before the crashdump is generated\n\t    instead of afterwords. The wording of the notice has also\n\t    been changed.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12292</p>\n        </item>\n        <item>\n          <p>\n\t    New function <c>ets:take/2</c>. Works the same as\n\t    <c>ets:delete/2</c> but also returns the deleted\n\t    object(s).</p>\n          <p>\n\t    Own Id: OTP-12309</p>\n        </item>\n        <item>\n          <p>\n\t    Tracing with cpu_timestamp option has been enabled on\n\t    Linux.</p>\n          <p>\n\t    Own Id: OTP-12366</p>\n        </item>\n        <item>\n          <p>\n\t    ets:info/1,2 now contains information about whether\n\t    write_concurrency or read_concurrency is enabled.</p>\n          <p>\n\t    Own Id: OTP-12376</p>\n        </item>\n        <item>\n          <p>\n\t    Improved usage of <c>gcc</c>'s builtins for atomic memory\n\t    access. These are used when no other implementation of\n\t    atomic memory operations is available. For example, when\n\t    compiling for ARM when <c>libatomic_ops</c> is not\n\t    available.</p>\n          <p>\n\t    The largest improvement will be seen when compiling with\n\t    a <c>gcc</c> with support for the <c>__atomic_*</c>\n\t    builtins (using a <c>gcc</c> of at least version 4.7),\n\t    but also when only the legacy <c>__sync_*</c> builtins\n\t    are available (using a <c>gcc</c> of at least version\n\t    4.1) an improvement can be seen.</p>\n          <p>\n\t    For more information see the \"<seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP_Configuring_Atomic-Memory-Operations-and-the-VM\">Atomic\n\t    Memory Operations and the VM</seealso>\" section of\n\t    <c>$ERL_TOP/HOWTO/INSTALL.md</c>.</p>\n          <p>\n\t    Own Id: OTP-12383</p>\n        </item>\n        <item>\n          <p>\n\t    Introduce <c>math:log2/1</c> function to math module.</p>\n          <p>\n\t    Own Id: OTP-12411</p>\n        </item>\n        <item>\n\t    <p>The documentation of the Abstract Format (in the ERTS\n\t    User's Guide) has been updated with types and\n\t    specification. (Thanks to Anthony Ramine.) </p> <p> The\n\t    explicit representation of parentheses used in types of\n\t    the abstract format has been removed. Instead the new\n\t    functions <c>erl_parse:type_inop_prec()</c> and\n\t    <c>erl_parse:type_preop_prec()</c> can be used for\n\t    inserting parentheses where needed. </p>\n          <p>\n\t    Own Id: OTP-12492</p>\n        </item>\n        <item>\n          <p>\n\t    Remove perfctr support</p>\n          <p>\n\t    Development of perfctr in the linux kernel ceased in\n\t    2010. The perfctr support code in the Erlang VM is thus\n\t    effectively dead code and therefor removed.</p>\n          <p>\n\t    Own Id: OTP-12508</p>\n        </item>\n        <item>\n\t    <p><c>zlib:inflateChunk/2</c> has been added. It works\n\t    like <c>zlib:inflate/2</c>, but decompresses no more data\n\t    than will fit in the buffer configured by\n\t    <c>zlib:setBufSize/2</c>.</p>\n          <p>\n\t    Own Id: OTP-12548</p>\n        </item>\n        <item>\n          <p>\n\t    Use linear search for small select_val arrays</p>\n          <p>\n\t    Own Id: OTP-12555</p>\n        </item>\n        <item>\n          <p>\n\t    New BIF ets:update_counter/4 with a default object as\n\t    argument, which will be inserted in the table if the key\n\t    was not found.</p>\n          <p>\n\t    Own Id: OTP-12563</p>\n        </item>\n        <item>\n          <p>\n\t    Export missing types from zlib module</p>\n          <p>\n\t    Own Id: OTP-12584</p>\n        </item>\n        <item>\n          <p>\n\t    Use persistent hashmaps for large Maps</p>\n          <p>Maps will use a\n\t    persistent hashmap implementation when the number of\n\t    pairs in a Map becomes sufficiently large. The change\n\t    will occur when a Map reaches 33 pairs in size but this\n\t    limit might change in the future.</p>\n          <p>The most significant impact for the user by this\n\t    change is speed, and to a lesser degree memory\n\t    consumption and introspection of Maps. Memory consumption\n\t    size is probalistic but lesser than <c>gb_trees</c> or\n\t    <c>dict</c> for instance. Any other impacts will be\n\t    transparent for the user except for the following\n\t    changes.</p>\n          <p>Semantics of Maps have changed in two incompatible\n\t    ways compared to the experimental implementation in OTP\n\t    17:</p> <list> <item>Hashing of maps is done different by\n\t    <c>erlang:phash2/1,2</c>, <c>erlang:phash/1</c> and\n\t    <c>erlang:hash/2</c>.</item> <item>Comparing two maps\n\t    with ==, /=, =&lt;, &lt;, &gt;= and &gt;, is done\n\t    different if the keys contain floating point\n\t    numbers.</item> </list>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12585</p>\n        </item>\n        <item>\n          <p>\n\t    Scalability improvement for <seealso\n\t    marker=\"erlang#make_ref/0\">erlang:make_ref/0</seealso>,\n\t    and other functionality that create references. Each\n\t    scheduler now manage its own set of references. By this\n\t    no communication at all is needed when creating\n\t    references.</p>\n          <p>\n\t    Previous implementation generated a strictly\n\t    monotonically increasing sequence of references\n\t    corresponding to creation time on the runtime system\n\t    instance. This is <em>not</em> the case with current\n\t    implementation. You can only expect reference to be\n\t    unique. The Erlang/OTP documentation has never mentioned\n\t    anything else but the uniqueness property, so this change\n\t    <em>is</em> fully compatible. The only reason we've\n\t    marked this as a potential incompatibility is since an\n\t    early draft for an Erlang specification mentions strict\n\t    monotonicity as a property.</p>\n          <p>\n\t    If you need to create data with a strict monotonicity\n\t    property use <seealso\n\t    marker=\"erlang#unique_integer/1\">erlang:unique_integer([monotonic])</seealso>.\n\t    Do <em>not</em> use the deprecated <seealso\n\t    marker=\"erlang#now/0\">erlang:now()</seealso>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12610</p>\n        </item>\n        <item>\n          <p>\n\t    Enable different abort signal from heart</p>\n\t    <p>By using environment variable HEART_KILL_SIGNAL, heart\n\t    can now use a different signal to kill the old running\n\t    Erlang.</p>\n\t    <p>By default the signal is SIGKILL but SIGABRT may also\n\t    be used by setting environment variable:\n\t    HEART_KILL_SIGNAL=SIGABRT</p>\n          <p>\n\t    Own Id: OTP-12613 Aux Id: seq12826 </p>\n        </item>\n        <item>\n          <p>\n\t    Update autconf to latest version 2015-03-04</p>\n          <p>\n\t    Own Id: OTP-12646</p>\n        </item>\n        <item>\n          <p>\n\t    Optimization of timers internally in the VM. This include\n\t    process timers (<c>receive ... after</c>), port timers\n\t    (<c>driver_set_timer()</c>) as well as BIF timers\n\t    (<c>erlang:send_after()</c>/<c>erlang:start_timer()</c>).</p>\n          <p>\n\t    Each scheduler thread now has its own lock-free timer\n\t    service instead of one locked central service. This\n\t    dramatically improves performance of timer management on\n\t    systems with a large amount of schedulers and timers.</p>\n          <p>\n\t    The timer service internal data structure has also been\n\t    optimized to be able to handle more timers than before.\n\t    That is, each timer service is by its self able to handle\n\t    more timers without dramatic performance loss than the\n\t    old centralized timer service.</p>\n          <p>\n\t    The API of BIF timers has also been extended. Timeout\n\t    values are for example no longer limited to 32-bit\n\t    integers. For more information see the documentation of\n\t    <seealso\n\t    marker=\"erlang#start_timer/4\"><c>erlang:start_timer/4</c></seealso>,\n\t    <seealso\n\t    marker=\"erlang#send_after/4\"><c>erlang:send_after/4</c></seealso>,\n\t    <seealso\n\t    marker=\"erlang#cancel_timer/2\"><c>erlang:cancel_timer/2</c></seealso>,\n\t    and <seealso\n\t    marker=\"erlang#read_timer/2\"><c>erlang:read_timer/2</c></seealso>.</p>\n          <p>\n\t    Characteristics impact: Calls to the synchronous versions\n\t    of <c>erlang:cancel_timer()</c>, and\n\t    <c>erlang:read_timer()</c> may take substantially longer\n\t    time to complete than before. This occur when the timer\n\t    that is accessed is managed by a remote scheduler. You\n\t    typically want to use the new asynchronous option in\n\t    order to avoid blocking the calling process.</p>\n          <p>\n\t    Own Id: OTP-12650 Aux Id: OTP-11997 </p>\n        </item>\n        <item>\n          <p>\n\t    Specialize instructions from common assembler patterns</p>\n\t    <p>Specialize common instructions of <c>rem</c>,\n\t    <c>band</c>, <c>minus</c> and <c>plus</c> in the beam\n\t    loader. This will reduce the number of fetches and thus\n\t    lessen the instruction dispatch pressure during runtime\n\t    and speed up those operations in some common cases.</p>\n\t    <p>Specialize move patterns from x-registers to the stack\n\t    with a new <c>move_window</c> instruction. This change\n\t    will reduce instruction dispatch pressure.</p>\n          <p>\n\t    Own Id: OTP-12690</p>\n        </item>\n        <item>\n          <p>\n\t    Fix cross compilation for Android.</p>\n          <p>\n\t    Own Id: OTP-12693</p>\n        </item>\n        <item>\n          <p>\n\t    Fix incorrect use of autoconf macro AC_EGREP_CPP, which\n\t    could cause faulty configuration if run from a path\n\t    containing the string 'yes'.</p>\n          <p>\n\t    Own Id: OTP-12706</p>\n        </item>\n        <item>\n          <p>\n\t    Minimal Java version is now 1.6</p>\n          <p>\n\t    Own Id: OTP-12715</p>\n        </item>\n        <item>\n          <p>\n\t    Send format and args on process exit to error_logger</p>\n          <p>\n\t    Previously, the emulator would generate a whole string\n\t    with values and call the error_logger passing\n\t    <c>\"~s~n\"</c>. This changes it to a format string\n\t    containing <c>~p</c> with the respective values as\n\t    arguments.</p>\n          <p>\n\t    Own Id: OTP-12735</p>\n        </item>\n        <item>\n          <p>\n\t    Map error logger warnings to warning messages by default.</p>\n          <p>\n\t    Own Id: OTP-12755</p>\n        </item>\n        <item>\n          <p>\n\t    Configure architecture ppc64le architecture as a ppc64</p>\n          <p>\n\t    Own Id: OTP-12761</p>\n        </item>\n        <item>\n          <p>\n\t    Add function <c>enif_raise_exception</c> to allow a NIF\n\t    to raise an error exception with any type of reason.</p>\n          <p>\n\t    Own Id: OTP-12770</p>\n        </item>\n        <item>\n          <p>\n\t    Optimized node table statistics retrieval.</p>\n          <p>\n\t    Own Id: OTP-12777</p>\n        </item>\n        <item>\n          <p>\n\t    Map beam error logger warnings to warning messages by\n\t    default. Previously these messages were mapped to the\n\t    error channel by default.</p>\n          <p>\n\t    Own Id: OTP-12781</p>\n        </item>\n        <item>\n          <p>\n\t    gen_tcp:shutdown/2 is now asynchronous</p>\n          <p>\n\t    This solves the following problems with the old\n\t    implementation:</p>\n          <p>\n\t    It doesn't block when the TCP peer is idle or slow. This\n\t    is the expected behaviour when shutdown() is called: the\n\t    caller needs to be able to continue reading from the\n\t    socket, not be prevented from doing so.</p>\n          <p>\n\t    It doesn't truncate the output. The current version of\n\t    gen_tcp:shutdown/2 will truncate any outbound data in the\n\t    driver queue after about 10 seconds if the TCP peer is\n\t    idle of slow. Worse yet, it doesn't even inform anyone\n\t    that the data has been truncated: 'ok' is returned to the\n\t    caller; and a FIN rather than an RST is sent to the TCP\n\t    peer.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12797</p>\n        </item>\n        <item>\n          <p>\n\t    Introduced delayed node table GC. This in order to avoid\n\t    oscillation of entries in and out of the tables. The\n\t    oscillation caused unnecessary lock contention on the\n\t    table locks. The delay length can be set by passing the\n\t    <seealso marker=\"erl#+zdntgc\"><c>+zdntgc</c></seealso>\n\t    command line argument.</p>\n          <p>\n\t    Characteristics impact: The tables can grow to very large\n\t    sizes with unused entries if the node is get huge amounts\n\t    of short lived connections from other nodes. This problem\n\t    can be alleviated by shortening the length of the delay\n\t    using the <c>+zdntgc</c> command line argument.</p>\n          <p>\n\t    Own Id: OTP-12802</p>\n        </item>\n        <item>\n\t    <p>Improved implementation of <seealso\n\t    marker=\"erlang#statistics/1\"><c>erlang:statistics</c></seealso><c>(io)</c>\n\t    in order to reduce contention between schedulers.</p>\n\t    <p>Characteristics impact: The actual call to\n\t    <c>erlang:statistics(io)</c> takes longer time to\n\t    complete, but the overall impact on the system is\n\t    improved.</p>\n          <p>\n\t    Own Id: OTP-12842</p>\n        </item>\n        <item>\n          <p>\n\t    There are many cases where user code needs to be able to\n\t    distinguish between a socket that was closed normally and\n\t    one that was aborted. Setting the option\n\t    {show_econnreset, true} enables the user to receive\n\t    ECONNRESET errors on both active and passive sockets.</p>\n          <p>\n\t    Own Id: OTP-12843</p>\n        </item>\n        <item>\n          <p>\n\t    Do not preallocate too large event pool</p>\n          <p>\n\t    A default pool size of 4000 is too excessive for the\n\t    common case. This corresponds directly to the number of\n\t    threads in the system. Change\n\t    ERTS_TS_EV_ALLOC_DEFAULT_POOL_SIZE to 2048. Change\n\t    ERTS_TS_EV_ALLOC_POOL_SIZE to 32.</p>\n          <p>\n\t    Own Id: OTP-12849</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.4.1.7</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A process communicating with a port via one of the\n\t    <c>erlang:port_*</c> BIFs could potentially end up in an\n\t    inconsistent state if the port terminated during the\n\t    communication. When this occurred the process could later\n\t    block in a <c>receive</c> even though it had messages\n\t    matching in its message queue.</p>\n          <p>\n\t    This bug was introduced in erts version 5.10 (OTP R16A).</p>\n          <p>\n\t    Own Id: OTP-13424 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>erl_drv_send_term()</c> or\n\t    <c>erl_drv_output_term()</c> from a non-scheduler thread\n\t    while the corresponding port was invalid caused the\n\t    emulator to enter an inconsistent state which eventually\n\t    caused an emulator crash.</p>\n          <p>\n\t    Own Id: OTP-13866</p>\n        </item>\n        <item>\n\t    <p>Driver and NIF operations accessing processes or ports\n\t    could cause an emulator crash when used from\n\t    non-scheduler threads. Those operations are:</p> <list>\n\t    <item><c>erl_drv_send_term()</c></item>\n\t    <item><c>driver_send_term()</c></item>\n\t    <item><c>erl_drv_output_term()</c></item>\n\t    <item><c>driver_output_term()</c></item>\n\t    <item><c>enif_send()</c></item>\n\t    <item><c>enif_port_command()</c></item> </list>\n          <p>\n\t    Own Id: OTP-13869</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>binary_to_term</c> for binaries created by\n\t    <c>term_to_binary </c> with option <c>compressed</c>. The\n\t    bug can cause <c>badarg</c> exception for a valid binary\n\t    when Erlang VM is linked against a <c>zlib</c> library of\n\t    version 1.2.9 or newer. Bug exists since OTP 17.0.</p>\n          <p>\n\t    Own Id: OTP-14159 Aux Id: ERL-340 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in operator <c>bxor</c> causing erroneuos\n\t    result when one operand is a big <em>negative</em>\n\t    integer with the lowest <c>N*W</c> bits as zero and the\n\t    other operand not larger than <c>N*W</c> bits. <c>N</c>\n\t    is an integer of 1 or larger and <c>W</c> is 32 or 64\n\t    depending on word size.</p>\n          <p>\n\t    Own Id: OTP-14514</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug in <c>binary_to_term</c> and\n\t    <c>binary_to_atom</c> that could cause VM crash.\n\t    Typically happens when the last character of an UTF8\n\t    string is in the range 128 to 255, but truncated to only\n\t    one byte. Bug exists in <c>binary_to_term</c> since ERTS\n\t    version 5.10.2 (OTP_R16B01) and <c>binary_to_atom</c>\n\t    since ERTS version 9.0 (OTP-20.0).</p>\n          <p>\n\t    Own Id: OTP-14590 Aux Id: ERL-474 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.4.1.6</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    When calling <c>garbage_collect/[1,2]</c> or\n\t    <c>check_process_code/[2,3]</c> from a process with a\n\t    higher priority than the priority of the process operated\n\t    on, the run queues could end up in an inconsistent state.\n\t    This bug has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-13298 Aux Id: OTP-11388 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.4.1.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug that could cause a crash dump to become\n\t    almost empty.</p>\n          <p>\n\t    Own Id: OTP-13150</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.4.1.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The 'raw' socket option could not be used multiple times\n\t    in one call to any e.g gen_tcp function because only one\n\t    of the occurrences were used. This bug has been fixed,\n\t    and also a small bug concerning propagating error codes\n\t    from within inet:setopts/2.</p>\n          <p>\n\t    Own Id: OTP-11482 Aux Id: seq12872 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 6.4.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The VTS mode in Common Test has been modified to use a\n\t    private version of the Webtool application (ct_webtool).</p>\n          <p>\n\t    Own Id: OTP-12704 Aux Id: OTP-10922 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix missing quotation in the <c>LM_FIND_EMU_CC</c>\n\t    <c>autoconf</c> macro which could cause build failures.</p>\n          <p>\n\t    Own Id: OTP-12388</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erroneous printout of monitors in crashdump file.</p>\n          <p>\n\t    Own Id: OTP-12537</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system without SMP support could crash in the\n\t    BIF <c>port_control/3</c> if the port that was being\n\t    accessed died during the call to the BIF.</p>\n          <p>\n\t    Own Id: OTP-12544 Aux Id: Seq12777 </p>\n        </item>\n        <item>\n          <p>\n\t    Avoid corrupt oversized integer to be created from binary\n\t    matching. Instead throw system_limit exception which is\n\t    the correct behavior. A peculiar symptom of this bug was\n\t    that bitwise operations (band, bor, bxor) on such\n\t    oversized integers could return the empty list [].\n\t    Credit: Mikael Pettersson, Nico Kruber</p>\n          <p>\n\t    Own Id: OTP-12556</p>\n        </item>\n        <item>\n          <p>\n\t    A race condition when calling <c>port_info/1</c> could\n\t    cause a memory fault has been fixed.</p>\n          <p>\n\t    Own Id: OTP-12587</p>\n        </item>\n        <item>\n          <p>\n\t    Fix comparison of exact terms. An overflow that could\n\t    cause faulty comparisons has been fixed. Comparison of\n\t    exact terms is exclusively used within Maps.</p>\n          <p>\n\t    Own Id: OTP-12623</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>list_to_integer/1</c> for very long lists\n\t    that could cause VM crash.</p>\n          <p>\n\t    Own Id: OTP-12624</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Introduced a runtime system internal 64-bit API for\n\t    atomic memory operations.</p>\n          <p>\n\t    Own Id: OTP-12351</p>\n        </item>\n        <item>\n          <p>\n\t    Add command line argument option for the initial size of\n\t    process dictionaries.</p>\n          <p>\n\t    Use '+hpds &lt;size&gt;' to set initial process\n\t    dictionary size for spawned processes.</p>\n          <p>\n\t    Own Id: OTP-12535 Aux Id: seq12809 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix documentation on $char for Unicode</p>\n          <p>\n\t    Own Id: OTP-12545</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix getifaddrs realloc pointer error</p>\n          <p>\n\t    When a buffer was exhausted and subsequently reallocated,\n\t    we could get an unsafe pointer pointing to faulty memory.</p>\n          <p>\n\t    For this to occur we would need to have a large number of\n\t    interfaces and a reallocation of memory to a lower\n\t    addresses.</p>\n          <p>\n\t    The symptom would be garbage returned from\n\t    erlang:port_control(Port, 25, [])\n\t    (prim_inet:getifaddrs(Port) resulting in a badarg) or a\n\t    segmentation fault.</p>\n          <p>\n\t    Own Id: OTP-12445</p>\n        </item>\n        <item>\n          <p>\n\t    Don't close all file descriptors twice in child_setup</p>\n          <p>\n\t    The commit c2b4eab25c907f453a394d382c04cd04e6c06b49\n\t    introduced an error in which child_setup erroneously\n\t    tried to close all file descriptors twice.</p>\n          <p>\n\t    Use closefrom() if available when closing all file\n\t    descriptors.</p>\n          <p>\n\t    The function closefrom() was only used in the vfork()\n\t    case before but is now also used in the fork() case if\n\t    available.</p>\n          <p>\n\t    Own Id: OTP-12446</p>\n        </item>\n        <item>\n          <p>\n\t    During a crashdump all file descriptors are closed to\n\t    ensure the closing of the epmd port and to reserve a file\n\t    descriptor for the crashdump file.</p>\n          <p>\n\t    If a driver (third party library) cannot handle closing\n\t    of sockets this could result in a segmentation fault in\n\t    which case a crashdump would not be produced. This is now\n\t    fixed by only closing inets sockets via an emergency\n\t    close callback to the driver and thus closing the epmd\n\t    socket.</p>\n          <p>\n\t    Own Id: OTP-12447</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix HiPE debug lock checking on OS X 64bit</p>\n          <p>\n\t    Position-independent code is mandatory on OS X. We use\n\t    r11 as an intermediate register to fill\n\t    BIF_P-&gt;hipe.bif_callee. This fixes the following error\n\t    when doing `make debug FLAVOR=smp`:</p>\n          <p>\n\t    clang -cc1as: fatal error: error in backend: 32-bit\n\t    absolute addressing is not supported in 64-bit mode</p>\n          <p>\n\t    Own Id: OTP-12188</p>\n        </item>\n        <item>\n          <p>\n\t    Fix race bug that could cause VM crash in\n\t    <c>erlang:port_get_data/1</c> if the port was closed by a\n\t    concurrent process. Also fix fatal bug if\n\t    <c>port_set_data/2</c> is called with a non-immediate\n\t    data term. Both bugs exist since R16B01.</p>\n          <p>\n\t    Own Id: OTP-12208</p>\n        </item>\n        <item>\n          <p>\n\t    Correct make variable SSL_DED_LD_RUNTIME_LIBRARY_PATH\n\t    when erl_xcomp_sysroot ends with a slash.</p>\n          <p>\n\t    Own Id: OTP-12216 Aux Id: seq12700 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix two cases of unreachable code caused by false use of\n\t    assigment operators.</p>\n          <p>\n\t    Own Id: OTP-12222</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug when hipe compiled code makes tail call to a BIF\n\t    that disables GC while trapping (sush as binary_to_list,\n\t    list_to_binary, binary_to_term, term_to_binary).</p>\n          <p>\n\t    Own Id: OTP-12231</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug when a migrated empty memory carrier is reused\n\t    just before it should be destroyed by the thread that\n\t    created it.</p>\n          <p>\n\t    Own Id: OTP-12249</p>\n        </item>\n        <item>\n          <p>\n\t    Prevents compile-time errors in NIFs, when the compiler\n\t    is instructed to treat missing field initializers as\n\t    errors, by adding an initializer for the new options\n\t    field which was added to ErlNifEntry for 17.3.</p>\n          <p>\n\t    Own Id: OTP-12266</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed CPU topology detection on FreeBSD systems where\n\t    Erlang/OTP is compiled by new C compilers (including, but\n\t    possibly not limited to, gcc 4.9 and clang).</p>\n          <p>\n\t    Own Id: OTP-12267</p>\n        </item>\n        <item>\n          <p>\n\t    Use C99 function isfinite() instead of finite() when\n\t    available on non GCC compilers.</p>\n          <p>\n\t    Own Id: OTP-12268</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug on windows where an incorrect number of links\n\t    could be returned when doing file:read_file_info on a\n\t    directory.</p>\n          <p>\n\t    Own Id: OTP-12269</p>\n        </item>\n        <item>\n          <p>\n\t    Fix rare bug when purging module on VM started with\n\t    +Meamin.</p>\n          <p>\n\t    Own Id: OTP-12273</p>\n        </item>\n        <item>\n          <p>\n\t    Repair run_erl terminal window size adjustment sent from\n\t    to_erl. This was broken in OTP 17.0 which could lead to\n\t    strange cursor behaviour in the to_erl shell.</p>\n          <p>\n\t    Own Id: OTP-12275 Aux Id: seq12739 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug on windows causing gen_tcp/udp to return an\n\t    error when given an fd to work with.</p>\n          <p>\n\t    Own Id: OTP-12289</p>\n        </item>\n        <item>\n          <p>\n\t    Fix various internal erts issues where negating a signed\n\t    integer in C would trigger undefined behavior. This fixes\n\t    issues when dividing with bignums and list_to_integer.</p>\n          <p>\n\t    Own Id: OTP-12290</p>\n        </item>\n        <item>\n          <p>\n\t    When flushing output to stdout on windows, the emulator\n\t    could sometimes hang indefinitely waiting for the flush\n\t    to complete. This has been fixed.</p>\n          <p>\n\t    Own Id: OTP-12291</p>\n        </item>\n        <item>\n          <p>\n\t    Fix so that non-smp emulators with dirty scheduler\n\t    support shows the correct number of dirty schedulers when\n\t    calling erlang:system_info(system_version).</p>\n          <p>\n\t    Own Id: OTP-12295</p>\n        </item>\n        <item>\n          <p>\n\t    Add <c>nif_version</c> to <c>erlang:system_info/1</c> in\n\t    order to get the NIF API version of the runtime system in\n\t    a way similar to <c>driver_version</c>.</p>\n          <p>\n\t    Own Id: OTP-12298</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug that could cause the return value from dirty NIF\n\t    with zero arity to be treated as garbage, leading to VM\n\t    crash.</p>\n          <p>\n\t    Own Id: OTP-12300</p>\n        </item>\n        <item>\n          <p>\n\t    Improve allocation carrier migration search logic. This\n\t    will reduce the risk of failed migrations that could lead\n\t    to excess memory consumption. It will also improve smp\n\t    performance due to reduced memory contention on the\n\t    migration pool.</p>\n          <p>\n\t    Own Id: OTP-12323</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Introduced support for eager check I/O.</p>\n\t    <p>By default eager check I/O will be disabled, but this\n\t    will most likely be changed in OTP 18. When eager check\n\t    I/O is enabled, schedulers will more frequently check for\n\t    I/O work. Outstanding I/O operations will however not be\n\t    prioritized to the same extent as when eager check I/O is\n\t    disabled.</p>\n\t    <p>Eager check I/O can be enabled using the <c>erl</c>\n\t    command line argument: <c>+secio true</c></p>\n\t    <p>Characteristics impact when enabled:</p> <list>\n\t    <item>Lower latency and smoother management of externally\n\t    triggered I/O operations.</item> <item>A slightly reduced\n\t    priority of externally triggered I/O operations.</item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-12117</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erts .app-file</p>\n          <p>\n\t    Own Id: OTP-12189</p>\n        </item>\n        <item>\n          <p>\n\t    Add configure option --with-ssl-incl=PATH to support\n\t    OpenSSL installations with headers and libraries at\n\t    different places.</p>\n          <p>\n\t    Own Id: OTP-12215 Aux Id: seq12700 </p>\n        </item>\n        <item>\n          <p>\n\t    Optimization of atomic memory operations with release\n\t    barrier semantics on 32-bit PowerPC when using the\n\t    implementation included in OTP.</p>\n          <p>\n\t    Own Id: OTP-12250</p>\n        </item>\n        <item>\n          <p>\n\t    Minor adjustment of scheduler activation code making sure\n\t    that an activation of a scheduler is not prevented by its\n\t    run-queue being non-empty. (Thanks to Songlu Cai)</p>\n          <p>\n\t    Own Id: OTP-12287</p>\n        </item>\n        <item>\n          <p>\n\t    Improved support for atomic memory operations provided by\n\t    the <url\n\t    href=\"https://github.com/ivmai/libatomic_ops/\">libatomic_ops</url>\n\t    library. Most importantly support for use of native\n\t    double word atomics when implemented by\n\t    <c>libatomic_ops</c> (for example, implemented for ARM).</p>\n          <p>\n\t    The <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP_Configuring_Atomic-Memory-Operations-and-the-VM\"><c>$ERL_TOP/HOWTO/INSTALL.md</c></seealso>\n\t    document now also more clearly describes when you want to\n\t    build together with a <c>libatomic_ops</c> installation.</p>\n          <p>\n\t    Own Id: OTP-12302</p>\n        </item>\n        <item>\n          <p>\n\t    Add configure option --with-ssl-rpath to control which\n\t    runtime library path to use for dynamic linkage toward\n\t    OpenSSL.</p>\n          <p>\n\t    Own Id: OTP-12316 Aux Id: seq12753 </p>\n        </item>\n        <item>\n          <p>\n\t    Added systemd notify support to epmd</p>\n          <p>\n\t    Own Id: OTP-12321</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.2.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix bug when an migrated empty memory carrier is reused\n\t    just before it should be destroyed by the thread that\n\t    created it.</p>\n          <p>\n\t    Own Id: OTP-12249</p>\n        </item>\n        <item>\n          <p>\n\t    Repair run_erl terminal window size adjustment sent from\n\t    to_erl. This was broken in OTP 17.0 which could lead to\n\t    strange cursor behaviour in the to_erl shell.</p>\n          <p>\n\t    Own Id: OTP-12275 Aux Id: seq12739 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    General documentation updates.</p>\n          <p>\n\t    Own Id: OTP-12052</p>\n        </item>\n        <item>\n\t    <p>A bug in the VM code implementing sending of signals\n\t    to ports could cause the receiving port queue to remain\n\t    in a busy state forever. When this state had been\n\t    reached, processes sending command signals to the port\n\t    either got suspended forever, or, if the <c>nosuspend</c>\n\t    feature was used, always failed to send to the port. This\n\t    bug was introduced in ERTS version 5.10.</p>\n\t    <p>In order for this bug to be triggered on a port, one\n\t    had to at least once utilize the <c>nosuspend</c>\n\t    functionality when passing a signal to the port. This by\n\t    either calling</p> <list> <item> <seealso\n\t    marker=\"erlang#port_command/3\"><c>port_command(Port,\n\t    Data, [nosuspend | Options])</c></seealso>, </item>\n\t    <item> <seealso\n\t    marker=\"erlang#send/3\"><c>erlang:send(Port, {PortOwner,\n\t    {command, Data}}, [nosuspend | Options])</c></seealso>,\n\t    </item> <item> <seealso\n\t    marker=\"erlang#send_nosuspend/2\"><c>erlang:send_nosuspend(Port,\n\t    {PortOwner, {command, Data}})</c></seealso>, or </item>\n\t    <item> <seealso\n\t    marker=\"erlang#send_nosuspend/3\"><c>erlang:send_nosuspend(Port,\n\t    {PortOwner, {command, Data}}, Options)</c></seealso>.\n\t    </item> </list>\n\t    <p>Thanks Vasily Demidenok for reporting the issue, and\n\t    Sergey Kudryashov for providing a testcase.</p>\n          <p>\n\t    Own Id: OTP-12082 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix size overflow bug at memory allocation. A memory\n\t    allocation call, with an insane size close to the entire\n\t    address space, could return successfully as if it had\n\t    allocated just a few bytes. (Thanks to Don A. Bailey for\n\t    reporting)</p>\n          <p>\n\t    Own Id: OTP-12091</p>\n        </item>\n        <item>\n          <p>\n\t    Fix various issues where negating a signed integer would\n\t    trigger undefined behaviour. This fixes issues in the\n\t    enif_make_int64 interface and some edge cases inside the\n\t    erlang runtime system.</p>\n          <p>\n\t    Own Id: OTP-12097</p>\n        </item>\n        <item>\n          <p>\n\t    The documentation erroneously listed the <seealso\n\t    marker=\"erl#+swct\"><c>+swct</c></seealso> command line\n\t    argument under <c>+sws</c>.</p>\n          <p>\n\t    Own Id: OTP-12102 Aux Id: OTP-10994 </p>\n        </item>\n        <item>\n          <p>\n\t    Profiling messages could be delivered out of order when\n\t    profiling on <c>runnable_procs</c> and/or\n\t    <c>runnable_ports</c> using <seealso\n\t    marker=\"erlang#system_profile/2\"><c>erlang:system_profile/2</c></seealso>.\n\t    This bug was introduced in ERTS version 5.10.</p>\n          <p>\n\t    Own Id: OTP-12105 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    Various logging fixes, including: Add run queue index to\n\t    the process dump in crash dumps.<br/> Add thread index to\n\t    enomem slogan when crashing.<br/> Remove error logger\n\t    message for sending messages to old instances of the same\n\t    node.</p>\n          <p>\n\t    Own Id: OTP-12115</p>\n        </item>\n        <item>\n          <p>\n\t    Fix compiler warnings reported by LLVM</p>\n          <p>\n\t    Own Id: OTP-12138</p>\n        </item>\n        <item>\n          <p>\n\t    Correct conversion of <c>MIN_SMALL</c> by\n\t    <c>list_to_integer/1</c> and <c>binary_to_integer/1</c>.\n\t    The bug produced an unnormalized bignum which can cause\n\t    strange behavior such as comparing different to a correct\n\t    <c>MIN_SMALL</c> integer. The value <c>MIN_SMALL</c> is\n\t    <c>-(1 bsl 27) = -134217728</c> on a 32-bit VM and <c>-(1\n\t    bsl 59) = -576460752303423488</c> on a 64-bit VM. (Thanks\n\t    to Jesper Louis Andersen, Mikael Pettersson and Anthony\n\t    Ramine for report, patch and optimization suggestion)</p>\n          <p>\n\t    Own Id: OTP-12140</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>term_to_binary</c> that reallocates binary\n\t    with inconsistent size information. Bug has never been\n\t    confirmed to be the cause of any faulty behavior.</p>\n          <p>\n\t    Own Id: OTP-12141</p>\n        </item>\n        <item>\n          <p>\n\t    Real_path method used while prim loading archive files\n\t    was not taking into account the fact that windows\n\t    directory symlinks can be across different drives.</p>\n          <p>\n\t    Own Id: OTP-12155</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Add log2 histogram to lcnt for lock wait time</p>\n          <p>\n\t    Own Id: OTP-12059</p>\n        </item>\n        <item>\n          <p>\n\t    Introduced <seealso\n\t    marker=\"erl_nif#enif_schedule_nif\"><c>enif_schedule_nif()</c></seealso>\n\t    to the NIF API.</p>\n          <p>\n\t    The <c>enif_schedule_nif()</c> function allows a\n\t    long-running NIF to be broken into separate NIF\n\t    invocations without the help of a wrapper function\n\t    written in Erlang. The NIF first executes part of the\n\t    long-running task, then calls <c>enif_schedule_nif()</c>\n\t    to schedule a NIF for later execution to continue the\n\t    task. Any number of NIFs can be scheduled in this manner,\n\t    one after another. Since the emulator regains control\n\t    between invocations, this helps avoid problems caused by\n\t    native code tying up scheduler threads for too long.</p>\n          <p>\n\t    The <c>enif_schedule_nif()</c> function also replaces the\n\t    <c>enif_schedule_dirty_nif()</c> in the experimental\n\t    dirty NIF API. Note that the only incompatible changes\n\t    made are in the experimental dirty NIF API.</p>\n          <p>\n\t    See the <seealso marker=\"erl_nif\">NIF\n\t    documentation</seealso> for more information.</p>\n          <p>\n\t    Thanks to Steve Vinoski.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-12128</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    OTP-11850 fixed filelib:wildcard/1 to work with broken\n\t    symlinks. This correction, however, introduced problems\n\t    since symlinks were no longer followed for functions like\n\t    filelib:ensure_dir/1, filelib:is_dir/1,\n\t    filelib:file_size/1, etc. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-12054 Aux Id: seq12660 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed ETHR_FORCE_INLINE which caused the build to break\n\t    on some platforms without adequate thread support\n\t    (VxWorks).</p>\n          <p>\n\t    Own Id: OTP-12010</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>The documentation for <c>spawn_opt/5</c> now has a\n\t    note mentioning that the <c>monitor</c> option is not\n\t    supported.</p>\n          <p>\n\t    Own Id: OTP-11849</p>\n        </item>\n        <item>\n          <p>\n\t    Fix broken system monitoring of <c>large_heap</c> for\n\t    non-smp VM. No message for <c>large_heap</c> was ever\n\t    sent on non-smp VM. Bug exist since R16B.</p>\n          <p>\n\t    Own Id: OTP-11852</p>\n        </item>\n        <item>\n          <p>\n\t    The emulator without SMP support crashed when passing a\n\t    message to a process without enough heap space for the\n\t    message. This bug was introduced in <c>erts-6.0</c>.</p>\n          <p>\n\t    Own Id: OTP-11887 Aux Id: OTP-11388 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix race between ETS table deletion and unfixation that\n\t    could cause VM crash. The race could happen between a\n\t    terminating process that does not own the table but has a\n\t    fixation on it and another process that deletes the table\n\t    (maybe the owner terminating) at the same time. Bug\n\t    existed since R15B02.</p>\n          <p>\n\t    Own Id: OTP-11892</p>\n        </item>\n        <item>\n\t    <p>The string following the <c>-eval</c> option when\n\t    invoking <c>erl</c> would not be properly translated from\n\t    UTF-8 to a list of Unicode characters (as would the\n\t    arguments for <c>-run</c>).</p>\n\t    <p>That bug would cause the build of Erlang/OTP to fail\n\t    when building in a directory whose pathname contained\n\t    non-US ASCII characters encoded in UTF-8. (Thanks to Eric\n\t    Pailleau for reporting this bug.)</p>\n          <p>\n\t    Own Id: OTP-11916</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erts_debug:size/1 to handle Map sizes</p>\n          <p>\n\t    Own Id: OTP-11923</p>\n        </item>\n        <item>\n          <p>\n\t    Removed <c>erlang:bitstr_to_list/1</c> and\n\t    <c>erlang:list_to_bitstr/1</c>. They were added by\n\t    mistake, and have always raised an <c>undefined</c>\n\t    exception when called.</p>\n          <p>\n\t    Own Id: OTP-11942</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed compilation using mingw-w64 on Windows.</p>\n          <p>\n\t    Thanks to Jani Hakala.</p>\n          <p>\n\t    Own Id: OTP-11945</p>\n        </item>\n        <item>\n          <p>\n\t    The git sha is no longer printed in the shell start\n\t    header when erlang is built from a tagged git release.</p>\n          <p>\n\t    Own Id: OTP-11961</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where <c>send</c> trace events were\n\t    erroneously dropped when the send was done to a\n\t    registered process. This bug was introduced in R16B.</p>\n          <p>\n\t    Own Id: OTP-11968</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>The following native functions now bump an appropriate\n\t    amount of reductions and yield when out of\n\t    reductions:</p> <list>\n\t    <item><c>erlang:binary_to_list/1</c></item>\n\t    <item><c>erlang:binary_to_list/3</c></item>\n\t    <item><c>erlang:bitstring_to_list/1</c></item>\n\t    <item><c>erlang:list_to_binary/1</c></item>\n\t    <item><c>erlang:iolist_to_binary/1</c></item>\n\t    <item><c>erlang:list_to_bitstring/1</c></item>\n\t    <item><c>binary:list_to_bin/1</c></item> </list>\n\t    <p>Characteristics impact:</p> <taglist>\n\t    <tag>Performance</tag> <item>The functions converting\n\t    from lists got a performance loss for very small lists,\n\t    and a performance gain for very large lists.</item>\n\t    <tag>Priority</tag> <item>Previously a process executing\n\t    one of these functions effectively got an unfair priority\n\t    boost. This priority boost depended on the input size.\n\t    The larger the input was, the larger the priority boost\n\t    got. This unfair priority boost is now lost. </item>\n\t    </taglist>\n          <p>\n\t    Own Id: OTP-11888</p>\n        </item>\n        <item>\n          <p>\n\t    The systemd features of epmd have been removed from epmd\n\t    by default. To enable them you have to build erlang with\n\t    the configure option --enable-systemd.</p>\n          <p>\n\t    Own Id: OTP-11921</p>\n        </item>\n        <item>\n          <p>\n\t    Removed Erlang wrapper code used when calling\n\t    <c>binary_to_term/1</c>, and <c>binary_to_term/2</c>.\n\t    This improves the performance of these BIFs especially\n\t    when they are called with small binaries as input.</p>\n          <p>\n\t    Own Id: OTP-11931</p>\n        </item>\n        <item>\n          <p>\n\t    Add erlang:system_info(tolerant_timeofday), an API to\n\t    check whether compensation for sudden changes of system\n\t    time is enabled or not.</p>\n          <p>\n\t    Own Id: OTP-11970</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix broken system monitoring of <c>large_heap</c> for\n\t    non-smp VM. No message for <c>large_heap</c> was ever\n\t    sent on non-smp VM. Bug exist since R16B.</p>\n          <p>\n\t    Own Id: OTP-11852</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed type spec of <c>erlang:system_info/1</c>.</p>\n          <p>\n\t    Own Id: OTP-11859 Aux Id: OTP-11615 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 6.0</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The option dupnames did not work as intended in re. When\n\t    looking for names with {capture, [Name, ...]}, re:run\n\t    returned a random instance of the match for that name,\n\t    instead of the leftmost matching instance, which was what\n\t    the documentation stated. This is now corrected to adhere\n\t    to the documentation. The option {capture,all_names}\n\t    along with a re:inspect/2 function is also added to\n\t    further help in using named subpatterns.</p>\n          <p>\n\t    Own Id: OTP-11205</p>\n        </item>\n        <item>\n          <p>\n\t    Allow loading of NIF library with unicode path name</p>\n          <p>\n\t    Own Id: OTP-11408</p>\n        </item>\n        <item>\n          <p>\n\t    Allow loading of driver with unicode path name</p>\n          <p>\n\t    Own Id: OTP-11549</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where starting Erlang without having an open\n\t    stdin on fd 0 would sometimes deadlock the emulator when\n\t    terminating.</p>\n          <p>\n\t    Own Id: OTP-11558</p>\n        </item>\n        <item>\n          <p>\n\t    The option '-names' in epmd now works on Windows (Thanks\n\t    to Johannes Wei\u00dfl)</p>\n          <p>\n\t    Own Id: OTP-11565</p>\n        </item>\n        <item>\n          <p>\n\t    Correction of the examples in escript documentation.\n\t    (Thanks to Pierre Fenoll).</p>\n          <p>\n\t    Own Id: OTP-11577</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bs_get_integer instruction</p>\n          <p>\n\t    The instruction bs_get_integer could unnecessarily\n\t    trigger a garbage collection in failure cases which is\n\t    unwanted or outright dangerous.</p>\n          <p>\n\t    Ex:</p>\n          <p>\n\t    &lt;&lt;X:Sz,_/bits&gt;&gt; = &lt;&lt;\"some\n\t    binary\"&gt;&gt;</p>\n          <p>\n\t    Previously, if Sz induced X to a bignum it would reserved\n\t    memory size this on the heap via a garbage collection\n\t    before checking if the size could actually match.</p>\n          <p>\n\t    It will now check the binary size before triggering a\n\t    collection.</p>\n          <p>\n\t    Own Id: OTP-11581</p>\n        </item>\n        <item>\n          <p>\n\t    Remove heap space overestimation in <c>binary_to_term</c>\n\t    (and remote message reception) for integers in the\n\t    intervals [-2147483648,-1] and [256,2147483647] on 64-bit\n\t    emulators.</p>\n          <p>\n\t    Own Id: OTP-11585</p>\n        </item>\n        <item>\n          <p>\n\t    Add support for detecting the separate tinfo library from\n\t    ncurses (Thanks to Dirkjan Ochtman)</p>\n          <p>\n\t    Own Id: OTP-11590</p>\n        </item>\n        <item>\n          <p>\n\t    Deprecation warning for system_flag(cpu_topology) has\n\t    been extended for removal in OTP 18 (Thanks to Steve\n\t    Vinoski for the update)</p>\n          <p>\n\t    Own Id: OTP-11602</p>\n        </item>\n        <item>\n          <p>\n\t    Documentation improvement regarding some awkward wording\n\t    around the +spp flag. (Thanks to Brian L. Troutwine )</p>\n          <p>\n\t    Own Id: OTP-11607</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug where sendfile would return the wrong error\n\t    code for a remotely closed socket if the socket was in\n\t    passive mode. (Thanks to Vincent Siliakus for reporting\n\t    the bug.)</p>\n          <p>\n\t    Own Id: OTP-11614</p>\n        </item>\n        <item>\n          <p>\n\t    Increase garbage collection tenure rate</p>\n\t    <p>The garbage collector tries to maintain the previous\n\t    heap block size during a minor gc, i.e. 'need' is not\n\t    utilized in determining the size of the new heap, instead\n\t    it relies on tenure and garbage to be sufficiently\n\t    large.</p>\n\t    <p>In instances during intense growing with exclusively\n\t    live data on the heap coupled with delayed tenure,\n\t    fullsweeps would be triggered directly after a minor gc\n\t    to make room for 'need' since the new heap would be\n\t    full.</p>\n\t    <p>To remedy this, the tenure of terms on the minor heap\n\t    will always happen (if it is below the high watermark)\n\t    instead of every other minor gc.</p>\n\t    <p>Characteristics Impact: Reduced CPU-time spent in\n\t    garbage collection but may infer delays in collecting\n\t    garbage from the heap. Tweak 'fullsweep_after' options to\n\t    increase gc pressure if needed.</p>\n          <p>\n\t    Own Id: OTP-11617</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug when comparing integers with floats larger than\n\t    2^992. The bug could potentially cause memory corruption\n\t    on 32-bit emulators.</p>\n          <p>\n\t    Own Id: OTP-11618</p>\n        </item>\n        <item>\n          <p>\n\t    Cross-compilation fixes for TileraMDE-3.0.1.125620</p>\n          <p>\n\t    Own Id: OTP-11635</p>\n        </item>\n        <item>\n          <p>\n\t    sendfile no longer uses async threads by default</p>\n          <p>\n\t    This has been done because a slow client attack is\n\t    possible if the async thread pool is used. The scenario\n\t    is:</p>\n          <p>\n\t    Client does a request for a file and then slowly receives\n\t    the file one byte at a time. This will eventually fill\n\t    the async thread pool with blocking sendfile operations\n\t    and thus starving the vm of all file operations.</p>\n          <p>\n\t    If you still want to use the async threads pool for\n\t    sendfile an option to enable it has been introduced.</p>\n          <p>\n\t    Thanks to Christopher Faulet for identifying this\n\t    vulnerability.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11639</p>\n        </item>\n        <item>\n          <p>\n\t    Do proper rollback of calls to\n\t    <c>enif_open_resource_type</c> when load/upgrade\n\t    callbacks of NIF library return failure.</p>\n          <p>\n\t    Own Id: OTP-11722</p>\n        </item>\n        <item>\n          <p>\n\t    Changed the default configuration when configuring with\n\t    <c>$ERL_TOP/configure</c> to be the same as when\n\t    configuring with <c>$ERL_TOP/otp_build configure</c>.</p>\n          <p>\n\t    Previously floating point exceptions got enabled by\n\t    default on Linux when HiPE was enabled when configuring\n\t    with <c>$ERL_TOP/configure</c>, but not when configuring\n\t    with <c>$ERL_TOP/otp_build configure</c>. The default is\n\t    now in both cases not to use floating point exceptions\n\t    since there still exist unresolved issues with floating\n\t    point exceptions on Linux.</p>\n          <p>\n\t    For more information see <seealso\n\t    marker=\"doc/installation_guide:INSTALL\"><c>$ERL_TOP/HOWTO/INSTALL.md</c></seealso>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11723</p>\n        </item>\n        <item>\n          <p>\n\t    A comment in erl_db_tree.c no longer differ from the\n\t    code. (Thanks to Cobus Carstens)</p>\n          <p>\n\t    Own Id: OTP-11793</p>\n        </item>\n        <item>\n          <p>\n\t    Fix epmd debug functionality for VxWorks (Thanks to Jay\n\t    True)</p>\n          <p>\n\t    Own Id: OTP-11808</p>\n        </item>\n        <item>\n          <p>\n\t    Use closefrom/2 when available in child_setup (Thanks to\n\t    Rick Reed and Anthony Ramine)</p>\n          <p>\n\t    Own Id: OTP-11809</p>\n        </item>\n        <item>\n          <p>\n\t    Fix dtrace/systemtap bug where the probe arguments would\n\t    be concatenated due to faulty length calculation. </p>\n          <p>\n\t    Thanks to Michal Ptaszek and Scott Lystig Fritchie</p>\n          <p>\n\t    Own Id: OTP-11816</p>\n        </item>\n        <item>\n          <p>\n\t    It is now better documented that the <c>+fn*</c> flags to\n\t    <c>erl</c> also affect how command line parameters and\n\t    environment variables are read. (Thanks to Vlad\n\t    Dumitrescu)</p>\n          <p>\n\t    Own Id: OTP-11818</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Options to set match_limit and match_limit_recursion are\n\t    added to re:run. The option report_errors is also added\n\t    to get more information when re:run fails due to limits\n\t    or compilation errors.</p>\n          <p>\n\t    Own Id: OTP-10285</p>\n        </item>\n        <item>\n\t    <p> Dialyzer's <c>unmatched_return</c> warnings have been\n\t    corrected. </p>\n          <p>\n\t    Own Id: OTP-10908</p>\n        </item>\n        <item>\n          <p>\n\t    A common case is to wrap an argument to\n\t    <c>list_to_binary/1</c> in a list to ensure conversion\n\t    can happen even though the argument may already be a\n\t    binary. Take special care of this case and do not copy\n\t    binary.</p>\n          <p>\n\t    Impact: May cause incompatibility since a single binary\n\t    is no longer copied. Use <c>binary:copy/1,2</c> instead.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11082</p>\n        </item>\n        <item>\n          <p>\n\t    Make erlang:open_port/2 spawn and spawn_executable handle\n\t    unicode.</p>\n          <p>\n\t    Own Id: OTP-11105</p>\n        </item>\n        <item>\n          <p>\n\t    Handle unicode (widestring) in erl, erlc, heart, etc on\n\t    windows.</p>\n          <p>\n\t    Own Id: OTP-11135</p>\n        </item>\n        <item>\n          <p>\n\t    The version of the PCRE library Used by Erlang's re\n\t    module is raised to 8.33 from 7.6. This means, among\n\t    other things, better Unicode and Unicode Character\n\t    Properties support. New options connected to PCRE 8.33\n\t    are also added to the re module (ucd, notempty_atstart,\n\t    no_start_optimize). PCRE has extended the regular\n\t    expression syntax between 7.6 and 8.33, why this imposes\n\t    a potential incompatibility. Only very complicated\n\t    regular expressions may be affected, but if you know you\n\t    are using obscure features, please test run your regular\n\t    expressions and verify that their behavior has not\n\t    changed.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11204</p>\n        </item>\n        <item>\n\t    <p>Filenames containing UTF-8 encoded characters can now\n\t    be handled by erlc.</p>\n\t    <p>If you have set the <c>ERLC_EMULATOR</c> environment\n\t    variable, note that <c>erlc</c> in OTP 17 will only work\n\t    with <c>erl</c> in OTP 17 since the protocol between the\n\t    <c>erlc</c> program and the <c>erl_compile</c> module has\n\t    changed.</p>\n          <p>\n\t    Own Id: OTP-11248</p>\n        </item>\n        <item>\n          <p>\n\t    By giving --enable-static-{nifs,drivers} to configure it\n\t    is now possible to statically linking of nifs and drivers\n\t    to the main Erlang VM binary. At the moment only the asn1\n\t    and crypto nifs of the Erlang/OTP nifs and drivers have\n\t    been prepared to be statically linked. For more details\n\t    see the Installation Guide in the System documentation.</p>\n          <p>\n\t    Own Id: OTP-11258</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang/OTP has been ported to the realtime operating\n\t    system OSE. The port supports both smp and non-smp\n\t    emulator. For details around the port and how to started\n\t    see the User's Guide in the <seealso\n\t    marker=\"ose:ose_intro\">ose</seealso> application. </p>\n          <p>\n\t    Note that not all parts of Erlang/OTP has been ported. </p>\n          <p>\n\t    Notable things that work are: non-smp and smp emulators,\n\t    OSE signal interaction, crypto, asn1, run_erl/to_erl,\n\t    tcp, epmd, distribution and most if not all non-os\n\t    specific functionality of Erlang.</p>\n          <p>\n\t    Notable things that does not work are: udp/sctp, os_mon,\n\t    erl_interface, binding of schedulers.</p>\n          <p>\n\t    Own Id: OTP-11334</p>\n        </item>\n        <item>\n          <p>\n\t    Add the {active,N} socket option for TCP, UDP, and SCTP,\n\t    where N is an integer in the range -32768..32767, to\n\t    allow a caller to specify the number of data messages to\n\t    be delivered to the controlling process. Once the\n\t    socket's delivered message count either reaches 0 or is\n\t    explicitly set to 0 with inet:setopts/2 or by including\n\t    {active,0} as an option when the socket is created, the\n\t    socket transitions to passive ({active, false}) mode and\n\t    the socket's controlling process receives a message to\n\t    inform it of the transition. TCP sockets receive\n\t    {tcp_passive,Socket}, UDP sockets receive\n\t    {udp_passive,Socket} and SCTP sockets receive\n\t    {sctp_passive,Socket}. </p>\n          <p>\n\t    The socket's delivered message counter defaults to 0, but\n\t    it can be set using {active,N} via any gen_tcp, gen_udp,\n\t    or gen_sctp function that takes socket options as\n\t    arguments, or via inet:setopts/2. New N values are added\n\t    to the socket's current counter value, and negative\n\t    numbers can be used to reduce the counter value.\n\t    Specifying a number that would cause the socket's counter\n\t    value to go above 32767 causes an einval error. If a\n\t    negative number is specified such that the counter value\n\t    would become negative, the socket's counter value is set\n\t    to 0 and the socket transitions to passive mode. If the\n\t    counter value is already 0 and inet:setopts(Socket,\n\t    [{active,0}]) is specified, the counter value remains at\n\t    0 but the appropriate passive mode transition message is\n\t    generated for the socket.</p>\n          <p>\n\t    Thanks to Steve Vinoski</p>\n          <p>\n\t    Own Id: OTP-11368</p>\n        </item>\n        <item>\n          <p>\n\t    A new optional scheduler utilization balancing mechanism\n\t    has been introduced. For more information see the\n\t    <seealso marker=\"erl#+sub\"><c>+sub</c></seealso> command\n\t    line argument.</p>\n          <p>\n\t    Characteristics impact: None, when not enabled. When\n\t    enabled, changed timing in the system, normally a small\n\t    overhead due to measuring of utilization and calculating\n\t    balancing information. On some systems, such as old\n\t    Windows systems, the overhead can be quite substantial.\n\t    This time measurement overhead highly depend on the\n\t    underlying primitives provided by the OS.</p>\n          <p>\n\t    Own Id: OTP-11385</p>\n        </item>\n        <item>\n          <p>\n\t    A call to either the <c>garbage_collect/1</c> BIF or the\n\t    <c>check_process_code/2</c> BIF may trigger garbage\n\t    collection of another processes than the process calling\n\t    the BIF. The previous implementations performed these\n\t    kinds of garbage collections without considering the\n\t    internal state of the process being garbage collected. In\n\t    order to be able to more easily and more efficiently\n\t    implement yielding native code, these types of garbage\n\t    collections have been rewritten. A garbage collection\n\t    like this is now triggered by an asynchronous request\n\t    signal, the actual garbage collection is performed by the\n\t    process being garbage collected itself, and finalized by\n\t    a reply signal to the process issuing the request. Using\n\t    this approach processes can disable garbage collection\n\t    and yield without having to set up the heap in a state\n\t    that can be garbage collected.</p>\n          <p>\n\t    The <seealso\n\t    marker=\"erts:erlang#garbage_collect/2\"><c>garbage_collect/2</c></seealso>,\n\t    and <seealso\n\t    marker=\"erts:erlang#check_process_code/3\"><c>check_process_code/3</c></seealso>\n\t    BIFs have been introduced. Both taking an option list as\n\t    last argument. Using these, one can issue asynchronous\n\t    requests.</p>\n          <p>\n\t    <c>code:purge/1</c> and <c>code:soft_purge/1</c> have\n\t    been rewritten to utilize asynchronous\n\t    <c>check_process_code</c> requests in order to\n\t    parallelize work.</p>\n          <p>\n\t    Characteristics impact: A call to the\n\t    <c>garbage_collect/1</c> BIF or the\n\t    <c>check_process_code/2</c> BIF will normally take longer\n\t    time to complete while the system as a whole wont be as\n\t    much negatively effected by the operation as before. A\n\t    call to <c>code:purge/1</c> and <c>code:soft_purge/1</c>\n\t    may complete faster or slower depending on the state of\n\t    the system while the system as a whole wont be as much\n\t    negatively effected by the operation as before.</p>\n          <p>\n\t    Own Id: OTP-11388 Aux Id: OTP-11535, OTP-11648 </p>\n        </item>\n        <item>\n          <p>\n\t    Cleanup 'Buckets' and 'Time left' fields in crashdump to\n\t    ease parsing.</p>\n          <p>\n\t    Own Id: OTP-11419</p>\n        </item>\n        <item>\n          <p>\n\t    Add sync option to file:open/2.</p>\n          <p>\n\t    The sync option adds the POSIX O_SYNC flag to the open\n\t    system call on platforms that support the flag or its\n\t    equivalent, e.g., FILE_FLAG_WRITE_THROUGH on Windows. For\n\t    platforms that don't support it, file:open/2 returns\n\t    {error, enotsup} if the sync option is passed in. Thank\n\t    to Steve Vinoski and Joseph Blomstedt</p>\n          <p>\n\t    Own Id: OTP-11498</p>\n        </item>\n        <item>\n          <p>\n\t    erlang:binary_to_term will now cost an appropriate amount\n\t    of reductions and will interrupt (yield) for reschedule\n\t    if the term is big. This avoids too long schedules when\n\t    binary_to_term is used. (Thanks to Svante Karlsson for\n\t    the original patch)</p>\n          <p>\n\t    Impact: Programs running binary_to_term on large binaries\n\t    will run more smoothly, but rescheduling will impact the\n\t    single process performance of the BIF. Single threaded\n\t    benchmarks might show degraded performance of the BIF,\n\t    while general system behaviour will be improved.</p>\n          <p>\n\t    Own Id: OTP-11535 Aux Id: OTP-11388 </p>\n        </item>\n        <item>\n          <p>\n\t    Added high resolution icon for windows. (Thanks to Daniel\n\t    Goertz for the inspiration.)</p>\n          <p>\n\t    Own Id: OTP-11560</p>\n        </item>\n        <item>\n          <p>\n\t    Migration of memory carriers has been enabled by default\n\t    on all ERTS internal memory allocators based on the\n\t    <seealso\n\t    marker=\"erts_alloc#alloc_util\"><c>alloc_util</c></seealso>\n\t    framework except for <c>temp_alloc</c>. That is, <seealso\n\t    marker=\"erts_alloc#M_acul\"><c>+M&lt;S&gt;acul\n\t    de</c></seealso> is default for these allocators. Note\n\t    that this also implies changed allocation strategies for\n\t    all of these allocators. They will all now use the\n\t    \"address order first fit carrier best fit\" strategy.</p>\n          <p>\n\t    By passing <c>+Muacul 0</c> on the command line, all\n\t    configuration changes made by this change will be\n\t    reverted.</p>\n          <p>\n\t    Characteristics impact: Improved memory characteristics\n\t    with a smaller memory footprint at the expense of a quite\n\t    small performance cost.</p>\n          <p>\n\t    Own Id: OTP-11604 Aux Id: OTP-10279 </p>\n        </item>\n        <item>\n\t    <p>A clarification has been added to the documentation of\n\t    <c>-on_load()</c> in the Reference Manual that it is only\n\t    recommended for loading NIF libraries.</p>\n          <p>\n\t    Own Id: OTP-11611</p>\n        </item>\n        <item>\n\t    <p><c>+fnaw</c> is now default when starting the\n\t    emulator; it used to be <c>+fnl</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11612</p>\n        </item>\n        <item>\n          <p>\n\t    EEP43: New data type - Maps</p>\n          <p>\n\t    With Maps you may for instance:</p>\n          <taglist>\n            <tag/> <item><c>M0 = #{ a =&gt; 1, b =&gt; 2}, % create\n\t      associations</c></item>\n            <tag/><item><c>M1 = M0#{ a := 10 }, % update values</c></item>\n            <tag/><item><c>M2 = M1#{ \"hi\" =&gt;\n\t      \"hello\"}, % add new associations</c></item>\n            <tag/><item><c>#{ \"hi\" := V1, a := V2, b := V3} = M2.\n               % match keys with values</c></item>\n          </taglist>\n          <p>\n\t    For information on how to use Maps please see Map Expressions in the\n\t\t<seealso marker=\"doc/reference_manual:expressions#map_expressions\">\n\t\t\tReference Manual</seealso>.</p>\n          <p>\n\t    The current implementation is without the following\n\t    features:</p>\n          <taglist>\n            <tag/><item>No variable keys</item>\n\t    <tag/><item>No single value access</item>\n            <tag/><item>No map comprehensions</item>\n          </taglist>\n          <p>\n\t    Note that Maps is <em>experimental</em> during OTP 17.0.</p>\n          <p>\n\t    Own Id: OTP-11616</p>\n        </item>\n        <item>\n          <p>\n\t    The previously deprecated driver API function\n\t    <c>driver_async_cancel()</c> has been removed. Due to\n\t    this, the driver API version has been bumped to 3.0.</p>\n          <p>\n\t    Thanks to Steve Vinoski.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11628</p>\n        </item>\n        <item>\n          <p>\n\t    Experimental \"dirty scheduler\" functionality has been\n\t    introduced. In order to try the functionality out, you\n\t    need to pass the command line argument\n\t    <c>--enable-dirty-schedulers</c> to <c>configure</c> when\n\t    building the system.</p>\n          <p>\n\t    Dirty schedulers can currently only be used by NIFs on a\n\t    system with SMP support. More information can be found in\n\t    the <seealso\n\t    marker=\"erl_nif#dirty_nifs\"><c>erl_nif(3)</c></seealso>\n\t    documentation, the <seealso\n\t    marker=\"erl\"><c>erl(1)</c></seealso> documentation, and\n\t    in the git commit comment of commit\n\t    'c1c03ae4ee50e58b7669ea88ec4d29c6b2b67c7b'.</p>\n          <p>\n\t    Note that the functionality is <em>experimental</em>, and\n\t    <em>not supported</em>. This functionality <em>will</em>\n\t    be subject to backward incompatible changes. You should\n\t    <em>not</em> enable the dirty scheduler functionality on\n\t    production systems. It is only provided for testing.</p>\n          <p>\n\t    Thanks to Steve Vinoski.</p>\n          <p>\n\t    Own Id: OTP-11629</p>\n        </item>\n        <item>\n          <p>\n\t    Improve reduction cost and yielding of\n\t    <c>term_to_binary</c>. The reduction cost is increased\n\t    and garbage collection is disabled during yield.</p>\n          <p>\n\t    Impact: Improves system responsiveness when\n\t    <c>term_to_binary</c> is called with large terms without\n\t    significant degradation of single threaded performance.</p>\n          <p>\n\t    Own Id: OTP-11648 Aux Id: OTP-11388 </p>\n        </item>\n        <item>\n          <p>\n\t    By default, the system's version of zlib will be used,\n\t    provided its version is 1.2.4 or higher; otherwise the\n\t    built-in zlib will be used. The built-in version of zlib\n\t    has been bumped to 1.2.8. (Use the\n\t    <c>--enable-builtin-zlib</c> option to <c>configure</c>\n\t    to force the use of the built-in zlib.)</p>\n          <p>\n\t    Own Id: OTP-11669</p>\n        </item>\n        <item>\n          <p>\n\t    The default float encoding in binary_to_term and\n\t    external_size has been changed to use minor_mode 1\n\t    instead of 0.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11738</p>\n        </item>\n        <item>\n          <p>\n\t    Introduced the <c>configure</c> option\n\t    <c>--with-assumed-cache-line-size=SIZE</c>. For more\n\t    information see <seealso\n\t    marker=\"doc/installation_guide:INSTALL\"><c>$ERL_TOP/HOWTO/INSTALL.md</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-11742</p>\n        </item>\n        <item>\n          <p>\n\t    Halfword emulator is marked as deprecated. It still works\n\t    as before but is planned to be removed in a future major\n\t    release.</p>\n          <p>\n\t    Own Id: OTP-11777</p>\n        </item>\n        <item>\n          <p>\n\t    The external format for Maps has changed in a way that is\n\t    not compatible with the format used in OTP 17.0-rc1 and\n\t    OTP 17.0-rc2.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11782</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed faulty make dependency that would make some make\n\t    versions fail while building gen_git_version.mk.</p>\n          <p>\n\t    Own Id: OTP-11784</p>\n        </item>\n        <item>\n          <p>\n\t    Introduced functionality for allowing old drivers and NIF\n\t    libraries to be loaded during a transition period. For\n\t    more information see <seealso\n\t    marker=\"erts:erl_driver#version_management\">the version\n\t    management section in the <c>erl_driver(3)</c>\n\t    documentation</seealso> and <seealso\n\t    marker=\"erts:erl_nif#version_management\">the version\n\t    management section in the <c>erl_nif(3)</c>\n\t    documentation</seealso>.</p>\n          <p>\n\t    Own Id: OTP-11799</p>\n        </item>\n        <item>\n          <p>\n\t    Support file paths longer than 259 characters on Windows.\n\t    Long absolute paths are automatically converted to UNC\n\t    format with a <c>\\\\?\\</c> prefix which is the only way to\n\t    represent long paths. The 259 character limit still\n\t    applies for individual file names, relative paths and the\n\t    current working directory.</p>\n          <p>\n\t    Own Id: OTP-11813</p>\n        </item>\n        <item>\n          <p>\n\t    Document that escript:create/2 also accepts a 3-elements\n\t    tuple containing files and zip:create/3 options to build\n\t    a zip file.</p>\n          <p>\n\t    Thanks to Pierre Fenoll</p>\n          <p>\n\t    Own Id: OTP-11827</p>\n        </item>\n        <item>\n          <p>\n\t    Add systemd socket activation for epmd.</p>\n          <p>\n\t    Thanks to Matwey V. Kornilov</p>\n          <p>\n\t    Own Id: OTP-11829</p>\n       </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.4.1</title>\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    When using gen_tcp:connect and the <c>fd</c> option with\n\t    <c>port</c> and/or <c>ip</c>, the <c>port</c> and\n\t    <c>ip</c> options were ignored. This has been fixed so\n\t    that if <c>port</c> and/or <c>ip</c> is specified\n\t    together with <c>fd</c> a bind is requested for that\n\t    <c>fd</c>. If <c>port</c> and/or <c>ip</c> is not\n\t    specified bind will not be called.</p>\n          <p>\n\t    Own Id: OTP-12061</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    When normalizing paths, erl_prim_loader would always\n\t    convert backslash to forward slash. This is correct on\n\t    Windows, but not on other operating systems.\n\t    erl_prim_loader now checks which OS is running before\n\t    performing this conversion.</p>\n          <p>\n\t    Own Id: OTP-11170</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed syslog defines and defined LOG_ERR for systems\n\t    without syslog.h. Thanks to Matt Lewandowsky.</p>\n          <p>\n\t    Own Id: OTP-11349</p>\n        </item>\n        <item>\n          <p>\n\t    Check all pattern arguments passed to binary:matches/2.\n\t    Thanks to Mike Sassak.</p>\n          <p>\n\t    Own Id: OTP-11350</p>\n        </item>\n        <item>\n          <p>\n\t    Fix two small silent rules omissions. Thanks to Anthony\n\t    Ramine.</p>\n          <p>\n\t    Own Id: OTP-11351</p>\n        </item>\n        <item>\n          <p>\n\t    Teach configure to detect if posix_memalign cannot align\n\t    to more than the system page size. </p>\n          <p>\n\t    For cross-compiled systems a new environment variable\n\t    called erl_xcomp_posix_memalign has been introduced to\n\t    indicate whether posix_memalign should be used.</p>\n          <p>\n\t    Own Id: OTP-11371</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bsr bug occurring when shifting a huge number a huge\n\t    number of bits to the right. Thanks to Lars Hesel\n\t    Christensen.</p>\n          <p>\n\t    Own Id: OTP-11381</p>\n        </item>\n        <item>\n          <p>\n\t    Fix memory leak for distributed monitors</p>\n          <p>\n\t    Own Id: OTP-11410</p>\n        </item>\n        <item>\n          <p>\n\t    Fix various typos in erts, kernel and ssh. Thanks to\n\t    Martin H\u00e4ssler.</p>\n          <p>\n\t    Own Id: OTP-11414</p>\n        </item>\n        <item>\n          <p>\n\t    Crashdumps initiated by out-of-memory on process spawn\n\t    could cause the beam to segfault during crashdump writing\n\t    due to invalid pointers.</p>\n          <p>\n\t    The pointers are invalid since the process creation never\n\t    finished. This fix removes these processes from the\n\t    printouts. Reported by Richard Carlsson.</p>\n          <p>\n\t    Own Id: OTP-11420</p>\n        </item>\n        <item>\n          <p>\n\t    Crash dumps from 64-bit Erlang machines would have all\n\t    memory addresses truncated to 32 bits, which could cause\n\t    trouble inspecting processes message queues and stacks in\n\t    the crashdump viewer.</p>\n          <p>\n\t    Own Id: OTP-11450</p>\n        </item>\n        <item>\n          <p>\n\t    Threads other than schedulers threads could make thread\n\t    unsafe accesses when support for migration of memory\n\t    carriers had been enabled, i.e., when the <seealso\n\t    marker=\"erts_alloc#M_acul\"><c>+M&lt;S&gt;acul</c></seealso>\n\t    command line flag had been passed to <seealso\n\t    marker=\"erl\"><c>erl</c></seealso>. This could cause\n\t    corruption of the VMs internal state.</p>\n          <p>\n\t    This bug was introduced in erts-5.10.2 when the support\n\t    for migration of memory carriers was introduced.</p>\n          <p>\n\t    Own Id: OTP-11456 Aux Id: OTP-10279 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>binary_to_term</c> for invalid bitstrings\n\t    and very large binaries (>2Gb).</p>\n          <p>\n\t    Own Id: OTP-11479</p>\n        </item>\n        <item>\n          <p>\n\t    Under rare circumstances a process calling <seealso\n\t    marker=\"kernel:inet#close/1\"><c>inet:close/1</c></seealso>,\n\t    <seealso\n\t    marker=\"kernel:gen_tcp#close/1\"><c>gen_tcp:close/1</c></seealso>,\n\t    <seealso\n\t    marker=\"kernel:gen_udp#close/1\"><c>gen_udp:close/1</c></seealso>,\n\t    or <seealso\n\t    marker=\"kernel:gen_sctp#close/1\"><c>gen_sctp:close/1</c></seealso>\n\t    could hang in the call indefinitely.</p>\n          <p>\n\t    Own Id: OTP-11491</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug that could cause a 32-bit emulator to always\n\t    crash at start (since R16B01) depending on the alignment\n\t    of static data in the beam executable.</p>\n          <p>\n\t    Own Id: OTP-11496</p>\n        </item>\n        <item>\n          <p>\n\t    Fix benign bugs regarding bitstring compare. Only a\n\t    nuisance for debug and valgrind VM.</p>\n          <p>\n\t    Own Id: OTP-11501</p>\n        </item>\n        <item>\n          <p>\n\t    Silence warnings (Thanks to Anthony Ramine)</p>\n          <p>\n\t    Own Id: OTP-11517</p>\n        </item>\n        <item>\n          <p>\n\t    The default wordsize of the emulator (beam) is now\n\t    determined by compiler default on Mac OSX (Darwin). This\n\t    was previously forced to 32bits by the configure script\n\t    unless otherwise specified.</p>\n          <p>\n\t    Own Id: OTP-11521</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    A new memory allocation feature called \"super carrier\"\n\t    has been introduced. The super carrier feature can be\n\t    used in different ways. It can for example be used for\n\t    pre-allocation of all memory that the runtime system\n\t    should be able to use.</p>\n          <p>\n\t    By default the super carrier is disabled. It is enabled\n\t    by passing the <seealso\n\t    marker=\"erts:erts_alloc#MMscs\"><c>+MMscs &lt;size in\n\t    MB&gt;</c></seealso> command line argument. For more\n\t    information see the documentation of the <seealso\n\t    marker=\"erts:erts_alloc#MMsco\"><c>+MMsco</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erts_alloc#MMscrfsd\"><c>+MMscrfsd</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erts_alloc#MMscrpm\"><c>+MMscrpm</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erts_alloc#MMscs\"><c>+MMscs</c></seealso>,\n\t    <seealso\n\t    marker=\"erts:erts_alloc#Musac\"><c>+MMusac</c></seealso>,\n\t    and, <seealso\n\t    marker=\"erts:erts_alloc#Mlpm\"><c>+Mlpm</c></seealso>\n\t    command line arguments in the <seealso\n\t    marker=\"erts:erts_alloc\"><c>erts_alloc(3)</c></seealso>\n\t    documentation.</p>\n          <p>\n\t    Since it is disabled by default there should be no impact\n\t    on system characteristics if not used.</p>\n          <p>\n\t    This change has been marked as a potential\n\t    incompatibility since the returned list when calling\n\t    <seealso\n\t    marker=\"erts:erlang#system_info_allocator_tuple\"><c>erlang:system_info({allocator,\n\t    mseg_alloc})</c></seealso> now also include an\n\t    <c>{erts_mmap, _}</c> tuple as one element in the list.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11149</p>\n        </item>\n        <item>\n          <p>\n\t    Added erlang:system_info(ets_limit) to provide a way to\n\t    retrieve the runtime's maximum number of ETS tables.\n\t    Thanks to Steve Vinoski</p>\n          <p>\n\t    Own Id: OTP-11362</p>\n        </item>\n        <item>\n          <p>\n\t    Add new BIF os:unsetenv/1 which deletes an environment\n\t    variable. Thanks to Martin H\u00e4ssler.</p>\n          <p>\n\t    Own Id: OTP-11446</p>\n        </item>\n        <item>\n\t    <p> Introduced a new guarantee regarding exit signals\n\t    from ports: </p><p> If the process calling one of the\n\t    synchronous port BIFs listed below is linked to the port\n\t    identified by the first argument, and the port exits\n\t    before sending the result of the port operation, the exit\n\t    signal issued due to this link will be received by the\n\t    processes before the BIF returns, or fail with an\n\t    exception due to the port not being open. </p><p> The\n\t    synchronous port BIFs are: </p> <list> <item><seealso\n\t    marker=\"erlang#port_close/1\"><c>port_close/1</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_command/2\"><c>port_command/2</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_command/3\"><c>port_command/3</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_connect/2\"><c>port_connect/2</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_control/3\"><c>port_control/3</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_call/3\"><c>erlang:port_call/3</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_info/1\"><c>erlang:port_info/1</c></seealso></item>\n\t    <item><seealso\n\t    marker=\"erlang#port_info/2\"><c>erlang:port_info/2</c></seealso></item>\n\t    </list> <p> Note that some ports under certain\n\t    circumstances unlink themselves from the calling process\n\t    before exiting, i.e. even though the process linked\n\t    itself to the port there might be no link triggering an\n\t    exit signal. </p> <p>Characteristics impact: The return\n\t    or exception from the synchronous port BIF will be\n\t    delayed if the port simultaneously exit due to some issue\n\t    unrelated to the outstanding synchronous port BIF call.\n\t    In all other cases characteristics are unchanged. </p>\n          <p>\n\t    Own Id: OTP-11489</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.3.1</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Memory allocators will be able to create <c>sys_alloc</c>\n\t    carriers as fallback, if <c>mseg_alloc</c> cannot create\n\t    more carriers, on systems with <c>posix_memalign()</c>\n\t    support. This is similar to how it worked in pre-R16\n\t    releases.</p>\n          <p>\n\t    Windows systems will create carriers using\n\t    <c>_aligned_malloc()</c> and can by this use the new\n\t    optimized allocator header scheme introduced in R16 on\n\t    other platforms.</p>\n          <p>\n\t    Own Id: OTP-11318</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p> The documentation of predefined types and built-in\n\t    types has been corrected. </p>\n          <p>\n\t    Own Id: OTP-11090</p>\n        </item>\n        <item>\n          <p>\n\t    Fix changing terminal parameters in to_erl</p>\n          <p>\n\t    Change the behaviour of to_erl to use TCSADRAIN instead\n\t    of TCSANOW when changing terminal parameters. This makes\n\t    the serial driver wait for the output queues to be empty\n\t    before applying the terminal parameter change. Thanks to\n\t    Stefan Zegenhagen.</p>\n          <p>\n\t    Own Id: OTP-11206</p>\n        </item>\n        <item>\n          <p>\n\t    The default value of {flush, boolean()} in erlang:halt/2\n\t    is documented to be 'true' if the status is an integer.\n\t    The implementation behaviour was reversed. The\n\t    Implementation is now corrected to adhere to the\n\t    documentation. Thanks to Jose Valim for reporting the\n\t    error.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11218</p>\n        </item>\n        <item>\n          <p>\n\t    Fix serious race bug in R16B01 that could cause PID\n\t    mix-ups when a lot of processes were spawned and\n\t    terminated in a very rapid pace on an SMP emulator with\n\t    at least two scheduler threads.</p>\n          <p>\n\t    Own Id: OTP-11225</p>\n        </item>\n        <item>\n          <p>\n\t    Validating a trace pattern with the option silent no\n\t    longer incorrectly enables/disables the silent option of\n\t    the calling process.</p>\n          <p>\n\t    Own Id: OTP-11232</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where GCC 4.8 and later use a more aggressive\n\t    loop optimization algorithm that broke some previously\n\t    working code in the efile driver. Thanks to Tomas\n\t    Abrahamsson for reporting this issue.</p>\n          <p>\n\t    Own Id: OTP-11246</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug when printing memory allocator acul option in\n\t    crash dump.</p>\n          <p>\n\t    Own Id: OTP-11264</p>\n        </item>\n        <item>\n          <p>\n\t    Opening a new compressed file on Windows could in rare\n\t    (random) cases result in {error,eisdir} or other error\n\t    codes although it should have succeeded. This is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-11265</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a race condition when closing a trace port that\n\t    would cause the emulator to crash.</p>\n          <p>\n\t    Own Id: OTP-11290</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    There is a new somewhat experimental socket option\n\t    'netns' that can set the network namespace for a socket\n\t    on Linux:es where it is supported. See the documentation.</p>\n          <p>\n\t    Own Id: OTP-11157</p>\n        </item>\n        <item>\n          <p>\n\t    New allocator strategy <c>aoffcbf</c> (address order\n\t    first fit carrier best fit). Supports carrier migration\n\t    but with better CPU performance than <c>aoffcaobf</c>.</p>\n          <p>\n\t    Own Id: OTP-11174</p>\n        </item>\n        <item>\n          <p>\n\t    Introduced functionality for inspection of system and\n\t    build configuration.</p>\n          <p>\n\t    Own Id: OTP-11196</p>\n        </item>\n        <item>\n          <p>\n\t    Fix matching of floating point middle-endian machines.\n\t    Thanks to Johannes Weissl.</p>\n          <p>\n\t    Own Id: OTP-11201</p>\n        </item>\n        <item>\n          <p>\n\t    Fix compile error on ARM and GCC versions greater than\n\t    4.1.0. Thanks to Johannes Weissl.</p>\n          <p>\n\t    Own Id: OTP-11214</p>\n        </item>\n        <item>\n          <p>\n\t    run_erl: Redirect standard streams to /dev/null. Thanks\n\t    to Johannes Weissl.</p>\n          <p>\n\t    Own Id: OTP-11215</p>\n        </item>\n        <item>\n          <p>\n\t    Misc. corrections in documentation for erl_driver. Thanks\n\t    to Giacomo Olgeni.</p>\n          <p>\n\t    Own Id: OTP-11227</p>\n        </item>\n        <item>\n          <p>\n\t    Fix documentation regarding binary_part.</p>\n          <p>\n\t    Own Id: OTP-11239</p>\n        </item>\n        <item>\n          <p>\n\t    Make edlin understand a few important control keys.\n\t    Thanks to Stefan Zegenhagen.</p>\n          <p>\n\t    Own Id: OTP-11251</p>\n        </item>\n        <item>\n          <p>\n\t    Export type zlib:zstream/0. Thanks to Loic Hoguin.</p>\n          <p>\n\t    Own Id: OTP-11278</p>\n        </item>\n        <item>\n          <p>\n\t    Add erl option to set schedulers by percentages. </p>\n          <p>\n\t    For applications where measurements show enhanced\n\t    performance from the use of a non-default number of\n\t    emulator scheduler threads, having to accurately set the\n\t    right number of scheduler threads across multiple hosts\n\t    each with different numbers of logical processors is\n\t    difficult because the erl +S option requires absolute\n\t    numbers of scheduler threads and scheduler threads online\n\t    to be specified.</p>\n          <p>\n\t    To address this issue, add a +SP option to erl, similar\n\t    to the existing +S option but allowing the number of\n\t    scheduler threads and scheduler threads online to be set\n\t    as percentages of logical processors configured and\n\t    logical processors available, respectively. For example,\n\t    \"+SP 50:25\" sets the number of scheduler threads to 50%\n\t    of the logical processors configured, and the number of\n\t    scheduler threads online to 25% of the logical processors\n\t    available. The +SP option also interacts with any\n\t    settings specified with the +S option, such that the\n\t    combination of options \"+S 4:4 +SP 50:50\" (in either\n\t    order) results in 2 scheduler threads and 2 scheduler\n\t    threads online.</p>\n          <p>\n\t    Thanks to Steve Vinoski</p>\n          <p>\n\t    Own Id: OTP-11282</p>\n        </item>\n        <item>\n          <p>\n\t    Extend erl_driver interface with lock names</p>\n          <p>\n\t    Lock and thread names are already a feature in the driver\n\t    interface. This extension will let developers read these\n\t    names which eases debugging.</p>\n          <p>\n\t    Own Id: OTP-11303</p>\n        </item>\n        <item>\n          <p>\n\t    Fix incorrect values returned by integer_to_binary/2.\n\t    Thanks to Juan Jose Comellas.</p>\n          <p>\n\t    Own Id: OTP-11311</p>\n        </item>\n        <item>\n          <p>\n\t    Fix system_flag scheduling_statistics - disable . Thanks\n\t    to Steve Vinoski.</p>\n          <p>\n\t    Own Id: OTP-11317</p>\n        </item>\n        <item>\n\t    <p> The documentation of predefined types has been\n\t    corrected Thanks to Kostis Sagonas. </p>\n          <p>\n\t    Own Id: OTP-11321</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug in prim_inet has been corrected. If the port owner\n\t    was killed at a bad time while closing the socket port\n\t    the port could become orphaned hence causing port and\n\t    socket leaking. Reported by Fred Herbert, Dmitry Belyaev\n\t    and others.</p>\n          <p>\n\t    Own Id: OTP-10497 Aux Id: OTP-10562 </p>\n        </item>\n        <item>\n          <p>\n\t    Compilation fixes for NetBSD. Thanks to YAMAMOTO Takashi.</p>\n          <p>\n\t    Own Id: OTP-10941</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a race condition when using delayed_write when\n\t    writing to a file which would cause the same data to be\n\t    written multiple times.</p>\n          <p>\n\t    Own Id: OTP-10984</p>\n        </item>\n        <item>\n          <p>\n\t    Fix small memory leak from tracing with option\n\t    <c>meta</c>.</p>\n          <p>\n\t    Own Id: OTP-10997</p>\n        </item>\n        <item>\n          <p>\n\t    Correct typo in erlsrv usage. Thanks to Bryan Hunter</p>\n          <p>\n\t    Own Id: OTP-11002</p>\n        </item>\n        <item>\n          <p>\n\t    ct_run: delete unused function. Thanks to Tuncer Ayaz.</p>\n          <p>\n\t    Own Id: OTP-11003</p>\n        </item>\n        <item>\n          <p>\n\t    Corrections to run_erl/to_erl handshake behaviour.</p>\n          <p>\n\t    Own Id: OTP-11012</p>\n        </item>\n        <item>\n          <p>\n\t    Fix typo in type: erlang:process_info_item(). Thanks to\n\t    Andrew Tunnell-Jones.</p>\n          <p>\n\t    Own Id: OTP-11024</p>\n        </item>\n        <item>\n          <p>\n\t    Fix src/dest overlap issue in ttsl driver. Thanks to\n\t    Steve Vinoski.</p>\n          <p>\n\t    Own Id: OTP-11064</p>\n        </item>\n        <item>\n          <p>\n\t    When sending to a port using <c>erlang:send(Port, Msg,\n\t    [nosuspend])</c>, the send operation was performed\n\t    synchronously. This bug has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-11076 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    When converting a faulty binary to a list with\n\t    unicode:characters_to_list, the error return value could\n\t    contain a faulty \"rest\", i.e. the io_list of characters\n\t    that could not be converted was wrong. This happened only\n\t    if input was a sub binary and conversion was from utf8.\n\t    This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-11080</p>\n        </item>\n        <item>\n          <p>\n\t    Runtime system could crash when reporting stale\n\t    <c>driver_select()</c>.</p>\n          <p>\n\t    Own Id: OTP-11084</p>\n        </item>\n        <item>\n          <p>\n\t    Fix lock order violation for memory instrumentation\n\t    (+Mim, +Mis, +Mit).</p>\n          <p>\n\t    Own Id: OTP-11085</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed some compilation warnings on miscellaneous\n\t    platforms. Thanks to Anthony Ramine.</p>\n          <p>\n\t    Own Id: OTP-11086</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed issue when flushing i/o during shutdown on windows\n\t    where the Erlang VM would sometime hang due to a race\n\t    condition.</p>\n          <p>\n\t    Own Id: OTP-11096</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed issue where repeated calls to erlang:nodes() could\n\t    cause unnecessary contention in the dist_table lock.</p>\n          <p>\n\t    Own Id: OTP-11097</p>\n        </item>\n        <item>\n          <p>\n\t    Properly guard WIDE_TAG use with HAVE_WCWIDTH in\n\t    ttsl_drv. Thanks to Anthony Ramine</p>\n          <p>\n\t    Own Id: OTP-11106</p>\n        </item>\n        <item>\n          <p>\n\t    Fix some Makefile rules that didn't support silent rules.\n\t    Thanks to Anthony Ramine.</p>\n          <p>\n\t    Own Id: OTP-11111</p>\n        </item>\n        <item>\n          <p>\n\t    Fix receive support in erl_eval with a BEAM module.\n\t    Thanks to Anthony Ramine.</p>\n          <p>\n\t    Own Id: OTP-11137</p>\n        </item>\n        <item>\n          <p>\n\t    erlang:now() could suddenly jump ~24 days into the future\n\t    on Windows. This is now corrected. Thanks to Garret Smith\n\t    for reporting and testing fixes.</p>\n          <p>\n\t    Own Id: OTP-11146</p>\n        </item>\n        <item>\n          <p>\n\t    erlang:term_to_binary will now cost an appropriate amount\n\t    of reductions and will interrupt (yield) for reschedule\n\t    if the term is big. This avoids too long schedules when\n\t    term_to_binary is used. </p>\n          <p>\n\t    Impact: Programs running term_to_binary on large terms\n\t    will run more smothly, but rescheduling will impact the\n\t    single process performance of the BIF. Single threaded\n\t    benchmarks will show degraded performance of the BIF when\n\t    called with very large terms, while general system\n\t    behaviour will be improved. The overhead for allowing\n\t    restart and reduction counting also degrades local\n\t    performance of the BIF with between 5% and 10% even for\n\t    small terms.</p>\n          <p>\n\t    Own Id: OTP-11163</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Replaced the lock protecting gathering of garbage\n\t    collection statistics with a lock-free solution.</p>\n          <p>\n\t    Own Id: OTP-10271 Aux Id: kunagi-108\n\t    [04c5410f-9cc4-4696-8639-36bf98686c7a-7] </p>\n        </item>\n        <item>\n\t    <p>Support for migration of memory carriers between\n\t    memory allocator instances has been introduced.</p>\n\t    <p>By default this feature is not enabled and do not\n\t    effect the characteristics of the system. When enabled it\n\t    has the following impact on the characteristics of the\n\t    system:</p> <list> <item>Reduced memory footprint when\n\t    the memory load is unevenly distributed between scheduler\n\t    specific allocator instances.</item> <item>Depending on\n\t    the default allocaton strategy used on a specific\n\t    allocator there might or might not be a slight\n\t    performance loss.</item> <item>When enabled on the\n\t    <c>fix_alloc</c> allocator, a different strategy for\n\t    management of fix blocks will be used.</item> <item>The\n\t    information returned from <seealso\n\t    marker=\"erlang:system_info_allocator_tuple\"><c>erlang:system_info({allocator,\n\t    A})</c></seealso>, and <seealso\n\t    marker=\"erlang:system_info_allocator_sizes\"><c>erlang:system_info({allocator_sizes,\n\t    A})</c></seealso> will be slightly different when this\n\t    feature has been enabled. An <c>mbcs_pool</c> tuple will\n\t    be present giving information about abandoned carriers,\n\t    and in the <c>fix_alloc</c> case no <c>fix_types</c>\n\t    tuple will be present. </item></list>\n\t    <p>For more information, see the documentation of the\n\t    <seealso\n\t    marker=\"erts_alloc#M_acul\"><c>+M&lt;S&gt;acul</c></seealso>\n\t    command line argument.</p>\n          <p>\n\t    Own Id: OTP-10279</p>\n        </item>\n        <item>\n          <p>\n\t    Change specs for spawn_opt to use the process_level()\n\t    type declaration instead of re-defining it in various\n\t    places. Thanks to Kostis Sagonas.</p>\n          <p>\n\t    Own Id: OTP-11008</p>\n        </item>\n        <item>\n\t    <p> Postscript files no longer needed for the generation\n\t    of PDF files have been removed. </p>\n          <p>\n\t    Own Id: OTP-11016</p>\n        </item>\n        <item>\n\t    <p>Erlang source files with non-ASCII characters are now\n\t    encoded in UTF-8 (instead of latin1).</p>\n          <p>\n\t    Own Id: OTP-11041 Aux Id: OTP-10907 </p>\n        </item>\n        <item>\n          <p>\n\t    Optimization of simultaneous <c>inet_db</c> operations on\n\t    the same socket by using a lock free implementation.</p>\n          <p>\n\t    Impact on the characteristics of the system: Improved\n\t    performance.</p>\n          <p>\n\t    Own Id: OTP-11074</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>high_msgq_watermark</c> and\n\t    <c>low_msgq_watermark</c> <c>inet</c> socket options\n\t    introduced in OTP-R16A could only be set on TCP sockets.\n\t    These options are now generic and can be set on all types\n\t    of sockets.</p>\n          <p>\n\t    Own Id: OTP-11075 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n\t    <p>A new better algorithm for management of the process,\n\t    and port tables has been introduced.</p>\n\t    <p>Impact on the characteristics of the system:</p>\n\t    <list> <item>The new algorithm ensures that both insert\n\t    and delete operations can be made in O(1) time\n\t    complexity. Previously used algorithm either caused\n\t    insert or delete to be O(N).</item> <item>The new\n\t    algorithm will also ensure that reuse of identifiers will\n\t    be less frequent than when the old algorithm was\n\t    used.</item> <item>Previously used algorithm ensured that\n\t    the latest created identifier compared as the largest\n\t    when comparing two identifiers of the same type that had\n\t    been created on the same node as long as no identifiers\n\t    had been reused. Since identifiers can be reused quite\n\t    fast, one has never been able to rely on this property.\n\t    Due to the introduction of this new algorithm this\n\t    property will not hold even if no identifiers has been\n\t    reused yet. This could be considered as an\n\t    incompatibility.</item> </list>\n\t    <p>Due to the above mensioned potential incompatibility,\n\t    it will still be possible to enable the old algorithm for\n\t    some time. The command line argument <seealso\n\t    marker=\"erl#+P\"><c>+P legacy</c></seealso> will enable\n\t    the old algorithm on the process table, and <seealso\n\t    marker=\"erl#+Q\"><c>+Q legacy</c></seealso> will do the\n\t    same for the port table. These command line arguments are\n\t    however deprecated as of their introduction and have been\n\t    scheduled for removal in OTP-R18.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-11077</p>\n        </item>\n        <item>\n          <p>\n\t    Support wide characters in the shell through wcwidth().\n\t    Thanks to Anthony Ramine. Reported by Lo\u00efc Hoguin.</p>\n          <p>\n\t    Own Id: OTP-11088</p>\n        </item>\n        <item>\n          <p>\n\t    Added total used memory for each process in erlang crash\n\t    dumps.</p>\n          <p>\n\t    Own Id: OTP-11098</p>\n        </item>\n        <item>\n          <p>\n\t    Added support for hipe on Raspberry Pi (armv6l). Thanks\n\t    to Klaus Alfert.</p>\n          <p>\n\t    Own Id: OTP-11125</p>\n        </item>\n        <item>\n          <p>\n\t    Remove 'query' from the list of reserved words in docs.\n\t    Thanks to Matthias Endler and Lo\u00efc Hoguin.</p>\n          <p>\n\t    Own Id: OTP-11158</p>\n        </item>\n        <item>\n          <p>\n\t    Lift static limitation (FD_SETSIZE) for file descriptors\n\t    on Mac OS X. (Thanks to Anthony Ramine)</p>\n          <p>\n\t    Own Id: OTP-11159</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n\t    <p>Miscellaneous native code in OTP misbehave either due\n\t    to lengthy execution, or due to not bumping reductions\n\t    properly. Problems typically occur when passing huge sets\n\t    of data to a misbehaving BIF. Fixing this has high\n\t    priority and is being worked on, but there will remain\n\t    issues like this for some time.</p>\n\t    <p>In order to alleviate problems with scheduling which\n\t    might occur when executing misbehaving native code, the\n\t    command line argument <seealso\n\t    marker=\"erl#+sfwi\">+sfwi</seealso> has been\n\t    introduced.</p>\n\t    <p>By default this feature is disabled and you are\n\t    advised not to enable it if you do not encounter problems\n\t    with misbehaving native code.</p>\n\t    <p>When enabled it has the following impact on the\n\t    characteristics of the system:</p> <list> <item>Work will\n\t    always be distributed between schedulers even when\n\t    executing misbehaving native code.</item> <item>It may\n\t    cause an increased amount of processes and/or ports\n\t    bouncing between schedulers which in turn will cause a\n\t    performance loss.</item> <item>It may cause reduced\n\t    performance due to reduced or lost work compaction when\n\t    all schedulers do not execute under full load.</item>\n\t    <item>An increased contention on run queue locks.</item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-11164</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug in the implementation of offline schedulers has\n\t    been fixed. The bug was introduced in OTP-R16A/ERTS-5.10,\n\t    and caused work-stealing between schedulers to fail. This\n\t    in turn, caused work to accumulate in some run-queues.\n\t    The bug was only triggered when there were offline\n\t    schedulers in the system, i.e., when the amount of online\n\t    schedulers was less than the total amount of schedulers.\n\t    The effect of the bug got more severe the larger amount\n\t    of offline schedulers the system had.</p>\n          <p>\n\t    Own Id: OTP-11022 Aux Id: OTP-9892 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The BIF <seealso\n\t    marker=\"erlang#is_process_alive/1\"><c>is_process_alive/1</c></seealso>\n\t    could prematurely return <c>false</c> while the process\n\t    being inspected was terminating. This bug was introduced\n\t    in ERTS-5.10.</p>\n          <p>\n\t    Own Id: OTP-10926</p>\n        </item>\n        <item>\n\t    <p>Fix a problem in <c>erlang:delete_element/2</c> where\n\t    the call could corrupt one word of stack if the heap and\n\t    stack met during call.</p>\n          <p>\n\t    Own Id: OTP-10932</p>\n        </item>\n        <item>\n          <p>\n\t    The <seealso\n\t    marker=\"erl#+sws\"><c>+sws&lt;value&gt;</c></seealso> and\n\t    <seealso\n\t    marker=\"erl#+swt\"><c>+swt&lt;value&gt;</c></seealso>\n\t    system flags failed if no white space were passed between\n\t    the parameter and value parts of the flags. Upon failure,\n\t    the runtime system refused to start.</p>\n          <p>\n\t    Own Id: OTP-11000</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Scheduler threads will now by default be less eager\n\t    requesting wakeup due to certain cleanup operations. This\n\t    can also be controlled using the <seealso\n\t    marker=\"erl#+swct\"><c>+swct</c></seealso> command line\n\t    argument of <seealso\n\t    marker=\"erl\"><c>erl(1)</c></seealso>.</p>\n          <p>\n\t    Own Id: OTP-10994</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Threads created internally in the runtime system by\n\t    vanilla, fd, and spawn drivers on Windows systems could\n\t    make thread unsafe calls to <c>driver_select()</c>.</p>\n          <p>\n\t    Own Id: OTP-10802</p>\n        </item>\n        <item>\n          <p>\n\t    Threads created internally in the runtime system by the\n\t    vanilla, fd, and spawn drivers on Windows systems could\n\t    make unsafe memory accesses to driver data after port had\n\t    terminated.</p>\n          <p>\n\t    Own Id: OTP-10803</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system could crash when flushing data to\n\t    standard out or standard error on Windows.</p>\n          <p>\n\t    Own Id: OTP-10807</p>\n        </item>\n        <item>\n\t    <p>Bugs due to the port optimizations introduced in\n\t    erts-5.10/OTP-R16A have been fixed:</p> <list>\n\t    <item>Memory leak when terminating ports</item>\n\t    <item>Memory leak when reaching the system limit of\n\t    maximum amount of concurrently existing ports</item>\n\t    <item>Crashs due to missing, or late test of bad port\n\t    handle</item> <item>The newly introduced driver API\n\t    function <c>erl_drv_busy_msgq_limits()</c> could not be\n\t    used by dynamically linked in drivers on Windows</item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-10809 Aux Id: OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>{packet,httph}</c> header capitalization for\n\t    unrecognized header fields longer than 20 charachters\n\t    such as <c>Sec-Websocket-Version</c>. The limit is simply\n\t    raised from 20 to 50 characters with the hope that valid\n\t    headers longer than 50 are not used.</p>\n          <p>\n\t    Own Id: OTP-10824</p>\n        </item>\n        <item>\n          <p>\n\t    Fix rounding issues in float_to_list/1,2. Thanks to Serge\n\t    Aleynikov</p>\n          <p>\n\t    Own Id: OTP-10837</p>\n        </item>\n        <item>\n          <p>\n\t    Fix memory leak in file driver introduced in R16A.</p>\n          <p>\n\t    Own Id: OTP-10841</p>\n        </item>\n        <item>\n\t    <p>A bug in an ERTS internal queue implementation could\n\t    cause the loss of a wake up signal to a consumer thread.\n\t    This has now been fixed.</p>\n\t    <p>The effect of this bug, when triggered, was often only\n\t    a small or even no delay of certain operations. This\n\t    since, threads often are woken due to other unrelated\n\t    reasons. However, if the consumer thread was not woken\n\t    due to other reasons when the bug was triggered, these\n\t    operations could be left hanging, potentially for ever.\n\t    Such effects seems to have been very rare, but we have on\n\t    at least one occasion gotten a report about such an\n\t    issue.</p>\n\t    <p>Operations potentially effected by this bug:</p>\n\t    <taglist> <tag>Inspection of memory allocation\n\t    status</tag> <item>The Erlang process calling\n\t    <c>erlang:memory/[0,1]</c>, or\n\t    <c>erlang:system_info({allocator|allocator_sizes, _})</c>\n\t    could potentially hang waiting for responses from\n\t    involved threads.</item> <tag>Async thread pool\n\t    jobs</tag> <item>An async thread pool job request and/or\n\t    reply could potentially be left hanging. In OTP this only\n\t    effected file operations, but user implemented drivers\n\t    using the async thread pool were also effected. In the\n\t    file operation case, this would typically translate into\n\t    an Erlang process potentially hanging on the file\n\t    operation.</item> <tag>Shutting down the runtime\n\t    system</tag> <item>Due to the issue with the async thread\n\t    pool mentioned above, flushing of I/O while terminating\n\t    the runtime system could also potentially hang.</item>\n\t    <tag>ETS memory deallocation</tag> <item>Scheduled jobs\n\t    handling deallocation of the main structure of an ETS\n\t    table could potentially hang. This more or less only\n\t    translates into minor memory leaks.</item> <tag>Shutting\n\t    down distribution</tag> <item>The distribution shutdown\n\t    phase used when manually shutting down the distribution,\n\t    i.e., when calling <c>net_kernel:stop()</c>, could\n\t    potentially hang.</item> </taglist>\n          <p>\n\t    Own Id: OTP-10854</p>\n        </item>\n        <item>\n          <p>\n\t    OS X Snow Leopard now only uses write, as writev does not\n\t    work properly on very large files.</p>\n          <p>\n\t    Own Id: OTP-10858</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where line oriented file I/O using read_ahead\n\t    was very slow for files with very large difference in\n\t    line length.</p>\n          <p>\n\t    Own Id: OTP-10859</p>\n        </item>\n        <item>\n          <p>\n\t    In erts-5.10 (R16A) faulty hashvalues were produced for\n\t    non-ASCII atoms (characters in byte-range 128..255). This\n\t    has now been fixed and hashvalues conforms to previous\n\t    OTP releases.</p>\n          <p>\n\t    Own Id: OTP-10860</p>\n        </item>\n        <item>\n          <p>\n\t    Fixes of memory accesses that might be thread unsafe when\n\t    the runtime system has been linked against third-party\n\t    libraries for atomic memory operations during the build.\n\t    Most builds are uneffected by this bug. If triggered, the\n\t    runtime system will most likely crash more or less\n\t    immediately.</p>\n          <p>\n\t    Own Id: OTP-10875 Aux Id: OTP-10854 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug where it was longer possible to give the +sws\n\t    proposal flag to non-smp emulators.</p>\n          <p>\n\t    Own Id: OTP-10881 Aux Id: seq12258 </p>\n        </item>\n        <item>\n          <p>\n\t    Faulty type to bytes read for ReadFile on Windows. This\n\t    could cause windows systems to misbehave. The correct\n\t    type is now used.</p>\n          <p>\n\t    Own Id: OTP-10890</p>\n        </item>\n        <item>\n          <p>\n\t    Change default max ports for Windows to 8192. Having a\n\t    too large value caused Windows to not be able to recover\n\t    properly. If you want to use another value, pass <c>+Q\n\t    Value</c> to erl or werl.</p>\n          <p>\n\t    Own Id: OTP-10892</p>\n        </item>\n        <item>\n          <p>\n\t    Fix rare crash on halfword vm during code loading.</p>\n          <p>\n\t    Own Id: OTP-10896</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Tuple funs (deprecated in R15B) are no longer supported.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10170</p>\n        </item>\n        <item>\n          <p>\n\t    Added four new bifs, <c>erlang:binary_to_integer/1,2</c>,\n\t    <c>erlang:integer_to_binary/1</c>,\n\t    <c>erlang:binary_to_float/1</c> and\n\t    <c>erlang:float_to_binary/1,2</c>. These bifs work\n\t    similarly to how their list counterparts work, except\n\t    they operate on binaries. In most cases converting from\n\t    and to binaries is faster than converting from and to\n\t    lists. </p>\n          <p>\n\t    These bifs are auto-imported into erlang source files and\n\t    can therefore be used without the <c>erlang</c> prefix.</p>\n          <p>\n\t    Own Id: OTP-10300 Aux Id: kunagi-74 [74] </p>\n        </item>\n        <item>\n          <p>\n\t    The experimental support for packages has been removed.</p>\n          <p>\n\t    Own Id: OTP-10348 Aux Id: kunagi-316 [227] </p>\n        </item>\n        <item>\n\t    <p>The driver API function <seealso\n\t    marker=\"erl_driver#erl_drv_consume_timeslice\"><c>erl_drv_consume_timeslice()</c></seealso>,\n\t    and the NIF API function <seealso\n\t    marker=\"erl_nif#enif_consume_timeslice\"><c>enif_consume_timeslice()</c></seealso>\n\t    have been introduced.</p>\n\t    <p>These functions are provided in order to better\n\t    support co-operative scheduling, improve system\n\t    responsiveness, and to make it easier to prevent\n\t    misbehaviors of the VM due to a process or port\n\t    monopolizing a scheduler thread. They can be used when\n\t    dividing lengthy work into a number of repeated calls\n\t    without the need to use threads.</p>\n          <p>\n\t    Own Id: OTP-10810</p>\n        </item>\n        <item>\n          <p>\n\t    The list_to_integer/2 bif has been optimized when used\n\t    with bases other than 10.</p>\n          <p>\n\t    Own Id: OTP-10834 Aux Id: kunagi-74 [74] </p>\n        </item>\n        <item>\n          <p>\n\t    The git commit sha of the HEAD commit is now added to the\n\t    Erlang shell when compiling a non-released Erlang\n\t    version.</p>\n          <p>\n\t    Own Id: OTP-10838</p>\n        </item>\n        <item>\n\t    <p>Change caching policy for memory segment allocator.\n\t    For instance, prefer sbc segments over mbc segments,\n\t    caching policy is time-arrow aware, evicting older cached\n\t    segments to store newer segments. </p> <p>The default\n\t    number of cachable segment has been increased from five\n\t    to ten segments. This can be modified, same as before,\n\t    with the command line option <c>+MMmcs 5</c></p>\n\t    <p>Impact: Increased speed for processing on larger\n\t    objects, e.g. binaries. Slight increase of mapped and\n\t    resident memory. Tune your system with memory options to\n\t    <c>erl</c> for best performance.</p>\n          <p>\n\t    Own Id: OTP-10840</p>\n        </item>\n        <item>\n          <p>\n\t    Updated config.sub and config.guess to latest version\n\t    from gnu.org</p>\n          <p>\n\t    Own Id: OTP-10848</p>\n        </item>\n        <item>\n          <p>\n\t    Add an xcomp file for Blue Gene/Q. Thanks to Kostis\n\t    Sagonas.</p>\n          <p>\n\t    Own Id: OTP-10849</p>\n        </item>\n        <item>\n          <p>\n\t    Cleanup of documentation of the type language. Thanks to\n\t    Kostis Sagonas.</p>\n          <p>\n\t    Own Id: OTP-10850</p>\n        </item>\n        <item>\n          <p>\n\t    Change the return value of hipe_bifs:remove_refs_from/1.\n\t    Thanks to Kostis Sagonas.</p>\n          <p>\n\t    Own Id: OTP-10851</p>\n        </item>\n        <item>\n          <p>\n\t    As of ERTS-5.10/OTP-R16A node names passed in the EPMD\n\t    protocol are required to be encoded in UTF-8. Since EPMD\n\t    previously accepted latin1 encoded node names this is an\n\t    incompatibility. However, since Erlang nodes always have\n\t    required characters in node names to be 7-bit ASCII\n\t    characters (and still do require this), this\n\t    incompatibility should not effect anyone using EPMD as an\n\t    Erlang Port Mapper Daemon.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10872 Aux Id: OTP-10753 </p>\n        </item>\n        <item>\n          <p>\n\t    The +pc flag to erl can be used to set the range of\n\t    characters considered printable. This affects how the\n\t    shell and io:format(\"~tp\",...) functionality does\n\t    heuristic string detection. More can be read in STDLIB\n\t    users guide.</p>\n          <p>\n\t    Own Id: OTP-10884</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a number of type cast errors related to formatted\n\t    printing on Win64 that can potentially cause problem when\n\t    the Erlang VM exceeds 4 GB of ram. (Thanks to Blaine\n\t    Whittle for the original patch)</p>\n          <p>\n\t    Own Id: OTP-10887</p>\n        </item>\n        <item>\n          <p>\n\t    The effect of the deprecated environment variable\n\t    ERL_MAX_PORTS had been removed premeturely. It has now\n\t    been readded. Note that this is still scheduled to be\n\t    released in R17B.</p>\n          <p>\n\t    Own Id: OTP-10895</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.10</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Set new peeled off SCTP socket to nonblocking socket\n\t    (Thanks to Jonas Falkevik)</p>\n          <p>\n\t    Own Id: OTP-10491</p>\n        </item>\n        <item>\n          <p>\n\t    Fix various typos (thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-10611</p>\n        </item>\n        <item>\n          <p>\n\t    Fix fd leak when using async thread pool</p>\n\t    <p> When using the async thread pool, if an erlang\n\t    process asks to open a file and it gets shutdown/killed\n\t    while the file:open/2 call hasn't returned, it's possible\n\t    to leak a file descriptor against the target file. This\n\t    has now been fixed. (Thanks to Filipe David Manana)</p>\n          <p>\n\t    Own Id: OTP-10677</p>\n        </item>\n        <item>\n          <p>\n\t    Use sys/types.h instead of string.h to pull ssize_t\n\t    definition to erl_driver.h. This fixes build issue on\n\t    NetBSD. (Thanks to Yamamoto Takashi).</p>\n          <p>\n\t    Own Id: OTP-10699</p>\n        </item>\n        <item>\n          <p>\n\t    Arguments given with the -run or -s flags to erl are now\n\t    translated according to the file name encoding mode of\n\t    the runtime system.</p>\n          <p>\n\t    Own Id: OTP-10702</p>\n        </item>\n        <item>\n          <p>\n\t    The octet counters in the gen_tcp/inet interface could\n\t    behave in unexpected ways on 64bit platforms. The\n\t    behaviour is now as expected.</p>\n          <p>\n\t    Own Id: OTP-10746</p>\n        </item>\n        <item>\n          <p>\n\t    Certain linux kernels, most notably in redhat and CentOS\n\t    distribution, had a bug in writev which generated an\n\t    infinite loop in the tcp code of the VM. The bug is now\n\t    worked around.</p>\n          <p>\n\t    Own Id: OTP-10747</p>\n        </item>\n        <item>\n          <p>\n\t    A process that got killed (got an exit signal) while\n\t    operating on a compresseed file, could cause a\n\t    segmentation fault in the VM. This is now corrected.\n\t    Thanks to Filipe David Manana for identifying the problem\n\t    and submitting a solution.</p>\n          <p>\n\t    Own Id: OTP-10748</p>\n        </item>\n        <item>\n          <p>\n\t    Windows previously used three digit exponent in\n\t    formatting which caused difference between platforms, as\n\t    can be seen by float_to_list/1. This has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-10751</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    A boolean socket option 'ipv6_v6only' for IPv6 sockets\n\t    has been added. The default value of the option is OS\n\t    dependent, so applications aiming to be portable should\n\t    consider using <c>{ipv6_v6only,true}</c> when creating an\n\t    <c>inet6</c> listening/destination socket, and if\n\t    necessary also create an <c>inet</c> socket on the same\n\t    port for IPv4 traffic. See the documentation.</p>\n          <p>\n\t    Own Id: OTP-8928 Aux Id: kunagi-193 [104] </p>\n        </item>\n        <item>\n\t    <p>It is now allowed to define stubs for BIFs, to allow\n\t    type specs to be written for BIFs. For example, if there\n\t    is BIF called <c>lists:member/2</c>, a dummy definition\n\t    of <c>lists:member/2</c> is now allowed.</p>\n          <p>\n\t    Own Id: OTP-9861</p>\n        </item>\n        <item>\n\t    <p>Process optimizations. The most notable:</p> <list>\n\t    <item>New internal process table implementation allowing\n\t    for both parallel reads as well as writes. Especially\n\t    read operations have become really cheap. This reduce\n\t    contention in various situations. For example when,\n\t    spawning processes, terminating processes, sending\n\t    messages, etc.</item> <item>Optimizations of run queue\n\t    management reducing contention.</item>\n\t    <item>Optimizations of process internal state changes reducing\n\t    contention.</item> </list> <p>These changes imply changes\n\t    of the characteristics the system. Most notable: changed\n\t    timing in the system.</p>\n          <p>\n\t    Own Id: OTP-9892 Aux Id: OTP-10167 </p>\n        </item>\n        <item>\n          <p>\n\t    Non-blocking code loading. Earlier when an Erlang module\n\t    was loaded, all other execution in the VM were halted\n\t    while the load operation was carried out in single\n\t    threaded mode. Now modules are loaded without blocking\n\t    the VM. Processes may continue executing undisturbed in\n\t    parallel during the entire load operation. The load\n\t    operation is completed by making the loaded code visible\n\t    to all processes in a consistent way with one single\n\t    atomic instruction. Non-blocking code loading will\n\t    improve realtime characteristics when modules are\n\t    loaded/upgraded on a running SMP system.</p>\n          <p>\n\t    Own Id: OTP-9974</p>\n        </item>\n        <item>\n\t    <p>In the SMP emulator, turning on and off tracing will\n\t    no longer take down the system to single-scheduling. </p>\n          <p>\n\t    Own Id: OTP-10122</p>\n        </item>\n        <item>\n\t    <p>Remove VxWorks support</p>\n          <p>\n\t    Own Id: OTP-10146</p>\n        </item>\n        <item>\n          <p>\n\t    Added a general framework for executing benchmarks of\n\t    Erlang/OTP. Benchmarks for the Erlang VM and mnesia have\n\t    been incorporated in the framework. </p>\n          <p>\n\t    For details about how to add more benchmarks see\n\t    $ERL_TOP/HOWTO/BENCHMARKS.md in the source distribution.</p>\n          <p>\n\t    Own Id: OTP-10156</p>\n        </item>\n        <item>\n          <p>\n\t    Optimized deletion of ETS-tables which significantly\n\t    improves performance when large amounts of temporary\n\t    tables are used.</p>\n          <p>\n\t    This change imply changes of the characteristics the\n\t    system. Most notable: changed timing in the system.</p>\n          <p>\n\t    Own Id: OTP-10167 Aux Id: OTP-9892 </p>\n        </item>\n        <item>\n          <p>\n\t    Tuple funs (deprecated in R15B) are no longer supported.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10170</p>\n        </item>\n        <item>\n          <p>\n\t    New internal header scheme for allocators</p>\n          <p>\n\t    Impact: Reduces size on object allocated in multiblock\n\t    carriers by one word</p>\n          <p>\n\t    Own Id: OTP-10273 Aux Id: kunagi-20 [20] </p>\n        </item>\n        <item>\n\t    <p>Major port improvements. The most notable:</p> <list>\n\t    <item>New internal port table implementation allowing for\n\t    both parallel reads as well as writes. Especially read\n\t    operations have become really cheap.This reduce\n\t    contention in various situations. For example when,\n\t    creating ports, terminating ports, etc. </item>\n\t    <item>Dynamic allocation of port structures. This allow\n\t    for a much larger maximum amount of ports allowed as a\n\t    default. The previous default of 1024 has been raised to\n\t    65536. Maximum amount of ports can be set using the\n\t    <seealso marker=\"erts:erl#+Q\">+Q</seealso> command line\n\t    flag of <seealso marker=\"erts:erl\">erl(1)</seealso>. The\n\t    previously used environment variable <c>ERL_MAX_PORTS</c>\n\t    has been deprecated and scheduled for removal in\n\t    OTP-R17.</item> <item>Major rewrite of scheduling of port\n\t    tasks. Major benefits of the rewrite are reduced\n\t    contention on run queue locks, and reduced amount of\n\t    memory allocation operations needed. The rewrite was also\n\t    necessary in order to make it possible to schedule\n\t    signals from processes to ports.</item> <item>Improved\n\t    internal thread progress functionality for easy\n\t    management of unmanaged threads. This improvement was\n\t    necessary for the rewrite of the port task\n\t    scheduling.</item> <item>Rewrite of all process to port\n\t    signal implementations in order to make it possible to\n\t    schedule those operations. All port operations can now be\n\t    scheduled which allows for reduced lock contention on the\n\t    port lock as well as truly asynchronous communication\n\t    with ports.</item> <item>Optimized lookup of port handles\n\t    from drivers.</item> <item>Optimized driver lookup when\n\t    creating ports.</item> <item>Preemptable <seealso\n\t    marker=\"erts:erlang#ports-0\">erlang:ports/0</seealso>\n\t    BIF.</item> <item>Improving responsiveness by bumping\n\t    reductions for a process calling a driver callback\n\t    directly.</item> </list>\n\t    <p>These changes imply changes of the characteristics of\n\t    the system. The most notable:</p> <taglist> <tag>Order of\n\t    signal delivery</tag> <item>The previous implementation\n\t    of the VM has delivered signals from processes to ports\n\t    in a synchronous stricter fashion than required by the\n\t    language. As of ERTS version 5.10, signals are truly\n\t    asynchronously delivered. The order of signal delivery\n\t    still adheres to the requirements of the language, but\n\t    only to the requirements. That is, some signal sequences\n\t    that previously always were delivered in one specific\n\t    order may now from time to time be delivered in different\n\t    orders. This may cause Erlang programs that have made\n\t    <em>false assumptions</em> about signal delivery order to\n\t    fail even though they previously succeeded. For more\n\t    information about signal ordering guarantees, see the\n\t    chapter on <seealso\n\t    marker=\"erts:communication\">communication</seealso> in\n\t    the ERTS user's guide. The <seealso\n\t    marker=\"erts:erl#+n\">+n</seealso> command line flag of\n\t    <seealso marker=\"erts:erl\">erl(1)</seealso> can be\n\t    helpful when trying to find signaling order bugs in\n\t    Erlang code that have been exposed by these\n\t    changes.</item> <tag>Latency of signals sent from\n\t    processes to ports</tag> <item>Signals from processes to\n\t    ports where previously always delivered immediately. This\n\t    kept latency for such communication to a minimum, but it\n\t    could cause lock contention which was very expensive for\n\t    the system as a whole. In order to keep this latency low\n\t    also in the future, most signals from processes to ports\n\t    are by default still delivered immediately as long as no\n\t    conflicts occur. Such conflicts include not being able to\n\t    acquire the port lock, but also include other conflicts.\n\t    When a conflict occur, the signal will be scheduled for\n\t    delivery at a later time. A scheduled signal delivery may\n\t    cause a higher latency for this specific communication,\n\t    but improves the overall performance of the system since\n\t    it reduce lock contention between schedulers. The default\n\t    behavior of only scheduling delivery of these signals on\n\t    conflict can be changed by passing the <seealso\n\t    marker=\"erts:erl#+spp\">+spp</seealso> command line flag\n\t    to <seealso marker=\"erts:erl\">erl(1)</seealso>. The\n\t    behavior can also be changed on port basis using the\n\t    <seealso\n\t    marker=\"erts:erlang#open_port_parallelism\">parallelism</seealso>\n\t    option of the <seealso\n\t    marker=\"erts:erlang#open_port-2\">open_port/2</seealso>\n\t    BIF.</item> <tag>Execution time of the\n\t    <c>erlang:ports/0</c> BIF</tag> <item>Since <seealso\n\t    marker=\"erts:erlang#ports-0\">erlang:ports/0</seealso> now\n\t    can be preempted, the responsiveness of the system as a\n\t    whole has been improved. A call to <c>erlang:ports/0</c>\n\t    may, however, take a much longer time to complete than\n\t    before. How much longer time heavily depends on the\n\t    system load.</item> <tag>Reduction cost of calling driver\n\t    callbacks</tag> <item>Calling a driver callback is quite\n\t    costly. This was previously not reflected in reduction\n\t    cost at all. Since the reduction cost now has increased,\n\t    a process performing lots of direct driver calls will be\n\t    scheduled out more frequently than before.</item>\n\t    </taglist>\n\t    <p><em>Potential incompatibilities</em>:</p> <list>\n\t    <item><c>driver_send_term()</c> has been deprecated and\n\t    has been scheduled for removal in OTP-R17. Replace usage\n\t    of <c>driver_send_term()</c> with usage of <seealso\n\t    marker=\"erts:erl_driver#erl_drv_send_term\">erl_drv_send_term()</seealso>.</item>\n\t    <item><c>driver_output_term()</c> has been deprecated and\n\t    has been scheduled for removal in OTP-R17. Replace usage\n\t    of <c>driver_output_term()</c> with usage of <seealso\n\t    marker=\"erts:erl_driver#erl_drv_output_term\">erl_drv_output_term()</seealso>.</item>\n\t    <item>The new function <seealso\n\t    marker=\"erts:erl_driver#erl_drv_busy_msgq_limits\">erl_drv_busy_msgq_limits()</seealso>\n\t    has been added in order to able to control management of\n\t    port queues.</item> </list>\n\t    <p>The <seealso\n\t    marker=\"erts:erl_driver#version_management\">driver API\n\t    version</seealso> has been bumped to 2.1 from 2.0 due to\n\t    the above changes in the driver API.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10336 Aux Id: OTP-9892 </p>\n        </item>\n        <item>\n          <p>\n\t    The experimental support for packages has been removed.</p>\n          <p>\n\t    Own Id: OTP-10348 Aux Id: kunagi-316 [227] </p>\n        </item>\n        <item>\n          <p>\n\t    Wrong parameters when setting seq_trace-tokens from\n\t    within a trace-pattern could crash the VM. This is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-10522</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang specification 4.7.3 defines max tuple size to\n\t    65535 elements It is now enforced to no more than\n\t    16777215 elements (arity 24 bits)</p>\n          <p>\n\t    Previous edge cases (28 bits) were not validated and\n\t    could cause undefined behaviour.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10633</p>\n        </item>\n        <item>\n          <p>\n\t    Add insert_element/3 and delete_element/2</p>\n          <p>\n\t    Own Id: OTP-10643</p>\n        </item>\n        <item>\n          <p>\n\t    The previous default of a maximum of 32768 simultaneous\n\t    processes has been raised to 262144. This value can be\n\t    changed using the the <seealso\n\t    marker=\"erl#+P\">+P</seealso> command line flag of\n\t    <seealso marker=\"erl\">erl(1)</seealso>. Note that the\n\t    value passed now is considered as a hint, and that actual\n\t    value chosen in most cases will be a power of two.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10647 Aux Id: OTP-9892, OTP-10336 </p>\n        </item>\n        <item>\n          <p>\n\t    The previously (in R15) proposed scheduler wakeup\n\t    strategy is now used by default. This strategy is not as\n\t    quick to forget about previous overload as the previous\n\t    strategy.</p>\n          <p>\n\t    This change imply changes of the characteristics the\n\t    system. Most notable: When a small overload comes and\n\t    then disappears repeatedly, the system will for a bit\n\t    longer time be willing to wake up schedulers than before.\n\t    Timing in the system will due to this also change.</p>\n          <p>\n\t    The previous strategy can still be enabled by passing the\n\t    <seealso marker=\"erl#+sws\">+sws legacy</seealso> command\n\t    line flag to <c>erl</c>.</p>\n          <p>\n\t    Own Id: OTP-10661 Aux Id: OTP-10033 </p>\n        </item>\n        <item>\n          <p>\n\t    The <seealso marker=\"erl#+stbt\">+stbt</seealso> command line\n\t    argument of <c>erl</c> was added. This argument can be\n\t    used for trying to set scheduler bind type. Upon failure\n\t    unbound schedulers will be used.</p>\n          <p>\n\t    Own Id: OTP-10668</p>\n        </item>\n        <item>\n          <p>\n\t    Support ANSI in console</p>\n          <p>\n\t    Unix platforms will no longer filter control sequences to\n\t    the ttsl driver thus enabling ANSI and colors in console.\n\t    (Thanks to Pedram Nimreezi)</p>\n          <p>\n\t    Own Id: OTP-10678</p>\n        </item>\n        <item>\n\t    <p>Add file:allocate/3 operation</p>\n\t    <p>This operation allows pre-allocation of space for\n\t    files. It succeeds only on systems that support such\n\t    operation. (Thanks to Filipe David Manana)</p>\n          <p>\n\t    Own Id: OTP-10680</p>\n        </item>\n        <item>\n\t    <p>Treat <c>-Wreturn-type</c> warnings as error when\n\t    using GCC (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-10683</p>\n        </item>\n        <item>\n          <p>\n\t    Implement ./otp_build configure --enable-silent-rules</p>\n          <p>\n\t    With silent rules, the output of make is less verbose and\n\t    compilation warnings are easier to spot. Silent rules are\n\t    disabled by default and can be disabled or enabled at\n\t    will by make V=0 and make V=1. (Thanks to Anthony Ramine)</p>\n          <p>\n\t    Own Id: OTP-10726</p>\n        </item>\n        <item>\n          <p>\n\t    Use share flags for all file operations on Windows.\n\t    Thanks to Filipe David Borba Manana.</p>\n          <p>\n\t    Own Id: OTP-10727</p>\n        </item>\n        <item>\n          <p>\n\t    Make/fakefop adjustments. Thanks to Tuncer Ayaz and\n\t    Sebastian Rasmussen.</p>\n          <p>\n\t    Own Id: OTP-10733</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system will now by default use 10 async\n\t    threads if thread support has been enabled when building\n\t    the runtime system.</p>\n          <p>\n\t    This will prevent long blocking file-operations from\n\t    blocking scheduler threads for long periods of time,\n\t    which can be harmful. Apart from file-operations, it also\n\t    effects other operations scheduled on the async thread\n\t    pool by user implemented drivers.</p>\n          <p>\n\t    The amount of async threads can be controlled by using\n\t    the <seealso\n\t    marker=\"erl#async_thread_pool_size\"><c>+A</c></seealso>\n\t    command line argument of <c>erl(1)</c>. When running some\n\t    offline tools you <em>might</em> want to disable async\n\t    threads, but you are advised <em>not</em> to in the\n\t    general case. Instead, you might want to increase the\n\t    amount of async threads used.</p>\n          <p>\n\t    This change imply changes of the characteristics the\n\t    system compared to the previous default. The\n\t    responsiveness of the system as a whole will be improved.\n\t    Operations scheduled on the async thread pool will get an\n\t    increased latency. The throughput of these operations may\n\t    increase, or decrease depending on the type of the\n\t    operations and how they get scheduled. In the case of\n\t    file operations, the throughput very much depends on how\n\t    the Erlang application access files. Multiple concurrent\n\t    accesses to different files have the potential of an\n\t    increased throughput.</p>\n          <p>\n\t    Own Id: OTP-10736</p>\n        </item>\n        <item>\n          <p>\n\t    The default reader group limit has been increased to 64\n\t    from 8. This limit can be set using the <c>+rg</c>\n\t    command line argument of <c>erl(1)</c>.</p>\n          <p>\n\t    This change of default value will reduce lock contention\n\t    on ETS tables using the <c>read_concurrency</c> option at\n\t    the expense of memory consumption when the amount of\n\t    schedulers and logical processors are between 8 and 64.\n\t    For more information, see documentation of the <c>+rg</c>\n\t    command line argument of <c>erl(1)</c>.</p>\n          <p>\n\t    Own Id: OTP-10737</p>\n        </item>\n        <item>\n          <p>\n\t    New BIF float_to_list/2 which solves a problem of\n\t    float_to_list/1 that doesn't allow specifying the number\n\t    of digits after the decimal point when formatting floats\n\t    (Thanks to Serge Aleynikov).</p>\n          <p>\n\t    Own Id: OTP-10752</p>\n        </item>\n        <item>\n          <p>\n\t    Limited support for unicode atoms in the external format\n\t    and in the internal representation of the vm. This is a\n\t    preparative feature in order to support communication\n\t    with future releases of Erlang/OTP that may create\n\t    unicode atoms.</p>\n          <p>\n\t    Own Id: OTP-10753</p>\n        </item>\n        <item>\n          <p>\n\t    Increased potential concurrency in ETS for\n\t    <c>write_concurrency</c> option. The number of internal\n\t    table locks has increased from 16 to 64. This makes it\n\t    four times less likely that two concurrent processes\n\t    writing to the same table would collide and thereby\n\t    serialized. The cost is an increased constant memory\n\t    footprint for tables using write_concurrency. The memory\n\t    consumption per inserted record is not affected. The\n\t    increased footprint can be particularly large if\n\t    <c>write_concurrency</c> is combined with\n\t    <c>read_concurrency</c>.</p>\n          <p>\n\t    Own Id: OTP-10787</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.3.1</title>\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    Create an erl_crash.dump if no heart exists and no\n\t    ERL_CRASH_DUMP_SECONDS is set (behaviour changed).</p>\n          <p>\n\t    Don't create an erl_crash.dump if heart do exists and no\n\t    ERL_CRASH_DUMP_SECONDS is set (behaviour not changed).</p>\n          <p>\n\t    This changes the behaviour back to the R15B02 default\n\t    considering if a beam was running with no heart.</p>\n          <p>\n\t    Own Id: OTP-10602</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix linking in OpenBSD. (Thanks to Matthew Dempsky)</p>\n          <p>\n\t    Own Id: OTP-10395</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing fallback atomics to be used even though\n\t    healthy gcc atomics or libatomic_ops was detected.</p>\n          <p>\n\t    Own Id: OTP-10418</p>\n        </item>\n        <item>\n          <p>\n\t    Ensure 'erl_crash.dump' when asked for it. This will\n\t    change erl_crash.dump behaviour.</p>\n          <p>\n\t    * Not setting ERL_CRASH_DUMP_SECONDS will now terminate\n\t    beam immediately on a crash without writing a crash dump\n\t    file.</p>\n          <p>\n\t    * Setting ERL_CRASH_DUMP_SECONDS to 0 will also terminate\n\t    beam immediately on a crash without writing a crash dump\n\t    file, i.e. same as not setting ERL_CRASH_DUMP_SECONDS\n\t    environment variable.</p>\n          <p>\n\t    * Setting ERL_CRASH_DUMP_SECONDS to a negative value will\n\t    let the beam wait indefinitely on the crash dump file\n\t    being written.</p>\n          <p>\n\t    * Setting ERL_CRASH_DUMP_SECONDS to a positive value will\n\t    let the beam wait that many seconds on the crash dump\n\t    file being written.</p>\n          <p>\n\t    A positive value will set an alarm/timeout for restart\n\t    both in beam and in heart if heart is running.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-10422 Aux Id: kunagi-250 [161] </p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug where MSVRT100.dll was not included in the\n\t    windows installer.</p>\n          <p>\n\t    Own Id: OTP-10481</p>\n        </item>\n        <item>\n\t    <p>In the expression\n\t    <c>&lt;&lt;Bin/binary,...&gt;&gt;</c>, if <c>Bin</c> was\n\t    a bitstring with a size not a multiple of 8, either no\n\t    exception was generated or an incorrect exception was\n\t    generated. (Thanks to Adam Rutkowski for reporting this\n\t    bug.)</p>\n          <p>\n\t    Own Id: OTP-10524</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system could crash while scheduling a port\n\t    task. The port task was scheduled either due to an\n\t    external I/O event being triggered, a driver timeout\n\t    being triggered, or data being sent over a distribution\n\t    channel.</p>\n          <p>\n\t    Own Id: OTP-10556</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:memory(ets)</c> erroneously included the size\n\t    of each ETS-table main structure twice.</p>\n          <p>\n\t    Own Id: OTP-10558</p>\n        </item>\n        <item>\n          <p>\n\t    Fix compile error in generated file hipe_amd64_bifs.S for\n\t    Solaris.</p>\n          <p>\n\t    Own Id: OTP-10577</p>\n        </item>\n        <item>\n          <p>\n\t    A faulty spec for process_info/2 could cause false\n\t    dialyzer warnings. The spec is corrected.</p>\n          <p>\n\t    Own Id: OTP-10584</p>\n        </item>\n        <item>\n          <p>\n\t    In very rare cases, the VM could crash if a garbage\n\t    collector was called while executing an appending bit\n\t    syntax instruction. The symptom was a core when\n\t    reallocating memory in the function erts_bs_append. The\n\t    garbage collector bug is now corrected.</p>\n          <p>\n\t    Own Id: OTP-10590</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Improve support for building and testing in embedded ppc\n\t    environments.</p>\n          <p>\n\t    Own Id: OTP-10265 Aux Id: kunagi-159\n\t    [daf97f67-5724-4812-a5b6-7e86990133d2-1] </p>\n        </item>\n        <item>\n          <p>\n\t    Due to a race condition on Windows, sometimes when\n\t    printing to standard output and then immediately\n\t    terminating erlang all data would not be printed. The\n\t    emulator now waits for all data to be printed before\n\t    exiting.</p>\n          <p>\n\t    Own Id: OTP-10325 Aux Id: kunagi-166\n\t    [dd72d0e2-3e76-4a51-8b56-7564e24eecae] </p>\n        </item>\n        <item>\n          <p>\n\t    The frequency with which sleeping schedulers are woken\n\t    due to outstanding memory deallocation jobs has been\n\t    reduced.</p>\n          <p>\n\t    Own Id: OTP-10476 Aux Id: OTP-10162 </p>\n        </item>\n        <item>\n          <p>\n\t    Clearer warnings about the dangers of misuse of <seealso\n\t    marker=\"erl_nif#WARNING\">native functions</seealso> and\n\t    <seealso marker=\"erl_driver#WARNING\">drivers</seealso>\n\t    have been added to the documentation.</p>\n          <p>\n\t    Own Id: OTP-10557</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix erl_prim_loader errors in handling of primary\n\t    archive. The following errors have been corrected:</p>\n          <list> <item> If primary archive was named \"xxx\", then a\n\t    file in the same directory named \"xxxyyy\" would be\n\t    interpreted as a file named \"yyy\" inside the archive.\n\t    </item> <item> erl_prim_loader did not correctly create\n\t    and normalize absolute paths for primary archive and\n\t    files inside it, so unless given with exact same path\n\t    files inside the archive would not be found. E.g. if\n\t    escript was started as /full/path/to/xxx then\n\t    \"./xxx/file\" would not be found since erl_prim_loader\n\t    would try to match /full/path/to/xxx with\n\t    /full/path/to/./xxx. Same problem with ../. </item>\n\t    <item> Depending on how the primary archive was built,\n\t    erl_prim_loader:list_dir/1 would sometimes return an\n\t    empty string inside the file list. This was a virtual\n\t    element representing the top directory of the archive.\n\t    This has been removed. </item>\n          </list>\n          <p>\n\t    Thanks to Tuncer Ayaz and Shunichi Shinohara for\n\t    reporting and co-authoring corrections.</p>\n          <p>\n\t    Own Id: OTP-10071</p>\n        </item>\n        <item>\n\t    <p>Fix: Add port-I/O statistics for active once and true\n\t    and not only active false.</p>\n          <p>\n\t    Own Id: OTP-10073</p>\n        </item>\n        <item>\n          <p>\n\t    The 64-bit windows installer did not look in the right\n\t    directories for 64-bit version of Microsoft Visual C++\n\t    2010 Redistibutable Package and hence took the wrong\n\t    decision about having to install the redistributable\n\t    package if the 32-bit version was installed but not the\n\t    64-bit and vice versa. This bug has now been fixed\n\t    Furthermore the sub-installer for the redistributable\n\t    package is now run in silent mode if the erlang installer\n\t    is.</p>\n          <p>\n\t    Own Id: OTP-10096</p>\n        </item>\n        <item>\n          <p>\n\t    epmd would fail to start automatically when starting a\n\t    distributed erlang node installed in a location with a\n\t    whitespace in the path.</p>\n          <p>\n\t    Own Id: OTP-10106</p>\n        </item>\n        <item>\n          <p>\n\t    A more or less harmless bug that sometimes caused memory\n\t    deallocations to be delayed longer than intended has been\n\t    fixed.</p>\n          <p>\n\t    Own Id: OTP-10116</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing emulator crash when running HiPE on ARM.\n\t    Bug has existed since R15B.</p>\n          <p>\n\t    Own Id: OTP-10137</p>\n        </item>\n        <item>\n\t    <p> A bug regarding spaces in C function prototypes has\n\t    been fixed. (Thanks to Richard O'Keefe.) </p>\n          <p>\n\t    Own Id: OTP-10138</p>\n        </item>\n        <item>\n          <p>\n\t    Corrected dtrace pid length in message related probes.\n\t    (Thanks to Zheng Siyao)</p>\n          <p>\n\t    Own Id: OTP-10142</p>\n        </item>\n        <item>\n          <p>\n\t    Correct formating in exit error messages</p>\n          <p>\n\t    Ensure displayed sizes are not negative. (Thanks to\n\t    Michael Santos)</p>\n          <p>\n\t    Own Id: OTP-10148</p>\n        </item>\n        <item>\n          <p>\n\t    fix escript/primary archive reloading</p>\n          <p>\n\t    If the mtime of an escript/primary archive file changes\n\t    after being added to the code path, correctly reload the\n\t    archive and update the cache. (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-10151</p>\n        </item>\n        <item>\n          <p>\n\t    Doc fix: link from erlang:now/0 to os:timestamp/0</p>\n          <p>\n\t    Sometimes os:timestamp/0 is more appropriate than\n\t    erlang:now/0. The documentation for the former has a link\n\t    to the latter; this patch adds a link in the other\n\t    direction to make os:timestamp/0 more visible. Thanks to\n\t    Magnus Henoch</p>\n          <p>\n\t    Own Id: OTP-10180</p>\n        </item>\n        <item>\n          <p>\n\t    The caret in the werl window (on Windows) could appear at\n\t    the wrong place after regaining focus. This is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-10181</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug that in some cases could cause corrupted binaries\n\t    in ETS tables with <c>compressed</c> option.</p>\n          <p>\n\t    Own Id: OTP-10182</p>\n        </item>\n        <item>\n          <p>\n\t    Fix use of \"clever\" mktime</p>\n          <p>\n\t    Commit 1eef765 introduced regression (conditional\n\t    _always_ evaluates to true) in which\n\t    erlang:localtime_to_universaltime/2 stopped working on\n\t    systems configured with timezone without DST (i.e. UTC)\n\t    on *BSD platforms: 1>\n\t    erlang:localtime_to_universaltime({{2012,1,1},{0,0,0}},\n\t    true). ** exception error: bad argument Thanks to Piotr\n\t    Sikora</p>\n          <p>\n\t    Own Id: OTP-10187</p>\n        </item>\n        <item>\n          <p>\n\t    Relocate bodies of DTrace probes to the statically-linked\n\t    VM.</p>\n          <p>\n\t    Due to various operating systems (in both the DTrace and\n\t    SystemTap worlds) not fully supporting DTrace probes (or\n\t    SystemTap-compatibility mode probes) in shared libraries,\n\t    we relocate those probes to the statically-linked virtual\n\t    machine. This could be seen as pollution of the pristine\n\t    VM by a (yet) experimental feature. However:</p>\n          <p>\n\t    1. This code can be eliminated completely by the C\n\t    preprocessor. 2. Leaving the probes in the dyntrace NIF\n\t    shared library simply does not work correctly on too many\n\t    platforms. *Many* thanks to Macneil Shonle at Basho for\n\t    assisting when my RSI-injured fingers gave out. (note:\n\t    Solaris 10 and FreeBSD 9.0-RELEASE can take a long time\n\t    to compile)</p>\n          <p>\n\t    Own Id: OTP-10189</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>ets:test_ms/2</c> that could cause emulator\n\t    crash when using <c>'$_'</c> in match spec.</p>\n          <p>\n\t    Own Id: OTP-10190</p>\n        </item>\n        <item>\n          <p>\n\t    Supplying a filename longer than the operating system\n\t    MAX_PATH to file:read_link/1 would cause a crash\n\t    (Segemntation fault/Critical Error) on all platforms.\n\t    This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-10200</p>\n        </item>\n        <item>\n          <p>\n\t    If Perl was configured to interpret files as being\n\t    encoded in UTF-8, the build would crash in\n\t    <c>make_preload</c>. (Thanks to Aaron Harnly for noticing\n\t    this issue.)</p>\n          <p>\n\t    Own Id: OTP-10201</p>\n        </item>\n        <item>\n          <p>\n\t    Fix the erlc -MP flag</p>\n          <p>\n\t    Because of a copy-and-paste error in erlc.c, the -MP flag\n\t    had the same effect as -MG. As a workaround, you had to\n\t    pass +makedep_phony to enable the MP option. This patch\n\t    makes -MP work as intended.</p>\n          <p>\n\t    Own Id: OTP-10211</p>\n        </item>\n        <item>\n          <p>\n\t    Allow mixed IPv4 and IPv6 addresses to sctp_bindx</p>\n          <p>\n\t    Also allow mixed address families to bind, since the\n\t    first address on a multihomed sctp socket must be bound\n\t    with bind, while the rest are to be bound using\n\t    sctp_bindx. At least Linux supports adding address of\n\t    mixing families. Make inet_set_faddress function\n\t    available also when HAVE_SCTP is not defined, since we\n\t    use it to find an address for bind to be able to mix ipv4\n\t    and ipv6 addresses. Thanks to Tomas Abrahamsson</p>\n          <p>\n\t    Own Id: OTP-10217</p>\n        </item>\n        <item>\n          <p>\n\t    Fix support for leap seconds-aware timezones</p>\n          <p>\n\t    erlang:universaltime_to_localtime is leap seconds-aware\n\t    (since 2008), however erlang:localtime_to_universaltime\n\t    is not, which gives surprising results on systems\n\t    configured with leap seconds-aware timezones: 1>\n\t    erlang:universaltime_to_localtime({{2012,1,1},{0,0,0}}).\n\t    {{2012,1,1},{0,0,0}} 2>\n\t    erlang:localtime_to_universaltime({{2012,1,1},{0,0,0}}).\n\t    {{2012,1,1},{0,0,24}} and completely breaks\n\t    calendar:local_time_to_universal_time_dst: 3>\n\t    calendar:local_time_to_universal_time_dst({{2011,1,1},{0,0,0}}).\n\t    [] Thanks to Piotr Sikora</p>\n          <p>\n\t    Own Id: OTP-10227</p>\n        </item>\n        <item>\n          <p>\n\t    erlsrv: gracefully stop emulator on Windows shutdown</p>\n          <p>\n\t    Windows will send the SERVICE_CONTROL_SHUTDOWN event to\n\t    the service control handler when shutting down the\n\t    system. Instead of ignoring the event, erlsrv will now\n\t    invoke the stop action. Likewise, the Erlang emulator\n\t    (and it's po drivers) must not quit upon reception of the\n\t    CTRL_SHUTDOWN_EVENT event in th console control handler.\n\t    Thanks to Jan Kloetzke</p>\n          <p>\n\t    Own Id: OTP-10228</p>\n        </item>\n        <item>\n          <p>\n\t    Fix dtrace bug in file rename operation.</p>\n          <p>\n\t    Own Id: OTP-10234</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in memory management of driver port data locks\n\t    (PDL). In some cases PDLs could be deallocated before\n\t    <c>ready_async</c> or <c>async_free</c> callback was\n\t    called.</p>\n          <p>\n\t    Own Id: OTP-10249</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Add port and suspend options to lock-counter\n\t    profiling. (Thanks to Rick Reed)</p>\n          <p>\n\t    Own Id: OTP-10051</p>\n        </item>\n        <item>\n          <p>\n\t    Latency when using the active_once option in gen_tcp\n\t    communication is reduced.</p>\n          <p>\n\t    Own Id: OTP-10055 Aux Id: sto139 </p>\n        </item>\n        <item>\n\t    <p>Remove bit8 option support from inet</p>\n          <p>\n\t    Own Id: OTP-10056</p>\n        </item>\n        <item>\n          <p>\n\t    The OS Pid of a port program is now available by calling\n\t    erlang:port_info(Port,os_pid), Thanks to Matthias Lang\n\t    for the original patch.</p>\n          <p>\n\t    Own Id: OTP-10057</p>\n        </item>\n        <item>\n          <p>\n\t    Fix openpty usage in run_erl. </p>\n          <p>\n\t    Reopening a slave file descriptor which was closed\n\t    earlier could lead to a misbehaving connection. This has\n\t    now been remedied.</p>\n          <p>\n\t    Own Id: OTP-10076</p>\n        </item>\n        <item>\n          <p>\n\t    Remove all code, documentation, options and diagnostic\n\t    functions which were related to the experimental hybrid\n\t    heap implementation.</p>\n          <p>\n\t    Own Id: OTP-10105</p>\n        </item>\n        <item>\n          <p>\n\t    Optimizations of memory deallocations.</p>\n          <p>\n\t    Own Id: OTP-10162 Aux Id: OTP-7775 </p>\n        </item>\n        <item>\n          <p>\n\t    Optimization of process locking.</p>\n          <p>\n\t    Own Id: OTP-10163</p>\n        </item>\n        <item>\n          <p>\n\t    Added a xcomp example file for powerpc-dso-linux-gnu</p>\n          <p>\n\t    Own Id: OTP-10198</p>\n        </item>\n        <item>\n          <p>\n\t    Detect when middle endian doubles are used by a platform\n\t    and account for it when decoding floats. (Thanks to Mike\n\t    Sperber)</p>\n          <p>\n\t    Own Id: OTP-10209</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    On Linux systems using heart (erl -heart) and a\n\t    HEAR_BEAT_TIMEOUT less than default, heart could fire\n\t    even though Erlang was running fine after approx 298 to\n\t    497 days (depending on kernel config). This was due to\n\t    the behaviour of the times(2) system call. Usage of\n\t    times(2) is now replaced with clock_gettime(2) and the\n\t    CLOCK_MONOTONIC clock, resulting in a more stable\n\t    solution. The Erlang VM itself has used clock_gettime(2)\n\t    on linux since before R12B, so this only affects the\n\t    heart program.</p>\n          <p>\n\t    Own Id: OTP-10111 Aux Id: seq12075 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    If threads support for the runtime system had been\n\t    disabled at compile time (<c>--disable-threads</c> had\n\t    been passed to <c>configure</c>), and the <c>+A</c>\n\t    command line argument of <c>erl</c> was passed when\n\t    starting the runtime system, <seealso\n\t    marker=\"erl_driver#driver_system_info\">driver_system_info()</seealso>\n\t    erroneously claimed that the runtime system had async\n\t    threads even though it had not.</p>\n          <p>\n\t    Due to this bug the file driver did not split tasks into\n\t    smaller chunks, but instead completed the whole task at\n\t    once, i.e., the scheduler got occupied with I/O for a\n\t    longer time than intended.</p>\n          <p>\n\t    Own Id: OTP-10059</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    A proposal for a new scheduler wakeup strategy has been\n\t    implemented. For more information see the documentation\n\t    of the <seealso marker=\"erl#+sws\">+sws</seealso> command\n\t    line argument of <c>erl</c>.</p>\n          <p>\n\t    Own Id: OTP-10033 Aux Id: Seq12025 </p>\n        </item>\n        <item>\n          <p>\n\t    A switch for configuration of busy wait length for\n\t    scheduler threads has been added. For more information\n\t    see the documentation of the <seealso\n\t    marker=\"erl#+sbwt\">+sbwt</seealso> command line argument\n\t    of <c>erl</c>.</p>\n          <p>\n\t    Own Id: OTP-10044 Aux Id: Seq11976 </p>\n        </item>\n        <item>\n          <p>\n\t    The extra memory barriers introduced by bug-fix OTP-9281\n\t    were unnecessarily used also on tables without the\n\t    <c>write_concurrency</c> option enabled. This could\n\t    unnecessarily degrade performance of ETS tables without\n\t    <c>write_concurrency</c> on some hardware (e.g. PowerPC)\n\t    while not effecting performance at all on other hardware\n\t    (e.g. x86/x86_64).</p>\n          <p>\n\t    OTP-9281 (R14B03): ETS tables using the\n\t    <c>write_concurrency</c> option could potentially get\n\t    into an internally inconsistent state.</p>\n          <p>\n\t    Own Id: OTP-10048 Aux Id: OTP-9281 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p><c>erlang:system_profile</c> errorneous profiled the\n\t    profiler process when observing runnable processes. This\n\t    has been corrected. </p>\n          <p>\n\t    Own Id: OTP-9849</p>\n        </item>\n        <item>\n\t    <p>Calling trace_info/2 asking for information about a\n\t    function that had native could could crash the run-time\n\t    system.</p>\n          <p>\n\t    Own Id: OTP-9886</p>\n        </item>\n        <item>\n          <p>\n\t    reduce smp locking time range in erts_garbage_collect\n\t    (thanks to Jovi Zhang)</p>\n          <p>\n\t    Own Id: OTP-9912</p>\n        </item>\n        <item>\n          <p>\n\t    Fix typo in supervisor behaviour doc (Thanks to Ricardo\n\t    Catalinas Jim\u00e9nez)</p>\n          <p>\n\t    Own Id: OTP-9924</p>\n        </item>\n        <item>\n          <p>\n\t    Correct spelling of registered (Thanks to Richard\n\t    Carlsson)</p>\n          <p>\n\t    Own Id: OTP-9925</p>\n        </item>\n        <item>\n          <p>\n\t    erts: Remove unused variable (Thanks to Jovi Zhang)</p>\n          <p>\n\t    Own Id: OTP-9926</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in ETS with <c>compressed</c> option and\n\t    insertion of term containing large integers (>2G) on\n\t    64-bit machines. Seen to cause emulator crash. (Thanks to\n\t    Diego Llarrull for excellent bug report)</p>\n          <p>\n\t    Own Id: OTP-9932</p>\n        </item>\n        <item>\n          <p>\n\t    Handle Linux OS where /sys/devices/system/node is only\n\t    readable by root. Fallback to /sys/devices/system/cpu for\n\t    topology info.</p>\n          <p>\n\t    Own Id: OTP-9978</p>\n        </item>\n        <item>\n\t    <p> When an escript ends now all printout to standard\n\t    output and standard error gets out on the terminal. This\n\t    bug has been corrected by changing the behaviour of\n\t    erlang:halt/0,1, which should fix the same problem for\n\t    other escript-like applications, i.e that data stored in\n\t    the output port driver buffers got lost when printing on\n\t    a TTY and exiting through erlang:halt/0,1. </p>\n\t    <p> The BIF:s erlang:halt/0,1 has gotten improved\n\t    semantics and there is a new BIF erlang:halt/2 to\n\t    accomplish something like the old semantics. See the\n\t    documentation. </p>\n\t    <p> Now erlang:halt/0 and erlang:halt/1 with an integer\n\t    argument will close all ports and allow all pending async\n\t    threads operations to finish before exiting the emulator.\n\t    Previously erlang:halt/0 and erlang:halt(0) would just\n\t    wait for pending async threads operations but not close\n\t    ports. And erlang:halt/1 with a non-zero integer argument\n\t    would not even wait for pending async threads operations.\n\t    </p>\n\t    <p> To roughly the old behaviour, to not wait for ports\n\t    and async threads operations when you exit the emulator,\n\t    you use erlang:halt/2 with an integer first argument and\n\t    an option list containing {flush,false} as the second\n\t    argument. Note that now is flushing not dependant of the\n\t    exit code, and you can not only flush async threads\n\t    operations which we deemed as a strange behaviour anyway.\n\t    </p>\n\t    <p>Also, erlang:halt/1,2 has gotten a new feature: If the\n\t    first argument is the atom 'abort' the emulator is\n\t    aborted producing a core dump, if the operating system so\n\t    allows. </p>\n          <p>\n\t    Own Id: OTP-9985</p>\n        </item>\n        <item>\n          <p>\n\t    Added check to inet driver to avoid building on operating\n\t    systems that do not yet have IPv6 compatible socket API.\n\t    (Thanks to Peer Stritzinger)</p>\n          <p>\n\t    Own Id: OTP-9996</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug when the number of CPUs actually found is lower\n\t    than the configured value. (Thanks to Benjamin\n\t    Herrenschmidt)</p>\n          <p>\n\t    Own Id: OTP-10004</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system without SMP support and without thread\n\t    support erroneously busy waited when no work was present.\n\t    This bug first appeared in <c>erts-5.9</c>.</p>\n          <p>\n\t    Own Id: OTP-10019</p>\n        </item>\n        <item>\n          <p>\n\t    Various typographical errors corrected in documentation\n\t    for common_test, driver, erl_driver and windows\n\t    installation instructions. (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-10037</p>\n        </item>\n        <item>\n          <p>\n\t    Fix memory leak caused by race on exiting process</p>\n          <p>\n\t    Own Id: OTP-10041</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Add <c>erlang:statistics(scheduler_wall_time)</c> to\n\t    ensure correct determination of scheduler utilization.\n\t    Measuring scheduler utilization is strongly preferred\n\t    over CPU utilization, since CPU utilization gives very\n\t    poor indications of actual scheduler/vm usage.</p>\n          <p>\n\t    Own Id: OTP-9858</p>\n        </item>\n        <item>\n          <p>\n\t    ERTS internal API improvements. In some cases the amount\n\t    of atomic read operations needed have been reduced due to\n\t    this.</p>\n          <p>\n\t    Own Id: OTP-9922</p>\n        </item>\n        <item>\n          <p>\n\t    The DTrace source patch from Scott Lystig Fritchie is\n\t    integrated in the source tree. Using an emulator with\n\t    dtrace probe is still not supported for production use,\n\t    but may be a valuable debugging tool. Configure with\n\t    --with-dynamic-trace=dtrace (or\n\t    --with-dynamic-trace=systemtap) to create a build with\n\t    dtrace probes enabled. See runtime_tools for\n\t    documentation and examples.</p>\n          <p>\n\t    Own Id: OTP-10017</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    enif_make_copy may invalidate enif_inspect_binary.</p>\n          <p>\n\t    Own Id: OTP-9828</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9.0.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A feature test for the <c>lwsync</c> instruction\n\t    performed on PowerPC hardware at runtime system startup\n\t    got into an eternal loop if the instruction was not\n\t    supported. This bug was introduced in erts-5.9/OTP-R15B.</p>\n          <p>\n\t    Own Id: OTP-9843</p>\n        </item>\n        <item>\n          <p>\n\t    I/O events could potentially be delayed for ever when\n\t    enabling kernel-poll on a non-SMP runtime system\n\t    executing on Solaris. When also combined with\n\t    async-threads the runtime system hung before completing\n\t    the boot phase. This bug was introduced in\n\t    erts-5.9/OTP-R15B.</p>\n          <p>\n\t    Own Id: OTP-9844</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.9</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Honor option <c>packet_size</c> for http packet parsing\n\t    by both TCP socket and <c>erlang:decode_packet</c>. This\n\t    gives the ability to accept HTTP headers larger than the\n\t    default setting, but also avoid DoS attacks by accepting\n\t    lines only up to whatever length you wish to allow. For\n\t    consistency, packet type <c>line</c> also honor option\n\t    <c>packet_size</c>. (Thanks to Steve Vinoski)</p>\n          <p>\n\t    Own Id: OTP-9389</p>\n        </item>\n        <item>\n\t    <p> A few contracts in the <c>lists</c> module have been\n\t    corrected. </p>\n          <p>\n\t    Own Id: OTP-9616</p>\n        </item>\n        <item>\n          <p>\n\t    The Unicode noncharacter code points 16#FFFE and 16#FFFE\n\t    were not allowed to be encoded or decoded using the\n\t    <c>unicode</c> module or bit syntax. That was\n\t    inconsistent with the other noncharacters 16#FDD0 to\n\t    16#FDEF that could be encoded/decoded. To resolve the\n\t    inconsistency, 16#FFFE and 16#FFFE can now be encoded and\n\t    decoded. (Thanks to Alisdair Sullivan.)</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9624</p>\n        </item>\n        <item>\n          <p>\n\t    Make epp search directory of current file first when\n\t    including another file This completes a partial fix in\n\t    R11 that only worked for include_lib(). (Thanks to\n\t    Richard Carlsson)</p>\n          <p>\n\t    Own Id: OTP-9645</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed memory leak in\n\t    <c>enif_inspect_io_list_as_binary</c> when applied on a\n\t    process independent environment.</p>\n          <p>\n\t    Own Id: OTP-9668</p>\n        </item>\n        <item>\n\t    <p>The number of beam catches allowed in code are no\n\t    longer statically defined and will grow according to its\n\t    need.</p>\n          <p>\n\t    Own Id: OTP-9692</p>\n        </item>\n        <item>\n          <p>\n\t    Add missing parenthesis in heart doc.</p>\n          <p>\n\t    Add missing spaces in the Reference Manual distributed\n\t    section.</p>\n          <p>\n\t    In the HTML version of the doc those spaces are necessary\n\t    to separate those words.</p>\n          <p>\n\t    Own Id: OTP-9693</p>\n        </item>\n        <item>\n          <p>\n\t    Fixes module erlang doc style: option description (Thanks\n\t    to Ricardo Catalinas Jim\u00e9nez)</p>\n          <p>\n\t    Own Id: OTP-9697</p>\n        </item>\n        <item>\n          <p>\n\t    Specifying a scope to binary:match/3 when using multiple\n\t    searchstrings resulted in faulty return values. This is\n\t    now corrected.</p>\n          <p>\n\t    Own Id: OTP-9701</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system crashed if more than one thread tried\n\t    to exit the runtime system at the same time.</p>\n          <p>\n\t    Own Id: OTP-9705</p>\n        </item>\n        <item>\n          <p>\n\t    Fix documentation for erlang:process_flag/2</p>\n          <p>\n\t    For the subsection about process_flag(save_calls, N)\n\t    there's an unrelated paragraph about process priorities\n\t    which was copied from the preceding subsection regarding\n\t    process_flag(priority, Level). (Thanks to Filipe David\n\t    Manana)</p>\n          <p>\n\t    Own Id: OTP-9714</p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>erlang:system_flag(schedulers_online, N)</c>\n\t    and/or <c>erlang:system_flag(multi_scheduling,\n\t    block|unblock)</c> could cause internal data used by this\n\t    functionality to get into an inconsistent state. When\n\t    this happened various problems occurred. This bug was\n\t    quite hard to trigger, so hopefully no-one has been\n\t    effected by it.</p>\n          <p>\n\t    A spinlock used by the run-queue management sometimes got\n\t    heavily contended. This code has now been rewritten, and\n\t    the spinlock has been removed.</p>\n          <p>\n\t    Own Id: OTP-9727</p>\n        </item>\n        <item>\n          <p>\n\t    Use libdlpi to get physical address (Thanks to Trond\n\t    Norbye)</p>\n          <p>\n\t    Own Id: OTP-9818</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p> An option list argument can now be passed to\n\t    <c>file:read_file_info/2, file:read_link_info/2</c> and\n\t    <c>file:write_file_info/3</c> and set time type\n\t    information in the call. Valid options are <c>{time,\n\t    local}, {time, universal}</c> and <c>{time, posix}</c>.\n\t    In the case of <c>posix</c> time no conversions are made\n\t    which makes the operation a bit faster. </p>\n          <p>\n\t    Own Id: OTP-7687</p>\n        </item>\n        <item>\n\t    <p>A number of memory allocation optimizations have been\n\t    implemented. Most optimizations reduce contention caused\n\t    by synchronization between threads during allocation and\n\t    deallocation of memory. Most notably:</p> <list> <item>\n\t    Synchronization of memory management in scheduler\n\t    specific allocator instances has been rewritten to use\n\t    lock-free synchronization. </item> <item> Synchronization\n\t    of memory management in scheduler specific pre-allocators\n\t    has been rewritten to use lock-free synchronization.\n\t    </item> <item> The 'mseg_alloc' memory segment allocator\n\t    now use scheduler specific instances instead of one\n\t    instance. Apart from reducing contention this also\n\t    ensures that memory allocators always create memory\n\t    segments on the local NUMA node on a NUMA system. </item>\n\t    </list>\n          <p>\n\t    Own Id: OTP-7775</p>\n        </item>\n        <item>\n          <p>\n\t    The ethread atomic memory operations API used by the\n\t    runtime system has been extended and improved.</p>\n          <p>\n\t    The ethread library now also performs runtime tests for\n\t    presence of hardware features, such as for example SSE2\n\t    instructions, instead of requiring this to be determined\n\t    at compile time.</p>\n          <p>\n\t    All uses of the old deprecated atomic API in the runtime\n\t    system have been replaced with the use of the new atomic\n\t    API. In a lot of places this change imply a relaxation of\n\t    memory barriers used.</p>\n          <p>\n\t    Own Id: OTP-9014</p>\n        </item>\n        <item>\n\t    <p>gen_sctp:open/0-2 may now return\n\t    {error,eprotonosupport} if SCTP is not supported</p>\n\t    <p>gen_sctp:peeloff/1 has been implemented and creates a\n\t    one-to-one socket which also are supported now</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9239</p>\n        </item>\n        <item>\n          <p>\n\t    Sendfile has been added to the file module's API.\n\t    sendfile/2 is used to read data from a file and send it\n\t    to a tcp socket using a zero copying mechanism if\n\t    available on that OS.</p>\n          <p>\n\t    Thanks to Tuncer Ayaz and Steve Vinovski for original\n\t    implementation</p>\n          <p>\n\t    Own Id: OTP-9240</p>\n        </item>\n        <item>\n          <p>\n\t    enif_get_reverse_list function added to nif API. This\n\t    function should be used to reverse small lists which are\n\t    deep within other structures making it impractical to do\n\t    the reverse in Erlang.</p>\n          <p>\n\t    Own Id: OTP-9392</p>\n        </item>\n        <item>\n          <p>\n\t    The deprecated concat_binary/1 BIF has been removed. Use\n\t    <c>list_to_binary</c> or <c>iolist_to_binary/1</c>\n\t    instead.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9421</p>\n        </item>\n        <item>\n\t    <p>Erlang/OTP can now be built using parallel make if you\n\t    limit the number of jobs, for instance using '<c>make\n\t    -j6</c>' or '<c>make -j10</c>'. '<c>make -j</c>' does not\n\t    work at the moment because of some missing\n\t    dependencies.</p>\n          <p>\n\t    Own Id: OTP-9451</p>\n        </item>\n        <item>\n\t    <p>Line number and filename information are now included\n\t    in exception backtraces as a fourth element in the MFA\n\t    tuple. The information will be pretty-printed by the\n\t    shell and used by <c>common_test</c> to provide better\n\t    indication of where a test case.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9468</p>\n        </item>\n        <item>\n\t    <p>All binary constants used to be handled as heap\n\t    binaries (i.e. the entire binary would be copied when\n\t    sent to another process). Binary constants larger than 64\n\t    bytes are now refc binaries (i.e. the actual data in the\n\t    binary will not be copied when sent to another\n\t    process).</p>\n          <p>\n\t    Own Id: OTP-9486</p>\n        </item>\n        <item>\n          <p>\n\t    If a float and an integer is compared, the integer is\n\t    only converted to a float if the float datatype can\n\t    contain it. Otherwise the float is converted to an\n\t    integer.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9497</p>\n        </item>\n        <item>\n          <p>\n\t    Add NIF function enif_is_number</p>\n          <p>\n\t    This function allows for easily determining if a term\n\t    represents or not a number (integer, float, small or\n\t    big).(Thanks to Filipe David Manana)</p>\n          <p>\n\t    Own Id: OTP-9629</p>\n        </item>\n        <item>\n          <p>\n\t    The ERTS internal system block functionality has been\n\t    replaced by new functionality for blocking the system.\n\t    The old system block functionality had contention issues\n\t    and complexity issues. The new functionality piggy-backs\n\t    on thread progress tracking functionality needed by newly\n\t    introduced lock-free synchronization in the runtime\n\t    system. When the functionality for blocking the system\n\t    isn't used, there is more or less no overhead at all.\n\t    This since the functionality for tracking thread progress\n\t    is there and needed anyway.</p>\n          <p>\n\t    Own Id: OTP-9631</p>\n        </item>\n        <item>\n          <p>\n\t    An ERTS internal, generic, many to one, lock-free queue\n\t    for communication between threads has been introduced.\n\t    The many to one scenario is very common in ERTS, so it\n\t    can be used in a lot of places in the future. Currently\n\t    it is used by scheduling of certain jobs, and the async\n\t    thread pool, but more uses are planned for the future.</p>\n          <p>\n\t    Drivers using the driver_async functionality are not\n\t    automatically locked to the system anymore, and can be\n\t    unloaded as any dynamically linked in driver.</p>\n          <p>\n\t    Scheduling of ready async jobs is now also interleaved in\n\t    between other jobs. Previously all ready async jobs were\n\t    performed at once.</p>\n          <p>\n\t    Own Id: OTP-9632</p>\n        </item>\n        <item>\n          <p>\n\t    Tuple funs (a two-element tuple with a module name and a\n\t    function) are now officially deprecated and will be\n\t    removed in R16. Use '<c>fun M:F/A</c>' instead. To make\n\t    you aware that your system uses tuple funs, the very\n\t    first time a tuple fun is applied, a warning will be sent\n\t    to the error logger.</p>\n          <p>\n\t    Own Id: OTP-9649</p>\n        </item>\n        <item>\n          <p>\n\t    Changed the internal BIF calling convention. Will make\n\t    simpler faster code and allow BIFs with an arbitrary\n\t    arity.</p>\n          <p>\n\t    Own Id: OTP-9662</p>\n        </item>\n        <item>\n          <p>\n\t    Windows native critical sections are now used internally\n\t    in the runtime system on Windows as mutex implementation.\n\t    This since they perform better under extreme contention\n\t    than our own implementation.</p>\n          <p>\n\t    Own Id: OTP-9671</p>\n        </item>\n        <item>\n          <p>\n\t    Convert some erl_nif macros into inline functions. Allow\n\t    for better compile time type checking. (Thanks to Tuncer\n\t    Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9675</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>+scl</c> command line flag has been added. It can\n\t    be used for disabling compaction of scheduler load. For\n\t    more information see the <c>erl(1)</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-9695</p>\n        </item>\n        <item>\n\t    <p>The build system has been updated so that Erlang/OTP\n\t    can be built on Mac OS X Lion systems without a GCC\n\t    compiler. The INSTALL guide has been updated with\n\t    instructions on how to install a GCC compiler and build\n\t    Erlang/OTP with it, in order to get a run-time system\n\t    with better performance.</p>\n          <p>\n\t    Own Id: OTP-9712</p>\n        </item>\n        <item>\n          <p>\n\t    When loading a module, the system use to run on a single\n\t    scheduler during the entire loading process. This has\n\t    been changed to only take down the system just before\n\t    inserting the loaded code into the system tables,\n\t    resulting in a much shorter disruption if a module is\n\t    loaded in a busy system. (Suggested by Bob Ippolito.)</p>\n          <p>\n\t    Own Id: OTP-9720</p>\n        </item>\n        <item>\n          <p>\n\t    Possible to run HiPE without floating point exceptions\n\t    (FPE). Useful on platforms that lack reliable FPE. Slower\n\t    float operations compared to HiPE with FPE.</p>\n          <p>\n\t    Own Id: OTP-9724</p>\n        </item>\n        <item>\n          <p>\n\t    As of ERTS version 5.9 (OTP-R15B) the runtime system will\n\t    by default <em>not</em> bind schedulers to logical\n\t    processors.</p>\n          <p>\n\t    If the Erlang runtime system is the only operating system\n\t    process that binds threads to logical processors, this\n\t    improves the performance of the runtime system. However,\n\t    if other operating system processes (as for example\n\t    another Erlang runtime system) also bind threads to\n\t    logical processors, there might be a performance penalty\n\t    instead. In some cases this performance penalty might be\n\t    severe. Due to this, we change the default so that the\n\t    user must make an active decision in order to bind\n\t    schedulers.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9726</p>\n        </item>\n        <item>\n          <p>\n\t    The use of <c>erlang:system_flag(scheduler_bind_type,\n\t    _)</c> and <c>erlang:system_flag(cpu_topology, _)</c>\n\t    have been deprecated and scheduled for removal in\n\t    erts-5.10/OTP-R16. For more information see the\n\t    documentation of <c>erlang:system_flag/2</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9749</p>\n        </item>\n        <item>\n          <p>\n\t    An ancient workaround for a Windows bug was removed from\n\t    the open_port code, open_port({spawn,...}...) is now\n\t    faster. Thanks to Daniel Goertzen.</p>\n          <p>\n\t    Own Id: OTP-9766</p>\n        </item>\n        <item>\n          <p>\n\t    The use of deprecated 32bit time_t on 32bit Windows is\n\t    removed.</p>\n          <p>\n\t    Own Id: OTP-9767</p>\n        </item>\n        <item>\n          <p>\n\t    The NIF <c>reload</c> mechanism is deprecated. Do not use\n\t    it as an upgrade method for live production systems. It\n\t    might be removed in future releases. It can still serve\n\t    as a development feature but a warning message will be\n\t    logged each time it is used.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9771</p>\n        </item>\n        <item>\n\t    <p>The driver interface has been changed to enable 64-bit\n\t    aware drivers. Most importantly the return types for\n\t    ErlDrvEntry callbacks 'call' and 'control' has ben\n\t    enlarged which require drivers to be changed or they will\n\t    cause emulator crashes. See <seealso\n\t    marker=\"erl_driver#rewrites_for_64_bits\"> Rewrites for\n\t    64-bit driver interface </seealso> in the driver manual.\n\t    </p>\n\t    <p>Due to this driver <seealso\n\t    marker=\"erl_driver#version_management\">version\n\t    management</seealso> is now mandatory. A driver that is\n\t    not written with version management or a driver that was\n\t    compiled with the wrong major version will be not be\n\t    loaded by the emulator.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-9795</p>\n        </item>\n        <item>\n          <p>\n\t    Eliminate use of deprecated regexp module</p>\n          <p>\n\t    Own Id: OTP-9810</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Several bugs concerning constant binary constructions\n\t    such as &lt;&lt;0:4294967295&gt;&gt; have been corrected.\n\t    Depending on the actual size of the binary and the type\n\t    of run-time system (32-bit, halfword, 64-bit), such\n\t    expression could either crash the run-time system or make\n\t    the loader refuse loading of the module.</p>\n          <p>\n\t    Own Id: OTP-9284</p>\n        </item>\n        <item>\n          <p>\n\t    The Erlsrv utility failed to stop the erlang machine if\n\t    no StopAction was defined when the service was stopped.\n\t    This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-9344</p>\n        </item>\n        <item>\n          <p>\n\t    Due to a bug in glibc the runtime system could abort\n\t    while trying to destroy a mutex. A fix for this was\n\t    introduced in R14B02. This fix did, however, not solve\n\t    the problem. The runtime system will now issue a warning\n\t    instead of aborting.</p>\n          <p>\n\t    Own Id: OTP-9373 Aux Id: OTP-9009 </p>\n        </item>\n        <item>\n          <p>\n\t    Replace atom in DRV macro in prim_file with string</p>\n          <p>\n\t    An experimental version of Dialyzer discovered that the\n\t    atom that replaced the DRV macro in prim_file ends up in\n\t    calls to erlang:open_port({spawn, Driver}, Portopts) as\n\t    the Driver argument. The documentation states that this\n\t    call requires a string there.</p>\n          <p>\n\t    This change is also consistent with the one introduced in\n\t    commit 0f03b1e9d2bef3bc830c31a369261af4c5234727 by Kostis\n\t    Sagonas.</p>\n          <p>\n\t    Own Id: OTP-9377</p>\n        </item>\n        <item>\n          <p>\n\t    Fix typos in the epmd documentation (Thanks to Holger\n\t    Wei\u00df )</p>\n          <p>\n\t    Own Id: OTP-9387</p>\n        </item>\n        <item>\n          <p>\n\t    Fix faulty integer terms created by NIF API from 64-bit\n\t    integers on halfword emulator. (Thanks to Paolo Negri and\n\t    Paul Davis)</p>\n          <p>\n\t    Own Id: OTP-9394</p>\n        </item>\n        <item>\n          <p>\n\t    Fix <c>epmd</c> crash on vxworks caused by faulty\n\t    argument to select() system call.</p>\n          <p>\n\t    Own Id: OTP-9427 Aux Id: seq11855 </p>\n        </item>\n        <item>\n          <p>\n\t    The ets:test_ms function could in rare cases truncate the\n\t    error messages. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-9435</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug related to hibernate and HiPE (clear\n\t    F_HIBERNATE_SCHED flag)</p>\n          <p>\n\t    F_HIBERNATE_SCHED flag that was introduced in\n\t    b7ecdcd1ae9e11b8f75e must be cleared in hipe_mode_switch\n\t    as well. Otherwise, processes running HiPE code that\n\t    hibernate, wake up and then trap into a BIF will not be\n\t    rescheduled.(Thanks to Paul Guyot)</p>\n          <p>\n\t    Own Id: OTP-9452</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in FreeBSD topology detection code (Thanks to\n\t    Paul Guyot)</p>\n          <p>\n\t    Own Id: OTP-9453</p>\n        </item>\n        <item>\n          <p>\n\t    Fix use of logical operator &amp;&amp; with constant\n\t    operand instead of bitwise &amp; (Thanks to Cristian\n\t    Greco)</p>\n          <p>\n\t    Own Id: OTP-9454</p>\n        </item>\n        <item>\n          <p>\n\t    inet: error if fd does not match socket domain</p>\n          <p>\n\t    If an IPv4 fd is opened as an IPv6 socket, unexpected\n\t    behaviour can occur. For example, if an IPv4 UDP socket\n\t    is opened and passed into Erlang as an IPv6 socket, the\n\t    first 3 bytes (corresponding to 1 byte representing the\n\t    protocol family, 2 bytes set to the port) are stripped\n\t    from the payload. The cause of the UDP payload truncation\n\t    happens in inet_drv.c:packet_inet_input when a call to\n\t    inet_get_address fails silently because the family is set\n\t    to PF_INET6 but the buffer len is the size of an IPv4\n\t    struct sockaddr_in.</p>\n          <p>\n\t    (Thanks to Andrew Tunnell-Jones for finding the bug and\n\t    the test case!)</p>\n          <p>\n\t    Own Id: OTP-9455</p>\n        </item>\n        <item>\n          <p>\n\t    erts: use a union to avoid strict aliasing issues</p>\n          <p>\n\t    Use a union for pointer type conversion to avoid compiler\n\t    warnings about strict-aliasing violations with gcc-4.1.\n\t    gcc >= 4.2 does not emit the warning. erts: adapt\n\t    matrix_nif to R14 erl_nif API changes (Thanks To Tuncer\n\t    Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9487</p>\n        </item>\n        <item>\n          <p>\n\t    fix 64-bit issues in the garbage collection (Thanks to\n\t    Richard Carlsson)</p>\n          <p>\n\t    Own Id: OTP-9488</p>\n        </item>\n        <item>\n          <p>\n\t    epmd: fix compiler warnings</p>\n          <p>\n\t    Suppress compiler warnings about ignored return values.\n\t    (Thanks to Michael Santos )</p>\n          <p>\n\t    Own Id: OTP-9500</p>\n        </item>\n        <item>\n          <p>\n\t    Fix non-existing function (erlang:disconnect/1) in\n\t    distributed reference manual (Thanks to Fabian Kr\u00f3l)</p>\n          <p>\n\t    Own Id: OTP-9504</p>\n        </item>\n        <item>\n          <p>\n\t    Document fdatasync -lrt requirement (SunOS &lt;= 5.10)\n\t    (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9512</p>\n        </item>\n        <item>\n          <p>\n\t    Let epmd ignore empty ERL_EPMD_ADDRESS</p>\n          <p>\n\t    If the environment variable ERL_EPMD_ADDRESS is set to\n\t    the empty string, empd now behaves like it does by\n\t    default when ERL_EPMD_ADDRESS is unset. That is, in this\n\t    case, epmd now listens on all available interfaces\n\t    instead of using only the loopback interface, which\n\t    happened because epmd added the loopback address to the\n\t    (in this case empty) list of addresses specified via\n\t    ERL_EPMD_ADDRESS.</p>\n          <p>\n\t    Also, epmd now ignores ERL_EPMD_ADDRESS if it contains\n\t    only separator characters (comma and space).</p>\n          <p>\n\t    The same applies to epmd's -address option.(Thanks to\n\t    Holger Wei\u00df)</p>\n          <p>\n\t    Own Id: OTP-9525</p>\n        </item>\n        <item>\n          <p>\n\t    Remove dead code in erl_compile (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9527</p>\n        </item>\n        <item>\n          <p>\n\t    Add erlang:external_size/2 BIF</p>\n          <p>\n\t    This BIF's second parameter is a list of options.\n\t    Currently the only allowed option is {minor_version,\n\t    Version} where version is either 0 (default) or 1.\n\t    (Thanks to Filipe David Manana )</p>\n          <p>\n\t    Own Id: OTP-9528</p>\n        </item>\n        <item>\n          <p>\n\t    Fix enif_compare on 64bits machines</p>\n          <p>\n\t    In 64bits machines the Sint type has a size of 8 bytes,\n\t    while on 32bits machines it has a 4 bytes size.\n\t    enif_compare was ignoring this and therefore returning\n\t    incorrect values when the result of the CMP function\n\t    (which returns a Sint value) doesn't fit in 4 bytes.\n\t    (Thanks to Filipe David Manana)</p>\n          <p>\n\t    Own Id: OTP-9533</p>\n        </item>\n        <item>\n          <p>\n\t    Implement or fix -Werror option</p>\n          <p>\n\t    If -Werror is enabled and there are warnings no output\n\t    file is written. Also make sure that error/warning\n\t    reporting is consistent. (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9536</p>\n        </item>\n        <item>\n\t    <p>In some rare cases we did not have a run queue when\n\t    scheduling misc ops. This is now fixed.</p>\n          <p>\n\t    Own Id: OTP-9537</p>\n        </item>\n        <item>\n\t    <p>Remove misc. compiler warnings</p>\n          <p>\n\t    Own Id: OTP-9542</p>\n        </item>\n        <item>\n          <p>\n\t    Two bugs in gen_sctp has been corrected: getopts/setopts\n\t    hence also send could only be called from socket owner,\n\t    and options 'linger', 'rcvbuf' and 'sndbuf' was read from\n\t    wrong protocol layer hence read wrong values by getopts.</p>\n          <p>\n\t    Own Id: OTP-9544</p>\n        </item>\n        <item>\n          <p>\n\t    Erlang/OTP can now be built on MacOS X Lion.</p>\n          <p>\n\t    Own Id: OTP-9547</p>\n        </item>\n        <item>\n\t    <p> XML files have been corrected. </p>\n          <p>\n\t    Own Id: OTP-9550 Aux Id: OTP-9541 </p>\n        </item>\n        <item>\n          <p>\n\t    Fix potential errors inspired by running cppcheck(1)\n\t    (Thanks to Christian von Roques)</p>\n          <p>\n\t    Own Id: OTP-9557</p>\n        </item>\n        <item>\n\t    <p>When auxiliary work was enqueued on a scheduler, the\n\t    wakeup of the scheduler in order to handle this work\n\t    could be lost. Wakeups in order to handle ordinary work\n\t    were not effected by this bug. The bug only effected\n\t    runtime systems with SMP support as follows:</p> <list>\n\t    <item>Deallocation of some ETS data structures could be\n\t    delayed.</item> <item>On Linux systems not using the NPTL\n\t    thread library (typically ancient systems with kernel\n\t    versions prior to 2.6) and Windows systems, the <c>{Port,\n\t    {exit_status, Status}}</c> message from a terminating\n\t    port program could be delayed. That is, it only effected\n\t    port programs which had been started by passing\n\t    <c>exit_status</c> as an option to\n\t    <c>open_port/2</c>.</item> </list>\n          <p>\n\t    Own Id: OTP-9567</p>\n        </item>\n        <item>\n          <p>\n\t    Handle rare race in the crypto key server functionality</p>\n          <p>\n\t    Own Id: OTP-9586</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p> Types and specifications have been added. </p>\n          <p>\n\t    Own Id: OTP-9356</p>\n        </item>\n        <item>\n          <p>\n\t    New allocator strategy \"address order first fit\". May\n\t    ease the emptying of memory carriers and thereby real\n\t    release of memory back to the OS.</p>\n          <p>\n\t    Own Id: OTP-9424</p>\n        </item>\n        <item>\n          <p>\n\t    The new <c>erlang:check_old_code/1</c> BIF checks whether\n\t    a module has old code.</p>\n          <p>\n\t    Own Id: OTP-9495</p>\n        </item>\n        <item>\n\t    <p> Update documentation and specifications of some of\n\t    the zlib functions. </p>\n          <p>\n\t    Own Id: OTP-9506</p>\n        </item>\n        <item>\n          <p>\n\t    Detect the available CPUs on IRIX</p>\n          <p>\n\t    Add support for querying the number of configured and\n\t    online processors on SGI systems running IRIX.(Thanks to\n\t    Holger Wei\u00df)</p>\n          <p>\n\t    Own Id: OTP-9531</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Fix binary and iolist overflow problems. Typically\n\t    problems arose in length calculation where the result\n\t    would exceed (1 bsl 32 - 1).</p>\n          <p>\n\t    Own Id: OTP-9118</p>\n        </item>\n        <item>\n          <p>\n\t    Using the old erlang shell (i.e. erl instead on werl) on\n\t    windows and doing several init:restart's would eventually\n\t    hang the VM. That is no longer the case.</p>\n          <p>\n\t    Own Id: OTP-9139</p>\n        </item>\n        <item>\n          <p>\n\t    Removed recursive C code when printing Erlang terms to\n\t    buffers, avoiding stack overflows that could cause VM to\n\t    crash.</p>\n          <p>\n\t    Own Id: OTP-9140</p>\n        </item>\n        <item>\n          <p>\n\t    The send_timeout option in gen_tcp did not work properly\n\t    in active mode or with {active,once} options. This is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-9145</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed various typos across the documentation (Thanks to\n\t    Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9154</p>\n        </item>\n        <item>\n\t    <p>Remove duplicate stack entries which could occur after\n\t    calling certain BIFs.</p>\n          <p>\n\t    Own Id: OTP-9163</p>\n        </item>\n        <item>\n          <p>\n\t    A race when starting two nodes simultaneously using\n\t    run_erl has been removed.</p>\n          <p>\n\t    Own Id: OTP-9164</p>\n        </item>\n        <item>\n          <p>\n\t    Add documentation on .erlang processing back again\n\t    (Thanks to Gabor Liptak)</p>\n          <p>\n\t    Own Id: OTP-9189</p>\n        </item>\n        <item>\n          <p>\n\t    Remove gratuitous paren in driver_entry(Thanks to Tuncer\n\t    Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9192</p>\n        </item>\n        <item>\n          <p>\n\t    Fix some wrong pointer dereferences (Thanks to Cristian\n\t    Greco)</p>\n          <p>\n\t    Own Id: OTP-9194</p>\n        </item>\n        <item>\n          <p>\n\t    erts: Remove unused variables (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9205</p>\n        </item>\n        <item>\n          <p>\n\t    The documentation for <c>init:get_args/0</c> has been\n\t    removed. <c>init:get_args/0</c> itself was deprecated in\n\t    R9C and removed in R12B. (Thanks to Eric Pailleau.)</p>\n          <p>\n\t    Own Id: OTP-9209</p>\n        </item>\n        <item>\n          <p>\n\t    Allow user to specify the IP address epmd binds to</p>\n          <p>\n\t    The IP address(es) epmd binds to can now be specified by\n\t    the user, either via epmd's new \"-address\" option or (if\n\t    that's not used) by setting the environment variable\n\t    ERL_EPMD_ADDRESS. Multiple addresses may be specified\n\t    using a comma-separated list. If the loopback address is\n\t    not in this list, it will be added implicitly, so that\n\t    the daemon can be queried by an interactive epmd\n\t    process.(Thanks to Holger Wei\u00df)</p>\n          <p>\n\t    Own Id: OTP-9213</p>\n        </item>\n        <item>\n          <p>\n\t    epmd: include host address in local access check</p>\n          <p>\n\t    In FreeBSD jails, the source and destination address of\n\t    connections to localhost are changed to be the IP address\n\t    of the jail. Consider connections from the host's IP\n\t    address to itself (e.g., the source and destination\n\t    address match) to be local for the access control checks.\n\t    (Thanks to Michal Santos and Tom at diogunix.com)</p>\n          <p>\n\t    Own Id: OTP-9214</p>\n        </item>\n        <item>\n          <p>\n\t    Fix list returned by net_kernel:epmd_module</p>\n          <p>\n\t    Function epmd_module of net_kernel returns a list instead\n\t    of an atom, when the epmd_module-flag is used. (Thanks to\n\t    Markus Knofe)</p>\n          <p>\n\t    Own Id: OTP-9215</p>\n        </item>\n        <item>\n          <p>\n\t    Fix epmd's dbg_perror() output</p>\n          <p>\n\t    The dbg_perror() function now hands the current errno\n\t    value over to dbg_gen_printf(). This fixes the problem\n\t    that errno had been reset to zero by the time it was used\n\t    (to print the corresponding error message) in the\n\t    dbg_gen_printf() function. (Thanks to Holger Wei\u00df)</p>\n          <p>\n\t    Own Id: OTP-9223</p>\n        </item>\n        <item>\n          <p>\n\t    heart: remove garbage appended to heart command</p>\n          <p>\n\t    heart:get_cmd/0 is documented to return an empty string\n\t    if the command is cleared. get_cmd/0 returns 2 extra\n\t    bytes: 1 byte for the trailing null, 1 byte from the op\n\t    (the op is an unsigned char and 2 bytes are allocated for\n\t    it in the returned buffer). (Thanks to Michael Santos)</p>\n          <p>\n\t    Own Id: OTP-9224</p>\n        </item>\n        <item>\n          <p>\n\t    file: fix hang reading compressed files</p>\n          <p>\n\t    The gzio driver goes into an infinite loop when reading\n\t    past the end of a compressed file. Reported-By: Alex\n\t    Morarash (Thanks to Michael Santos)</p>\n          <p>\n\t    Own Id: OTP-9245</p>\n        </item>\n        <item>\n\t    <p>Eliminate alias warnings from gcc 4.5.2</p>\n          <p>\n\t    Own Id: OTP-9250</p>\n        </item>\n        <item>\n          <p>\n\t    Unsigned integer may overflow in error message (Thanks to\n\t    Michael Santos)</p>\n          <p>\n\t    Own Id: OTP-9251</p>\n        </item>\n        <item>\n          <p>\n\t    Driver names should be strings, not atoms</p>\n          <p>\n\t    Own Id: OTP-9253</p>\n        </item>\n        <item>\n          <p>\n\t    driver_entry: Remove gratuitous paren and fix typo\n\t    (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9254</p>\n        </item>\n        <item>\n          <p>\n\t    Fix format specifiers in erl_exit messages</p>\n          <p>\n\t    Fix an error message by using an unsigned integer\n\t    specifier as seen in a tweet by @metabrew: #erlang VM\n\t    crashed with \"no next heap size found: -2090496108,\n\t    offset 0\", suddenly allocated all available RAM</p>\n          <p>\n\t    Also correct mis-typed string formats in bif.c.(Thanks to\n\t    Michael Santos)</p>\n          <p>\n\t    Own Id: OTP-9262</p>\n        </item>\n        <item>\n          <p>\n\t    net_drv: remove unused tcp request id inet_drv: remove\n\t    gratuitous assignment (Thanks to Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-9263</p>\n        </item>\n        <item>\n          <p>\n\t    Teach run_erl RUN_ERL_DISABLE_FLOWCNTRL for disabling\n\t    flow control</p>\n          <p>\n\t    Flow control can cause unwanted behaviour of the beam\n\t    process, if accidentally hit Ctrl-S (instead of Ctrl-D to\n\t    detach) the entire beam may be blocked.</p>\n          <p>\n\t    Fix this problem by making it possible to turn off flow\n\t    control by setting the environment variable\n\t    RUN_ERL_DISABLE_FLOWCNTRL. (Thanks to Jonas Faklkevik)</p>\n          <p>\n\t    Own Id: OTP-9270</p>\n        </item>\n        <item>\n\t    <p>The following bugs due to missing memory barriers have\n\t    been fixed:</p> <list> <item><p> ETS tables using the\n\t    <c>write_concurrency</c> option could potentially get\n\t    into an internally inconsistent state. </p></item>\n\t    <item><p> ETS tables using the <c>ordered_set</c> option\n\t    could potentially get into an internally inconsistent\n\t    state. </p></item> <item><p> A number of memory barriers\n\t    have been added when building with the\n\t    <c>libatomic_ops</c> API (i.e. when passing\n\t    <c>--with-libatomic_ops=PATH</c> to <c>configure</c>) and\n\t    the tilera atomics API (i.e. when building for the tilera\n\t    chip). Note that these bugs were due to erroneous usage\n\t    of the APIs, and not in the implementations of the APIs.\n\t    When using these APIs the following bugs where\n\t    present:</p> <list> <item><p> The BIF\n\t    <c>erlang:ports/0</c> could return an erroneous result.\n\t    </p></item> <item><p> A thread blocking other threads\n\t    during code loading, or setup of tracing could\n\t    potentially read invalid data. </p></item> <item><p>\n\t    Fixation of ETS tables could potentially get into an\n\t    internally inconsistent state. </p></item> </list>\n\t    </item> </list>\n          <p>\n\t    Own Id: OTP-9281</p>\n        </item>\n        <item>\n          <p>\n\t    Fix halfword bug for ETS ordered_set when doing\n\t    <c>select/match</c> with partly bound key.</p>\n          <p>\n\t    Own Id: OTP-9292</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug in <c>code:is_module_native</c> that caused crash\n\t    for deleted modules.</p>\n          <p>\n\t    Own Id: OTP-9298</p>\n        </item>\n        <item>\n          <p>\n\t    Calling <c>driver_async_cancel()</c> could cause a\n\t    scheduler thread to enter an eternal loop doing no useful\n\t    work. (Thanks to Anders Ramsell)</p>\n          <p>\n\t    Own Id: OTP-9302</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    New <c>enif_is_exception function</c> to allow NIFs to\n\t    determine whether an <c>ERL_NIF_TERM</c> represents an\n\t    exception. (Thanks to Steve Vinoski)</p>\n          <p>\n\t    Own Id: OTP-9150</p>\n        </item>\n        <item>\n          <p>\n\t    A process being garbage collected by another process\n\t    could be scheduled on another scheduler. This prevented\n\t    this scheduler from doing any useful work until the\n\t    garbage collection was done. This either occurred due to\n\t    a explicit call to the <c>garbage_collect/1</c> BIF, or\n\t    due to a garbage collection part of code loading. A\n\t    process being garbage collected like this will now not be\n\t    scheduled until the garbage collection has completed.</p>\n          <p>\n\t    Own Id: OTP-9211</p>\n        </item>\n        <item>\n          <p>\n\t    Remove unnecessary validation copy in\n\t    prim_file:drv_command/3 (Thanks to Tony Rogvall)</p>\n          <p>\n\t    Own Id: OTP-9276</p>\n        </item>\n        <item>\n          <p>\n\t    Symbolic link handling on windows have been slightly\n\t    updated to map error conditions more consequently and\n\t    correctly read directory links created outside of the\n\t    Erlang environment.</p>\n          <p>\n\t    Own Id: OTP-9279</p>\n        </item>\n        <item>\n          <p>\n\t    Due to standard library DLL mismatches between versions\n\t    of OpenSSL and Erlang/OTP, OpenSSL is now linked\n\t    statically to the crypto driver on Windows. This fixes\n\t    problems starting crypto when running Erlang as a service\n\t    on all Windows versions.</p>\n          <p>\n\t    Own Id: OTP-9280</p>\n        </item>\n        <item>\n\t    <p>Halfword emulator memory handling improvements:</p>\n\t    <list> <item><p>Much more of internal memory structures\n\t    have been made able to use \"high\" memory and are no\n\t    longer restricted to the 4Gb limit that still applies for\n\t    all process heap data.</p> </item> <item><p>Fixed faulty\n\t    values from <c>erlang:memory()</c> caused by 32-bit\n\t    counter overflow.</p> </item> <item><p>New counter\n\t    <c>low</c> in <c>erlang:memory()</c> that sums up all\n\t    memory restricted by 4Gb limit.</p> </item> </list>\n          <p>\n\t    Own Id: OTP-9291 Aux Id: seq11841 </p>\n        </item>\n        <item>\n          <p>\n\t    The value set in the undocumented and unsupported\n\t    ERL_version_FLAGS (e.g. ERL_R14B03_FLAGS) environment\n\t    variable can now be overridden by the command line\n\t    (similar to ERL_AFLAGS).</p>\n          <p>\n\t    Own Id: OTP-9297</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.3.2</title>\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    Fix halfword emulator bug in <c>ets:select_delete</c> for\n\t    <c>ordered_set</c> that caused emulator to crash.</p>\n          <p>\n\t    Own Id: OTP-9258 Aux Id: seq11836 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Ets table type ordered_set could order large integer keys\n\t    wrongly on pure 64bit platforms. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-9181</p>\n        </item>\n        <item>\n          <p>\n\t    The status of a process was unnecessarily set to waiting\n\t    before a process was enqueued in a run queue. This bug\n\t    was harmless up until OTP-R14B01. In OTP-R14B02\n\t    <c>erlang:hibernate/3</c> was fixed (OTP-9125). After the\n\t    introduction of OTP-9125, the previously harmless process\n\t    status bug sometimes caused erroneous badarg exceptions\n\t    from <c>process_info()</c>.</p>\n          <p>\n\t    OTP-9125 also introduced a thread unsafe access to the\n\t    status field of a process which now also have been fixed.</p>\n          <p>\n\t    *** INCOMPATIBILITY with noxs ***</p>\n          <p>\n\t    Own Id: OTP-9197</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The scroll wheel now scrolls the werl window on Windows.</p>\n          <p>\n\t    Own Id: OTP-8985</p>\n        </item>\n        <item>\n          <p>\n\t    Some malformed distribution messages could cause VM to\n\t    crash, this is now corrected.</p>\n          <p>\n\t    Own Id: OTP-8993</p>\n        </item>\n        <item>\n          <p>\n\t    The OS function getifaddrs() can return NULL in some\n\t    address fields for e.g PPP and tunnel devices which\n\t    caused the emulator to segfault. This bug has now been\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-8996</p>\n        </item>\n        <item>\n          <p>\n\t    The expression &lt;&lt;A:0&gt;&gt; would always produce\n\t    an empty binary, even if <c>A</c> was not an integer.\n\t    Corrected to cause a <c>badarg</c> exception if the type\n\t    of <c>A</c> is invalid. (Thanks to Zvi.)</p>\n          <p>\n\t    Own Id: OTP-8997</p>\n        </item>\n        <item>\n          <p>\n\t    A bug that potentially could cause an emulator crash when\n\t    deleting an ETS-table has been fixed. A resource leak\n\t    when hitting the maximum amount of ETS-tables allowed has\n\t    also been fixed.</p>\n          <p>\n\t    Own Id: OTP-8999</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in the <c>exit/2</c> BIF could potentially cause an\n\t    emulator crash.</p>\n          <p>\n\t    Own Id: OTP-9005</p>\n        </item>\n        <item>\n          <p>\n\t    Due to a bug in glibc the runtime system could abort\n\t    while trying to destroy a mutex. The runtime system will\n\t    now issue a warning instead of aborting.</p>\n          <p>\n\t    Own Id: OTP-9009</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in epmd could create strange behaviour when\n\t    listen() calls failed. This is now corrected thanks to\n\t    Steve Vinoski.</p>\n          <p>\n\t    Own Id: OTP-9024</p>\n        </item>\n        <item>\n\t    <p>When setting file_info the win32_driver will now\n\t    correctly set access and modified time. Previously these\n\t    entities were swapped.</p>\n          <p>\n\t    Own Id: OTP-9046</p>\n        </item>\n        <item>\n          <p>\n\t    Setting scheduler bind type to <c>unbound</c> failed if\n\t    binding of schedulers wasn't supported, or if CPU\n\t    topology wasn't present. This even though the\n\t    documentation stated that it is possible to set the bind\n\t    type to <c>unbound</c>.</p>\n          <p>\n\t    Own Id: OTP-9056 Aux Id: Seq11779 </p>\n        </item>\n        <item>\n\t    <p>Two problems were fixed in crash dump: The time left\n\t    for timers are now shown as unsigned integers and the\n\t    contents of ordered_set ETS tables is no longer\n\t    included.</p>\n          <p>\n\t    Own Id: OTP-9057</p>\n        </item>\n        <item>\n          <p>\n\t    The VM could fail to set IP_TOS and SO_PRIORITY in\n\t    certain situations, either because sockets were supplied\n\t    as open file descriptors, or because SO_PRIORITY by\n\t    default was set higher than the user can explicitly set\n\t    it to. Those situations are now handled.</p>\n          <p>\n\t    Own Id: OTP-9069</p>\n        </item>\n        <item>\n          <p>\n\t    Wx on MacOS X generated complains on stderr about certain\n\t    cocoa functions not being called from the \"Main thread\".\n\t    This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-9081</p>\n        </item>\n        <item>\n          <p>\n\t    Fix a couple typos in driver_entry(3) (thanks to Tuncer\n\t    Ayaz).</p>\n          <p>\n\t    Own Id: OTP-9085</p>\n        </item>\n        <item>\n          <p>\n\t    Mention that \"-detached\" implies \"-noinput\"</p>\n          <p>\n\t    Clarify that specifying \"-noinput\" is unnecessary if the\n\t    \"-detached\" flag is given. (thanks to Holger Wei\u00df)</p>\n          <p>\n\t    Own Id: OTP-9086</p>\n        </item>\n        <item>\n          <p>\n\t    A potential problem (found by code inspection) when\n\t    calling a fun whose code was not loaded has been fixed.</p>\n          <p>\n\t    Own Id: OTP-9095</p>\n        </item>\n        <item>\n          <p>\n\t    The emulator could get into a state where it didn't check\n\t    for I/O.</p>\n          <p>\n\t    Own Id: OTP-9105 Aux Id: Seq11798 </p>\n        </item>\n        <item>\n          <p>\n\t    Attempting to create binaries exceeding 2Gb (using for\n\t    example <c>term_to_binary/1</c>) would crash the emulator\n\t    with an attempt to allocate huge amounts of memory.\n\t    (Thanks to Jon Meredith.)</p>\n          <p>\n\t    Own Id: OTP-9117</p>\n        </item>\n        <item>\n          <p>\n\t    Fix erlang:hibernate/3 on HiPE enabled emulator (Thanks\n\t    to Paul Guyot)</p>\n          <p>\n\t    Own Id: OTP-9125</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>From this release, the previously experimental\n\t    halfword emulator is now official. It can be enabled by\n\t    giving the <c>--enable-halfword-emulator</c> option to\n\t    the <c>configure</c> script.</p>\n\t    <p>The halfword emulator is a 64-bit application, but\n\t    uses halfwords (32-bit words) for all data in Erlang\n\t    processes, therefore using less memory and being faster\n\t    than the standard 64-bit emulator. The total size of all\n\t    BEAM code and all process data for all processes is\n\t    limited to 4Gb, but ETS tables and off-heap binaries are\n\t    only limited by the amount of available memory.</p>\n          <p>\n\t    Own Id: OTP-8941</p>\n        </item>\n        <item>\n          <p>\n\t    32-bit atomic memory operations have been introduced\n\t    internally in the run time system, and are now used where\n\t    appropriate. There were previously only atomic memory\n\t    operations of word size available. The 32-bit atomic\n\t    memory operations slightly reduce memory consumption, and\n\t    slightly improve performance on 64-bit runtime systems.</p>\n          <p>\n\t    Own Id: OTP-8974</p>\n        </item>\n        <item>\n          <p>\n\t    Performance enhancements for looking up timer-entries and\n\t    removing timers from the wheel.</p>\n          <p>\n\t    Own Id: OTP-8990</p>\n        </item>\n        <item>\n          <p>\n\t    Write accesses to ETS tables have been optimized by\n\t    reducing the amount of atomic memory operations needed\n\t    during a write access.</p>\n          <p>\n\t    Own Id: OTP-9000</p>\n        </item>\n        <item>\n          <p>\n\t    Strange C coding in the VM made the -D_FORTIFY_SOURCE\n\t    option to gcc-4.5 react badly. The code is now cleaned up\n\t    so that it's accepted by gcc-4.5.</p>\n          <p>\n\t    Own Id: OTP-9025</p>\n        </item>\n        <item>\n          <p>\n\t    The memory footprint for loaded code has been somewhat\n\t    reduced (especially in the 64-bit BEAM machine).</p>\n          <p>\n\t    Own Id: OTP-9030</p>\n        </item>\n        <item>\n          <p>\n\t    The maximum number of allowed arguments for an Erlang\n\t    function has been lowered from 256 to 255, so that the\n\t    number of arguments can now fit in a byte.</p>\n          <p>\n\t    Own Id: OTP-9049</p>\n        </item>\n        <item>\n          <p>\n\t    Dependency generation for Makefiles has been added to the\n\t    compiler and erlc. See the manual pages for\n\t    <c>compile</c> and <c>erlc</c>. (Thanks to Jean-Sebastien\n\t    Pedron.)</p>\n          <p>\n\t    Own Id: OTP-9065</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p> Fix format_man_pages so it handles all man sections\n\t    and remove warnings/errors in various man pages. </p>\n          <p>\n\t    Own Id: OTP-8600</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>configure</c> command line argument <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP\">--enable-ethread-pre-pentium4-compatibility</seealso>\n\t    had no effect. This option is now also automatically\n\t    enabled if required on the build machine.</p>\n          <p>\n\t    Own Id: OTP-8847</p>\n        </item>\n        <item>\n          <p>\n\t    Windows 2003 and Windows XP pre SP3 would sometimes not\n\t    start the Erlang R14B VM at all due to a bug in the cpu\n\t    topology detection. The bug affects Windows only, no\n\t    other platform is even remotely affected. The bug is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-8876</p>\n        </item>\n        <item>\n          <p>\n\t    The HiPE run-time in the 64-bit emulator could do a\n\t    64-bit write to a 32-bit struct field. It happened to be\n\t    harmless on Intel/AMD processors. Corrected. (Thanks to\n\t    Mikael Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-8877</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in <seealso\n\t    marker=\"erl_driver#erl_drv_tsd_get\">erl_drv_tsd_get()</seealso>\n\t    and <seealso\n\t    marker=\"erl_nif#enif_tsd_get\">enif_tsd_get()</seealso>\n\t    could cause an emulator crash. These functions are\n\t    currently not used in OTP. That is, the crash only occur\n\t    on systems with user implemented NIF libraries, or\n\t    drivers that use one of these functions.</p>\n          <p>\n\t    Own Id: OTP-8889</p>\n        </item>\n        <item>\n          <p>\n\t    Calling <c>erlang:system_info({cpu_topology,\n\t    CpuTopologyType})</c> with another <c>CpuTopologyType</c>\n\t    element than one of the documented atoms <c>defined</c>,\n\t    <c>detected</c>, or <c>used</c> caused an emulator crash.\n\t    (Thanks to Paul Guyot)</p>\n          <p>\n\t    Own Id: OTP-8914</p>\n        </item>\n        <item>\n          <p>\n\t    The ERTS internal rwlock implementation could get into an\n\t    inconsistent state. This bug was very seldom triggered,\n\t    but could be during heavy contention. The bug was\n\t    introduced in R14B (erts-5.8.1).</p>\n          <p>\n\t    The bug was most likely to be triggered when using the\n\t    <c>read_concurrency</c> option on an ETS table that was\n\t    frequently accessed from multiple processes doing lots of\n\t    writes and reads. That is, in a situation where you\n\t    typically don't want to use the <c>read_concurrency</c>\n\t    option in the first place.</p>\n          <p>\n\t    Own Id: OTP-8925 Aux Id: OTP-8544 </p>\n        </item>\n        <item>\n          <p>\n\t    Tracing to port could cause an emulator crash when\n\t    unloading the trace driver.</p>\n          <p>\n\t    Own Id: OTP-8932</p>\n        </item>\n        <item>\n          <p>\n\t    Removed use of CancelIoEx on Windows that had been shown\n\t    to cause problems with some drivers.</p>\n          <p>\n\t    Own Id: OTP-8937</p>\n        </item>\n        <item>\n          <p>\n\t    The fallback implementation used when no native atomic\n\t    implementation was found did not compile. (Thanks to\n\t    Patrick Baggett, and Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-8944</p>\n        </item>\n        <item>\n          <p>\n\t    Some integer values used during load balancing could\n\t    under rare circumstances wrap causing a load unbalance\n\t    between schedulers.</p>\n          <p>\n\t    Own Id: OTP-8950</p>\n        </item>\n        <item>\n          <p>\n\t    The windows VM now correctly handles appending to large\n\t    files (> 4GB).</p>\n          <p>\n\t    Own Id: OTP-8958</p>\n        </item>\n        <item>\n          <p>\n\t    Name resolving of IPv6 addresses has been implemented for\n\t    Windows versions that support it. The use of ancient\n\t    resolver flags (AI_V4MAPPED | AI_ADDRCONFIG) to the\n\t    getaddrinfo() function has been removed since e.g FreeBSD\n\t    regard mapped IPv4 addresses to be a security problem and\n\t    the semantics of the address configured flag is\n\t    uncertain.</p>\n          <p>\n\t    Own Id: OTP-8969</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The help texts produced by the <c>configure</c> scripts\n\t    in the top directory and in the erts directory have been\n\t    aligned and cleaned up.</p>\n          <p>\n\t    Own Id: OTP-8859</p>\n        </item>\n        <item>\n          <p>\n\t    When the runtime system had fewer schedulers than logical\n\t    processors, the system could get an unnecessarily large\n\t    amount reader groups.</p>\n          <p>\n\t    Own Id: OTP-8861</p>\n        </item>\n        <item>\n          <p>\n\t    <c>run_rel</c> has been updated to support Solaris's\n\t    /dev/ptmx device and to load the necessary STREAMS\n\t    modules so that <c>to_erl</c> can provide terminal echo\n\t    of keyboard input. (Thanks to Ryan Tilder.)</p>\n          <p>\n\t    Own Id: OTP-8878</p>\n        </item>\n        <item>\n          <p>\n\t    The Erlang VM now supports Unicode filenames. The feature\n\t    is turned on by default on systems where Unicode\n\t    filenames are mandatory (Windows and MacOSX), but can be\n\t    enabled on other systems with the '+fnu' emulator option.\n\t    Enabling the Unicode filename feature on systems where it\n\t    is not default is however considered experimental and not\n\t    to be used for production. Together with the Unicode file\n\t    name support, the concept of \"raw filenames\" is\n\t    introduced, which means filenames provided without\n\t    implicit unicode encoding translation. Raw filenames are\n\t    provided as binaries, not lists. For further information,\n\t    see stdlib users guide and the chapter about using\n\t    Unicode in Erlang. Also see the file module manual page.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8887</p>\n        </item>\n        <item>\n\t    <p>Buffer overflows have been prevented in <c>erlc</c>,\n\t    <c>dialyzer</c>, <c>typer</c>, <c>run_test</c>,\n\t    <c>heart</c>, <c>escript</c>, and <c>erlexec</c>.</p>\n\t    (Thanks to Michael Santos.)\n          <p>\n\t    Own Id: OTP-8892</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system is now less eager to suspend processes\n\t    sending messages over the distribution. The default value\n\t    of the distribution buffer busy limit has also been\n\t    increased from 128 KB to 1 MB. This in order to improve\n\t    throughput.</p>\n          <p>\n\t    Own Id: OTP-8901</p>\n        </item>\n        <item>\n          <p>\n\t    The distribution buffer busy limit can now be configured\n\t    at system startup. For more information see the\n\t    documentation of the <c>erl</c> <seealso\n\t    marker=\"erl#+zdbbl\">+zdbbl</seealso> command line flag.\n\t    (Thanks to Scott Lystig Fritchie)</p>\n          <p>\n\t    Own Id: OTP-8912</p>\n        </item>\n        <item>\n          <p>\n\t    The inet driver internal buffer stack implementation has\n\t    been rewritten in order to reduce lock contention.</p>\n          <p>\n\t    Own Id: OTP-8916</p>\n        </item>\n        <item>\n          <p>\n\t    New ETS option <c>compressed</c>, to enable a more\n\t    compact storage format at the expence of heavier table\n\t    operations. For test and evaluation, <c>erl +ec</c> can\n\t    be used to force compression on all ETS tables.</p>\n          <p>\n\t    Own Id: OTP-8922 Aux Id: seq11658 </p>\n        </item>\n        <item>\n          <p>\n\t    There is now a new function inet:getifaddrs/0 modeled\n\t    after C library function getifaddrs() on BSD and LInux\n\t    that reports existing interfaces and their addresses on\n\t    the host. This replaces the undocumented and unsupported\n\t    inet:getiflist/0 and inet:ifget/2.</p>\n          <p>\n\t    Own Id: OTP-8926</p>\n        </item>\n        <item>\n          <p>\n\t    Support for detection of CPU topology and binding of\n\t    schedulers on FreeBSD 8 have been added. (Thanks to Paul\n\t    Guyot)</p>\n          <p>\n\t    Own Id: OTP-8939</p>\n        </item>\n        <item>\n          <p>\n\t    Several bugs related to hibernate/3 and HiPE have been\n\t    corrected. (Thanks to Paul Guyot.)</p>\n          <p>\n\t    Own Id: OTP-8952</p>\n        </item>\n        <item>\n          <p>\n\t    Support for soft and hard links on Windows versions and\n\t    filesystems that support them is added.</p>\n          <p>\n\t    Own Id: OTP-8955</p>\n        </item>\n        <item>\n          <p>\n\t    The win32 virtual machine is now linked large address\n\t    aware. his allows the Erlang VM to use up to 3 gigs of\n\t    address space on Windows instead of the default of 2\n\t    gigs.</p>\n          <p>\n\t    Own Id: OTP-8956</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.1.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p> Fix that the documentation top index generator can\n\t    handle an Ericsson internal application group. </p>\n          <p>\n\t    Own Id: OTP-8875</p>\n        </item>\n        <item>\n\t    <p>In embedded mode, on_load handlers that called\n\t    <c>code:priv_dir/1</c> or other functions in <c>code</c>\n\t    would hang the system. Since the <c>crypto</c>\n\t    application now contains an on_loader handler that calls\n\t    <c>code:priv_dir/1</c>, including the <c>crypto</c>\n\t    application in the boot file would prevent the system\n\t    from starting.</p>\n\t    <p>Also extended the <c>-init_debug</c> option to print\n\t    information about on_load handlers being run to\n\t    facilitate debugging.</p>\n          <p>\n\t    Own Id: OTP-8902 Aux Id: seq11703 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Windows 2003 and Windows XP pre SP3 would sometimes not\n\t    start the Erlang R14B VM at all due to a bug in the cpu\n\t    topology detection. The bug affects Windows only, no\n\t    other platform is even remotely affected. The bug is now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-8876</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Very small floating point numbers generated errors when\n\t    converting from list to float in some versions of the VM,\n\t    this is now corrected so that i.e.\n\t    list_to_float(\"1.0e-324\"). returns 0.0 in all versions of\n\t    Erlang.</p>\n          <p>\n\t    Own Id: OTP-7178</p>\n        </item>\n        <item>\n          <p>\n\t    Windows Vista and Windows 7 file system virtualization,\n\t    which makes \"old style\" windows programs execute in a\n\t    file system sandbox, was previously unintentionally\n\t    turned on for the Erlang VM. This is now corrected so\n\t    that i.e. writes to C:\\Program Files\\. without\n\t    administrator privileges will fail.</p>\n          <p>\n\t    Own Id: OTP-7405</p>\n        </item>\n        <item>\n          <p>\n\t    Fix faulty 64-bit integer term output from drivers. Large\n\t    64-bits integers did not generate correct bignums and\n\t    could even cause emulator crash. Only affects drivers\n\t    using ERL_DRV_INT64 or ERL_DRV_UINT64, introduced in\n\t    R13B03.</p>\n          <p>\n\t    Own Id: OTP-8716</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed: inet:setopts(S, [{linger,{true,2}}]) returned\n\t    {error,einval} for SCTP sockets. The inet_drv had a bug\n\t    when checking the option size.</p>\n          <p>\n\t    Own Id: OTP-8726 Aux Id: seq11617 </p>\n        </item>\n        <item>\n\t    <p>Fix libm linking with --as-needed flag</p>\n          <p>\n\t    When building with \"--as-needed\" linker flags on Linux\n\t    the build will fail. This has now been fixed.</p>\n          <p>\n\t    (Thanks to Christian Faulhammer)</p>\n          <p>\n\t    Own Id: OTP-8728</p>\n        </item>\n        <item>\n          <p>\n\t    gen_udp:connect/3 was broken for SCTP enabled builds. It\n\t    did not detect remote end errors as it should.</p>\n          <p>\n\t    Own Id: OTP-8729</p>\n        </item>\n        <item>\n\t    <p>Reduce the risk of integer wrapping in bin vheap size\n\t    counting.</p> <p>The vheap size series will now use the\n\t    golden ratio instead of doubling and fibonacci\n\t    sequences.</p>\n          <p>\n\t    Own Id: OTP-8730</p>\n        </item>\n        <item>\n          <p>\n\t    ETS ordered_set containing <c>[]</c> as key could cause\n\t    strange thing to happen, like an infinite hanging\n\t    <c>ets:select</c>.</p>\n          <p>\n\t    Own Id: OTP-8732</p>\n        </item>\n        <item>\n\t    <p>reference() has been substituted for ref() in the\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-8733</p>\n        </item>\n        <item>\n          <p>\n\t    When a native compiled module called a not loaded\n\t    non-native compiled module that had an on_load function,\n\t    the export entries were trashed after code loading so on\n\t    the next call from the native compiled module to the\n\t    non-native compiled the emulator crashed. This bug has\n\t    now been fixed.</p>\n          <p>\n\t    Own Id: OTP-8736</p>\n        </item>\n        <item>\n          <p>\n\t    HiPE-enabled Erlang VMs running on BSD systems sometimes\n\t    generated messages like \"Yikes! erts_alloc() returned\n\t    misaligned address 0x8016a512c\". Fixed. (Thanks to Mikael\n\t    Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-8769</p>\n        </item>\n        <item>\n          <p>\n\t    A race condition in <c>erts_poll()</c> could cause delay\n\t    of poll for I/O.</p>\n          <p>\n\t    Own Id: OTP-8773</p>\n        </item>\n        <item>\n          <p>\n\t    Removed some potential vulnerabilities from the Erlang\n\t    Port Mapper Daemon (epmd) and straightened up access\n\t    control. Also removed hazardous interfaces allowing\n\t    anyone on a machine to forcefully unregister other nodes.\n\t    This means that the ei_unregister/erl_unregister\n\t    interfaces in erl_interface is rendered not only error\n\t    prone and mystifying as before, but totally ineffective.\n\t    The old behaviour of unchecked node unregistering can be\n\t    restored if needed, see epmd documentation for details.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8780</p>\n        </item>\n        <item>\n\t    <p> Building in a source tree without prebuilt platform\n\t    independent build results failed on the SSL examples\n\t    when: </p> <list><item> cross building. This has been\n\t    solved by not building the SSL examples during a cross\n\t    build. </item><item> building on Windows. </item></list>\n          <p>\n\t    Own Id: OTP-8791</p>\n        </item>\n        <item>\n          <p>\n\t    inet:getsockopt for SCTP sctp_default_send_param had a\n\t    bug to not initialize required feilds causing random\n\t    answers. It is now corrected.</p>\n          <p>\n\t    Own Id: OTP-8795 Aux Id: seq11655 </p>\n        </item>\n        <item>\n          <p>\n\t    The hipe_bifs:get_hrvtime/0 BIF now always returns a real\n\t    value even if the \"perfctr\" Linux kernel extension is not\n\t    available. It used to return a dummy value. (Thanks to\n\t    Mikael Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-8798</p>\n        </item>\n        <item>\n          <p>\n\t    Calling a native-code compiled module with an\n\t    <c>on_load</c> function could cause a crash. (Thanks to\n\t    Mikael Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-8799</p>\n        </item>\n        <item>\n\t    <p>The emulator could crash while writing a crash dump if\n\t    native-compiled modules had been loaded. (Thanks to Paul\n\t    Guyot.)</p>\n          <p>\n\t    Own Id: OTP-8801</p>\n        </item>\n        <item>\n          <p>\n\t    The garbage collector could crash if invoked from\n\t    native-compiled code after a call to a BIF. (Thanks to\n\t    Paul Guyot.)</p>\n          <p>\n\t    Own Id: OTP-8821</p>\n        </item>\n        <item>\n          <p>\n\t    A rare memory leak in binary:matches is removed</p>\n          <p>\n\t    Own Id: OTP-8823</p>\n        </item>\n        <item>\n\t    <p>For a socket in the HTTP packet mode, the return value\n\t    from <c>gen_tcp:recv/2,3</c> if there is an error in the\n\t    header will be <c>{ok,{http_error,String}}</c> instead of\n\t    <c>{error,{http_error,String}}</c> to be consistent with\n\t    <c>ssl:recv/2,3</c>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8831</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    ets:select_reverse/{1,2,3} are now documented.</p>\n          <p>\n\t    Own Id: OTP-7863</p>\n        </item>\n        <item>\n          <p>\n\t    External format of integers changed to make full use of\n\t    all 32 bits of INTEGER_EXT. This is a compatible change\n\t    as old code can read full 32-bit integers but only\n\t    produce 28-bit integers as INTEGER_EXT.</p>\n          <p>\n\t    Own Id: OTP-8540 Aux Id: seq11534 </p>\n        </item>\n        <item>\n          <p>\n\t    Large parts of the <c>ethread</c> library have been\n\t    rewritten. The <c>ethread</c> library is an Erlang\n\t    runtime system internal, portable thread library used by\n\t    the runtime system itself.</p>\n          <p>\n\t    Most notable improvement is a reader optimized rwlock\n\t    implementation which dramatically improve the performance\n\t    of read-lock/read-unlock operations on multi processor\n\t    systems by avoiding ping-ponging of the rwlock cache\n\t    lines. The reader optimized rwlock implementation is used\n\t    by miscellaneous rwlocks in the runtime system that are\n\t    known to be read-locked frequently, and can be enabled on\n\t    ETS tables by passing the <seealso\n\t    marker=\"stdlib:ets#new_2_read_concurrency\">{read_concurrency,\n\t    true}</seealso> option upon table creation. See the\n\t    documentation of <seealso\n\t    marker=\"stdlib:ets#new/2\">ets:new/2</seealso> for more\n\t    information. The reader optimized rwlock implementation\n\t    can be fine tuned when starting the runtime system. For\n\t    more information, see the documentation of the <seealso\n\t    marker=\"erts:erl#+rg\">+rg</seealso> command line argument\n\t    of <c>erl</c>.</p>\n          <p>\n\t    There is also a new implementation of rwlocks that is not\n\t    optimized for readers. Both implementations interleaves\n\t    readers and writers during contention as opposed to,\n\t    e.g., the NPTL (Linux) pthread rwlock implementation\n\t    which use either a reader or writer preferred strategy.\n\t    The reader/writer preferred strategy is problematic since\n\t    it starves threads doing the non-preferred operation.</p>\n          <p>\n\t    The new rwlock implementations in general performs better\n\t    in ERTS than common pthread implementations. However, in\n\t    some extremely heavily contended cases this is not the\n\t    case. Such heavy contention can more or less only appear\n\t    on ETS tables. This when multiple processes do very large\n\t    amounts of write locked operations simultaneously on the\n\t    same table. Such use of ETS is bad regardless of rwlock\n\t    implementation, will never scale, and is something we\n\t    strongly advise against.</p>\n          <p>\n\t    The new rwlock implementations depend on atomic\n\t    operations. If no native atomic implementation is found,\n\t    a fallback solution will be used. Using the fallback\n\t    implies a performance degradation. That is, it is more\n\t    important now than before to build OTP with a native\n\t    atomic implementation.</p>\n          <p>\n\t    The <c>ethread</c> library contains native atomic\n\t    implementations for, x86 (32 and 64 bit), powerpc (32\n\t    bit), sparc V9 (32 and 64 bit), and tilera (32 bit). On\n\t    other hardware gcc's builtin support for atomic memory\n\t    access will be used if such exists. If no such support is\n\t    found, <c>configure</c> will warn about no atomic\n\t    implementation available.</p>\n          <p>\n\t    The <c>ethread</c> library can now also use the\n\t    <c>libatomic_ops</c> library for atomic memory accesses.\n\t    This makes it possible for the Erlang runtime system to\n\t    utilize optimized native atomic operations on more\n\t    platforms than before. If <c>configure</c> warns about no\n\t    atomic implementation available, try using the\n\t    <c>libatomic_ops</c> library. Use the <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP\">--with-libatomic_ops=PATH</seealso>\n\t    <c>configure</c> command line argument when specifying\n\t    where the <c>libatomic_ops</c> installation is located.\n\t    The <c>libatomic_ops</c> library can be downloaded from:\n\t    <url\n\t    href=\"http://www.hpl.hp.com/research/linux/atomic_ops/\">http://www.hpl.hp.com/research/linux/atomic_ops/</url></p>\n          <p>\n\t    The changed API of the <c>ethread</c> library has also\n\t    caused modifications in the Erlang runtime system.\n\t    Preparations for the to come \"delayed deallocation\"\n\t    feature has also been done since it depends on the\n\t    <c>ethread</c> library.</p>\n          <p>\n\t    <em>Note</em>: When building for x86, the <c>ethread</c>\n\t    library will now use instructions that first appeared on\n\t    the pentium 4 processor. If you want the runtime system\n\t    to be compatible with older processors (back to 486) you\n\t    need to pass the <seealso\n\t    marker=\"doc/installation_guide:INSTALL#Advanced-configuration-and-build-of-ErlangOTP\">--enable-ethread-pre-pentium4-compatibility</seealso>\n\t    <c>configure</c> command line argument when configuring\n\t    the system.</p>\n          <p>\n\t    Own Id: OTP-8544</p>\n        </item>\n        <item>\n          <p>\n\t    erlang:localtime_to_universaltime({{2008, 8, 1}, {0, 0,\n\t    0}},true) when TZ=UTC now behaves consistently on all\n\t    Unix platforms.</p>\n          <p>\n\t    The problem fixed was originally reported by Paul Guyot\n\t    on erlang-bugs mailing list:</p>\n          <p>\n\t    http://www.erlang.org/pipermail/erlang-bugs/2008-November/001077.html</p>\n          <p>\n\t    Own Id: OTP-8580</p>\n        </item>\n        <item>\n          <p>\n\t    Optimization reducing memory consumption by two words per\n\t    ETS object.</p>\n          <p>\n\t    Own Id: OTP-8737</p>\n        </item>\n        <item>\n          <p>\n\t    Fixes for unsupported halfword-emulator</p>\n          <p>\n\t    Own Id: OTP-8745</p>\n        </item>\n        <item>\n          <p>\n\t    NIF 64-bit integer support; <c>enif_get_int64</c>,\n\t    <c>enif_get_uint64</c>, <c>enif_make_int64</c>,\n\t    <c>enif_make_uint64</c>.</p>\n          <p>\n\t    Own Id: OTP-8746</p>\n        </item>\n        <item>\n          <p>\n\t    Alignment of trailing data in messages has been adjusted.\n\t    This in order to be able to pass data of any type as\n\t    trailing data in the future.</p>\n          <p>\n\t    Own Id: OTP-8754</p>\n        </item>\n        <item>\n          <p>\n\t    The obsolete/driver.h header file has been removed. It\n\t    has been obsolete and deprecated since R8B. Drivers that\n\t    still include obsolete/driver.h must be updated to\n\t    include erl_driver.h.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8758</p>\n        </item>\n        <item>\n          <p>\n\t    Added erlang:system_info(build_type) which makes it\n\t    easier to chose drivers, NIF libraries, etc based on\n\t    build type of the runtime system.</p>\n          <p>\n\t    The NIF library for crypto can now be built for valgrind\n\t    and/or debug as separate NIF libraries that will be\n\t    automatically loaded if the runtime system has been built\n\t    with a matching build type.</p>\n          <p>\n\t    Own Id: OTP-8760</p>\n        </item>\n        <item>\n          <p>\n\t    Further lessened the memory requirements of ETS objects.</p>\n          <p>\n\t    Own Id: OTP-8762</p>\n        </item>\n        <item>\n\t    <p>The broken elib_malloc alternate memory allocator has\n\t    been removed. <c>erlang:system_info(elib_malloc)</c> will\n\t    always return <c>false</c>, and in R15,\n\t    <c>erlang:system_info(elib_malloc)</c> will fail with a\n\t    <c>badarg</c> exception.</p>\n          <p>\n\t    Own Id: OTP-8764</p>\n        </item>\n        <item>\n          <p>\n\t    Calling <c>erlang:system_info/1</c> with the new argument\n\t    <c>update_cpu_info</c> will make the runtime system\n\t    reread and update the internally stored CPU information.\n\t    For more information see the documentation of <seealso\n\t    marker=\"erlang#system_info_update_cpu_info\">erlang:system_info(update_cpu_info)</seealso>.</p>\n          <p>\n\t    The CPU topology is now automatically detected on Windows\n\t    systems with less than 33 logical processors. The runtime\n\t    system will now, also on Windows, by default bind\n\t    schedulers to logical processors using the\n\t    <c>default_bind</c> bind type if the amount of schedulers\n\t    is at least equal to the amount of logical processors\n\t    configured, binding of schedulers is supported, and a CPU\n\t    topology is available at startup.</p>\n          <p>\n\t    Own Id: OTP-8765</p>\n        </item>\n        <item>\n          <p>\n\t    The SMP ERTS internal child waiter thread used on Linux\n\t    system with NPTL was unintentionally disabled during\n\t    cross compilation rewrites (OTP-8323 in R13B03). It has\n\t    now been re-enabled. Enabling it again gives a slight\n\t    performance improvement.</p>\n          <p>\n\t    Own Id: OTP-8774</p>\n        </item>\n        <item>\n          <p>\n\t    <c>epmd</c> used to generate a message to the syslog when\n\t    it started up, which could be annoying. This has been\n\t    changed to only generate the message if the debug swith\n\t    is given. (Thanks to Michael Santos.)</p>\n          <p>\n\t    Own Id: OTP-8775</p>\n        </item>\n        <item>\n          <p>\n\t    The scheduler wakeup threshold is now possible to adjust\n\t    at system boot. For more information see the <seealso\n\t    marker=\"erl#+swt\">+swt</seealso> command line argument of\n\t    <c>erl</c>.</p>\n          <p>\n\t    Own Id: OTP-8811</p>\n        </item>\n        <item>\n          <p>\n\t    The undocumented function inet:ifget/2 has been improved\n\t    to return interface hardware address (MAC) on platforms\n\t    supporting getaddrinfo() (such as BSD unixes). Note it\n\t    still does not work on all platforms for example not\n\t    Windows nor Solaris, so the function is still\n\t    undocumented.</p>\n          <p>\n\t    Buffer overflow and field init bugs for inet:ifget/2 and\n\t    inet:getservbyname/2 has also been fixed.</p>\n          <p>\n\t    Thanks to Michael Santos.</p>\n          <p>\n\t    Own Id: OTP-8816</p>\n        </item>\n        <item>\n          <p>\n\t    Optimizations for MIPS when using gcc atomics. (Thanks to\n\t    Steve Vinoski)</p>\n          <p>\n\t    Own Id: OTP-8834</p>\n        </item>\n        <item>\n          <p>\n\t    Lock optimization in timer functionality.</p>\n          <p>\n\t    Own Id: OTP-8835</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n\t    <p>Fix epmd and build environment to build on VxWorks</p>\n          <p>\n\t    Own Id: OTP-8838</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.8</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Driver threads, such as async threads, using <seealso\n\t    marker=\"erl_driver#ErlDrvPDL\">port data locks</seealso>\n\t    peeked at the port status field without proper locking\n\t    when looking up the driver queue.</p>\n          <p>\n\t    Own Id: OTP-8475</p>\n        </item>\n        <item>\n          <p>\n\t    The use of <c>mmap()</c> was unnecessarily disabled when\n\t    cross compiling.</p>\n          <p>\n\t    The <c>configure</c> arguments <c>--with-ssl</c>, and\n\t    <c>--with-odbc</c> refused to accept libraries outside of\n\t    <c>$erl_xcomp_sysroot</c> when cross compiling for no\n\t    good reason.</p>\n          <p>\n\t    The <c>configure</c> argument <c>--with-odbc</c> didn't\n\t    handle the value <c>yes</c> correct.</p>\n          <p>\n\t    The <c>configure</c> arguments <c>--with-odbc</c>, and\n\t    <c>--without-odbc</c> have also been added to the\n\t    configure help.</p>\n          <p>\n\t    (Thanks to Steve Vinoski for reporting these issues)</p>\n          <p>\n\t    Own Id: OTP-8484</p>\n        </item>\n        <item>\n          <p>\n\t    A call to the BIF <c>unregister(RegName)</c> when a port\n\t    had the name <c>RegName</c> registered in the runtime\n\t    system without SMP support caused a runtime system crash.\n\t    (Thanks to Per Hedeland for the bugfix and test case.)</p>\n          <p>\n\t    Own Id: OTP-8487</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system crashed if fewer logical processors\n\t    were found than reported by <c>sysconf(\n\t    SC_NPROCESSORS_CONF)</c>.</p>\n          <p>\n\t    Own Id: OTP-8549</p>\n        </item>\n        <item>\n          <p>\n\t    Fix memory management bug causing crash of non-SMP\n\t    emulator with async threads enabled. The bug did first\n\t    appear in R13B03.</p>\n          <p>\n\t    Own Id: OTP-8591 Aux Id: seq11554 </p>\n        </item>\n        <item>\n          <p>\n\t    Port locks could be prematurely destroyed.</p>\n          <p>\n\t    Own Id: OTP-8612</p>\n        </item>\n        <item>\n\t    <p>The <c>empd</c> program could loop and consume 100%\n\t    CPU time if an unexpected error occurred in\n\t    <c>listen()</c> or <c>accept()</c>. Now <c>epmd</c> will\n\t    terminate if a non-recoverable error occurs. (Thanks to\n\t    Michael Santos.)</p>\n          <p>\n\t    Own Id: OTP-8618</p>\n        </item>\n        <item>\n          <p>\n\t    When kernel poll has been enabled, a livelock could in\n\t    rare circumstances occur. Problem reported by Chetan\n\t    Ahuja, fix by Mikael Pettersson.</p>\n          <p>\n\t    Own Id: OTP-8632</p>\n        </item>\n        <item>\n          <p>\n\t    Windows: Closing port of program that stalled without\n\t    reading all data could deadlock scheduler thread.</p>\n          <p>\n\t    Own Id: OTP-8641</p>\n        </item>\n        <item>\n          <p>\n\t    On some combination of Montavista Linux on Cavium Octeon\n\t    processors, some socket-related system calls returned\n\t    other numbers than -1 for errors. This caused a core dump\n\t    in inet_drv.c. Now the code works around this problem.</p>\n          <p>\n\t    Own Id: OTP-8654</p>\n        </item>\n        <item>\n          <p>\n\t    Missing memory barriers in <c>erts_poll()</c> could cause\n\t    the runtime system to hang indefinitely.</p>\n          <p>\n\t    Own Id: OTP-8658</p>\n        </item>\n        <item>\n          <p>\n\t    <c>ethr_rwmutex_tryrlock()</c> acquired and refused to\n\t    acquire a lock with inverted logic. The lock was however\n\t    never acquired in a thread unsafe manner. (Thanks to JR\n\t    Zhang for noting this issue)</p>\n          <p>\n\t    Own Id: OTP-8662</p>\n        </item>\n        <item>\n          <p>\n\t    Extreme combinations of register/unregister in a highly\n\t    parallell SMP application could crash the VM. The error\n\t    is corrected.</p>\n          <p>\n\t    Own Id: OTP-8663</p>\n        </item>\n        <item>\n          <p>\n\t    On Windows, files are now opened with FILE_SHARE_DELETE\n\t    to get closer to Unix semantics.</p>\n          <p>\n\t    Own Id: OTP-8667</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:system_info(multi_scheduling)</c> sometimes\n\t    erroneously returned <c>enabled</c> when it should have\n\t    returned <c>blocked</c>.</p>\n          <p>\n\t    Own Id: OTP-8675</p>\n        </item>\n        <item>\n          <p>\n\t    Fix bug causing <c>erlang:decode_packet</c> and\n\t    <c>enif_make_string</c> to generate faulty strings with\n\t    negative character values for ascii values larger than\n\t    127. (Thanks to Paul Guyot)</p>\n          <p>\n\t    Own Id: OTP-8685</p>\n        </item>\n        <item>\n          <p>\n\t    <c>open_port/2</c> with the <c>spawn</c> and\n\t    <c>spawn_executable</c> options can include an\n\t    <c>{env,Env}</c> option. In some cases unsetting\n\t    variables would not work on Unix (typically if more\n\t    variables were unset than were actually present in the\n\t    environment).</p>\n          <p>\n\t    Own Id: OTP-8701</p>\n        </item>\n        <item>\n          <p>\n\t    A user defined CPU topology set via a call to <seealso\n\t    marker=\"erlang#system_flag_cpu_topology\">erlang:system_flag(cpu_topology,\n\t    CPUTopology)</seealso> was not properly verified, and\n\t    could in worst case cause an emulator crash. The emulator\n\t    crash could only occur when a user defined CPU topology\n\t    already existed and was redefined.</p>\n          <p>\n\t    Own Id: OTP-8710</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The grammar for match specifications in ERTS users guide\n\t    only described the tracing dialect of match\n\t    specifications. An informal grammar for the ETS dialect\n\t    is added.</p>\n          <p>\n\t    Own Id: OTP-8086 Aux Id: seq11333 </p>\n        </item>\n        <item>\n          <p>\n\t    The module binary from EEP31 (and EEP9) is implemented.</p>\n          <p>\n\t    Own Id: OTP-8217</p>\n        </item>\n        <item>\n          <p>\n\t    New NIF API function <c>enif_make_new_binary</c></p>\n          <p>\n\t    Own Id: OTP-8474</p>\n        </item>\n        <item>\n          <p>\n\t    The guard BIF <c>is_boolean/1</c> (introduced in R10B)\n\t    has now been included in the lists of BIFs allowed in\n\t    guards in the Reference Manual.</p>\n          <p>\n\t    Own Id: OTP-8477</p>\n        </item>\n        <item>\n          <p>\n\t    Added function <c>zip:foldl/3</c> to iterate over zip\n\t    archives.</p>\n          <p>\n\t    Added functions to create and extract escripts. See\n\t    <c>escript:create/2</c> and <c>escript:extract/2</c>.</p>\n          <p>\n\t    The undocumented function <c>escript:foldl/3</c> has been\n\t    removed. The same functionality can be achieved with the\n\t    more flexible functions <c>escript:extract/2</c> and\n\t    <c>zip:foldl/3</c>.</p>\n          <p>\n\t    Record fields has been annotated with type info. Source\n\t    files as been adapted to fit within 80 chars and trailing\n\t    whitespace has been removed.</p>\n          <p>\n\t    Own Id: OTP-8521</p>\n        </item>\n        <item>\n\t    <p>A regular expression with many levels of parenthesis\n\t    could cause a buffer overflow. That has been corrected.\n\t    (Thanks to Michael Santos.)</p>\n          <p>\n\t    Own Id: OTP-8539</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:decode_packet(httph_bin,..)</c> could return\n\t    corrupt header strings or even crash the VM. This has\n\t    been fixed. It only happened on 32-bit VM if the header\n\t    name was unknown and between 16 and 20 characters long.\n\t    Sockets with simular <c>packet</c> option did not suffer\n\t    from this bug.</p>\n          <p>\n\t    Own Id: OTP-8548</p>\n        </item>\n        <item>\n\t    <p>New NIF features:</p> <list><item> Send messages from\n\t    a NIF, or from thread created by NIF, to any local\n\t    process (<c>enif_send</c>) </item><item> Store terms\n\t    between NIF calls (<c>enif_alloc_env</c>,\n\t    <c>enif_make_copy</c>) </item><item> Create binary terms\n\t    with user defined memory management\n\t    (<c>enif_make_resource_binary</c>) </item></list> <p>And\n\t    some incompatible changes made to the API. For more\n\t    information see the warning text in <seealso\n\t    marker=\"erl_nif\">erl_nif(3)</seealso>.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8555</p>\n        </item>\n        <item>\n\t    <p>If the '<c>fop</c>' program (needed for building PDF\n\t    files) cannot not be found, it is now possible to build\n\t    the HTML and man pages anyway (there will also be dummy\n\t    PDF files with no real content created). (Thanks to\n\t    Tuncer Ayaz.)</p>\n          <p>\n\t    Own Id: OTP-8559</p>\n        </item>\n        <item>\n\t    <p>When defining macros the closing right parenthesis\n\t    before the dot is now mandatory.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8562</p>\n        </item>\n        <item>\n\t    <p>Local and imported functions now override the\n\t    auto-imported BIFs when the names clash. The pre R14\n\t    behaviour was that auto-imported BIFs would override\n\t    local functions. To avoid that old programs change\n\t    behaviour, the following will generate an error:</p>\n\t    <list><item><p>Doing a call without explicit module name\n\t    to a local function having a name clashing with the name\n\t    of an auto-imported BIF that was present (and\n\t    auto-imported) before OTP R14A</p></item>\n\t    <item><p>Explicitly importing a function having a name\n\t    clashing with the name of an autoimported BIF that was\n\t    present (and autoimported) before OTP R14A</p></item>\n\t    <item><p>Using any form of the old compiler directive\n\t    <c>nowarn_bif_clash</c></p></item> </list> <p>If the BIF\n\t    was added or auto-imported in OTP R14A or later,\n\t    overriding it with an import or a local function will\n\t    only result in a warning,</p> <p>To resolve clashes, you\n\t    can either use the explicit module name <c>erlang</c> to\n\t    call the BIF, or you can remove the auto-import of that\n\t    specific BIF by using the new compiler directive\n\t    <c>-compile({no_auto_import,[F/A]}).</c>, which makes all\n\t    calls to the local or imported function without explicit\n\t    module name pass without warnings or errors.</p> <p>The\n\t    change makes it possible to add auto-imported BIFs\n\t    without breaking or silently changing old code in the\n\t    future. However some current code ingeniously utilizing\n\t    the old behaviour or the <c>nowarn_bif_clash</c> compiler\n\t    directive, might need changing to be accepted by the\n\t    compiler.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8579</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in re that could cause certain regular expression\n\t    matches never to terminate is corrected. (Thanks to\n\t    Michael Santos and Gordon Guthrie.)</p>\n          <p>\n\t    Own Id: OTP-8589</p>\n        </item>\n        <item>\n\t    <p>The erlang:open_port spawn and spawn_executable\n\t    directives can include an <c>{env,Env}</c> directive to\n\t    set up environment variables for the spawned process. A\n\t    bug prevented applications from using <c>{env,Env}</c> to\n\t    set an environment variable whose value ended with a\n\t    '<c>=</c>' (equal sign) character; the trailing equal\n\t    sign was mistaken as an indication that an environment\n\t    variable was to be cleared from the environment of the\n\t    spawned process. (Thanks to Steve Vinoski.)</p>\n          <p>\n\t    Own Id: OTP-8614</p>\n        </item>\n        <item>\n\t    <p><c>receive</c> statements that can only read out a\n\t    newly created reference are now specially optimized so\n\t    that it will execute in constant time regardless of the\n\t    number of messages in the receive queue for the process.\n\t    That optimization will benefit calls to\n\t    <c>gen_server:call()</c>. (See <c>gen:do_call/4</c> for\n\t    an example of a receive statement that will be\n\t    optimized.)</p>\n          <p>\n\t    Own Id: OTP-8623</p>\n        </item>\n        <item>\n          <p>\n\t    The functions file:advise/4 and file:datasync/1 have been\n\t    added. (Thanks to Filipe David Manana.)</p>\n          <p>\n\t    Own Id: OTP-8637</p>\n        </item>\n        <item>\n          <p>\n\t    New NIF API functions: <c>enif_make_atom_len</c>,\n\t    <c>enif_make_existing_atom_len</c>,\n\t    <c>enif_make_string_len</c>, <c>enif_get_atom_length</c>,\n\t    <c>enif_get_list_length</c>, <c>enif_is_list</c>,\n\t    <c>enif_is_tuple</c> (by Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-8640</p>\n        </item>\n        <item>\n          <p>\n\t    Support for using gcc's built-in functions for atomic\n\t    memory access has been added. This functionallity will be\n\t    used if available and no other native atomic\n\t    implementation in ERTS is available.</p>\n          <p>\n\t    Own Id: OTP-8659</p>\n        </item>\n        <item>\n          <p>\n\t    The number of spinlocks used when implementing atomic\n\t    fall-backs when no native atomic implementation is\n\t    available has been increased from 16 to 1024.</p>\n          <p>\n\t    Own Id: OTP-8660</p>\n        </item>\n        <item>\n          <p>\n\t    Writer preferred pthread read/write locks has been\n\t    enabled on Linux.</p>\n          <p>\n\t    Own Id: OTP-8661</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system will by default bind schedulers to\n\t    logical processors using the <c>default_bind</c> bind\n\t    type if the amount of schedulers are at least equal to\n\t    the amount of logical processors configured, binding of\n\t    schedulers is supported, and a CPU topology is available\n\t    at startup. </p>\n          <p>\n\t    <em>NOTE:</em> If the Erlang runtime system is the only\n\t    operating system process that binds threads to logical\n\t    processors, this improves the performance of the runtime\n\t    system. However, if other operating system processes (as\n\t    for example another Erlang runtime system) also bind\n\t    threads to logical processors, there might be a\n\t    performance penalty instead. If this is the case you, are\n\t    are advised to unbind the schedulers using the <seealso\n\t    marker=\"erl#+sbt\">+sbtu</seealso> command line argument,\n\t    or by invoking <seealso\n\t    marker=\"erlang#system_flag_scheduler_bind_type\">erlang:system_flag(scheduler_bind_type,\n\t    unbound)</seealso>.</p>\n          <p>\n\t    Own Id: OTP-8666</p>\n        </item>\n        <item>\n          <p>\n\t    The recently added BIFs erlang:min/2, erlang:max/2 and\n\t    erlang:port_command/3 are now auto-imported (as they were\n\t    originally intended to be). Due to the recent compiler\n\t    change (OTP-8579), the only impact on old code defining\n\t    it's own min/2, max/2 or port_command/3 functions will be\n\t    a warning, the local functions will still be used. The\n\t    warning can be removed by using\n\t    -compile({no_auto_import,[min/2,max/2,port_command/3]}).\n\t    in the source file.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8669 Aux Id: OTP-8579 </p>\n        </item>\n        <item>\n          <p>\n\t    There is a new option 'exclusive' to file:open/2 that\n\t    uses the OS O_EXCL flag where supported to open the file\n\t    in exclusive mode.</p>\n          <p>\n\t    Own Id: OTP-8670</p>\n        </item>\n        <item>\n          <p>\n\t    Now, binary_to_term/2 is auto-imported. This will cause a\n\t    compile warning if and only if a module has got a local\n\t    function with that name.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8671</p>\n        </item>\n        <item>\n          <p>\n\t    Alignment of scheduler data and run queues were adjusted.</p>\n          <p>\n\t    Own Id: OTP-8673</p>\n        </item>\n        <item>\n\t    <p>Call time breakpoint tracing</p> <list><item>Introduce\n\t    a <c>call_time</c> option to\n\t    <c>erlang:trace_pattern/3</c>.This option enables call\n\t    time breakpoint tracing on code that is executed by\n\t    processes with call tracing enabled. Call time tracing\n\t    stores the number of calls and the time spent of each\n\t    function with this trace pattern enabled. The information\n\t    can be retrieved with <c>erlang:trace_info/2</c></item>\n\t    <item>Add a scheduler array for BpData. To solve the\n\t    issue of multiple schedulers constantly updating the head\n\t    pointer to the bp data wheel, each scheduler now has its\n\t    own entrypoint to the wheel. This head pointer can be\n\t    updated without a locking being taken.</item></list>\n\t    <p>Teach call count tracing to use atomics</p>\n\t    <list><item>Call count previously used a global lock for\n\t    accessing and writing its counter in the breakpoint. This\n\t    is now changed to atomics instead.</item> <item>The\n\t    change will let call count tracing and cprof to scale\n\t    better when increasing the number of\n\t    schedulers.</item></list>\n          <p>\n\t    Own Id: OTP-8677</p>\n        </item>\n        <item>\n\t    <p><c>eprof</c> has been reimplemented with support in\n\t    the Erlang virtual machine and is now both faster (i.e.\n\t    slows down the code being measured less) and scales much\n\t    better. In measurements we saw speed-ups compared to the\n\t    old eprof ranging from 6 times (for sequential code that\n\t    only uses one scheduler/core) up to 84 times (for\n\t    parallel code that uses 8 cores).</p>\n\t    <p>Note: The API for the <c>eprof</c> has been cleaned up\n\t    and extended. See the documentation.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8706</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.5.2</title>\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    Two bugs in gen_sctp has been corrected: getopts/setopts\n\t    hence also send could only be called from socket owner,\n\t    and options 'linger', 'rcvbuf' and 'sndbuf' was read from\n\t    wrong protocol layer hence read wrong values by getopts.</p>\n          <p>\n\t    Own Id: OTP-9544</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.5.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n            Driver threads, such as async threads, using <seealso\n            marker=\"erl_driver#ErlDrvPDL\">port data locks</seealso>\n            peeked at the port status field without proper locking\n            when looking up the driver queue.</p>\n          <p>\n            Own Id: OTP-8475</p>\n        </item>\n        <item>\n          <p>\n            A call to the BIF <c>unregister(RegName)</c> when a port\n            had the name <c>RegName</c> registered in the runtime\n            system without SMP support caused a runtime system crash.\n            (Thanks to Per Hedeland for the bugfix and test case.)</p>\n          <p>\n            Own Id: OTP-8487</p>\n        </item>\n        <item>\n          <p>\n            Fix memory management bug causing crash of non-SMP\n            emulator with async threads enabled. The bug did first\n            appear in R13B03.</p>\n          <p>\n            Own Id: OTP-8591 Aux Id: seq11554 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fix <c>binary_to_term</c> crash on compressed term with\n\t    corrupt size field.</p>\n          <p>\n\t    Own Id: OTP-8336</p>\n        </item>\n        <item>\n          <p>\n\t    Processes and/or ports could get stuck on a blocked\n\t    scheduler when <c>erlang:system_flag(multi_scheduling,\n\t    block)</c> was used.</p>\n          <p>\n\t    Processes and/or ports could get stuck on an offline\n\t    scheduler when schedulers online were reduced using\n\t    <c>erlang:system_flag(schedulers_online,\n\t    SchedulersOnline)</c>.</p>\n          <p>\n\t    Own Id: OTP-8342</p>\n        </item>\n        <item>\n\t    <p>Building on Windows will now work if the paths to\n\t    <c>mc.exe</c> and <c>rc.exe</c> contain spaces. The\n\t    README.win32 file has been updated with some information\n\t    about building using Visual Studio 2008. (Thanks to\n\t    Andrew Thompson.)</p>\n          <p>\n\t    Own Id: OTP-8345</p>\n        </item>\n        <item>\n          <p>\n\t    EPMD now correctly handles the extra data field which can\n\t    be given in the ALIVE2_REQ request and retrieved in the\n\t    PORT2_RESP response. (Thanks to Klas Johansson.)</p>\n          <p>\n\t    Own Id: OTP-8361</p>\n        </item>\n        <item>\n          <p>\n\t    The configure test for reliable floating point exceptions\n\t    has been update to work on modern versions of Mac OS X.\n\t    (Thanks to Trannie Carter.)</p>\n          <p>\n\t    Own Id: OTP-8368</p>\n        </item>\n        <item>\n          <p>\n\t    ERTS makefiles used to detect the use of a gcc C compiler\n\t    by checking if CC equaled gcc. That is, the makefiles\n\t    failed to detect gcc C compilers with other command line\n\t    names than gcc. `configure' now substitute GCC into the\n\t    makefiles. If CC is a gcc C compiler, GCC will have the\n\t    value yes. (Thanks to Jean-S\u00e9bastien P\u00e9dron)</p>\n          <p>\n\t    Own Id: OTP-8373</p>\n        </item>\n        <item>\n          <p>\n\t    ETS bug causing the <c>memory</c> counter from\n\t    <c>ets:info</c> for ordered_set's to sometimes get out of\n\t    synch and absurdly high.</p>\n          <p>\n\t    Own Id: OTP-8377 Aux Id: seq11442 </p>\n        </item>\n        <item>\n          <p>\n\t    Immediately repeated multi-scheduling block/unblock\n\t    cycles using <c>erlang:system_flag(multi_scheduling,\n\t    block | unblock)</c> could deadlock the runtime system.</p>\n          <p>\n\t    Own Id: OTP-8386</p>\n        </item>\n        <item>\n\t    <p>A number of bugs concerning re and unicode are\n\t    corrected:</p>\n\t    <p>re:compile no longer loses unicode option, which also\n\t    fixes bug in re:split.</p>\n\t    <p>re:replace now handles unicode charlist replacement\n\t    argument</p>\n\t    <p>re:replace now handles unicode RE charlist argument\n\t    correctly</p>\n\t    <p>re:replace now handles binary unicode output correctly\n\t    when nothing is replaced.</p>\n\t    <p>Most code, testcases and error isolation done by Rory\n\t    Byrne.</p>\n          <p>\n\t    Own Id: OTP-8394</p>\n        </item>\n        <item>\n          <p>\n\t    The loading of native code was not properly atomic in the\n\t    SMP emulator, which could cause crashes. Also a per-MFA\n\t    information table for the native code has now been\n\t    protected with a lock since it turns that it could be\n\t    accessed concurrently in the SMP emulator. (Thanks to\n\t    Mikael Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-8397</p>\n        </item>\n        <item>\n          <p>\n\t    Fix processes in exiting status that are about to be\n\t    scheduled, to not be allowed to garbage collect.</p>\n          <p>\n\t    Own Id: OTP-8420</p>\n        </item>\n        <item>\n\t    <p>Removed bogus \"\\011\" character sequence in\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-8422</p>\n        </item>\n        <item>\n          <p>\n\t    The resolver routines failed to look up the own node name\n\t    as hostname, if the OS native resolver was erroneously\n\t    configured, bug reported by Yogish Baliga, now fixed.</p>\n          <p>\n\t    The resolver routines now tries to parse the hostname as\n\t    an IP string as most OS resolvers do, unless the native\n\t    resolver is used.</p>\n          <p>\n\t    The DNS resolver inet_res and file resolver inet_hosts\n\t    now do not read OS configuration files until they are\n\t    needed. Since the native resolver is default, in most\n\t    cases they are never needed.</p>\n          <p>\n\t    The DNS resolver's automatic updating of OS configuration\n\t    file data (/etc/resolv.conf) now uses the 'domain'\n\t    keyword as default search domain if there is no 'search'\n\t    keyword.</p>\n          <p>\n\t    Own Id: OTP-8426 Aux Id: OTP-8381 </p>\n        </item>\n        <item>\n          <p>\n\t    The re module: A regular expression with an option change\n\t    at the start of a pattern that had top-level alternatives\n\t    could cause overwriting and/or a crash. (Thanks to\n\t    Michael Santos.)</p>\n          <p>\n\t    Own Id: OTP-8438</p>\n        </item>\n        <item>\n          <p>\n\t    Harmless buffer overflow by one byte in asn1 and\n\t    ram_file_drv.</p>\n          <p>\n\t    Own Id: OTP-8451</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Improved GC performance after BIF/NIF call when a lot of\n\t    heap fragments was created. This will mainly benefit NIFs\n\t    that return large compound terms.</p>\n          <p>\n\t    Own Id: OTP-8240</p>\n        </item>\n        <item>\n\t    <p>Incompatible changes in the experimental NIF\n\t    feature.</p> <list><item> Changed the NIF function\n\t    prototypes in order to allow more than 3 function\n\t    arguments. </item><item> <c>enif_get_data</c> renamed as\n\t    <c>enif_priv_data</c>. </item><item>\n\t    <c>enif_make_string</c> got a third argument for\n\t    character encoding. </item><item> The return value of\n\t    <c>erlang:load_nif/2</c> on error changed. </item></list>\n\t    <p>Read more in the documentation of <c>erl_nif</c> and\n\t    <c>erlang:load_nif/2</c></p>.\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8304</p>\n        </item>\n        <item>\n\t    <p>Cross compilation improvements and other build system\n\t    improvements.</p>\n\t    <p>Most notable:</p> <list><item> Lots of cross\n\t    compilation improvements. The old cross compilation\n\t    support was more or less non-existing as well as broken.\n\t    Please, note that the cross compilation support should\n\t    still be considered as experimental. Also note that old\n\t    cross compilation configurations cannot be used without\n\t    modifications. For more information on cross compiling\n\t    Erlang/OTP see the <c>$ERL_TOP/INSTALL-CROSS.md</c> file.\n\t    </item><item> Support for staged install using <url\n\t    href=\"http://www.gnu.org/prep/standards/html_node/DESTDIR.html\">DESTDIR</url>.\n\t    The old broken <c>INSTALL_PREFIX</c> has also been fixed.\n\t    For more information see the <c>$ERL_TOP/INSTALL.md</c>\n\t    file. </item><item> Documentation of the <c>release</c>\n\t    target of the top <c>Makefile</c>. For more information\n\t    see the <c>$ERL_TOP/INSTALL.md</c> file. </item><item>\n\t    <c>make install</c> now by default creates relative\n\t    symbolic links instead of absolute ones. For more\n\t    information see the <c>$ERL_TOP/INSTALL.md</c> file.\n\t    </item><item> <c>$ERL_TOP/configure --help=recursive</c>\n\t    now works and prints help for all applications with\n\t    <c>configure</c> scripts. </item><item> Doing <c>make\n\t    install</c>, or <c>make release</c> directly after\n\t    <c>make all</c> no longer triggers miscellaneous\n\t    rebuilds. </item><item> Existing bootstrap system is now\n\t    used when doing <c>make install</c>, or <c>make\n\t    release</c> without a preceding <c>make all</c>.\n\t    </item><item> The <c>crypto</c> and <c>ssl</c>\n\t    applications use the same runtime library path when\n\t    dynamically linking against <c>libssl.so</c> and\n\t    <c>libcrypto.so</c>. The runtime library search path has\n\t    also been extended. </item><item> The <c>configure</c>\n\t    scripts of Erl_interface and ODBC now\n\t    search for thread libraries and thread library quirks the\n\t    same way as ERTS do. </item><item> The\n\t    <c>configure</c> script of the <c>odbc</c> application\n\t    now also looks for odbc libraries in <c>lib64</c> and\n\t    <c>lib/64</c> directories when building on a 64-bit\n\t    system. </item><item> The <c>config.h.in</c> file in the\n\t    <c>erl_interface</c> application is now automatically\n\t    generated in instead of statically updated which reduces\n\t    the risk of <c>configure</c> tests without any effect.\n\t    </item></list>\n\t    <p>(Thanks to Henrik Riomar for suggestions and\n\t    testing)</p>\n\t    <p>(Thanks to Winston Smith for the AVR32-Linux cross\n\t    configuration and testing)</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-8323</p>\n        </item>\n        <item>\n\t    <p>NIF improvements:</p> <list><item> Driver API for\n\t    multi-threading made available for NIFs. </item><item>\n\t    Support for mempory managed (garbage collected) resource\n\t    objects. A way to pass \"pointers\" to native data\n\t    structures between C and Erlang in a safe way.\n\t    </item><item> Support for references, floats and term\n\t    comparison. </item><item> Various new functions, like\n\t    <c>enif_inspect_iolist_as_binary</c>,\n\t    <c>enif_make_sub_binary</c>, <c>enif_get_string</c>,\n\t    <c>enif_get_atom</c>, <c>enif_make_tuple_from_array</c>,\n\t    <c>enif_make_list_from_array</c>,\n\t    <c>enif_make_existing_atom</c>. </item></list>\n          <p>\n\t    Own Id: OTP-8335</p>\n        </item>\n        <item>\n          <p>\n\t    Minor alignment adjustments of scheduler specific data.</p>\n          <p>\n\t    Own Id: OTP-8341</p>\n        </item>\n        <item>\n\t    <p>The documentation is now possible to build in an open\n\t    source environment after a number of bugs are fixed and\n\t    some features are added in the documentation build\n\t    process. </p>\n\t    <p>- The arity calculation is updated.</p>\n\t    <p>- The module prefix used in the function names for\n\t    bif's are removed in the generated links so the links\n\t    will look like\n\t    \"http://www.erlang.org/doc/man/erlang.html#append_element-2\"\n\t    instead of\n\t    \"http://www.erlang.org/doc/man/erlang.html#erlang:append_element-2\".</p>\n\t    <p>- Enhanced the menu positioning in the html\n\t    documentation when a new page is loaded.</p>\n\t    <p>- A number of corrections in the generation of man\n\t    pages (thanks to Sergei Golovan)</p>\n\t    <p>- The legal notice is taken from the xml book file so\n\t    OTP's build process can be used for non OTP\n\t    applications.</p>\n          <p>\n\t    Own Id: OTP-8343</p>\n        </item>\n        <item>\n          <p>\n\t    There is new <c>erlang:binary_to_term/2</c> BIF that\n\t    takes an option list. The option <c>safe</c> can be used\n\t    to prevent creation of resources that are not garbage\n\t    collected (such as atoms). (Thanks to Jayson Vantuyl.)</p>\n          <p>\n\t    Own Id: OTP-8367</p>\n        </item>\n        <item>\n          <p>\n\t    The default settings for garbage collection of binaries\n\t    has been adjusted to be less aggressive than in R13B03.\n\t    It is now also possible configure the settings for binary\n\t    GC. See the documentation for <c>spawn_opt/2-5</c>,\n\t    <c>erlang:system_info/1</c>, <c>erlang:system_flag/2</c>,\n\t    <c>process_flag/2-3</c>, <c>erlang:trace/3</c>, and the\n\t    documenation for <c>erl</c> for the new command line\n\t    options <c>+hms</c> and <c>+hmbs</c>.</p>\n          <p>\n\t    Own Id: OTP-8370</p>\n        </item>\n        <item>\n          <p>\n\t    A bug causing memory corruption in re:run() has been\n\t    corrected. (Thanks to Yamashina Hio.)</p>\n          <p>\n\t    Own Id: OTP-8375</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>-Werror</c> option for <c>erlc</c> and the\n\t    compiler option <c>warnings_as_errors</c> will cause\n\t    warnings to be treated as errors. (Thanks to Christopher\n\t    Faulet.)</p>\n          <p>\n\t    Own Id: OTP-8382</p>\n        </item>\n        <item>\n          <p>\n\t    Explicit top directories in archive files are now\n\t    optional.</p>\n          <p>\n\t    For example, if an archive (app-vsn.ez) just contains an\n\t    app-vsn/ebin/mod.beam file, the file info for the app-vsn\n\t    and app-vsn/ebin directories are faked using the file\n\t    info from the archive file as origin. The virtual\n\t    direcories can also be listed. For short, the top\n\t    directories are virtual if they does not exist.</p>\n          <p>\n\t    Own Id: OTP-8387</p>\n        </item>\n        <item>\n          <p>\n\t    An unnecessary lock operation in os:timestamp/0 has been\n\t    eliminated, making it slightly more efficient. (Thanks to\n\t    Jonas Falkevik and Tuncer Ayaz.)</p>\n          <p>\n\t    Own Id: OTP-8390</p>\n        </item>\n        <item>\n          <p>\n\t    There is a new <c>+t</c> emulator option for changing the\n\t    maximum number of atoms. (Thanks to Julien Barbot.)</p>\n          <p>\n\t    Own Id: OTP-8405</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed numerous compiler warnings generated by gcc 4.4.1\n\t    and tile-cc 2.0.1.78377 when compiling the runtime\n\t    system.</p>\n          <p>\n\t    Own Id: OTP-8412</p>\n        </item>\n        <item>\n          <p>\n\t    <c>configure</c> learned the option\n\t    <c>--enable-m32-build</c> to force the building of a\n\t    32-bit run-time on systems where the default C compiler\n\t    generates 64-bit executables by default.</p>\n          <p>\n\t    Own Id: OTP-8415</p>\n        </item>\n        <item>\n          <p>\n\t    HiPE now works in the 64-bit emulator on Mac OS X.\n\t    (Thanks to Geoff Cant.)</p>\n          <p>\n\t    Own Id: OTP-8416</p>\n        </item>\n        <item>\n          <p>\n\t    Improved handling of symbolic links to escripts</p>\n          <p>\n\t    Own Id: OTP-8417</p>\n        </item>\n        <item>\n          <p>\n\t    Add lock profiling tool.</p>\n          <p>\n\t    The Lock profiling tool, lcnt, can make use of the\n\t    internal lock statistics when the runtime system is built\n\t    with this feature enabled.</p>\n          <p>\n\t    This provides a mechanism to examine potential lock\n\t    bottlenecks within the runtime itself.</p>\n          <p>\n\t    - Add erts_debug:lock_counters({copy_save, bool()}). This\n\t    option enables or disables statistics saving for\n\t    destroyed processes and ets-tables. Enabling this might\n\t    consume a lot of memory.</p>\n          <p>\n\t    - Add id-numbering for lock classes which is otherwise\n\t    undefined.</p>\n          <p>\n\t    Own Id: OTP-8424</p>\n        </item>\n        <item>\n          <p>\n\t    Removed spurious options to the emulator from escript.</p>\n          <p>\n\t    Own Id: OTP-8427</p>\n        </item>\n        <item>\n          <p>\n\t    Minor documentation fixes. Mainly anchor adjustments.</p>\n          <p>\n\t    Own Id: OTP-8457</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    An insufficient stack allocation was made when reading\n\t    CPU information on BSD operating systems. (Thanks Michael\n\t    Turner and Akira Kitada)</p>\n          <p>\n\t    Own Id: OTP-8207</p>\n        </item>\n        <item>\n          <p>\n\t    A bug when supplying an argument without a dash directly\n\t    after the program name when starting erlang could prevent\n\t    distribution to start. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-8209</p>\n        </item>\n        <item>\n          <p>\n\t    A ticker process could potentially be blocked\n\t    indefinitely trying to send a tick to a node not\n\t    responding. If this happened, the connection would not be\n\t    brought down as it should.</p>\n          <p>\n\t    Own Id: OTP-8218</p>\n        </item>\n        <item>\n          <p>\n\t    Using certain firewalls (i.e. MS IAS Client and certain\n\t    versions of COMODO) could expose an undocumented\n\t    behaviour in the Win32 socket interface causing the name\n\t    resolution calls to hang infinitely. This is now worked\n\t    around by adding possibilities for port programs under\n\t    Windows to use overlapped I/O on their standard\n\t    input/output file handles.</p>\n          <p>\n\t    Own Id: OTP-8230</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug on ETS tables with <c>write_concurrency</c>.\n\t    The emulator could crash when doing a <c>select</c> or\n\t    <c>match</c> with a bound key without finding any object.</p>\n          <p>\n\t    Own Id: OTP-8242</p>\n        </item>\n        <item>\n\t    <p>The <c>information-request</c> /\n\t    <c>information-response</c>, and\n\t    <c>group-leader-change-request</c> /\n\t    <c>group-leader-changed-response</c> signal pairs\n\t    described below did not always adhere to the signal order\n\t    guarantees of Erlang's signal model in the runtime system\n\t    with SMP support. These signals could for example\n\t    sometimes pass exit signals.</p>\n\t    <p>The following BIFs behaviors can be modeled as if an\n\t    asynchronous <c>information-request</c> signal is sent to\n\t    <c>Pid</c>. If <c>Pid</c> is alive, it responds with an\n\t    asynchronous <c>information-response</c> signal;\n\t    otherwise, the runtime system responds with a\n\t    <c>no-such-process</c> signal. When the response is\n\t    received, the caller transforms it into the result of the\n\t    BIF.</p> <list> <item><c>is_process_alive(Pid)</c></item>\n\t    <item><c>erlang:process_display(Pid, Type)</c></item>\n\t    <item><c>process_info(Pid)</c></item>\n\t    <item><c>process_info(Pid, ItemSpec)</c></item> </list>\n\t    <p>When <c>Pid</c> resides on the same node as the caller\n\t    of <c>group_leader(GroupLeader, Pid)</c>, the\n\t    <c>group_leader/2</c> BIFs behavior can be modeled as if\n\t    an asynchronous <c>group-leader-change-request</c> signal\n\t    is sent to <c>Pid</c>. If <c>Pid</c> is alive, it\n\t    responds with an asynchronous\n\t    <c>group-leader-changed-response</c> signal; otherwise,\n\t    the runtime system responds with a <c>no-such-process</c>\n\t    signal. When the response is received, the caller\n\t    transforms it into the result of the BIF. The distributed\n\t    case which only consists of an asynchronous\n\t    <c>group-leader-change-request</c> signal and no response\n\t    is not effected.</p>\n          <p>\n\t    Own Id: OTP-8245</p>\n        </item>\n        <item>\n          <p>\n\t    Errors in the <c>system_profile</c> documentation has\n\t    been corrected.</p>\n          <p>\n\t    Own Id: OTP-8257</p>\n        </item>\n        <item>\n          <p>\n\t    Low watermark socket option modified high watermark\n\t    instead of low watermark in the inet_driver. (Thanks to\n\t    Feng Yu and Tuncer Ayaz)</p>\n          <p>\n\t    Own Id: OTP-8279</p>\n        </item>\n        <item>\n          <p>\n\t    A race condition could cause the runtime system with SMP\n\t    support to end up in a completely unresponsive state.</p>\n          <p>\n\t    Own Id: OTP-8297</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The use of <c>pthread_cond_timedwait()</c> have been\n\t    completely removed from the runtime system. This since\n\t    its behavior is unpredictable when the system clock is\n\t    suddenly changed. The previous use of it was harmless.</p>\n          <p>\n\t    Own Id: OTP-8193</p>\n        </item>\n        <item>\n          <p>\n\t    The documentation is now built with open source tools\n\t    (xsltproc and fop) that exists on most platforms. One\n\t    visible change is that the frames are removed.</p>\n          <p>\n\t    Own Id: OTP-8201</p>\n        </item>\n        <item>\n          <p>\n\t    A new garbage collecting strategy for binaries which is\n\t    more aggressive than the previous implementation.\n\t    Binaries now has a virtual binary heap tied to each\n\t    process. When binaries are created or received to a\n\t    process it will check if the heap limit has been reached\n\t    and if a reclaim should be done. This imitates the\n\t    behavior of ordinary Erlang terms. The virtual heaps are\n\t    grown and shrunk like ordinary heaps. This will lessen\n\t    the memory footprint of binaries in a system.</p>\n          <p>\n\t    Own Id: OTP-8202</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>ErlDrvTermData</c> term types used by\n\t    <c>driver_output_term()</c> and <c>driver_send_term()</c>\n\t    have been extended with the term types\n\t    <c>ERL_DRV_INT64</c>, and <c>ERL_DRV_UINT64</c> for\n\t    passing 64-bit integers. Also the 64-bit integer data\n\t    types <c>ErlDrvSInt64</c> and <c>ErlDrvUInt64</c> have\n\t    been introduced.</p>\n          <p>\n\t    For more information see the <seealso\n\t    marker=\"erl_driver\">erl_driver(3)</seealso>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-8205</p>\n        </item>\n        <item>\n          <p>\n\t    [escript] The restriction that the first line in escripts\n\t    must begin with <c>#!</c> has been removed.</p>\n          <p>\n\t    [escript] Some command line options to the escript\n\t    executable has now been documented. For example you can\n\t    run an escript in the debugger by just adding a command\n\t    line option.</p>\n          <p>\n\t    [escript] The documentation of the escript header syntax\n\t    has been clarified. For example the header is optional.\n\t    This means that it is possible to directly \"execute\"\n\t    <c>.erl</c>, <c>.beam</c> and<c>.zip</c> files.</p>\n          <p>\n\t    Own Id: OTP-8215</p>\n        </item>\n        <item>\n          <p>\n\t    The instruction for building OTP on Windows was outdated\n\t    and incomplete, the document is updated.</p>\n          <p>\n\t    Also the otp_build script required windows drives to show\n\t    up in Cygwin using the /cygdrive prefix. That requirement\n\t    is now removed.</p>\n          <p>\n\t    Own Id: OTP-8219</p>\n        </item>\n        <item>\n          <p>\n\t    A module can have native implemented functions (NIFs)\n\t    that are dynamically loaded by calling\n\t    <c>erlang:load_nif/2</c>. This is an experimental feature\n\t    that is not yet intended for production systems. It is\n\t    released with intention to get some early feedback on the\n\t    interfaces before they are carved in stone.</p>\n          <p>\n\t    Own Id: OTP-8220</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>float/1</c> BIF would always force a garbage\n\t    collection. The BIFs <c>size/1</c>, <c>byte_size/1</c>,\n\t    <c>bit_size/1</c>, <c>abs/1</c>, and <c>round/1</c> would\n\t    force a garbage-collection if the result was not a\n\t    sufficiently small integer.</p>\n          <p>\n\t    Own Id: OTP-8221</p>\n        </item>\n        <item>\n          <p>\n\t    The <seealso\n\t    marker=\"erlang#port_command/3\">erlang:port_command/3</seealso>\n\t    BIF has been added. <c>erlang:port_command/3</c> is\n\t    currently not auto imported, but it is planned to be auto\n\t    imported in OTP R14. For more information see the\n\t    <seealso marker=\"erlang\">erlang(3)</seealso>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-8225</p>\n        </item>\n        <item>\n          <p>\n\t    '<c>configure --enable-darwin-64bit</c>' would fail if\n\t    Snow Leopard had been booted with the 64-bit kernel.\n\t    (Thanks to Ryan M. Graham.)</p>\n          <p>\n\t    Own Id: OTP-8236</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    On Windows, open_port({spawn,Command},Opts) could not run\n\t    executables with spaces in the path or filename,\n\t    regardless of quoting efforts. While\n\t    open_port({spawn_executable,Exec},Opts) can run any\n\t    executable, it was still impossible to use 'spawn' to do\n\t    the same thing. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-8055</p>\n        </item>\n        <item>\n          <p>\n\t    The scheduler bind type <c>processor_spread</c> spread\n\t    schedulers too much on large NUMA systems.</p>\n          <p>\n\t    The new scheduler bind type <c>spread</c> spreads\n\t    schedulers as much as possible, and behaves as\n\t    <c>processor_spread</c> previously did. For more\n\t    information see the documentation of the <c>+sbt</c>\n\t    command line argument in the <c>erl(1)</c> documentation,\n\t    and the documentation of\n\t    <c>erlang:system_flag(scheduler_bind_type,\n\t    SchedulerBindType)</c>.</p>\n          <p>\n\t    Own Id: OTP-8063</p>\n        </item>\n        <item>\n          <p>\n\t    Automatically detected CPU topology on Linux system could\n\t    erroneously contain logical processors with <c>-1</c> as\n\t    identifiers. This happened when\n\t    <c>sysconf(_SC_NPROCESSORS_CONF)</c> returned a value\n\t    larger than the amount of logical processors found.</p>\n          <p>\n\t    Own Id: OTP-8064</p>\n        </item>\n        <item>\n          <p>\n\t    When the minimal term [] (end of list) was sent as the\n\t    complete message to a process on another node, and\n\t    received there, it could not be decoded. This bug is now\n\t    corrected. Fortunately [] is uncommon as the complete\n\t    message in real applications but it is a serious bug\n\t    anyway.</p>\n          <p>\n\t    Own Id: OTP-8092</p>\n        </item>\n        <item>\n\t    <p>A bug when the floating point exception pointer was\n\t    not initialized has been corrected. It manifested itself\n\t    on CentOS 5.1 sometimes when a floating point value was\n\t    sent to a remote node. Bug reported and patch suggested\n\t    by David Reiss, confirmed by Mikael Pettersson.</p>\n\t    <p>Some build problems on IRIX was also corrected.\n\t    Problem reported by Patrick Baggett, patch by Mikael\n\t    Pettersson.</p>\n          <p>\n\t    Own Id: OTP-8095</p>\n        </item>\n        <item>\n          <p>\n\t    A terminating process could erroneously unregister a name\n\t    for another process. This could occur under the following\n\t    conditions: The name of the terminating process was\n\t    unregistered and then registered for another process\n\t    simultaneously as the process that first had the name was\n\t    terminating.</p>\n          <p>\n\t    Own Id: OTP-8099 Aux Id: seq11344 </p>\n        </item>\n        <item>\n          <p>\n\t    Running erlc in a very deep directory (with a path length\n\t    of more 256 or more characters) would cause the emulator\n\t    to crash in a call to <c>list_to_atom/1</c>. (Thanks to\n\t    Chris Newcombe.)</p>\n          <p>\n\t    Own Id: OTP-8124</p>\n        </item>\n        <item>\n          <p>\n\t    A deadlock of the runtime system could occur when\n\t    unregistering the name of a port.</p>\n          <p>\n\t    Own Id: OTP-8145</p>\n        </item>\n        <item>\n          <p>\n\t    <c>Makefile.in</c> has been updated to use the LDFLAGS\n\t    environment variable (if set). (Thanks to Davide\n\t    Pesavento.)</p>\n          <p>\n\t    Own Id: OTP-8157</p>\n        </item>\n        <item>\n          <p>\n\t    The pthread rwlock implemention on Linux could cause\n\t    starvation of writers. We, therefore, now use our own\n\t    rwlock implementation on Linux.</p>\n          <p>\n\t    Own Id: OTP-8158</p>\n        </item>\n        <item>\n          <p>\n\t    Open source Erlang builds are updated to work well on\n\t    Snow Leopard (MacOS X 10.6)</p>\n          <p>\n\t    Own Id: OTP-8168</p>\n        </item>\n        <item>\n          <p>\n\t    A call to <c>erlang:system_info(schedulers_online)</c>\n\t    could end up in an infinite loop. This happened if the\n\t    amount of schedulers was larger than one, the amount of\n\t    schedulers online was one, and someone was blocking\n\t    multi-scheduling.</p>\n          <p>\n\t    Own Id: OTP-8169</p>\n        </item>\n        <item>\n          <p>\n\t    An error in erlang:system_profile/2 could cause\n\t    timestamped messages to arrive out of order in the SMP\n\t    case. This has now been fixed.</p>\n          <p>\n\t    Own Id: OTP-8171</p>\n        </item>\n\t<item>\n\t  <p>\n\t    <c>binary_to_atom/2</c> and\n\t    <c>binary_to_existing_atom/2</c> would leak memory if the\n\t    binary contained unaligned data.</p>\n          <p>\n\t    Own Id: OTP-8192</p>\n        </item>\n        <item>\n          <p>\n\t    The async thread pool in the runtime system without SMP\n\t    support used a memory allocator that was not thread safe\n\t    for async jobs.</p>\n          <p>\n\t    Own Id: OTP-8194</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Processor internal NUMA nodes are now supported in the\n\t    ERTS internal CPU topology representation. For more\n\t    information see the documentation of the <c>+sct</c>\n\t    command line argument in the <c>erl(1)</c> documentation,\n\t    and the documentation of\n\t    <c>erlang:system_info(cpu_topology)</c>.</p>\n          <p>\n\t    Own Id: OTP-8041</p>\n        </item>\n        <item>\n          <p>\n\t    Documentation for ets improved about concurrency.</p>\n          <p>\n\t    Own Id: OTP-8050</p>\n        </item>\n        <item>\n          <p>\n\t    Emulator flags in an escript were earlier inherited to\n\t    emulators started from from the emulator running the\n\t    escript. For example when an escript invoked\n\t    <c>os:cmd(\"erl\")</c>, the new emulator were given\n\t    erroneous emulator flags. This bug has now been fixed</p>\n          <p>\n\t    Escript filenames may now contain dots.</p>\n          <p>\n\t    Own Id: OTP-8060</p>\n        </item>\n        <item>\n          <p>\n\t    Made some BIFs non-recursive (relational operators,hash\n\t    and phash) to limit internal stack usage.</p>\n          <p>\n\t    Own Id: OTP-8065</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed Windows specific bug in erl_prim_loader. Now it\n\t    handles the root directory (e.g. c:/) better. This bug\n\t    affected the directory listing in the debugger.</p>\n          <p>\n\t    Own Id: OTP-8080</p>\n        </item>\n        <item>\n          <p>\n\t    A TCP socket with option <c>{packet,4}</c> could crash\n\t    the emulator if it received a packet header with a very\n\t    large size value (>2Gb). The same bug caused\n\t    <c>erlang:decode_packet/3</c> to return faulty values.\n\t    (Thanks to Georgos Seganos.)</p>\n          <p>\n\t    Own Id: OTP-8102</p>\n        </item>\n        <item>\n          <p>\n\t    The maximum size of the export table has been raised from\n\t    65536 to 524288 entries.</p>\n          <p>\n\t    Own Id: OTP-8104 Aux Id: seq11345 </p>\n        </item>\n        <item>\n          <p>\n\t    The file module has now a read_line/1 function similar to\n\t    the io:get_line/2, but with byte oriented semantics. The\n\t    function file:read_line/1 works for raw files as well,\n\t    but for good performance it is recommended to use it\n\t    together with the 'read_ahead' option for raw file\n\t    access.</p>\n          <p>\n\t    Own Id: OTP-8108</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed bug causing emulator crash when reading a term in\n\t    external format containing a corrupt list with a negative\n\t    length.</p>\n          <p>\n\t    Own Id: OTP-8117</p>\n        </item>\n        <item>\n          <p>\n\t    New emulator flag <c>+sss</c>, to set stack size of\n\t    scheduler threads.</p>\n          <p>\n\t    Own Id: OTP-8119</p>\n        </item>\n        <item>\n          <p>\n\t    The Windows utility Erlsrv, run in interactive mode now\n\t    accepts options for registering internal service name and\n\t    description field of Windows registry database.</p>\n          <p>\n\t    Own Id: OTP-8132</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:demonitor(Mon, [flush])</c> has been optimized.\n\t    Previously it always searched the message queue of the\n\t    caller for a <c>'DOWN'</c> message. Current\n\t    implementation only search the message queue when\n\t    necessary. It is quite common that the search is not\n\t    necessary.</p>\n          <p>\n\t    A new option <c>info</c> has been added to\n\t    <c>erlang:demonitor/2</c>. For more information see the\n\t    <c>erlang(3)</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-8143</p>\n        </item>\n        <item>\n          <p>\n\t    I/O tasks could unnecessarily be rescheduled. This was\n\t    harmless, but not useful work.</p>\n          <p>\n\t    Own Id: OTP-8148</p>\n        </item>\n        <item>\n          <p>\n\t    Minor improvements of <c>erlang:memory/[1,2]</c>.</p>\n          <p>\n\t    Own Id: OTP-8152</p>\n        </item>\n        <item>\n          <p>\n\t    New configuration option to enable use of shared zlib.</p>\n          <p>\n\t    Own Id: OTP-8155</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed smp bug in ETS that could cause emulator crash when\n\t    table with more than 1000 objects accessed by several\n\t    processes, including calls to variants of <c>select</c>\n\t    or <c>match</c> combined with concurrent object deletion.</p>\n          <p>\n\t    Own Id: OTP-8166 Aux Id: seq11392 </p>\n        </item>\n        <item>\n          <p>\n\t    The code path interpretation is now more relaxed. The\n\t    flag -code_path_choice now defaults to relaxed instead of\n\t    strict. See the documentation of code and init for more\n\t    info.</p>\n          <p>\n\t    Own Id: OTP-8170</p>\n        </item>\n        <item>\n          <p>\n\t    Load balancing of run queues and check for I/O are\n\t    triggered more often than before in situations where\n\t    processes are scheduled often but are doing very little\n\t    work each time they execute.</p>\n          <p>\n\t    Own Id: OTP-8172</p>\n        </item>\n        <item>\n          <p>\n\t    Call tracing binary comprehensions would cause an\n\t    emulator crash. (Thanks to Paul Mineiro.)</p>\n          <p>\n\t    Own Id: OTP-8179</p>\n        </item>\n        <item>\n          <p>\n\t    <c>binary_to_term/1</c> would crash the emulator instead\n\t    of generating a <c>badarg</c> exception when given\n\t    certain invalid terms. (Thanks to Scott Lystig Fritchie.)</p>\n          <p>\n\t    Own Id: OTP-8180</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Crash dumps should now cause less problems for the\n\t    crashdump_viewer application. (For processes where arity\n\t    was non-zero, the arguments are now longer printed - they\n\t    used to be printed in a format that was not parseable.)</p>\n          <p>\n\t    Own Id: OTP-7472 Aux Id: seq11019, 11292 </p>\n        </item>\n        <item>\n          <p>\n\t    Processes could potentially get stuck on an offline\n\t    scheduler.</p>\n          <p>\n\t    Own Id: OTP-7990</p>\n        </item>\n        <item>\n          <p>\n\t    <c>binary_to_atom/2</c> and\n\t    <c>binary_to_existing_atom/2</c> could leak memory if\n\t    they caused a <c>badarg</c> exception.</p>\n          <p>\n\t    Own Id: OTP-7997</p>\n        </item>\n        <item>\n          <p>\n\t    A process could under very rare circumstances erroneously\n\t    be resumed.</p>\n          <p>\n\t    Own Id: OTP-8000</p>\n        </item>\n        <item>\n          <p>\n\t    Load balancing between schedulers could under rare\n\t    circumstances cause an emulator crash.</p>\n          <p>\n\t    Own Id: OTP-8008</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:memory(processes_used)</c> always returned\n\t    <c>0</c> instead of the correct value. (Thanks to Geoff\n\t    Cant)</p>\n          <p>\n\t    Own Id: OTP-8022</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Major improvements of the Erlang distribution for Erlang\n\t    runtime systems with SMP support. Previously distribution\n\t    port locks were heavily contended, and all encoding and\n\t    decoding for a specific distribution channel had to be\n\t    done in sequence. Lock contention due to the distribution\n\t    is now negligible and both encoding and decoding of\n\t    Erlang messages can be done in parallel.</p>\n          <p>\n\t    The old atom cache protocol used by the Erlang\n\t    distribution has been dropped since it effectively\n\t    prevented all parallel encoding and decoding of messages\n\t    passed over the same distribution channel.</p>\n          <p>\n\t    A new atom cache protocol has been introduced which\n\t    isolates atom cache accesses and makes parallel encoding\n\t    and decoding of messages passed over the same\n\t    distribution channel possible. The new atom cache\n\t    protocol also use an atom cache size 8 times larger than\n\t    before. The new atom cache protocol is documented in the\n\t    ERTS users guide.</p>\n          <p>\n\t    Erlang messages received via the distribution are now\n\t    decoded by the receiving Erlang processes without holding\n\t    any distribution channel specific locks. Erlang messages\n\t    and signals sent over the distribution are as before\n\t    encoded by the sending Erlang process, but now without\n\t    holding any distribution channel specific locks during\n\t    the encoding. That is, both encoding and decoding can be\n\t    and are done in parallel regardless of distribution\n\t    channel used.</p>\n          <p>\n\t    The part that cannot be parallelized is the atom cache\n\t    updates. Atom cache updates are therefore now scheduled\n\t    on the distribution port. Since it is only one entity per\n\t    distribution channel doing this work there is no lock\n\t    contention due to the atom cache updates.</p>\n          <p>\n\t    The new runtime system does not understand the old atom\n\t    cache protocol. New and old runtime systems can however\n\t    still communicate, but no atom cache will be used.</p>\n          <p>\n\t    Own Id: OTP-7774</p>\n        </item>\n        <item>\n          <p>\n\t    Fixed a bug that caused error logging from\n\t    <c>driver_select</c> sometimes with additional symptoms\n\t    such as failing IP communications or even an emulator\n\t    crash.</p>\n          <p>\n\t    Own Id: OTP-7898 Aux Id: seq11304 </p>\n        </item>\n        <item>\n          <p>\n\t    Improved SMP concurrency for ETS tables. Several mutating\n\t    operations can now be performed truly concurrent on\n\t    different records of the same table. To support this, the\n\t    table has to be created with option\n\t    <c>write_concurrency</c>, as it is achieved at the\n\t    expense of some execution and memory overhead.\n\t    <c>ets:select</c> and <c>select_count</c> has also been\n\t    improved for all tables to not acquire exclusive table\n\t    lock during the iteration.</p>\n          <p>\n\t    Own Id: OTP-7922</p>\n        </item>\n        <item>\n          <p>\n\t    erl (that is erl.exe and dyn_erl) and erlexec has been\n\t    made more dynamic so no hard coded paths needs to added\n\t    at installation time to erl (that is erl.ini and erl).\n\t    Reltool will make use of this in a future release.</p>\n          <p>\n\t    Own Id: OTP-7952</p>\n        </item>\n        <item>\n          <p>\n\t    Added functionality to get higher resolution timestamp\n\t    from system. The erlang:now function returns a timestamp\n\t    that's not always consistent with the actual operating\n\t    system time (due to resilience against large time changes\n\t    in the operating system). The function os:timestamp/0 is\n\t    added to get a similar timestamp as the one being\n\t    returned by erlang:now, but untouched by Erlangs time\n\t    correcting and smoothing algorithms. The timestamp\n\t    returned by os:timestamp is always consistent with the\n\t    operating systems view of time, like the calendar\n\t    functions for getting wall clock time, but with higher\n\t    resolution. Example of usage can be found in the os\n\t    manual page.</p>\n          <p>\n\t    Own Id: OTP-7971</p>\n        </item>\n        <item>\n          <p>\n\t    Two new options are added to open_port - spawn_executable\n\t    which runs external executables in a controlled way, and\n\t    spawn_driver which only opens port to loaded Erlang\n\t    drivers. See the erlang manual page for details.</p>\n          <p>\n\t    Own Id: OTP-7995</p>\n        </item>\n        <item>\n          <p>\n\t    New functionality in ETS to transfer the ownership of a\n\t    table. A table can either change owner be declaring an\n\t    \"heir\", another process that will inherit the table if\n\t    the owner terminates. A table can also change owner by\n\t    calling a new function <c>ets:give_away</c>.</p>\n          <p>\n\t    Own Id: OTP-8006</p>\n        </item>\n        <item>\n          <p>\n\t    Updates to Tilera build environment.</p>\n          <p>\n\t    Own Id: OTP-8009</p>\n        </item>\n        <item>\n          <p>\n\t    A stack trace was unnecessarily saved during process\n\t    termination.</p>\n          <p>\n\t    Own Id: OTP-8014</p>\n        </item>\n        <item>\n          <p>\n\t    User defined CPU topology and scheduler bind type can now\n\t    be set from the command line when starting an emulator.\n\t    For more information see the documentation of the\n\t    <c>+sct</c>, and the <c>+sbt</c> emulator flags in the\n\t    <c>erl(1)</c> documentation.</p>\n          <p>\n\t    The CPU topologies returned from\n\t    <c>erlang:system_info/1</c> and\n\t    <c>erlang:system_flag/2</c> now always contain the\n\t    <c>processor</c> level, also when not strictly necessary.</p>\n          <p>\n\t    Own Id: OTP-8030</p>\n        </item>\n        <item>\n          <p>\n\t    Various fixes in ETS: <c>ets:first</c> could return a\n\t    deleted key in a fixated table. <c>ets:lookup</c> could\n\t    return objects out of order if a deleted object was\n\t    re-inserted into a fixed bag. <c>ets:delete_object</c>\n\t    could fail to delete duplicate objects in a\n\t    duplicate_bag.</p>\n          <p>\n\t    Own Id: OTP-8040</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.7.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Fixed a bug on Windows that could make\n\t    <c>gen_tcp:send</c> hang trying to send an iolist of more\n\t    than 16 binaries.</p>\n          <p>\n\t    Own Id: OTP-7816</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system could under rare circumstances crash\n\t    during load balancing.</p>\n          <p>\n\t    Own Id: OTP-7908 Aux Id: otp-7500 </p>\n        </item>\n        <item>\n          <p>\n\t    <c>run_erl</c> uses fallback if Unix98 pseudo-terminal is\n\t    not present on host.</p>\n          <p>\n\t    Own Id: OTP-7916 Aux Id: seq11249 </p>\n        </item>\n        <item>\n          <p>\n\t    A message buffer memory leak in the runtime system\n\t    without smp support has been fixed.</p>\n          <p>\n\t    Own Id: OTP-7941</p>\n        </item>\n        <item>\n\t    <p>Attempting to append a binary of 16Mb or greater to\n\t    another binary using the bit syntax would cause a\n\t    <c>system_limit</c> exception. There was also several\n\t    cases when constructing binaries when a <c>badarg</c>\n\t    exception was generated when it should have been\n\t    <c>system_limit</c>.</p>\n          <p>\n\t    Own Id: OTP-7942</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support failed to terminate\n\t    the caller of <c>link(RemotePid)</c> properly, if\n\t    <c>RemotePid</c> was the pid of a process on an\n\t    unreachable node. The calling process was in this case\n\t    marked as exiting, but never terminated.</p>\n          <p>\n\t    Own Id: OTP-7946</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Rudimentary support for cross compiling is added to the\n\t    source release. The support is still in its infancy and\n\t    has only been used to cross compile on Linux for a\n\t    different cpu architecture and a different Linux version,\n\t    but should be extendible to support other platforms as\n\t    well. The cross configuration files with examples are\n\t    placed in $ERL_TOP/xcomp/. View README.xcomp and run\n\t    $ERL_TOP/otp_build -help for further information.</p>\n          <p>\n\t    Own Id: OTP-7854</p>\n        </item>\n        <item>\n\t    <p>The escape sequence <c>\\{</c> which was given a new\n\t    interpretation in R13A has retained its old meaning (the\n\t    ASCII code for <c>{</c>), which means that codes greater\n\t    than 255 have to be stated using hexadecimal characters\n\t    (for example, <c>\\x{AAA}</c>). The escape sequence\n\t    <c>\\xH</c> where H is a hexadecimal character followed by\n\t    something else but a hexadecimal character is no longer\n\t    valid (incompatibility with R13A). Character codes less\n\t    than 256 can be stated using two hexadecimal characters\n\t    (for example, <c>\\x0D</c>).</p>\n          <p>\n\t    Own Id: OTP-7891 Aux Id: OTP-7855 </p>\n        </item>\n        <item>\n\t    <p>The <c>term_to_binary/1</c> BIF used to be implemented\n\t    with recursive C code, which could cause the Erlang\n\t    emulator to terminate because of a stack overflow.</p>\n\t    <p>Also fixed some minor issues in\n\t    <c>term_to_binary/1</c> and <c>binary_to_term/1</c>\n\t    pointed out by Matthew Dempsky.</p>\n          <p>\n\t    Own Id: OTP-7894</p>\n        </item>\n        <item>\n          <p>\n\t    Several glitches and performance issues in the Unicode\n\t    and I/O-system implementation of R13A have been\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-7896 Aux Id: OTP-7648 OTP-7887 </p>\n        </item>\n        <item>\n          <p>\n\t    Minor documentation improvements of the\n\t    <c>scheduler_bind_type</c> argument of\n\t    <c>erlang:system_flag/2</c>, and the\n\t    <c>scheduler_bind_type</c>, and the\n\t    <c>scheduler_bindings</c> arguments of\n\t    <c>erlang:system_info/1</c>.</p>\n          <p>\n\t    Own Id: OTP-7901 Aux Id: OTP-7777 </p>\n        </item>\n        <item>\n          <p>\n\t    There is a new BIF <c>erlang:make_tuple/3</c>.</p>\n          <p>\n\t    Own Id: OTP-7913</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.7</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p><em>OpenSource:</em></p>\n\t    <p>FreeBSD leap-seconds are handled according to patch\n\t    submitted by OpenSource user Kenji Rikitake. No test case\n\t    covers this functionality (unsupported platform).</p>\n          <p>\n\t    Own Id: OTP-7609</p>\n        </item>\n        <item>\n          <p>\n\t    A corrected bug in ETS for <c>bag</c> and\n\t    <c>duplicate_bag</c>. A <c>delete/2</c> or\n\t    <c>lookup_element/3</c> could miss objects in a fixed\n\t    table if one or more objects with the same key had\n\t    already been deleted.</p>\n          <p>\n\t    Own Id: OTP-7665</p>\n        </item>\n        <item>\n          <p>\n\t    A new driver call-back <c>stop_select</c> is introduced\n\t    to allow drivers to de-select and then close a file\n\t    descriptor in a safe way in a SMP emulator. The old way\n\t    was not strictly according to posix standard and could in\n\t    some rare cases lead to unexpected behavior. A new flag\n\t    <c>ERL_DRV_USE</c> can be passed to\n\t    <c>driver_select()</c> to tell it that the descriptor\n\t    should be closed. <c>stop_select</c> is then called when\n\t    it is safe to do so. Old drivers will however still work\n\t    as before.</p>\n          <p>\n\t    Own Id: OTP-7670</p>\n        </item>\n        <item>\n          <p>\n\t    A bug fixed for TCP sockets with option\n\t    <c>{packet,http}</c>. An HTTP request with an absolute\n\t    URI was returned with a corrupt path string. This bug did\n\t    only exist in R12B-4 and R12B-5.</p>\n          <p>\n\t    Own Id: OTP-7682 Aux Id: OTP-7647 </p>\n        </item>\n        <item>\n          <p>\n\t    run_erl did in some cases fail to extract control\n\t    sequences from to_erl (like: winsize=X,Y) and did instead\n\t    send them to be interpreted by the erlang shell.</p>\n          <p>\n\t    Own Id: OTP-7688</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in the installer on Windows not updating file\n\t    associations properly is now corrected.</p>\n          <p>\n\t    Own Id: OTP-7746</p>\n        </item>\n        <item>\n\t    <p>More space than necessary could be allocated in\n\t    binaries when appending to a binary (also in a binary\n\t    comprehension) and the data appended did not consist of\n\t    wholes bytes (e.g. 13 bits).</p>\n          <p>\n\t    Own Id: OTP-7747</p>\n        </item>\n        <item>\n          <p>\n\t    The gen_sctp option sctp_peer_addr_params,\n\t    #sctp_paddrparams{address={IP,Port} was erroneously\n\t    decoded in the inet driver. This bug has now been\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-7755</p>\n        </item>\n        <item>\n          <p>\n\t    Outstanding async driver jobs leaked memory if the\n\t    issuing port died before the async jobs completed.</p>\n          <p>\n\t    Own Id: OTP-7784</p>\n        </item>\n        <item>\n\t    <p>A bug in the dynamic library loading affecting, among\n\t    others, OpenSolaris is now corrected. (Thanks to Paul\n\t    Fisher.)</p>\n          <p>\n\t    Own Id: OTP-7796</p>\n        </item>\n        <item>\n          <p>\n\t    run_erl compile errors fixed for FreeBSD</p>\n          <p>\n\t    Own Id: OTP-7817</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in the inet driver for SCTP on Solaris showing for\n\t    e.g gen_sctp:abort/1 and gen_sctp:eof/1 has been\n\t    corrected. Patch suggestion by Simon Cornish.</p>\n          <p>\n\t    Own Id: OTP-7866</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The order of objects visited in select for ordered_set is\n\t    now documented.</p>\n          <p>\n\t    Own Id: OTP-7339</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support now uses multiple,\n\t    scheduler specific run queues, instead of one globally\n\t    shared run queue.</p>\n          <p>\n\t    The lock protecting the shared run queue was heavily\n\t    contended, and the shared run queue also caused Erlang\n\t    processes to randomly migrate between schedulers with\n\t    negative cache effects as a result.</p>\n          <p>\n\t    With the current scheduler specific run queue solution,\n\t    lock contention due to run queue protection has been\n\t    reduced, and Erlang processes are only migrated when\n\t    needed to balance the load between the schedulers. The\n\t    reduced amount of migration also reduce lock contention\n\t    on locks protecting the scheduler specific instances of\n\t    the erts internal memory allocators.</p>\n          <p>\n\t    The scheduler specific run queues are also a necessity\n\t    for a lot of future planned NUMA (Non-Uniform Memory\n\t    Access) specific optimizations.</p>\n          <p>\n\t    Own Id: OTP-7500</p>\n        </item>\n        <item>\n\t    <p>Support for Unicode is implemented as described in\n\t    EEP10. Formatting and reading of unicode data both from\n\t    terminals and files is supported by the io and io_lib\n\t    modules. Files can be opened in modes with automatic\n\t    translation to and from different unicode formats. The\n\t    module 'unicode' contains functions for conversion\n\t    between external and internal unicode formats and the re\n\t    module has support for unicode data. There is also\n\t    language syntax for specifying string and character data\n\t    beyond the ISO-latin-1 range.</p>\n\t    <p>The interactive shell will support input and output of\n\t    unicode characters when the terminal and operating system\n\t    supports it.</p>\n\t    <p>Please see the EEP and the io/io_lib manual pages as\n\t    well as the stdlib users guide for details.</p>\n\t    <p><em>I/O-protocol incompatibilities:</em></p>\n\t    <p>The io_protocol between io_Server and client is\n\t    updated to handle protocol data in unicode formats. The\n\t    updated protocol is now documented. The specification\n\t    resides in the stdlib <em>users manual</em>, which is a\n\t    new part of the manual.</p>\n\t    <p><em>io module incompatibilities:</em></p>\n\t    <p>The io:put_chars, io:get_chars and io:get_line all\n\t    handle and return unicode data. In the case where\n\t    binaries can be provided (as to io:put_chars), they shall\n\t    be encoded in UTF-8. When binaries are returned (as by\n\t    io:get_line/get_chars when the io_server is set in\n\t    <em>binary mode</em>) the returned data is also\n\t    <em>always</em> encoded as UTF-8. The file module however\n\t    still returns byte-oriented data, why file:read can be\n\t    used instead of io:get_chars to read binary data in\n\t    ISO-latin-1.</p>\n\t    <p><em>io_lib module incompatibilities:</em></p>\n\t    <p>io_lib:format can, given new format directives (i.e\n\t    \"~ts\" and \"~tc\"), return lists containing integers larger\n\t    than 255. </p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7648 Aux Id: OTP-7580 OTP-7514 OTP-7494\n\t    OTP-7443 OTP-7181 EEP10 EEP11 </p>\n        </item>\n        <item>\n          <p>\n\t    The format of the string returned by\n\t    <c>erlang:system_info(system_version)</c> (as well as the\n\t    first message when Erlang is started) has changed. The\n\t    string now contains the both the OTP version number as\n\t    well as the erts version number.</p>\n          <p>\n\t    Own Id: OTP-7649</p>\n        </item>\n        <item>\n          <p>\n\t    Message passing has been further optimized for parallel\n\t    execution. Serial message passing is slightly more\n\t    expensive than before, but parallel send to a common\n\t    receiver is much cheaper.</p>\n          <p>\n\t    Own Id: OTP-7659</p>\n        </item>\n        <item>\n          <p>\n\t    Lock contention on the atom table lock when decoding\n\t    Erlang terms on the external format has been drastically\n\t    reduced.</p>\n          <p>\n\t    Own Id: OTP-7660</p>\n        </item>\n        <item>\n          <p>\n\t    The undocumented, unsupported, and deprecated guard BIF\n\t    <c>is_constant/1</c> has been removed.</p>\n          <p>\n\t    *** INCOMPATIBILITY with R12B ***</p>\n          <p>\n\t    Own Id: OTP-7673</p>\n        </item>\n        <item>\n          <p>\n\t    The Erlang process lock implementation has been improved\n\t    by Mat Hostetter at Tilera Corporation.</p>\n          <p>\n\t    Own Id: OTP-7692</p>\n        </item>\n        <item>\n          <p>\n\t    A <c>{nodedown, Node}</c> message passed by the\n\t    <c>net_kernel:monitor_nodes/X</c> functionality is now\n\t    guaranteed to be sent after <c>Node</c> has been removed\n\t    from the result returned by <c>erlang:nodes/Y</c>.</p>\n          <p>\n\t    Own Id: OTP-7725</p>\n        </item>\n        <item>\n\t    <p>The short-circuit operators <c>andalso</c> and\n\t    <c>orelse</c> no longer guarantees that their second\n\t    argument is either <c>true</c> or <c>false</c>. As a\n\t    consequence, <c>andalso</c>/<c>orelse</c> are now\n\t    tail-recursive.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7748</p>\n        </item>\n        <item>\n          <p>\n\t    A new BIF, <c>lists:keyfind/3</c>, has been added. It\n\t    works like <c>lists:keysearch/3</c> except that it does\n\t    not wrap the returned tuple in a <c>value</c> tuple in\n\t    case of success. (Thanks to James Hague for suggesting\n\t    this function.)</p>\n          <p>\n\t    Own Id: OTP-7752</p>\n        </item>\n        <item>\n          <p>\n\t    Optimization for drivers by creating small binaries\n\t    direct on process heap.</p>\n          <p>\n\t    Own Id: OTP-7762</p>\n        </item>\n        <item>\n\t    <p><c>I bsl N</c> could cause the Erlang virtual machine\n\t    to run of memory instead generating a <c>system_limit</c>\n\t    if N was absurdly huge. (Thanks to Daniel Hedlund.)</p>\n\t    <p>There would always be a garbage collection when\n\t    evaluating <c>I bsl N</c> or <c>I bsr N</c> if <c>I</c>\n\t    was a bignum.</p>\n\t    <p>If <c>I</c> is an integer and <c>N</c> a bignum, <c>I\n\t    bsl N</c> will now cause the correct <c>system_limit</c>\n\t    exception instead of <c>bad_arith</c> as in earlier\n\t    releases.</p>\n\t    <p>If <c>I</c> is an integer and <c>N</c> a bignum, <c>I\n\t    bsr N</c> will return either 0 or -1 depending on the\n\t    sign of <c>I</c> instead of causing a <c>bad_arith</c>\n\t    exception as in earlier releases.</p>\n          <p>\n\t    Own Id: OTP-7764</p>\n        </item>\n        <item>\n          <p>\n\t    Scheduler threads can now be bound to logical processors\n\t    on newer Linux and Solaris systems. More systems will be\n\t    supported in the future.</p>\n          <p>\n\t    In some cases performance has increased drastically when\n\t    binding schedulers. Schedulers are not bound by default,\n\t    though. This since it might cause a performance\n\t    degradation if multiple programs have bound to\n\t    processors, e.g. multiple Erlang runtime systems. For\n\t    more information see the documentation of\n\t    <c>erlang:system_flag/2</c>.</p>\n          <p>\n\t    In order to bind scheduler threads the CPU topology need\n\t    to be known. On some newer Linux and Solaris systems the\n\t    runtime system automatically detects the CPU topology. If\n\t    the emulator isn't able to automatically detect the CPU\n\t    topology, the CPU topology can be defined. For more\n\t    information see the documentation of\n\t    <c>erlang:system_flag/2</c>.</p>\n          <p>\n\t    Own Id: OTP-7777</p>\n        </item>\n        <item>\n\t    <p>The compiler will refuse to a compile file where the\n\t    module name in the file differs from the output file\n\t    name.</p>\n\t    <p>When compiling using <c>erlc</c>, the current working\n\t    directory will no be included in the code path (unless\n\t    explicitly added using \"-pa .\").</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7793</p>\n        </item>\n        <item>\n          <p>\n\t    The BIFs <c>atom_to_binary/2</c>,\n\t    <c>binary_to_atom/2</c>, and\n\t    <c>binary_to_existing_atom/2</c> have been added.</p>\n          <p>\n\t    Own Id: OTP-7804</p>\n        </item>\n        <item>\n          <p>\n\t    The amount of schedulers online can now be changed during\n\t    operation. The amount of schedulers online defaults to\n\t    the same amount as available logical processors. For more\n\t    information see the documentation of\n\t    <c>erlang:system_flag/2</c> and <c>erl</c>.</p>\n          <p>\n\t    Own Id: OTP-7811</p>\n        </item>\n        <item>\n\t    <p>The deprecated functions <c>erlang:fault/1</c>,\n\t    <c>erlang:fault/2</c>, and <c>file:rawopen/2</c> have\n\t    been removed.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7812</p>\n        </item>\n        <item>\n          <p>\n\t    Erts internal dynamically allocated process and port\n\t    specific data for rarely used data. This is used to\n\t    reduce memory usage of processes and ports that do not\n\t    use specific functionality. More functionality will be\n\t    moved to process and port specific data in future\n\t    releases.</p>\n          <p>\n\t    Own Id: OTP-7818</p>\n        </item>\n        <item>\n          <p>\n\t    New packet type <c>http_bin</c> for gen_tcp sockets and\n\t    <c>erlang:decode_packet</c>. It works like <c>http</c>\n\t    except that strings are returned as binaries instead of\n\t    lists.</p>\n          <p>\n\t    Own Id: OTP-7821</p>\n        </item>\n        <item>\n          <p>\n\t    The obsolete wd_keeper program for embedded Solaris\n\t    systems has been removed.</p>\n          <p>\n\t    Own Id: OTP-7822</p>\n        </item>\n        <item>\n          <p>\n\t    Nodes belonging to different independent clusters can now\n\t    co-exist on the same host with the help of a new\n\t    environment variable setting ERL_EPMD_PORT.</p>\n          <p>\n\t    Own Id: OTP-7826</p>\n        </item>\n        <item>\n\t    <p>There are new functions <c>erlang:min/2</c> and\n\t    <c>erlang:max/2</c> to calculate the minimum and maximum\n\t    of two terms, respectively. Note that the functions are\n\t    not auto-imported, so they need to be imported explicitly\n\t    or the <c>erlang</c> prefix must be used when calling\n\t    them.</p>\n          <p>\n\t    Own Id: OTP-7841</p>\n        </item>\n        <item>\n\t    <p>The copyright notices have been updated.</p>\n          <p>\n\t    Own Id: OTP-7851</p>\n        </item>\n        <item>\n\t    <p>Enhanced build environment for cross compilation to\n\t    Tilera Tile architecture.</p>\n\t    <p>Support for native ethread atomics on Tilera\n\t    Tile64/TilePro (Thanks to Tilera Corporation).</p>\n          <p>\n\t    Own Id: OTP-7852</p>\n        </item>\n        <item>\n\t    <p>The escape sequences <c>\\x</c> and <c>\\{</c> have been\n\t    assigned new interpretations (they used to return the\n\t    ASCII code for <c>x</c> and <c>{</c> respectively). One\n\t    or more octal characters inside curly brackets after a\n\t    leading backslash is from now on an alternative to the\n\t    existing syntax <c>\\NNN</c>, but can also be used for\n\t    codes greater than 255. In a similar fashion, one or more\n\t    hexadecimal characters can be put inside curly brackets\n\t    after a leading <c>\\x</c>. Furthermore, the escape\n\t    sequences <c>\\xH</c> and <c>\\xHH</c>, where N is a\n\t    hexadecimal character, can be used for codes less than\n\t    256.</p>\n\t    <p>NOTE: These new escape sequences are still considered\n\t    experimental and may be changed in the R13B release.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7855</p>\n        </item>\n        <item>\n          <p>\n\t    The PCRE library's exported function names are now\n\t    prefixed with erts_ in the erlang emulator to avoid\n\t    clashes with dynamically loaded drivers.</p>\n          <p>\n\t    Own Id: OTP-7861</p>\n        </item>\n        <item>\n          <p>\n\t    A runtime system with SMP support will now be built by\n\t    default on most platforms if a usable posix thread\n\t    library or native windows threads are found.</p>\n          <p>\n\t    For more information see the top README file.</p>\n          <p>\n\t    Own Id: OTP-7872</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.6.5.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A corrected bug in ETS for <c>bag</c> and\n\t    <c>duplicate_bag</c>. A <c>delete/2</c> or\n\t    <c>lookup_element/3</c> could miss objects in a fixed\n\t    table if one or more objects with the same key had\n\t    already been deleted.</p>\n          <p>\n\t    Own Id: OTP-7665</p>\n        </item>\n        <item>\n          <p>\n\t    A bug fixed for TCP sockets with option\n\t    <c>{packet,http}</c>. An HTTP request with an absolute\n\t    URI was returned with a corrupt path string. This bug did\n\t    only exist in R12B-4 and R12B-5.</p>\n          <p>\n\t    Own Id: OTP-7682 Aux Id: OTP-7647 </p>\n        </item>\n        <item>\n          <p>\n\t    Calling <c>gen_tcp:send()</c> from several processes on\n\t    socket with option <c>send_timeout</c> could lead to much\n\t    longer timeout than specified. The solution is a new\n\t    socket option <c>{send_timeout_close,true}</c> that will\n\t    do automatic close on timeout. Subsequent calls to send\n\t    will then immediately fail due to the closed connection.</p>\n          <p>\n\t    Own Id: OTP-7731 Aux Id: seq11161 </p>\n        </item>\n        <item>\n          <p>\n\t    A process being garbage collected via the\n\t    <c>garbage_collect/1</c> BIF or the\n\t    <c>check_process_code/2</c> BIF didn't handle message\n\t    receive and resume correctly during the garbage collect.\n\t    When this occurred, the process returned to the state it\n\t    had before the garbage collect instead of entering the\n\t    new state.</p>\n          <p>\n\t    Own Id: OTP-7738</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug in inet_drv concerning gen_tcp:connect has been\n\t    corrected. A connect towards a non-open port through open\n\t    firewalls could sometimes erroneously be successful. Any\n\t    subsequent operation would fail, though.</p>\n          <p>\n\t    Own Id: OTP-6542</p>\n        </item>\n        <item>\n          <p>\n\t    Floating point arithmetics in drivers could cause a\n\t    runtime system crash and/or unexpected results on runtime\n\t    systems with floating point exceptions enabled. Floating\n\t    point exceptions are disabled unless explicitly enabled\n\t    or if hipe is enabled.</p>\n          <p>\n\t    Own Id: OTP-7237</p>\n        </item>\n        <item>\n          <p>\n\t    A bug when many sockets got signalled simultaneously\n\t    causing the emulator to panic with the message\n\t    \"Inconsistent, why isnt io reported?\" is now corrected.</p>\n          <p>\n\t    Own Id: OTP-7420</p>\n        </item>\n        <item>\n          <p>\n\t    Starting erl with option \"-detached\" now disconnects\n\t    correctly from terminal session on Unix.</p>\n          <p>\n\t    Own Id: OTP-7461</p>\n        </item>\n        <item>\n          <p>\n\t    Mended gdb etp-commands for ETS access.</p>\n          <p>\n\t    Own Id: OTP-7538</p>\n        </item>\n        <item>\n          <p>\n\t    <c>erlang:decode_packet/3</c> allows white space between\n\t    HTTP header tag and colon according to RFC2616.</p>\n          <p>\n\t    Own Id: OTP-7543</p>\n        </item>\n        <item>\n          <p>\n\t    An emulator compiled for SCTP now starts even if the\n\t    dynamic libraries are not present. The SCTP driver is\n\t    then of course not loaded.</p>\n          <p>\n\t    Own Id: OTP-7551</p>\n        </item>\n        <item>\n\t    <p>To build on Mac OS X, 10.3.0 or later is now required\n\t    because of fixes for two problems:</p>\n\t    <p>There would be a resource leak when <c>erl_ddl</c>\n\t    attempted to unload a driver. This problem has been\n\t    corrected by using <c>dlopen()</c> (which works on all\n\t    modern Unix-like platforms) instead of the Mac OS X\n\t    specific API calls.</p>\n\t    <p>Signal handling in the run-time system for HiPE has\n\t    been updated to work on later versions of Mac OS X than\n\t    10.2.x. Therefore, <c>--enable-hipe</c> now works on Mac\n\t    OS X with Intel CPUs.</p>\n\t    <p>Thanks to Geoff Cant for the patches.</p>\n          <p>\n\t    Own Id: OTP-7562</p>\n        </item>\n        <item>\n\t    <p>Corrected some information about the protocol between\n\t    EPMD and Erlang nodes. (Thanks to Michael Regen.)</p>\n          <p>\n\t    Own Id: OTP-7594</p>\n        </item>\n        <item>\n          <p>\n\t    When using\n\t    <c>erlang:system_monitor(Pid,{long_gc,Time})</c>, and the\n\t    GC time exceeded 1 second, it sometimes erroneously\n\t    showed up as about 4300 seconds. (This bug was corrected\n\t    in R9C, but re-introduced in R12B.) (Thanks to Chris\n\t    Newcombe.)</p>\n          <p>\n\t    Own Id: OTP-7622 Aux Id: OTP-4903, seq8379 </p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The driver entry of a dynamically loaded driver is now\n\t    copied when loaded which enables some internal\n\t    optimizations. Note that drivers that modify the driver\n\t    entry during execution will not work anymore. Such a\n\t    miss-use of the driver interface is however not\n\t    supported.</p>\n          <p>\n\t    Own Id: OTP-6900</p>\n        </item>\n        <item>\n          <p>\n\t    The split function is now added to the re library.\n\t    Exceptions and errors from both run, replace and split\n\t    are made more consistent.</p>\n          <p>\n\t    Own Id: OTP-7514 Aux Id: OTP-7494 </p>\n        </item>\n        <item>\n          <p>\n\t    Fixed harmless compiler warnings when building the\n\t    emulator and minor build changes in order to avoid\n\t    unnecessary rebuilds.</p>\n          <p>\n\t    Own Id: OTP-7530</p>\n        </item>\n        <item>\n          <p>\n\t    There is now experimental support for loading of code\n\t    from archive files. See the documentation of <c>code</c>,\n\t    <c>init</c>, <c>erl_prim_loader </c> and <c>escript</c>\n\t    for more info.</p>\n          <p>\n\t    The error handling of <c>escripts</c> has been improved.</p>\n          <p>\n\t    An <c>escript</c> may now set explicit arguments to the\n\t    emulator, such as <c>-smp enabled</c>.</p>\n          <p>\n\t    An <c>escript</c> may now contain a precompiled beam\n\t    file.</p>\n          <p>\n\t    An <c>escript</c> may now contain an archive file\n\t    containing one or more applications (experimental).</p>\n          <p>\n\t    The internal module <c>code_aux</c> has been removed.</p>\n          <p>\n\t    Own Id: OTP-7548 Aux Id: otp-6622 </p>\n        </item>\n        <item>\n          <p>\n\t    The reallocation functionality part of the ERTS internal\n\t    memory allocators, now consider current block in\n\t    combination with surrounding free blocks as an\n\t    alternative location for a reallocation.</p>\n          <p>\n\t    Own Id: OTP-7555</p>\n        </item>\n        <item>\n\t    <p>There could remain false references from a process to\n\t    a module that has been called earlier, so that the\n\t    process would be killed if the module was reloaded.\n\t    (Thanks to Richard Carlsson.)</p>\n\t    <p>Also, the fix for this bug also made it possible to\n\t    make stack backtraces (as returned from\n\t    <c>erlang:get_stacktrace/0</c> and other functions) more\n\t    correct in that the immediate caller is always included\n\t    in the stack backtrace (it could sometimes be\n\t    missing).</p>\n          <p>\n\t    Own Id: OTP-7559</p>\n        </item>\n        <item>\n          <p>\n\t    Improved locking in IO-handling for better smp\n\t    performance.</p>\n          <p>\n\t    Own Id: OTP-7560</p>\n        </item>\n        <item>\n          <p>\n\t    Improved BIF rescheduling functionality.</p>\n          <p>\n\t    Own Id: OTP-7587</p>\n        </item>\n        <item>\n          <p>\n\t    Loading a module compiled with Erlang/OTP R9C and calling\n\t    <c>module_info/0</c> in the module would crash the\n\t    emulator. The emulator now refuses to load any module\n\t    compiled with R9C or earlier. (Note: only trivial modules\n\t    compiled with R10B or earlier could be loaded anyway.)\n\t    (Thanks to Martin Kjellin.)</p>\n          <p>\n\t    Own Id: OTP-7590</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.4.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A process calling one of the following BIFs could under\n\t    very rare conditions deadlock in the runtime system with\n\t    SMP support: <c>check_process_code/2</c>,\n\t    <c>garbage_collect/1</c>, <c>process_info/[1,2]</c>,\n\t    <c>system_flag/2</c>, and\n\t    <c>erlang:suspend_process/[1,2]</c>.</p>\n          <p>\n\t    Own Id: OTP-7582</p>\n        </item>\n        <item>\n          <p>\n\t    A couple of statistics variables were not managed in a\n\t    thread safe manner in the runtime system with SMP\n\t    support.</p>\n          <p>\n\t    Own Id: OTP-7583</p>\n        </item>\n        <item>\n          <p>\n\t    An extremely rare race condition when terminating a\n\t    process could potentially cause a runtime system crash.</p>\n          <p>\n\t    Own Id: OTP-7584</p>\n        </item>\n        <item>\n          <p>\n\t    Under certain conditions and when using run_erl/to_erl,\n\t    the terminal Erlang driver (ttsl_drv) could crash the\n\t    emulator by doing a division by zero due to incorrect\n\t    handling of terminals reporting a zero width. For\n\t    terminals reporting zero width, the driver now fallbacks\n\t    to a default width of 80 and a default height of 24\n\t    (vt100), as a fallback behaviour. This fixes the crashes\n\t    and also makes output on \"dumb\" terminals much more\n\t    readable.</p>\n          <p>\n\t    Own Id: OTP-7592 Aux Id: seq11073 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.4.1</title>\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    A new <c>erts_alloc</c> parameter\n\t    <c>+M&lt;S&gt;rmbcmt</c> (relative multiblock carrier\n\t    move threshold) has been added. It determines when to\n\t    force a moving realloc in a multiblock carrier when a\n\t    block is shrunk. For more information see the\n\t    <c>erts_alloc(3)</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-7540</p>\n        </item>\n        <item>\n\t    <p>The new option <c>+d</c> can be given to <c>erl</c> to\n\t    suppress the crash dump generation if an internal error\n\t    is detected. As a result, a more useful core dump is\n\t    produced.</p>\n          <p>\n\t    Own Id: OTP-7578 Aux Id: seq11052 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Double backslashes in format string passed to the erts\n\t    internal printf implementation produced erroneous\n\t    results. No such format strings were passed to the erts\n\t    internal printf implementation, i.e., the bug was\n\t    therefore completely harmless. (Thanks to Perry Smith.)</p>\n          <p>\n\t    Own Id: OTP-7408</p>\n        </item>\n        <item>\n          <p>\n\t    Large files are now handled on Windows, where the\n\t    filesystem supports it.</p>\n          <p>\n\t    Own Id: OTP-7410</p>\n        </item>\n        <item>\n          <p>\n\t    Bug fixed for <c>{packet,http}</c> when space follows\n\t    http headers.</p>\n          <p>\n\t    Own Id: OTP-7458</p>\n        </item>\n        <item>\n          <p>\n\t    The trace option <c>running</c> could cause an emulator\n\t    crash if the current function couldn't be determined.</p>\n          <p>\n\t    Own Id: OTP-7484</p>\n        </item>\n        <item>\n          <p>\n\t    Using 16#ffffFFFF as a timeout value in receive...after\n\t    would often cause a timeout almost at once due to an\n\t    32-bit integer overflow. (Thanks to Serge Aleynikov and\n\t    Matthias Lang.)</p>\n          <p>\n\t    Own Id: OTP-7493</p>\n        </item>\n        <item>\n          <p>\n\t    For the process that an escript runs in, the\n\t    <c>trap_exit</c> process flag is now <c>false</c> instead\n\t    of <c>true</c> (as in previous releases). Scripts that\n\t    depend on the previous (counter-intuitive) behaviour\n\t    might not work. (Thanks to Bengt Kleberg.)</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7517</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in the <c>string:to_integer/1</c> builtin made the\n\t    emulator unstable. This is now corrected. (Thanks to Lev\n\t    Walkin.)</p>\n          <p>\n\t    Own Id: OTP-7526</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>Performance for ETS intensive applications should now\n\t    be better in the SMP emulator. Also, ETS table\n\t    identifiers (as returned by <c>ets:new/2</c>) are now\n\t    spread out in wider range than before (using 28 bits in a\n\t    32-bit emulator) to make sure that the table identifier\n\t    for a deleted table will not be quickly re-used.</p>\n\t    <p>NOTE: Table identifiers can now be negative integers.\n\t    Programs that (incorrectly) assume that table identifiers\n\t    can only be positive integers might stop to work. (The\n\t    type of a table identifier is intentionally not\n\t    documented, and may change in a future release.)</p>\n          <p>\n\t    Own Id: OTP-7348</p>\n        </item>\n        <item>\n          <p>\n\t    New BIF <c>erlang:decode_packet/3</c> that extracts a\n\t    protocol packet from a binary. Similar to the socket\n\t    option <c>{packet, Type}</c>. Also documented the socket\n\t    packet type <c>http</c> and made it official.\n\t    <em>NOTE</em>: The tuple format for <c>http</c> packets\n\t    sent from an active socket has been changed in an\n\t    incompatible way.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7404</p>\n        </item>\n        <item>\n          <p>\n\t    The source code for the documentation for some\n\t    applications (erts, kernel, stdlib, and several others)\n\t    are now included in the source tar ball. There is\n\t    currently no Makefile support for building HTML files\n\t    from the source (such support will be included in a\n\t    future release).</p>\n          <p>\n\t    Own Id: OTP-7406</p>\n        </item>\n        <item>\n          <p>\n\t    A lot of frequently accessed memory counters (erts\n\t    internal) have been removed. This since they hurt\n\t    performance on the runtime system with SMP support. As a\n\t    result <c>erlang:memory/[0,1]</c> will only deliver a\n\t    result if all <c>erts_alloc(3)</c> allocators are enabled\n\t    (default). The result delivered when all\n\t    <c>erts_alloc(3)</c> allocators are enabled are both more\n\t    accurate and less accurate than before. More memory than\n\t    before are included in the result, but the different\n\t    parts that are summed are not gathered atomically. A call\n\t    to <c>erlang:memory/[0,1]</c> is much cheaper for the\n\t    system than before. This since the information isn't\n\t    gathered atomically anymore which was very expensive.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7468</p>\n        </item>\n        <item>\n          <p>\n\t    Pre-allocators used for, for example, timers, and\n\t    messages have been rewritten to be scheduler specific.\n\t    That is, different schedulers will now allocate from\n\t    different pools which reduces lock contention.</p>\n          <p>\n\t    Own Id: OTP-7470</p>\n        </item>\n        <item>\n          <p>\n\t    On Mac OS X, file:sync/1 now guarantees that all\n\t    filesystem buffers are written to the disk by using the\n\t    fcntl() with F_FULLFSYNC option. Previously, file:sync/1\n\t    called fsync(), which only guaranteed that the data had\n\t    been transferred to the disk drive. (Thanks to Jan\n\t    Lehnardt.)</p>\n          <p>\n\t    Own Id: OTP-7471</p>\n        </item>\n        <item>\n          <p>\n\t    Termination of a process that takes a long time can now\n\t    be preempted, i.e., the terminating process will be\n\t    rescheduled for later continuation of termination so that\n\t    other processes can execute. Termination of a process\n\t    that owns many and/or large ets tables typically takes a\n\t    long time.</p>\n          <p>\n\t    Own Id: OTP-7477</p>\n        </item>\n        <item>\n          <p>\n\t    A new trace option <c>exiting</c> has been added. The\n\t    <c>exiting</c> trace is similar to the <c>running</c>\n\t    trace, but for exiting processes. For more information\n\t    see the erlang(3) documentation.</p>\n          <p>\n\t    The <c>erlang:trace/3</c> bif now doesn't block other\n\t    scheduler threads if only one tracee is specified in the\n\t    call to <c>erlang:trace/3</c>.</p>\n          <p>\n\t    Own Id: OTP-7481</p>\n        </item>\n        <item>\n          <p>\n\t    The re module is extended with repetitive matches (global\n\t    option) and replacement function.</p>\n          <p>\n\t    Own Id: OTP-7494 Aux Id: OTP-7181 </p>\n        </item>\n        <item>\n          <p>\n\t    In the section about binary construction, the reference\n\t    manual now mentions what happens when an integer value\n\t    does not fit into an integer segment of size N (namely,\n\t    that the N least significant bits will be put into into\n\t    the binary and that the most significant bits will be\n\t    silently discarded). (Thanks to Edwin Fine.)</p>\n          <p>\n\t    Own Id: OTP-7506</p>\n        </item>\n        <item>\n          <p>\n\t    Setting the <c>{active,once}</c> for a socket (using\n\t    inets:setopts/2) is now specially optimized (because the\n\t    <c>{active,once}</c> option is typically used much more\n\t    frequently than other options).</p>\n          <p>\n\t    Own Id: OTP-7520</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    Floating point arithmetics in drivers can cause a runtime\n\t    system crash and/or unexpected results on runtime systems\n\t    with floating point exceptions enabled. Floating point\n\t    exceptions are disabled unless explicitly enabled or if\n\t    hipe is enabled.</p>\n          <p>\n\t    Own Id: OTP-7237</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.3.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Binary construction with an integer field of size 0 at\n\t    the end of the constructed binary (and the size given in\n\t    a variable), would cause a write of one byte outside the\n\t    memory reserved for the binary, which in turn could cause\n\t    an emulator crash.</p>\n          <p>\n\t    Own Id: OTP-7422</p>\n        </item>\n        <item>\n          <p>\n\t    A race condition in the dynamic driver implementation\n\t    could cause an emulator crash. (Thanks to Paul Fisher)</p>\n          <p>\n\t    Own Id: OTP-7464</p>\n        </item>\n        <item>\n          <p>\n\t    Calls to <c>erlang:system_info(allocated_areas)</c> could\n\t    cause the runtime system with SMP support to crash.</p>\n          <p>\n\t    Own Id: OTP-7474</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>env</c> option to <c>open_port()</c> could cause\n\t    the runtime system with SMP support to crash.</p>\n          <p>\n\t    Own Id: OTP-7475</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Operations that needed to block other threads in the\n\t    runtime system with SMP support unnecessarily waited for\n\t    async threads to block. Most important the\n\t    <c>erlang:memory/[0,1]</c> bif, code loading, and the\n\t    <c>erlang:trace/3</c> bif.</p>\n          <p>\n\t    Own Id: OTP-7480</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.3.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Calls to <c>erlang:memory/[0,1]</c> could cause the\n\t    runtime system with SMP support to crash.</p>\n          <p>\n\t    Own Id: OTP-7415</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.3.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Doing local call trace on bit syntax matching code that\n\t    has been optimized with delayed sub-binary creation could\n\t    crash the emulator.</p>\n          <p>\n\t    Own Id: OTP-7399 Aux Id: seq10978 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Only one to_erl process at a time is allowed to connect\n\t    to the same run_erl pipe. Prevents buggy behaviour when\n\t    IO from several to_erl's get interleaved.</p>\n          <p>\n\t    Own Id: OTP-5107</p>\n        </item>\n        <item>\n          <p>\n\t    IPv6 name resolving has now been fixed to use\n\t    getaddrinfo() patch (thoroughly reworked) courtesy of Love\n\t    H\u00f6rnquist-\u00c5strand submitted by Fredrik Thulin. It also\n\t    can use gethostname2() patch (also reworked) courtesy of\n\t    Mikael Magnusson for debian submitted by Sergei Golovan.</p>\n          <p>\n\t    Own Id: OTP-5382</p>\n        </item>\n        <item>\n          <p>\n\t    Improved error handling in run_erl</p>\n          <p>\n\t    Own Id: OTP-7252</p>\n        </item>\n        <item>\n\t    <p>A permanent fix for the deadlock issue temporarily\n\t    fixed by OTP-7260.</p> <taglist><tag>OTP-7260</tag><item>\n\t    The runtime system with SMP support could under rare\n\t    circumstances deadlock when a distribution channel was\n\t    taken down while multiple simultaneous operations were\n\t    performed on it. </item></taglist>\n          <p>\n\t    Own Id: OTP-7267 Aux Id: OTP-7260 </p>\n        </item>\n        <item>\n          <p>\n\t    ./configure has been improved to find 64-bit OpenSSL\n\t    libraries.</p>\n          <p>\n\t    Own Id: OTP-7270</p>\n        </item>\n        <item>\n          <p>\n\t    A terminating process could under very rare circumstances\n\t    trigger a bug which could crash the runtime system with\n\t    SMP support.</p>\n          <p>\n\t    Own Id: OTP-7272</p>\n        </item>\n        <item>\n          <p>\n\t    SCTP_ADDR_CONFIRMED events are now handled by gen_sctp.</p>\n          <p>\n\t    Own Id: OTP-7276</p>\n        </item>\n        <item>\n          <p>\n\t    binary_to_term/1 would crash the emulator if the binary\n\t    data contained an external fun with non-atom module\n\t    and/or function. Corrected to generate a badarg\n\t    exception.</p>\n          <p>\n\t    Own Id: OTP-7281</p>\n        </item>\n        <item>\n          <p>\n\t    On Mac OS 10.5 (Leopard), sending to socket which the\n\t    other end closes could cause the emulator to consume 100%\n\t    CPU time. (Thanks to Matthias Radestock.)</p>\n          <p>\n\t    Own Id: OTP-7289</p>\n        </item>\n        <item>\n          <p>\n\t    The vanilla driver used on Windows could crash the\n\t    emulator and sometimes produced corrupt files. The\n\t    vanilla driver is the driver that is used when one only\n\t    pass a filename as first argument to <c>open_port/2</c>.\n\t    <em>NOTE</em>: This use of <c>open_port/2</c> is\n\t    <em>obsolete</em>, and the documentation of this use has\n\t    previously been removed. The functionality is only\n\t    present for backward compatibility reasons and\n\t    <em>will</em> eventually be removed.</p>\n          <p>\n\t    Own Id: OTP-7301</p>\n        </item>\n        <item>\n          <p>\n\t    Faulty matching in binaries larger than 512Mb on 64bit\n\t    machines fixed.(On 32bit, the size limit for binaries is\n\t    still 512Mb). Thanks to Edwin Fine and Per Gustafsson for\n\t    finding fault and fix.</p>\n          <p>\n\t    Own Id: OTP-7309</p>\n        </item>\n        <item>\n          <p>\n\t    crypto:start() on Windows caused emulator to hang on\n\t    error popup window if openssl DLL was not found. Windows\n\t    error popups now suppressed.</p>\n          <p>\n\t    Own Id: OTP-7325</p>\n        </item>\n        <item>\n          <p>\n\t    Configuration option <c>without-termcap</c> can be used to\n\t    disable the use of termcap libraries for terminal cursor\n\t    control in the shell.</p>\n          <p>\n\t    Own Id: OTP-7338</p>\n        </item>\n        <item>\n          <p>\n\t    to_erl reports its terminal window size to run_erl in\n\t    order to get output formatted accordingly</p>\n          <p>\n\t    Own Id: OTP-7342</p>\n        </item>\n        <item>\n          <p>\n\t    On Solaris, the <c>compressed</c> option for file\n\t    operations did not work if the file descriptor happened\n\t    to be greater than 255 (a problem with fopen() and\n\t    friends in Solaris itself).</p>\n          <p>\n\t    Own Id: OTP-7343 Aux Id: seq10949 </p>\n        </item>\n        <item>\n          <p>\n\t    A race condition in the runtime system with SMP support\n\t    causing an erroneous removal of a newly created ets table\n\t    has been fixed.</p>\n          <p>\n\t    The race occurred when a process removed a table during\n\t    termination simultaneously as another process removed the\n\t    same table via <c>ets:delete/1</c> and a third process\n\t    created a table that accidentally got the same internal\n\t    table index as the table being removed.</p>\n          <p>\n\t    Own Id: OTP-7349</p>\n        </item>\n        <item>\n          <p>\n\t    <c>zlib:inflate</c> failed when the size of the inflated\n\t    data was an exact multiple of the internal buffer size\n\t    (4000 bytes by default).</p>\n          <p>\n\t    Own Id: OTP-7359</p>\n        </item>\n        <item>\n          <p>\n\t    If the total number of allowed atoms is exceeded, there\n\t    will now be a controlled termination of the emulator with\n\t    a crash dump file. The emulator used to simply crash.\n\t    (Thanks Howard Yeh and Thomas Lindgren.)</p>\n          <p>\n\t    Own Id: OTP-7372</p>\n        </item>\n        <item>\n          <p>\n\t    The break handler in werl on Windows could cause the\n\t    emulator to hang or crash, that is now corrected.</p>\n          <p>\n\t    Own Id: OTP-7394 Aux Id: seq10969 </p>\n        </item>\n        <item>\n          <p>\n\t    The configure script now tests for an serious\n\t    optimization bug in gcc-4.3.0. If the bug is present, the\n\t    configure script will abort (if this happens, the only\n\t    way to build Erlang/OTP is to change to another version\n\t    of gcc). (Thanks to Mikael Pettersson.)</p>\n          <p>\n\t    Own Id: OTP-7397</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    On Unix, the emulator now notices when the width of the\n\t    terminal has changed. (Thanks to Matthew Dempsky and\n\t    Patrick Mahoney.)</p>\n          <p>\n\t    Own Id: OTP-7290</p>\n        </item>\n        <item>\n          <p>\n\t    There is a new function <c>init:stop/1</c> which can be\n\t    used to shutdown the system cleanly AND generate a\n\t    non-zero exit status or crash dump. (Thanks to Magnus\n\t    Froberg.)</p>\n          <p>\n\t    Own Id: OTP-7308</p>\n        </item>\n        <item>\n          <p>\n\t    process_info(Pid, garbage_collection) now returns more\n\t    information</p>\n          <p>\n\t    Own Id: OTP-7311</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>hide</c> option for <c>open_port/2</c> is now\n\t    documented. (Thanks to Richard Carlsson.)</p>\n          <p>\n\t    Own Id: OTP-7358</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    Floating point arithmetics in drivers can cause a runtime\n\t    system crash on runtime systems with floating point\n\t    exceptions enabled. Floating point exceptions are\n\t    disabled unless explicitly enabled or if hipe is enabled.</p>\n          <p>\n\t    Own Id: OTP-7237</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.6.2</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The maximum length of an atom of 255 characters is now\n\t    strictly enforced. <c>binary_to_term/1</c> will now fail\n\t    with a badarg if an encoded term contains an atom longer\n\t    than 255 characters. Atoms created by drivers will now be\n\t    truncated to 255 characters if necessary. (Thanks to\n\t    Matthew Dempsky.)</p>\n          <p>\n\t    Own Id: OTP-7147</p>\n        </item>\n        <item>\n          <p>\n\t    A bug in \"bignum handling\" on some 64bit architectures\n\t    could cause rem and div operations on large numbers to\n\t    hang indefinitely. Rem operations involving the smallest\n\t    negative number representable in 28 bits or 60 bits could\n\t    also cause access violation and emulator crash. Both\n\t    errors are corrected.</p>\n          <p>\n\t    Own Id: OTP-7177</p>\n        </item>\n        <item>\n          <p>\n\t    When doing the initial garbage collection after waking a\n\t    hibernated process, a fullsweep garbage collection was\n\t    unnecessarily triggered.</p>\n          <p>\n\t    Own Id: OTP-7212</p>\n        </item>\n        <item>\n\t    <p>The beta testing module <c>gen_sctp</c> now supports\n\t    active mode as stated in the documentation. Active mode\n\t    is still rather untested, and there are some issues about\n\t    what should be the right semantics for\n\t    <c>gen_sctp:connect/5</c>. In particular: should it be\n\t    blocking or non-blocking or choosable. There is a high\n\t    probability it will change semantics in a (near) future\n\t    patch.</p> <p>Try it, give comments and send in bug\n\t    reports!</p>\n          <p>\n\t    Own Id: OTP-7225</p>\n        </item>\n        <item>\n          <p>\n\t    Invalid arguments to <c>ets:update_counter/3</c> were not\n\t    handled correctly. A tuple position (<c>Pos</c>) less\n\t    than 1 caused the element directly following the key to\n\t    be updated (as if no position at all had been specified).\n\t    All invalid values for <c>Pos</c> will now fail with\n\t    <c>badarg</c>.</p>\n          <p>\n\t    Own Id: OTP-7226</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support could under rare\n\t    circumstances deadlock when a distribution channel was\n\t    taken down while multiple simultaneous operations were\n\t    performed on it.</p>\n          <p>\n\t    Own Id: OTP-7260</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    More checksum/hash algorithms from the zlib library are\n\t    now available as built in functions (like md5 hashes has\n\t    been for a long time).</p>\n          <p>\n\t    Own Id: OTP-7128</p>\n        </item>\n        <item>\n          <p>\n\t    Minor improvements in the garbage collector.</p>\n          <p>\n\t    Own Id: OTP-7139 Aux Id: OTP-7132 </p>\n        </item>\n        <item>\n          <p>\n\t    The switch \"-detached\" to the windows werl program now\n\t    can create an erlang virtual machine without any main\n\t    window and without a temporary console showing.</p>\n          <p>\n\t    Own Id: OTP-7142</p>\n        </item>\n        <item>\n\t    <p><c>erlang:system_info/1</c> now accepts the\n\t    <c>logical_processors</c>, and <c>debug_compiled</c>\n\t    arguments. For more info see the, <c>erlang(3)</c>\n\t    documentation.</p> <p>The scale factor returned by\n\t    <c>test_server:timetrap_scale_factor/0</c> is now also\n\t    effected if the emulator uses a larger amount of\n\t    scheduler threads than the amount of logical processors\n\t    on the system. </p>\n          <p>\n\t    Own Id: OTP-7175</p>\n        </item>\n        <item>\n          <p>\n\t    A new BIF ets:update_element/3. To update individual\n\t    elements within an ets-tuple, without having to read,\n\t    update and write back the entire tuple.</p>\n          <p>\n\t    Own Id: OTP-7200</p>\n        </item>\n        <item>\n          <p>\n\t    A process executing the <c>processes/0</c> BIF can now be\n\t    preempted by other processes during its execution. This\n\t    in order to disturb the rest of the system as little as\n\t    possible. The returned result is, of course, still a\n\t    consistent snapshot of existing processes at a time\n\t    during the call to <c>processes/0</c>.</p>\n          <p>\n\t    The documentation of the <c>processes/0</c> BIF and the\n\t    <c>is_process_alive/1</c> BIF have been updated in order\n\t    to clarify the difference between an existing process and\n\t    a process that is alive.</p>\n          <p>\n\t    Own Id: OTP-7213</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.6.1.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Not enough parameters were passed when sending an error\n\t    report in erl_check_io.c (Thanks to Matthew Dempsky).</p>\n          <p>\n\t    Own Id: OTP-7176</p>\n        </item>\n        <item>\n          <p>\n\t    In rare circumstances, complex binary matching code could\n\t    cause the emulator to crash or not match when it should.\n\t    (Thanks to Rory Byrne.)</p>\n          <p>\n\t    Own Id: OTP-7198</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>The <c>{allocator_sizes, Alloc}</c> and\n\t    <c>alloc_util_allocators</c> arguments are now accepted\n\t    by <c>erlang:system_info/1</c>. For more information see\n\t    the <c>erlang(3)</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-7167</p>\n        </item>\n        <item>\n          <p>\n\t    The finishing reallocation of the heap block when\n\t    hibernating a process is now always moving the heap block\n\t    since it drastically reduces memory fragmentation when\n\t    hibernating large amounts of processes.</p>\n          <p>\n\t    Own Id: OTP-7187</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    The SMP emulator on sparc64 erroneously used the sparc32\n\t    atomic and the sparc32 spinlock implementations which\n\t    caused it to crash.</p>\n          <p>\n\t    Own Id: OTP-7006</p>\n        </item>\n        <item>\n          <p>\n\t    Call tracing the new guard BIFs <c>byte_size</c>,\n\t    <c>bit_size</c>, or <c>tuple_size</c> and the loading a\n\t    module that uses one of those functions, could cause the\n\t    emulator to terminate.</p>\n          <p>\n\t    Own Id: OTP-7008</p>\n        </item>\n        <item>\n          <p>\n\t    configuring --enable-darwin-universal or\n\t    --enable-darwin-64bit on MacOSX could result in a non\n\t    optimized emulator. Top level configure script now\n\t    corrected.</p>\n          <p>\n\t    Own Id: OTP-7014</p>\n        </item>\n        <item>\n          <p>\n\t    configuring --with-gd did not produce correct include\n\t    flags for percept.</p>\n          <p>\n\t    Own Id: OTP-7015</p>\n        </item>\n        <item>\n          <p>\n\t    Environment variables weren't handled in thread safe\n\t    manner in the runtime system with SMP support on Windows.</p>\n          <p>\n\t    <c>erl_drv_putenv()</c>, and <c>erl_drv_getenv()</c> has\n\t    been introduced for use in drivers. Do <em>not</em> use\n\t    putenv(), or getenv() directly in drivers. For more\n\t    information see the <c>erl_driver</c> documentation.</p>\n          <p>\n\t    Own Id: OTP-7035</p>\n        </item>\n        <item>\n          <p>\n\t    HIPE: Corrected the choice of interface to the send/3 and\n\t    setnode/3 BIFs for native-compiled code. Using the\n\t    incorrect interface could, in unusual circumstances, lead\n\t    to random runtime errors.</p>\n          <p>\n\t    Own Id: OTP-7067</p>\n        </item>\n        <item>\n          <p>\n\t    Garbage collections could become extremely slow when\n\t    there were many keys in the process dictionary. (Thanks\n\t    to Fredrik Svahn.)</p>\n          <p>\n\t    Own Id: OTP-7068</p>\n        </item>\n        <item>\n          <p>\n\t    The duplicate documentation directory in the windows\n\t    installation is removed.</p>\n          <p>\n\t    Own Id: OTP-7070</p>\n        </item>\n        <item>\n\t    <p>Documentation bugfixes and clarifications.</p> (Thanks\n\t    to Joern (opendev@gmail.com), Matthias Lang, and Richard\n\t    Carlsson.)\n          <p>\n\t    Own Id: OTP-7079</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support <em>not</em> using\n\t    the native atomic integer implementation part of OTP\n\t    could deadlock when run on a system with more than one\n\t    logical processor. That is, only the runtime system with\n\t    SMP support on <em>other</em> hardware platforms than\n\t    x86, x86_64, sparc32, and powerpc32 were effected by this\n\t    bug.</p>\n          <p>\n\t    Own Id: OTP-7080</p>\n        </item>\n        <item>\n          <p>\n\t    The break handling code (run when Ctrl-C is hit) could\n\t    could potentially deadlock the runtime system with SMP\n\t    support.</p>\n          <p>\n\t    Own Id: OTP-7104</p>\n        </item>\n        <item>\n          <p>\n\t    The sctp driver has been updated to work against newer\n\t    lksctp packages e.g 1.0.7 that uses the API spelling\n\t    change adaption -> adaptation. Older lksctp (1.0.6) still\n\t    work. The erlang API in gen_sctp.erl and inet_sctp.hrl\n\t    now spells 'adaptation' regardless of the underlying C\n\t    API.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7120</p>\n        </item>\n        <item>\n\t    <p>A bug in <c>erlang:phash2/1</c> on 64-bit platforms\n\t    has been fixed. (Thanks to Scott Lystig Fritchie.)</p>\n          <p>\n\t    Own Id: OTP-7127</p>\n        </item>\n        <item>\n          <p>\n\t    The emulator could under rare circumstances crash while\n\t    garbage collecting.</p>\n          <p>\n\t    Own Id: OTP-7132</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n\t    <p>The documentation has been updated so as to reflect\n\t    the last updates of the Erlang shell as well as the minor\n\t    modifications of the control sequence <c>p</c> of the\n\t    <c>io_lib</c> module.</p> <p>Superfluous empty lines have\n\t    been removed from code examples and from Erlang shell\n\t    examples.</p>\n          <p>\n\t    Own Id: OTP-6944 Aux Id: OTP-6554, OTP-6911 </p>\n        </item>\n        <item>\n          <p>\n\t    Bit syntax construction with a small integer in a\n\t    non-byte aligned field wider than the CPU's word size\n\t    could cause garbage bits in the beginning of the field.</p>\n          <p>\n\t    Own Id: OTP-7085</p>\n        </item>\n        <item>\n          <p>\n\t    All Windows versions older than Windows 2000 are now\n\t    <em>not supported</em> by the Erlang runtime system. This\n\t    since there was a need for usage of features introduced\n\t    in Windows 2000.</p>\n          <p>\n\t    Own Id: OTP-7086</p>\n        </item>\n        <item>\n\t    <p>Memory management improvements especially for the\n\t    runtime system with SMP support:</p> <list> <item> The\n\t    runtime system with SMP support can now use multiple,\n\t    thread specific instances of most memory allocators. This\n\t    improves performance since it reduces lock contention in\n\t    the memory allocators. It may however increase memory\n\t    usage for some applications. The runtime system with SMP\n\t    support will by default enable this feature on most\n\t    allocators. The amount of instances used can be\n\t    configured. </item> <item> <c>driver_alloc()</c>,\n\t    <c>driver_realloc()</c>, and <c>driver_free()</c> now use\n\t    their own erts specific memory allocator instead of the\n\t    default <c>malloc()</c> implementation on the system.\n\t    </item> <item> The default configuration of some\n\t    allocators have been changed to fit applications that use\n\t    much memory better. </item> <item> Some new\n\t    <c>erts_alloc</c> configuration parameters have been\n\t    added. </item> <item> <c>erts_alloc_config</c> has been\n\t    modified to be able to create configurations suitable for\n\t    multiple instances of allocators. </item> <item> The\n\t    returned value from <c>erlang:system_info({allocator,\n\t    Alloc})</c> has been changed. This since an allocator may\n\t    now run in multiple instances. </item> </list> <p>If you\n\t    for some reason want the memory allocators to be\n\t    configured as before, you can pass the <c>+Mea r11b</c>\n\t    command-line argument to <c>erl</c>.</p> <p>For more\n\t    information see the <c>erts_alloc(3)</c>, the\n\t    <c>erts_alloc_config(3)</c>, and the <c>erlang(3)</c>\n\t    documentation.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-7100</p>\n        </item>\n        <item>\n          <p>\n\t    On Unix, denormalized floating point numbers could not be\n\t    created using <c>list_to_float/1</c> or\n\t    <c>binary_to_term/1</c>. (Thanks to Matthew Dempsky.)</p>\n          <p>\n\t    Own Id: OTP-7122</p>\n        </item>\n        <item>\n          <p>\n\t    Native atomic integers and spin-locks are now also\n\t    available for the runtime system with SMP support on\n\t    sparc64.</p>\n          <p>\n\t    Own Id: OTP-7130</p>\n        </item>\n        <item>\n          <p>\n\t    FP exceptions support for sparc64 userspace on Linux has\n\t    been added. Note that FP exception support is now turned\n\t    off by default, so to actually enable it you need to do\n\t    '<c>./configure --enable-fp-exceptions</c>'.</p>\n          <p>\n\t    Own Id: OTP-7131</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.6</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    A bug for raw files when reading 0 bytes returning 'eof'\n\t    instead of empty data has been corrected.</p>\n          <p>\n\t    Own Id: OTP-6291 Aux Id: OTP-6967 </p>\n        </item>\n        <item>\n          <p>\n\t    All exported functions in gzio.c have now been renamed to\n\t    avoid conflict with drivers that are indirectly linked\n\t    with an external zlib library.</p>\n          <p>\n\t    Own Id: OTP-6816 Aux Id: OTP-6591 </p>\n        </item>\n        <item>\n          <p>\n\t    On the 64-bit Erlang emulator, bit syntax construction\n\t    with integers containing more than 60 bits (\"big\n\t    numbers\") into fields with more than 60 bits could\n\t    produce incorrect results.</p>\n          <p>\n\t    Own Id: OTP-6833</p>\n        </item>\n        <item>\n          <p>\n\t    When the runtime system failed to allocate memory for\n\t    binaries, it could dead lock while writing the\n\t    <c>erl_crash.dump</c>.</p>\n          <p>\n\t    Own Id: OTP-6848</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support could deadlock if a\n\t    process called the <c>erlang:suspend_process(Pid)</c> BIF\n\t    or the <c>erlang:garbage_collect(Pid)</c> BIF while the\n\t    process identified by <c>Pid</c> was currently running\n\t    and the process calling the BIFs was terminated during\n\t    the call to the BIFs.</p>\n          <p>\n\t    Processes suspending each other via the\n\t    <c>erlang:suspend_process/1</c> BIF or garbage collecting\n\t    each other via the <c>erlang:garbage_collect/1</c> BIF\n\t    could deadlock each other when the runtime system with\n\t    SMP support was used.</p>\n          <p>\n\t    Own Id: OTP-6920</p>\n        </item>\n        <item>\n          <p>\n\t    <c>dbg</c> could leave traced processes in a suspended\n\t    state if the tracer process was killed with exit reason\n\t    <c>kill</c>.</p>\n          <p>\n\t    <c>erlang:suspend_process/2</c> has been introduced which\n\t    accepts an option list as second argument. For more\n\t    information see the <c>erlang(3)</c> documentation.</p>\n          <p>\n\t    Processes suspended via\n\t    <c>erlang:suspend_process/[1,2]</c> will now be\n\t    automatically resumed if the process that called\n\t    <c>erlang:suspend_process/[1,2]</c> terminates.</p>\n          <p>\n\t    Processes could previously be suspended by one process\n\t    and resumed by another unless someone was tracing the\n\t    suspendee. This is <em>not</em> possible anymore. The\n\t    process resuming a process <em>has</em> to be the one\n\t    that suspended it.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6946</p>\n        </item>\n        <item>\n\t    <p>file:write_file/3, file:write/2 and file:read/2 could\n\t    crash (contrary to documentation) for odd enough file\n\t    system problems, e.g write to full file system. This bug\n\t    has now been corrected.</p> <p>In this process the file\n\t    module has been rewritten to produce better error codes.\n\t    Posix error codes now originate from the OS file system\n\t    calls or are generated only for very similar causes (for\n\t    example 'enomem' is generated if a memory allocation\n\t    fails, and 'einval' is generated if the file handle in\n\t    Erlang is a file handle but currently invalid).</p>\n\t    <p>More Erlang-ish error codes are now generated. For\n\t    example <c>{error,badarg}</c> is now returned from\n\t    <c>file:close/1</c> if the argument is not of a file\n\t    handle type. See file(3).</p> <p>The possibility to write\n\t    a single byte using <c>file:write/2</c> instead of a list\n\t    or binary of one byte, contradictory to the\n\t    documentation, has been removed.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6967 Aux Id: OTP-6597 OTP-6291 </p>\n        </item>\n        <item>\n          <p>\n\t    Monitor messages produced by the system monitor\n\t    functionality, and garbage collect trace messages could\n\t    contain erroneous heap and/or stack sizes when the actual\n\t    heaps and/or stacks were huge.</p>\n          <p>\n\t    As of erts version 5.6 the <c>large_heap</c> option to\n\t    <c>erlang:system_monitor/[1,2]</c> has been modified. The\n\t    monitor message is sent if the sum of the sizes of all\n\t    memory blocks allocated for all heap generations is equal\n\t    to or larger than the specified size. Previously the\n\t    monitor message was sent if the memory block allocated\n\t    for the youngest generation was equal to or larger than\n\t    the specified size.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6974 Aux Id: seq10796 </p>\n        </item>\n        <item>\n          <p>\n            <c>inet:getopts/2</c> returned random values on Windows\n            Vista.</p>\n          <p>\n            Own Id: OTP-7003</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    The emulator internal process lock implementation has\n\t    been rewritten and optimized. A slight risk of starvation\n\t    existed in the previous implementation. This risk has\n\t    also been eliminated in the new implementation.</p>\n          <p>\n\t    Own Id: OTP-6500</p>\n        </item>\n        <item>\n          <p>\n\t    Bitstrings (bit-level) binaries and binary comprehensions\n\t    are now part of the language. See the Reference Manual.</p>\n          <p>\n\t    Own Id: OTP-6558</p>\n        </item>\n        <item>\n          <p>\n\t    The windows version of erlang now has SMP support. The\n\t    SMP emulator is run by default on machines which shows\n\t    more than one virtual or physical processor.</p>\n          <p>\n\t    Own Id: OTP-6560 Aux Id: OTP-6925 </p>\n        </item>\n        <item>\n          <p>\n\t    The details of the compressed term format has been\n\t    documented in erl_ext_dist.txt. (Thanks to Daniel\n\t    Goertzen.)</p>\n          <p>\n\t    Own Id: OTP-6755</p>\n        </item>\n        <item>\n          <p>\n\t    The runtime system with SMP support is now started by\n\t    default if more than one logical processor are detected.\n\t    For more information, see the <c>erl(3)</c>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-6756</p>\n        </item>\n        <item>\n          <p>\n\t    The external format for Erlang terms and the distribution\n\t    protocol are now documented in ERTS User's Guide.</p>\n          <p>\n\t    Own Id: OTP-6779</p>\n        </item>\n        <item>\n          <p>\n\t    New BIF's erlang:system_profile/1 and\n\t    erlang:system_profile/2. These BIF's controls concurrency\n\t    profiling options for processes, ports and schedulers.</p>\n          <p>\n\t    Own Id: OTP-6783 Aux Id: OTP-6285 </p>\n        </item>\n        <item>\n          <p>\n\t    The <c>ErlDrvTermData</c> term types used by\n\t    <c>driver_output_term()</c> and <c>driver_send_term()</c>\n\t    have been extended with the term types\n\t    <c>ERL_DRV_BUF2BINARY</c>, <c>ERL_DRV_EXT2TERM</c>, and\n\t    <c>ERL_DRV_UINT</c>. <c>ERL_DRV_BUF2BINARY</c> is used\n\t    for passing and creating a binary,\n\t    <c>ERL_DRV_EXT2TERM</c> is used for passing terms encoded\n\t    with the external term format, and <c>ERL_DRV_UINT</c> is\n\t    used for passing unsigned integers.</p>\n          <p>\n\t    Also the data types <c>ErlDrvUInt</c> and\n\t    <c>ErlDrvSInt</c> have been added which makes it more\n\t    obvious how arguments to term types are interpreted with\n\t    regards to width and signedness.</p>\n          <p>\n\t    The incorrect data types <c>ErlDriverTerm</c>,\n\t    <c>ErlDriverBinary</c>, and <c>ErlDriverPort</c> in the\n\t    <c>erl_driver(3)</c> documentation have been replaced\n\t    with the correct data types <c>ErlDrvTermData</c>,\n\t    <c>ErlDrvBinary</c>, and <c>ErlDrvPort</c>.</p>\n          <p>\n\t    For more information see the <c>erl_driver(3)</c>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-6823</p>\n        </item>\n        <item>\n          <p>\n\t    Miscellaneous improvements of the erts internal thread\n\t    library.</p>\n          <p>\n\t    It now support optimized atomic operations and spin-locks\n\t    on windows.</p>\n          <p>\n\t    Fall-backs based on mutexes and/or spin-locks for missing\n\t    optimized atomic operations, spin-locks, or rwlocks has\n\t    been implemented. This makes it possible to compile the\n\t    runtime system with SMP support on a lot more platforms.</p>\n          <p>\n\t    Default stack size on OpenBSD has been increased to 256\n\t    kilo-words.</p>\n          <p>\n\t    Own Id: OTP-6831 Aux Id: OTP-6560 </p>\n        </item>\n        <item>\n\t    <p>Many bit syntax operations, both construction and\n\t    matching, are faster. For further information, see the\n\t    Efficiency Guide.</p>\n          <p>\n\t    Own Id: OTP-6838</p>\n        </item>\n        <item>\n\t    <p>Literal lists, tuples, and binaries are no longer\n\t    constructed at run-time as they used to be, but are\n\t    stored in a per-module constant pool. Literals that are\n\t    used more than once are stored only once.</p>\n\t    <p>This is not a change to the language, only in the\n\t    details of its implementation. Therefore, the\n\t    implications of this change is described in the\n\t    Efficiency Guide.</p>\n\t    <p>Example 1: In the expression <c>element(BitNum-1,\n\t    {1,2,4,8,16,32,64,128})</c>, the tuple used to be\n\t    constructed every time the expression was executed, which\n\t    could be detrimental to performance in two ways if the\n\t    expression was executed in a loop: the time to build the\n\t    tuple itself and the time spent in garbage collections\n\t    because the heap filled up with garbage faster.</p>\n\t    <p>Example 2: Literal strings, such as <c>\"abc\"</c>, used\n\t    to be stored in the compiled code compactly as a byte\n\t    string and expanded to a list at run-time. Now all\n\t    strings will be stored expanded to lists (such as\n\t    <c>[$a,$b,$c]</c>) in the constant pool. That means that\n\t    the string will be faster to use at run-time, but that it\n\t    will require more space even when not used. If space is\n\t    an issue, you might want to use binary literals (that is,\n\t    <c>&lt;&lt;\"abc\"&gt;&gt;</c>) instead of string literals for\n\t    infrequently used long strings (such as error\n\t    messages).</p>\n          <p>\n\t    Own Id: OTP-6850</p>\n        </item>\n        <item>\n\t    <p>The Erlang driver API has been extended with a\n\t    portable POSIX thread like API for multi-threading. The\n\t    Erlang driver thread API provides:</p> <list>\n\t    <item>Threads</item> <item>Mutexes</item> <item>Condition\n\t    variables</item> <item>Read/Write locks</item>\n\t    <item>Thread specific data</item> </list> <p>For more\n\t    information see the <c>erl_driver(3)</c>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-6857</p>\n        </item>\n        <item>\n          <p>\n\t    Recursive calls now usually consume less stack than in\n\t    R11B. See the Efficiency Guide.</p>\n          <p>\n\t    Own Id: OTP-6862 Aux Id: seq10746 </p>\n        </item>\n        <item>\n          <p>\n\t    The deprecated BIFs <c>erlang:old_binary_to_term/1</c>\n\t    and <c>erlang:info/1</c> have been removed.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6876</p>\n        </item>\n        <item>\n          <p>\n\t    Calls to driver call-backs triggered by external events\n\t    are now scheduled and interleaved with execution of\n\t    Erlang processes also on the runtime system without SMP\n\t    support.</p>\n          <p>\n\t    Own Id: OTP-6878</p>\n        </item>\n        <item>\n          <p>\n\t    Faster arithmetic of integers of more than 27 bits signed\n\t    (or 60 bits signed on an 64-bit CPU), and also faster\n\t    integer multiplication. (Thanks to Tony Rogvall.)</p>\n          <p>\n\t    Own Id: OTP-6891</p>\n        </item>\n        <item>\n\t    <p>Significant improvements of the <c>process_info</c>\n\t    BIFs:</p> <list> <item> <c>process_info/2</c> can now be\n\t    called with a list of items as second argument in order\n\t    to atomically retrieve information about multiple items.\n\t    </item> <item> <c>process_info/[1,2]</c> has been\n\t    optimized in the runtime system with SMP support. The\n\t    whole scheduler could previously be blocked for a\n\t    significant period of time in <c>process_info/[1,2]</c>\n\t    waiting for a lock on the process being inspected. The\n\t    Erlang process calling <c>process_info/[1,2]</c> can\n\t    still be blocked for a significant period of time waiting\n\t    for the lock, but the scheduler will now be able to run\n\t    other processes while the process calling\n\t    <c>process_info/[1,2]</c> waits for the lock. </item>\n\t    <item> <c>process_info/2</c> now accept a few more items\n\t    than before. </item> <item> The documentation of\n\t    <c>process_info/[1,2]</c> has been improved. </item>\n\t    </list> <p>For more information see the <c>erlang(3)</c>\n\t    documentation.</p>\n          <p>\n\t    Own Id: OTP-6899</p>\n        </item>\n        <item>\n          <p>\n\t    <c>open_port({}, [])</c> could crash the emulator.\n\t    (Thanks to Matthew Dempsky.)</p>\n          <p>\n\t    Own Id: OTP-6901</p>\n        </item>\n        <item>\n\t    <p>Two new guard BIFs have been introduced as a\n\t    recommended replacement for <c>size/1</c>. (The\n\t    <c>size/1</c> BIF will be removed no earlier than in\n\t    R14B.) The BIFs are <c>tuple_size/1</c> to calculate the\n\t    size of a tuple and <c>byte_size/1</c> to calculate the\n\t    number of bytes needed for the contents of the binary or\n\t    bitstring (rounded up to the nearest number of bytes if\n\t    necessary).</p>\n\t    <p>There is also a new <c>bit_size/1</c> BIF that returns\n\t    the exact number of bits that a binary or bitstring\n\t    contains.</p>\n          <p>\n\t    Own Id: OTP-6902</p>\n        </item>\n        <item>\n\t    <p>The <c>ets:fixtable/2</c> function, which has been\n\t    deprecated for several releases, has been removed.</p>\n\t    <p>The <c>ets:info/1</c> function has been reimplemented\n\t    as a BIF, which guarantees that information returned is\n\t    consistent.</p>\n\t    <p>The <c>ets:info/2</c> function now fails with reason\n\t    <c>badarg</c> if the second argument is invalid.\n\t    (Dialyzer can be used to find buggy code where the second\n\t    argument is misspelled.)</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6906</p>\n        </item>\n        <item>\n          <p>\n\t    As the linux kernel may generate a minor fault when\n\t    tracing with CPU timestamps, and there exists no patch to\n\t    the Linux kernel that fixes the problem, cpu timestamps\n\t    are disabled on Linux for now.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6922</p>\n        </item>\n        <item>\n\t    <p>The functions io:columns/0, io:columns/1, io:rows/0\n\t    and io:rows/1 are added to allow the user to get\n\t    information about the terminal geometry. The shell takes\n\t    some advantage of this when formatting output. For\n\t    regular files and other io-devices where height and width\n\t    are not applicable, the functions return\n\t    {error,enotsup}.</p>\n\t    <p>Potential incompatibility: If one has written a custom\n\t    io-handler, the handler has to either return an error or\n\t    take care of io-requests regarding terminal height and\n\t    width. Usually that is no problem as io-handlers, as a\n\t    rule of thumb, should give an error reply when receiving\n\t    unknown io-requests, instead of crashing.</p>\n          <p>\n\t    *** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>\n\t    Own Id: OTP-6933</p>\n        </item>\n        <item>\n          <p>\n\t    <c>driver_caller()</c> can now also be used from the\n\t    <c>start</c> callback of a driver.</p>\n          <p>\n\t    Own Id: OTP-6951</p>\n        </item>\n        <item>\n          <p>\n\t    The emulator can now be compiled for 64bit intel, as well\n\t    as a 32bit universal binary on darwin/MacOSX 10.4 and\n\t    10.5.</p>\n          <p>\n\t    Own Id: OTP-6961</p>\n        </item>\n        <item>\n          <p>\n\t    If <c>open_port</c> fails because all available ports are\n\t    already in use, it will now throw a <c>system_limit</c>\n\t    exception instead of an <c>enfile</c> exception.\n\t    (<c>enfile</c> might still be thrown if the operating\n\t    system would return ENFILE.)</p>\n          <p>\n\t    Own Id: OTP-6968</p>\n        </item>\n        <item>\n          <p>\n\t    The <c>spawn_monitor/1</c> and <c>spawn_monitor/3</c> BIFs\n\t    are now auto-imported (i.e. they no longer need an\n\t    <c>erlang:</c> prefix).</p>\n          <p>\n\t    Own Id: OTP-6975</p>\n        </item>\n        <item>\n          <p>\n\t    On Windows, the werl window now handles resize, so that\n\t    the whole window can be utilized. Text selection is also\n\t    updated to be line oriented instead of rectangle oriented\n\t    as in earlier versions.</p>\n          <p>\n\t    Own Id: OTP-6994 Aux Id: OTP-6933 </p>\n        </item>\n        <item>\n          <p>\n\t    Kqueue support (kernel-poll) has been enabled on FreeBSD.\n\t    The problem with kqueue not detecting writes on a pipe on\n\t    FreeBSD was actually not a kqueue issue, but a writev on\n\t    pipes issue. Neither poll(), nor select() detected the\n\t    write when the bug hit. NetBSD and DragonFlyBSD probably\n\t    have or have had the same bug. This bug should have been\n\t    fixed in FreeBSD 6.3 and FreeBSD 7.0 thanks to\n\t    Jean-Sebastien Pedron.</p>\n          <p>\n\t    Own Id: OTP-7001</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.5.5.5</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Hanging writes on temporarily unavailable NFS\n\t    filesystems could cause the execution of (not file\n\t    related) erlang code to get blocked even though I/O\n\t    threads were used. This is now corrected.</p>\n          <p>\n\t    Own Id: OTP-6907 Aux Id: seq10771 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.5.5.4</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    Data passed to a driver via <c>erlang:port_call</c> could\n\t    be corrupted when the runtime system with SMP support was\n\t    used. (Thanks to YAMASHINA Hio.)</p>\n          <p>\n\t    Own Id: OTP-6879</p>\n        </item>\n        <item>\n          <p>\n\t    In the SMP emulator, if several processes called\n\t    ets:update_counter/3 (even for different tables) when the\n\t    counter values exceeded 27 bits, the counter values could\n\t    be corrupted or the emulator could crash.</p>\n          <p>\n\t    Own Id: OTP-6880 Aux Id: seq10760 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n\n<section><title>Erts 5.5.5.3</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n\t    <p>Creating a named table using <c>ets:new/2</c> or\n\t    renaming a named table using <c>ets:rename/2</c> could in\n\t    rare circumstances succeed, meaning that there would be\n\t    two or more tables with the same name. Now such call will\n\t    fail with a <c>badarg</c> exception as it is supposed to\n\t    do.</p>\n\t    <p><c>ets:delete/1</c> used on a named table now removes\n\t    the name immediately so that a new table with the same\n\t    name can be created.</p>\n\t    <p>Turning on call trace on the internal BIF that\n\t    implements <c>ets:delete/1</c> would crash the\n\t    emulator.</p>\n\t    <p>SMP emulator only: Using <c>ets:rename/2</c> on a\n\t    table that <c>ets:safe_fixtable/2</c> has been used on\n\t    could cause an emulator crash or undefined behaviour\n\t    because of a missing lock.</p>\n          <p>\n\t    Own Id: OTP-6872 Aux Id: seq10756, seq10757 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.5.5.2</title>\n\n    <section><title>Known Bugs and Problems</title>\n      <list>\n        <item>\n          <p>\n\t    ets:select/3 on ordered_set and with a chunksize a\n\t    multiple of 1000 gave all elements instead of just 1000.\n\t    Also ets:slot/2 on ordered set could give unexpected\n\t    results on SMP emulator. Both problems are corrected.</p>\n          <p>\n\t    Own Id: OTP-6842</p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n<section><title>Erts 5.5.5.1</title>\n\n    <section><title>Fixed Bugs and Malfunctions</title>\n      <list>\n        <item>\n          <p>\n\t    All exported functions in gzio.c have now been renamed to\n\t    avoid conflict with drivers that are indirectly linked\n\t    with an external zlib library.</p>\n          <p>\n\t    Own Id: OTP-6816 Aux Id: OTP-6591 </p>\n        </item>\n        <item>\n          <p>\n\t    Calling binary_to_term/1 with certain invalid binaries\n\t    would crash the emulator.</p>\n          <p>\n\t    Own Id: OTP-6817</p>\n        </item>\n      </list>\n    </section>\n\n\n    <section><title>Improvements and New Features</title>\n      <list>\n        <item>\n          <p>\n\t    Restored speed of bit-syntax matching of 32 bits\n\t    integers.</p>\n          <p>\n\t    Own Id: OTP-6789 Aux Id: seq10688 </p>\n        </item>\n      </list>\n    </section>\n\n</section>\n\n  <section>\n    <title>Erts 5.5.5</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The functions in gzio.c have been renamed to avoid\n            conflict with drivers that indirectly linked with an\n            external zlib library.</p>\n          <p>Own Id: OTP-6591</p>\n        </item>\n        <item>\n          <p>The emulator without SMP support dumped core if an\n            async-thread finished a job after the emulator had begun\n            writing an <c><![CDATA[erl_crash.dump]]></c>. </p>\n          <p>Own Id: OTP-6685</p>\n        </item>\n        <item>\n          <p>In bit syntax matching, integer fields with greater\n            size than 16Mb would fail to match. (Thanks to Bertil\n            Karlsson and Francesco Pierfederici.)</p>\n          <p>Matching out a 32-bit integer not aligned on a byte\n            boundary from a binary could cause an heap overflow (and\n            subsequent termination of the emulator).</p>\n          <p>A module that contained bit syntax construction with a\n            literal field size greater than 16Mb would fail to\n            load.</p>\n          <p>Several other similar bugs having to do with huge\n            field sizes were eliminated.</p>\n          <p>Attempting to construct a binary longer than 536870911\n            bytes will now fail with a <c><![CDATA[system_limit]]></c> exception\n            (rather than fail in mysterious ways or construct an\n            binary with incorrect contents). Similarily, attempting\n            to match a binary longer than 536870911 bytes will now\n            fail (instead of producing an incorrect result). This\n            limitation has been documented in the Efficiency Guide.\n            (The limit is in the 32-bit emulator; use the 64-bit\n            emulator if you need to handle larger binaries than\n            536870911.)</p>\n          <p>Own Id: OTP-6686</p>\n        </item>\n        <item>\n          <p>Bugs in rem and div of very large numbers are corrected.</p>\n          <p>Own Id: OTP-6692</p>\n        </item>\n        <item>\n          <p><c><![CDATA[erlang:system_info({allocator, Alloc})]]></c> didn't\n            allocate enough heap when a bignum was part of the result\n            which could cause an emulator crash.</p>\n          <p>Own Id: OTP-6693</p>\n        </item>\n        <item>\n          <p>It was previously not possible to pass\n            <c><![CDATA[erts_alloc]]></c> the same configuration via the\n            command-line, as used by default. </p>\n          <p>A <c><![CDATA[+M*]]></c> command-line argument that configure a\n            size of some sort can now be passed a value that equals\n            the size of the address space. The value used, in this\n            case, will be <c><![CDATA[\"the size of the address space\" - 1]]></c>.</p>\n          <p>Own Id: OTP-6699</p>\n        </item>\n        <item>\n          <p><c><![CDATA[SysIOVec* driver_peekq(ErlDrvPort port, int *vlen)]]></c> did not update <c><![CDATA[*vlen]]></c> if <c><![CDATA[port]]></c> was\n            invalid. <c><![CDATA[*vlen]]></c> is now set to <c><![CDATA[-1]]></c> if the\n            <c><![CDATA[port]]></c> is invalid.</p>\n          <p>The <c><![CDATA[efile]]></c> driver\n            expects <c><![CDATA[*vlen]]></c> to be updated also when the\n            <c><![CDATA[port]]></c> is invalid. This situation occurs seldom, but\n            when the runtime system has async-threads enabled and\n            ports are killed it can. When it occurred the runtime\n            system crashed.</p>\n          <p>Own Id: OTP-6729</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>For scripts written using <c><![CDATA[escript]]></c>, there is a new\n            function <c><![CDATA[escript:script_name/0]]></c>, which can be used\n            to retrieve the pathame of the script. The documentation\n            has been clarified regarding pre-defined macros such as\n            ?MODULE and the module name.</p>\n          <p>Own Id: OTP-6593</p>\n        </item>\n        <item>\n          <p>The section Guards in the chapter The Abstract Format\n            of the ERTS User's Guide has been updated.</p>\n          <p>Own Id: OTP-6600</p>\n        </item>\n        <item>\n          <p>Corrected protocol layer flue for socket options\n            SO_LINGER, SO_SNDBUF and SO_RCVBUF, for SCTP.</p>\n          <p>Own Id: OTP-6625 Aux Id: OTP-6336 </p>\n        </item>\n        <item>\n          <p>The behaviour of the inet option {active,once} on peer\n            close is improved and documented.</p>\n          <p>Own Id: OTP-6681</p>\n        </item>\n        <item>\n          <p>The inet option send_timeout for connection oriented\n            sockets is added to allow for timeouts in communicating\n            send requests to the underlying TCP stack.</p>\n          <p>Own Id: OTP-6684 Aux Id: seq10637 OTP-6681 </p>\n        </item>\n        <item>\n          <p>The command line flag <c><![CDATA[-args_file FileName]]></c>, and\n            the environment variables <c><![CDATA[ERL_AFLAGS]]></c>, and\n            <c><![CDATA[ERL_ZFLAGS]]></c> for the <c><![CDATA[erl]]></c> command have been\n            added. For more information see the <c><![CDATA[erl(1)]]></c>\n            documentation.</p>\n          <p>Own Id: OTP-6697</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[is_constant/1]]></c> type test has been deprecated.\n            <c><![CDATA[is_constant/1]]></c> is improperly named and almost\n            entirely undocumented.</p>\n          <p>Own Id: OTP-6731</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.4.3</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p><c><![CDATA[process_flag(trap_exit, Bad)]]></c> where <c><![CDATA[Bad]]></c>\n            was a term not equal to <c><![CDATA[true]]></c> or <c><![CDATA[false]]></c>,\n            didn't fail with <c><![CDATA[badarg]]></c> as it should; instead, the\n            failure was silently ignored. This bug was introduced in\n            <c><![CDATA[erts-5.5.2]]></c>.</p>\n          <p>Own Id: OTP-6627 Aux Id: OTP-6160 </p>\n        </item>\n        <item>\n          <p>The minimum and default stack size for async-threads has\n            been increased to 16 kilowords. This since the previous\n            minimum and default stack size of 8 kilowords proved to\n            be too small (introduced in <c><![CDATA[erts-5.5.4.2]]></c>).</p>\n          <p>Own Id: OTP-6628 Aux Id: OTP-6580, Seq10633 </p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>process_flag/2 accepts the new flag <c><![CDATA[sensitive]]></c>.</p>\n          <p>Own Id: OTP-6592 Aux Id: seq10555 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.4.2</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>When a port steals control over a file descriptor from\n            another port, the stealing port tests if the other port\n            is alive. This in order to be able to give an accurate\n            error message. In the runtime system with SMP support,\n            this test was done without appropriate locks held. This\n            could in worst case lead to an erroneous error message;\n            therefore, this bug is to be considered harmless.</p>\n          <p>Own Id: OTP-6602</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The default stack size for threads in the async-thread\n            pool has been shrunk to 8 kilowords, i.e., 32 KB on\n            32-bit architectures. This small default size has been\n            chosen since the amount of async-threads might be quite\n            large. The default stack size is enough for drivers\n            delivered with Erlang/OTP, but might not be sufficiently\n            large for other dynamically linked in drivers that use\n            the <c><![CDATA[driver_async()]]></c> functionality. A suggested\n            stack size for threads in the async-thread pool can be\n            configured via the <c><![CDATA[+a]]></c> command line argument of\n            <c><![CDATA[erl(1)]]></c>.</p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6580</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.4.1</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Setting the time on the system while using heart on a\n            linux machine where the emulator was built with\n            clock_gettime support (default from Linux 2.6/erts-5.5.4\n            and upwards), could make the heart command fire. This was\n            due to bug in the heart executable which is now\n            corrected.</p>\n          <p>Own Id: OTP-6598 Aux Id: seq10614 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.4</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Corrected misspelling of '<c><![CDATA[-pz]]></c>' in the help text\n            for <c><![CDATA[erlc]]></c>. (Thanks to Ulf Wiger.)</p>\n          <p>Own Id: OTP-6433</p>\n        </item>\n        <item>\n          <p>The MD5 calculation of a BEAM file done by\n            <c><![CDATA[code:module_md5/1]]></c>, <c><![CDATA[beam_lib:md5/1]]></c>, and by\n            the compiler for the default value of the <c><![CDATA[vsn]]></c>\n            attribute have all been changed so that its result will\n            be the same on all platforms; modules containing funs\n            could get different MD5s on different platforms.</p>\n          <p>Own Id: OTP-6459</p>\n        </item>\n        <item>\n          <p>The emulator could dump core while writing an\n            <c><![CDATA[erl_crash.dump]]></c> file if there were funs with a\n            large terms in its environment. Since there is no way to\n            inspect a fun's environment in the crashdump_viewer\n            application anyway, a variables in the environment are\n            now set to [] before dumping the fun. (Thanks to\n            Jean-Sebastien Pedron.)</p>\n          <p>Own Id: OTP-6504</p>\n        </item>\n        <item>\n          <p><c><![CDATA[{Port, {exit_status, S}}]]></c> messages from ports\n            opened with the <c><![CDATA[exit_status]]></c> option could under\n            rare circumstances be delayed. This bug was present on\n            Erlang runtime systems without SMP support on all unix\n            operating systems other than SunOS.</p>\n          <p>Own Id: OTP-6528</p>\n        </item>\n        <item>\n          <p>A bug in linuxthreads could cause the emulator to dump\n            core when dlerror() was called before the first call to\n            dlopen(). As a workaround the emulator always makes a\n            call to dlopen() on initialization when linuxthreads is\n            used as thread library.</p>\n          <p>Own Id: OTP-6530</p>\n        </item>\n        <item>\n          <p>file:sync/1 did not do anything on Windows. Now it calls\n            the system function for flushing buffers\n            (FlushFileBuffers()). (Thanks to Matthew Sackman.)</p>\n          <p>Own Id: OTP-6531</p>\n        </item>\n        <item>\n          <p><c><![CDATA[open_port/2]]></c> could on the runtime system with SMP\n            support fail with the wrong exit reason when a port\n            couldn't be created. When this happened the exit reason\n            was typically <c><![CDATA[eintr]]></c>, or <c><![CDATA[ebusy]]></c> instead of\n            <c><![CDATA[eagain]]></c>.</p>\n          <p>Own Id: OTP-6536</p>\n        </item>\n        <item>\n          <p>The file driver (efile_drv) did not flush data written\n            using the option 'delayed_write' after the set timeout\n            time, rather at the next file operation. This bug has now\n            been corrected.</p>\n          <p>Own Id: OTP-6538</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>An interface towards the SCTP Socket API Extensions\n            has been implemented.It is an Open Source patch courtesy\n            of Serge Aleynikov and Leonid Timochouk. The Erlang code\n            parts has been adapted by the OTP team, changing the\n            Erlang API somewhat.</p>\n          <p>The Erlang interface consists of the module\n            <c><![CDATA[gen_sctp]]></c> and an include file\n            <c><![CDATA[-include_lib(\"kernel/include/inet_sctp.hrl\").]]></c> for\n            option record definitions. The <c><![CDATA[gen_sctp]]></c> module is\n            documented.</p>\n          <p>The delivered Open Source patch, before the OTP team\n            rewrites, was written according to\n            http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13\n            and was claimed to work fine, tested on Linux Fedora Core\n            5.0 (kernel 2.6.15-2054 or later) and on Solaris 10 and\n            11. The OTP team rewrites used the same standard document\n            but might have accidentally broken some functionality. If\n            so it will soon be patched to working state. The tricky\n            parts in C and the general design has essentially not\n            changed. During the rewrites the code was hand tested on\n            SuSE Linux Enterprise Server 10, and briefly on Solaris\n            10. Feedbach on code and docs is very much\n            appreciated.</p>\n          <p>The SCTP interface is in beta state. It has only been\n            hand tested and has no automatic test suites in OPT\n            meaning everything is most certainly not tested. Socket\n            active mode is broken. IPv6 is not tested. The\n            documentation has been reworked due to the API changes,\n            but has not been proofread after this.</p>\n          <p>Thank you from the OTP team to Serge Aleynikov and\n            Leonid Timochouk for a valuable contribution. We hope we\n            have not messed it up too much.</p>\n          <p>Own Id: OTP-6336</p>\n        </item>\n        <item>\n          <p>A <c><![CDATA[{minor_version,Version}]]></c> option is now recognized\n            by <c><![CDATA[term_to_binary/2]]></c>. {minor_version,1} will cause\n            floats to be encoded in an exact and more space-efficient\n            way compared to the previous encoding.</p>\n          <p>Own Id: OTP-6434</p>\n        </item>\n        <item>\n          <p>There is a new <c><![CDATA[escript]]></c> program that can be used\n            for writing scripts in Erlang. Erlang scripts don't need\n            to be compiled and any arguments can be passed to them\n            without risk that they are interpreted by the Erlang\n            system.</p>\n          <p>Own Id: OTP-6505</p>\n        </item>\n        <item>\n          <p>Setting and getting socket options in a \"raw\" fashion is\n            now allowed. Using this feature will inevitably produce\n            non portable code, but will allow setting ang getting\n            arbitrary uncommon options on TCP stacks that do have\n            them.</p>\n          <p>Own Id: OTP-6519</p>\n        </item>\n        <item>\n          <p>Miscellaneous signal handling improvements on the Erlang\n            runtime system with SMP support.</p>\n          <p>The fallback implementation of spin locks and atomic\n            operations are now implemented using pthread spin locks\n            when pthread spin locks are found on the system.</p>\n          <p>The Erlang runtime system with SMP support can now run on\n            Linux systems that has Linuxthreads instead of NPTL\n            (Native POSIX Thread Library). Note that the SMP support\n            hasn't been as thoroughly tested with Linuxthreads as\n            with NPTL. A runtime system with SMP support will\n            therefore not be built by default on Linux when NPTL\n            isn't found. In order to force a build of the runtime\n            system with SMP support, pass <c><![CDATA[--enable-smp-support]]></c>\n            to <c><![CDATA[configure]]></c> when building OTP.</p>\n          <p>Own Id: OTP-6525</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.3.1</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p><c><![CDATA[erlang:system_flag(multi_scheduling, block)]]></c> could\n            cause the emulator with SMP support to deadlock.</p>\n          <p>Own Id: OTP-6431 Aux Id: OTP-6403 </p>\n        </item>\n        <item>\n          <p>The runtime system with SMP support failed to call the\n            driver timeout callback of ports in state closing. This\n            could cause ports to fail flushing their I/O queues.</p>\n          <p>Own Id: OTP-6432</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[{Port, closed}]]></c> message from a closed port\n            could arrive at the port owner before <c><![CDATA[Port]]></c> had\n            been removed from the result of <c><![CDATA[erlang:ports/0]]></c> in\n            the runtime system with SMP support.</p>\n          <p>Own Id: OTP-6437</p>\n        </item>\n        <item>\n          <p>The async id of async jobs created via\n            <c><![CDATA[driver_async]]></c> wasn't created in a thread safe\n            manner in the runtime system with SMP support. This could\n            in worst case cause <c><![CDATA[driver_async_cancel()]]></c> to\n            cancel another async job than intended.</p>\n          <p>Own Id: OTP-6438</p>\n        </item>\n        <item>\n          <p>Under rare circumstances a terminating connection between\n            two nodes could cause an instantaneous reconnect between\n            the two nodes to fail on the runtime system with SMP\n            support.</p>\n          <p>Own Id: OTP-6447</p>\n        </item>\n        <item>\n          <p>In the documentation of the driver entry field\n            <c><![CDATA[extended_marker]]></c> of erts version 5.5.3\n            (<c><![CDATA[driver_entry(3)]]></c>), the following is stated: \"The\n            following fields are ignored if this field is equal to\n            <c><![CDATA[0]]></c>\". This is a documentation bug and has been\n            changed to: \"If this field is equal to <c><![CDATA[0]]></c>, all the\n            fields following this field also <em>have</em> to be\n            <c><![CDATA[0]]></c>, or <c><![CDATA[NULL]]></c> in case it is a pointer field\".</p>\n          <p>The runtime check for detection of old incompatible\n            drivers made when loading drivers has been improved. The\n            emulator can, however, not make sure that a driver that\n            doesn't use the extended driver interface isn't\n            incompatible. Therefore, when loading a driver that\n            doesn't use the extended driver interface, there is a\n            risk that it will be loaded also when the driver is\n            incompatible. When the driver use the extended driver\n            interface, the emulator can verify that it isn't of an\n            incompatible driver version. You are therefore advised to\n            use the extended driver interface.</p>\n          <p>For more information see the <c><![CDATA[erl_driver(3)]]></c> and\n            <c><![CDATA[driver_entry(3)]]></c> documentation.</p>\n          <p>Own Id: OTP-6452 Aux Id: OTP-6330 </p>\n        </item>\n        <item>\n          <p>When terminating ports on the runtime system with SMP\n            support, removal of links to processes was done without\n            locking the link lock on processes. This could cause an\n            emulator crash.</p>\n          <p>Own Id: OTP-6475</p>\n        </item>\n        <item>\n          <p>The emulator with SMP support could crash when a port\n            flushed its I/O queue by calling <c><![CDATA[driver_async()]]></c>\n            from the timeout driver callback.</p>\n          <p>Own Id: OTP-6479</p>\n        </item>\n        <item>\n          <p>Large exit reasons could under rare circumstances cause\n            the runtime system with SMP support to crash.</p>\n          <p>Own Id: OTP-6521</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Faster system calls for keeping the time accurate are\n            used on newer Linux kernels, which can result in a\n            significant speed-up of the emulator on those systems.</p>\n          <p>Own Id: OTP-6430</p>\n        </item>\n        <item>\n          <p>Added number of async threads and number of scheduler\n            threads to the system information that can be retrieved\n            via <c><![CDATA[driver_system_info()]]></c>. For more information see\n            the <c><![CDATA[erl_driver(3)]]></c> documentation.</p>\n          <p>Own Id: OTP-6440</p>\n        </item>\n        <item>\n          <p>When <c><![CDATA[SIGUSR1]]></c> is received by the runtime system\n            with SMP support, the <c><![CDATA[erl_crash.dump]]></c> is now\n            written by a special thread, instead of as before\n            directly from the signal handler.</p>\n          <p>Own Id: OTP-6465</p>\n        </item>\n        <item>\n          <p>term_to_binary/2 with compression is now faster.</p>\n          <p></p>\n          <p>term_to_binary/2 now accepts the option\n            '<c><![CDATA[{compressed,Level}]]></c>' for specifying the\n            compression level. <c><![CDATA[Level]]></c> must be in the range 0\n            (no compression) through 9 (highest compression level).\n            Default is 6.</p>\n          <p>Future compatibility bugfix: binary_to_term/1 did not\n            handle the <c><![CDATA[Uniq]]></c> and <c><![CDATA[Index]]></c> fields\n            correctly.</p>\n          <p>Own Id: OTP-6494</p>\n        </item>\n        <item>\n          <p>Removed unnecessary reallocation when initializing\n            kernel-poll set.</p>\n          <p>Own Id: OTP-6516</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.3</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Node and fun table entries could under rare circumstances\n            be deallocated multiple times on the emulator with SMP\n            support.</p>\n          <p>Own Id: OTP-6369</p>\n        </item>\n        <item>\n          <p>epoll_wait() can repeat entries for the same file\n            descriptor in the result array. This could cause the\n            ready_input, ready_output, or event callbacks of a driver\n            to unintentionally be called multiple times. We have only\n            noted repeated entries when an error condition has\n            occurred on the file descriptor. In this case, the\n            repeated entries should normally not be a problem for the\n            driver since it should detect the error and de-select the\n            file descriptor. Therefore this bug should be considered\n            harmless. The emulator now coalesce repeated entries into\n            one.</p>\n          <p>You are only affected by this bug if you are using\n            erts-5.5.2.* and the kernel-poll feature on linux.</p>\n          <p>Own Id: OTP-6376 Aux Id: OTP-6222 </p>\n        </item>\n        <item>\n          <p>If a process that was waiting in gen_tcp:accept/1 was\n            killed, calling gen_tcp:accept/1 again on the same listen\n            socket would fail with '<c><![CDATA[{error,einval}]]></c>'.</p>\n          <p>Own Id: OTP-6381 Aux Id: seq10535 </p>\n        </item>\n        <item>\n          <p>The emulator failed to start on Solaris 10 when\n            kernel-poll support was enabled and the maximum number of\n            filedescriptors configured was less than or equal to 256.</p>\n          <p>Own Id: OTP-6384 Aux Id: OTP-6222 </p>\n        </item>\n        <item>\n          <p>The R10B compiler could generate unsafe\n            <c><![CDATA[bs_save/bs_restore]]></c> instructions that could cause\n            memory corruption. (The R11B compiler does not have that\n            problem.) The erlang emulator will now refuse to load\n            R10B-compiled modules that contain such unsafe\n            <c><![CDATA[bs_save/bs_restore]]></c> instructions. In addition, the\n            beam_validator module in the compiler will also reject\n            such instructions (in case it is used to validate R10B\n            code). (Thanks to Matthew Reilly.)</p>\n          <p>Own Id: OTP-6386</p>\n        </item>\n        <item>\n          <p>Process and port timers could fail to work properly on\n            the runtime system with SMP support. Many thanks to\n            Dmitriy Kargapolov and Serge Aleynikov who tracked down\n            this bug.</p>\n          <p>Own Id: OTP-6387</p>\n        </item>\n        <item>\n          <p>Bit syntax code compiled by an R10B compiler that matched\n            out a floating point number would not properly check that\n            the floating point number was valid; if the float was,\n            for instance, NaN the emulator could crash.</p>\n          <p>Own Id: OTP-6395</p>\n        </item>\n        <item>\n          <p>statistics(runtime) on Windows used to return the elapsed\n            system time for the process, instead of the user time.\n            Corrected. (Thanks to Robert Virding.)</p>\n          <p>Own Id: OTP-6407</p>\n        </item>\n        <item>\n          <p>A loadable driver (loaded by erl_ddll) which used\n            driver_async() would cause the emulator to crash. (Thanks\n            to Dmitriy Kargapolov.)</p>\n          <p>Own Id: OTP-6410</p>\n        </item>\n        <item>\n          <p>Under rare circumstances the emulator on unix platforms\n            could fail to terminate the Erlang port corresponding to\n            a port program opened with the <c><![CDATA[exit_status]]></c> option.</p>\n          <p>Own Id: OTP-6411</p>\n        </item>\n        <item>\n          <p>A link removed via <c><![CDATA[unlink/1]]></c> could under rare\n            circumstances transfer exit signals for a short period of\n            time after the call to <c><![CDATA[unlink/1]]></c> had returned when\n            the runtime system with SMP support was used.</p>\n          <p>Own Id: OTP-6425 Aux Id: OTP-6160 </p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>In the runtime system with SMP support, ports are now\n            being scheduled on the scheduler threads interleaved with\n            processes instead of being run in a separate I/O thread.</p>\n          <p>Own Id: OTP-6262</p>\n        </item>\n        <item>\n          <p>More interfaces are added in erl_ddll, to support\n            different usage scenarios.</p>\n          <p>Own Id: OTP-6307 Aux Id: OTP-6234 </p>\n        </item>\n        <item>\n          <p>In the runtime system with SMP support, the global\n            I/O lock has been replaced with a more fine grained port\n            locking scheme. Port locking is either done on driver\n            level, i.e., all ports executing the same driver share a\n            lock, or on port level, i.e., each port has its own lock.\n            Currently the inet driver, the efile driver, and the\n            spawn driver use port level locking and all other\n            statically linked in drivers use driver level locking. By\n            default dynamically linked in drivers will use locking on\n            driver level. For more information on how to enable port\n            level locking see the <c><![CDATA[erl_driver(3)]]></c> and the\n            <c><![CDATA[driver_entry(3)]]></c> man pages. </p>\n          <p>As of erts\n            version 5.5.3 the driver interface has been extended. The\n            extended interface introduce version management, the\n            possibility to pass capability flags to the runtime\n            system at driver initialization, and some new driver API\n            functions. For example, the <c><![CDATA[driver_system_info()]]></c>\n            function which can be used to determine if the driver is\n            run in a runtime system with SMP support or not. The\n            extended interface doesn't have to be used, <em>but</em>\n            dynamically linked in driver <em>have</em> to be\n            recompiled. For information see the <c><![CDATA[erl_driver(3)]]></c>\n            and the <c><![CDATA[driver_entry(3)]]></c> man pages. </p>\n          <p><em>NOTE:</em> Dynamically linked in drivers\n            <em>have</em> to be recompiled. </p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6330 Aux Id: OTP-6262 </p>\n        </item>\n        <item>\n          <p>A test and debug feature which modifies the timing of the\n            runtime system has been added. For more information, see\n            documentation of the <c><![CDATA[+T<Level>]]></c> command line\n            argument of <c><![CDATA[erl(1)]]></c>.</p>\n          <p>Own Id: OTP-6382</p>\n        </item>\n        <item>\n          <p>The version of zlib (http://zlib.net) linked into\n            run-time system has been updated to version 1.2.3.</p>\n          <p>Own Id: OTP-6394</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[erlc]]></c> program now passes on the <c><![CDATA[-smp]]></c>\n            and <c><![CDATA[-hybrid]]></c> options to the Erlang emulator it\n            starts. This is mainly useful for compiling native code,\n            because native code must be compiled with same type of\n            run-time system as in which it will be run.</p>\n          <p>If the <c><![CDATA[-s]]></c> option is given, <c><![CDATA[erlc]]></c> now\n            prints a warning that it is deprecated and that it will\n            be removed in R12B.</p>\n          <p>Own Id: OTP-6398</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[schedulers]]></c> option of\n            <c><![CDATA[erlang:system_flag/2]]></c> has been removed, i.e., the\n            number of scheduler threads cannot be changed after\n            emulator boot time any more.</p>\n          <p>A <c><![CDATA[multi_scheduling]]></c> option has been added to\n            <c><![CDATA[erlang:system_flag/2]]></c>. This option can be used for\n            blocking and unblocking multi-scheduling. For more\n            information see the <c><![CDATA[erlang(3)]]></c> documentation.</p>\n          <p>Own Id: OTP-6403</p>\n        </item>\n        <item>\n          <p>A port program that had been started with the\n            <c><![CDATA[exit_status]]></c> option and closed one of the pipes\n            used for communication with the emulator caused the\n            emulator to continuously poll for termination of the port\n            program. This only became a problem when the emulator\n            didn't have other things to do and the port program\n            closed a pipe much earlier than it terminated. When the\n            emulator had other things to do, such as running Erlang\n            processes, the emulator polled for termination in between\n            scheduling of processes.</p>\n          <p>Now the emulator doesn't poll for termination of the port\n            program at all; instead, it waits for the child signal\n            from the terminated port program to arrive and then\n            schedules the Erlang port for termination.</p>\n          <p>The termination of any port programs have also been\n            optimized. Previously the termination of any port program\n            did always cause a scan of a table of the size equal to\n            maximum number of file descriptors. If the maximum number\n            of file descriptors was large, this scan could be quite\n            expensive. Now the search have been reduced to the set of\n            ports started with the <c><![CDATA[exit_status]]></c> option.</p>\n          <p>Note, all of the above only applies to Erlang emulators\n            on Unix platforms.</p>\n          <p>Own Id: OTP-6412 Aux Id: seq10194 </p>\n        </item>\n        <item>\n          <p>* BEAM: added support for floating-point exceptions on\n            FreeBSD (32-bit x86)</p>\n          <p>* SMP: made locking procedures work even when native\n            lock operations aren't implemented</p>\n          <p>* SMP: improved timing accuracy in the timer thread\n            (if enabled)</p>\n          <p>Own Id: OTP-6424</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.2.2</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>A bug in the kernel poll implementation could cause the\n            emulator to omit polling for events on file descriptors.\n            The bug was only present when using the kernel poll\n            implementation based on epoll or kqueue. This bug was\n            introduced in erts-5.5.2.</p>\n          <p>Own Id: OTP-6344 Aux Id: OTP-6222 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.2.1</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The run_erl program now acquires its pseudo-ttys using\n            openpty(3), so that it will work on newer Linux\n            distributions that don't have the traditional pseudo-tty\n            devices in the file system. On platforms that don't have\n            openpty(3), run_erl will still search for pseudo-tty\n            devices in the file system.</p>\n          <p>The run_erl program will now wait using waitpid(3) to\n            prevent the program it spawned to become defunct. run_erl\n            will also terminate after a delay of 5 seconds (to allow\n            any pending output to be written to the log file) if the\n            spawned program terminates even if some child of it still\n            holds stdin and/or stdout open.</p>\n          <p>Own Id: OTP-6225 Aux Id: seq10500 </p>\n        </item>\n        <item>\n          <p>A bug in ordered_set ETS datatyp caused ets:select (and\n            match) to return faulty results when the table contained\n            process id's from another node.</p>\n          <p>Own Id: OTP-6338</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.2</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>erlc: A typo in the help text for '-pa path' was\n            corrected.</p>\n          <p>Own Id: OTP-6218</p>\n        </item>\n        <item>\n          <p>Failure in port command/control driver callbacks could\n            crash the non-SMP emulator. This bug was introduced in\n            the 5.5 version of erts.</p>\n          <p>Own Id: OTP-6224</p>\n        </item>\n        <item>\n          <p>Erroneous \"<c><![CDATA[Input driver gone away without deselecting!]]></c>\" error reports could sometimes occur\n            when a driver instance terminated in the ready_output()\n            callback of the driver. This bug was only present in\n            emulators that used poll(). Note, that this bug was\n            harmless, the only effect it had was the erroneous error\n            report.</p>\n          <p>Own Id: OTP-6229 Aux Id: OTP-3993, Seq5266, Seq7247,\n            OTP-4307 </p>\n        </item>\n        <item>\n          <p>The emulator could cause a type assertion failure while\n            writing an erl_crash.dump, causing the erl_crash.dump to\n            be terminated and a core dump generated.</p>\n          <p>Own Id: OTP-6235 Aux Id: seq10444 </p>\n        </item>\n        <item>\n          <p>The registered name of a process is now the last\n            observable resource removed before links and monitors are\n            triggered when a process terminates.</p>\n          <p>Previously ets tables were removed after the registered\n            name. This could cause problems on the runtime system\n            with SMP support for code that expected that ets tables\n            owned by a specific process had been removed if the name\n            of the process had been removed.</p>\n          <p>Own Id: OTP-6237</p>\n        </item>\n        <item>\n          <p>Failure to fork() a new (os) process could cause the\n            emulator to deadlock. This bug affect all emulators with\n            SMP support, and emulators with async thread support on\n            SunOS.</p>\n          <p>Own Id: OTP-6241 Aux Id: OTP-3906 </p>\n        </item>\n        <item>\n          <p>Fprof traces could become truncated for the SMP emulator.\n            This bug has now been corrected.</p>\n          <p>Own Id: OTP-6246</p>\n        </item>\n        <item>\n          <p>The undocumented functions inet:getiflist/0,1\n            inet:ifget/2,3 and inet:getif/1 were completely broken on\n            Windows. That has been fixed.</p>\n          <p>Own Id: OTP-6255</p>\n        </item>\n        <item>\n          <p>Behavior in case of disappeared nodes when using the\n            dist_auto_connect once got changed in R11B-1. The\n            timeouts regarding normal distributed operations is now\n            reverted to the old (pre R11B-1).</p>\n          <p>Own Id: OTP-6258 Aux Id: OTP-6200, seq10449 </p>\n        </item>\n        <item>\n          <p>The bsl and bsr operators could cause the emulator to\n            crash if given invalid arguments. (Thanks to datacompboy\n            and Per Gustafsson.)</p>\n          <p>Own Id: OTP-6259</p>\n        </item>\n        <item>\n          <p>driver_cancel_timer() could under certain circumstances\n            fail to cancel the timer on the runtime system with SMP\n            support.</p>\n          <p>Own Id: OTP-6261</p>\n        </item>\n        <item>\n          <p>A call to erlang:system_info(info) could deadlock the\n            runtime system with SMP support.</p>\n          <p>Own Id: OTP-6268</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Exit signals are now truly asynchronous in the runtime\n            system with SMP support. This simplifies locking in bifs\n            a lot, and makes process termination cheaper.</p>\n          <p>Own Id: OTP-6160</p>\n        </item>\n        <item>\n          <p>When tracing on the runtime system with SMP support it\n            can be difficult to know when a trace has been delivered\n            to the tracer. A new built in function\n            <c><![CDATA[erlang:trace_delivered/1]]></c> has been introduced in\n            order to make it easier to know when the trace has been\n            delivered. See the erlang(3) man page for more\n            information.</p>\n          <p>Own Id: OTP-6205 Aux Id: OTP-6269 </p>\n        </item>\n        <item>\n          <p>Kernel poll support can now be combined with SMP support.\n            Currently the following kernel poll versions exist:\n            <c><![CDATA[/dev/poll]]></c>, <c><![CDATA[epoll]]></c>, and <c><![CDATA[kqueue]]></c>. Linux\n            <c><![CDATA[kpoll]]></c> has been replaced with <c><![CDATA[epoll]]></c>. Some\n            time in the future there will also be a kernel poll\n            version using Solaris event ports.</p>\n          <p>The \"check io\" implementation for unix has been\n            completely rewritten. The current kernel poll\n            implementation reduce the amount of system calls needed\n            compared to the old kernel poll implementation.</p>\n          <p>When <c><![CDATA[epoll]]></c> or <c><![CDATA[kqueue]]></c> is used either\n            <c><![CDATA[poll]]></c> or <c><![CDATA[select]]></c> is used as fallback.\n            Previously only <c><![CDATA[poll]]></c> could be used as fallback.\n            Since <c><![CDATA[select]]></c> now can be used as fallback, kernel\n            poll support is now also available on newer MacOSX. Note\n            however, when <c><![CDATA[select]]></c> is used as fallback, the\n            maximum number of file descriptors is limited to\n            <c><![CDATA[FD_SETSIZE]]></c>. </p>\n          <p>Kernel poll support is now enabled by default if\n            <c><![CDATA[/dev/poll]]></c>, <c><![CDATA[epoll]]></c>, or <c><![CDATA[kqueue]]></c> is found\n            when building OTP, i.e. you do not have to pass the\n            <c><![CDATA[--enable-kernel-poll]]></c> argument to <c><![CDATA[configure]]></c>.\n            As before, kernel poll is disabled by default in the\n            runtime system. In order to enable it, pass the\n            <c><![CDATA[+Ktrue]]></c> command line argument to <c><![CDATA[erl]]></c>.</p>\n          <p>Note: <c><![CDATA[configure]]></c> will refuse to enable kernel poll\n            support on FreeBSD since <c><![CDATA[kqueue]]></c> have problems with\n            (at least) pipes on all version of FreeBSD that we have\n            tested.</p>\n          <p>Own Id: OTP-6222 Aux Id: seq10380 </p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[erl_ddll]]></c> module and the code in the emulator\n            have been completely rewritten; several bugs were fixed.</p>\n          <p>Own Id: OTP-6234</p>\n        </item>\n        <item>\n          <p>The SMP emulator now avoids locking for the following\n            operations (thus making them as fast as in the UP\n            emulator): <c><![CDATA[atom_to_list/1]]></c>, atom comparison, atom\n            hashing, <c><![CDATA[erlang:apply/3]]></c>.</p>\n          <p>Own Id: OTP-6252</p>\n        </item>\n        <item>\n          <p>There are new BIFs <c><![CDATA[erlang:spawn_monitor/1,3]]></c>,\n            and the new option <c><![CDATA[monitor]]></c> for\n            <c><![CDATA[spawn_opt/2,3,4,5]]></c>.</p>\n          <p>The <c><![CDATA[observer_backend]]></c> module has been updated to\n            handle the new BIFs.</p>\n          <p>Own Id: OTP-6281</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.1.1</title>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>There is now an option read_packets for UDP sockets that\n            sets the maximum number of UDP packets that will be read\n            for each invocation of the socket driver.</p>\n          <p>Own Id: OTP-6249 Aux Id: seq10452 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>Erts 5.5.1</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Complex pattern matching of strings would fail in the 64\n            bits emulator because of a bug in the loader. (Thanks to\n            Igor Goryachev.)</p>\n          <p>Own Id: OTP-6142</p>\n        </item>\n        <item>\n          <p><c><![CDATA[-134217728 div 134217728]]></c> and <c><![CDATA[-134217728 rem 134217728]]></c> would be calculated incorrectly.\n            <c><![CDATA[abs(-2147483648)]]></c> could in unlucky circumstances\n            cause a heap overflow, as could size(Binary) when size of\n            the binary was larger than 128Mb.</p>\n          <p>Own Id: OTP-6154</p>\n        </item>\n        <item>\n          <p>erlang:display/1 displayed erroneous values for negative\n            integers.</p>\n          <p>Big integers (both positive and negative) were previously\n            displayed in hexadecimal form while small integers were\n            displayed in decimal form. All integers are now displayed\n            in decimal form.</p>\n          <p>NOTE: erlang:display/1 should only be used for debugging.</p>\n          <p>Own Id: OTP-6156</p>\n        </item>\n        <item>\n          <p>A call to erlang:trace/3 with erroneous flags caused the\n            SMP emulator to deadlock instead of exiting the calling\n            process with badarg.</p>\n          <p>Own Id: OTP-6175</p>\n        </item>\n        <item>\n          <p>A bug causing the emulator to hang when exiting a process\n            that is exception traced has been fixed.</p>\n          <p>Own Id: OTP-6180</p>\n        </item>\n        <item>\n          <p>ets:rename/1 could deadlock, or crash the SMP emulator\n            when the table wasn't a named table.</p>\n          <p>ets:next/2, and ets:prev/2 could return erroneous results\n            on the SMP emulator.</p>\n          <p>Own Id: OTP-6198 Aux Id: seq10392, seq10415 </p>\n        </item>\n        <item>\n          <p>A memory allocation bug could cause the SMP emulator to\n            crash when a process had executed a <c><![CDATA[receive after]]></c>\n            with a larger timeout than 10 minutes.</p>\n          <p>Own Id: OTP-6199</p>\n        </item>\n        <item>\n          <p>The runtime system with SMP support did not slowly adjust\n            its view of time when the system time suddenly changed.</p>\n          <p>Timeouts could sometimes timeout too early on the runtime\n            system with SMP support.</p>\n          <p>Own Id: OTP-6202</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The smp runtime system now automatically detects the\n            number of logical processors on MacOSX (darwin) and\n            OpenBSD.</p>\n          <p>The smp runtime system is now built by default on MacOSX\n            (darwin) on x86.</p>\n          <p>Own Id: OTP-6119</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[-smp]]></c> command line argument now take the\n            following options: <c><![CDATA[enable]]></c>, <c><![CDATA[auto]]></c>, or\n            <c><![CDATA[disable]]></c>.</p>\n          <p>Especially the <c><![CDATA[-smpauto]]></c> argument is useful since\n            it starts the Erlang runtime system with SMP support if\n            it is available and more than one logical processor are\n            detected; otherwise, it starts the Erlang runtime system\n            without SMP support. For more information see the\n            <c><![CDATA[erl(1)]]></c> man page.</p>\n          <p>Own Id: OTP-6126</p>\n        </item>\n        <item>\n          <p>Increased the reduction cost for sending messages in the\n            SMP emulator so it behaves more like the non-SMP\n            emulator.</p>\n          <p>Own Id: OTP-6196</p>\n        </item>\n        <item>\n          <p>A port running a dynamically linked-in driver that exits\n            due to the driver being unloaded now exits with exit\n            reason <c><![CDATA[driver_unloaded]]></c>. Previously the port exited\n            with exit reason <c><![CDATA[-1]]></c>.</p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6204</p>\n        </item>\n        <item>\n          <p>Changed name of the <c><![CDATA[erlang:system_info/1]]></c> argument\n            <c><![CDATA[scheduler]]></c> to <c><![CDATA[scheduler_id]]></c>. This since the\n            <c><![CDATA[scheduler]]></c> argument so easily could be mixed up\n            with the <c><![CDATA[schedulers]]></c> argument (both returning\n            integers).</p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6208</p>\n        </item>\n        <item>\n          <p>The changes below were made by Mikael Pettersson, HiPE.</p>\n          <p>HiPE runtime system:</p>\n          <p>Reduce overheads in the HiPE runtime system's BIF glue\n            code.</p>\n          <p>Fix bug when exceptions are thrown from BEAM to HiPE.</p>\n          <p>Support SPARC on Linux.</p>\n          <p>Support x86 on FreeBSD.</p>\n          <p>Floating-point exceptions:</p>\n          <p>Reduce overheads in checking results of floating-point\n            operations.</p>\n          <p>Minor bug fix in SSE2 floating-point exception\n            handling.</p>\n          <p>Support SSE2 floating-point exceptions on 32-bit x86\n            machines.</p>\n          <p>Make FP exceptions work in the SMP runtime system on\n            FreeBSD/x86.</p>\n          <p>Support floating-point exceptions on SPARCs running\n            Linux.</p>\n          <p>Runtime system:</p>\n          <p>Minor scheduler optimisation in the non-SMP runtime\n            system.</p>\n          <p>Substantial reduction of I/O thread overheads in the\n            SMP runtime system if the separate timer thread is used.\n            (In R11B-1, the separate timer thread is not used.)</p>\n          <p>Own Id: OTP-6211</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.5</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Previously <c><![CDATA[unlink/1]]></c> and <c><![CDATA[erlang:demonitor/2]]></c>\n            behaved completely asynchronous. This had one undesirable\n            effect, though. You could never know when you were\n            guaranteed <em>not</em> to be affected by a link that you\n            had unlinked or a monitor that you had demonitored.</p>\n          <p>The new behavior of <c><![CDATA[unlink/1]]></c> and\n            <c><![CDATA[erlang:demonitor/2]]></c> can be viewed as two operations\n            performed atomically. Asynchronously send an unlink\n            signal or a demonitor signal, and ignore any future\n            results of the link or monitor.</p>\n          <p><em>NOTE</em>: This change can cause some obscure code\n            to fail which previously did not. For example, the\n            following code might hang:</p>\n          <code type=\"none\"><![CDATA[\n            Mon = erlang:monitor(process, Pid),\n            %% ...\n            exit(Pid, bang),\n            erlang:demonitor(Mon),\n            receive\n                {'DOWN', Mon , process, Pid, _} -> ok\n            %% We were previously guaranteed to get a down message\n            %% (since we exited the process ourself), so we could\n            %% in this case leave out:\n            %% after 0 -> ok\n            end,\n          ]]></code>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-5772</p>\n        </item>\n        <item>\n          <p>Two bugs fixed: If the environment variable <c><![CDATA[ERL_FLAGS]]></c>\n            was set, its contents would be appended to the end of the\n            command line even if the command line had an <c><![CDATA[-extra]]></c>\n            options. Changed to place the options from <c><![CDATA[ERL_FLAGS]]></c>\n            just before <c><![CDATA[-extra]]></c>. Also, the <c><![CDATA[-smp]]></c> and\n            <c><![CDATA[-hybrid]]></c> flags no longer have any effect if placed\n            after <c><![CDATA[-extra]]></c>.</p>\n          <p>Own Id: OTP-6054</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The documentation for writing drivers in the ERTS User's\n            Guide has been expanded and updated.</p>\n          <p>Own Id: OTP-5192</p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[andalso]]></c> and <c><![CDATA[orelse]]></c> operators are\n            now allowed to be used in guards. That also applies to\n            match specifications.</p>\n          <p>Own Id: OTP-5894 Aux Id: OTP-5149 </p>\n        </item>\n        <item>\n          <p>There is a new trace match spec function\n            <c><![CDATA[{exception_trace}]]></c> and a corresponding trace\n            message <c><![CDATA[exception_from]]></c> that can be used to trace\n            on any exit from a function, both normal function return\n            and exception return. See the documentation for\n            details.</p>\n          <p>The <c><![CDATA[return_to]]></c> trace message is now also\n            generated when the execution returns to a function due to\n            catching an exception.</p>\n          <p>Own Id: OTP-5956</p>\n        </item>\n        <item>\n          <p>Erlang runtime system with SMP (symmetric multi processing)\n            support.</p>\n          <p>The runtime system with SMP support is in this release\n            focused on stability and there are a number of steps\n            with optimizations to follow before it will take \n            full advantage of multi processor systems.\n            The released system is however truly multi threaded\n            and you will notice increased performance\n            for many applications already.\n            We recommend that you evaluate your application on  \n            the SMP version of the runtime system and wait for some\n            more optimizations before you use it in a real product. \n            You will then discover if there are any problems in \n            your application that needs to be fixed in order for \n            it to work properly in a multi threaded environment. \n            More optimized versions of the runtime system\n            with SMP support will be included in the R11B\n            maintenance releases.</p>\n          <p>The SMP enabled runtime system will be started if\n            the <c><![CDATA[-smp]]></c> command line argument is passed to\n            the <c><![CDATA[erl]]></c> command. In order to make use of more than\n            one processor core, multiple scheduler threads are used. By\n            default, the number of scheduler threads will equal\n            the number of processor cores. The number of scheduler\n            threads can be set with the <c><![CDATA[+S]]></c> command line argument.\n            For more information see the <c><![CDATA[erl(1)]]></c> man page.</p>\n          <p>A runtime system with SMP support is by default built on\n            the following platforms if posix threads, and a gcc\n            compiler of at least version 2.95 is found:</p>\n          <list type=\"bulleted\">\n            <item>\n              <p>Linux with at least kernel version 2.6 and the Native\n                POSIX Thread Library on x86, x86_64, and 32-bits\n                PowerPC.</p>\n            </item>\n            <item>\n              <p>Solaris of at least version 8 on 32-bits SPARC-V9.</p>\n            </item>\n            <item>\n              <p>MacOSX of at least version 10.4 (Darwin 8.0) on\n                32-bits PowerPC.</p>\n            </item>\n          </list>\n          <p>The runtime system with SMP support is known <em>not</em>\n            to build on:</p>\n          <list type=\"bulleted\">\n            <item>\n              <p>Windows.</p>\n            </item>\n            <item>\n              <p>Linux with kernel versions less than 2.4, or without\n                the Native POSIX Thread Library.</p>\n            </item>\n            <item>\n              <p>Other hardware platforms than x86, x86_64, 32-bits\n                SPARC-V9 and 32-bits PowerPC.</p>\n            </item>\n          </list>\n          <p>Windows will be supported in a future release.</p>\n          <p>The runtime system with SMP support might build on other\n            operating systems in combination with supported hardware.\n            In order to force a build of a runtime system with SMP\n            support, pass the <c><![CDATA[--enable-smp-support]]></c> command line\n            argument to configure. Note, however, that it is not enough\n            that it builds. The underlying thread library and operating\n            system has to provide SMP support as well. If the thread\n            library does not distribute scheduler threads over multiple\n            processor cores then the runtime system will only seemingly\n            provide SMP support. If the runtime system is not built by\n            default on a specific platform, we have <em>not</em> tested\n            it on that platform.</p>\n          <p><em>NOTE</em>: The design of SMP support for drivers is\n            ongoing. There will probably be incompatible driver\n            changes (only affecting drivers run on the runtime system\n            with SMP support) released as patches for R11B.</p>\n          <p><em>Potential incompatibility</em>: Previously, specific\n            driver call-backs were always called from the same thread.\n            This is <em>not</em> true in the runtime system with SMP\n            support. Calls to call-backs will be made from different\n            threads, e.g., two consecutive calls to exactly the same\n            call-back can be made from two different threads. This\n            will in <em>most</em> cases not be a problem. All calls\n            to call-backs are synchronized, i.e., only one call-back\n            will be called at a time.</p>\n          <p>In the future the default behavior will <em>probably</em>\n            be the following: Calls to call-backs will, as now, be\n            made from different threads. Calls to call-backs in the\n            same driver <em>instance</em> will be synchronized. It\n            will probably be possible to configure so that all calls\n            to call-backs in all driver instances of a specific\n            driver type will be synchronized. It may be possible to\n            configure so that all calls to call-backs of a driver\n            instance or a of a specific driver type will be made from\n            the same thread.</p>\n          <p>Parallelism in the Erlang code executed is a necessity\n            for the Erlang runtime system to be able to take\n            advantage of multi-core or multi-processor hardware.\n            There need to be at least as many Erlang processes\n            runnable as processor cores for the Erlang runtime system\n            to be able to take advantage of all processor cores.</p>\n          <p>An Erlang runtime system with SMP support with only one\n            Erlang process runnable all the time will almost always be\n            slower than the same Erlang runtime system without SMP\n            support. This is due to thread synchronization overhead.</p>\n          <p>Known major bottleneck in the Erlang runtime system:</p>\n          <list type=\"bulleted\">\n            <item>\n              <p>Currently the I/O system uses one \"big lock\", i.e. only\n                one thread can do I/O at a time (with the exception of\n                async threads and threads created by users own linked-in\n                drivers). This is high on the list of things to\n                optimize. Note, code that does not do I/O can be executed\n                at the same time as one thread does I/O.</p>\n            </item>\n          </list>\n          <p>Some pitfalls which might cause Erlang programs that work on\n            the non-SMP runtime system to fail on the SMP runtime\n            system:</p>\n          <list type=\"bulleted\">\n            <item>\n              <p>A newly spawned process will often begin executing\n                immediately. Code that expects that the parent process\n                will be able to execute for a while before the child\n                process begins executing is likely to fail.</p>\n            </item>\n            <item>\n              <p>High priority processes could previously provide\n                mutual exclusion (bad programming style) by preventing\n                normal and low priority processes from being run. High\n                priority processes cannot be used this way to provide\n                mutual exclusion.</p>\n            </item>\n            <item>\n              <p><c><![CDATA[erlang:yield()]]></c> could be used to provide some\n                kind of temporary mutual exclusion (also bad programming\n                style). <c><![CDATA[erlang:yield()]]></c> cannot be used to provide\n                any kind of mutual exclusion.</p>\n            </item>\n            <item>\n              <p>Obscure pitfall, only if a process being traced also\n                sends normal messages to the tracer:<br></br>\n                &nbsp;&nbsp;The order between trace messages and normal\n                messages is undefined. I.e. the order between normal\n                messages sent from a tracee to a tracer and the trace\n                messages generated from the same tracee to the same\n                tracer is undefined. The internal order of normal\n                messages and the internal order of trace messages will,\n                of course, be preserved as before.</p>\n            </item>\n          </list>\n          <p>The kernel poll feature is currently not supported by\n            the runtime system with SMP support. It will probably be\n            supported in a future release.</p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6006 Aux Id: OTP-6095 </p>\n        </item>\n        <item>\n          <p>Linked-in driver modifications.</p>\n          <list type=\"bulleted\">\n            <item>\n              <p>Linked-in drivers must be recompiled.</p>\n            </item>\n            <item>\n              <p>The <c><![CDATA[refc]]></c> field in the <c><![CDATA[ErlDrvBinary]]></c> type\n                has been removed. The reference count can be accessed\n                via API functions. For more information see\n                the <c><![CDATA[erl_driver(1)]]></c> man page.</p>\n            </item>\n          </list>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-6095 Aux Id: OTP-6006 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.13</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Large files (more than 2 GBytes) are now handled on\n            Solaris 8.</p>\n          <p>Own Id: OTP-5849 Aux Id: seq10157 </p>\n        </item>\n        <item>\n          <p>A failing bit syntax construction could fail with the\n            PREVIOUS exception reason that had occurred in the process\n            (instead of with <c><![CDATA[badarg]]></c>).</p>\n          <p>Own Id: OTP-5911</p>\n        </item>\n        <item>\n          <p>When building OTP, the Kernel application was built in\n            both the primary and secondary bootstrap steps, which\n            would cause problems if OTP including its bootstrap is\n            checked into a version control system (such as CVS).\n            (Thanks to Sebastian Strollo.)</p>\n          <p>Own Id: OTP-5921</p>\n        </item>\n        <item>\n          <p><c><![CDATA[binary_to_term(<<131,109,255,255,255,255)]]></c> and\n            similar expressions used to crash the emulator instead of\n            causing a <c><![CDATA[badarg]]></c> exception. (Thanks to Matthias\n            Lang.)</p>\n          <p>Own Id: OTP-5933</p>\n        </item>\n        <item>\n          <p><c><![CDATA[erlang:hibernate/3]]></c> could sometimes crash the emulator\n            when no heap was needed.</p>\n          <p>Own Id: OTP-5940</p>\n        </item>\n        <item>\n          <p>Execution of match specs could under rare circumstances\n            cause the emulator to dump core.</p>\n          <p>Execution of match specs could cause memory leaks in the\n            hybrid emulator.</p>\n          <p>Own Id: OTP-5955</p>\n        </item>\n        <item>\n          <p>A bug in <c><![CDATA[erlang:trace_info/2]]></c> when getting info for a\n            function in a deleted module resulting in an emulator\n            crash, has been corrected.</p>\n          <p>Own Id: OTP-5957</p>\n        </item>\n        <item>\n          <p>Different (and old) <c><![CDATA[config.guess]]></c> files in the\n            ERTS and Erl_Interface applications would cause build\n            problems on the new Intel-based iMacs.\n            (Thanks to Sebastion Strollo.)</p>\n          <p>Own Id: OTP-5967</p>\n        </item>\n        <item>\n          <p>pthread header and library mismatch on Linux systems (at\n            least some SuSE and Debian) with both NPTL and\n            Linuxthreads libraries installed.</p>\n          <p>Own Id: OTP-5981</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The driver_set_timer did not change the previous timeout\n            if called a second time. Now it works as specified,\n            changing the timeout.</p>\n          <p>Own Id: OTP-5942</p>\n        </item>\n        <item>\n          <p>The undocumented <c><![CDATA[{packet,http}]]></c> option (for the\n            <c><![CDATA[gen_tcp]]></c> module) did not not work correctly when\n            there were multiple continuation lines. (Thanks to Per\n            Hedeland.)</p>\n          <p>Own Id: OTP-5945</p>\n        </item>\n        <item>\n          <p>The setuid_socket_wrap program was corrected to work for\n            C compilers that treat the <c><![CDATA[char]]></c> type as unsigned.\n            (Thanks to Magnus Henoch.)</p>\n          <p>Own Id: OTP-5946</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.12</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Fixed a minor build problem on Windows.</p>\n          <p>Own Id: OTP-5819 Aux Id: OTP-5382 OTP-5540 OTP-5577 </p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[delay_send]]></c> option for <c><![CDATA[gen_tcp]]></c> was\n            broken on Windows.</p>\n          <p>Own Id: OTP-5822</p>\n        </item>\n        <item>\n          <p>If there were user-defined variables in the boot\n            script, and their values were not provided using the\n            <c><![CDATA[-boot_var]]></c> option, the emulator would refuse to\n            start with a confusing error message. Corrected to show a\n            clear, understandable message.</p>\n          <p>The <c><![CDATA[prim_file]]></c> module was modified to not depend\n            on the <c><![CDATA[lists]]></c> module, to make it possible to start\n            the emulator using a user-defined loader. (Thanks to\n            Martin Bjorklund.)</p>\n          <p>Own Id: OTP-5828 Aux Id: seq10151 </p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The HiPE compiler identifies more leaf functions,\n            giving slightly faster code.</p>\n          <p>Corrected problems in HiPE's coalescing register\n            allocating that would cause it to fail when compiling\n            very large functions (e.g. some of parse modules in the\n            Megaco application).</p>\n          <p>Own Id: OTP-5853</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.11</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Timers could sometimes timeout too early. This bug has\n            now been fixed.</p>\n          <p>Automatic cancellation of timers created by\n            <c><![CDATA[erlang:send_after(Time,pid(),Msg)]]></c> and\n            <c><![CDATA[erlang:start_timer(Time,pid(),Msg)]]></c> has been\n            introduced. Timers created with the receiver specified by a\n            pid, will automatically be cancelled when the receiver\n            exits. For more information see the <c><![CDATA[erlang(3)]]></c> man\n            page.</p>\n          <p>In order to be able to maintain a larger amount of timers\n            without increasing the maintenance cost, the internal\n            timer wheel and bif timer table have been enlarged.</p>\n          <p>Also a number of minor bif timer optimizations have been\n            implemented.</p>\n          <p>Own Id: OTP-5795 Aux Id: OTP-5090, seq8913, seq10139,\n            OTP-5782 </p>\n        </item>\n        <item>\n          <p><c><![CDATA[erlang:monitor(process,Pid)]]></c> hanged if <c><![CDATA[Pid]]></c>\n            referred to a process on a non-existing node with the same\n            nodename as the nodename of node on which the call was made.\n            This bug has now been fixed.</p>\n          <p>Own Id: OTP-5827</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>By setting Unix environment variables, the priority for\n            the emulator can be lowered when it is writing crash\n            dumps and the time allowed for finishing writing a crash\n            dump can be set to a certain number of seconds. See the\n            documentation for <c><![CDATA[erl]]></c> in the ERTS application.\n            (Also, a few other previously undocumented environment\n            variables are now documented.)</p>\n          <p>Own Id: OTP-5818</p>\n        </item>\n        <item>\n          <p>Documentation improvements:</p>\n          <p>- documentation for <c><![CDATA[erlang:link/1]]></c> corrected</p>\n          <p>- command line flag <c><![CDATA[-code_path_cache]]></c> added</p>\n          <p>- <c><![CDATA[erl]]></c> command line flags clarifications</p>\n          <p>- <c><![CDATA[net_kernel(3)]]></c> clarifications</p>\n          <p>Own Id: OTP-5847</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.10</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>-D_GNU_SOURCE is now always passed on the compile command\n            line on linux. This in order to ensure that all included\n            system headers see _GNU_SOURCE defined.</p>\n          <p>_GNU_SOURCE is now also defined on linux in configure\n            when looking for features.</p>\n          <p>Some minor (harmless) configure bugs were also fixed.</p>\n          <p>Own Id: OTP-5749</p>\n        </item>\n        <item>\n          <p>Some compiler warnings and Dialyzer warnings were\n            eliminated in the Tools application.</p>\n          <p>When tracing to a port (which <c><![CDATA[fprof]]></c> does),\n            there could be fake schedule out/schedule in messages\n            sent for a process that had exited.</p>\n          <p>Own Id: OTP-5757</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The BIFs <c><![CDATA[iolist_size/1]]></c> and <c><![CDATA[iolist_to_binary/1]]></c>\n            has been added.</p>\n          <p>The BIF <c><![CDATA[list_to_existing_atom/1]]></c> has been added.</p>\n          <p>Minor bug fix: The exception reason could be changed\n            to <c><![CDATA[error]]></c> inside nested try/catch constructs if the\n            <c><![CDATA[erlang:raise/3]]></c> BIF was called with an empty\n            stacktrace. (Calling <c><![CDATA[erlang:raise/3]]></c> with an empty\n            stacktrace is NOT recommended.)</p>\n          <p>Minor bugfix: On Windows, <c><![CDATA[file:open/2]]></c> will now\n            return the documented error reason <c><![CDATA[{error,eisdir}]]></c>\n            if the filename refers to a directory (it used to return\n            <c><![CDATA[{error,eacces}]]></c>).</p>\n          <p>The message in the documentation for\n            <c><![CDATA[erlang:system_monitor/2]]></c>, description of\n            <c><![CDATA[busy_dist_port]]></c>, was corrected.</p>\n          <p>Own Id: OTP-5709 Aux Id: seq10100 </p>\n        </item>\n        <item>\n          <p>The previously undocumented and UNSUPPORTED <c><![CDATA[zlib]]></c>\n            module has been updated in an incompatible way and many\n            bugs have been corrected. It is now also documented.</p>\n          <p>*** POTENTIAL INCOMPATIBILITY ***</p>\n          <p>Own Id: OTP-5715</p>\n        </item>\n        <item>\n          <p>New socket options <c><![CDATA[priority]]></c> and <c><![CDATA[tos]]></c> for\n            platforms that support them (currently only Linux).</p>\n          <p>Own Id: OTP-5756</p>\n        </item>\n        <item>\n          <p>Only the emulator is now linked with termcap library in\n            order to decrease library dependencies for other otp\n            programs.</p>\n          <p>Own Id: OTP-5758</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.9.2</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The native resolver has gotten an control API for\n            extended debugging and soft restart. It is:\n            <c><![CDATA[inet_gethost_native:control(Control)]]></c><br></br><c><![CDATA[Control = {debug_level,Level} | soft_restart]]></c><br></br><c><![CDATA[Level = integer() in the range 0-4]]></c>.</p>\n          <p>Own Id: OTP-5751 Aux Id: EABln25013 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.9.1</title>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>On VxWorks, epmd did not handle file descriptors with\n            higher numbers than 63. Also, if epmd should get a file\n            descriptor with a number &gt;= FD_SETSIZE, it will close a\n            the file descriptor and write a message to the log\n            (instead of mysteriously fail); the Erlang node that\n            tried to register will fail with a duplicate_name error\n            (unfortunately, epmd has no way to indicate to the Erlang\n            node why the register attempt failed).</p>\n          <p>Own Id: OTP-5716 Aux Id: seq10070 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.9</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Timezone data is now initialized better. (was a problem\n            at least on NetBSD 2.0.2) Thanks to Rich Neswold.</p>\n          <p>Own Id: OTP-5621</p>\n        </item>\n        <item>\n          <p>The hybrid-heap emulator ('erl -hybrid') is much more\n            stable. We have corrected all known bugs that caused it\n            to dump core while running our test suites.</p>\n          <p>Own Id: OTP-5634</p>\n        </item>\n        <item>\n          <p>Fixed rare memory leaks in <c><![CDATA[erlang:demonitor/1]]></c> when\n            distributed monitors were removed.</p>\n          <p>Own Id: OTP-5692</p>\n        </item>\n        <item>\n          <p>Processes were sometimes unnecessarily garbage collected\n            when terminating. These unnecessary garbage collections\n            have now been eliminated.</p>\n          <p>Own Id: OTP-5693</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The <c><![CDATA[c:i/0]]></c> function will now run in a paged mode if\n            there are more than 100 processes in the system. (Thanks\n            to Ulf Wiger.)</p>\n          <p><c><![CDATA[erlang:system_info(process_count)]]></c> has\n            been optimized and does now return exactly the same value\n            as <c><![CDATA[length(processes())]]></c>. Previously\n            <c><![CDATA[erlang:system_info(process_count)]]></c> did not include\n            exiting processes which are included in\n            <c><![CDATA[length(processes())]]></c>.</p>\n          <p>The <c><![CDATA[+P]]></c> flag for <c><![CDATA[erl]]></c>, which sets the maximum\n            number of processes allowed to exist at the same, no longer\n            accepts values higher than 134217727. (You will still\n            probably run out of memory before you'll be able to reach\n            that limit.)</p>\n          <p>Own Id: OTP-5645 Aux Id: seq9984 </p>\n        </item>\n        <item>\n          <p>The term-building driver functions\n            <c><![CDATA[driver_output_term()]]></c> and <c><![CDATA[driver_send_term()]]></c>\n            have been updated:</p>\n          <p>The ERL_DRV_FLOAT type has been added.</p>\n          <p>For the ERL_DRV_BINARY type, the length and offset are\n            now validated against the length of the driver binary.</p>\n          <p>The ERL_DRV_PID type is now implemented (it was\n            documented, but not implemented).</p>\n          <p>Own Id: OTP-5674</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.8</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p><c><![CDATA[ets:delete/1]]></c> now allows other Erlang process to run\n            when a large table is being deleted.</p>\n          <p>Own Id: OTP-5572</p>\n        </item>\n        <item>\n          <p>A bug regarding tcp sockets which results in hanging\n            <c><![CDATA[gen_tcp:send/2]]></c> has been corrected. To encounter\n            this bug you needed one process that read from a socket,\n            one that wrote more date than the reader read out so the\n            sender got suspended, and then the reader closed the\n            socket. (Reported and diagnosed by Alexey Shchepin.)</p>\n          <p>Corrected a bug in the (undocumented and unsupported)\n            option <c><![CDATA[{packet,http}]]></c> for <c><![CDATA[gen_tcp.]]></c>\n            (Thanks to Claes Wikstrom and Luke Gorrie.)</p>\n          <p>Updated the documentation regarding the second argument to\n            <c><![CDATA[gen_tcp:recv/2]]></c>, the <c><![CDATA[Length]]></c> to receive.</p>\n          <p>Own Id: OTP-5582 Aux Id: seq9839 </p>\n        </item>\n        <item>\n          <p>Erlang/OTP will now build on Mac OS X 10.4 \"Tiger\" (the\n            problem was that 10.4 has a partially implemented poll()\n            function that can't handle devices). Also, on Mac OS X\n            10.3 \"Panther\", Erlang/OTP will now use select() instead\n            of poll() (because poll() on Mac OS X 10.3 is implemented\n            using select()).</p>\n          <p>Own Id: OTP-5595</p>\n        </item>\n        <item>\n          <p>A bug in the file driver when opening a file in\n            compressed mode, and the returned allocated pointer from\n            the compressing library was in very high memory (&gt;= 2GB),\n            causing e.g. <c><![CDATA[file:read/2]]></c> to return\n            <c><![CDATA[{error,ebadf}]]></c>, has been corrected.</p>\n          <p>Own Id: OTP-5618</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The new fun <c><![CDATA[M:F/A]]></c> construct creates a fun that\n            refers to the latest version of <c><![CDATA[M:F/A.]]></c> This syntax is\n            meant to replace tuple funs <c><![CDATA[{M,F}]]></c> which have many\n            problems.</p>\n          <p>The new type test <c><![CDATA[is_function(Fun,A)]]></c> (which may be\n            used in guards) test whether <c><![CDATA[Fun]]></c> is a fun that can be\n            applied with <c><![CDATA[A]]></c> arguments. (Currently, <c><![CDATA[Fun]]></c>\n            can also be a tuple fun.)</p>\n          <p>Own Id: OTP-5584</p>\n        </item>\n        <item>\n          <p>In the HiPE application, there's a new experimental\n            register allocator (optimistic coalescing), and the\n            linear scan register allocator is now also available on\n            ppc. Plus lots of cleanups.</p>\n          <p>Minor hybrid heap corrections.</p>\n          <p>The maximum size of a heap used to be artificially\n            limited so that the size of a heap would fit in 28 bits;\n            that limitation could cause the emulator to terminate in\n            a garbage collection even if there still was available\n            memory. Now the largest heap size for a 32 bit CPU is\n            1,699,221,830 bytes. (Thanks to Jesper Wilhelmsson.)</p>\n          <p>Also removed the undocumented <c><![CDATA[+H]]></c> emulator option.</p>\n          <p>Own Id: OTP-5596</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.7</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p><c><![CDATA[to_erl]]></c> could close unexpectedly on Linux systems.\n            Also, output from the emulator could be lost. Corrected.</p>\n          <p>Own Id: OTP-5561</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The <c><![CDATA[cpu_timestamp]]></c> option for <c><![CDATA[erlang:trace/3]]></c>\n            is now also supported on Linux.</p>\n          <p>Own Id: OTP-5532 Aux Id: seq9813 </p>\n        </item>\n        <item>\n          <p>The last known <c><![CDATA[werl]]></c> window size/position is now saved\n            correctly when <c><![CDATA[werl]]></c> is stopped with the window\n            minimized. A problem with the placement not being saved if\n            the emulator is halted or stopped from the JCL menu has also\n            been fixed.</p>\n          <p>Own Id: OTP-5544 Aux Id: OTP-5522 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.6</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Some math libraries do not always throw floating-point\n            exceptions on errors. In order to be able to use these\n            libraries, floating-point errors are now more thoroughly\n            checked.</p>\n          <p>Misc floating-point fixes for Linux and MacOSX.</p>\n          <p>Own Id: OTP-5467</p>\n        </item>\n        <item>\n          <p>An internal buffer was sometimes not cleared which caused\n            garbage to appear in error messages sent to the error\n            logger.</p>\n          <p><c><![CDATA[errno]]></c> was sometimes clobbered which caused erroneous\n            error reports about <c><![CDATA[poll()]]></c> errors.</p>\n          <p>Only emulators on unix platforms were affected by these\n            bugs.</p>\n          <p>Own Id: OTP-5492</p>\n        </item>\n        <item>\n          <p>The ethread library now works on OpenBSD.</p>\n          <p>Own Id: OTP-5515</p>\n        </item>\n        <item>\n          <p>Corrected a bug in the (undocumented and unsupported)\n            option <c><![CDATA[{packet,http}]]></c> for <c><![CDATA[gen_tcp]]></c>.\n            (Thanks to Claes Wikstrom and Luke Gorrie.)</p>\n          <p>Own Id: OTP-5519</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p><c><![CDATA[binary_to_term/1]]></c> could cause the emulator to crash\n            when given invalid pids or funs.</p>\n          <p>Own Id: OTP-5484 Aux Id: seq9801 </p>\n        </item>\n        <item>\n          <p>Some more stability problems were fixed in the\n            hybrid-heap emulator.</p>\n          <p>Own Id: OTP-5489</p>\n        </item>\n        <item>\n          <p>After <c><![CDATA[werl]]></c> was closed with the window minimized, it\n            was not possible to restart <c><![CDATA[werl]]></c> with an open\n            window. A temporary solution has so far been implemented\n            that restores the initial window settings every time\n            <c><![CDATA[werl]]></c> is started.</p>\n          <p>Own Id: OTP-5522</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.5</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>If a process had node links (created by\n            <c><![CDATA[monitor_node/2]]></c>), executing\n            <c><![CDATA[process_info(Pid,memory)]]></c> for that process would\n            crash the emulator.</p>\n          <p>Own Id: OTP-5420</p>\n        </item>\n        <item>\n          <p>Minor corrections to the help text printed by <c><![CDATA[erlc -help]]></c>. The documentation for <c><![CDATA[erlc]]></c> was also\n            slightly updated.</p>\n          <p>Own Id: OTP-5428</p>\n        </item>\n        <item>\n          <p>32-bit words were used for offsets in the garbage\n            collector. This caused the emulator to crash on 64-bit\n            machines when heaps were moved more than 4 GB during\n            garbage collection.</p>\n          <p>Own Id: OTP-5430</p>\n        </item>\n        <item>\n          <p><c><![CDATA[is_boolean(42.5)]]></c> failed to load if optimization was\n            explicitly turned off.</p>\n          <p>Own Id: OTP-5448</p>\n        </item>\n        <item>\n          <p>If there was a call to <c><![CDATA[Module:foo/X]]></c> from any loaded\n            module, the returned by <c><![CDATA[M:module_info(exports)]]></c> would\n            always include <c><![CDATA[{foo,X}]]></c> (even though\n            <c><![CDATA[Module:foo/X]]></c> if was not defined).</p>\n          <p>Own Id: OTP-5450 Aux Id: seq9722 </p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The <c><![CDATA[c]]></c> option for the <c><![CDATA[+B]]></c> flag has been\n            introduced which makes it possible to use Ctrl-C\n            (Ctrl-Break on Windows) to interrupt the shell process\n            rather than to invoke the emulator break handler. All new\n            <c><![CDATA[+B]]></c> options are also supported on Windows\n            (<c><![CDATA[werl]]></c>) as of now. Furthermore, Ctrl-C on Windows has\n            now been reserved for copying text (what Ctrl-Ins was used\n            for previously). Ctrl-Break should be used for break\n            handling. Lastly, the documentation of the system flags has\n            been updated.</p>\n          <p>Own Id: OTP-5388</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.4</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The function <c><![CDATA[erlang:float/1]]></c> can now be used in\n            match specifications and is recognized by\n            <c><![CDATA[dbg:fun2ms/1]]></c> and <c><![CDATA[ets:fun2ms/1]]></c>. This\n            addition is part of the work to \"harmonize\" match\n            specification guards with Erlang guards.</p>\n          <p>Own Id: OTP-5297 Aux Id: OTP-4927 </p>\n        </item>\n        <item>\n          <p>The <c><![CDATA[register/2]]></c> BIF would return <c><![CDATA[true]]></c> even if\n            the second argument was not a pid for living process.\n            Corrected to cause an exception.</p>\n          <p>Own Id: OTP-5324 Aux Id: seq9698 </p>\n        </item>\n        <item>\n          <p>In the 'bag' type of ets tables, elements having the same\n            key were supposed to be order in insertion order. The\n            would be wrong if a rehash occurred.</p>\n          <p>Own Id: OTP-5340 Aux Id: seq9704 </p>\n        </item>\n        <item>\n          <p>Linked in drivers in the Crypto and Asn1 applications\n            are now compiled with the <c><![CDATA[-D_THREAD_SAFE]]></c> and\n            <c><![CDATA[-D_REENTRANT]]></c> switches on unix when the emulator has\n            thread support enabled.</p>\n          <p>Linked in drivers on MacOSX are not compiled with the\n            undocumented <c><![CDATA[-lbundle1.o]]></c> switch anymore. Thanks to\n            Sean Hinde who sent us a patch.</p>\n          <p>Linked in driver in Crypto, and port programs in SSL, now\n            compiles on OSF1.</p>\n          <p>Minor makefile improvements in Runtime_Tools.</p>\n          <p>Own Id: OTP-5346</p>\n        </item>\n        <item>\n          <p>Fixed a bug in the hybrid heap in distributed send\n            operations.</p>\n          <p>Own Id: OTP-5361</p>\n        </item>\n        <item>\n          <p>A BIF <c><![CDATA[erlang:raise/3]]></c> has been added. See the manual\n            for details. It is intended for internal system programming\n            only, advanced error handling.</p>\n          <p>Own Id: OTP-5376 Aux Id: OTP-5257 </p>\n        </item>\n        <item>\n          <p>Mikael Pettersson (HiPE) corrected a few bugs in the\n            emulator that caused problems when compiled with the\n            experimental gcc-4.0.0.</p>\n          <p>Own Id: OTP-5386</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Minor update of the internal documentation of\n            the <c><![CDATA[epmd]]></c> protocol.</p>\n          <p>The listen port of <c><![CDATA[epmd]]></c> has now been registered at\n            IANA:\n            <url href=\"http://www.iana.org/assignments/port-numbers\">http://www.iana.org/assignments/port-numbers</url>.</p>\n          <p>Own Id: OTP-5234</p>\n        </item>\n        <item>\n          <p><c><![CDATA[run_erl.c]]></c> now works on Mac OS X and FreeBSD.</p>\n          <p>Own Id: OTP-5384</p>\n        </item>\n        <item>\n          <p>A few bugs were corrected in the HiPE application.</p>\n          <p>Own Id: OTP-5385</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.3</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Font and color preferences for <c><![CDATA[werl.exe]]></c> now can be\n            saved even after the first time you run <c><![CDATA[werl.exe]]></c>.\n            The window position and size is also saved. Patch from\n            James Hague who did all the hard work.</p>\n          <p>Own Id: OTP-5250</p>\n        </item>\n        <item>\n          <p>OTP archive libraries, e.g. the <c><![CDATA[erl_interface]]></c>\n            library, on MacOSX could not be used without first\n            rerunning <c><![CDATA[ranlib]]></c> on them. This bug has now been\n            fixed.</p>\n          <p>Own Id: OTP-5274</p>\n        </item>\n        <item>\n          <p>Bugs in <c><![CDATA[erlang:hash/2]]></c> and <c><![CDATA[erlang:phash/2]]></c> on\n            64-bit platforms have been fixed.</p>\n          <p>Own Id: OTP-5292</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>Corrected a crash in the 64-bits emulator.</p>\n          <p>Corrected a problem in the hybrid heap emulator.</p>\n          <p>In the chapter about the abstract format in the ERTS User's\n            Guide, updated the last section about how the abstract\n            format is stored in BEAM files.</p>\n          <p>Own Id: OTP-5262</p>\n        </item>\n        <item>\n          <p>The maximum number of concurrent threads in the internal\n            ethread thread package has been limited to 2048.</p>\n          <p>Own Id: OTP-5280</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.2.1</title>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>If Erlang/OTP was installed in a short directory name,\n            such as <c><![CDATA[C:\\Program\\erl5.4.2]]></c>, the emulator would not\n            start.</p>\n          <p>Own Id: OTP-5254</p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.2</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>If one used <c><![CDATA[select/3]]></c> and <c><![CDATA[select/1]]></c> on a\n            non-fixed ETS table and deleted objects simultaneously,\n            the emulator could crash. Note that the result of such\n            simultaneous operations on tables that are not in a fixed\n            state is still undefined, but the emulator crash is,\n            needless to say, fixed.</p>\n          <p>Own Id: OTP-5209 Aux Id: seq9198 </p>\n        </item>\n        <item>\n          <p>Arithmetic with big numbers could crash the emulator.</p>\n          <p>The HiPE native code compiler and run-time code in the\n            emulator has been updated. (Note: Native code is still\n            not supported.)</p>\n          <p>Eliminated a few bugs that could crash the hybrid emulator\n            (which is not supported).</p>\n          <p>Own Id: OTP-5233 Aux Id: seq9587 </p>\n        </item>\n      </list>\n    </section>\n  </section>\n\n  <section>\n    <title>ERTS 5.4.1</title>\n\n    <section>\n      <title>Fixed Bugs and Malfunctions</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The ethread library was unnecessarily rebuilt multiple\n            times during the build process, also a debug version of\n            the library was build during the install phase. These\n            unnecessary builds have now been removed. Note, the\n            content of the installed Erlang/OTP system is not\n            effected at all by this change.</p>\n          <p>Own Id: OTP-5203</p>\n        </item>\n        <item>\n          <p>The emulator could fail to clear the memory segment\n            cache. This could potentially cause memory allocation to\n            unnecessarily fail when memory usage was close to its\n            maximum. This bug has now been fixed.</p>\n          <p>Own Id: OTP-5211</p>\n        </item>\n        <item>\n          <p>std_alloc (std short for standard) was sometimes called\n            def_alloc (def short for default). std_alloc is now\n            everywhere referred to as std_alloc.</p>\n          <p>Own Id: OTP-5216</p>\n        </item>\n        <item>\n          <p>A documentation bug has been corrected in\n            the <c><![CDATA[erts_alloc(3)]]></c> documentation. It was stated that\n            some of the memory allocators present were by default\n            disabled. This is true for Erlang/OTP R9C, but is not true\n            for Erlang/OTP R10B. In R10B all memory allocators present\n            are enabled by default.</p>\n          <p>Own Id: OTP-5217</p>\n        </item>\n      </list>\n    </section>\n\n    <section>\n      <title>Improvements and New Features</title>\n      <list type=\"bulleted\">\n        <item>\n          <p>The emulator now close all open files and sockets\n            immediately after receiving an USR1 signal. This causes\n            the emulator to unregister at <c><![CDATA[epmd]]></c> as early as\n            possible.</p>\n          <p>Own Id: OTP-5221 Aux Id: OTP-4985, seq9514 </p>\n        </item>\n        <item>\n          <p>Try/catch support in the emulator slightly updated.</p>\n          <p>Own Id: OTP-5229</p>\n        </item>\n      </list>\n    </section>\n  </section>\n</chapter>\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/sys/unix/erl_unix_sys_ddll.c": "/*\n * %CopyrightBegin%\n * \n * Copyright Ericsson AB 2006-2016. All Rights Reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * \n * %CopyrightEnd%\n */\n\n/* \n * Interface functions to the dynamic linker using dl* functions.\n * (As far as I know it works on SunOS 4, 5, Linux and FreeBSD. /Seb) \n */\n\n#ifdef HAVE_CONFIG_H\n#  include \"config.h\"\n#endif\n\n#include \"sys.h\"\n#include \"erl_vm.h\"\n#include \"global.h\"\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n\n/* some systems do not have RTLD_NOW defined, and require the \"mode\"\n * argument to dload() always be 1.\n */\n#ifndef RTLD_NOW\n#  define RTLD_NOW 1\n#endif\n\n#define MAX_NAME_LEN 255      /* XXX should we get the system path size? */\n#define EXT_LEN      3\n#define FILE_EXT     \".so\"    /* extension appended to the filename */\n\nstatic char **errcodes = NULL;\nstatic int num_errcodes = 0;\nstatic int num_errcodes_allocated = 0;\n\n#define my_strdup(WHAT) my_strdup_in(ERTS_ALC_T_DDLL_ERRCODES, WHAT);\n\nstatic char *my_strdup_in(ErtsAlcType_t type, char *what)\n{\n    char *res = erts_alloc(type, strlen(what) + 1);\n    strcpy(res, what);\n    return res;\n}\n\n\nstatic int find_errcode(char *string, ErtsSysDdllError* err) \n{\n    int i;\n\n    if (err != NULL) {\n\terts_sys_ddll_free_error(err); /* in case we ignored an earlier error */\n\terr->str = my_strdup_in(ERTS_ALC_T_DDLL_TMP_BUF, string);\n\treturn 0;\n    }\n    for(i=0;i<num_errcodes;++i) {\n\tif (!strcmp(string, errcodes[i])) {\n\t    return i;\n\t}\n    }\n    if (num_errcodes_allocated == num_errcodes) {\n\terrcodes = (num_errcodes_allocated == 0) \n\t    ? erts_alloc(ERTS_ALC_T_DDLL_ERRCODES, \n\t\t\t (num_errcodes_allocated = 10) * sizeof(char *)) \n\t    : erts_realloc(ERTS_ALC_T_DDLL_ERRCODES, errcodes,\n\t\t\t   (num_errcodes_allocated += 10) * sizeof(char *));\n    }\n    errcodes[num_errcodes++] = my_strdup(string);\n    return (num_errcodes - 1);\n}\n\nvoid erl_sys_ddll_init(void) {\n#if defined(HAVE_DLOPEN) && defined(ERTS_NEED_DLOPEN_BEFORE_DLERROR)\n    /*\n     * dlopen() needs to be called before we make the first call to\n     * dlerror(); otherwise, dlerror() might dump core. At least\n     * some versions of linuxthread suffer from this bug.\n     */\n    void *handle = dlopen(\"/nonexistinglib\", RTLD_NOW);\n    if (handle)\n\tdlclose(handle);\n#endif    \n    return;\n}\n\n/* \n * Open a shared object\n */\nint erts_sys_ddll_open(const char *full_name, void **handle, ErtsSysDdllError* err)\n{\n#if defined(HAVE_DLOPEN)\n    char* dlname; \n    int len = sys_strlen(full_name);\n    int ret;\n    \n    dlname = erts_alloc(ERTS_ALC_T_TMP, len + EXT_LEN + 1);\n    sys_strcpy(dlname, full_name);\n    sys_strcpy(dlname+len, FILE_EXT);\n    \n    ret = erts_sys_ddll_open_noext(dlname, handle, err);\n\n    erts_free(ERTS_ALC_T_TMP, (void *) dlname);\n    return ret;\n#else\n    return ERL_DE_ERROR_NO_DDLL_FUNCTIONALITY;\n#endif\n}\n\nint erts_sys_ddll_open_noext(char *dlname, void **handle, ErtsSysDdllError* err)\n{\n#if defined(HAVE_DLOPEN)   \n    int ret = ERL_DE_NO_ERROR;\n    char *str;\n    dlerror();\n    if ((*handle = dlopen(dlname, RTLD_NOW)) == NULL) {\n\tstr = dlerror();\n\n\tif (err == NULL) {\n\t    /*\n\t     * Remove prefix filename to avoid exploading number of\n\t     * error codes on extreme usage.\n\t     */\n\t    if (strstr(str,dlname) == str) {\n\t\tchar *save_str = str;\n\t\tstr += strlen(dlname);\n\t\twhile (*str == ':' || *str == ' ') {\n\t\t    ++str;\n\t\t}\n\t\tif (*str == '\\0') { /* Better with filename than nothing... */\n\t\t    str = save_str;\n\t\t}\n\t    }\n\t}\n\tret = ERL_DE_DYNAMIC_ERROR_OFFSET - find_errcode(str, err);\n    }\n    return ret;\n#else\n    return ERL_DE_ERROR_NO_DDLL_FUNCTIONALITY;\n#endif\n}\n\n/* \n * Find a symbol in the shared object\n */\nint erts_sys_ddll_sym2(void *handle, const char *func_name, void **function,\n\t\t       ErtsSysDdllError* err)\n{\n#if defined(HAVE_DLOPEN)\n    void *sym;\n    char *e;\n    int ret;\n    dlerror();\n    sym = dlsym(handle, func_name);\n    if ((e = dlerror()) != NULL) {\n\tret = ERL_DE_DYNAMIC_ERROR_OFFSET - find_errcode(e, err);\n    } else {\n\t*function = sym;\n\tret = ERL_DE_NO_ERROR;\n    }\n    return ret;\n#else\n    return ERL_DE_ERROR_NO_DDLL_FUNCTIONALITY;\n#endif\n}\n\n/* XXX:PaN These two will be changed with new driver interface! */\n\n/* \n * Load the driver init function, might appear under different names depending on object arch... \n */\n\nint erts_sys_ddll_load_driver_init(void *handle, void **function)\n{\n    void *fn;\n    int res;\n    if ((res = erts_sys_ddll_sym2(handle, \"driver_init\", &fn, NULL)) != ERL_DE_NO_ERROR) {\n\tres = erts_sys_ddll_sym2(handle, \"_driver_init\", &fn, NULL);\n    }\n    if (res == ERL_DE_NO_ERROR) {\n\t*function = fn;\n    }\n    return res;\n}\n\nint erts_sys_ddll_load_nif_init(void *handle, void **function, ErtsSysDdllError* err)\n{\n    void *fn;\n    int res;\n    if ((res = erts_sys_ddll_sym2(handle, \"nif_init\", &fn, err)) != ERL_DE_NO_ERROR) {\n\tres = erts_sys_ddll_sym2(handle, \"_nif_init\", &fn, err);\n    }\n    if (res == ERL_DE_NO_ERROR) {\n\t*function = fn;\n    }\n    return res;\n}\n\n/* \n * Call the driver_init function, whatever it's really called, simple on unix... \n*/\nvoid *erts_sys_ddll_call_init(void *function) {\n    void *(*initfn)(void) = function;\n    return (*initfn)();\n}\nvoid *erts_sys_ddll_call_nif_init(void *function) {\n    return erts_sys_ddll_call_init(function);\n}\n\n\n\n/* \n * Close a chared object\n */\nint erts_sys_ddll_close2(void *handle, ErtsSysDdllError* err)\n{\n#if defined(HAVE_DLOPEN)\n    int ret;\n    char *s;\n    dlerror();\n    if (dlclose(handle) == 0) {\n\tret = ERL_DE_NO_ERROR;\n    } else {\n\tif ((s = dlerror()) == NULL) {\n\t    find_errcode(\"unspecified error\", err);\n\t    ret = ERL_DE_ERROR_UNSPECIFIED;\n\t} else {\n\t    ret = ERL_DE_DYNAMIC_ERROR_OFFSET - find_errcode(s, err);\n\t}\n    }\n    return ret;\n#else\n    return ERL_DE_ERROR_NO_DDLL_FUNCTIONALITY;\n#endif\n}\n\n\n/*\n * Return string that describes the (current) error\n */\nchar *erts_sys_ddll_error(int code)\n{\n    int actual_code;\n\n    if (code > ERL_DE_DYNAMIC_ERROR_OFFSET) {\n\treturn \"Unspecified error\";\n    }\n    actual_code = -1*(code - ERL_DE_DYNAMIC_ERROR_OFFSET);\n#if defined(HAVE_DLOPEN)\n    {\n\tchar *msg;\n\n\tif (actual_code >= num_errcodes) {\n\t    msg = \"Unknown dlload error\";\n\t} else {\n\t    msg = errcodes[actual_code];\n\t}\n\treturn msg;\n    }\n#endif\n    return \"no error\";\n}\n\nvoid erts_sys_ddll_free_error(ErtsSysDdllError* err)\n{   \n    if (err->str != NULL) {\n\terts_free(ERTS_ALC_T_DDLL_TMP_BUF, err->str);\n    }\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/test/nif_SUITE_data/nif_api_2_4/erl_nif_api_funcs.h": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2009-2017. All Rights Reserved.\n *\n * The contents of this file are subject to the Erlang Public License,\n * Version 1.1, (the \"License\"); you may not use this file except in\n * compliance with the License. You should have received a copy of the\n * Erlang Public License along with this software. If not, it can be\n * retrieved online at http://www.erlang.org/.\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See\n * the License for the specific language governing rights and limitations\n * under the License.\n *\n * %CopyrightEnd%\n */\n\n#if !defined(ERL_NIF_API_FUNC_DECL) && !defined(ERL_NIF_API_FUNC_MACRO)\n#  error This file should not be included directly\n#endif\n\n/*\n** WARNING: add new ERL_NIF_API_FUNC_DECL entries at the bottom of the list\n** to keep compatibility on Windows!!!\n**\n** And don't forget to increase ERL_NIF_MINOR_VERSION in erl_nif.h\n** when adding functions to the API.\n*/\n#ifdef ERL_NIF_API_FUNC_DECL\nERL_NIF_API_FUNC_DECL(void*,enif_priv_data,(ErlNifEnv*));\nERL_NIF_API_FUNC_DECL(void*,enif_alloc,(size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_free,(void* ptr));\nERL_NIF_API_FUNC_DECL(int,enif_is_atom,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_binary,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_ref,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_inspect_binary,(ErlNifEnv*, ERL_NIF_TERM bin_term, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_alloc_binary,(size_t size, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_realloc_binary,(ErlNifBinary* bin, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_release_binary,(ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_get_int,(ErlNifEnv*, ERL_NIF_TERM term, int* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_ulong,(ErlNifEnv*, ERL_NIF_TERM term, unsigned long* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_double,(ErlNifEnv*, ERL_NIF_TERM term, double* dp));\nERL_NIF_API_FUNC_DECL(int,enif_get_list_cell,(ErlNifEnv* env, ERL_NIF_TERM term, ERL_NIF_TERM* head, ERL_NIF_TERM* tail));\nERL_NIF_API_FUNC_DECL(int,enif_get_tuple,(ErlNifEnv* env, ERL_NIF_TERM tpl, int* arity, const ERL_NIF_TERM** array));\nERL_NIF_API_FUNC_DECL(int,enif_is_identical,(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs));\nERL_NIF_API_FUNC_DECL(int,enif_compare,(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_binary,(ErlNifEnv* env, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_badarg,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_int,(ErlNifEnv* env, int i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_ulong,(ErlNifEnv* env, unsigned long i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_double,(ErlNifEnv* env, double d));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_atom,(ErlNifEnv* env, const char* name));\nERL_NIF_API_FUNC_DECL(int,enif_make_existing_atom,(ErlNifEnv* env, const char* name, ERL_NIF_TERM* atom, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_tuple,(ErlNifEnv* env, unsigned cnt, ...));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list,(ErlNifEnv* env, unsigned cnt, ...));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list_cell,(ErlNifEnv* env, ERL_NIF_TERM car, ERL_NIF_TERM cdr));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_string,(ErlNifEnv* env, const char* string, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_ref,(ErlNifEnv* env));\n\nERL_NIF_API_FUNC_DECL(ErlNifMutex*,enif_mutex_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_destroy,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(int,enif_mutex_trylock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_lock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_unlock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(ErlNifCond*,enif_cond_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_cond_destroy,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_signal,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_broadcast,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_wait,(ErlNifCond *cnd, ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(ErlNifRWLock*,enif_rwlock_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_destroy,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_rwlock_tryrlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_runlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_rwlock_tryrwlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rwlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rwunlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_tsd_key_create,(char *name, ErlNifTSDKey *key));\nERL_NIF_API_FUNC_DECL(void,enif_tsd_key_destroy,(ErlNifTSDKey key));\nERL_NIF_API_FUNC_DECL(void,enif_tsd_set,(ErlNifTSDKey key, void *data));\nERL_NIF_API_FUNC_DECL(void*,enif_tsd_get,(ErlNifTSDKey key));\nERL_NIF_API_FUNC_DECL(ErlNifThreadOpts*,enif_thread_opts_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_thread_opts_destroy,(ErlNifThreadOpts *opts));\nERL_NIF_API_FUNC_DECL(int,enif_thread_create,(char *name,ErlNifTid *tid,void * (*func)(void *),void *args,ErlNifThreadOpts *opts));\nERL_NIF_API_FUNC_DECL(ErlNifTid,enif_thread_self,(void));\nERL_NIF_API_FUNC_DECL(int,enif_equal_tids,(ErlNifTid tid1, ErlNifTid tid2));\nERL_NIF_API_FUNC_DECL(void,enif_thread_exit,(void *resp));\nERL_NIF_API_FUNC_DECL(int,enif_thread_join,(ErlNifTid, void **respp));\n\nERL_NIF_API_FUNC_DECL(void*,enif_realloc,(void* ptr, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_system_info,(ErlNifSysInfo *sip, size_t si_size));\nERL_NIF_API_FUNC_DECL(int,enif_fprintf,(void/* FILE* */ *filep, const char *format, ...));\nERL_NIF_API_FUNC_DECL(int,enif_inspect_iolist_as_binary,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_sub_binary,(ErlNifEnv*, ERL_NIF_TERM bin_term, size_t pos, size_t size));\nERL_NIF_API_FUNC_DECL(int,enif_get_string,(ErlNifEnv*, ERL_NIF_TERM list, char* buf, unsigned len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_get_atom,(ErlNifEnv*, ERL_NIF_TERM atom, char* buf, unsigned len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_is_fun,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_pid,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_port,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_get_uint,(ErlNifEnv*, ERL_NIF_TERM term, unsigned* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_long,(ErlNifEnv*, ERL_NIF_TERM term, long* ip));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_uint,(ErlNifEnv*, unsigned i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_long,(ErlNifEnv*, long i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_tuple_from_array,(ErlNifEnv*, const ERL_NIF_TERM arr[], unsigned cnt));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list_from_array,(ErlNifEnv*, const ERL_NIF_TERM arr[], unsigned cnt));\nERL_NIF_API_FUNC_DECL(int,enif_is_empty_list,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(ErlNifResourceType*,enif_open_resource_type,(ErlNifEnv*, const char* module_str, const char* name_str, void (*dtor)(ErlNifEnv*,void *), ErlNifResourceFlags flags, ErlNifResourceFlags* tried));\nERL_NIF_API_FUNC_DECL(void*,enif_alloc_resource,(ErlNifResourceType* type, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_release_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_resource,(ErlNifEnv*, void* obj));\nERL_NIF_API_FUNC_DECL(int,enif_get_resource,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifResourceType* type, void** objp));\nERL_NIF_API_FUNC_DECL(size_t,enif_sizeof_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(unsigned char*,enif_make_new_binary,(ErlNifEnv*,size_t size,ERL_NIF_TERM* termp));\nERL_NIF_API_FUNC_DECL(int,enif_is_list,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_tuple,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_get_atom_length,(ErlNifEnv*, ERL_NIF_TERM atom, unsigned* len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_get_list_length,(ErlNifEnv* env, ERL_NIF_TERM term, unsigned* len));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_make_atom_len,(ErlNifEnv* env, const char* name, size_t len));\nERL_NIF_API_FUNC_DECL(int, enif_make_existing_atom_len,(ErlNifEnv* env, const char* name, size_t len, ERL_NIF_TERM* atom, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_string_len,(ErlNifEnv* env, const char* string, size_t len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ErlNifEnv*,enif_alloc_env,(void));\nERL_NIF_API_FUNC_DECL(void,enif_free_env,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(void,enif_clear_env,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(int,enif_send,(ErlNifEnv* env, const ErlNifPid* to_pid, ErlNifEnv* msg_env, ERL_NIF_TERM msg));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_copy,(ErlNifEnv* dst_env, ERL_NIF_TERM src_term));\nERL_NIF_API_FUNC_DECL(ErlNifPid*,enif_self,(ErlNifEnv* caller_env, ErlNifPid* pid));\nERL_NIF_API_FUNC_DECL(int,enif_get_local_pid,(ErlNifEnv* env, ERL_NIF_TERM, ErlNifPid* pid));\nERL_NIF_API_FUNC_DECL(void,enif_keep_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_resource_binary,(ErlNifEnv*,void* obj,const void* data, size_t size));\n#if SIZEOF_LONG != 8\nERL_NIF_API_FUNC_DECL(int,enif_get_int64,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifSInt64* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_uint64,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifUInt64* ip));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_int64,(ErlNifEnv*, ErlNifSInt64));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_uint64,(ErlNifEnv*, ErlNifUInt64));\n#endif\nERL_NIF_API_FUNC_DECL(int,enif_is_exception,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_make_reverse_list,(ErlNifEnv*, ERL_NIF_TERM term, ERL_NIF_TERM *list));\nERL_NIF_API_FUNC_DECL(int,enif_is_number,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(void*,enif_dlopen,(const char* lib, void (*err_handler)(void*,const char*), void* err_arg));\nERL_NIF_API_FUNC_DECL(void*,enif_dlsym,(void* handle, const char* symbol, void (*err_handler)(void*,const char*), void* err_arg));\nERL_NIF_API_FUNC_DECL(int,enif_consume_timeslice,(ErlNifEnv*, int percent));\n\n/*\n** Add new entries here to keep compatibility on Windows!!!\n*/\n#endif\n\n/*\n** Please keep the ERL_NIF_API_FUNC_MACRO list below in the same order\n** as the ERL_NIF_API_FUNC_DECL list above\n*/\n#ifdef ERL_NIF_API_FUNC_MACRO\n#  define enif_priv_data ERL_NIF_API_FUNC_MACRO(enif_priv_data)\n#  define enif_alloc ERL_NIF_API_FUNC_MACRO(enif_alloc)\n#  define enif_free ERL_NIF_API_FUNC_MACRO(enif_free)\n#  define enif_is_atom ERL_NIF_API_FUNC_MACRO(enif_is_atom)\n#  define enif_is_binary ERL_NIF_API_FUNC_MACRO(enif_is_binary)\n#  define enif_is_ref ERL_NIF_API_FUNC_MACRO(enif_is_ref)\n#  define enif_inspect_binary ERL_NIF_API_FUNC_MACRO(enif_inspect_binary)\n#  define enif_alloc_binary ERL_NIF_API_FUNC_MACRO(enif_alloc_binary)\n#  define enif_realloc_binary ERL_NIF_API_FUNC_MACRO(enif_realloc_binary)\n#  define enif_release_binary ERL_NIF_API_FUNC_MACRO(enif_release_binary)\n#  define enif_get_int ERL_NIF_API_FUNC_MACRO(enif_get_int)\n#  define enif_get_ulong ERL_NIF_API_FUNC_MACRO(enif_get_ulong)\n#  define enif_get_double ERL_NIF_API_FUNC_MACRO(enif_get_double)\n#  define enif_get_tuple ERL_NIF_API_FUNC_MACRO(enif_get_tuple)\n#  define enif_get_list_cell ERL_NIF_API_FUNC_MACRO(enif_get_list_cell)\n#  define enif_is_identical ERL_NIF_API_FUNC_MACRO(enif_is_identical)\n#  define enif_compare ERL_NIF_API_FUNC_MACRO(enif_compare)\n\n#  define enif_make_binary ERL_NIF_API_FUNC_MACRO(enif_make_binary)\n#  define enif_make_badarg ERL_NIF_API_FUNC_MACRO(enif_make_badarg)\n#  define enif_make_int ERL_NIF_API_FUNC_MACRO(enif_make_int)\n#  define enif_make_ulong ERL_NIF_API_FUNC_MACRO(enif_make_ulong)\n#  define enif_make_double ERL_NIF_API_FUNC_MACRO(enif_make_double)\n#  define enif_make_atom ERL_NIF_API_FUNC_MACRO(enif_make_atom)\n#  define enif_make_existing_atom ERL_NIF_API_FUNC_MACRO(enif_make_existing_atom)\n#  define enif_make_tuple ERL_NIF_API_FUNC_MACRO(enif_make_tuple)\n#  define enif_make_list ERL_NIF_API_FUNC_MACRO(enif_make_list)\n#  define enif_make_list_cell ERL_NIF_API_FUNC_MACRO(enif_make_list_cell)\n#  define enif_make_string ERL_NIF_API_FUNC_MACRO(enif_make_string)\n#  define enif_make_ref ERL_NIF_API_FUNC_MACRO(enif_make_ref)\n\n#  define enif_mutex_create ERL_NIF_API_FUNC_MACRO(enif_mutex_create) \n#  define enif_mutex_destroy ERL_NIF_API_FUNC_MACRO(enif_mutex_destroy) \n#  define enif_mutex_trylock ERL_NIF_API_FUNC_MACRO(enif_mutex_trylock) \n#  define enif_mutex_lock ERL_NIF_API_FUNC_MACRO(enif_mutex_lock) \n#  define enif_mutex_unlock ERL_NIF_API_FUNC_MACRO(enif_mutex_unlock) \n#  define enif_cond_create ERL_NIF_API_FUNC_MACRO(enif_cond_create) \n#  define enif_cond_destroy ERL_NIF_API_FUNC_MACRO(enif_cond_destroy) \n#  define enif_cond_signal ERL_NIF_API_FUNC_MACRO(enif_cond_signal) \n#  define enif_cond_broadcast ERL_NIF_API_FUNC_MACRO(enif_cond_broadcast) \n#  define enif_cond_wait ERL_NIF_API_FUNC_MACRO(enif_cond_wait) \n#  define enif_rwlock_create ERL_NIF_API_FUNC_MACRO(enif_rwlock_create) \n#  define enif_rwlock_destroy ERL_NIF_API_FUNC_MACRO(enif_rwlock_destroy) \n#  define enif_rwlock_tryrlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_tryrlock) \n#  define enif_rwlock_rlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rlock) \n#  define enif_rwlock_runlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_runlock) \n#  define enif_rwlock_tryrwlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_tryrwlock) \n#  define enif_rwlock_rwlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rwlock) \n#  define enif_rwlock_rwunlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rwunlock) \n#  define enif_tsd_key_create ERL_NIF_API_FUNC_MACRO(enif_tsd_key_create) \n#  define enif_tsd_key_destroy ERL_NIF_API_FUNC_MACRO(enif_tsd_key_destroy) \n#  define enif_tsd_set ERL_NIF_API_FUNC_MACRO(enif_tsd_set) \n#  define enif_tsd_get ERL_NIF_API_FUNC_MACRO(enif_tsd_get) \n#  define enif_thread_opts_create ERL_NIF_API_FUNC_MACRO(enif_thread_opts_create) \n#  define enif_thread_opts_destroy ERL_NIF_API_FUNC_MACRO(enif_thread_opts_destroy) \n#  define enif_thread_create ERL_NIF_API_FUNC_MACRO(enif_thread_create) \n#  define enif_thread_self ERL_NIF_API_FUNC_MACRO(enif_thread_self) \n#  define enif_equal_tids ERL_NIF_API_FUNC_MACRO(enif_equal_tids) \n#  define enif_thread_exit ERL_NIF_API_FUNC_MACRO(enif_thread_exit) \n#  define enif_thread_join ERL_NIF_API_FUNC_MACRO(enif_thread_join) \n\n#  define enif_realloc ERL_NIF_API_FUNC_MACRO(enif_realloc) \n#  define enif_system_info ERL_NIF_API_FUNC_MACRO(enif_system_info) \n#  define enif_fprintf ERL_NIF_API_FUNC_MACRO(enif_fprintf) \n#  define enif_inspect_iolist_as_binary ERL_NIF_API_FUNC_MACRO(enif_inspect_iolist_as_binary)\n#  define enif_make_sub_binary ERL_NIF_API_FUNC_MACRO(enif_make_sub_binary)\n#  define enif_get_string ERL_NIF_API_FUNC_MACRO(enif_get_string)\n#  define enif_get_atom ERL_NIF_API_FUNC_MACRO(enif_get_atom)\n#  define enif_is_fun ERL_NIF_API_FUNC_MACRO(enif_is_fun)\n#  define enif_is_pid ERL_NIF_API_FUNC_MACRO(enif_is_pid)\n#  define enif_is_port ERL_NIF_API_FUNC_MACRO(enif_is_port)\n#  define enif_get_uint ERL_NIF_API_FUNC_MACRO(enif_get_uint)\n#  define enif_get_long ERL_NIF_API_FUNC_MACRO(enif_get_long)\n#  define enif_make_uint ERL_NIF_API_FUNC_MACRO(enif_make_uint)\n#  define enif_make_long ERL_NIF_API_FUNC_MACRO(enif_make_long)\n#  define enif_make_tuple_from_array ERL_NIF_API_FUNC_MACRO(enif_make_tuple_from_array)\n#  define enif_make_list_from_array ERL_NIF_API_FUNC_MACRO(enif_make_list_from_array)\n#  define enif_is_empty_list ERL_NIF_API_FUNC_MACRO(enif_is_empty_list)\n#  define enif_open_resource_type ERL_NIF_API_FUNC_MACRO(enif_open_resource_type)\n#  define enif_alloc_resource ERL_NIF_API_FUNC_MACRO(enif_alloc_resource)\n#  define enif_release_resource ERL_NIF_API_FUNC_MACRO(enif_release_resource)\n#  define enif_make_resource ERL_NIF_API_FUNC_MACRO(enif_make_resource)\n#  define enif_get_resource ERL_NIF_API_FUNC_MACRO(enif_get_resource)\n#  define enif_sizeof_resource ERL_NIF_API_FUNC_MACRO(enif_sizeof_resource)\n#  define enif_make_new_binary ERL_NIF_API_FUNC_MACRO(enif_make_new_binary)\n#  define enif_is_list ERL_NIF_API_FUNC_MACRO(enif_is_list)\n#  define enif_is_tuple ERL_NIF_API_FUNC_MACRO(enif_is_tuple)\n#  define enif_get_atom_length ERL_NIF_API_FUNC_MACRO(enif_get_atom_length)\n#  define enif_get_list_length ERL_NIF_API_FUNC_MACRO(enif_get_list_length)\n#  define enif_make_atom_len ERL_NIF_API_FUNC_MACRO(enif_make_atom_len)\n#  define enif_make_existing_atom_len ERL_NIF_API_FUNC_MACRO(enif_make_existing_atom_len)\n#  define enif_make_string_len ERL_NIF_API_FUNC_MACRO(enif_make_string_len)\n#  define enif_alloc_env ERL_NIF_API_FUNC_MACRO(enif_alloc_env)\n#  define enif_free_env ERL_NIF_API_FUNC_MACRO(enif_free_env)\n#  define enif_clear_env ERL_NIF_API_FUNC_MACRO(enif_clear_env)\n#  define enif_send ERL_NIF_API_FUNC_MACRO(enif_send)\n#  define enif_make_copy ERL_NIF_API_FUNC_MACRO(enif_make_copy)\n#  define enif_self ERL_NIF_API_FUNC_MACRO(enif_self)\n#  define enif_get_local_pid ERL_NIF_API_FUNC_MACRO(enif_get_local_pid)\n#  define enif_keep_resource ERL_NIF_API_FUNC_MACRO(enif_keep_resource)\n#  define enif_make_resource_binary ERL_NIF_API_FUNC_MACRO(enif_make_resource_binary)\n#if  SIZEOF_LONG != 8\n#  define enif_get_int64 ERL_NIF_API_FUNC_MACRO(enif_get_int64)\n#  define enif_get_uint64 ERL_NIF_API_FUNC_MACRO(enif_get_uint64)\n#  define enif_make_int64 ERL_NIF_API_FUNC_MACRO(enif_make_int64)\n#  define enif_make_uint64 ERL_NIF_API_FUNC_MACRO(enif_make_uint64)\n#endif\n\n#  define enif_is_exception ERL_NIF_API_FUNC_MACRO(enif_is_exception)\n#  define enif_make_reverse_list ERL_NIF_API_FUNC_MACRO(enif_make_reverse_list)\n#  define enif_is_number ERL_NIF_API_FUNC_MACRO(enif_is_number)\n#  define enif_dlopen ERL_NIF_API_FUNC_MACRO(enif_dlopen)\n#  define enif_dlsym ERL_NIF_API_FUNC_MACRO(enif_dlsym)\n#  define enif_consume_timeslice ERL_NIF_API_FUNC_MACRO(enif_consume_timeslice)\n\n/*\n** Add new entries here\n*/\n#endif\n\n\n#if defined(__GNUC__) && !(defined(__WIN32__) || defined(_WIN32) || defined(_WIN32_))\n\n/* Inline functions for compile time type checking of arguments to\n   variadic functions.\n*/\n\n#  define ERL_NIF_INLINE __inline__\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple1(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1)\n{\n    return enif_make_tuple(env, 1, e1);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple2(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2)\n{\n    return enif_make_tuple(env, 2, e1, e2);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple3(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3)\n{\n    return enif_make_tuple(env, 3, e1, e2, e3);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple4(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4)\n{\n    return enif_make_tuple(env, 4, e1, e2, e3, e4);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple5(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5)\n{\n    return enif_make_tuple(env, 5, e1, e2, e3, e4, e5);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple6(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6)\n{\n    return enif_make_tuple(env, 6, e1, e2, e3, e4, e5, e6);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple7(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7)\n{\n    return enif_make_tuple(env, 7, e1, e2, e3, e4, e5, e6, e7);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple8(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7,\n\t\t\t\t\t\t    ERL_NIF_TERM e8)\n{\n    return enif_make_tuple(env, 8, e1, e2, e3, e4, e5, e6, e7, e8);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple9(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7,\n\t\t\t\t\t\t    ERL_NIF_TERM e8,\n\t\t\t\t\t\t    ERL_NIF_TERM e9)\n{\n    return enif_make_tuple(env, 9, e1, e2, e3, e4, e5, e6, e7, e8, e9);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list1(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1)\n{\n    return enif_make_list(env, 1, e1);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list2(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2)\n{\n    return enif_make_list(env, 2, e1, e2);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list3(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3)\n{\n    return enif_make_list(env, 3, e1, e2, e3);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list4(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4)\n{\n    return enif_make_list(env, 4, e1, e2, e3, e4);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list5(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5)\n{\n    return enif_make_list(env, 5, e1, e2, e3, e4, e5);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list6(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6)\n{\n    return enif_make_list(env, 6, e1, e2, e3, e4, e5, e6);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list7(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7)\n{\n    return enif_make_list(env, 7, e1, e2, e3, e4, e5, e6, e7);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list8(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7,\n\t\t\t\t\t\t   ERL_NIF_TERM e8)\n{\n    return enif_make_list(env, 8, e1, e2, e3, e4, e5, e6, e7, e8);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list9(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7,\n\t\t\t\t\t\t   ERL_NIF_TERM e8,\n\t\t\t\t\t\t   ERL_NIF_TERM e9)\n{\n    return enif_make_list(env, 9, e1, e2, e3, e4, e5, e6, e7, e8, e9);\n}\n\n#  undef ERL_NIF_INLINE\n\n#else /* fallback with macros */\n\n#ifndef enif_make_list1\n#  define enif_make_list1(ENV,E1) enif_make_list(ENV,1,E1)\n#  define enif_make_list2(ENV,E1,E2) enif_make_list(ENV,2,E1,E2)\n#  define enif_make_list3(ENV,E1,E2,E3) enif_make_list(ENV,3,E1,E2,E3)\n#  define enif_make_list4(ENV,E1,E2,E3,E4) enif_make_list(ENV,4,E1,E2,E3,E4)\n#  define enif_make_list5(ENV,E1,E2,E3,E4,E5) enif_make_list(ENV,5,E1,E2,E3,E4,E5)\n#  define enif_make_list6(ENV,E1,E2,E3,E4,E5,E6) enif_make_list(ENV,6,E1,E2,E3,E4,E5,E6)\n#  define enif_make_list7(ENV,E1,E2,E3,E4,E5,E6,E7) enif_make_list(ENV,7,E1,E2,E3,E4,E5,E6,E7)\n#  define enif_make_list8(ENV,E1,E2,E3,E4,E5,E6,E7,E8) enif_make_list(ENV,8,E1,E2,E3,E4,E5,E6,E7,E8)\n#  define enif_make_list9(ENV,E1,E2,E3,E4,E5,E6,E7,E8,E9) enif_make_list(ENV,9,E1,E2,E3,E4,E5,E6,E7,E8,E9)\n#  define enif_make_tuple1(ENV,E1) enif_make_tuple(ENV,1,E1)\n#  define enif_make_tuple2(ENV,E1,E2) enif_make_tuple(ENV,2,E1,E2)\n#  define enif_make_tuple3(ENV,E1,E2,E3) enif_make_tuple(ENV,3,E1,E2,E3)\n#  define enif_make_tuple4(ENV,E1,E2,E3,E4) enif_make_tuple(ENV,4,E1,E2,E3,E4)\n#  define enif_make_tuple5(ENV,E1,E2,E3,E4,E5) enif_make_tuple(ENV,5,E1,E2,E3,E4,E5)\n#  define enif_make_tuple6(ENV,E1,E2,E3,E4,E5,E6) enif_make_tuple(ENV,6,E1,E2,E3,E4,E5,E6)\n#  define enif_make_tuple7(ENV,E1,E2,E3,E4,E5,E6,E7) enif_make_tuple(ENV,7,E1,E2,E3,E4,E5,E6,E7)\n#  define enif_make_tuple8(ENV,E1,E2,E3,E4,E5,E6,E7,E8) enif_make_tuple(ENV,8,E1,E2,E3,E4,E5,E6,E7,E8)\n#  define enif_make_tuple9(ENV,E1,E2,E3,E4,E5,E6,E7,E8,E9) enif_make_tuple(ENV,9,E1,E2,E3,E4,E5,E6,E7,E8,E9)\n#endif\n\n#endif /* __GNUC__ && !WIN32 */\n\n#ifndef enif_make_pid\n\n#  define enif_make_pid(ENV, PID) ((const ERL_NIF_TERM)((PID)->pid))\n\n#if SIZEOF_LONG == 8\n#  define enif_get_int64 enif_get_long\n#  define enif_get_uint64 enif_get_ulong\n#  define enif_make_int64 enif_make_long\n#  define enif_make_uint64 enif_make_ulong\n#endif\n\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/beam/erl_nif.c": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2009-2018. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * %CopyrightEnd%\n */\n/* Erlang Native InterFace\n */\n\n/*\n * Environment contains a pointer to currently executing process.\n * In the dirty case this pointer do however not point to the\n * actual process structure of the executing process, but instead\n * a \"shadow process structure\". This in order to be able to handle\n * heap allocation without the need to acquire the main lock on\n * the process.\n *\n * The dirty process is allowed to allocate on the heap without\n * the main lock, i.e., incrementing htop, but is not allowed to\n * modify mbuf, offheap, etc without the main lock. The dirty\n * process moves mbuf list and offheap list of the shadow process\n * structure into the real structure when the dirty nif call\n * completes.\n */\n\n\n#ifdef HAVE_CONFIG_H\n#  include \"config.h\"\n#endif\n\n#include \"erl_nif.h\"\n\n#include \"sys.h\"\n#include \"global.h\"\n#include \"erl_binary.h\"\n#include \"bif.h\"\n#include \"error.h\"\n#include \"big.h\"\n#include \"erl_map.h\"\n#include \"beam_bp.h\"\n#include \"erl_thr_progress.h\"\n#include \"dtrace-wrapper.h\"\n#include \"erl_process.h\"\n#include \"erl_bif_unique.h\"\n#include \"erl_utils.h\"\n#include \"erl_io_queue.h\"\n#include \"erl_proc_sig_queue.h\"\n#undef ERTS_WANT_NFUNC_SCHED_INTERNALS__\n#define ERTS_WANT_NFUNC_SCHED_INTERNALS__\n#include \"erl_nfunc_sched.h\"\n#if defined(USE_DYNAMIC_TRACE) && (defined(USE_DTRACE) || defined(USE_SYSTEMTAP))\n#define HAVE_USE_DTRACE 1\n#endif\n\n#include <limits.h>\n#include <stddef.h> /* offsetof */\n\n/* Information about a loaded nif library.\n * Each successful call to erlang:load_nif will allocate an instance of\n * erl_module_nif. Two calls opening the same library will thus have the same\n * 'handle'.\n */\nstruct erl_module_nif {\n    void* priv_data;\n    void* handle;             /* \"dlopen\" */\n    struct enif_entry_t entry;\n    erts_refc_t rt_cnt;       /* number of resource types */\n    erts_refc_t rt_dtor_cnt;  /* number of resource types with destructors */\n    Module* mod;           /* Can be NULL if orphan with dtor-resources left */ \n\n    ErlNifFunc _funcs_copy_[1];  /* only used for old libs */\n};\n\ntypedef ERL_NIF_TERM (*NativeFunPtr)(ErlNifEnv*, int, const ERL_NIF_TERM[]);\n\n#ifdef DEBUG\n#  define READONLY_CHECK\n#  define ERTS_DBG_NIF_NOT_SCHED_MARKER ((void *) (UWord) 1)\n#endif\n#ifdef READONLY_CHECK\n#  define ADD_READONLY_CHECK(ENV,PTR,SIZE) add_readonly_check(ENV,PTR,SIZE)\nstatic void add_readonly_check(ErlNifEnv*, unsigned char* ptr, unsigned sz);\n#else\n#  define ADD_READONLY_CHECK(ENV,PTR,SIZE) ((void)0)\n#endif\n\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n#  define ASSERT_IN_ENV(ENV, TERM, NR, TYPE) dbg_assert_in_env(ENV, TERM, NR, TYPE, __func__)\nstatic void dbg_assert_in_env(ErlNifEnv*, Eterm term, int nr, const char* type, const char* func);\n#  include \"erl_gc.h\"\n#else\n#  define ASSERT_IN_ENV(ENV, TERM, NR, TYPE)\n#endif\n\n#ifdef DEBUG\nstatic int is_offheap(const ErlOffHeap* off_heap);\n#endif\n\n#ifdef USE_VM_PROBES\nvoid dtrace_nifenv_str(ErlNifEnv *, char *);\n#endif\n\n#define MIN_HEAP_FRAG_SZ 200\nstatic Eterm* alloc_heap_heavy(ErlNifEnv* env, size_t need, Eterm* hp);\n\nstatic ERTS_INLINE int\nis_scheduler(void)\n{\n    ErtsSchedulerData *esdp = erts_get_scheduler_data();\n    if (!esdp)\n\treturn 0;\n    if (ERTS_SCHEDULER_IS_DIRTY(esdp))\n\treturn -1;\n    return 1;\n}\n\nstatic ERTS_INLINE void\nexecution_state(ErlNifEnv *env, Process **c_pp, int *schedp)\n{\n    if (schedp)\n\t*schedp = is_scheduler();\n    if (c_pp) {\n\tif (!env || env->proc->common.id == ERTS_INVALID_PID)\n\t    *c_pp = NULL;\n\telse {\n\t    Process *c_p = env->proc;\n\n\t    if (!(c_p->static_flags & ERTS_STC_FLG_SHADOW_PROC)) {\n\t\tERTS_LC_ASSERT(erts_proc_lc_my_proc_locks(c_p)\n\t\t\t\t   & ERTS_PROC_LOCK_MAIN);\n\t    }\n\t    else {\n\t\tc_p = env->proc->next;\n\t\tASSERT(is_scheduler() < 0);\n\t\tASSERT(c_p && env->proc->common.id == c_p->common.id);\n\t    }\n\n\t    *c_pp = c_p;\n\n\t    ASSERT(!(c_p->static_flags & ERTS_STC_FLG_SHADOW_PROC));\n\t}\n    }\n}\n\nstatic ERTS_INLINE Eterm* alloc_heap(ErlNifEnv* env, size_t need)\n{\n    Eterm* hp = env->hp;\n    env->hp += need;\n    if (env->hp <= env->hp_end) {\n\treturn hp;\n    }\n    return alloc_heap_heavy(env, need, hp);\n}\n\nstatic Eterm* alloc_heap_heavy(ErlNifEnv* env, size_t need, Eterm* hp)\n{\n    env->hp = hp;\n    if (env->heap_frag == NULL) {\n\tASSERT(HEAP_LIMIT(env->proc) == env->hp_end);\n        ASSERT(env->hp + need > env->hp_end);\n\tHEAP_TOP(env->proc) = env->hp;\n    }\n    else {\n\tUint usz = env->hp - env->heap_frag->mem;\n\tenv->proc->mbuf_sz += usz - env->heap_frag->used_size;\n\tenv->heap_frag->used_size = usz;\n\tASSERT(env->heap_frag->used_size <= env->heap_frag->alloc_size);\n    }\n    hp = erts_heap_alloc(env->proc, need, MIN_HEAP_FRAG_SZ);\n    env->heap_frag = MBUF(env->proc);\n    env->hp = hp + need;\n    env->hp_end = env->heap_frag->mem + env->heap_frag->alloc_size;\n\n    return hp;\n}\n\n#if SIZEOF_LONG != ERTS_SIZEOF_ETERM\nstatic ERTS_INLINE void ensure_heap(ErlNifEnv* env, size_t may_need)\n{\n    if (env->hp + may_need > env->hp_end) {\n\talloc_heap_heavy(env, may_need, env->hp);\n\tenv->hp -= may_need;\n    }\n}\n#endif\n\nvoid erts_pre_nif(ErlNifEnv* env, Process* p, struct erl_module_nif* mod_nif,\n                  Process* tracee)\n{\n    env->mod_nif = mod_nif;\n    env->proc = p;\n    env->hp = HEAP_TOP(p);\n    env->hp_end = HEAP_LIMIT(p);\n    env->heap_frag = NULL;\n    env->fpe_was_unmasked = erts_block_fpe();\n    env->tmp_obj_list = NULL;\n    env->exception_thrown = 0;\n    env->tracee = tracee;\n\n    ASSERT(p->common.id != ERTS_INVALID_PID);\n\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    env->dbg_disable_assert_in_env = 0;\n#endif\n#if defined(DEBUG) && defined(ERTS_DIRTY_SCHEDULERS)\n    {\n\tErtsSchedulerData *esdp = erts_get_scheduler_data();\n\tASSERT(esdp);\n\n\tif (!ERTS_SCHEDULER_IS_DIRTY(esdp)) {\n\t    erts_aint32_t state = erts_atomic32_read_nob(&p->state);\n\n\t    ASSERT(p->scheduler_data == esdp);\n\t    ASSERT((state & (ERTS_PSFLG_RUNNING\n\t\t\t     | ERTS_PSFLG_RUNNING_SYS))\n\t\t   && !(state & (ERTS_PSFLG_DIRTY_RUNNING\n\t\t\t\t | ERTS_PSFLG_DIRTY_RUNNING_SYS)));\n\t}\n    }\n#endif\n}\n\nstatic void full_cache_env(ErlNifEnv *env);\nstatic void cache_env(ErlNifEnv* env);\nstatic void full_flush_env(ErlNifEnv *env);\nstatic void flush_env(ErlNifEnv* env);\n\n/* Temporary object header, auto-deallocated when NIF returns or when\n * independent environment is cleared.\n *\n * The payload can be accessed with &tmp_obj_ptr[1] but keep in mind that its\n * first element must not require greater alignment than `next`. */\nstruct enif_tmp_obj_t {\n    struct enif_tmp_obj_t* next;\n    void (*dtor)(struct enif_tmp_obj_t*);\n    ErtsAlcType_t allocator;\n    /*char data[];*/\n};\n\nstatic ERTS_INLINE void free_tmp_objs(ErlNifEnv* env)\n{\n    while (env->tmp_obj_list != NULL) {\n\tstruct enif_tmp_obj_t* free_me = env->tmp_obj_list;\n\tenv->tmp_obj_list = free_me->next;\n\tfree_me->dtor(free_me);\n    }\n}\n\n/* Whether the given environment is bound to a process and will be cleaned up\n * when the NIF returns. It's safe to use temp_alloc for objects in\n * env->tmp_obj_list when this is true. */\nstatic ERTS_INLINE int is_proc_bound(ErlNifEnv *env)\n{\n    return env->mod_nif != NULL;\n}\n\n/* Allocates and attaches an object to the given environment, running its\n * destructor when the environment is cleared. To avoid temporary variables the\n * address of the allocated object is returned instead of the enif_tmp_obj_t.\n *\n * The destructor *must* call `erts_free(tmp_obj->allocator, tmp_obj)` to free\n * the object. If the destructor needs to refer to the allocated object its\n * address will be &tmp_obj[1]. */\nstatic ERTS_INLINE void *alloc_tmp_obj(ErlNifEnv *env, size_t size,\n                                       void (*dtor)(struct enif_tmp_obj_t*)) {\n    struct enif_tmp_obj_t *tmp_obj;\n    ErtsAlcType_t allocator;\n\n    allocator = is_proc_bound(env) ? ERTS_ALC_T_TMP : ERTS_ALC_T_NIF;\n\n    tmp_obj = erts_alloc(allocator, sizeof(struct enif_tmp_obj_t) + MAX(1, size));\n\n    tmp_obj->next = env->tmp_obj_list;\n    tmp_obj->allocator = allocator;\n    tmp_obj->dtor = dtor;\n\n    env->tmp_obj_list = tmp_obj;\n\n    return (void*)&tmp_obj[1];\n}\n\n/* Generic destructor for objects allocated through alloc_tmp_obj that don't\n * care about their payload. */\nstatic void tmp_alloc_dtor(struct enif_tmp_obj_t *tmp_obj)\n{\n    erts_free(tmp_obj->allocator, tmp_obj);\n}\n\nvoid erts_post_nif(ErlNifEnv* env)\n{\n    erts_unblock_fpe(env->fpe_was_unmasked);\n    full_flush_env(env);\n    free_tmp_objs(env);\n    env->exiting = ERTS_PROC_IS_EXITING(env->proc);\n}\n\n\n/*\n * Initialize a NifExport struct. Create it if needed and store it in the\n * proc. The direct_fp function is what will be invoked by op_call_nif, and\n * the indirect_fp function, if not NULL, is what the direct_fp function\n * will call. If the allocated NifExport isn't enough to hold all of argv,\n * allocate a larger one. Save 'current' and registers if first time this\n * call is scheduled.\n */\n\nstatic ERTS_INLINE ERL_NIF_TERM\nschedule(ErlNifEnv* env, NativeFunPtr direct_fp, NativeFunPtr indirect_fp,\n\t Eterm mod, Eterm func_name, int argc, const ERL_NIF_TERM argv[])\n{\n    NifExport *ep;\n    Process *c_p, *dirty_shadow_proc;\n\n    execution_state(env, &c_p, NULL);\n    if (c_p == env->proc)\n\tdirty_shadow_proc = NULL;\n    else\n\tdirty_shadow_proc = env->proc;\n\n    ERTS_LC_ASSERT(ERTS_PROC_LOCK_MAIN & erts_proc_lc_my_proc_locks(c_p));\n\n    ep = erts_nif_export_schedule(c_p, dirty_shadow_proc,\n\t\t\t\t  c_p->current,\n\t\t\t\t  c_p->cp,\n\t\t\t\t  BeamOpCodeAddr(op_call_nif),\n\t\t\t\t  direct_fp, indirect_fp,\n\t\t\t\t  mod, func_name,\n\t\t\t\t  argc, (const Eterm *) argv);\n    if (!ep->m) {\n\t/* First time this call is scheduled... */\n\terts_refc_inc(&env->mod_nif->rt_dtor_cnt, 1);\n\tep->m = env->mod_nif;\n    }\n    return (ERL_NIF_TERM) THE_NON_VALUE;\n}\n\n\nstatic ERL_NIF_TERM dirty_nif_finalizer(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM dirty_nif_exception(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nint\nerts_call_dirty_nif(ErtsSchedulerData *esdp, Process *c_p, BeamInstr *I, Eterm *reg)\n{\n    int exiting;\n    ERL_NIF_TERM *argv = (ERL_NIF_TERM *) reg;\n    NifExport *nep = ERTS_I_BEAM_OP_TO_NIF_EXPORT(I);\n    ErtsCodeMFA *codemfa = erts_code_to_codemfa(I);\n    NativeFunPtr dirty_nif = (NativeFunPtr) I[1];\n    ErlNifEnv env;\n    ERL_NIF_TERM result;\n#ifdef DEBUG\n    erts_aint32_t state = erts_atomic32_read_nob(&c_p->state);\n\n    ASSERT(nep == ERTS_PROC_GET_NIF_TRAP_EXPORT(c_p));\n\n    ASSERT(!c_p->scheduler_data);\n    ASSERT((state & ERTS_PSFLG_DIRTY_RUNNING)\n\t&& !(state & (ERTS_PSFLG_RUNNING|ERTS_PSFLG_RUNNING_SYS)));\n    ASSERT(esdp);\n\n    nep->func = ERTS_DBG_NIF_NOT_SCHED_MARKER;\n#endif\n\n    erts_pre_nif(&env, c_p, nep->m, NULL);\n\n    env.proc = erts_make_dirty_shadow_proc(esdp, c_p);\n\n    env.proc->freason = EXC_NULL;\n    env.proc->fvalue = NIL;\n    env.proc->ftrace = NIL;\n    env.proc->i = c_p->i;\n\n    ASSERT(ERTS_SCHEDULER_IS_DIRTY(erts_proc_sched_data(c_p)));\n\n    erts_atomic32_read_band_mb(&c_p->state, ~(ERTS_PSFLG_DIRTY_CPU_PROC\n\t\t\t\t\t\t   | ERTS_PSFLG_DIRTY_IO_PROC));\n\n    ASSERT(esdp->current_nif == NULL);\n    esdp->current_nif = &env;\n\n    erts_proc_unlock(c_p, ERTS_PROC_LOCK_MAIN);\n\n    result = (*dirty_nif)(&env, codemfa->arity, argv); /* Call dirty NIF */\n\n    erts_proc_lock(c_p, ERTS_PROC_LOCK_MAIN);\n\n    ASSERT(esdp->current_nif == &env);\n    esdp->current_nif = NULL;\n\n    ASSERT(env.proc->static_flags & ERTS_STC_FLG_SHADOW_PROC);\n    ASSERT(env.proc->next == c_p);\n\n    exiting = ERTS_PROC_IS_EXITING(c_p);\n\n    if (!exiting) {\n\tif (env.exception_thrown) {\n\tschedule_exception:\n\t    schedule(&env, dirty_nif_exception, NULL,\n\t\t     am_erts_internal, am_dirty_nif_exception,\n\t\t     1, &env.proc->fvalue);\n\t}\n\telse if (is_value(result)) {\n\t    schedule(&env, dirty_nif_finalizer, NULL,\n\t\t     am_erts_internal, am_dirty_nif_finalizer,\n\t\t     1, &result);\n\t}\n\telse if (env.proc->freason != TRAP) { /* user returned garbage... */\n\t    ERTS_DECL_AM(badreturn);\n\t    (void) enif_raise_exception(&env, AM_badreturn);\n\t    goto schedule_exception;\n\t}\n\telse {\n\t    /* Rescheduled by dirty NIF call... */\n\t    ASSERT(nep->func != ERTS_DBG_NIF_NOT_SCHED_MARKER);\n\t}\n\tc_p->i = env.proc->i;\n\tc_p->arity = env.proc->arity;\n    }\n\n#ifdef DEBUG\n    if (nep->func == ERTS_DBG_NIF_NOT_SCHED_MARKER)\n\tnep->func = NULL;\n#endif\n\n    erts_unblock_fpe(env.fpe_was_unmasked);\n    full_flush_env(&env);\n    free_tmp_objs(&env);\n\n    return exiting;\n}\n\n\nstatic void full_flush_env(ErlNifEnv* env)\n{\n    flush_env(env);\n    if (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC)\n\t/* Dirty nif call using shadow process struct */\n\terts_flush_dirty_shadow_proc(env->proc);\n}\n\nstatic void full_cache_env(ErlNifEnv* env)\n{    \n    if (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC) {\n\terts_cache_dirty_shadow_proc(env->proc);\n        /*\n         * If shadow proc had heap fragments when flushed\n         * those have now been moved to the real proc.\n         * Ensure heap pointers do not point into a heap\n         * fragment on real proc...\n         */\n        ASSERT(!env->proc->mbuf);\n\tenv->hp_end = HEAP_LIMIT(env->proc);\n\tenv->hp = HEAP_TOP(env->proc);\n    }\n    cache_env(env);\n}\n\n/* Flush out our cached heap pointers to allow an ordinary HAlloc\n*/\nstatic void flush_env(ErlNifEnv* env)\n{\n    if (env->heap_frag == NULL) {\n\tASSERT(env->hp_end == HEAP_LIMIT(env->proc));\n\tASSERT(env->hp >= HEAP_TOP(env->proc));\n\tASSERT(env->hp <= HEAP_LIMIT(env->proc));\t\n\tHEAP_TOP(env->proc) = env->hp;\n    }\n    else {\n\tUint usz;\n\tASSERT(env->hp_end != HEAP_LIMIT(env->proc));\n\tASSERT(env->hp_end - env->hp <= env->heap_frag->alloc_size);\n\tusz = env->hp - env->heap_frag->mem;\n\tenv->proc->mbuf_sz += usz - env->heap_frag->used_size;\n\tenv->heap_frag->used_size = usz;\n\tASSERT(env->heap_frag->used_size <= env->heap_frag->alloc_size);\n    }\n}\n\n/* Restore cached heap pointers to allow alloc_heap again.\n*/\nstatic void cache_env(ErlNifEnv* env)\n{\n    env->heap_frag = MBUF(env->proc);\n    if (env->heap_frag == NULL) {\n\tASSERT(env->hp_end == HEAP_LIMIT(env->proc));\n\tASSERT(env->hp <= HEAP_TOP(env->proc));\n\tASSERT(env->hp <= HEAP_LIMIT(env->proc));\t\n\tenv->hp = HEAP_TOP(env->proc);\n    }\n    else {\n\tenv->hp = env->heap_frag->mem + env->heap_frag->used_size;\n\tenv->hp_end = env->heap_frag->mem + env->heap_frag->alloc_size;\n    }\n}\n\nvoid* enif_priv_data(ErlNifEnv* env)\n{\n    return env->mod_nif->priv_data;\n}\n\nvoid* enif_alloc(size_t size)\n{\n    return erts_alloc_fnf(ERTS_ALC_T_NIF, (Uint) size);\n}\n\nvoid* enif_realloc(void* ptr, size_t size)\n{\n    return erts_realloc_fnf(ERTS_ALC_T_NIF, ptr, size);\n}\n\nvoid enif_free(void* ptr)\n{\n    erts_free(ERTS_ALC_T_NIF, ptr);\n}\n\nstruct enif_msg_environment_t\n{\n    ErlNifEnv env;\n    Process phony_proc;\n};\n\nstatic ERTS_INLINE void\nsetup_nif_env(struct enif_msg_environment_t* msg_env,\n              struct erl_module_nif* mod,\n              Process* tracee)\n{\n    Eterm* phony_heap = (Eterm*) msg_env; /* dummy non-NULL ptr */\n\n    msg_env->env.hp = phony_heap;\n    msg_env->env.hp_end = phony_heap;\n    msg_env->env.heap_frag = NULL;\n    msg_env->env.mod_nif = mod;\n    msg_env->env.tmp_obj_list = NULL;\n    msg_env->env.proc = &msg_env->phony_proc;\n    msg_env->env.exception_thrown = 0;\n    sys_memset(&msg_env->phony_proc, 0, sizeof(Process));\n    HEAP_START(&msg_env->phony_proc) = phony_heap;\n    HEAP_TOP(&msg_env->phony_proc) = phony_heap;\n    HEAP_LIMIT(&msg_env->phony_proc) = phony_heap;\n    HEAP_END(&msg_env->phony_proc) = phony_heap;\n    MBUF(&msg_env->phony_proc) = NULL;\n    msg_env->phony_proc.common.id = ERTS_INVALID_PID;\n    msg_env->env.tracee = tracee;\n\n#ifdef FORCE_HEAP_FRAGS\n    msg_env->phony_proc.space_verified = 0;\n    msg_env->phony_proc.space_verified_from = NULL;\n#endif\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    msg_env->env.dbg_disable_assert_in_env = 0;\n#endif\n}\n\nErlNifEnv* enif_alloc_env(void)\n{\n    struct enif_msg_environment_t* msg_env =\n\terts_alloc_fnf(ERTS_ALC_T_NIF, sizeof(struct enif_msg_environment_t));\n    setup_nif_env(msg_env, NULL, NULL);\n    return &msg_env->env;\n}\nvoid enif_free_env(ErlNifEnv* env)\n{\n    enif_clear_env(env);\n    erts_free(ERTS_ALC_T_NIF, env);\n}\n\nstatic ERTS_INLINE void pre_nif_noproc(struct enif_msg_environment_t* msg_env,\n                                       struct erl_module_nif* mod,\n                                       Process* tracee)\n{\n    setup_nif_env(msg_env, mod, tracee);\n    msg_env->env.fpe_was_unmasked = erts_block_fpe();\n}\n\nstatic ERTS_INLINE void post_nif_noproc(struct enif_msg_environment_t* msg_env)\n{\n    erts_unblock_fpe(msg_env->env.fpe_was_unmasked);\n    enif_clear_env(&msg_env->env);\n}\n\nstatic ERTS_INLINE void clear_offheap(ErlOffHeap* oh)\n{\n    oh->first = NULL;\n    oh->overhead = 0;\n}\n\nvoid enif_clear_env(ErlNifEnv* env)\n{\n    struct enif_msg_environment_t* menv = (struct enif_msg_environment_t*)env;\n    Process* p = &menv->phony_proc;\n    ASSERT(p == menv->env.proc);\n    ASSERT(p->common.id == ERTS_INVALID_PID);\n    ASSERT(MBUF(p) == menv->env.heap_frag);\n\n    free_tmp_objs(env);\n\n    if (MBUF(p) != NULL) {\n\terts_cleanup_offheap(&MSO(p));\n\tclear_offheap(&MSO(p));\n\tfree_message_buffer(MBUF(p));\n\tMBUF(p) = NULL;\n\tmenv->env.heap_frag = NULL;\n    }\n    ASSERT(HEAP_TOP(p) == HEAP_END(p));\n    menv->env.hp = menv->env.hp_end = HEAP_TOP(p);\n    \n    ASSERT(!is_offheap(&MSO(p)));\n}\n\n#ifdef DEBUG\nstatic int enif_send_delay = 0;\n#define ERTS_FORCE_ENIF_SEND_DELAY() (enif_send_delay++ % 32 == 0)\n#else\n#ifdef ERTS_PROC_LOCK_OWN_IMPL\n#define ERTS_FORCE_ENIF_SEND_DELAY() 0\n#else\n/*\n * We always schedule messages if we do not use our own\n * process lock implementation, as if we try to do a trylock on\n * a lock that might already be locked by the same thread.\n * And what happens then with different mutex implementations\n * is not always guaranteed.\n */\n#define ERTS_FORCE_ENIF_SEND_DELAY() 1\n#endif\n#endif\n\nint erts_flush_trace_messages(Process *c_p, ErtsProcLocks c_p_locks)\n{\n    ErlTraceMessageQueue *msgq, **last_msgq;\n    int reds = 0;\n\n    /* Only one thread at a time is allowed to flush trace messages,\n       so we require the main lock to be held when doing the flush */\n    ERTS_CHK_HAVE_ONLY_MAIN_PROC_LOCK(c_p);\n\n    erts_proc_lock(c_p, ERTS_PROC_LOCK_TRACE);\n\n    msgq = c_p->trace_msg_q;\n\n    if (!msgq)\n        goto error;\n\n    do {\n        Process* rp;\n        ErtsProcLocks rp_locks;\n        ErtsMessage *first, **last;\n        Uint len;\n\n        first = msgq->first;\n        last = msgq->last;\n        len = msgq->len;\n        msgq->first = NULL;\n        msgq->last = &msgq->first;\n        msgq->len = 0;\n        erts_proc_unlock(c_p, ERTS_PROC_LOCK_TRACE);\n\n        ASSERT(len != 0);\n\n        rp = erts_proc_lookup(msgq->receiver);\n        if (rp) {\n            rp_locks = 0;\n            if (rp->common.id == c_p->common.id)\n                rp_locks = c_p_locks;\n            erts_queue_proc_messages(c_p, rp, rp_locks, first, last, len);\n            if (rp->common.id == c_p->common.id)\n                rp_locks &= ~c_p_locks;\n            if (rp_locks)\n                erts_proc_unlock(rp, rp_locks);\n            reds += len;\n        } else {\n            erts_cleanup_messages(first);\n        }\n        reds += 1;\n        erts_proc_lock(c_p, ERTS_PROC_LOCK_TRACE);\n        msgq = msgq->next;\n    } while (msgq);\n\n    last_msgq = &c_p->trace_msg_q;\n\n    while (*last_msgq) {\n        msgq = *last_msgq;\n        if (msgq->len == 0) {\n            *last_msgq = msgq->next;\n            erts_free(ERTS_ALC_T_TRACE_MSG_QUEUE, msgq);\n        } else {\n            last_msgq = &msgq->next;\n        }\n    }\n\nerror:\n    erts_proc_unlock(c_p, ERTS_PROC_LOCK_TRACE);\n\n    return reds;\n}\n\n\nint enif_send(ErlNifEnv* env, const ErlNifPid* to_pid,\n\t      ErlNifEnv* msg_env, ERL_NIF_TERM msg)\n{\n    struct enif_msg_environment_t* menv = (struct enif_msg_environment_t*)msg_env;\n    ErtsProcLocks rp_locks = 0;\n    ErtsProcLocks lc_locks = 0;\n    Process* rp;\n    Process* c_p;\n    ErtsMessage *mp;\n    Eterm from;\n    Eterm receiver = to_pid->pid;\n    int scheduler;\n\n    execution_state(env, &c_p, &scheduler);\n\n\n    if (scheduler > 0) { /* Normal scheduler */\n\trp = erts_proc_lookup(receiver);\n\tif (!rp)\n\t    return 0;\n    }\n    else {\n\tif (c_p) {\n\t    ASSERT(scheduler < 0); /* Dirty scheduler */\n\t    if (ERTS_PROC_IS_EXITING(c_p))\n\t\treturn 0;\n\n\t    if (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC) {\n\t\terts_proc_lock(c_p, ERTS_PROC_LOCK_MAIN);\n\t    }\n\t}\n\n\trp = erts_pid2proc_opt(c_p, ERTS_PROC_LOCK_MAIN,\n\t\t\t       receiver, rp_locks,\n\t\t\t       ERTS_P2P_FLG_INC_REFC);\n\tif (!rp) {\n\t    if (c_p && (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC))\n\t\terts_proc_unlock(c_p, ERTS_PROC_LOCK_MAIN);\n\t    return 0;\n\t}\n    }\n\n    if (c_p == rp)\n\trp_locks = ERTS_PROC_LOCK_MAIN;\n\n    if (menv) {\n        Eterm token = c_p ? SEQ_TRACE_TOKEN(c_p) : am_undefined;\n        if (token != NIL && token != am_undefined) {\n            /* This code is copied from erts_send_message */\n            Eterm stoken = SEQ_TRACE_TOKEN(c_p);\n#ifdef USE_VM_PROBES\n            DTRACE_CHARBUF(sender_name, 64);\n            DTRACE_CHARBUF(receiver_name, 64);\n            Sint tok_label = 0;\n            Sint tok_lastcnt = 0;\n            Sint tok_serial = 0;\n            Eterm utag = NIL;\n            *sender_name = *receiver_name = '\\0';\n            if (DTRACE_ENABLED(message_send)) {\n                erts_snprintf(sender_name, sizeof(DTRACE_CHARBUF_NAME(sender_name)),\n                              \"%T\", c_p->common.id);\n                erts_snprintf(receiver_name, sizeof(DTRACE_CHARBUF_NAME(receiver_name)),\n                              \"%T\", rp->common.id);\n            }\n#endif\n            if (have_seqtrace(stoken)) {\n                seq_trace_update_send(c_p);\n                seq_trace_output(stoken, msg, SEQ_TRACE_SEND,\n                                 rp->common.id, c_p);\n            }\n#ifdef USE_VM_PROBES\n            if (!(DT_UTAG_FLAGS(c_p) & DT_UTAG_SPREADING)) {\n                stoken = NIL;\n            }\n#endif\n            token = enif_make_copy(msg_env, stoken);\n\n#ifdef USE_VM_PROBES\n            if (DT_UTAG_FLAGS(c_p) & DT_UTAG_SPREADING) {\n                if (is_immed(DT_UTAG(c_p)))\n                    utag = DT_UTAG(c_p);\n                else\n                    utag = enif_make_copy(msg_env, DT_UTAG(c_p));\n            }\n            if (DTRACE_ENABLED(message_send)) {\n                if (have_seqtrace(stoken)) {\n                    tok_label = SEQ_TRACE_T_DTRACE_LABEL(stoken);\n                    tok_lastcnt = signed_val(SEQ_TRACE_T_LASTCNT(stoken));\n                    tok_serial = signed_val(SEQ_TRACE_T_SERIAL(stoken));\n                }\n                DTRACE6(message_send, sender_name, receiver_name,\n                        size_object(msg), tok_label, tok_lastcnt, tok_serial);\n            }\n#endif\n        }\n        flush_env(msg_env);\n        mp = erts_alloc_message(0, NULL);\n        ERL_MESSAGE_TOKEN(mp) = token;\n        mp->data.heap_frag = menv->env.heap_frag;\n        ASSERT(mp->data.heap_frag == MBUF(&menv->phony_proc));\n        if (mp->data.heap_frag != NULL) {\n            /* Move all offheap's from phony proc to the first fragment.\n               Quick and dirty... */\n            ASSERT(!is_offheap(&mp->data.heap_frag->off_heap));\n            mp->data.heap_frag->off_heap = MSO(&menv->phony_proc);\n            clear_offheap(&MSO(&menv->phony_proc));\n            menv->env.heap_frag = NULL;\n            MBUF(&menv->phony_proc) = NULL;\n        }\n    } else {\n        erts_literal_area_t litarea;\n\tErlOffHeap *ohp;\n        Eterm *hp;\n        Uint sz;\n        INITIALIZE_LITERAL_PURGE_AREA(litarea);\n        sz = size_object_litopt(msg, &litarea);\n\tif (c_p && !env->tracee) {\n\t    full_flush_env(env);\n\t    mp = erts_alloc_message_heap(rp, &rp_locks, sz, &hp, &ohp);\n\t    full_cache_env(env);\n\t}\n\telse {\n\t    erts_aint_t state = erts_atomic32_read_nob(&rp->state);\n\t    if (state & ERTS_PSFLG_OFF_HEAP_MSGQ) {\n\t\tmp = erts_alloc_message(sz, &hp);\n\t\tohp = sz == 0 ? NULL : &mp->hfrag.off_heap;\n\t    }\n\t    else {\n\t\tErlHeapFragment *bp = new_message_buffer(sz);\n\t\tmp = erts_alloc_message(0, NULL);\n\t\tmp->data.heap_frag = bp;\n\t\thp = bp->mem;\n\t\tohp = &bp->off_heap;\n\t    }\n\t}\n        ERL_MESSAGE_TOKEN(mp) = am_undefined;\n        msg = copy_struct_litopt(msg, sz, &hp, ohp, &litarea);\n    }\n\n    from = c_p ? c_p->common.id : am_undefined;\n\n    if (!env || !env->tracee) {\n\n        if (c_p && IS_TRACED_FL(c_p, F_TRACE_SEND)) {\n\t    full_flush_env(env);\n            trace_send(c_p, receiver, msg);\n\t    full_cache_env(env);\n\t}\n    }\n    else {\n        /* This clause is taken when the nif is called in the context\n           of a traced process. We do not know which locks we have\n           so we have to do a try lock and if that fails we enqueue\n           the message in a special trace message output queue of the\n           tracee */\n        ErlTraceMessageQueue *msgq;\n        Process *t_p = env->tracee;\n\n        erts_proc_lock(t_p, ERTS_PROC_LOCK_TRACE);\n\n        msgq = t_p->trace_msg_q;\n\n        while (msgq != NULL) {\n            if (msgq->receiver == receiver) {\n                break;\n            }\n            msgq = msgq->next;\n        }\n\n#ifdef ERTS_ENABLE_LOCK_CHECK\n        lc_locks = erts_proc_lc_my_proc_locks(rp);\n        rp_locks |= lc_locks;\n#endif\n        if (ERTS_FORCE_ENIF_SEND_DELAY() || msgq ||\n            rp_locks & ERTS_PROC_LOCK_MSGQ ||\n            erts_proc_trylock(rp, ERTS_PROC_LOCK_MSGQ) == EBUSY) {\n\n            ERL_MESSAGE_TERM(mp) = msg;\n            ERL_MESSAGE_FROM(mp) = from;\n            ERL_MESSAGE_TOKEN(mp) = am_undefined;\n\n            if (!msgq) {\n                msgq = erts_alloc(ERTS_ALC_T_TRACE_MSG_QUEUE,\n                                  sizeof(ErlTraceMessageQueue));\n                msgq->receiver = receiver;\n                msgq->first = mp;\n                msgq->last = &mp->next;\n                msgq->len = 1;\n\n                /* Insert in linked list */\n                msgq->next = t_p->trace_msg_q;\n                t_p->trace_msg_q = msgq;\n\n                erts_proc_unlock(t_p, ERTS_PROC_LOCK_TRACE);\n\n\t\terts_schedule_flush_trace_messages(t_p, 0);\n            } else {\n                msgq->len++;\n                *msgq->last = mp;\n                msgq->last = &mp->next;\n                erts_proc_unlock(t_p, ERTS_PROC_LOCK_TRACE);\n            }\n            goto done;\n        } else {\n            erts_proc_unlock(t_p, ERTS_PROC_LOCK_TRACE);\n            rp_locks &= ~ERTS_PROC_LOCK_TRACE;\n            rp_locks |= ERTS_PROC_LOCK_MSGQ;\n        }\n    }\n\n    if (c_p)\n        erts_queue_proc_message(c_p, rp, rp_locks, mp, msg);\n    else\n        erts_queue_message(rp, rp_locks, mp, msg, from);\n\ndone:\n    if (c_p == rp)\n\trp_locks &= ~ERTS_PROC_LOCK_MAIN;\n    if (rp_locks & ~lc_locks)\n\terts_proc_unlock(rp, rp_locks & ~lc_locks);\n    if (c_p && (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC))\n\terts_proc_unlock(c_p, ERTS_PROC_LOCK_MAIN);\n    if (scheduler <= 0)\n\terts_proc_dec_refc(rp);\n\n    return 1;\n}\n\nint\nenif_port_command(ErlNifEnv *env, const ErlNifPort* to_port,\n                  ErlNifEnv *msg_env, ERL_NIF_TERM msg)\n{\n    int iflags = (erts_port_synchronous_ops\n\t\t  ? ERTS_PORT_SFLGS_INVALID_DRIVER_LOOKUP\n\t\t  : ERTS_PORT_SFLGS_INVALID_LOOKUP);\n    int scheduler;\n    Process *c_p;\n    Port *prt;\n    int res;\n\n    if (!env)\n\terts_exit(ERTS_ABORT_EXIT, \"enif_port_command: env == NULL\");\n\n    execution_state(env, &c_p, &scheduler);\n\n    if (!c_p)\n\tc_p = env->proc;\n\n    if (scheduler > 0)\n\tprt = erts_port_lookup(to_port->port_id, iflags);\n    else {\n\tif (ERTS_PROC_IS_EXITING(c_p))\n\t    return 0;\n\tprt = erts_thr_port_lookup(to_port->port_id, iflags);\n    }\n\n    if (!prt)\n\tres = 0;\n    else\n        res = erts_port_output_async(prt, c_p->common.id, msg);\n\n    if (scheduler <= 0)\n\terts_port_dec_refc(prt);\n\n    return res;\n}\n\n/*\n *  env must be the caller's environment in a scheduler or NULL in a\n *      non-scheduler thread.\n *  name must be an atom - anything else will just waste time.\n */\nstatic Eterm call_whereis(ErlNifEnv *env, Eterm name)\n{\n    Process *c_p;\n    Eterm res;\n    int scheduler;\n\n    execution_state(env, &c_p, &scheduler);\n    ASSERT((c_p && scheduler) || (!c_p && !scheduler));\n\n    if (scheduler < 0) {\n        /* dirty scheduler */\n        if (ERTS_PROC_IS_EXITING(c_p))\n            return 0;\n\n        if (env->proc->static_flags & ERTS_STC_FLG_SHADOW_PROC)\n            c_p = NULL; /* as we don't have main lock */\n    }\n\n\n    if (c_p) {\n         /* main lock may be released below and c_p->htop updated by others */\n        flush_env(env);\n    }\n    res = erts_whereis_name_to_id(c_p, name);\n    if (c_p)\n        cache_env(env);\n\n    return res;\n}\n\nint enif_whereis_pid(ErlNifEnv *env, ERL_NIF_TERM name, ErlNifPid *pid)\n{\n    Eterm res;\n\n    if (is_not_atom(name))\n        return 0;\n\n    res = call_whereis(env, name);\n    /* enif_get_local_ functions check the type */\n    return enif_get_local_pid(env, res, pid);\n}\n\nint enif_whereis_port(ErlNifEnv *env, ERL_NIF_TERM name, ErlNifPort *port)\n{\n    Eterm res;\n\n    if (is_not_atom(name))\n        return 0;\n\n    res = call_whereis(env, name);\n    /* enif_get_local_ functions check the type */\n    return enif_get_local_port(env, res, port);\n}\n\nERL_NIF_TERM enif_make_copy(ErlNifEnv* dst_env, ERL_NIF_TERM src_term)\n{\n    Uint sz;\n    Eterm* hp;\n    /*\n     * No preserved sharing allowed as long as literals are also preserved.\n     * Process independent environment can not be reached by purge.\n     */\n    sz = size_object(src_term);\n    hp = alloc_heap(dst_env, sz);\n    return copy_struct(src_term, sz, &hp, &MSO(dst_env->proc));\n}\n\n\n#ifdef DEBUG\nstatic int is_offheap(const ErlOffHeap* oh)\n{\n    return oh->first != NULL;\n}\n#endif\n\nErlNifPid* enif_self(ErlNifEnv* caller_env, ErlNifPid* pid)\n{\n    if (caller_env->proc->common.id == ERTS_INVALID_PID)\n        return NULL;\n    pid->pid = caller_env->proc->common.id;\n    return pid;\n}\n\nint enif_get_local_pid(ErlNifEnv* env, ERL_NIF_TERM term, ErlNifPid* pid)\n{\n    if (is_internal_pid(term)) {\n        pid->pid=term;\n        return 1;\n    }\n    return 0;\n}\n\nint enif_get_local_port(ErlNifEnv* env, ERL_NIF_TERM term, ErlNifPort* port)\n{\n    if (is_internal_port(term)) {\n        port->port_id=term;\n        return 1;\n    }\n    return 0;\n}\n\nint enif_is_atom(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_atom(term);\n}\n\nint enif_is_binary(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_binary(term) && (binary_bitsize(term) % 8 == 0);\n}\n\nint enif_is_empty_list(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_nil(term);\n}\n\nint enif_is_fun(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_fun(term);\n}\n\nint enif_is_pid(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_pid(term);\n}\n\nint enif_is_port(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_port(term);\n}\n\nint enif_is_ref(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_ref(term);\n}\n\nint enif_is_tuple(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_tuple(term);\n}\n\nint enif_is_list(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_list(term) || is_nil(term);\n}\n\nint enif_is_exception(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return env->exception_thrown && term == THE_NON_VALUE;\n}\n\nint enif_is_number(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_number(term);\n}\n\nstatic void aligned_binary_dtor(struct enif_tmp_obj_t* obj)\n{\n    erts_free_aligned_binary_bytes_extra((byte*)obj, obj->allocator);\n}\n\nint enif_inspect_binary(ErlNifEnv* env, Eterm bin_term, ErlNifBinary* bin)\n{\n    ErtsAlcType_t allocator = is_proc_bound(env) ? ERTS_ALC_T_TMP : ERTS_ALC_T_NIF;\n    union {\n\tstruct enif_tmp_obj_t* tmp;\n\tbyte* raw_ptr;\n    }u;\n\n    if (is_binary(bin_term)) {\n        ProcBin *pb = (ProcBin*) binary_val(bin_term);\n        if (pb->thing_word == HEADER_SUB_BIN) {\n            ErlSubBin* sb = (ErlSubBin*) pb;\n            pb = (ProcBin*) binary_val(sb->orig);\n        }\n        if (pb->thing_word == HEADER_PROC_BIN && pb->flags)\n            erts_emasculate_writable_binary(pb);\n    }\n    u.tmp = NULL;\n    bin->data = erts_get_aligned_binary_bytes_extra(bin_term, &u.raw_ptr, allocator,\n\t\t\t\t\t\t    sizeof(struct enif_tmp_obj_t));\n    if (bin->data == NULL) {\n\treturn 0;\n    }\n    if (u.tmp != NULL) {\n\tu.tmp->allocator = allocator;\n\tu.tmp->next = env->tmp_obj_list;\n\tu.tmp->dtor = &aligned_binary_dtor;\n\tenv->tmp_obj_list = u.tmp;\n    }\n    bin->size = binary_size(bin_term);\n    bin->ref_bin = NULL;\n    ADD_READONLY_CHECK(env, bin->data, bin->size);\n    return 1;\n}\n\nint enif_inspect_iolist_as_binary(ErlNifEnv* env, Eterm term, ErlNifBinary* bin)\n{\n    ErlDrvSizeT sz;\n    if (is_binary(term)) {\n\treturn enif_inspect_binary(env,term,bin);\n    }\n    if (is_nil(term)) {\n\tbin->data = (unsigned char*) &bin->data; /* dummy non-NULL */\n\tbin->size = 0;\n\tbin->ref_bin = NULL;\n\treturn 1;\n    }\n    if (erts_iolist_size(term, &sz)) {\n\treturn 0;\n    }\n\n    bin->data = alloc_tmp_obj(env, sz, &tmp_alloc_dtor);\n    bin->size = sz;\n    bin->ref_bin = NULL;\n    erts_iolist_to_buf(term, (char*) bin->data, sz);\n    ADD_READONLY_CHECK(env, bin->data, bin->size); \n    return 1;\n}\n\nint enif_alloc_binary(size_t size, ErlNifBinary* bin)\n{\n    Binary* refbin;\n\n    refbin = erts_bin_drv_alloc_fnf(size); /* BUGBUG: alloc type? */\n    if (refbin == NULL) {\n\treturn 0; /* The NIF must take action */\n    }\n\n    bin->size = size;\n    bin->data = (unsigned char*) refbin->orig_bytes;\n    bin->ref_bin = refbin;\n    return 1;\n}\n\nint enif_realloc_binary(ErlNifBinary* bin, size_t size)\n{\n    if (bin->ref_bin != NULL) {\n\tBinary* oldbin;\n\tBinary* newbin;\n    \n\toldbin = (Binary*) bin->ref_bin; \n\tnewbin = (Binary *) erts_bin_realloc_fnf(oldbin, size);\n\tif (!newbin) {\n\t    return 0;\n\t}    \n\tbin->ref_bin = newbin;\n\tbin->data = (unsigned char*) newbin->orig_bytes;\n\tbin->size = size;\n    }\n    else {\n\tunsigned char* old_data = bin->data;\n\tsize_t cpy_sz = (size < bin->size ? size : bin->size);  \n\tenif_alloc_binary(size, bin);\n\tsys_memcpy(bin->data, old_data, cpy_sz); \n    }\n    return 1;\n}\n\n\nvoid enif_release_binary(ErlNifBinary* bin)\n{\n    if (bin->ref_bin != NULL) {\n\tBinary* refbin = bin->ref_bin;\n        erts_bin_release(refbin);\n    }\n#ifdef DEBUG\n    bin->data = NULL;\n    bin->ref_bin = NULL;\n#endif\n}\n\nunsigned char* enif_make_new_binary(ErlNifEnv* env, size_t size,\n\t\t\t\t    ERL_NIF_TERM* termp)\n{\n    flush_env(env);\n    *termp = new_binary(env->proc, NULL, size);\n    cache_env(env);\n    return binary_bytes(*termp);\n}\n\nint enif_term_to_binary(ErlNifEnv *dst_env, ERL_NIF_TERM term,\n                        ErlNifBinary *bin)\n{\n    Sint size;\n    byte *bp;\n    Binary* refbin;\n\n    size = erts_encode_ext_size(term);\n    if (!enif_alloc_binary(size, bin))\n        return 0;\n\n    refbin = bin->ref_bin;\n\n    bp = bin->data;\n\n    erts_encode_ext(term, &bp);\n\n    bin->size = bp - bin->data;\n    refbin->orig_size = bin->size;\n\n    ASSERT(bin->data + bin->size == bp);\n\n    return 1;\n}\n\nsize_t enif_binary_to_term(ErlNifEnv *dst_env,\n                           const unsigned char* data,\n                           size_t data_sz,\n                           ERL_NIF_TERM *term,\n                           ErlNifBinaryToTerm opts)\n{\n    Sint size;\n    ErtsHeapFactory factory;\n    byte *bp = (byte*) data;\n    Uint32 flags = 0;\n\n    switch ((Uint32)opts) {\n    case 0: break;\n    case ERL_NIF_BIN2TERM_SAFE: flags = ERTS_DIST_EXT_BTT_SAFE; break;\n    default: return 0;\n    }\n    if ((size = erts_decode_ext_size(bp, data_sz)) < 0)\n        return 0;\n\n    if (size > 0) {\n        flush_env(dst_env);\n        erts_factory_proc_prealloc_init(&factory, dst_env->proc, size);\n    } else {\n        erts_factory_dummy_init(&factory);\n    }\n\n    *term = erts_decode_ext(&factory, &bp, flags);\n\n    if (is_non_value(*term)) {\n        return 0;\n    }\n    if (size > 0) {\n        erts_factory_close(&factory);\n        cache_env(dst_env);\n    }\n\n    ASSERT(bp > data);\n    return bp - data;\n}\n\nint enif_is_identical(Eterm lhs, Eterm rhs)\n{\n    return EQ(lhs,rhs);\n}\n\nint enif_compare(Eterm lhs, Eterm rhs)\n{\n    Sint result = CMP(lhs,rhs);\n\n    if (result < 0) {\n        return -1;\n    } else if (result > 0) {\n        return 1;\n    }\n\n    return result;\n}\n\nErlNifUInt64 enif_hash(ErlNifHash type, Eterm term, ErlNifUInt64 salt)\n{\n    switch (type) {\n        case ERL_NIF_INTERNAL_HASH:\n            return make_internal_hash(term, (Uint32) salt);\n        case ERL_NIF_PHASH2:\n            /* It appears that make_hash2 doesn't always react to seasoning\n             * as well as it should. Therefore, let's make it ignore the salt\n             * value and declare salted uses of phash2 as unsupported.\n             */\n            return make_hash2(term) & ((1 << 27) - 1);\n        default:\n            return 0;\n    }\n}\n\nint enif_get_tuple(ErlNifEnv* env, Eterm tpl, int* arity, const Eterm** array)\n{\n    Eterm* ptr;\n    if (is_not_tuple(tpl)) {\n\treturn 0;\n    }\n    ptr = tuple_val(tpl);\n    *arity = arityval(*ptr);\n    *array = ptr+1;\n    return 1;\n}\n\nint enif_get_string(ErlNifEnv *env, ERL_NIF_TERM list, char* buf, unsigned len,\n\t\t    ErlNifCharEncoding encoding)\n{\n    Eterm* listptr;\n    int n = 0;\n\n    ASSERT(encoding == ERL_NIF_LATIN1);\n    if (len < 1) {\n\treturn 0;\n    }\n    while (is_not_nil(list)) { \t    \n\tif (is_not_list(list)) {\n\t    buf[n] = '\\0';\n\t    return 0;\n\t}\n\tlistptr = list_val(list);\n    \n\tif (!is_byte(*listptr)) {\n\t    buf[n] = '\\0';\n\t    return 0;\n\t}\n\tbuf[n++] = unsigned_val(*listptr);\n\tif (n >= len) {\n\t    buf[n-1] = '\\0'; /* truncate */\n\t    return -len;\n\t}\n\tlist = CDR(listptr);\n    }\n    buf[n] = '\\0';\n    return n + 1;\n}\n\nEterm enif_make_binary(ErlNifEnv* env, ErlNifBinary* bin)\n{\n    Eterm bin_term;\n\n    if (bin->ref_bin != NULL) {\n        Binary* binary = bin->ref_bin;\n\n        /* If the binary is smaller than the heap binary limit we'll return a\n         * heap binary to reduce the number of small refc binaries in the\n         * system. We can't simply release the refc binary right away however;\n         * the documentation states that the binary should be considered\n         * read-only from this point on, which implies that it should still be\n         * readable.\n         *\n         * We could keep it alive until we return by adding it to the temporary\n         * object list, but that requires an off-heap allocation which is\n         * potentially quite slow, so we create a dummy ProcBin instead and\n         * rely on the next minor GC to get rid of it. */\n        if (bin->size <= ERL_ONHEAP_BIN_LIMIT) {\n            ErlHeapBin* hb;\n\n            hb = (ErlHeapBin*)alloc_heap(env, heap_bin_size(bin->size));\n            hb->thing_word = header_heap_bin(bin->size);\n            hb->size = bin->size;\n\n            sys_memcpy(hb->data, bin->data, bin->size);\n\n            erts_build_proc_bin(&MSO(env->proc),\n                                alloc_heap(env, PROC_BIN_SIZE),\n                                binary);\n\n            bin_term = make_binary(hb);\n        } else {\n            bin_term = erts_build_proc_bin(&MSO(env->proc),\n                                           alloc_heap(env, PROC_BIN_SIZE),\n                                           binary);\n        }\n\n        /* Our (possibly shared) ownership has been transferred to the term. */\n        bin->ref_bin = NULL;\n    } else {\n        flush_env(env);\n        bin_term = new_binary(env->proc, bin->data, bin->size);\n        cache_env(env);\n    }\n\n    return bin_term;\n}\n\nEterm enif_make_sub_binary(ErlNifEnv* env, ERL_NIF_TERM bin_term,\n\t\t\t   size_t pos, size_t size)\n{\n    ErlSubBin* sb;\n    Eterm orig;\n    Uint offset, bit_offset, bit_size; \n#ifdef DEBUG\n    size_t src_size;\n\n    ASSERT(is_binary(bin_term));\n    src_size = binary_size(bin_term);\n    ASSERT(pos <= src_size);\n    ASSERT(size <= src_size);\n    ASSERT(pos + size <= src_size);   \n#endif\n    sb = (ErlSubBin*) alloc_heap(env, ERL_SUB_BIN_SIZE);\n    ERTS_GET_REAL_BIN(bin_term, orig, offset, bit_offset, bit_size);\n    sb->thing_word = HEADER_SUB_BIN;\n    sb->size = size;\n    sb->offs = offset + pos;\n    sb->orig = orig;\n    sb->bitoffs = bit_offset;\n    sb->bitsize = 0;\n    sb->is_writable = 0;\n    return make_binary(sb);\n}\n\n\nEterm enif_make_badarg(ErlNifEnv* env)\n{\n    return enif_raise_exception(env, am_badarg);\n}\n\nEterm enif_raise_exception(ErlNifEnv* env, ERL_NIF_TERM reason)\n{\n    env->exception_thrown = 1;\n    env->proc->fvalue = reason;\n    BIF_ERROR(env->proc, EXC_ERROR);\n}\n\nint enif_has_pending_exception(ErlNifEnv* env, ERL_NIF_TERM* reason)\n{\n    if (env->exception_thrown && reason != NULL)\n\t*reason = env->proc->fvalue;\n    return env->exception_thrown;\n}\n\nint enif_get_atom(ErlNifEnv* env, Eterm atom, char* buf, unsigned len,\n\t\t  ErlNifCharEncoding encoding)\n{\n    Atom* ap;\n    ASSERT(encoding == ERL_NIF_LATIN1);\n    if (is_not_atom(atom) || len==0) {\n\treturn 0;\n    }\n    ap = atom_tab(atom_val(atom));\n\n    if (ap->latin1_chars < 0 || ap->latin1_chars >= len) {\n\treturn 0;\n    }\n    if (ap->latin1_chars == ap->len) {\n\tsys_memcpy(buf, ap->name, ap->len);\n    }\n    else {\n\tint dlen = erts_utf8_to_latin1((byte*)buf, ap->name, ap->len);\n\tASSERT(dlen == ap->latin1_chars); (void)dlen;\n    }\n    buf[ap->latin1_chars] = '\\0';\n    return ap->latin1_chars + 1;\n}\n\nint enif_get_int(ErlNifEnv* env, Eterm term, int* ip)\n{\n#if SIZEOF_INT ==  ERTS_SIZEOF_ETERM\n    return term_to_Sint(term, (Sint*)ip);\n#elif (SIZEOF_LONG ==  ERTS_SIZEOF_ETERM) || \\\n  (SIZEOF_LONG_LONG ==  ERTS_SIZEOF_ETERM)\n    Sint i;\n    if (!term_to_Sint(term, &i) || i < INT_MIN || i > INT_MAX) {\n\treturn 0;\n    }\n    *ip = (int) i;\n    return 1;\n#else\n#  error Unknown word size \n#endif     \n}\n\nint enif_get_uint(ErlNifEnv* env, Eterm term, unsigned* ip)\n{\n#if SIZEOF_INT == ERTS_SIZEOF_ETERM\n    return term_to_Uint(term, (Uint*)ip);\n#elif (SIZEOF_LONG == ERTS_SIZEOF_ETERM) || \\\n  (SIZEOF_LONG_LONG ==  ERTS_SIZEOF_ETERM)\n    Uint i;\n    if (!term_to_Uint(term, &i) || i > UINT_MAX) {\n\treturn 0;\n    }\n    *ip = (unsigned) i;\n    return 1;\n#endif     \n}\n\nint enif_get_long(ErlNifEnv* env, Eterm term, long* ip)\n{\n#if SIZEOF_LONG == ERTS_SIZEOF_ETERM\n    return term_to_Sint(term, ip);\n#elif SIZEOF_LONG == 8\n    return term_to_Sint64(term, ip);\n#elif SIZEOF_LONG == SIZEOF_INT\n    int tmp,ret;\n    ret = enif_get_int(env,term,&tmp);\n    if (ret) {\n      *ip = (long) tmp;\n    }\n    return ret;\n#else\n#  error Unknown long word size \n#endif     \n}\n\nint enif_get_ulong(ErlNifEnv* env, Eterm term, unsigned long* ip)\n{\n#if SIZEOF_LONG == ERTS_SIZEOF_ETERM\n    return term_to_Uint(term, ip);\n#elif SIZEOF_LONG == 8\n    return term_to_Uint64(term, ip);\n#elif SIZEOF_LONG == SIZEOF_INT\n    int ret;\n    unsigned int tmp;\n    ret = enif_get_uint(env,term,&tmp);\n    if (ret) {\n      *ip = (unsigned long) tmp;\n    }\n    return ret;\n#else\n#  error Unknown long word size \n#endif     \n}\n\n#if HAVE_INT64 && SIZEOF_LONG != 8\nint enif_get_int64(ErlNifEnv* env, ERL_NIF_TERM term, ErlNifSInt64* ip)\n{\n    return term_to_Sint64(term, ip);\n}\n\nint enif_get_uint64(ErlNifEnv* env, ERL_NIF_TERM term, ErlNifUInt64* ip)\n{\n    return term_to_Uint64(term, ip);\n}\n#endif /* HAVE_INT64 && SIZEOF_LONG != 8 */\n\nint enif_get_double(ErlNifEnv* env, ERL_NIF_TERM term, double* dp)\n{\n    FloatDef f;\n    if (is_not_float(term)) {\n\treturn 0;\n    }\n    GET_DOUBLE(term, f);\n    *dp = f.fd;\n    return 1;\n}\n\nint enif_get_atom_length(ErlNifEnv* env, Eterm atom, unsigned* len,\n\t\t\t ErlNifCharEncoding enc)\n{\n    Atom* ap;\n    ASSERT(enc == ERL_NIF_LATIN1);\n    if (is_not_atom(atom)) return 0;\n    ap = atom_tab(atom_val(atom));\n    if (ap->latin1_chars < 0) {\n\treturn 0;\n    }\n    *len = ap->latin1_chars;\n    return 1;\n}\n\nint enif_get_list_cell(ErlNifEnv* env, Eterm term, Eterm* head, Eterm* tail)\n{\n    Eterm* val;\n    if (is_not_list(term)) return 0;\n    val = list_val(term);\n    *head = CAR(val);\n    *tail = CDR(val);\n    return 1;\n}\n\nint enif_get_list_length(ErlNifEnv* env, Eterm term, unsigned* len)\n{\n    Sint i;\n    Uint u;\n\n    if ((i = erts_list_length(term)) < 0) return 0;\n    u = (Uint)i;\n    if ((unsigned)u != u) return 0;\n    *len = u;\n    return 1;\n}\n\nERL_NIF_TERM enif_make_int(ErlNifEnv* env, int i)\n{\n#if SIZEOF_INT == ERTS_SIZEOF_ETERM\n    return IS_SSMALL(i) ? make_small(i) : small_to_big(i,alloc_heap(env,2));\n#elif (SIZEOF_LONG == ERTS_SIZEOF_ETERM) || \\\n  (SIZEOF_LONG_LONG == ERTS_SIZEOF_ETERM)\n    return make_small(i);\n#endif\n}\n\nERL_NIF_TERM enif_make_uint(ErlNifEnv* env, unsigned i)\n{\n#if SIZEOF_INT == ERTS_SIZEOF_ETERM\n    return IS_USMALL(0,i) ? make_small(i) : uint_to_big(i,alloc_heap(env,2));\n#elif (SIZEOF_LONG ==  ERTS_SIZEOF_ETERM) || \\\n  (SIZEOF_LONG_LONG ==  ERTS_SIZEOF_ETERM)\n    return make_small(i);\n#endif\n}\n\nERL_NIF_TERM enif_make_long(ErlNifEnv* env, long i)\n{\n    if (IS_SSMALL(i)) {\n\treturn make_small(i);\n    }\n#if SIZEOF_LONG == ERTS_SIZEOF_ETERM\n    return small_to_big(i, alloc_heap(env,2));\n#elif SIZEOF_LONG_LONG ==  ERTS_SIZEOF_ETERM\n    return make_small(i);\n#elif SIZEOF_LONG == 8\n    ensure_heap(env,3);\n    return erts_sint64_to_big(i, &env->hp);\n#endif\n}\n\nERL_NIF_TERM enif_make_ulong(ErlNifEnv* env, unsigned long i)\n{\n    if (IS_USMALL(0,i)) {\n\treturn make_small(i);\n    }\n#if SIZEOF_LONG == ERTS_SIZEOF_ETERM\n    return uint_to_big(i,alloc_heap(env,2));\n#elif SIZEOF_LONG_LONG ==  ERTS_SIZEOF_ETERM\n    return make_small(i);\n#elif SIZEOF_LONG == 8\n    ensure_heap(env,3);\n    return erts_uint64_to_big(i, &env->hp);    \n#endif\n}\n\n#if HAVE_INT64 && SIZEOF_LONG != 8\nERL_NIF_TERM enif_make_int64(ErlNifEnv* env, ErlNifSInt64 i)\n{\n    Uint* hp;\n    Uint need = 0;\n    erts_bld_sint64(NULL, &need, i);\n    hp = alloc_heap(env, need);\n    return erts_bld_sint64(&hp, NULL, i);\n}\n\nERL_NIF_TERM enif_make_uint64(ErlNifEnv* env, ErlNifUInt64 i)\n{\n    Uint* hp;\n    Uint need = 0;\n    erts_bld_uint64(NULL, &need, i);\n    hp = alloc_heap(env, need);\n    return erts_bld_uint64(&hp, NULL, i);\n}\n#endif /* HAVE_INT64 && SIZEOF_LONG != 8 */\n\nERL_NIF_TERM enif_make_double(ErlNifEnv* env, double d)\n{\n    Eterm* hp;\n    FloatDef f;\n\n    if (!erts_isfinite(d))\n        return enif_make_badarg(env);\n    hp = alloc_heap(env,FLOAT_SIZE_OBJECT);\n    f.fd = d;\n    PUT_DOUBLE(f, hp);\n    return make_float(hp);\n}\n\nERL_NIF_TERM enif_make_atom(ErlNifEnv* env, const char* name)\n{\n    return enif_make_atom_len(env, name, sys_strlen(name));\n}\n\nERL_NIF_TERM enif_make_atom_len(ErlNifEnv* env, const char* name, size_t len)\n{\n    if (len > MAX_ATOM_CHARACTERS)\n        return enif_make_badarg(env);\n    return erts_atom_put((byte*)name, len, ERTS_ATOM_ENC_LATIN1, 1);\n}\n\nint enif_make_existing_atom(ErlNifEnv* env, const char* name, ERL_NIF_TERM* atom,\n\t\t\t    ErlNifCharEncoding enc)\n{\n    return enif_make_existing_atom_len(env, name, sys_strlen(name), atom, enc);\n}\n\nint enif_make_existing_atom_len(ErlNifEnv* env, const char* name, size_t len,\n\t\t\t\tERL_NIF_TERM* atom, ErlNifCharEncoding encoding)\n{\n    ASSERT(encoding == ERL_NIF_LATIN1);\n    if (len > MAX_ATOM_CHARACTERS)\n        return 0;\n    return erts_atom_get(name, len, atom, ERTS_ATOM_ENC_LATIN1);\n}\n\nERL_NIF_TERM enif_make_tuple(ErlNifEnv* env, unsigned cnt, ...)\n{\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    int nr = 0;\n#endif\n    Eterm* hp = alloc_heap(env,cnt+1);\n    Eterm ret = make_tuple(hp);\n    va_list ap;\n\n    *hp++ = make_arityval(cnt);\n    va_start(ap,cnt);\n    while (cnt--) {\n        Eterm elem = va_arg(ap,Eterm);\n        ASSERT_IN_ENV(env, elem, ++nr, \"tuple\");\n\t*hp++ = elem;\n    }\n    va_end(ap);\n    return ret;\n}\n\nERL_NIF_TERM enif_make_tuple_from_array(ErlNifEnv* env, const ERL_NIF_TERM arr[], unsigned cnt)\n{\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    int nr = 0;\n#endif\n    Eterm* hp = alloc_heap(env,cnt+1);\n    Eterm ret = make_tuple(hp);\n    const Eterm* src = arr;\n\n    *hp++ = make_arityval(cnt);\n    while (cnt--) {\n        ASSERT_IN_ENV(env, *src, ++nr, \"tuple\");\n\t*hp++ = *src++;\t   \n    }\n    return ret;\n}\n\nERL_NIF_TERM enif_make_list_cell(ErlNifEnv* env, Eterm car, Eterm cdr)\n{\n    Eterm* hp = alloc_heap(env,2);\n    Eterm ret = make_list(hp);\n\n    ASSERT_IN_ENV(env, car, 0, \"head of list cell\");\n    ASSERT_IN_ENV(env, cdr, 0, \"tail of list cell\");\n    CAR(hp) = car;\n    CDR(hp) = cdr;\n    return ret;\n}\n\nERL_NIF_TERM enif_make_list(ErlNifEnv* env, unsigned cnt, ...)\n{\n    if (cnt == 0) {\n\treturn NIL;\n    }\n    else {\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n        int nr = 0;\n#endif\n\tEterm* hp = alloc_heap(env,cnt*2);\n\tEterm ret = make_list(hp);\n\tEterm* last = &ret;\n\tva_list ap;\n\n\tva_start(ap,cnt);\n\twhile (cnt--) {\n            Eterm term = va_arg(ap,Eterm);\n\t    *last = make_list(hp);\n            ASSERT_IN_ENV(env, term, ++nr, \"list\");\n\t    *hp = term;\n\t    last = ++hp;\n\t    ++hp;\n\t}\n\tva_end(ap);\n\t*last = NIL;\n\treturn ret;\n    }\n}\n\nERL_NIF_TERM enif_make_list_from_array(ErlNifEnv* env, const ERL_NIF_TERM arr[], unsigned cnt)\n{\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    int nr = 0;\n#endif\n    Eterm* hp = alloc_heap(env,cnt*2);\n    Eterm ret = make_list(hp);\n    Eterm* last = &ret;\n    const Eterm* src = arr;\n\n    while (cnt--) {\n        Eterm term = *src++;\n\t*last = make_list(hp);\n        ASSERT_IN_ENV(env, term, ++nr, \"list\");\n\t*hp = term;\n\tlast = ++hp;\n\t++hp;\n    }\n    *last = NIL;\n    return ret;\n}\n\nERL_NIF_TERM enif_make_string(ErlNifEnv* env, const char* string,\n\t\t\t      ErlNifCharEncoding encoding)\n{\n    return enif_make_string_len(env, string, sys_strlen(string), encoding);\n}\n\nERL_NIF_TERM enif_make_string_len(ErlNifEnv* env, const char* string,\n\t\t\t\t  size_t len, ErlNifCharEncoding encoding)\n{\n    Eterm* hp = alloc_heap(env,len*2);\n    ASSERT(encoding == ERL_NIF_LATIN1);\n    return erts_bld_string_n(&hp,NULL,string,len);\n}\n\nERL_NIF_TERM enif_make_ref(ErlNifEnv* env)\n{\n    Eterm* hp = alloc_heap(env, ERTS_REF_THING_SIZE);\n    return erts_make_ref_in_buffer(hp);\n}\n\nvoid enif_system_info(ErlNifSysInfo *sip, size_t si_size)\n{\n    driver_system_info(sip, si_size);\n}\n\nint enif_make_reverse_list(ErlNifEnv* env, ERL_NIF_TERM term, ERL_NIF_TERM *list)\n{\n    Eterm *listptr, ret, *hp;\n\n    ret = NIL;\n\n    while (is_not_nil(term)) {\n\tif (is_not_list(term)) {\n\t    return 0;\n\t}\n\thp = alloc_heap(env, 2);\n\tlistptr = list_val(term);\n\tret = CONS(hp, CAR(listptr), ret);\n\tterm = CDR(listptr);\n    }\n    *list = ret;\n    return 1;\n}\n\nint enif_is_current_process_alive(ErlNifEnv* env)\n{\n    Process *c_p;\n    int scheduler;\n\n    execution_state(env, &c_p, &scheduler);\n\n    if (!c_p)\n\terts_exit(ERTS_ABORT_EXIT,\n\t\t  \"enif_is_current_process_alive: \"\n                  \"Invalid environment\");\n\n    if (!scheduler)\n\terts_exit(ERTS_ABORT_EXIT, \"enif_is_current_process_alive: \"\n\t\t  \"called from non-scheduler thread\");\n\n    return !ERTS_PROC_IS_EXITING(c_p);\n}\n\nint enif_is_process_alive(ErlNifEnv* env, ErlNifPid *proc)\n{\n    int scheduler;\n\n    execution_state(env, NULL, &scheduler);\n\n    if (scheduler > 0)\n\treturn !!erts_proc_lookup(proc->pid);\n    else {\n\tProcess* rp = erts_pid2proc_opt(NULL, 0, proc->pid, 0,\n\t\t\t\t\tERTS_P2P_FLG_INC_REFC);\n\tif (rp)\n\t    erts_proc_dec_refc(rp);\n\treturn !!rp;\n    }\n}\n\nint enif_is_port_alive(ErlNifEnv *env, ErlNifPort *port)\n{\n    int scheduler;\n    Uint32 iflags = (erts_port_synchronous_ops\n\t\t     ? ERTS_PORT_SFLGS_INVALID_DRIVER_LOOKUP\n\t\t     : ERTS_PORT_SFLGS_INVALID_LOOKUP);\n\n    execution_state(env, NULL, &scheduler);\n\n    if (scheduler > 0)\n\treturn !!erts_port_lookup(port->port_id, iflags);\n    else {\n\tPort *prt = erts_thr_port_lookup(port->port_id, iflags);\n\tif (prt)\n\t    erts_port_dec_refc(prt);\n\treturn !!prt;\n    }\n}\n\nERL_NIF_TERM\nenif_now_time(ErlNifEnv *env)\n{\n    Uint mega, sec, micro;\n    Eterm *hp;\n    get_now(&mega, &sec, &micro);\n    hp = alloc_heap(env, 4);\n    return TUPLE3(hp, make_small(mega), make_small(sec), make_small(micro));\n}\n\nERL_NIF_TERM\nenif_cpu_time(ErlNifEnv *env)\n{\n#ifdef HAVE_ERTS_NOW_CPU\n    Uint mega, sec, micro;\n    Eterm *hp;\n    erts_get_now_cpu(&mega, &sec, &micro);\n    hp = alloc_heap(env, 4);\n    return TUPLE3(hp, make_small(mega), make_small(sec), make_small(micro));\n#else\n    return enif_make_badarg(env);\n#endif\n}\n\nERL_NIF_TERM\nenif_make_unique_integer(ErlNifEnv *env, ErlNifUniqueInteger properties)\n{\n    int monotonic = properties & ERL_NIF_UNIQUE_MONOTONIC;\n    int positive = properties & ERL_NIF_UNIQUE_POSITIVE;\n    Eterm *hp;\n    Uint hsz;\n\n    if (monotonic) {\n        Sint64 raw_unique = erts_raw_get_unique_monotonic_integer();\n        hsz = erts_raw_unique_monotonic_integer_heap_size(raw_unique, positive);\n        hp = alloc_heap(env, hsz);\n        return erts_raw_make_unique_monotonic_integer_value(&hp, raw_unique, positive);\n    } else {\n        Uint64 raw_unique[ERTS_UNIQUE_INT_RAW_VALUES];\n        erts_raw_get_unique_integer(raw_unique);\n        hsz = erts_raw_unique_integer_heap_size(raw_unique, positive);\n        hp = alloc_heap(env, hsz);\n        return erts_raw_make_unique_integer(&hp, raw_unique, positive);\n    }\n}\n\nErlNifMutex* enif_mutex_create(char *name) { return erl_drv_mutex_create(name); }\nvoid enif_mutex_destroy(ErlNifMutex *mtx) {  erl_drv_mutex_destroy(mtx); }\nint enif_mutex_trylock(ErlNifMutex *mtx) { return erl_drv_mutex_trylock(mtx); }\nvoid enif_mutex_lock(ErlNifMutex *mtx) { erl_drv_mutex_lock(mtx); }\nvoid enif_mutex_unlock(ErlNifMutex *mtx) { erl_drv_mutex_unlock(mtx); }\nErlNifCond* enif_cond_create(char *name) { return erl_drv_cond_create(name); }\nvoid enif_cond_destroy(ErlNifCond *cnd) { erl_drv_cond_destroy(cnd); }\nvoid enif_cond_signal(ErlNifCond *cnd) { erl_drv_cond_signal(cnd); }\nvoid enif_cond_broadcast(ErlNifCond *cnd) { erl_drv_cond_broadcast(cnd); }\nvoid enif_cond_wait(ErlNifCond *cnd, ErlNifMutex *mtx) { erl_drv_cond_wait(cnd,mtx); }\nErlNifRWLock* enif_rwlock_create(char *name) { return erl_drv_rwlock_create(name); }\nvoid enif_rwlock_destroy(ErlNifRWLock *rwlck) { erl_drv_rwlock_destroy(rwlck); }\nint enif_rwlock_tryrlock(ErlNifRWLock *rwlck) { return erl_drv_rwlock_tryrlock(rwlck); }\nvoid enif_rwlock_rlock(ErlNifRWLock *rwlck) { erl_drv_rwlock_rlock(rwlck); }\nvoid enif_rwlock_runlock(ErlNifRWLock *rwlck) { erl_drv_rwlock_runlock(rwlck); }\nint enif_rwlock_tryrwlock(ErlNifRWLock *rwlck) { return erl_drv_rwlock_tryrwlock(rwlck); }\nvoid enif_rwlock_rwlock(ErlNifRWLock *rwlck) { erl_drv_rwlock_rwlock(rwlck); }\nvoid enif_rwlock_rwunlock(ErlNifRWLock *rwlck) { erl_drv_rwlock_rwunlock(rwlck); }\nint enif_tsd_key_create(char *name, ErlNifTSDKey *key) { return erl_drv_tsd_key_create(name,key); }\nvoid enif_tsd_key_destroy(ErlNifTSDKey key) { erl_drv_tsd_key_destroy(key); }\nvoid enif_tsd_set(ErlNifTSDKey key, void *data) { erl_drv_tsd_set(key,data); }\nvoid* enif_tsd_get(ErlNifTSDKey key) { return erl_drv_tsd_get(key); }\nErlNifThreadOpts* enif_thread_opts_create(char *name) { return (ErlNifThreadOpts*) erl_drv_thread_opts_create(name); }\nvoid enif_thread_opts_destroy(ErlNifThreadOpts *opts) { erl_drv_thread_opts_destroy((ErlDrvThreadOpts*)opts); }\nint enif_thread_create(char *name, ErlNifTid *tid, void* (*func)(void *),\n\t\t       void *args, ErlNifThreadOpts *opts) {\n    return erl_drv_thread_create(name,tid,func,args,(ErlDrvThreadOpts*)opts);\n}\nErlNifTid enif_thread_self(void) { return erl_drv_thread_self(); }\nint enif_equal_tids(ErlNifTid tid1, ErlNifTid tid2) { return erl_drv_equal_tids(tid1,tid2); }\nvoid enif_thread_exit(void *resp) { erl_drv_thread_exit(resp); }\nint enif_thread_join(ErlNifTid tid, void **respp) { return erl_drv_thread_join(tid,respp); }\n\nchar* enif_mutex_name(ErlNifMutex *mtx) {return erl_drv_mutex_name(mtx); }\nchar* enif_cond_name(ErlNifCond *cnd) { return erl_drv_cond_name(cnd); }\nchar* enif_rwlock_name(ErlNifRWLock* rwlck) { return erl_drv_rwlock_name(rwlck); }\nchar* enif_thread_name(ErlNifTid tid) { return erl_drv_thread_name(tid); }\n\nint enif_getenv(const char *key, char *value, size_t *value_size) { return erl_drv_getenv(key, value, value_size); }\n\nErlNifTime enif_monotonic_time(ErlNifTimeUnit time_unit)\n{\n    return (ErlNifTime) erts_napi_monotonic_time((int) time_unit);\n}\n\nErlNifTime enif_time_offset(ErlNifTimeUnit time_unit)\n{\n    return (ErlNifTime) erts_napi_time_offset((int) time_unit);\n}\n\nErlNifTime\nenif_convert_time_unit(ErlNifTime val,\n\t\t       ErlNifTimeUnit from,\n\t\t       ErlNifTimeUnit to)\n{\n    return (ErlNifTime) erts_napi_convert_time_unit((ErtsMonotonicTime) val,\n\t\t\t\t\t\t    (int) from,\n\t\t\t\t\t\t    (int) to);\n}\n\nint enif_fprintf(FILE* filep, const char* format, ...)\n{ \n    int ret;\n    va_list arglist;\n    va_start(arglist, format);\n    ret = erts_vfprintf(filep, format, arglist);\n    va_end(arglist);\n    return ret;\n}    \n\nint enif_vfprintf(FILE* filep, const char *format, va_list ap)\n{\n    return erts_vfprintf(filep, format, ap);\n}\n\nint enif_snprintf(char *buffer, size_t size, const char* format, ...) \n{ \n    int ret;\n    va_list arglist;\n    va_start(arglist, format);\n    ret = erts_vsnprintf(buffer, size, format, arglist);\n    va_end(arglist);\n    return ret;\n}\n\nint enif_vsnprintf(char* buffer, size_t size, const char *format, va_list ap)\n{\n    return erts_vsnprintf(buffer, size, format, ap);\n}\n\n\n/***********************************************************\n **       Memory managed (GC'ed) \"resource\" objects       **\n ***********************************************************/\n\n/* dummy node in circular list */\nstruct enif_resource_type_t resource_type_list; \n\nstatic ErlNifResourceType* find_resource_type(Eterm module, Eterm name)\n{\n    ErlNifResourceType* type;\n    for (type = resource_type_list.next;\n\t type != &resource_type_list;\n\t type = type->next) {\n\n\tif (type->module == module && type->name == name) {\n\t    return type;\n\t}\n    }\n    return NULL;\n}\n\n#define in_area(ptr,start,nbytes) \\\n    ((UWord)((char*)(ptr) - (char*)(start)) < (nbytes))\n\n\nstatic void close_lib(struct erl_module_nif* lib)\n{\n    ASSERT(lib != NULL);\n    ASSERT(lib->handle != NULL);\n    ASSERT(erts_refc_read(&lib->rt_dtor_cnt,0) == 0);\n\n    if (lib->entry.unload != NULL) {\n\tstruct enif_msg_environment_t msg_env;\n        pre_nif_noproc(&msg_env, lib, NULL);\n\tlib->entry.unload(&msg_env.env, lib->priv_data);\n        post_nif_noproc(&msg_env);\n    }\n    if (!erts_is_static_nif(lib->handle))\n      erts_sys_ddll_close(lib->handle);\n    lib->handle = NULL;\n}\n\nstatic void steal_resource_type(ErlNifResourceType* type)\n{\n    struct erl_module_nif* lib = type->owner;\n\n    if (type->dtor != NULL\n\t&& erts_refc_dectest(&lib->rt_dtor_cnt, 0) == 0\n\t&& lib->mod == NULL) {\n\t/* last type with destructor gone, close orphan lib */\n\n\tclose_lib(lib);\n    }\n    if (erts_refc_dectest(&lib->rt_cnt, 0) == 0\n\t&& lib->mod == NULL) {\n\terts_free(ERTS_ALC_T_NIF, lib);\n    }\n}\n\n/* The opened_rt_list is used by enif_open_resource_type()\n * in order to rollback \"creates\" and \"take-overs\" in case the load fails.\n */\nstruct opened_resource_type\n{\n    struct opened_resource_type* next;\n\n    ErlNifResourceFlags op;\n    ErlNifResourceType* type;\n    ErlNifResourceTypeInit new_callbacks;\n};\nstatic struct opened_resource_type* opened_rt_list = NULL;\n\nstatic\nErlNifResourceType* open_resource_type(ErlNifEnv* env,\n                                       const char* name_str,\n                                       const ErlNifResourceTypeInit* init,\n                                       ErlNifResourceFlags flags,\n                                       ErlNifResourceFlags* tried,\n                                       size_t sizeof_init)\n{\n    ErlNifResourceType* type = NULL;\n    ErlNifResourceFlags op = flags;\n    Eterm module_am, name_am;\n\n    ASSERT(erts_thr_progress_is_blocking());\n    module_am = make_atom(env->mod_nif->mod->module);\n    name_am = enif_make_atom(env, name_str);\n\n    type = find_resource_type(module_am, name_am);\n    if (type == NULL) {\n\tif (flags & ERL_NIF_RT_CREATE) {\n\t    type = erts_alloc(ERTS_ALC_T_NIF,\n\t\t\t      sizeof(struct enif_resource_type_t));\n\t    type->module = module_am;\n\t    type->name = name_am;\n\t    erts_refc_init(&type->refc, 1);\n\t    op = ERL_NIF_RT_CREATE;\n\t#ifdef DEBUG\n\t    type->dtor = (void*)1;\n\t    type->owner = (void*)2;\n\t    type->prev = (void*)3;\n\t    type->next = (void*)4;\n\t#endif\n\t}\n    }\n    else {\n\tif (flags & ERL_NIF_RT_TAKEOVER) {\n\t    op = ERL_NIF_RT_TAKEOVER;\n\t}\n\telse {\n\t    type = NULL;\n\t}\n    }\n    if (type != NULL) {\n\tstruct opened_resource_type* ort = erts_alloc(ERTS_ALC_T_TMP,\n\t\t\t\t\t\tsizeof(struct opened_resource_type));\n\tort->op = op;\n\tort->type = type;\n        sys_memzero(&ort->new_callbacks, sizeof(ErlNifResourceTypeInit));\n        ASSERT(sizeof_init > 0 && sizeof_init <= sizeof(ErlNifResourceTypeInit));\n        sys_memcpy(&ort->new_callbacks, init, sizeof_init);\n\tort->next = opened_rt_list;\n\topened_rt_list = ort;\n    }\n    if (tried != NULL) {\n\t*tried = op;\n    }\n    return type;\n}\n\nErlNifResourceType*\nenif_open_resource_type(ErlNifEnv* env,\n                        const char* module_str,\n                        const char* name_str,\n\t\t\tErlNifResourceDtor* dtor,\n\t\t\tErlNifResourceFlags flags,\n\t\t\tErlNifResourceFlags* tried)\n{\n    ErlNifResourceTypeInit init =  {dtor, NULL};\n    ASSERT(module_str == NULL); /* for now... */\n    return open_resource_type(env, name_str, &init, flags, tried,\n                              sizeof(init));\n}\n\nErlNifResourceType*\nenif_open_resource_type_x(ErlNifEnv* env,\n                          const char* name_str,\n                          const ErlNifResourceTypeInit* init,\n                          ErlNifResourceFlags flags,\n                          ErlNifResourceFlags* tried)\n{\n    return open_resource_type(env, name_str, init, flags, tried,\n                              env->mod_nif->entry.sizeof_ErlNifResourceTypeInit);\n}\n\nstatic void commit_opened_resource_types(struct erl_module_nif* lib)\n{\n    while (opened_rt_list) {\n\tstruct opened_resource_type* ort = opened_rt_list;\n\n\tErlNifResourceType* type = ort->type;\n\n\tif (ort->op == ERL_NIF_RT_CREATE) {\n\t    type->prev = &resource_type_list;\n\t    type->next = resource_type_list.next;\n\t    type->next->prev = type;\n\t    type->prev->next = type;\n\t}\n\telse { /* ERL_NIF_RT_TAKEOVER */\n\t    steal_resource_type(type);\n\t}\n\n\ttype->owner = lib;\n\ttype->dtor = ort->new_callbacks.dtor;\n        type->stop = ort->new_callbacks.stop;\n        type->down = ort->new_callbacks.down;\n\n\tif (type->dtor != NULL) {\n\t    erts_refc_inc(&lib->rt_dtor_cnt, 1);\n\t}\n\terts_refc_inc(&lib->rt_cnt, 1);\n\n\topened_rt_list = ort->next;\n\terts_free(ERTS_ALC_T_TMP, ort);\n    }\n}\n\nstatic void rollback_opened_resource_types(void)\n{\n    while (opened_rt_list) {\n\tstruct opened_resource_type* ort = opened_rt_list;\n\n\tif (ort->op == ERL_NIF_RT_CREATE) {\n\t    erts_free(ERTS_ALC_T_NIF, ort->type);\n\t}\n\n\topened_rt_list = ort->next;\n\terts_free(ERTS_ALC_T_TMP, ort);\n    }\n}\n\n#ifdef ARCH_64\n#  define ERTS_RESOURCE_DYING_FLAG (((Uint) 1) << 63)\n#else\n#  define ERTS_RESOURCE_DYING_FLAG (((Uint) 1) << 31)\n#endif\n#define ERTS_RESOURCE_REFC_MASK (~ERTS_RESOURCE_DYING_FLAG)\n\nstatic ERTS_INLINE void\nrmon_set_dying(ErtsResourceMonitors *rms)\n{\n    rms->refc |= ERTS_RESOURCE_DYING_FLAG;\n}\n\nstatic ERTS_INLINE int\nrmon_is_dying(ErtsResourceMonitors *rms)\n{\n    return !!(rms->refc & ERTS_RESOURCE_DYING_FLAG);\n}\n\nstatic ERTS_INLINE void\nrmon_refc_inc(ErtsResourceMonitors *rms)\n{\n    rms->refc++;\n}\n\nstatic ERTS_INLINE Uint\nrmon_refc_dec_read(ErtsResourceMonitors *rms)\n{\n    Uint res;\n    ASSERT((rms->refc & ERTS_RESOURCE_REFC_MASK) != 0);\n    res = --rms->refc;\n    return res & ERTS_RESOURCE_REFC_MASK;\n}\n\nstatic ERTS_INLINE void\nrmon_refc_dec(ErtsResourceMonitors *rms)\n{\n    ASSERT((rms->refc & ERTS_RESOURCE_REFC_MASK) != 0);\n    --rms->refc;\n}\n\nstatic ERTS_INLINE Uint\nrmon_refc_read(ErtsResourceMonitors *rms)\n{\n    return rms->refc & ERTS_RESOURCE_REFC_MASK;\n}\n\nstatic void dtor_demonitor(ErtsMonitor* mon, void* context)\n{\n    ASSERT(erts_monitor_is_origin(mon));\n    ASSERT(is_internal_pid(mon->other.item));\n\n    erts_proc_sig_send_demonitor(mon);\n}\n\n#  define NIF_RESOURCE_DTOR &nif_resource_dtor\n\nstatic int nif_resource_dtor(Binary* bin)\n{\n    ErtsResource* resource = (ErtsResource*) ERTS_MAGIC_BIN_UNALIGNED_DATA(bin);\n    ErlNifResourceType* type = resource->type;\n    ASSERT(ERTS_MAGIC_BIN_DESTRUCTOR(bin) == NIF_RESOURCE_DTOR);\n\n    if (resource->monitors) {\n        ErtsResourceMonitors* rm = resource->monitors;\n        int kill;\n        ErtsMonitor *root;\n        Uint refc;\n\n        ASSERT(type->down);\n        erts_mtx_lock(&rm->lock);\n        ASSERT(erts_refc_read(&bin->intern.refc, 0) == 0);\n        kill = !rmon_is_dying(rm);\n        if (kill) {\n            rmon_set_dying(rm);\n            root = rm->root;\n            rm->root = NULL;\n        }\n        refc = rmon_refc_read(rm);\n        erts_mtx_unlock(&rm->lock);\n\n        if (kill)\n            erts_monitor_tree_foreach_delete(&root,\n                                             dtor_demonitor,\n                                             NULL);\n\n        /*\n         * If resource->monitors->refc != 0 there are\n         * outstanding references to the resource from\n         * monitors that has not been removed yet.\n         * nif_resource_dtor() will be called again this\n         * reference count reach zero.\n         */\n        if (refc != 0)\n            return 0; /* we'll be back... */\n        erts_mtx_destroy(&rm->lock);\n    }\n\n    if (type->dtor != NULL) {\n        struct enif_msg_environment_t msg_env;\n        pre_nif_noproc(&msg_env, type->owner, NULL);\n\ttype->dtor(&msg_env.env, resource->data);\n        post_nif_noproc(&msg_env);\n    }\n    if (erts_refc_dectest(&type->refc, 0) == 0) {\n\tASSERT(type->next == NULL);\n\tASSERT(type->owner != NULL);\n\tASSERT(type->owner->mod == NULL);\n\tsteal_resource_type(type);\n\terts_free(ERTS_ALC_T_NIF, type);\n    }\n    return 1;\n}\n\nvoid erts_resource_stop(ErtsResource* resource, ErlNifEvent e,\n                        int is_direct_call)\n{\n    struct enif_msg_environment_t msg_env;\n    ASSERT(resource->type->stop);\n    pre_nif_noproc(&msg_env, resource->type->owner, NULL);\n    resource->type->stop(&msg_env.env, resource->data, e, is_direct_call);\n    post_nif_noproc(&msg_env);\n}\n\nvoid erts_nif_demonitored(ErtsResource* resource)\n{\n    ErtsResourceMonitors* rmp = resource->monitors;\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n    int free_me;\n\n    ASSERT(rmp);\n    ASSERT(resource->type->down);\n\n    erts_mtx_lock(&rmp->lock);\n    free_me = ((rmon_refc_dec_read(rmp) == 0) & !!rmon_is_dying(rmp));\n    erts_mtx_unlock(&rmp->lock);\n\n    if (free_me)\n        erts_bin_free(&bin->binary);\n}\n\nvoid erts_fire_nif_monitor(ErtsMonitor *tmon)\n{\n    ErtsResource* resource;\n    ErtsMonitorData *mdp;\n    ErtsMonitor *omon;\n    ErtsBinary* bin;\n    struct enif_msg_environment_t msg_env;\n    ErlNifPid nif_pid;\n    ErlNifMonitor nif_monitor;\n    ErtsResourceMonitors* rmp;\n    Uint mrefc, brefc;\n    int active, is_dying;\n\n    ASSERT(tmon->type == ERTS_MON_TYPE_RESOURCE);\n    ASSERT(erts_monitor_is_target(tmon));\n\n    resource = tmon->other.ptr;\n    bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n    rmp = resource->monitors;\n\n    mdp = erts_monitor_to_data(tmon);\n    omon = &mdp->origin;\n\n    ASSERT(rmp);\n    ASSERT(resource->type->down);\n\n    erts_mtx_lock(&rmp->lock);\n\n    mrefc = rmon_refc_dec_read(rmp);\n    is_dying = rmon_is_dying(rmp);\n    active = !is_dying && erts_monitor_is_in_table(omon);\n\n    if (active) {\n        erts_monitor_tree_delete(&rmp->root, omon);\n        brefc = (Uint) erts_refc_inc_unless(&bin->binary.intern.refc, 0, 0);\n    }\n\n    erts_mtx_unlock(&rmp->lock);\n\n    if (!active) {\n        ASSERT(!is_dying || erts_refc_read(&bin->binary.intern.refc, 0) == 0);\n        if (is_dying && mrefc == 0)\n            erts_bin_free(&bin->binary);\n        erts_monitor_release(tmon);\n    }\n    else {\n        if (brefc > 0) {\n            ASSERT(is_internal_pid(omon->other.item));\n            erts_ref_to_driver_monitor(mdp->ref, &nif_monitor);\n            nif_pid.pid = omon->other.item;\n            pre_nif_noproc(&msg_env, resource->type->owner, NULL);\n            resource->type->down(&msg_env.env, resource->data, &nif_pid, &nif_monitor);\n            post_nif_noproc(&msg_env);\n\n            erts_bin_release(&bin->binary);\n        }\n\n        erts_monitor_release_both(mdp);\n    }\n}\n\nvoid* enif_alloc_resource(ErlNifResourceType* type, size_t data_sz)\n{\n    size_t magic_sz = offsetof(ErtsResource,data);\n    Binary* bin;\n    ErtsResource* resource;\n    size_t monitors_offs;\n\n    if (type->down) {\n        /* Put ErtsResourceMonitors after user data and properly aligned */\n        monitors_offs = ((data_sz + ERTS_ALLOC_ALIGN_BYTES - 1)\n                         & ~((size_t)ERTS_ALLOC_ALIGN_BYTES - 1));\n        magic_sz += monitors_offs + sizeof(ErtsResourceMonitors);\n    }\n    else {\n        ERTS_UNDEF(monitors_offs, 0);\n        magic_sz += data_sz;\n    }\n    bin = erts_create_magic_binary_x(magic_sz, NIF_RESOURCE_DTOR,\n                                     ERTS_ALC_T_BINARY,\n                                     1); /* unaligned */\n    resource = ERTS_MAGIC_BIN_UNALIGNED_DATA(bin);\n\n    ASSERT(type->owner && type->next && type->prev); /* not allowed in load/upgrade */\n    resource->type = type;\n    erts_refc_inc(&bin->intern.refc, 1);\n#ifdef DEBUG\n    erts_refc_init(&resource->nif_refc, 1);\n#endif\n    erts_refc_inc(&resource->type->refc, 2);\n    if (type->down) {\n        resource->monitors = (ErtsResourceMonitors*) (resource->data + monitors_offs);\n        erts_mtx_init(&resource->monitors->lock, \"resource_monitors\", NIL,\n            ERTS_LOCK_FLAGS_CATEGORY_GENERIC);\n        resource->monitors->root = NULL;\n        resource->monitors->refc = 0;\n        resource->monitors->user_data_sz = data_sz;\n    }\n    else {\n        resource->monitors = NULL;\n    }\n    return resource->data;\n}\n\nvoid enif_release_resource(void* obj)\n{\n    ErtsResource* resource = DATA_TO_RESOURCE(obj);\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n\n    ASSERT(ERTS_MAGIC_BIN_DESTRUCTOR(bin) == NIF_RESOURCE_DTOR);\n    ASSERT(erts_refc_read(&bin->binary.intern.refc, 0) != 0);\n#ifdef DEBUG\n    erts_refc_dec(&resource->nif_refc, 0);\n#endif\n    erts_bin_release(&bin->binary);\n}\n\nvoid enif_keep_resource(void* obj)\n{\n    ErtsResource* resource = DATA_TO_RESOURCE(obj);\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n\n    ASSERT(ERTS_MAGIC_BIN_DESTRUCTOR(bin) == NIF_RESOURCE_DTOR);\n    ASSERT(erts_refc_read(&bin->binary.intern.refc, 0) != 0);\n#ifdef DEBUG\n    erts_refc_inc(&resource->nif_refc, 1);\n#endif\n    erts_refc_inc(&bin->binary.intern.refc, 2);\n}\n\nEterm erts_bld_resource_ref(Eterm** hpp, ErlOffHeap* oh, ErtsResource* resource)\n{\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n    ASSERT(erts_refc_read(&bin->binary.intern.refc, 0) != 0);\n    return erts_mk_magic_ref(hpp, oh, &bin->binary);\n}\n\nERL_NIF_TERM enif_make_resource(ErlNifEnv* env, void* obj)\n{\n    ErtsResource* resource = DATA_TO_RESOURCE(obj);\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n    Eterm* hp = alloc_heap(env, ERTS_MAGIC_REF_THING_SIZE);\n    ASSERT(erts_refc_read(&bin->binary.intern.refc, 0) != 0);\n    return erts_mk_magic_ref(&hp, &MSO(env->proc), &bin->binary);\n}\n\nERL_NIF_TERM enif_make_resource_binary(ErlNifEnv* env, void* obj,\n\t\t\t\t       const void* data, size_t size)\n{\n    ErtsResource* resource = DATA_TO_RESOURCE(obj);\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource);\n    ErlOffHeap *ohp = &MSO(env->proc);\n    Eterm* hp = alloc_heap(env,PROC_BIN_SIZE);\n    ProcBin* pb = (ProcBin *) hp;\n\n    pb->thing_word = HEADER_PROC_BIN;\n    pb->size = size;\n    pb->next = ohp->first;\n    ohp->first = (struct erl_off_heap_header*) pb;\n    pb->val = &bin->binary;\n    pb->bytes = (byte*) data;\n    pb->flags = 0;\n\n    OH_OVERHEAD(ohp, size / sizeof(Eterm));\n    erts_refc_inc(&bin->binary.intern.refc, 1);\n\n    return make_binary(hp);\n}\n\nint enif_get_resource(ErlNifEnv* env, ERL_NIF_TERM term, ErlNifResourceType* type,\n\t\t      void** objp)\n{\n    Binary* mbin;\n    ErtsResource* resource;\n    if (is_internal_magic_ref(term))\n\tmbin = erts_magic_ref2bin(term);\n    else {\n        Eterm *hp;\n        if (!is_binary(term))\n            return 0;\n        hp = binary_val(term);\n        if (thing_subtag(*hp) != REFC_BINARY_SUBTAG)\n            return 0;\n        /*\n        if (((ProcBin *) hp)->size != 0) {\t\n            return 0; / * Or should we allow \"resource binaries\" as handles? * /\n        }\n        */\n        mbin = ((ProcBin *) hp)->val;\n        if (!(mbin->intern.flags & BIN_FLAG_MAGIC))\n            return 0;\n    }\n    resource = (ErtsResource*) ERTS_MAGIC_BIN_UNALIGNED_DATA(mbin);\n    if (ERTS_MAGIC_BIN_DESTRUCTOR(mbin) != NIF_RESOURCE_DTOR\n\t|| resource->type != type) {\t\n\treturn 0;\n    }\n    *objp = resource->data;\n    return 1;\n}\n\nsize_t enif_sizeof_resource(void* obj)\n{\n    ErtsResource* resource = DATA_TO_RESOURCE(obj);\n    if (resource->monitors) {\n        return resource->monitors->user_data_sz;\n    }\n    else {\n        Binary* bin = &ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(resource)->binary;\n        return ERTS_MAGIC_BIN_UNALIGNED_DATA_SIZE(bin) - offsetof(ErtsResource,data);\n    }\n}\n\n\nvoid* enif_dlopen(const char* lib,\n\t\t  void (*err_handler)(void*,const char*), void* err_arg)\n{\n    ErtsSysDdllError errdesc = ERTS_SYS_DDLL_ERROR_INIT;\n    void* handle;\n    void* init_func;\n    if (erts_sys_ddll_open(lib, &handle, &errdesc) == ERL_DE_NO_ERROR) {\n\tif (erts_sys_ddll_load_nif_init(handle, &init_func, &errdesc) == ERL_DE_NO_ERROR) {\n\t    erts_sys_ddll_call_nif_init(init_func);\n\t}\n    }\n    else {\n\tif (err_handler != NULL) {\n\t    (*err_handler)(err_arg, errdesc.str);\n\t}\n\thandle = NULL;\n    }\n    erts_sys_ddll_free_error(&errdesc);\n    return handle;\n}\n\nvoid* enif_dlsym(void* handle, const char* symbol,\n\t\t void (*err_handler)(void*,const char*), void* err_arg)\n{\n    ErtsSysDdllError errdesc = ERTS_SYS_DDLL_ERROR_INIT;\n    void* ret;\n    if (erts_sys_ddll_sym2(handle, symbol, &ret, &errdesc) != ERL_DE_NO_ERROR) {\n\tif (err_handler != NULL) {\n\t    (*err_handler)(err_arg, errdesc.str);\n\t}\n\terts_sys_ddll_free_error(&errdesc);\n\treturn NULL;\n    }\n    return ret;\n}\n\nint enif_consume_timeslice(ErlNifEnv* env, int percent)\n{\n    Process *proc;\n    Sint reds;\n\n    execution_state(env, &proc, NULL);\n\n    ASSERT(is_proc_bound(env) && percent >= 1 && percent <= 100);\n    if (percent < 1) percent = 1;\n    else if (percent > 100) percent = 100;\n\n    reds = ((CONTEXT_REDS+99) / 100) * percent;\n    ASSERT(reds > 0 && reds <= CONTEXT_REDS);\n    BUMP_REDS(proc, reds);\n    return ERTS_BIF_REDS_LEFT(proc) == 0;\n}\n\nstatic ERTS_INLINE void\nnif_export_cleanup_nif_mod(NifExport *ep)\n{\n    if (erts_refc_dectest(&ep->m->rt_dtor_cnt, 0) == 0 && ep->m->mod == NULL)\n\tclose_lib(ep->m);\n    ep->m = NULL;\n}\n\nvoid\nerts_nif_export_cleanup_nif_mod(NifExport *ep)\n{\n    nif_export_cleanup_nif_mod(ep);\n}\n\nstatic ERTS_INLINE void\nnif_export_restore(Process *c_p, NifExport *ep, Eterm res)\n{\n    erts_nif_export_restore(c_p, ep, res);\n    ASSERT(ep->m);\n    nif_export_cleanup_nif_mod(ep);\n}\n\n\n\n/*\n * Finalize a dirty NIF call. This function is scheduled to cause the VM to\n * switch the process off a dirty scheduler thread and back onto a regular\n * scheduler thread, and then return the result from the dirty NIF. It also\n * restores the original NIF MFA when necessary based on the value of\n * ep->func set by execute_dirty_nif via init_nif_sched_data -- non-NULL\n * means restore, NULL means do not restore.\n */\nstatic ERL_NIF_TERM\ndirty_nif_finalizer(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    Process* proc;\n    NifExport* ep;\n\n    execution_state(env, &proc, NULL);\n\n    ASSERT(argc == 1);\n    ASSERT(!ERTS_SCHEDULER_IS_DIRTY(erts_proc_sched_data(proc)));\n    ep = (NifExport*) ERTS_PROC_GET_NIF_TRAP_EXPORT(proc);\n    ASSERT(ep);\n    nif_export_restore(proc, ep, argv[0]);\n    return argv[0];\n}\n\n/* Finalize a dirty NIF call that raised an exception.  Otherwise same as\n * the dirty_nif_finalizer() function.\n */\nstatic ERL_NIF_TERM\ndirty_nif_exception(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    ERL_NIF_TERM ret;\n    Process* proc;\n    NifExport* ep;\n    Eterm exception;\n\n    execution_state(env, &proc, NULL);\n\n    ASSERT(argc == 1);\n    ASSERT(!ERTS_SCHEDULER_IS_DIRTY(erts_proc_sched_data(proc)));\n    ep = (NifExport*) ERTS_PROC_GET_NIF_TRAP_EXPORT(proc);\n    ASSERT(ep);\n    exception = argv[0]; /* argv overwritten by restore below... */\n    nif_export_cleanup_nif_mod(ep);\n    ret = enif_raise_exception(env, exception);\n\n    /* Restore orig info for error and clear nif export in handle_error() */\n    proc->freason |= EXF_RESTORE_NIF;\n    return ret;\n}\n\n/*\n * Dirty NIF scheduling wrapper function. Schedule a dirty NIF to execute.\n * The dirty scheduler thread type (CPU or I/O) is indicated in flags\n * parameter.\n */\nstatic ERTS_INLINE ERL_NIF_TERM\nschedule_dirty_nif(ErlNifEnv* env, int flags, NativeFunPtr fp,\n\t\t   Eterm func_name, int argc, const ERL_NIF_TERM argv[])\n{\n    Process* proc;\n\n    ASSERT(is_atom(func_name));\n    ASSERT(fp);\n\n    ASSERT(flags==ERL_NIF_DIRTY_JOB_IO_BOUND || flags==ERL_NIF_DIRTY_JOB_CPU_BOUND);\n\n    execution_state(env, &proc, NULL);\n\n    (void) erts_atomic32_read_bset_nob(&proc->state,\n\t\t\t\t\t   (ERTS_PSFLG_DIRTY_CPU_PROC\n\t\t\t\t\t    | ERTS_PSFLG_DIRTY_IO_PROC),\n\t\t\t\t\t   (flags == ERL_NIF_DIRTY_JOB_CPU_BOUND\n\t\t\t\t\t    ? ERTS_PSFLG_DIRTY_CPU_PROC\n\t\t\t\t\t    : ERTS_PSFLG_DIRTY_IO_PROC));\n\n    return schedule(env, fp, NULL, proc->current->module, func_name, argc, argv);\n}\n\nstatic ERTS_INLINE ERL_NIF_TERM\nstatic_schedule_dirty_nif(ErlNifEnv* env, erts_aint32_t dirty_psflg,\n\t\t\t     int argc, const ERL_NIF_TERM argv[])\n{\n    Process *proc;\n    NifExport *ep;\n    Eterm mod, func;\n    NativeFunPtr fp;\n\n    execution_state(env, &proc, NULL);\n\n    /*\n     * Called in order to schedule statically determined\n     * dirty NIF calls...\n     *\n     * Note that 'current' does not point into a NifExport\n     * structure; only a structure with similar\n     * parts (located in code).\n     */\n\n    ep = ErtsContainerStruct(proc->current, NifExport, exp.info.mfa);\n    mod = proc->current->module;\n    func = proc->current->function;\n    fp = (NativeFunPtr) ep->func;\n\n    ASSERT(is_atom(mod) && is_atom(func));\n    ASSERT(fp);\n\n    (void) erts_atomic32_read_bset_nob(&proc->state,\n\t\t\t\t\t   (ERTS_PSFLG_DIRTY_CPU_PROC\n\t\t\t\t\t    | ERTS_PSFLG_DIRTY_IO_PROC),\n\t\t\t\t\t   dirty_psflg);\n\n    return schedule(env, fp, NULL, mod, func, argc, argv);\n}\n\nstatic ERL_NIF_TERM\nstatic_schedule_dirty_io_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    return static_schedule_dirty_nif(env, ERTS_PSFLG_DIRTY_IO_PROC, argc, argv);\n}\n\nstatic ERL_NIF_TERM\nstatic_schedule_dirty_cpu_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    return static_schedule_dirty_nif(env, ERTS_PSFLG_DIRTY_CPU_PROC, argc, argv);\n}\n\n\n/*\n * NIF execution wrapper used by enif_schedule_nif() for regular NIFs. It\n * calls the actual NIF, restores original NIF MFA if necessary, and\n * then returns the NIF result.\n */\nstatic ERL_NIF_TERM\nexecute_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    Process* proc;\n    NativeFunPtr fp;\n    NifExport* ep;\n    ERL_NIF_TERM result;\n\n    execution_state(env, &proc, NULL);\n\n    ep = ErtsContainerStruct(proc->current, NifExport, exp.info.mfa);\n    fp = ep->func;\n    ASSERT(ep);\n    ASSERT(!env->exception_thrown);\n\n    fp = (NativeFunPtr) ep->func;\n\n#ifdef DEBUG\n    ep->func = ERTS_DBG_NIF_NOT_SCHED_MARKER;\n#endif\n\n    result = (*fp)(env, argc, argv);\n\n    ASSERT(ep == ERTS_PROC_GET_NIF_TRAP_EXPORT(proc));\n\n    if (is_value(result) || proc->freason != TRAP) {\n\t/* Done (not rescheduled)... */\n\tASSERT(ep->func == ERTS_DBG_NIF_NOT_SCHED_MARKER);\n\tif (!env->exception_thrown)\n\t    nif_export_restore(proc, ep, result);\n\telse {\n\t    nif_export_cleanup_nif_mod(ep);\n\t    /*\n\t     * Restore orig info for error and clear nif\n\t     * export in handle_error()\n\t     */\n\t    proc->freason |= EXF_RESTORE_NIF;\n\t}\n    }\n\n#ifdef DEBUG\n    if (ep->func == ERTS_DBG_NIF_NOT_SCHED_MARKER)\n\tep->func = NULL;\n#endif\n\n    return result;\n}\n\nERL_NIF_TERM\nenif_schedule_nif(ErlNifEnv* env, const char* fun_name, int flags,\n\t\t  ERL_NIF_TERM (*fp)(ErlNifEnv*, int, const ERL_NIF_TERM[]),\n\t\t  int argc, const ERL_NIF_TERM argv[])\n{\n    Process* proc;\n    ERL_NIF_TERM fun_name_atom, result;\n    int scheduler;\n\n    if (argc > MAX_ARG)\n\treturn enif_make_badarg(env);\n    fun_name_atom = enif_make_atom(env, fun_name);\n    if (enif_is_exception(env, fun_name_atom))\n\treturn fun_name_atom;\n\n    execution_state(env, &proc, &scheduler);\n    if (scheduler <= 0) {\n\tif (scheduler == 0)\n\t    enif_make_badarg(env);\n\terts_proc_lock(proc, ERTS_PROC_LOCK_MAIN);\n    }\n\n    if (flags == 0)\n\tresult = schedule(env, execute_nif, fp, proc->current->module,\n\t\t\t  fun_name_atom, argc, argv);\n    else if (!(flags & ~(ERL_NIF_DIRTY_JOB_IO_BOUND|ERL_NIF_DIRTY_JOB_CPU_BOUND))) {\n\tresult = schedule_dirty_nif(env, flags, fp, fun_name_atom, argc, argv);\n    }\n    else\n\tresult = enif_make_badarg(env);\n\n    if (scheduler < 0)\n\terts_proc_unlock(proc, ERTS_PROC_LOCK_MAIN);\n\n    return result;\n}\n\nint\nenif_thread_type(void)\n{\n    ErtsSchedulerData *esdp = erts_get_scheduler_data();\n\n    if (!esdp)\n\treturn ERL_NIF_THR_UNDEFINED;\n\n    switch (esdp->type) {\n    case ERTS_SCHED_NORMAL:\n\treturn ERL_NIF_THR_NORMAL_SCHEDULER;\n    case ERTS_SCHED_DIRTY_CPU:\n\treturn ERL_NIF_THR_DIRTY_CPU_SCHEDULER;\n    case ERTS_SCHED_DIRTY_IO:\n        return ERL_NIF_THR_DIRTY_IO_SCHEDULER;\n    default:\n        ERTS_INTERNAL_ERROR(\"Invalid scheduler type\");\n\treturn -1;\n    }\n}\n\n/* Maps */\n\nint enif_is_map(ErlNifEnv* env, ERL_NIF_TERM term)\n{\n    return is_map(term);\n}\n\nint enif_get_map_size(ErlNifEnv* env, ERL_NIF_TERM term, size_t *size)\n{\n    if (is_flatmap(term)) {\n\tflatmap_t *mp;\n\tmp    = (flatmap_t*)flatmap_val(term);\n\t*size = flatmap_get_size(mp);\n\treturn 1;\n    }\n    else if (is_hashmap(term)) {\n        *size = hashmap_size(term);\n        return 1;\n    }\n    return 0;\n}\n\nERL_NIF_TERM enif_make_new_map(ErlNifEnv* env)\n{\n    Eterm* hp = alloc_heap(env,MAP_HEADER_FLATMAP_SZ+1);\n    Eterm tup;\n    flatmap_t *mp;\n\n    tup   = make_tuple(hp);\n    *hp++ = make_arityval(0);\n    mp    = (flatmap_t*)hp;\n    mp->thing_word = MAP_HEADER_FLATMAP;\n    mp->size = 0;\n    mp->keys = tup;\n\n    return make_flatmap(mp);\n}\n\nint enif_make_map_from_arrays(ErlNifEnv *env,\n                              ERL_NIF_TERM keys[],\n                              ERL_NIF_TERM values[],\n                              size_t cnt,\n                              ERL_NIF_TERM *map_out)\n{\n    ErtsHeapFactory factory;\n    int succeeded;\n\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n    size_t index = 0;\n\n    while (index < cnt) {\n        ASSERT_IN_ENV(env, keys[index], index, \"key\");\n        ASSERT_IN_ENV(env, values[index], index, \"value\");\n        index++;\n    }\n#endif\n\n    flush_env(env);\n\n    erts_factory_proc_prealloc_init(&factory, env->proc,\n        cnt * 2 + MAP_HEADER_FLATMAP_SZ + 1);\n\n    (*map_out) = erts_map_from_ks_and_vs(&factory, keys, values, cnt);\n    succeeded = (*map_out) != THE_NON_VALUE;\n\n    if (!succeeded) {\n        erts_factory_undo(&factory);\n    }\n\n    erts_factory_close(&factory);\n\n    cache_env(env);\n\n    return succeeded;\n}\n\nint enif_make_map_put(ErlNifEnv* env,\n\t              Eterm map_in,\n\t\t      Eterm key,\n\t\t      Eterm value,\n\t\t      Eterm *map_out)\n{\n    if (!is_map(map_in)) {\n\treturn 0;\n    }\n    ASSERT_IN_ENV(env, map_in, 0, \"old map\");\n    ASSERT_IN_ENV(env, key, 0, \"key\");\n    ASSERT_IN_ENV(env, value, 0, \"value\");\n\n    flush_env(env);\n    *map_out = erts_maps_put(env->proc, key, value, map_in);\n    cache_env(env);\n    return 1;\n}\n\nint enif_get_map_value(ErlNifEnv* env,\n\t               Eterm map,\n\t\t       Eterm key,\n\t\t       Eterm *value)\n{\n    const Eterm *ret;\n    if (!is_map(map)) {\n\treturn 0;\n    }\n    ret = erts_maps_get(key, map);\n    if (ret) {\n        *value = *ret;\n        return 1;\n    }\n    return 0;\n}\n\nint enif_make_map_update(ErlNifEnv* env,\n\t                 Eterm map_in,\n\t\t\t Eterm key,\n\t\t\t Eterm value,\n\t\t\t Eterm *map_out)\n{\n    int res;\n    if (!is_map(map_in)) {\n\treturn 0;\n    }\n\n    ASSERT_IN_ENV(env, map_in, 0, \"old map\");\n    ASSERT_IN_ENV(env, key, 0, \"key\");\n    ASSERT_IN_ENV(env, value, 0, \"value\");\n\n    flush_env(env);\n    res = erts_maps_update(env->proc, key, value, map_in, map_out);\n    cache_env(env);\n    return res;\n}\n\nint enif_make_map_remove(ErlNifEnv* env,\n\t                 Eterm map_in,\n\t\t\t Eterm key,\n\t\t\t Eterm *map_out)\n{\n    if (!is_map(map_in)) {\n\treturn 0;\n    }\n    flush_env(env);\n    (void) erts_maps_take(env->proc, key, map_in, map_out, NULL);\n    cache_env(env);\n    return 1;\n}\n\nint enif_map_iterator_create(ErlNifEnv *env,\n\t                     Eterm map,\n\t\t\t     ErlNifMapIterator *iter,\n\t\t\t     ErlNifMapIteratorEntry entry)\n{\n    if (is_flatmap(map)) {\n\tflatmap_t *mp = (flatmap_t*)flatmap_val(map);\n\tsize_t offset;\n\n\tswitch (entry) {\n\t    case ERL_NIF_MAP_ITERATOR_FIRST: offset = 0; break;\n\t    case ERL_NIF_MAP_ITERATOR_LAST: offset = flatmap_get_size(mp) - 1; break;\n\t    default: goto error;\n\t}\n\n\t/* empty maps are ok but will leave the iterator\n\t * in bad shape.\n\t */\n\n\titer->map     = map;\n\titer->u.flat.ks = ((Eterm *)flatmap_get_keys(mp)) + offset;\n\titer->u.flat.vs = ((Eterm *)flatmap_get_values(mp)) + offset;\n\titer->size    = flatmap_get_size(mp);\n\titer->idx     = offset + 1;\n\n\treturn 1;\n    }\n    else if (is_hashmap(map)) {\n        iter->map = map;\n        iter->size = hashmap_size(map);\n        iter->u.hash.wstack = erts_alloc(ERTS_ALC_T_NIF, sizeof(ErtsDynamicWStack));\n        WSTACK_INIT(iter->u.hash.wstack, ERTS_ALC_T_NIF);\n\n        switch (entry) {\n\t    case ERL_NIF_MAP_ITERATOR_FIRST:\n                iter->idx = 1;\n                hashmap_iterator_init(&iter->u.hash.wstack->ws, map, 0);\n                iter->u.hash.kv = hashmap_iterator_next(&iter->u.hash.wstack->ws);\n                break;\n\t    case ERL_NIF_MAP_ITERATOR_LAST:\n                iter->idx = hashmap_size(map);\n                hashmap_iterator_init(&iter->u.hash.wstack->ws, map, 1);\n                iter->u.hash.kv = hashmap_iterator_prev(&iter->u.hash.wstack->ws);\n                break;\n\t    default:\n                goto error;\n\t}\n        ASSERT(!!iter->u.hash.kv == (iter->idx >= 1 &&\n                                     iter->idx <= iter->size));\n        return 1;\n    }\nerror:\n#ifdef DEBUG\n    iter->map = THE_NON_VALUE;\n#endif\n    return 0;\n}\n\nvoid enif_map_iterator_destroy(ErlNifEnv *env, ErlNifMapIterator *iter)\n{\n    if (is_hashmap(iter->map)) {\n        WSTACK_DESTROY(iter->u.hash.wstack->ws);\n        erts_free(ERTS_ALC_T_NIF, iter->u.hash.wstack);\n    }\n    else\n        ASSERT(is_flatmap(iter->map));\n\n#ifdef DEBUG\n    iter->map = THE_NON_VALUE;\n#endif\n}\n\nint enif_map_iterator_is_tail(ErlNifEnv *env, ErlNifMapIterator *iter)\n{\n    ASSERT(iter);\n    if (is_flatmap(iter->map)) {\n        ASSERT(iter->idx >= 0);\n        ASSERT(iter->idx <= flatmap_get_size(flatmap_val(iter->map)) + 1);\n        return (iter->size == 0 || iter->idx > iter->size);\n    }\n    else {\n        ASSERT(is_hashmap(iter->map));\n        return iter->idx > iter->size;\n    }\n}\n\nint enif_map_iterator_is_head(ErlNifEnv *env, ErlNifMapIterator *iter)\n{\n    ASSERT(iter);\n    if (is_flatmap(iter->map)) {\n        ASSERT(iter->idx >= 0);\n        ASSERT(iter->idx <= flatmap_get_size(flatmap_val(iter->map)) + 1);\n        return (iter->size == 0 || iter->idx == 0);\n    }\n    else {\n        ASSERT(is_hashmap(iter->map));\n        return iter->idx == 0;\n    }\n}\n\n\nint enif_map_iterator_next(ErlNifEnv *env, ErlNifMapIterator *iter)\n{\n    ASSERT(iter);\n    if (is_flatmap(iter->map)) {\n        if (iter->idx <= iter->size) {\n            iter->idx++;\n            iter->u.flat.ks++;\n            iter->u.flat.vs++;\n        }\n        return (iter->idx <= iter->size);\n    }\n    else {\n        ASSERT(is_hashmap(iter->map));\n\n        if (iter->idx <= hashmap_size(iter->map)) {\n            if (iter->idx < 1) {\n                hashmap_iterator_init(&iter->u.hash.wstack->ws, iter->map, 0);\n            }\n            iter->u.hash.kv = hashmap_iterator_next(&iter->u.hash.wstack->ws);\n            iter->idx++;\n            ASSERT(!!iter->u.hash.kv == (iter->idx <= iter->size));\n        }\n        return iter->idx <= iter->size;\n    }\n}\n\nint enif_map_iterator_prev(ErlNifEnv *env, ErlNifMapIterator *iter)\n{\n    ASSERT(iter);\n    if (is_flatmap(iter->map)) {\n        if (iter->idx > 0) {\n            iter->idx--;\n            iter->u.flat.ks--;\n            iter->u.flat.vs--;\n        }\n        return iter->idx > 0;\n    }\n    else {\n        ASSERT(is_hashmap(iter->map));\n\n        if (iter->idx > 0) {\n            if (iter->idx > iter->size) {\n                hashmap_iterator_init(&iter->u.hash.wstack->ws, iter->map, 1);\n            }\n            iter->u.hash.kv = hashmap_iterator_prev(&iter->u.hash.wstack->ws);\n            iter->idx--;\n            ASSERT(!!iter->u.hash.kv == (iter->idx > 0));\n        }\n        return iter->idx > 0;\n    }\n}\n\nint enif_map_iterator_get_pair(ErlNifEnv *env,\n\t\t\t       ErlNifMapIterator *iter,\n\t\t\t       Eterm *key,\n\t\t\t       Eterm *value)\n{\n    ASSERT(iter);\n    if (is_flatmap(iter->map)) {\n        if (iter->idx > 0 && iter->idx <= iter->size) {\n            ASSERT(iter->u.flat.ks >= flatmap_get_keys(flatmap_val(iter->map)) &&\n                   iter->u.flat.ks  < (flatmap_get_keys(flatmap_val(iter->map)) + flatmap_get_size(flatmap_val(iter->map))));\n            ASSERT(iter->u.flat.vs >= flatmap_get_values(flatmap_val(iter->map)) &&\n                   iter->u.flat.vs  < (flatmap_get_values(flatmap_val(iter->map)) + flatmap_get_size(flatmap_val(iter->map))));\n            *key   = *(iter->u.flat.ks);\n            *value = *(iter->u.flat.vs);\n            return 1;\n        }\n    }\n    else {\n        ASSERT(is_hashmap(iter->map));\n        if (iter->idx > 0 && iter->idx <= iter->size) {\n            *key   = CAR(iter->u.hash.kv);\n            *value = CDR(iter->u.hash.kv);\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint enif_monitor_process(ErlNifEnv* env, void* obj, const ErlNifPid* target_pid,\n                         ErlNifMonitor* monitor)\n{\n    ErtsResource* rsrc = DATA_TO_RESOURCE(obj);\n    Eterm tmp[ERTS_REF_THING_SIZE];\n    Eterm ref;\n    ErtsResourceMonitors *rm;\n    ErtsMonitorData *mdp;\n\n    ASSERT(ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(rsrc)->magic_binary.destructor\n           == NIF_RESOURCE_DTOR);\n    ASSERT(erts_refc_read(&ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(rsrc)->binary.intern.refc, 0) != 0);\n    ASSERT(!rsrc->monitors == !rsrc->type->down);\n\n    rm = rsrc->monitors;\n    if (!rm) {\n        ASSERT(!rsrc->type->down);\n        return -1;\n    }\n    ASSERT(rsrc->type->down);\n\n    ref = erts_make_ref_in_buffer(tmp);\n\n    mdp = erts_monitor_create(ERTS_MON_TYPE_RESOURCE, ref,\n                              (Eterm) rsrc, target_pid->pid, NIL);\n    erts_mtx_lock(&rm->lock);\n    ASSERT(!rmon_is_dying(rm));\n    erts_monitor_tree_insert(&rm->root, &mdp->origin);\n    rmon_refc_inc(rm);\n    erts_mtx_unlock(&rm->lock);\n\n    if (!erts_proc_sig_send_monitor(&mdp->target, target_pid->pid)) {\n        /* Failed to send monitor signal; cleanup... */\n#ifdef DEBUG\n        ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(rsrc);\n#endif\n\n        erts_mtx_lock(&rm->lock);\n        ASSERT(!rmon_is_dying(rm));\n        erts_monitor_tree_delete(&rm->root, &mdp->origin);\n        rmon_refc_dec(rm);\n        ASSERT(erts_refc_read(&bin->binary.intern.refc, 1) != 0);\n        erts_mtx_unlock(&rm->lock);\n        erts_monitor_release_both(mdp);\n\n        return 1;\n    }\n\n    if (monitor)\n        erts_ref_to_driver_monitor(ref,monitor);\n\n    return 0;\n}\n\nint enif_demonitor_process(ErlNifEnv* env, void* obj, const ErlNifMonitor* monitor)\n{\n    ErtsResource* rsrc = DATA_TO_RESOURCE(obj);\n#ifdef DEBUG\n    ErtsBinary* bin = ERTS_MAGIC_BIN_FROM_UNALIGNED_DATA(rsrc);\n#endif\n    ErtsResourceMonitors *rm;\n    ErtsMonitor *mon;\n    Eterm ref_heap[ERTS_REF_THING_SIZE];\n    Eterm ref;\n\n    ASSERT(bin->magic_binary.destructor == NIF_RESOURCE_DTOR);\n    ASSERT(erts_refc_read(&bin->binary.intern.refc, 0) != 0);\n\n    ref = erts_driver_monitor_to_ref(ref_heap, monitor);\n\n    rm = rsrc->monitors;\n    erts_mtx_lock(&rm->lock);\n    ASSERT(!rmon_is_dying(rm));\n    mon = erts_monitor_tree_lookup(rm->root, ref);\n    if (mon)\n        erts_monitor_tree_delete(&rm->root, mon);\n    erts_mtx_unlock(&rm->lock);\n\n    if (!mon)\n        return 1;\n\n    ASSERT(erts_monitor_is_origin(mon));\n    ASSERT(is_internal_pid(mon->other.item));\n\n    erts_proc_sig_send_demonitor(mon);\n\n    return 0;\n}\n\nint enif_compare_monitors(const ErlNifMonitor *monitor1,\n                          const ErlNifMonitor *monitor2)\n{\n    return sys_memcmp((void *) monitor1, (void *) monitor2,\n                      ERTS_REF_THING_SIZE*sizeof(Eterm));\n}\n\nErlNifIOQueue *enif_ioq_create(ErlNifIOQueueOpts opts)\n{\n    ErlNifIOQueue *q;\n\n    if (opts != ERL_NIF_IOQ_NORMAL)\n        return NULL;\n\n    q = enif_alloc(sizeof(ErlNifIOQueue));\n    if (!q) return NULL;\n    erts_ioq_init(q, ERTS_ALC_T_NIF, 0);\n\n    return q;\n}\n\nvoid enif_ioq_destroy(ErlNifIOQueue *q)\n{\n    erts_ioq_clear(q);\n    enif_free(q);\n}\n\n/* If the iovec was preallocated (Stack or otherwise) it needs to be marked as\n * such to perform a proper free. */\n#define ERL_NIF_IOVEC_FLAGS_PREALLOC (1 << 0)\n\nvoid enif_free_iovec(ErlNifIOVec *iov)\n{\n    int i;\n    /* Decrement the refc of all the binaries */\n    for (i = 0; i < iov->iovcnt; i++) {\n        Binary *bptr = ((Binary**)iov->ref_bins)[i];\n        /* bptr can be null if enq_binary was used */\n        if (bptr && erts_refc_dectest(&bptr->intern.refc, 0) == 0) {\n            erts_bin_free(bptr);\n        }\n    }\n\n    if (!(iov->flags & ERL_NIF_IOVEC_FLAGS_PREALLOC)) {\n        enif_free(iov);\n    }\n}\n\ntypedef struct {\n    UWord sublist_length;\n    Eterm sublist_start;\n    Eterm sublist_end;\n\n    UWord referenced_size;\n    UWord copied_size;\n\n    UWord iovec_len;\n} iovec_slice_t;\n\nstatic int examine_iovec_term(Eterm list, UWord max_length, iovec_slice_t *result) {\n    Eterm lookahead;\n\n    result->sublist_start = list;\n    result->sublist_length = 0;\n    result->referenced_size = 0;\n    result->copied_size = 0;\n    result->iovec_len = 0;\n\n    lookahead = result->sublist_start;\n\n    while (is_list(lookahead)) {\n        UWord byte_size;\n        Eterm binary;\n        Eterm *cell;\n\n        cell = list_val(lookahead);\n        binary = CAR(cell);\n\n        if (!is_binary(binary)) {\n            return 0;\n        }\n\n        byte_size = binary_size(binary);\n\n        if (byte_size > 0) {\n            int bit_offset, bit_size;\n            Eterm parent_binary;\n            UWord byte_offset;\n\n            int requires_copying;\n\n            ERTS_GET_REAL_BIN(binary, parent_binary, byte_offset,\n                bit_offset, bit_size);\n\n            (void)byte_offset;\n\n            if (bit_size != 0) {\n                return 0;\n            }\n\n            /* If we're unaligned or an on-heap binary we'll need to copy\n             * ourselves over to a temporary buffer. */\n            requires_copying = (bit_offset != 0) ||\n                thing_subtag(*binary_val(parent_binary)) == HEAP_BINARY_SUBTAG;\n\n            if (requires_copying) {\n                result->copied_size += byte_size;\n            } else {\n                result->referenced_size += byte_size;\n            }\n\n            result->iovec_len += 1 + byte_size / MAX_SYSIOVEC_IOVLEN;\n        }\n\n        result->sublist_length += 1;\n        lookahead = CDR(cell);\n\n        if (result->sublist_length >= max_length) {\n            break;\n        }\n    }\n\n    if (!is_nil(lookahead) && !is_list(lookahead)) {\n        return 0;\n    }\n\n    result->sublist_end = lookahead;\n\n    return 1;\n}\n\nstatic void marshal_iovec_binary(Eterm binary, ErlNifBinary *copy_buffer,\n        UWord *copy_offset, ErlNifBinary *result) {\n\n    Eterm *parent_header;\n    Eterm parent_binary;\n\n    int bit_offset, bit_size;\n    Uint byte_offset;\n\n    ASSERT(is_binary(binary));\n\n    ERTS_GET_REAL_BIN(binary, parent_binary, byte_offset, bit_offset, bit_size);\n\n    ASSERT(bit_size == 0);\n\n    parent_header = binary_val(parent_binary);\n\n    result->size = binary_size(binary);\n\n    if (thing_subtag(*parent_header) == REFC_BINARY_SUBTAG) {\n        ProcBin *pb = (ProcBin*)parent_header;\n\n        if (pb->flags & (PB_IS_WRITABLE | PB_ACTIVE_WRITER)) {\n            erts_emasculate_writable_binary(pb);\n        }\n\n        ASSERT(pb->val != NULL);\n        ASSERT(byte_offset < pb->size);\n        ASSERT(&pb->bytes[byte_offset] >= (byte*)(pb->val)->orig_bytes);\n\n        result->data = (unsigned char*)&pb->bytes[byte_offset];\n        result->ref_bin = (void*)pb->val;\n    } else {\n        ErlHeapBin *hb = (ErlHeapBin*)parent_header;\n\n        ASSERT(thing_subtag(*parent_header) == HEAP_BINARY_SUBTAG);\n\n        result->data = &((unsigned char*)&hb->data)[byte_offset];\n        result->ref_bin = NULL;\n    }\n\n    /* If this isn't an *aligned* refc binary, copy its contents to the buffer\n     * and reference that instead. */\n\n    if (result->ref_bin == NULL || bit_offset != 0) {\n        ASSERT(copy_buffer->ref_bin != NULL && copy_buffer->data != NULL);\n        ASSERT(result->size <= (copy_buffer->size - *copy_offset));\n\n        if (bit_offset == 0) {\n            sys_memcpy(&copy_buffer->data[*copy_offset],\n                result->data, result->size);\n        } else {\n            erts_copy_bits(result->data, bit_offset, 1,\n                (byte*)&copy_buffer->data[*copy_offset], 0, 1,\n                result->size * 8);\n        }\n\n        result->data = &copy_buffer->data[*copy_offset];\n        result->ref_bin = copy_buffer->ref_bin;\n\n        *copy_offset += result->size;\n    }\n}\n\nstatic int fill_iovec_with_slice(ErlNifEnv *env,\n                                 iovec_slice_t *slice,\n                                 ErlNifIOVec *iovec) {\n    ErlNifBinary copy_buffer = {0};\n    UWord copy_offset, iovec_idx;\n    Eterm sublist_iterator;\n\n    /* Set up a common refc binary for all on-heap and unaligned binaries. */\n    if (slice->copied_size > 0) {\n        if (!enif_alloc_binary(slice->copied_size, &copy_buffer)) {\n            return 0;\n        }\n\n        ASSERT(copy_buffer.ref_bin != NULL);\n    }\n\n    sublist_iterator = slice->sublist_start;\n    copy_offset = 0;\n    iovec_idx = 0;\n\n    while (sublist_iterator != slice->sublist_end) {\n        ErlNifBinary raw_data;\n        Eterm *cell;\n\n        cell = list_val(sublist_iterator);\n        marshal_iovec_binary(CAR(cell), &copy_buffer, &copy_offset, &raw_data);\n\n        while (raw_data.size > 0) {\n            UWord chunk_len = MIN(raw_data.size, MAX_SYSIOVEC_IOVLEN);\n\n            ASSERT(iovec_idx < iovec->iovcnt);\n            ASSERT(raw_data.ref_bin != NULL);\n\n            iovec->iov[iovec_idx].iov_base = raw_data.data;\n            iovec->iov[iovec_idx].iov_len = chunk_len;\n\n            iovec->ref_bins[iovec_idx] = raw_data.ref_bin;\n\n            raw_data.data += chunk_len;\n            raw_data.size -= chunk_len;\n\n            iovec_idx += 1;\n        }\n\n        sublist_iterator = CDR(cell);\n    }\n\n    ASSERT(iovec_idx == iovec->iovcnt);\n\n    if (env == NULL) {\n        int i;\n        for (i = 0; i < iovec->iovcnt; i++) {\n            Binary *refc_binary = (Binary*)(iovec->ref_bins[i]);\n            erts_refc_inc(&refc_binary->intern.refc, 1);\n        }\n\n        if (slice->copied_size > 0) {\n            /* Transfer ownership to the iovec; we've taken references to it in\n             * the above loop. */\n            enif_release_binary(&copy_buffer);\n        }\n    } else {\n        if (slice->copied_size > 0) {\n            /* Attach the binary to our environment and let the next minor GC\n             * get rid of it. This is slightly faster than using the tmp object\n             * list since it avoids off-heap allocations. */\n            erts_build_proc_bin(&MSO(env->proc),\n                alloc_heap(env, PROC_BIN_SIZE), copy_buffer.ref_bin);\n        }\n    }\n\n    return 1;\n}\n\nstatic int create_iovec_from_slice(ErlNifEnv *env,\n                                   iovec_slice_t *slice,\n                                   ErlNifIOVec **result) {\n    ErlNifIOVec *iovec = *result;\n\n    if (iovec && slice->iovec_len < ERL_NIF_IOVEC_SIZE) {\n        iovec->iov = iovec->small_iov;\n        iovec->ref_bins = iovec->small_ref_bin;\n        iovec->flags = ERL_NIF_IOVEC_FLAGS_PREALLOC;\n    } else {\n        UWord iov_offset, binv_offset, alloc_size;\n        char *alloc_base;\n\n        iov_offset = ERTS_ALC_DATA_ALIGN_SIZE(sizeof(ErlNifIOVec));\n        binv_offset = iov_offset;\n        binv_offset += ERTS_ALC_DATA_ALIGN_SIZE(slice->iovec_len * sizeof(SysIOVec));\n        alloc_size = binv_offset;\n        alloc_size += slice->iovec_len * sizeof(Binary*);\n\n        /* When the user passes an environment, we attach the iovec to it so\n         * the user won't have to bother managing it (similar to\n         * enif_inspect_binary). It'll disappear once the environment is\n         * cleaned up. */\n        if (env != NULL) {\n            alloc_base = alloc_tmp_obj(env, alloc_size, &tmp_alloc_dtor);\n        } else {\n            alloc_base = erts_alloc(ERTS_ALC_T_NIF, alloc_size);\n        }\n\n        iovec = (ErlNifIOVec*)alloc_base;\n        iovec->iov = (SysIOVec*)(alloc_base + iov_offset);\n        iovec->ref_bins = (void**)(alloc_base + binv_offset);\n        iovec->flags = 0;\n    }\n\n    iovec->size = slice->referenced_size + slice->copied_size;\n    iovec->iovcnt = slice->iovec_len;\n\n    if(!fill_iovec_with_slice(env, slice, iovec)) {\n        if (env == NULL && !(iovec->flags & ERL_NIF_IOVEC_FLAGS_PREALLOC)) {\n            erts_free(ERTS_ALC_T_NIF, iovec);\n        }\n\n        return 0;\n    }\n\n    *result = iovec;\n\n    return 1;\n}\n\nint enif_inspect_iovec(ErlNifEnv *env, size_t max_elements,\n                       ERL_NIF_TERM list, ERL_NIF_TERM *tail,\n                       ErlNifIOVec **iov) {\n    iovec_slice_t slice;\n\n    if(!examine_iovec_term(list, max_elements, &slice)) {\n        return 0;\n    } else if(!create_iovec_from_slice(env, &slice, iov)) {\n        return 0;\n    }\n\n    (*tail) = slice.sublist_end;\n\n    return 1;\n}\n\n/* */\nint enif_ioq_enqv(ErlNifIOQueue *q, ErlNifIOVec *iov, size_t skip)\n{\n    if(skip <= iov->size) {\n        return !erts_ioq_enqv(q, (ErtsIOVec*)iov, skip);\n    }\n\n    return 0;\n}\n\nint enif_ioq_enq_binary(ErlNifIOQueue *q, ErlNifBinary *bin, size_t skip)\n{\n    ErlNifIOVec vec = {1, bin->size, NULL, NULL, ERL_NIF_IOVEC_FLAGS_PREALLOC };\n    Binary *ref_bin = (Binary*)bin->ref_bin;\n    int res;\n    vec.iov = vec.small_iov;\n    vec.ref_bins = vec.small_ref_bin;\n    vec.iov[0].iov_base = bin->data;\n    vec.iov[0].iov_len = bin->size;\n    ((Binary**)(vec.ref_bins))[0] = ref_bin;\n\n    res = enif_ioq_enqv(q, &vec, skip);\n    enif_release_binary(bin);\n    return res;\n}\n\nsize_t enif_ioq_size(ErlNifIOQueue *q)\n{\n    return erts_ioq_size(q);\n}\n\nint enif_ioq_deq(ErlNifIOQueue *q, size_t elems, size_t *size)\n{\n    if (erts_ioq_deq(q, elems) == -1)\n        return 0;\n    if (size)\n        *size = erts_ioq_size(q);\n    return 1;\n}\n\nint enif_ioq_peek_head(ErlNifEnv *env, ErlNifIOQueue *q, size_t *size, ERL_NIF_TERM *bin_term) {\n    SysIOVec *iov_entry;\n    Binary *ref_bin;\n\n    if (q->size == 0) {\n        return 0;\n    }\n\n    ASSERT(q->b_head != q->b_tail && q->v_head != q->v_tail);\n\n    ref_bin = &q->b_head[0]->nif;\n    iov_entry = &q->v_head[0];\n\n    if (size != NULL) {\n        *size = iov_entry->iov_len;\n    }\n\n    if (iov_entry->iov_len > ERL_ONHEAP_BIN_LIMIT) {\n        ProcBin *pb = (ProcBin*)alloc_heap(env, PROC_BIN_SIZE);\n\n        pb->thing_word = HEADER_PROC_BIN;\n        pb->next = MSO(env->proc).first;\n        pb->val = ref_bin;\n        pb->flags = 0;\n\n        ASSERT((byte*)iov_entry->iov_base >= (byte*)ref_bin->orig_bytes);\n        ASSERT(iov_entry->iov_len <= ref_bin->orig_size);\n\n        pb->bytes = (byte*)iov_entry->iov_base;\n        pb->size = iov_entry->iov_len;\n\n        MSO(env->proc).first = (struct erl_off_heap_header*) pb;\n        OH_OVERHEAD(&(MSO(env->proc)), pb->size / sizeof(Eterm));\n\n        erts_refc_inc(&ref_bin->intern.refc, 2);\n        *bin_term = make_binary(pb);\n    } else {\n        ErlHeapBin* hb = (ErlHeapBin*)alloc_heap(env, heap_bin_size(iov_entry->iov_len));\n\n        hb->thing_word = header_heap_bin(iov_entry->iov_len);\n        hb->size = iov_entry->iov_len;\n\n        sys_memcpy(hb->data, iov_entry->iov_base, iov_entry->iov_len);\n        *bin_term = make_binary(hb);\n    }\n\n    return 1;\n}\n\nSysIOVec *enif_ioq_peek(ErlNifIOQueue *q, int *iovlen)\n{\n    return erts_ioq_peekq(q, iovlen);\n}\n\n/***************************************************************************\n **                              load_nif/2                               **\n ***************************************************************************/\n\n\nstatic ErtsCodeInfo** get_func_pp(BeamCodeHeader* mod_code, Eterm f_atom, unsigned arity)\n{\n    int n = (int) mod_code->num_functions;\n    int j;\n    for (j = 0; j < n; ++j) {\n\tErtsCodeInfo* ci = mod_code->functions[j];\n\tASSERT(BeamIsOpCode(ci->op, op_i_func_info_IaaI));\n\tif (f_atom == ci->mfa.function\n\t    && arity == ci->mfa.arity) {\n\t    return mod_code->functions+j;\n\t}\n    }\n    return NULL;\n}\n\nstatic Eterm mkatom(const char *str)\n{\n    return am_atom_put(str, sys_strlen(str));\n}\n\nstruct tainted_module_t\n{\n    struct tainted_module_t* next;\n    Eterm module_atom;\n};\n\nerts_atomic_t first_taint; /* struct tainted_module_t* */\n\nvoid erts_add_taint(Eterm mod_atom)\n{\n#ifdef ERTS_ENABLE_LOCK_CHECK\n    extern erts_rwmtx_t erts_driver_list_lock; /* Mutex for driver list */\n#endif\n    struct tainted_module_t *first, *t;\n\n    ERTS_LC_ASSERT(erts_lc_rwmtx_is_rwlocked(&erts_driver_list_lock)\n                   || erts_thr_progress_is_blocking());\n\n    first = (struct tainted_module_t*) erts_atomic_read_nob(&first_taint);\n    for (t=first ; t; t=t->next) {\n\tif (t->module_atom == mod_atom) {\n\t    return;\n\t}\n    }\n    t = erts_alloc_fnf(ERTS_ALC_T_TAINT, sizeof(*t));\n    if (t != NULL) {\n\tt->module_atom = mod_atom;\n\tt->next = first;\n        erts_atomic_set_nob(&first_taint, (erts_aint_t)t);\n    }\n}\n\nEterm erts_nif_taints(Process* p)\n{\n    struct tainted_module_t *first, *t;\n    unsigned cnt = 0;\n    Eterm list = NIL;\n    Eterm* hp;\n\n    first = (struct tainted_module_t*) erts_atomic_read_nob(&first_taint);\n    for (t=first ; t!=NULL; t=t->next) {\n\tcnt++;\n    }\n    hp = HAlloc(p,cnt*2);\n    for (t=first ; t!=NULL; t=t->next) {\n\tlist = CONS(hp, t->module_atom, list);\n\thp += 2;\n    }\n    return list;\n}\n\nvoid erts_print_nif_taints(fmtfn_t to, void* to_arg)\n{\n    struct tainted_module_t *t;\n    const char* delim = \"\";\n\n    t = (struct tainted_module_t*) erts_atomic_read_nob(&first_taint);\n    for ( ; t; t = t->next) {\n\tconst Atom* atom = atom_tab(atom_val(t->module_atom));\n\terts_cbprintf(to,to_arg,\"%s%.*s\", delim, atom->len, atom->name);\n\tdelim = \",\";\n    }\n    erts_cbprintf(to,to_arg,\"\\n\");\n}\n\n\nstatic Eterm load_nif_error(Process* p, const char* atom, const char* format, ...)\n{\n    erts_dsprintf_buf_t* dsbufp = erts_create_tmp_dsbuf(0);\n    Eterm ret;\n    Eterm* hp;\n    Eterm** hpp = NULL;\n    Uint sz = 0;\n    Uint* szp = &sz;\n    va_list arglist;   \n\n    va_start(arglist, format);\n    erts_vdsprintf(dsbufp, format, arglist);\n    va_end(arglist);\n    \n    for (;;) {\n\tEterm txt = erts_bld_string_n(hpp, &sz, dsbufp->str, dsbufp->str_len);\n\tret = erts_bld_tuple(hpp, szp, 2, am_error,\n\t\t\t     erts_bld_tuple(hpp, szp, 2, mkatom(atom), txt));\n\tif (hpp != NULL) {\n\t    break;\n\t}\n\thp = HAlloc(p,sz);\n\thpp = &hp;\n\tszp = NULL;\n    }\n    erts_destroy_tmp_dsbuf(dsbufp);\n    return ret;\n}\n\n#define AT_LEAST_VERSION(E,MAJ,MIN) \\\n    (((E)->major * 0x100 + (E)->minor) >= ((MAJ) * 0x100 + (MIN)))\n\n/*\n * Allocate erl_module_nif and make a _modern_ copy of the lib entry.\n */\nstatic struct erl_module_nif* create_lib(const ErlNifEntry* src)\n{\n    struct erl_module_nif* lib;\n    ErlNifEntry* dst;\n    Uint bytes = offsetof(struct erl_module_nif, _funcs_copy_);\n\n    if (!AT_LEAST_VERSION(src, 2, 7))\n        bytes += src->num_of_funcs * sizeof(ErlNifFunc);\n\n    lib = erts_alloc(ERTS_ALC_T_NIF, bytes);\n    dst = &lib->entry;\n\n    sys_memcpy(dst, src, offsetof(ErlNifEntry, vm_variant));\n\n    if (AT_LEAST_VERSION(src, 2, 1)) {\n        dst->vm_variant = src->vm_variant;\n    } else {\n        dst->vm_variant = \"beam.vanilla\";\n    }\n    if (AT_LEAST_VERSION(src, 2, 7)) {\n        dst->options = src->options;\n    } else {\n        /*\n         * Make a modern copy of the ErlNifFunc array\n         */\n        struct ErlNifFunc_V1 {\n            const char* name;\n            unsigned arity;\n            ERL_NIF_TERM (*fptr)(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n        }*src_funcs = (struct ErlNifFunc_V1*) src->funcs;\n        int i;\n        for (i = 0; i < src->num_of_funcs; ++i) {\n            sys_memcpy(&lib->_funcs_copy_[i], &src_funcs[i], sizeof(*src_funcs));\n            lib->_funcs_copy_[i].flags = 0;\n        }\n        dst->funcs = lib->_funcs_copy_;\n        dst->options = 0;\n    }\n    if (AT_LEAST_VERSION(src, 2, 12)) {\n        dst->sizeof_ErlNifResourceTypeInit = src->sizeof_ErlNifResourceTypeInit;\n    } else {\n        dst->sizeof_ErlNifResourceTypeInit = 0;\n    }\n    if (AT_LEAST_VERSION(src, 2, 14)) {\n        dst->min_erts = src->min_erts;\n    } else {\n        dst->min_erts = \"erts-?\";\n    }\n    return lib;\n};\n\n\nBIF_RETTYPE load_nif_2(BIF_ALIST_2)\n{\n    static const char bad_lib[] = \"bad_lib\";\n    static const char upgrade[] = \"upgrade\";\n    char* lib_name = NULL;\n    void* handle = NULL;\n    void* init_func = NULL;\n    ErlNifEntry* entry = NULL;\n    ErlNifEnv env;\n    int i, err, encoding;\n    Module* module_p;\n    Eterm mod_atom;\n    const Atom* mod_atomp;\n    Eterm f_atom;\n    ErtsCodeMFA* caller;\n    ErtsSysDdllError errdesc = ERTS_SYS_DDLL_ERROR_INIT;\n    Eterm ret = am_ok;\n    int veto;\n    int taint = 1;\n    struct erl_module_nif* lib = NULL;\n    struct erl_module_instance* this_mi;\n    struct erl_module_instance* prev_mi;\n\n    if (BIF_P->flags & F_HIPE_MODE) {\n\tret = load_nif_error(BIF_P, \"notsup\", \"Calling load_nif from HiPE compiled \"\n\t\t\t     \"modules not supported\");\n\tBIF_RET(ret);\n    }\n\n    encoding = erts_get_native_filename_encoding();\n    if (encoding == ERL_FILENAME_WIN_WCHAR) {\n        /* Do not convert the lib name to utf-16le yet, do that in win32 specific code */\n        /* since lib_name is used in error messages */\n        encoding = ERL_FILENAME_UTF8;\n    }\n    lib_name = erts_convert_filename_to_encoding(BIF_ARG_1, NULL, 0,\n                                                 ERTS_ALC_T_TMP, 1, 0, encoding,\n\t\t\t\t\t\t NULL, 0);\n    if (!lib_name) {\n\tBIF_ERROR(BIF_P, BADARG);\n    }\n\n    if (!erts_try_seize_code_write_permission(BIF_P)) {\n\terts_free(ERTS_ALC_T_TMP, lib_name);\n\tERTS_BIF_YIELD2(bif_export[BIF_load_nif_2],\n\t\t\tBIF_P, BIF_ARG_1, BIF_ARG_2);\n    }\n\n    /* Block system (is this the right place to do it?) */\n    erts_proc_unlock(BIF_P, ERTS_PROC_LOCK_MAIN);\n    erts_thr_progress_block();\n\n    /* Find calling module */\n    ASSERT(BIF_P->current != NULL);\n    ASSERT(BIF_P->current->module == am_erlang\n\t   && BIF_P->current->function == am_load_nif \n\t   && BIF_P->current->arity == 2);\n    caller = find_function_from_pc(BIF_P->cp);\n    ASSERT(caller != NULL);\n    mod_atom = caller->module;\n    ASSERT(is_atom(mod_atom));\n    module_p = erts_get_module(mod_atom, erts_active_code_ix());\n    ASSERT(module_p != NULL);\n\n    mod_atomp = atom_tab(atom_val(mod_atom));\n    {\n        ErtsStaticNifEntry* sne;\n        sne = erts_static_nif_get_nif_init((char*)mod_atomp->name, mod_atomp->len);\n        if (sne != NULL) {\n            init_func = sne->nif_init;\n            handle = init_func;\n            taint = sne->taint;\n        }\n    }\n    this_mi = &module_p->curr;\n    prev_mi = &module_p->old;\n    if (in_area(caller, module_p->old.code_hdr, module_p->old.code_length)) {\n\tret = load_nif_error(BIF_P, \"old_code\", \"Calling load_nif from old \"\n\t\t\t     \"module '%T' not allowed\", mod_atom);\n\tgoto error;\n    } else if (module_p->on_load) {\n\tASSERT(module_p->on_load->code_hdr->on_load_function_ptr);\n\tif (module_p->curr.code_hdr) {\n\t    prev_mi = &module_p->curr;\n\t} else {\n\t    prev_mi = &module_p->old;\n\t}\n\tthis_mi = module_p->on_load;\n    }\n\n    if (this_mi->nif != NULL) {\n        ret = load_nif_error(BIF_P,\"reload\",\"NIF library already loaded\"\n                             \" (reload disallowed since OTP 20).\");\n    }\n    else if (init_func == NULL &&\n             (err=erts_sys_ddll_open(lib_name, &handle, &errdesc)) != ERL_DE_NO_ERROR) {\n\tconst char slogan[] = \"Failed to load NIF library\";\n\tif (strstr(errdesc.str, lib_name) != NULL) {\n\t    ret = load_nif_error(BIF_P, \"load_failed\", \"%s: '%s'\", slogan, errdesc.str);\n\t}\n\telse {\n\t    ret = load_nif_error(BIF_P, \"load_failed\", \"%s %s: '%s'\", slogan, lib_name, errdesc.str);\n\t}\n    }\n    else if (init_func == NULL &&\n\t     erts_sys_ddll_load_nif_init(handle, &init_func, &errdesc) != ERL_DE_NO_ERROR) {\n\tret  = load_nif_error(BIF_P, bad_lib, \"Failed to find library init\"\n\t\t\t      \" function: '%s'\", errdesc.str);\n\t\n    }\n    else if ((taint ? erts_add_taint(mod_atom) : 0,\n\t      (entry = erts_sys_ddll_call_nif_init(init_func)) == NULL)) {\n\tret = load_nif_error(BIF_P, bad_lib, \"Library init-call unsuccessful\");\n    }\n    else if (entry->major > ERL_NIF_MAJOR_VERSION\n             || (entry->major == ERL_NIF_MAJOR_VERSION\n                 && entry->minor > ERL_NIF_MINOR_VERSION)) {\n        char* fmt = \"That '%T' NIF library needs %s or newer. Either try to\"\n            \" recompile the NIF lib or use a newer erts runtime.\";\n        ret = load_nif_error(BIF_P, bad_lib, fmt, mod_atom, entry->min_erts);\n    }\n    else if (entry->major < ERL_NIF_MIN_REQUIRED_MAJOR_VERSION_ON_LOAD\n\t     || (entry->major==2 && entry->minor == 5)) { /* experimental maps */\n\t\n        char* fmt = \"That old NIF library (%d.%d) is not compatible with this \"\n            \"erts runtime (%d.%d). Try recompile the NIF lib.\";\n        ret = load_nif_error(BIF_P, bad_lib, fmt, entry->major, entry->minor,\n                             ERL_NIF_MAJOR_VERSION, ERL_NIF_MINOR_VERSION);\n    }   \n    else if (AT_LEAST_VERSION(entry, 2, 1)\n\t     && sys_strcmp(entry->vm_variant, ERL_NIF_VM_VARIANT) != 0) {\n\tret = load_nif_error(BIF_P, bad_lib, \"Library (%s) not compiled for \"\n\t\t\t     \"this vm variant (%s).\",\n\t\t\t     entry->vm_variant, ERL_NIF_VM_VARIANT);\n    }\n    else if (!erts_is_atom_str((char*)entry->name, mod_atom, 1)) {\n\tret = load_nif_error(BIF_P, bad_lib, \"Library module name '%s' does not\"\n\t\t\t     \" match calling module '%T'\", entry->name, mod_atom);\n    }\n    else {\n        lib = create_lib(entry);\n        entry = &lib->entry; /* Use a guaranteed modern lib entry from now on */\n\n        lib->handle = handle;\n        erts_refc_init(&lib->rt_cnt, 0);\n        erts_refc_init(&lib->rt_dtor_cnt, 0);\n        ASSERT(opened_rt_list == NULL);\n        lib->mod = module_p;\n\n        for (i=0; i < entry->num_of_funcs && ret==am_ok; i++) {\n\t    ErtsCodeInfo** ci_pp;\n            ErlNifFunc* f = &entry->funcs[i];\n\n\t    if (!erts_atom_get(f->name, sys_strlen(f->name), &f_atom, ERTS_ATOM_ENC_LATIN1)\n\t\t|| (ci_pp = get_func_pp(this_mi->code_hdr, f_atom, f->arity))==NULL) {\n\t\tret = load_nif_error(BIF_P,bad_lib,\"Function not found %T:%s/%u\",\n\t\t\t\t     mod_atom, f->name, f->arity);\n\t    }\n\t    else if (f->flags) {\n\t\t/*\n\t\t * If the flags field is non-zero and this emulator was\n\t\t * built with dirty scheduler support, check that the flags\n\t\t * value is legal. But if this emulator was built without\n\t\t * dirty scheduler support, treat a non-zero flags field as\n\t\t * a load error.\n\t\t */\n\t\tif (f->flags != ERL_NIF_DIRTY_JOB_IO_BOUND && f->flags != ERL_NIF_DIRTY_JOB_CPU_BOUND)\n\t\t    ret = load_nif_error(BIF_P, bad_lib, \"Illegal flags field value %d for NIF %T:%s/%u\",\n\t\t\t\t\t f->flags, mod_atom, f->name, f->arity);\n\t    }\n\t    else if (erts_codeinfo_to_code(ci_pp[1]) - erts_codeinfo_to_code(ci_pp[0])\n                     < BEAM_NIF_MIN_FUNC_SZ)\n\t    {\n\t\tret = load_nif_error(BIF_P,bad_lib,\"No explicit call to load_nif\"\n\t\t\t\t     \" in module (%T:%s/%u too small)\",\n\t\t\t\t     mod_atom, f->name, f->arity);\n\t    }\n\t    /*erts_fprintf(stderr, \"Found NIF %T:%s/%u\\r\\n\",\n\t      mod_atom, f->name, f->arity);*/\n\t}\n    }\n\n    if (ret != am_ok) {\n\tgoto error;\n    }\n\n    /* Call load or upgrade:\n     */\n\n    env.mod_nif = lib;\n\n    lib->priv_data = NULL;\n    if (prev_mi->nif != NULL) { /**************** Upgrade ***************/\n        void* prev_old_data = prev_mi->nif->priv_data;\n        if (entry->upgrade == NULL) {\n            ret = load_nif_error(BIF_P, upgrade, \"Upgrade not supported by this NIF library.\");\n            goto error;\n        }\n        erts_pre_nif(&env, BIF_P, lib, NULL);\n        veto = entry->upgrade(&env, &lib->priv_data, &prev_mi->nif->priv_data, BIF_ARG_2);\n        erts_post_nif(&env);\n        if (veto) {\n            prev_mi->nif->priv_data = prev_old_data;\n            ret = load_nif_error(BIF_P, upgrade, \"Library upgrade-call unsuccessful (%d).\", veto);\n        }\n    }\n    else if (entry->load != NULL) { /********* Initial load ***********/\n        erts_pre_nif(&env, BIF_P, lib, NULL);\n        veto = entry->load(&env, &lib->priv_data, BIF_ARG_2);\n        erts_post_nif(&env);\n        if (veto) {\n            ret = load_nif_error(BIF_P, \"load\", \"Library load-call unsuccessful (%d).\", veto);\n        }\n    }\n    if (ret == am_ok) {\n        commit_opened_resource_types(lib);\n\n\t/*\n\t** Everything ok, patch the beam code with op_call_nif\n\t*/\n\n\tthis_mi->nif = lib;\n\tfor (i=0; i < entry->num_of_funcs; i++)\n\t{\n            ErlNifFunc* f = &entry->funcs[i];\n\t    ErtsCodeInfo* ci;\n            BeamInstr *code_ptr;\n\n\t    erts_atom_get(f->name, sys_strlen(f->name), &f_atom, ERTS_ATOM_ENC_LATIN1);\n\t    ci = *get_func_pp(this_mi->code_hdr, f_atom, f->arity);\n            code_ptr = erts_codeinfo_to_code(ci);\n\n\t    if (ci->u.gen_bp == NULL) {\n\t\tcode_ptr[0] = BeamOpCodeAddr(op_call_nif);\n\t    }\n\t    else { /* Function traced, patch the original instruction word */\n\t\tGenericBp* g = ci->u.gen_bp;\n\t\tASSERT(BeamIsOpCode(code_ptr[0], op_i_generic_breakpoint));\n\t\tg->orig_instr = BeamOpCodeAddr(op_call_nif);\n\t    }\n\t    if (f->flags) {\n\t\tcode_ptr[3] = (BeamInstr) f->fptr;\n\t\tcode_ptr[1] = (f->flags == ERL_NIF_DIRTY_JOB_IO_BOUND) ?\n\t\t    (BeamInstr) static_schedule_dirty_io_nif :\n\t\t    (BeamInstr) static_schedule_dirty_cpu_nif;\n\t    }\n\t    else\n\t\tcode_ptr[1] = (BeamInstr) f->fptr;\n\t    code_ptr[2] = (BeamInstr) lib;\n\t}\n    }\n    else {\n    error:\n\trollback_opened_resource_types();\n\tASSERT(ret != am_ok);\n        if (lib != NULL) {\n\t    erts_free(ERTS_ALC_T_NIF, lib);\n\t}\n\tif (handle != NULL && !erts_is_static_nif(handle)) {\n\t    erts_sys_ddll_close(handle);\n\t}\n\terts_sys_ddll_free_error(&errdesc);\n    }\n\n    erts_thr_progress_unblock();\n    erts_proc_lock(BIF_P, ERTS_PROC_LOCK_MAIN);\n    erts_release_code_write_permission();\n    erts_free(ERTS_ALC_T_TMP, lib_name);\n\n    BIF_RET(ret);\n}\n\n\nvoid\nerts_unload_nif(struct erl_module_nif* lib)\n{\n    ErlNifResourceType* rt;\n    ErlNifResourceType* next;\n    ASSERT(erts_thr_progress_is_blocking());\n    ASSERT(lib != NULL);\n    ASSERT(lib->mod != NULL);\n\n    erts_tracer_nif_clear();\n\n    for (rt = resource_type_list.next;\n\t rt != &resource_type_list;\n\t rt = next) {\n\n\tnext = rt->next;\n\tif (rt->owner == lib) {\n\t    rt->next->prev = rt->prev;\n\t    rt->prev->next = rt->next;\n\t    rt->next = NULL;\n\t    rt->prev = NULL;\n\t    if (erts_refc_dectest(&rt->refc, 0) == 0) {\n\t\tif (rt->dtor != NULL) {\n\t\t    erts_refc_dec(&lib->rt_dtor_cnt, 0);\n\t\t}\n\t\terts_refc_dec(&lib->rt_cnt, 0);\n\t\terts_free(ERTS_ALC_T_NIF, rt);\n\t    }\n\t}\n    }\n    if (erts_refc_read(&lib->rt_dtor_cnt, 0) == 0) {\n\tclose_lib(lib);\n\tif (erts_refc_read(&lib->rt_cnt, 0) == 0) {\n\t    erts_free(ERTS_ALC_T_NIF, lib);\n\t    return;\n\t}\n    }\n    else {\n\tASSERT(erts_refc_read(&lib->rt_cnt, 1) > 0);\n    }\n    lib->mod = NULL;   /* orphan lib */\n}\t\n\nvoid erl_nif_init()\n{\n    ERTS_CT_ASSERT((offsetof(ErtsResource,data) % 8)\n                   == ERTS_MAGIC_BIN_BYTES_TO_ALIGN);\n\n    resource_type_list.next = &resource_type_list;\n    resource_type_list.prev = &resource_type_list;\n    resource_type_list.dtor = NULL;\n    resource_type_list.owner = NULL;\n    resource_type_list.module = THE_NON_VALUE;\n    resource_type_list.name = THE_NON_VALUE;\n\n}\n\nint erts_nif_get_funcs(struct erl_module_nif* mod,\n                       ErlNifFunc **funcs)\n{\n    *funcs = mod->entry.funcs;\n    return mod->entry.num_of_funcs;\n}\n\nModule *erts_nif_get_module(struct erl_module_nif *nif_mod) {\n    return nif_mod->mod;\n}\n\nEterm erts_nif_call_function(Process *p, Process *tracee,\n                             struct erl_module_nif* mod,\n                             ErlNifFunc *fun, int argc, Eterm *argv)\n{\n    Eterm nif_result;\n#ifdef DEBUG\n    /* Verify that function is part of this module */\n    int i;\n    for (i = 0; i < mod->entry.num_of_funcs; i++)\n        if (fun == &(mod->entry.funcs[i]))\n            break;\n    ASSERT(i < mod->entry.num_of_funcs);\n    if (p)\n        ERTS_LC_ASSERT(erts_proc_lc_my_proc_locks(p) & ERTS_PROC_LOCK_MAIN\n                           || erts_thr_progress_is_blocking());\n#endif\n    if (p) {\n        /* This is almost a normal nif call like in beam_emu,\n           except that any heap consumed by the nif will be\n           released without checking if anything in it is live.\n           This is because we cannot do a GC here as we don't know\n           the number of live registers that have to be preserved.\n           This means that any heap part of the returned term may\n           not be used outside this function. */\n        struct enif_environment_t env;\n        ErlHeapFragment *orig_hf = MBUF(p);\n        ErlOffHeap orig_oh = MSO(p);\n        Eterm *orig_htop = HEAP_TOP(p);\n        ASSERT(is_internal_pid(p->common.id));\n        MBUF(p) = NULL;\n        clear_offheap(&MSO(p));\n\n        erts_pre_nif(&env, p, mod, tracee);\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n        env.dbg_disable_assert_in_env = 1;\n#endif\n        nif_result = (*fun->fptr)(&env, argc, argv);\n        if (env.exception_thrown)\n            nif_result = THE_NON_VALUE;\n        erts_post_nif(&env);\n\n        /* Free any offheap and heap fragments created in nif */\n        if (MSO(p).first) {\n            erts_cleanup_offheap(&MSO(p));\n            clear_offheap(&MSO(p));\n        }\n        if (MBUF(p))\n            free_message_buffer(MBUF(p));\n\n        /* restore original heap fragment list */\n        MBUF(p) = orig_hf;\n        MSO(p) = orig_oh;\n        HEAP_TOP(p) = orig_htop;\n    } else {\n        /* Nif call was done without a process context,\n           so we create a phony one. */\n        struct enif_msg_environment_t msg_env;\n        pre_nif_noproc(&msg_env, mod, tracee);\n#ifdef ERTS_NIF_ASSERT_IN_ENV\n        msg_env.env.dbg_disable_assert_in_env = 1;\n#endif\n        nif_result = (*fun->fptr)(&msg_env.env, argc, argv);\n        if (msg_env.env.exception_thrown)\n            nif_result = THE_NON_VALUE;\n        post_nif_noproc(&msg_env);\n    }\n\n    return nif_result;\n}\n\n#ifdef USE_VM_PROBES\nvoid dtrace_nifenv_str(ErlNifEnv *env, char *process_buf)\n{\n    dtrace_pid_str(env->proc->common.id, process_buf);\n}\n#endif\n\n#ifdef READONLY_CHECK\n/* Use checksums to assert that NIFs do not write into inspected binaries\n*/\nstatic void readonly_check_dtor(struct enif_tmp_obj_t*);\nstatic unsigned calc_checksum(unsigned char* ptr, unsigned size);\n\nstruct readonly_check_t\n{\n    unsigned char* ptr;\n    unsigned size;\n    unsigned checksum;\n};\nstatic void add_readonly_check(ErlNifEnv* env, unsigned char* ptr, unsigned sz)\n{\n    struct readonly_check_t* obj;\n\n    obj = alloc_tmp_obj(env, sizeof(struct readonly_check_t),\n        &readonly_check_dtor);\n\n    obj->ptr = ptr;\n    obj->size = sz;\n    obj->checksum = calc_checksum(ptr, sz);\n}\nstatic void readonly_check_dtor(struct enif_tmp_obj_t* tmp_obj)\n{\n    struct readonly_check_t* ro_check = (struct readonly_check_t*)&tmp_obj[1];\n    unsigned chksum = calc_checksum(ro_check->ptr, ro_check->size);\n    if (chksum != ro_check->checksum) { \n\tfprintf(stderr, \"\\r\\nReadonly data written by NIF, checksums differ\"\n\t\t\" %x != %x\\r\\nABORTING\\r\\n\", chksum, ro_check->checksum);\n\tabort();\n    }\n    erts_free(tmp_obj->allocator, tmp_obj);\n}\nstatic unsigned calc_checksum(unsigned char* ptr, unsigned size)\n{\n    unsigned i, sum = 0;\n    for (i=0; i<size; i++) {\n\tsum ^= ptr[i] << ((i % 4)*8);\n    }\n    return sum;\n}\n\n#endif /* READONLY_CHECK */\n\n#ifdef ERTS_NIF_ASSERT_IN_ENV\nstatic void dbg_assert_in_env(ErlNifEnv* env, Eterm term,\n                              int nr, const char* type, const char* func)\n{\n    Uint saved_used_size;\n    Eterm* real_htop;\n\n    if (is_immed(term)\n        || (is_non_value(term) && env->exception_thrown)\n        || erts_is_literal(term, ptr_val(term)))\n        return;\n\n    if (env->dbg_disable_assert_in_env) {\n        /*\n         * Trace nifs may cheat as built terms are discarded after return.\n         * ToDo: Check if 'term' is part of argv[].\n         */\n        return;\n    }\n\n    if (env->heap_frag) {\n        ASSERT(env->heap_frag == MBUF(env->proc));\n        ASSERT(env->hp >= env->heap_frag->mem);\n        ASSERT(env->hp <= env->heap_frag->mem + env->heap_frag->alloc_size);\n        saved_used_size = env->heap_frag->used_size;\n        env->heap_frag->used_size = env->hp - env->heap_frag->mem;\n        real_htop = NULL;\n    }\n    else {\n        real_htop = env->hp;\n    }\n    if (!erts_dbg_within_proc(ptr_val(term), env->proc, real_htop)) {\n        fprintf(stderr, \"\\r\\nFAILED ASSERTION in %s:\\r\\n\", func);\n        if (nr) {\n            fprintf(stderr, \"Term #%d of the %s is not from same ErlNifEnv.\",\n                    nr, type);\n        }\n        else {\n            fprintf(stderr, \"The %s is not from the same ErlNifEnv.\", type);\n        }\n        fprintf(stderr, \"\\r\\nABORTING\\r\\n\");\n        abort();\n    }\n    if (env->heap_frag) {\n        env->heap_frag->used_size = saved_used_size;\n    }\n}\n#endif\n\n#ifdef HAVE_USE_DTRACE\n\n#define MESSAGE_BUFSIZ 1024\n\nstatic void get_string_maybe(ErlNifEnv *env, const ERL_NIF_TERM term,\n\t\t      char **ptr, char *buf, int bufsiz)\n{\n    ErlNifBinary str_bin;\n\n    if (!enif_inspect_iolist_as_binary(env, term, &str_bin) ||\n        str_bin.size > bufsiz) {\n        *ptr = NULL;\n    } else {\n        sys_memcpy(buf, (char *) str_bin.data, str_bin.size);\n        buf[str_bin.size] = '\\0';\n        *ptr = buf;\n    }\n}\n\nERL_NIF_TERM erl_nif_user_trace_s1(ErlNifEnv* env, int argc,\n                                   const ERL_NIF_TERM argv[])\n{\n    ErlNifBinary message_bin;\n    DTRACE_CHARBUF(messagebuf, MESSAGE_BUFSIZ + 1);\n\n    if (DTRACE_ENABLED(user_trace_s1)) {\n\tif (!enif_inspect_iolist_as_binary(env, argv[0], &message_bin) ||\n\t    message_bin.size > MESSAGE_BUFSIZ) {\n\t    return am_badarg;\n\t}\n\tsys_memcpy(messagebuf, (char *) message_bin.data, message_bin.size);\n        messagebuf[message_bin.size] = '\\0';\n\tDTRACE1(user_trace_s1, messagebuf);\n\treturn am_true;\n    } else {\n\treturn am_false;\n    }\n}\n\nERL_NIF_TERM erl_nif_user_trace_i4s4(ErlNifEnv* env, int argc,\n                                     const ERL_NIF_TERM argv[])\n{\n    DTRACE_CHARBUF(procbuf, 32 + 1);\n    DTRACE_CHARBUF(user_tagbuf, MESSAGE_BUFSIZ + 1);\n    char *utbuf = NULL;\n    ErlNifSInt64 i1, i2, i3, i4;\n    DTRACE_CHARBUF(messagebuf1, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf2, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf3, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf4, MESSAGE_BUFSIZ + 1);\n    char *mbuf1 = NULL, *mbuf2 = NULL, *mbuf3 = NULL, *mbuf4 = NULL;\n    \n    if (DTRACE_ENABLED(user_trace_i4s4)) {\n\tdtrace_nifenv_str(env, procbuf);\n        get_string_maybe(env, argv[0], &utbuf, user_tagbuf, MESSAGE_BUFSIZ);\n        if (! enif_get_int64(env, argv[1], &i1))\n            i1 = 0;\n        if (! enif_get_int64(env, argv[2], &i2))\n            i2 = 0;\n        if (! enif_get_int64(env, argv[3], &i3))\n            i3 = 0;\n        if (! enif_get_int64(env, argv[4], &i4))\n            i4 = 0;\n        get_string_maybe(env, argv[5], &mbuf1, messagebuf1, MESSAGE_BUFSIZ);\n        get_string_maybe(env, argv[6], &mbuf2, messagebuf2, MESSAGE_BUFSIZ);\n        get_string_maybe(env, argv[7], &mbuf3, messagebuf3, MESSAGE_BUFSIZ);\n        get_string_maybe(env, argv[8], &mbuf4, messagebuf4, MESSAGE_BUFSIZ);\n\tDTRACE10(user_trace_i4s4, procbuf, utbuf,\n\t\t i1, i2, i3, i4, mbuf1, mbuf2, mbuf3, mbuf4);\n\treturn am_true;\n    } else {\n\treturn am_false;\n    }\n}\n\n#define DTRACE10_LABEL(name, label, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) \\\n    erlang_##name##label((a0), (a1), (a2), (a3), (a4), (a5), (a6), (a7), (a8), (a9))\n#define N_STATEMENT(the_label) \\\n   case the_label: \\\n      if (DTRACE_ENABLED(user_trace_n##the_label)) { \\\n          dtrace_nifenv_str(env, procbuf); \\\n          get_string_maybe(env, argv[1], &utbuf, user_tagbuf, MESSAGE_BUFSIZ); \\\n          if (! enif_get_int64(env, argv[2], &i1)) \\\n              i1 = 0; \\\n          if (! enif_get_int64(env, argv[3], &i2)) \\\n              i2 = 0; \\\n          if (! enif_get_int64(env, argv[4], &i3)) \\\n              i3 = 0; \\\n          if (! enif_get_int64(env, argv[5], &i4)) \\\n              i4 = 0; \\\n          get_string_maybe(env, argv[6], &mbuf1, messagebuf1, MESSAGE_BUFSIZ); \\\n          get_string_maybe(env, argv[7], &mbuf2, messagebuf2, MESSAGE_BUFSIZ); \\\n          get_string_maybe(env, argv[8], &mbuf3, messagebuf3, MESSAGE_BUFSIZ); \\\n          get_string_maybe(env, argv[9], &mbuf4, messagebuf4, MESSAGE_BUFSIZ); \\\n          DTRACE10_LABEL(user_trace_n, the_label, procbuf, utbuf,    \\\n                         i1, i2, i3, i4, mbuf1, mbuf2, mbuf3, mbuf4); \\\n          return am_true; \\\n      } else { \\\n          return am_false; \\\n      } \\\n      break\n\nERL_NIF_TERM erl_nif_user_trace_n(ErlNifEnv* env, int argc,\n\t\t\t\t  const ERL_NIF_TERM argv[])\n{\n    DTRACE_CHARBUF(procbuf, 32 + 1);\n    DTRACE_CHARBUF(user_tagbuf, MESSAGE_BUFSIZ + 1);\n    char *utbuf = NULL;\n    ErlNifSInt64 i1, i2, i3, i4;\n    DTRACE_CHARBUF(messagebuf1, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf2, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf3, MESSAGE_BUFSIZ + 1);\n    DTRACE_CHARBUF(messagebuf4, MESSAGE_BUFSIZ + 1);\n    char *mbuf1 = NULL, *mbuf2 = NULL, *mbuf3 = NULL, *mbuf4 = NULL;\n    ErlNifSInt64 label = 0;\n\n    if (! enif_get_int64(env, argv[0], &label) || label < 0 || label > 1023) {\n\treturn am_badarg;\n    }\n    switch (label) {\n        N_STATEMENT(0);\n        N_STATEMENT(1);\n        N_STATEMENT(2);\n        N_STATEMENT(3);\n        N_STATEMENT(4);\n        N_STATEMENT(5);\n        N_STATEMENT(6);\n        N_STATEMENT(7);\n        N_STATEMENT(8);\n        N_STATEMENT(9);\n        N_STATEMENT(10);\n        N_STATEMENT(11);\n        N_STATEMENT(12);\n        N_STATEMENT(13);\n        N_STATEMENT(14);\n        N_STATEMENT(15);\n        N_STATEMENT(16);\n        N_STATEMENT(17);\n        N_STATEMENT(18);\n        N_STATEMENT(19);\n        N_STATEMENT(20);\n        N_STATEMENT(21);\n        N_STATEMENT(22);\n        N_STATEMENT(23);\n        N_STATEMENT(24);\n        N_STATEMENT(25);\n        N_STATEMENT(26);\n        N_STATEMENT(27);\n        N_STATEMENT(28);\n        N_STATEMENT(29);\n        N_STATEMENT(30);\n        N_STATEMENT(31);\n        N_STATEMENT(32);\n        N_STATEMENT(33);\n        N_STATEMENT(34);\n        N_STATEMENT(35);\n        N_STATEMENT(36);\n        N_STATEMENT(37);\n        N_STATEMENT(38);\n        N_STATEMENT(39);\n        N_STATEMENT(40);\n        N_STATEMENT(41);\n        N_STATEMENT(42);\n        N_STATEMENT(43);\n        N_STATEMENT(44);\n        N_STATEMENT(45);\n        N_STATEMENT(46);\n        N_STATEMENT(47);\n        N_STATEMENT(48);\n        N_STATEMENT(49);\n        N_STATEMENT(50);\n        N_STATEMENT(51);\n        N_STATEMENT(52);\n        N_STATEMENT(53);\n        N_STATEMENT(54);\n        N_STATEMENT(55);\n        N_STATEMENT(56);\n        N_STATEMENT(57);\n        N_STATEMENT(58);\n        N_STATEMENT(59);\n        N_STATEMENT(60);\n        N_STATEMENT(61);\n        N_STATEMENT(62);\n        N_STATEMENT(63);\n        N_STATEMENT(64);\n        N_STATEMENT(65);\n        N_STATEMENT(66);\n        N_STATEMENT(67);\n        N_STATEMENT(68);\n        N_STATEMENT(69);\n        N_STATEMENT(70);\n        N_STATEMENT(71);\n        N_STATEMENT(72);\n        N_STATEMENT(73);\n        N_STATEMENT(74);\n        N_STATEMENT(75);\n        N_STATEMENT(76);\n        N_STATEMENT(77);\n        N_STATEMENT(78);\n        N_STATEMENT(79);\n        N_STATEMENT(80);\n        N_STATEMENT(81);\n        N_STATEMENT(82);\n        N_STATEMENT(83);\n        N_STATEMENT(84);\n        N_STATEMENT(85);\n        N_STATEMENT(86);\n        N_STATEMENT(87);\n        N_STATEMENT(88);\n        N_STATEMENT(89);\n        N_STATEMENT(90);\n        N_STATEMENT(91);\n        N_STATEMENT(92);\n        N_STATEMENT(93);\n        N_STATEMENT(94);\n        N_STATEMENT(95);\n        N_STATEMENT(96);\n        N_STATEMENT(97);\n        N_STATEMENT(98);\n        N_STATEMENT(99);\n        N_STATEMENT(100);\n        N_STATEMENT(101);\n        N_STATEMENT(102);\n        N_STATEMENT(103);\n        N_STATEMENT(104);\n        N_STATEMENT(105);\n        N_STATEMENT(106);\n        N_STATEMENT(107);\n        N_STATEMENT(108);\n        N_STATEMENT(109);\n        N_STATEMENT(110);\n        N_STATEMENT(111);\n        N_STATEMENT(112);\n        N_STATEMENT(113);\n        N_STATEMENT(114);\n        N_STATEMENT(115);\n        N_STATEMENT(116);\n        N_STATEMENT(117);\n        N_STATEMENT(118);\n        N_STATEMENT(119);\n        N_STATEMENT(120);\n        N_STATEMENT(121);\n        N_STATEMENT(122);\n        N_STATEMENT(123);\n        N_STATEMENT(124);\n        N_STATEMENT(125);\n        N_STATEMENT(126);\n        N_STATEMENT(127);\n        N_STATEMENT(128);\n        N_STATEMENT(129);\n        N_STATEMENT(130);\n        N_STATEMENT(131);\n        N_STATEMENT(132);\n        N_STATEMENT(133);\n        N_STATEMENT(134);\n        N_STATEMENT(135);\n        N_STATEMENT(136);\n        N_STATEMENT(137);\n        N_STATEMENT(138);\n        N_STATEMENT(139);\n        N_STATEMENT(140);\n        N_STATEMENT(141);\n        N_STATEMENT(142);\n        N_STATEMENT(143);\n        N_STATEMENT(144);\n        N_STATEMENT(145);\n        N_STATEMENT(146);\n        N_STATEMENT(147);\n        N_STATEMENT(148);\n        N_STATEMENT(149);\n        N_STATEMENT(150);\n        N_STATEMENT(151);\n        N_STATEMENT(152);\n        N_STATEMENT(153);\n        N_STATEMENT(154);\n        N_STATEMENT(155);\n        N_STATEMENT(156);\n        N_STATEMENT(157);\n        N_STATEMENT(158);\n        N_STATEMENT(159);\n        N_STATEMENT(160);\n        N_STATEMENT(161);\n        N_STATEMENT(162);\n        N_STATEMENT(163);\n        N_STATEMENT(164);\n        N_STATEMENT(165);\n        N_STATEMENT(166);\n        N_STATEMENT(167);\n        N_STATEMENT(168);\n        N_STATEMENT(169);\n        N_STATEMENT(170);\n        N_STATEMENT(171);\n        N_STATEMENT(172);\n        N_STATEMENT(173);\n        N_STATEMENT(174);\n        N_STATEMENT(175);\n        N_STATEMENT(176);\n        N_STATEMENT(177);\n        N_STATEMENT(178);\n        N_STATEMENT(179);\n        N_STATEMENT(180);\n        N_STATEMENT(181);\n        N_STATEMENT(182);\n        N_STATEMENT(183);\n        N_STATEMENT(184);\n        N_STATEMENT(185);\n        N_STATEMENT(186);\n        N_STATEMENT(187);\n        N_STATEMENT(188);\n        N_STATEMENT(189);\n        N_STATEMENT(190);\n        N_STATEMENT(191);\n        N_STATEMENT(192);\n        N_STATEMENT(193);\n        N_STATEMENT(194);\n        N_STATEMENT(195);\n        N_STATEMENT(196);\n        N_STATEMENT(197);\n        N_STATEMENT(198);\n        N_STATEMENT(199);\n        N_STATEMENT(200);\n        N_STATEMENT(201);\n        N_STATEMENT(202);\n        N_STATEMENT(203);\n        N_STATEMENT(204);\n        N_STATEMENT(205);\n        N_STATEMENT(206);\n        N_STATEMENT(207);\n        N_STATEMENT(208);\n        N_STATEMENT(209);\n        N_STATEMENT(210);\n        N_STATEMENT(211);\n        N_STATEMENT(212);\n        N_STATEMENT(213);\n        N_STATEMENT(214);\n        N_STATEMENT(215);\n        N_STATEMENT(216);\n        N_STATEMENT(217);\n        N_STATEMENT(218);\n        N_STATEMENT(219);\n        N_STATEMENT(220);\n        N_STATEMENT(221);\n        N_STATEMENT(222);\n        N_STATEMENT(223);\n        N_STATEMENT(224);\n        N_STATEMENT(225);\n        N_STATEMENT(226);\n        N_STATEMENT(227);\n        N_STATEMENT(228);\n        N_STATEMENT(229);\n        N_STATEMENT(230);\n        N_STATEMENT(231);\n        N_STATEMENT(232);\n        N_STATEMENT(233);\n        N_STATEMENT(234);\n        N_STATEMENT(235);\n        N_STATEMENT(236);\n        N_STATEMENT(237);\n        N_STATEMENT(238);\n        N_STATEMENT(239);\n        N_STATEMENT(240);\n        N_STATEMENT(241);\n        N_STATEMENT(242);\n        N_STATEMENT(243);\n        N_STATEMENT(244);\n        N_STATEMENT(245);\n        N_STATEMENT(246);\n        N_STATEMENT(247);\n        N_STATEMENT(248);\n        N_STATEMENT(249);\n        N_STATEMENT(250);\n        N_STATEMENT(251);\n        N_STATEMENT(252);\n        N_STATEMENT(253);\n        N_STATEMENT(254);\n        N_STATEMENT(255);\n        N_STATEMENT(256);\n        N_STATEMENT(257);\n        N_STATEMENT(258);\n        N_STATEMENT(259);\n        N_STATEMENT(260);\n        N_STATEMENT(261);\n        N_STATEMENT(262);\n        N_STATEMENT(263);\n        N_STATEMENT(264);\n        N_STATEMENT(265);\n        N_STATEMENT(266);\n        N_STATEMENT(267);\n        N_STATEMENT(268);\n        N_STATEMENT(269);\n        N_STATEMENT(270);\n        N_STATEMENT(271);\n        N_STATEMENT(272);\n        N_STATEMENT(273);\n        N_STATEMENT(274);\n        N_STATEMENT(275);\n        N_STATEMENT(276);\n        N_STATEMENT(277);\n        N_STATEMENT(278);\n        N_STATEMENT(279);\n        N_STATEMENT(280);\n        N_STATEMENT(281);\n        N_STATEMENT(282);\n        N_STATEMENT(283);\n        N_STATEMENT(284);\n        N_STATEMENT(285);\n        N_STATEMENT(286);\n        N_STATEMENT(287);\n        N_STATEMENT(288);\n        N_STATEMENT(289);\n        N_STATEMENT(290);\n        N_STATEMENT(291);\n        N_STATEMENT(292);\n        N_STATEMENT(293);\n        N_STATEMENT(294);\n        N_STATEMENT(295);\n        N_STATEMENT(296);\n        N_STATEMENT(297);\n        N_STATEMENT(298);\n        N_STATEMENT(299);\n        N_STATEMENT(300);\n        N_STATEMENT(301);\n        N_STATEMENT(302);\n        N_STATEMENT(303);\n        N_STATEMENT(304);\n        N_STATEMENT(305);\n        N_STATEMENT(306);\n        N_STATEMENT(307);\n        N_STATEMENT(308);\n        N_STATEMENT(309);\n        N_STATEMENT(310);\n        N_STATEMENT(311);\n        N_STATEMENT(312);\n        N_STATEMENT(313);\n        N_STATEMENT(314);\n        N_STATEMENT(315);\n        N_STATEMENT(316);\n        N_STATEMENT(317);\n        N_STATEMENT(318);\n        N_STATEMENT(319);\n        N_STATEMENT(320);\n        N_STATEMENT(321);\n        N_STATEMENT(322);\n        N_STATEMENT(323);\n        N_STATEMENT(324);\n        N_STATEMENT(325);\n        N_STATEMENT(326);\n        N_STATEMENT(327);\n        N_STATEMENT(328);\n        N_STATEMENT(329);\n        N_STATEMENT(330);\n        N_STATEMENT(331);\n        N_STATEMENT(332);\n        N_STATEMENT(333);\n        N_STATEMENT(334);\n        N_STATEMENT(335);\n        N_STATEMENT(336);\n        N_STATEMENT(337);\n        N_STATEMENT(338);\n        N_STATEMENT(339);\n        N_STATEMENT(340);\n        N_STATEMENT(341);\n        N_STATEMENT(342);\n        N_STATEMENT(343);\n        N_STATEMENT(344);\n        N_STATEMENT(345);\n        N_STATEMENT(346);\n        N_STATEMENT(347);\n        N_STATEMENT(348);\n        N_STATEMENT(349);\n        N_STATEMENT(350);\n        N_STATEMENT(351);\n        N_STATEMENT(352);\n        N_STATEMENT(353);\n        N_STATEMENT(354);\n        N_STATEMENT(355);\n        N_STATEMENT(356);\n        N_STATEMENT(357);\n        N_STATEMENT(358);\n        N_STATEMENT(359);\n        N_STATEMENT(360);\n        N_STATEMENT(361);\n        N_STATEMENT(362);\n        N_STATEMENT(363);\n        N_STATEMENT(364);\n        N_STATEMENT(365);\n        N_STATEMENT(366);\n        N_STATEMENT(367);\n        N_STATEMENT(368);\n        N_STATEMENT(369);\n        N_STATEMENT(370);\n        N_STATEMENT(371);\n        N_STATEMENT(372);\n        N_STATEMENT(373);\n        N_STATEMENT(374);\n        N_STATEMENT(375);\n        N_STATEMENT(376);\n        N_STATEMENT(377);\n        N_STATEMENT(378);\n        N_STATEMENT(379);\n        N_STATEMENT(380);\n        N_STATEMENT(381);\n        N_STATEMENT(382);\n        N_STATEMENT(383);\n        N_STATEMENT(384);\n        N_STATEMENT(385);\n        N_STATEMENT(386);\n        N_STATEMENT(387);\n        N_STATEMENT(388);\n        N_STATEMENT(389);\n        N_STATEMENT(390);\n        N_STATEMENT(391);\n        N_STATEMENT(392);\n        N_STATEMENT(393);\n        N_STATEMENT(394);\n        N_STATEMENT(395);\n        N_STATEMENT(396);\n        N_STATEMENT(397);\n        N_STATEMENT(398);\n        N_STATEMENT(399);\n        N_STATEMENT(400);\n        N_STATEMENT(401);\n        N_STATEMENT(402);\n        N_STATEMENT(403);\n        N_STATEMENT(404);\n        N_STATEMENT(405);\n        N_STATEMENT(406);\n        N_STATEMENT(407);\n        N_STATEMENT(408);\n        N_STATEMENT(409);\n        N_STATEMENT(410);\n        N_STATEMENT(411);\n        N_STATEMENT(412);\n        N_STATEMENT(413);\n        N_STATEMENT(414);\n        N_STATEMENT(415);\n        N_STATEMENT(416);\n        N_STATEMENT(417);\n        N_STATEMENT(418);\n        N_STATEMENT(419);\n        N_STATEMENT(420);\n        N_STATEMENT(421);\n        N_STATEMENT(422);\n        N_STATEMENT(423);\n        N_STATEMENT(424);\n        N_STATEMENT(425);\n        N_STATEMENT(426);\n        N_STATEMENT(427);\n        N_STATEMENT(428);\n        N_STATEMENT(429);\n        N_STATEMENT(430);\n        N_STATEMENT(431);\n        N_STATEMENT(432);\n        N_STATEMENT(433);\n        N_STATEMENT(434);\n        N_STATEMENT(435);\n        N_STATEMENT(436);\n        N_STATEMENT(437);\n        N_STATEMENT(438);\n        N_STATEMENT(439);\n        N_STATEMENT(440);\n        N_STATEMENT(441);\n        N_STATEMENT(442);\n        N_STATEMENT(443);\n        N_STATEMENT(444);\n        N_STATEMENT(445);\n        N_STATEMENT(446);\n        N_STATEMENT(447);\n        N_STATEMENT(448);\n        N_STATEMENT(449);\n        N_STATEMENT(450);\n        N_STATEMENT(451);\n        N_STATEMENT(452);\n        N_STATEMENT(453);\n        N_STATEMENT(454);\n        N_STATEMENT(455);\n        N_STATEMENT(456);\n        N_STATEMENT(457);\n        N_STATEMENT(458);\n        N_STATEMENT(459);\n        N_STATEMENT(460);\n        N_STATEMENT(461);\n        N_STATEMENT(462);\n        N_STATEMENT(463);\n        N_STATEMENT(464);\n        N_STATEMENT(465);\n        N_STATEMENT(466);\n        N_STATEMENT(467);\n        N_STATEMENT(468);\n        N_STATEMENT(469);\n        N_STATEMENT(470);\n        N_STATEMENT(471);\n        N_STATEMENT(472);\n        N_STATEMENT(473);\n        N_STATEMENT(474);\n        N_STATEMENT(475);\n        N_STATEMENT(476);\n        N_STATEMENT(477);\n        N_STATEMENT(478);\n        N_STATEMENT(479);\n        N_STATEMENT(480);\n        N_STATEMENT(481);\n        N_STATEMENT(482);\n        N_STATEMENT(483);\n        N_STATEMENT(484);\n        N_STATEMENT(485);\n        N_STATEMENT(486);\n        N_STATEMENT(487);\n        N_STATEMENT(488);\n        N_STATEMENT(489);\n        N_STATEMENT(490);\n        N_STATEMENT(491);\n        N_STATEMENT(492);\n        N_STATEMENT(493);\n        N_STATEMENT(494);\n        N_STATEMENT(495);\n        N_STATEMENT(496);\n        N_STATEMENT(497);\n        N_STATEMENT(498);\n        N_STATEMENT(499);\n        N_STATEMENT(500);\n        N_STATEMENT(501);\n        N_STATEMENT(502);\n        N_STATEMENT(503);\n        N_STATEMENT(504);\n        N_STATEMENT(505);\n        N_STATEMENT(506);\n        N_STATEMENT(507);\n        N_STATEMENT(508);\n        N_STATEMENT(509);\n        N_STATEMENT(510);\n        N_STATEMENT(511);\n        N_STATEMENT(512);\n        N_STATEMENT(513);\n        N_STATEMENT(514);\n        N_STATEMENT(515);\n        N_STATEMENT(516);\n        N_STATEMENT(517);\n        N_STATEMENT(518);\n        N_STATEMENT(519);\n        N_STATEMENT(520);\n        N_STATEMENT(521);\n        N_STATEMENT(522);\n        N_STATEMENT(523);\n        N_STATEMENT(524);\n        N_STATEMENT(525);\n        N_STATEMENT(526);\n        N_STATEMENT(527);\n        N_STATEMENT(528);\n        N_STATEMENT(529);\n        N_STATEMENT(530);\n        N_STATEMENT(531);\n        N_STATEMENT(532);\n        N_STATEMENT(533);\n        N_STATEMENT(534);\n        N_STATEMENT(535);\n        N_STATEMENT(536);\n        N_STATEMENT(537);\n        N_STATEMENT(538);\n        N_STATEMENT(539);\n        N_STATEMENT(540);\n        N_STATEMENT(541);\n        N_STATEMENT(542);\n        N_STATEMENT(543);\n        N_STATEMENT(544);\n        N_STATEMENT(545);\n        N_STATEMENT(546);\n        N_STATEMENT(547);\n        N_STATEMENT(548);\n        N_STATEMENT(549);\n        N_STATEMENT(550);\n        N_STATEMENT(551);\n        N_STATEMENT(552);\n        N_STATEMENT(553);\n        N_STATEMENT(554);\n        N_STATEMENT(555);\n        N_STATEMENT(556);\n        N_STATEMENT(557);\n        N_STATEMENT(558);\n        N_STATEMENT(559);\n        N_STATEMENT(560);\n        N_STATEMENT(561);\n        N_STATEMENT(562);\n        N_STATEMENT(563);\n        N_STATEMENT(564);\n        N_STATEMENT(565);\n        N_STATEMENT(566);\n        N_STATEMENT(567);\n        N_STATEMENT(568);\n        N_STATEMENT(569);\n        N_STATEMENT(570);\n        N_STATEMENT(571);\n        N_STATEMENT(572);\n        N_STATEMENT(573);\n        N_STATEMENT(574);\n        N_STATEMENT(575);\n        N_STATEMENT(576);\n        N_STATEMENT(577);\n        N_STATEMENT(578);\n        N_STATEMENT(579);\n        N_STATEMENT(580);\n        N_STATEMENT(581);\n        N_STATEMENT(582);\n        N_STATEMENT(583);\n        N_STATEMENT(584);\n        N_STATEMENT(585);\n        N_STATEMENT(586);\n        N_STATEMENT(587);\n        N_STATEMENT(588);\n        N_STATEMENT(589);\n        N_STATEMENT(590);\n        N_STATEMENT(591);\n        N_STATEMENT(592);\n        N_STATEMENT(593);\n        N_STATEMENT(594);\n        N_STATEMENT(595);\n        N_STATEMENT(596);\n        N_STATEMENT(597);\n        N_STATEMENT(598);\n        N_STATEMENT(599);\n        N_STATEMENT(600);\n        N_STATEMENT(601);\n        N_STATEMENT(602);\n        N_STATEMENT(603);\n        N_STATEMENT(604);\n        N_STATEMENT(605);\n        N_STATEMENT(606);\n        N_STATEMENT(607);\n        N_STATEMENT(608);\n        N_STATEMENT(609);\n        N_STATEMENT(610);\n        N_STATEMENT(611);\n        N_STATEMENT(612);\n        N_STATEMENT(613);\n        N_STATEMENT(614);\n        N_STATEMENT(615);\n        N_STATEMENT(616);\n        N_STATEMENT(617);\n        N_STATEMENT(618);\n        N_STATEMENT(619);\n        N_STATEMENT(620);\n        N_STATEMENT(621);\n        N_STATEMENT(622);\n        N_STATEMENT(623);\n        N_STATEMENT(624);\n        N_STATEMENT(625);\n        N_STATEMENT(626);\n        N_STATEMENT(627);\n        N_STATEMENT(628);\n        N_STATEMENT(629);\n        N_STATEMENT(630);\n        N_STATEMENT(631);\n        N_STATEMENT(632);\n        N_STATEMENT(633);\n        N_STATEMENT(634);\n        N_STATEMENT(635);\n        N_STATEMENT(636);\n        N_STATEMENT(637);\n        N_STATEMENT(638);\n        N_STATEMENT(639);\n        N_STATEMENT(640);\n        N_STATEMENT(641);\n        N_STATEMENT(642);\n        N_STATEMENT(643);\n        N_STATEMENT(644);\n        N_STATEMENT(645);\n        N_STATEMENT(646);\n        N_STATEMENT(647);\n        N_STATEMENT(648);\n        N_STATEMENT(649);\n        N_STATEMENT(650);\n        N_STATEMENT(651);\n        N_STATEMENT(652);\n        N_STATEMENT(653);\n        N_STATEMENT(654);\n        N_STATEMENT(655);\n        N_STATEMENT(656);\n        N_STATEMENT(657);\n        N_STATEMENT(658);\n        N_STATEMENT(659);\n        N_STATEMENT(660);\n        N_STATEMENT(661);\n        N_STATEMENT(662);\n        N_STATEMENT(663);\n        N_STATEMENT(664);\n        N_STATEMENT(665);\n        N_STATEMENT(666);\n        N_STATEMENT(667);\n        N_STATEMENT(668);\n        N_STATEMENT(669);\n        N_STATEMENT(670);\n        N_STATEMENT(671);\n        N_STATEMENT(672);\n        N_STATEMENT(673);\n        N_STATEMENT(674);\n        N_STATEMENT(675);\n        N_STATEMENT(676);\n        N_STATEMENT(677);\n        N_STATEMENT(678);\n        N_STATEMENT(679);\n        N_STATEMENT(680);\n        N_STATEMENT(681);\n        N_STATEMENT(682);\n        N_STATEMENT(683);\n        N_STATEMENT(684);\n        N_STATEMENT(685);\n        N_STATEMENT(686);\n        N_STATEMENT(687);\n        N_STATEMENT(688);\n        N_STATEMENT(689);\n        N_STATEMENT(690);\n        N_STATEMENT(691);\n        N_STATEMENT(692);\n        N_STATEMENT(693);\n        N_STATEMENT(694);\n        N_STATEMENT(695);\n        N_STATEMENT(696);\n        N_STATEMENT(697);\n        N_STATEMENT(698);\n        N_STATEMENT(699);\n        N_STATEMENT(700);\n        N_STATEMENT(701);\n        N_STATEMENT(702);\n        N_STATEMENT(703);\n        N_STATEMENT(704);\n        N_STATEMENT(705);\n        N_STATEMENT(706);\n        N_STATEMENT(707);\n        N_STATEMENT(708);\n        N_STATEMENT(709);\n        N_STATEMENT(710);\n        N_STATEMENT(711);\n        N_STATEMENT(712);\n        N_STATEMENT(713);\n        N_STATEMENT(714);\n        N_STATEMENT(715);\n        N_STATEMENT(716);\n        N_STATEMENT(717);\n        N_STATEMENT(718);\n        N_STATEMENT(719);\n        N_STATEMENT(720);\n        N_STATEMENT(721);\n        N_STATEMENT(722);\n        N_STATEMENT(723);\n        N_STATEMENT(724);\n        N_STATEMENT(725);\n        N_STATEMENT(726);\n        N_STATEMENT(727);\n        N_STATEMENT(728);\n        N_STATEMENT(729);\n        N_STATEMENT(730);\n        N_STATEMENT(731);\n        N_STATEMENT(732);\n        N_STATEMENT(733);\n        N_STATEMENT(734);\n        N_STATEMENT(735);\n        N_STATEMENT(736);\n        N_STATEMENT(737);\n        N_STATEMENT(738);\n        N_STATEMENT(739);\n        N_STATEMENT(740);\n        N_STATEMENT(741);\n        N_STATEMENT(742);\n        N_STATEMENT(743);\n        N_STATEMENT(744);\n        N_STATEMENT(745);\n        N_STATEMENT(746);\n        N_STATEMENT(747);\n        N_STATEMENT(748);\n        N_STATEMENT(749);\n        N_STATEMENT(750);\n        N_STATEMENT(751);\n        N_STATEMENT(752);\n        N_STATEMENT(753);\n        N_STATEMENT(754);\n        N_STATEMENT(755);\n        N_STATEMENT(756);\n        N_STATEMENT(757);\n        N_STATEMENT(758);\n        N_STATEMENT(759);\n        N_STATEMENT(760);\n        N_STATEMENT(761);\n        N_STATEMENT(762);\n        N_STATEMENT(763);\n        N_STATEMENT(764);\n        N_STATEMENT(765);\n        N_STATEMENT(766);\n        N_STATEMENT(767);\n        N_STATEMENT(768);\n        N_STATEMENT(769);\n        N_STATEMENT(770);\n        N_STATEMENT(771);\n        N_STATEMENT(772);\n        N_STATEMENT(773);\n        N_STATEMENT(774);\n        N_STATEMENT(775);\n        N_STATEMENT(776);\n        N_STATEMENT(777);\n        N_STATEMENT(778);\n        N_STATEMENT(779);\n        N_STATEMENT(780);\n        N_STATEMENT(781);\n        N_STATEMENT(782);\n        N_STATEMENT(783);\n        N_STATEMENT(784);\n        N_STATEMENT(785);\n        N_STATEMENT(786);\n        N_STATEMENT(787);\n        N_STATEMENT(788);\n        N_STATEMENT(789);\n        N_STATEMENT(790);\n        N_STATEMENT(791);\n        N_STATEMENT(792);\n        N_STATEMENT(793);\n        N_STATEMENT(794);\n        N_STATEMENT(795);\n        N_STATEMENT(796);\n        N_STATEMENT(797);\n        N_STATEMENT(798);\n        N_STATEMENT(799);\n        N_STATEMENT(800);\n        N_STATEMENT(801);\n        N_STATEMENT(802);\n        N_STATEMENT(803);\n        N_STATEMENT(804);\n        N_STATEMENT(805);\n        N_STATEMENT(806);\n        N_STATEMENT(807);\n        N_STATEMENT(808);\n        N_STATEMENT(809);\n        N_STATEMENT(810);\n        N_STATEMENT(811);\n        N_STATEMENT(812);\n        N_STATEMENT(813);\n        N_STATEMENT(814);\n        N_STATEMENT(815);\n        N_STATEMENT(816);\n        N_STATEMENT(817);\n        N_STATEMENT(818);\n        N_STATEMENT(819);\n        N_STATEMENT(820);\n        N_STATEMENT(821);\n        N_STATEMENT(822);\n        N_STATEMENT(823);\n        N_STATEMENT(824);\n        N_STATEMENT(825);\n        N_STATEMENT(826);\n        N_STATEMENT(827);\n        N_STATEMENT(828);\n        N_STATEMENT(829);\n        N_STATEMENT(830);\n        N_STATEMENT(831);\n        N_STATEMENT(832);\n        N_STATEMENT(833);\n        N_STATEMENT(834);\n        N_STATEMENT(835);\n        N_STATEMENT(836);\n        N_STATEMENT(837);\n        N_STATEMENT(838);\n        N_STATEMENT(839);\n        N_STATEMENT(840);\n        N_STATEMENT(841);\n        N_STATEMENT(842);\n        N_STATEMENT(843);\n        N_STATEMENT(844);\n        N_STATEMENT(845);\n        N_STATEMENT(846);\n        N_STATEMENT(847);\n        N_STATEMENT(848);\n        N_STATEMENT(849);\n        N_STATEMENT(850);\n        N_STATEMENT(851);\n        N_STATEMENT(852);\n        N_STATEMENT(853);\n        N_STATEMENT(854);\n        N_STATEMENT(855);\n        N_STATEMENT(856);\n        N_STATEMENT(857);\n        N_STATEMENT(858);\n        N_STATEMENT(859);\n        N_STATEMENT(860);\n        N_STATEMENT(861);\n        N_STATEMENT(862);\n        N_STATEMENT(863);\n        N_STATEMENT(864);\n        N_STATEMENT(865);\n        N_STATEMENT(866);\n        N_STATEMENT(867);\n        N_STATEMENT(868);\n        N_STATEMENT(869);\n        N_STATEMENT(870);\n        N_STATEMENT(871);\n        N_STATEMENT(872);\n        N_STATEMENT(873);\n        N_STATEMENT(874);\n        N_STATEMENT(875);\n        N_STATEMENT(876);\n        N_STATEMENT(877);\n        N_STATEMENT(878);\n        N_STATEMENT(879);\n        N_STATEMENT(880);\n        N_STATEMENT(881);\n        N_STATEMENT(882);\n        N_STATEMENT(883);\n        N_STATEMENT(884);\n        N_STATEMENT(885);\n        N_STATEMENT(886);\n        N_STATEMENT(887);\n        N_STATEMENT(888);\n        N_STATEMENT(889);\n        N_STATEMENT(890);\n        N_STATEMENT(891);\n        N_STATEMENT(892);\n        N_STATEMENT(893);\n        N_STATEMENT(894);\n        N_STATEMENT(895);\n        N_STATEMENT(896);\n        N_STATEMENT(897);\n        N_STATEMENT(898);\n        N_STATEMENT(899);\n        N_STATEMENT(900);\n        N_STATEMENT(901);\n        N_STATEMENT(902);\n        N_STATEMENT(903);\n        N_STATEMENT(904);\n        N_STATEMENT(905);\n        N_STATEMENT(906);\n        N_STATEMENT(907);\n        N_STATEMENT(908);\n        N_STATEMENT(909);\n        N_STATEMENT(910);\n        N_STATEMENT(911);\n        N_STATEMENT(912);\n        N_STATEMENT(913);\n        N_STATEMENT(914);\n        N_STATEMENT(915);\n        N_STATEMENT(916);\n        N_STATEMENT(917);\n        N_STATEMENT(918);\n        N_STATEMENT(919);\n        N_STATEMENT(920);\n        N_STATEMENT(921);\n        N_STATEMENT(922);\n        N_STATEMENT(923);\n        N_STATEMENT(924);\n        N_STATEMENT(925);\n        N_STATEMENT(926);\n        N_STATEMENT(927);\n        N_STATEMENT(928);\n        N_STATEMENT(929);\n        N_STATEMENT(930);\n        N_STATEMENT(931);\n        N_STATEMENT(932);\n        N_STATEMENT(933);\n        N_STATEMENT(934);\n        N_STATEMENT(935);\n        N_STATEMENT(936);\n        N_STATEMENT(937);\n        N_STATEMENT(938);\n        N_STATEMENT(939);\n        N_STATEMENT(940);\n        N_STATEMENT(941);\n        N_STATEMENT(942);\n        N_STATEMENT(943);\n        N_STATEMENT(944);\n        N_STATEMENT(945);\n        N_STATEMENT(946);\n        N_STATEMENT(947);\n        N_STATEMENT(948);\n        N_STATEMENT(949);\n        N_STATEMENT(950);\n    }\n    return am_error;          /* NOTREACHED, shut up the compiler */\n}\n\n#endif /* HAVE_USE_DTRACE */\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/beam/erl_nif_api_funcs.h": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2009-2018. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * %CopyrightEnd%\n */\n\n#if !defined(ERL_NIF_API_FUNC_DECL) && !defined(ERL_NIF_API_FUNC_MACRO)\n#  error This file should not be included directly\n#endif\n\n/*\n** WARNING: Add new ERL_NIF_API_FUNC_DECL entries at the bottom of the list\n** to keep compatibility on Windows!!!\n**\n** And don't forget to increase ERL_NIF_MINOR_VERSION in erl_nif.h\n** when adding functions to the API.\n*/\n#ifdef ERL_NIF_API_FUNC_DECL\nERL_NIF_API_FUNC_DECL(void*,enif_priv_data,(ErlNifEnv*));\nERL_NIF_API_FUNC_DECL(void*,enif_alloc,(size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_free,(void* ptr));\nERL_NIF_API_FUNC_DECL(int,enif_is_atom,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_binary,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_ref,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_inspect_binary,(ErlNifEnv*, ERL_NIF_TERM bin_term, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_alloc_binary,(size_t size, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_realloc_binary,(ErlNifBinary* bin, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_release_binary,(ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(int,enif_get_int,(ErlNifEnv*, ERL_NIF_TERM term, int* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_ulong,(ErlNifEnv*, ERL_NIF_TERM term, unsigned long* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_double,(ErlNifEnv*, ERL_NIF_TERM term, double* dp));\nERL_NIF_API_FUNC_DECL(int,enif_get_list_cell,(ErlNifEnv* env, ERL_NIF_TERM term, ERL_NIF_TERM* head, ERL_NIF_TERM* tail));\nERL_NIF_API_FUNC_DECL(int,enif_get_tuple,(ErlNifEnv* env, ERL_NIF_TERM tpl, int* arity, const ERL_NIF_TERM** array));\nERL_NIF_API_FUNC_DECL(int,enif_is_identical,(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs));\nERL_NIF_API_FUNC_DECL(int,enif_compare,(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_binary,(ErlNifEnv* env, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_badarg,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_int,(ErlNifEnv* env, int i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_ulong,(ErlNifEnv* env, unsigned long i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_double,(ErlNifEnv* env, double d));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_atom,(ErlNifEnv* env, const char* name));\nERL_NIF_API_FUNC_DECL(int,enif_make_existing_atom,(ErlNifEnv* env, const char* name, ERL_NIF_TERM* atom, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_tuple,(ErlNifEnv* env, unsigned cnt, ...));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list,(ErlNifEnv* env, unsigned cnt, ...));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list_cell,(ErlNifEnv* env, ERL_NIF_TERM car, ERL_NIF_TERM cdr));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_string,(ErlNifEnv* env, const char* string, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_ref,(ErlNifEnv* env));\n\nERL_NIF_API_FUNC_DECL(ErlNifMutex*,enif_mutex_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_destroy,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(int,enif_mutex_trylock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_lock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(void,enif_mutex_unlock,(ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(ErlNifCond*,enif_cond_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_cond_destroy,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_signal,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_broadcast,(ErlNifCond *cnd));\nERL_NIF_API_FUNC_DECL(void,enif_cond_wait,(ErlNifCond *cnd, ErlNifMutex *mtx));\nERL_NIF_API_FUNC_DECL(ErlNifRWLock*,enif_rwlock_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_destroy,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_rwlock_tryrlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_runlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_rwlock_tryrwlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rwlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(void,enif_rwlock_rwunlock,(ErlNifRWLock *rwlck));\nERL_NIF_API_FUNC_DECL(int,enif_tsd_key_create,(char *name, ErlNifTSDKey *key));\nERL_NIF_API_FUNC_DECL(void,enif_tsd_key_destroy,(ErlNifTSDKey key));\nERL_NIF_API_FUNC_DECL(void,enif_tsd_set,(ErlNifTSDKey key, void *data));\nERL_NIF_API_FUNC_DECL(void*,enif_tsd_get,(ErlNifTSDKey key));\nERL_NIF_API_FUNC_DECL(ErlNifThreadOpts*,enif_thread_opts_create,(char *name));\nERL_NIF_API_FUNC_DECL(void,enif_thread_opts_destroy,(ErlNifThreadOpts *opts));\nERL_NIF_API_FUNC_DECL(int,enif_thread_create,(char *name,ErlNifTid *tid,void * (*func)(void *),void *args,ErlNifThreadOpts *opts));\nERL_NIF_API_FUNC_DECL(ErlNifTid,enif_thread_self,(void));\nERL_NIF_API_FUNC_DECL(int,enif_equal_tids,(ErlNifTid tid1, ErlNifTid tid2));\nERL_NIF_API_FUNC_DECL(void,enif_thread_exit,(void *resp));\nERL_NIF_API_FUNC_DECL(int,enif_thread_join,(ErlNifTid, void **respp));\n\nERL_NIF_API_FUNC_DECL(void*,enif_realloc,(void* ptr, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_system_info,(ErlNifSysInfo *sip, size_t si_size));\nERL_NIF_API_FUNC_DECL(int,enif_fprintf,(FILE* filep, const char *format, ...));\nERL_NIF_API_FUNC_DECL(int,enif_inspect_iolist_as_binary,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifBinary* bin));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_sub_binary,(ErlNifEnv*, ERL_NIF_TERM bin_term, size_t pos, size_t size));\nERL_NIF_API_FUNC_DECL(int,enif_get_string,(ErlNifEnv*, ERL_NIF_TERM list, char* buf, unsigned len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_get_atom,(ErlNifEnv*, ERL_NIF_TERM atom, char* buf, unsigned len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_is_fun,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_pid,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_port,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_get_uint,(ErlNifEnv*, ERL_NIF_TERM term, unsigned* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_long,(ErlNifEnv*, ERL_NIF_TERM term, long* ip));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_uint,(ErlNifEnv*, unsigned i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_long,(ErlNifEnv*, long i));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_tuple_from_array,(ErlNifEnv*, const ERL_NIF_TERM arr[], unsigned cnt));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_list_from_array,(ErlNifEnv*, const ERL_NIF_TERM arr[], unsigned cnt));\nERL_NIF_API_FUNC_DECL(int,enif_is_empty_list,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(ErlNifResourceType*,enif_open_resource_type,(ErlNifEnv*, const char* module_str, const char* name_str, void (*dtor)(ErlNifEnv*,void *), ErlNifResourceFlags flags, ErlNifResourceFlags* tried));\nERL_NIF_API_FUNC_DECL(void*,enif_alloc_resource,(ErlNifResourceType* type, size_t size));\nERL_NIF_API_FUNC_DECL(void,enif_release_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_resource,(ErlNifEnv*, void* obj));\nERL_NIF_API_FUNC_DECL(int,enif_get_resource,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifResourceType* type, void** objp));\nERL_NIF_API_FUNC_DECL(size_t,enif_sizeof_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(unsigned char*,enif_make_new_binary,(ErlNifEnv*,size_t size,ERL_NIF_TERM* termp));\nERL_NIF_API_FUNC_DECL(int,enif_is_list,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_is_tuple,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_get_atom_length,(ErlNifEnv*, ERL_NIF_TERM atom, unsigned* len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(int,enif_get_list_length,(ErlNifEnv* env, ERL_NIF_TERM term, unsigned* len));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_make_atom_len,(ErlNifEnv* env, const char* name, size_t len));\nERL_NIF_API_FUNC_DECL(int, enif_make_existing_atom_len,(ErlNifEnv* env, const char* name, size_t len, ERL_NIF_TERM* atom, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_string_len,(ErlNifEnv* env, const char* string, size_t len, ErlNifCharEncoding));\nERL_NIF_API_FUNC_DECL(ErlNifEnv*,enif_alloc_env,(void));\nERL_NIF_API_FUNC_DECL(void,enif_free_env,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(void,enif_clear_env,(ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(int,enif_send,(ErlNifEnv* env, const ErlNifPid* to_pid, ErlNifEnv* msg_env, ERL_NIF_TERM msg));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_copy,(ErlNifEnv* dst_env, ERL_NIF_TERM src_term));\nERL_NIF_API_FUNC_DECL(ErlNifPid*,enif_self,(ErlNifEnv* caller_env, ErlNifPid* pid));\nERL_NIF_API_FUNC_DECL(int,enif_get_local_pid,(ErlNifEnv* env, ERL_NIF_TERM, ErlNifPid* pid));\nERL_NIF_API_FUNC_DECL(void,enif_keep_resource,(void* obj));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_resource_binary,(ErlNifEnv*,void* obj,const void* data, size_t size));\n#if SIZEOF_LONG != 8\nERL_NIF_API_FUNC_DECL(int,enif_get_int64,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifSInt64* ip));\nERL_NIF_API_FUNC_DECL(int,enif_get_uint64,(ErlNifEnv*, ERL_NIF_TERM term, ErlNifUInt64* ip));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_int64,(ErlNifEnv*, ErlNifSInt64));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_make_uint64,(ErlNifEnv*, ErlNifUInt64));\n#endif\nERL_NIF_API_FUNC_DECL(int,enif_is_exception,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int,enif_make_reverse_list,(ErlNifEnv*, ERL_NIF_TERM term, ERL_NIF_TERM *list));\nERL_NIF_API_FUNC_DECL(int,enif_is_number,(ErlNifEnv*, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(void*,enif_dlopen,(const char* lib, void (*err_handler)(void*,const char*), void* err_arg));\nERL_NIF_API_FUNC_DECL(void*,enif_dlsym,(void* handle, const char* symbol, void (*err_handler)(void*,const char*), void* err_arg));\nERL_NIF_API_FUNC_DECL(int,enif_consume_timeslice,(ErlNifEnv*, int percent));\nERL_NIF_API_FUNC_DECL(int, enif_is_map, (ErlNifEnv* env, ERL_NIF_TERM term));\nERL_NIF_API_FUNC_DECL(int, enif_get_map_size, (ErlNifEnv* env, ERL_NIF_TERM term, size_t *size));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_make_new_map, (ErlNifEnv* env));\nERL_NIF_API_FUNC_DECL(int, enif_make_map_put, (ErlNifEnv* env, ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM value, ERL_NIF_TERM* map_out));\nERL_NIF_API_FUNC_DECL(int, enif_get_map_value, (ErlNifEnv* env, ERL_NIF_TERM map, ERL_NIF_TERM key, ERL_NIF_TERM* value));\nERL_NIF_API_FUNC_DECL(int, enif_make_map_update, (ErlNifEnv* env, ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM value, ERL_NIF_TERM* map_out));\nERL_NIF_API_FUNC_DECL(int, enif_make_map_remove, (ErlNifEnv* env, ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM* map_out));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_create, (ErlNifEnv *env, ERL_NIF_TERM map, ErlNifMapIterator *iter, ErlNifMapIteratorEntry entry));\nERL_NIF_API_FUNC_DECL(void, enif_map_iterator_destroy, (ErlNifEnv *env, ErlNifMapIterator *iter));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_is_head, (ErlNifEnv *env, ErlNifMapIterator *iter));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_is_tail, (ErlNifEnv *env, ErlNifMapIterator *iter));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_next, (ErlNifEnv *env, ErlNifMapIterator *iter));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_prev, (ErlNifEnv *env, ErlNifMapIterator *iter));\nERL_NIF_API_FUNC_DECL(int, enif_map_iterator_get_pair, (ErlNifEnv *env, ErlNifMapIterator *iter, ERL_NIF_TERM *key, ERL_NIF_TERM *value));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM,enif_schedule_nif,(ErlNifEnv*,const char*,int,ERL_NIF_TERM (*)(ErlNifEnv*,int,const ERL_NIF_TERM[]),int,const ERL_NIF_TERM[]));\nERL_NIF_API_FUNC_DECL(int, enif_has_pending_exception, (ErlNifEnv *env, ERL_NIF_TERM* reason));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_raise_exception, (ErlNifEnv *env, ERL_NIF_TERM reason));\nERL_NIF_API_FUNC_DECL(int,enif_getenv,(const char* key, char* value, size_t* value_size));\nERL_NIF_API_FUNC_DECL(ErlNifTime, enif_monotonic_time, (ErlNifTimeUnit));\nERL_NIF_API_FUNC_DECL(ErlNifTime, enif_time_offset, (ErlNifTimeUnit));\nERL_NIF_API_FUNC_DECL(ErlNifTime, enif_convert_time_unit, (ErlNifTime, ErlNifTimeUnit, ErlNifTimeUnit));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_now_time, (ErlNifEnv *env));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_cpu_time, (ErlNifEnv *env));\nERL_NIF_API_FUNC_DECL(ERL_NIF_TERM, enif_make_unique_integer, (ErlNifEnv *env, ErlNifUniqueInteger properties));\nERL_NIF_API_FUNC_DECL(int, enif_is_current_process_alive, (ErlNifEnv *env));\nERL_NIF_API_FUNC_DECL(int, enif_is_process_alive, (ErlNifEnv *env, ErlNifPid *pid));\nERL_NIF_API_FUNC_DECL(int, enif_is_port_alive, (ErlNifEnv *env, ErlNifPort *port_id));\nERL_NIF_API_FUNC_DECL(int, enif_get_local_port, (ErlNifEnv* env, ERL_NIF_TERM, ErlNifPort* port_id));\nERL_NIF_API_FUNC_DECL(int, enif_term_to_binary, (ErlNifEnv *env, ERL_NIF_TERM term, ErlNifBinary *bin));\nERL_NIF_API_FUNC_DECL(size_t, enif_binary_to_term, (ErlNifEnv *env, const unsigned char* data, size_t sz, ERL_NIF_TERM *term, unsigned int opts));\nERL_NIF_API_FUNC_DECL(int, enif_port_command, (ErlNifEnv *env, const ErlNifPort* to_port, ErlNifEnv *msg_env, ERL_NIF_TERM msg));\nERL_NIF_API_FUNC_DECL(int,enif_thread_type,(void));\nERL_NIF_API_FUNC_DECL(int,enif_snprintf,(char * buffer, size_t size, const char *format, ...));\nERL_NIF_API_FUNC_DECL(int,enif_select,(ErlNifEnv* env, ErlNifEvent e, enum ErlNifSelectFlags flags, void* obj, const ErlNifPid* pid, ERL_NIF_TERM ref));\nERL_NIF_API_FUNC_DECL(ErlNifResourceType*,enif_open_resource_type_x,(ErlNifEnv*, const char* name_str, const ErlNifResourceTypeInit*, ErlNifResourceFlags flags, ErlNifResourceFlags* tried));\nERL_NIF_API_FUNC_DECL(int, enif_monitor_process,(ErlNifEnv*,void* obj,const ErlNifPid*,ErlNifMonitor *monitor));\nERL_NIF_API_FUNC_DECL(int, enif_demonitor_process,(ErlNifEnv*,void* obj,const ErlNifMonitor *monitor));\nERL_NIF_API_FUNC_DECL(int, enif_compare_monitors,(const ErlNifMonitor*,const ErlNifMonitor*));\nERL_NIF_API_FUNC_DECL(ErlNifUInt64,enif_hash,(ErlNifHash type, ERL_NIF_TERM term, ErlNifUInt64 salt));\nERL_NIF_API_FUNC_DECL(int, enif_whereis_pid, (ErlNifEnv *env, ERL_NIF_TERM name, ErlNifPid *pid));\nERL_NIF_API_FUNC_DECL(int, enif_whereis_port, (ErlNifEnv *env, ERL_NIF_TERM name, ErlNifPort *port));\n\nERL_NIF_API_FUNC_DECL(ErlNifIOQueue *,enif_ioq_create,(ErlNifIOQueueOpts opts));\nERL_NIF_API_FUNC_DECL(void,enif_ioq_destroy,(ErlNifIOQueue *q));\n\nERL_NIF_API_FUNC_DECL(int,enif_ioq_enq_binary,(ErlNifIOQueue *q, ErlNifBinary *bin, size_t skip));\nERL_NIF_API_FUNC_DECL(int,enif_ioq_enqv,(ErlNifIOQueue *q, ErlNifIOVec *iov, size_t skip));\n\nERL_NIF_API_FUNC_DECL(size_t,enif_ioq_size,(ErlNifIOQueue *q));\nERL_NIF_API_FUNC_DECL(int,enif_ioq_deq,(ErlNifIOQueue *q, size_t count, size_t *size));\n\nERL_NIF_API_FUNC_DECL(SysIOVec*,enif_ioq_peek,(ErlNifIOQueue *q, int *iovlen));\n\nERL_NIF_API_FUNC_DECL(int,enif_inspect_iovec,(ErlNifEnv *env, size_t max_length, ERL_NIF_TERM iovec_term, ERL_NIF_TERM *tail, ErlNifIOVec **iovec));\nERL_NIF_API_FUNC_DECL(void,enif_free_iovec,(ErlNifIOVec *iov));\n\nERL_NIF_API_FUNC_DECL(int,enif_ioq_peek_head,(ErlNifEnv *env, ErlNifIOQueue *q, size_t *size, ERL_NIF_TERM *head));\n\nERL_NIF_API_FUNC_DECL(char*,enif_mutex_name,(ErlNifMutex*));\nERL_NIF_API_FUNC_DECL(char*,enif_cond_name,(ErlNifCond*));\nERL_NIF_API_FUNC_DECL(char*,enif_rwlock_name,(ErlNifRWLock*));\nERL_NIF_API_FUNC_DECL(char*,enif_thread_name,(ErlNifTid));\n\nERL_NIF_API_FUNC_DECL(int,enif_vfprintf,(FILE*, const char *fmt, va_list));\nERL_NIF_API_FUNC_DECL(int,enif_vsnprintf,(char*, size_t, const char *fmt, va_list));\n\nERL_NIF_API_FUNC_DECL(int,enif_make_map_from_arrays,(ErlNifEnv *env, ERL_NIF_TERM keys[], ERL_NIF_TERM values[], size_t cnt, ERL_NIF_TERM *map_out));\n\n/*\n** ADD NEW ENTRIES HERE (before this comment) !!!\n*/\n#endif /* ERL_NIF_API_FUNC_DECL */\n\n/*\n** Please keep the ERL_NIF_API_FUNC_MACRO list below in the same order\n** as the ERL_NIF_API_FUNC_DECL list above\n*/\n#ifdef ERL_NIF_API_FUNC_MACRO\n#  define enif_priv_data ERL_NIF_API_FUNC_MACRO(enif_priv_data)\n#  define enif_alloc ERL_NIF_API_FUNC_MACRO(enif_alloc)\n#  define enif_free ERL_NIF_API_FUNC_MACRO(enif_free)\n#  define enif_is_atom ERL_NIF_API_FUNC_MACRO(enif_is_atom)\n#  define enif_is_binary ERL_NIF_API_FUNC_MACRO(enif_is_binary)\n#  define enif_is_ref ERL_NIF_API_FUNC_MACRO(enif_is_ref)\n#  define enif_inspect_binary ERL_NIF_API_FUNC_MACRO(enif_inspect_binary)\n#  define enif_alloc_binary ERL_NIF_API_FUNC_MACRO(enif_alloc_binary)\n#  define enif_realloc_binary ERL_NIF_API_FUNC_MACRO(enif_realloc_binary)\n#  define enif_release_binary ERL_NIF_API_FUNC_MACRO(enif_release_binary)\n#  define enif_get_int ERL_NIF_API_FUNC_MACRO(enif_get_int)\n#  define enif_get_ulong ERL_NIF_API_FUNC_MACRO(enif_get_ulong)\n#  define enif_get_double ERL_NIF_API_FUNC_MACRO(enif_get_double)\n#  define enif_get_tuple ERL_NIF_API_FUNC_MACRO(enif_get_tuple)\n#  define enif_get_list_cell ERL_NIF_API_FUNC_MACRO(enif_get_list_cell)\n#  define enif_is_identical ERL_NIF_API_FUNC_MACRO(enif_is_identical)\n#  define enif_compare ERL_NIF_API_FUNC_MACRO(enif_compare)\n\n#  define enif_make_binary ERL_NIF_API_FUNC_MACRO(enif_make_binary)\n#  define enif_make_badarg ERL_NIF_API_FUNC_MACRO(enif_make_badarg)\n#  define enif_make_int ERL_NIF_API_FUNC_MACRO(enif_make_int)\n#  define enif_make_ulong ERL_NIF_API_FUNC_MACRO(enif_make_ulong)\n#  define enif_make_double ERL_NIF_API_FUNC_MACRO(enif_make_double)\n#  define enif_make_atom ERL_NIF_API_FUNC_MACRO(enif_make_atom)\n#  define enif_make_existing_atom ERL_NIF_API_FUNC_MACRO(enif_make_existing_atom)\n#  define enif_make_tuple ERL_NIF_API_FUNC_MACRO(enif_make_tuple)\n#  define enif_make_list ERL_NIF_API_FUNC_MACRO(enif_make_list)\n#  define enif_make_list_cell ERL_NIF_API_FUNC_MACRO(enif_make_list_cell)\n#  define enif_make_string ERL_NIF_API_FUNC_MACRO(enif_make_string)\n#  define enif_make_ref ERL_NIF_API_FUNC_MACRO(enif_make_ref)\n\n#  define enif_mutex_create ERL_NIF_API_FUNC_MACRO(enif_mutex_create) \n#  define enif_mutex_destroy ERL_NIF_API_FUNC_MACRO(enif_mutex_destroy) \n#  define enif_mutex_trylock ERL_NIF_API_FUNC_MACRO(enif_mutex_trylock) \n#  define enif_mutex_lock ERL_NIF_API_FUNC_MACRO(enif_mutex_lock) \n#  define enif_mutex_unlock ERL_NIF_API_FUNC_MACRO(enif_mutex_unlock) \n#  define enif_cond_create ERL_NIF_API_FUNC_MACRO(enif_cond_create) \n#  define enif_cond_destroy ERL_NIF_API_FUNC_MACRO(enif_cond_destroy) \n#  define enif_cond_signal ERL_NIF_API_FUNC_MACRO(enif_cond_signal) \n#  define enif_cond_broadcast ERL_NIF_API_FUNC_MACRO(enif_cond_broadcast) \n#  define enif_cond_wait ERL_NIF_API_FUNC_MACRO(enif_cond_wait) \n#  define enif_rwlock_create ERL_NIF_API_FUNC_MACRO(enif_rwlock_create) \n#  define enif_rwlock_destroy ERL_NIF_API_FUNC_MACRO(enif_rwlock_destroy) \n#  define enif_rwlock_tryrlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_tryrlock) \n#  define enif_rwlock_rlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rlock) \n#  define enif_rwlock_runlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_runlock) \n#  define enif_rwlock_tryrwlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_tryrwlock) \n#  define enif_rwlock_rwlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rwlock) \n#  define enif_rwlock_rwunlock ERL_NIF_API_FUNC_MACRO(enif_rwlock_rwunlock) \n#  define enif_tsd_key_create ERL_NIF_API_FUNC_MACRO(enif_tsd_key_create) \n#  define enif_tsd_key_destroy ERL_NIF_API_FUNC_MACRO(enif_tsd_key_destroy) \n#  define enif_tsd_set ERL_NIF_API_FUNC_MACRO(enif_tsd_set) \n#  define enif_tsd_get ERL_NIF_API_FUNC_MACRO(enif_tsd_get) \n#  define enif_thread_opts_create ERL_NIF_API_FUNC_MACRO(enif_thread_opts_create) \n#  define enif_thread_opts_destroy ERL_NIF_API_FUNC_MACRO(enif_thread_opts_destroy) \n#  define enif_thread_create ERL_NIF_API_FUNC_MACRO(enif_thread_create) \n#  define enif_thread_self ERL_NIF_API_FUNC_MACRO(enif_thread_self) \n#  define enif_equal_tids ERL_NIF_API_FUNC_MACRO(enif_equal_tids) \n#  define enif_thread_exit ERL_NIF_API_FUNC_MACRO(enif_thread_exit) \n#  define enif_thread_join ERL_NIF_API_FUNC_MACRO(enif_thread_join) \n\n#  define enif_realloc ERL_NIF_API_FUNC_MACRO(enif_realloc) \n#  define enif_system_info ERL_NIF_API_FUNC_MACRO(enif_system_info) \n#  define enif_fprintf ERL_NIF_API_FUNC_MACRO(enif_fprintf) \n#  define enif_inspect_iolist_as_binary ERL_NIF_API_FUNC_MACRO(enif_inspect_iolist_as_binary)\n#  define enif_make_sub_binary ERL_NIF_API_FUNC_MACRO(enif_make_sub_binary)\n#  define enif_get_string ERL_NIF_API_FUNC_MACRO(enif_get_string)\n#  define enif_get_atom ERL_NIF_API_FUNC_MACRO(enif_get_atom)\n#  define enif_is_fun ERL_NIF_API_FUNC_MACRO(enif_is_fun)\n#  define enif_is_pid ERL_NIF_API_FUNC_MACRO(enif_is_pid)\n#  define enif_is_port ERL_NIF_API_FUNC_MACRO(enif_is_port)\n#  define enif_get_uint ERL_NIF_API_FUNC_MACRO(enif_get_uint)\n#  define enif_get_long ERL_NIF_API_FUNC_MACRO(enif_get_long)\n#  define enif_make_uint ERL_NIF_API_FUNC_MACRO(enif_make_uint)\n#  define enif_make_long ERL_NIF_API_FUNC_MACRO(enif_make_long)\n#  define enif_make_tuple_from_array ERL_NIF_API_FUNC_MACRO(enif_make_tuple_from_array)\n#  define enif_make_list_from_array ERL_NIF_API_FUNC_MACRO(enif_make_list_from_array)\n#  define enif_is_empty_list ERL_NIF_API_FUNC_MACRO(enif_is_empty_list)\n#  define enif_open_resource_type ERL_NIF_API_FUNC_MACRO(enif_open_resource_type)\n#  define enif_alloc_resource ERL_NIF_API_FUNC_MACRO(enif_alloc_resource)\n#  define enif_release_resource ERL_NIF_API_FUNC_MACRO(enif_release_resource)\n#  define enif_make_resource ERL_NIF_API_FUNC_MACRO(enif_make_resource)\n#  define enif_get_resource ERL_NIF_API_FUNC_MACRO(enif_get_resource)\n#  define enif_sizeof_resource ERL_NIF_API_FUNC_MACRO(enif_sizeof_resource)\n#  define enif_make_new_binary ERL_NIF_API_FUNC_MACRO(enif_make_new_binary)\n#  define enif_is_list ERL_NIF_API_FUNC_MACRO(enif_is_list)\n#  define enif_is_tuple ERL_NIF_API_FUNC_MACRO(enif_is_tuple)\n#  define enif_get_atom_length ERL_NIF_API_FUNC_MACRO(enif_get_atom_length)\n#  define enif_get_list_length ERL_NIF_API_FUNC_MACRO(enif_get_list_length)\n#  define enif_make_atom_len ERL_NIF_API_FUNC_MACRO(enif_make_atom_len)\n#  define enif_make_existing_atom_len ERL_NIF_API_FUNC_MACRO(enif_make_existing_atom_len)\n#  define enif_make_string_len ERL_NIF_API_FUNC_MACRO(enif_make_string_len)\n#  define enif_alloc_env ERL_NIF_API_FUNC_MACRO(enif_alloc_env)\n#  define enif_free_env ERL_NIF_API_FUNC_MACRO(enif_free_env)\n#  define enif_clear_env ERL_NIF_API_FUNC_MACRO(enif_clear_env)\n#  define enif_send ERL_NIF_API_FUNC_MACRO(enif_send)\n#  define enif_make_copy ERL_NIF_API_FUNC_MACRO(enif_make_copy)\n#  define enif_self ERL_NIF_API_FUNC_MACRO(enif_self)\n#  define enif_get_local_pid ERL_NIF_API_FUNC_MACRO(enif_get_local_pid)\n#  define enif_keep_resource ERL_NIF_API_FUNC_MACRO(enif_keep_resource)\n#  define enif_make_resource_binary ERL_NIF_API_FUNC_MACRO(enif_make_resource_binary)\n#if  SIZEOF_LONG != 8\n#  define enif_get_int64 ERL_NIF_API_FUNC_MACRO(enif_get_int64)\n#  define enif_get_uint64 ERL_NIF_API_FUNC_MACRO(enif_get_uint64)\n#  define enif_make_int64 ERL_NIF_API_FUNC_MACRO(enif_make_int64)\n#  define enif_make_uint64 ERL_NIF_API_FUNC_MACRO(enif_make_uint64)\n#endif\n#  define enif_is_exception ERL_NIF_API_FUNC_MACRO(enif_is_exception)\n#  define enif_make_reverse_list ERL_NIF_API_FUNC_MACRO(enif_make_reverse_list)\n#  define enif_is_number ERL_NIF_API_FUNC_MACRO(enif_is_number)\n#  define enif_dlopen ERL_NIF_API_FUNC_MACRO(enif_dlopen)\n#  define enif_dlsym ERL_NIF_API_FUNC_MACRO(enif_dlsym)\n#  define enif_consume_timeslice ERL_NIF_API_FUNC_MACRO(enif_consume_timeslice)\n#  define enif_is_map ERL_NIF_API_FUNC_MACRO(enif_is_map)\n#  define enif_get_map_size ERL_NIF_API_FUNC_MACRO(enif_get_map_size)\n#  define enif_make_new_map ERL_NIF_API_FUNC_MACRO(enif_make_new_map)\n#  define enif_make_map_put ERL_NIF_API_FUNC_MACRO(enif_make_map_put)\n#  define enif_get_map_value ERL_NIF_API_FUNC_MACRO(enif_get_map_value)\n#  define enif_make_map_update ERL_NIF_API_FUNC_MACRO(enif_make_map_update)\n#  define enif_make_map_remove ERL_NIF_API_FUNC_MACRO(enif_make_map_remove)\n#  define enif_map_iterator_create ERL_NIF_API_FUNC_MACRO(enif_map_iterator_create)\n#  define enif_map_iterator_destroy ERL_NIF_API_FUNC_MACRO(enif_map_iterator_destroy)\n#  define enif_map_iterator_is_head ERL_NIF_API_FUNC_MACRO(enif_map_iterator_is_head)\n#  define enif_map_iterator_is_tail ERL_NIF_API_FUNC_MACRO(enif_map_iterator_is_tail)\n#  define enif_map_iterator_next ERL_NIF_API_FUNC_MACRO(enif_map_iterator_next)\n#  define enif_map_iterator_prev ERL_NIF_API_FUNC_MACRO(enif_map_iterator_prev)\n#  define enif_map_iterator_get_pair ERL_NIF_API_FUNC_MACRO(enif_map_iterator_get_pair)\n#  define enif_schedule_nif ERL_NIF_API_FUNC_MACRO(enif_schedule_nif)\n#  define enif_has_pending_exception ERL_NIF_API_FUNC_MACRO(enif_has_pending_exception)\n#  define enif_raise_exception ERL_NIF_API_FUNC_MACRO(enif_raise_exception)\n#  define enif_getenv ERL_NIF_API_FUNC_MACRO(enif_getenv)\n#  define enif_monotonic_time ERL_NIF_API_FUNC_MACRO(enif_monotonic_time)\n#  define enif_time_offset ERL_NIF_API_FUNC_MACRO(enif_time_offset)\n#  define enif_convert_time_unit ERL_NIF_API_FUNC_MACRO(enif_convert_time_unit)\n#  define enif_now_time ERL_NIF_API_FUNC_MACRO(enif_now_time)\n#  define enif_cpu_time ERL_NIF_API_FUNC_MACRO(enif_cpu_time)\n#  define enif_make_unique_integer ERL_NIF_API_FUNC_MACRO(enif_make_unique_integer)\n#  define enif_is_current_process_alive ERL_NIF_API_FUNC_MACRO(enif_is_current_process_alive)\n#  define enif_is_process_alive ERL_NIF_API_FUNC_MACRO(enif_is_process_alive)\n#  define enif_is_port_alive ERL_NIF_API_FUNC_MACRO(enif_is_port_alive)\n#  define enif_get_local_port ERL_NIF_API_FUNC_MACRO(enif_get_local_port)\n#  define enif_term_to_binary ERL_NIF_API_FUNC_MACRO(enif_term_to_binary)\n#  define enif_binary_to_term ERL_NIF_API_FUNC_MACRO(enif_binary_to_term)\n#  define enif_port_command ERL_NIF_API_FUNC_MACRO(enif_port_command)\n#  define enif_thread_type ERL_NIF_API_FUNC_MACRO(enif_thread_type)\n#  define enif_snprintf ERL_NIF_API_FUNC_MACRO(enif_snprintf)\n#  define enif_select ERL_NIF_API_FUNC_MACRO(enif_select)\n#  define enif_open_resource_type_x ERL_NIF_API_FUNC_MACRO(enif_open_resource_type_x)\n#  define enif_monitor_process ERL_NIF_API_FUNC_MACRO(enif_monitor_process)\n#  define enif_demonitor_process ERL_NIF_API_FUNC_MACRO(enif_demonitor_process)\n#  define enif_compare_monitors ERL_NIF_API_FUNC_MACRO(enif_compare_monitors)\n#  define enif_hash ERL_NIF_API_FUNC_MACRO(enif_hash)\n#  define enif_whereis_pid ERL_NIF_API_FUNC_MACRO(enif_whereis_pid)\n#  define enif_whereis_port ERL_NIF_API_FUNC_MACRO(enif_whereis_port)\n#  define enif_ioq_create ERL_NIF_API_FUNC_MACRO(enif_ioq_create)\n#  define enif_ioq_destroy ERL_NIF_API_FUNC_MACRO(enif_ioq_destroy)\n#  define enif_ioq_enq ERL_NIF_API_FUNC_MACRO(enif_ioq_enq)\n#  define enif_ioq_enq_binary ERL_NIF_API_FUNC_MACRO(enif_ioq_enq_binary)\n#  define enif_ioq_enqv ERL_NIF_API_FUNC_MACRO(enif_ioq_enqv)\n#  define enif_ioq_size ERL_NIF_API_FUNC_MACRO(enif_ioq_size)\n#  define enif_ioq_deq ERL_NIF_API_FUNC_MACRO(enif_ioq_deq)\n#  define enif_ioq_peek ERL_NIF_API_FUNC_MACRO(enif_ioq_peek)\n#  define enif_inspect_iovec ERL_NIF_API_FUNC_MACRO(enif_inspect_iovec)\n#  define enif_free_iovec ERL_NIF_API_FUNC_MACRO(enif_free_iovec)\n#  define enif_ioq_peek_head ERL_NIF_API_FUNC_MACRO(enif_ioq_peek_head)\n#  define enif_mutex_name ERL_NIF_API_FUNC_MACRO(enif_mutex_name)\n#  define enif_cond_name ERL_NIF_API_FUNC_MACRO(enif_cond_name)\n#  define enif_rwlock_name ERL_NIF_API_FUNC_MACRO(enif_rwlock_name)\n#  define enif_thread_name ERL_NIF_API_FUNC_MACRO(enif_thread_name)\n#  define enif_vfprintf ERL_NIF_API_FUNC_MACRO(enif_vfprintf)\n#  define enif_vsnprintf ERL_NIF_API_FUNC_MACRO(enif_vsnprintf)\n#  define enif_make_map_from_arrays ERL_NIF_API_FUNC_MACRO(enif_make_map_from_arrays)\n\n/*\n** ADD NEW ENTRIES HERE (before this comment)\n*/\n\n/*\n * Conditional EXPERIMENTAL stuff always last\n * Must be moved up and made unconditional to support binary backward\n * compatibility on Windows.\n */\n#endif  /* ERL_NIF_API_FUNC_MACRO */\n\n\n#if defined(__GNUC__) && !(defined(__WIN32__) || defined(_WIN32) || defined(_WIN32_))\n\n/* Inline functions for compile time type checking of arguments to\n   variadic functions.\n*/\n\n#  define ERL_NIF_INLINE __inline__\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple1(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1)\n{\n    return enif_make_tuple(env, 1, e1);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple2(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2)\n{\n    return enif_make_tuple(env, 2, e1, e2);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple3(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3)\n{\n    return enif_make_tuple(env, 3, e1, e2, e3);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple4(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4)\n{\n    return enif_make_tuple(env, 4, e1, e2, e3, e4);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple5(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5)\n{\n    return enif_make_tuple(env, 5, e1, e2, e3, e4, e5);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple6(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6)\n{\n    return enif_make_tuple(env, 6, e1, e2, e3, e4, e5, e6);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple7(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7)\n{\n    return enif_make_tuple(env, 7, e1, e2, e3, e4, e5, e6, e7);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple8(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7,\n\t\t\t\t\t\t    ERL_NIF_TERM e8)\n{\n    return enif_make_tuple(env, 8, e1, e2, e3, e4, e5, e6, e7, e8);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_tuple9(ErlNifEnv* env,\n\t\t\t\t\t\t    ERL_NIF_TERM e1,\n\t\t\t\t\t\t    ERL_NIF_TERM e2,\n\t\t\t\t\t\t    ERL_NIF_TERM e3,\n\t\t\t\t\t\t    ERL_NIF_TERM e4,\n\t\t\t\t\t\t    ERL_NIF_TERM e5,\n\t\t\t\t\t\t    ERL_NIF_TERM e6,\n\t\t\t\t\t\t    ERL_NIF_TERM e7,\n\t\t\t\t\t\t    ERL_NIF_TERM e8,\n\t\t\t\t\t\t    ERL_NIF_TERM e9)\n{\n    return enif_make_tuple(env, 9, e1, e2, e3, e4, e5, e6, e7, e8, e9);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list1(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1)\n{\n    return enif_make_list(env, 1, e1);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list2(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2)\n{\n    return enif_make_list(env, 2, e1, e2);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list3(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3)\n{\n    return enif_make_list(env, 3, e1, e2, e3);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list4(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4)\n{\n    return enif_make_list(env, 4, e1, e2, e3, e4);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list5(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5)\n{\n    return enif_make_list(env, 5, e1, e2, e3, e4, e5);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list6(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6)\n{\n    return enif_make_list(env, 6, e1, e2, e3, e4, e5, e6);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list7(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7)\n{\n    return enif_make_list(env, 7, e1, e2, e3, e4, e5, e6, e7);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list8(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7,\n\t\t\t\t\t\t   ERL_NIF_TERM e8)\n{\n    return enif_make_list(env, 8, e1, e2, e3, e4, e5, e6, e7, e8);\n}\n\nstatic ERL_NIF_INLINE ERL_NIF_TERM enif_make_list9(ErlNifEnv* env,\n\t\t\t\t\t\t   ERL_NIF_TERM e1,\n\t\t\t\t\t\t   ERL_NIF_TERM e2,\n\t\t\t\t\t\t   ERL_NIF_TERM e3,\n\t\t\t\t\t\t   ERL_NIF_TERM e4,\n\t\t\t\t\t\t   ERL_NIF_TERM e5,\n\t\t\t\t\t\t   ERL_NIF_TERM e6,\n\t\t\t\t\t\t   ERL_NIF_TERM e7,\n\t\t\t\t\t\t   ERL_NIF_TERM e8,\n\t\t\t\t\t\t   ERL_NIF_TERM e9)\n{\n    return enif_make_list(env, 9, e1, e2, e3, e4, e5, e6, e7, e8, e9);\n}\n\n#  undef ERL_NIF_INLINE\n\n#else /* fallback with macros */\n\n#ifndef enif_make_list1\n#  define enif_make_list1(ENV,E1) enif_make_list(ENV,1,E1)\n#  define enif_make_list2(ENV,E1,E2) enif_make_list(ENV,2,E1,E2)\n#  define enif_make_list3(ENV,E1,E2,E3) enif_make_list(ENV,3,E1,E2,E3)\n#  define enif_make_list4(ENV,E1,E2,E3,E4) enif_make_list(ENV,4,E1,E2,E3,E4)\n#  define enif_make_list5(ENV,E1,E2,E3,E4,E5) enif_make_list(ENV,5,E1,E2,E3,E4,E5)\n#  define enif_make_list6(ENV,E1,E2,E3,E4,E5,E6) enif_make_list(ENV,6,E1,E2,E3,E4,E5,E6)\n#  define enif_make_list7(ENV,E1,E2,E3,E4,E5,E6,E7) enif_make_list(ENV,7,E1,E2,E3,E4,E5,E6,E7)\n#  define enif_make_list8(ENV,E1,E2,E3,E4,E5,E6,E7,E8) enif_make_list(ENV,8,E1,E2,E3,E4,E5,E6,E7,E8)\n#  define enif_make_list9(ENV,E1,E2,E3,E4,E5,E6,E7,E8,E9) enif_make_list(ENV,9,E1,E2,E3,E4,E5,E6,E7,E8,E9)\n#  define enif_make_tuple1(ENV,E1) enif_make_tuple(ENV,1,E1)\n#  define enif_make_tuple2(ENV,E1,E2) enif_make_tuple(ENV,2,E1,E2)\n#  define enif_make_tuple3(ENV,E1,E2,E3) enif_make_tuple(ENV,3,E1,E2,E3)\n#  define enif_make_tuple4(ENV,E1,E2,E3,E4) enif_make_tuple(ENV,4,E1,E2,E3,E4)\n#  define enif_make_tuple5(ENV,E1,E2,E3,E4,E5) enif_make_tuple(ENV,5,E1,E2,E3,E4,E5)\n#  define enif_make_tuple6(ENV,E1,E2,E3,E4,E5,E6) enif_make_tuple(ENV,6,E1,E2,E3,E4,E5,E6)\n#  define enif_make_tuple7(ENV,E1,E2,E3,E4,E5,E6,E7) enif_make_tuple(ENV,7,E1,E2,E3,E4,E5,E6,E7)\n#  define enif_make_tuple8(ENV,E1,E2,E3,E4,E5,E6,E7,E8) enif_make_tuple(ENV,8,E1,E2,E3,E4,E5,E6,E7,E8)\n#  define enif_make_tuple9(ENV,E1,E2,E3,E4,E5,E6,E7,E8,E9) enif_make_tuple(ENV,9,E1,E2,E3,E4,E5,E6,E7,E8,E9)\n#endif\n\n#endif /* __GNUC__ && !WIN32 */\n\n#ifndef enif_make_pid\n\n#  define enif_make_pid(ENV, PID) ((void)(ENV),(const ERL_NIF_TERM)((PID)->pid))\n\n#if SIZEOF_LONG == 8\n#  define enif_get_int64 enif_get_long\n#  define enif_get_uint64 enif_get_ulong\n#  define enif_make_int64 enif_make_long\n#  define enif_make_uint64 enif_make_ulong\n#endif\n\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/c_src/wxe_gl.cpp": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2008-2016. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * %CopyrightEnd%\n */\n\n#include <stdio.h>\n#include <string.h>\n#ifndef _WIN32\n#include <dlfcn.h>\n#else\n#include <windows.h>\n#endif\n#include \"wxe_impl.h\"\n#include \"wxe_return.h\"\n#include \"wxe_gl.h\"\n\n/* ****************************************************************************\n * Opengl context management *\n * ****************************************************************************/\n\nint erl_gl_initiated = FALSE;\nErlDrvTermData gl_active = 0;\nwxeGLC glc;\n\ntypedef void (*WXE_GL_DISPATCH) (int, char *, ErlDrvPort, ErlDrvTermData, char **, int *);\nWXE_GL_DISPATCH wxe_gl_dispatch;\n\n#ifdef _WIN32\n#define RTLD_LAZY 0\ntypedef HMODULE DL_LIB_P;\nvoid * dlsym(HMODULE Lib, const char *func) {\n  void * funcp;\n  if((funcp = (void *) GetProcAddress(Lib, func)))\n    return funcp;\n  else\n    return (void *) wglGetProcAddress(func);\n}\n\nHMODULE dlopen(const char *path, int unused) {\n  WCHAR * DLL;\n  int len = MultiByteToWideChar(CP_ACP, 0, path, -1, NULL, 0);\n  DLL = (WCHAR *) malloc(len * sizeof(WCHAR));\n  MultiByteToWideChar(CP_ACP, 0, path, -1, DLL, len);\n  HMODULE lib = LoadLibrary(DLL);\n  free(DLL);\n  return lib;\n}\n\nvoid dlclose(HMODULE Lib) {\n  FreeLibrary(Lib);\n}\n#else\ntypedef void * DL_LIB_P;\n#endif\n\nvoid wxe_initOpenGL(wxeReturn *rt, char *bp) {\n  DL_LIB_P LIBhandle;\n  int (*init_opengl)(void *);\n#ifdef _WIN32\n  void * erlCallbacks = &WinDynDriverCallbacks;\n#else \n  void * erlCallbacks = NULL;\n#endif\n  \n  if(erl_gl_initiated == FALSE) {\n    if((LIBhandle = dlopen(bp, RTLD_LAZY))) {\n      *(void **) (&init_opengl) = dlsym(LIBhandle, \"egl_init_opengl\");\n      wxe_gl_dispatch = (WXE_GL_DISPATCH) dlsym(LIBhandle, \"egl_dispatch\");\n      if(init_opengl && wxe_gl_dispatch) {\n\t(*init_opengl)(erlCallbacks);\n\trt->addAtom((char *) \"ok\");\n\trt->add(wxString::FromAscii(\"initiated\"));\n\trt->addTupleCount(2);\n\terl_gl_initiated = TRUE;\n      } else {\n\twxString msg;\n\tmsg.Printf(wxT(\"In library: \"));\n\tmsg += wxString::FromAscii(bp);\n\tmsg += wxT(\" functions: \");\n\tif(!init_opengl) \n\t  msg += wxT(\"egl_init_opengl \");\n\tif(!wxe_gl_dispatch) \n\t  msg += wxT(\"egl_dispatch \");\n\trt->addAtom((char *) \"error\");\n\trt->add(msg);\n\trt->addTupleCount(2);\n      }\n    } else {\n      wxString msg;\n      msg.Printf(wxT(\"Could not load dll: \"));\n      msg += wxString::FromAscii(bp);\n      rt->addAtom((char *) \"error\");\n      rt->add(msg);\n      rt->addTupleCount(2);\n    }\n  } else {\n    rt->addAtom((char *) \"ok\");\n    rt->add(wxString::FromAscii(\"already initilized\"));\n    rt->addTupleCount(2);\n  }\n  rt->send();\n}\n\nvoid setActiveGL(ErlDrvTermData caller, wxGLCanvas *canvas)\n{\n  gl_active = caller;\n  glc[caller] = canvas;\n}\n\nvoid deleteActiveGL(wxGLCanvas *canvas)\n{\n  gl_active = 0;\n  wxeGLC::iterator it;\n  for(it = glc.begin(); it != glc.end(); ++it) {\n    if(it->second == canvas) { \n      it->second = (wxGLCanvas *) 0;\n    }\n  }\n}\n\nvoid gl_dispatch(int op, char *bp,ErlDrvTermData caller,WXEBinRef *bins){\n  if(caller != gl_active) {\n    wxGLCanvas * current = glc[caller];\n    if(current) {\n      if(current != glc[gl_active]) {\n\tcurrent->SetCurrent();\n      }\n      gl_active = caller;\n    } else {\n      ErlDrvTermData rt[] = // Error msg\n\t{ERL_DRV_ATOM, driver_mk_atom((char *) \"_egl_error_\"),\n\t ERL_DRV_INT,  (ErlDrvTermData) op,\n\t ERL_DRV_ATOM, driver_mk_atom((char *) \"no_gl_context\"),\n\t ERL_DRV_TUPLE,3};\n      erl_drv_send_term(WXE_DRV_PORT,caller,rt,8);\n      return ;\n    }\n  };\n  char * bs[3];\n  int bs_sz[3];\n  for(int i=0; i<3; i++) {\n    if(bins[i].from) {\n      bs[i] = bins[i].base;\n      bs_sz[i] = bins[i].size;\n    }\n    else\n      break;\n  }\n  wxe_gl_dispatch(op, bp, WXE_DRV_PORT_HANDLE, caller, bs, bs_sz);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/c_src/egl_impl.cpp": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2011-2016. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * %CopyrightEnd%\n */\n\n#include <stdio.h>\n#include <string.h>\n\n#ifdef _WIN32\n#include <windows.h>\n#endif\n\n#include \"egl_impl.h\"\n\n#define WX_DEF_EXTS\n#include \"gen/gl_fdefs.h\"\n#include \"gen/gl_finit.h\"\n#include \"gen/glu_finit.h\"\n\nvoid init_tess();\nvoid exit_tess();\nint load_gl_functions();\n\n/* ****************************************************************************\n * OPENGL INITIALIZATION\n *****************************************************************************/\n\nint egl_initiated = 0;\n\n#ifdef _WIN32\n#define RTLD_LAZY 0\n#define OPENGL_LIB L\"opengl32.dll\"\n#define OPENGLU_LIB L\"glu32.dll\"\ntypedef HMODULE DL_LIB_P;\ntypedef WCHAR DL_CHAR;\nvoid * dlsym(HMODULE Lib, const char *func) {\n  void * funcp;\n  if((funcp = (void *) GetProcAddress(Lib, func)))\n    return funcp;\n  else\n    return (void *) wglGetProcAddress(func);\n}\n\nHMODULE dlopen(const WCHAR *DLL, int unused) {\n  return LoadLibrary(DLL);\n}\n\nvoid dlclose(HMODULE Lib) {\n  FreeLibrary(Lib);\n}\n\n#else\ntypedef void * DL_LIB_P;\ntypedef char DL_CHAR;\n# ifdef _MACOSX\n#  define OPENGL_LIB \"/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\"\n#  define OPENGLU_LIB \"/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\"\n# else\n#  define OPENGL_LIB \"libGL.so.1\"\n#  define OPENGLU_LIB \"libGLU.so.1\"\n# endif\n#endif\nextern \"C\" {\nDRIVER_INIT(EGL_DRIVER) {\n  return NULL;\n}\n}\n\nint egl_init_opengl(void *erlCallbacks)\n{\n#ifdef _WIN32\n  driver_init((TWinDynDriverCallbacks *) erlCallbacks);\n#endif\n  if(egl_initiated == 0) {\n    if(load_gl_functions()) {\n      init_tess();\n      egl_initiated = 1;\n    }\n  }\n  return 1;\n}\n\nint load_gl_functions() {\n  DL_CHAR * DLName = (DL_CHAR *) OPENGL_LIB;\n  DL_LIB_P LIBhandle = dlopen(DLName, RTLD_LAZY);\n  //fprintf(stderr, \"Loading GL: %s\\r\\n\", (const char*)DLName);\n  void * func = NULL;\n  int i;\n\n  if(LIBhandle) {\n    for(i=0; gl_fns[i].name != NULL; i++) {\n      if((func = dlsym(LIBhandle, gl_fns[i].name))) {\n\t* (void **) (gl_fns[i].func) = func;\n\t// fprintf(stderr, \"GL LOADED %s \\r\\n\", gl_fns[i].name);\n      } else {\n\tif(gl_fns[i].alt != NULL) {\n\t  if((func = dlsym(LIBhandle, gl_fns[i].alt))) {\n\t    * (void **) (gl_fns[i].func) = func;\n\t    // fprintf(stderr, \"GL LOADED %s \\r\\n\", gl_fns[i].alt);\n\t  } else {\n\t    * (void **) (gl_fns[i].func) = (void *) &gl_error;\n\t    // fprintf(stderr, \"GL Skipped %s and %s \\r\\n\", gl_fns[i].name, gl_fns[i].alt);\n\t  };\n\t} else {\n\t  * (void **) (gl_fns[i].func) = (void *) &gl_error;\n\t  // fprintf(stderr, \"GL Skipped %s \\r\\n\", gl_fns[i].name);\n\t}\n      }\n    }\n    // dlclose(LIBhandle);\n    // fprintf(stderr, \"OPENGL library is loaded\\r\\n\");\n  } else {\n    fprintf(stderr, \"Could NOT load OpenGL library: %s\\r\\n\", DLName);\n  };\n\n  DLName = (DL_CHAR *) OPENGLU_LIB;\n  LIBhandle = dlopen(DLName, RTLD_LAZY);\n  // fprintf(stderr, \"Loading GLU: %s\\r\\n\", (const char*)DLName);\n  func = NULL;\n\n  if(LIBhandle) {\n    for(i=0; glu_fns[i].name != NULL; i++) {\n      if((func = dlsym(LIBhandle, glu_fns[i].name))) {\n\t* (void **) (glu_fns[i].func) = func;\n      } else {\n\tif(glu_fns[i].alt != NULL) {\n\t  if((func = dlsym(LIBhandle, glu_fns[i].alt))) {\n\t    * (void **) (glu_fns[i].func) = func;\n\t  } else {\n\t    * (void **) (glu_fns[i].func) = (void *) &gl_error;\n\t    // fprintf(stderr, \"GLU Skipped %s\\r\\n\", glu_fns[i].alt);\n\t  };\n\t} else {\n\t  * (void **) (glu_fns[i].func) = (void *) &gl_error;\n\t  // fprintf(stderr, \"GLU Skipped %s\\r\\n\", glu_fns[i].name);\n\t}\n      }\n    }\n    // dlclose(LIBhandle);\n    // fprintf(stderr, \"GLU library is loaded\\r\\n\");\n  } else {\n    fprintf(stderr, \"Could NOT load OpenGL GLU library: %s\\r\\n\", DLName);\n  };\n\n  return 1;\n}\n\nvoid gl_error() {\n  // fprintf(stderr, \"OpenGL Extension not available \\r\\n\");\n  throw \"undef_extension\";\n}\n\n/* *******************************************************************************\n * GLU Tesselation special\n * ******************************************************************************/\n\nstatic GLUtesselator* tess;\n\ntypedef struct {\n  GLdouble * tess_coords;\n  int alloc_n;\n  int alloc_max;\n\n  int * tess_index_list;\n  int index_n;\n  int index_max;\n\n  int error;\n} egl_tess_data;\n\n#define NEED_MORE_ALLOC 1\n#define NEED_MORE_INDEX 2\n\nstatic egl_tess_data egl_tess;\n\nvoid CALLBACK\negl_ogla_vertex(GLdouble* coords)\n{\n  /* fprintf(stderr, \"%d\\r\\n\", (int) (coords - tess_coords) / 3); */\n  if(egl_tess.index_n < egl_tess.index_max) {\n    egl_tess.tess_index_list[egl_tess.index_n] = (int) (coords - egl_tess.tess_coords) / 3;\n    egl_tess.index_n++;\n  }\n  else\n    egl_tess.error = NEED_MORE_INDEX;\n}\n\nvoid CALLBACK\negl_ogla_combine(GLdouble coords[3],\n\t\t void* vertex_data[4],\n\t\t GLfloat w[4],\n\t\t void **dataOut)\n{\n  GLdouble* vertex = &egl_tess.tess_coords[egl_tess.alloc_n];\n  if(egl_tess.alloc_n < egl_tess.alloc_max) {\n    egl_tess.alloc_n += 3;\n    vertex[0] = coords[0];\n    vertex[1] = coords[1];\n    vertex[2] = coords[2];\n    *dataOut = vertex;\n\n#if 0\n    fprintf(stderr, \"combine: \");\n    int i;\n    for (i = 0; i < 4; i++) {\n      if (w[i] > 0.0) {\n\tfprintf(stderr, \"%d(%g) \", (int) vertex_data[i], w[i]);\n      }\n    }\n    fprintf(stderr, \"\\r\\n\");\n    fprintf(stderr, \"%g %g %g\\r\\n\", vertex[0], vertex[1], vertex[2]);\n#endif\n\n  } else {\n    egl_tess.error = NEED_MORE_ALLOC;\n    *dataOut = NULL;\n  }\n}\n\nvoid CALLBACK\negl_ogla_edge_flag(GLboolean flag)\n{\n}\n\nvoid CALLBACK\negl_ogla_error(GLenum errorCode)\n{\n  // const GLubyte *err;\n  // err = gluErrorString(errorCode);\n  // fprintf(stderr, \"Tesselation error: %d: %s\\r\\n\", (int) errorCode, err);\n}\n\nvoid init_tess()\n{\n  tess = gluNewTess();\n\n  gluTessCallback(tess, GLU_TESS_VERTEX,     (GLUfuncptr) egl_ogla_vertex);\n  gluTessCallback(tess, GLU_TESS_EDGE_FLAG,  (GLUfuncptr) egl_ogla_edge_flag);\n  gluTessCallback(tess, GLU_TESS_COMBINE,    (GLUfuncptr) egl_ogla_combine);\n  gluTessCallback(tess, GLU_TESS_ERROR,      (GLUfuncptr) egl_ogla_error);\n\n}\n\nvoid exit_tess()\n{\n  gluDeleteTess(tess);\n}\n\nint erl_tess_impl(char* buff, ErlDrvPort port, ErlDrvTermData caller)\n{\n  ErlDrvBinary* bin;\n  int i;\n  int num_vertices;\n  GLdouble *n;\n  int AP;\n  int a_max = 2;\n  int i_max = 6;\n  num_vertices = * (int *) buff; buff += 8; /* Align */\n  n = (double *) buff; buff += 8*3;\n\n  egl_tess.alloc_max = a_max*num_vertices*3;\n  bin = driver_alloc_binary(egl_tess.alloc_max*sizeof(GLdouble));\n  egl_tess.error = 0;\n  egl_tess.tess_coords = (double *) bin->orig_bytes;\n  memcpy(egl_tess.tess_coords,buff,num_vertices*3*sizeof(GLdouble));\n  egl_tess.index_max = i_max*3*num_vertices;\n  egl_tess.tess_index_list = (int *) driver_alloc(sizeof(int) * egl_tess.index_max);\n\n  egl_tess.tess_coords = (double *) bin->orig_bytes;\n  egl_tess.index_n = 0;\n  egl_tess.alloc_n = num_vertices*3;\n\n  gluTessNormal(tess, n[0], n[1], n[2]);\n  gluTessBeginPolygon(tess, 0);\n  gluTessBeginContour(tess);\n  for (i = 0; i < num_vertices; i++) {\n    gluTessVertex(tess, egl_tess.tess_coords+3*i, egl_tess.tess_coords+3*i);\n  }\n  gluTessEndContour(tess);\n  gluTessEndPolygon(tess);\n\n  AP = 0; ErlDrvTermData *rt;\n  rt = (ErlDrvTermData *) driver_alloc(sizeof(ErlDrvTermData) * (13+egl_tess.index_n*2));\n  rt[AP++]=ERL_DRV_ATOM; rt[AP++]=driver_mk_atom((char *) \"_egl_result_\");\n\n  for(i=0; i < egl_tess.index_n; i++) {\n    rt[AP++] = ERL_DRV_INT; rt[AP++] = (int) egl_tess.tess_index_list[i];\n  };\n  rt[AP++] = ERL_DRV_NIL; rt[AP++] = ERL_DRV_LIST; rt[AP++] = egl_tess.index_n+1;\n\n  rt[AP++] = ERL_DRV_BINARY; rt[AP++] = (ErlDrvTermData) bin;\n  rt[AP++] = egl_tess.alloc_n*sizeof(GLdouble); rt[AP++] = 0;\n\n  rt[AP++] = ERL_DRV_TUPLE; rt[AP++] = 2; // Return tuple {list, Bin}\n  rt[AP++] = ERL_DRV_TUPLE; rt[AP++] = 2; // Result tuple\n\n  driver_send_term(port,caller,rt,AP);\n  /* fprintf(stderr, \"List %d: %d %d %d \\r\\n\",  */\n  /* \t  res, */\n  /* \t  n_pos,  */\n  /* \t  (tess_alloc_vertex-new_vertices)*sizeof(GLdouble),  */\n  /* \t  num_vertices*6*sizeof(GLdouble)); */\n  driver_free_binary(bin);\n  driver_free(egl_tess.tess_index_list);\n  driver_free(rt);\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/test/system_information_SUITE_data/information_test_report.dat": "{system_information_version, \"1.0\"}.\n{system_information, [{init_arguments,\n                [{root,\n                  [\"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp\"]},\n                 {progname,[\"erl\"]},\n                 {home,[\"/home/otptest\"]}]},\n               {code_paths,\n                [\".\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/kernel-2.16.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/stdlib-1.19.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/xmerl-1.3.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/wx-1.0/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/webtool-0.8.9.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/typer-0.9.5/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/tv-2.1.4.10/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/tools-2.6.11/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/toolbar-1.4.2.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/test_server-3.6.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/syntax_tools-1.6.11/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ssl-5.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ssh-2.1.7/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/snmp-4.24/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/sasl-2.3.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/runtime_tools-1.8.11/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/reltool-0.6.4/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/public_key-0.19/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/pman-2.7.1.4/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/percept-0.8.8.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/parsetools-2.0.9/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/otp_mibs-1.0.8/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/os_mon-2.2.12/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/orber-3.6.26.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/odbc-2.10.16/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/observer-1.3.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/mnesia-4.9/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/megaco-3.17.0.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/jinterface-1.5.8\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/inets-5.9.5/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ic-4.3.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/hipe-3.10.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/gs-1.5.15.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/eunit-2.2.4/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/et-1.4.4.4/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erts-5.10.3/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erl_interface-3.7.13\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erl_docgen-0.3.4/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/eldap-1.0.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/edoc-0.7.12/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/diameter-1.4.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/dialyzer-2.6.1/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/debugger-3.2.11/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/crypto-3.0/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosTransactions-1.2.13/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosTime-1.1.13/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosProperty-1.1.16/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosNotification-1.1.20/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosFileTransfer-1.1.15/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosEventDomain-1.1.13/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosEvent-2.1.14/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/compiler-4.9.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/common_test-1.7.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/asn1-2.0.2/ebin\",\n                 \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/appmon-2.1.14.2/ebin\"]},\n               {code,\n                [{code,[{path,\".\"},{modules,[]}]},\n                 {application,\n                  {kernel,\n                   [{description,\"ERTS  CXC 138 10\"},\n                    {vsn,\"2.16.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/kernel-2.16.3/ebin\"},\n                    {modules,\n                     [{application,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"69c3102d717e7258701a536ddae1eb89\"}]},\n                      {application_controller,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1bbfd81a8486ac040562ce0fd40c32aa\"}]},\n                      {application_master,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8eee82bfd661e8f0d862f3aad5b85ca\"}]},\n                      {application_starter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d505f3189443053e586fdf270446ce2f\"}]},\n                      {auth,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"800c93bf9ba03b6e4951de0d5db28328\"}]},\n                      {code,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"84f37378526c5e82c5d0d967c1ca8f82\"}]},\n                      {code_server,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"09ce0ef7103f3151553c6badc7e96fc1\"}]},\n                      {disk_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a5ab0573095f258c87f6166af8f8425c\"}]},\n                      {disk_log_1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"287f2521436a30a0567d54e2596c1034\"}]},\n                      {disk_log_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c7972e5f3dedce5c87cf8ef88c59bb2\"}]},\n                      {disk_log_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c6012237e70b570585bfb58f60537d9c\"}]},\n                      {dist_ac,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4dfa17c94d63da8f6b9edb1532a3e537\"}]},\n                      {dist_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8fa19e7b4bca4b5aac847d138c85c553\"}]},\n                      {erl_boot_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"86ecca01e41b2321c01b7181cb826766\"}]},\n                      {erl_ddll,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"90f1c7a6fd3cf6595d95b9f57abd87ce\"}]},\n                      {erl_distribution,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"16a49a506b48567bd32b2021dac425ff\"}]},\n                      {erl_epmd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eee4870e061790054c43ff70bbccbe25\"}]},\n                      {erl_reply,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e0a4f09b0877938b4d79b41122dad38\"}]},\n                      {error_handler,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1af2b51d167b017b3e1fae0beb408181\"}]},\n                      {error_logger,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"941136b080021af90dc32f23774b0def\"}]},\n                      {erts_debug,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e2a7b675323db5946605344ffccca170\"}]},\n                      {file,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5eccb55276e7162ab5bec77b46562332\"}]},\n                      {file_io_server,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"032292fd7d9e2bf08ff23de192710f97\"}]},\n                      {file_server,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"58bd1e532dee0fccff9e1fba1e429a5e\"}]},\n                      {gen_sctp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1e5e5a8c7708c9a81f26d2a89e3987c\"}]},\n                      {gen_tcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4cf58918602a7242ca4060bc1d6b5652\"}]},\n                      {gen_udp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"361b9b25604b9053a8a4c98b8df47408\"}]},\n                      {global,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e553137965978f64ffb9ef274c79e9c2\"}]},\n                      {global_group,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8ce6b230fef9340aeb41205a6ef4b4f3\"}]},\n                      {global_search,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0a82f2701d71d2a1576074dd69414e1b\"}]},\n                      {group,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6b3164d5d61625f0651c13107459627c\"}]},\n                      {heart,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b808d9003cf50d73ebf888da50d73e12\"}]},\n                      {hipe_unified_loader,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"879423975936fcf88729034f7d4a93b6\"}]},\n                      {inet,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bd325ceedcab3ca885eeaf4c982561e0\"}]},\n                      {inet6_sctp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8b6d95ec571f5e669047b5f40455d21\"}]},\n                      {inet6_tcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"93a9204ef927b17957c61a18f3ba47e2\"}]},\n                      {inet6_tcp_dist,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a94acd2c5dc0e625d2c2b4292e9a27a\"}]},\n                      {inet6_udp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17a90b344977dd2c657309507c99b516\"}]},\n                      {inet_config,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"741587fa47d6b66b96ef125b3d5ba61a\"}]},\n                      {inet_db,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f65160805d30ff194618a5ae4038ae9f\"}]},\n                      {inet_dns,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7f0c31b6cecf31d641bf46840f85ebee\"}]},\n                      {inet_gethost_native,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"09867d1d19f3c30b73fb47a48d0d843a\"}]},\n                      {inet_hosts,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a0f48322bd3a1bd0e75f248e39b41f69\"}]},\n                      {inet_parse,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29aee7378a4d1f814e1fd311d0eaab3a\"}]},\n                      {inet_res,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1018a662254323cfa45309afb3b3397\"}]},\n                      {inet_sctp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cbce09a1ffa13cb124d87eaecd25dfbf\"}]},\n                      {inet_tcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0da6499cb44db53be6145a5dc3449d93\"}]},\n                      {inet_tcp_dist,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"797e28cd89efe3a1a9d83244afd0b880\"}]},\n                      {inet_udp,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"70908d7165a2b298a85d9a4c1f8f9fa2\"}]},\n                      {kernel,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cf5c248b778654e664e6d2368ec285df\"}]},\n                      {kernel_config,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"39fbe27956eeb0cca9d7871f7de40a2e\"}]},\n                      {net,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cb8595f084959a2b5e329ab32047dbc4\"}]},\n                      {net_adm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"628c961d8dbbab4c5b2b180e527530be\"}]},\n                      {net_kernel,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"049f43826000bfefbbc2376bd21c9919\"}]},\n                      {os,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"464c6c09afb87824ecf12bfa6065b3dc\"}]},\n                      {pg2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"34858fa3619c1dc17d01536593359ed2\"}]},\n                      {ram_file,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"28bf8253c5f8357ab68b4d505e170856\"}]},\n                      {rpc,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"895e080302ac8a39197dfac0cc53adc6\"}]},\n                      {seq_trace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"845af954b395a80e5cf3d0c2ea0a3b99\"}]},\n                      {standard_error,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c0ac4192fd9f73885581481638c1648a\"}]},\n                      {user,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"93ad1841fa2dee776bff76f8989f5021\"}]},\n                      {user_drv,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"161f1a45735f77129c80bacd778e5632\"}]},\n                      {user_sup,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"baab537a62725bcbe4510c9f0b2d99eb\"}]},\n                      {wrap_log_reader,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5dceb6e671d0c51d181f51ec4e031798\"}]}]}]}},\n                 {application,\n                  {stdlib,\n                   [{description,\"ERTS  CXC 138 10\"},\n                    {vsn,\"1.19.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/stdlib-1.19.3/ebin\"},\n                    {modules,\n                     [{array,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c7c98b180715bd79794eef21a2930fff\"}]},\n                      {base64,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e45b571f2414c6131fbf62b1da3560e5\"}]},\n                      {beam_lib,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9e13b050aff529ecac6569f7101237ba\"}]},\n                      {binary,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e77ffd0688b3f1ace1ac70936969da3\"}]},\n                      {c,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"402465a98ccec8e9314139daacf6203e\"}]},\n                      {calendar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c09413575ac7f80ea3d9217b1f7e1bc\"}]},\n                      {dets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5154c82c2ffefa19096cf87ffb394a6c\"}]},\n                      {dets_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c810e731ba4101aba5f6b6c08481ea85\"}]},\n                      {dets_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9b4a9ef0f616b7c5464cf6813384e220\"}]},\n                      {dets_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a64e0220f855e6e97d53a9bc4f0a111b\"}]},\n                      {dets_v9,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9098391234b6304ff3d106dc56d467b6\"}]},\n                      {dict,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0bc1d74a65bd392960cd7e1b230f07bf\"}]},\n                      {digraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ac9049d6d7454a87c40c2f03f4223849\"}]},\n                      {digraph_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17bbe67d3314e9024825512c1ccc7be8\"}]},\n                      {edlin,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"518247b4963c998e742c0794091c9864\"}]},\n                      {edlin_expand,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"06c4ff7cf326df872bec9feed7f5984d\"}]},\n                      {epp,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"493760bc942ddd16df2a8e55f8b59774\"}]},\n                      {erl_bits,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bba2a00b28557c9678356247c36b0474\"}]},\n                      {erl_compile,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"291c9ddceeb66c7a7c36ab3505799513\"}]},\n                      {erl_eval,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9982f2bca01a352a45932a6db95a1336\"}]},\n                      {erl_expand_records,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"047c93973c9fbf83724cdf688e258cff\"}]},\n                      {erl_internal,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3225aadc9ec4f84cc9451f30833cdefb\"}]},\n                      {erl_lint,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"98ffb79824edc0f2a8ad49ff447e121c\"}]},\n                      {erl_parse,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f9a3d97b028bafa2bba7037bc1987d87\"}]},\n                      {erl_posix_msg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ecb0903ecde21b7cc58277424d8bac3d\"}]},\n                      {erl_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1b7945b193daf989e3f62c4a452f773e\"}]},\n                      {erl_scan,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1dd9fb779b35d1925a0ad68c092af1f0\"}]},\n                      {erl_tar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c6161b31a69bd3566a910d369baae00\"}]},\n                      {error_logger_file_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"218156df9bdedd04e37eecc76863940c\"}]},\n                      {error_logger_tty_h,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a2cac9386113d6879a4111be3e2d191b\"}]},\n                      {escript,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b77d5172cf00acd06fd6e42f03dc9b06\"}]},\n                      {ets,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"13c77916ba3c85e6e076aa0664f5674f\"}]},\n                      {eval_bits,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7bf8829d056519787fd0f7900bd04b73\"}]},\n                      {file_sorter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e31c9ca53e59010980dfc4e46e8aaf1\"}]},\n                      {filelib,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"641651ced98857991b064b22c85cf90f\"}]},\n                      {filename,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a007021a1e9de6af67e99cc48be13c5\"}]},\n                      {gb_sets,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4891f6d98f4bb81bc64415434d08ff9d\"}]},\n                      {gb_trees,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e9a8ae86761c41dc0e9d32f57df63c3\"}]},\n                      {gen,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5beaa9b295439aa39187eeef56b8527b\"}]},\n                      {gen_event,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79bc1c9f72e633331d4518d982221af0\"}]},\n                      {gen_fsm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fb95e4cf29f5cf640e486c789fe9f1f7\"}]},\n                      {gen_server,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14f189569fb6420c633a5dab81f7b897\"}]},\n                      {io,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"75fd9a0dc5823e95b4543a09be83c6ce\"}]},\n                      {io_lib,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"34c18dd02ec6458cae20ddc323542eed\"}]},\n                      {io_lib_format,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1f8f2a4d12d79d82420335d0e84107a\"}]},\n                      {io_lib_fread,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"27699e322a2de2004b057465f549fa3f\"}]},\n                      {io_lib_pretty,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"32d7bae40549bdd60298c0d17efe057b\"}]},\n                      {lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"394b1b967c909d1830939846963ac4f0\"}]},\n                      {lists,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f840b76db5f9e5d37dcc9dc39a436b90\"}]},\n                      {log_mf_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6f972dea76e360d99074b659327db69f\"}]},\n                      {math,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fe02e030a198ec343f3c4a62f60ebf8a\"}]},\n                      {ms_transform,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dba72a603f0a9382274671842d6aaf55\"}]},\n                      {orddict,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bedb6cdaf10530b2486b46f79853fbea\"}]},\n                      {ordsets,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f5dfe0e73da077c2f86dbbe846e0dab7\"}]},\n                      {otp_internal,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff3edabfa0633b9553b6fed1e47e41fc\"}]},\n                      {pg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c3975b993694a2a465d331278b503f81\"}]},\n                      {pool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d0398428064137474f5acbb4122a70d\"}]},\n                      {proc_lib,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5542f4add07ef7bb54a76b0cdfa542ba\"}]},\n                      {proplists,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5723876c3ed585a5a4b10dc3aefaf170\"}]},\n                      {qlc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"75df6efc99d9a75bb4c989985125d3da\"}]},\n                      {qlc_pt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e84b6da8fb84f811f2c58365e59dd47f\"}]},\n                      {queue,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"221ed57d299c2281992706fd6e2c6584\"}]},\n                      {random,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e703cb7ee27e2e23baf924c2f6b29f50\"}]},\n                      {re,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6eef786ed4f4dfec57a568e488e3596d\"}]},\n                      {sets,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c4fbf3b29bf971465a8dc4077fc3e7c8\"}]},\n                      {shell,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c4fdd7e1d18047b5f086b6fe8730c896\"}]},\n                      {shell_default,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5a94fd884c9594ff9056228503cd2731\"}]},\n                      {slave,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f5536e71d137302d699982fc65b9d025\"}]},\n                      {sofs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"10f13cd4626d429897246538c02c2cb4\"}]},\n                      {string,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d7440fe2e1838223f877286bf7d8f2a4\"}]},\n                      {supervisor,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29c98bf9e58cc955d4c29d881d98e84f\"}]},\n                      {supervisor_bridge,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f58b58a1fefecc46a476490ef5231d7e\"}]},\n                      {sys,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7afd9c746450e5189048ff3635b37926\"}]},\n                      {timer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fa3e2b017848accc808f92910abf87b8\"}]},\n                      {unicode,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be45160097c37c9144169f4ba54e0128\"}]},\n                      {win32reg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9f59ec1a4af1e6381d8770fc2c5915e4\"}]},\n                      {zip,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bc9aab95b5fc9ee7e534e890d8e5516c\"}]}]}]}},\n                 {application,\n                  {xmerl,\n                   [{description,\"XML parser\"},\n                    {vsn,\"1.3.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/xmerl-1.3.3/ebin\"},\n                    {modules,\n                     [{xmerl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1eabeb9846b832059537e2bdf6fed2d2\"}]},\n                      {xmerl_b64Bin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62075ae2d95f3188143a41f582542bf9\"}]},\n                      {xmerl_b64Bin_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bd99982371c4db3baf4883c96e146c96\"}]},\n                      {xmerl_eventp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"99aad15d2ad4be80d580fe7e3ba4178f\"}]},\n                      {xmerl_html,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f79915eaadae7d92946f1182110e6f81\"}]},\n                      {xmerl_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91fe55408e50bf92a9f8ef8b402a3e51\"}]},\n                      {xmerl_otpsgml,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f2e027e7204405c168eaa598a6a4d476\"}]},\n                      {xmerl_regexp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"408f3ffbd843e09ed0326f5e6a72356e\"}]},\n                      {xmerl_sax_old_dom,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"66b229f3eec3dce1f8754de256ba8d1d\"}]},\n                      {xmerl_sax_parser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"66e80c0d03a583d22abc40a54096777c\"}]},\n                      {xmerl_sax_parser_latin1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e2a462359d6765811f41b1ac1260c81a\"}]},\n                      {xmerl_sax_parser_list,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"db56224dbccdf302e42479027c3f961b\"}]},\n                      {xmerl_sax_parser_utf16be,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aaa379b8f1008944bd486f29a85ab1c2\"}]},\n                      {xmerl_sax_parser_utf16le,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"027d5c2218de2a7dd6f5db3b1c433a74\"}]},\n                      {xmerl_sax_parser_utf8,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"40f970e9b4eb4122589c0afec6b8907d\"}]},\n                      {xmerl_sax_simple_dom,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2c08dc40f819e4972a58a2fb2fcf6239\"}]},\n                      {xmerl_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0afb5a6c37db1b5dd100297a149d9f8a\"}]},\n                      {xmerl_sgml,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"22933821d58054ab2941678ce2f8a298\"}]},\n                      {xmerl_simple,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c83463864e0c2117c7659aae4e6ae50\"}]},\n                      {xmerl_text,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"661d77ea6d07fe6281f04e8e553528d4\"}]},\n                      {xmerl_ucs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8ace187d193a5314fbe329eba939dcf0\"}]},\n                      {xmerl_uri,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1121ced96856184d51daecddbb4b562f\"}]},\n                      {xmerl_validate,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fe1eb20e24d92db08eb03a7a3fbbd73a\"}]},\n                      {xmerl_xlate,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2515e06ee34909465fb4520f199f5a46\"}]},\n                      {xmerl_xml,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e04d0e513bb48336b9e69de89208e97c\"}]},\n                      {xmerl_xpath,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02a4e2d946ffe93e960c66ce0d391628\"}]},\n                      {xmerl_xpath_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d6531ac82f1524946a0a31f40a90546d\"}]},\n                      {xmerl_xpath_parse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7b3bd078c12f46cf5154d05c49880058\"}]},\n                      {xmerl_xpath_pred,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e2a7d97114507d23ad8cfdf967fd656f\"}]},\n                      {xmerl_xpath_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1d43883f65aa0006900fc053453d1bd2\"}]},\n                      {xmerl_xs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6963383b4148fd4a7d51bf8e54b79640\"}]},\n                      {xmerl_xsd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4660a75a540225ba8a88c00914923507\"}]},\n                      {xmerl_xsd_type,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be422d840d07c53b8ba210889dd5d308\"}]}]}]}},\n                 {application,\n                  {wx,\n                   [{description,\"Yet another graphics system\"},\n                    {vsn,\"1.0\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/wx-1.0/ebin\"},\n                    {modules,\n                     [{gl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2b2c807a7fbd4012871027dd4292448b\"}]},\n                      {glu,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"28a23cf86e317c54ebd1b609b38f2fe3\"}]},\n                      {wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"854481fd306d90c1fe6ad683045a1d98\"}]},\n                      {wxAcceleratorEntry,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d7572b3e8662e26666964cc64ff7b90\"}]},\n                      {wxAcceleratorTable,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a261f6c3e0d571493a46fcd40b0361f7\"}]},\n                      {wxArtProvider,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"22bc145a24e52e15d6e0f66e3f057df7\"}]},\n                      {wxAuiDockArt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"22fca5ae251c6592dda5b08c0688138a\"}]},\n                      {wxAuiManager,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6f87b4fc280d820edca4655bfc0388bd\"}]},\n                      {wxAuiManagerEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d08f2847271aae031ed49a0cab96e8f1\"}]},\n                      {wxAuiNotebook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4b055991aa4efef19c59653db60d611e\"}]},\n                      {wxAuiNotebookEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f9fc2a85bda82dc6406833d3746a1313\"}]},\n                      {wxAuiPaneInfo,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"96dc39e65e2d04e597a76663651cbe45\"}]},\n                      {wxAuiTabArt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0641080a257e4c0ce7030d7a404ea965\"}]},\n                      {wxBitmap,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62ddedace917fe7d65ebfdd968e2b442\"}]},\n                      {wxBitmapButton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"676cbd0f421681f3cdb110b08b89cdf4\"}]},\n                      {wxBitmapDataObject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9ab868e8a18350bb427d08abd31d805c\"}]},\n                      {wxBoxSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8f30f0ad197cd2fe6bb6956ecf55009e\"}]},\n                      {wxBrush,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f41534b5b14c0528729f3faba6d97e1d\"}]},\n                      {wxBufferedDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14bd8d1184f57ca3b71ae50c396b8fb6\"}]},\n                      {wxBufferedPaintDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b617bb74c090fd1bedd78a44e87620df\"}]},\n                      {wxButton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cee0c2cf94d454426067a18f222b5175\"}]},\n                      {wxCalendarCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"684d559165e957aac543b2f75db8821a\"}]},\n                      {wxCalendarDateAttr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d3406fdefafb1e56b3b4b0c049e8f306\"}]},\n                      {wxCalendarEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"deb02e8741160ee9f1a44853db16a6d3\"}]},\n                      {wxCaret,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"543d4a99c593ac822143cc4c680fbe10\"}]},\n                      {wxCheckBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ae5b445190e6d0811bc3bf41c269ad7a\"}]},\n                      {wxCheckListBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"094de5ba936cca4c26ffc0b765d371be\"}]},\n                      {wxChildFocusEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d4d29ee311555ab76419724546859432\"}]},\n                      {wxChoice,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b7e31246a035375896498e17c366beaa\"}]},\n                      {wxChoicebook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"32665c0637a00816a2fff4d4f5f418c1\"}]},\n                      {wxClientDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"400fdcc0f51e0e5043be4ca4da99a8a7\"}]},\n                      {wxClipboard,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4ddbb8e1f11321204d48d247e9f7548b\"}]},\n                      {wxCloseEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"815ac954da8b6cb7b694ca4cb28ccd50\"}]},\n                      {wxColourData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"84cf04d6327af73aabd2f775d16bac5d\"}]},\n                      {wxColourDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8e90d5109efec91ee6417d01b929951\"}]},\n                      {wxColourPickerCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e7fb673975f4cfa9946c34e30109d036\"}]},\n                      {wxColourPickerEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2cfa29b0fce7f98058c3d5ad016c1f2f\"}]},\n                      {wxComboBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b2aa520b9051f42a5e0f1ce1c6408101\"}]},\n                      {wxCommandEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e5fed22a39c6c80dcc029ebe5444b0c0\"}]},\n                      {wxContextMenuEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0a1739b84b365833c87232bfb298f681\"}]},\n                      {wxControl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aed7a496290caa0b53740c681de998ec\"}]},\n                      {wxControlWithItems,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a14351fadd0f776a4deeaf5ec518a689\"}]},\n                      {wxCursor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79eadaef3d9df7bae0a2146634d43e72\"}]},\n                      {wxDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3f88cfd62f368172c3ed90684df53ba3\"}]},\n                      {wxDataObject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"065ea6f1e76ca8b6558ca3dd7ff42077\"}]},\n                      {wxDateEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"56c06074946764fbc74b7070f5759e19\"}]},\n                      {wxDatePickerCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c716525fffbc864c85159fb43b2a8d64\"}]},\n                      {wxDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1a480a0c1690092014cf8198ba52d2a3\"}]},\n                      {wxDirDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"43565cc473a21632555cb3151138b7c0\"}]},\n                      {wxDirPickerCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6463e54c6564a1f7f5d6bec082f9ea63\"}]},\n                      {wxDisplayChangedEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1dbd9061f370f3db0343c4f88f57cfa3\"}]},\n                      {wxEraseEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff780a85a34cb23667b7e4072db17a2b\"}]},\n                      {wxEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8644675e2fd7bbc6965d4babd0d14d7a\"}]},\n                      {wxEvtHandler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c0991f5d86247ce757145c326adea516\"}]},\n                      {wxFileDataObject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cd9b5735e3994492c32ca099a70093d0\"}]},\n                      {wxFileDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b9cb446535683e7a9258953f53cd77de\"}]},\n                      {wxFileDirPickerEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6153d339ac822da8c4a9d766d0af22f9\"}]},\n                      {wxFilePickerCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c9ff43ff739e3ee37aae637a494d7d3\"}]},\n                      {wxFindReplaceData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bccc5beebb4aa0bfd424d26f472745a6\"}]},\n                      {wxFindReplaceDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c40b557d35e4bc527a715996daad0e0c\"}]},\n                      {wxFlexGridSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed3da3c3822f59a6b2737f273397367d\"}]},\n                      {wxFocusEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1c04cb018d6c94d24a44ae365dae46c1\"}]},\n                      {wxFont,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64303b1a35432898649e40e9c3f5bdd2\"}]},\n                      {wxFontData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0135398ad369de2fd9beda1553f7d309\"}]},\n                      {wxFontDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a872a3b88df4faa051e4b1f8cb0397a0\"}]},\n                      {wxFontPickerCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5e5b363ea487a4284714346d43d6c418\"}]},\n                      {wxFontPickerEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a22e0effda4c521ce1b35bd5b2259758\"}]},\n                      {wxFrame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"168aac11a6c3835b122ee653ce2e50a0\"}]},\n                      {wxGBSizerItem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"857c0be340c9c324d39cd525749a7cf7\"}]},\n                      {wxGLCanvas,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"88461209c2234e4e166923d760a42164\"}]},\n                      {wxGauge,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4d998a1ffcf56ccf2ea3a12eabe375d9\"}]},\n                      {wxGenericDirCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c5f8f19f7fdf9545c1a08318a12782b8\"}]},\n                      {wxGraphicsBrush,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9eeb08fd93c17259400e13b1586ef6ee\"}]},\n                      {wxGraphicsContext,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bee681fb85f534a63c2747e704d9001d\"}]},\n                      {wxGraphicsFont,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be1d636aa381e330db93a1deb9ff4b13\"}]},\n                      {wxGraphicsMatrix,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b452f9e3d87800b00e063b39d71583aa\"}]},\n                      {wxGraphicsObject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64dba881c5b70355d45323363715ba69\"}]},\n                      {wxGraphicsPath,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e93e67098fd350e7eb20ccc5f7287b30\"}]},\n                      {wxGraphicsPen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9c8c8c3cf5277cdc526dca9e591a10b0\"}]},\n                      {wxGraphicsRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4aeb3961b9b1a22263c8abf2473cc53f\"}]},\n                      {wxGrid,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e1195ea11e71c0534fffa76535efefbf\"}]},\n                      {wxGridBagSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"60ee2c7022f1feef9c169a191945d637\"}]},\n                      {wxGridCellAttr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02222543db113d41d409cd4080764d49\"}]},\n                      {wxGridCellBoolEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"297c5d3648d99bef9bc294d52d28b619\"}]},\n                      {wxGridCellBoolRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5cf8954049f0443ea2f9003deae7960d\"}]},\n                      {wxGridCellChoiceEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b77d6b8cb344c4512cef8adaf23ef93b\"}]},\n                      {wxGridCellEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a5cf6065e8754f96612cff48a1fdcd20\"}]},\n                      {wxGridCellFloatEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"723baea27c999730afcacb3280f611c4\"}]},\n                      {wxGridCellFloatRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ab56332ebccd1245fff7cb86abfd670b\"}]},\n                      {wxGridCellNumberEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f0d86be445b03945610d9154c8905258\"}]},\n                      {wxGridCellNumberRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"28ae774386962927dd552da4e9a28ca1\"}]},\n                      {wxGridCellRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a6da61c7ff2464f3b007626b1f813dcb\"}]},\n                      {wxGridCellStringRenderer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aefd3b8019cc4321037c8bd8e4faeba2\"}]},\n                      {wxGridCellTextEditor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dbce8b54a66e9a9869d84655ef26d908\"}]},\n                      {wxGridEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7b41f04ffe42c4602fe2911b5ca44dbe\"}]},\n                      {wxGridSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"37bfde707aa6f2a1f68f8377dcbd7580\"}]},\n                      {wxHelpEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"714f8b000f3d09fe7eae13b1a5daa0c7\"}]},\n                      {wxHtmlEasyPrinting,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eaa59118b8408b91d16df3b600494e5e\"}]},\n                      {wxHtmlLinkEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6f527856d02011b9f480494b2f3118f0\"}]},\n                      {wxHtmlWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"61e947b44d4ae81b9bb0faf9a443cbd3\"}]},\n                      {wxIcon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1b4d9209343a029641204f334bd07dc5\"}]},\n                      {wxIconBundle,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3281d9d364552b38009405e79467d5c5\"}]},\n                      {wxIconizeEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d66e4289534961f6868d91e1d1399b53\"}]},\n                      {wxIdleEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc82957c3a0181ef84ca78ace7a9271e\"}]},\n                      {wxImage,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"25de92b502b3a920e1247d2d1433aa32\"}]},\n                      {wxImageList,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3445492f371fe7d2a6f7534d61ad66a9\"}]},\n                      {wxJoystickEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"15c7352ac168dc5adc0de4a872b9740c\"}]},\n                      {wxKeyEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b2e23f50406c65d5f2269910467a9721\"}]},\n                      {wxLayoutAlgorithm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2f93e6eac8570144faabaea83388129a\"}]},\n                      {wxListBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"87aade14ade89a7021b6908143d339f1\"}]},\n                      {wxListCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e35643c3218ee7db6bf18dbd72bc470\"}]},\n                      {wxListEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"90354ad1e09b594dd321bca68d8d3f02\"}]},\n                      {wxListItem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be95e4c22e265fbcfb14ab7c9c798684\"}]},\n                      {wxListItemAttr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0137573b7a2b2569b481548c26bb91a9\"}]},\n                      {wxListView,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c0022979dbcc2ac873adb72ea26c16aa\"}]},\n                      {wxListbook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e4b01ad81bf68f1784ba30772502e0b\"}]},\n                      {wxLogNull,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17f8273288c6e880ec0c7a21842b022f\"}]},\n                      {wxMDIChildFrame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5894b4a01bb643f208995257a0f9a00f\"}]},\n                      {wxMDIClientWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fa7017cfb2e70f0492550a2ecd01d1c7\"}]},\n                      {wxMDIParentFrame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"251cf2044002bbb5afc2acddf442f14a\"}]},\n                      {wxMask,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8b4ce241e6edd84d32df4b40a2f17a15\"}]},\n                      {wxMaximizeEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e8a766afd7de5050ced825a275c6cdba\"}]},\n                      {wxMemoryDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b4c1bb9fed0edf70b44f24ea3fb54f39\"}]},\n                      {wxMenu,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d2e48cd879d0ece5ee24260bc70e2f9b\"}]},\n                      {wxMenuBar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"562e9979f8ce58c85032ae3e02307d7b\"}]},\n                      {wxMenuEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0571277ab11e756d18d34c6cb4f8f1c0\"}]},\n                      {wxMenuItem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"900c9de70ac02a326bce22eec1c64d48\"}]},\n                      {wxMessageDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a15267b44d3cbeae16c294c4c0b96324\"}]},\n                      {wxMiniFrame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ca0204b8a167fd472a555695e58927b\"}]},\n                      {wxMirrorDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d521a1f1e4d37132a7a0de0eccc332f0\"}]},\n                      {wxMouseCaptureChangedEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f85672fbf15ee0b8306de4aaf4eb4719\"}]},\n                      {wxMouseEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"802c21f46105f957d8cd8c84ff36d986\"}]},\n                      {wxMoveEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4231fd181e0b305a82c595f66eb99b96\"}]},\n                      {wxMultiChoiceDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4eb40bfa965a25034ebe4b8fca335863\"}]},\n                      {wxNavigationKeyEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"04b113c9dcf181af633d0eae1f18c36f\"}]},\n                      {wxNotebook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fef44c082d799a4d86e0cd8db58609df\"}]},\n                      {wxNotebookEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0ccae052bfd1cf87236add4c0b26143d\"}]},\n                      {wxNotifyEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d3d22b2b86ce1a94c57ccd9842211f05\"}]},\n                      {wxPageSetupDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"755792c8d70118493f5147ef26f40d00\"}]},\n                      {wxPageSetupDialogData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"942f2c8bd296e971ea1d0f74ec700be5\"}]},\n                      {wxPaintDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c23afeac816efecc5417b0687437d8cf\"}]},\n                      {wxPaintEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a18ce83af679d334ce979df65607226c\"}]},\n                      {wxPalette,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a5b3e165b8ac3e3cb2d5ba6e149bb0ca\"}]},\n                      {wxPaletteChangedEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"785c765df0a50eac4b2c5c054453c0d9\"}]},\n                      {wxPanel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"08c772b8c30e7441366bcfcd5005f21d\"}]},\n                      {wxPasswordEntryDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62b860fd64e74f7d67c51a5d8a0fb157\"}]},\n                      {wxPen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"51b981a9e2313e58123888c6b67192ed\"}]},\n                      {wxPickerBase,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ab9e2f2d6c3b5f8184d5b1d806b0dce\"}]},\n                      {wxPostScriptDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8a820bdc1354c448a8b442016951a6b2\"}]},\n                      {wxPreviewCanvas,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e7b48321129f0e14c2006272c8926544\"}]},\n                      {wxPreviewControlBar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62393081a6ffcb6bf092b47703e31b4d\"}]},\n                      {wxPreviewFrame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"78f39bbfead1330839955a50281a2329\"}]},\n                      {wxPrintData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"928a6a97c5c4b664687015c40d660cdf\"}]},\n                      {wxPrintDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"acc4c816bf0a64c8ce31af3c001f1688\"}]},\n                      {wxPrintDialogData,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc97f97b620110928f4093806b1b8ce4\"}]},\n                      {wxPrintPreview,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"92f04b064e7b041ee27bb202e5a60b80\"}]},\n                      {wxPrinter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"05626841c780ceaf3c5af0212f53fbaf\"}]},\n                      {wxPrintout,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"feea26109fa63e4d98c2924189762a43\"}]},\n                      {wxProgressDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eb45280951aef0038b8130c91a333833\"}]},\n                      {wxQueryNewPaletteEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be6c85603e81f7c90d4a949d42c0b32d\"}]},\n                      {wxRadioBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"33684d6ce3f3c5388e6faf4f06d90463\"}]},\n                      {wxRadioButton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"92bebfd9b33658dcff2e592b5fcaeb7a\"}]},\n                      {wxRegion,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"18cb5a2a1dcb63a646135f2a6cb1b21c\"}]},\n                      {wxSashEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d4c51c14137513da9841890751deafd2\"}]},\n                      {wxSashLayoutWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f6f5167ff888b73c603b2f641e96a49f\"}]},\n                      {wxSashWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91c5be41fbe95f5ad4504fae2f56f91f\"}]},\n                      {wxScreenDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc9411f49fe7324bcbace2c05d31d39a\"}]},\n                      {wxScrollBar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e60ffb44799a3684f74d783addbf42c9\"}]},\n                      {wxScrollEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4fbd1eb49f69e56894aa4a7fb26e1b4b\"}]},\n                      {wxScrollWinEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be44e413061c515cb83a103a46572065\"}]},\n                      {wxScrolledWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ccef65f1430df907d9bd34c27408f9cb\"}]},\n                      {wxSetCursorEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1aad98a9e1d08f792da0d73f23ceb7e5\"}]},\n                      {wxShowEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"89a775b3e6579b8e55e35bc6a46649ef\"}]},\n                      {wxSingleChoiceDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f0df9c7367cbb88a21c8dbfcff668fed\"}]},\n                      {wxSizeEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"78d4dff8fa58b02bd49c31b6de28b935\"}]},\n                      {wxSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"581f4ba6c9b3befca1efbcd221455b49\"}]},\n                      {wxSizerFlags,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"54ae0bf1305ef85943158c8f4bc58669\"}]},\n                      {wxSizerItem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff2680fb6f057abf757516aa98e26281\"}]},\n                      {wxSlider,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1e0578ebbde06a5308c00e98e0fbb6b\"}]},\n                      {wxSpinButton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d27cc12c048bf0b160f53ca416add6ab\"}]},\n                      {wxSpinCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6ce2382ed84ceb1585afea719fcddf73\"}]},\n                      {wxSpinEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"158d1777d9e8d840b6d8fa93982b876a\"}]},\n                      {wxSplashScreen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2719e687a6f08135c305b0b0692b8f40\"}]},\n                      {wxSplitterEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a71231c8d2c06f12ee862be00ac91fb3\"}]},\n                      {wxSplitterWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d7cf57a832b89c0e8574b09e632c7f1d\"}]},\n                      {wxStaticBitmap,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"709ad1816bd35aa84a5b1eca1a6571f2\"}]},\n                      {wxStaticBox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"84480d00723cfae07f5c67ad463bec22\"}]},\n                      {wxStaticBoxSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b32933189486b806c14a04452a3a5887\"}]},\n                      {wxStaticLine,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"569ff89c23e697fc73de1f13d51b17d3\"}]},\n                      {wxStaticText,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6baa91538f6f4d374f0c8c4a2cb5f25c\"}]},\n                      {wxStatusBar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1cbef8443710f5270baade15b9312c4e\"}]},\n                      {wxStdDialogButtonSizer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2325bcbc06870de4093489cae45bc2ee\"}]},\n                      {wxStyledTextCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"94cc5d191271e6c87926850e0ea8615d\"}]},\n                      {wxStyledTextEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"451ad9ce6872ea2035c3828713fe09c1\"}]},\n                      {wxSysColourChangedEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c6f80dd65e0c9731e4a6dfcb10c71059\"}]},\n                      {wxSystemOptions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3f3db4310f5e978392d4c6ec83347dae\"}]},\n                      {wxSystemSettings,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3bb2753eb2dde96fd7f4aac7f944f69e\"}]},\n                      {wxTaskBarIcon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d221781abd0a15270e591e77e279a840\"}]},\n                      {wxTaskBarIconEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3d865d9706104b122cab70b07fcc3a1\"}]},\n                      {wxTextAttr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3a6de5eb0c71625ca14606d4e3919e53\"}]},\n                      {wxTextCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"924adbbbade1b95c226a18484c6bba33\"}]},\n                      {wxTextDataObject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4a3694d548ae60c8261f55b671ac834a\"}]},\n                      {wxTextEntryDialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6c3038c65992b9a6eef33dd1aff7ce1d\"}]},\n                      {wxToggleButton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4471e21c4fb39eece7418adbcd0f0fd1\"}]},\n                      {wxToolBar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"163743b59b5ec0b6af08d7a66f1f36a0\"}]},\n                      {wxToolTip,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"71dde961902117baba2d2b70f18ebad5\"}]},\n                      {wxToolbook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"053b84811ff7ef240d44fa454f966e71\"}]},\n                      {wxTopLevelWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c7dc3f9260823e5ebb2f99855f8d498f\"}]},\n                      {wxTreeCtrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"72e339bd396c87edd28d5a7cc6954e6d\"}]},\n                      {wxTreeEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17bf2e16e1f41f451fde53d1b72f8b01\"}]},\n                      {wxTreebook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b4889ab8905fd0fd8df5d06c900edf44\"}]},\n                      {wxUpdateUIEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b7e61e2de35af5257f49919be1304381\"}]},\n                      {wxWindow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c5337193a39eb848cbcd1afc79f19c8f\"}]},\n                      {wxWindowCreateEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c898ff077b90017671180089c5b37048\"}]},\n                      {wxWindowDC,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dcdf0f184f2b85f0915bb8d89ae8be27\"}]},\n                      {wxWindowDestroyEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6c443d15978d3a61549f9817ff75fb48\"}]},\n                      {wxXmlResource,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7240754b5985cf7af7c3ff2a3aba3548\"}]},\n                      {wx_misc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1c24e9903d1b499f26e385d7aae15108\"}]},\n                      {wx_object,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b17d673c7c4f59b27e9625b62077ef41\"}]},\n                      {wxe_master,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cbafeb9aba24bb5e831dede889b317c1\"}]},\n                      {wxe_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d6fabc67e68c6a41d8fa0ae642f6b272\"}]},\n                      {wxe_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d6e77598d0db8185bb1cb3bad9c5d14\"}]}]}]}},\n                 {application,\n                  {webtool,\n                   [{description,\"Toolbar lookalike for the web\"},\n                    {vsn,\"0.8.9.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/webtool-0.8.9.2/ebin\"},\n                    {modules,\n                     [{webtool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29344486df5f854ae8fd3bd674c80e99\"}]},\n                      {webtool_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0130c653986734ecbcc9eb173c28c60a\"}]}]}]}},\n                 {application,\n                  {typer,\n                   [{description,\n                     \"TYPe annotator for ERlang programs, version 0.9.5\"},\n                    {vsn,\"0.9.5\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/typer-0.9.5/ebin\"},\n                    {modules,\n                     [{typer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bfd9dd08af18a1e70eacb4048fb641d9\"}]}]}]}},\n                 {application,\n                  {tv,\n                   [{description,\"tv Table Visualizer\"},\n                    {vsn,\"2.1.4.10\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/tv-2.1.4.10/ebin\"},\n                    {modules,\n                     [{tv,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be7275d94eee00787500a1a2116f2f42\"}]},\n                      {tv_comm_func,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ac45aad5047bb8c9fd5567c83f513db4\"}]},\n                      {tv_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"97de27d10499042aaf10e26289e1e92b\"}]},\n                      {tv_db_search,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"41a489c86d92bc1de3d2b1eba6884c6f\"}]},\n                      {tv_db_sort,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e8f3679aece6310ac4b2d574bb4e7180\"}]},\n                      {tv_ets_rpc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"71f7fcd2da96e0166340d5fecd7b3878\"}]},\n                      {tv_etsread,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"45a731d225555df8f910b7960330f095\"}]},\n                      {tv_info,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1c776d3c4a16bc432fed801d2e3c8d70\"}]},\n                      {tv_io_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6c34cbecb007f6b330646a192aac6163\"}]},\n                      {tv_io_lib_format,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"843ef9fc1762e75675f7a27b7ba99eb4\"}]},\n                      {tv_io_lib_pretty,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e749f6a7879008513c7194c145e0faf2\"}]},\n                      {tv_ip,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2d54724ccb30cfd4eaca323d38ef7861\"}]},\n                      {tv_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"de096a5d9d31dd3443e6bbbd4207ecd8\"}]},\n                      {tv_mnesia_rpc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"947c40384ab9d95074ee626b399d893d\"}]},\n                      {tv_new_table,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c3105970c5d4e109104492bf286bfb4b\"}]},\n                      {tv_nodewin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bfd57496a2e56d57558891338db3e79e\"}]},\n                      {tv_pb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fecb58bfc084d7d6dd979f14ea8c2796\"}]},\n                      {tv_pb_funcs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bcfb711f62ae07c91da02c5b145f3099\"}]},\n                      {tv_pc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"61f6f61fcc34826ca8bc3b450e94f92f\"}]},\n                      {tv_pc_graph_ctrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e8c763ad45fac44f4356a4739baa30b0\"}]},\n                      {tv_pc_menu_handling,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc155c0472d92d089e6d74a1987d2223\"}]},\n                      {tv_pd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"20b8ec33209b59d6775702be748d2da1\"}]},\n                      {tv_pd_display,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"73d810061bb4e923468e82e414f6c962\"}]},\n                      {tv_pd_frames,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8fd381887281403263da14b070a35ca1\"}]},\n                      {tv_pd_scale,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"daff409824df94f43198e08c00c8aadc\"}]},\n                      {tv_pg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"de42de073fbf5bd3ae58bef45ee05858\"}]},\n                      {tv_pg_gridfcns,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"663f41dd11d7fbca1f8eb58529e63e53\"}]},\n                      {tv_poll_dialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ef887432416a9931b8051963d9a97fdc\"}]},\n                      {tv_pw,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c4443616d58cadb7e473ff9ad95c473c\"}]},\n                      {tv_pw_window,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ef96313278caafa5e4cb0c1f5da9d165\"}]},\n                      {tv_rec_edit,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6cbd579d5ccd73e575e67d00fe9983d2\"}]},\n                      {tv_table_owner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"af79fe7c2092cd90cd1cd360def69fec\"}]},\n                      {tv_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d6967a2d5f7e03b34c4e26f47355ba43\"}]}]}]}},\n                 {application,\n                  {tools,\n                   [{description,\"DEVTOOLS  CXC 138 16\"},\n                    {vsn,\"2.6.11\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/tools-2.6.11/ebin\"},\n                    {modules,\n                     [{cover,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e7856ff33e1e956b68c9f6527b5700b5\"}]},\n                      {cover_web,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ead2c2bfdef49be858d1caee2d8878a0\"}]},\n                      {cprof,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0d6cd8fb042b31641c7869b4e148e7c5\"}]},\n                      {eprof,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c8fd5ee11ba9f1cdae8af5c8f1b367a1\"}]},\n                      {fprof,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c549341f79f954416e826f591645f676\"}]},\n                      {instrument,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cf9b95c95942f0ca0ca65db707873a74\"}]},\n                      {lcnt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"04b27f3e814feb4f8d4f95705115ce98\"}]},\n                      {make,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a69d24258713596763ad87c247cef15\"}]},\n                      {tags,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"450d10b82d488d74ab49eeef1d7277b7\"}]},\n                      {xref,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5f07cbb4541ab47dd30a29a9ad6df8c2\"}]},\n                      {xref_base,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cdb2414576f192e4f5df0f8b0d565598\"}]},\n                      {xref_compiler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1bba5a52fff82650e201bd08241277e\"}]},\n                      {xref_parser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3ee075a14d4a9caf00fd422a5b8a4941\"}]},\n                      {xref_reader,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d257c5126f9d0cc4e9050fbbae796366\"}]},\n                      {xref_scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c7e53f28338fe627ac6fd0821ae6c551\"}]},\n                      {xref_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"66929f66fc0606d320c6e5d216cb3b29\"}]}]}]}},\n                 {application,\n                  {toolbar,\n                   [{description,\"Toolbar\"},\n                    {vsn,\"1.4.2.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/toolbar-1.4.2.3/ebin\"},\n                    {modules,\n                     [{canvasbutton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2432b0ceaf3b3cd6ab059067bb1b904c\"}]},\n                      {toolbar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0264f53a2881d926b34401d0583b07fe\"}]},\n                      {toolbar_graphics,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"327c7483e8b5cd55e8478a2cea9f0c1f\"}]},\n                      {toolbar_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64977a22d445c231a98bc12926186e0d\"}]},\n                      {toolbar_toolconfig,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"037bc3e6d48012cb0c18796d7870c33a\"}]}]}]}},\n                 {application,\n                  {test_server,\n                   [{description,\"The OTP Test Server application\"},\n                    {vsn,\"3.6.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/test_server-3.6.2/ebin\"},\n                    {modules,\n                     [{erl2html2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"28fc702edc8365854f9f66fc2fe01793\"}]},\n                      {test_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"09cd3b380d55881b18f4020709ad1ef4\"}]},\n                      {test_server_ctrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14f716cc55a7cb00e3db6f747c72bfa7\"}]},\n                      {test_server_gl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91fa2c7419209a51361800e1a28f3891\"}]},\n                      {test_server_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"90c3fbf1bdd3260d8be29c0ab04279bf\"}]},\n                      {test_server_io,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"accd333c058e9b4da064190ef7cf48cc\"}]},\n                      {test_server_node,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"091d5d7aadb062a6e3812afbb130402a\"}]},\n                      {test_server_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9aad63f121b569e197e38735d5f3bf2a\"}]}]}]}},\n                 {application,\n                  {syntax_tools,\n                   [{description,\"Syntax tools\"},\n                    {vsn,\"1.6.11\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/syntax_tools-1.6.11/ebin\"},\n                    {modules,\n                     [{epp_dodger,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec04cd4dd5985f232fc3116ba222bfd6\"}]},\n                      {erl_comment_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b8dce1126af7468c5b30f73044c44db\"}]},\n                      {erl_prettypr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"020fefd3937417a2029a5278dfe6a6c3\"}]},\n                      {erl_recomment,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f9ef1a5c9ce3c6ce6b88966b1c766452\"}]},\n                      {erl_syntax,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1ee5f2f422313742a2d321fcd901909b\"}]},\n                      {erl_syntax_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f27de1f2cf65260fe863025c358c9c86\"}]},\n                      {erl_tidy,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f92471b03263f0cd77f35fd59686258a\"}]},\n                      {igor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eabc7b07e7b92b8d34fa8eb20a507cff\"}]},\n                      {prettypr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1e07ce1f5edda823216364302796ac1\"}]}]}]}},\n                 {application,\n                  {ssl,\n                   [{description,\"Erlang/OTP SSL application\"},\n                    {vsn,\"5.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ssl-5.3/ebin\"},\n                    {modules,\n                     [{dtls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d3942c7ba7ffaf15f739485a0294f256\"}]},\n                      {dtls_connection,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0d3d571363ba45d10d8d772f107cd24f\"}]},\n                      {dtls_handshake,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"92217b2b0b6d3b16913521e333533ca6\"}]},\n                      {dtls_record,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4aa88c3ec82a97c9aef5efb0773c153c\"}]},\n                      {inet_tls_dist,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7c9e1c10262b46fce60dcd0127455cb0\"}]},\n                      {ssl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7c0cf688a767412c4de5ab3be9cb2e55\"}]},\n                      {ssl_alert,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff069c184808a482f096e6cf5aeda43b\"}]},\n                      {ssl_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"08781acbe7e677b43923f943d54e17f5\"}]},\n                      {ssl_certificate,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"292c330ca048353298a264de596e2ee2\"}]},\n                      {ssl_cipher,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c7da7124e32552cf9438259bf544389c\"}]},\n                      {ssl_connection_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b46886f7e29fdc628a965ee9e2314e1f\"}]},\n                      {ssl_dist_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1db0e97b9d77cbb26348e98cf386210b\"}]},\n                      {ssl_manager,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e170a0ac2f663c4396f5a3b00e36239\"}]},\n                      {ssl_pkix_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c1b5a81345dcd39060c2fb177b29898\"}]},\n                      {ssl_session,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f9103614974d7d39d0f1ccb0a9e5b6f8\"}]},\n                      {ssl_session_cache,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"09b0d541e61e1ed9dbcb169b1d5b945a\"}]},\n                      {ssl_session_cache_api,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ffafcdc2ff0342c4c698df0dec3cdc96\"}]},\n                      {ssl_socket,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e9d62b4943dddf16fbe39f781699260\"}]},\n                      {ssl_srp_primes,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c2df3c9a38a3ceb9cb273a030bd423a\"}]},\n                      {ssl_ssl2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6822bde894695368a294a0e890183b67\"}]},\n                      {ssl_ssl3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c5cd3fbdb5a3f1fdb4c78a2acf9735fa\"}]},\n                      {ssl_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a69f0e3bb4639f90a310b2b938cb9235\"}]},\n                      {ssl_tls1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14b5f8a146f51df359e9c1265e949564\"}]},\n                      {ssl_tls_dist_proxy,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1bbb1df174c32c1f424cfa64547d075f\"}]},\n                      {tls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7ff734327614ac4d6e4d9acf49998c2d\"}]},\n                      {tls_connection,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ad4d62a6b8101cc5b928498752714ed7\"}]},\n                      {tls_handshake,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c2c5513a959ecbe56166df52dff06e6e\"}]},\n                      {tls_record,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"94501e4bda011f01fba860eebdff5a44\"}]}]}]}},\n                 {application,\n                  {ssh,\n                   [{description,\"SSH-2 for Erlang/OTP\"},\n                    {vsn,\"2.1.7\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ssh-2.1.7/ebin\"},\n                    {modules,\n                     [{ssh,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8b91a0a4f8271ff77d0efceb75ba5e8f\"}]},\n                      {ssh_acceptor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7c39ef119dbfcec7618d1cf223d445d6\"}]},\n                      {ssh_acceptor_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d79d965ce6a8121cfbcc1a57029fa06c\"}]},\n                      {ssh_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"11089687f3d5ff2e2ff4527efdb86920\"}]},\n                      {ssh_auth,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0ff2e66febd08d64ffbebed7e7880ca3\"}]},\n                      {ssh_bits,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5ab1a9f964ccce1e001d7484b37c561c\"}]},\n                      {ssh_channel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e4259284ff9d7671940cfde40b8615fe\"}]},\n                      {ssh_channel_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2594f48f478040f5e861f92c63f78eb3\"}]},\n                      {ssh_cli,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6eb0733483419dc0a920452bb42b7344\"}]},\n                      {ssh_client_key_api,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1a1ce3edce20525a435533b3f37fcfc\"}]},\n                      {ssh_connection,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b551f86d866df22232a147fca4ac7c04\"}]},\n                      {ssh_connection_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bec5a32b6f6199b3f52e1fbfbbceba3\"}]},\n                      {ssh_connection_manager,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"399ad1481f99b9d43c874c162742c91c\"}]},\n                      {ssh_connection_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cd1150bc1fe3673d2446811f54dc23de\"}]},\n                      {ssh_daemon_channel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17ceee1d84a542cf54dd487808e00a1e\"}]},\n                      {ssh_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d014774c5b5dbd368fad2bc809515e48\"}]},\n                      {ssh_io,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1045e82cd74643c823a1bda96d24b47\"}]},\n                      {ssh_math,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a4b44ed70c1938a7277f37d56f9de8f\"}]},\n                      {ssh_no_io,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c9bf450746c1bcc1fd90c463299fdaf5\"}]},\n                      {ssh_server_key_api,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"debb7d5dcdf2eb88d30ed95a56652366\"}]},\n                      {ssh_sftp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"74ed0ad4eaf38e4233ea40f4b4769b7d\"}]},\n                      {ssh_sftpd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"472a422310ca8f6f289334ef64550afd\"}]},\n                      {ssh_sftpd_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5269b3e25dd16faeb466f76ba993ba50\"}]},\n                      {ssh_sftpd_file_api,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"627f97d4fb4abd5bee4b509d9225edaa\"}]},\n                      {ssh_shell,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c7831c144031be28ec9dc12b4da3b94\"}]},\n                      {ssh_subsystem_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"755716a08c990d1f606e90420006a77e\"}]},\n                      {ssh_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"408837d884dc9e1f0a969ef64558d733\"}]},\n                      {ssh_system_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f384bcadd7cdca24ec6e40cbe04d71a0\"}]},\n                      {ssh_transport,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b1c9ed65701948f63ddb181cfaf2744\"}]},\n                      {ssh_userreg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a4f27505cb543991360e10ddb88870cc\"}]},\n                      {ssh_xfer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0220668d75e0c89e7823990a0c968eaf\"}]},\n                      {sshc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"483104e1f9410dfc4e1e29c61d8827ee\"}]},\n                      {sshd_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aba8a2861b6f773e9016ff2859e8de24\"}]}]}]}},\n                 {application,\n                  {snmp,\n                   [{description,\"SNMP  CXC 138 13\"},\n                    {vsn,\"4.24\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/snmp-4.24/ebin\"},\n                    {modules,\n                     [{snmp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9ab098c46c4c009b5ab8a4a37673cf82\"}]},\n                      {snmp_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a2ab3974db30a5b20ba308e1ef0c1d3\"}]},\n                      {snmp_app_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b81a8361da32fd1da51e85f36b678347\"}]},\n                      {snmp_community_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14e553d78094cb09e2e2a1a3476fa9de\"}]},\n                      {snmp_conf,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5e5c6bc754f1fdf1dfaf7f9815163cc5\"}]},\n                      {snmp_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d9ec2fef69fed3fddbb122a5fd31853b\"}]},\n                      {snmp_framework_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0886188c6a8c18a6ff8a3b08172a0773\"}]},\n                      {snmp_generic,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b23bcb8a031ccd450999f71b41f1f0dc\"}]},\n                      {snmp_generic_mnesia,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"74806ef6c5e3a1af2cb14a4121f4442a\"}]},\n                      {snmp_index,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8a0358730d6b279e4056b9e78fdabbe2\"}]},\n                      {snmp_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f93d36dbfdfef30de3f4807efcec170e\"}]},\n                      {snmp_mini_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4bb79af4e373cdc2ec4e6f5fe71d0e01\"}]},\n                      {snmp_misc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ccd6ba3cc7e504e0c163f8c0f7ff575\"}]},\n                      {snmp_note_store,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3b5f37d8fc6663a63d177cb72a1c498\"}]},\n                      {snmp_notification_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c283ef6cba1ffb08a38c4228f119c1f2\"}]},\n                      {snmp_pdus,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"48138570bb1ff76dabe8f1fa5a6e662c\"}]},\n                      {snmp_shadow_table,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ba004cbc14fe13ad6b29515d6b3b84af\"}]},\n                      {snmp_standard_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"75c1099b71f4cde7703c1b651168196a\"}]},\n                      {snmp_target_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"52cfb682cf25e4c6ad7c6a31ea71bc41\"}]},\n                      {snmp_user_based_sm_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b3b454fe409f6cd24463bfca9369adf5\"}]},\n                      {snmp_usm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"667650cc1c2f535f771132907bf12342\"}]},\n                      {snmp_verbosity,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c8e3d33775ee83cca4d47f64df1dd5ca\"}]},\n                      {snmp_view_based_acm_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1dcc969b6786ab84f450e9f0875eab3e\"}]},\n                      {snmpa,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2057219be785ea520f5a3f1886d51360\"}]},\n                      {snmpa_acm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f21fee89e88dccc36afbae59e8ccd85f\"}]},\n                      {snmpa_agent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a1fcbbb2b5328095d05622eb5da5b1fa\"}]},\n                      {snmpa_agent_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"668a5398f181b8abce6b0c68716e175e\"}]},\n                      {snmpa_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"16cc3053b5568e50b5fa384baca6a40f\"}]},\n                      {snmpa_authentication_service,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc05c3f08dbdec4878aae7816eb5033e\"}]},\n                      {snmpa_conf,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"826ab227f8829b50aabc3072cf2a8537\"}]},\n                      {snmpa_discovery_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"50040fb1565d5888507dcffe6109cc16\"}]},\n                      {snmpa_discovery_handler_default,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62413e2497c617d1dabf1ab269610eb3\"}]},\n                      {snmpa_error,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fb436bf4d7bf0615c02c649c0e04541e\"}]},\n                      {snmpa_error_io,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"98147b5cfad093916c0756b37f763e86\"}]},\n                      {snmpa_error_logger,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b0431d9de22543e6608515bc4afc07c2\"}]},\n                      {snmpa_error_report,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"214d6585224898ce39f6eef6554593c4\"}]},\n                      {snmpa_local_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eb82eaa9a8486d087a27e834b58a2f6c\"}]},\n                      {snmpa_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e68b813ac1df34912af16ef01738f185\"}]},\n                      {snmpa_mib_data,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed334445e6e025059b2c9b618109cb9c\"}]},\n                      {snmpa_mib_data_tttn,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2f39357a667d3cb530b431fed0dfa674\"}]},\n                      {snmpa_mib_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79d8aff9ea8d71bce6eac0a6f01f53b8\"}]},\n                      {snmpa_mib_storage,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"22e11676e0303ea2f292534da8ae66f5\"}]},\n                      {snmpa_mib_storage_dets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f8c4649828d764370112243ccdbd2da3\"}]},\n                      {snmpa_mib_storage_ets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4410e4e89e46b6e2b818d3b002a98579\"}]},\n                      {snmpa_mib_storage_mnesia,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e3d387a72c28b5bf76d7a55ac39071a\"}]},\n                      {snmpa_misc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6c4244cad7870e2ec012bdd05281b182\"}]},\n                      {snmpa_mpd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8475e9d61092213166efe3667bcf0c06\"}]},\n                      {snmpa_net_if,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"258227a8467ed99df2f9e55cc7b5e9ad\"}]},\n                      {snmpa_net_if_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f57faf094fd82ceadc8527983194b2cd\"}]},\n                      {snmpa_network_interface,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"247221ee7ec97ee189ef5a8b5eb2d18a\"}]},\n                      {snmpa_network_interface_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec6d7d452145362e9dcc0a8be42b3280\"}]},\n                      {snmpa_notification_delivery_info_receiver,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"de84fce31ef758fbb04722b66e1b22d3\"}]},\n                      {snmpa_notification_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e0b2e493bbbe13f1f17f3fd0be7ce1f7\"}]},\n                      {snmpa_set,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7152d8c4f238062a801fb9b46115b1ee\"}]},\n                      {snmpa_set_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1739e0cf36ad6a9249a8a200409813b\"}]},\n                      {snmpa_set_mechanism,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c3bef6423ec85b3b9a144f17c3e3f6c2\"}]},\n                      {snmpa_supervisor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"19aa2eef0602df46711bdc98c67d105c\"}]},\n                      {snmpa_svbl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e4079d7e9812ac1c42274316b0f883c0\"}]},\n                      {snmpa_symbolic_store,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e0fe1dda713ed3048f51155e47932e06\"}]},\n                      {snmpa_target_cache,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02394ee2b706d7c26f027c960c659f39\"}]},\n                      {snmpa_trap,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6ffd78574b7c33a0a96bee64d310531e\"}]},\n                      {snmpa_usm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b121f7bf87a2d44a14aa42988c2072f3\"}]},\n                      {snmpa_vacm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d7c7855fb65468a2355c889aa26badb6\"}]},\n                      {snmpc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a474261cc18e1f80f0f742774e3b1417\"}]},\n                      {snmpc_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ce88a5b16fdc8fa367c8559a81eabcb8\"}]},\n                      {snmpc_mib_gram,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c8b4a0280a0bd9b0e89fd47361381583\"}]},\n                      {snmpc_mib_to_hrl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"88a2a7964f0b3501263eaf513a72e876\"}]},\n                      {snmpc_misc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"feadc3549879e928bcc4941ff25c1756\"}]},\n                      {snmpc_tok,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"37784c9fb162c53b0fae3cd77566bdb2\"}]},\n                      {snmpm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cfcde2ccea1b2dbfe7d6f3bead4df7d4\"}]},\n                      {snmpm_conf,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2d6eef427d28f7a96b5be06a0509ed8d\"}]},\n                      {snmpm_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5a026c01e17b82bd2fdcb31fb69ae51a\"}]},\n                      {snmpm_misc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02dd27ee95e3bbe3aab099b11120b826\"}]},\n                      {snmpm_mpd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1b593b66256ce780231c57b31298fd29\"}]},\n                      {snmpm_net_if,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"68d325a69b69e7de7106965a049522d2\"}]},\n                      {snmpm_net_if_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a83bf186eec6c82fd6c9b164fc337edb\"}]},\n                      {snmpm_net_if_mt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e44169e0549ab840243a2e4e0fa3d5fa\"}]},\n                      {snmpm_network_interface,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"47b0e15cd1537e1a3a1b41b8be44998e\"}]},\n                      {snmpm_network_interface_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"93b503aeb95e30d2fcf28c2b7d2e017e\"}]},\n                      {snmpm_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fdf5855cd385c8d4589d43f2aaddee8c\"}]},\n                      {snmpm_server_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1fc16c37e8db23a8b3e40d3696488a0d\"}]},\n                      {snmpm_supervisor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"289642b05307317c1684b5ba76cb81c5\"}]},\n                      {snmpm_user,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9c6e66b34460082bbcb99ccaf1cedbf3\"}]},\n                      {snmpm_user_default,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c8c7e1b66076bcbde4678471ee9066f0\"}]},\n                      {snmpm_user_old,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ae32fe52a746f3be59c94bac2b679fcb\"}]},\n                      {snmpm_usm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"59bb20fedd0aca2f57ce3b5dad4e50aa\"}]}]}]}},\n                 {application,\n                  {sasl,\n                   [{description,\"SASL  CXC 138 11\"},\n                    {vsn,\"2.3.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/sasl-2.3.2/ebin\"},\n                    {modules,\n                     [{alarm_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"250185bf9caa8aafeefc21d2dc85671d\"}]},\n                      {erlsrv,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"656c183c67d6d7556d846752ac2e0168\"}]},\n                      {format_lib_supp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be7d1b5e03f626bc3a081680842f3c69\"}]},\n                      {misc_supp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"57e2232dbb711535686b684350c6412a\"}]},\n                      {overload,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ce834faf427a10bffb528420385e75fc\"}]},\n                      {rb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c791582aa44b9701a38bea7b12a737c9\"}]},\n                      {rb_format_supp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f6df90c6b446bfd31471022bae098995\"}]},\n                      {release_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bc289c9b3ed6443f9e88a7a40b1bbd78\"}]},\n                      {release_handler_1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b7cbb150cbc1ad629936632bcf8700a\"}]},\n                      {sasl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8a39ff904fad2fb7b62b8745b34e29b9\"}]},\n                      {sasl_report,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"651a20fbd6df5b1c785152aecf691f13\"}]},\n                      {sasl_report_file_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d21420c495fb60e6be13677a923ff7b\"}]},\n                      {sasl_report_tty_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"165b304307e62adee19805a95d9b6ccb\"}]},\n                      {si,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ecfe8c3c35aba098dd3530398086bcc1\"}]},\n                      {si_sasl_supp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77c86cc1c9667be73a48dbcb3c480d36\"}]},\n                      {systools,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5514e0264308050ac1cc5cecaf74c950\"}]},\n                      {systools_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1aa9e6a22dccb94499d5609ce1cf66b\"}]},\n                      {systools_make,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d2c4d3e4b7b322b6629575a64e553f90\"}]},\n                      {systools_rc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4337b68dc98fbbed9e93f2bde9ef4d0d\"}]},\n                      {systools_relup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dd4bb2c6c8422b979b5a75e6f545baab\"}]}]}]}},\n                 {application,\n                  {runtime_tools,\n                   [{description,\"RUNTIME_TOOLS\"},\n                    {vsn,\"1.8.11\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/runtime_tools-1.8.11/ebin\"},\n                    {modules,\n                     [{appmon_info,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62c6dd94499d20f1776df7cd3267c100\"}]},\n                      {dbg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5a7b449f37506a70985c5b3f69ec579c\"}]},\n                      {dyntrace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"746609b1554ac41985637b5bba780905\"}]},\n                      {erts_alloc_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1a489439d8dded5734eab5eb575ce454\"}]},\n                      {observer_backend,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d9af82e565eecf62c161023fce415c58\"}]},\n                      {percept_profile,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"32909b64d30ade082680e9491a3ddbc8\"}]},\n                      {runtime_tools,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c569a23a42bf744f56abbf4215ca2a9d\"}]},\n                      {runtime_tools_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f52650d88ee6f6754ed9d109accb7eac\"}]},\n                      {system_information,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9ed879d33f6159b48fb25bc472369285\"}]},\n                      {ttb_autostart,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6838c97b9564b06d26e5f599adcee4a6\"}]}]}]}},\n                 {application,\n                  {reltool,\n                   [{description,\"Reltool the release management tool\"},\n                    {vsn,\"0.6.4\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/reltool-0.6.4/ebin\"},\n                    {modules,\n                     [{reltool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b15d15af1453d274df701f6c4b39da09\"}]},\n                      {reltool_app_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e15041fae657a7abcce63e7e775af842\"}]},\n                      {reltool_fgraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c07b7a13c2ae36b59f5d1f0daf8a567\"}]},\n                      {reltool_fgraph_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"230041769919290efa2a3419cf70c8cb\"}]},\n                      {reltool_mod_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"752d8f1d674a79955de7afd3ba6b561b\"}]},\n                      {reltool_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"135d9bb6ea57344472c185d61c97573c\"}]},\n                      {reltool_sys_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f02ff065d17fa8203d711b9cc698ebf4\"}]},\n                      {reltool_target,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"036440a327b1c9cbe5e404ffaf02b9a4\"}]},\n                      {reltool_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c623f90e0c5da5db65d4ca56d9088d7a\"}]}]}]}},\n                 {application,\n                  {public_key,\n                   [{description,\"Public key infrastructure\"},\n                    {vsn,\"0.19\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/public_key-0.19/ebin\"},\n                    {modules,\n                     [{'OTP-PUB-KEY',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d6f796b3667abf21828ee3daf8df487c\"}]},\n                      {'PKCS-FRAME',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4419b1988012d2d620ac3cc7dec13d65\"}]},\n                      {pubkey_cert,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7a4ac659e84ddfb1dc14f0608460fbfb\"}]},\n                      {pubkey_cert_records,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d5b1f48543bb6b0e62b343c2b965615f\"}]},\n                      {pubkey_crl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"680633b53ae9815138f804c999e78bbd\"}]},\n                      {pubkey_pbe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"517156230695474828dc4d30af59f656\"}]},\n                      {pubkey_pem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eef5632fcf01194dd6c98f116de8f923\"}]},\n                      {pubkey_ssh,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5acc6568d3caea9be2d2b93904f6bda9\"}]},\n                      {public_key,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7b054e72c6e34943c0143ac34edcc37e\"}]}]}]}},\n                 {application,\n                  {pman,\n                   [{description,\"pman The Process Manager\"},\n                    {vsn,\"2.7.1.4\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/pman-2.7.1.4/ebin\"},\n                    {modules,\n                     [{pman,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d0ea0aa857d089d112f46bed16fb83c\"}]},\n                      {pman_buf,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"efdccd7cb884a2a9c50cc70719d53575\"}]},\n                      {pman_buf_buffer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bfdd78d8905bd1bb7e07ee22414a0eae\"}]},\n                      {pman_buf_converter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"afd7e3173377b46ec7374c0e1118a158\"}]},\n                      {pman_buf_printer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7c592081860a9b92b08b557c46b11307\"}]},\n                      {pman_buf_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77e551e0bc43c59bf5a76f0e32daf822\"}]},\n                      {pman_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b4371d24cd7312794afb137de259b8e0\"}]},\n                      {pman_module_info,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0336677781cb813897e9306415f85b38\"}]},\n                      {pman_options,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"016b8cac7c507593a118b25ab3d642d2\"}]},\n                      {pman_process,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"faab007fad0f14fc692df152d60a8abd\"}]},\n                      {pman_relay,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b12bbe3e253211fac5006414f6f6162b\"}]},\n                      {pman_relay_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3b7eb65c7c1507892ed8f01a1b5e027d\"}]},\n                      {pman_shell,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3b9e7634fb49f1e84a57ed8cee5e3909\"}]},\n                      {pman_tool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"58ab631eed4b29ddebd390b4cd30c82f\"}]},\n                      {pman_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"697f4a56a374bcacf06e8329356f7b9d\"}]}]}]}},\n                 {application,\n                  {percept,\n                   [{description,\"PERCEPT Erlang Concurrency Profiling Tool\"},\n                    {vsn,\"0.8.8.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/percept-0.8.8.1/ebin\"},\n                    {modules,\n                     [{egd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"810926c65926827a80dc5de6e9cace80\"}]},\n                      {egd_font,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3f41911d6aa5ada509332aca159c905e\"}]},\n                      {egd_png,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"201db7435f6981d1d5b738c5431d4a39\"}]},\n                      {egd_primitives,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cba1711d459930f92725953bca582106\"}]},\n                      {egd_render,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b86b9269dfad8feb8753abfa8e9be68e\"}]},\n                      {percept,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"af81f6c6164ac09eafdfbe02a985976b\"}]},\n                      {percept_analyzer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"efe67a4369a96144def43df906f2ac94\"}]},\n                      {percept_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bff80fb7515c9c23977cceb2fba5e0f\"}]},\n                      {percept_graph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1444b51fa93b12bb98f6bf5246e079f9\"}]},\n                      {percept_html,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b84fd915479ddaa158366217f7fb2ff7\"}]},\n                      {percept_image,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec8d1dae1d54b90ccd7cce76d83573b6\"}]}]}]}},\n                 {application,\n                  {parsetools,\n                   [{description,\"XLATETOOLS  CXC 138 xx\"},\n                    {vsn,\"2.0.9\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/parsetools-2.0.9/ebin\"},\n                    {modules,\n                     [{leex,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c82fd5f503469e40008fb18b393b5421\"}]},\n                      {yecc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e644a07828dcb46e440058ec4e3ea83b\"}]},\n                      {yeccparser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"43c2c84fbd4caf3c3eacfe0e25874f3a\"}]},\n                      {yeccscan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cc55537c97f45738825ae56628fd4c71\"}]}]}]}},\n                 {application,\n                  {otp_mibs,\n                   [{description,\n                     \"SNMP managment information base for Erlang/OTP nodes.\"},\n                    {vsn,\"1.0.8\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/otp_mibs-1.0.8/ebin\"},\n                    {modules,\n                     [{otp_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b92358a169666b58abe47dc98b1ea1f8\"}]}]}]}},\n                 {application,\n                  {os_mon,\n                   [{description,\"CPO  CXC 138 46\"},\n                    {vsn,\"2.2.12\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/os_mon-2.2.12/ebin\"},\n                    {modules,\n                     [{cpu_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"071d377ab6c706f3c4404dfddf95316c\"}]},\n                      {disksup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"53255f9176fdf57c6d2c62a1e3ca8ce2\"}]},\n                      {memsup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d5aa81b4c0017f97827b13d588e907cc\"}]},\n                      {nteventlog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d593ff9832f59a682cb9a7217eb1dc55\"}]},\n                      {os_mon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f8fcf26c77f01a1542d007513e49c214\"}]},\n                      {os_mon_mib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"15ff2fbfd1c88ff31ff9c8e85bf10cb9\"}]},\n                      {os_mon_sysinfo,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2bed5dda663ec63a320198f44c90f388\"}]},\n                      {os_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"52837f657faabaab44288ba2d29ba473\"}]}]}]}},\n                 {application,\n                  {orber,\n                   [{description,\"The Erlang ORB application\"},\n                    {vsn,\"3.6.26.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/orber-3.6.26.1/ebin\"},\n                    {modules,\n                     [{'CosNaming_Binding',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f894f1ca2a53e8c68579c9e786884b64\"}]},\n                      {'CosNaming_BindingIterator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"938a503dbdbe3f091ce900dbe1efeeaa\"}]},\n                      {'CosNaming_BindingIterator_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"07513574b340d64ec6d50ebf98a772c7\"}]},\n                      {'CosNaming_BindingList',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"37aaba8fc8623355426055d3b9c2e2b8\"}]},\n                      {'CosNaming_Name',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7053bbff4a4dd27357c7ae2b7a1bd158\"}]},\n                      {'CosNaming_NameComponent',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4ef942efe3f30c93b89cbb79f0b0e372\"}]},\n                      {'CosNaming_NamingContext',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9e73232824e400a4b6f9a295922420a5\"}]},\n                      {'CosNaming_NamingContextExt',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fb072ace0d3d1445fa884fbb59d19ff6\"}]},\n                      {'CosNaming_NamingContextExt_InvalidAddress',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ba29a989c4d5c961c62bec9162bedd71\"}]},\n                      {'CosNaming_NamingContextExt_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ece2da1a74559421fd8c5a0fcce5a984\"}]},\n                      {'CosNaming_NamingContext_AlreadyBound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ba2061d5ba1cd24262351fa0b92b8850\"}]},\n                      {'CosNaming_NamingContext_CannotProceed',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"175c9f998a255ce625568ff7d7258988\"}]},\n                      {'CosNaming_NamingContext_InvalidName',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4b5bb3702b8105f78101d3deeb4c3717\"}]},\n                      {'CosNaming_NamingContext_NotEmpty',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0dbdfc178f40394391977946fdbf331d\"}]},\n                      {'CosNaming_NamingContext_NotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f2f4d6cf9150fcc92bd9568ff89d2774\"}]},\n                      {'OrberApp_IFR',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"67d245498b4abcae1f6acd51c4edc47e\"}]},\n                      {'OrberApp_IFR_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ab7e63e7a7e47bac6d2cc7e703f2915\"}]},\n                      {any,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1339baf3e573eee6bb558d0097bce4c2\"}]},\n                      {cdr_decode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dda23b10f13bec369113cf3ae72b9448\"}]},\n                      {cdr_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4d36c6b8ee3a9fddfdc76246030287ba\"}]},\n                      {cdrlib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d97ec0db3640dda02a25e6ecc9d5fa5e\"}]},\n                      {corba,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3794dffcd3c921332af2b343bb9e8e40\"}]},\n                      {corba_boa,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3dfd1417d677ca18f73c4efe65b37bad\"}]},\n                      {corba_object,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"569d7993c599bd7c2f68bf7a2d11fdbd\"}]},\n                      {erlang_binary,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0ec91157e3e220cc5163b552f3a4050d\"}]},\n                      {erlang_pid,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"49b95cc1773eeed11661fc4cb36b7921\"}]},\n                      {erlang_port,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2b0dd3969488714fc2e2dce30b297b14\"}]},\n                      {erlang_ref,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"98b38f4a590a67a1fa34b2c6d60e8992\"}]},\n                      {fixed,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"469aed745e70550ecb4ee6b382a0c919\"}]},\n                      {iop_ior,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1d3eeb1d5401ad27f97b75926cbf8387\"}]},\n                      {lname,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"945467530d2858f1dfb87b970a3862bc\"}]},\n                      {lname_component,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c2cb0fe6e60c6d07d711cd8c3b28c8f7\"}]},\n                      {oe_CORBA,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02e20118e9fd5c3f5d2f398851cbdcf1\"}]},\n                      {oe_OrberIFR,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ebc39f59cbd7848e61193c82ab0ee2b9\"}]},\n                      {oe_cos_naming,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"18745eadd8db295fc1e8e656a5c8d4d6\"}]},\n                      {oe_cos_naming_ext,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"56520dda2639eaadae720ac4974080d5\"}]},\n                      {oe_erlang,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"963486a48402a80366275f8dace2a80f\"}]},\n                      {orber,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b4c2a1e44684d8f314230f21def86f2\"}]},\n                      {orber_acl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"76577170937f03fa23e69e4df6cfc424\"}]},\n                      {orber_cosnaming_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f856cbb99314e9eb7d0d7bfcdb30994e\"}]},\n                      {orber_diagnostics,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"656103538d0ee20b1433c6b2909b26c0\"}]},\n                      {orber_env,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"75b0fa232da40432e3009ead263f3749\"}]},\n                      {orber_exceptions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ef09c1b3026ef3aaae5e9c6a5dd2918\"}]},\n                      {orber_ifr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0fed5973a29d60ab161580bf07f3b185\"}]},\n                      {orber_ifr_aliasdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"941404668a378948bbef59da18973eea\"}]},\n                      {orber_ifr_arraydef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4a1ebba0a7f7a26d5205972ac2bc6fc6\"}]},\n                      {orber_ifr_attributedef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"141fa0d0127d292e0bfc3f0e654059df\"}]},\n                      {orber_ifr_constantdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"337388d13414ab58cdafcbd70a150741\"}]},\n                      {orber_ifr_contained,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a825abb903208287bc2dfb7323342fe6\"}]},\n                      {orber_ifr_container,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3027632d783e5db3440bead382fbc787\"}]},\n                      {orber_ifr_enumdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f031b9d117143554a1db00a0f7f9d4af\"}]},\n                      {orber_ifr_exceptiondef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6e152b750cbb286b90ec49855c9f8115\"}]},\n                      {orber_ifr_fixeddef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c0f66c8a6999241daec6815a1eaf7112\"}]},\n                      {orber_ifr_idltype,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7f5b0c9c79289e56f5cfe24c5de10c26\"}]},\n                      {orber_ifr_interfacedef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"985cc443e424939f7f067e9d577c0044\"}]},\n                      {orber_ifr_irobject,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"441a6a89092f9059eddaafb3a19fddac\"}]},\n                      {orber_ifr_moduledef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"571791fe8c191478f9d99008066db451\"}]},\n                      {orber_ifr_operationdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"26ff4727920661a5777fdfeb9542447d\"}]},\n                      {orber_ifr_orb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9f82245f4568a7ad57b93005504b22f3\"}]},\n                      {orber_ifr_primitivedef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cad06f8ddc116042d7dd2f54f189dc9e\"}]},\n                      {orber_ifr_repository,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"88fc8f59fe5a883e6a5cc76c9db0a8f0\"}]},\n                      {orber_ifr_sequencedef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"55db89bec3e336bf1a1087b8b24ec0c9\"}]},\n                      {orber_ifr_stringdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7119d2c1827fbfe04397a23e0c9b7bea\"}]},\n                      {orber_ifr_structdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2e0643a9e51eb2fe1bb3268623005b9c\"}]},\n                      {orber_ifr_typecode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"52a2bebb663486dfde545175b24f1db9\"}]},\n                      {orber_ifr_typedef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1440f73d398af50ec1f1854b68a7ba14\"}]},\n                      {orber_ifr_uniondef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1a767805d679f87ec96f566ea535b0ae\"}]},\n                      {orber_ifr_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a7a7127b079023e8507c1963bb70c6a8\"}]},\n                      {orber_ifr_wstringdef,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d9705c3d0a8e75958cfc92c0e065688\"}]},\n                      {orber_iiop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"08e63cf45c6b87ef390f1ba44908df62\"}]},\n                      {orber_iiop_inproxy,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7d958ccebf1795810daf42c284df0b0e\"}]},\n                      {orber_iiop_inrequest,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"01cf6a0b86d8575aad71a64d1ead078f\"}]},\n                      {orber_iiop_insup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3f3e97ae477f58ab983bbf78c5691a6b\"}]},\n                      {orber_iiop_net,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cf48384275f94de84a88f985e69db8c5\"}]},\n                      {orber_iiop_net_accept,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"311c1717af0f83c768a7904bd4f35d87\"}]},\n                      {orber_iiop_outproxy,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aadcfde8449aad07dda946c4fe8ae73f\"}]},\n                      {orber_iiop_outsup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4bb6aa4ab42569ea07e6410eec054d96\"}]},\n                      {orber_iiop_pm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3c23eac6eed61ab8f4b0376bada6a96c\"}]},\n                      {orber_iiop_socketsup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"41cb70052711397c5ff4346c78bad0bc\"}]},\n                      {orber_iiop_tracer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3db9add6a744c5d57f2f88593010189c\"}]},\n                      {orber_iiop_tracer_silent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ddc6f4254d9d55920c182bfc82174cd5\"}]},\n                      {orber_iiop_tracer_stealth,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b5c2faed84597fcc65a1f79f126d38ed\"}]},\n                      {orber_initial_references,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"52d7435fcf9d9b18c41cd15112211641\"}]},\n                      {orber_objectkeys,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77601464765a034f2157e184b66b27bf\"}]},\n                      {orber_pi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7772668cb95512b5068384cffb15f5ec\"}]},\n                      {orber_request_number,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ce4912e1c1726a3edd4d2709171895ad\"}]},\n                      {orber_socket,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ea78f1c75c253c070f2b3423b896667a\"}]},\n                      {orber_tb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d9b508906d187e6448fd06b88923aea\"}]},\n                      {orber_tc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f43cb767b9c01d13d190a56574aa504c\"}]},\n                      {orber_typedefs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"82369e4a3e862ef248d19c460b2df8ea\"}]},\n                      {orber_web,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"23cc5e9ac5ffe3b7ac2315ae0759243c\"}]},\n                      {orber_web_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c95b45e743c0a1f7a2e88e350075f78c\"}]}]}]}},\n                 {application,\n                  {odbc,\n                   [{description,\"Erlang ODBC application\"},\n                    {vsn,\"2.10.16\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/odbc-2.10.16/ebin\"},\n                    {modules,\n                     [{odbc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2763e2d38d62e1fbe7c8ed231cce1905\"}]},\n                      {odbc_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"83f4d02ba9fd29ff84576abe0fde901e\"}]},\n                      {odbc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3c39c9a6e602d66a2d12b662bf0a9b20\"}]}]}]}},\n                 {application,\n                  {observer,\n                   [{description,\"OBSERVER version 1\"},\n                    {vsn,\"1.3.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/observer-1.3.1/ebin\"},\n                    {modules,\n                     [{crashdump_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77bff2805dfd88de4320b9f8c1469fe3\"}]},\n                      {crashdump_viewer_html,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d22f72c96ed77a6e4cabe125db6c8419\"}]},\n                      {etop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"377b59a76eeb5edb5b8531b5f0267399\"}]},\n                      {etop_gui,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f0421b554807cd47031f0873f649d5e1\"}]},\n                      {etop_tr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d152946c82611d5f39b1ed3c720cb570\"}]},\n                      {etop_txt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a02a670a9ee8ea7c3cea6de5bdcfa356\"}]},\n                      {observer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e7d30dfe8122c8736eeac0582abb076\"}]},\n                      {observer_app_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e6130cbc700be448c7f64c7f8bcefcc6\"}]},\n                      {observer_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0973e064b3b2ff3b79f2f1eed47a8539\"}]},\n                      {observer_perf_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b5753467f635c1a98ad5e3f2e50f75f4\"}]},\n                      {observer_pro_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1e68919849e91012fd156d3ac6228af\"}]},\n                      {observer_procinfo,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"175c07cc3510655fbdfe95a35012a84a\"}]},\n                      {observer_sys_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7637a94c99800b8b1c47467f7411fce6\"}]},\n                      {observer_trace_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a836a58f29e21107efbf7fa3276c0ff6\"}]},\n                      {observer_traceoptions_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e070e083bc809e6bd67284d46876292e\"}]},\n                      {observer_tv_table,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3dfa1b811025f5313ba91c620bdafa62\"}]},\n                      {observer_tv_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c8661053d6b3b563582c335e6e18bc2\"}]},\n                      {observer_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"72d4b855d618e72367b3b26a9c9fe22e\"}]},\n                      {ttb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"08eec178cb05729190be64adbfc06fd4\"}]},\n                      {ttb_et,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"18006f41b1483c5378d0d803bb73428f\"}]}]}]}},\n                 {application,\n                  {mnesia,\n                   [{description,\"MNESIA  CXC 138 12\"},\n                    {vsn,\"4.9\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/mnesia-4.9/ebin\"},\n                    {modules,\n                     [{mnesia,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7ef269bdcc2f2ebecc93eed4a7d97e43\"}]},\n                      {mnesia_backup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"50581e2e99465b9ab9adb11193ccbcb8\"}]},\n                      {mnesia_bup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"63c4dc59c47dedf48fb8a67b3aee3a5a\"}]},\n                      {mnesia_checkpoint,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"57fca37f2b0e856bb728f0660f6ad017\"}]},\n                      {mnesia_checkpoint_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"211e3b158a5869145c472cc12080a148\"}]},\n                      {mnesia_controller,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a4d98077e647433bbd4dfe9215bf45c0\"}]},\n                      {mnesia_dumper,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"32b0759359dcf8f05af72e914720ceaf\"}]},\n                      {mnesia_event,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bb423661483d17e8aaa683a22600aee7\"}]},\n                      {mnesia_frag,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"279eb6b4f1f713c9960f1697856030e7\"}]},\n                      {mnesia_frag_hash,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7ca1e314bdfa381005e047965e7fe435\"}]},\n                      {mnesia_frag_old_hash,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"70dd3592f65741eefd724448e56427a3\"}]},\n                      {mnesia_index,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79261cc27d922d6eeecac20a90920cd0\"}]},\n                      {mnesia_kernel_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8f6da4fd3cf0ce074bf7b04e44e86470\"}]},\n                      {mnesia_late_loader,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02a44f59cd50a3b6fcb78198781e8e7b\"}]},\n                      {mnesia_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"08abcd0826ef6dce6929ca1741c156d7\"}]},\n                      {mnesia_loader,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b316a61b4f5ce23b5c7e4bcfdaf6367f\"}]},\n                      {mnesia_locker,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"847d79bf891a9bcffda9e12458490e7e\"}]},\n                      {mnesia_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8ae50e4995027fe6229091521e842b1e\"}]},\n                      {mnesia_monitor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"105c199cb846668f52e583faee684690\"}]},\n                      {mnesia_recover,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91044c669bf165c1d9bb72d76da7135c\"}]},\n                      {mnesia_registry,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aa46aa5634381be997d54dbbf8da99d1\"}]},\n                      {mnesia_schema,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"19676af000bf38b666e545b3c6f22937\"}]},\n                      {mnesia_snmp_hook,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f994954a18270025bf505af1a1dd1244\"}]},\n                      {mnesia_snmp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bb3f27cfb0a3fa51e062ca6e86973a3f\"}]},\n                      {mnesia_sp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"86565dac38aae327be11f08e8d2e05e8\"}]},\n                      {mnesia_subscr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a02b0b2458f5900927d72010d097ea94\"}]},\n                      {mnesia_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"309a5b00197c57437131eec4ce49c560\"}]},\n                      {mnesia_text,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3008beca178112720e4dc18ec6325583\"}]},\n                      {mnesia_tm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7be29c00407f6162375a0d855b36c68d\"}]}]}]}},\n                 {application,\n                  {megaco,\n                   [{description,\"Megaco/H.248 protocol\"},\n                    {vsn,\"3.17.0.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/megaco-3.17.0.1/ebin\"},\n                    {modules,\n                     [{megaco,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1621bcd17d72f8165b568b33e80badff\"}]},\n                      {megaco_ber_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"12ccb5c139d29b2066d3317a2f6c166f\"}]},\n                      {megaco_ber_media_gateway_control_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c13becbea3de6bd37af08cd022c5b5a1\"}]},\n                      {megaco_ber_media_gateway_control_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"721176c1221d7ea112757ebe621508fb\"}]},\n                      {megaco_ber_media_gateway_control_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c4546f9416ae2b969c41f114c777b994\"}]},\n                      {megaco_ber_media_gateway_control_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0f352af0a5bfe76b5ca6a6393ef0782a\"}]},\n                      {megaco_ber_media_gateway_control_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2321767a4aeeadca11a92a77da4bb488\"}]},\n                      {megaco_ber_media_gateway_control_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"851782cffe570769b46773bc55073bc5\"}]},\n                      {megaco_binary_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5e378f272d26a606b7d8b99accc472ff\"}]},\n                      {megaco_binary_encoder_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1eaa0f4ac077056d2753b4945acac2af\"}]},\n                      {megaco_binary_name_resolver_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"afc05954d77f1580e3e3119b28b2ee18\"}]},\n                      {megaco_binary_name_resolver_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64eca1a5ca4891ec6cb56e5b3b747cb1\"}]},\n                      {megaco_binary_name_resolver_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7ab8daa26dfc1ecd8593ea03f037e0b1\"}]},\n                      {megaco_binary_name_resolver_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8a28e0729df9ed41a27d38e76d2b1efc\"}]},\n                      {megaco_binary_name_resolver_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6e831098553576721cfa3187f3246577\"}]},\n                      {megaco_binary_name_resolver_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"adc24901b71b89a59191caa575777136\"}]},\n                      {megaco_binary_term_id,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"82f36dc610c932eb0e6ca2e9002d6c5b\"}]},\n                      {megaco_binary_term_id_gen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b1f0904c943c78f55b67da76203955d\"}]},\n                      {megaco_binary_transformer_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fff3d874f36cfbc32dbbbc5078dcd380\"}]},\n                      {megaco_binary_transformer_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"33cc44d1bf46cd3bfb5aea29887bcd57\"}]},\n                      {megaco_binary_transformer_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ef3fe41f1f88c54aa4fb1caac2724337\"}]},\n                      {megaco_binary_transformer_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f916e19a7725a6887c4f88395c9af607\"}]},\n                      {megaco_binary_transformer_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d4c8f6b31357bc55c13c7b7881a9a775\"}]},\n                      {megaco_binary_transformer_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ab88024bec5e1fd3c03923d1d0e5119a\"}]},\n                      {megaco_compact_text_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bf7e1fe374598225fd46f38b81e07d9f\"}]},\n                      {megaco_compact_text_encoder_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"23e6620407ec5197028fa798bf01e51a\"}]},\n                      {megaco_compact_text_encoder_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a475f5b036fb0aa3dd35f86ff1d3c3fd\"}]},\n                      {megaco_compact_text_encoder_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2cbd43381f15e24a25a85797028851d5\"}]},\n                      {megaco_compact_text_encoder_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b193fe2860d7e926e73b71c501412b07\"}]},\n                      {megaco_compact_text_encoder_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"777b3a6ecc8b41b8bbab1ad70c7bf6ae\"}]},\n                      {megaco_compact_text_encoder_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e481d7fc5b319d95e6b6d7301837211c\"}]},\n                      {megaco_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"895d349eeee863ee722653edb146eec3\"}]},\n                      {megaco_config_misc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"275e3e57bae4ae030b1e8f2be4a4ece2\"}]},\n                      {megaco_digit_map,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e82b7b9950adc2a9b92418b741056198\"}]},\n                      {megaco_edist_compress,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"de4bb8d979b71e2a77bc6480c755f0e0\"}]},\n                      {megaco_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"323b5d062600331842c9a23dd847ce29\"}]},\n                      {megaco_erl_dist_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6523fa00adc2e065d8418983cb9caa83\"}]},\n                      {megaco_erl_dist_encoder_mc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"41066ab829e0f8ebc457c8e087e029db\"}]},\n                      {megaco_filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"778b451ec26564a06b01bb6449e62004\"}]},\n                      {megaco_flex_scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"76674c634aab23d50f8746016a4a0be5\"}]},\n                      {megaco_flex_scanner_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"eeafd9d64269893a5e719f9791e846ec\"}]},\n                      {megaco_messenger,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7fc902eabe8adb5b0fe33e79b000ddbd\"}]},\n                      {megaco_messenger_misc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3bee9043dce0a684cdd1cd8134a370a4\"}]},\n                      {megaco_misc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"441b7ad486bf4eef899e02f97ba14768\"}]},\n                      {megaco_monitor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6da74b6f55cbbbacdea077af0a845ef1\"}]},\n                      {megaco_per_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"58c49d0f60e2132cef575414c82a917b\"}]},\n                      {megaco_per_media_gateway_control_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b84247f3fbcda78fd09755f5368ade94\"}]},\n                      {megaco_per_media_gateway_control_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a981605bd179636baebaef5ff6ebc806\"}]},\n                      {megaco_per_media_gateway_control_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f30445cfec10f8cbd55fe17c6724b53c\"}]},\n                      {megaco_per_media_gateway_control_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0fe217237913122558c928dd10ef79f5\"}]},\n                      {megaco_per_media_gateway_control_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d1a9dfc04639677dfb27b24b2829f7ad\"}]},\n                      {megaco_per_media_gateway_control_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e967677da6dc54388db01f5c1545c77e\"}]},\n                      {megaco_pretty_text_encoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b9dce15ad90abfcf6a7cc93391dbdc64\"}]},\n                      {megaco_pretty_text_encoder_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1b00d8cfa3efaae8d225da7007dada64\"}]},\n                      {megaco_pretty_text_encoder_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aa844b22554dca495b913fc57cfa3013\"}]},\n                      {megaco_pretty_text_encoder_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91b54a6e884a8afa32ffaa8352893baa\"}]},\n                      {megaco_pretty_text_encoder_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c6db8e013212168a6df39fca101e3aa\"}]},\n                      {megaco_pretty_text_encoder_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"079587bd6b00f80224aaeec199380224\"}]},\n                      {megaco_pretty_text_encoder_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d3a6f2cc1885299f91fb769fd4a1cb01\"}]},\n                      {megaco_sdp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7e2d41d949f9ab2404116f809237301a\"}]},\n                      {megaco_stats,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"03152bbddea7c1e557224711c4b97892\"}]},\n                      {megaco_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cb7802016626e692d5a8519f536cf3d2\"}]},\n                      {megaco_tcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"15cec9b1865d957412d0945e11bd5630\"}]},\n                      {megaco_tcp_accept,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4999b86506c5da0b256de8fdf1423c20\"}]},\n                      {megaco_tcp_accept_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91e916f8b5d3aec78b129abb2064f229\"}]},\n                      {megaco_tcp_connection,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"53c5b634698b54c66de0676289c52222\"}]},\n                      {megaco_tcp_connection_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"48ff5ffa59eb95858702320eed91bf59\"}]},\n                      {megaco_tcp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"597fe1780a9081757e42b57e5ebef1b2\"}]},\n                      {megaco_text_mini_decoder,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4675bc758b6dfade5a21f345c13fd523\"}]},\n                      {megaco_text_mini_parser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dbc886fe01447c012941de8bbcb8b1e7\"}]},\n                      {megaco_text_parser_prev3a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc946659afb87b8bcd032cd513206016\"}]},\n                      {megaco_text_parser_prev3b,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d0158fa2aa0880bfcfcea1249e90a259\"}]},\n                      {megaco_text_parser_prev3c,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9acb9c582674145c94ada5f3bc58567f\"}]},\n                      {megaco_text_parser_v1,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cfc2972ed82568f1212b10aa5f54a5bf\"}]},\n                      {megaco_text_parser_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"38f90460cdfcaf135be0f96917b2f7fa\"}]},\n                      {megaco_text_parser_v3,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e9afc2c639e48188d332c8bccf39588\"}]},\n                      {megaco_text_scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d050061e3c87e8f1964b063624202b3\"}]},\n                      {megaco_timer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1252b5457aeb62266567e5905d4fa76f\"}]},\n                      {megaco_trans_sender,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3be0e627b81fb19dc7a3e27885f0958d\"}]},\n                      {megaco_trans_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c89becbc7e0e3b62c0ee8fac09f5adef\"}]},\n                      {megaco_transport,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8ad32251f0bd50e9289ae09286daf84e\"}]},\n                      {megaco_udp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4274133166af4f35b78505125ca3280a\"}]},\n                      {megaco_udp_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"84b71d1f62b9e3958dc6bc55ea87dd5d\"}]},\n                      {megaco_udp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e05c1a2e530417dee164ad41e4fa8888\"}]},\n                      {megaco_user_default,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"604d252f88e8e7de2e8b2941d6f2fc2f\"}]}]}]}},\n                 {code,\n                  [{path,\n                    \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/jinterface-1.5.8\"},\n                   {modules,[]}]},\n                 {application,\n                  {inets,\n                   [{description,\"INETS  CXC 138 49\"},\n                    {vsn,\"5.9.5\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/inets-5.9.5/ebin\"},\n                    {modules,\n                     [{ftp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f75e6a1763c0f8ad63c48fee7762bd08\"}]},\n                      {ftp_progress,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a9f1247decddc2091349cc0c561740ba\"}]},\n                      {ftp_response,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8184ca2df27024d938c1745b9b46b21b\"}]},\n                      {ftp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"23491501dc6175d1a49c2bbb888642a9\"}]},\n                      {http_chunk,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2d127d36200e815d589b358178ae3d98\"}]},\n                      {http_request,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c9d27256b8abc0a4752a98c5fab193d9\"}]},\n                      {http_response,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a327d5e08590cae728288f395b5880ea\"}]},\n                      {http_transport,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fefac9e86284528e5883735ff02f9635\"}]},\n                      {http_uri,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d8dafbcdb6a18c64161cda56b762aea\"}]},\n                      {http_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"948c60f737d5c6d13e9e19b518eb5dcc\"}]},\n                      {httpc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"12f827ea3b4a60e6abe352016df83794\"}]},\n                      {httpc_cookie,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"55dbb04357dcd95196eb831ae6c88924\"}]},\n                      {httpc_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"13538972414b85062867ba8f72b63a6a\"}]},\n                      {httpc_handler_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d291f5169c3ee61ab92b272e5612628\"}]},\n                      {httpc_manager,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fbc2349ce89229b7aab1397e920c4a23\"}]},\n                      {httpc_profile_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"71f19372131a26ce3fec7fe59cae62a6\"}]},\n                      {httpc_request,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0f9b151b009d24a06987f46db7a7ab32\"}]},\n                      {httpc_response,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"df4086639fe81d9d6b0b0f1c27d783c8\"}]},\n                      {httpc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cac51bc379bec99f8e2fe737e6701177\"}]},\n                      {httpd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"965f24797bd0ecb2662f8cccbf5a114f\"}]},\n                      {httpd_acceptor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"60c4ec255f9d3e71ca247d690fc050e3\"}]},\n                      {httpd_acceptor_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"146196f8aa54e2872ea09789bf43167e\"}]},\n                      {httpd_cgi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"493bef6896bc09b2a84424756e6aa2d6\"}]},\n                      {httpd_conf,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"122f251eb11290e92a55da1a97647ff7\"}]},\n                      {httpd_esi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f0a20e7f4efd148111074d6c027a749d\"}]},\n                      {httpd_example,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e8699c78100cc50e49ac578b154e491\"}]},\n                      {httpd_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"30702eec4e62275db10ea6e81cd67866\"}]},\n                      {httpd_instance_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d7ab2c856e6d5438dd3144b284ee396\"}]},\n                      {httpd_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"12fc1dfa3734ae50f2b5912d1245d63d\"}]},\n                      {httpd_manager,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ae9176839ab029c3685eaa1e9b2b90d9\"}]},\n                      {httpd_misc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c61eb0828079a16033e6b33e8095104\"}]},\n                      {httpd_request,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a91f7e3de28a17002b2923df84f4b01e\"}]},\n                      {httpd_request_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2b44228586d6ef9df1fb9bbcdf8e395a\"}]},\n                      {httpd_response,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"73a06662a9f1ea7bb68ea6e0487ff3c0\"}]},\n                      {httpd_script_env,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"348c3920cf5e3c2137127c4a1e1345b4\"}]},\n                      {httpd_socket,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2f021c0b5923e108fd344cee27e360a2\"}]},\n                      {httpd_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7814cf6981a80379606be6a64d684e24\"}]},\n                      {httpd_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4b6d1e4e24096bf68e395c2105f9ddce\"}]},\n                      {inets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5dea85fffabe81e273c12c78d57d3ea7\"}]},\n                      {inets_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0cc5b16bf76fdd61cc3fcc189509b4cb\"}]},\n                      {inets_regexp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d90aa0458fda8b4878dc77b59f3a996\"}]},\n                      {inets_service,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fda2c34b97323c1cc7756e681f50073f\"}]},\n                      {inets_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c8287946a050dad1ffd422678150174\"}]},\n                      {inets_trace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"38930cb6dedec461e1cb409ee6902dc4\"}]},\n                      {mod_actions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cd04b142450e4b2a6681a67ff53fe983\"}]},\n                      {mod_alias,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"488cd71dcfc552f96603b8ae70cffbc8\"}]},\n                      {mod_auth,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e4c582f449cb199ea9cc8d5a7004a9da\"}]},\n                      {mod_auth_dets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"43a467ba929f04d907a1a6ba11bb1893\"}]},\n                      {mod_auth_mnesia,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3d3fe40e66d1a310a5814ead817db4f\"}]},\n                      {mod_auth_plain,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1692c15dbed5d5a680dbac4354569ec8\"}]},\n                      {mod_auth_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ee144579a7fd9a4a761307385f6ef449\"}]},\n                      {mod_browser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b4187d14f39e293330958d7ed7f61ce5\"}]},\n                      {mod_cgi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4e72a465306011f4ac2a88f03cd6c9dc\"}]},\n                      {mod_dir,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec5cbec9126f452057ed437dba2051b2\"}]},\n                      {mod_disk_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"702d6f87d24465d11d91f561fd11f7b6\"}]},\n                      {mod_esi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e83eabd7527ed663b93fd5a58a587be4\"}]},\n                      {mod_get,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8dd5d81c6a7cc426524180332edb7a14\"}]},\n                      {mod_head,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3a62a5beb75a1b60206669499f77130e\"}]},\n                      {mod_htaccess,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1bf3f03a28de0bf786813fc181fdb85f\"}]},\n                      {mod_include,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"145c3dccff68b053b1db14d5f92488a2\"}]},\n                      {mod_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5417983275ff4ded18c546c70b8cc7e5\"}]},\n                      {mod_range,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"03a0b6a05ae0fd306c5b3f20bb6e05b8\"}]},\n                      {mod_responsecontrol,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0ebe00aaf53af7508dabc9d09b949a0b\"}]},\n                      {mod_security,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"423eb8f57b9a8bde28e3da13db3de59d\"}]},\n                      {mod_security_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cca3960b3899a1a7a4581afc69d7a5cc\"}]},\n                      {mod_trace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62fba170a84e8fdb39c8744f64b37a64\"}]},\n                      {tftp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ade4b7390488800507debf97307bd963\"}]},\n                      {tftp_binary,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"67a1747702ba0bff57a6f8aaa883b9d2\"}]},\n                      {tftp_engine,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fb9e0ee93bfa57bd7ef5a038c23edecd\"}]},\n                      {tftp_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"48fd419a1467c45c1e7057cdbb59a0a7\"}]},\n                      {tftp_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f666dd774c5c60c7ff175b19ade12b2d\"}]},\n                      {tftp_logger,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"151ed197576a35d060b7bbf3c74bdf7f\"}]},\n                      {tftp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7fc8de866dbc9c30b3d91a8adf8ebf0c\"}]}]}]}},\n                 {application,\n                  {ic,\n                   [{description,\"The IDL Compiler\"},\n                    {vsn,\"4.3.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/ic-4.3.2/ebin\"},\n                    {modules,\n                     [{ic,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fe764abce09fdd454d880128d9ddda2c\"}]},\n                      {ic_array_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"227ce84fee6671f9cdf93fb8048f596c\"}]},\n                      {ic_attribute_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"975e0b45c8a9ce1cb4551fdfb76cbd11\"}]},\n                      {ic_cbe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"43ac10b9d3c5142c747d99c3b9dad4d7\"}]},\n                      {ic_cclient,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"73ec31c28859c6c5d6e5dc91b6ce5411\"}]},\n                      {ic_code,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02d51ffcaef78b26a0bc8c680938fb53\"}]},\n                      {ic_codegen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"41159947a7c4259a58fec12f96d02d69\"}]},\n                      {ic_constant_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ca029a6c4023f792cdd8fb9052241416\"}]},\n                      {ic_cserver,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bf63d17869ccb762e0edab496be39e09\"}]},\n                      {ic_enum_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ab555fa7842eec8c99e22d11060e6430\"}]},\n                      {ic_erl_template,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"04c3d10872a5ab6edd781ae24512b6aa\"}]},\n                      {ic_erlbe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"add3f7151efb782e2437bb626a7d51fd\"}]},\n                      {ic_error,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6379a791ac55b3542b5db5a1e329439d\"}]},\n                      {ic_fetch,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bdc5454c6fe20b3a28d3a10ea4a7b3ed\"}]},\n                      {ic_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6597963c839cab5b5591eb1dcaa6a9a1\"}]},\n                      {ic_forms,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bcfeec18c0f2bc54dd64694b0f6d82e\"}]},\n                      {ic_genobj,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"97c379af6629a74a7b70c60e6338a245\"}]},\n                      {ic_java_type,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"40d0d5d7707b0d63119fdc658f7f3084\"}]},\n                      {ic_jbe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7e2429e630ce4f7dad22af0d4ab242b7\"}]},\n                      {ic_noc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c8e61ad2dbb06818f812f1a3dcf0f16c\"}]},\n                      {ic_options,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f9f64ecd00b68edfcf38b61e79bd0b80\"}]},\n                      {ic_plainbe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"44ee00595baf6554efbdb45d3ee28937\"}]},\n                      {ic_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"857d2fb9fea30b14657b1c4a86d08386\"}]},\n                      {ic_pragma,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4f69abbe96dd3cbebbff573664fe0997\"}]},\n                      {ic_sequence_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fdf12c1c5c020249ba9966ed529e5062\"}]},\n                      {ic_struct_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4120b045ef93f4db9bea6c9f14180ca6\"}]},\n                      {ic_symtab,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9c8ba1bfdd061a5e6864f86c957d6408\"}]},\n                      {ic_union_java,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b9b140a193c08210aa09a4484d9a54f3\"}]},\n                      {ic_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c6ce2a93793c15e09c8e18ccca534772\"}]},\n                      {icenum,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a53766074b7015a3bae4631d87f017e7\"}]},\n                      {iceval,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d60924eb402c253265ef229824856baa\"}]},\n                      {icparse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f2a14e584b40aa5b9e79c5f3101dfb3e\"}]},\n                      {icpreproc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"14b63dc40d8160ee25e0f829a0d088c6\"}]},\n                      {icscan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c8e2841047e577935f05c0b5cb10b02\"}]},\n                      {icstruct,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3fc6b7d763b490773a0c893a541b3d3a\"}]},\n                      {ictk,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"00ad73c637ec333d51a0905c46381eb0\"}]},\n                      {ictype,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8cfb0ed8d61bdff82302c4b52716ebf0\"}]},\n                      {icunion,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"db222ee3335d7b431061d104f6ecf9b2\"}]}]}]}},\n                 {application,\n                  {hipe,\n                   [{description,\"HiPE Native Code Compiler, version 3.10.2\"},\n                    {vsn,\"3.10.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/hipe-3.10.2/ebin\"},\n                    {modules,\n                     [{cerl_cconv,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3f8e5afb7f644e20ecc93eff288091d3\"}]},\n                      {cerl_closurean,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"598014277bdc97eb3e42db827964786c\"}]},\n                      {cerl_hipeify,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c67cb3c827232c389de98edcb669a6f2\"}]},\n                      {cerl_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"81c8c4cc2fddba367e557bb8fa3e46b1\"}]},\n                      {cerl_messagean,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d45d1cf2112a30de90c6e02674b471f5\"}]},\n                      {cerl_pmatch,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"592ae9106c429413eef5bca3404a312a\"}]},\n                      {cerl_prettypr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c10b7a51c482eaae5d5bb5156072faed\"}]},\n                      {cerl_to_icode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"975ca9009d46f139766227e24f00167b\"}]},\n                      {cerl_typean,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2407a7ab5367d3d2112283c1ddfc53a2\"}]},\n                      {erl_bif_types,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"0a6c9083ace0be207cc54681c6cbf565\"}]},\n                      {erl_types,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"42d756bf4eaf470785a1b81838979af7\"}]},\n                      {hipe,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"32e6ef5c8585a438373c41e5a5d75d91\"}]},\n                      {hipe_adj_list,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e5bc155da44d7631411dfc1a02fec2ef\"}]},\n                      {hipe_amd64_assemble,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1647b309190377cb226db1314fcac5cd\"}]},\n                      {hipe_amd64_defuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d3829c95a7eed25abc393e29da9bbf19\"}]},\n                      {hipe_amd64_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"49079178cae281b4645ae6f25ce18838\"}]},\n                      {hipe_amd64_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4476b9c0703b2a8473aa502dc6bdada8\"}]},\n                      {hipe_amd64_liveness,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"9fab826ab4bd5d716173c1f3b3b4d347\"}]},\n                      {hipe_amd64_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"52b41c777e65aeea7e35a9321585d34a\"}]},\n                      {hipe_amd64_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4eb339172dae5c27d67b4410de84f51f\"}]},\n                      {hipe_amd64_ra,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"73bf464fdfd7cf668efdffc3fc78c352\"}]},\n                      {hipe_amd64_ra_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7bc4f317d89794f58a1a0bda3b599879\"}]},\n                      {hipe_amd64_ra_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"5c0509cfd228b140247a46214243a415\"}]},\n                      {hipe_amd64_ra_naive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6a50f0f7d1c454c50975d6d0b3eb3c4e\"}]},\n                      {hipe_amd64_ra_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1ed593df4c9da2fe96da00274117f1b4\"}]},\n                      {hipe_amd64_ra_sse2_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"277417561a1fed88867bfdafe9e1c580\"}]},\n                      {hipe_amd64_ra_x87_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"8684b37d2d952516b2f8e77426decaf2\"}]},\n                      {hipe_amd64_registers,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"02db134b8e57405134b8e68a9f0588d3\"}]},\n                      {hipe_amd64_specific,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c66c33708abe9f32d36337c358a73530\"}]},\n                      {hipe_amd64_specific_sse2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"f0e4d5df03612b82d8cffecd5f9d4a84\"}]},\n                      {hipe_amd64_specific_x87,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3a28b90d577a9db6ef4b70d9defbd863\"}]},\n                      {hipe_amd64_spill_restore,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"81a80af9658effa33fdfe85f6161a35a\"}]},\n                      {hipe_amd64_x87,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b55ded15ce4283908342b2824226406b\"}]},\n                      {hipe_arm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"160cf412bbc01adfb4229f8b73a45ba5\"}]},\n                      {hipe_arm_assemble,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"62390a02348b3abffcb4502ff1b2b9f3\"}]},\n                      {hipe_arm_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"30d169daa65fe2104260b4621d500e17\"}]},\n                      {hipe_arm_defuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c464aa34b089a594edfc1cdb7012f39c\"}]},\n                      {hipe_arm_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ee3833e47107f465b35e3d9a255d0447\"}]},\n                      {hipe_arm_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"74ce09dca62bfdfdbe0f667075f78c35\"}]},\n                      {hipe_arm_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e46614b822aafd6233af080377bc8729\"}]},\n                      {hipe_arm_liveness_gpr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"19888211ce56a0eb039578ea485a7776\"}]},\n                      {hipe_arm_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b745515f7f9a5b4dc2e3f03f8dba82c3\"}]},\n                      {hipe_arm_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3b5de0ec46bf573c64151697e03dcbeb\"}]},\n                      {hipe_arm_ra,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d129dfc23327601b4615e91f849c214f\"}]},\n                      {hipe_arm_ra_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cdeccd5062db370b87cb350b317c041a\"}]},\n                      {hipe_arm_ra_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"fd59b7eba19bd0985bfc527377e815ea\"}]},\n                      {hipe_arm_ra_naive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cbbdef9b7829ce07fc482451a8f7c7a8\"}]},\n                      {hipe_arm_ra_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2a3a8e58a6ba75ca3902348a5b43ec79\"}]},\n                      {hipe_arm_registers,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7bd890ef97657715f12f031658d4c9c4\"}]},\n                      {hipe_arm_specific,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"611f5b731b1c7fa6f589010db3443a81\"}]},\n                      {hipe_bb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"66afe906c353f43505649b33dfed45a9\"}]},\n                      {hipe_beam_to_icode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"826bf8aa6513c06c61e08faa9383b4fc\"}]},\n                      {hipe_coalescing_regalloc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cf5f22f7e27c8ba6a1e73e29900fb096\"}]},\n                      {hipe_consttab,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4a430042156f62e55b404d38b82ef6c1\"}]},\n                      {hipe_data_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7843ffb243b1c8d66351c1452fec1cf5\"}]},\n                      {hipe_digraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3caa6181724dc59e70a3c5ee5b886233\"}]},\n                      {hipe_dominators,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4f7038336d002e637edb3b57cc6b7293\"}]},\n                      {hipe_dot,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"0218e226a92b4a444c90b4c18be48c76\"}]},\n                      {hipe_gen_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"75a06ae623c2dd5a78903d11ba61cfd6\"}]},\n                      {hipe_gensym,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1b5a357fb4e6833e55b574343d116217\"}]},\n                      {hipe_graph_coloring_regalloc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e25c88384aaa7b7a16c5849b31db4fcf\"}]},\n                      {hipe_icode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"899c47579553070995c5701f16f2c1ca\"}]},\n                      {hipe_icode2rtl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cba4203ea542c9abfac6eaa92cb269e9\"}]},\n                      {hipe_icode_bincomp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4e211977eb23242d6a2bf0b099eff090\"}]},\n                      {hipe_icode_callgraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"f79f8f10f1aaaf4280abf06cfa40d56d\"}]},\n                      {hipe_icode_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ca9529e58b378b731ac6aac84218e2da\"}]},\n                      {hipe_icode_coordinator,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3a1caa6d31d48a3fb311a2ea97f0c30c\"}]},\n                      {hipe_icode_ebb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b6b088a13c02a03e5a28247be6d45b94\"}]},\n                      {hipe_icode_exceptions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"40dfad7ac3602fece6bb4b5a8c9ab98b\"}]},\n                      {hipe_icode_fp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"f3fcc6b3d555dfa882e7483eb64a6571\"}]},\n                      {hipe_icode_heap_test,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"fed11d612f8f3da9ea1e4cc67389eff5\"}]},\n                      {hipe_icode_inline_bifs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3027c916d2ecc9762123585e1d91f467\"}]},\n                      {hipe_icode_instruction_counter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cf488cc5eb29636045d2880b33254711\"}]},\n                      {hipe_icode_liveness,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"bb99ee17bd466d1b802a42b0583e26d7\"}]},\n                      {hipe_icode_mulret,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"323e6103d2511e5bd4a87ad2b4dcf3c3\"}]},\n                      {hipe_icode_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"56edb2552a5c36757005cebd6196f7ce\"}]},\n                      {hipe_icode_primops,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3f14ad0079bdc8cf1feb08c6c2da287a\"}]},\n                      {hipe_icode_range,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"0040719dd6effa173e861e4eb0e3cff6\"}]},\n                      {hipe_icode_split_arith,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"5575b7299b149e93d358fdeccc999652\"}]},\n                      {hipe_icode_ssa,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"090ca01ba76f97f346c6fb260751cad3\"}]},\n                      {hipe_icode_ssa_const_prop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"5944b123b3fcd4b0839b316ee68ee36d\"}]},\n                      {hipe_icode_ssa_copy_prop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"997be266f8aa90058e1cc47807628ab4\"}]},\n                      {hipe_icode_ssa_struct_reuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"8fbe27064d4bb5a27507564d4ace240b\"}]},\n                      {hipe_icode_type,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"cd5755e095fcdc667aa925440a072104\"}]},\n                      {hipe_ig,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"023433ebf566fdd844f091a0d35af764\"}]},\n                      {hipe_ig_moves,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b1d86094e8232686f4e234cca76178c6\"}]},\n                      {hipe_jit,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d52c6fa1354f23d6c3234f2ba0adb467\"}]},\n                      {hipe_ls_regalloc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"af8f6022eafbf853ada08fe69e9509ca\"}]},\n                      {hipe_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c5c32cf830833284942651c29d48e796\"}]},\n                      {hipe_moves,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c4b6be3fb7b1fd8acaa60cf09a34ab92\"}]},\n                      {hipe_node_sets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"8f506e9e71db4336c1ec699b1335dc17\"}]},\n                      {hipe_optimistic_regalloc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"43cd34d83f3c513ee455a446628c39eb\"}]},\n                      {hipe_pack_constants,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"09e240bfc2522acbaa543f356a28f9af\"}]},\n                      {hipe_ppc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b4a1ef1f5d56e249be91954a55b35b5c\"}]},\n                      {hipe_ppc_assemble,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"be62cec21a026c5385d2482369ac59a0\"}]},\n                      {hipe_ppc_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7d0362cb062e78fb25852d9fcf943371\"}]},\n                      {hipe_ppc_defuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"45a4ac6be649d5ebd584abd44704addc\"}]},\n                      {hipe_ppc_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"fb5b41996c46e440e0292565c786d9a2\"}]},\n                      {hipe_ppc_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1475ac44aff754105fdd4e85687346ab\"}]},\n                      {hipe_ppc_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1fd18b642e945b3f6b384549c810f5c6\"}]},\n                      {hipe_ppc_liveness_all,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"5194b99327e725de7a0c94abb4d35974\"}]},\n                      {hipe_ppc_liveness_fpr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b3958a1138f1f112f5ff4b357520fa4d\"}]},\n                      {hipe_ppc_liveness_gpr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"fc4585d446b47d4151671b7bc83f86eb\"}]},\n                      {hipe_ppc_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ec4dd9d536fb6aa5cdb418dded96184b\"}]},\n                      {hipe_ppc_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c37b9de73810ceeaca37bc0520a76884\"}]},\n                      {hipe_ppc_ra,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"db4deb5ea2a237ff1e0984f7979e5d3f\"}]},\n                      {hipe_ppc_ra_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c4376f33857d9cb0cea29ff783ea82cf\"}]},\n                      {hipe_ppc_ra_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6ba2df5f54c48dc90c42547e8bd2ca48\"}]},\n                      {hipe_ppc_ra_naive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ba3d03b4267f315b10ed939a37d4597c\"}]},\n                      {hipe_ppc_ra_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a9d4ca393bff97c1931d0eb18d38a811\"}]},\n                      {hipe_ppc_ra_postconditions_fp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"742e3f111a16eb5ca003f1a97804e5a9\"}]},\n                      {hipe_ppc_registers,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"40dd287c6853767e7083a8c5549681ce\"}]},\n                      {hipe_ppc_specific,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d5e2330aa55edd677ecf3e77bf659781\"}]},\n                      {hipe_ppc_specific_fp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"34a6f358c60c47ebec7956b66205062f\"}]},\n                      {hipe_profile,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"210939fd9ea20991d7fae07b12348d35\"}]},\n                      {hipe_reg_worklists,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ee79fa6eb3bca9a4f0025d9e4ce02a72\"}]},\n                      {hipe_regalloc_loop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"19fc9f539fd5abb2ecc5aeaf6c2526db\"}]},\n                      {hipe_rtl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2ab93246a0c75f83327de3e0234dbe08\"}]},\n                      {hipe_rtl_arch,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3481cc7240b928da18df9e61214ceb25\"}]},\n                      {hipe_rtl_arith_32,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"328deb7987296b869279c7c0d588f337\"}]},\n                      {hipe_rtl_arith_64,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"64cc932e691e7743d06642103170de55\"}]},\n                      {hipe_rtl_binary,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"198df75c4eefcd2b7a7f769922d4ce60\"}]},\n                      {hipe_rtl_binary_construct,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7a1b57215669ed36c40b335e6826be2c\"}]},\n                      {hipe_rtl_binary_match,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1c22996f5b79a3818503a19059bdaf8e\"}]},\n                      {hipe_rtl_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"60570bb8a1cbde7c72ad1c37e2b8e17d\"}]},\n                      {hipe_rtl_cleanup_const,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a555a1c325dd9b3ae1775881af8abfad\"}]},\n                      {hipe_rtl_exceptions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6c7f64efbed1c8e51f2323fa693d3b89\"}]},\n                      {hipe_rtl_lcm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"bd3735cbd4bc9eb9254b0c2ee67cd1ad\"}]},\n                      {hipe_rtl_liveness,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"0dcceb8fd82c12480e42399dd2869c41\"}]},\n                      {hipe_rtl_mk_switch,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"8890cf7e39302f57f3adf8987755b34c\"}]},\n                      {hipe_rtl_primops,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c734e269cbc4be78cb3fe47fa55053a5\"}]},\n                      {hipe_rtl_ssa,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4d9ce36d8dc1168eecf173bde8a0871a\"}]},\n                      {hipe_rtl_ssa_avail_expr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ef5653db422ed4115c734d9676f3b030\"}]},\n                      {hipe_rtl_ssa_const_prop,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"598dee97d9fd44735a534b250bf60e2a\"}]},\n                      {hipe_rtl_ssapre,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"93b3ea7957d2008d763bd4416ef98277\"}]},\n                      {hipe_rtl_symbolic,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4e6b19de45d978326014a378368a6f8e\"}]},\n                      {hipe_rtl_to_amd64,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6afb4d232649b0a0ee54e5a4859e85ce\"}]},\n                      {hipe_rtl_to_arm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a12eb244baec0e0bcd2d39353ac69b90\"}]},\n                      {hipe_rtl_to_ppc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"521f595296e6c1bf0b7d1caf59bbfb77\"}]},\n                      {hipe_rtl_to_sparc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"66783d3f670bd939159b0abf3548dddc\"}]},\n                      {hipe_rtl_to_x86,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2b4ebecd4e2fa29e952c650809ec89b6\"}]},\n                      {hipe_rtl_varmap,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2b1e6ba5714a0764c0897a780fb38c8e\"}]},\n                      {hipe_sdi,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c305600fbb8905b9b0cf792f2f85ed72\"}]},\n                      {hipe_sparc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6a5cf680abe539d1dfa669cb52ce1f80\"}]},\n                      {hipe_sparc_assemble,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"330f4c7130dc215c911ecfd48d9dedde\"}]},\n                      {hipe_sparc_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d8278464e9d1d65437625517255ae2ab\"}]},\n                      {hipe_sparc_defuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a7f131d52962288326e844f28d13d4cc\"}]},\n                      {hipe_sparc_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c1b5971e5e6f3304bcc00f1abeb268f7\"}]},\n                      {hipe_sparc_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"22d88316138d80c3ecf41ced21ec25cf\"}]},\n                      {hipe_sparc_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"623fdaf78bfaff2b07733eb4a211f79b\"}]},\n                      {hipe_sparc_liveness_all,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2bd5c26371c946fdbf9c1530c1478ca1\"}]},\n                      {hipe_sparc_liveness_fpr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"7dc401039841503524934a1b97990c2a\"}]},\n                      {hipe_sparc_liveness_gpr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4c5e32e6adbbc37b4f793e8bde52ab2f\"}]},\n                      {hipe_sparc_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"3c063c4c5b1bd8ec02c6ffe60c561056\"}]},\n                      {hipe_sparc_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"f89846e24afb3795d259291e4613c155\"}]},\n                      {hipe_sparc_ra,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6925c18182b17ee978041e26fbf490b3\"}]},\n                      {hipe_sparc_ra_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"45cef8c32ae3b2f6f01911592016924b\"}]},\n                      {hipe_sparc_ra_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"2eedc8b13aac2efcd2e3649afd845d02\"}]},\n                      {hipe_sparc_ra_naive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"81f0a231c4bde04b132bdb6748774c10\"}]},\n                      {hipe_sparc_ra_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"549d7dfb54dce00bb7f5317306694308\"}]},\n                      {hipe_sparc_ra_postconditions_fp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"9de491abdbbc1c156a20a692d463965b\"}]},\n                      {hipe_sparc_registers,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1a4dd5b6dc938d539fead6b1ad9e2ba0\"}]},\n                      {hipe_sparc_specific,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"809b836428fcb194565eeee86ecf138b\"}]},\n                      {hipe_sparc_specific_fp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4bf2be9b351b82024e81eabfd68806f9\"}]},\n                      {hipe_spillcost,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b9ef65406aa671e28d1bd8428f102fe9\"}]},\n                      {hipe_spillmin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"bde0ad7813cb8f86fc4ff110090af2da\"}]},\n                      {hipe_spillmin_color,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e277f11303f44d6ea07be695c1057d7f\"}]},\n                      {hipe_spillmin_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b007825bb206e086b9ffc943213aa625\"}]},\n                      {hipe_tagscheme,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"568fc377e498aec5a73e1b2c9cd29432\"}]},\n                      {hipe_temp_map,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"56dff1fb8175d1d7c32f7e8d95e10488\"}]},\n                      {hipe_timing,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c3238c3b4adc08c290c37ba1ea7d3a31\"}]},\n                      {hipe_tool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"f93194221b0e3756c9f0f70127b205bd\"}]},\n                      {hipe_vectors,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c4e6ef55b233f27c27bd2f781baf9c94\"}]},\n                      {hipe_x86,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"051e4ee3dd5298e2cee05b1fca82e64d\"}]},\n                      {hipe_x86_assemble,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"d1829f13a89049280e7cb22cd394af0d\"}]},\n                      {hipe_x86_cfg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"b9d6a090c32c03e6e91deac9bbb167ae\"}]},\n                      {hipe_x86_defuse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"c81bb7a0dd72b256c57fb37042de68ff\"}]},\n                      {hipe_x86_encode,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"386d1abc98765c09c6bc6fe44cf2748d\"}]},\n                      {hipe_x86_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"db2a440f5975688c7bf9a88c47aaf627\"}]},\n                      {hipe_x86_liveness,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"8783c19717dda46b566c465ba85b2588\"}]},\n                      {hipe_x86_main,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"236cd462abe386223cefe606b4f48928\"}]},\n                      {hipe_x86_postpass,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"57e5cb6ad12dceef612122c8f759ac15\"}]},\n                      {hipe_x86_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6efd3b5cd8c70edbd326ffe9457a3192\"}]},\n                      {hipe_x86_ra,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"1e8b7f27a05e1e7fac9ea95cdd394909\"}]},\n                      {hipe_x86_ra_finalise,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"4a3c30788866a5e997e0a1687279732e\"}]},\n                      {hipe_x86_ra_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"bb13a4d08391fe3f212fa4eba816029b\"}]},\n                      {hipe_x86_ra_naive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e26c0711db5e891c86b64da12fe064ff\"}]},\n                      {hipe_x86_ra_postconditions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"e3d6ad622a3017744106b653324c0edb\"}]},\n                      {hipe_x86_ra_x87_ls,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a6092f1853a7a04f8d16228f6183dcc0\"}]},\n                      {hipe_x86_registers,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ce77b4ffff06c9532943ad5f6907b18e\"}]},\n                      {hipe_x86_specific,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"ad074b1e645c06c2137a46cd19f88b72\"}]},\n                      {hipe_x86_specific_x87,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"a20c2c2b1742aa084dbb7395a92b650d\"}]},\n                      {hipe_x86_spill_restore,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"88e191ef5057ea6a50c75af85c814013\"}]},\n                      {hipe_x86_x87,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.2\"},\n                        {md5,\"6edcc888c87ffc96414a8dce57d691da\"}]}]}]}},\n                 {application,\n                  {gs,\n                   [{description,\"GS  The Graphics System\"},\n                    {vsn,\"1.5.15.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/gs-1.5.15.2/ebin\"},\n                    {modules,\n                     [{gs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9d416ae60d6cda2ea55a05dbde8a53f7\"}]},\n                      {gs_frontend,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eb02484f42ac799bdd086f6832b72330\"}]},\n                      {gs_make,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ea7a1edc4bd5b9867ce924130851f295\"}]},\n                      {gs_packer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c5d911152526836f3487cd3de6b0bf9\"}]},\n                      {gs_widgets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2efa721783d863bca4ff2e116c9593fd\"}]},\n                      {gse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9355057cfe2b70da376f208739bd7c06\"}]},\n                      {gstk,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"684b9d8f370368e25ea2ca2ac708c1ee\"}]},\n                      {gstk_arc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1cd1114560c3839fb84380975d61d68b\"}]},\n                      {gstk_button,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29ce4f10fe8dc2bb85649018aa64d71a\"}]},\n                      {gstk_canvas,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a637d6932415873666ed040817ed2a72\"}]},\n                      {gstk_checkbutton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3cad265e62fb4cbeda02c089b5b309bb\"}]},\n                      {gstk_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dd236aeb7ff4658fd1a9d1302602a7af\"}]},\n                      {gstk_editor,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17dd7595545d33bb3143ac3995711b39\"}]},\n                      {gstk_entry,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2740de840e6b8871909dfedd96d4b5b4\"}]},\n                      {gstk_font,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bc2fef06167d48c71cc434fa7411ca95\"}]},\n                      {gstk_frame,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5113cb91ebb88a4cb1a0b4cb7665607d\"}]},\n                      {gstk_generic,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d392d9f2e6c6220245cff065e99a3f5\"}]},\n                      {gstk_grid,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"61def27e9610041778245948e5f82be1\"}]},\n                      {gstk_gridline,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"40c7173521b57e4c9243ec5258f65d6d\"}]},\n                      {gstk_gs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9c9ab7ac782c3e36e201d4760f37e478\"}]},\n                      {gstk_image,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"50a6a6b41de78e4f06b0c98cba97992a\"}]},\n                      {gstk_label,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"00b5826ce30fc11e417a7a43f0c7e563\"}]},\n                      {gstk_line,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b7785bc56e2f32b575a4240a60994d62\"}]},\n                      {gstk_listbox,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"053218bec49478a8334df6b0818e981f\"}]},\n                      {gstk_menu,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ccf11b45fdd908fafb781c897d379370\"}]},\n                      {gstk_menubar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e801f2c6eccc8258d719028b706ec624\"}]},\n                      {gstk_menubutton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1fc2d88da997bdc39a24f3f0db9963b3\"}]},\n                      {gstk_menuitem,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a4442a7307d34c544783c9d22433135\"}]},\n                      {gstk_oval,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f4775c1b7522750f395f28a94eefe453\"}]},\n                      {gstk_polygon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fdc96f316574995486c842b612722e25\"}]},\n                      {gstk_port_handler,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"95ec5d20c905e8cc7fef2df5f99ceb88\"}]},\n                      {gstk_radiobutton,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b67bb9cafd3bf67b210d7b0e0b1bd992\"}]},\n                      {gstk_rectangle,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6bf1f8e7953532468393090fe8d56ba2\"}]},\n                      {gstk_scale,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"848c7ee845d1a59a0a7c4775f64f220e\"}]},\n                      {gstk_text,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"719252f8d069544886ec473e16688530\"}]},\n                      {gstk_widgets,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29b540f4612eb1f1e65123f08809bee4\"}]},\n                      {gstk_window,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"746a06674df1cd96678689e6ab92a95a\"}]},\n                      {tcl2erl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f67bcc59683d0c578cba1c0062ff6b3e\"}]},\n                      {tool_file_dialog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3763cc96ed8e2a6136a4c15e54a9adee\"}]},\n                      {tool_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"96edfeab61de9b40618e7808d62225b2\"}]}]}]}},\n                 {application,\n                  {eunit,\n                   [{description,\"EUnit\"},\n                    {vsn,\"2.2.4\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/eunit-2.2.4/ebin\"},\n                    {modules,\n                     [{eunit,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"800601aeceaf1de519df273ca25741b5\"}]},\n                      {eunit_autoexport,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"48f889ffaa560238fa2269614f93bbce\"}]},\n                      {eunit_data,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed89782dac4c2b21da64d92bf74f1e22\"}]},\n                      {eunit_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"949ed8c5f494a8678c6f29775a7b5154\"}]},\n                      {eunit_listener,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6f107b19b4ecf45031a93afa5ace611f\"}]},\n                      {eunit_proc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cfc2da427b2bf7ba843f6b8d8121e2c9\"}]},\n                      {eunit_serial,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f07a040ebbba4af90fa9668c410befba\"}]},\n                      {eunit_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0842dedb36c3b1cd91229a7e4abfe328\"}]},\n                      {eunit_striptests,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"473b48509d28519ba18cfa83a8dea8b4\"}]},\n                      {eunit_surefire,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1e6a5cebf210cdd8a558cd32b96ac13\"}]},\n                      {eunit_test,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cc3897e05a5146b24c109fbc5da83e86\"}]},\n                      {eunit_tests,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d2b6b165201e0aad13a8d8f4d542f59\"}]},\n                      {eunit_tty,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a4faaab287e1fa52837cdfd1b58c7faf\"}]}]}]}},\n                 {application,\n                  {et,\n                   [{description,\"Event Tracer\"},\n                    {vsn,\"1.4.4.4\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/et-1.4.4.4/ebin\"},\n                    {modules,\n                     [{et,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"82db3e8683420a2adb933306c8c822e8\"}]},\n                      {et_collector,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dd43f7a22b3c3e6a1799a88163c3d441\"}]},\n                      {et_gs_contents_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"44e7ea855be084e48cd364735d79f5f7\"}]},\n                      {et_gs_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d4ef2a5673c20444b198bdc185cc637a\"}]},\n                      {et_selector,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"267f60d2ecdad671eae269cdd2ff30f6\"}]},\n                      {et_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3ae9af3449c17f045d25ca424e9873ae\"}]},\n                      {et_wx_contents_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d14826378988286a32fc85ca4246325\"}]},\n                      {et_wx_viewer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"87f45e31d50a82d9db2443ddff14ad22\"}]}]}]}},\n                 {application,\n                  {erts,\n                   [{description,\"ERTS  CXC 138 10\"},\n                    {vsn,\"5.10.3\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erts-5.10.3/ebin\"},\n                    {modules,\n                     [{erl_prim_loader,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"719e5362c7c1f0d1fd96601b7f814981\"}]},\n                      {erlang,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"04b2444affe04bb9287d86e0e0c80578\"}]},\n                      {erts_internal,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a95c0409fe7b4ccf6e2fe509bfd23da8\"}]},\n                      {init,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"55bb9fddcdf820938be2efee15eccd82\"}]},\n                      {otp_ring0,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"47fe4e7e2d2a5f20cd3a9393e0743e57\"}]},\n                      {prim_eval,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"16d4fc3a8e5e2ef7200bd866fe8b1abb\"}]},\n                      {prim_file,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"da0745178ab8aa8fb8d3a373970ebfdd\"}]},\n                      {prim_inet,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4993598825a1083526cbc23cf027f494\"}]},\n                      {prim_zip,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9280fc2398f9eb3bd09f74cfa1d6d267\"}]},\n                      {zlib,\n                       [{loaded,true},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"811834d04ac37676048717e1c51f63ac\"}]}]}]}},\n                 {code,\n                  [{path,\n                    \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erl_interface-3.7.13\"},\n                   {modules,[]}]},\n                 {application,\n                  {erl_docgen,\n                   [{description,\"Misc tools for building documentation\"},\n                    {vsn,\"0.3.4\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/erl_docgen-0.3.4/ebin\"},\n                    {modules,\n                     [{docgen_edoc_xml_cb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"29c8b94e559528ca0aeacee089f52bcf\"}]},\n                      {docgen_otp_specs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c6d53404b1059d2da87ce44bee49d2dd\"}]},\n                      {docgen_xmerl_xml_cb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"274ef03ec5cb146346fea794e77febcf\"}]}]}]}},\n                 {application,\n                  {eldap,\n                   [{description,\"Ldap api\"},\n                    {vsn,\"1.0.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/eldap-1.0.1/ebin\"},\n                    {modules,\n                     [{'ELDAPv3',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"655b60d1b5b0629024e2a78708c64518\"}]},\n                      {eldap,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"df60096d034768188e0fd6eaa0fd571c\"}]}]}]}},\n                 {application,\n                  {edoc,\n                   [{description,\"EDoc\"},\n                    {vsn,\"0.7.12\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/edoc-0.7.12/ebin\"},\n                    {modules,\n                     [{edoc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f2749685cb80a536ad42426933220065\"}]},\n                      {edoc_data,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3a444b7ae3acc249aac7fe40b38355af\"}]},\n                      {edoc_doclet,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77b3ccaf177983dab1991425fd3d714b\"}]},\n                      {edoc_extract,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9effef62cfe9939a4c80b43b86041c6c\"}]},\n                      {edoc_layout,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f2b79a133f490b4de09b13f7519d37dd\"}]},\n                      {edoc_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4f421fb61a9b2c711d5fc28387b0ffd0\"}]},\n                      {edoc_macros,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ddb1e78cf2ddd20aadc87329067286f3\"}]},\n                      {edoc_parser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"02fe39575dfda2cffd6031f6c8f470eb\"}]},\n                      {edoc_refs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5a3ba4e7f5211445d74a4d19bc4c5963\"}]},\n                      {edoc_report,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bfef03c1f2c7de294972d0ad185a3a11\"}]},\n                      {edoc_run,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0db629008caa57ebafde1dda9672306c\"}]},\n                      {edoc_scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"165a8e826f458ac6de7c50c395d012df\"}]},\n                      {edoc_specs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"21a5746822e2ae01421fb064d9c8ccfd\"}]},\n                      {edoc_tags,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c9ad335a1ce6b99189cfbfaef2ca2038\"}]},\n                      {edoc_types,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"84530d798ce334278df4dea8a69098f4\"}]},\n                      {edoc_wiki,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eabda8c28daf0cdc040eef58f31cc6a8\"}]},\n                      {otpsgml_layout,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a511240c5864dd31d4df687465e355f6\"}]}]}]}},\n                 {application,\n                  {diameter,\n                   [{description,\"Diameter protocol\"},\n                    {vsn,\"1.4.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/diameter-1.4.2/ebin\"},\n                    {modules,\n                     [{diameter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b2fdb2feddc71bda9175711150823325\"}]},\n                      {diameter_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6dcc769947f323a9ff306c9bcab4dd2c\"}]},\n                      {diameter_callback,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8c76e1ccf47e3c781cbdf3c8d3e293f\"}]},\n                      {diameter_capx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"65e483a5f121d99db830329f3dc050cb\"}]},\n                      {diameter_codec,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bd2e1ef215e88519ca3865601e479dc\"}]},\n                      {diameter_codegen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"33696e30585762fe29ca103d67ffbb04\"}]},\n                      {diameter_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"76e885acd24a697d19b07ce5446f5c2b\"}]},\n                      {diameter_dbg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0954c1f71a204a0f2c8b3682d520c704\"}]},\n                      {diameter_dict,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1ed21a8d2eea031aa736e95870a7a165\"}]},\n                      {diameter_dict_parser,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c90e506d7eba4f18547238b8f025ce5e\"}]},\n                      {diameter_dict_scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b3fc9ee26b660a97ad67b4c8728a0b75\"}]},\n                      {diameter_dict_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"70475203e0968747889eecc533af3f0f\"}]},\n                      {diameter_etcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dde08c8d8311e2700c59b741274923fb\"}]},\n                      {diameter_etcp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"85fc8320ca9eb8daceb03727bdadb6f8\"}]},\n                      {diameter_exprecs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"728aa8871c778eacc02313d922dde7ae\"}]},\n                      {diameter_gen_acct_rfc6733,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"53fb49bb8c354f36d6e1ad6366fe02a2\"}]},\n                      {diameter_gen_base_accounting,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"845f38b99248c11778453b628ddb4fed\"}]},\n                      {diameter_gen_base_rfc3588,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f6cd02c8318f4ccc198bd08d1ac789fb\"}]},\n                      {diameter_gen_base_rfc6733,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"49edd3b9955c82c872169f769c833482\"}]},\n                      {diameter_gen_relay,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c970d47476d2832f510b6b03699c95c6\"}]},\n                      {diameter_info,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"472b763fc9554c0c92992a3b36177667\"}]},\n                      {diameter_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8d49799607d7c7792a79dbc434b4d53e\"}]},\n                      {diameter_make,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"249d7f673e7f192ddff7c66b578e886e\"}]},\n                      {diameter_misc_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3996fa63b0e083301d35fc6d88b75ce4\"}]},\n                      {diameter_peer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"89f28d8d35bdeb8b05995daffb8d868c\"}]},\n                      {diameter_peer_fsm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"df03404577882e8cfba57087c91fe3ef\"}]},\n                      {diameter_peer_fsm_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b25500795639e63d9a591e33df6e4af7\"}]},\n                      {diameter_reg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e7d427dafe432249d3535bc9e6ec538\"}]},\n                      {diameter_sctp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cb7487b2c41e3520b1a46738699a88c8\"}]},\n                      {diameter_sctp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a02584b6b31789dd38493fd1a8d7d3e3\"}]},\n                      {diameter_service,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e990f54abf1c8706cd7717cba717594c\"}]},\n                      {diameter_service_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a66f4714fa96fd7d289260002851cbf9\"}]},\n                      {diameter_session,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d348e0ca8d3c827d647c3bea8f9c7691\"}]},\n                      {diameter_stats,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f12a18f52de33ca77dacd1bba99680c8\"}]},\n                      {diameter_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c910b68b3d0760f595a81ca58b1337f8\"}]},\n                      {diameter_sync,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff62cfc82b044d2300345ac7912fe320\"}]},\n                      {diameter_tcp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e4dae7482d9a79d4ead66ef14d1c3a48\"}]},\n                      {diameter_tcp_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c1b03a96691e03eb93144bc50022a007\"}]},\n                      {diameter_traffic,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d351fdbef0536bba235fe102fe8e697\"}]},\n                      {diameter_transport,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"386e129e240e91794ff79e1da6c6966a\"}]},\n                      {diameter_transport_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c9f8da23c3c870b8a6ed8648d7aac2d5\"}]},\n                      {diameter_types,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d2ecf24e368d30dbef34527e2971caf8\"}]},\n                      {diameter_watchdog,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a0ab7bd910bc959c0d1b64f0a2ae4bda\"}]},\n                      {diameter_watchdog_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e4b16aeb2713fd42bf5e9da7cbe43bcf\"}]}]}]}},\n                 {application,\n                  {dialyzer,\n                   [{description,\n                     \"DIscrepancy AnaLYZer of ERlang programs, version 2.6.1\"},\n                    {vsn,\"2.6.1\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/dialyzer-2.6.1/ebin\"},\n                    {modules,\n                     [{dialyzer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"929cdc37a18725b9710b9c4345c3aca0\"}]},\n                      {dialyzer_analysis_callgraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b679e22bb1edb9f0225b79d995342dc5\"}]},\n                      {dialyzer_behaviours,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5fb71e7e5129b4c2f74cb529d8a745c4\"}]},\n                      {dialyzer_callgraph,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5b03b559fdab4c77a8c955cdfe7a2036\"}]},\n                      {dialyzer_cl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79a2208b0cc03af530473d2d2f49587f\"}]},\n                      {dialyzer_cl_parse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b4fcced00882cfef0262398a14319c2a\"}]},\n                      {dialyzer_codeserver,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f5c8a1600210988f627559bc16a49a65\"}]},\n                      {dialyzer_contracts,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c002e8bcddf711ae9feef14b88f28873\"}]},\n                      {dialyzer_coordinator,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"51efdc15e07eaa495060e420585bb74f\"}]},\n                      {dialyzer_dataflow,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ddb43241a51460b67c67780ca6174bef\"}]},\n                      {dialyzer_dep,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ffffdcfd7edb9901be2e92b6d3a5f082\"}]},\n                      {dialyzer_explanation,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79c9bc71edcc115a03c1bb00a4133627\"}]},\n                      {dialyzer_gui,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec41553832cb5f49cce3b123ec763448\"}]},\n                      {dialyzer_gui_wx,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"00f5ef9bd8202d5bc303fca27c740b00\"}]},\n                      {dialyzer_options,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"713bf0249b3bb22c7461498b908db812\"}]},\n                      {dialyzer_plt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e5b1ecae532cb2887c942c6bda2c7dc7\"}]},\n                      {dialyzer_races,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec1b2f026e1dfd438fbb48dcf16a19de\"}]},\n                      {dialyzer_succ_typings,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"12a59523b727169f2f415b6e57768910\"}]},\n                      {dialyzer_timing,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b170424f433845fb9aab3e554ea61044\"}]},\n                      {dialyzer_typesig,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b6670ae353fa06c5c8a5f301a7079ca6\"}]},\n                      {dialyzer_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cac59b9f59802633948d271fcf8ff92d\"}]},\n                      {dialyzer_worker,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e9ff1cc342b308c73bab8c607a8437e\"}]}]}]}},\n                 {application,\n                  {debugger,\n                   [{description,\"Debugger\"},\n                    {vsn,\"3.2.11\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/debugger-3.2.11/ebin\"},\n                    {modules,\n                     [{dbg_debugged,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"78bf1d9b43c718da5e198af36cabb1ce\"}]},\n                      {dbg_icmd,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"615470a6677e03a603c24cf821ba3471\"}]},\n                      {dbg_idb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e78e73c63bfe9149a11122857355f29\"}]},\n                      {dbg_ieval,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e49ed51a1a1e7581334308cd3c9195e\"}]},\n                      {dbg_iload,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f249c44fee09e35262d2cafbfa22ce49\"}]},\n                      {dbg_iserver,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a2911ffbd531888ac6e1b96a5475436\"}]},\n                      {dbg_istk,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ae44e86b7893633859292861275bdb7f\"}]},\n                      {dbg_ui_break,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e5397708044bd37bac2a6f4e24edbd30\"}]},\n                      {dbg_ui_break_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c974a8a9b180cfd4ccbcfd31a7bb88e5\"}]},\n                      {dbg_ui_edit,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7faadd987bb74826e5f5865d725ca177\"}]},\n                      {dbg_ui_edit_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0e912e444704ad322b3e25fc6393c068\"}]},\n                      {dbg_ui_filedialog_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"06a6b13cd9bcfe7d7d203a981352cfaa\"}]},\n                      {dbg_ui_interpret,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dcf7a340530f4807d774d4c719a1dbbf\"}]},\n                      {dbg_ui_mon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c79f2debfab06b86990ef7e390a61b7\"}]},\n                      {dbg_ui_mon_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c43cdde20d4e66b6f51ef903af75250\"}]},\n                      {dbg_ui_settings,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8deedced7307e14f36cca3d9fe7e367f\"}]},\n                      {dbg_ui_trace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c817c2cc2f62354d4f59be8b6e6fac96\"}]},\n                      {dbg_ui_trace_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"db1abdd3b7a7b45d3c74dbd9c48f07e8\"}]},\n                      {dbg_ui_view,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b10a46e072053a225a894ed76dceebca\"}]},\n                      {dbg_ui_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e51ec8a33c335245583f7a9ba8728f66\"}]},\n                      {dbg_ui_winman,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2056472842990c08dfdb81e56df2caa8\"}]},\n                      {dbg_wx_break,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"55c7dc041c4cd1b1da98d49def9c2b15\"}]},\n                      {dbg_wx_break_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ad9cde7d28f7de18dda8da80d97a8f00\"}]},\n                      {dbg_wx_code,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"27abac65970e6f7c6bbaca07e9ead6a4\"}]},\n                      {dbg_wx_filedialog_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"da924842b25d80b7b258100a4e597810\"}]},\n                      {dbg_wx_interpret,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8549ef4a5bad09472dccd1cb3ab2c764\"}]},\n                      {dbg_wx_mon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"09140d34a402d7183cf9dfecb0b2b6e8\"}]},\n                      {dbg_wx_mon_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1fefe3be53da62cf504daf354579d910\"}]},\n                      {dbg_wx_settings,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"350aed0cb189f0b91979fc38752fd4c4\"}]},\n                      {dbg_wx_src_view,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"644bfb2c2d8fc6e9296722fef5f05b57\"}]},\n                      {dbg_wx_trace,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"024358a893f9b37296fc0c416074a4b1\"}]},\n                      {dbg_wx_trace_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b2348218e83d1704bcf894e71c2f3e82\"}]},\n                      {dbg_wx_view,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d37489d27927cff9f19f76bc0c816c9\"}]},\n                      {dbg_wx_win,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d94add4e9adade091198438a278501a8\"}]},\n                      {dbg_wx_winman,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"caa1febd36494a9088fddbd5557c503f\"}]},\n                      {debugger,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2e242b76bc941785f65d1cf819fd98a5\"}]},\n                      {i,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2bebfb4e91c343a1ad89f1124b06e190\"}]},\n                      {int,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e1d4c0b2e30129359db05d3bc4df646c\"}]}]}]}},\n                 {application,\n                  {crypto,\n                   [{description,\"CRYPTO version 2\"},\n                    {vsn,\"3.0\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/crypto-3.0/ebin\"},\n                    {modules,\n                     [{crypto,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"858d0e1779f13a6bfde511898916ae94\"}]},\n                      {crypto_app,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d2de1cd4927d57e8eaa4467404c8c02\"}]},\n                      {crypto_server,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"17e05e4b0d772036706b76ba8f68de2e\"}]},\n                      {crypto_sup,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1342a18fe8d994974e41aa3e351d8500\"}]}]}]}},\n                 {application,\n                  {cosTransactions,\n                   [{description,\"The Erlang CosTransactions application\"},\n                    {vsn,\"1.2.13\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosTransactions-1.2.13/ebin\"},\n                    {modules,\n                     [{'CosTransactions_Control',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9ee94b22194357e2374fe2c026d2a9fb\"}]},\n                      {'CosTransactions_Coordinator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bca2be777e58bf130a3bf48252c0c0cb\"}]},\n                      {'CosTransactions_HeuristicCommit',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d12c1a0988d03c64a606ba471794e3cc\"}]},\n                      {'CosTransactions_HeuristicHazard',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"79d0dc47e6759987e5b45281bc4c39f2\"}]},\n                      {'CosTransactions_HeuristicMixed',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a77cb11ccf269fa85f2194ab16ec5ebb\"}]},\n                      {'CosTransactions_HeuristicRollback',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"67a56bf7b8084c29dd10db9daa8e08f7\"}]},\n                      {'CosTransactions_Inactive',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8f94debdaa1912d18bbea77492e6fc88\"}]},\n                      {'CosTransactions_InvalidControl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b14b9b82b831e56235c1bca1f6e02e16\"}]},\n                      {'CosTransactions_NoTransaction',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"24252bfbc89f79dac5c90b35e35a66ad\"}]},\n                      {'CosTransactions_NotPrepared',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ddbcd30a479a50fa2fed4b0cb019c0bd\"}]},\n                      {'CosTransactions_NotSubtransaction',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3904cf57a879720704d8b725802cc530\"}]},\n                      {'CosTransactions_PropagationContext',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4d0dd57873deb42ef62f2e9e8620e111\"}]},\n                      {'CosTransactions_RecoveryCoordinator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2a670d242e21803d3a559b812b3f3bfd\"}]},\n                      {'CosTransactions_Resource',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"78bdc7f9989a5277bde7e066804fa1c0\"}]},\n                      {'CosTransactions_SubtransactionAwareResource',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e1194d19b4db72b1c571aec1847fa65f\"}]},\n                      {'CosTransactions_SubtransactionsUnavailable',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d6ffc90a293248735f58984f7a9f4fa9\"}]},\n                      {'CosTransactions_SynchronizationUnavailable',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9858316a8256791e5fe66729fcd364ef\"}]},\n                      {'CosTransactions_Terminator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dbbba1c622d817538fba982cbefd4a15\"}]},\n                      {'CosTransactions_Terminator_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2db2696226a90215edb559cdae7ad928\"}]},\n                      {'CosTransactions_TransIdentity',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d38592cd26cbbbe3a963ca77b5264ea8\"}]},\n                      {'CosTransactions_TransactionFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"04db55c2ba8df7975e98e1c7b7582bb6\"}]},\n                      {'CosTransactions_TransactionFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1d8ff8a2434c10c4716b1b59aebbcb9e\"}]},\n                      {'CosTransactions_Unavailable',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a77c05d98c0c72e2f1d52a1f781a1b98\"}]},\n                      {'CosTransactions_WrongTransaction',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c836d95954f2374d89bfc9ff2bd86793\"}]},\n                      {'CosTransactions_otid_t',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1e903c81e783cb34153bbca99e047870\"}]},\n                      {'ETraP_Common',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ea5d3e59af9cadcb5587cc42fc750470\"}]},\n                      {'ETraP_Server',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8592fd689bdae07056a29bd258293371\"}]},\n                      {'ETraP_Server_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7f192b40f501fd2f5fb3f92b21c5e9d3\"}]},\n                      {cosTransactions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6d83a1fd7da7dc0b87658efe3039f484\"}]},\n                      {etrap_logmgr,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91577f644192b682cb8739b9ce7ac7ad\"}]},\n                      {oe_CosTransactions,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6f6c79ffe50eac0c3ced0fba1a8c08a0\"}]}]}]}},\n                 {application,\n                  {cosTime,\n                   [{description,\"The Erlang CosTime application\"},\n                    {vsn,\"1.1.13\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosTime-1.1.13/ebin\"},\n                    {modules,\n                     [{'CosTime_TIO',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"77717ab85418c3c1599b3238c879b770\"}]},\n                      {'CosTime_TIO_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3ce85958b051f2f97925e980f56115e2\"}]},\n                      {'CosTime_TimeService',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a92a3fc07bfeeae58a57075ecddb5ac6\"}]},\n                      {'CosTime_TimeService_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0885fbeef5bd4f72920ae716f0c73d54\"}]},\n                      {'CosTime_TimeUnavailable',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9ee0570f9b91eece7560cc1b6146f784\"}]},\n                      {'CosTime_UTO',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"799ddc99175222b61965c6c8e66e5cb3\"}]},\n                      {'CosTime_UTO_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"552c29f5ece131368c121b5a14c3ae06\"}]},\n                      {'CosTimerEvent_TimerEventHandler',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"76961fc9eaae9e46950b5eb52fe62ae3\"}]},\n                      {'CosTimerEvent_TimerEventHandler_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a69e243a494b80eb34b37456f2b1f855\"}]},\n                      {'CosTimerEvent_TimerEventService',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"62c54aabe64cb28b1245eb80f6b9190d\"}]},\n                      {'CosTimerEvent_TimerEventService_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c6926dd7faed0366772908c8593691e\"}]},\n                      {'CosTimerEvent_TimerEventT',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"74b7db88a5dd4f17c263683a80bcfe3b\"}]},\n                      {'TimeBase_IntervalT',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c8f966d02c9520f2d3a4f024892ded3\"}]},\n                      {'TimeBase_UtcT',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"15f72a9538e725e68e375f3d638c1b6d\"}]},\n                      {cosTime,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c96cfbcafba8c9df1a9b57b7e09c4d8\"}]},\n                      {oe_CosTime,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e607ddba4a35690c39bfcbb1fa3e044e\"}]},\n                      {oe_CosTimerEvent,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"39f960f5b9c079eaecb87e75d9f90f2b\"}]},\n                      {oe_TimeBase,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"764d088e21dd985285d4ccfd723959fe\"}]}]}]}},\n                 {application,\n                  {cosProperty,\n                   [{description,\"The Erlang CosProperty application\"},\n                    {vsn,\"1.1.16\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosProperty-1.1.16/ebin\"},\n                    {modules,\n                     [{'CosPropertyService_ConflictingProperty',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"67353514e217df9f5a5c5e0d3e97d9bd\"}]},\n                      {'CosPropertyService_ConstraintNotSupported',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ce577ca5520194130903c063d8f2211a\"}]},\n                      {'CosPropertyService_FixedProperty',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0ef0b79fd5dbcb18f7b9c94f941678e2\"}]},\n                      {'CosPropertyService_InvalidPropertyName',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bd173257499295fbdc728d60fd14af92\"}]},\n                      {'CosPropertyService_MultipleExceptions',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3004385ac63dc6aa52bcb2aa46818f0\"}]},\n                      {'CosPropertyService_Properties',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"172b757c8a881b79146f50d9f3da1ea9\"}]},\n                      {'CosPropertyService_PropertiesIterator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"37fa8c7f1e5ab4798845a1b101835900\"}]},\n                      {'CosPropertyService_PropertiesIterator_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"728fabf6239161186aa9f574ad27fbd6\"}]},\n                      {'CosPropertyService_Property',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a912eb5a31517a6f94ee3f8e3b898ece\"}]},\n                      {'CosPropertyService_PropertyDef',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8ea474f53418bda870c1f98c522d15b\"}]},\n                      {'CosPropertyService_PropertyDefs',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3c997a6a4db17765d72f52953679fc7d\"}]},\n                      {'CosPropertyService_PropertyException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3600a7d77fe924d3883a003b68ab8902\"}]},\n                      {'CosPropertyService_PropertyExceptions',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a516b05a720966d4a3568f7f087f22cf\"}]},\n                      {'CosPropertyService_PropertyMode',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b1e1e285b3a2b01a12e328ed94a65225\"}]},\n                      {'CosPropertyService_PropertyModes',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed697876aa56c111eee5733379303ef3\"}]},\n                      {'CosPropertyService_PropertyNames',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"39684cd186c7d8da459f9d17637606a2\"}]},\n                      {'CosPropertyService_PropertyNamesIterator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"97b170d84779dcb7b98460588de428e3\"}]},\n                      {'CosPropertyService_PropertyNamesIterator_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e06e012106df3651db1e9d52472bebd3\"}]},\n                      {'CosPropertyService_PropertyNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"86c83ceacb0b80d4ffa6042cfaec025f\"}]},\n                      {'CosPropertyService_PropertySet',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ffbb0b6b88d4a35cd836322dcc2b4603\"}]},\n                      {'CosPropertyService_PropertySetDef',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"429c3ed48018cc6eef3d28c2407fa42e\"}]},\n                      {'CosPropertyService_PropertySetDefFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"86da518b687db630cd85921ebe96d07a\"}]},\n                      {'CosPropertyService_PropertySetDefFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2f52585d44dd9d6863bd2b0e0359a24e\"}]},\n                      {'CosPropertyService_PropertySetDef_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a02a747cf3856996416253a5cbccfbd7\"}]},\n                      {'CosPropertyService_PropertySetFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"faef66b15f43dc81cbf7dd9bde81c8a2\"}]},\n                      {'CosPropertyService_PropertySetFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b538bc6740ae2b6934e08d831d5b0960\"}]},\n                      {'CosPropertyService_PropertyTypes',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec088d6b4028f6a9dc2917e6722f1c32\"}]},\n                      {'CosPropertyService_ReadOnlyProperty',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3f4d338a44a7ab32daf202f4d2aa7cbb\"}]},\n                      {'CosPropertyService_UnsupportedMode',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"203ca7e42a209758ceea013cbff109bd\"}]},\n                      {'CosPropertyService_UnsupportedProperty',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"28e9e73be7eb82646e3713135d695a6d\"}]},\n                      {'CosPropertyService_UnsupportedTypeCode',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"da862aea1e36f6fb797bee192a2f3e08\"}]},\n                      {cosProperty,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e5c17adcc4dc9f93a8cf92c91a12c81e\"}]},\n                      {oe_CosProperty,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c9d35f1b883b805a44e9864136958b1\"}]}]}]}},\n                 {application,\n                  {cosNotification,\n                   [{description,\"The Erlang CosNotification application\"},\n                    {vsn,\"1.1.20\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosNotification-1.1.20/ebin\"},\n                    {modules,\n                     [{'CosNotification',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5a52684ebceaceebe3d7c971fd5e45e6\"}]},\n                      {'CosNotification_AdminPropertiesAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aa2af8e932319a2ab715d799c31678b0\"}]},\n                      {'CosNotification_Common',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e908fdcf47fa3d9d234d4061db9760ab\"}]},\n                      {'CosNotification_EventBatch',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8c79e194e19df338bec34cee83d5c999\"}]},\n                      {'CosNotification_EventHeader',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9e08e276e855cfa3dd60bdc9b563b8e9\"}]},\n                      {'CosNotification_EventType',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"be0b154ef34f6279604f04d0be386d64\"}]},\n                      {'CosNotification_EventTypeSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3719ad475d47fd73c1a70891586f0b17\"}]},\n                      {'CosNotification_FixedEventHeader',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e512d2bce68fcb3de1336060be225cad\"}]},\n                      {'CosNotification_NamedPropertyRange',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e42690af83d192433daaadb6cbfc7e02\"}]},\n                      {'CosNotification_NamedPropertyRangeSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5eac2fb6027077046d918d30b36fb45a\"}]},\n                      {'CosNotification_Property',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d89e479fd34c1e6c46447dcb4aaa44e0\"}]},\n                      {'CosNotification_PropertyError',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c2b5a17b0ff2dd997013daf5a4d73a83\"}]},\n                      {'CosNotification_PropertyErrorSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2437aa1bdbeeb5f45213bc7e7922351a\"}]},\n                      {'CosNotification_PropertyRange',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b2392c8040a976dc8db3ba147f7911f2\"}]},\n                      {'CosNotification_PropertySeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6950965079eb678d5b2e010c8266cf13\"}]},\n                      {'CosNotification_QoSAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fafc8842d8f8e11febab4d341a2ce879\"}]},\n                      {'CosNotification_StructuredEvent',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"22a1eae09f5d8cf0d223d06cebf9d85b\"}]},\n                      {'CosNotification_UnsupportedAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0b1d7ff2796dd090e244cecdbfa4d2ce\"}]},\n                      {'CosNotification_UnsupportedQoS',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d0968f6f188653b1e292c34f3b18c51a\"}]},\n                      {'CosNotifyChannelAdmin_AdminIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"42791a7a0d5ca5fef186c441a81cf50b\"}]},\n                      {'CosNotifyChannelAdmin_AdminLimit',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5355d6a703102439e59b070eb6e61b45\"}]},\n                      {'CosNotifyChannelAdmin_AdminLimitExceeded',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"18b11c68d839f9aa90bfe6da07b15cd8\"}]},\n                      {'CosNotifyChannelAdmin_AdminNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c853cd178ef80d6a46a334d3cb5371d4\"}]},\n                      {'CosNotifyChannelAdmin_ChannelIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"992ab8f1ac2f4cc15edd6068c8dc1948\"}]},\n                      {'CosNotifyChannelAdmin_ChannelNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"475e742fdf1dd2ec932704ccb941f3c1\"}]},\n                      {'CosNotifyChannelAdmin_ConnectionAlreadyActive',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d8b95c202b2ebc28a7208928563b5382\"}]},\n                      {'CosNotifyChannelAdmin_ConnectionAlreadyInactive',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8b106140de30c6cd638b328efe453cb3\"}]},\n                      {'CosNotifyChannelAdmin_ConsumerAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c8c31c812099afa148ed0662dc67ea0\"}]},\n                      {'CosNotifyChannelAdmin_ConsumerAdmin_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"172767d1c29ca64e810d8853c61a01e9\"}]},\n                      {'CosNotifyChannelAdmin_EventChannel',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e362f0dc4dc40c98e66b91632554ddb7\"}]},\n                      {'CosNotifyChannelAdmin_EventChannelFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4798a326d18d53e9a7870454fb33ef4c\"}]},\n                      {'CosNotifyChannelAdmin_EventChannelFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4bc146f5b9cc168505d2249e7f04a618\"}]},\n                      {'CosNotifyChannelAdmin_EventChannel_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"db6e5631fc1e5ff158dfc77123c7e752\"}]},\n                      {'CosNotifyChannelAdmin_NotConnected',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b7f5e3229c7849f94b0744a78e38012c\"}]},\n                      {'CosNotifyChannelAdmin_ProxyConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b1aa19779800f6e97852f5a2e8042641\"}]},\n                      {'CosNotifyChannelAdmin_ProxyIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bf0a62dd47773a5a4df90f70644c4e24\"}]},\n                      {'CosNotifyChannelAdmin_ProxyNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"735c610478319545c1a68c1c8b75609d\"}]},\n                      {'CosNotifyChannelAdmin_ProxyPullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6cc803a524bd58d1c33bee3fb8f92ac7\"}]},\n                      {'CosNotifyChannelAdmin_ProxyPullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1683d6e08309fb3fc51d127c407348a\"}]},\n                      {'CosNotifyChannelAdmin_ProxyPushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"94416e046b1c566bfa8df9bc1884bea5\"}]},\n                      {'CosNotifyChannelAdmin_ProxyPushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"61c57643509be14cbb5e82090fb5bf6d\"}]},\n                      {'CosNotifyChannelAdmin_ProxySupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4c1c83635cd4d1e4a50577e68f084a39\"}]},\n                      {'CosNotifyChannelAdmin_SequenceProxyPullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"af562a179799a5ae781278e980912710\"}]},\n                      {'CosNotifyChannelAdmin_SequenceProxyPullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"da43e615a23f2485758bec039617792c\"}]},\n                      {'CosNotifyChannelAdmin_SequenceProxyPushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a876b3b2c655fa98e23510ca72be236\"}]},\n                      {'CosNotifyChannelAdmin_SequenceProxyPushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"55954cf819fb29c74e8c7fa7dcb17eb8\"}]},\n                      {'CosNotifyChannelAdmin_StructuredProxyPullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"aeb95ea3a9deb7c129dccfd77df7976c\"}]},\n                      {'CosNotifyChannelAdmin_StructuredProxyPullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e72e1de7fb0ea440aae9ca791fbdd403\"}]},\n                      {'CosNotifyChannelAdmin_StructuredProxyPushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d277b85ea15126c7645eccc585325ee2\"}]},\n                      {'CosNotifyChannelAdmin_StructuredProxyPushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7339f8c2876066369e6afa27267bfd81\"}]},\n                      {'CosNotifyChannelAdmin_SupplierAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"043d43346f3ff5c2775bf7030a13e1d9\"}]},\n                      {'CosNotifyChannelAdmin_SupplierAdmin_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"efe73dc58fd1b27c2adc184018e4091a\"}]},\n                      {'CosNotifyComm_InvalidEventType',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"516a9a10d779d7b47a5752d0b4278017\"}]},\n                      {'CosNotifyComm_NotifyPublish',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c50da2c5c4d79c4cd3974c37b6165fbd\"}]},\n                      {'CosNotifyComm_NotifySubscribe',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"180ce40d1660bec349bb7ddf1275c985\"}]},\n                      {'CosNotifyComm_PullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dd7be30cd0685dbb3e0f22b4de8ffb91\"}]},\n                      {'CosNotifyComm_PullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e76b3f6be347a5d08350ae25cddc77c1\"}]},\n                      {'CosNotifyComm_PushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c2c972f2affe7f936ec38997084045b1\"}]},\n                      {'CosNotifyComm_PushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"416e6887077de70bf3aa7cf6c6b35a9c\"}]},\n                      {'CosNotifyComm_SequencePullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1322fb2dadb5669a36391f12455c6969\"}]},\n                      {'CosNotifyComm_SequencePullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"281779a70fdae7a1de3e569ae707d21a\"}]},\n                      {'CosNotifyComm_SequencePushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"701eb7ecaef2fb7f13b5adf2ff8a97aa\"}]},\n                      {'CosNotifyComm_SequencePushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ceb164baf53b3df5f90fdbef4c800d8d\"}]},\n                      {'CosNotifyComm_StructuredPullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"70d2e255c8613a9d58a4f1f69b1adf51\"}]},\n                      {'CosNotifyComm_StructuredPullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fa8164033103e1c40f7721471fa6b8fd\"}]},\n                      {'CosNotifyComm_StructuredPushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"684f225a8d760e970a4380c303f82662\"}]},\n                      {'CosNotifyComm_StructuredPushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"de1b05e00095ac428839c165db9f92fc\"}]},\n                      {'CosNotifyFilter_CallbackIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ab4cfad0073e21b629ebd16f8973912\"}]},\n                      {'CosNotifyFilter_CallbackNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5ae7cd265c665a4cd4a969c75388b1fc\"}]},\n                      {'CosNotifyFilter_ConstraintExp',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"421355667259ba4906ed0b0ba89ae1ba\"}]},\n                      {'CosNotifyFilter_ConstraintExpSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ef901d08223839966e5d67b55731e63\"}]},\n                      {'CosNotifyFilter_ConstraintIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"50d0d1e84309217b5a2864eb2df3653b\"}]},\n                      {'CosNotifyFilter_ConstraintInfo',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e988281d1a6d6d2ba412a86cb1b89e0b\"}]},\n                      {'CosNotifyFilter_ConstraintInfoSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff21820130cfa051a6781e79f53171af\"}]},\n                      {'CosNotifyFilter_ConstraintNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1611f041bd2826435c850dc36b2a6953\"}]},\n                      {'CosNotifyFilter_DuplicateConstraintID',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"40c6d62f59e44a14649e3de2e78deafd\"}]},\n                      {'CosNotifyFilter_Filter',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"864d9d277d782fca9a15809c5c195c1c\"}]},\n                      {'CosNotifyFilter_FilterAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ee1e90ea0fbde4a0c53036e0efa4b89a\"}]},\n                      {'CosNotifyFilter_FilterFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b59a3c5c5e24a9a389792ea9ff254312\"}]},\n                      {'CosNotifyFilter_FilterFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"40bc158ddcbb31abff87fe4da270b55a\"}]},\n                      {'CosNotifyFilter_FilterIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3dd80855340f372c0682a53a6d3bc216\"}]},\n                      {'CosNotifyFilter_FilterNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fbdd34c6e28fb4c907410c2f7bc82f92\"}]},\n                      {'CosNotifyFilter_Filter_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a6911bf97e4ebe2333e7e19914d821ea\"}]},\n                      {'CosNotifyFilter_InvalidConstraint',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"beaedbe7bcec40b0d90a0404dde063a9\"}]},\n                      {'CosNotifyFilter_InvalidGrammar',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0055f6477430cf9c38cce84d93393a12\"}]},\n                      {'CosNotifyFilter_InvalidValue',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"041b66a4b7933005a983848254dec48c\"}]},\n                      {'CosNotifyFilter_MappingConstraintInfo',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ab3093c4688953509866f4128d0747d2\"}]},\n                      {'CosNotifyFilter_MappingConstraintInfoSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9f81b4c571998ef9f1cefa77c45be6e5\"}]},\n                      {'CosNotifyFilter_MappingConstraintPair',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"305991c110aca04df1398bd3b640e284\"}]},\n                      {'CosNotifyFilter_MappingConstraintPairSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7bd7692f2d9ad411d3d4323ff4ef9a2d\"}]},\n                      {'CosNotifyFilter_MappingFilter',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fbd3cd1cce0f195048025a19666e4bb8\"}]},\n                      {'CosNotifyFilter_MappingFilter_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c337925555dac8714bcde4ff0ac3682\"}]},\n                      {'CosNotifyFilter_UnsupportedFilterableData',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64044f951a82b03309ab90082ed6d354\"}]},\n                      {'PullerConsumer_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a96588beb8db62195c499ba6a61cc53f\"}]},\n                      {'PullerSupplier_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"90058bd6464dc08f79814185696ce1fb\"}]},\n                      {'PusherConsumer_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"72a8f62fb563174cf54b97aa1206b293\"}]},\n                      {'PusherSupplier_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1d03a842669765bf9907b644957fa7cb\"}]},\n                      {cosNotificationApp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0a6dabb21a8926c7f733904336b3375b\"}]},\n                      {cosNotification_Filter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"63cb134b80f03d8399abe10908055e40\"}]},\n                      {cosNotification_Grammar,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c5636b97c6e449aeafada1b5df5b6e91\"}]},\n                      {cosNotification_Scanner,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9c6334416492eb7be457c13d39b92222\"}]},\n                      {cosNotification_eventDB,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d52b15cf6eaba713bb979684b54fb8df\"}]},\n                      {oe_CosNotification,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"961cde96216694db976f1f714b0f4d6c\"}]},\n                      {oe_CosNotificationComm_Event,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"affa53e3f3dfcb411ff317d98a5ce64a\"}]},\n                      {oe_CosNotifyChannelAdmin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4ed58499950adf48241f1701c2116857\"}]},\n                      {oe_CosNotifyComm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a944c5aa4379e8f3b07acc9c5fd56f9a\"}]},\n                      {oe_CosNotifyFilter,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c51f3aaa451621c060bdb0d707324fbd\"}]},\n                      {oe_cosNotificationAppComm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed879b4fb4e5e3438e523069a29ce1aa\"}]}]}]}},\n                 {application,\n                  {cosFileTransfer,\n                   [{description,\"The Erlang CosFileTransfer application\"},\n                    {vsn,\"1.1.15\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosFileTransfer-1.1.15/ebin\"},\n                    {modules,\n                     [{'CosFileTransfer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"537730bb6ac118a9f672ea5c5616502c\"}]},\n                      {'CosFileTransfer_AccessLevel',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"538517d444956f350c54176200fa9c2d\"}]},\n                      {'CosFileTransfer_CommandNotImplementedException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"06bb7e58f28ad101e4cb2cd2336d3698\"}]},\n                      {'CosFileTransfer_Directory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3504d2207476a6439367e5e20b442bc\"}]},\n                      {'CosFileTransfer_Directory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ca00e96f4f13619cbcaf663edf819405\"}]},\n                      {'CosFileTransfer_File',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"082fb7de49fb7a94ad34873e876fbdd8\"}]},\n                      {'CosFileTransfer_FileIterator',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d7fce306a50dbb7edaea5f9eeec1d5ce\"}]},\n                      {'CosFileTransfer_FileIterator_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bb5946f486a03df082e02ec55308e270\"}]},\n                      {'CosFileTransfer_FileList',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5f508ab863f8cf90e46fda1e2bc6a01b\"}]},\n                      {'CosFileTransfer_FileNameList',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2044a2695019499e1294315eea9f3092\"}]},\n                      {'CosFileTransfer_FileNotFoundException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b00961e88651b5ab62c9d20b2d60c6e0\"}]},\n                      {'CosFileTransfer_FileTransferSession',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"102d05bd8c1fda9dfa1ba3769ef283fd\"}]},\n                      {'CosFileTransfer_FileTransferSession_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a6774a931a16efaa7bcbf342ef660b49\"}]},\n                      {'CosFileTransfer_FileWrapper',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4d19e7d1eeb8b381847003f8837be28d\"}]},\n                      {'CosFileTransfer_File_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64eda7b0b054da3e646bba7fbe6be70d\"}]},\n                      {'CosFileTransfer_IllegalOperationException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"25a05f47c3c2fc5d14d135acb6d72a5f\"}]},\n                      {'CosFileTransfer_ProtocolAddressList',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4587002261d4308181fc93122a15cea9\"}]},\n                      {'CosFileTransfer_ProtocolSupport',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c7937786969ccbba0967581d3c25ad54\"}]},\n                      {'CosFileTransfer_RequestFailureException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"384095c7be94a7544378f029e966cf2e\"}]},\n                      {'CosFileTransfer_SessionException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7ef101cef5808b9d7c08037e15ee66fa\"}]},\n                      {'CosFileTransfer_SupportedProtocolAddresses',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d145c64e85be77403b797ad505564018\"}]},\n                      {'CosFileTransfer_TransferException',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a4b8f0ca1710b11ed6d723ee1692c46c\"}]},\n                      {'CosFileTransfer_VirtualFileSystem',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"37e0d0057b23e3e1563b19539bc0a76d\"}]},\n                      {'CosFileTransfer_VirtualFileSystem_ContentList',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"165e5f4d21952fc5eb1f0a289c571fbc\"}]},\n                      {'CosFileTransfer_VirtualFileSystem_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"81b6bf0f44b0eab55cebc3d408671e0a\"}]},\n                      {cosFileTransferApp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed8d595027fd9c5f7dd1e9398a4351bf\"}]},\n                      {cosFileTransferNATIVE_file,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"91cd6a5ac4ba42b3d2ef0c0cf4c48270\"}]},\n                      {oe_CosFileTransfer,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"683aa469ec95c19f32d0f62f5f7ef6e7\"}]}]}]}},\n                 {application,\n                  {cosEventDomain,\n                   [{description,\"The Erlang CosEventDomain application\"},\n                    {vsn,\"1.1.13\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosEventDomain-1.1.13/ebin\"},\n                    {modules,\n                     [{'CosEventDomainAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2e2d9e538ddd0f2a2fa74f499e042db1\"}]},\n                      {'CosEventDomainAdmin_AlreadyExists',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a1ce2f0d94e633823bedf296aa1527e5\"}]},\n                      {'CosEventDomainAdmin_Connection',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a3d8e1bead63a2d7644f36edd4a66772\"}]},\n                      {'CosEventDomainAdmin_ConnectionIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"56929f00f5dcec6d75408d85921c693f\"}]},\n                      {'CosEventDomainAdmin_ConnectionNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4de106e024e8f9f45783dd7b45af2cc1\"}]},\n                      {'CosEventDomainAdmin_CycleCreationForbidden',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a28090bafe2078be88ee5cb996f9d23\"}]},\n                      {'CosEventDomainAdmin_CycleSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3232a8bb21e31c81f7791fdf0359d945\"}]},\n                      {'CosEventDomainAdmin_DiamondCreationForbidden',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8b9e307237ee3408e348d4593c0de997\"}]},\n                      {'CosEventDomainAdmin_DiamondSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"65478f4d3f155d7547b52ea7d04f6628\"}]},\n                      {'CosEventDomainAdmin_DomainIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4f44a097ccf00511ed397775b33991a8\"}]},\n                      {'CosEventDomainAdmin_DomainNotFound',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e17639bb3b5f18e80cd8f505191dbc7c\"}]},\n                      {'CosEventDomainAdmin_EventDomain',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b21b34fcceae9698702dadc469ef2cd1\"}]},\n                      {'CosEventDomainAdmin_EventDomainFactory',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bcf4395bcda2d977235b24ec4416ddec\"}]},\n                      {'CosEventDomainAdmin_EventDomainFactory_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a7d21747fe63505e98037202798cca90\"}]},\n                      {'CosEventDomainAdmin_EventDomain_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2801240b7c96984648d565b9b210b8fb\"}]},\n                      {'CosEventDomainAdmin_MemberIDSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"889c0e92b864877d5c2bbbd2ed185575\"}]},\n                      {'CosEventDomainAdmin_RouteSeq',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f77038e040e610031d35f876dfa2925e\"}]},\n                      {cosEventDomainApp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ea692728e2b3d71f1f486a7aece4df48\"}]},\n                      {oe_CosEventDomainAdmin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"939160a9e6adced7edf36e0a18927785\"}]}]}]}},\n                 {application,\n                  {cosEvent,\n                   [{description,\"The Erlang CosEvent application\"},\n                    {vsn,\"2.1.14\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/cosEvent-2.1.14/ebin\"},\n                    {modules,\n                     [{'CosEventChannelAdmin_AlreadyConnected',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"64cb912070ade0d3254585904ba4c509\"}]},\n                      {'CosEventChannelAdmin_ConsumerAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e027fd366965c17a0b51c3cfd80dcd4f\"}]},\n                      {'CosEventChannelAdmin_EventChannel',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f8d2e64b53114282c8c353dd5110ea9e\"}]},\n                      {'CosEventChannelAdmin_ProxyPullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9aef474c8cb0c5e9e2cb5d4cc43fe52d\"}]},\n                      {'CosEventChannelAdmin_ProxyPullConsumer_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9057fc161db130ea1ee3bd656b083ad0\"}]},\n                      {'CosEventChannelAdmin_ProxyPullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"11cc90a016f1b493838f6f79caa959fa\"}]},\n                      {'CosEventChannelAdmin_ProxyPushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"21b14ec7e74c8632349f31cb70324ca6\"}]},\n                      {'CosEventChannelAdmin_ProxyPushConsumer_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dabc851d850f372affa761150136640d\"}]},\n                      {'CosEventChannelAdmin_ProxyPushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d32c6d87385b474519aa936d9bd79256\"}]},\n                      {'CosEventChannelAdmin_SupplierAdmin',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b26b61665649ea2af6fc2b7174d7c4f7\"}]},\n                      {'CosEventChannelAdmin_SupplierAdmin_impl',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8606a32b7269881c1f455edce89344db\"}]},\n                      {'CosEventChannelAdmin_TypeError',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"20bb7e990eb8d6b0e854919c0dff94cc\"}]},\n                      {'CosEventComm_Disconnected',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"c2ec0e6b1fa849a2ab22fdd1ce14ecb7\"}]},\n                      {'CosEventComm_PullConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"43972738bc29806b38419aaf76d8c393\"}]},\n                      {'CosEventComm_PullSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5206247fdf5b00621d3732805fe1854a\"}]},\n                      {'CosEventComm_PushConsumer',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"72937626c2c3f3689fb6dafed66bad17\"}]},\n                      {'CosEventComm_PushSupplier',\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"54875107d8748bac2b96a3037669a477\"}]},\n                      {cosEventApp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dab9a7b6c3106899fe7d2c9e74fcb021\"}]},\n                      {oe_CosEventChannelAdmin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b192666923744044b3a0e652ec9e9948\"}]},\n                      {oe_CosEventComm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"884bef0af9742bfe5f3f7e345d24cd18\"}]},\n                      {oe_CosEventComm_CAdmin,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f344012f72ef7bfbdef3d29d525e2896\"}]},\n                      {oe_CosEventComm_CAdmin_impl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"935565447529d9e97da7b98c3631cc92\"}]},\n                      {oe_CosEventComm_Channel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fe816f373688feb5c63c10543eedd3c2\"}]},\n                      {oe_CosEventComm_Channel_impl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5c3c48bf48ac0b63f62d82064f9ce32f\"}]},\n                      {oe_CosEventComm_Event,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7f5146f9630ff6e60665cf32fc7e6641\"}]},\n                      {oe_CosEventComm_PullerS,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dbd58f368f06b16fa0a7628594f84c44\"}]},\n                      {oe_CosEventComm_PullerS_impl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2bd0c1df9074f1a792985b4ff1b0ec98\"}]},\n                      {oe_CosEventComm_PusherS,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"36dc7eaaa1b298b7875dd41b3e6b5b85\"}]},\n                      {oe_CosEventComm_PusherS_impl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"63c64664227a2772b5ad3d0c6519f8c4\"}]},\n                      {oe_cosEventApp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cc2ca7e6febb762f39f337c5303390e6\"}]}]}]}},\n                 {application,\n                  {compiler,\n                   [{description,\"ERTS  CXC 138 10\"},\n                    {vsn,\"4.9.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/compiler-4.9.2/ebin\"},\n                    {modules,\n                     [{beam_a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a338f3a7878d0c9a407950fcb5a2e7ed\"}]},\n                      {beam_asm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cef85f8577595b73910fa77803c58cdb\"}]},\n                      {beam_block,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7e7610e6f816e2c8d869e7ce1c44cba8\"}]},\n                      {beam_bool,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3fcb1cec9f4370800203e1189c01a10c\"}]},\n                      {beam_bsm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"973abf79efd649a3f0eb1b3351b4fe92\"}]},\n                      {beam_clean,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a0c6b67b764da86372deb11b4c5154f4\"}]},\n                      {beam_dead,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ff4f53d218b932103fcf093dbd366584\"}]},\n                      {beam_dict,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f1e8c36a21a5287a84844e7ffa0a9bbb\"}]},\n                      {beam_disasm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"63dd1f997343124a900e2fe982fe4cad\"}]},\n                      {beam_except,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"89dd12d9c4781f83554a9d2101d623d8\"}]},\n                      {beam_flatten,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a1e49fa674cc580042459878a27403e9\"}]},\n                      {beam_jump,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1a9f1ce9787205a57d137424b5ab022b\"}]},\n                      {beam_listing,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e9a84340142cd7c90e95851ab1260a0f\"}]},\n                      {beam_opcodes,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d5d21bc2584bf078639eba76a18d221\"}]},\n                      {beam_peep,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d81c38cab19af16ff472ce5838c63b1\"}]},\n                      {beam_receive,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"7d22ec74972c53f3f93bd01dbe369370\"}]},\n                      {beam_split,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"03b0416d0fee9081f68cf6468d036170\"}]},\n                      {beam_trim,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a6a01870ff8f8bda3ea36184da7348a\"}]},\n                      {beam_type,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"cc4a9521730959ffc10d3ccebd20861d\"}]},\n                      {beam_utils,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d7d2b1d7cc0722d47c7fd72fa6487d27\"}]},\n                      {beam_validator,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ed5a82e40ba511c22291f87c1e2b705b\"}]},\n                      {beam_z,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ffafc7070cf14ec69d569b0f8106f9a\"}]},\n                      {cerl,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"38c2ac91b52a3141d74df2f219b45eb5\"}]},\n                      {cerl_clauses,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"75da88dc5ced060fe52f177dae449ac0\"}]},\n                      {cerl_inline,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"976487fce255a37192ac2a9258cdacf9\"}]},\n                      {cerl_trees,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a240a6560f194a05956f572e436a6861\"}]},\n                      {compile,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"98a40d5fc6bcd14ac5e516a506b6161f\"}]},\n                      {core_lib,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bdda978e16a885a17587e575cb2b369\"}]},\n                      {core_lint,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"633c18d069ada94f1f1dfec526de2a2a\"}]},\n                      {core_parse,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"21b745083d46bbe9725eb423f0c73c7a\"}]},\n                      {core_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9940bb6f480fe3438bf97863ad0a5755\"}]},\n                      {core_scan,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1f3ff89deb03f34714390b93e678989c\"}]},\n                      {erl_bifs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"74c0a1563ea88b196dc2a18b1a34ffed\"}]},\n                      {rec_env,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9a6fdcf8ffe126bb2838f86949ced210\"}]},\n                      {sys_core_dsetel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2c45d53e09f1b3f4e92b8f2ff8adf258\"}]},\n                      {sys_core_fold,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ac092bdc7362a76cda76e27ad5610ec7\"}]},\n                      {sys_core_inline,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4f439077cdab9795b782412d556828fa\"}]},\n                      {sys_pre_attributes,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fc95feafdeca105f38589c4ca7b43532\"}]},\n                      {sys_pre_expand,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4b1c1e3bf39af00ca2988295aa2fbdbb\"}]},\n                      {v3_codegen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"590be66e39ccc3e6260a412ccbc8becd\"}]},\n                      {v3_core,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5997d0774f74e0bad9b8887d24a8bfa3\"}]},\n                      {v3_kernel,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"21a4b3edd53de6b910df1b99219824fc\"}]},\n                      {v3_kernel_pp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1ec5b0e503bcf660d6da8aca9cba9682\"}]},\n                      {v3_life,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"eb4ae7606e9409846d17c5c60751b08f\"}]}]}]}},\n                 {application,\n                  {common_test,\n                   [{description,\"The OTP Common Test application\"},\n                    {vsn,\"1.7.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/common_test-1.7.2/ebin\"},\n                    {modules,\n                     [{ct,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"1f3d139ac677184b601722b92977b971\"}]},\n                      {ct_config,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0257a2b9a5ed7e176df35b2c39a03a5a\"}]},\n                      {ct_config_plain,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8330eca3a0e4401b3a8f9508343df5cc\"}]},\n                      {ct_config_xml,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3502006ebdcc975febe9d750b28fd2b0\"}]},\n                      {ct_conn_log_h,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5f2e020e7c92f8a7c2c148faf855c9b0\"}]},\n                      {ct_cover,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"76b9cecb99d35c0bf38daa0a7107ddeb\"}]},\n                      {ct_event,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2dfbb0a114e64e69b012a83a29312fe8\"}]},\n                      {ct_framework,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d65dc75bd25fe8c45b3e574d18b0be87\"}]},\n                      {ct_ftp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f60d1979bd240e45fb63deb00c6dae6e\"}]},\n                      {ct_gen_conn,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"abb8aa2681d03230890eb5f3fcaffc6b\"}]},\n                      {ct_groups,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0f3c50d44938374c7e364cef4c905079\"}]},\n                      {ct_hooks,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5fbdbe96e81a1abe94ff6ce0c20c9574\"}]},\n                      {ct_hooks_lock,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6e94b9611b2abb9a665606264fb96c2c\"}]},\n                      {ct_logs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ec22f1709750c55acff646a44502c2db\"}]},\n                      {ct_make,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a2f7f755c88a136bbe56c5415901e217\"}]},\n                      {ct_master,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3d8a8fd7184fd07d8caec68f3653b7f8\"}]},\n                      {ct_master_event,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c497dbbef03d74f085ee633998aecba\"}]},\n                      {ct_master_logs,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a2180f96ad17256256d5ef731ac4d04\"}]},\n                      {ct_master_status,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5d63adbf76f9afa47c576284d77d75a9\"}]},\n                      {ct_netconfc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9bff4907efdc764c267f373d12956eca\"}]},\n                      {ct_repeat,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"b18f0f016143922207ef2dd5577d60dc\"}]},\n                      {ct_rpc,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"51957dfa13552f236dad5ad5ab1f83a0\"}]},\n                      {ct_run,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"bcaaaf893ba391b4ce961c33d48b3b5f\"}]},\n                      {ct_slave,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6b03499c65f734a1ad97e2fce458be92\"}]},\n                      {ct_snmp,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"8a6826b2fdf26d9e775f8352ab15b454\"}]},\n                      {ct_ssh,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"657b8f076669c2db4245acd4bc8254d7\"}]},\n                      {ct_telnet,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"47a92efe0ab4b30fe83d83d8d429a8fe\"}]},\n                      {ct_telnet_client,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"53f220488e09886c1933a060c000dddf\"}]},\n                      {ct_testspec,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"fb607ba1ef1abdab4ba76e654cbd1ce1\"}]},\n                      {ct_util,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e6178d700637198b47134c927348b72b\"}]},\n                      {cth_conn_log,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"113d8b745a6d162d678b03dba49ea048\"}]},\n                      {cth_log_redirect,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e7da913515a3b5841c7da153ce0883cb\"}]},\n                      {cth_surefire,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"3c7c9d2147289740b913895898126f1a\"}]},\n                      {unix_telnet,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d38cf476a56523e6222de857b16e89d0\"}]},\n                      {vts,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a31c45897c8d9fe60fbc9115599edcf7\"}]}]}]}},\n                 {application,\n                  {asn1,\n                   [{description,\"The Erlang ASN1 compiler version 2.0.2\"},\n                    {vsn,\"2.0.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/asn1-2.0.2/ebin\"},\n                    {modules,\n                     [{asn1_db,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d9af64def8344330927cefe9a2bf9a8a\"}]},\n                      {asn1ct,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"352b6c8edb6cf7dfc39b3b6b6b0a7b35\"}]},\n                      {asn1ct_check,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"5ef3333d2a492df6b90deff919f28b58\"}]},\n                      {asn1ct_constructed_ber_bin_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"41e917757a2c1195b8f86749a5905d64\"}]},\n                      {asn1ct_constructed_per,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"63d5e7bf85a641a2529c81c7888bfb52\"}]},\n                      {asn1ct_eval_ext,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4f5e38c39875f699ad76e07de7b073b7\"}]},\n                      {asn1ct_func,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"ea7118ee0d45ac6641313e378a1733db\"}]},\n                      {asn1ct_gen,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e5b2688ada58f6ed45c2e7e841088e3e\"}]},\n                      {asn1ct_gen_ber_bin_v2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"26db838a5c213d6ec1fe2fdf997a06d1\"}]},\n                      {asn1ct_gen_per,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"a67d91fec991b9f08680c35e95f907f0\"}]},\n                      {asn1ct_imm,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"9288c73c656cf6d60fd74bd7946581b2\"}]},\n                      {asn1ct_name,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"2ea14b79e5eb0ae2c3f08f92241f9c4f\"}]},\n                      {asn1ct_parser2,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"6a7951b400104d9f72bcfbb7405e4404\"}]},\n                      {asn1ct_pretty_format,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"dc1240d0e121f12732f8469cbd23051a\"}]},\n                      {asn1ct_rtt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"f24866e9e2295b4f6c5553ae44d53270\"}]},\n                      {asn1ct_table,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"4d4ec9835f20bc046769547da299363c\"}]},\n                      {asn1ct_tok,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"19908cc77297850954d101491e5eb97d\"}]},\n                      {asn1ct_value,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"388ba3507e46869822607142eef38d70\"}]},\n                      {asn1rt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0160799421ccb619fc6b08099bfaf37b\"}]},\n                      {asn1rt_nif,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"0c579098c3d97270d004e54a94e42daa\"}]}]}]}},\n                 {application,\n                  {appmon,\n                   [{description,\"DEVTOOLS  CXC 138 16\"},\n                    {vsn,\"2.1.14.2\"},\n                    {path,\n                     \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/lib/appmon-2.1.14.2/ebin\"},\n                    {modules,\n                     [{appmon,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"97b8d88aecbd66963563a5aa5df0d0bc\"}]},\n                      {appmon_a,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"adb9049e71eb9e2131b6952974302b4c\"}]},\n                      {appmon_dg,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"438c40af3e96404e73904864597dcca0\"}]},\n                      {appmon_lb,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"d851ee67b54dbf0da46cb21a8c1f7bd9\"}]},\n                      {appmon_place,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"192140bb8bc7e74fd7121d8da2019c56\"}]},\n                      {appmon_txt,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"34c7f9da76880b4f7fcfeb0856fcc097\"}]},\n                      {appmon_web,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"449317a9770ff1aa4cf001604bd2261c\"}]},\n                      {process_info,\n                       [{loaded,false},\n                        {native,false},\n                        {compiler,\"4.9.1\"},\n                        {md5,\"e6d86fad6d0d208318c48af00853ec5b\"}]}]}]}}]},\n               {system_info,\n                [{allocator,\n                  {glibc,\n                   [2,4],\n                   [sys_alloc,temp_alloc,sl_alloc,std_alloc,ll_alloc,\n                    eheap_alloc,ets_alloc,fix_alloc,binary_alloc,driver_alloc,\n                    mseg_alloc],\n                   [{sys_alloc,[{e,true},{m,libc},{tt,131072},{tp,0}]},\n                    {temp_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,90},\n                      {rsbcmt,80},\n                      {rmbcmt,100},\n                      {mmbcs,131072},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,10485760},\n                      {smbcs,1048576},\n                      {mbcgs,10},\n                      {acul,0},\n                      {mbsd,3},\n                      {as,gf}]},\n                    {sl_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,80},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {mbsd,3},\n                      {as,gf}]},\n                    {std_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,20},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,bf}]},\n                    {ll_alloc,\n                     [{e,true},\n                      {t,false},\n                      {ramv,false},\n                      {sbct,18446744073709551615},\n                      {asbcst,0},\n                      {rsbcst,0},\n                      {rsbcmt,0},\n                      {rmbcmt,0},\n                      {mmbcs,2097112},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,0},\n                      {lmbcs,10485760},\n                      {smbcs,1048576},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,aobf}]},\n                    {eheap_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,50},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,131072},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {mbsd,3},\n                      {as,gf}]},\n                    {ets_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,20},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,bf}]},\n                    {fix_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,20},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,aobf}]},\n                    {binary_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,20},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,bf}]},\n                    {driver_alloc,\n                     [{e,true},\n                      {t,true},\n                      {ramv,false},\n                      {sbct,524288},\n                      {asbcst,4145152},\n                      {rsbcst,20},\n                      {rsbcmt,80},\n                      {rmbcmt,50},\n                      {mmbcs,32768},\n                      {mmmbc,18446744073709551615},\n                      {mmsbc,256},\n                      {lmbcs,5242880},\n                      {smbcs,262144},\n                      {mbcgs,10},\n                      {acul,0},\n                      {as,bf}]},\n                    {mseg_alloc,[{amcbf,4194304},{rmcbf,20},{mcs,10}]},\n                    {alloc_util,[{mmc,1024},{ycs,1048576}]},\n                    {instr,[{m,false},{s,false},{t,false}]}]}},\n                 {check_io,\n                  [{name,erts_poll},\n                   {primary,poll},\n                   {fallback,false},\n                   {kernel_poll,false},\n                   {memory_size,49808},\n                   {total_poll_set_size,2},\n                   {lazy_updates,true},\n                   {pending_updates,0},\n                   {batch_updates,false},\n                   {concurrent_updates,false},\n                   {max_fds,1024}]},\n                 {otp_release,\"R16B02\"},\n                 {port_limit,65536},\n                 {process_limit,262144},\n                 {smp_support,true},\n                 {system_version,\n                  \"Erlang R16B02 (erts-5.10.3) [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]\\n\"},\n                 {system_architecture,\"x86_64-unknown-linux-gnu\"},\n                 {threads,true},\n                 {thread_pool_size,10},\n                 {{wordsize,internal},8},\n                 {{wordsize,external},8},\n                 {{cpu_topology,defined},undefined},\n                 {{cpu_topology,detected},\n                  [{node,\n                    [{processor,[{core,{logical,0}},{core,{logical,1}}]}]},\n                   {node,\n                    [{processor,[{core,{logical,2}},{core,{logical,3}}]}]}]},\n                 {scheduler_bind_type,unbound},\n                 {scheduler_bindings,{unbound,unbound,unbound,unbound}},\n                 {compat_rel,16},\n                 {schedulers_state,{4,4,4}},\n                 {build_type,opt},\n                 {logical_processors,4},\n                 {logical_processors_online,4},\n                 {logical_processors_available,4},\n                 {driver_version,\"2.1\"},\n                 {nif_version,\"1.1\"},\n                 {taints,[]}]},\n               {erts_compile_info,\n                [{ldflags,[]},\n                 {cflags,\n                  \"-g -O2 -I/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp_src_R16B02/erts/x86_64-unknown-linux-gnu -DOTP_RELEASE   -D_GNU_SOURCE -DERTS_SMP -DHAVE_CONFIG_H -Wall -Wstrict-prototypes -Wmissing-prototypes -Wdeclaration-after-statement -DUSE_THREADS -D_THREAD_SAFE -D_REENTRANT -DPOSIX_THREADS -D_POSIX_THREAD_SAFE_FUNCTIONS  \"},\n                 {config_h,\n                  \"/* x86_64-unknown-linux-gnu/config.h.  Generated by configure.  */\\n/* config.h.in.  Generated from configure.in by autoheader.  */\\n\\n\\n#define GHBN_R_SOLARIS  2\\n#define GHBN_R_AIX      3\\n#define GHBN_R_GLIBC    4\\n\\n\\n/* Define the brk() argument type. */\\n#define BRK_ARG_TYPE void *\\n\\n/* Define the brk() return type. */\\n#define BRK_RET_TYPE int\\n\\n/* Define if you do not have a high-res. timer & want to use times() instead\\n   */\\n/* #undef CORRECT_USING_TIMES */\\n\\n/* Modern style mcontext_t in MacOSX */\\n/* #undef DARWIN_MODERN_MCONTEXT */\\n\\n/* Define if you need to include rpc/types.h to get INADDR_LOOPBACK defined */\\n/* #undef DEF_INADDR_LOOPBACK_IN_RPC_TYPES_H */\\n\\n/* Define if you need to include winsock2.h to get INADDR_LOOPBACK defined */\\n/* #undef DEF_INADDR_LOOPBACK_IN_WINSOCK2_H */\\n\\n/* Define if you want to disable child waiter thread */\\n/* #undef DISABLE_CHILD_WAITER_THREAD */\\n\\n/* Define if you want to disable vfork. */\\n/* #undef DISABLE_VFORK */\\n\\n/* Define to 1 if your processor stores the words in a double in middle-endian\\n   format (like some ARMs). */\\n/* #undef DOUBLE_MIDDLE_ENDIAN */\\n\\n/* Define if you want to enable child waiter thread */\\n/* #undef ENABLE_CHILD_WAITER_THREAD */\\n\\n/* Define if sbrk()/brk() wrappers can track malloc()s core memory use */\\n/* #undef ERTS_BRK_WRAPPERS_CAN_TRACK_MALLOC */\\n\\n/* The only reason ERTS_EMU_CMDLINE_FLAGS exists is to force modification of\\n   config.h when the emulator command line flags are modified by configure */\\n#define ERTS_EMU_CMDLINE_FLAGS \\\" -g -O2 -I/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp_src_R16B02/erts/x86_64-unknown-linux-gnu -DOTP_RELEASE   -D_GNU_SOURCE -g  -D_GNU_SOURCE -I/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp_src_R16B02/erts/x86_64-unknown-linux-gnu -DOTP_RELEASE   -DUSE_THREADS -D_THREAD_SAFE -D_REENTRANT -DPOSIX_THREADS -D_POSIX_THREAD_SAFE_FUNCTIONS   -Wall -Wstrict-prototypes -Wmissing-prototypes -Wdeclaration-after-statement\\\"\\n\\n/* Define if you have kernel poll and want to use it */\\n#define ERTS_ENABLE_KERNEL_POLL 1\\n\\n/* Define if the smp emulator is built */\\n#define ERTS_HAVE_SMP_EMU 1\\n\\n/* Define if dlopen() needs to be called before first call to dlerror() */\\n/* #undef ERTS_NEED_DLOPEN_BEFORE_DLERROR */\\n\\n/* Define if poll() should be used instead of select() */\\n#define ERTS_USE_POLL 1\\n\\n/* Define if __after_morecore_hook can track malloc()s core memory use. */\\n#define ERTS___AFTER_MORECORE_HOOK_CAN_TRACK_MALLOC 1\\n\\n/* Define if bigendian */\\n/* #undef ETHR_BIGENDIAN */\\n\\n/* Define if you get a register shortage with cmpxchg8b and position\\n   independent code */\\n/* #undef ETHR_CMPXCHG8B_REGISTER_SHORTAGE */\\n\\n/* Define if you want to disable native ethread implementations */\\n/* #undef ETHR_DISABLE_NATIVE_IMPLS */\\n\\n/* Define if you want to force usage of pthread rwlocks */\\n/* #undef ETHR_FORCE_PTHREAD_RWLOCK */\\n\\n/* Define if you use a gcc that supports the double word cmpxchg instruction\\n   */\\n#define ETHR_GCC_HAVE_DW_CMPXCHG_ASM_SUPPORT 1\\n\\n/* Define if you use a gcc that supports -msse2 and understand sse2 specific\\n   asm statements */\\n/* #undef ETHR_GCC_HAVE_SSE2_ASM_SUPPORT */\\n\\n/* Define if you have all ethread defines */\\n#define ETHR_HAVE_ETHREAD_DEFINES 1\\n\\n/* Define if you have libatomic_ops atomic operations */\\n/* #undef ETHR_HAVE_LIBATOMIC_OPS */\\n\\n/* Define if you have a linux futex implementation. */\\n#define ETHR_HAVE_LINUX_FUTEX 1\\n\\n/* Define if the pthread.h header file is in pthread/mit directory. */\\n/* #undef ETHR_HAVE_MIT_PTHREAD_H */\\n\\n/* Define if you have the pthread_attr_setguardsize function. */\\n#define ETHR_HAVE_PTHREAD_ATTR_SETGUARDSIZE 1\\n\\n/* Define if you have the <pthread.h> header file. */\\n#define ETHR_HAVE_PTHREAD_H 1\\n\\n/* Define if you have the pthread_rwlockattr_setkind_np() function. */\\n#define ETHR_HAVE_PTHREAD_RWLOCKATTR_SETKIND_NP 1\\n\\n/* Define if you have the PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP rwlock\\n   attribute. */\\n#define ETHR_HAVE_PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 1\\n\\n/* Define if you have the pthread_spin_lock function. */\\n#define ETHR_HAVE_PTHREAD_SPIN_LOCK 1\\n\\n/* Define if you have the pthread_yield() function. */\\n#define ETHR_HAVE_PTHREAD_YIELD 1\\n\\n/* Define if you have the <sched.h> header file. */\\n#define ETHR_HAVE_SCHED_H 1\\n\\n/* Define if you have the sched_yield() function. */\\n#define ETHR_HAVE_SCHED_YIELD 1\\n\\n/* Define if you have the <sys/time.h> header file. */\\n#define ETHR_HAVE_SYS_TIME_H 1\\n\\n/* Define if you have _InterlockedAnd() */\\n/* #undef ETHR_HAVE__INTERLOCKEDAND */\\n\\n/* Define if you have _InterlockedAnd64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDAND64 */\\n\\n/* Define if you have _InterlockedCompareExchange() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE */\\n\\n/* Define if you have _InterlockedCompareExchange128() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE128 */\\n\\n/* Define if you have _InterlockedCompareExchange64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64 */\\n\\n/* Define if you have _InterlockedCompareExchange64_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64_ACQ */\\n\\n/* Define if you have _InterlockedCompareExchange64_rel() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE64_REL */\\n\\n/* Define if you have _InterlockedCompareExchange_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE_ACQ */\\n\\n/* Define if you have _InterlockedCompareExchange_rel() */\\n/* #undef ETHR_HAVE__INTERLOCKEDCOMPAREEXCHANGE_REL */\\n\\n/* Define if you have _InterlockedDecrement() */\\n/* #undef ETHR_HAVE__INTERLOCKEDDECREMENT */\\n\\n/* Define if you have _InterlockedDecrement64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDDECREMENT64 */\\n\\n/* Define if you have _InterlockedDecrement64_rel() */\\n/* #undef ETHR_HAVE__INTERLOCKEDDECREMENT64_REL */\\n\\n/* Define if you have _InterlockedDecrement_rel() */\\n/* #undef ETHR_HAVE__INTERLOCKEDDECREMENT_REL */\\n\\n/* Define if you have _InterlockedExchange() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGE */\\n\\n/* Define if you have _InterlockedExchange64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGE64 */\\n\\n/* Define if you have _InterlockedExchangeAdd() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD */\\n\\n/* Define if you have _InterlockedExchangeAdd64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD64 */\\n\\n/* Define if you have _InterlockedExchangeAdd64_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD64_ACQ */\\n\\n/* Define if you have _InterlockedExchangeAdd_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDEXCHANGEADD_ACQ */\\n\\n/* Define if you have _InterlockedIncrement() */\\n/* #undef ETHR_HAVE__INTERLOCKEDINCREMENT */\\n\\n/* Define if you have _InterlockedIncrement64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDINCREMENT64 */\\n\\n/* Define if you have _InterlockedIncrement64_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDINCREMENT64_ACQ */\\n\\n/* Define if you have _InterlockedIncrement_acq() */\\n/* #undef ETHR_HAVE__INTERLOCKEDINCREMENT_ACQ */\\n\\n/* Define if you have _InterlockedOr() */\\n/* #undef ETHR_HAVE__INTERLOCKEDOR */\\n\\n/* Define if you have _InterlockedOr64() */\\n/* #undef ETHR_HAVE__INTERLOCKEDOR64 */\\n\\n/* Define if you have __sync_add_and_fetch() for 32-bit integers */\\n#define ETHR_HAVE___SYNC_ADD_AND_FETCH32 1\\n\\n/* Define if you have __sync_add_and_fetch() for 64-bit integers */\\n#define ETHR_HAVE___SYNC_ADD_AND_FETCH64 1\\n\\n/* Define if you have __sync_fetch_and_and() for 32-bit integers */\\n#define ETHR_HAVE___SYNC_FETCH_AND_AND32 1\\n\\n/* Define if you have __sync_fetch_and_and() for 64-bit integers */\\n#define ETHR_HAVE___SYNC_FETCH_AND_AND64 1\\n\\n/* Define if you have __sync_fetch_and_or() for 32-bit integers */\\n#define ETHR_HAVE___SYNC_FETCH_AND_OR32 1\\n\\n/* Define if you have __sync_fetch_and_or() for 64-bit integers */\\n#define ETHR_HAVE___SYNC_FETCH_AND_OR64 1\\n\\n/* Define if you have __sync_val_compare_and_swap() for 128-bit integers */\\n/* #undef ETHR_HAVE___SYNC_VAL_COMPARE_AND_SWAP128 */\\n\\n/* Define if you have __sync_val_compare_and_swap() for 32-bit integers */\\n#define ETHR_HAVE___SYNC_VAL_COMPARE_AND_SWAP32 1\\n\\n/* Define if you have __sync_val_compare_and_swap() for 64-bit integers */\\n#define ETHR_HAVE___SYNC_VAL_COMPARE_AND_SWAP64 1\\n\\n/* Define if you want to modify the default stack size */\\n/* #undef ETHR_MODIFIED_DEFAULT_STACK_SIZE */\\n\\n/* Define if you need the <nptl/pthread.h> header file. */\\n/* #undef ETHR_NEED_NPTL_PTHREAD_H */\\n\\n/* Define if you prefer gcc native ethread implementations */\\n/* #undef ETHR_PREFER_GCC_NATIVE_IMPLS */\\n\\n/* Define if you prefer libatomic_ops native ethread implementations */\\n/* #undef ETHR_PREFER_LIBATOMIC_OPS_NATIVE_IMPLS */\\n\\n/* Define if you have pthreads */\\n#define ETHR_PTHREADS 1\\n\\n/* Define if pthread_yield() returns an int. */\\n#define ETHR_PTHREAD_YIELD_RET_INT 1\\n\\n/* Define if sched_yield() returns an int. */\\n#define ETHR_SCHED_YIELD_RET_INT 1\\n\\n/* Define to the size of AO_t if libatomic_ops is used */\\n/* #undef ETHR_SIZEOF_AO_T */\\n\\n/* Define to the size of int */\\n#define ETHR_SIZEOF_INT 4\\n\\n/* Define to the size of long */\\n#define ETHR_SIZEOF_LONG 8\\n\\n/* Define to the size of long long */\\n#define ETHR_SIZEOF_LONG_LONG 8\\n\\n/* Define to the size of pointers */\\n#define ETHR_SIZEOF_PTR 8\\n\\n/* Define to the size of __int128_t */\\n#define ETHR_SIZEOF___INT128_T 16\\n\\n/* Define to the size of __int64 */\\n#define ETHR_SIZEOF___INT64 0\\n\\n/* Define if only run in Sparc PSO, or TSO mode */\\n/* #undef ETHR_SPARC_PSO */\\n\\n/* Define if run in Sparc RMO, PSO, or TSO mode */\\n/* #undef ETHR_SPARC_RMO */\\n\\n/* Define if only run in Sparc TSO mode */\\n/* #undef ETHR_SPARC_TSO */\\n\\n/* Define if you can safely include both <sys/time.h> and <time.h>. */\\n#define ETHR_TIME_WITH_SYS_TIME 1\\n\\n/* Define if you have win32 threads */\\n/* #undef ETHR_WIN32_THREADS */\\n\\n/* Define if x86/x86_64 out of order instructions should be synchronized */\\n/* #undef ETHR_X86_OUT_OF_ORDER */\\n\\n/* Define if you want to use clock_gettime to simulate gethrtime */\\n#define GETHRTIME_WITH_CLOCK_GETTIME 1\\n\\n/* Define if building a halfword-heap 64bit emulator */\\n/* #undef HALFWORD_HEAP_EMULATOR */\\n\\n/* Define to 1 if you have the <arpa/nameser.h> header file. */\\n#define HAVE_ARPA_NAMESER_H 1\\n\\n/* Define to 1 if you have the `brk' function. */\\n#define HAVE_BRK 1\\n\\n/* define if clock_gettime() works for getting process time */\\n/* #undef HAVE_CLOCK_GETTIME */\\n\\n/* Define if you have a decl of fread that conflicts with int fread */\\n#define HAVE_CONFLICTING_FREAD_DECLARATION 1\\n\\n/* Define if you have a putenv() that stores a copy of the key-value pair */\\n/* #undef HAVE_COPYING_PUTENV */\\n\\n/* Define if you have cpuset_getaffinity/cpuset_setaffinity */\\n/* #undef HAVE_CPUSET_xETAFFINITY */\\n\\n/* Define to 1 if you have the declaration of `getrlimit', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_GETRLIMIT 1\\n\\n/* Define to 1 if you have the declaration of `IN6ADDR_ANY_INIT', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_IN6ADDR_ANY_INIT 1\\n\\n/* Define to 1 if you have the declaration of `IN6ADDR_LOOPBACK_INIT', and to\\n   0 if you don't. */\\n#define HAVE_DECL_IN6ADDR_LOOPBACK_INIT 1\\n\\n/* Define to 1 if you have the declaration of `IPV6_V6ONLY', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_IPV6_V6ONLY 1\\n\\n/* Define to 1 if you have the declaration of `posix2time', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_POSIX2TIME 0\\n\\n/* Define to 1 if you have the declaration of `RLIMIT_STACK', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_RLIMIT_STACK 1\\n\\n/* Define to 1 if you have the declaration of `SCTPS_BOUND', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTPS_BOUND 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_COOKIE_ECHOED', and to 0\\n   if you don't. */\\n#define HAVE_DECL_SCTPS_COOKIE_ECHOED 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_COOKIE_WAIT', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTPS_COOKIE_WAIT 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_ESTABLISHED', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTPS_ESTABLISHED 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_IDLE', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTPS_IDLE 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_LISTEN', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTPS_LISTEN 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_ACK_SENT', and\\n   to 0 if you don't. */\\n#define HAVE_DECL_SCTPS_SHUTDOWN_ACK_SENT 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_PENDING', and to\\n   0 if you don't. */\\n#define HAVE_DECL_SCTPS_SHUTDOWN_PENDING 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_RECEIVED', and\\n   to 0 if you don't. */\\n#define HAVE_DECL_SCTPS_SHUTDOWN_RECEIVED 0\\n\\n/* Define to 1 if you have the declaration of `SCTPS_SHUTDOWN_SENT', and to 0\\n   if you don't. */\\n#define HAVE_DECL_SCTPS_SHUTDOWN_SENT 0\\n\\n/* Define to 1 if you have the declaration of `SCTP_ABORT', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_ABORT 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_ADDR_CONFIRMED', and to 0\\n   if you don't. */\\n#define HAVE_DECL_SCTP_ADDR_CONFIRMED 0\\n\\n/* Define to 1 if you have the declaration of `SCTP_ADDR_OVER', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTP_ADDR_OVER 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_BOUND', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_BOUND 0\\n\\n/* Define to 1 if you have the declaration of `SCTP_CLOSED', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_CLOSED 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_COOKIE_ECHOED', and to 0\\n   if you don't. */\\n#define HAVE_DECL_SCTP_COOKIE_ECHOED 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_COOKIE_WAIT', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTP_COOKIE_WAIT 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_DELAYED_ACK_TIME', and to\\n   0 if you don't. */\\n#define HAVE_DECL_SCTP_DELAYED_ACK_TIME 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_EMPTY', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_EMPTY 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_EOF', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_EOF 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_ESTABLISHED', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTP_ESTABLISHED 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_LISTEN', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_LISTEN 0\\n\\n/* Define to 1 if you have the declaration of `SCTP_SENDALL', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SCTP_SENDALL 0\\n\\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_ACK_SENT', and to\\n   0 if you don't. */\\n#define HAVE_DECL_SCTP_SHUTDOWN_ACK_SENT 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_PENDING', and to\\n   0 if you don't. */\\n#define HAVE_DECL_SCTP_SHUTDOWN_PENDING 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_RECEIVED', and to\\n   0 if you don't. */\\n#define HAVE_DECL_SCTP_SHUTDOWN_RECEIVED 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_SHUTDOWN_SENT', and to 0\\n   if you don't. */\\n#define HAVE_DECL_SCTP_SHUTDOWN_SENT 1\\n\\n/* Define to 1 if you have the declaration of `SCTP_UNORDERED', and to 0 if\\n   you don't. */\\n#define HAVE_DECL_SCTP_UNORDERED 1\\n\\n/* Define to 1 if you have the declaration of `setrlimit', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_SETRLIMIT 1\\n\\n/* Define to 1 if you have the declaration of `time2posix', and to 0 if you\\n   don't. */\\n#define HAVE_DECL_TIME2POSIX 0\\n\\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\\n   */\\n#define HAVE_DIRENT_H 1\\n\\n/* Define to 1 if you have the <dlfcn.h> header file. */\\n#define HAVE_DLFCN_H 1\\n\\n/* Define to 1 if you have the `dlopen' function. */\\n#define HAVE_DLOPEN 1\\n\\n/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */\\n/* #undef HAVE_DOPRNT */\\n\\n/* Define if you have the 'end' symbol */\\n#define HAVE_END_SYMBOL 1\\n\\n/* Define if you have a working fallocate() */\\n/* #undef HAVE_FALLOCATE */\\n\\n/* Define to 1 if you have the <fcntl.h> header file. */\\n#define HAVE_FCNTL_H 1\\n\\n/* Define to 1 if you have the `fdatasync' function. */\\n#define HAVE_FDATASYNC 1\\n\\n/* Define to 1 if you have the `finite' function. */\\n#define HAVE_FINITE 1\\n\\n/* Define to 1 if you have the `flockfile' function. */\\n#define HAVE_FLOCKFILE 1\\n\\n/* Define to 1 if you have the `fork' function. */\\n#define HAVE_FORK 1\\n\\n/* Define to 1 if you have the `fpsetmask' function. */\\n/* #undef HAVE_FPSETMASK */\\n\\n/* Define to 1 if you have the `fstat' function. */\\n#define HAVE_FSTAT 1\\n\\n/* Define if you have fwrite_unlocked */\\n#define HAVE_FWRITE_UNLOCKED 1\\n\\n/* Define to 1 if you have a good `getaddrinfo' function. */\\n#define HAVE_GETADDRINFO 1\\n\\n/* Define to 1 if you have the `gethostbyname2' function. */\\n#define HAVE_GETHOSTBYNAME2 1\\n\\n/* Define to flavour of gethostbyname_r */\\n#define HAVE_GETHOSTBYNAME_R GHBN_R_GLIBC\\n\\n/* Define to 1 if you have the `gethrtime' function. */\\n/* #undef HAVE_GETHRTIME */\\n\\n/* define if gethrvtime() works and uses ioctl() to /proc/self */\\n/* #undef HAVE_GETHRVTIME_PROCFS_IOCTL */\\n\\n/* Define to 1 if you have the `getifaddrs' function. */\\n#define HAVE_GETIFADDRS 1\\n\\n/* Define to 1 if you have the `getipnodebyaddr' function. */\\n/* #undef HAVE_GETIPNODEBYADDR */\\n\\n/* Define to 1 if you have the `getipnodebyname' function. */\\n/* #undef HAVE_GETIPNODEBYNAME */\\n\\n/* Define to 1 if you have a good `getnameinfo' function. */\\n#define HAVE_GETNAMEINFO 1\\n\\n/* Define to 1 if you have the `gmtime_r' function. */\\n#define HAVE_GMTIME_R 1\\n\\n/* Define to 1 if you have the <ieeefp.h> header file. */\\n/* #undef HAVE_IEEEFP_H */\\n\\n/* Define to 1 if you have the `ieee_handler' function. */\\n/* #undef HAVE_IEEE_HANDLER */\\n\\n/* Define to 1 if you have the <ifaddrs.h> header file. */\\n#define HAVE_IFADDRS_H 1\\n\\n/* Define if ipv6 is present */\\n#define HAVE_IN6 1\\n\\n/* Define to 1 if you have the variable in6addr_any declared. */\\n#define HAVE_IN6ADDR_ANY 1\\n\\n/* Define to 1 if you have the variable in6addr_loopback declared. */\\n#define HAVE_IN6ADDR_LOOPBACK 1\\n\\n/* Define to 1 if you have the `inet_pton' function. */\\n#define HAVE_INET_PTON 1\\n\\n/* Define to 1 if you have the <inttypes.h> header file. */\\n#define HAVE_INTTYPES_H 1\\n\\n/* Early linux used in_addr6 instead of in6_addr, define if you have this */\\n/* #undef HAVE_IN_ADDR6_STRUCT */\\n\\n/* Define to 1 if you have the `isinf' function. */\\n#define HAVE_ISINF 1\\n\\n/* Define to 1 if you have the `isnan' function. */\\n#define HAVE_ISNAN 1\\n\\n/* Define if you have kstat */\\n/* #undef HAVE_KSTAT */\\n\\n/* Define to 1 if you have the <langinfo.h> header file. */\\n#define HAVE_LANGINFO_H 1\\n\\n/* Define to 1 if you have the `dl' library (-ldl). */\\n#define HAVE_LIBDL 1\\n\\n/* Define to 1 if you have the `dlpi' library (-ldlpi). */\\n/* #undef HAVE_LIBDLPI */\\n\\n/* Define to 1 if you have the <libdlpi.h> header file. */\\n/* #undef HAVE_LIBDLPI_H */\\n\\n/* Define to 1 if you have the `inet' library (-linet). */\\n/* #undef HAVE_LIBINET */\\n\\n/* Define to 1 if you have the `m' library (-lm). */\\n#define HAVE_LIBM 1\\n\\n/* Define to 1 if you have the `util' library (-lutil). */\\n#define HAVE_LIBUTIL 1\\n\\n/* Define to 1 if you have the `z' library (-lz). */\\n/* #undef HAVE_LIBZ */\\n\\n/* Define to 1 if you have the <limits.h> header file. */\\n#define HAVE_LIMITS_H 1\\n\\n/* Define to 1 if you have the <linux/falloc.h> header file. */\\n/* #undef HAVE_LINUX_FALLOC_H */\\n\\n/* Define to 1 if you have the `localtime_r' function. */\\n#define HAVE_LOCALTIME_R 1\\n\\n/* Define to 1 if you have the <malloc.h> header file. */\\n#define HAVE_MALLOC_H 1\\n\\n/* Define to 1 if you have the `mallopt' function. */\\n#define HAVE_MALLOPT 1\\n\\n/* Define to 1 if you have the `memcpy' function. */\\n#define HAVE_MEMCPY 1\\n\\n/* Define to 1 if you have the `memmove' function. */\\n#define HAVE_MEMMOVE 1\\n\\n/* Define to 1 if you have the <memory.h> header file. */\\n#define HAVE_MEMORY_H 1\\n\\n/* Define if the pthread.h header file is in pthread/mit directory. */\\n/* #undef HAVE_MIT_PTHREAD_H */\\n\\n/* Define to 1 if you have the `mmap' function. */\\n#define HAVE_MMAP 1\\n\\n/* Define to 1 if you have the `mremap' function. */\\n#define HAVE_MREMAP 1\\n\\n/* Define if setsockopt() accepts multicast options */\\n#define HAVE_MULTICAST_SUPPORT 1\\n\\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\\n/* #undef HAVE_NDIR_H */\\n\\n/* Define to 1 if you have the <netpacket/packet.h> header file. */\\n#define HAVE_NETPACKET_PACKET_H 1\\n\\n/* Define to 1 if you have the <net/errno.h> header file. */\\n/* #undef HAVE_NET_ERRNO_H */\\n\\n/* Define to 1 if you have the <net/if_dl.h> header file. */\\n/* #undef HAVE_NET_IF_DL_H */\\n\\n/* Define to 1 if you have the `nl_langinfo' function. */\\n#define HAVE_NL_LANGINFO 1\\n\\n/* Define if you don't have a definition of INADDR_LOOPBACK */\\n/* #undef HAVE_NO_INADDR_LOOPBACK */\\n\\n/* Define to 1 if you have the `openpty' function. */\\n#define HAVE_OPENPTY 1\\n\\n/* Define to 1 if you have the `poll' function. */\\n#define HAVE_POLL 1\\n\\n/* Define to 1 if you have the <poll.h> header file. */\\n#define HAVE_POLL_H 1\\n\\n/* Define to 1 if you have the `posix2time' function. */\\n/* #undef HAVE_POSIX2TIME */\\n\\n/* Define to 1 if you have the `posix_fadvise' function. */\\n#define HAVE_POSIX_FADVISE 1\\n\\n/* Define if you have a working posix_fallocate() */\\n/* #undef HAVE_POSIX_FALLOCATE */\\n\\n/* Define to 1 if you have the `pread' function. */\\n#define HAVE_PREAD 1\\n\\n/* Define if you have processor_bind functionality */\\n/* #undef HAVE_PROCESSOR_BIND */\\n\\n/* Define if you have pset functionality */\\n/* #undef HAVE_PSET */\\n\\n/* Define if you have the <pthread.h> header file. */\\n#define HAVE_PTHREAD_H 1\\n\\n/* Define to 1 if you have the <pty.h> header file. */\\n#define HAVE_PTY_H 1\\n\\n/* Define if you have putc_unlocked */\\n#define HAVE_PUTC_UNLOCKED 1\\n\\n/* Define to 1 if you have the `pwrite' function. */\\n#define HAVE_PWRITE 1\\n\\n/* Define to 1 if you have the `res_gethostbyname' function. */\\n/* #undef HAVE_RES_GETHOSTBYNAME */\\n\\n/* Define to 1 if you have the `sbrk' function. */\\n#define HAVE_SBRK 1\\n\\n/* Define if you have sched_getaffinity/sched_setaffinity */\\n#define HAVE_SCHED_xETAFFINITY 1\\n\\n/* Define to 1 if you have the `sctp_bindx' function. */\\n/* #undef HAVE_SCTP_BINDX */\\n\\n/* Define to 1 if you have the <netinet/sctp.h> header file */\\n#define HAVE_SCTP_H 1\\n\\n/* Define to 1 if you have the `sctp_peeloff' function. */\\n/* #undef HAVE_SCTP_PEELOFF */\\n\\n/* Define to 1 if you have the <sdkddkver.h> header file. */\\n/* #undef HAVE_SDKDDKVER_H */\\n\\n/* Define to 1 if you have the `sendfile' function. */\\n#define HAVE_SENDFILE 1\\n\\n/* Define to 1 if you have the `sendfilev' function. */\\n/* #undef HAVE_SENDFILEV */\\n\\n/* Define to 1 if you have the `setlocale' function. */\\n#define HAVE_SETLOCALE 1\\n\\n/* Define to 1 if you have the `setsid' function. */\\n#define HAVE_SETSID 1\\n\\n/* Define if we have socklen_t */\\n#define HAVE_SOCKLEN_T 1\\n\\n/* define if you have the Solaris/ultrasparc /dev/perfmon interface */\\n/* #undef HAVE_SOLARIS_SPARC_PERFMON */\\n\\n/* Define if you have SO_BSDCOMPAT flag on sockets */\\n/* #undef HAVE_SO_BSDCOMPAT */\\n\\n/* Define to 1 if you have the <stdint.h> header file. */\\n#define HAVE_STDINT_H 1\\n\\n/* Define to 1 if you have the <stdlib.h> header file. */\\n#define HAVE_STDLIB_H 1\\n\\n/* Define to 1 if you have the `strerror' function. */\\n#define HAVE_STRERROR 1\\n\\n/* Define to 1 if you have the `strerror_r' function. */\\n#define HAVE_STRERROR_R 1\\n\\n/* Define to 1 if you have the <strings.h> header file. */\\n#define HAVE_STRINGS_H 1\\n\\n/* Define to 1 if you have the <string.h> header file. */\\n#define HAVE_STRING_H 1\\n\\n/* Define to 1 if you have the `strlcat' function. */\\n/* #undef HAVE_STRLCAT */\\n\\n/* Define to 1 if you have the `strlcpy' function. */\\n/* #undef HAVE_STRLCPY */\\n\\n/* Define to 1 if you have the `strncasecmp' function. */\\n#define HAVE_STRNCASECMP 1\\n\\n/* Define to 1 if `ifr_enaddr' is member of `struct ifreq'. */\\n/* #undef HAVE_STRUCT_IFREQ_IFR_ENADDR */\\n\\n/* Define to 1 if `ifr_hwaddr' is member of `struct ifreq'. */\\n#define HAVE_STRUCT_IFREQ_IFR_HWADDR 1\\n\\n/* Define to 1 if `spp_flags' is member of `struct sctp_paddrparams'. */\\n#define HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_FLAGS 1\\n\\n/* Define to 1 if `spp_pathmtu' is member of `struct sctp_paddrparams'. */\\n#define HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_PATHMTU 1\\n\\n/* Define to 1 if `spp_sackdelay' is member of `struct sctp_paddrparams'. */\\n#define HAVE_STRUCT_SCTP_PADDRPARAMS_SPP_SACKDELAY 1\\n\\n/* Define to 1 if `sre_data' is member of `struct sctp_remote_error'. */\\n#define HAVE_STRUCT_SCTP_REMOTE_ERROR_SRE_DATA 1\\n\\n/* Define to 1 if `ssf_data' is member of `struct sctp_send_failed'. */\\n#define HAVE_STRUCT_SCTP_SEND_FAILED_SSF_DATA 1\\n\\n/* Define to 1 if you have the <syslog.h> header file. */\\n#define HAVE_SYSLOG_H 1\\n\\n/* Define if you have <sys/devpoll.h> header file. */\\n/* #undef HAVE_SYS_DEVPOLL_H */\\n\\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\\n   */\\n/* #undef HAVE_SYS_DIR_H */\\n\\n/* Define if you have the <sys/epoll.h> header file. */\\n#define HAVE_SYS_EPOLL_H 1\\n\\n/* Define if you have <sys/event.h> header file. */\\n/* #undef HAVE_SYS_EVENT_H */\\n\\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\\n#define HAVE_SYS_IOCTL_H 1\\n\\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\\n   */\\n/* #undef HAVE_SYS_NDIR_H */\\n\\n/* Define to 1 if you have the <sys/resource.h> header file */\\n#define HAVE_SYS_RESOURCE_H 1\\n\\n/* Define to 1 if you have the <sys/sdt.h> header file. */\\n/* #undef HAVE_SYS_SDT_H */\\n\\n/* Define to 1 if you have the <sys/socketio.h> header file. */\\n/* #undef HAVE_SYS_SOCKETIO_H */\\n\\n/* Define to 1 if you have the <sys/socket.h> header file. */\\n#define HAVE_SYS_SOCKET_H 1\\n\\n/* Define to 1 if you have the <sys/sockio.h> header file. */\\n/* #undef HAVE_SYS_SOCKIO_H */\\n\\n/* Define to 1 if you have the <sys/stat.h> header file. */\\n#define HAVE_SYS_STAT_H 1\\n\\n/* Define to 1 if you have the <sys/stropts.h> header file. */\\n#define HAVE_SYS_STROPTS_H 1\\n\\n/* Define to 1 if you have the <sys/sysctl.h> header file. */\\n#define HAVE_SYS_SYSCTL_H 1\\n\\n/* Define to 1 if you have the <sys/time.h> header file. */\\n#define HAVE_SYS_TIME_H 1\\n\\n/* Define to 1 if you have the <sys/types.h> header file. */\\n#define HAVE_SYS_TYPES_H 1\\n\\n/* Define to 1 if you have the <sys/uio.h> header file. */\\n#define HAVE_SYS_UIO_H 1\\n\\n/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */\\n#define HAVE_SYS_WAIT_H 1\\n\\n/* Define if termcap functions exists */\\n#define HAVE_TERMCAP 1\\n\\n/* Define to 1 if you have the `time2posix' function. */\\n/* #undef HAVE_TIME2POSIX */\\n\\n/* Define to 1 if you have the <unistd.h> header file. */\\n#define HAVE_UNISTD_H 1\\n\\n/* Define to 1 if you have the <util.h> header file. */\\n/* #undef HAVE_UTIL_H */\\n\\n/* Define to 1 if you have the <utmp.h> header file. */\\n#define HAVE_UTMP_H 1\\n\\n/* Define to 1 if you have the `vfork' function. */\\n#define HAVE_VFORK 1\\n\\n/* Define to 1 if you have the <vfork.h> header file. */\\n/* #undef HAVE_VFORK_H */\\n\\n/* Define to 1 if you have the `vprintf' function. */\\n#define HAVE_VPRINTF 1\\n\\n/* Define to 1 if you have a `wcwidth' function. */\\n#define HAVE_WCWIDTH 1\\n\\n/* Define to 1 if you have the <windows.h> header file. */\\n/* #undef HAVE_WINDOWS_H */\\n\\n/* Define to 1 if you have the <winsock2.h> header file. */\\n/* #undef HAVE_WINSOCK2_H */\\n\\n/* Define to 1 if `fork' works. */\\n#define HAVE_WORKING_FORK 1\\n\\n/* Define if you have a working posix_openpt implementation */\\n#define HAVE_WORKING_POSIX_OPENPT 1\\n\\n/* Define to 1 if `vfork' works. */\\n#define HAVE_WORKING_VFORK 1\\n\\n/* Define to 1 if you have the `writev' function. */\\n#define HAVE_WRITEV 1\\n\\n/* Define to 1 if you have the <ws2tcpip.h> header file. */\\n/* #undef HAVE_WS2TCPIP_H */\\n\\n/* Define to 1 if you have the `_brk' function. */\\n/* #undef HAVE__BRK */\\n\\n/* Define if you have the '_end' symbol */\\n#define HAVE__END_SYMBOL 1\\n\\n/* Define to 1 if you have the `_sbrk' function. */\\n/* #undef HAVE__SBRK */\\n\\n/* Define to 1 if you have the `__brk' function. */\\n/* #undef HAVE___BRK */\\n\\n/* Define to 1 if you have the `__sbrk' function. */\\n#define HAVE___SBRK 1\\n\\n/* Define to enable HiPE */\\n#define HIPE 1\\n\\n/* define if h_errno is declared (in some way) in a system header file */\\n#define H_ERRNO_DECLARED 1\\n\\n/* Define if netdb.h needs struct sockaddr_in ans in.h CAN be included before\\n   */\\n#define NETDB_H_NEEDS_IN_H 1\\n\\n/* Define if floating points exceptions are non-existing/not reliable */\\n#define NO_FPE_SIGNALS \\n\\n/* Defined if no found C compiler can handle jump tables */\\n/* #undef NO_JUMP_TABLE */\\n\\n/* Define if you dont have salen */\\n#define NO_SA_LEN 1\\n\\n/* Define to the address where bug reports for this package should be sent. */\\n#define PACKAGE_BUGREPORT \\\"\\\"\\n\\n/* Define to the full name of this package. */\\n#define PACKAGE_NAME \\\"\\\"\\n\\n/* Define to the full name and version of this package. */\\n#define PACKAGE_STRING \\\"\\\"\\n\\n/* Define to the one symbol short name of this package. */\\n#define PACKAGE_TARNAME \\\"\\\"\\n\\n/* Define to the version of this package. */\\n#define PACKAGE_VERSION \\\"\\\"\\n\\n/* Define if you wish to redefine FD_SETSIZE to be able to select on more fd\\n   */\\n/* #undef REDEFINE_FD_SETSIZE */\\n\\n/* Define as the return type of signal handlers (`int' or `void'). */\\n#define RETSIGTYPE void\\n\\n/* Define the sbrk() argument type. */\\n#define SBRK_ARG_TYPE intptr_t\\n\\n/* Define the sbrk() return type. */\\n#define SBRK_RET_TYPE void *\\n\\n/* The size of a `AO_t', as computed by sizeof. */\\n/* #undef SIZEOF_AO_T */\\n\\n/* The size of a `char', as computed by sizeof. */\\n#define SIZEOF_CHAR 1\\n\\n/* The size of a `int', as computed by sizeof. */\\n#define SIZEOF_INT 4\\n\\n/* The size of a `long', as computed by sizeof. */\\n#define SIZEOF_LONG 8\\n\\n/* The size of a `long long', as computed by sizeof. */\\n#define SIZEOF_LONG_LONG 8\\n\\n/* The size of a `off_t', as computed by sizeof. */\\n#define SIZEOF_OFF_T 8\\n\\n/* The size of a `short', as computed by sizeof. */\\n#define SIZEOF_SHORT 2\\n\\n/* The size of a `size_t', as computed by sizeof. */\\n#define SIZEOF_SIZE_T 8\\n\\n/* The size of a `time_t', as computed by sizeof. */\\n#define SIZEOF_TIME_T 8\\n\\n/* The size of a `void *', as computed by sizeof. */\\n#define SIZEOF_VOID_P 8\\n\\n/* The size of a `__int128_t', as computed by sizeof. */\\n#define SIZEOF___INT128_T 16\\n\\n/* The size of a `__int64', as computed by sizeof. */\\n#define SIZEOF___INT64 0\\n\\n/* Define to 1 if you have the ANSI C header files. */\\n#define STDC_HEADERS 1\\n\\n/* define if the variable sys_errlist is declared in a system header file */\\n#define SYS_ERRLIST_DECLARED \\n\\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\\n#define TIME_WITH_SYS_TIME 1\\n\\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\\n/* #undef TM_IN_SYS_TIME */\\n\\n/* Define if you want to use dtrace for dynamic tracing */\\n/* #undef USE_DTRACE */\\n\\n/* Define if you want to use dynamic tracing */\\n/* #undef USE_DYNAMIC_TRACE */\\n\\n/* Define if you have matherr() function and struct exception type */\\n#define USE_MATHERR 1\\n\\n/* Define to enable hrvtime() on Linux systems with perfctr extension */\\n/* #undef USE_PERFCTR */\\n\\n/* Define if select() should be used instead of poll() */\\n/* #undef USE_SELECT */\\n\\n/* Define if you want to use systemtap for dynamic tracing */\\n/* #undef USE_SYSTEMTAP */\\n\\n/* Define to enable VM dynamic trace probes */\\n/* #undef USE_VM_PROBES */\\n\\n/* Define if windows.h includes winsock2.h */\\n/* #undef WINDOWS_H_INCLUDES_WINSOCK2_H */\\n\\n/* Define to 1 if your processor stores words with the most significant byte\\n   first (like Motorola and SPARC, unlike Intel and VAX). */\\n/* #undef WORDS_BIGENDIAN */\\n\\n/* Define to empty if `const' does not conform to ANSI C. */\\n/* #undef const */\\n\\n/* Define to `long' if <sys/types.h> does not define. */\\n/* #undef off_t */\\n\\n/* Define to `int' if <sys/types.h> does not define. */\\n/* #undef pid_t */\\n\\n/* Define to `unsigned' if <sys/types.h> does not define. */\\n/* #undef size_t */\\n\\n/* Define as `fork' if `vfork' does not work. */\\n/* #undef vfork */\\n\\n\\n/* Redefine in6_addr. XXX this should be moved to the files where it's used? */\\n#ifdef HAVE_IN_ADDR6_STRUCT\\n#define in6_addr in_addr6\\n#endif\\n\\n/* Define a reasonable default for INADDR_LOOPBACK */\\n/* XXX this should be moved to the files where it's used? */\\n#ifdef HAVE_NO_INADDR_LOOPBACK\\n#define INADDR_LOOPBACK (u_long)0x7F000001\\n#endif\\n\\n#ifdef REDEFINE_FD_SETSIZE\\n#define FD_SETSIZE 1024\\n#endif\\n\\n#ifdef HAVE_GETHRVTIME_PROCFS_IOCTL\\n#define HAVE_GETHRVTIME\\n#endif\\n\\n#ifndef HAVE_FINITE\\n# if defined(HAVE_ISINF) && defined(HAVE_ISNAN)\\n#  define USE_ISINF_ISNAN\\n# endif\\n#endif\\n\\n#if defined(DEBUG) && defined(USE_THREADS) && !defined(ERTS_ENABLE_LOCK_CHECK)\\n#define ERTS_ENABLE_LOCK_CHECK 1\\n#endif\\n\\n\"}]},\n               {beam_dynamic_libraries,\n                \"\\tlibutil.so.1 => /lib64/libutil.so.1 (0x00002b3e06a05000)\\n\\tlibdl.so.2 => /lib64/libdl.so.2 (0x00002b3e06b08000)\\n\\tlibm.so.6 => /lib64/libm.so.6 (0x00002b3e06c0c000)\\n\\tlibncurses.so.5 => /lib64/libncurses.so.5 (0x00002b3e06d62000)\\n\\tlibpthread.so.0 => /lib64/libpthread.so.0 (0x00002b3e06ec5000)\\n\\tlibrt.so.1 => /lib64/librt.so.1 (0x00002b3e06fdc000)\\n\\tlibc.so.6 => /lib64/libc.so.6 (0x00002b3e070e6000)\\n\\t/lib64/ld-linux-x86-64.so.2 (0x00002b3e068e9000)\\n\"},\n               {environment_erts,\n                [{\"BINDIR\",\n                  \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/erts-5.10.3/bin\"},\n                 {\"DIALYZER_EMULATOR\",false},\n                 {\"CERL_DETACHED_PROG\",false},\n                 {\"EMU\",\"beam\"},\n                 {\"ERL_CONSOLE_MODE\",false},\n                 {\"ERL_CRASH_DUMP\",false},\n                 {\"ERL_CRASH_DUMP_NICE\",false},\n                 {\"ERL_CRASH_DUMP_SECONDS\",false},\n                 {\"ERL_EPMD_PORT\",false},\n                 {\"ERL_EMULATOR_DLL\",false},\n                 {\"ERL_FULLSWEEP_AFTER\",false},\n                 {\"ERL_LIBS\",false},\n                 {\"ERL_MALLOC_LIB\",false},\n                 {\"ERL_MAX_PORTS\",false},\n                 {\"ERL_MAX_ETS_TABLES\",false},\n                 {\"ERL_NO_VFORK\",false},\n                 {\"ERL_NO_KERNEL_POLL\",false},\n                 {\"ERL_THREAD_POOL_SIZE\",false},\n                 {\"ERLC_EMULATOR\",false},\n                 {\"ESCRIPT_EMULATOR\",false},\n                 {\"HOME\",\"/home/otptest\"},\n                 {\"HOMEDRIVE\",false},\n                 {\"HOMEPATH\",false},\n                 {\"LANG\",\"sv_SE.UTF-8\"},\n                 {\"LC_ALL\",false},\n                 {\"LC_CTYPE\",false},\n                 {\"PATH\",\n                  \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/erts-5.10.3/bin:/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/bin:/opt/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/otp/patch/bin:/home/otp/obe/bin\"},\n                 {\"PROGNAME\",\"erl\"},\n                 {\"RELDIR\",false},\n                 {\"ROOTDIR\",\n                  \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp\"},\n                 {\"TERM\",\"xterm-256color\"},\n                 {\"COMSPEC\",false},\n                 {\"HEART_COMMAND\",false},\n                 {\"RUN_ERL_LOG_ALIVE_MINUTES\",false},\n                 {\"RUN_ERL_LOG_ACTIVITY_MINUTES\",false},\n                 {\"RUN_ERL_LOG_ALIVE_FORMAT\",false},\n                 {\"RUN_ERL_LOG_ALIVE_IN_UTC\",false},\n                 {\"RUN_ERL_LOG_GENERATIONS\",false},\n                 {\"RUN_ERL_LOG_MAXSIZE\",false},\n                 {\"RUN_ERL_DISABLE_FLOWCNTRL\",false},\n                 {\"CALLER_DRV_USE_OUTPUTV\",false},\n                 {\"ERL_INET_GETHOST_DEBUG\",false},\n                 {\"ERL_EFILE_THREAD_SHORT_CIRCUIT\",false},\n                 {\"ERL_WINDOW_TITLE\",false},\n                 {\"ERL_ABORT_ON_FAILURE\",false},\n                 {\"TTYSL_DEBUG_LOG\",false}]},\n               {environment,\n                [{\"JAVA_ROOT\",\"/usr/lib64/jvm/java\"},\n                 {\"COLORTERM\",\"1\"},\n                 {\"LC_NAME\",\"sv_SE.UTF-8\"},\n                 {\"G_BROKEN_FILENAMES\",\"1\"},\n                 {\"LESSCLOSE\",\"lessclose.sh %s %s\"},\n                 {\"LC_TIME\",\"sv_SE.UTF-8\"},\n                 {\"DISPLAY\",\"localhost:11.0\"},\n                 {\"INFOPATH\",\n                  \"/usr/local/info:/usr/share/info:/usr/info:/opt/gnome/share/info\"},\n                 {\"LPDEST\",\"lw5\"},\n                 {\"PKG_CONFIG_PATH\",\n                  \"/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:/opt/kde3/lib64/pkgconfig:/opt/gnome/lib64/pkgconfig:/opt/gnome/lib64/pkgconfig:/opt/gnome/share/pkgconfig\"},\n                 {\"LESSOPEN\",\"lessopen.sh %s\"},\n                 {\"XDG_DATA_DIRS\",\n                  \"/usr/local/share/:/usr/share/:/etc/opt/kde3/share/:/opt/kde3/share/:/opt/gnome/share/\"},\n                 {\"ACLOCAL_FLAGS\",\"-I /opt/gnome/share/aclocal\"},\n                 {\"PRINTER\",\"lw5\"},\n                 {\"VISUAL\",\"vim\"},\n                 {\"GTK_PATH64\",\n                  \"/usr/local/lib64/gtk-2.0:/opt/gnome/lib64/gtk-2.0:/usr/lib64/gtk-2.0\"},\n                 {\"CVS_RSH\",\"ssh\"},\n                 {\"LOGIN_PROFILE_RUN\",\"true\"},\n                 {\"G_FILENAME_ENCODING\",\"@locale,UTF-8,ISO-8859-15,CP1252\"},\n                 {\"LESS\",\"-M -I\"},\n                 {\"MACHTYPE\",\"x86_64-suse-linux\"},\n                 {\"LOGNAME\",\"otptest\"},\n                 {\"GTK_PATH\",\n                  \"/usr/local/lib/gtk-2.0:/opt/gnome/lib/gtk-2.0:/usr/lib/gtk-2.0\"},\n                 {\"WINDOWMANAGER\",\"/usr/X11R6/bin/gnome\"},\n                 {\"LS_OPTIONS\",\"-N --color=none -T 0\"},\n                 {\"LESS_ADVANCED_PREPROCESSOR\",\"no\"},\n                 {\"OSTYPE\",\"linux\"},\n                 {\"QT_SYSTEM_DIR\",\"/usr/share/desktop-data\"},\n                 {\"JDK_HOME\",\"/usr/lib64/jvm/java\"},\n                 {\"SHLVL\",\"1\"},\n                 {\"HOME\",\"/home/otptest\"},\n                 {\"https_proxy\",\"http://www-proxy.ericsson.se:8080\"},\n                 {\"SDK_HOME\",\"/usr/lib64/jvm/java\"},\n                 {\"LC_MEASUREMENT\",\"sv_SE.UTF-8\"},\n                 {\"PYTHONSTARTUP\",\"/etc/pythonstart\"},\n                 {\"PROGNAME\",\"erl\"},\n                 {\"LANG\",\"sv_SE.UTF-8\"},\n                 {\"EDITOR\",\"vim\"},\n                 {\"JAVA_HOME\",\"/usr/lib64/jvm/java\"},\n                 {\"INPUTRC\",\"/etc/inputrc\"},\n                 {\"PWD\", \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20\"},\n                 {\"LC_IDENTIFICATION\",\"sv_SE.UTF-8\"},\n                 {\"JAVA_BINDIR\",\"/usr/lib64/jvm/java/bin\"},\n                 {\"SSH_SENDS_LOCALE\",\"yes\"},\n                 {\"CPU\",\"x86_64\"},\n                 {\"LC_MESSAGES\",\"POSIX\"},\n                 {\"MAIL\",\"/var/mail/otptest\"},\n                 {\"PATH\",\n                  \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/erts-5.10.3/bin:/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/bin:/opt/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/otp/patch/bin:/home/otp/obe/bin\"},\n                 {\"MINICOM\",\"-c on\"},\n                 {\"XDG_CONFIG_DIRS\",\n                  \"/usr/local/etc/xdg/:/etc/xdg/:/etc/opt/gnome/xdg/\"},\n                 {\"CSHEDIT\",\"emacs\"},\n                 {\"PAGER\",\"less\"},\n                 {\"HOSTTYPE\",\"x86_64\"},\n                 {\"ENV\",\"/home/otptest/.bashrc\"},\n                 {\"ROOTDIR\", \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp\"},\n                 {\"XNLSPATH\",\"/usr/X11R6/lib/X11/nls\"},\n                 {\"LS_COLORS\",[]},\n                 {\"LC_TELEPHONE\",\"sv_SE.UTF-8\"},\n                 {\"GROFF_NO_SGR\",\"yes\"},\n                 {\"JRE_HOME\",\"/usr/lib64/jvm/java/jre\"},\n                 {\"USER\",\"otptest\"},\n                 {\"SSH_TTY\",\"/dev/pts/3\"},\n                 {\"MORE\",\"-sl\"},\n                 {\"LC_NUMERIC\",\"sv_SE.UTF-8\"},\n                 {\"BINDIR\",\n                  \"/ldisk/daily_build/r16b02_opu_c_Muacul100.2013-07-10_20/otp/erts-5.10.3/bin\"},\n                 {\"PROFILEREAD\",\"true\"},\n                 {\"HISTSIZE\",\"1000\"},\n                 {\"HOST\",\"duilin\"},\n                 {\"TERM\",\"xterm-256color\"},\n                 {\"SHELL\",\"/bin/sh\"},\n                 {\"GNOME2_PATH\",\"/usr/local:/opt/gnome:/usr\"},\n                 {\"XKEYSYMDB\",\"/usr/X11R6/lib/X11/XKeysymDB\"},\n                 {\"HOSTNAME\",\"duilin\"},\n                 {\"LC_MONETARY\",\"sv_SE.UTF-8\"},\n                 {\"EMU\",\"beam\"},\n                 {\"LC_ADDRESS\",\"sv_SE.UTF-8\"},\n                 {\"LASER\",\"lw5\"},\n                 {\"NNTPSERVER\",\"news\"},\n                 {\"INFODIR\",\"/usr/local/info:/usr/share/info:/usr/info\"},\n                 {\"MANPATH\",\n                  \"/usr/local/man:/usr/share/man:/usr/X11R6/man:/opt/gnome/share/man\"},\n                 {\"LESSKEY\",\"/etc/lesskey.bin\"},\n                 {\"LC_PAPER\",\"sv_SE.UTF-8\"}]},\n\t\t{sanity_check,ok}]}.\n",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/c_src/crypto.c": "/*\n * %CopyrightBegin%\n *\n * Copyright Ericsson AB 2010-2018. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * %CopyrightEnd%\n */\n\n/*\n * Purpose:  Dynamically loadable NIF library for cryptography.\n * Based on OpenSSL.\n */\n\n#ifdef __WIN32__\n    #include <windows.h>\n#endif\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include <erl_nif.h>\n\n#define OPENSSL_THREAD_DEFINES\n#include <openssl/opensslconf.h>\n\n#include <openssl/crypto.h>\n#ifndef OPENSSL_NO_DES\n#include <openssl/des.h>\n#endif /* #ifndef OPENSSL_NO_DES */\n/* #include <openssl/idea.h> This is not supported on the openssl OTP requires */\n#include <openssl/dsa.h>\n#include <openssl/rsa.h>\n#include <openssl/aes.h>\n#include <openssl/md5.h>\n#include <openssl/md4.h>\n#include <openssl/sha.h>\n#include <openssl/ripemd.h>\n#include <openssl/bn.h>\n#include <openssl/objects.h>\n#ifndef OPENSSL_NO_RC4\n    #include <openssl/rc4.h>\n#endif /* OPENSSL_NO_RC4 */\n#ifndef OPENSSL_NO_RC2\n    #include <openssl/rc2.h>\n#endif\n#include <openssl/blowfish.h>\n#include <openssl/rand.h>\n#include <openssl/evp.h>\n#include <openssl/hmac.h>\n#include <openssl/err.h>\n\n/* Helper macro to construct a OPENSSL_VERSION_NUMBER.\n * See openssl/opensslv.h\n */\n#define PACKED_OPENSSL_VERSION(MAJ, MIN, FIX, P)\t\\\n    ((((((((MAJ << 8) | MIN) << 8 ) | FIX) << 8) | (P-'a'+1)) << 4) | 0xf)\n\n#define PACKED_OPENSSL_VERSION_PLAIN(MAJ, MIN, FIX) \\\n    PACKED_OPENSSL_VERSION(MAJ,MIN,FIX,('a'-1))\n\n\n/* LibreSSL was cloned from OpenSSL 1.0.1g and claims to be API and BPI compatible\n * with 1.0.1.\n *\n * LibreSSL has the same names on include files and symbols as OpenSSL, but defines\n * the OPENSSL_VERSION_NUMBER to be >= 2.0.0\n *\n * Therefor works tests like this as intendend:\n *     OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n * (The test is for example \"2.4.2\" >= \"1.0.0\" although the test\n *  with the cloned OpenSSL test would be \"1.0.1\" >= \"1.0.0\")\n *\n * But tests like this gives wrong result:\n *     OPENSSL_VERSION_NUMBER < PACKED_OPENSSL_VERSION_PLAIN(1,1,0)\n * (The test is false since \"2.4.2\" < \"1.1.0\".  It should have been\n *  true because the LibreSSL API version is \"1.0.1\")\n *\n */\n\n#ifdef LIBRESSL_VERSION_NUMBER\n/* A macro to test on in this file */\n#define HAS_LIBRESSL\n#endif\n\n#ifdef HAS_LIBRESSL\n/* LibreSSL dislikes FIPS */\n# ifdef FIPS_SUPPORT\n#  undef FIPS_SUPPORT\n# endif\n\n# if LIBRESSL_VERSION_NUMBER < PACKED_OPENSSL_VERSION_PLAIN(2,7,0)\n/* LibreSSL wants the 1.0.1 API */\n# define NEED_EVP_COMPATIBILITY_FUNCTIONS\n# endif\n#endif\n\n\n#if OPENSSL_VERSION_NUMBER < PACKED_OPENSSL_VERSION_PLAIN(1,1,0)\n# define NEED_EVP_COMPATIBILITY_FUNCTIONS\n#endif\n\n\n#ifndef HAS_LIBRESSL\n# if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n#  define HAS_EVP_PKEY_CTX\n# endif\n#endif\n\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n#include <openssl/modes.h>\n#endif\n\n#include \"crypto_callback.h\"\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(0,9,8)\t\\\n    && !defined(OPENSSL_NO_SHA224) && defined(NID_sha224) \\\n    && !defined(OPENSSL_NO_SHA256) /* disabled like this in my sha.h (?) */\n# define HAVE_SHA224\n#endif\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(0,9,8)\t\\\n    && !defined(OPENSSL_NO_SHA256) && defined(NID_sha256)\n# define HAVE_SHA256\n#endif\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(0,9,8)\t\\\n    && !defined(OPENSSL_NO_SHA384) && defined(NID_sha384)\\\n    && !defined(OPENSSL_NO_SHA512) /* disabled like this in my sha.h (?) */\n# define HAVE_SHA384\n#endif\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(0,9,8)\t\\\n    && !defined(OPENSSL_NO_SHA512) && defined(NID_sha512)\n# define HAVE_SHA512\n#endif\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION(0,9,7,'e')\n# define HAVE_DES_ede3_cfb_encrypt\n#endif\n\n// SHA3:\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,1,1)\n// An error in beta releases of 1.1.1 fixed in production release\n# ifdef NID_sha3_224\n#  define HAVE_SHA3_224\n# endif\n# ifdef NID_sha3_256\n#  define HAVE_SHA3_256\n# endif\n#endif\n# ifdef NID_sha3_384\n#  define HAVE_SHA3_384\n# endif\n# ifdef NID_sha3_512\n#  define HAVE_SHA3_512\n# endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION(0,9,8,'o') \\\n\t&& !defined(OPENSSL_NO_EC) \\\n\t&& !defined(OPENSSL_NO_ECDH) \\\n\t&& !defined(OPENSSL_NO_ECDSA)\n# define HAVE_EC\n#endif\n\n// (test for >= 1.1.1pre8)\n#if OPENSSL_VERSION_NUMBER >= (PACKED_OPENSSL_VERSION_PLAIN(1,1,1) -7) \\\n    && !defined(HAS_LIBRESSL) \\\n    && defined(HAVE_EC)\n# define HAVE_ED_CURVE_DH\n# if OPENSSL_VERSION_NUMBER >= (PACKED_OPENSSL_VERSION_PLAIN(1,1,1))\n#   define HAVE_EDDSA\n# endif\n#endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION(0,9,8,'c')\n# define HAVE_AES_IGE\n#endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,1)\n# define HAVE_EVP_AES_CTR\n# define HAVE_AEAD\n# define HAVE_GCM\n# define HAVE_CCM\n# define HAVE_CMAC\n# if defined(RSA_PKCS1_OAEP_PADDING)\n#   define HAVE_RSA_OAEP_PADDING\n# endif\n# define HAVE_RSA_MGF1_MD\n# if OPENSSL_VERSION_NUMBER < PACKED_OPENSSL_VERSION(1,0,1,'d')\n#  define HAVE_GCM_EVP_DECRYPT_BUG\n# endif\n#endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,1,0)\n# ifndef HAS_LIBRESSL\n#  define HAVE_CHACHA20\n#  define HAVE_CHACHA20_POLY1305\n#  define HAVE_RSA_OAEP_MD\n# endif\n#endif\n\n// OPENSSL_VERSION_NUMBER >= 1.1.1-pre8\n#if OPENSSL_VERSION_NUMBER >= (PACKED_OPENSSL_VERSION_PLAIN(1,1,1)-7)\n# ifndef HAS_LIBRESSL\n#  define HAVE_POLY1305\n# endif\n#endif\n\n#if OPENSSL_VERSION_NUMBER <= PACKED_OPENSSL_VERSION(0,9,8,'l')\n# define HAVE_ECB_IVEC_BUG\n#endif\n\n#ifndef HAS_LIBRESSL\n# ifdef RSA_SSLV23_PADDING\n#  define HAVE_RSA_SSLV23_PADDING\n# endif\n#endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n# ifdef RSA_PKCS1_PSS_PADDING\n#  define HAVE_RSA_PKCS1_PSS_PADDING\n# endif\n#endif\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION(0,9,8,'h') \\\n    && defined(HAVE_EC)\n/* If OPENSSL_NO_EC is set, there will be an error in ec.h included from engine.h\n   So if EC is disabled, you can't use Engine either....\n*/\n# define HAS_ENGINE_SUPPORT\n#endif\n\n\n#if defined(HAS_ENGINE_SUPPORT)\n# include <openssl/engine.h>\n#endif\n\n#if defined(HAVE_CMAC)\n#include <openssl/cmac.h>\n#endif\n\n#if defined(HAVE_EC)\n#include <openssl/ec.h>\n#include <openssl/ecdh.h>\n#include <openssl/ecdsa.h>\n#endif\n\n#ifdef VALGRIND\n    #  include <valgrind/memcheck.h>\n\n/* libcrypto mixes supplied buffer contents into its entropy pool,\n   which makes valgrind complain about the use of uninitialized data.\n   We use this valgrind \"request\" to make sure that no such seemingly\n   undefined data is returned.\n*/\n    #  define ERL_VALGRIND_MAKE_MEM_DEFINED(ptr,size) \\\n    VALGRIND_MAKE_MEM_DEFINED(ptr,size)\n\n    #   define ERL_VALGRIND_ASSERT_MEM_DEFINED(Ptr,Size)\t\t\t\\\n          do {\t\t\t\t\t\t\t\t\\\n              int __erl_valgrind_mem_defined = VALGRIND_CHECK_MEM_IS_DEFINED((Ptr),(Size));\t\\\n              if (__erl_valgrind_mem_defined != 0) {\t\t\t\\\n\t          fprintf(stderr,\"\\r\\n####### VALGRIND_ASSSERT(%p,%ld) failed at %s:%d\\r\\n\", \\\n\t\t          (Ptr),(long)(Size), __FILE__, __LINE__);\t\\\n\t          abort();\t\t\t\t\t\t\\\n              }\t\t\t\t\t\t\t\t\\\n          } while (0)\n\n#else\n    #  define ERL_VALGRIND_MAKE_MEM_DEFINED(ptr,size)\n    #  define ERL_VALGRIND_ASSERT_MEM_DEFINED(ptr,size)\n#endif\n\n#ifdef DEBUG\n    #  define ASSERT(e) \\\n    ((void) ((e) ? 1 : (fprintf(stderr,\"Assert '%s' failed at %s:%d\\n\",\\\n\t\t\t\t#e, __FILE__, __LINE__), abort(), 0)))\n#else\n    #  define ASSERT(e) ((void) 1)\n#endif\n\n#ifdef __GNUC__\n    #  define INLINE __inline__\n#elif defined(__WIN32__)\n    #  define INLINE __forceinline\n#else\n    #  define INLINE\n#endif\n\n\n#define get_int32(s) ((((unsigned char*) (s))[0] << 24) | \\\n                      (((unsigned char*) (s))[1] << 16) | \\\n                      (((unsigned char*) (s))[2] << 8)  | \\\n                      (((unsigned char*) (s))[3]))\n\n#define put_int32(s,i) \\\n{ (s)[0] = (char)(((i) >> 24) & 0xff);\\\n  (s)[1] = (char)(((i) >> 16) & 0xff);\\\n  (s)[2] = (char)(((i) >> 8) & 0xff);\\\n  (s)[3] = (char)((i) & 0xff);\\\n}\n\n/* This shall correspond to the similar macro in crypto.erl */\n/* Current value is: erlang:system_info(context_reductions) * 10 */\n#define MAX_BYTES_TO_NIF 20000\n\n#define CONSUME_REDS(NifEnv, Ibin)\t\t\t\\\ndo {\t\t\t\t\t\t\t\\\n    int _cost = ((Ibin).size  * 100) / MAX_BYTES_TO_NIF;\\\n    if (_cost) {                                        \\\n        (void) enif_consume_timeslice((NifEnv),\t\t\\\n\t          (_cost > 100) ? 100 : _cost);\t\t\\\n    }                                                   \\\n } while (0)\n\n\n#ifdef NEED_EVP_COMPATIBILITY_FUNCTIONS\n/*\n * In OpenSSL 1.1.0, most structs are opaque. That means that\n * the structs cannot be allocated as automatic variables on the\n * C stack (because the size is unknown) and that it is necessary\n * to use access functions.\n *\n * For backward compatibility to previous versions of OpenSSL, define\n * on our versions of the new functions defined in 1.1.0 here, so that\n * we don't have to sprinkle ifdefs throughout the code.\n */\n\nstatic HMAC_CTX *HMAC_CTX_new(void);\nstatic void HMAC_CTX_free(HMAC_CTX *ctx);\n\nstatic HMAC_CTX *HMAC_CTX_new()\n{\n    HMAC_CTX *ctx = CRYPTO_malloc(sizeof(HMAC_CTX), __FILE__, __LINE__);\n    HMAC_CTX_init(ctx);\n    return ctx;\n}\n\nstatic void HMAC_CTX_free(HMAC_CTX *ctx)\n{\n    HMAC_CTX_cleanup(ctx);\n    CRYPTO_free(ctx);\n}\n\n#define EVP_MD_CTX_new() EVP_MD_CTX_create()\n#define EVP_MD_CTX_free(ctx) EVP_MD_CTX_destroy(ctx)\n\nstatic INLINE void *BN_GENCB_get_arg(BN_GENCB *cb);\n\nstatic INLINE void *BN_GENCB_get_arg(BN_GENCB *cb)\n{\n    return cb->arg;\n}\n\nstatic INLINE int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d);\nstatic INLINE void RSA_get0_key(const RSA *r, const BIGNUM **n, const BIGNUM **e, const BIGNUM **d);\nstatic INLINE int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q);\nstatic INLINE void RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q);\nstatic INLINE int RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp);\nstatic INLINE void RSA_get0_crt_params(const RSA *r, const BIGNUM **dmp1, const BIGNUM **dmq1, const BIGNUM **iqmp);\n\nstatic INLINE int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)\n{\n    r->n = n;\n    r->e = e;\n    r->d = d;\n    return 1;\n}\n\nstatic INLINE void RSA_get0_key(const RSA *r, const BIGNUM **n, const BIGNUM **e, const BIGNUM **d)\n{\n    *n = r->n;\n    *e = r->e;\n    *d = r->d;\n}\n\nstatic INLINE int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)\n{\n    r->p = p;\n    r->q = q;\n    return 1;\n}\n\nstatic INLINE void RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)\n{\n    *p = r->p;\n    *q = r->q;\n}\n\nstatic INLINE int RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)\n{\n    r->dmp1 = dmp1;\n    r->dmq1 = dmq1;\n    r->iqmp = iqmp;\n    return 1;\n}\n\nstatic INLINE void RSA_get0_crt_params(const RSA *r, const BIGNUM **dmp1, const BIGNUM **dmq1, const BIGNUM **iqmp)\n{\n    *dmp1 = r->dmp1;\n    *dmq1 = r->dmq1;\n    *iqmp = r->iqmp;\n}\n\nstatic INLINE int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);\nstatic INLINE int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);\nstatic INLINE void DSA_get0_pqg(const DSA *dsa,\n\t\t\t       const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);\nstatic INLINE void DSA_get0_key(const DSA *dsa,\n\t\t\t       const BIGNUM **pub_key, const BIGNUM **priv_key);\n\nstatic INLINE int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)\n{\n    d->pub_key = pub_key;\n    d->priv_key = priv_key;\n    return 1;\n}\n\nstatic INLINE int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)\n{\n    d->p = p;\n    d->q = q;\n    d->g = g;\n    return 1;\n}\n\nstatic INLINE void\nDSA_get0_pqg(const DSA *dsa, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)\n{\n    *p = dsa->p;\n    *q = dsa->q;\n    *g = dsa->g;\n}\n\nstatic INLINE void\nDSA_get0_key(const DSA *dsa, const BIGNUM **pub_key, const BIGNUM **priv_key)\n{\n    if (pub_key) *pub_key = dsa->pub_key;\n    if (priv_key) *priv_key = dsa->priv_key;\n}\n\n\n\nstatic INLINE int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);\nstatic INLINE int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);\nstatic INLINE int DH_set_length(DH *dh, long length);\nstatic INLINE void DH_get0_pqg(const DH *dh,\n\t\t\t       const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);\nstatic INLINE void DH_get0_key(const DH *dh,\n\t\t\t       const BIGNUM **pub_key, const BIGNUM **priv_key);\n\nstatic INLINE int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)\n{\n    dh->pub_key = pub_key;\n    dh->priv_key = priv_key;\n    return 1;\n}\n\nstatic INLINE int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)\n{\n    dh->p = p;\n    dh->q = q;\n    dh->g = g;\n    return 1;\n}\n\nstatic INLINE int DH_set_length(DH *dh, long length)\n{\n    dh->length = length;\n    return 1;\n}\n\n\n\nstatic INLINE void\nDH_get0_pqg(const DH *dh, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)\n{\n    *p = dh->p;\n    *q = dh->q;\n    *g = dh->g;\n}\n\nstatic INLINE void\nDH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)\n{\n    if (pub_key) *pub_key = dh->pub_key;\n    if (priv_key) *priv_key = dh->priv_key;\n}\n\n#else /* End of compatibility definitions. */\n\n#define HAVE_OPAQUE_BN_GENCB\n\n#endif\n\n/* NIF interface declarations */\nstatic int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info);\nstatic int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info);\nstatic void unload(ErlNifEnv* env, void* priv_data);\n\n/* The NIFs: */\nstatic ERL_NIF_TERM info_lib(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM info_fips(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM enable_fips_mode(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM algorithms(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hash_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hash_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hash_update_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hash_final_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hmac_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hmac_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hmac_update_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM hmac_final_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM cmac_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM block_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aes_cfb_8_crypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aes_cfb_128_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aes_ige_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aes_ctr_stream_init(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aes_ctr_stream_encrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM strong_rand_bytes_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM strong_rand_range_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM rand_uniform_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM mod_exp_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM do_exor(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM rc4_set_key(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM rc4_encrypt_with_state(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM pkey_sign_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM pkey_verify_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM pkey_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM rsa_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM dh_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM dh_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM privkey_to_pubkey_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM srp_value_B_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM srp_user_secret_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM srp_host_secret_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM ec_key_generate(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM ecdh_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM evp_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM evp_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM rand_seed_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM aead_encrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM aead_decrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n#ifdef HAVE_GCM_EVP_DECRYPT_BUG\nstatic ERL_NIF_TERM aes_gcm_decrypt_NO_EVP(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n#endif\n\nstatic ERL_NIF_TERM chacha20_stream_init(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM chacha20_stream_crypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM poly1305_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ERL_NIF_TERM engine_by_id_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_finish_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_free_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_load_dynamic_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_ctrl_cmd_strings_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_register_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_unregister_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_add_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_remove_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_get_first_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_get_next_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_get_id_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_get_name_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM engine_get_all_methods_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\n/* helpers */\nstatic void init_algorithms_types(ErlNifEnv*);\nstatic void init_digest_types(ErlNifEnv* env);\nstatic void init_cipher_types(ErlNifEnv* env);\n#ifdef HAVE_EC\nstatic EC_KEY* ec_key_new(ErlNifEnv* env, ERL_NIF_TERM curve_arg);\nstatic int term2point(ErlNifEnv* env, ERL_NIF_TERM term,\n\t\t      EC_GROUP *group, EC_POINT **pptr);\n#endif\nstatic ERL_NIF_TERM bin_from_bn(ErlNifEnv* env, const BIGNUM *bn);\n\n#ifdef HAS_ENGINE_SUPPORT\nstatic int get_engine_load_cmd_list(ErlNifEnv* env, const ERL_NIF_TERM term, char **cmds, int i);\nstatic int zero_terminate(ErlNifBinary bin, char **buf);\n#endif\n\nstatic int library_refc = 0; /* number of users of this dynamic library */\nstatic int library_initialized = 0;\n\nstatic ErlNifFunc nif_funcs[] = {\n    {\"info_lib\", 0, info_lib},\n    {\"info_fips\", 0, info_fips},\n    {\"enable_fips_mode\", 1, enable_fips_mode},\n    {\"algorithms\", 0, algorithms},\n    {\"hash_nif\", 2, hash_nif},\n    {\"hash_init_nif\", 1, hash_init_nif},\n    {\"hash_update_nif\", 2, hash_update_nif},\n    {\"hash_final_nif\", 1, hash_final_nif},\n    {\"hmac_nif\", 3, hmac_nif},\n    {\"hmac_nif\", 4, hmac_nif},\n    {\"hmac_init_nif\", 2, hmac_init_nif},\n    {\"hmac_update_nif\", 2, hmac_update_nif},\n    {\"hmac_final_nif\", 1, hmac_final_nif},\n    {\"hmac_final_nif\", 2, hmac_final_nif},\n    {\"cmac_nif\", 3, cmac_nif},\n    {\"block_crypt_nif\", 5, block_crypt_nif},\n    {\"block_crypt_nif\", 4, block_crypt_nif},\n    {\"aes_ige_crypt_nif\", 4, aes_ige_crypt_nif},\n    {\"aes_ctr_stream_init\", 2, aes_ctr_stream_init},\n    {\"aes_ctr_stream_encrypt\", 2, aes_ctr_stream_encrypt},\n    {\"aes_ctr_stream_decrypt\", 2, aes_ctr_stream_encrypt},\n    {\"strong_rand_bytes_nif\", 1, strong_rand_bytes_nif},\n    {\"strong_rand_range_nif\", 1, strong_rand_range_nif},\n    {\"rand_uniform_nif\", 2, rand_uniform_nif},\n    {\"mod_exp_nif\", 4, mod_exp_nif},\n    {\"do_exor\", 2, do_exor},\n    {\"rc4_set_key\", 1, rc4_set_key},\n    {\"rc4_encrypt_with_state\", 2, rc4_encrypt_with_state},\n    {\"pkey_sign_nif\", 5, pkey_sign_nif},\n    {\"pkey_verify_nif\", 6, pkey_verify_nif},\n    {\"pkey_crypt_nif\", 6, pkey_crypt_nif},\n    {\"rsa_generate_key_nif\", 2, rsa_generate_key_nif},\n    {\"dh_generate_key_nif\", 4, dh_generate_key_nif},\n    {\"dh_compute_key_nif\", 3, dh_compute_key_nif},\n    {\"evp_compute_key_nif\", 3, evp_compute_key_nif},\n    {\"evp_generate_key_nif\", 1, evp_generate_key_nif},\n    {\"privkey_to_pubkey_nif\", 2, privkey_to_pubkey_nif},\n    {\"srp_value_B_nif\", 5, srp_value_B_nif},\n    {\"srp_user_secret_nif\", 7, srp_user_secret_nif},\n    {\"srp_host_secret_nif\", 5, srp_host_secret_nif},\n\n    {\"ec_key_generate\", 2, ec_key_generate},\n    {\"ecdh_compute_key_nif\", 3, ecdh_compute_key_nif},\n\n    {\"rand_seed_nif\", 1, rand_seed_nif},\n\n    {\"aead_encrypt\", 6, aead_encrypt},\n    {\"aead_decrypt\", 6, aead_decrypt},\n\n    {\"chacha20_stream_init\",    2, chacha20_stream_init},\n    {\"chacha20_stream_encrypt\", 2, chacha20_stream_crypt},\n    {\"chacha20_stream_decrypt\", 2, chacha20_stream_crypt},\n\n    {\"poly1305_nif\", 2, poly1305_nif},\n\n    {\"engine_by_id_nif\", 1, engine_by_id_nif},\n    {\"engine_init_nif\", 1, engine_init_nif},\n    {\"engine_finish_nif\", 1, engine_finish_nif},\n    {\"engine_free_nif\", 1, engine_free_nif},\n    {\"engine_load_dynamic_nif\", 0, engine_load_dynamic_nif},\n    {\"engine_ctrl_cmd_strings_nif\", 3, engine_ctrl_cmd_strings_nif},\n    {\"engine_register_nif\", 2, engine_register_nif},\n    {\"engine_unregister_nif\", 2, engine_unregister_nif},\n    {\"engine_add_nif\", 1, engine_add_nif},\n    {\"engine_remove_nif\", 1, engine_remove_nif},\n    {\"engine_get_first_nif\", 0, engine_get_first_nif},\n    {\"engine_get_next_nif\", 1, engine_get_next_nif},\n    {\"engine_get_id_nif\", 1, engine_get_id_nif},\n    {\"engine_get_name_nif\", 1, engine_get_name_nif},\n    {\"engine_get_all_methods_nif\", 0, engine_get_all_methods_nif}\n\n};\n\nERL_NIF_INIT(crypto,nif_funcs,load,NULL,upgrade,unload)\n\n#define MD5_CTX_LEN       (sizeof(MD5_CTX))\n#define MD4_CTX_LEN       (sizeof(MD4_CTX))\n#define RIPEMD160_CTX_LEN (sizeof(RIPEMD160_CTX))\n\n\nstatic ERL_NIF_TERM atom_true;\nstatic ERL_NIF_TERM atom_false;\nstatic ERL_NIF_TERM atom_sha;\nstatic ERL_NIF_TERM atom_error;\nstatic ERL_NIF_TERM atom_rsa_pkcs1_padding;\nstatic ERL_NIF_TERM atom_rsa_pkcs1_oaep_padding;\nstatic ERL_NIF_TERM atom_rsa_no_padding;\nstatic ERL_NIF_TERM atom_signature_md;\nstatic ERL_NIF_TERM atom_undefined;\n\nstatic ERL_NIF_TERM atom_ok;\nstatic ERL_NIF_TERM atom_not_prime;\nstatic ERL_NIF_TERM atom_not_strong_prime;\nstatic ERL_NIF_TERM atom_unable_to_check_generator;\nstatic ERL_NIF_TERM atom_not_suitable_generator;\nstatic ERL_NIF_TERM atom_check_failed;\nstatic ERL_NIF_TERM atom_unknown;\nstatic ERL_NIF_TERM atom_none;\nstatic ERL_NIF_TERM atom_notsup;\nstatic ERL_NIF_TERM atom_digest;\n#ifdef FIPS_SUPPORT\nstatic ERL_NIF_TERM atom_enabled;\nstatic ERL_NIF_TERM atom_not_enabled;\n#else\nstatic ERL_NIF_TERM atom_not_supported;\n#endif\n\n#if defined(HAVE_EC)\nstatic ERL_NIF_TERM atom_ec;\nstatic ERL_NIF_TERM atom_prime_field;\nstatic ERL_NIF_TERM atom_characteristic_two_field;\nstatic ERL_NIF_TERM atom_tpbasis;\nstatic ERL_NIF_TERM atom_ppbasis;\nstatic ERL_NIF_TERM atom_onbasis;\n#endif\n\nstatic ERL_NIF_TERM atom_aes_cfb8;\nstatic ERL_NIF_TERM atom_aes_cfb128;\n#ifdef HAVE_GCM\nstatic ERL_NIF_TERM atom_aes_gcm;\n#endif\n#ifdef HAVE_CCM\nstatic ERL_NIF_TERM atom_aes_ccm;\n#endif\n#ifdef HAVE_CHACHA20_POLY1305\nstatic ERL_NIF_TERM atom_chacha20_poly1305;\n#endif\n#ifdef HAVE_ECB_IVEC_BUG\nstatic ERL_NIF_TERM atom_aes_ecb;\nstatic ERL_NIF_TERM atom_des_ecb;\nstatic ERL_NIF_TERM atom_blowfish_ecb;\n#endif\n\nstatic ERL_NIF_TERM atom_rsa;\nstatic ERL_NIF_TERM atom_dss;\nstatic ERL_NIF_TERM atom_ecdsa;\n\n#ifdef HAVE_ED_CURVE_DH\nstatic ERL_NIF_TERM atom_x25519;\nstatic ERL_NIF_TERM atom_x448;\n#endif\n\nstatic ERL_NIF_TERM atom_eddsa;\n#ifdef HAVE_EDDSA\nstatic ERL_NIF_TERM atom_ed25519;\nstatic ERL_NIF_TERM atom_ed448;\n#endif\n\nstatic ERL_NIF_TERM atom_rsa_mgf1_md;\nstatic ERL_NIF_TERM atom_rsa_oaep_label;\nstatic ERL_NIF_TERM atom_rsa_oaep_md;\nstatic ERL_NIF_TERM atom_rsa_pad; /* backwards compatibility */\nstatic ERL_NIF_TERM atom_rsa_padding;\nstatic ERL_NIF_TERM atom_rsa_pkcs1_pss_padding;\n#ifdef HAVE_RSA_SSLV23_PADDING\nstatic ERL_NIF_TERM atom_rsa_sslv23_padding;\n#endif\nstatic ERL_NIF_TERM atom_rsa_x931_padding;\nstatic ERL_NIF_TERM atom_rsa_pss_saltlen;\nstatic ERL_NIF_TERM atom_sha224;\nstatic ERL_NIF_TERM atom_sha256;\nstatic ERL_NIF_TERM atom_sha384;\nstatic ERL_NIF_TERM atom_sha512;\nstatic ERL_NIF_TERM atom_sha3_224;\nstatic ERL_NIF_TERM atom_sha3_256;\nstatic ERL_NIF_TERM atom_sha3_384;\nstatic ERL_NIF_TERM atom_sha3_512;\nstatic ERL_NIF_TERM atom_md5;\nstatic ERL_NIF_TERM atom_ripemd160;\n\n#ifdef HAS_ENGINE_SUPPORT\nstatic ERL_NIF_TERM atom_bad_engine_method;\nstatic ERL_NIF_TERM atom_bad_engine_id;\nstatic ERL_NIF_TERM atom_ctrl_cmd_failed;\nstatic ERL_NIF_TERM atom_engine_init_failed;\nstatic ERL_NIF_TERM atom_register_engine_failed;\nstatic ERL_NIF_TERM atom_add_engine_failed;\nstatic ERL_NIF_TERM atom_remove_engine_failed;\nstatic ERL_NIF_TERM atom_engine_method_not_supported;\n\nstatic ERL_NIF_TERM atom_engine_method_rsa;\nstatic ERL_NIF_TERM atom_engine_method_dsa;\nstatic ERL_NIF_TERM atom_engine_method_dh;\nstatic ERL_NIF_TERM atom_engine_method_rand;\nstatic ERL_NIF_TERM atom_engine_method_ecdh;\nstatic ERL_NIF_TERM atom_engine_method_ecdsa;\nstatic ERL_NIF_TERM atom_engine_method_ciphers;\nstatic ERL_NIF_TERM atom_engine_method_digests;\nstatic ERL_NIF_TERM atom_engine_method_store;\nstatic ERL_NIF_TERM atom_engine_method_pkey_meths;\nstatic ERL_NIF_TERM atom_engine_method_pkey_asn1_meths;\nstatic ERL_NIF_TERM atom_engine_method_ec;\n\nstatic ERL_NIF_TERM atom_engine;\nstatic ERL_NIF_TERM atom_key_id;\nstatic ERL_NIF_TERM atom_password;\n#endif\n\nstatic ErlNifResourceType* hmac_context_rtype;\nstruct hmac_context\n{\n    ErlNifMutex* mtx;\n    int alive;\n    HMAC_CTX* ctx;\n};\nstatic void hmac_context_dtor(ErlNifEnv* env, struct hmac_context*);\n\nstruct digest_type_t {\n    union {\n\tconst char*  str;        /* before init, NULL for end-of-table */\n\tERL_NIF_TERM atom;       /* after init, 'false' for end-of-table */\n    }type;\n    union {\n\tconst EVP_MD* (*funcp)(void);  /* before init, NULL if notsup */\n\tconst EVP_MD* p;               /* after init, NULL if notsup */\n    }md;\n};\n\nstatic struct digest_type_t digest_types[] =\n{\n    {{\"md4\"}, {&EVP_md4}},\n    {{\"md5\"}, {&EVP_md5}},\n    {{\"ripemd160\"}, {&EVP_ripemd160}},\n    {{\"sha\"}, {&EVP_sha1}},\n    {{\"sha224\"},\n#ifdef HAVE_SHA224\n     {&EVP_sha224}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha256\"},\n#ifdef HAVE_SHA256\n     {&EVP_sha256}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha384\"},\n#ifdef HAVE_SHA384\n     {&EVP_sha384}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha512\"},\n#ifdef HAVE_SHA512\n     {&EVP_sha512}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha3_224\"},\n#ifdef HAVE_SHA3_224\n     {&EVP_sha3_224}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha3_256\"},\n#ifdef HAVE_SHA3_256\n     {&EVP_sha3_256}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha3_384\"},\n#ifdef HAVE_SHA3_384\n     {&EVP_sha3_384}\n#else\n     {NULL}\n#endif\n    },\n    {{\"sha3_512\"},\n#ifdef HAVE_SHA3_512\n     {&EVP_sha3_512}\n#else\n     {NULL}\n#endif\n    },\n\n    {{NULL}}\n};\n\nstatic struct digest_type_t* get_digest_type(ERL_NIF_TERM type);\n\nstruct cipher_type_t {\n    union {\n\tconst char* str;    /* before init */\n\tERL_NIF_TERM atom;  /* after init */\n    }type;\n    union {\n\tconst EVP_CIPHER* (*funcp)(void); /* before init, NULL if notsup */\n\tconst EVP_CIPHER* p;              /* after init, NULL if notsup */\n    }cipher;\n    const size_t key_len;      /* != 0 to also match on key_len */\n};\n\n#ifdef OPENSSL_NO_DES\n#define COND_NO_DES_PTR(Ptr) (NULL)\n#else\n#define COND_NO_DES_PTR(Ptr) (Ptr)\n#endif\n\nstatic struct cipher_type_t cipher_types[] =\n{\n    {{\"rc2_cbc\"},\n#ifndef OPENSSL_NO_RC2\n     {&EVP_rc2_cbc}\n#else\n     {NULL}\n#endif\n    },\n    {{\"des_cbc\"}, {COND_NO_DES_PTR(&EVP_des_cbc)}},\n    {{\"des_cfb\"}, {COND_NO_DES_PTR(&EVP_des_cfb8)}},\n    {{\"des_ecb\"}, {COND_NO_DES_PTR(&EVP_des_ecb)}},\n    {{\"des_ede3_cbc\"}, {COND_NO_DES_PTR(&EVP_des_ede3_cbc)}},\n    {{\"des_ede3_cbf\"}, /* Misspelled, retained */\n#ifdef HAVE_DES_ede3_cfb_encrypt\n     {COND_NO_DES_PTR(&EVP_des_ede3_cfb8)}\n#else\n     {NULL}\n#endif\n    },\n    {{\"des_ede3_cfb\"},\n#ifdef HAVE_DES_ede3_cfb_encrypt\n     {COND_NO_DES_PTR(&EVP_des_ede3_cfb8)}\n#else\n     {NULL}\n#endif\n    },\n    {{\"blowfish_cbc\"}, {&EVP_bf_cbc}},\n    {{\"blowfish_cfb64\"}, {&EVP_bf_cfb64}},\n    {{\"blowfish_ofb64\"}, {&EVP_bf_ofb}},\n    {{\"blowfish_ecb\"}, {&EVP_bf_ecb}},\n    {{\"aes_cbc\"}, {&EVP_aes_128_cbc}, 16},\n    {{\"aes_cbc\"}, {&EVP_aes_192_cbc}, 24},\n    {{\"aes_cbc\"}, {&EVP_aes_256_cbc}, 32},\n    {{\"aes_cbc128\"}, {&EVP_aes_128_cbc}},\n    {{\"aes_cbc256\"}, {&EVP_aes_256_cbc}},\n    {{\"aes_cfb8\"}, {&EVP_aes_128_cfb8}},\n    {{\"aes_cfb128\"}, {&EVP_aes_128_cfb128}},\n    {{\"aes_ecb\"}, {&EVP_aes_128_ecb}, 16},\n    {{\"aes_ecb\"}, {&EVP_aes_192_ecb}, 24},\n    {{\"aes_ecb\"}, {&EVP_aes_256_ecb}, 32},\n    {{NULL}}\n};\n\nstatic struct cipher_type_t* get_cipher_type(ERL_NIF_TERM type, size_t key_len);\n\n\n/*\n#define PRINTF_ERR0(FMT) enif_fprintf(stderr, FMT \"\\n\")\n#define PRINTF_ERR1(FMT, A1) enif_fprintf(stderr, FMT \"\\n\", A1)\n#define PRINTF_ERR2(FMT, A1, A2) enif_fprintf(stderr, FMT \"\\n\", A1, A2)\n*/\n\n#define PRINTF_ERR0(FMT)\n#define PRINTF_ERR1(FMT,A1)\n#define PRINTF_ERR2(FMT,A1,A2)\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n/* Define resource types for OpenSSL context structures. */\nstatic ErlNifResourceType* evp_md_ctx_rtype;\nstruct evp_md_ctx {\n    EVP_MD_CTX* ctx;\n};\nstatic void evp_md_ctx_dtor(ErlNifEnv* env, struct evp_md_ctx *ctx) {\n    EVP_MD_CTX_free(ctx->ctx);\n}\n#endif\n\n#ifdef HAVE_EVP_AES_CTR\nstatic ErlNifResourceType* evp_cipher_ctx_rtype;\nstruct evp_cipher_ctx {\n    EVP_CIPHER_CTX* ctx;\n};\nstatic void evp_cipher_ctx_dtor(ErlNifEnv* env, struct evp_cipher_ctx* ctx) {\n    EVP_CIPHER_CTX_free(ctx->ctx);\n}\n#endif\n\n// Engine\n#ifdef HAS_ENGINE_SUPPORT\nstatic ErlNifResourceType* engine_ctx_rtype;\nstruct engine_ctx {\n    ENGINE *engine;\n    char *id;\n};\nstatic void engine_ctx_dtor(ErlNifEnv* env, struct engine_ctx* ctx) {\n    PRINTF_ERR0(\"engine_ctx_dtor\");\n    if(ctx->id) {\n        PRINTF_ERR1(\"  non empty ctx->id=%s\", ctx->id);\n        enif_free(ctx->id);\n    } else\n         PRINTF_ERR0(\"  empty ctx->id=NULL\");\n}\n#endif\n\nstatic int verify_lib_version(void)\n{\n    const unsigned long libv = SSLeay();\n    const unsigned long hdrv = OPENSSL_VERSION_NUMBER;\n\n#   define MAJOR_VER(V) ((unsigned long)(V) >> (7*4))\n\n    if (MAJOR_VER(libv) != MAJOR_VER(hdrv)) {\n\tPRINTF_ERR2(\"CRYPTO: INCOMPATIBLE SSL VERSION\"\n\t\t    \" lib=%lx header=%lx\\n\", libv, hdrv);\n\treturn 0;\n    }\n    return 1;\n}\n\n#ifdef FIPS_SUPPORT\n/* In FIPS mode non-FIPS algorithms are disabled and return badarg. */\n#define CHECK_NO_FIPS_MODE() { if (FIPS_mode()) return atom_notsup; }\n#else\n#define CHECK_NO_FIPS_MODE()\n#endif\n\n#ifdef HAVE_DYNAMIC_CRYPTO_LIB\n\n# if defined(DEBUG)\nstatic char crypto_callback_name[] = \"crypto_callback.debug\";\n# elif defined(VALGRIND)\nstatic char crypto_callback_name[] = \"crypto_callback.valgrind\";\n# else\nstatic char crypto_callback_name[] = \"crypto_callback\";\n# endif\n\nstatic int change_basename(ErlNifBinary* bin, char* buf, int bufsz, const char* newfile)\n{\n    int i;\n\n    for (i = bin->size; i > 0; i--) {\n\tif (bin->data[i-1] == '/')\n\t    break;\n    }\n    if (i + strlen(newfile) >= bufsz) {\n\tPRINTF_ERR0(\"CRYPTO: lib name too long\");\n\treturn 0;\n    }\n    memcpy(buf, bin->data, i);\n    strcpy(buf+i, newfile);\n    return 1;\n}\n\nstatic void error_handler(void* null, const char* errstr)\n{\n    PRINTF_ERR1(\"CRYPTO LOADING ERROR: '%s'\", errstr);\n}\n#endif /* HAVE_DYNAMIC_CRYPTO_LIB */\n\nstatic int initialize(ErlNifEnv* env, ERL_NIF_TERM load_info)\n{\n#ifdef OPENSSL_THREADS\n    ErlNifSysInfo sys_info;\n#endif\n    get_crypto_callbacks_t* funcp;\n    struct crypto_callbacks* ccb;\n    int nlocks = 0;\n    int tpl_arity;\n    const ERL_NIF_TERM* tpl_array;\n    int vernum;\n    ErlNifBinary lib_bin;\n    char lib_buf[1000];\n\n    if (!verify_lib_version())\n\treturn __LINE__;\n\n    /* load_info: {302, <<\"/full/path/of/this/library\">>,true|false} */\n    if (!enif_get_tuple(env, load_info, &tpl_arity, &tpl_array)\n\t|| tpl_arity != 3\n\t|| !enif_get_int(env, tpl_array[0], &vernum)\n\t|| vernum != 302\n\t|| !enif_inspect_binary(env, tpl_array[1], &lib_bin)) {\n\n\tPRINTF_ERR1(\"CRYPTO: Invalid load_info '%T'\", load_info);\n\treturn __LINE__;\n    }\n\n    hmac_context_rtype = enif_open_resource_type(env, NULL, \"hmac_context\",\n\t\t\t\t\t\t (ErlNifResourceDtor*) hmac_context_dtor,\n\t\t\t\t\t\t ERL_NIF_RT_CREATE|ERL_NIF_RT_TAKEOVER,\n\t\t\t\t\t\t NULL);\n    if (!hmac_context_rtype) {\n\tPRINTF_ERR0(\"CRYPTO: Could not open resource type 'hmac_context'\");\n\treturn __LINE__;\n    }\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n    evp_md_ctx_rtype = enif_open_resource_type(env, NULL, \"EVP_MD_CTX\",\n                                               (ErlNifResourceDtor*) evp_md_ctx_dtor,\n                                               ERL_NIF_RT_CREATE|ERL_NIF_RT_TAKEOVER,\n                                               NULL);\n    if (!evp_md_ctx_rtype) {\n        PRINTF_ERR0(\"CRYPTO: Could not open resource type 'EVP_MD_CTX'\");\n        return __LINE__;\n    }\n#endif\n#ifdef HAVE_EVP_AES_CTR\n    evp_cipher_ctx_rtype = enif_open_resource_type(env, NULL, \"EVP_CIPHER_CTX\",\n                                                   (ErlNifResourceDtor*) evp_cipher_ctx_dtor,\n                                                   ERL_NIF_RT_CREATE|ERL_NIF_RT_TAKEOVER,\n                                                   NULL);\n    if (!evp_cipher_ctx_rtype) {\n        PRINTF_ERR0(\"CRYPTO: Could not open resource type 'EVP_CIPHER_CTX'\");\n        return __LINE__;\n    }\n#endif\n#ifdef HAS_ENGINE_SUPPORT\n    engine_ctx_rtype = enif_open_resource_type(env, NULL, \"ENGINE_CTX\",\n                                                   (ErlNifResourceDtor*) engine_ctx_dtor,\n                                                   ERL_NIF_RT_CREATE|ERL_NIF_RT_TAKEOVER,\n                                                   NULL);\n    if (!engine_ctx_rtype) {\n        PRINTF_ERR0(\"CRYPTO: Could not open resource type 'ENGINE_CTX'\");\n        return __LINE__;\n    }\n#endif\n\n    if (library_initialized) {\n\t/* Repeated loading of this library (module upgrade).\n\t * Atoms and callbacks are already set, we are done.\n\t */\n\treturn 0;\n    }\n\n    atom_true  = enif_make_atom(env,\"true\");\n    atom_false = enif_make_atom(env,\"false\");\n    /* Enter FIPS mode */\n    if (tpl_array[2] == atom_true) {\n#ifdef FIPS_SUPPORT\n        if (!FIPS_mode_set(1)) {\n#else\n        {\n#endif\n            PRINTF_ERR0(\"CRYPTO: Could not setup FIPS mode\");\n            return 0;\n        }\n    } else if (tpl_array[2] != atom_false) {\n        PRINTF_ERR1(\"CRYPTO: Invalid load_info '%T'\", load_info);\n        return 0;\n    }\n\n    atom_sha = enif_make_atom(env,\"sha\");\n    atom_error = enif_make_atom(env,\"error\");\n    atom_rsa_pkcs1_padding = enif_make_atom(env,\"rsa_pkcs1_padding\");\n    atom_rsa_pkcs1_oaep_padding = enif_make_atom(env,\"rsa_pkcs1_oaep_padding\");\n    atom_rsa_no_padding = enif_make_atom(env,\"rsa_no_padding\");\n    atom_signature_md = enif_make_atom(env,\"signature_md\");\n    atom_undefined = enif_make_atom(env,\"undefined\");\n    atom_ok = enif_make_atom(env,\"ok\");\n    atom_not_prime = enif_make_atom(env,\"not_prime\");\n    atom_not_strong_prime = enif_make_atom(env,\"not_strong_prime\");\n    atom_unable_to_check_generator = enif_make_atom(env,\"unable_to_check_generator\");\n    atom_not_suitable_generator = enif_make_atom(env,\"not_suitable_generator\");\n    atom_check_failed = enif_make_atom(env,\"check_failed\");\n    atom_unknown = enif_make_atom(env,\"unknown\");\n    atom_none = enif_make_atom(env,\"none\");\n    atom_notsup = enif_make_atom(env,\"notsup\");\n    atom_digest = enif_make_atom(env,\"digest\");\n\n#if defined(HAVE_EC)\n    atom_ec = enif_make_atom(env,\"ec\");\n    atom_prime_field = enif_make_atom(env,\"prime_field\");\n    atom_characteristic_two_field = enif_make_atom(env,\"characteristic_two_field\");\n    atom_tpbasis = enif_make_atom(env,\"tpbasis\");\n    atom_ppbasis = enif_make_atom(env,\"ppbasis\");\n    atom_onbasis = enif_make_atom(env,\"onbasis\");\n#endif\n\n    atom_aes_cfb8 = enif_make_atom(env, \"aes_cfb8\");\n    atom_aes_cfb128 = enif_make_atom(env, \"aes_cfb128\");\n#ifdef HAVE_GCM\n    atom_aes_gcm = enif_make_atom(env, \"aes_gcm\");\n#endif\n#ifdef HAVE_CCM\n    atom_aes_ccm = enif_make_atom(env, \"aes_ccm\");\n#endif\n#ifdef HAVE_CHACHA20_POLY1305\n    atom_chacha20_poly1305 = enif_make_atom(env,\"chacha20_poly1305\");\n#endif\n#ifdef HAVE_ECB_IVEC_BUG\n    atom_aes_ecb = enif_make_atom(env, \"aes_ecb\");\n    atom_des_ecb = enif_make_atom(env, \"des_ecb\");\n    atom_blowfish_ecb = enif_make_atom(env, \"blowfish_ecb\");\n#endif\n\n#ifdef FIPS_SUPPORT\n    atom_enabled = enif_make_atom(env,\"enabled\");\n    atom_not_enabled = enif_make_atom(env,\"not_enabled\");\n#else\n    atom_not_supported = enif_make_atom(env,\"not_supported\");\n#endif\n    atom_rsa = enif_make_atom(env,\"rsa\");\n    atom_dss = enif_make_atom(env,\"dss\");\n    atom_ecdsa = enif_make_atom(env,\"ecdsa\");\n#ifdef HAVE_ED_CURVE_DH\n    atom_x25519 = enif_make_atom(env,\"x25519\");\n    atom_x448 = enif_make_atom(env,\"x448\");\n#endif\n    atom_eddsa = enif_make_atom(env,\"eddsa\");\n#ifdef HAVE_EDDSA\n    atom_ed25519 = enif_make_atom(env,\"ed25519\");\n    atom_ed448 = enif_make_atom(env,\"ed448\");\n#endif\n    atom_rsa_mgf1_md = enif_make_atom(env,\"rsa_mgf1_md\");\n    atom_rsa_oaep_label = enif_make_atom(env,\"rsa_oaep_label\");\n    atom_rsa_oaep_md = enif_make_atom(env,\"rsa_oaep_md\");\n    atom_rsa_pad = enif_make_atom(env,\"rsa_pad\"); /* backwards compatibility */\n    atom_rsa_padding = enif_make_atom(env,\"rsa_padding\");\n    atom_rsa_pkcs1_pss_padding = enif_make_atom(env,\"rsa_pkcs1_pss_padding\");\n#ifdef HAVE_RSA_SSLV23_PADDING\n    atom_rsa_sslv23_padding = enif_make_atom(env,\"rsa_sslv23_padding\");\n#endif\n    atom_rsa_x931_padding = enif_make_atom(env,\"rsa_x931_padding\");\n    atom_rsa_pss_saltlen = enif_make_atom(env,\"rsa_pss_saltlen\");\n    atom_sha224 = enif_make_atom(env,\"sha224\");\n    atom_sha256 = enif_make_atom(env,\"sha256\");\n    atom_sha384 = enif_make_atom(env,\"sha384\");\n    atom_sha512 = enif_make_atom(env,\"sha512\");\n    atom_sha3_224 = enif_make_atom(env,\"sha3_224\");\n    atom_sha3_256 = enif_make_atom(env,\"sha3_256\");\n    atom_sha3_384 = enif_make_atom(env,\"sha3_384\");\n    atom_sha3_512 = enif_make_atom(env,\"sha3_512\");\n    atom_md5 = enif_make_atom(env,\"md5\");\n    atom_ripemd160 = enif_make_atom(env,\"ripemd160\");\n\n#ifdef HAS_ENGINE_SUPPORT\n    atom_bad_engine_method = enif_make_atom(env,\"bad_engine_method\");\n    atom_bad_engine_id = enif_make_atom(env,\"bad_engine_id\");\n    atom_ctrl_cmd_failed = enif_make_atom(env,\"ctrl_cmd_failed\");\n    atom_engine_init_failed = enif_make_atom(env,\"engine_init_failed\");\n    atom_engine_method_not_supported = enif_make_atom(env,\"engine_method_not_supported\");\n    atom_add_engine_failed = enif_make_atom(env,\"add_engine_failed\");\n    atom_remove_engine_failed = enif_make_atom(env,\"remove_engine_failed\");\n\n    atom_engine_method_rsa = enif_make_atom(env,\"engine_method_rsa\");\n    atom_engine_method_dsa = enif_make_atom(env,\"engine_method_dsa\");\n    atom_engine_method_dh = enif_make_atom(env,\"engine_method_dh\");\n    atom_engine_method_rand = enif_make_atom(env,\"engine_method_rand\");\n    atom_engine_method_ecdh = enif_make_atom(env,\"engine_method_ecdh\");\n    atom_engine_method_ecdsa = enif_make_atom(env,\"engine_method_ecdsa\");\n    atom_engine_method_store = enif_make_atom(env,\"engine_method_store\");\n    atom_engine_method_ciphers = enif_make_atom(env,\"engine_method_ciphers\");\n    atom_engine_method_digests = enif_make_atom(env,\"engine_method_digests\");\n    atom_engine_method_pkey_meths = enif_make_atom(env,\"engine_method_pkey_meths\");\n    atom_engine_method_pkey_asn1_meths = enif_make_atom(env,\"engine_method_pkey_asn1_meths\");\n    atom_engine_method_ec = enif_make_atom(env,\"engine_method_ec\");\n\n    atom_engine = enif_make_atom(env,\"engine\");\n    atom_key_id = enif_make_atom(env,\"key_id\");\n    atom_password = enif_make_atom(env,\"password\");\n#endif\n\n\n#ifdef HAVE_DYNAMIC_CRYPTO_LIB\n    {\n\tvoid* handle;\n\tif (!change_basename(&lib_bin, lib_buf, sizeof(lib_buf), crypto_callback_name)) {\n\t    return __LINE__;\n\t}\n\tif (!(handle = enif_dlopen(lib_buf, &error_handler, NULL))) {\n\t    return __LINE__;\n\t}\n\tif (!(funcp = (get_crypto_callbacks_t*) enif_dlsym(handle, \"get_crypto_callbacks\",\n\t\t\t\t\t\t\t   &error_handler, NULL))) {\n\t    return __LINE__;\n\t}\n    }\n#else /* !HAVE_DYNAMIC_CRYPTO_LIB */\n    funcp = &get_crypto_callbacks;\n#endif\n\n#ifdef OPENSSL_THREADS\n    enif_system_info(&sys_info, sizeof(sys_info));\n    if (sys_info.scheduler_threads > 1) {\n\tnlocks = CRYPTO_num_locks();\n    }\n    /* else no need for locks */\n#endif\n\n    ccb = (*funcp)(nlocks);\n\n    if (!ccb || ccb->sizeof_me != sizeof(*ccb)) {\n\tPRINTF_ERR0(\"Invalid 'crypto_callbacks'\");\n\treturn __LINE__;\n    }\n\n    CRYPTO_set_mem_functions(ccb->crypto_alloc, ccb->crypto_realloc, ccb->crypto_free);\n\n#ifdef OPENSSL_THREADS\n    if (nlocks > 0) {\n\tCRYPTO_set_locking_callback(ccb->locking_function);\n\tCRYPTO_set_id_callback(ccb->id_function);\n\tCRYPTO_set_dynlock_create_callback(ccb->dyn_create_function);\n\tCRYPTO_set_dynlock_lock_callback(ccb->dyn_lock_function);\n\tCRYPTO_set_dynlock_destroy_callback(ccb->dyn_destroy_function);\n    }\n#endif /* OPENSSL_THREADS */\n\n    init_digest_types(env);\n    init_cipher_types(env);\n    init_algorithms_types(env);\n\n    library_initialized = 1;\n    return 0;\n}\n\nstatic int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)\n{\n    int errline = initialize(env, load_info);\n    if (errline) {\n\treturn errline;\n    }\n\n    *priv_data = NULL;\n    library_refc++;\n    return 0;\n}\n\nstatic int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data,\n\t\t   ERL_NIF_TERM load_info)\n{\n    int errline;\n    if (*old_priv_data != NULL) {\n\treturn __LINE__; /* Don't know how to do that */\n    }\n    if (*priv_data != NULL) {\n\treturn __LINE__; /* Don't know how to do that */\n    }\n    errline = initialize(env, load_info);\n    if (errline) {\n\treturn errline;\n    }\n    library_refc++;\n    return 0;\n}\n\nstatic void unload(ErlNifEnv* env, void* priv_data)\n{\n    --library_refc;\n}\n\nstatic int algo_hash_cnt, algo_hash_fips_cnt;\nstatic ERL_NIF_TERM algo_hash[12];   /* increase when extending the list */\nstatic int algo_pubkey_cnt, algo_pubkey_fips_cnt;\nstatic ERL_NIF_TERM algo_pubkey[12]; /* increase when extending the list */\nstatic int algo_cipher_cnt, algo_cipher_fips_cnt;\nstatic ERL_NIF_TERM algo_cipher[25]; /* increase when extending the list */\nstatic int algo_mac_cnt, algo_mac_fips_cnt;\nstatic ERL_NIF_TERM algo_mac[3]; /* increase when extending the list */\nstatic int algo_curve_cnt, algo_curve_fips_cnt;\nstatic ERL_NIF_TERM algo_curve[89]; /* increase when extending the list */\nstatic int algo_rsa_opts_cnt, algo_rsa_opts_fips_cnt;\nstatic ERL_NIF_TERM algo_rsa_opts[11]; /* increase when extending the list */\n\nstatic void init_algorithms_types(ErlNifEnv* env)\n{\n    // Validated algorithms first\n    algo_hash_cnt = 0;\n    algo_hash[algo_hash_cnt++] = atom_sha;\n#ifdef HAVE_SHA224\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha224\");\n#endif\n#ifdef HAVE_SHA256\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha256\");\n#endif\n#ifdef HAVE_SHA384\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha384\");\n#endif\n#ifdef HAVE_SHA512\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha512\");\n#endif\n#ifdef HAVE_SHA3_224\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha3_224\");\n#endif\n#ifdef HAVE_SHA3_256\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha3_256\");\n#endif\n#ifdef HAVE_SHA3_384\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha3_384\");\n#endif\n#ifdef HAVE_SHA3_512\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"sha3_512\");\n#endif\n    // Non-validated algorithms follow\n    algo_hash_fips_cnt = algo_hash_cnt;\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"md4\");\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"md5\");\n    algo_hash[algo_hash_cnt++] = enif_make_atom(env, \"ripemd160\");\n\n    algo_pubkey_cnt = 0;\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"rsa\");\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"dss\");\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"dh\");\n#if defined(HAVE_EC)\n#if !defined(OPENSSL_NO_EC2M)\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"ec_gf2m\");\n#endif\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"ecdsa\");\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"ecdh\");\n#endif\n    // Non-validated algorithms follow\n    algo_pubkey_fips_cnt = algo_pubkey_cnt;\n    // Don't know if Edward curves are fips validated\n#if defined(HAVE_EDDSA)\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"eddsa\");\n#endif\n    algo_pubkey[algo_pubkey_cnt++] = enif_make_atom(env, \"srp\");\n\n    // Validated algorithms first\n    algo_cipher_cnt = 0;\n#ifndef OPENSSL_NO_DES\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"des3_cbc\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"des_ede3\");\n#ifdef HAVE_DES_ede3_cfb_encrypt\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"des3_cbf\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"des3_cfb\");\n#endif\n#endif\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_cbc\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_cbc128\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_cfb8\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_cfb128\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_cbc256\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_ctr\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env, \"aes_ecb\");\n#if defined(HAVE_GCM)\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"aes_gcm\");\n#endif\n#if defined(HAVE_CCM)\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"aes_ccm\");\n#endif\n    // Non-validated algorithms follow\n    algo_cipher_fips_cnt = algo_cipher_cnt;\n#ifdef HAVE_AES_IGE\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"aes_ige256\");\n#endif\n#ifndef OPENSSL_NO_DES\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"des_cbc\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"des_cfb\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"des_ecb\");\n#endif\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"blowfish_cbc\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"blowfish_cfb64\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"blowfish_ofb64\");\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"blowfish_ecb\");\n#ifndef OPENSSL_NO_RC2\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"rc2_cbc\");\n#endif\n#ifndef OPENSSL_NO_RC4\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"rc4\");\n#endif\n#if defined(HAVE_CHACHA20_POLY1305)\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"chacha20_poly1305\");\n#endif\n#if defined(HAVE_CHACHA20)\n    algo_cipher[algo_cipher_cnt++] = enif_make_atom(env,\"chacha20\");\n#endif\n \n    // Validated algorithms first\n    algo_mac_cnt = 0;\n    algo_mac[algo_mac_cnt++] = enif_make_atom(env,\"hmac\");\n#ifdef HAVE_CMAC\n    algo_mac[algo_mac_cnt++] = enif_make_atom(env,\"cmac\");\n#endif\n#ifdef HAVE_POLY1305\n    algo_mac[algo_mac_cnt++] = enif_make_atom(env,\"poly1305\");\n#endif\n    // Non-validated algorithms follow\n    algo_mac_fips_cnt = algo_mac_cnt;\n\n    // Validated algorithms first\n    algo_curve_cnt = 0;\n#if defined(HAVE_EC)\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp160k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp160r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp160r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp192r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp192k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp224k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp224r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp256k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp256r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp384r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp521r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime192v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime192v2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime192v3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime239v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime239v2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime239v3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"prime256v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls7\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls9\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls12\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP160r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP160t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP192r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP192t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP224r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP224t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP256r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP256t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP320r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP320t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP384r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP384t1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP512r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"brainpoolP512t1\");\n#if !defined(OPENSSL_NO_EC2M)\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect163k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect163r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect163r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect193r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect193r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect233k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect233r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect239k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect283k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect283r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect409k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect409r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect571k1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect571r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb163v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb163v2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb163v3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb176v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb191v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb191v2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb191v3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb208w1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb239v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb239v2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb239v3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb272w1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb304w1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb359v1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2pnb368w1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"c2tnb431r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls5\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls10\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls11\");\n#endif\n#endif\n    // Non-validated algorithms follow\n    algo_curve_fips_cnt = algo_curve_cnt;\n#if defined(HAVE_EC)\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp112r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp112r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp128r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"secp128r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls6\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls8\");\n#if !defined(OPENSSL_NO_EC2M)\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect113r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect113r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect131r1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"sect131r2\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls1\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"wtls4\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"ipsec3\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"ipsec4\");\n#endif\n#endif\n    //--\n#ifdef HAVE_EDDSA\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"ed25519\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"ed448\");\n#endif\n#ifdef HAVE_ED_CURVE_DH\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"x25519\");\n    algo_curve[algo_curve_cnt++] = enif_make_atom(env,\"x448\");\n#endif\n\n    // Validated algorithms first\n    algo_rsa_opts_cnt = 0;\n#ifdef HAS_EVP_PKEY_CTX\n# ifdef HAVE_RSA_PKCS1_PSS_PADDING\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_pkcs1_pss_padding\");\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_pss_saltlen\");\n# endif\n# ifdef HAVE_RSA_MGF1_MD\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_mgf1_md\");\n# endif\n# ifdef HAVE_RSA_OAEP_PADDING\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_pkcs1_oaep_padding\");\n# endif\n# ifdef HAVE_RSA_OAEP_MD\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_oaep_label\");\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_oaep_md\");\n# endif\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"signature_md\");\n#endif\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_pkcs1_padding\");\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_x931_padding\");\n#ifdef HAVE_RSA_SSLV23_PADDING\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_sslv23_padding\");\n#endif\n    algo_rsa_opts[algo_rsa_opts_cnt++] = enif_make_atom(env,\"rsa_no_padding\");\n    algo_rsa_opts_fips_cnt = algo_rsa_opts_cnt;\n\n\n    // Check that the max number of algos is updated\n    ASSERT(algo_hash_cnt <= sizeof(algo_hash)/sizeof(ERL_NIF_TERM));\n    ASSERT(algo_pubkey_cnt <= sizeof(algo_pubkey)/sizeof(ERL_NIF_TERM));\n    ASSERT(algo_cipher_cnt <= sizeof(algo_cipher)/sizeof(ERL_NIF_TERM));\n    ASSERT(algo_mac_cnt <= sizeof(algo_mac)/sizeof(ERL_NIF_TERM));\n    ASSERT(algo_curve_cnt <= sizeof(algo_curve)/sizeof(ERL_NIF_TERM));\n    ASSERT(algo_rsa_opts_cnt <= sizeof(algo_rsa_opts)/sizeof(ERL_NIF_TERM));\n}\n\nstatic ERL_NIF_TERM algorithms(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n#ifdef FIPS_SUPPORT\n    int fips_mode  = FIPS_mode();\n    int hash_cnt   = fips_mode ? algo_hash_fips_cnt   : algo_hash_cnt;\n    int pubkey_cnt = fips_mode ? algo_pubkey_fips_cnt : algo_pubkey_cnt;\n    int cipher_cnt = fips_mode ? algo_cipher_fips_cnt : algo_cipher_cnt;\n    int mac_cnt    = fips_mode ? algo_mac_fips_cnt    : algo_mac_cnt;\n    int curve_cnt    = fips_mode ? algo_curve_fips_cnt    : algo_curve_cnt;\n    int rsa_opts_cnt = fips_mode ? algo_rsa_opts_fips_cnt : algo_rsa_opts_cnt;\n#else\n    int hash_cnt   = algo_hash_cnt;\n    int pubkey_cnt = algo_pubkey_cnt;\n    int cipher_cnt = algo_cipher_cnt;\n    int mac_cnt    = algo_mac_cnt;\n    int curve_cnt    = algo_curve_cnt;\n    int rsa_opts_cnt = algo_rsa_opts_cnt;\n#endif\n    return enif_make_tuple6(env,\n                            enif_make_list_from_array(env, algo_hash,   hash_cnt),\n\t\t\t    enif_make_list_from_array(env, algo_pubkey, pubkey_cnt),\n\t\t\t    enif_make_list_from_array(env, algo_cipher, cipher_cnt),\n                            enif_make_list_from_array(env, algo_mac,    mac_cnt),\n\t\t\t    enif_make_list_from_array(env, algo_curve,  curve_cnt),\n\t\t\t    enif_make_list_from_array(env, algo_rsa_opts, rsa_opts_cnt)\n                            );\n}\n\nstatic ERL_NIF_TERM info_lib(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    /* [{<<\"OpenSSL\">>,9470143,<<\"OpenSSL 0.9.8k 25 Mar 2009\">>}] */\n\n    static const char libname[] = \"OpenSSL\";\n    unsigned name_sz = strlen(libname);\n    const char* ver = SSLeay_version(SSLEAY_VERSION);\n    unsigned ver_sz = strlen(ver);\n    ERL_NIF_TERM name_term, ver_term;\n    int ver_num = OPENSSL_VERSION_NUMBER;\n    /* R16:\n     * Ignore library version number from SSLeay() and instead show header\n     * version. Otherwise user might try to call a function that is implemented\n     * by a newer library but not supported by the headers used at compile time.\n     * Example: DES_ede3_cfb_encrypt in 0.9.7i but not in 0.9.7d.\n     *\n     * Version string is still from library though.\n     */\n\n    memcpy(enif_make_new_binary(env, name_sz, &name_term), libname, name_sz);\n    memcpy(enif_make_new_binary(env, ver_sz, &ver_term), ver, ver_sz);\n\n    return enif_make_list1(env, enif_make_tuple3(env, name_term,\n\t\t\t\t\t\t enif_make_int(env, ver_num),\n\t\t\t\t\t\t ver_term));\n}\n\nstatic ERL_NIF_TERM info_fips(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n#ifdef FIPS_SUPPORT\n    return FIPS_mode() ? atom_enabled : atom_not_enabled;\n#else\n    return atom_not_supported;\n#endif\n}\n\nstatic ERL_NIF_TERM enable_fips_mode(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Boolean) */\n    if (argv[0] == atom_true) {\n#ifdef FIPS_SUPPORT\n        if (FIPS_mode_set(1)) {\n            return atom_true;\n        }\n#endif\n        PRINTF_ERR0(\"CRYPTO: Could not setup FIPS mode\");\n        return atom_false;\n    } else if (argv[0] == atom_false) {\n#ifdef FIPS_SUPPORT\n        if (!FIPS_mode_set(0)) {\n            return atom_false;\n        }\n#endif\n        return atom_true;\n    } else {\n        return enif_make_badarg(env);\n    }\n}\n\n\n#if defined(HAVE_EC)\nstatic ERL_NIF_TERM make_badarg_maybe(ErlNifEnv* env)\n{\n    ERL_NIF_TERM reason;\n    if (enif_has_pending_exception(env, &reason))\n\treturn reason; /* dummy return value ignored */\n    else\n\treturn enif_make_badarg(env);\n}\n#endif\n\nstatic ERL_NIF_TERM hash_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type, Data) */\n    struct digest_type_t *digp = NULL;\n    const EVP_MD         *md;\n    ErlNifBinary         data;\n    ERL_NIF_TERM         ret;\n    unsigned             ret_size;\n\n    digp = get_digest_type(argv[0]);\n    if (!digp ||\n        !enif_inspect_iolist_as_binary(env, argv[1], &data)) {\n\treturn enif_make_badarg(env);\n    }\n    md = digp->md.p;\n    if (!md) {\n\treturn atom_notsup;\n    }\n\n    ret_size = (unsigned)EVP_MD_size(md);\n    ASSERT(0 < ret_size && ret_size <= EVP_MAX_MD_SIZE);\n    if (!EVP_Digest(data.data, data.size,\n                    enif_make_new_binary(env, ret_size, &ret), &ret_size,\n                    md, NULL)) {\n        return atom_notsup;\n    }\n    ASSERT(ret_size == (unsigned)EVP_MD_size(md));\n\n    CONSUME_REDS(env, data);\n    return ret;\n}\n\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n\nstatic ERL_NIF_TERM hash_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type) */\n    struct digest_type_t *digp = NULL;\n    struct evp_md_ctx    *ctx;\n    ERL_NIF_TERM         ret;\n\n    digp = get_digest_type(argv[0]);\n    if (!digp) {\n\treturn enif_make_badarg(env);\n    }\n    if (!digp->md.p) {\n\treturn atom_notsup;\n    }\n\n    ctx = enif_alloc_resource(evp_md_ctx_rtype, sizeof(struct evp_md_ctx));\n    ctx->ctx = EVP_MD_CTX_new();\n    if (!EVP_DigestInit(ctx->ctx, digp->md.p)) {\n        enif_release_resource(ctx);\n        return atom_notsup;\n    }\n    ret = enif_make_resource(env, ctx);\n    enif_release_resource(ctx);\n    return ret;\n}\nstatic ERL_NIF_TERM hash_update_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Context, Data) */\n    struct evp_md_ctx   *ctx, *new_ctx;\n    ErlNifBinary data;\n    ERL_NIF_TERM ret;\n\n    if (!enif_get_resource(env, argv[0], evp_md_ctx_rtype, (void**)&ctx) ||\n        !enif_inspect_iolist_as_binary(env, argv[1], &data)) {\n        return enif_make_badarg(env);\n    }\n\n    new_ctx = enif_alloc_resource(evp_md_ctx_rtype, sizeof(struct evp_md_ctx));\n    new_ctx->ctx = EVP_MD_CTX_new();\n    if (!EVP_MD_CTX_copy(new_ctx->ctx, ctx->ctx) ||\n        !EVP_DigestUpdate(new_ctx->ctx, data.data, data.size)) {\n        enif_release_resource(new_ctx);\n        return atom_notsup;\n    }\n\n    ret = enif_make_resource(env, new_ctx);\n    enif_release_resource(new_ctx);\n    CONSUME_REDS(env, data);\n    return ret;\n}\nstatic ERL_NIF_TERM hash_final_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Context) */\n    struct evp_md_ctx *ctx;\n    EVP_MD_CTX        *new_ctx;\n    ERL_NIF_TERM  ret;\n    unsigned      ret_size;\n\n    if (!enif_get_resource(env, argv[0], evp_md_ctx_rtype, (void**)&ctx)) {\n        return enif_make_badarg(env);\n    }\n\n    ret_size = (unsigned)EVP_MD_CTX_size(ctx->ctx);\n    ASSERT(0 < ret_size && ret_size <= EVP_MAX_MD_SIZE);\n\n    new_ctx = EVP_MD_CTX_new();\n    if (!EVP_MD_CTX_copy(new_ctx, ctx->ctx) ||\n        !EVP_DigestFinal(new_ctx,\n                         enif_make_new_binary(env, ret_size, &ret),\n                         &ret_size)) {\n\tEVP_MD_CTX_free(new_ctx);\n        return atom_notsup;\n    }\n    EVP_MD_CTX_free(new_ctx);\n    ASSERT(ret_size == (unsigned)EVP_MD_CTX_size(ctx->ctx));\n\n    return ret;\n}\n\n#else /* if OPENSSL_VERSION_NUMBER < 1.0 */\n\nstatic ERL_NIF_TERM hash_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type) */\n    typedef int (*init_fun)(unsigned char*);\n    struct digest_type_t *digp = NULL;\n    ERL_NIF_TERM         ctx;\n    size_t               ctx_size = 0;\n    init_fun             ctx_init = 0;\n\n    digp = get_digest_type(argv[0]);\n    if (!digp) {\n\treturn enif_make_badarg(env);\n    }\n    if (!digp->md.p) {\n\treturn atom_notsup;\n    }\n\n    switch (EVP_MD_type(digp->md.p))\n    {\n    case NID_md4:\n        ctx_size = MD4_CTX_LEN;\n        ctx_init = (init_fun)(&MD4_Init);\n        break;\n    case NID_md5:\n        ctx_size = MD5_CTX_LEN;\n        ctx_init = (init_fun)(&MD5_Init);\n        break;\n    case NID_ripemd160:\n        ctx_size = RIPEMD160_CTX_LEN;\n        ctx_init = (init_fun)(&RIPEMD160_Init);\n        break;\n    case NID_sha1:\n        ctx_size = sizeof(SHA_CTX);\n        ctx_init = (init_fun)(&SHA1_Init);\n        break;\n#ifdef HAVE_SHA224\n    case NID_sha224:\n        ctx_size = sizeof(SHA256_CTX);\n        ctx_init = (init_fun)(&SHA224_Init);\n        break;\n#endif\n#ifdef HAVE_SHA256\n    case NID_sha256:\n        ctx_size = sizeof(SHA256_CTX);\n        ctx_init = (init_fun)(&SHA256_Init);\n        break;\n#endif\n#ifdef HAVE_SHA384\n    case NID_sha384:\n        ctx_size = sizeof(SHA512_CTX);\n        ctx_init = (init_fun)(&SHA384_Init);\n        break;\n#endif\n#ifdef HAVE_SHA512\n    case NID_sha512:\n        ctx_size = sizeof(SHA512_CTX);\n        ctx_init = (init_fun)(&SHA512_Init);\n        break;\n#endif\n    default:\n        return atom_notsup;\n    }\n    ASSERT(ctx_size);\n    ASSERT(ctx_init);\n\n    ctx_init(enif_make_new_binary(env, ctx_size, &ctx));\n    return enif_make_tuple2(env, argv[0], ctx);\n}\nstatic ERL_NIF_TERM hash_update_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* ({Type, Context}, Data) */\n    typedef int (*update_fun)(unsigned char*, const unsigned char*, size_t);\n    ERL_NIF_TERM         new_ctx;\n    ErlNifBinary         ctx, data;\n    const ERL_NIF_TERM   *tuple;\n    int                  arity;\n    struct digest_type_t *digp = NULL;\n    unsigned char        *ctx_buff;\n    size_t               ctx_size   = 0;\n    update_fun           ctx_update = 0;\n\n    if (!enif_get_tuple(env, argv[0], &arity, &tuple) ||\n        arity != 2 ||\n        !(digp = get_digest_type(tuple[0])) ||\n        !enif_inspect_binary(env, tuple[1], &ctx) ||\n        !enif_inspect_iolist_as_binary(env, argv[1], &data)) {\n        return enif_make_badarg(env);\n    }\n    if (!digp->md.p) {\n\treturn atom_notsup;\n    }\n\n    switch (EVP_MD_type(digp->md.p))\n    {\n    case NID_md4:\n        ctx_size   = MD4_CTX_LEN;\n        ctx_update = (update_fun)(&MD4_Update);\n        break;\n    case NID_md5:\n        ctx_size   = MD5_CTX_LEN;\n        ctx_update = (update_fun)(&MD5_Update);\n        break;\n    case NID_ripemd160:\n        ctx_size   = RIPEMD160_CTX_LEN;\n        ctx_update = (update_fun)(&RIPEMD160_Update);\n        break;\n    case NID_sha1:\n        ctx_size   = sizeof(SHA_CTX);\n        ctx_update = (update_fun)(&SHA1_Update);\n        break;\n#ifdef HAVE_SHA224\n    case NID_sha224:\n        ctx_size   = sizeof(SHA256_CTX);\n        ctx_update = (update_fun)(&SHA224_Update);\n        break;\n#endif\n#ifdef HAVE_SHA256\n    case NID_sha256:\n        ctx_size   = sizeof(SHA256_CTX);\n        ctx_update = (update_fun)(&SHA256_Update);\n        break;\n#endif\n#ifdef HAVE_SHA384\n    case NID_sha384:\n        ctx_size   = sizeof(SHA512_CTX);\n        ctx_update = (update_fun)(&SHA384_Update);\n        break;\n#endif\n#ifdef HAVE_SHA512\n    case NID_sha512:\n        ctx_size   = sizeof(SHA512_CTX);\n        ctx_update = (update_fun)(&SHA512_Update);\n        break;\n#endif\n    default:\n        return atom_notsup;\n    }\n    ASSERT(ctx_size);\n    ASSERT(ctx_update);\n\n    if (ctx.size != ctx_size) {\n        return enif_make_badarg(env);\n    }\n\n    ctx_buff = enif_make_new_binary(env, ctx_size, &new_ctx);\n    memcpy(ctx_buff, ctx.data, ctx_size);\n    ctx_update(ctx_buff, data.data, data.size);\n\n    CONSUME_REDS(env, data);\n    return enif_make_tuple2(env, tuple[0], new_ctx);\n}\nstatic ERL_NIF_TERM hash_final_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* ({Type, Context}) */\n    typedef int (*final_fun)(unsigned char*, void*);\n    ERL_NIF_TERM         ret;\n    ErlNifBinary         ctx;\n    const ERL_NIF_TERM   *tuple;\n    int                  arity;\n    struct digest_type_t *digp = NULL;\n    const EVP_MD         *md;\n    void                 *new_ctx;\n    size_t               ctx_size  = 0;\n    final_fun            ctx_final = 0;\n\n    if (!enif_get_tuple(env, argv[0], &arity, &tuple) ||\n        arity != 2 ||\n        !(digp = get_digest_type(tuple[0])) ||\n        !enif_inspect_binary(env, tuple[1], &ctx)) {\n        return enif_make_badarg(env);\n    }\n    md = digp->md.p;\n    if (!md) {\n\treturn atom_notsup;\n    }\n\n\n    switch (EVP_MD_type(md))\n    {\n    case NID_md4:\n        ctx_size  = MD4_CTX_LEN;\n        ctx_final = (final_fun)(&MD4_Final);\n        break;\n    case NID_md5:\n        ctx_size  = MD5_CTX_LEN;\n        ctx_final = (final_fun)(&MD5_Final);\n        break;\n    case NID_ripemd160:\n        ctx_size  = RIPEMD160_CTX_LEN;\n        ctx_final = (final_fun)(&RIPEMD160_Final);\n        break;\n    case NID_sha1:\n        ctx_size  = sizeof(SHA_CTX);\n        ctx_final = (final_fun)(&SHA1_Final);\n        break;\n#ifdef HAVE_SHA224\n    case NID_sha224:\n        ctx_size  = sizeof(SHA256_CTX);\n        ctx_final = (final_fun)(&SHA224_Final);\n        break;\n#endif\n#ifdef HAVE_SHA256\n    case NID_sha256:\n        ctx_size  = sizeof(SHA256_CTX);\n        ctx_final = (final_fun)(&SHA256_Final);\n        break;\n#endif\n#ifdef HAVE_SHA384\n    case NID_sha384:\n        ctx_size  = sizeof(SHA512_CTX);\n        ctx_final = (final_fun)(&SHA384_Final);\n        break;\n#endif\n#ifdef HAVE_SHA512\n    case NID_sha512:\n        ctx_size  = sizeof(SHA512_CTX);\n        ctx_final = (final_fun)(&SHA512_Final);\n        break;\n#endif\n    default:\n        return atom_notsup;\n    }\n    ASSERT(ctx_size);\n    ASSERT(ctx_final);\n\n    if (ctx.size != ctx_size) {\n        return enif_make_badarg(env);\n    }\n\n    new_ctx = enif_alloc(ctx_size);\n    memcpy(new_ctx, ctx.data, ctx_size);\n    ctx_final(enif_make_new_binary(env, (size_t)EVP_MD_size(md), &ret),\n              new_ctx);\n    enif_free(new_ctx);\n\n    return ret;\n}\n#endif  /* OPENSSL_VERSION_NUMBER < 1.0 */\n\n\nstatic ERL_NIF_TERM hmac_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type, Key, Data) or (Type, Key, Data, MacSize) */\n    struct digest_type_t *digp = NULL;\n    ErlNifBinary         key, data;\n    unsigned char        buff[EVP_MAX_MD_SIZE];\n    unsigned             size = 0, req_size = 0;\n    ERL_NIF_TERM         ret;\n\n    digp = get_digest_type(argv[0]);\n    if (!digp ||\n        !enif_inspect_iolist_as_binary(env, argv[1], &key) ||\n        !enif_inspect_iolist_as_binary(env, argv[2], &data) ||\n        (argc == 4 && !enif_get_uint(env, argv[3], &req_size))) {\n        return enif_make_badarg(env);\n    }\n\n    if (!digp->md.p ||\n        !HMAC(digp->md.p,\n              key.data, key.size,\n              data.data, data.size,\n              buff, &size)) {\n        return atom_notsup;\n    }\n    ASSERT(0 < size && size <= EVP_MAX_MD_SIZE);\n    CONSUME_REDS(env, data);\n\n    if (argc == 4) {\n        if (req_size <= size) {\n            size = req_size;\n        }\n        else {\n            return enif_make_badarg(env);\n        }\n    }\n    memcpy(enif_make_new_binary(env, size, &ret), buff, size);\n    return ret;\n}\n\nstatic void hmac_context_dtor(ErlNifEnv* env, struct hmac_context *obj)\n{\n    if (obj->alive) {\n\tHMAC_CTX_free(obj->ctx);\n\tobj->alive = 0;\n    }\n    enif_mutex_destroy(obj->mtx);\n}\n\nstatic ERL_NIF_TERM hmac_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type, Key) */\n    struct digest_type_t *digp = NULL;\n    ErlNifBinary         key;\n    ERL_NIF_TERM         ret;\n    struct hmac_context  *obj;\n\n    digp = get_digest_type(argv[0]);\n    if (!digp ||\n        !enif_inspect_iolist_as_binary(env, argv[1], &key)) {\n        return enif_make_badarg(env);\n    }\n    if (!digp->md.p) {\n        return atom_notsup;\n    }\n\n    obj = enif_alloc_resource(hmac_context_rtype, sizeof(struct hmac_context));\n    obj->mtx = enif_mutex_create(\"crypto.hmac\");\n    obj->alive = 1;\n    obj->ctx = HMAC_CTX_new();\n#if OPENSSL_VERSION_NUMBER >= PACKED_OPENSSL_VERSION_PLAIN(1,0,0)\n    // Check the return value of HMAC_Init: it may fail in FIPS mode\n    // for disabled algorithms\n    if (!HMAC_Init_ex(obj->ctx, key.data, key.size, digp->md.p, NULL)) {\n        enif_release_resource(obj);\n        return atom_notsup;\n    }\n#else\n    HMAC_Init_ex(obj->ctx, key.data, key.size, digp->md.p, NULL);\n#endif\n\n    ret = enif_make_resource(env, obj);\n    enif_release_resource(obj);\n    return ret;\n}\n\nstatic ERL_NIF_TERM hmac_update_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Context, Data) */\n    ErlNifBinary data;\n    struct hmac_context* obj;\n\n    if (!enif_get_resource(env, argv[0], hmac_context_rtype, (void**)&obj)\n\t|| !enif_inspect_iolist_as_binary(env, argv[1], &data)) {\n\treturn enif_make_badarg(env);\n    }\n    enif_mutex_lock(obj->mtx);\n    if (!obj->alive) {\n\tenif_mutex_unlock(obj->mtx);\n\treturn enif_make_badarg(env);\n    }\n    HMAC_Update(obj->ctx, data.data, data.size);\n    enif_mutex_unlock(obj->mtx);\n\n    CONSUME_REDS(env,data);\n    return argv[0];\n}\n\nstatic ERL_NIF_TERM hmac_final_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Context) or (Context, HashLen) */\n    ERL_NIF_TERM ret;\n    struct hmac_context* obj;\n    unsigned char mac_buf[EVP_MAX_MD_SIZE];\n    unsigned char * mac_bin;\n    unsigned int req_len = 0;\n    unsigned int mac_len;\n\n    if (!enif_get_resource(env,argv[0],hmac_context_rtype, (void**)&obj)\n\t|| (argc == 2 && !enif_get_uint(env, argv[1], &req_len))) {\n\treturn enif_make_badarg(env);\n    }\n\n    enif_mutex_lock(obj->mtx);\n    if (!obj->alive) {\n\tenif_mutex_unlock(obj->mtx);\n\treturn enif_make_badarg(env);\n    }\n\n    HMAC_Final(obj->ctx, mac_buf, &mac_len);\n    HMAC_CTX_free(obj->ctx);\n    obj->alive = 0;\n    enif_mutex_unlock(obj->mtx);\n\n    if (argc == 2 && req_len < mac_len) {\n        /* Only truncate to req_len bytes if asked. */\n        mac_len = req_len;\n    }\n    mac_bin = enif_make_new_binary(env, mac_len, &ret);\n    memcpy(mac_bin, mac_buf, mac_len);\n\n    return ret;\n}\n\nstatic ERL_NIF_TERM cmac_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type, Key, Data) */\n#if defined(HAVE_CMAC)\n    struct cipher_type_t *cipherp = NULL;\n    const EVP_CIPHER     *cipher;\n    CMAC_CTX             *ctx;\n    ErlNifBinary         key;\n    ErlNifBinary         data;\n    ERL_NIF_TERM         ret;\n    size_t               ret_size;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[1], &key)\n        || !(cipherp = get_cipher_type(argv[0], key.size))\n        || !enif_inspect_iolist_as_binary(env, argv[2], &data)) {\n        return enif_make_badarg(env);\n    }\n    cipher = cipherp->cipher.p;\n    if (!cipher) {\n        return enif_raise_exception(env, atom_notsup);\n    }\n\n    ctx = CMAC_CTX_new();\n    if (!CMAC_Init(ctx, key.data, key.size, cipher, NULL)) {\n        CMAC_CTX_free(ctx);\n        return atom_notsup;\n    }\n\n    if (!CMAC_Update(ctx, data.data, data.size) ||\n        !CMAC_Final(ctx,\n                    enif_make_new_binary(env, EVP_CIPHER_block_size(cipher), &ret),\n                    &ret_size)) {\n        CMAC_CTX_free(ctx);\n        return atom_notsup;\n    }\n    ASSERT(ret_size == (unsigned)EVP_CIPHER_block_size(cipher));\n\n    CMAC_CTX_free(ctx);\n    CONSUME_REDS(env, data);\n    return ret;\n#else\n    /* The CMAC functionality was introduced in OpenSSL 1.0.1\n     * Although OTP requires at least version 0.9.8, the versions 0.9.8 and 1.0.0 are\n     * no longer maintained. */\n    return atom_notsup;\n#endif\n}\n\n/* For OpenSSL >= 1.1.1 the hmac_nif and cmac_nif could be integrated into poly1305 (with 'type' as parameter) */\nstatic ERL_NIF_TERM poly1305_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, Text) */\n#ifdef HAVE_POLY1305\n    ErlNifBinary key_bin, text, ret_bin;\n    ERL_NIF_TERM ret = atom_error;\n    EVP_PKEY *key = NULL;\n    EVP_MD_CTX *mctx = NULL;\n    EVP_PKEY_CTX *pctx = NULL;\n    const EVP_MD *md = NULL;\n    size_t size;\n    int type;\n\n    type = EVP_PKEY_POLY1305;\n\n    if (!enif_inspect_binary(env, argv[0], &key_bin) ||\n        !(key_bin.size == 32) ) {\n        return enif_make_badarg(env);\n    }\n    \n    if (!enif_inspect_binary(env, argv[1], &text) ) {\n        return enif_make_badarg(env);\n    }\n\n    key = EVP_PKEY_new_raw_private_key(type, /*engine*/ NULL, key_bin.data,  key_bin.size);\n\n    if (!key ||\n        !(mctx = EVP_MD_CTX_new()) ||\n        !EVP_DigestSignInit(mctx, &pctx, md, /*engine*/ NULL, key) ||\n        !EVP_DigestSignUpdate(mctx, text.data, text.size)) {\n        goto err;\n    }\n    \n    if (!EVP_DigestSignFinal(mctx, NULL, &size) ||\n        !enif_alloc_binary(size, &ret_bin) ||\n        !EVP_DigestSignFinal(mctx, ret_bin.data, &size)) {\n        goto err;\n    }\n\n    if ((size != ret_bin.size) &&\n        !enif_realloc_binary(&ret_bin, size)) {\n        goto err;\n    }\n\n    ret = enif_make_binary(env, &ret_bin);\n\n err:\n    EVP_MD_CTX_free(mctx);\n    EVP_PKEY_free(key);\n    return ret;\n\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM block_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type, Key, Ivec, Text, IsEncrypt) or (Type, Key, Text, IsEncrypt) */\n    struct cipher_type_t *cipherp = NULL;\n    const EVP_CIPHER     *cipher;\n    ErlNifBinary         key, ivec, text;\n    EVP_CIPHER_CTX*      ctx;\n    ERL_NIF_TERM         ret;\n    unsigned char        *out;\n    int                  ivec_size, out_size = 0;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[1], &key)\n        || !(cipherp = get_cipher_type(argv[0], key.size))\n        || !enif_inspect_iolist_as_binary(env, argv[argc - 2], &text)) {\n        return enif_make_badarg(env);\n    }\n    cipher = cipherp->cipher.p;\n    if (!cipher) {\n        return enif_raise_exception(env, atom_notsup);\n    }\n\n    if (argv[0] == atom_aes_cfb8\n        && (key.size == 24 || key.size == 32)) {\n        /* Why do EVP_CIPHER_CTX_set_key_length() fail on these key sizes?\n         * Fall back on low level API\n         */\n        return aes_cfb_8_crypt(env, argc-1, argv+1);\n    }\n    else if (argv[0] == atom_aes_cfb128\n        && (key.size == 24 || key.size == 32)) {\n        /* Why do EVP_CIPHER_CTX_set_key_length() fail on these key sizes?\n         * Fall back on low level API\n         */\n        return aes_cfb_128_crypt_nif(env, argc-1, argv+1);\n   }\n\n    ivec_size  = EVP_CIPHER_iv_length(cipher);\n\n#ifdef HAVE_ECB_IVEC_BUG\n    if (argv[0] == atom_aes_ecb || argv[0] == atom_blowfish_ecb ||\n\targv[0] == atom_des_ecb)\n\tivec_size = 0; /* 0.9.8l returns faulty ivec_size */\n#endif\n\n    if (text.size % EVP_CIPHER_block_size(cipher) != 0 ||\n        (ivec_size == 0 ? argc != 4\n                      : (argc != 5 ||\n                         !enif_inspect_iolist_as_binary(env, argv[2], &ivec) ||\n                         ivec.size != ivec_size))) {\n        return enif_make_badarg(env);\n    }\n\n    out = enif_make_new_binary(env, text.size, &ret);\n\n    ctx = EVP_CIPHER_CTX_new();\n    if (!EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL,\n                           (argv[argc - 1] == atom_true)) ||\n        !EVP_CIPHER_CTX_set_key_length(ctx, key.size) ||\n        !(EVP_CIPHER_type(cipher) != NID_rc2_cbc ||\n          EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_SET_RC2_KEY_BITS, key.size * 8, NULL)) ||\n        !EVP_CipherInit_ex(ctx, NULL, NULL,\n                           key.data, ivec_size ? ivec.data : NULL, -1) ||\n        !EVP_CIPHER_CTX_set_padding(ctx, 0)) {\n\n        EVP_CIPHER_CTX_free(ctx);\n        return enif_raise_exception(env, atom_notsup);\n    }\n\n    if (text.size > 0 && /* OpenSSL 0.9.8h asserts text.size > 0 */\n        (!EVP_CipherUpdate(ctx, out, &out_size, text.data, text.size)\n         || (ASSERT(out_size == text.size), 0)\n         || !EVP_CipherFinal_ex(ctx, out + out_size, &out_size))) {\n\n        EVP_CIPHER_CTX_free(ctx);\n        return enif_raise_exception(env, atom_notsup);\n    }\n    ASSERT(out_size == 0);\n    EVP_CIPHER_CTX_free(ctx);\n    CONSUME_REDS(env, text);\n\n    return ret;\n}\n\nstatic ERL_NIF_TERM aes_cfb_8_crypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IVec, Data, IsEncrypt) */\n     ErlNifBinary key, ivec, text;\n     AES_KEY aes_key;\n     unsigned char ivec_clone[16]; /* writable copy */\n     int new_ivlen = 0;\n     ERL_NIF_TERM ret;\n\n     CHECK_NO_FIPS_MODE();\n\n     if (!enif_inspect_iolist_as_binary(env, argv[0], &key)\n         || !(key.size == 16 || key.size == 24 || key.size == 32)\n         || !enif_inspect_binary(env, argv[1], &ivec) || ivec.size != 16\n         || !enif_inspect_iolist_as_binary(env, argv[2], &text)) {\n         return enif_make_badarg(env);\n     }\n\n     memcpy(ivec_clone, ivec.data, 16);\n     AES_set_encrypt_key(key.data, key.size * 8, &aes_key);\n     AES_cfb8_encrypt((unsigned char *) text.data,\n                      enif_make_new_binary(env, text.size, &ret),\n                      text.size, &aes_key, ivec_clone, &new_ivlen,\n                      (argv[3] == atom_true));\n     CONSUME_REDS(env,text);\n     return ret;\n}\n\nstatic ERL_NIF_TERM aes_cfb_128_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IVec, Data, IsEncrypt) */\n    ErlNifBinary key, ivec, text;\n    AES_KEY aes_key;\n    unsigned char ivec_clone[16]; /* writable copy */\n    int new_ivlen = 0;\n    ERL_NIF_TERM ret;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[0], &key)\n        || !(key.size == 16 || key.size == 24 || key.size == 32)\n        || !enif_inspect_binary(env, argv[1], &ivec) || ivec.size != 16\n        || !enif_inspect_iolist_as_binary(env, argv[2], &text)) {\n        return enif_make_badarg(env);\n    }\n\n    memcpy(ivec_clone, ivec.data, 16);\n    AES_set_encrypt_key(key.data, key.size * 8, &aes_key);\n    AES_cfb128_encrypt((unsigned char *) text.data,\n                       enif_make_new_binary(env, text.size, &ret),\n                       text.size, &aes_key, ivec_clone, &new_ivlen,\n                       (argv[3] == atom_true));\n    CONSUME_REDS(env,text);\n    return ret;\n}\n\nstatic ERL_NIF_TERM aes_ige_crypt_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IVec, Data, IsEncrypt) */\n#ifdef HAVE_AES_IGE\n    ErlNifBinary key_bin, ivec_bin, data_bin;\n    AES_KEY aes_key;\n    unsigned char ivec[32];\n    int i;\n    unsigned char* ret_ptr;\n    ERL_NIF_TERM ret;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!enif_inspect_iolist_as_binary(env, argv[0], &key_bin)\n       || (key_bin.size != 16 && key_bin.size != 32)\n       || !enif_inspect_binary(env, argv[1], &ivec_bin)\n       || ivec_bin.size != 32\n       || !enif_inspect_iolist_as_binary(env, argv[2], &data_bin)\n       || data_bin.size % 16 != 0) {\n\n       return enif_make_badarg(env);\n    }\n\n    if (argv[3] == atom_true) {\n       i = AES_ENCRYPT;\n       AES_set_encrypt_key(key_bin.data, key_bin.size*8, &aes_key);\n    }\n    else {\n       i = AES_DECRYPT;\n       AES_set_decrypt_key(key_bin.data, key_bin.size*8, &aes_key);\n    }\n\n    ret_ptr = enif_make_new_binary(env, data_bin.size, &ret);\n    memcpy(ivec, ivec_bin.data, 32); /* writable copy */\n    AES_ige_encrypt(data_bin.data, ret_ptr, data_bin.size, &aes_key, ivec, i);\n    CONSUME_REDS(env,data_bin);\n    return ret;\n#else\n    return atom_notsup;\n#endif\n}\n\n\n/* Initializes state for ctr streaming (de)encryption\n*/\n#ifdef HAVE_EVP_AES_CTR\nstatic ERL_NIF_TERM aes_ctr_stream_init(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IVec) */\n    ErlNifBinary     key_bin, ivec_bin;\n    struct evp_cipher_ctx *ctx;\n    const EVP_CIPHER *cipher;\n    ERL_NIF_TERM     ret;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[0], &key_bin)\n        || !enif_inspect_binary(env, argv[1], &ivec_bin)\n        || ivec_bin.size != 16) {\n        return enif_make_badarg(env);\n    }\n\n    switch (key_bin.size)\n    {\n    case 16: cipher = EVP_aes_128_ctr(); break;\n    case 24: cipher = EVP_aes_192_ctr(); break;\n    case 32: cipher = EVP_aes_256_ctr(); break;\n    default: return enif_make_badarg(env);\n    }\n\n    ctx = enif_alloc_resource(evp_cipher_ctx_rtype, sizeof(struct evp_cipher_ctx));\n    ctx->ctx = EVP_CIPHER_CTX_new();\n    EVP_CipherInit_ex(ctx->ctx, cipher, NULL,\n                      key_bin.data, ivec_bin.data, 1);\n    EVP_CIPHER_CTX_set_padding(ctx->ctx, 0);\n    ret = enif_make_resource(env, ctx);\n    enif_release_resource(ctx);\n    return ret;\n}\nstatic ERL_NIF_TERM aes_ctr_stream_encrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Context, Data) */\n    struct evp_cipher_ctx *ctx, *new_ctx;\n    ErlNifBinary   data_bin;\n    ERL_NIF_TERM   ret, cipher_term;\n    unsigned char  *out;\n    int            outl = 0;\n\n    if (!enif_get_resource(env, argv[0], evp_cipher_ctx_rtype, (void**)&ctx)\n        || !enif_inspect_iolist_as_binary(env, argv[1], &data_bin)) {\n        return enif_make_badarg(env);\n    }\n    new_ctx = enif_alloc_resource(evp_cipher_ctx_rtype, sizeof(struct evp_cipher_ctx));\n    new_ctx->ctx = EVP_CIPHER_CTX_new();\n    EVP_CIPHER_CTX_copy(new_ctx->ctx, ctx->ctx);\n    out = enif_make_new_binary(env, data_bin.size, &cipher_term);\n    EVP_CipherUpdate(new_ctx->ctx, out, &outl, data_bin.data, data_bin.size);\n    ASSERT(outl == data_bin.size);\n\n    ret = enif_make_tuple2(env, enif_make_resource(env, new_ctx), cipher_term);\n    enif_release_resource(new_ctx);\n    CONSUME_REDS(env,data_bin);\n    return ret;\n}\n\n#else /* if not HAVE_EVP_AES_CTR */\n\nstatic ERL_NIF_TERM aes_ctr_stream_init(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IVec) */\n    ErlNifBinary key_bin, ivec_bin;\n    ERL_NIF_TERM ecount_bin;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[0], &key_bin)\n        || !enif_inspect_binary(env, argv[1], &ivec_bin)\n        || !(key_bin.size == 16 || key_bin.size == 24 || key_bin.size ==32)\n        || ivec_bin.size != 16) {\n        return enif_make_badarg(env);\n    }\n\n    memset(enif_make_new_binary(env, AES_BLOCK_SIZE, &ecount_bin),\n           0, AES_BLOCK_SIZE);\n    return enif_make_tuple4(env, argv[0], argv[1], ecount_bin, enif_make_int(env, 0));\n}\n\nstatic ERL_NIF_TERM aes_ctr_stream_encrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* ({Key, IVec, ECount, Num}, Data) */\n    ErlNifBinary key_bin, ivec_bin, text_bin, ecount_bin;\n    AES_KEY aes_key;\n    unsigned int num;\n    ERL_NIF_TERM ret, num2_term, cipher_term, ivec2_term, ecount2_term, new_state_term;\n    int state_arity;\n    const ERL_NIF_TERM *state_term;\n    unsigned char * ivec2_buf;\n    unsigned char * ecount2_buf;\n\n    if (!enif_get_tuple(env, argv[0], &state_arity, &state_term)\n        || state_arity != 4\n        || !enif_inspect_iolist_as_binary(env, state_term[0], &key_bin)\n        || AES_set_encrypt_key(key_bin.data, key_bin.size*8, &aes_key) != 0\n        || !enif_inspect_binary(env, state_term[1], &ivec_bin) || ivec_bin.size != 16\n        || !enif_inspect_binary(env, state_term[2], &ecount_bin) || ecount_bin.size != AES_BLOCK_SIZE\n        || !enif_get_uint(env, state_term[3], &num)\n        || !enif_inspect_iolist_as_binary(env, argv[1], &text_bin)) {\n        return enif_make_badarg(env);\n    }\n\n    ivec2_buf = enif_make_new_binary(env, ivec_bin.size, &ivec2_term);\n    ecount2_buf = enif_make_new_binary(env, ecount_bin.size, &ecount2_term);\n\n    memcpy(ivec2_buf, ivec_bin.data, 16);\n    memcpy(ecount2_buf, ecount_bin.data, ecount_bin.size);\n\n    AES_ctr128_encrypt((unsigned char *) text_bin.data,\n\t\t       enif_make_new_binary(env, text_bin.size, &cipher_term),\n\t\t       text_bin.size, &aes_key, ivec2_buf, ecount2_buf, &num);\n\n    num2_term = enif_make_uint(env, num);\n    new_state_term = enif_make_tuple4(env, state_term[0], ivec2_term, ecount2_term, num2_term);\n    ret = enif_make_tuple2(env, new_state_term, cipher_term);\n    CONSUME_REDS(env,text_bin);\n    return ret;\n}\n#endif /* !HAVE_EVP_AES_CTR */\n\nstatic ERL_NIF_TERM aead_encrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type,Key,Iv,AAD,In) */\n#if defined(HAVE_AEAD)\n    EVP_CIPHER_CTX *ctx;\n    const EVP_CIPHER *cipher = NULL;\n    ErlNifBinary key, iv, aad, in;\n    unsigned int tag_len;\n    unsigned char *outp, *tagp;\n    ERL_NIF_TERM type, out, out_tag;\n    int len, ctx_ctrl_set_ivlen, ctx_ctrl_get_tag;\n\n    type = argv[0];\n\n    if (!enif_is_atom(env, type)\n        || !enif_inspect_iolist_as_binary(env, argv[1], &key)\n\t|| !enif_inspect_binary(env, argv[2], &iv)\n\t|| !enif_inspect_iolist_as_binary(env, argv[3], &aad)\n\t|| !enif_inspect_iolist_as_binary(env, argv[4], &in)\n\t|| !enif_get_uint(env, argv[5], &tag_len)) {\n\treturn enif_make_badarg(env);\n    }\n\n    /* Use cipher_type some day.  Must check block_encrypt|decrypt first */\n#if defined(HAVE_GCM)\n    if (type == atom_aes_gcm) {\n        if ((iv.size > 0)\n            && (1 <= tag_len && tag_len <= 16)) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_GCM_SET_IVLEN;\n            ctx_ctrl_get_tag = EVP_CTRL_GCM_GET_TAG;\n            if (key.size == 16)      cipher = EVP_aes_128_gcm();\n            else if (key.size == 24) cipher = EVP_aes_192_gcm();\n            else if (key.size == 32) cipher = EVP_aes_256_gcm();\n            else enif_make_badarg(env);\n        } else\n            enif_make_badarg(env);\n    } else\n#endif\n#if defined(HAVE_CCM)\n    if (type == atom_aes_ccm) {\n        if ((7 <= iv.size && iv.size <= 13)\n            && (4 <= tag_len && tag_len <= 16)\n            && ((tag_len & 1) == 0)\n            ) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_CCM_SET_IVLEN;\n            ctx_ctrl_get_tag = EVP_CTRL_CCM_GET_TAG;\n            if (key.size == 16)      cipher = EVP_aes_128_ccm();\n            else if (key.size == 24) cipher = EVP_aes_192_ccm();\n            else if (key.size == 32) cipher = EVP_aes_256_ccm();\n            else enif_make_badarg(env);\n        } else\n            enif_make_badarg(env);\n    } else\n#endif\n#if defined(HAVE_CHACHA20_POLY1305)\n    if (type == atom_chacha20_poly1305) {\n        if ((key.size == 32)\n            && (1 <= iv.size && iv.size <= 16)\n            && (tag_len == 16)\n            ) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_AEAD_SET_IVLEN;\n            ctx_ctrl_get_tag = EVP_CTRL_AEAD_GET_TAG,\n                cipher = EVP_chacha20_poly1305();\n        } else enif_make_badarg(env);\n    } else\n#endif\n        return enif_raise_exception(env, atom_notsup);\n \n    ctx = EVP_CIPHER_CTX_new();\n    if (EVP_EncryptInit_ex(ctx, cipher, NULL, NULL, NULL) != 1) goto out_err;\n    if (EVP_CIPHER_CTX_ctrl(ctx, ctx_ctrl_set_ivlen, iv.size, NULL) != 1) goto out_err;\n\n#if defined(HAVE_CCM)\n    if (type == atom_aes_ccm) {\n        if (EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, tag_len, NULL) != 1) goto out_err;\n        if (EVP_EncryptInit_ex(ctx, NULL, NULL, key.data, iv.data) != 1) goto out_err;\n        if (EVP_EncryptUpdate(ctx, NULL, &len, NULL, in.size) != 1) goto out_err;\n    } else\n#endif\n        if (EVP_EncryptInit_ex(ctx, NULL, NULL, key.data, iv.data) != 1) goto out_err;\n\n    if (EVP_EncryptUpdate(ctx, NULL, &len, aad.data, aad.size) != 1) goto out_err;\n\n    outp = enif_make_new_binary(env, in.size, &out);\n\n    if (EVP_EncryptUpdate(ctx, outp, &len, in.data, in.size) != 1) goto out_err;\n    if (EVP_EncryptFinal_ex(ctx, outp/*+len*/, &len) != 1) goto out_err;\n\n    tagp = enif_make_new_binary(env, tag_len, &out_tag);\n\n    if (EVP_CIPHER_CTX_ctrl(ctx, ctx_ctrl_get_tag, tag_len, tagp) != 1) goto out_err;\n\n    EVP_CIPHER_CTX_free(ctx);\n    CONSUME_REDS(env, in);\n    return enif_make_tuple2(env, out, out_tag);\n\nout_err: \n    EVP_CIPHER_CTX_free(ctx);\n    return atom_error;\n\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n}\n\nstatic ERL_NIF_TERM aead_decrypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type,Key,Iv,AAD,In,Tag) */\n#if defined(HAVE_AEAD)\n    EVP_CIPHER_CTX *ctx;\n    const EVP_CIPHER *cipher = NULL;\n    ErlNifBinary key, iv, aad, in, tag;\n    unsigned char *outp;\n    ERL_NIF_TERM type, out;\n    int len, ctx_ctrl_set_ivlen, ctx_ctrl_set_tag;\n\n    type = argv[0];\n#if defined(HAVE_GCM_EVP_DECRYPT_BUG)\n    if (type == atom_aes_gcm)\n        return aes_gcm_decrypt_NO_EVP(env, argc, argv);\n#endif\n\n    if (!enif_is_atom(env, type)\n        || !enif_inspect_iolist_as_binary(env, argv[1], &key)\n\t|| !enif_inspect_binary(env, argv[2], &iv)\n\t|| !enif_inspect_iolist_as_binary(env, argv[3], &aad)\n\t|| !enif_inspect_iolist_as_binary(env, argv[4], &in)\n\t|| !enif_inspect_iolist_as_binary(env, argv[5], &tag)) {\n\treturn enif_make_badarg(env);\n    }\n\n    /* Use cipher_type some day.  Must check block_encrypt|decrypt first */\n#if defined(HAVE_GCM)\n    if (type == atom_aes_gcm) {\n        if (iv.size > 0) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_GCM_SET_IVLEN;\n            ctx_ctrl_set_tag = EVP_CTRL_GCM_SET_TAG;\n            if (key.size == 16)      cipher = EVP_aes_128_gcm();\n            else if (key.size == 24) cipher = EVP_aes_192_gcm();\n            else if (key.size == 32) cipher = EVP_aes_256_gcm();\n            else enif_make_badarg(env);\n        } else\n            enif_make_badarg(env);\n    } else\n#endif\n#if defined(HAVE_CCM)\n    if (type == atom_aes_ccm) {\n        if (iv.size > 0) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_CCM_SET_IVLEN;\n            if (key.size == 16)      cipher = EVP_aes_128_ccm();\n            else if (key.size == 24) cipher = EVP_aes_192_ccm();\n            else if (key.size == 32) cipher = EVP_aes_256_ccm();\n            else enif_make_badarg(env);\n        } else\n            enif_make_badarg(env);\n    } else\n#endif\n#if defined(HAVE_CHACHA20_POLY1305)\n    if (type == atom_chacha20_poly1305) {\n        if ((key.size == 32)\n            && (1 <= iv.size && iv.size <= 16)\n            && tag.size == 16\n            ) {\n            ctx_ctrl_set_ivlen = EVP_CTRL_AEAD_SET_IVLEN;\n            ctx_ctrl_set_tag = EVP_CTRL_AEAD_SET_TAG;\n            cipher = EVP_chacha20_poly1305();\n        } else enif_make_badarg(env);\n    } else\n#endif\n        return enif_raise_exception(env, atom_notsup);\n\n    outp = enif_make_new_binary(env, in.size, &out);\n\n    ctx = EVP_CIPHER_CTX_new();\n    if (EVP_DecryptInit_ex(ctx, cipher, NULL, NULL, NULL) != 1) goto out_err;\n    if (EVP_CIPHER_CTX_ctrl(ctx,  ctx_ctrl_set_ivlen, iv.size, NULL) != 1) goto out_err;\n\n#if defined(HAVE_CCM)\n    if (type == atom_aes_ccm) {\n        if (EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, tag.size, tag.data) != 1) goto out_err;\n    }\n#endif\n\n    if (EVP_DecryptInit_ex(ctx, NULL, NULL, key.data, iv.data) != 1) goto out_err;\n\n#if defined(HAVE_CCM)\n    if (type == atom_aes_ccm) {\n        if (1 != EVP_DecryptUpdate(ctx, NULL, &len, NULL, in.size)) goto out_err;\n    }\n#endif\n\n    if (EVP_DecryptUpdate(ctx, NULL, &len, aad.data, aad.size) != 1) goto out_err;\n    if (EVP_DecryptUpdate(ctx, outp, &len, in.data, in.size) != 1) goto out_err;\n\n#if defined(HAVE_GCM) || defined(HAVE_CHACHA20_POLY1305)\n    if (type == atom_aes_gcm) {\n         if (EVP_CIPHER_CTX_ctrl(ctx, ctx_ctrl_set_tag, tag.size, tag.data) != 1) goto out_err;\n         if (EVP_DecryptFinal_ex(ctx, outp+len, &len) != 1) goto out_err;\n    }\n#endif\n    EVP_CIPHER_CTX_free(ctx);\n\n    CONSUME_REDS(env, in);\n    return out;\n\nout_err:\n    EVP_CIPHER_CTX_free(ctx);\n    return atom_error;\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n}\n\n#ifdef HAVE_GCM_EVP_DECRYPT_BUG\nstatic ERL_NIF_TERM aes_gcm_decrypt_NO_EVP(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Type,Key,Iv,AAD,In,Tag) */\n    GCM128_CONTEXT *ctx;\n    ErlNifBinary key, iv, aad, in, tag;\n    AES_KEY aes_key;\n    unsigned char *outp;\n    ERL_NIF_TERM out;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[1], &key)\n        || AES_set_encrypt_key(key.data, key.size*8, &aes_key) != 0\n        || !enif_inspect_binary(env, argv[2], &iv) || iv.size == 0\n        || !enif_inspect_iolist_as_binary(env, argv[3], &aad)\n        || !enif_inspect_iolist_as_binary(env, argv[4], &in)\n        || !enif_inspect_iolist_as_binary(env, argv[5], &tag)) {\n        return enif_make_badarg(env);\n    }\n\n    if (!(ctx = CRYPTO_gcm128_new(&aes_key, (block128_f)AES_encrypt)))\n        return atom_error;\n\n    CRYPTO_gcm128_setiv(ctx, iv.data, iv.size);\n\n    if (CRYPTO_gcm128_aad(ctx, aad.data, aad.size))\n        goto out_err;\n\n    outp = enif_make_new_binary(env, in.size, &out);\n\n    /* decrypt */\n    if (CRYPTO_gcm128_decrypt(ctx, in.data, outp, in.size))\n            goto out_err;\n\n    /* calculate and check the tag */\n    if (CRYPTO_gcm128_finish(ctx, tag.data, tag.size))\n            goto out_err;\n\n    CRYPTO_gcm128_release(ctx);\n    CONSUME_REDS(env, in);\n\n    return out;\n\nout_err:\n    CRYPTO_gcm128_release(ctx);\n    return atom_error;\n}\n#endif /* HAVE_GCM_EVP_DECRYPT_BUG */\n\n\nstatic ERL_NIF_TERM chacha20_stream_init(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key, IV) */\n#if defined(HAVE_CHACHA20)\n    ErlNifBinary     key_bin, ivec_bin;\n    struct evp_cipher_ctx *ctx;\n    const EVP_CIPHER *cipher;\n    ERL_NIF_TERM     ret;\n\n    if (!enif_inspect_iolist_as_binary(env, argv[0], &key_bin)\n        || !enif_inspect_binary(env, argv[1], &ivec_bin)\n        || key_bin.size != 32\n        || ivec_bin.size != 16) {\n        return enif_make_badarg(env);\n    }\n\n    cipher = EVP_chacha20();\n\n    ctx = enif_alloc_resource(evp_cipher_ctx_rtype, sizeof(struct evp_cipher_ctx));\n    ctx->ctx = EVP_CIPHER_CTX_new();\n\n\n    EVP_CipherInit_ex(ctx->ctx, cipher, NULL,\n                      key_bin.data, ivec_bin.data, 1);\n    EVP_CIPHER_CTX_set_padding(ctx->ctx, 0);\n    ret = enif_make_resource(env, ctx);\n    enif_release_resource(ctx);\n    return ret;\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n};\n\nstatic ERL_NIF_TERM chacha20_stream_crypt(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (State, Data) */\n#if defined(HAVE_CHACHA20)\n    struct evp_cipher_ctx *ctx, *new_ctx;\n    ErlNifBinary   data_bin;\n    ERL_NIF_TERM   ret, cipher_term;\n    unsigned char  *out;\n    int            outl = 0;\n\n    if (!enif_get_resource(env, argv[0], evp_cipher_ctx_rtype, (void**)&ctx)\n        || !enif_inspect_iolist_as_binary(env, argv[1], &data_bin)) {\n        return enif_make_badarg(env);\n    }\n    new_ctx = enif_alloc_resource(evp_cipher_ctx_rtype, sizeof(struct evp_cipher_ctx));\n    new_ctx->ctx = EVP_CIPHER_CTX_new();\n    EVP_CIPHER_CTX_copy(new_ctx->ctx, ctx->ctx);\n    out = enif_make_new_binary(env, data_bin.size, &cipher_term);\n    EVP_CipherUpdate(new_ctx->ctx, out, &outl, data_bin.data, data_bin.size);\n    ASSERT(outl == data_bin.size);\n\n    ret = enif_make_tuple2(env, enif_make_resource(env, new_ctx), cipher_term);\n    enif_release_resource(new_ctx);\n    CONSUME_REDS(env,data_bin);\n    return ret;\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n};\n\n\nstatic ERL_NIF_TERM strong_rand_bytes_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Bytes) */\n    unsigned bytes;\n    unsigned char* data;\n    ERL_NIF_TERM ret;\n\n    if (!enif_get_uint(env, argv[0], &bytes)) {\n\treturn enif_make_badarg(env);\n    }\n    data = enif_make_new_binary(env, bytes, &ret);\n    if ( RAND_bytes(data, bytes) != 1) {\n        return atom_false;\n    }\n    ERL_VALGRIND_MAKE_MEM_DEFINED(data, bytes);\n    return ret;\n}\n\n\nstatic int get_bn_from_mpint(ErlNifEnv* env, ERL_NIF_TERM term, BIGNUM** bnp)\n{\n    ErlNifBinary bin;\n    int sz;\n    if (!enif_inspect_binary(env,term,&bin)) {\n\treturn 0;\n    }\n    ERL_VALGRIND_ASSERT_MEM_DEFINED(bin.data, bin.size);\n    sz = bin.size - 4;\n    if (sz < 0 || get_int32(bin.data) != sz) {\n\treturn 0;\n    }\n    *bnp = BN_bin2bn(bin.data+4, sz, NULL);\n    return 1;\n}\n\nstatic int get_bn_from_bin(ErlNifEnv* env, ERL_NIF_TERM term, BIGNUM** bnp)\n{\n    ErlNifBinary bin;\n    if (!enif_inspect_binary(env,term,&bin)) {\n\treturn 0;\n    }\n    ERL_VALGRIND_ASSERT_MEM_DEFINED(bin.data, bin.size);\n    *bnp = BN_bin2bn(bin.data, bin.size, NULL);\n    return 1;\n}\n\nstatic ERL_NIF_TERM bin_from_bn(ErlNifEnv* env, const BIGNUM *bn)\n{\n    int bn_len;\n    unsigned char *bin_ptr;\n    ERL_NIF_TERM term;\n\n    /* Copy the bignum into an erlang binary. */\n    bn_len = BN_num_bytes(bn);\n    bin_ptr = enif_make_new_binary(env, bn_len, &term);\n    BN_bn2bin(bn, bin_ptr);\n\n    return term;\n}\n\nstatic ERL_NIF_TERM strong_rand_range_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Range) */\n    BIGNUM *bn_range, *bn_rand;\n    ERL_NIF_TERM ret;\n\n    if(!get_bn_from_bin(env, argv[0], &bn_range)) {\n        return enif_make_badarg(env);\n    }\n\n    bn_rand = BN_new();\n    if (BN_rand_range(bn_rand, bn_range) != 1) {\n        ret = atom_false;\n    }\n    else {\n        ret = bin_from_bn(env, bn_rand);\n    }\n    BN_free(bn_rand);\n    BN_free(bn_range);\n    return ret;\n}\n\nstatic ERL_NIF_TERM rand_uniform_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Lo,Hi) */\n    BIGNUM *bn_from = NULL, *bn_to, *bn_rand;\n    unsigned char* data;\n    unsigned dlen;\n    ERL_NIF_TERM ret;\n\n    if (!get_bn_from_mpint(env, argv[0], &bn_from)\n\t|| !get_bn_from_mpint(env, argv[1], &bn_rand)) {\n\tif (bn_from) BN_free(bn_from);\n\treturn enif_make_badarg(env);\n    }\n\n    bn_to = BN_new();\n    BN_sub(bn_to, bn_rand, bn_from);\n    BN_pseudo_rand_range(bn_rand, bn_to);\n    BN_add(bn_rand, bn_rand, bn_from);\n    dlen = BN_num_bytes(bn_rand);\n    data = enif_make_new_binary(env, dlen+4, &ret);\n    put_int32(data, dlen);\n    BN_bn2bin(bn_rand, data+4);\n    ERL_VALGRIND_MAKE_MEM_DEFINED(data+4, dlen);\n    BN_free(bn_rand);\n    BN_free(bn_from);\n    BN_free(bn_to);\n    return ret;\n}\n\nstatic ERL_NIF_TERM mod_exp_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Base,Exponent,Modulo,bin_hdr) */\n    BIGNUM *bn_base=NULL, *bn_exponent=NULL, *bn_modulo=NULL, *bn_result;\n    BN_CTX *bn_ctx;\n    unsigned char* ptr;\n    unsigned dlen;\n    unsigned bin_hdr; /* return type: 0=plain binary, 4: mpint */\n    unsigned extra_byte;\n    ERL_NIF_TERM ret;\n\n    if (!get_bn_from_bin(env, argv[0], &bn_base)\n\t|| !get_bn_from_bin(env, argv[1], &bn_exponent)\n\t|| !get_bn_from_bin(env, argv[2], &bn_modulo)\n\t|| !enif_get_uint(env,argv[3],&bin_hdr) || (bin_hdr & ~4)) {\n\n\tif (bn_base) BN_free(bn_base);\n\tif (bn_exponent) BN_free(bn_exponent);\n\tif (bn_modulo) BN_free(bn_modulo);\n\treturn enif_make_badarg(env);\n    }\n    bn_result = BN_new();\n    bn_ctx = BN_CTX_new();\n    BN_mod_exp(bn_result, bn_base, bn_exponent, bn_modulo, bn_ctx);\n    dlen = BN_num_bytes(bn_result);\n    extra_byte = bin_hdr && BN_is_bit_set(bn_result, dlen*8-1);\n    ptr = enif_make_new_binary(env, bin_hdr+extra_byte+dlen, &ret);\n    if (bin_hdr) {\n\tput_int32(ptr, extra_byte+dlen);\n\tptr[4] = 0; /* extra zeroed byte to ensure a positive mpint */\n\tptr += bin_hdr + extra_byte;\n    }\n    BN_bn2bin(bn_result, ptr);\n    BN_free(bn_result);\n    BN_CTX_free(bn_ctx);\n    BN_free(bn_modulo);\n    BN_free(bn_exponent);\n    BN_free(bn_base);\n    return ret;\n}\n\nstatic void init_digest_types(ErlNifEnv* env)\n{\n    struct digest_type_t* p = digest_types;\n\n    for (p = digest_types; p->type.str; p++) {\n\tp->type.atom = enif_make_atom(env, p->type.str);\n\tif (p->md.funcp)\n\t    p->md.p = p->md.funcp();\n    }\n    p->type.atom = atom_false;  /* end marker */\n}\n\nstatic void init_cipher_types(ErlNifEnv* env)\n{\n    struct cipher_type_t* p = cipher_types;\n\n    for (p = cipher_types; p->type.str; p++) {\n\tp->type.atom = enif_make_atom(env, p->type.str);\n\tif (p->cipher.funcp)\n\t    p->cipher.p = p->cipher.funcp();\n    }\n    p->type.atom = atom_false; /* end marker */\n}\n\nstatic struct digest_type_t* get_digest_type(ERL_NIF_TERM type)\n{\n    struct digest_type_t* p = NULL;\n    for (p = digest_types; p->type.atom != atom_false; p++) {\n\tif (type == p->type.atom) {\n\t    return p;\n\t}\n    }\n    return NULL;\n}\n\nstatic struct cipher_type_t* get_cipher_type(ERL_NIF_TERM type, size_t key_len)\n{\n    struct cipher_type_t* p = NULL;\n    for (p = cipher_types; p->type.atom != atom_false; p++) {\n\tif (type == p->type.atom && (!p->key_len || key_len == p->key_len)) {\n\t    return p;\n\t}\n    }\n    return NULL;\n}\n\n\nstatic ERL_NIF_TERM do_exor(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Data1, Data2) */\n    ErlNifBinary d1, d2;\n    unsigned char* ret_ptr;\n    int i;\n    ERL_NIF_TERM ret;\n\n    if (!enif_inspect_iolist_as_binary(env,argv[0], &d1)\n\t|| !enif_inspect_iolist_as_binary(env,argv[1], &d2)\n\t|| d1.size != d2.size) {\n\treturn enif_make_badarg(env);\n    }\n    ret_ptr = enif_make_new_binary(env, d1.size, &ret);\n\n    for (i=0; i<d1.size; i++) {\n\tret_ptr[i] = d1.data[i] ^ d2.data[i];\n    }\n    CONSUME_REDS(env,d1);\n    return ret;\n}\n\nstatic ERL_NIF_TERM rc4_set_key(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Key) */\n#ifndef OPENSSL_NO_RC4\n    ErlNifBinary key;\n    ERL_NIF_TERM ret;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!enif_inspect_iolist_as_binary(env,argv[0], &key)) {\n\treturn enif_make_badarg(env);\n    }\n    RC4_set_key((RC4_KEY*)enif_make_new_binary(env, sizeof(RC4_KEY), &ret),\n\t\tkey.size, key.data);\n    return ret;\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n}\n\nstatic ERL_NIF_TERM rc4_encrypt_with_state(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (State, Data) */\n#ifndef OPENSSL_NO_RC4\n    ErlNifBinary state, data;\n    RC4_KEY* rc4_key;\n    ERL_NIF_TERM new_state, new_data;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!enif_inspect_iolist_as_binary(env,argv[0], &state)\n\t|| state.size != sizeof(RC4_KEY)\n\t|| !enif_inspect_iolist_as_binary(env,argv[1], &data)) {\n\treturn enif_make_badarg(env);\n    }\n    rc4_key = (RC4_KEY*)enif_make_new_binary(env, sizeof(RC4_KEY), &new_state);\n    memcpy(rc4_key, state.data, sizeof(RC4_KEY));\n    RC4(rc4_key, data.size, data.data,\n\tenif_make_new_binary(env, data.size, &new_data));\n    CONSUME_REDS(env,data);\n    return enif_make_tuple2(env,new_state,new_data);\n#else\n    return enif_raise_exception(env, atom_notsup);\n#endif\n}\n\nstatic int get_rsa_private_key(ErlNifEnv* env, ERL_NIF_TERM key, RSA *rsa)\n{\n    /* key=[E,N,D]|[E,N,D,P1,P2,E1,E2,C] */\n    ERL_NIF_TERM head, tail;\n    BIGNUM *e, *n, *d;\n    BIGNUM *p, *q;\n    BIGNUM *dmp1, *dmq1, *iqmp;\n\n    if (!enif_get_list_cell(env, key, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &e)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &n)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &d)) {\n\treturn 0;\n    }\n    (void) RSA_set0_key(rsa, n, e, d);\n    if (enif_is_empty_list(env, tail)) {\n\treturn 1;\n    }\n    if (!enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &p)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &q)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dmp1)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dmq1)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &iqmp)\n\t|| !enif_is_empty_list(env, tail)) {\n\treturn 0;\n    }\n    (void) RSA_set0_factors(rsa, p, q);\n    (void) RSA_set0_crt_params(rsa, dmp1, dmq1, iqmp);\n    return 1;\n}\n\n\nstatic int get_rsa_public_key(ErlNifEnv* env, ERL_NIF_TERM key, RSA *rsa)\n{\n    /* key=[E,N] */\n    ERL_NIF_TERM head, tail;\n    BIGNUM *e, *n;\n\n    if (!enif_get_list_cell(env, key, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &e)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &n)\n        || !enif_is_empty_list(env, tail)) {\n\treturn 0;\n    }\n\n    (void) RSA_set0_key(rsa, n, e, NULL);\n    return 1;\n}\n\n#ifdef HAVE_EDDSA\n static int get_eddsa_key(ErlNifEnv* env, int public, ERL_NIF_TERM key, EVP_PKEY **pkey)\n{\n    /* key=[K] */\n    ERL_NIF_TERM head, tail, tail2, algo;\n    ErlNifBinary bin;\n    int type;\n\n    if (!enif_get_list_cell(env, key, &head, &tail)\n\t|| !enif_inspect_binary(env, head, &bin)\n        || !enif_get_list_cell(env, tail, &algo, &tail2)\n        || !enif_is_empty_list(env, tail2)) {\n\treturn 0;\n    }\n    if (algo == atom_ed25519) type = EVP_PKEY_ED25519;\n    else if (algo == atom_ed448) type = EVP_PKEY_ED448;\n    else\n        return 0;\n\n    if (public)\n        *pkey = EVP_PKEY_new_raw_public_key(type, NULL, bin.data, bin.size);\n    else \n        *pkey = EVP_PKEY_new_raw_private_key(type, NULL, bin.data, bin.size);\n\n    if (!pkey)\n        return 0;\n    return 1;\n}\n#endif\n\nstatic int get_dss_private_key(ErlNifEnv* env, ERL_NIF_TERM key, DSA *dsa)\n{\n    /* key=[P,Q,G,KEY] */\n    ERL_NIF_TERM head, tail;\n    BIGNUM *dsa_p = NULL, *dsa_q = NULL, *dsa_g = NULL;\n    BIGNUM *dummy_pub_key, *priv_key = NULL;\n\n    if (!enif_get_list_cell(env, key, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_p)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_q)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_g)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &priv_key)\n\t|| !enif_is_empty_list(env,tail)) {\n\tif (dsa_p) BN_free(dsa_p);\n\tif (dsa_q) BN_free(dsa_q);\n\tif (dsa_g) BN_free(dsa_g);\n\tif (priv_key) BN_free(priv_key);\n\treturn 0;\n    }\n\n    /* Note: DSA_set0_key() does not allow setting only the\n     * private key, although DSA_sign() does not use the\n     * public key. Work around this limitation by setting\n     * the public key to a copy of the private key.\n     */\n    dummy_pub_key = BN_dup(priv_key);\n\n    DSA_set0_pqg(dsa, dsa_p, dsa_q, dsa_g);\n    DSA_set0_key(dsa, dummy_pub_key, priv_key);\n    return 1;\n}\n\n\nstatic int get_dss_public_key(ErlNifEnv* env, ERL_NIF_TERM key, DSA *dsa)\n{\n    /* key=[P, Q, G, Y] */\n    ERL_NIF_TERM head, tail;\n    BIGNUM *dsa_p = NULL, *dsa_q = NULL, *dsa_g = NULL, *dsa_y = NULL;\n\n    if (!enif_get_list_cell(env, key, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_p)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_q)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_g)\n\t|| !enif_get_list_cell(env, tail, &head, &tail)\n\t|| !get_bn_from_bin(env, head, &dsa_y)\n\t|| !enif_is_empty_list(env,tail)) {\n\tif (dsa_p) BN_free(dsa_p);\n\tif (dsa_q) BN_free(dsa_q);\n\tif (dsa_g) BN_free(dsa_g);\n\tif (dsa_y) BN_free(dsa_y);\n\treturn 0;\n    }\n\n    DSA_set0_pqg(dsa, dsa_p, dsa_q, dsa_g);\n    DSA_set0_key(dsa, dsa_y, NULL);\n    return 1;\n}\n\n/* Creates a term which can be parsed by get_rsa_private_key(). This is a list of plain integer binaries (not mpints). */\nstatic ERL_NIF_TERM put_rsa_private_key(ErlNifEnv* env, const RSA *rsa)\n{\n    ERL_NIF_TERM result[8];\n    const BIGNUM *n, *e, *d, *p, *q, *dmp1, *dmq1, *iqmp;\n\n    /* Return at least [E,N,D] */\n    n = NULL; e = NULL; d = NULL;\n    RSA_get0_key(rsa, &n, &e, &d);\n\n    result[0] = bin_from_bn(env, e);  // Exponent E\n    result[1] = bin_from_bn(env, n);  // Modulus N = p*q\n    result[2] = bin_from_bn(env, d);  // Exponent D\n\n    /* Check whether the optional additional parameters are available */\n    p = NULL; q = NULL;\n    RSA_get0_factors(rsa, &p, &q);\n    dmp1 = NULL; dmq1 = NULL; iqmp = NULL;\n    RSA_get0_crt_params(rsa, &dmp1, &dmq1, &iqmp);\n\n    if (p && q && dmp1 && dmq1 && iqmp) {\n\tresult[3] = bin_from_bn(env, p);     // Factor p\n\tresult[4] = bin_from_bn(env, q);     // Factor q\n\tresult[5] = bin_from_bn(env, dmp1);  // D mod (p-1)\n\tresult[6] = bin_from_bn(env, dmq1);  // D mod (q-1)\n\tresult[7] = bin_from_bn(env, iqmp);  // (1/q) mod p\n\n\treturn enif_make_list_from_array(env, result, 8);\n    } else {\n\treturn enif_make_list_from_array(env, result, 3);\n    }\n}\n\nstatic int check_erlang_interrupt(int maj, int min, BN_GENCB *ctxt)\n{\n    ErlNifEnv *env = BN_GENCB_get_arg(ctxt);\n\n    if (!enif_is_current_process_alive(env)) {\n\treturn 0;\n    } else {\n\treturn 1;\n    }\n}\n\nstatic ERL_NIF_TERM rsa_generate_key(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (ModulusSize, PublicExponent) */\n    int modulus_bits;\n    BIGNUM *pub_exp, *three;\n    RSA *rsa;\n    int success;\n    ERL_NIF_TERM result;\n    BN_GENCB *intr_cb;\n#ifndef HAVE_OPAQUE_BN_GENCB\n    BN_GENCB intr_cb_buf;\n#endif\n\n    if (!enif_get_int(env, argv[0], &modulus_bits) || modulus_bits < 256) {\n\treturn enif_make_badarg(env);\n    }\n\n    if (!get_bn_from_bin(env, argv[1], &pub_exp)) {\n\treturn enif_make_badarg(env);\n    }\n\n    /* Make sure the public exponent is large enough (at least 3).\n     * Without this, RSA_generate_key_ex() can run forever. */\n    three = BN_new();\n    BN_set_word(three, 3);\n    success = BN_cmp(pub_exp, three);\n    BN_free(three);\n    if (success < 0) {\n\tBN_free(pub_exp);\n\treturn enif_make_badarg(env);\n    }\n\n    /* For large keys, prime generation can take many seconds. Set up\n     * the callback which we use to test whether the process has been\n     * interrupted. */\n#ifdef HAVE_OPAQUE_BN_GENCB\n    intr_cb = BN_GENCB_new();\n#else\n    intr_cb = &intr_cb_buf;\n#endif\n    BN_GENCB_set(intr_cb, check_erlang_interrupt, env);\n\n    rsa = RSA_new();\n    success = RSA_generate_key_ex(rsa, modulus_bits, pub_exp, intr_cb);\n    BN_free(pub_exp);\n\n#ifdef HAVE_OPAQUE_BN_GENCB\n    BN_GENCB_free(intr_cb);\n#endif\n\n    if (!success) {\n        RSA_free(rsa);\n\treturn atom_error;\n    }\n\n    result = put_rsa_private_key(env, rsa);\n    RSA_free(rsa);\n\n    return result;\n}\n\nstatic ERL_NIF_TERM rsa_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    /* RSA key generation can take a long time (>1 sec for a large\n     * modulus), so schedule it as a CPU-bound operation. */\n    return enif_schedule_nif(env, \"rsa_generate_key\",\n\t\t\t     ERL_NIF_DIRTY_JOB_CPU_BOUND,\n\t\t\t     rsa_generate_key, argc, argv);\n}\n\nstatic ERL_NIF_TERM dh_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (PrivKey|undefined, DHParams=[P,G], Mpint, Len|0) */\n    DH *dh_params = NULL;\n    int mpint; /* 0 or 4 */\n\n    {\n        ERL_NIF_TERM head, tail;\n        BIGNUM\n            *dh_p = NULL,\n            *dh_g = NULL,\n            *priv_key_in = NULL;\n        unsigned long\n            len = 0;\n\n        if (!(get_bn_from_bin(env, argv[0], &priv_key_in)\n              || argv[0] == atom_undefined)\n            || !enif_get_list_cell(env, argv[1], &head, &tail)\n            || !get_bn_from_bin(env, head, &dh_p)\n            || !enif_get_list_cell(env, tail, &head, &tail)\n            || !get_bn_from_bin(env, head, &dh_g)\n            || !enif_is_empty_list(env, tail)\n            || !enif_get_int(env, argv[2], &mpint) || (mpint & ~4)\n            || !enif_get_ulong(env, argv[3], &len)\n\n            /* Load dh_params with values to use by the generator.\n               Mem mgmnt transfered from dh_p etc to dh_params */\n            || !(dh_params = DH_new())\n            || (priv_key_in && !DH_set0_key(dh_params, NULL, priv_key_in))\n            || !DH_set0_pqg(dh_params, dh_p, NULL, dh_g)\n            ) {\n            if (priv_key_in) BN_free(priv_key_in);\n            if (dh_p) BN_free(dh_p);\n            if (dh_g) BN_free(dh_g);\n            if (dh_params) DH_free(dh_params);\n            return enif_make_badarg(env);\n        }\n\n        if (len) {\n            if (len < BN_num_bits(dh_p))\n                DH_set_length(dh_params, len);\n            else {\n                if (priv_key_in) BN_free(priv_key_in);\n                if (dh_p) BN_free(dh_p);\n                if (dh_g) BN_free(dh_g);\n                if (dh_params) DH_free(dh_params);\n                return enif_make_badarg(env);\n            }\n        }\n    }\n\n#ifdef HAS_EVP_PKEY_CTX\n    {\n        EVP_PKEY_CTX *ctx;\n        EVP_PKEY *dhkey, *params;\n        int success;\n\n        params = EVP_PKEY_new();\n        success = EVP_PKEY_set1_DH(params, dh_params);   /* set the key referenced by params to dh_params... */\n        DH_free(dh_params);                              /* ...dh_params (and params) must be freed */\n        if (!success) return atom_error;\n\n        ctx = EVP_PKEY_CTX_new(params, NULL);\n        EVP_PKEY_free(params);\n        if (!ctx) {\n            return atom_error;\n        }\n\n        if (!EVP_PKEY_keygen_init(ctx)) {\n            /* EVP_PKEY_CTX_free(ctx); */\n            return atom_error;\n        }\n\n        dhkey = EVP_PKEY_new();\n        if (!EVP_PKEY_keygen(ctx, &dhkey)) {         /* \"performs a key generation operation, the ... */\n                                                     /*... generated key is written to ppkey.\" (=last arg) */\n             /* EVP_PKEY_CTX_free(ctx); */\n             /* EVP_PKEY_free(dhkey); */\n             return atom_error;\n        }\n\n        dh_params = EVP_PKEY_get1_DH(dhkey); /* return the referenced key. dh_params and dhkey must be freed */\n        EVP_PKEY_free(dhkey);\n        if (!dh_params) {\n            /* EVP_PKEY_CTX_free(ctx); */\n            return atom_error;\n        }\n        EVP_PKEY_CTX_free(ctx);\n    }\n#else\n    if (!DH_generate_key(dh_params)) return atom_error;\n#endif\n    {\n        unsigned char *pub_ptr, *prv_ptr;\n        int pub_len, prv_len;\n        ERL_NIF_TERM ret_pub, ret_prv;\n        const BIGNUM *pub_key_gen, *priv_key_gen;\n\n        DH_get0_key(dh_params,\n                    &pub_key_gen, &priv_key_gen); /* Get pub_key_gen and priv_key_gen.\n                                                     \"The values point to the internal representation of\n                                                     the public key and private key values. This memory\n                                                     should not be freed directly.\" says man */\n        pub_len = BN_num_bytes(pub_key_gen);\n        prv_len = BN_num_bytes(priv_key_gen);\n        pub_ptr = enif_make_new_binary(env, pub_len+mpint, &ret_pub);\n        prv_ptr = enif_make_new_binary(env, prv_len+mpint, &ret_prv);\n        if (mpint) {\n            put_int32(pub_ptr, pub_len); pub_ptr += 4;\n            put_int32(prv_ptr, prv_len); prv_ptr += 4;\n        }\n        BN_bn2bin(pub_key_gen, pub_ptr);\n        BN_bn2bin(priv_key_gen, prv_ptr);\n        ERL_VALGRIND_MAKE_MEM_DEFINED(pub_ptr, pub_len);\n        ERL_VALGRIND_MAKE_MEM_DEFINED(prv_ptr, prv_len);\n\n        DH_free(dh_params);\n\n        return enif_make_tuple2(env, ret_pub, ret_prv);\n    }\n}\n\nstatic ERL_NIF_TERM dh_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (OthersPublicKey, MyPrivateKey, DHParams=[P,G]) */\n    BIGNUM *other_pub_key = NULL,\n        *dh_p = NULL,\n        *dh_g = NULL;\n    DH *dh_priv = DH_new();\n\n    /* Check the arguments and get\n          my private key (dh_priv),\n          the peer's public key (other_pub_key),\n          the parameters p & q\n    */\n\n    {\n        BIGNUM *dummy_pub_key = NULL,\n               *priv_key = NULL;\n        ERL_NIF_TERM head, tail;\n\n        if (!get_bn_from_bin(env, argv[0], &other_pub_key)\n            || !get_bn_from_bin(env, argv[1], &priv_key)\n            || !enif_get_list_cell(env, argv[2], &head, &tail)\n            || !get_bn_from_bin(env, head, &dh_p)\n            || !enif_get_list_cell(env, tail, &head, &tail)\n            || !get_bn_from_bin(env, head, &dh_g)\n            || !enif_is_empty_list(env, tail)\n\n            /* Note: DH_set0_key() does not allow setting only the\n             * private key, although DH_compute_key() does not use the\n             * public key. Work around this limitation by setting\n             * the public key to a copy of the private key.\n             */\n            || !(dummy_pub_key = BN_dup(priv_key))\n            || !DH_set0_key(dh_priv, dummy_pub_key, priv_key)\n            || !DH_set0_pqg(dh_priv, dh_p, NULL, dh_g)\n            ) {\n            if (dh_p) BN_free(dh_p);\n            if (dh_g) BN_free(dh_g);\n            if (other_pub_key) BN_free(other_pub_key);\n            if (dummy_pub_key) BN_free(dummy_pub_key);\n            if (priv_key) BN_free(priv_key);\n            return enif_make_badarg(env);\n        }\n    }\n    {\n        ErlNifBinary ret_bin;\n        int size;\n\n        enif_alloc_binary(DH_size(dh_priv), &ret_bin);\n        size = DH_compute_key(ret_bin.data, other_pub_key, dh_priv);\n        BN_free(other_pub_key);\n        DH_free(dh_priv);\n        if (size<=0) {\n            enif_release_binary(&ret_bin);\n            return atom_error;\n        }\n\n        if (size != ret_bin.size) enif_realloc_binary(&ret_bin, size);\n        return enif_make_binary(env, &ret_bin);\n    }\n}\n\n\nstatic ERL_NIF_TERM srp_value_B_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Multiplier, Verifier, Generator, Exponent, Prime) */\n    BIGNUM *bn_verifier = NULL;\n    BIGNUM *bn_exponent = NULL, *bn_generator = NULL, *bn_prime = NULL, *bn_multiplier = NULL, *bn_result;\n    BN_CTX *bn_ctx;\n    unsigned char* ptr;\n    unsigned dlen;\n    ERL_NIF_TERM ret;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!get_bn_from_bin(env, argv[0], &bn_multiplier)\n\t|| !get_bn_from_bin(env, argv[1], &bn_verifier)\n\t|| !get_bn_from_bin(env, argv[2], &bn_generator)\n\t|| !get_bn_from_bin(env, argv[3], &bn_exponent)\n\t|| !get_bn_from_bin(env, argv[4], &bn_prime)) {\n\tif (bn_multiplier) BN_free(bn_multiplier);\n\tif (bn_verifier) BN_free(bn_verifier);\n\tif (bn_generator) BN_free(bn_generator);\n\tif (bn_exponent) BN_free(bn_exponent);\n\tif (bn_prime) BN_free(bn_prime);\n\treturn enif_make_badarg(env);\n    }\n\n    bn_result = BN_new();\n    bn_ctx = BN_CTX_new();\n\n    /* B = k*v + g^b % N */\n\n    /* k * v */\n    BN_mod_mul(bn_multiplier, bn_multiplier, bn_verifier, bn_prime, bn_ctx);\n\n    /* g^b % N */\n    BN_mod_exp(bn_result, bn_generator, bn_exponent, bn_prime, bn_ctx);\n\n    /* k*v + g^b % N */\n    BN_mod_add(bn_result, bn_result, bn_multiplier, bn_prime, bn_ctx);\n\n    /* check that B % N != 0, reuse bn_multiplier */\n    BN_nnmod(bn_multiplier, bn_result, bn_prime, bn_ctx);\n    if (BN_is_zero(bn_multiplier)) {\n\tret = atom_error;\n    } else {\n\tdlen = BN_num_bytes(bn_result);\n\tptr = enif_make_new_binary(env, dlen, &ret);\n\tBN_bn2bin(bn_result, ptr);\n    }\n    BN_free(bn_result);\n    BN_CTX_free(bn_ctx);\n    BN_free(bn_prime);\n    BN_free(bn_generator);\n    BN_free(bn_multiplier);\n    BN_free(bn_exponent);\n    BN_free(bn_verifier);\n    return ret;\n}\n\nstatic ERL_NIF_TERM srp_user_secret_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (a, u, B, Multiplier, Prime, Exponent, Generator) */\n/*\n        <premaster secret> = (B - (k * g^x)) ^ (a + (u * x)) % N\n*/\n    BIGNUM *bn_exponent = NULL, *bn_a = NULL;\n    BIGNUM *bn_u = NULL, *bn_multiplier = NULL, *bn_exp2,\n        *bn_base, *bn_prime = NULL, *bn_generator = NULL,\n        *bn_B = NULL, *bn_result;\n    BN_CTX *bn_ctx;\n    unsigned char* ptr;\n    unsigned dlen;\n    ERL_NIF_TERM ret;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!get_bn_from_bin(env, argv[0], &bn_a)\n\t|| !get_bn_from_bin(env, argv[1], &bn_u)\n\t|| !get_bn_from_bin(env, argv[2], &bn_B)\n\t|| !get_bn_from_bin(env, argv[3], &bn_multiplier)\n\t|| !get_bn_from_bin(env, argv[4], &bn_generator)\n\t|| !get_bn_from_bin(env, argv[5], &bn_exponent)\n\t|| !get_bn_from_bin(env, argv[6], &bn_prime))\n    {\n\tif (bn_exponent) BN_free(bn_exponent);\n\tif (bn_a) BN_free(bn_a);\n\tif (bn_u) BN_free(bn_u);\n\tif (bn_B) BN_free(bn_B);\n\tif (bn_multiplier) BN_free(bn_multiplier);\n\tif (bn_generator) BN_free(bn_generator);\n\tif (bn_prime) BN_free(bn_prime);\n\treturn enif_make_badarg(env);\n    }\n\n    bn_ctx = BN_CTX_new();\n    bn_result = BN_new();\n\n    /* check that B % N != 0 */\n    BN_nnmod(bn_result, bn_B, bn_prime, bn_ctx);\n    if (BN_is_zero(bn_result)) {\n\tBN_free(bn_exponent);\n\tBN_free(bn_a);\n\tBN_free(bn_generator);\n\tBN_free(bn_prime);\n\tBN_free(bn_u);\n\tBN_free(bn_B);\n\tBN_CTX_free(bn_ctx);\n\n\treturn atom_error;\n    }\n\n    /* (B - (k * g^x)) */\n    bn_base = BN_new();\n    BN_mod_exp(bn_result, bn_generator, bn_exponent, bn_prime, bn_ctx);\n    BN_mod_mul(bn_result, bn_multiplier, bn_result, bn_prime, bn_ctx);\n    BN_mod_sub(bn_base, bn_B, bn_result, bn_prime, bn_ctx);\n\n    /* a + (u * x) */\n    bn_exp2 = BN_new();\n    BN_mul(bn_result, bn_u, bn_exponent, bn_ctx);\n    BN_add(bn_exp2, bn_a, bn_result);\n\n    /* (B - (k * g^x)) ^ (a + (u * x)) % N */\n    BN_mod_exp(bn_result, bn_base, bn_exp2, bn_prime, bn_ctx);\n\n    dlen = BN_num_bytes(bn_result);\n    ptr = enif_make_new_binary(env, dlen, &ret);\n    BN_bn2bin(bn_result, ptr);\n    BN_free(bn_result);\n    BN_CTX_free(bn_ctx);\n\n    BN_free(bn_multiplier);\n    BN_free(bn_exp2);\n    BN_free(bn_u);\n    BN_free(bn_exponent);\n    BN_free(bn_a);\n    BN_free(bn_B);\n    BN_free(bn_base);\n    BN_free(bn_generator);\n    BN_free(bn_prime);\n    return ret;\n}\n\nstatic ERL_NIF_TERM srp_host_secret_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Verifier, b, u, A, Prime) */\n/*\n        <premaster secret> = (A * v^u) ^ b % N\n*/\n    BIGNUM *bn_b = NULL, *bn_verifier = NULL;\n    BIGNUM *bn_prime = NULL, *bn_A = NULL, *bn_u = NULL, *bn_base, *bn_result;\n    BN_CTX *bn_ctx;\n    unsigned char* ptr;\n    unsigned dlen;\n    ERL_NIF_TERM ret;\n\n    CHECK_NO_FIPS_MODE();\n\n    if (!get_bn_from_bin(env, argv[0], &bn_verifier)\n\t|| !get_bn_from_bin(env, argv[1], &bn_b)\n\t|| !get_bn_from_bin(env, argv[2], &bn_u)\n\t|| !get_bn_from_bin(env, argv[3], &bn_A)\n\t|| !get_bn_from_bin(env, argv[4], &bn_prime))\n    {\n\tif (bn_verifier) BN_free(bn_verifier);\n\tif (bn_b) BN_free(bn_b);\n\tif (bn_u) BN_free(bn_u);\n\tif (bn_A) BN_free(bn_A);\n\tif (bn_prime) BN_free(bn_prime);\n\treturn enif_make_badarg(env);\n    }\n\n    bn_ctx = BN_CTX_new();\n    bn_result = BN_new();\n\n    /* check that A % N != 0 */\n    BN_nnmod(bn_result, bn_A, bn_prime, bn_ctx);\n    if (BN_is_zero(bn_result)) {\n\tBN_free(bn_b);\n\tBN_free(bn_verifier);\n\tBN_free(bn_prime);\n\tBN_free(bn_A);\n\tBN_CTX_free(bn_ctx);\n\n\treturn atom_error;\n    }\n\n    /* (A * v^u) */\n    bn_base = BN_new();\n    BN_mod_exp(bn_base, bn_verifier, bn_u, bn_prime, bn_ctx);\n    BN_mod_mul(bn_base, bn_A, bn_base, bn_prime, bn_ctx);\n\n    /* (A * v^u) ^ b % N */\n    BN_mod_exp(bn_result, bn_base, bn_b, bn_prime, bn_ctx);\n\n    dlen = BN_num_bytes(bn_result);\n    ptr = enif_make_new_binary(env, dlen, &ret);\n    BN_bn2bin(bn_result, ptr);\n    BN_free(bn_result);\n    BN_CTX_free(bn_ctx);\n\n    BN_free(bn_u);\n    BN_free(bn_base);\n    BN_free(bn_verifier);\n    BN_free(bn_prime);\n    BN_free(bn_A);\n    BN_free(bn_b);\n    return ret;\n}\n\n#if defined(HAVE_EC)\nstatic EC_KEY* ec_key_new(ErlNifEnv* env, ERL_NIF_TERM curve_arg)\n{\n    EC_KEY *key = NULL;\n    int c_arity = -1;\n    const ERL_NIF_TERM* curve;\n    ErlNifBinary seed;\n    BIGNUM *p = NULL;\n    BIGNUM *a = NULL;\n    BIGNUM *b = NULL;\n    BIGNUM *bn_order = NULL;\n    BIGNUM *cofactor = NULL;\n    EC_GROUP *group = NULL;\n    EC_POINT *point = NULL;\n\n    /* {Field, Prime, Point, Order, CoFactor} = Curve */\n    if (enif_get_tuple(env,curve_arg,&c_arity,&curve)\n\t&& c_arity == 5\n\t&& get_bn_from_bin(env, curve[3], &bn_order)\n\t&& (curve[4] != atom_none && get_bn_from_bin(env, curve[4], &cofactor))) {\n\n\tint f_arity = -1;\n\tconst ERL_NIF_TERM* field;\n\tint p_arity = -1;\n\tconst ERL_NIF_TERM* prime;\n\n\tlong field_bits;\n\n\t/* {A, B, Seed} = Prime */\n\tif (!enif_get_tuple(env,curve[1],&p_arity,&prime)\n\t    || !get_bn_from_bin(env, prime[0], &a)\n\t    || !get_bn_from_bin(env, prime[1], &b))\n\t    goto out_err;\n\n\tif (!enif_get_tuple(env,curve[0],&f_arity,&field))\n\t    goto out_err;\n\n\tif (f_arity == 2 && field[0] == atom_prime_field) {\n\t    /* {prime_field, Prime} */\n\n\t    if (!get_bn_from_bin(env, field[1], &p))\n\t\tgoto out_err;\n\n\t    if (BN_is_negative(p) || BN_is_zero(p))\n\t\tgoto out_err;\n\n\t    field_bits = BN_num_bits(p);\n\t    if (field_bits > OPENSSL_ECC_MAX_FIELD_BITS)\n\t\tgoto out_err;\n\n\t    /* create the EC_GROUP structure */\n\t    group = EC_GROUP_new_curve_GFp(p, a, b, NULL);\n\n\t} else if (f_arity == 3 && field[0] == atom_characteristic_two_field) {\n#if defined(OPENSSL_NO_EC2M)\n\t    enif_raise_exception(env, atom_notsup);\n\t    goto out_err;\n#else\n\t    /* {characteristic_two_field, M, Basis} */\n\n\t    int b_arity = -1;\n\t    const ERL_NIF_TERM* basis;\n\t    unsigned int k1, k2, k3;\n\n\t    if ((p = BN_new()) == NULL)\n\t\tgoto out_err;\n\n\t    if (!enif_get_long(env, field[1], &field_bits)\n\t\t|| field_bits > OPENSSL_ECC_MAX_FIELD_BITS)\n\t\tgoto out_err;\n\n\t    if (enif_get_tuple(env,field[2],&b_arity,&basis)) {\n\t\tif (b_arity == 2\n\t\t    && basis[0] == atom_tpbasis\n\t\t    && enif_get_uint(env, basis[1], &k1)) {\n\t\t    /* {tpbasis, k} = Basis */\n\n\t\t    if (!(field_bits > k1 && k1 > 0))\n\t\t\tgoto out_err;\n\n\t\t    /* create the polynomial */\n\t\t    if (!BN_set_bit(p, (int)field_bits)\n                        || !BN_set_bit(p, (int)k1)\n                        || !BN_set_bit(p, 0))\n                                goto out_err;\n\n\t\t} else if (b_arity == 4\n\t\t    && basis[0] == atom_ppbasis\n\t\t    && enif_get_uint(env, basis[1], &k1)\n\t\t    && enif_get_uint(env, basis[2], &k2)\n\t\t    && enif_get_uint(env, basis[3], &k3)) {\n\t\t    /* {ppbasis, k1, k2, k3} = Basis */\n\n\t\t    if (!(field_bits > k3 && k3 > k2 && k2 > k1 && k1 > 0))\n\t\t\tgoto out_err;\n\n\t\t    /* create the polynomial */\n\t\t    if (!BN_set_bit(p, (int)field_bits)\n\t\t\t|| !BN_set_bit(p, (int)k1)\n\t\t\t|| !BN_set_bit(p, (int)k2)\n\t\t\t|| !BN_set_bit(p, (int)k3)\n\t\t\t|| !BN_set_bit(p, 0))\n\t\t\tgoto out_err;\n\n\t\t} else\n\t\t    goto out_err;\n\t    } else if (field[2] == atom_onbasis) {\n\t\t/* onbasis = Basis */\n\t\t/* no parameters */\n\t\tgoto out_err;\n\n\t    } else\n\t\tgoto out_err;\n\n\t    group = EC_GROUP_new_curve_GF2m(p, a, b, NULL);\n#endif\n\t} else\n\t    goto out_err;\n\n        if (!group)\n            goto out_err;\n\n\tif (enif_inspect_binary(env, prime[2], &seed)) {\n\t    EC_GROUP_set_seed(group, seed.data, seed.size);\n\t}\n\n\tif (!term2point(env, curve[2], group, &point))\n\t    goto out_err;\n\n\tif (BN_is_negative(bn_order)\n\t    || BN_is_zero(bn_order)\n\t    || BN_num_bits(bn_order) > (int)field_bits + 1)\n\t    goto out_err;\n\n\tif (!EC_GROUP_set_generator(group, point, bn_order, cofactor))\n\t    goto out_err;\n\n\tEC_GROUP_set_asn1_flag(group, 0x0);\n\n\tkey = EC_KEY_new();\n\tif (!key)\n\t    goto out_err;\n\tEC_KEY_set_group(key, group);\n    }\n    else {\n\tgoto out_err;\n    }\n\n\n    goto out;\n\nout_err:\n    if (key) EC_KEY_free(key);\n    key = NULL;\n\nout:\n    /* some OpenSSL structures are mem-dup'ed into the key,\n       so we have to free our copies here */\n    if (p) BN_free(p);\n    if (a) BN_free(a);\n    if (b) BN_free(b);\n    if (bn_order) BN_free(bn_order);\n    if (cofactor) BN_free(cofactor);\n    if (group) EC_GROUP_free(group);\n    if (point) EC_POINT_free(point);\n\n    return key;\n}\n\n\nstatic ERL_NIF_TERM bn2term(ErlNifEnv* env, const BIGNUM *bn)\n{\n    unsigned dlen;\n    unsigned char* ptr;\n    ERL_NIF_TERM ret;\n\n    if (!bn)\n\t    return atom_undefined;\n\n    dlen = BN_num_bytes(bn);\n    ptr = enif_make_new_binary(env, dlen, &ret);\n    BN_bn2bin(bn, ptr);\n    ERL_VALGRIND_MAKE_MEM_DEFINED(ptr, dlen);\n    return ret;\n}\n\nstatic ERL_NIF_TERM point2term(ErlNifEnv* env,\n\t\t\t       const EC_GROUP *group,\n\t\t\t       const EC_POINT *point,\n\t\t\t       point_conversion_form_t form)\n{\n    unsigned dlen;\n    ErlNifBinary bin;\n\n    dlen = EC_POINT_point2oct(group, point, form, NULL, 0, NULL);\n    if (dlen == 0)\n\treturn atom_undefined;\n\n    if (!enif_alloc_binary(dlen, &bin))\n\treturn enif_make_badarg(env);\n\n    if (!EC_POINT_point2oct(group, point, form, bin.data, bin.size, NULL)) {\n\tenif_release_binary(&bin);\n\treturn enif_make_badarg(env);\n    }\n    ERL_VALGRIND_MAKE_MEM_DEFINED(bin.data, bin.size);\n    return enif_make_binary(env, &bin);\n}\n\nstatic int term2point(ErlNifEnv* env, ERL_NIF_TERM term,\n\t\t      EC_GROUP *group, EC_POINT **pptr)\n{\n    int ret = 0;\n    ErlNifBinary bin;\n    EC_POINT *point;\n\n    if (!enif_inspect_binary(env,term,&bin)) {\n        return 0;\n    }\n\n    if ((*pptr = point = EC_POINT_new(group)) == NULL) {\n\treturn 0;\n    }\n\n    /* set the point conversion form */\n    EC_GROUP_set_point_conversion_form(group, (point_conversion_form_t)(bin.data[0] & ~0x01));\n\n    /* extract the ec point */\n    if (!EC_POINT_oct2point(group, point, bin.data, bin.size, NULL)) {\n\tEC_POINT_free(point);\n\t*pptr = NULL;\n    } else\n\tret = 1;\n\n    return ret;\n}\n\nstatic int get_ec_key(ErlNifEnv* env,\n\t\t      ERL_NIF_TERM curve, ERL_NIF_TERM priv, ERL_NIF_TERM pub,\n\t\t      EC_KEY** res)\n{\n    EC_KEY *key = NULL;\n    BIGNUM *priv_key = NULL;\n    EC_POINT *pub_key = NULL;\n    EC_GROUP *group = NULL;\n\n    if (!(priv == atom_undefined || get_bn_from_bin(env, priv, &priv_key))\n\t|| !(pub == atom_undefined || enif_is_binary(env, pub))) {\n\tgoto out_err;\n    }\n\n    key = ec_key_new(env, curve);\n\n    if (!key) {\n\tgoto out_err;\n    }\n\n    if (!group)\n\tgroup = EC_GROUP_dup(EC_KEY_get0_group(key));\n\n    if (term2point(env, pub, group, &pub_key)) {\n\t    if (!EC_KEY_set_public_key(key, pub_key)) {\n\t\t    goto out_err;\n\t    }\n    }\n    if (priv != atom_undefined\n\t&& !BN_is_zero(priv_key)) {\n\t    if (!EC_KEY_set_private_key(key, priv_key))\n\t\t    goto out_err;\n\n\t    /* calculate public key (if necessary) */\n\t    if (EC_KEY_get0_public_key(key) == NULL)\n\t    {\n\t\t    /* the public key was not included in the SEC1 private\n\t\t     * key => calculate the public key */\n\t\t    pub_key = EC_POINT_new(group);\n\t\t    if (pub_key == NULL\n\t\t\t|| !EC_POINT_copy(pub_key, EC_GROUP_get0_generator(group))\n\t\t\t|| !EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, NULL)\n\t\t\t|| !EC_KEY_set_public_key(key, pub_key))\n\t\t\t    goto out_err;\n\t    }\n    }\n\n    goto out;\n\nout_err:\n    if (key) EC_KEY_free(key);\n    key = NULL;\n\nout:\n    /* some OpenSSL structures are mem-dup'ed into the key,\n       so we have to free our copies here */\n    if (priv_key) BN_clear_free(priv_key);\n    if (pub_key) EC_POINT_free(pub_key);\n    if (group) EC_GROUP_free(group);\n    if (!key)\n\treturn 0;\n    *res = key;\n    return 1;\n}\n#endif /* HAVE_EC */\n\nstatic ERL_NIF_TERM ec_key_generate(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n#if defined(HAVE_EC)\n    EC_KEY *key = NULL;\n    const EC_GROUP *group;\n    const EC_POINT *public_key;\n    ERL_NIF_TERM priv_key;\n    ERL_NIF_TERM pub_key = atom_undefined;\n\n    if (!get_ec_key(env, argv[0], argv[1], atom_undefined, &key))\n\tgoto badarg;\n\n    if (argv[1] == atom_undefined) {\n\tif (!EC_KEY_generate_key(key))\n\t    goto badarg;\n    }\n\n    group = EC_KEY_get0_group(key);\n    public_key = EC_KEY_get0_public_key(key);\n\n    if (group && public_key) {\n\tpub_key = point2term(env, group, public_key,\n\t\t\t     EC_KEY_get_conv_form(key));\n    }\n    priv_key = bn2term(env, EC_KEY_get0_private_key(key));\n    EC_KEY_free(key);\n    return enif_make_tuple2(env, pub_key, priv_key);\n\nbadarg:\n    if (key)\n\tEC_KEY_free(key);\n    return make_badarg_maybe(env);\n#else\n    return atom_notsup;\n#endif\n}\n\n/*\n  (_OthersPublicKey, _MyPrivateKey)\n  (_OthersPublicKey, _MyEC_Point)\n*/\nstatic ERL_NIF_TERM ecdh_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n/* (OtherPublicKey, Curve, My) */\n{\n#if defined(HAVE_EC)\n    ERL_NIF_TERM ret;\n    unsigned char *p;\n    EC_KEY* key = NULL;\n    int field_size = 0;\n    int i;\n    EC_GROUP *group;\n    const BIGNUM *priv_key;\n    EC_POINT *my_ecpoint = NULL;\n    EC_KEY *other_ecdh = NULL;\n\n    if (!get_ec_key(env, argv[1], argv[2], atom_undefined, &key))\n\treturn make_badarg_maybe(env);\n\n    group    = EC_GROUP_dup(EC_KEY_get0_group(key));\n    priv_key = EC_KEY_get0_private_key(key);\n\n    if (!term2point(env, argv[0], group, &my_ecpoint)) {\n\tgoto out_err;\n    }\n\n    if ((other_ecdh = EC_KEY_new()) == NULL\n\t|| !EC_KEY_set_group(other_ecdh, group)\n\t|| !EC_KEY_set_private_key(other_ecdh, priv_key))\n\tgoto out_err;\n\n    field_size = EC_GROUP_get_degree(group);\n    if (field_size <= 0)\n\tgoto out_err;\n\n    p = enif_make_new_binary(env, (field_size+7)/8, &ret);\n    i = ECDH_compute_key(p, (field_size+7)/8, my_ecpoint, other_ecdh, NULL);\n\n    if (i < 0)\n\t    goto out_err;\nout:\n    if (group) EC_GROUP_free(group);\n    if (my_ecpoint) EC_POINT_free(my_ecpoint);\n    if (other_ecdh) EC_KEY_free(other_ecdh);\n    if (key) EC_KEY_free(key);\n\n    return ret;\n\nout_err:\n    ret = enif_make_badarg(env);\n    goto out;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM evp_compute_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n    /*    (Curve, PeerBin, MyBin) */\n{\n#ifdef HAVE_ED_CURVE_DH\n    int type;\n    EVP_PKEY_CTX *ctx = NULL;\n    ErlNifBinary peer_bin, my_bin, key_bin;\n    EVP_PKEY *peer_key = NULL, *my_key = NULL;\n    size_t max_size;\n\n    if (argv[0] == atom_x25519) type = EVP_PKEY_X25519;\n    else if (argv[0] == atom_x448) type = EVP_PKEY_X448;\n    else return enif_make_badarg(env);\n\n    if (!enif_inspect_binary(env, argv[1], &peer_bin) ||\n        !enif_inspect_binary(env, argv[2], &my_bin)) \n        goto return_badarg;\n\n    if (!(my_key = EVP_PKEY_new_raw_private_key(type, NULL, my_bin.data, my_bin.size)) ||\n        !(ctx = EVP_PKEY_CTX_new(my_key, NULL))) \n        goto return_badarg;\n\n    if (!EVP_PKEY_derive_init(ctx)) \n        goto return_badarg;\n\n    if (!(peer_key = EVP_PKEY_new_raw_public_key(type, NULL, peer_bin.data, peer_bin.size)) ||\n        !EVP_PKEY_derive_set_peer(ctx, peer_key)) \n        goto return_badarg;\n\n    if (!EVP_PKEY_derive(ctx, NULL, &max_size)) \n        goto return_badarg;\n\n    if (!enif_alloc_binary(max_size, &key_bin) ||\n        !EVP_PKEY_derive(ctx, key_bin.data, &key_bin.size)) \n        goto return_badarg;\n\n    if (key_bin.size < max_size) {\n        size_t actual_size = key_bin.size;\n        if (!enif_realloc_binary(&key_bin, actual_size)) \n            goto return_badarg;\n    }\n\n    EVP_PKEY_free(my_key);\n    EVP_PKEY_free(peer_key);\n    EVP_PKEY_CTX_free(ctx);\n    return enif_make_binary(env, &key_bin);\n\nreturn_badarg:\n    if (my_key)   EVP_PKEY_free(my_key);\n    if (peer_key) EVP_PKEY_free(peer_key);\n    if (ctx)      EVP_PKEY_CTX_free(ctx);\n    return enif_make_badarg(env);\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM evp_generate_key_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n/* (Curve) */\n{\n#ifdef HAVE_ED_CURVE_DH\n    int type;\n    EVP_PKEY_CTX *ctx = NULL;\n    EVP_PKEY *pkey = NULL;\n    ERL_NIF_TERM ret_pub, ret_prv;\n    size_t key_len;\n\n    if (argv[0] == atom_x25519) type = EVP_PKEY_X25519;\n    else if (argv[0] == atom_x448) type = EVP_PKEY_X448;\n    else return enif_make_badarg(env);\n\n    if (!(ctx = EVP_PKEY_CTX_new_id(type, NULL))) return enif_make_badarg(env);\n\n    if (!EVP_PKEY_keygen_init(ctx)) goto return_error;\n    if (!EVP_PKEY_keygen(ctx, &pkey)) goto return_error;\n\n    if (!EVP_PKEY_get_raw_public_key(pkey, NULL, &key_len)) goto return_error;\n    if (!EVP_PKEY_get_raw_public_key(pkey,\n                                     enif_make_new_binary(env, key_len, &ret_pub),\n                                     &key_len))\n        goto return_error;\n\n    if (!EVP_PKEY_get_raw_private_key(pkey, NULL, &key_len)) goto return_error;\n    if (!EVP_PKEY_get_raw_private_key(pkey,\n                                      enif_make_new_binary(env, key_len, &ret_prv),\n                                      &key_len))\n        goto return_error;\n\n    EVP_PKEY_free(pkey);\n    EVP_PKEY_CTX_free(ctx);\n    return enif_make_tuple2(env, ret_pub, ret_prv);\n\nreturn_error:\n    if (pkey) EVP_PKEY_free(pkey);\n    if (ctx)  EVP_PKEY_CTX_free(ctx);\n    return atom_error;\n\n#else\n    return atom_notsup;\n#endif\n}\n\n/*================================================================*/\n#define PKEY_BADARG -1\n#define PKEY_NOTSUP 0\n#define PKEY_OK 1\n\ntypedef struct PKeyCryptOptions {\n    const EVP_MD *rsa_mgf1_md;\n    ErlNifBinary rsa_oaep_label;\n    const EVP_MD *rsa_oaep_md;\n    int rsa_padding;\n    const EVP_MD *signature_md;\n} PKeyCryptOptions;\n\ntypedef struct PKeySignOptions {\n    const EVP_MD *rsa_mgf1_md;\n    int rsa_padding;\n    int rsa_pss_saltlen;\n} PKeySignOptions;\n\nstatic int get_pkey_digest_type(ErlNifEnv *env, ERL_NIF_TERM algorithm, ERL_NIF_TERM type,\n\t\t\t\tconst EVP_MD **md)\n{\n    struct digest_type_t *digp = NULL;\n    *md = NULL;\n\n    if (type == atom_none && algorithm == atom_rsa) return PKEY_OK;\n#ifdef HAVE_EDDSA\n    if (algorithm == atom_eddsa) return PKEY_OK;\n#endif\n    digp = get_digest_type(type);\n    if (!digp) return PKEY_BADARG;\n    if (!digp->md.p) return PKEY_NOTSUP;\n\n    *md = digp->md.p;\n    return PKEY_OK;\n}\n\n\nstatic int get_pkey_sign_digest(ErlNifEnv *env, ERL_NIF_TERM algorithm,\n\t\t\t\tERL_NIF_TERM type, ERL_NIF_TERM data,\n\t\t\t\tunsigned char *md_value, const EVP_MD **mdp,\n\t\t\t\tunsigned char **tbsp, size_t *tbslenp)\n{\n    int i;\n    const ERL_NIF_TERM *tpl_terms;\n    int tpl_arity;\n    ErlNifBinary tbs_bin;\n    EVP_MD_CTX *mdctx;\n    const EVP_MD *md = *mdp;\n    unsigned char *tbs = *tbsp;\n    size_t tbslen = *tbslenp;\n    unsigned int tbsleni;\n\n    if ((i = get_pkey_digest_type(env, algorithm, type, &md)) != PKEY_OK) {\n\treturn i;\n    }\n    if (enif_get_tuple(env, data, &tpl_arity, &tpl_terms)) {\n\tif (tpl_arity != 2 || tpl_terms[0] != atom_digest\n\t    || !enif_inspect_binary(env, tpl_terms[1], &tbs_bin)\n\t    || (md != NULL && tbs_bin.size != EVP_MD_size(md))) {\n\t    return PKEY_BADARG;\n\t}\n        /* We have a digest (= hashed text) in tbs_bin */\n\ttbs = tbs_bin.data;\n\ttbslen = tbs_bin.size;\n    } else if (md == NULL) {\n\tif (!enif_inspect_binary(env, data, &tbs_bin)) {\n\t    return PKEY_BADARG;\n\t}\n        /* md == NULL, that is no hashing because DigestType argument was atom_none */\n\ttbs = tbs_bin.data;\n\ttbslen = tbs_bin.size;\n    } else {\n\tif (!enif_inspect_binary(env, data, &tbs_bin)) {\n\t    return PKEY_BADARG;\n\t}\n        /* We have the cleartext in tbs_bin and the hash algo info in md */\n\ttbs = md_value;\n\tmdctx = EVP_MD_CTX_create();\n\tif (!mdctx) {\n\t    return PKEY_BADARG;\n\t}\n        /* Looks well, now hash the plain text into a digest according to md */\n\tif (EVP_DigestInit_ex(mdctx, md, NULL) <= 0) {\n\t    EVP_MD_CTX_destroy(mdctx);\n\t    return PKEY_BADARG;\n\t}\n\tif (EVP_DigestUpdate(mdctx, tbs_bin.data, tbs_bin.size) <= 0) {\n\t    EVP_MD_CTX_destroy(mdctx);\n\t    return PKEY_BADARG;\n\t}\n\tif (EVP_DigestFinal_ex(mdctx, tbs, &tbsleni) <= 0) {\n\t    EVP_MD_CTX_destroy(mdctx);\n\t    return PKEY_BADARG;\n\t}\n\ttbslen = (size_t)(tbsleni);\n\tEVP_MD_CTX_destroy(mdctx);\n    }\n\n    *mdp = md;\n    *tbsp = tbs;\n    *tbslenp = tbslen;\n\n    return PKEY_OK;\n}\n\n\nstatic int get_pkey_sign_options(ErlNifEnv *env, ERL_NIF_TERM algorithm, ERL_NIF_TERM options,\n                                 const EVP_MD *md, PKeySignOptions *opt)\n{\n    ERL_NIF_TERM head, tail;\n    const ERL_NIF_TERM *tpl_terms;\n    int tpl_arity;\n    const EVP_MD *opt_md;\n    int i;\n\n    if (!enif_is_list(env, options)) {\n\treturn PKEY_BADARG;\n    }\n\n    /* defaults */\n    if (algorithm == atom_rsa) {\n\topt->rsa_mgf1_md = NULL;\n\topt->rsa_padding = RSA_PKCS1_PADDING;\n\topt->rsa_pss_saltlen = -2;\n    }\n\n    if (enif_is_empty_list(env, options)) {\n\treturn PKEY_OK;\n    }\n\n    if (algorithm == atom_rsa) {\n\ttail = options;\n\twhile (enif_get_list_cell(env, tail, &head, &tail)) {\n\t    if (enif_get_tuple(env, head, &tpl_arity, &tpl_terms) && tpl_arity == 2) {\n\t\tif (tpl_terms[0] == atom_rsa_mgf1_md && enif_is_atom(env, tpl_terms[1])) {\n\t\t    i = get_pkey_digest_type(env, algorithm, tpl_terms[1], &opt_md);\n\t\t    if (i != PKEY_OK) {\n\t\t\treturn i;\n\t\t    }\n\t\t    opt->rsa_mgf1_md = opt_md;\n\t\t} else if (tpl_terms[0] == atom_rsa_padding) {\n\t\t    if (tpl_terms[1] == atom_rsa_pkcs1_padding) {\n\t\t\topt->rsa_padding = RSA_PKCS1_PADDING;\n                    } else if (tpl_terms[1] == atom_rsa_pkcs1_pss_padding) {\n#ifdef HAVE_RSA_PKCS1_PSS_PADDING\n                        opt->rsa_padding = RSA_PKCS1_PSS_PADDING;\n                        if (opt->rsa_mgf1_md == NULL) {\n                            opt->rsa_mgf1_md = md;\n                        }\n#else\n                        return PKEY_NOTSUP;\n#endif\n\t\t    } else if (tpl_terms[1] == atom_rsa_x931_padding) {\n\t\t\topt->rsa_padding = RSA_X931_PADDING;\n\t\t    } else if (tpl_terms[1] == atom_rsa_no_padding) {\n\t\t\topt->rsa_padding = RSA_NO_PADDING;\n\t\t    } else {\n\t\t\treturn PKEY_BADARG;\n\t\t    }\n\t\t} else if (tpl_terms[0] == atom_rsa_pss_saltlen) {\n\t\t    if (!enif_get_int(env, tpl_terms[1], &(opt->rsa_pss_saltlen))\n\t\t\t|| opt->rsa_pss_saltlen < -2) {\n\t\t\treturn PKEY_BADARG;\n\t\t    }\n\t\t} else {\n\t\t    return PKEY_BADARG;\n\t\t}\n\t    } else {\n\t\treturn PKEY_BADARG;\n\t    }\n\t}\n    } else {\n\treturn PKEY_BADARG;\n    }\n\n    return PKEY_OK;\n}\n\n\n#ifdef HAS_ENGINE_SUPPORT\nstatic int get_engine_and_key_id(ErlNifEnv *env, ERL_NIF_TERM key, char ** id, ENGINE **e)\n{\n    ERL_NIF_TERM engine_res, key_id_term;\n    struct engine_ctx *ctx;\n    ErlNifBinary key_id_bin;\n\n    if (!enif_get_map_value(env, key, atom_engine, &engine_res) ||\n        !enif_get_resource(env, engine_res, engine_ctx_rtype, (void**)&ctx) ||\n        !enif_get_map_value(env, key, atom_key_id, &key_id_term) ||\n        !enif_inspect_binary(env, key_id_term, &key_id_bin)) {\n        return 0;\n    }\n    else {\n        *e = ctx->engine;\n        return zero_terminate(key_id_bin, id);\n    }\n}\n\n\nstatic char *get_key_password(ErlNifEnv *env, ERL_NIF_TERM key) {\n    ERL_NIF_TERM tmp_term;\n    ErlNifBinary pwd_bin;\n    char *pwd = NULL;\n    if (enif_get_map_value(env, key, atom_password, &tmp_term) &&\n        enif_inspect_binary(env, tmp_term, &pwd_bin) &&\n        zero_terminate(pwd_bin, &pwd)\n        ) return pwd;\n\n    return NULL;\n}\n\nstatic int zero_terminate(ErlNifBinary bin, char **buf) {\n    *buf = enif_alloc(bin.size+1);\n    if (!*buf)\n        return 0;\n    memcpy(*buf, bin.data, bin.size);\n    *(*buf+bin.size) = 0;\n    return 1;\n}\n#endif\n\nstatic int get_pkey_private_key(ErlNifEnv *env, ERL_NIF_TERM algorithm, ERL_NIF_TERM key, EVP_PKEY **pkey)\n{\n    if (enif_is_map(env, key)) {\n#ifdef HAS_ENGINE_SUPPORT\n        /* Use key stored in engine */\n        ENGINE *e;\n        char *id = NULL;\n        char *password;\n\n        if (!get_engine_and_key_id(env, key, &id, &e))\n            return PKEY_BADARG;\n        password = get_key_password(env, key);\n        *pkey = ENGINE_load_private_key(e, id, NULL, password);\n        if (password) enif_free(password);\n        enif_free(id);\n        if (!*pkey)\n            return PKEY_BADARG;\n#else\n        return PKEY_BADARG;\n#endif\n    }\n    else if (algorithm == atom_rsa) {\n\tRSA *rsa = RSA_new();\n\n\tif (!get_rsa_private_key(env, key, rsa)) {\n\t    RSA_free(rsa);\n\t    return PKEY_BADARG;\n\t}\n\n\t*pkey = EVP_PKEY_new();\n\tif (!EVP_PKEY_assign_RSA(*pkey, rsa)) {\n\t    EVP_PKEY_free(*pkey);\n\t    RSA_free(rsa);\n\t    return PKEY_BADARG;\n\t}\n    } else if (algorithm == atom_ecdsa) {\n#if defined(HAVE_EC)\n\tEC_KEY *ec = NULL;\n\tconst ERL_NIF_TERM *tpl_terms;\n\tint tpl_arity;\n\n\tif (enif_get_tuple(env, key, &tpl_arity, &tpl_terms) && tpl_arity == 2\n\t    && enif_is_tuple(env, tpl_terms[0]) && enif_is_binary(env, tpl_terms[1])\n\t    && get_ec_key(env, tpl_terms[0], tpl_terms[1], atom_undefined, &ec)) {\n\n\t    *pkey = EVP_PKEY_new();\n\t    if (!EVP_PKEY_assign_EC_KEY(*pkey, ec)) {\n\t\tEVP_PKEY_free(*pkey);\n\t\tEC_KEY_free(ec);\n\t\treturn PKEY_BADARG;\n\t    }\n\t} else {\n\t    return PKEY_BADARG;\n\t}\n#else\n\treturn PKEY_NOTSUP;\n#endif\n    } else if (algorithm == atom_eddsa) {\n#if defined(HAVE_EDDSA)\n        if (!get_eddsa_key(env, 0, key, pkey)) {\n            return PKEY_BADARG;\n        }\n#else\n     return PKEY_NOTSUP;  \n#endif\n    } else if (algorithm == atom_dss) {\n\tDSA *dsa = DSA_new();\n\n\tif (!get_dss_private_key(env, key, dsa)) {\n\t    DSA_free(dsa);\n            return PKEY_BADARG;\n        }\n\n\t*pkey = EVP_PKEY_new();\n\tif (!EVP_PKEY_assign_DSA(*pkey, dsa)) {\n\t    EVP_PKEY_free(*pkey);\n\t    DSA_free(dsa);\n\t    return PKEY_BADARG;\n\t}\n    } else {\n\treturn PKEY_BADARG;\n    }\n\n    return PKEY_OK;\n}\n\n\nstatic int get_pkey_public_key(ErlNifEnv *env, ERL_NIF_TERM algorithm, ERL_NIF_TERM key,\n\t\t\t       EVP_PKEY **pkey)\n{\n    if (enif_is_map(env, key)) {\n#ifdef HAS_ENGINE_SUPPORT\n        /* Use key stored in engine */\n        ENGINE *e;\n        char *id = NULL;\n        char *password;\n\n        if (!get_engine_and_key_id(env, key, &id, &e))\n            return PKEY_BADARG;\n        password = get_key_password(env, key);\n        *pkey = ENGINE_load_public_key(e, id, NULL, password);\n        if (password) enif_free(password);\n        enif_free(id);\n        if (!pkey)\n            return PKEY_BADARG;\n#else\n        return PKEY_BADARG;\n#endif\n    } else  if (algorithm == atom_rsa) {\n\tRSA *rsa = RSA_new();\n\n\tif (!get_rsa_public_key(env, key, rsa)) {\n\t    RSA_free(rsa);\n\t    return PKEY_BADARG;\n\t}\n\n\t*pkey = EVP_PKEY_new();\n\tif (!EVP_PKEY_assign_RSA(*pkey, rsa)) {\n\t    EVP_PKEY_free(*pkey);\n\t    RSA_free(rsa);\n\t    return PKEY_BADARG;\n\t}\n    } else if (algorithm == atom_ecdsa) {\n#if defined(HAVE_EC)\n\tEC_KEY *ec = NULL;\n\tconst ERL_NIF_TERM *tpl_terms;\n\tint tpl_arity;\n\n\tif (enif_get_tuple(env, key, &tpl_arity, &tpl_terms) && tpl_arity == 2\n\t    && enif_is_tuple(env, tpl_terms[0]) && enif_is_binary(env, tpl_terms[1])\n\t    && get_ec_key(env, tpl_terms[0], atom_undefined, tpl_terms[1], &ec)) {\n\n\t    *pkey = EVP_PKEY_new();\n\t    if (!EVP_PKEY_assign_EC_KEY(*pkey, ec)) {\n\t\tEVP_PKEY_free(*pkey);\n\t\tEC_KEY_free(ec);\n\t\treturn PKEY_BADARG;\n\t    }\n\t} else {\n\t    return PKEY_BADARG;\n\t}\n#else\n\treturn PKEY_NOTSUP;\n#endif\n    } else if (algorithm == atom_eddsa) {\n#if defined(HAVE_EDDSA)\n        if (!get_eddsa_key(env, 1, key, pkey)) {\n            return PKEY_BADARG;\n        }\n#else\n     return PKEY_NOTSUP;  \n#endif\n    } else if (algorithm == atom_dss) {\n\tDSA *dsa = DSA_new();\n\n\tif (!get_dss_public_key(env, key, dsa)) {\n\t    DSA_free(dsa);\n\t    return PKEY_BADARG;\n\t}\n\n\t*pkey = EVP_PKEY_new();\n\tif (!EVP_PKEY_assign_DSA(*pkey, dsa)) {\n\t    EVP_PKEY_free(*pkey);\n\t    DSA_free(dsa);\n\t    return PKEY_BADARG;\n\t}\n    } else {\n\treturn PKEY_BADARG;\n    }\n\n    return PKEY_OK;\n}\n\nstatic ERL_NIF_TERM pkey_sign_nif(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])\n{/* (Algorithm, Type, Data|{digest,Digest}, Key|#{}, Options) */\n    int i;\n    const EVP_MD *md = NULL;\n    unsigned char md_value[EVP_MAX_MD_SIZE];\n    EVP_PKEY *pkey;\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX *ctx;\n    size_t siglen;\n#else\n    unsigned len, siglen;\n#endif\n    PKeySignOptions sig_opt;\n    ErlNifBinary sig_bin; /* signature */\n    unsigned char *tbs; /* data to be signed */\n    size_t tbslen;\n/*char buf[1024];\nenif_get_atom(env,argv[0],buf,1024,ERL_NIF_LATIN1); printf(\"algo=%s \",buf);\nenif_get_atom(env,argv[1],buf,1024,ERL_NIF_LATIN1); printf(\"hash=%s \",buf);\nprintf(\"\\r\\n\");\n*/\n\n#ifndef HAS_ENGINE_SUPPORT\n    if (enif_is_map(env, argv[3])) {\n        return atom_notsup;\n    }\n#endif\n\n    i = get_pkey_sign_digest(env, argv[0], argv[1], argv[2], md_value, &md, &tbs, &tbslen);\n    if (i != PKEY_OK) {\n\tif (i == PKEY_NOTSUP)\n\t    return atom_notsup;\n\telse\n\t    return enif_make_badarg(env);\n    }\n\n    i = get_pkey_sign_options(env, argv[0], argv[4], md, &sig_opt);\n    if (i != PKEY_OK) {\n\tif (i == PKEY_NOTSUP)\n\t    return atom_notsup;\n\telse\n\t    return enif_make_badarg(env);\n    }\n\n    if (get_pkey_private_key(env, argv[0], argv[3], &pkey) != PKEY_OK) {\n\treturn enif_make_badarg(env);\n    }\n\n#ifdef HAS_EVP_PKEY_CTX\n    ctx = EVP_PKEY_CTX_new(pkey, NULL);\n    if (!ctx) goto badarg;\n\n    if (argv[0] != atom_eddsa) {\n        if (EVP_PKEY_sign_init(ctx) <= 0) goto badarg;\n        if (md != NULL && EVP_PKEY_CTX_set_signature_md(ctx, md) <= 0) goto badarg;\n    }\n\n    if (argv[0] == atom_rsa) {\n\tif (EVP_PKEY_CTX_set_rsa_padding(ctx, sig_opt.rsa_padding) <= 0) goto badarg;\n# ifdef HAVE_RSA_PKCS1_PSS_PADDING\n\tif (sig_opt.rsa_padding == RSA_PKCS1_PSS_PADDING) {\n            if (sig_opt.rsa_mgf1_md != NULL) {\n# ifdef HAVE_RSA_MGF1_MD\n\t\tif (EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, sig_opt.rsa_mgf1_md) <= 0) goto badarg;\n# else\n                EVP_PKEY_CTX_free(ctx);\n                EVP_PKEY_free(pkey);\n                return atom_notsup;\n# endif\n            }\n\t    if (sig_opt.rsa_pss_saltlen > -2\n\t\t&& EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, sig_opt.rsa_pss_saltlen) <= 0)\n\t\tgoto badarg;\n\t}\n#endif\n    }\n\n    if (argv[0] == atom_eddsa) {\n#ifdef HAVE_EDDSA\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_new();\n        if (!EVP_DigestSignInit(mdctx, NULL, NULL, NULL, pkey)) {\n            if (mdctx) EVP_MD_CTX_free(mdctx);\n            goto badarg;\n        }\n\n        if (!EVP_DigestSign(mdctx, NULL, &siglen, tbs, tbslen)) {\n            EVP_MD_CTX_free(mdctx);\n            goto badarg;\n        }\n        enif_alloc_binary(siglen, &sig_bin);\n\n        if (!EVP_DigestSign(mdctx, sig_bin.data, &siglen, tbs, tbslen)) {\n            EVP_MD_CTX_free(mdctx);\n            goto badarg;\n        }\n        EVP_MD_CTX_free(mdctx);\n#else\n        goto badarg;    \n#endif\n    }\n    else\n    {\n        if (EVP_PKEY_sign(ctx, NULL, &siglen, tbs, tbslen) <= 0) goto badarg;\n        enif_alloc_binary(siglen, &sig_bin);\n\n        if (md != NULL) {\n            ERL_VALGRIND_ASSERT_MEM_DEFINED(tbs, EVP_MD_size(md));\n        }\n        i = EVP_PKEY_sign(ctx, sig_bin.data, &siglen, tbs, tbslen);\n    }\n        \n    EVP_PKEY_CTX_free(ctx);\n#else\n/*printf(\"Old interface\\r\\n\");\n */\n    if (argv[0] == atom_rsa) {\n       RSA *rsa = EVP_PKEY_get1_RSA(pkey);\n       enif_alloc_binary(RSA_size(rsa), &sig_bin);\n       len = EVP_MD_size(md);\n       ERL_VALGRIND_ASSERT_MEM_DEFINED(tbs, len);\n       i = RSA_sign(md->type, tbs, len, sig_bin.data, &siglen, rsa);\n       RSA_free(rsa);\n    } else if (argv[0] == atom_dss) {\n       DSA *dsa = EVP_PKEY_get1_DSA(pkey);\n       enif_alloc_binary(DSA_size(dsa), &sig_bin);\n       len = EVP_MD_size(md);\n       ERL_VALGRIND_ASSERT_MEM_DEFINED(tbs, len);\n       i = DSA_sign(md->type, tbs, len, sig_bin.data, &siglen, dsa);\n       DSA_free(dsa);\n    } else if (argv[0] == atom_ecdsa) {\n#if defined(HAVE_EC)\n       EC_KEY *ec = EVP_PKEY_get1_EC_KEY(pkey);\n       enif_alloc_binary(ECDSA_size(ec), &sig_bin);\n       len = EVP_MD_size(md);\n       ERL_VALGRIND_ASSERT_MEM_DEFINED(tbs, len);\n       i = ECDSA_sign(md->type, tbs, len, sig_bin.data, &siglen, ec);\n       EC_KEY_free(ec);\n#else\n       EVP_PKEY_free(pkey);\n       return atom_notsup;\n#endif\n    } else {\n\tgoto badarg;\n    }\n#endif\n\n    EVP_PKEY_free(pkey);\n    if (i == 1) {\n\tERL_VALGRIND_MAKE_MEM_DEFINED(sig_bin.data, siglen);\n\tif (siglen != sig_bin.size) {\n\t    enif_realloc_binary(&sig_bin, siglen);\n\t    ERL_VALGRIND_ASSERT_MEM_DEFINED(sig_bin.data, siglen);\n\t}\n\treturn enif_make_binary(env, &sig_bin);\n    } else {\n\tenif_release_binary(&sig_bin);\n\treturn atom_error;\n    }\n\n badarg:\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX_free(ctx);\n#endif\n    EVP_PKEY_free(pkey);\n    return enif_make_badarg(env);\n}\n\n\nstatic ERL_NIF_TERM pkey_verify_nif(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])\n{/* (Algorithm, Type, Data|{digest,Digest}, Signature, Key, Options) */\n    int i;\n    const EVP_MD *md = NULL;\n    unsigned char md_value[EVP_MAX_MD_SIZE];\n    EVP_PKEY *pkey;\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX *ctx;\n#else\n#endif\n    PKeySignOptions sig_opt;\n    ErlNifBinary sig_bin; /* signature */\n    unsigned char *tbs; /* data to be signed */\n    size_t tbslen;\n\n#ifndef HAS_ENGINE_SUPPORT\n    if (enif_is_map(env, argv[4])) {\n        return atom_notsup;\n    }\n#endif\n\n    if (!enif_inspect_binary(env, argv[3], &sig_bin)) {\n\treturn enif_make_badarg(env);\n    }\n\n    i = get_pkey_sign_digest(env, argv[0], argv[1], argv[2], md_value, &md, &tbs, &tbslen);\n    if (i != PKEY_OK) {\n\tif (i == PKEY_NOTSUP)\n\t    return atom_notsup;\n\telse\n\t    return enif_make_badarg(env);\n    }\n\n    i = get_pkey_sign_options(env, argv[0], argv[5], md, &sig_opt);\n    if (i != PKEY_OK) {\n\tif (i == PKEY_NOTSUP)\n\t    return atom_notsup;\n\telse\n\t    return enif_make_badarg(env);\n    }\n\n    if (get_pkey_public_key(env, argv[0], argv[4], &pkey) != PKEY_OK) {\n\treturn enif_make_badarg(env);\n    }\n\n#ifdef HAS_EVP_PKEY_CTX\n/* printf(\"EVP interface\\r\\n\");\n */\n    ctx = EVP_PKEY_CTX_new(pkey, NULL);\n    if (!ctx) goto badarg;\n\n    if (argv[0] != atom_eddsa) {\n        if (EVP_PKEY_verify_init(ctx) <= 0) goto badarg;\n        if (md != NULL && EVP_PKEY_CTX_set_signature_md(ctx, md) <= 0) goto badarg;\n    }\n\n    if (argv[0] == atom_rsa) {\n\tif (EVP_PKEY_CTX_set_rsa_padding(ctx, sig_opt.rsa_padding) <= 0) goto badarg;\n\tif (sig_opt.rsa_padding == RSA_PKCS1_PSS_PADDING) {\n            if (sig_opt.rsa_mgf1_md != NULL) {\n# ifdef HAVE_RSA_MGF1_MD\n\t\tif (EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, sig_opt.rsa_mgf1_md) <= 0) goto badarg;\n# else\n                EVP_PKEY_CTX_free(ctx);\n                EVP_PKEY_free(pkey);\n                return atom_notsup;\n# endif\n            }\n\t    if (sig_opt.rsa_pss_saltlen > -2\n\t\t&& EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, sig_opt.rsa_pss_saltlen) <= 0)\n\t\tgoto badarg;\n\t}\n    }\n\n        if (argv[0] == atom_eddsa) {\n#ifdef HAVE_EDDSA\n        EVP_MD_CTX* mdctx = EVP_MD_CTX_create();\n        \n        if (!EVP_DigestVerifyInit(mdctx, NULL, NULL, NULL, pkey)) {\n            if (mdctx) EVP_MD_CTX_destroy(mdctx);\n            goto badarg;\n        }\n\n        i = EVP_DigestVerify(mdctx, sig_bin.data, sig_bin.size, tbs, tbslen);\n        EVP_MD_CTX_destroy(mdctx);\n#else\n        goto badarg;    \n#endif\n        }\n    else\n        {\n            if (md != NULL) {\n                ERL_VALGRIND_ASSERT_MEM_DEFINED(tbs, EVP_MD_size(md));\n            }\n            i = EVP_PKEY_verify(ctx, sig_bin.data, sig_bin.size, tbs, tbslen);\n        }\n\n    EVP_PKEY_CTX_free(ctx);\n#else\n/*printf(\"Old interface\\r\\n\");\n*/\n    if (argv[0] == atom_rsa) {\n        RSA *rsa = EVP_PKEY_get1_RSA(pkey);\n        i = RSA_verify(md->type, tbs, tbslen, sig_bin.data, sig_bin.size, rsa);\n        RSA_free(rsa);\n    } else if (argv[0] == atom_dss) {\n        DSA *dsa = EVP_PKEY_get1_DSA(pkey);\n        i = DSA_verify(0, tbs, tbslen, sig_bin.data, sig_bin.size, dsa);\n        DSA_free(dsa);\n    } else if (argv[0] == atom_ecdsa) {\n#if defined(HAVE_EC)\n        EC_KEY *ec = EVP_PKEY_get1_EC_KEY(pkey);\n        i = ECDSA_verify(EVP_MD_type(md), tbs, tbslen, sig_bin.data, sig_bin.size, ec);\n        EC_KEY_free(ec);\n#else\n        EVP_PKEY_free(pkey);\n        return atom_notsup;\n#endif\n    } else {\n\tgoto badarg;\n    }\n#endif\n\n    EVP_PKEY_free(pkey);\n    if (i == 1) {\n\treturn atom_true;\n    } else {\n\treturn atom_false;\n    }\n\n badarg:\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX_free(ctx);\n#endif\n    EVP_PKEY_free(pkey);\n    return enif_make_badarg(env);\n}\n\n\n/*--------------------------------*/\n\nstatic int get_pkey_crypt_options(ErlNifEnv *env, ERL_NIF_TERM algorithm, ERL_NIF_TERM options,\n\t\t\t\t  PKeyCryptOptions *opt)\n{\n    ERL_NIF_TERM head, tail;\n    const ERL_NIF_TERM *tpl_terms;\n    int tpl_arity;\n    const EVP_MD *opt_md;\n    int i;\n\n    if (!enif_is_list(env, options)) {\n\treturn PKEY_BADARG;\n    }\n\n    /* defaults */\n    if (algorithm == atom_rsa) {\n\topt->rsa_mgf1_md = NULL;\n\topt->rsa_oaep_label.data = NULL;\n\topt->rsa_oaep_label.size = 0;\n\topt->rsa_oaep_md = NULL;\n\topt->rsa_padding = RSA_PKCS1_PADDING;\n\topt->signature_md = NULL;\n    }\n\n    if (enif_is_empty_list(env, options)) {\n\treturn PKEY_OK;\n    }\n\n    if (algorithm == atom_rsa) {\n\ttail = options;\n\twhile (enif_get_list_cell(env, tail, &head, &tail)) {\n\t    if (enif_get_tuple(env, head, &tpl_arity, &tpl_terms) && tpl_arity == 2) {\n\t\tif (tpl_terms[0] == atom_rsa_padding\n                    || tpl_terms[0] == atom_rsa_pad /* Compatibility */\n                    ) {\n\t\t    if (tpl_terms[1] == atom_rsa_pkcs1_padding) {\n\t\t\topt->rsa_padding = RSA_PKCS1_PADDING;\n#ifdef HAVE_RSA_OAEP_PADDING\n\t\t    } else if (tpl_terms[1] == atom_rsa_pkcs1_oaep_padding) {\n\t\t\topt->rsa_padding = RSA_PKCS1_OAEP_PADDING;\n#endif\n#ifdef HAVE_RSA_SSLV23_PADDING\n\t\t    } else if (tpl_terms[1] == atom_rsa_sslv23_padding) {\n\t\t\topt->rsa_padding = RSA_SSLV23_PADDING;\n#endif\n\t\t    } else if (tpl_terms[1] == atom_rsa_x931_padding) {\n\t\t\topt->rsa_padding = RSA_X931_PADDING;\n\t\t    } else if (tpl_terms[1] == atom_rsa_no_padding) {\n\t\t\topt->rsa_padding = RSA_NO_PADDING;\n\t\t    } else {\n\t\t\treturn PKEY_BADARG;\n\t\t    }\n\t\t} else if (tpl_terms[0] == atom_signature_md && enif_is_atom(env, tpl_terms[1])) {\n\t\t    i = get_pkey_digest_type(env, algorithm, tpl_terms[1], &opt_md);\n\t\t    if (i != PKEY_OK) {\n\t\t\treturn i;\n\t\t    }\n\t\t    opt->signature_md = opt_md;\n\t\t} else if (tpl_terms[0] == atom_rsa_mgf1_md && enif_is_atom(env, tpl_terms[1])) {\n#ifndef HAVE_RSA_MGF1_MD\n\t\t    if (tpl_terms[1] != atom_sha)\n\t\t\treturn PKEY_NOTSUP;\n#endif\n\t\t    i = get_pkey_digest_type(env, algorithm, tpl_terms[1], &opt_md);\n\t\t    if (i != PKEY_OK) {\n\t\t\treturn i;\n\t\t    }\n\t\t    opt->rsa_mgf1_md = opt_md;\n\t\t} else if (tpl_terms[0] == atom_rsa_oaep_label\n\t\t\t   && enif_inspect_binary(env, tpl_terms[1], &(opt->rsa_oaep_label))) {\n#ifdef HAVE_RSA_OAEP_MD\n\t\t    continue;\n#else\n\t\t    return PKEY_NOTSUP;\n#endif\n\t\t} else if (tpl_terms[0] == atom_rsa_oaep_md && enif_is_atom(env, tpl_terms[1])) {\n#ifndef HAVE_RSA_OAEP_MD\n\t\t    if (tpl_terms[1] != atom_sha)\n\t\t\treturn PKEY_NOTSUP;\n#endif\n\t\t    i = get_pkey_digest_type(env, algorithm, tpl_terms[1], &opt_md);\n\t\t    if (i != PKEY_OK) {\n\t\t\treturn i;\n\t\t    }\n\t\t    opt->rsa_oaep_md = opt_md;\n\t\t} else {\n\t\t    return PKEY_BADARG;\n\t\t}\n\t    } else {\n\t\treturn PKEY_BADARG;\n\t    }\n\t}\n    } else {\n\treturn PKEY_BADARG;\n    }\n\n    return PKEY_OK;\n}\n\nstatic size_t size_of_RSA(EVP_PKEY *pkey) {\n    size_t tmplen;\n    RSA *rsa = EVP_PKEY_get1_RSA(pkey);\n    if (rsa == NULL) return 0;\n    tmplen = RSA_size(rsa);\n    RSA_free(rsa);\n    return tmplen;\n}\n\nstatic ERL_NIF_TERM pkey_crypt_nif(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])\n{/* (Algorithm, Data, PublKey=[E,N]|[E,N,D]|[E,N,D,P1,P2,E1,E2,C], Options, IsPrivate, IsEncrypt) */\n    int i;\n    EVP_PKEY *pkey;\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX *ctx;\n#else\n    RSA *rsa;\n#endif\n    PKeyCryptOptions crypt_opt;\n    ErlNifBinary in_bin, out_bin, tmp_bin;\n    size_t outlen;\n#ifdef HAVE_RSA_SSLV23_PADDING\n    size_t tmplen;\n#endif\n    int is_private = (argv[4] == atom_true),\n        is_encrypt = (argv[5] == atom_true);\n    int algo_init = 0;\n\n/* char algo[1024]; */\n\n#ifndef HAS_ENGINE_SUPPORT\n    if (enif_is_map(env, argv[2])) {\n        return atom_notsup;\n    }\n#endif\n\n    if (!enif_inspect_binary(env, argv[1], &in_bin)) {\n\treturn enif_make_badarg(env);\n    }\n\n    i = get_pkey_crypt_options(env, argv[0], argv[3], &crypt_opt);\n    if (i != PKEY_OK) {\n\tif (i == PKEY_NOTSUP)\n\t    return atom_notsup;\n\telse\n\t    return enif_make_badarg(env);\n    }\n\n    if (is_private) {\n\tif (get_pkey_private_key(env, argv[0], argv[2], &pkey) != PKEY_OK) {\n\t    return enif_make_badarg(env);\n\t}\n    } else {\n\tif (get_pkey_public_key(env, argv[0], argv[2], &pkey) != PKEY_OK) {\n\t    return enif_make_badarg(env);\n\t}\n    }\n\n    out_bin.data = NULL;\n    out_bin.size = 0;\n    tmp_bin.data = NULL;\n    tmp_bin.size = 0;\n\n#ifdef HAS_EVP_PKEY_CTX\n    ctx = EVP_PKEY_CTX_new(pkey, NULL);\n    if (!ctx) goto badarg;\n\n/* enif_get_atom(env,argv[0],algo,1024,ERL_NIF_LATIN1);  */\n\n    if (is_private) {\n        if (is_encrypt) {\n            /* private encrypt */\n            if ((algo_init=EVP_PKEY_sign_init(ctx)) <= 0) {\n                /* fprintf(stderr,\"BADARG %s private encrypt algo_init=%d %s:%d\\r\\n\", algo, algo_init, __FILE__, __LINE__); */\n                goto badarg;\n            }\n        } else {\n            /* private decrypt */\n            if ((algo_init=EVP_PKEY_decrypt_init(ctx)) <= 0) {\n                /* fprintf(stderr,\"BADARG %s private decrypt algo_init=%d %s:%d\\r\\n\", algo, algo_init, __FILE__, __LINE__); */\n                goto badarg;\n            }\n        }\n    } else {\n        if (is_encrypt) {\n            /* public encrypt */\n            if ((algo_init=EVP_PKEY_encrypt_init(ctx)) <= 0) {\n                /* fprintf(stderr,\"BADARG %s public encrypt algo_init=%d %s:%d\\r\\n\", algo,algo_init,__FILE__, __LINE__); */\n                goto badarg;\n            }\n        } else {\n            /* public decrypt */\n            if ((algo_init=EVP_PKEY_verify_recover_init(ctx)) <= 0) {\n                /* fprintf(stderr,\"BADARG %s public decrypt algo_init=%d %s:%d\\r\\n\", algo,algo_init,__FILE__, __LINE__); */\n                goto badarg;\n            }\n        }\n    }\n\n    if (argv[0] == atom_rsa) {\n\tif (crypt_opt.signature_md != NULL\n\t    && EVP_PKEY_CTX_set_signature_md(ctx, crypt_opt.signature_md) <= 0)\n\t\tgoto badarg;\n#ifdef HAVE_RSA_SSLV23_PADDING\n\tif (crypt_opt.rsa_padding == RSA_SSLV23_PADDING) {\n\t    if (is_encrypt) {\n                tmplen = size_of_RSA(pkey);\n                if (tmplen == 0) goto badarg;\n\t\tif (!enif_alloc_binary(tmplen, &tmp_bin)) goto badarg;\n\t\tif (RSA_padding_add_SSLv23(tmp_bin.data, tmplen, in_bin.data, in_bin.size) <= 0)\n\t\t    goto badarg;\n\t\tin_bin = tmp_bin;\n\t    }\n\t    if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_NO_PADDING) <= 0) goto badarg;\n\t} else\n#endif\n                {\n\t    if (EVP_PKEY_CTX_set_rsa_padding(ctx, crypt_opt.rsa_padding) <= 0) goto badarg;\n        }\n#ifdef HAVE_RSA_OAEP_MD\n\tif (crypt_opt.rsa_padding == RSA_PKCS1_OAEP_PADDING) {\n\t    if (crypt_opt.rsa_oaep_md != NULL\n\t\t&& EVP_PKEY_CTX_set_rsa_oaep_md(ctx, crypt_opt.rsa_oaep_md) <= 0)\n\t\tgoto badarg;\n\t    if (crypt_opt.rsa_mgf1_md != NULL\n\t\t&& EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, crypt_opt.rsa_mgf1_md) <= 0) goto badarg;\n\t    if (crypt_opt.rsa_oaep_label.data != NULL && crypt_opt.rsa_oaep_label.size > 0) {\n\t\tunsigned char *label_copy = NULL;\n\t\tlabel_copy = OPENSSL_malloc(crypt_opt.rsa_oaep_label.size);\n\t\tif (label_copy == NULL) goto badarg;\n\t\tmemcpy((void *)(label_copy), (const void *)(crypt_opt.rsa_oaep_label.data),\n\t\t       crypt_opt.rsa_oaep_label.size);\n\t\tif (EVP_PKEY_CTX_set0_rsa_oaep_label(ctx, label_copy,\n\t\t\t\t\t\t     crypt_opt.rsa_oaep_label.size) <= 0) {\n\t\t    OPENSSL_free(label_copy);\n\t\t    label_copy = NULL;\n\t\t    goto badarg;\n\t\t}\n\t    }\n\t}\n#endif\n    }\n\n    if (is_private) {\n\tif (is_encrypt) {\n\t    /* private_encrypt */\n\t    i = EVP_PKEY_sign(ctx, NULL, &outlen, in_bin.data, in_bin.size);\n\t} else {\n\t    /* private_decrypt */\n\t    i = EVP_PKEY_decrypt(ctx, NULL, &outlen, in_bin.data, in_bin.size);\n\t}\n    } else {\n\tif (is_encrypt) {\n\t    /* public_encrypt */\n\t    i = EVP_PKEY_encrypt(ctx, NULL, &outlen, in_bin.data, in_bin.size);\n\t} else {\n\t    /* public_decrypt */\n\t    i = EVP_PKEY_verify_recover(ctx, NULL, &outlen, in_bin.data, in_bin.size);\n\t}\n    }\n    /* fprintf(stderr,\"i = %d %s:%d\\r\\n\", i, __FILE__, __LINE__); */\n\n    if (i != 1) goto badarg;\n\n    enif_alloc_binary(outlen, &out_bin);\n\n    if (is_private) {\n\tif (is_encrypt) {\n\t    /* private_encrypt */\n\t    i = EVP_PKEY_sign(ctx, out_bin.data, &outlen, in_bin.data, in_bin.size);\n\t} else {\n\t    /* private_decrypt */\n\t    i = EVP_PKEY_decrypt(ctx, out_bin.data, &outlen, in_bin.data, in_bin.size);\n\t}\n    } else {\n\tif (is_encrypt) {\n\t    /* public_encrypt */\n\t    i = EVP_PKEY_encrypt(ctx, out_bin.data, &outlen, in_bin.data, in_bin.size);\n\t} else {\n\t    /* public_decrypt */\n\t    i = EVP_PKEY_verify_recover(ctx, out_bin.data, &outlen, in_bin.data, in_bin.size);\n\t}\n    }\n\n#else\n    /* Non-EVP cryptolib. Only support RSA */\n\n    if (argv[0] != atom_rsa) {\n        algo_init = -2;         /* exitcode: notsup */\n        goto badarg;\n    }\n    rsa = EVP_PKEY_get1_RSA(pkey);\n    enif_alloc_binary(RSA_size(rsa), &out_bin);\n\n    if (is_private) {\n        if (is_encrypt) {\n            /* non-evp rsa private encrypt */\n            ERL_VALGRIND_ASSERT_MEM_DEFINED(in_bin.data,in_bin.size);\n            i = RSA_private_encrypt(in_bin.size, in_bin.data,\n                                    out_bin.data, rsa, crypt_opt.rsa_padding);\n            if (i > 0) {\n                ERL_VALGRIND_MAKE_MEM_DEFINED(out_bin.data, i);\n            }\n        } else {\n            /* non-evp rsa private decrypt */\n            i = RSA_private_decrypt(in_bin.size, in_bin.data,\n                                    out_bin.data, rsa, crypt_opt.rsa_padding);\n            if (i > 0) {\n                ERL_VALGRIND_MAKE_MEM_DEFINED(out_bin.data, i);\n                enif_realloc_binary(&out_bin, i);\n            }\n        }\n    } else {\n        if (is_encrypt) {\n            /* non-evp rsa public encrypt */\n            ERL_VALGRIND_ASSERT_MEM_DEFINED(in_bin.data,in_bin.size);\n            i = RSA_public_encrypt(in_bin.size, in_bin.data,\n                                   out_bin.data, rsa, crypt_opt.rsa_padding);\n            if (i > 0) {\n                ERL_VALGRIND_MAKE_MEM_DEFINED(out_bin.data, i);\n\t}\n        } else {\n            /* non-evp rsa public decrypt */\n            i = RSA_public_decrypt(in_bin.size, in_bin.data,\n                                   out_bin.data, rsa, crypt_opt.rsa_padding);\n            if (i > 0) {\n                ERL_VALGRIND_MAKE_MEM_DEFINED(out_bin.data, i);\n                enif_realloc_binary(&out_bin, i);\n            }\n        }\n    }\n\n    outlen = i;\n    RSA_free(rsa);\n#endif\n\n    if ((i > 0) && argv[0] == atom_rsa && !is_encrypt) {\n#ifdef HAVE_RSA_SSLV23_PADDING\n\tif (crypt_opt.rsa_padding == RSA_SSLV23_PADDING) {\n\t    unsigned char *p;\n            tmplen = size_of_RSA(pkey);\n\t    if (tmplen == 0) goto badarg;\n\t    if (!enif_alloc_binary(tmplen, &tmp_bin))\n                goto badarg;\n\t    p = out_bin.data;\n\t    p++;\n\t    i = RSA_padding_check_SSLv23(tmp_bin.data, tmplen, p, out_bin.size - 1, tmplen);\n\t    if (i >= 0) {\n\t\toutlen = i;\n\t\tin_bin = out_bin;\n\t\tout_bin = tmp_bin;\n\t\ttmp_bin = in_bin;\n\t\ti = 1;\n\t    }\n\t}\n#endif\n    }\n\n    if (tmp_bin.data != NULL) {\n\tenif_release_binary(&tmp_bin);\n    }\n\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX_free(ctx);\n#else\n#endif\n    EVP_PKEY_free(pkey);\n    if (i > 0) {\n\tERL_VALGRIND_MAKE_MEM_DEFINED(out_bin.data, outlen);\n\tif (outlen != out_bin.size) {\n\t    enif_realloc_binary(&out_bin, outlen);\n\t    ERL_VALGRIND_ASSERT_MEM_DEFINED(out_bin.data, outlen);\n\t}\n\treturn enif_make_binary(env, &out_bin);\n    } else {\n\tenif_release_binary(&out_bin);\n\treturn atom_error;\n    }\n\n badarg:\n    if (out_bin.data != NULL) {\n\tenif_release_binary(&out_bin);\n    }\n    if (tmp_bin.data != NULL) {\n\tenif_release_binary(&tmp_bin);\n    }\n#ifdef HAS_EVP_PKEY_CTX\n    EVP_PKEY_CTX_free(ctx);\n#else\n#endif\n    EVP_PKEY_free(pkey);\n    if (algo_init == -2)\n        return atom_notsup;\n    else\n        return enif_make_badarg(env);\n}\n\n\n\n/*--------------------------------*/\nstatic ERL_NIF_TERM privkey_to_pubkey_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{ /* (Algorithm, PrivKey | KeyMap) */\n    EVP_PKEY *pkey;\n    ERL_NIF_TERM alg = argv[0];\n    ERL_NIF_TERM result[8];\n    if (get_pkey_private_key(env, alg, argv[1], &pkey) != PKEY_OK) {\n\treturn enif_make_badarg(env);\n    }\n\n    if (alg == atom_rsa) {\n        const BIGNUM *n = NULL, *e = NULL, *d = NULL;\n        RSA *rsa = EVP_PKEY_get1_RSA(pkey);\n        if (rsa) {\n            RSA_get0_key(rsa, &n, &e, &d);\n            result[0] = bin_from_bn(env, e);  // Exponent E\n            result[1] = bin_from_bn(env, n);  // Modulus N = p*q\n            RSA_free(rsa);\n            EVP_PKEY_free(pkey);\n            return enif_make_list_from_array(env, result, 2);\n        }\n\n    } else if (argv[0] == atom_dss) {\n        const BIGNUM *p = NULL, *q = NULL, *g = NULL, *pub_key = NULL;\n        DSA *dsa = EVP_PKEY_get1_DSA(pkey);\n        if (dsa) {\n            DSA_get0_pqg(dsa, &p, &q, &g);\n            DSA_get0_key(dsa, &pub_key, NULL);\n            result[0] = bin_from_bn(env, p);\n            result[1] = bin_from_bn(env, q);\n            result[2] = bin_from_bn(env, g);\n            result[3] = bin_from_bn(env, pub_key);\n\t    DSA_free(dsa);\n            EVP_PKEY_free(pkey);\n            return enif_make_list_from_array(env, result, 4);\n        }\n\n    } else if (argv[0] == atom_ecdsa) {\n#if defined(HAVE_EC)\n        /* not yet implemented\n          EC_KEY *ec = EVP_PKEY_get1_EC_KEY(pkey);\n          if (ec) {\n          / * Example of result:\n               {\n                 Curve =  {Field, Prime, Point, Order, CoFactor} =\n                    {\n                      Field =  {prime_field,<<255,...,255>>},\n                      Prime = {<<255,...,252>>,\n                               <<90,...,75>>,\n                               <<196,...,144>>\n                              },\n                      Point =    <<4,...,245>>,\n                      Order =    <<255,...,81>>,\n                      CoFactor = <<1>>\n                    },\n                Key = <<151,...,62>>\n                }\n              or\n              {\n                Curve =\n                    {characteristic_two_field,\n                     M,\n                     Basis = {tpbasis, _}\n                           | {ppbasis, k1, k2, k3}\n                    },\n                Key\n               }\n        * /\n            EVP_PKEY_free(pkey);\n            return enif_make_list_from_array(env, ..., ...);\n        */\n#endif\n    }\n\n    if (pkey) EVP_PKEY_free(pkey);\n    return enif_make_badarg(env);\n}\n\n/*================================================================*/\n\nstatic ERL_NIF_TERM rand_seed_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    ErlNifBinary seed_bin;\n\n    if (!enif_inspect_binary(env, argv[0], &seed_bin))\n        return enif_make_badarg(env);\n    RAND_seed(seed_bin.data,seed_bin.size);\n    return atom_ok;\n}\n\n/*================================================================*/\n/* Engine */\n/*================================================================*/\nstatic ERL_NIF_TERM engine_by_id_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (EngineId) */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM ret;\n    ErlNifBinary engine_id_bin;\n    char *engine_id;\n    ENGINE *engine;\n    struct engine_ctx *ctx;\n\n    // Get Engine Id\n    if(!enif_inspect_binary(env, argv[0], &engine_id_bin)) {\n        PRINTF_ERR0(\"engine_by_id_nif Leaved: badarg\");\n        return enif_make_badarg(env);\n    } else {\n        engine_id = enif_alloc(engine_id_bin.size+1);\n        (void) memcpy(engine_id, engine_id_bin.data, engine_id_bin.size);\n        engine_id[engine_id_bin.size] = '\\0';\n    }\n\n    engine = ENGINE_by_id(engine_id);\n    if(!engine) {\n        enif_free(engine_id);\n        PRINTF_ERR0(\"engine_by_id_nif Leaved: {error, bad_engine_id}\");\n        return enif_make_tuple2(env, atom_error, atom_bad_engine_id);\n    }\n\n    ctx = enif_alloc_resource(engine_ctx_rtype, sizeof(struct engine_ctx));\n    ctx->engine = engine;\n    ctx->id = engine_id;\n\n    ret = enif_make_resource(env, ctx);\n    enif_release_resource(ctx);\n\n    return enif_make_tuple2(env, atom_ok, ret);\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_init_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM ret = atom_ok;\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_init_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n    if (!ENGINE_init(ctx->engine)) {\n        //ERR_print_errors_fp(stderr);\n        PRINTF_ERR0(\"engine_init_nif Leaved: {error, engine_init_failed}\");\n        return enif_make_tuple2(env, atom_error, atom_engine_init_failed);\n    }\n\n    return ret;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_free_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_free_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    ENGINE_free(ctx->engine);\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_finish_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_finish_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    ENGINE_finish(ctx->engine);\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_load_dynamic_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* () */\n#ifdef HAS_ENGINE_SUPPORT\n    ENGINE_load_dynamic();\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_ctrl_cmd_strings_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine, Commands) */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM ret = atom_ok;\n    unsigned int cmds_len = 0;\n    char **cmds = NULL;\n    struct engine_ctx *ctx;\n    int i, optional = 0;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_ctrl_cmd_strings_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    PRINTF_ERR1(\"Engine Id:  %s\\r\\n\", ENGINE_get_id(ctx->engine));\n\n    // Get Command List\n    if(!enif_get_list_length(env, argv[1], &cmds_len)) {\n        PRINTF_ERR0(\"engine_ctrl_cmd_strings_nif Leaved: Bad Command List\");\n        return enif_make_badarg(env);\n    } else {\n        cmds_len *= 2; // Key-Value list from erlang\n        cmds = enif_alloc((cmds_len+1)*sizeof(char*));\n        if(get_engine_load_cmd_list(env, argv[1], cmds, 0)) {\n            PRINTF_ERR0(\"engine_ctrl_cmd_strings_nif Leaved: Couldn't read Command List\");\n            ret = enif_make_badarg(env);\n            goto error;\n        }\n    }\n\n    if(!enif_get_int(env, argv[2], &optional)) {\n        PRINTF_ERR0(\"engine_ctrl_cmd_strings_nif Leaved: Parameter optional not an integer\");\n        return enif_make_badarg(env);\n    }\n\n    for(i = 0; i < cmds_len; i+=2) {\n        PRINTF_ERR2(\"Cmd:  %s:%s\\r\\n\",\n                   cmds[i] ? cmds[i] : \"(NULL)\",\n                   cmds[i+1] ? cmds[i+1] : \"(NULL)\");\n        if(!ENGINE_ctrl_cmd_string(ctx->engine, cmds[i], cmds[i+1], optional)) {\n            PRINTF_ERR2(\"Command failed:  %s:%s\\r\\n\",\n                        cmds[i] ? cmds[i] : \"(NULL)\",\n                        cmds[i+1] ? cmds[i+1] : \"(NULL)\");\n            //ENGINE_free(ctx->engine);\n            ret = enif_make_tuple2(env, atom_error, atom_ctrl_cmd_failed);\n            PRINTF_ERR0(\"engine_ctrl_cmd_strings_nif Leaved: {error, ctrl_cmd_failed}\");\n            goto error;\n        }\n    }\n\n error:\n    for(i = 0; cmds != NULL && cmds[i] != NULL; i++)\n        enif_free(cmds[i]);\n    enif_free(cmds);\n    return ret;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_add_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_add_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    if (!ENGINE_add(ctx->engine)) {\n        PRINTF_ERR0(\"engine_add_nif Leaved: {error, add_engine_failed}\");\n        return enif_make_tuple2(env, atom_error, atom_add_engine_failed);\n    }\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_remove_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_remove_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    if (!ENGINE_remove(ctx->engine)) {\n        PRINTF_ERR0(\"engine_remove_nif Leaved: {error, remove_engine_failed}\");\n        return enif_make_tuple2(env, atom_error, atom_remove_engine_failed);\n    }\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_register_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine, EngineMethod) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n    unsigned int method;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_register_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n    // Get Method\n    if (!enif_get_uint(env, argv[1], &method)) {\n        PRINTF_ERR0(\"engine_register_nif Leaved: Parameter Method not an uint\");\n        return enif_make_badarg(env);\n    }\n\n    switch(method)\n    {\n#ifdef ENGINE_METHOD_RSA\n    case ENGINE_METHOD_RSA:\n        if (!ENGINE_register_RSA(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DSA\n    case ENGINE_METHOD_DSA:\n        if (!ENGINE_register_DSA(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DH\n    case ENGINE_METHOD_DH:\n        if (!ENGINE_register_DH(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_RAND\n    case ENGINE_METHOD_RAND:\n        if (!ENGINE_register_RAND(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_ECDH\n    case ENGINE_METHOD_ECDH:\n        if (!ENGINE_register_ECDH(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_ECDSA\n    case ENGINE_METHOD_ECDSA:\n        if (!ENGINE_register_ECDSA(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_STORE\n    case ENGINE_METHOD_STORE:\n        if (!ENGINE_register_STORE(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_CIPHERS\n    case ENGINE_METHOD_CIPHERS:\n        if (!ENGINE_register_ciphers(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DIGESTS\n    case ENGINE_METHOD_DIGESTS:\n        if (!ENGINE_register_digests(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_PKEY_METHS\n    case ENGINE_METHOD_PKEY_METHS:\n        if (!ENGINE_register_pkey_meths(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_PKEY_ASN1_METHS\n    case ENGINE_METHOD_PKEY_ASN1_METHS:\n        if (!ENGINE_register_pkey_asn1_meths(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n#ifdef ENGINE_METHOD_EC\n    case ENGINE_METHOD_EC:\n        if (!ENGINE_register_EC(ctx->engine))\n            return enif_make_tuple2(env, atom_error, atom_register_engine_failed);\n        break;\n#endif\n    default:\n        return  enif_make_tuple2(env, atom_error, atom_engine_method_not_supported);\n        break;\n    }\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_unregister_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine, EngineMethod) */\n#ifdef HAS_ENGINE_SUPPORT\n    struct engine_ctx *ctx;\n    unsigned int method;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_unregister_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n    // Get Method\n    if (!enif_get_uint(env, argv[1], &method)) {\n        PRINTF_ERR0(\"engine_unregister_nif Leaved: Parameter Method not an uint\");\n        return enif_make_badarg(env);\n    }\n\n    switch(method)\n    {\n#ifdef ENGINE_METHOD_RSA\n    case ENGINE_METHOD_RSA:\n        ENGINE_unregister_RSA(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DSA\n    case ENGINE_METHOD_DSA:\n        ENGINE_unregister_DSA(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DH\n    case ENGINE_METHOD_DH:\n        ENGINE_unregister_DH(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_RAND\n    case ENGINE_METHOD_RAND:\n        ENGINE_unregister_RAND(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_ECDH\n    case ENGINE_METHOD_ECDH:\n        ENGINE_unregister_ECDH(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_ECDSA\n    case ENGINE_METHOD_ECDSA:\n        ENGINE_unregister_ECDSA(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_STORE\n    case ENGINE_METHOD_STORE:\n        ENGINE_unregister_STORE(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_CIPHERS\n    case ENGINE_METHOD_CIPHERS:\n        ENGINE_unregister_ciphers(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_DIGESTS\n    case ENGINE_METHOD_DIGESTS:\n        ENGINE_unregister_digests(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_PKEY_METHS\n    case ENGINE_METHOD_PKEY_METHS:\n        ENGINE_unregister_pkey_meths(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_PKEY_ASN1_METHS\n    case ENGINE_METHOD_PKEY_ASN1_METHS:\n        ENGINE_unregister_pkey_asn1_meths(ctx->engine);\n        break;\n#endif\n#ifdef ENGINE_METHOD_EC\n    case ENGINE_METHOD_EC:\n        ENGINE_unregister_EC(ctx->engine);\n        break;\n#endif\n    default:\n        break;\n    }\n    return atom_ok;\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_get_first_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM ret;\n    ENGINE *engine;\n    ErlNifBinary engine_bin;\n    struct engine_ctx *ctx;\n\n    engine = ENGINE_get_first();\n    if(!engine) {\n        enif_alloc_binary(0, &engine_bin);\n        engine_bin.size = 0;\n        return enif_make_tuple2(env, atom_ok, enif_make_binary(env, &engine_bin));\n    }\n\n    ctx = enif_alloc_resource(engine_ctx_rtype, sizeof(struct engine_ctx));\n    ctx->engine = engine;\n    ctx->id = NULL;\n\n    ret = enif_make_resource(env, ctx);\n    enif_release_resource(ctx);\n\n    return enif_make_tuple2(env, atom_ok, ret);\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_get_next_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM ret;\n    ENGINE *engine;\n    ErlNifBinary engine_bin;\n    struct engine_ctx *ctx, *next_ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_get_next_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n    engine = ENGINE_get_next(ctx->engine);\n    if (!engine) {\n        enif_alloc_binary(0, &engine_bin);\n        engine_bin.size = 0;\n        return enif_make_tuple2(env, atom_ok, enif_make_binary(env, &engine_bin));\n    }\n\n    next_ctx = enif_alloc_resource(engine_ctx_rtype, sizeof(struct engine_ctx));\n    next_ctx->engine = engine;\n    next_ctx->id = NULL;\n\n    ret = enif_make_resource(env, next_ctx);\n    enif_release_resource(next_ctx);\n\n    return enif_make_tuple2(env, atom_ok, ret);\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_get_id_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    ErlNifBinary engine_id_bin;\n    const char *engine_id;\n    int size;\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_get_id_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    engine_id = ENGINE_get_id(ctx->engine);\n    if (!engine_id) {\n        enif_alloc_binary(0, &engine_id_bin);\n        engine_id_bin.size = 0;\n        return enif_make_binary(env, &engine_id_bin);\n    }\n\n    size = strlen(engine_id);\n    enif_alloc_binary(size, &engine_id_bin);\n    engine_id_bin.size = size;\n    memcpy(engine_id_bin.data, engine_id, size);\n\n    return enif_make_binary(env, &engine_id_bin);\n#else\n    return atom_notsup;\n#endif\n}\n\nstatic ERL_NIF_TERM engine_get_name_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* (Engine) */\n#ifdef HAS_ENGINE_SUPPORT\n    ErlNifBinary engine_name_bin;\n    const char *engine_name;\n    int size;\n    struct engine_ctx *ctx;\n\n    // Get Engine\n    if (!enif_get_resource(env, argv[0], engine_ctx_rtype, (void**)&ctx)) {\n        PRINTF_ERR0(\"engine_get_id_nif Leaved: Parameter not an engine resource object\");\n        return enif_make_badarg(env);\n    }\n\n    engine_name = ENGINE_get_name(ctx->engine);\n    if (!engine_name) {\n        enif_alloc_binary(0, &engine_name_bin);\n        engine_name_bin.size = 0;\n        return enif_make_binary(env, &engine_name_bin);\n    }\n\n    size = strlen(engine_name);\n    enif_alloc_binary(size, &engine_name_bin);\n    engine_name_bin.size = size;\n    memcpy(engine_name_bin.data, engine_name, size);\n\n    return enif_make_binary(env, &engine_name_bin);\n#else\n    return atom_notsup;\n#endif\n}\n\n#ifdef HAS_ENGINE_SUPPORT\nstatic int get_engine_load_cmd_list(ErlNifEnv* env, const ERL_NIF_TERM term, char **cmds, int i)\n{\n    ERL_NIF_TERM head, tail;\n    const ERL_NIF_TERM *tmp_tuple;\n    ErlNifBinary tmpbin;\n    int arity;\n    char* tmpstr;\n\n    if(!enif_is_empty_list(env, term)) {\n        if(!enif_get_list_cell(env, term, &head, &tail)) {\n            cmds[i] = NULL;\n            return -1;\n        } else {\n            if(!enif_get_tuple(env, head, &arity, &tmp_tuple)  || arity != 2) {\n                cmds[i] = NULL;\n                return -1;\n            } else {\n                if(!enif_inspect_binary(env, tmp_tuple[0], &tmpbin)) {\n                    cmds[i] = NULL;\n                    return -1;\n                } else {\n                    tmpstr = enif_alloc(tmpbin.size+1);\n                    (void) memcpy(tmpstr, tmpbin.data, tmpbin.size);\n                    tmpstr[tmpbin.size] = '\\0';\n                    cmds[i++] = tmpstr;\n                }\n                if(!enif_inspect_binary(env, tmp_tuple[1], &tmpbin)) {\n                    cmds[i] = NULL;\n                    return -1;\n                } else {\n                    if(tmpbin.size == 0)\n                        cmds[i++] = NULL;\n                    else {\n                        tmpstr = enif_alloc(tmpbin.size+1);\n                        (void) memcpy(tmpstr, tmpbin.data, tmpbin.size);\n                        tmpstr[tmpbin.size] = '\\0';\n                        cmds[i++] = tmpstr;\n                    }\n                }\n                return get_engine_load_cmd_list(env, tail, cmds, i);\n            }\n        }\n    } else {\n        cmds[i] = NULL;\n        return 0;\n    }\n}\n#endif\n\nstatic ERL_NIF_TERM engine_get_all_methods_nif(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{/* () */\n#ifdef HAS_ENGINE_SUPPORT\n    ERL_NIF_TERM method_array[12];\n    int i = 0;\n\n#ifdef ENGINE_METHOD_RSA\n    method_array[i++] = atom_engine_method_rsa;\n#endif\n#ifdef ENGINE_METHOD_DSA\n    method_array[i++] = atom_engine_method_dsa;\n#endif\n#ifdef ENGINE_METHOD_DH\n    method_array[i++] = atom_engine_method_dh;\n#endif\n#ifdef ENGINE_METHOD_RAND\n    method_array[i++] = atom_engine_method_rand;\n#endif\n#ifdef ENGINE_METHOD_ECDH\n    method_array[i++] = atom_engine_method_ecdh;\n#endif\n#ifdef ENGINE_METHOD_ECDSA\n    method_array[i++] = atom_engine_method_ecdsa;\n#endif\n#ifdef ENGINE_METHOD_STORE\n    method_array[i++] = atom_engine_method_store;\n#endif\n#ifdef ENGINE_METHOD_CIPHERS\n    method_array[i++] = atom_engine_method_ciphers;\n#endif\n#ifdef ENGINE_METHOD_DIGESTS\n    method_array[i++] = atom_engine_method_digests;\n#endif\n#ifdef ENGINE_METHOD_PKEY_METHS\n    method_array[i++] = atom_engine_method_pkey_meths;\n#endif\n#ifdef ENGINE_METHOD_PKEY_ASN1_METHS\n    method_array[i++] = atom_engine_method_pkey_asn1_meths;\n#endif\n#ifdef ENGINE_METHOD_EC\n    method_array[i++] = atom_engine_method_ec;\n#endif\n\n    return enif_make_list_from_array(env, method_array, i);\n#else\n    return atom_notsup;\n#endif\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/oam/snmp_model_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/oam/snmp_model_3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/oam/terminology.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/oam/snmp_model_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/tutorial/port_driver.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/tutorial/port.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/dist3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/dist5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/dist4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/code_lock_2.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/dist2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/dist1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/inclappls.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/sup6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/sup4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/clientserver.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/code_lock.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/system/doc/design_principles/sup5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/bootstrap/bin/no_dot_erlang.boot",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/bootstrap/bin/start.boot",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/bootstrap/bin/start_clean.boot",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erl_prim_loader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/zlib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/prim_zip.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/otp_ring0.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/persistent_term.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/atomics.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/prim_eval.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erts_code_purger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/counters.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erts_dirty_process_signal_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/prim_buffer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erl_tracer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/prim_inet.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erts_literal_area_collector.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/prim_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erlang.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/init.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/preloaded/ebin/erts_internal.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/test/nt_SUITE_data/nt_info.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/test/erl_print_SUITE_data/erl_print_tests.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/test/erl_print_SUITE_data/character_test.h",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/test/erl_print_SUITE_data/string_test.h",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/test/erl_print_SUITE_data/snprintf_test.h",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/hrl_icon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/erl_icon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/beam_icon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/erlang.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/beam.rc",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/cygwin_tools/vc/ld_wrap.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/cygwin_tools/vc/cc_wrap.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/nsis/custom_modern.exe",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/nsis/erlang_inst.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/etc/win32/nsis/erlang_uninst.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/doc/src/erl_fix_alloc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/doc/src/erl_ext_fig.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-start.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-rootset-scan.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-watermark.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-watermark-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-heap-stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-heap-scan1.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-rootset-scan.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-start.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-watermark-2.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-heap-scan1.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-watermark.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/internal_doc/figures/gc-heap-stop.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/pcre/pcre_latin_1_table.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/pcre/pcre-8.42.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/test/send_term_SUITE_data/ext_terms.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/test/map_SUITE_data/badmap_17.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/hipe/hipe_x86.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/hipe/hipe_amd64.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/erts/emulator/hipe/hipe_amd64_abi.txt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_kernel_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_frag_hash.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_index.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_backend_type.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_sp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_dumper.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_event.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_locker.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_loader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_bup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_text.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_registry.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_subscr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_checkpoint_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_frag.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_snmp_hook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_late_loader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_monitor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_checkpoint.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_tm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_schema.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_ext_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_controller.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_recover.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/ebin/mnesia_backup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/doc/src/company.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/mnesia/doc/misc/implementation.txt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_listen_tracker_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_record.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_record.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_socket.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_connection.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_certificate.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_crl_cache_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_sender.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_dist_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_packet_demux.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_dist_admin_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_pkix_db.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_crl_cache.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_manager.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/inet_tls_dist.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_crl_hash_dir.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_crl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_session_cache.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_alert.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_dist_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_connection.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_handshake.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_session.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_socket.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_pem_cache.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_srp_primes.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_listener_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_cipher_format.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_handshake.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_handshake.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_admin_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_session_cache_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/tls_connection.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_cipher.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/inet6_tls_dist.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/dtls_record.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/ebin/ssl_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssl/examples/ebin/client_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_run.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_config_xml.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_gen_conn.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_ssh.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_slave.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/unix_telnet.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/erl2html2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_framework.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_hooks_lock.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_master_event.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/vts.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_telnet.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_rpc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_ftp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_telnet_client.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_master_logs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server_gl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_config_plain.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/cth_conn_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_release_test.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_property_test.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_conn_log_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_testspec.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_hooks.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_cover.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_default_gl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_netconfc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_event.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/cth_log_redirect.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server_ctrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/cth_surefire.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_repeat.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_groups.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server_io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_logs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_webtool_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_master_status.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_webtool.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_snmp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_master.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/ct_make.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/ebin/test_server_node.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/priv/tile1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/test_server/configure.in",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/doc/src/config.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/doc/src/tc_execution.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/doc/src/html_logs.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/common_test/doc/src/filestruct.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/OTP-PUB-KEY.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_cert.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/public_key.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/PKCS-FRAME.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_cert_records.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_ssh.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_pem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_pbe.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/ebin/pubkey_crl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/test/pkits_SUITE_data/pkits/certs/TrustAnchorRootCertificate.crt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/asn1/OTP-PUB-KEY.asn1db",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/public_key/asn1/PKCS-FRAME.asn1db",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_tags.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_macros.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_scanner.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_parser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_doclet.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_extract.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_layout.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_data.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_types.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_wiki.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_specs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_report.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_refs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/ebin/edoc_run.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/priv/erlang.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/test/edoc_SUITE_data/un2.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/test/edoc_SUITE_data/un1.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/test/edoc_SUITE_data/un3.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/edoc/test/edoc_SUITE_data/un_atom1.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_supervisor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_local_db.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_trap.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_net_if.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_storage_mnesia.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_server_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_target_cache.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_conf.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_net_if_mt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_discovery_handler_default.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_acm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_misc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc_tok.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_svbl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_authentication_service.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_error_io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_conf.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_mpd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_set_mechanism.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_notification_delivery_info_receiver.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_standard_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_network_interface_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_storage_ets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_user_old.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mpd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_conf.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_user_default.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_usm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_misc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_agent_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_note_store.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_shadow_table.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_view_based_acm_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_set.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_error_report.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_net_if.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_storage_dets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_error.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_net_if_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_network_interface.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_usm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_user_based_sm_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_generic_mnesia.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_index.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_target_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_symbolic_store.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_vacm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_network_interface.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_verbosity.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_data.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_generic.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_community_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_agent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_net_if_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc_misc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_pdus.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_error_logger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_user.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_notification_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_supervisor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_usm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_mini_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_set_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc_mib_to_hrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_storage.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_discovery_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_framework_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_notification_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_app_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmp_misc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpm_network_interface_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpa_mib_data_tttn.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/ebin/snmpc_mib_gram.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-VIEW-BASED-ACM-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-USM-AES-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/TRANSPORT-ADDRESS-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/OTP-REG.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-TARGET-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/RFC1213-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMPv2-TM.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-COMMUNITY-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/STANDARD-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-NOTIFICATION-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMPv2-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-FRAMEWORK-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/INET-ADDRESS-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-MPD-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/OTP-SNMPEA-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/priv/mibs/SNMP-USER-BASED-SM-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_v3_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_v1_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_v2_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_mt_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_bl_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/exp/snmp_agent_ms_test.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/test/snmp_to_snmpnet_SUITE_data/TestTrapv2.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/examples/ex2/snmp_ex2_simple_standard_test.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/examples/ex2/snmp_ex2_manager.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/examples/ex1/ex1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/examples/ex1/EX1-MIBv2.mib",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/examples/ex1/EX1-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/MIB_mechanism.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/getnext4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/getnext2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/getnext1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp-um-1-image-1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/structure.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp_manager_netif_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp_agent_netif_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp-um-1-image-8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp-um-1-image-3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/getnext3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/snmp/doc/src/snmp-um-1-image-2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_binary.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_logger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_engine.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tftp/ebin/tftp_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMessageDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxEraseEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCalendarDateAttr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTreebook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsFont.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellNumberRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMenu.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiDockArt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTreeCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFont.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxLayoutAlgorithm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxScrolledWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxe_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBitmap.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStyledTextCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxProgressDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCloseEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFocusEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAcceleratorTable.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMirrorDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSplitterEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrintData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMenuItem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMemoryDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxControlWithItems.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxContextMenuEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTopLevelWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxInitDialogEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxClipboardTextEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFlexGridSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxScrollEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTextDataObject.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStaticLine.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxImageList.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFontPickerCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrintDialogData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxLogNull.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxColourDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxIconBundle.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDropFilesEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDatePickerCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wx_object.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxHtmlLinkEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxToggleButton.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxNotebook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFontData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMenuBar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxComboBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSingleChoiceDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFontDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMDIChildFrame.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListbook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPaletteChangedEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBrush.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsPen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsPath.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiNotebookEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMouseCaptureLostEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridBagSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStyledTextEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSizerFlags.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxToolBar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCheckBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxHelpEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStaticBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPopupWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFileDataObject.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPreviewFrame.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSlider.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxRadioBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxEvtHandler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFileDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPasswordEntryDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxToolbook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFileDirPickerEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPostScriptDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMDIParentFrame.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsBrush.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellChoiceEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxUpdateUIEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDateEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxWindowCreateEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGenericDirCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxArtProvider.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxRegion.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxClipboard.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStaticText.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPaintEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTextAttr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxIcon.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiTabArt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiSimpleTabArt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrintout.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxScreenDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSplashScreen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBitmapDataObject.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTreeEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxWindowDestroyEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDisplayChangedEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPreviewControlBar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxLocale.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPopupTransientWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCheckListBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTextCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxHtmlWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxImage.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxe_master.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGrid.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellFloatRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCommandEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListItem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxNavigationKeyEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxQueryNewPaletteEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/gl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFilePickerCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSetCursorEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStdDialogButtonSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxRadioButton.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxClientDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wx_misc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxe_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxColourData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSystemSettings.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPickerBase.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSpinCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxChildFocusEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStatusBar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTextEntryDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSpinEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPalette.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxChoicebook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStaticBitmap.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDataObject.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFindReplaceData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAcceleratorEntry.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxActivateEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxJoystickEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCalendarEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPageSetupDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxKeyEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSplitterWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSashEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBufferedDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBoxSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGLCanvas.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiManager.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCalendarCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellNumberEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxButton.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFindReplaceDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxOverlay.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMouseCaptureChangedEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMoveEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMDIClientWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGBSizerItem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPanel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxXmlResource.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTaskBarIcon.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxChoice.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSashLayoutWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGauge.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSizerItem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPageSetupDialogData.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxScrollWinEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPaintDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellTextEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListItemAttr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxControl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellStringRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxWindowDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCursor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellBoolEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxListView.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxIconizeEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMouseEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiNotebook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsContext.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxToolTip.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/glu.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDirPickerCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellBoolRenderer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrinter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellFloatEditor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGridCellAttr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBitmapButton.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxStaticBoxSizer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrintDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMultiChoiceDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxCaret.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxNotebookEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsMatrix.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxScrollBar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSizeEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMask.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMenuEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPreviewCanvas.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFrame.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDirDialog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxBufferedPaintDC.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSashWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiPaneInfo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxDCOverlay.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxIdleEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxColourPickerEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSpinButton.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxAuiManagerEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMaximizeEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxFontPickerEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxShowEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxPrintPreview.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxGraphicsObject.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSysColourChangedEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxNotifyEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxColourPickerCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxTaskBarIconEvent.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxSystemOptions.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxMiniFrame.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/ebin/wxHtmlEasyPrinting.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/priv/erlang-logo64.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/priv/erlang-logo128.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/priv/erlang-logo32.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_splitterWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/erlang.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_static.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_sashWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/demo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_choices.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_graphicsContext.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_gl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_popupMenu.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_slider.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_textCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_dialogs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_gauge.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_treeCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_button.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_notebook.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/demo_html_tagger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_frame_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_htmlWindow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_canvas.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/image.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_grid.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_sizers.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_aui.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_radioBox.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_listCtrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_cursor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_pickers.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/demo/ex_canvas_paint.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/sudoku/sudoku_board.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/sudoku/sudoku_gui.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/sudoku/sudoku_game.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/sudoku/sudoku.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/simple/minimal.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/simple/hello2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/simple/hello.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/simple/menu.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/xrc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/filesave.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/appicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/update.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/quotes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/fuzzy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/wx/examples/xrc/rc/fileopen.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/wrap_log_reader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_distribution.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/gen_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/hipe_unified_loader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_hosts.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_sctp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_res.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/application.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erts_debug.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_disk_log_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/standard_error.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/net.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/code_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_dns.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/group_history.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet6_sctp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_backend.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/global_group.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/user_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_epmd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/local_udp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_tcp_dist.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_std_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/rpc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet6_tcp_dist.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/user.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/kernel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/dist_ac.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_boot_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_handler_watcher.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_ddll.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_formatter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_delayed.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/disk_log_1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/file_io_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/pg2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/application_starter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/net_kernel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/seq_trace.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_inflate.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/dist_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/heart.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_raw.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/disk_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/gen_udp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_udp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_h_common.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet6_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/application_master.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_simple_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/error_logger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/kernel_refc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/os.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/user_drv.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/global_search.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/kernel_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/net_adm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/file_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_list.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/disk_log_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/group.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/code.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_parse.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_db.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/global.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_signal_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/erl_reply.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/local_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/gen_sctp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/application_controller.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/ram_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/error_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/logger_filters.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet6_udp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_deflate.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/inet_gethost_native.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/disk_log_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/raw_file_io_compressed.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/ebin/auth.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/os_SUITE_data/win32/abin/hello.exe",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/os_SUITE_data/win32/abin/my_ascii.com",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/prim_file_SUITE_data/corrupted.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/prim_file_SUITE_data/realmen.html.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/code_SUITE_data/clash/zork-0.8.ez",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/code_SUITE_data/clash/foobar-0.1.ez",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/file_SUITE_data/corrupted.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/file_SUITE_data/cooked_tar_problem.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/file_SUITE_data/realmen.html.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt2.LOG.2",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt.LOG.4",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt.LOG.3",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt2.LOG.1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt.LOG.1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/old_terms.LOG",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt2.LOG.3",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt2.LOG.4",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/disk_log_SUITE_data/kurt.LOG.2",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/zlib_SUITE_data/zipdoc.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/zlib_SUITE_data/zipdoc.1.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/zlib_SUITE_data/png-compressed.zlib",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/zlib_SUITE_data/zipdoc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/ram_file_SUITE_data/corrupted.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/test/ram_file_SUITE_data/realmen.html.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/doc/src/logger_arch.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/kernel/doc/src/logger_arch.dia",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/ttb_autostart.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/runtime_tools.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/dyntrace.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/erts_alloc_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/system_information.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/appmon_info.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/observer_backend.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/scheduler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/dbg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/runtime_tools_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/runtime_tools/ebin/msacc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_transport_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_dbg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_service_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_sctp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_traffic.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_transport.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_dict_scanner.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_make.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_relay.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_sync.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_misc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_peer_fsm_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_base_accounting.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_codec.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_etcp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_etcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_callback.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_reg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_stats.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_codegen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_watchdog_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_dict_parser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_service.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_acct_rfc6733.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_base_rfc3588.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_base_rfc6733.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_dict_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_session.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_gen_doic_rfc7683.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_peer_fsm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_peer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_exprecs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_tcp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_capx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_info.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_types.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_watchdog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_config_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/diameter/ebin/diameter_sctp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_dataflow.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_explanation.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_coordinator.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/typer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_cl_parse.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_options.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_plt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_succ_typings.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_typesig.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_contracts.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_worker.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_analysis_callgraph.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_callgraph.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_gui_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_codeserver.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_race_data_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_races.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_cl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_timing.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_dep.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/dialyzer/ebin/dialyzer_behaviours.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et_viewer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et_selector.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et_wx_viewer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et_collector.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et_wx_contents_viewer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/ebin/et.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/examples/et_demo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/examples/et_trace_demo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/examples/et_display_demo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans_contents_viewer_mgr_actors.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans_contents_viewer_collector.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/coffee_order.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans_move_actor.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans_mgr_actors.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/megaco_tracer.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/sim_trans_write_lock.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/megaco_filter.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/megaco_collector.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/et/doc/src/live_trans.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/cpu_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/os_mon_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/memsup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/os_mon_sysinfo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/disksup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/os_mon.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/nteventlog.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/ebin/os_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/priv/mibs/OTP-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/priv/mibs/OTP-REG.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/priv/mibs/OTP-OS-MON-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/os_mon/priv/mibs/OTP-TC.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_proc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_tty.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_surefire.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_listener.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_autoexport.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_serial.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_test.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_striptests.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_tests.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/ebin/eunit_data.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eunit/test/tlatin.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_fgraph_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_sys_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_fgraph.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_app_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_mod_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_target.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/reltool/ebin/reltool_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/systools_make.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/sasl_report_tty_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/rb_format_supp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/systools_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/erlsrv.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/systools_rc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/release_handler_1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/alarm_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/systools.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/release_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/sasl_report.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/sasl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/systools_relup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/sasl_report_file_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/misc_supp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/format_lib_supp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/ebin/rb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/sasl/examples/ebin/target_system.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/v3_codegen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/cerl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_record.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_bs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_clean.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_alias.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_disasm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_opcodes.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/v3_core.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_type.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/core_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/compile.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_z.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_jump.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/erl_bifs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/core_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_fold.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_dsetel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/cerl_trees.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_bsm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_flatten.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_dict.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_fold_lists.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/cerl_clauses.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_block.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/v3_kernel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_validator.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/cerl_sets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/core_pp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_except.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/cerl_inline.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_inline.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_listing.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_trim.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/core_parse.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/rec_env.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_pre_attributes.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/v3_kernel_pp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_dead.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_receive.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/core_lint.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_peep.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_asm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_reorder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/sys_core_bsm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/ebin/beam_split.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/compiler/test/compile_SUITE_data/key_compatibility.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_cookie.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_response.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_acceptor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_alias.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_auth_dets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_trace.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_chunk.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_auth_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_acceptor_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_get.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_custom_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_service.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_misc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_conf.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_manager.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_auth_mnesia.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_browser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_security_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_range.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_tftp_wrapper.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_auth_plain.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_security.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_esi.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_script_env.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_request.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_profile_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_response.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_disk_log.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_uri.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_trace.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_manager.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_example.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_handler_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_cgi.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_instance_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_request.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_esi.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_actions.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_response.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_ftp_wrapper.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_socket.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_dir.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/inets_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_request_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_head.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_request.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_responsecontrol.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_cgi.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_htaccess.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/mod_auth.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_custom.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpc_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/httpd_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/ebin/http_transport.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/a.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/back.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/uu.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie0.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/sound2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/hand.right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/compressed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/ps.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/continued.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/tex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/generic.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/poweredby.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/tar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/comp.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/buttonl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/generic.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/comp.blue.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/image3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/generic.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/star_blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/image1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/quill.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/broken.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/bomb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/alert.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button10.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/dir.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/index.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/dvi.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/binhex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/left.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/sphere2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/box2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/icon.sheet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/star.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/c.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/unknown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/world2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/patch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/burst.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/layout.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/world1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/link.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/ball.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/movie.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/htdig.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/sphere1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/sound1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/folder.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/script.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/uuencoded.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/p.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/f.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/ball.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/forward.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/folder.open.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/apache_pb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/hand.up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/transfer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/portal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/screw1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/screw2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/binary.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/box1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/alert.black.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/button2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/text.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pie4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/buttonr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/pdf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/down.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/icons/image2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/mnesia_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/dets_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/mnesia_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_SUITE_data/server_root/htdocs/dets_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/a.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/back.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/uu.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie0.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/sound2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/hand.right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/compressed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/ps.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/continued.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/tex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/generic.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/poweredby.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/tar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/comp.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/buttonl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/generic.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/comp.blue.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/image3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/generic.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/star_blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/image1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/quill.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/broken.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/bomb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/alert.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button10.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/dir.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/index.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/dvi.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/binhex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/left.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/sphere2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/box2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/icon.sheet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/star.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/c.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/unknown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/world2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/patch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/burst.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/layout.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/world1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/link.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/ball.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/movie.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/htdig.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/sphere1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/sound1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/folder.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/script.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/uuencoded.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/p.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/f.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/ball.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/forward.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/folder.open.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/apache_pb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/hand.up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/transfer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/portal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/screw1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/screw2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/binary.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/box1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/alert.black.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/button2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/text.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pie4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/buttonr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/pdf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/down.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/icons/image2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/mnesia_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/dets_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/mnesia_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/test/httpd_test_data/server_root/htdocs/dets_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_logger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_random_html.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_slave.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_client.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/httpd_load_test/hdlt_ctrl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/a.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/back.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/uu.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie0.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/sound2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/hand.right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/compressed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/ps.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/continued.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/tex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/generic.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/poweredby.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/tar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/comp.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/buttonl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/generic.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/comp.blue.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/image3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/generic.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/star_blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/image1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/quill.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/broken.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/bomb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/alert.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button10.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/dir.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/index.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/dvi.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/binhex.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/left.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/sphere2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/box2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/icon.sheet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/star.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/c.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/unknown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/world2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/patch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/burst.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/layout.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/world1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/link.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/ball.red.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/movie.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/htdig.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/sphere1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/sound1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/folder.sec.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/script.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/uuencoded.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/p.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/f.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/ball.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/forward.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/folder.open.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/apache_pb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/hand.up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/transfer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/portal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/screw1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/screw2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/binary.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/box1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/alert.black.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/button2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/text.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pie4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/buttonr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/pdf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/down.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/icons/image2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/mnesia_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/dets_secret/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/mnesia_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/examples/server_root/htdocs/dets_open/dummy.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/doc/src/marting_tankar.sdw",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/inets/doc/archive/rfc2616.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/otp_mibs/ebin/otp_mib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/otp_mibs/priv/mibs/OTP-MIB.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/otp_mibs/priv/mibs/OTP-REG.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/otp_mibs/priv/mibs/OTP-TC.bin",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/ebin/crypto_ec_curves.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/ebin/crypto.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/test/crypto_SUITE_data/gcmtestvectors.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/test/crypto_SUITE_data/aesmmt.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/test/crypto_SUITE_data/cmactestvectors.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/test/crypto_SUITE_data/KAT_AES.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/crypto/test/crypto_SUITE_data/aes_ccm_vectors/ccmtestvectors.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_pp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gen_fsm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/otp_internal.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/qlc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/array.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/edlin_expand.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/io_lib_format.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_bits.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/rand.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/qlc_pt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/escript.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/shell.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dict.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gen_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/uri_string.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_abstract_code.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gb_trees.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/string.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/shell_default.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_anno.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/pool.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/error_logger_file_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/unicode_util.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/filename.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/ordsets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_compile.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/zip.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/maps.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/base64.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_eval.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/unicode.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/ms_transform.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/timer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/supervisor_bridge.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/calendar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/orddict.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/io_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_posix_msg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dets_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_tar.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/slave.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/eval_bits.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_error.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/filelib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/io_lib_pretty.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/binary.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/win32reg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/sets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dets_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gen_statem.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/epp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/re.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/sys.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/beam_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/digraph.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/queue.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/proc_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/lists.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/random.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dets_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/edlin.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/ets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/sofs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/supervisor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/error_logger_tty_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dets_v9.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gb_sets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/io_lib_fread.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_expand_records.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/dets.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_parse.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/file_sorter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/proplists.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_lint.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/gen_event.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/math.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/digraph_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/erl_internal.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/ebin/log_mf_h.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/test.jar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/bad_eocd.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/exploit.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/bad_central_directory.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/bad_crc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/abc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/zip_SUITE_data/bad_file_header.zip",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/gnu.tar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/cooked_tar_problem.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/sparse00.tar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/sparse01.tar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/sparse10.tar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/tar_SUITE_data/bsd.tar",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/dets_SUITE_data/version_9a.dets",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/dets_SUITE_data/version_8.dets",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/dets_SUITE_data/version_9b_phash.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf16_big_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf16_little_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf32_little.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf32_big.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf32_big_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/external_utf16_little_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf32_little_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_latin1.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/external_utf16_big_bom.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf16_big.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/stdlib/test/io_proto_SUITE_data/testdata_utf16_little.dat",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_udp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_stats.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_transport.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_erl_dist_encoder_mc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_term_id_gen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_sdp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_config.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_erl_dist_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_mini_decoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_misc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_filter.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_user_default.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_scanner.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_digit_map.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_edist_compress.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_udp_server.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_messenger_misc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_trans_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_mini_parser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_term_id.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_trans_sender.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_text_parser_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_timer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_messenger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp_accept_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_udp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_name_resolver_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_transformer_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_config_misc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_ber_media_gateway_control_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_monitor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp_accept.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_encoder_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_per_media_gateway_control_prev3b.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_prev3a.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_binary_encoder.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_tcp_connection.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_prev3c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_pretty_text_encoder_v3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/ebin/megaco_compact_text_encoder_v1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/src/flex/megaco_flex_scanner_drv.flex.src",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/meas/megaco_codec_mstone2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/meas/megaco_codec_mstone_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/meas/megaco_codec_transform.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/meas/megaco_codec_meas.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/meas/megaco_codec_mstone1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/simple/megaco_simple_mg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/examples/simple/megaco_simple_mgc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/single_node_config.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/call_flow_cont.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/megaco_sys_arch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/mstone1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/MG_startup_call_flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/distr_node_config.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/MGC_startup_call_flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/MG-startup_flow_noMID.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/src/call_flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/standard/draft-ietf-megaco-h248v2-04.txt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/megaco/doc/standard/implementors_guide_v10-13.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_no_io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_daemon_channel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_transport.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_info.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_shell.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_cli.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_client_channel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_sftpd_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_sftp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_bits.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/sshc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_system_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_acceptor_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_subsystem_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_sftpd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_message.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_server_key_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_server_channel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_server_channel_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_file.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_auth.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_connection.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_client_key_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/sshd_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_sftpd_file_api.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_dbg.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_connection_handler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_connection_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_options.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_xfer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_channel.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_io.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/ebin/ssh_acceptor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/examples/ssh_sample_cli.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ssh/doc/src/SSH_protocols.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/odbc/ebin/odbc_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/odbc/ebin/odbc_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/odbc/ebin/odbc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/odbc/doc/src/odbc_app_arc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ftp/ebin/ftp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ftp/ebin/ftp_sup.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ftp/ebin/ftp_app.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ftp/ebin/ftp_progress.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/ftp/ebin/ftp_response.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_tv_table.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_perf_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_mod_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/etop_tr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_persistent_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_port_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/etop.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_tv_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_bin_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_timer_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_multi_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_pro_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_procinfo.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_info_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_trace_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_proc_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/ttb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_sched_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_app_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_sys_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_term_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_virtual_list_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_gen_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/ttb_et.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_port_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_atom_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_int_tab_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_fun_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_dist_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_table_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_detail_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_alloc_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_html_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_mem_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_html_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/observer_traceoptions_wx.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/etop_txt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/cdv_ets_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/ebin/crashdump_viewer.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/priv/erlang_observer.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/doc/src/et_processes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/observer/doc/src/et_modsprocs.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/ebin/docgen_otp_specs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/ebin/docgen_edoc_xml_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/ebin/docgen_xmerl_xml_cb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/images/erlang-logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/images/erlang-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/images/erlang-old.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/js/flipmenu/flip_open.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/js/flipmenu/flip_closed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/priv/js/flipmenu/flip_static.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_docgen/doc/src/man.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_regexp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_eventp.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_old_dom.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_validate.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xpath_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_text.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_otpsgml.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xml.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_b64Bin_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sgml.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xpath_parse.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_simple_dom.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser_utf8.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xpath_pred.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xpath_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xsd_type.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser_latin1.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_uri.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser_utf16le.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xsd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser_utf16be.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_html.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_ucs.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xlate.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_xpath.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_simple.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_sax_parser_list.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/ebin/xmerl_b64Bin.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/oasis.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/xmltest.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/japanese.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/ibm.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/sun.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_std_SUITE_data/w3c-copyright-19980720.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_NIST2002-01-16_SUITE_data/w3c-copyright-19990405.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_NIST2002-01-16_SUITE_data/nisttest.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_MS2002-01-16_SUITE_data/w3c-copyright-19990405.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_MS2002-01-16_SUITE_data/msxsdtest.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_Sun2002-01-16_SUITE_data/w3c-copyright-19990405.html",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_Sun2002-01-16_SUITE_data/suntest.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_SUITE_data/misc.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_SUITE_data/cpd.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_SUITE_data/eventp/CelloMOM.xml",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/test/xmerl_xsd_SUITE_data/sis/IntegratedSite.xsd",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/xmerl/doc/examples/sdocbook2xhtml.erl",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/parsetools/ebin/leex.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/parsetools/ebin/yeccparser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/parsetools/ebin/yeccscan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/parsetools/ebin/yecc.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/src/README.internal",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/test/ei_tmo_SUITE_data/ei_tmo_test.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/test/ei_encode_SUITE_data/ei_encode_test.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/test/erl_ext_SUITE_data/ext_test.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/test/ei_decode_SUITE_data/ei_decode_test.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/erl_interface/test/ei_accept_SUITE_data/ei_accept_test.c",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eldap/ebin/ELDAPv3.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eldap/ebin/eldap.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/eldap/ebin/ELDAPv3.asn1db",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_iserver.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_filedialog_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_src_view.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_break_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/debugger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/int.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_code.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_settings.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_mon.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_ieval.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_view.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_debugged.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_trace_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_winman.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_interpret.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_icmd.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/i.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_istk.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_mon_win.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_idb.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_trace.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_wx_break.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/ebin/dbg_iload.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/priv/debugger.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/priv/erlang_bug.png",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/test/debugger_testdoc.fm5",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/cond_break_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/line_break_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/function_break_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/attach.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/interpret.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/monitor.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/debugger/doc/src/images/view.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_recomment.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_comment_scan.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_prettypr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/igor.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_syntax_lib.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_syntax.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/epp_dodger.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/merl_transform.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/erl_tidy.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/merl.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/ebin/prettypr.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/syntax_tools/src/merl_transform.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/instrument.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_parser.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/cover.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/fprof.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/make.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/eprof.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_compiler.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_base.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_utils.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_reader.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/xref_scanner.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/cprof.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/tags.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/ebin/lcnt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/test/lcnt_SUITE_data/big_bang_40.lcnt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/test/lcnt_SUITE_data/ehb_3_3_hist.lcnt",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/test/xref_SUITE_data/depr_r9c.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/test/xref_SUITE_data/fun_mfa_r14.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/test/xref_SUITE_data/read/read.beam.v1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/doc/src/venn1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/tools/doc/src/venn2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_gen_ber_bin_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1rt_nif.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_check.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_table.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_constructed_per.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_pretty_format.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_name.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_parser2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1_db.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_gen_check.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_func.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_tok.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_constructed_ber_bin_v2.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_value.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_eval_ext.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_gen_per.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_rtt.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_gen.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/ebin/asn1ct_imm.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_ber.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_uper.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_real_common.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_check.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_per_common.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/prepare_templates.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_per.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/src/asn1rtt_ext.beam",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/AA2.asn1db",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/RANAP-PDU-Contents.asn1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/RANAP-IEs.asn1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/Mvrasn-11-6.asn",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/Mvrasn-18-6.asn",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/rfcs/External-References.asn1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/rfcs/ISO-STANDARD-9541-FONT-ATTRIBUTE-SET.asn1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/rfcs/ISO9541-SN.asn1",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg19.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg21.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg23.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg16.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg5.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg22.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg17.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg12.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg1.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg13.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg4.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg2.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg25.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg11.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg6.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg10.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg24.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg20.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg18.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg15.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg7.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg8.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg9.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg3.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/test/asn1_SUITE_data/megacomessages/Msg14.val",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/doc/src/selective_TypeList.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/doc/src/exclusive_Win_But.gif",
        "/tmp/vanessa/spack-stage/spack-stage-erlang-21.2-gbn5szb3aifzc65m6kvq2qyhcdwaqt6h/spack-src/lib/asn1/doc/src/selective_Window2.gif"
    ],
    "total_files": 10382
}